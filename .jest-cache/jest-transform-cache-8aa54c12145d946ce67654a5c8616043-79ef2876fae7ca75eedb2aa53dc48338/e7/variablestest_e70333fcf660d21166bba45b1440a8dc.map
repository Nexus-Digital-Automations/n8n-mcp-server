{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/variables.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/variables.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createVariableTools } from '../../../src/tools/variables';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nVariable, CreateVariableRequest } from '../../../src/types/n8n';\nimport { UserError } from 'fastmcp';\n\ndescribe('Variable Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register variable tools\n    createVariableTools(getClient, mockServer);\n  });\n\n  it('should register all variable tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(3);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-variables');\n    expect(toolNames).toContain('create-variable');\n    expect(toolNames).toContain('delete-variable');\n  });\n\n  describe('list-variables tool', () => {\n    let listVariablesTool: any;\n\n    beforeEach(() => {\n      listVariablesTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-variables'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(listVariablesTool.name).toBe('list-variables');\n      expect(listVariablesTool.description).toContain('List all environment variables in n8n');\n      expect(listVariablesTool.description).toContain('n8n Enterprise license');\n      expect(listVariablesTool.annotations).toEqual({\n        title: 'List n8n Variables',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should list variables successfully with full data', async () => {\n      const mockVariables: N8nVariable[] = [\n        {\n          id: 'var-1',\n          key: 'API_KEY',\n          value: 'secret-api-key',\n          type: 'string',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-02T00:00:00.000Z',\n        },\n        {\n          id: 'var-2',\n          key: 'DEBUG_MODE',\n          value: 'true',\n          type: 'boolean',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-03T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getVariables.mockResolvedValue({\n        data: mockVariables,\n        nextCursor: 'next-cursor',\n      });\n\n      const result = await listVariablesTool.execute({ limit: 10 });\n\n      expect(mockClient.getVariables).toHaveBeenCalledWith({ limit: 10 });\n      expect(result).toContain('Found 2 variable(s)');\n      expect(result).toContain('**API_KEY**');\n      expect(result).toContain('ID: var-1');\n      expect(result).toContain('Type: string');\n      expect(result).toContain('Value: [HIDDEN]');\n      // Use more flexible date matching to handle timezone differences\n      expect(result).toMatch(/Created: (12\\/31\\/2022|1\\/1\\/2023)/);\n      expect(result).toMatch(/Updated: (1\\/1\\/2023|1\\/2\\/2023|1\\/3\\/2023)/);\n      expect(result).toContain('**DEBUG_MODE**');\n      expect(result).toContain('ID: var-2');\n      expect(result).toContain('Type: boolean');\n      expect(result).toContain('Use cursor \"next-cursor\" to get the next page');\n      // Ensure actual values are hidden for security\n      expect(result).not.toContain('secret-api-key');\n      expect(result).not.toContain('true');\n    });\n\n    it('should list variables with minimal data', async () => {\n      const mockVariables: N8nVariable[] = [\n        {\n          id: 'var-1',\n          key: 'SIMPLE_VAR',\n          value: 'simple-value',\n          type: 'string',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n          // Test with dates but we'll modify the data after creation\n        } as N8nVariable,\n      ];\n\n      // Remove the date fields to test the optional behavior\n      delete (mockVariables[0] as any).createdAt;\n      delete (mockVariables[0] as any).updatedAt;\n\n      mockClient.getVariables.mockResolvedValue({\n        data: mockVariables,\n      });\n\n      const result = await listVariablesTool.execute({});\n\n      expect(mockClient.getVariables).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 1 variable(s)');\n      expect(result).toContain('**SIMPLE_VAR**');\n      expect(result).toContain('ID: var-1');\n      expect(result).toContain('Type: string'); // Default type\n      expect(result).toContain('Value: [HIDDEN]');\n      // When no createdAt/updatedAt provided, these lines should not appear\n      expect(result).not.toContain('Created:');\n      expect(result).not.toContain('Updated:');\n      expect(result).not.toContain('cursor');\n      // Ensure actual value is hidden\n      expect(result).not.toContain('simple-value');\n    });\n\n    it('should handle empty variable list', async () => {\n      mockClient.getVariables.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listVariablesTool.execute({});\n\n      expect(result).toBe('No variables found in the n8n instance.');\n    });\n\n    it('should handle pagination parameters', async () => {\n      mockClient.getVariables.mockResolvedValue({ data: [] });\n\n      await listVariablesTool.execute({ limit: 50, cursor: 'test-cursor' });\n\n      expect(mockClient.getVariables).toHaveBeenCalledWith({\n        limit: 50,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createVariableTools(getClientNull, nullClientServer);\n\n      const listVariablesToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-variables'\n      )?.[0];\n\n      expect(listVariablesToolWithNullClient).toBeDefined();\n      await expect((listVariablesToolWithNullClient as any).execute({})).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.getVariables.mockRejectedValue(licenseError);\n\n      await expect(listVariablesTool.execute({})).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('API request failed');\n      mockClient.getVariables.mockRejectedValue(apiError);\n\n      await expect(listVariablesTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list variables: API request failed')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getVariables.mockRejectedValue('Unknown error string');\n\n      await expect(listVariablesTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list variables with unknown error')\n      );\n    });\n  });\n\n  describe('create-variable tool', () => {\n    let createVariableTool: any;\n\n    beforeEach(() => {\n      createVariableTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-variable'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(createVariableTool.name).toBe('create-variable');\n      expect(createVariableTool.description).toContain('Create a new environment variable in n8n');\n      expect(createVariableTool.description).toContain('n8n Enterprise license');\n      expect(createVariableTool.annotations).toEqual({\n        title: 'Create New Variable',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should create variable successfully with type', async () => {\n      const mockVariable: N8nVariable = {\n        id: 'var-new',\n        key: 'NEW_API_KEY',\n        value: 'new-secret-value',\n        type: 'string',\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n      };\n\n      mockClient.createVariable.mockResolvedValue(mockVariable);\n\n      const result = await createVariableTool.execute({\n        key: 'NEW_API_KEY',\n        value: 'new-secret-value',\n        type: 'string',\n      });\n\n      expect(mockClient.createVariable).toHaveBeenCalledWith({\n        key: 'NEW_API_KEY',\n        value: 'new-secret-value',\n        type: 'string',\n      });\n      expect(result).toContain('✅ Successfully created variable \"NEW_API_KEY\" with ID: var-new');\n      expect(result).toContain('Type: string');\n      expect(result).toContain('Value: [HIDDEN for security]');\n      // Ensure actual value is hidden\n      expect(result).not.toContain('new-secret-value');\n    });\n\n    it('should create variable successfully with default type', async () => {\n      const mockVariable: N8nVariable = {\n        id: 'var-new',\n        key: 'SIMPLE_VAR',\n        value: 'simple-value',\n        type: 'string',\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n      };\n\n      mockClient.createVariable.mockResolvedValue(mockVariable);\n\n      const result = await createVariableTool.execute({\n        key: 'SIMPLE_VAR',\n        value: 'simple-value',\n        // Note: type parameter not provided, should default to 'string'\n      });\n\n      // The implementation should handle undefined type by defaulting to 'string'\n      expect(mockClient.createVariable).toHaveBeenCalledWith({\n        key: 'SIMPLE_VAR',\n        value: 'simple-value',\n        type: undefined, // This is what actually gets passed\n      });\n      expect(result).toContain('✅ Successfully created variable \"SIMPLE_VAR\" with ID: var-new');\n      expect(result).toContain('Type: string');\n      expect(result).toContain('Value: [HIDDEN for security]');\n    });\n\n    it('should create variable with different types', async () => {\n      const mockVariable: N8nVariable = {\n        id: 'var-new',\n        key: 'DEBUG_FLAG',\n        value: 'true',\n        type: 'boolean',\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n      };\n\n      mockClient.createVariable.mockResolvedValue(mockVariable);\n\n      const result = await createVariableTool.execute({\n        key: 'DEBUG_FLAG',\n        value: 'true',\n        type: 'boolean',\n      });\n\n      expect(mockClient.createVariable).toHaveBeenCalledWith({\n        key: 'DEBUG_FLAG',\n        value: 'true',\n        type: 'boolean',\n      });\n      expect(result).toContain('Type: boolean');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createVariableTools(getClientNull, nullClientServer);\n\n      const createVariableToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-variable'\n      )?.[0];\n\n      expect(createVariableToolWithNullClient).toBeDefined();\n      await expect(\n        (createVariableToolWithNullClient as any).execute({ key: 'TEST_VAR', value: 'test-value' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.createVariable.mockRejectedValue(licenseError);\n\n      await expect(\n        createVariableTool.execute({ key: 'TEST_VAR', value: 'test-value' })\n      ).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('Variable key already exists');\n      mockClient.createVariable.mockRejectedValue(apiError);\n\n      await expect(\n        createVariableTool.execute({ key: 'DUPLICATE_VAR', value: 'test-value' })\n      ).rejects.toThrow(new UserError('Failed to create variable: Variable key already exists'));\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.createVariable.mockRejectedValue('Unknown error string');\n\n      await expect(\n        createVariableTool.execute({ key: 'TEST_VAR', value: 'test-value' })\n      ).rejects.toThrow(new UserError('Failed to create variable with unknown error'));\n    });\n  });\n\n  describe('delete-variable tool', () => {\n    let deleteVariableTool: any;\n\n    beforeEach(() => {\n      deleteVariableTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-variable'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(deleteVariableTool.name).toBe('delete-variable');\n      expect(deleteVariableTool.description).toContain(\n        'Delete an environment variable from n8n permanently'\n      );\n      expect(deleteVariableTool.description).toContain('n8n Enterprise license');\n      expect(deleteVariableTool.annotations).toEqual({\n        title: 'Delete Variable',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should delete variable successfully', async () => {\n      mockClient.deleteVariable.mockResolvedValue(undefined);\n\n      const result = await deleteVariableTool.execute({\n        variableId: 'var-1',\n      });\n\n      expect(mockClient.deleteVariable).toHaveBeenCalledWith('var-1');\n      expect(result).toBe('✅ Successfully deleted variable with ID: var-1');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createVariableTools(getClientNull, nullClientServer);\n\n      const deleteVariableToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-variable'\n      )?.[0];\n\n      expect(deleteVariableToolWithNullClient).toBeDefined();\n      await expect(\n        (deleteVariableToolWithNullClient as any).execute({ variableId: 'var-1' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.deleteVariable.mockRejectedValue(licenseError);\n\n      await expect(deleteVariableTool.execute({ variableId: 'var-1' })).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('Variable not found');\n      mockClient.deleteVariable.mockRejectedValue(apiError);\n\n      await expect(deleteVariableTool.execute({ variableId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to delete variable: Variable not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteVariable.mockRejectedValue('Unknown error string');\n\n      await expect(deleteVariableTool.execute({ variableId: 'var-1' })).rejects.toThrow(\n        new UserError('Failed to delete variable with unknown error')\n      );\n    });\n  });\n\n  describe('parameter validation', () => {\n    it('should validate variable ID parameters', () => {\n      const deleteVariableTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-variable'\n      )[0];\n\n      expect(deleteVariableTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate create variable parameters', () => {\n      const createVariableTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-variable'\n      )[0];\n\n      expect(createVariableTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate list variables parameters', () => {\n      const listVariablesTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-variables'\n      )[0];\n\n      expect(listVariablesTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n  });\n\n  describe('security considerations', () => {\n    it('should never expose actual variable values in list output', async () => {\n      const mockVariables: N8nVariable[] = [\n        {\n          id: 'var-1',\n          key: 'SECRET_KEY',\n          value: 'super-secret-password-123',\n          type: 'string',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        {\n          id: 'var-2',\n          key: 'API_TOKEN',\n          value: 'sk-1234567890abcdef',\n          type: 'string',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n      ];\n\n      mockClient.getVariables.mockResolvedValue({\n        data: mockVariables,\n      });\n\n      const result = await mockServer.addTool.mock.calls\n        .find((call: any) => call[0].name === 'list-variables')[0]\n        .execute({});\n\n      // Ensure no actual values are leaked\n      expect(result).not.toContain('super-secret-password-123');\n      expect(result).not.toContain('sk-1234567890abcdef');\n      expect(result).toContain('[HIDDEN]');\n    });\n\n    it('should never expose actual variable values in create output', async () => {\n      const mockVariable: N8nVariable = {\n        id: 'var-new',\n        key: 'NEW_SECRET',\n        value: 'extremely-secret-value',\n        type: 'string',\n        createdAt: '2024-01-01T00:00:00Z',\n        updatedAt: '2024-01-01T00:00:00Z',\n      };\n\n      mockClient.createVariable.mockResolvedValue(mockVariable);\n\n      const result = await mockServer.addTool.mock.calls\n        .find((call: any) => call[0].name === 'create-variable')[0]\n        .execute({\n          key: 'NEW_SECRET',\n          value: 'extremely-secret-value',\n          type: 'string',\n        });\n\n      // Ensure no actual value is leaked\n      expect(result).not.toContain('extremely-secret-value');\n      expect(result).toContain('[HIDDEN for security]');\n    });\n\n    it('should handle different variable types securely', async () => {\n      const mockVariables: N8nVariable[] = [\n        {\n          id: 'var-1',\n          key: 'STRING_VAR',\n          value: 'secret-string',\n          type: 'string',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        {\n          id: 'var-2',\n          key: 'NUMBER_VAR',\n          value: '12345',\n          type: 'number',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        {\n          id: 'var-3',\n          key: 'BOOLEAN_VAR',\n          value: 'true',\n          type: 'boolean',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n        {\n          id: 'var-4',\n          key: 'JSON_VAR',\n          value: '{\"secret\": \"value\"}',\n          type: 'json',\n          createdAt: '2024-01-01T00:00:00Z',\n          updatedAt: '2024-01-01T00:00:00Z',\n        },\n      ];\n\n      mockClient.getVariables.mockResolvedValue({\n        data: mockVariables,\n      });\n\n      const result = await mockServer.addTool.mock.calls\n        .find((call: any) => call[0].name === 'list-variables')[0]\n        .execute({});\n\n      // Ensure no actual values are leaked for any type\n      expect(result).not.toContain('secret-string');\n      expect(result).not.toContain('12345');\n      expect(result).not.toContain('true');\n      expect(result).not.toContain('{\"secret\": \"value\"}');\n      // But types should be shown\n      expect(result).toContain('Type: string');\n      expect(result).toContain('Type: number');\n      expect(result).toContain('Type: boolean');\n      expect(result).toContain('Type: json');\n    });\n  });\n});\n"],"version":3}