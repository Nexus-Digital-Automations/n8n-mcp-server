{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/auth/authProvider.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/auth/authProvider.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport {\n  AuthProvider,\n  BaseAuthProvider,\n  RequestContext,\n  AuthResult,\n  AuthenticatedUser,\n} from '../../../src/auth/authProvider';\n\n// Test implementation of BaseAuthProvider for testing abstract methods\nclass TestAuthProvider extends BaseAuthProvider {\n  private shouldAuthenticate: boolean;\n  private mockUser: AuthenticatedUser | null;\n\n  constructor(shouldAuthenticate = true, mockUser: AuthenticatedUser | null = null) {\n    super();\n    this.shouldAuthenticate = shouldAuthenticate;\n    this.mockUser = mockUser || {\n      id: 'test-user',\n      name: 'Test User',\n      email: 'test@example.com',\n      roles: ['member'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n      n8nApiKey: 'test-api-key',\n      n8nBaseUrl: 'https://test.n8n.io',\n    };\n  }\n\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    if (!this.shouldAuthenticate) {\n      return {\n        success: false,\n        error: 'Authentication failed',\n      };\n    }\n\n    if (!this.mockUser) {\n      return {\n        success: false,\n        error: 'No mock user configured',\n      };\n    }\n\n    return {\n      success: true,\n      user: this.mockUser,\n      context: {\n        authType: 'test',\n      },\n    };\n  }\n\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    return this.authenticate(context);\n  }\n\n  // Expose protected method for testing\n  public testCreatePermissions(roles: string[]) {\n    return this.createPermissions(roles);\n  }\n}\n\ndescribe('AuthProvider Interface and Base Implementation', () => {\n  let authProvider: TestAuthProvider;\n  let mockUser: AuthenticatedUser;\n  let mockContext: RequestContext;\n\n  beforeEach(() => {\n    mockUser = {\n      id: 'test-user',\n      name: 'Test User',\n      email: 'test@example.com',\n      roles: ['member'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n      n8nApiKey: 'test-api-key',\n      n8nBaseUrl: 'https://test.n8n.io',\n    };\n\n    mockContext = {\n      clientId: 'test-client',\n      headers: {\n        authorization: 'Bearer test-token',\n      },\n      metadata: {},\n      user: mockUser,\n    };\n\n    authProvider = new TestAuthProvider(true, mockUser);\n  });\n\n  describe('Authentication Flow', () => {\n    it('should authenticate successfully', async () => {\n      const result = await authProvider.authenticate(mockContext);\n\n      expect(result.success).toBe(true);\n      expect(result.user).toEqual(mockUser);\n      expect(result.context).toEqual({ authType: 'test' });\n      expect(result.error).toBeUndefined();\n    });\n\n    it('should handle authentication failure', async () => {\n      const failingProvider = new TestAuthProvider(false);\n      const result = await failingProvider.authenticate(mockContext);\n\n      expect(result.success).toBe(false);\n      expect(result.error).toBe('Authentication failed');\n      expect(result.user).toBeUndefined();\n    });\n\n    it('should refresh authentication', async () => {\n      const result = await authProvider.refresh(mockContext);\n\n      expect(result.success).toBe(true);\n      expect(result.user).toEqual(mockUser);\n    });\n  });\n\n  describe('Tool Access Control', () => {\n    it('should deny access when user is not authenticated', async () => {\n      const unauthenticatedContext = { ...mockContext, user: undefined };\n      const hasAccess = await authProvider.canAccessTool('list-workflows', unauthenticatedContext);\n\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to community tools for authenticated users', async () => {\n      const hasAccess = await authProvider.canAccessTool('init-n8n', mockContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should allow access to workflow tools for users with workflow permissions', async () => {\n      const hasAccess = await authProvider.canAccessTool('list-workflows', mockContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should deny access to enterprise tools for non-enterprise users', async () => {\n      const hasAccess = await authProvider.canAccessTool('list-projects', mockContext);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to enterprise tools for enterprise users', async () => {\n      const enterpriseUser = {\n        ...mockUser,\n        roles: ['admin'],\n        permissions: {\n          ...mockUser.permissions,\n          enterprise: true,\n        },\n      };\n      const enterpriseContext = { ...mockContext, user: enterpriseUser };\n\n      const hasAccess = await authProvider.canAccessTool('list-projects', enterpriseContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should deny access to user management tools for non-admin users', async () => {\n      const hasAccess = await authProvider.canAccessTool('list-users', mockContext);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to user management tools for admin users', async () => {\n      const adminUser = {\n        ...mockUser,\n        roles: ['admin'],\n        permissions: {\n          ...mockUser.permissions,\n          users: true,\n        },\n      };\n      const adminContext = { ...mockContext, user: adminUser };\n\n      const hasAccess = await authProvider.canAccessTool('list-users', adminContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should default to community access for unknown tools', async () => {\n      const hasAccess = await authProvider.canAccessTool('unknown-tool', mockContext);\n      expect(hasAccess).toBe(true); // Community access\n    });\n\n    it('should handle credential tools based on permissions', async () => {\n      // Member user without credential permissions\n      let hasAccess = await authProvider.canAccessTool('list-credentials', mockContext);\n      expect(hasAccess).toBe(false);\n\n      // Editor user with credential permissions\n      const editorUser = {\n        ...mockUser,\n        roles: ['editor'],\n        permissions: {\n          ...mockUser.permissions,\n          credentials: true,\n        },\n      };\n      const editorContext = { ...mockContext, user: editorUser };\n\n      hasAccess = await authProvider.canAccessTool('list-credentials', editorContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should handle audit tools based on permissions', async () => {\n      // Regular user without audit permissions\n      let hasAccess = await authProvider.canAccessTool('get-audit-logs', mockContext);\n      expect(hasAccess).toBe(false);\n\n      // Admin user with audit permissions\n      const adminUser = {\n        ...mockUser,\n        roles: ['admin'],\n        permissions: {\n          ...mockUser.permissions,\n          audit: true,\n        },\n      };\n      const adminContext = { ...mockContext, user: adminUser };\n\n      hasAccess = await authProvider.canAccessTool('get-audit-logs', adminContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should handle tag tools with appropriate permissions', async () => {\n      // List tags (community feature)\n      let hasAccess = await authProvider.canAccessTool('list-tags', mockContext);\n      expect(hasAccess).toBe(true);\n\n      // Create/update/delete tags (workflow permission required)\n      hasAccess = await authProvider.canAccessTool('create-tag', mockContext);\n      expect(hasAccess).toBe(true); // User has workflow permissions\n\n      // Test user without workflow permissions\n      const limitedUser = {\n        ...mockUser,\n        permissions: {\n          ...mockUser.permissions,\n          workflows: false,\n        },\n      };\n      const limitedContext = { ...mockContext, user: limitedUser };\n\n      hasAccess = await authProvider.canAccessTool('create-tag', limitedContext);\n      expect(hasAccess).toBe(false);\n    });\n  });\n\n  describe('Resource Access Control', () => {\n    it('should deny access when user is not authenticated', async () => {\n      const unauthenticatedContext = { ...mockContext, user: undefined };\n      const hasAccess = await authProvider.canAccessResource(\n        'n8n://workflows/123',\n        unauthenticatedContext\n      );\n\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to workflow resources for users with workflow permissions', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://workflows/123', mockContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should allow access to execution resources for users with execution permissions', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://executions/456', mockContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should deny access to credential resources for users without credential permissions', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://credentials/789', mockContext);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to credential resources for users with credential permissions', async () => {\n      const editorUser = {\n        ...mockUser,\n        permissions: {\n          ...mockUser.permissions,\n          credentials: true,\n        },\n      };\n      const editorContext = { ...mockContext, user: editorUser };\n\n      const hasAccess = await authProvider.canAccessResource(\n        'n8n://credentials/789',\n        editorContext\n      );\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should deny access to user resources for non-admin users', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://users/123', mockContext);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to user resources for admin users', async () => {\n      const adminUser = {\n        ...mockUser,\n        permissions: {\n          ...mockUser.permissions,\n          users: true,\n        },\n      };\n      const adminContext = { ...mockContext, user: adminUser };\n\n      const hasAccess = await authProvider.canAccessResource('n8n://users/123', adminContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should deny access to project resources for non-enterprise users', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://projects/456', mockContext);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should allow access to project resources for enterprise users', async () => {\n      const enterpriseUser = {\n        ...mockUser,\n        permissions: {\n          ...mockUser.permissions,\n          enterprise: true,\n        },\n      };\n      const enterpriseContext = { ...mockContext, user: enterpriseUser };\n\n      const hasAccess = await authProvider.canAccessResource(\n        'n8n://projects/456',\n        enterpriseContext\n      );\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should default to community access for unknown resource types', async () => {\n      const hasAccess = await authProvider.canAccessResource('n8n://unknown/123', mockContext);\n      expect(hasAccess).toBe(true);\n    });\n\n    it('should handle non-n8n resource URIs with community access', async () => {\n      const hasAccess = await authProvider.canAccessResource(\n        'https://example.com/api',\n        mockContext\n      );\n      expect(hasAccess).toBe(true);\n    });\n  });\n\n  describe('Permission System', () => {\n    it('should create correct permissions for anonymous users', () => {\n      const permissions = authProvider.testCreatePermissions(['anonymous']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: false,\n        workflows: false,\n        executions: false,\n        credentials: false,\n        users: false,\n        audit: false,\n      });\n    });\n\n    it('should create correct permissions for member users', () => {\n      const permissions = authProvider.testCreatePermissions(['member']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      });\n    });\n\n    it('should create correct permissions for editor users', () => {\n      const permissions = authProvider.testCreatePermissions(['editor']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: true,\n        users: false,\n        audit: false,\n      });\n    });\n\n    it('should create correct permissions for admin users', () => {\n      const permissions = authProvider.testCreatePermissions(['admin']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: true,\n        workflows: true,\n        executions: true,\n        credentials: true,\n        users: true,\n        audit: true,\n      });\n    });\n\n    it('should create correct permissions for owner users', () => {\n      const permissions = authProvider.testCreatePermissions(['owner']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: true,\n        workflows: true,\n        executions: true,\n        credentials: true,\n        users: true,\n        audit: true,\n      });\n    });\n\n    it('should handle multiple roles correctly (highest permission wins)', () => {\n      const permissions = authProvider.testCreatePermissions(['member', 'admin']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: true,\n        workflows: true,\n        executions: true,\n        credentials: true,\n        users: true,\n        audit: true,\n      });\n    });\n\n    it('should handle empty roles array', () => {\n      const permissions = authProvider.testCreatePermissions([]);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: false,\n        workflows: false,\n        executions: false,\n        credentials: false,\n        users: false,\n        audit: false,\n      });\n    });\n\n    it('should handle unknown roles as basic community access', () => {\n      const permissions = authProvider.testCreatePermissions(['unknown-role']);\n\n      expect(permissions).toEqual({\n        community: true,\n        enterprise: false,\n        workflows: false,\n        executions: false,\n        credentials: false,\n        users: false,\n        audit: false,\n      });\n    });\n  });\n\n  describe('Context and Data Types', () => {\n    it('should handle RequestContext with minimal data', () => {\n      const minimalContext: RequestContext = {};\n      expect(minimalContext).toBeDefined();\n    });\n\n    it('should handle RequestContext with full data', () => {\n      const fullContext: RequestContext = {\n        clientId: 'client-123',\n        headers: {\n          authorization: 'Bearer token',\n          'x-custom-header': 'value',\n        },\n        metadata: {\n          userAgent: 'test-client/1.0',\n          timestamp: Date.now(),\n        },\n        user: mockUser,\n      };\n\n      expect(fullContext.clientId).toBe('client-123');\n      expect(fullContext.headers?.['authorization']).toBe('Bearer token');\n      expect(fullContext.metadata?.userAgent).toBe('test-client/1.0');\n      expect(fullContext.user).toEqual(mockUser);\n    });\n\n    it('should validate AuthResult structure for success', () => {\n      const successResult: AuthResult = {\n        success: true,\n        user: mockUser,\n        context: {\n          authType: 'test',\n          sessionId: 'session-123',\n        },\n      };\n\n      expect(successResult.success).toBe(true);\n      expect(successResult.user).toEqual(mockUser);\n      expect(successResult.error).toBeUndefined();\n    });\n\n    it('should validate AuthResult structure for failure', () => {\n      const failureResult: AuthResult = {\n        success: false,\n        error: 'Authentication failed',\n      };\n\n      expect(failureResult.success).toBe(false);\n      expect(failureResult.error).toBe('Authentication failed');\n      expect(failureResult.user).toBeUndefined();\n    });\n\n    it('should validate AuthenticatedUser structure', () => {\n      expect(mockUser.id).toBe('test-user');\n      expect(mockUser.roles).toContain('member');\n      expect(mockUser.permissions.community).toBe(true);\n      expect(typeof mockUser.permissions).toBe('object');\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle null/undefined user gracefully in tool access', async () => {\n      const contextWithNullUser = { ...mockContext, user: null as any };\n      const hasAccess = await authProvider.canAccessTool('list-workflows', contextWithNullUser);\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should handle null/undefined user gracefully in resource access', async () => {\n      const contextWithNullUser = { ...mockContext, user: null as any };\n      const hasAccess = await authProvider.canAccessResource(\n        'n8n://workflows/123',\n        contextWithNullUser\n      );\n      expect(hasAccess).toBe(false);\n    });\n\n    it('should handle malformed permissions object', async () => {\n      const userWithMalformedPermissions = {\n        ...mockUser,\n        permissions: null as any,\n      };\n      const contextWithMalformedPermissions = {\n        ...mockContext,\n        user: userWithMalformedPermissions,\n      };\n\n      // Should not throw an error, but deny access\n      await expect(\n        authProvider.canAccessTool('list-workflows', contextWithMalformedPermissions)\n      ).rejects.toThrow();\n    });\n\n    it('should handle empty string tool names', async () => {\n      const hasAccess = await authProvider.canAccessTool('', mockContext);\n      expect(hasAccess).toBe(true); // Default to community access\n    });\n\n    it('should handle empty string resource URIs', async () => {\n      const hasAccess = await authProvider.canAccessResource('', mockContext);\n      expect(hasAccess).toBe(true); // Default to community access\n    });\n\n    it('should handle special characters in tool names', async () => {\n      const hasAccess = await authProvider.canAccessTool(\n        'tool-with-special-chars!@#$%',\n        mockContext\n      );\n      expect(hasAccess).toBe(true); // Default to community access\n    });\n\n    it('should handle special characters in resource URIs', async () => {\n      const hasAccess = await authProvider.canAccessResource(\n        'n8n://resources/with-special@chars!',\n        mockContext\n      );\n      expect(hasAccess).toBe(true); // Default to community access\n    });\n  });\n});\n"],"version":3}