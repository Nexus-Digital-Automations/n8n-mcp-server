d2bf02394f4f74e74f3f13ad3a9bf7bd
"use strict";

/* istanbul ignore next */
function cov_1mp0bgbitd() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/monitoring.ts";
  var hash = "62fb146363bdd749234c0d849b2fea4b38d21e1a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/monitoring.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 54
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 31
        },
        end: {
          line: 10,
          column: 2
        }
      },
      "5": {
        start: {
          line: 11,
          column: 32
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "6": {
        start: {
          line: 25,
          column: 34
        },
        end: {
          line: 32,
          column: 2
        }
      },
      "7": {
        start: {
          line: 33,
          column: 29
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "8": {
        start: {
          line: 38,
          column: 24
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "9": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 100,
          column: 7
        }
      },
      "10": {
        start: {
          line: 66,
          column: 27
        },
        end: {
          line: 66,
          column: 38
        }
      },
      "11": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 69,
          column: 13
        }
      },
      "12": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 68,
          column: 104
        }
      },
      "13": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "14": {
        start: {
          line: 71,
          column: 33
        },
        end: {
          line: 71,
          column: 74
        }
      },
      "15": {
        start: {
          line: 73,
          column: 40
        },
        end: {
          line: 76,
          column: 17
        }
      },
      "16": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "17": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 94,
          column: 73
        }
      },
      "18": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 105
        }
      },
      "19": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "20": {
        start: {
          line: 114,
          column: 27
        },
        end: {
          line: 114,
          column: 38
        }
      },
      "21": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "22": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 104
        }
      },
      "23": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "24": {
        start: {
          line: 119,
          column: 33
        },
        end: {
          line: 119,
          column: 74
        }
      },
      "25": {
        start: {
          line: 121,
          column: 43
        },
        end: {
          line: 125,
          column: 17
        }
      },
      "26": {
        start: {
          line: 127,
          column: 40
        },
        end: {
          line: 130,
          column: 17
        }
      },
      "27": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "28": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 145,
          column: 212
        }
      },
      "29": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 103
        }
      },
      "30": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "31": {
        start: {
          line: 165,
          column: 27
        },
        end: {
          line: 165,
          column: 38
        }
      },
      "32": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "33": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 104
        }
      },
      "34": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "35": {
        start: {
          line: 171,
          column: 28
        },
        end: {
          line: 171,
          column: 38
        }
      },
      "36": {
        start: {
          line: 172,
          column: 42
        },
        end: {
          line: 177,
          column: 17
        }
      },
      "37": {
        start: {
          line: 178,
          column: 34
        },
        end: {
          line: 178,
          column: 93
        }
      },
      "38": {
        start: {
          line: 179,
          column: 32
        },
        end: {
          line: 179,
          column: 34
        }
      },
      "39": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 187,
          column: 17
        }
      },
      "40": {
        start: {
          line: 181,
          column: 37
        },
        end: {
          line: 181,
          column: 78
        }
      },
      "41": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 43
        }
      },
      "42": {
        start: {
          line: 185,
          column: 37
        },
        end: {
          line: 185,
          column: 77
        }
      },
      "43": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 46
        }
      },
      "44": {
        start: {
          line: 188,
          column: 40
        },
        end: {
          line: 188,
          column: 95
        }
      },
      "45": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 121
        }
      },
      "46": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "47": {
        start: {
          line: 192,
          column: 39
        },
        end: {
          line: 194,
          column: 22
        }
      },
      "48": {
        start: {
          line: 196,
          column: 45
        },
        end: {
          line: 196,
          column: 164
        }
      },
      "49": {
        start: {
          line: 196,
          column: 81
        },
        end: {
          line: 196,
          column: 163
        }
      },
      "50": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 199,
          column: 21
        }
      },
      "51": {
        start: {
          line: 198,
          column: 24
        },
        end: {
          line: 198,
          column: 133
        }
      },
      "52": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 202,
          column: 21
        }
      },
      "53": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 33
        }
      },
      "54": {
        start: {
          line: 203,
          column: 36
        },
        end: {
          line: 213,
          column: 21
        }
      },
      "55": {
        start: {
          line: 205,
          column: 75
        },
        end: {
          line: 205,
          column: 97
        }
      },
      "56": {
        start: {
          line: 206,
          column: 71
        },
        end: {
          line: 206,
          column: 91
        }
      },
      "57": {
        start: {
          line: 207,
          column: 72
        },
        end: {
          line: 207,
          column: 94
        }
      },
      "58": {
        start: {
          line: 215,
          column: 48
        },
        end: {
          line: 215,
          column: 124
        }
      },
      "59": {
        start: {
          line: 215,
          column: 77
        },
        end: {
          line: 215,
          column: 123
        }
      },
      "60": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 226,
          column: 21
        }
      },
      "61": {
        start: {
          line: 217,
          column: 47
        },
        end: {
          line: 219,
          column: 104
        }
      },
      "62": {
        start: {
          line: 218,
          column: 41
        },
        end: {
          line: 218,
          column: 52
        }
      },
      "63": {
        start: {
          line: 219,
          column: 38
        },
        end: {
          line: 219,
          column: 103
        }
      },
      "64": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 225,
          column: 25
        }
      },
      "65": {
        start: {
          line: 221,
          column: 28
        },
        end: {
          line: 222,
          column: 98
        }
      },
      "66": {
        start: {
          line: 222,
          column: 64
        },
        end: {
          line: 222,
          column: 69
        }
      },
      "67": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 83
        }
      },
      "68": {
        start: {
          line: 224,
          column: 28
        },
        end: {
          line: 224,
          column: 83
        }
      },
      "69": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 227,
          column: 105
        }
      },
      "70": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 99
        }
      },
      "71": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 83
        }
      },
      "72": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 230,
          column: 108
        }
      },
      "73": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 237,
          column: 21
        }
      },
      "74": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 77
        }
      },
      "75": {
        start: {
          line: 234,
          column: 24
        },
        end: {
          line: 234,
          column: 113
        }
      },
      "76": {
        start: {
          line: 235,
          column: 24
        },
        end: {
          line: 235,
          column: 109
        }
      },
      "77": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 236,
          column: 111
        }
      },
      "78": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 246,
          column: 21
        }
      },
      "79": {
        start: {
          line: 241,
          column: 24
        },
        end: {
          line: 241,
          column: 75
        }
      },
      "80": {
        start: {
          line: 242,
          column: 24
        },
        end: {
          line: 242,
          column: 96
        }
      },
      "81": {
        start: {
          line: 243,
          column: 24
        },
        end: {
          line: 243,
          column: 132
        }
      },
      "82": {
        start: {
          line: 244,
          column: 24
        },
        end: {
          line: 244,
          column: 122
        }
      },
      "83": {
        start: {
          line: 245,
          column: 24
        },
        end: {
          line: 245,
          column: 91
        }
      },
      "84": {
        start: {
          line: 248,
          column: 46
        },
        end: {
          line: 254,
          column: 43
        }
      },
      "85": {
        start: {
          line: 255,
          column: 20
        },
        end: {
          line: 255,
          column: 90
        }
      },
      "86": {
        start: {
          line: 257,
          column: 44
        },
        end: {
          line: 257,
          column: 46
        }
      },
      "87": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 260,
          column: 21
        }
      },
      "88": {
        start: {
          line: 259,
          column: 24
        },
        end: {
          line: 259,
          column: 116
        }
      },
      "89": {
        start: {
          line: 261,
          column: 20
        },
        end: {
          line: 263,
          column: 21
        }
      },
      "90": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 137
        }
      },
      "91": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 266,
          column: 21
        }
      },
      "92": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 103
        }
      },
      "93": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 269,
          column: 21
        }
      },
      "94": {
        start: {
          line: 268,
          column: 24
        },
        end: {
          line: 268,
          column: 112
        }
      },
      "95": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 66
        }
      },
      "96": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 273,
          column: 23
        }
      },
      "97": {
        start: {
          line: 272,
          column: 24
        },
        end: {
          line: 272,
          column: 58
        }
      },
      "98": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 46
        }
      },
      "99": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "100": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 277,
          column: 119
        }
      },
      "101": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 41
        }
      },
      "102": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 104
        }
      },
      "103": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 441,
          column: 7
        }
      },
      "104": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 38
        }
      },
      "105": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "106": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 104
        }
      },
      "107": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "108": {
        start: {
          line: 304,
          column: 32
        },
        end: {
          line: 304,
          column: 34
        }
      },
      "109": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 312,
          column: 17
        }
      },
      "110": {
        start: {
          line: 306,
          column: 37
        },
        end: {
          line: 306,
          column: 78
        }
      },
      "111": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 43
        }
      },
      "112": {
        start: {
          line: 310,
          column: 37
        },
        end: {
          line: 310,
          column: 77
        }
      },
      "113": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 46
        }
      },
      "114": {
        start: {
          line: 313,
          column: 35
        },
        end: {
          line: 313,
          column: 71
        }
      },
      "115": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 70
        }
      },
      "116": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 84
        }
      },
      "117": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "118": {
        start: {
          line: 317,
          column: 40
        },
        end: {
          line: 324,
          column: 21
        }
      },
      "119": {
        start: {
          line: 325,
          column: 35
        },
        end: {
          line: 325,
          column: 37
        }
      },
      "120": {
        start: {
          line: 326,
          column: 37
        },
        end: {
          line: 326,
          column: 39
        }
      },
      "121": {
        start: {
          line: 327,
          column: 44
        },
        end: {
          line: 327,
          column: 46
        }
      },
      "122": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 332,
          column: 21
        }
      },
      "123": {
        start: {
          line: 330,
          column: 24
        },
        end: {
          line: 330,
          column: 61
        }
      },
      "124": {
        start: {
          line: 331,
          column: 24
        },
        end: {
          line: 331,
          column: 56
        }
      },
      "125": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 336,
          column: 21
        }
      },
      "126": {
        start: {
          line: 334,
          column: 24
        },
        end: {
          line: 334,
          column: 62
        }
      },
      "127": {
        start: {
          line: 335,
          column: 24
        },
        end: {
          line: 335,
          column: 54
        }
      },
      "128": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 376,
          column: 21
        }
      },
      "129": {
        start: {
          line: 339,
          column: 42
        },
        end: {
          line: 339,
          column: 79
        }
      },
      "130": {
        start: {
          line: 339,
          column: 69
        },
        end: {
          line: 339,
          column: 78
        }
      },
      "131": {
        start: {
          line: 340,
          column: 48
        },
        end: {
          line: 340,
          column: 71
        }
      },
      "132": {
        start: {
          line: 342,
          column: 24
        },
        end: {
          line: 345,
          column: 25
        }
      },
      "133": {
        start: {
          line: 343,
          column: 28
        },
        end: {
          line: 343,
          column: 118
        }
      },
      "134": {
        start: {
          line: 344,
          column: 28
        },
        end: {
          line: 344,
          column: 62
        }
      },
      "135": {
        start: {
          line: 347,
          column: 53
        },
        end: {
          line: 347,
          column: 144
        }
      },
      "136": {
        start: {
          line: 347,
          column: 83
        },
        end: {
          line: 347,
          column: 143
        }
      },
      "137": {
        start: {
          line: 348,
          column: 24
        },
        end: {
          line: 352,
          column: 25
        }
      },
      "138": {
        start: {
          line: 349,
          column: 57
        },
        end: {
          line: 349,
          column: 150
        }
      },
      "139": {
        start: {
          line: 349,
          column: 116
        },
        end: {
          line: 349,
          column: 149
        }
      },
      "140": {
        start: {
          line: 350,
          column: 28
        },
        end: {
          line: 350,
          column: 123
        }
      },
      "141": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 55
        }
      },
      "142": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 360,
          column: 25
        }
      },
      "143": {
        start: {
          line: 355,
          column: 47
        },
        end: {
          line: 355,
          column: 180
        }
      },
      "144": {
        start: {
          line: 355,
          column: 77
        },
        end: {
          line: 355,
          column: 179
        }
      },
      "145": {
        start: {
          line: 355,
          column: 139
        },
        end: {
          line: 355,
          column: 178
        }
      },
      "146": {
        start: {
          line: 356,
          column: 28
        },
        end: {
          line: 359,
          column: 29
        }
      },
      "147": {
        start: {
          line: 357,
          column: 32
        },
        end: {
          line: 357,
          column: 102
        }
      },
      "148": {
        start: {
          line: 358,
          column: 32
        },
        end: {
          line: 358,
          column: 62
        }
      },
      "149": {
        start: {
          line: 362,
          column: 24
        },
        end: {
          line: 375,
          column: 25
        }
      },
      "150": {
        start: {
          line: 364,
          column: 55
        },
        end: {
          line: 364,
          column: 154
        }
      },
      "151": {
        start: {
          line: 364,
          column: 85
        },
        end: {
          line: 364,
          column: 153
        }
      },
      "152": {
        start: {
          line: 365,
          column: 28
        },
        end: {
          line: 368,
          column: 29
        }
      },
      "153": {
        start: {
          line: 366,
          column: 32
        },
        end: {
          line: 366,
          column: 116
        }
      },
      "154": {
        start: {
          line: 367,
          column: 32
        },
        end: {
          line: 367,
          column: 62
        }
      },
      "155": {
        start: {
          line: 370,
          column: 47
        },
        end: {
          line: 370,
          column: 143
        }
      },
      "156": {
        start: {
          line: 370,
          column: 77
        },
        end: {
          line: 370,
          column: 142
        }
      },
      "157": {
        start: {
          line: 371,
          column: 28
        },
        end: {
          line: 374,
          column: 29
        }
      },
      "158": {
        start: {
          line: 372,
          column: 32
        },
        end: {
          line: 372,
          column: 129
        }
      },
      "159": {
        start: {
          line: 373,
          column: 32
        },
        end: {
          line: 373,
          column: 65
        }
      },
      "160": {
        start: {
          line: 378,
          column: 20
        },
        end: {
          line: 383,
          column: 27
        }
      },
      "161": {
        start: {
          line: 385,
          column: 41
        },
        end: {
          line: 393,
          column: 51
        }
      },
      "162": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 394,
          column: 78
        }
      },
      "163": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 107
        }
      },
      "164": {
        start: {
          line: 396,
          column: 20
        },
        end: {
          line: 403,
          column: 21
        }
      },
      "165": {
        start: {
          line: 397,
          column: 24
        },
        end: {
          line: 397,
          column: 65
        }
      },
      "166": {
        start: {
          line: 398,
          column: 24
        },
        end: {
          line: 398,
          column: 94
        }
      },
      "167": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 399,
          column: 84
        }
      },
      "168": {
        start: {
          line: 400,
          column: 24
        },
        end: {
          line: 400,
          column: 90
        }
      },
      "169": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 401,
          column: 90
        }
      },
      "170": {
        start: {
          line: 402,
          column: 24
        },
        end: {
          line: 402,
          column: 100
        }
      },
      "171": {
        start: {
          line: 404,
          column: 20
        },
        end: {
          line: 410,
          column: 21
        }
      },
      "172": {
        start: {
          line: 405,
          column: 24
        },
        end: {
          line: 405,
          column: 77
        }
      },
      "173": {
        start: {
          line: 406,
          column: 24
        },
        end: {
          line: 408,
          column: 27
        }
      },
      "174": {
        start: {
          line: 407,
          column: 28
        },
        end: {
          line: 407,
          column: 59
        }
      },
      "175": {
        start: {
          line: 409,
          column: 24
        },
        end: {
          line: 409,
          column: 45
        }
      },
      "176": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 417,
          column: 21
        }
      },
      "177": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 412,
          column: 82
        }
      },
      "178": {
        start: {
          line: 413,
          column: 24
        },
        end: {
          line: 415,
          column: 27
        }
      },
      "179": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 414,
          column: 61
        }
      },
      "180": {
        start: {
          line: 416,
          column: 24
        },
        end: {
          line: 416,
          column: 45
        }
      },
      "181": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 424,
          column: 21
        }
      },
      "182": {
        start: {
          line: 419,
          column: 24
        },
        end: {
          line: 419,
          column: 96
        }
      },
      "183": {
        start: {
          line: 420,
          column: 24
        },
        end: {
          line: 422,
          column: 27
        }
      },
      "184": {
        start: {
          line: 421,
          column: 28
        },
        end: {
          line: 421,
          column: 57
        }
      },
      "185": {
        start: {
          line: 423,
          column: 24
        },
        end: {
          line: 423,
          column: 45
        }
      },
      "186": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 62
        }
      },
      "187": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 427,
          column: 99
        }
      },
      "188": {
        start: {
          line: 428,
          column: 20
        },
        end: {
          line: 428,
          column: 80
        }
      },
      "189": {
        start: {
          line: 429,
          column: 20
        },
        end: {
          line: 429,
          column: 87
        }
      },
      "190": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 432,
          column: 21
        }
      },
      "191": {
        start: {
          line: 431,
          column: 24
        },
        end: {
          line: 431,
          column: 110
        }
      },
      "192": {
        start: {
          line: 433,
          column: 20
        },
        end: {
          line: 433,
          column: 41
        }
      },
      "193": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 36
        }
      },
      "194": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 99
        }
      },
      "195": {
        start: {
          line: 443,
          column: 4
        },
        end: {
          line: 513,
          column: 7
        }
      },
      "196": {
        start: {
          line: 455,
          column: 27
        },
        end: {
          line: 455,
          column: 38
        }
      },
      "197": {
        start: {
          line: 456,
          column: 12
        },
        end: {
          line: 458,
          column: 13
        }
      },
      "198": {
        start: {
          line: 457,
          column: 16
        },
        end: {
          line: 457,
          column: 104
        }
      },
      "199": {
        start: {
          line: 459,
          column: 12
        },
        end: {
          line: 511,
          column: 13
        }
      },
      "200": {
        start: {
          line: 460,
          column: 33
        },
        end: {
          line: 460,
          column: 74
        }
      },
      "201": {
        start: {
          line: 462,
          column: 34
        },
        end: {
          line: 471,
          column: 17
        }
      },
      "202": {
        start: {
          line: 473,
          column: 40
        },
        end: {
          line: 473,
          column: 63
        }
      },
      "203": {
        start: {
          line: 474,
          column: 39
        },
        end: {
          line: 476,
          column: 24
        }
      },
      "204": {
        start: {
          line: 478,
          column: 38
        },
        end: {
          line: 478,
          column: 68
        }
      },
      "205": {
        start: {
          line: 480,
          column: 16
        },
        end: {
          line: 485,
          column: 19
        }
      },
      "206": {
        start: {
          line: 487,
          column: 45
        },
        end: {
          line: 492,
          column: 17
        }
      },
      "207": {
        start: {
          line: 493,
          column: 42
        },
        end: {
          line: 498,
          column: 17
        }
      },
      "208": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 507,
          column: 217
        }
      },
      "209": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 95
        }
      },
      "210": {
        start: {
          line: 515,
          column: 4
        },
        end: {
          line: 654,
          column: 7
        }
      },
      "211": {
        start: {
          line: 530,
          column: 27
        },
        end: {
          line: 530,
          column: 38
        }
      },
      "212": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 533,
          column: 13
        }
      },
      "213": {
        start: {
          line: 532,
          column: 16
        },
        end: {
          line: 532,
          column: 104
        }
      },
      "214": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 652,
          column: 13
        }
      },
      "215": {
        start: {
          line: 536,
          column: 42
        },
        end: {
          line: 536,
          column: 83
        }
      },
      "216": {
        start: {
          line: 537,
          column: 37
        },
        end: {
          line: 537,
          column: 59
        }
      },
      "217": {
        start: {
          line: 538,
          column: 34
        },
        end: {
          line: 538,
          column: 106
        }
      },
      "218": {
        start: {
          line: 538,
          column: 97
        },
        end: {
          line: 538,
          column: 105
        }
      },
      "219": {
        start: {
          line: 540,
          column: 28
        },
        end: {
          line: 540,
          column: 38
        }
      },
      "220": {
        start: {
          line: 541,
          column: 42
        },
        end: {
          line: 545,
          column: 17
        }
      },
      "221": {
        start: {
          line: 546,
          column: 34
        },
        end: {
          line: 546,
          column: 93
        }
      },
      "222": {
        start: {
          line: 547,
          column: 32
        },
        end: {
          line: 547,
          column: 67
        }
      },
      "223": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 548,
          column: 72
        }
      },
      "224": {
        start: {
          line: 549,
          column: 16
        },
        end: {
          line: 549,
          column: 71
        }
      },
      "225": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 67
        }
      },
      "226": {
        start: {
          line: 552,
          column: 16
        },
        end: {
          line: 552,
          column: 58
        }
      },
      "227": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 553,
          column: 52
        }
      },
      "228": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 554,
          column: 52
        }
      },
      "229": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 555,
          column: 78
        }
      },
      "230": {
        start: {
          line: 556,
          column: 16
        },
        end: {
          line: 556,
          column: 101
        }
      },
      "231": {
        start: {
          line: 556,
          column: 78
        },
        end: {
          line: 556,
          column: 86
        }
      },
      "232": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 557,
          column: 104
        }
      },
      "233": {
        start: {
          line: 557,
          column: 80
        },
        end: {
          line: 557,
          column: 89
        }
      },
      "234": {
        start: {
          line: 559,
          column: 38
        },
        end: {
          line: 559,
          column: 39
        }
      },
      "235": {
        start: {
          line: 560,
          column: 38
        },
        end: {
          line: 560,
          column: 39
        }
      },
      "236": {
        start: {
          line: 561,
          column: 34
        },
        end: {
          line: 561,
          column: 35
        }
      },
      "237": {
        start: {
          line: 562,
          column: 35
        },
        end: {
          line: 562,
          column: 36
        }
      },
      "238": {
        start: {
          line: 563,
          column: 41
        },
        end: {
          line: 563,
          column: 43
        }
      },
      "239": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 592,
          column: 17
        }
      },
      "240": {
        start: {
          line: 566,
          column: 20
        },
        end: {
          line: 591,
          column: 21
        }
      },
      "241": {
        start: {
          line: 567,
          column: 43
        },
        end: {
          line: 569,
          column: 26
        }
      },
      "242": {
        start: {
          line: 570,
          column: 49
        },
        end: {
          line: 570,
          column: 168
        }
      },
      "243": {
        start: {
          line: 570,
          column: 85
        },
        end: {
          line: 570,
          column: 167
        }
      },
      "244": {
        start: {
          line: 571,
          column: 43
        },
        end: {
          line: 571,
          column: 102
        }
      },
      "245": {
        start: {
          line: 571,
          column: 72
        },
        end: {
          line: 571,
          column: 94
        }
      },
      "246": {
        start: {
          line: 572,
          column: 39
        },
        end: {
          line: 572,
          column: 96
        }
      },
      "247": {
        start: {
          line: 572,
          column: 68
        },
        end: {
          line: 572,
          column: 88
        }
      },
      "248": {
        start: {
          line: 573,
          column: 40
        },
        end: {
          line: 573,
          column: 99
        }
      },
      "249": {
        start: {
          line: 573,
          column: 69
        },
        end: {
          line: 573,
          column: 91
        }
      },
      "250": {
        start: {
          line: 574,
          column: 24
        },
        end: {
          line: 574,
          column: 67
        }
      },
      "251": {
        start: {
          line: 575,
          column: 24
        },
        end: {
          line: 575,
          column: 54
        }
      },
      "252": {
        start: {
          line: 576,
          column: 24
        },
        end: {
          line: 576,
          column: 46
        }
      },
      "253": {
        start: {
          line: 577,
          column: 24
        },
        end: {
          line: 577,
          column: 48
        }
      },
      "254": {
        start: {
          line: 578,
          column: 44
        },
        end: {
          line: 578,
          column: 122
        }
      },
      "255": {
        start: {
          line: 579,
          column: 39
        },
        end: {
          line: 579,
          column: 124
        }
      },
      "256": {
        start: {
          line: 580,
          column: 24
        },
        end: {
          line: 586,
          column: 27
        }
      },
      "257": {
        start: {
          line: 590,
          column: 24
        },
        end: {
          line: 590,
          column: 33
        }
      },
      "258": {
        start: {
          line: 594,
          column: 42
        },
        end: {
          line: 594,
          column: 109
        }
      },
      "259": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 595,
          column: 95
        }
      },
      "260": {
        start: {
          line: 596,
          column: 16
        },
        end: {
          line: 596,
          column: 115
        }
      },
      "261": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 72
        }
      },
      "262": {
        start: {
          line: 598,
          column: 16
        },
        end: {
          line: 598,
          column: 74
        }
      },
      "263": {
        start: {
          line: 599,
          column: 16
        },
        end: {
          line: 599,
          column: 187
        }
      },
      "264": {
        start: {
          line: 601,
          column: 16
        },
        end: {
          line: 609,
          column: 17
        }
      },
      "265": {
        start: {
          line: 602,
          column: 20
        },
        end: {
          line: 602,
          column: 61
        }
      },
      "266": {
        start: {
          line: 603,
          column: 20
        },
        end: {
          line: 603,
          column: 97
        }
      },
      "267": {
        start: {
          line: 604,
          column: 20
        },
        end: {
          line: 604,
          column: 98
        }
      },
      "268": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 607,
          column: 23
        }
      },
      "269": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 127
        }
      },
      "270": {
        start: {
          line: 608,
          column: 20
        },
        end: {
          line: 608,
          column: 38
        }
      },
      "271": {
        start: {
          line: 611,
          column: 16
        },
        end: {
          line: 611,
          column: 55
        }
      },
      "272": {
        start: {
          line: 612,
          column: 44
        },
        end: {
          line: 615,
          column: 18
        }
      },
      "273": {
        start: {
          line: 613,
          column: 39
        },
        end: {
          line: 613,
          column: 61
        }
      },
      "274": {
        start: {
          line: 614,
          column: 20
        },
        end: {
          line: 614,
          column: 78
        }
      },
      "275": {
        start: {
          line: 616,
          column: 16
        },
        end: {
          line: 626,
          column: 17
        }
      },
      "276": {
        start: {
          line: 617,
          column: 20
        },
        end: {
          line: 617,
          column: 101
        }
      },
      "277": {
        start: {
          line: 618,
          column: 20
        },
        end: {
          line: 622,
          column: 23
        }
      },
      "278": {
        start: {
          line: 619,
          column: 43
        },
        end: {
          line: 619,
          column: 72
        }
      },
      "279": {
        start: {
          line: 620,
          column: 43
        },
        end: {
          line: 620,
          column: 92
        }
      },
      "280": {
        start: {
          line: 621,
          column: 24
        },
        end: {
          line: 621,
          column: 104
        }
      },
      "281": {
        start: {
          line: 625,
          column: 20
        },
        end: {
          line: 625,
          column: 64
        }
      },
      "282": {
        start: {
          line: 627,
          column: 16
        },
        end: {
          line: 627,
          column: 34
        }
      },
      "283": {
        start: {
          line: 629,
          column: 16
        },
        end: {
          line: 629,
          column: 54
        }
      },
      "284": {
        start: {
          line: 630,
          column: 16
        },
        end: {
          line: 630,
          column: 62
        }
      },
      "285": {
        start: {
          line: 631,
          column: 16
        },
        end: {
          line: 631,
          column: 107
        }
      },
      "286": {
        start: {
          line: 632,
          column: 16
        },
        end: {
          line: 632,
          column: 104
        }
      },
      "287": {
        start: {
          line: 633,
          column: 16
        },
        end: {
          line: 633,
          column: 99
        }
      },
      "288": {
        start: {
          line: 634,
          column: 16
        },
        end: {
          line: 634,
          column: 106
        }
      },
      "289": {
        start: {
          line: 635,
          column: 16
        },
        end: {
          line: 635,
          column: 61
        }
      },
      "290": {
        start: {
          line: 636,
          column: 16
        },
        end: {
          line: 638,
          column: 17
        }
      },
      "291": {
        start: {
          line: 637,
          column: 20
        },
        end: {
          line: 637,
          column: 107
        }
      },
      "292": {
        start: {
          line: 639,
          column: 16
        },
        end: {
          line: 641,
          column: 17
        }
      },
      "293": {
        start: {
          line: 640,
          column: 20
        },
        end: {
          line: 640,
          column: 119
        }
      },
      "294": {
        start: {
          line: 642,
          column: 16
        },
        end: {
          line: 644,
          column: 17
        }
      },
      "295": {
        start: {
          line: 643,
          column: 20
        },
        end: {
          line: 643,
          column: 108
        }
      },
      "296": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 647,
          column: 17
        }
      },
      "297": {
        start: {
          line: 646,
          column: 20
        },
        end: {
          line: 646,
          column: 108
        }
      },
      "298": {
        start: {
          line: 648,
          column: 16
        },
        end: {
          line: 648,
          column: 33
        }
      },
      "299": {
        start: {
          line: 651,
          column: 16
        },
        end: {
          line: 651,
          column: 107
        }
      }
    },
    fnMap: {
      "0": {
        name: "createMonitoringTools",
        decl: {
          start: {
            line: 52,
            column: 9
          },
          end: {
            line: 52,
            column: 30
          }
        },
        loc: {
          start: {
            line: 52,
            column: 50
          },
          end: {
            line: 655,
            column: 1
          }
        },
        line: 52
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 65,
            column: 17
          },
          end: {
            line: 65,
            column: 18
          }
        },
        loc: {
          start: {
            line: 65,
            column: 33
          },
          end: {
            line: 99,
            column: 9
          }
        },
        line: 65
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 113,
            column: 17
          },
          end: {
            line: 113,
            column: 18
          }
        },
        loc: {
          start: {
            line: 113,
            column: 33
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 113
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 164,
            column: 17
          },
          end: {
            line: 164,
            column: 18
          }
        },
        loc: {
          start: {
            line: 164,
            column: 33
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 164
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 196,
            column: 68
          },
          end: {
            line: 196,
            column: 69
          }
        },
        loc: {
          start: {
            line: 196,
            column: 81
          },
          end: {
            line: 196,
            column: 163
          }
        },
        line: 196
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 205,
            column: 70
          },
          end: {
            line: 205,
            column: 71
          }
        },
        loc: {
          start: {
            line: 205,
            column: 75
          },
          end: {
            line: 205,
            column: 97
          }
        },
        line: 205
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 206,
            column: 66
          },
          end: {
            line: 206,
            column: 67
          }
        },
        loc: {
          start: {
            line: 206,
            column: 71
          },
          end: {
            line: 206,
            column: 91
          }
        },
        line: 206
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 207,
            column: 67
          },
          end: {
            line: 207,
            column: 68
          }
        },
        loc: {
          start: {
            line: 207,
            column: 72
          },
          end: {
            line: 207,
            column: 94
          }
        },
        line: 207
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 215,
            column: 72
          },
          end: {
            line: 215,
            column: 73
          }
        },
        loc: {
          start: {
            line: 215,
            column: 77
          },
          end: {
            line: 215,
            column: 123
          }
        },
        line: 215
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 218,
            column: 36
          },
          end: {
            line: 218,
            column: 37
          }
        },
        loc: {
          start: {
            line: 218,
            column: 41
          },
          end: {
            line: 218,
            column: 52
          }
        },
        line: 218
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 219,
            column: 33
          },
          end: {
            line: 219,
            column: 34
          }
        },
        loc: {
          start: {
            line: 219,
            column: 38
          },
          end: {
            line: 219,
            column: 103
          }
        },
        line: 219
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 222,
            column: 54
          },
          end: {
            line: 222,
            column: 55
          }
        },
        loc: {
          start: {
            line: 222,
            column: 64
          },
          end: {
            line: 222,
            column: 69
          }
        },
        line: 222
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 271,
            column: 44
          },
          end: {
            line: 271,
            column: 45
          }
        },
        loc: {
          start: {
            line: 271,
            column: 51
          },
          end: {
            line: 273,
            column: 21
          }
        },
        line: 271
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 298,
            column: 17
          },
          end: {
            line: 298,
            column: 18
          }
        },
        loc: {
          start: {
            line: 298,
            column: 33
          },
          end: {
            line: 440,
            column: 9
          }
        },
        line: 298
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 339,
            column: 61
          },
          end: {
            line: 339,
            column: 62
          }
        },
        loc: {
          start: {
            line: 339,
            column: 69
          },
          end: {
            line: 339,
            column: 78
          }
        },
        line: 339
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 347,
            column: 75
          },
          end: {
            line: 347,
            column: 76
          }
        },
        loc: {
          start: {
            line: 347,
            column: 83
          },
          end: {
            line: 347,
            column: 143
          }
        },
        line: 347
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 349,
            column: 49
          },
          end: {
            line: 349,
            column: 50
          }
        },
        loc: {
          start: {
            line: 349,
            column: 57
          },
          end: {
            line: 349,
            column: 150
          }
        },
        line: 349
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 349,
            column: 108
          },
          end: {
            line: 349,
            column: 109
          }
        },
        loc: {
          start: {
            line: 349,
            column: 116
          },
          end: {
            line: 349,
            column: 149
          }
        },
        line: 349
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 355,
            column: 69
          },
          end: {
            line: 355,
            column: 70
          }
        },
        loc: {
          start: {
            line: 355,
            column: 77
          },
          end: {
            line: 355,
            column: 179
          }
        },
        line: 355
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 355,
            column: 130
          },
          end: {
            line: 355,
            column: 131
          }
        },
        loc: {
          start: {
            line: 355,
            column: 139
          },
          end: {
            line: 355,
            column: 178
          }
        },
        line: 355
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 364,
            column: 77
          },
          end: {
            line: 364,
            column: 78
          }
        },
        loc: {
          start: {
            line: 364,
            column: 85
          },
          end: {
            line: 364,
            column: 153
          }
        },
        line: 364
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 370,
            column: 69
          },
          end: {
            line: 370,
            column: 70
          }
        },
        loc: {
          start: {
            line: 370,
            column: 77
          },
          end: {
            line: 370,
            column: 142
          }
        },
        line: 370
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 406,
            column: 39
          },
          end: {
            line: 406,
            column: 40
          }
        },
        loc: {
          start: {
            line: 406,
            column: 48
          },
          end: {
            line: 408,
            column: 25
          }
        },
        line: 406
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 413,
            column: 41
          },
          end: {
            line: 413,
            column: 42
          }
        },
        loc: {
          start: {
            line: 413,
            column: 52
          },
          end: {
            line: 415,
            column: 25
          }
        },
        line: 413
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 420,
            column: 48
          },
          end: {
            line: 420,
            column: 49
          }
        },
        loc: {
          start: {
            line: 420,
            column: 55
          },
          end: {
            line: 422,
            column: 25
          }
        },
        line: 420
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 454,
            column: 17
          },
          end: {
            line: 454,
            column: 18
          }
        },
        loc: {
          start: {
            line: 454,
            column: 33
          },
          end: {
            line: 512,
            column: 9
          }
        },
        line: 454
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 529,
            column: 17
          },
          end: {
            line: 529,
            column: 18
          }
        },
        loc: {
          start: {
            line: 529,
            column: 33
          },
          end: {
            line: 653,
            column: 9
          }
        },
        line: 529
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 538,
            column: 92
          },
          end: {
            line: 538,
            column: 93
          }
        },
        loc: {
          start: {
            line: 538,
            column: 97
          },
          end: {
            line: 538,
            column: 105
          }
        },
        line: 538
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 556,
            column: 73
          },
          end: {
            line: 556,
            column: 74
          }
        },
        loc: {
          start: {
            line: 556,
            column: 78
          },
          end: {
            line: 556,
            column: 86
          }
        },
        line: 556
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 557,
            column: 75
          },
          end: {
            line: 557,
            column: 76
          }
        },
        loc: {
          start: {
            line: 557,
            column: 80
          },
          end: {
            line: 557,
            column: 89
          }
        },
        line: 557
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 570,
            column: 72
          },
          end: {
            line: 570,
            column: 73
          }
        },
        loc: {
          start: {
            line: 570,
            column: 85
          },
          end: {
            line: 570,
            column: 167
          }
        },
        line: 570
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 571,
            column: 67
          },
          end: {
            line: 571,
            column: 68
          }
        },
        loc: {
          start: {
            line: 571,
            column: 72
          },
          end: {
            line: 571,
            column: 94
          }
        },
        line: 571
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 572,
            column: 63
          },
          end: {
            line: 572,
            column: 64
          }
        },
        loc: {
          start: {
            line: 572,
            column: 68
          },
          end: {
            line: 572,
            column: 88
          }
        },
        line: 572
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 573,
            column: 64
          },
          end: {
            line: 573,
            column: 65
          }
        },
        loc: {
          start: {
            line: 573,
            column: 69
          },
          end: {
            line: 573,
            column: 91
          }
        },
        line: 573
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 605,
            column: 45
          },
          end: {
            line: 605,
            column: 46
          }
        },
        loc: {
          start: {
            line: 605,
            column: 51
          },
          end: {
            line: 607,
            column: 21
          }
        },
        line: 605
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 612,
            column: 61
          },
          end: {
            line: 612,
            column: 62
          }
        },
        loc: {
          start: {
            line: 612,
            column: 66
          },
          end: {
            line: 615,
            column: 17
          }
        },
        line: 612
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 618,
            column: 48
          },
          end: {
            line: 618,
            column: 49
          }
        },
        loc: {
          start: {
            line: 618,
            column: 60
          },
          end: {
            line: 622,
            column: 21
          }
        },
        line: 618
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 69,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "1": {
        loc: {
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 12
          },
          end: {
            line: 117,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "2": {
        loc: {
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 123,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 42
          },
          end: {
            line: 123,
            column: 67
          }
        }, {
          start: {
            line: 123,
            column: 71
          },
          end: {
            line: 123,
            column: 73
          }
        }],
        line: 123
      },
      "3": {
        loc: {
          start: {
            line: 134,
            column: 27
          },
          end: {
            line: 134,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 134,
            column: 54
          },
          end: {
            line: 134,
            column: 65
          }
        }, {
          start: {
            line: 134,
            column: 68
          },
          end: {
            line: 134,
            column: 80
          }
        }],
        line: 134
      },
      "4": {
        loc: {
          start: {
            line: 136,
            column: 48
          },
          end: {
            line: 136,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 136,
            column: 75
          },
          end: {
            line: 136,
            column: 80
          }
        }, {
          start: {
            line: 136,
            column: 83
          },
          end: {
            line: 136,
            column: 87
          }
        }],
        line: 136
      },
      "5": {
        loc: {
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 137,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 41
          },
          end: {
            line: 137,
            column: 81
          }
        }, {
          start: {
            line: 137,
            column: 85
          },
          end: {
            line: 137,
            column: 86
          }
        }],
        line: 137
      },
      "6": {
        loc: {
          start: {
            line: 138,
            column: 44
          },
          end: {
            line: 138,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 89
          },
          end: {
            line: 138,
            column: 94
          }
        }, {
          start: {
            line: 138,
            column: 97
          },
          end: {
            line: 138,
            column: 101
          }
        }],
        line: 138
      },
      "7": {
        loc: {
          start: {
            line: 139,
            column: 44
          },
          end: {
            line: 139,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 139,
            column: 89
          },
          end: {
            line: 139,
            column: 94
          }
        }, {
          start: {
            line: 139,
            column: 97
          },
          end: {
            line: 139,
            column: 101
          }
        }],
        line: 139
      },
      "8": {
        loc: {
          start: {
            line: 141,
            column: 32
          },
          end: {
            line: 141,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 32
          },
          end: {
            line: 141,
            column: 64
          }
        }, {
          start: {
            line: 141,
            column: 68
          },
          end: {
            line: 141,
            column: 84
          }
        }],
        line: 141
      },
      "9": {
        loc: {
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 142,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 34
          },
          end: {
            line: 142,
            column: 68
          }
        }, {
          start: {
            line: 142,
            column: 72
          },
          end: {
            line: 142,
            column: 88
          }
        }],
        line: 142
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 64
          }
        }, {
          start: {
            line: 143,
            column: 68
          },
          end: {
            line: 143,
            column: 84
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "12": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 187,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 187,
            column: 17
          }
        }, {
          start: {
            line: 184,
            column: 21
          },
          end: {
            line: 187,
            column: 17
          }
        }],
        line: 180
      },
      "13": {
        loc: {
          start: {
            line: 196,
            column: 81
          },
          end: {
            line: 196,
            column: 163
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 81
          },
          end: {
            line: 196,
            column: 117
          }
        }, {
          start: {
            line: 196,
            column: 121
          },
          end: {
            line: 196,
            column: 163
          }
        }],
        line: 196
      },
      "14": {
        loc: {
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 199,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 20
          },
          end: {
            line: 199,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "15": {
        loc: {
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 197,
            column: 24
          },
          end: {
            line: 197,
            column: 53
          }
        }, {
          start: {
            line: 197,
            column: 57
          },
          end: {
            line: 197,
            column: 72
          }
        }],
        line: 197
      },
      "16": {
        loc: {
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "17": {
        loc: {
          start: {
            line: 215,
            column: 77
          },
          end: {
            line: 215,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 77
          },
          end: {
            line: 215,
            column: 99
          }
        }, {
          start: {
            line: 215,
            column: 103
          },
          end: {
            line: 215,
            column: 123
          }
        }],
        line: 215
      },
      "18": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "19": {
        loc: {
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 225,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 24
          },
          end: {
            line: 225,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "20": {
        loc: {
          start: {
            line: 230,
            column: 56
          },
          end: {
            line: 230,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 230,
            column: 74
          },
          end: {
            line: 230,
            column: 85
          }
        }, {
          start: {
            line: 230,
            column: 88
          },
          end: {
            line: 230,
            column: 101
          }
        }],
        line: 230
      },
      "21": {
        loc: {
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 237,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 237,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "22": {
        loc: {
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 246,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 20
          },
          end: {
            line: 246,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "23": {
        loc: {
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 240,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 239,
            column: 24
          },
          end: {
            line: 239,
            column: 68
          }
        }, {
          start: {
            line: 240,
            column: 24
          },
          end: {
            line: 240,
            column: 66
          }
        }],
        line: 239
      },
      "24": {
        loc: {
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 254,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 26
          },
          end: {
            line: 249,
            column: 40
          }
        }, {
          start: {
            line: 250,
            column: 26
          },
          end: {
            line: 254,
            column: 43
          }
        }],
        line: 248
      },
      "25": {
        loc: {
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 248,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 46
          },
          end: {
            line: 248,
            column: 71
          }
        }, {
          start: {
            line: 248,
            column: 75
          },
          end: {
            line: 248,
            column: 111
          }
        }],
        line: 248
      },
      "26": {
        loc: {
          start: {
            line: 250,
            column: 26
          },
          end: {
            line: 254,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 30
          },
          end: {
            line: 251,
            column: 39
          }
        }, {
          start: {
            line: 252,
            column: 30
          },
          end: {
            line: 254,
            column: 43
          }
        }],
        line: 250
      },
      "27": {
        loc: {
          start: {
            line: 250,
            column: 26
          },
          end: {
            line: 250,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 26
          },
          end: {
            line: 250,
            column: 51
          }
        }, {
          start: {
            line: 250,
            column: 55
          },
          end: {
            line: 250,
            column: 91
          }
        }],
        line: 250
      },
      "28": {
        loc: {
          start: {
            line: 252,
            column: 30
          },
          end: {
            line: 254,
            column: 43
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 253,
            column: 34
          },
          end: {
            line: 253,
            column: 43
          }
        }, {
          start: {
            line: 254,
            column: 34
          },
          end: {
            line: 254,
            column: 43
          }
        }],
        line: 252
      },
      "29": {
        loc: {
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 20
          },
          end: {
            line: 260,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "30": {
        loc: {
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 263,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 263,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "31": {
        loc: {
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 266,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 20
          },
          end: {
            line: 266,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "32": {
        loc: {
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 269,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 20
          },
          end: {
            line: 269,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "33": {
        loc: {
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "34": {
        loc: {
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 276,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 20
          },
          end: {
            line: 276,
            column: 42
          }
        }, {
          start: {
            line: 276,
            column: 46
          },
          end: {
            line: 276,
            column: 88
          }
        }],
        line: 276
      },
      "35": {
        loc: {
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "36": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        }, {
          start: {
            line: 309,
            column: 21
          },
          end: {
            line: 312,
            column: 17
          }
        }],
        line: 305
      },
      "37": {
        loc: {
          start: {
            line: 329,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 20
          },
          end: {
            line: 332,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "38": {
        loc: {
          start: {
            line: 329,
            column: 24
          },
          end: {
            line: 329,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 24
          },
          end: {
            line: 329,
            column: 39
          }
        }, {
          start: {
            line: 329,
            column: 43
          },
          end: {
            line: 329,
            column: 70
          }
        }],
        line: 329
      },
      "39": {
        loc: {
          start: {
            line: 333,
            column: 20
          },
          end: {
            line: 336,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 20
          },
          end: {
            line: 336,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "40": {
        loc: {
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 376,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 20
          },
          end: {
            line: 376,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "41": {
        loc: {
          start: {
            line: 338,
            column: 24
          },
          end: {
            line: 338,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 24
          },
          end: {
            line: 338,
            column: 38
          }
        }, {
          start: {
            line: 338,
            column: 42
          },
          end: {
            line: 338,
            column: 67
          }
        }],
        line: 338
      },
      "42": {
        loc: {
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 345,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 345,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "43": {
        loc: {
          start: {
            line: 347,
            column: 83
          },
          end: {
            line: 347,
            column: 143
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 83
          },
          end: {
            line: 347,
            column: 99
          }
        }, {
          start: {
            line: 347,
            column: 103
          },
          end: {
            line: 347,
            column: 143
          }
        }],
        line: 347
      },
      "44": {
        loc: {
          start: {
            line: 348,
            column: 24
          },
          end: {
            line: 352,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 348,
            column: 24
          },
          end: {
            line: 352,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 348
      },
      "45": {
        loc: {
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 349,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 28
          },
          end: {
            line: 348,
            column: 61
          }
        }, {
          start: {
            line: 349,
            column: 28
          },
          end: {
            line: 349,
            column: 151
          }
        }],
        line: 348
      },
      "46": {
        loc: {
          start: {
            line: 354,
            column: 24
          },
          end: {
            line: 360,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 24
          },
          end: {
            line: 360,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "47": {
        loc: {
          start: {
            line: 354,
            column: 28
          },
          end: {
            line: 354,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 28
          },
          end: {
            line: 354,
            column: 57
          }
        }, {
          start: {
            line: 354,
            column: 61
          },
          end: {
            line: 354,
            column: 95
          }
        }],
        line: 354
      },
      "48": {
        loc: {
          start: {
            line: 356,
            column: 28
          },
          end: {
            line: 359,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 28
          },
          end: {
            line: 359,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "49": {
        loc: {
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 375,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 24
          },
          end: {
            line: 375,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "50": {
        loc: {
          start: {
            line: 364,
            column: 85
          },
          end: {
            line: 364,
            column: 153
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 85
          },
          end: {
            line: 364,
            column: 100
          }
        }, {
          start: {
            line: 364,
            column: 104
          },
          end: {
            line: 364,
            column: 153
          }
        }],
        line: 364
      },
      "51": {
        loc: {
          start: {
            line: 365,
            column: 28
          },
          end: {
            line: 368,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 28
          },
          end: {
            line: 368,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "52": {
        loc: {
          start: {
            line: 371,
            column: 28
          },
          end: {
            line: 374,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 28
          },
          end: {
            line: 374,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "53": {
        loc: {
          start: {
            line: 371,
            column: 32
          },
          end: {
            line: 371,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 32
          },
          end: {
            line: 371,
            column: 55
          }
        }, {
          start: {
            line: 371,
            column: 59
          },
          end: {
            line: 371,
            column: 84
          }
        }],
        line: 371
      },
      "54": {
        loc: {
          start: {
            line: 385,
            column: 41
          },
          end: {
            line: 393,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 386,
            column: 26
          },
          end: {
            line: 386,
            column: 40
          }
        }, {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 393,
            column: 51
          }
        }],
        line: 385
      },
      "55": {
        loc: {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 393,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 30
          },
          end: {
            line: 388,
            column: 39
          }
        }, {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 393,
            column: 51
          }
        }],
        line: 387
      },
      "56": {
        loc: {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 393,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 34
          },
          end: {
            line: 390,
            column: 43
          }
        }, {
          start: {
            line: 391,
            column: 34
          },
          end: {
            line: 393,
            column: 51
          }
        }],
        line: 389
      },
      "57": {
        loc: {
          start: {
            line: 391,
            column: 34
          },
          end: {
            line: 393,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 392,
            column: 38
          },
          end: {
            line: 392,
            column: 47
          }
        }, {
          start: {
            line: 393,
            column: 38
          },
          end: {
            line: 393,
            column: 51
          }
        }],
        line: 391
      },
      "58": {
        loc: {
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 403,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 20
          },
          end: {
            line: 403,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "59": {
        loc: {
          start: {
            line: 396,
            column: 24
          },
          end: {
            line: 396,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 24
          },
          end: {
            line: 396,
            column: 53
          }
        }, {
          start: {
            line: 396,
            column: 57
          },
          end: {
            line: 396,
            column: 91
          }
        }],
        line: 396
      },
      "60": {
        loc: {
          start: {
            line: 404,
            column: 20
          },
          end: {
            line: 410,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 20
          },
          end: {
            line: 410,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "61": {
        loc: {
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 417,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 20
          },
          end: {
            line: 417,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "62": {
        loc: {
          start: {
            line: 418,
            column: 20
          },
          end: {
            line: 424,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 20
          },
          end: {
            line: 424,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "63": {
        loc: {
          start: {
            line: 418,
            column: 24
          },
          end: {
            line: 418,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 418,
            column: 24
          },
          end: {
            line: 418,
            column: 51
          }
        }, {
          start: {
            line: 418,
            column: 55
          },
          end: {
            line: 418,
            column: 81
          }
        }],
        line: 418
      },
      "64": {
        loc: {
          start: {
            line: 427,
            column: 49
          },
          end: {
            line: 427,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 427,
            column: 67
          },
          end: {
            line: 427,
            column: 78
          }
        }, {
          start: {
            line: 427,
            column: 81
          },
          end: {
            line: 427,
            column: 94
          }
        }],
        line: 427
      },
      "65": {
        loc: {
          start: {
            line: 428,
            column: 48
          },
          end: {
            line: 428,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 428,
            column: 48
          },
          end: {
            line: 428,
            column: 70
          }
        }, {
          start: {
            line: 428,
            column: 74
          },
          end: {
            line: 428,
            column: 75
          }
        }],
        line: 428
      },
      "66": {
        loc: {
          start: {
            line: 429,
            column: 47
          },
          end: {
            line: 429,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 47
          },
          end: {
            line: 429,
            column: 72
          }
        }, {
          start: {
            line: 429,
            column: 76
          },
          end: {
            line: 429,
            column: 82
          }
        }],
        line: 429
      },
      "67": {
        loc: {
          start: {
            line: 430,
            column: 20
          },
          end: {
            line: 432,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 20
          },
          end: {
            line: 432,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "68": {
        loc: {
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 12
          },
          end: {
            line: 458,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "69": {
        loc: {
          start: {
            line: 468,
            column: 34
          },
          end: {
            line: 468,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 468,
            column: 34
          },
          end: {
            line: 468,
            column: 51
          }
        }, {
          start: {
            line: 468,
            column: 55
          },
          end: {
            line: 468,
            column: 57
          }
        }],
        line: 468
      },
      "70": {
        loc: {
          start: {
            line: 473,
            column: 40
          },
          end: {
            line: 473,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 473,
            column: 40
          },
          end: {
            line: 473,
            column: 57
          }
        }, {
          start: {
            line: 473,
            column: 61
          },
          end: {
            line: 473,
            column: 63
          }
        }],
        line: 473
      },
      "71": {
        loc: {
          start: {
            line: 474,
            column: 39
          },
          end: {
            line: 476,
            column: 24
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 475,
            column: 22
          },
          end: {
            line: 475,
            column: 48
          }
        }, {
          start: {
            line: 476,
            column: 22
          },
          end: {
            line: 476,
            column: 24
          }
        }],
        line: 474
      },
      "72": {
        loc: {
          start: {
            line: 505,
            column: 77
          },
          end: {
            line: 505,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 505,
            column: 77
          },
          end: {
            line: 505,
            column: 94
          }
        }, {
          start: {
            line: 505,
            column: 98
          },
          end: {
            line: 505,
            column: 100
          }
        }],
        line: 505
      },
      "73": {
        loc: {
          start: {
            line: 531,
            column: 12
          },
          end: {
            line: 533,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 12
          },
          end: {
            line: 533,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      },
      "74": {
        loc: {
          start: {
            line: 538,
            column: 34
          },
          end: {
            line: 538,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 57
          },
          end: {
            line: 538,
            column: 69
          }
        }, {
          start: {
            line: 538,
            column: 72
          },
          end: {
            line: 538,
            column: 106
          }
        }],
        line: 538
      },
      "75": {
        loc: {
          start: {
            line: 570,
            column: 85
          },
          end: {
            line: 570,
            column: 167
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 570,
            column: 85
          },
          end: {
            line: 570,
            column: 121
          }
        }, {
          start: {
            line: 570,
            column: 125
          },
          end: {
            line: 570,
            column: 167
          }
        }],
        line: 570
      },
      "76": {
        loc: {
          start: {
            line: 578,
            column: 44
          },
          end: {
            line: 578,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 578,
            column: 74
          },
          end: {
            line: 578,
            column: 118
          }
        }, {
          start: {
            line: 578,
            column: 121
          },
          end: {
            line: 578,
            column: 122
          }
        }],
        line: 578
      },
      "77": {
        loc: {
          start: {
            line: 579,
            column: 39
          },
          end: {
            line: 579,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 59
          },
          end: {
            line: 579,
            column: 63
          }
        }, {
          start: {
            line: 579,
            column: 66
          },
          end: {
            line: 579,
            column: 124
          }
        }],
        line: 579
      },
      "78": {
        loc: {
          start: {
            line: 579,
            column: 66
          },
          end: {
            line: 579,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 86
          },
          end: {
            line: 579,
            column: 90
          }
        }, {
          start: {
            line: 579,
            column: 93
          },
          end: {
            line: 579,
            column: 124
          }
        }],
        line: 579
      },
      "79": {
        loc: {
          start: {
            line: 579,
            column: 93
          },
          end: {
            line: 579,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 579,
            column: 113
          },
          end: {
            line: 579,
            column: 117
          }
        }, {
          start: {
            line: 579,
            column: 120
          },
          end: {
            line: 579,
            column: 124
          }
        }],
        line: 579
      },
      "80": {
        loc: {
          start: {
            line: 594,
            column: 42
          },
          end: {
            line: 594,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 594,
            column: 64
          },
          end: {
            line: 594,
            column: 105
          }
        }, {
          start: {
            line: 594,
            column: 108
          },
          end: {
            line: 594,
            column: 109
          }
        }],
        line: 594
      },
      "81": {
        loc: {
          start: {
            line: 599,
            column: 50
          },
          end: {
            line: 599,
            column: 178
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 76
          },
          end: {
            line: 599,
            column: 90
          }
        }, {
          start: {
            line: 599,
            column: 93
          },
          end: {
            line: 599,
            column: 178
          }
        }],
        line: 599
      },
      "82": {
        loc: {
          start: {
            line: 599,
            column: 93
          },
          end: {
            line: 599,
            column: 178
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 119
          },
          end: {
            line: 599,
            column: 128
          }
        }, {
          start: {
            line: 599,
            column: 131
          },
          end: {
            line: 599,
            column: 178
          }
        }],
        line: 599
      },
      "83": {
        loc: {
          start: {
            line: 599,
            column: 131
          },
          end: {
            line: 599,
            column: 178
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 599,
            column: 157
          },
          end: {
            line: 599,
            column: 166
          }
        }, {
          start: {
            line: 599,
            column: 169
          },
          end: {
            line: 599,
            column: 178
          }
        }],
        line: 599
      },
      "84": {
        loc: {
          start: {
            line: 601,
            column: 16
          },
          end: {
            line: 609,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 601,
            column: 16
          },
          end: {
            line: 609,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 601
      },
      "85": {
        loc: {
          start: {
            line: 614,
            column: 27
          },
          end: {
            line: 614,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 614,
            column: 27
          },
          end: {
            line: 614,
            column: 52
          }
        }, {
          start: {
            line: 614,
            column: 56
          },
          end: {
            line: 614,
            column: 77
          }
        }],
        line: 614
      },
      "86": {
        loc: {
          start: {
            line: 616,
            column: 16
          },
          end: {
            line: 626,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 616,
            column: 16
          },
          end: {
            line: 626,
            column: 17
          }
        }, {
          start: {
            line: 624,
            column: 21
          },
          end: {
            line: 626,
            column: 17
          }
        }],
        line: 616
      },
      "87": {
        loc: {
          start: {
            line: 620,
            column: 43
          },
          end: {
            line: 620,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 620,
            column: 71
          },
          end: {
            line: 620,
            column: 88
          }
        }, {
          start: {
            line: 620,
            column: 91
          },
          end: {
            line: 620,
            column: 92
          }
        }],
        line: 620
      },
      "88": {
        loc: {
          start: {
            line: 636,
            column: 16
          },
          end: {
            line: 638,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 636,
            column: 16
          },
          end: {
            line: 638,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 636
      },
      "89": {
        loc: {
          start: {
            line: 639,
            column: 16
          },
          end: {
            line: 641,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 639,
            column: 16
          },
          end: {
            line: 641,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 639
      },
      "90": {
        loc: {
          start: {
            line: 642,
            column: 16
          },
          end: {
            line: 644,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 642,
            column: 16
          },
          end: {
            line: 644,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 642
      },
      "91": {
        loc: {
          start: {
            line: 645,
            column: 16
          },
          end: {
            line: 647,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 645,
            column: 16
          },
          end: {
            line: 647,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 645
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/monitoring.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/monitoring.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\n// Zod schemas for monitoring and configuration\nconst WorkflowSettingsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  settings: z.record(z.any()),\n});\n\nconst ErrorNotificationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  enableNotifications: z.boolean(),\n  notificationSettings: z\n    .object({\n      email: z.string().email().optional(),\n      webhook: z.string().url().optional(),\n      slack: z.string().optional(),\n      retryAttempts: z.number().min(0).max(10).optional().default(3),\n      notifyOnFailure: z.boolean().optional().default(true),\n      notifyOnSuccess: z.boolean().optional().default(false),\n    })\n    .optional(),\n});\n\nconst PerformanceTrackingSchema = z.object({\n  workflowId: z.string().optional(),\n  timeframe: z.enum(['hour', 'day', 'week', 'month']).optional().default('day'),\n  includeMetrics: z\n    .array(\n      z.enum(['execution-time', 'success-rate', 'error-rate', 'node-performance', 'resource-usage'])\n    )\n    .optional()\n    .default(['execution-time', 'success-rate', 'error-rate']),\n});\n\nconst WorkflowHealthSchema = z.object({\n  workflowId: z.string().optional(),\n  checkType: z.enum(['basic', 'detailed', 'comprehensive']).optional().default('basic'),\n  includeRecommendations: z.boolean().optional().default(true),\n});\n\nconst AlertRuleSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  ruleName: z.string().min(1, 'Rule name is required'),\n  condition: z.enum([\n    'execution-time-exceeds',\n    'error-rate-exceeds',\n    'success-rate-below',\n    'consecutive-failures',\n  ]),\n  threshold: z.number().min(0),\n  action: z.enum(['email', 'webhook', 'disable-workflow', 'log-only']),\n  actionConfig: z.record(z.any()).optional(),\n});\n\n// Tool registration function for advanced monitoring tools\nexport function createMonitoringTools(getClient: () => N8nClient | null, server: any) {\n  // Configure workflow settings\n  server.addTool({\n    name: 'configure-workflow-settings',\n    description:\n      'Configure advanced workflow settings including timeouts, retries, error handling, and execution policies',\n    parameters: WorkflowSettingsSchema,\n    annotations: {\n      title: 'Configure Workflow Settings',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowSettingsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Merge new settings with existing settings\n        const updatedSettings = {\n          ...workflow.settings,\n          ...args.settings,\n        };\n\n        // Update the workflow with new settings\n        await client.updateWorkflow(args.workflowId, {\n          settings: updatedSettings,\n        });\n\n        return (\n          `Successfully updated workflow settings for \"${workflow.name}\":\\n\\n` +\n          `**Applied Settings:**\\n\\`\\`\\`json\\n${JSON.stringify(args.settings, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Current Complete Settings:**\\n\\`\\`\\`json\\n${JSON.stringify(updatedSettings, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Common Setting Options:**\\n` +\n          `- \\`timeout\\`: Execution timeout in seconds\\n` +\n          `- \\`retryOnFail\\`: Number of retry attempts on failure\\n` +\n          `- \\`maxExecutionTime\\`: Maximum execution time limit\\n` +\n          `- \\`saveExecutionProgress\\`: Save intermediate execution data\\n` +\n          `- \\`saveDataErrorExecution\\`: Save data on error executions\\n` +\n          `- \\`saveDataSuccessExecution\\`: Save data on successful executions\\n` +\n          `- \\`saveManualExecutions\\`: Save manually triggered executions\\n` +\n          `- \\`callerPolicy\\`: Execution caller policy restrictions\\n` +\n          `- \\`errorWorkflow\\`: Workflow to run on error\\n` +\n          `- \\`timezone\\`: Timezone for scheduled executions`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure workflow settings: ${error.message}`);\n      }\n    },\n  });\n\n  // Setup error notifications\n  server.addTool({\n    name: 'setup-error-notifications',\n    description:\n      'Configure error notifications and alerting for workflow failures and performance issues',\n    parameters: ErrorNotificationSchema,\n    annotations: {\n      title: 'Setup Error Notifications',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ErrorNotificationSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Configure notification settings\n        const notificationConfig = {\n          errorNotifications: args.enableNotifications,\n          notificationSettings: args.notificationSettings || {},\n          configuredAt: new Date().toISOString(),\n        };\n\n        // Update workflow settings with notification configuration\n        const updatedSettings = {\n          ...workflow.settings,\n          notifications: notificationConfig,\n        };\n\n        await client.updateWorkflow(args.workflowId, {\n          settings: updatedSettings,\n        });\n\n        return (\n          `${args.enableNotifications ? '\u2705 Enabled' : '\u274C Disabled'} error notifications for workflow \"${workflow.name}\":\\n\\n` +\n          `**Notification Configuration:**\\n` +\n          `- Notifications Enabled: ${args.enableNotifications ? 'Yes' : 'No'}\\n` +\n          `- Retry Attempts: ${args.notificationSettings?.retryAttempts || 3}\\n` +\n          `- Notify on Failure: ${args.notificationSettings?.notifyOnFailure ? 'Yes' : 'No'}\\n` +\n          `- Notify on Success: ${args.notificationSettings?.notifyOnSuccess ? 'Yes' : 'No'}\\n\\n` +\n          `**Notification Channels:**\\n` +\n          `- Email: ${args.notificationSettings?.email || 'Not configured'}\\n` +\n          `- Webhook: ${args.notificationSettings?.webhook || 'Not configured'}\\n` +\n          `- Slack: ${args.notificationSettings?.slack || 'Not configured'}\\n\\n` +\n          `**Full Configuration:**\\n\\`\\`\\`json\\n${JSON.stringify(notificationConfig, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Note:** In a production environment, you would also need to configure the actual notification channels (email server, webhook endpoints, Slack integration) in your n8n instance settings.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to setup error notifications: ${error.message}`);\n      }\n    },\n  });\n\n  // Performance tracking and metrics\n  server.addTool({\n    name: 'track-workflow-performance',\n    description:\n      'Track and analyze workflow performance metrics including execution times, success rates, and resource usage',\n    parameters: PerformanceTrackingSchema,\n    annotations: {\n      title: 'Track Workflow Performance',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof PerformanceTrackingSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Calculate timeframe for analysis\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n          month: 30 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(now.getTime() - timeframeDuration[args.timeframe]);\n\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 50 });\n          workflows = response.data;\n        }\n\n        let performanceReport = `**Workflow Performance Report** (${args.timeframe})\\n`;\n        performanceReport += `**Analysis Period:** ${startTime.toLocaleString()} to ${now.toLocaleString()}\\n\\n`;\n\n        for (const workflow of workflows) {\n          // Get recent executions for the workflow\n          const executions = await client.getExecutions({\n            limit: 100,\n          });\n\n          // Filter executions by timeframe and workflow ID\n          const recentExecutions = executions.data.filter(\n            execution =>\n              execution.workflowId === workflow.id && new Date(execution.startedAt) >= startTime\n          );\n\n          if (recentExecutions.length === 0 && args.workflowId) {\n            return `No executions found for workflow \"${workflow.name}\" in the specified timeframe (${args.timeframe}).`;\n          }\n\n          if (recentExecutions.length === 0) {\n            continue; // Skip workflows with no recent executions\n          }\n\n          const metrics = {\n            totalExecutions: recentExecutions.length,\n            successfulExecutions: recentExecutions.filter(e => e.status === 'success').length,\n            failedExecutions: recentExecutions.filter(e => e.status === 'error').length,\n            runningExecutions: recentExecutions.filter(e => e.status === 'running').length,\n            averageExecutionTime: 0,\n            minExecutionTime: 0,\n            maxExecutionTime: 0,\n            successRate: 0,\n            errorRate: 0,\n          };\n\n          // Calculate execution times for completed executions\n          const completedExecutions = recentExecutions.filter(\n            e => e.status === 'success' || e.status === 'error'\n          );\n\n          if (completedExecutions.length > 0) {\n            const executionTimes = completedExecutions\n              .filter(e => e.stoppedAt)\n              .map(e => new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime());\n\n            if (executionTimes.length > 0) {\n              metrics.averageExecutionTime =\n                executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length;\n              metrics.minExecutionTime = Math.min(...executionTimes);\n              metrics.maxExecutionTime = Math.max(...executionTimes);\n            }\n          }\n\n          metrics.successRate = (metrics.successfulExecutions / metrics.totalExecutions) * 100;\n          metrics.errorRate = (metrics.failedExecutions / metrics.totalExecutions) * 100;\n\n          performanceReport += `### ${workflow.name} (${workflow.id})\\n`;\n          performanceReport += `**Status:** ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n\\n`;\n\n          // Execution metrics\n          if (args.includeMetrics.includes('execution-time')) {\n            performanceReport += `**Execution Time Metrics:**\\n`;\n            performanceReport += `- Average: ${(metrics.averageExecutionTime / 1000).toFixed(2)}s\\n`;\n            performanceReport += `- Minimum: ${(metrics.minExecutionTime / 1000).toFixed(2)}s\\n`;\n            performanceReport += `- Maximum: ${(metrics.maxExecutionTime / 1000).toFixed(2)}s\\n\\n`;\n          }\n\n          // Success/Error rates\n          if (\n            args.includeMetrics.includes('success-rate') ||\n            args.includeMetrics.includes('error-rate')\n          ) {\n            performanceReport += `**Execution Statistics:**\\n`;\n            performanceReport += `- Total Executions: ${metrics.totalExecutions}\\n`;\n            performanceReport += `- Successful: ${metrics.successfulExecutions} (${metrics.successRate.toFixed(1)}%)\\n`;\n            performanceReport += `- Failed: ${metrics.failedExecutions} (${metrics.errorRate.toFixed(1)}%)\\n`;\n            performanceReport += `- Running: ${metrics.runningExecutions}\\n\\n`;\n          }\n\n          // Performance assessment\n          const performanceRating =\n            metrics.successRate >= 95 && metrics.averageExecutionTime < 10000\n              ? '\uD83D\uDFE2 Excellent'\n              : metrics.successRate >= 90 && metrics.averageExecutionTime < 30000\n                ? '\uD83D\uDFE1 Good'\n                : metrics.successRate >= 80\n                  ? '\uD83D\uDFE0 Fair'\n                  : '\uD83D\uDD34 Poor';\n\n          performanceReport += `**Performance Rating:** ${performanceRating}\\n`;\n\n          // Recommendations\n          const recommendations = [];\n          if (metrics.errorRate > 10) {\n            recommendations.push(\n              'High error rate detected - review workflow logic and error handling'\n            );\n          }\n          if (metrics.averageExecutionTime > 30000) {\n            recommendations.push(\n              'Long execution times - consider optimizing slow nodes or breaking into smaller workflows'\n            );\n          }\n          if (metrics.successRate < 90) {\n            recommendations.push('Low success rate - investigate common failure patterns');\n          }\n          if (recommendations.length === 0) {\n            recommendations.push('Workflow is performing well - no immediate optimizations needed');\n          }\n\n          performanceReport += `**Recommendations:**\\n`;\n          recommendations.forEach(rec => {\n            performanceReport += `- ${rec}\\n`;\n          });\n          performanceReport += '\\n';\n        }\n\n        if (workflows.length === 0 || performanceReport.split('###').length <= 1) {\n          return `No workflows with recent executions found in the specified timeframe (${args.timeframe}).`;\n        }\n\n        return performanceReport;\n      } catch (error: any) {\n        throw new UserError(`Failed to track workflow performance: ${error.message}`);\n      }\n    },\n  });\n\n  // Workflow health check\n  server.addTool({\n    name: 'check-workflow-health',\n    description:\n      'Perform comprehensive health checks on workflows including configuration validation, dependency analysis, and optimization recommendations',\n    parameters: WorkflowHealthSchema,\n    annotations: {\n      title: 'Check Workflow Health',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowHealthSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 20 });\n          workflows = response.data;\n        }\n\n        let healthReport = `**Workflow Health Check Report**\\n`;\n        healthReport += `**Check Type:** ${args.checkType}\\n`;\n        healthReport += `**Generated:** ${new Date().toLocaleString()}\\n\\n`;\n\n        for (const workflow of workflows) {\n          const healthScore = {\n            configuration: 100,\n            security: 100,\n            performance: 100,\n            reliability: 100,\n            maintainability: 100,\n            overall: 100,\n          };\n\n          const issues = [];\n          const warnings = [];\n          const recommendations = [];\n\n          // Basic health checks\n          if (!workflow.nodes || workflow.nodes.length === 0) {\n            issues.push('Workflow has no nodes');\n            healthScore.configuration -= 50;\n          }\n\n          if (!workflow.active) {\n            warnings.push('Workflow is inactive');\n            healthScore.reliability -= 10;\n          }\n\n          // Node analysis\n          if (workflow.nodes && workflow.nodes.length > 0) {\n            const nodeTypes = workflow.nodes.map(node => node.type);\n            const uniqueNodeTypes = [...new Set(nodeTypes)];\n\n            // Check for common issues\n            if (workflow.nodes.length > 50) {\n              warnings.push(\n                'Workflow has many nodes (>50) - consider breaking into smaller workflows'\n              );\n              healthScore.maintainability -= 20;\n            }\n\n            // Check for missing credentials\n            const nodesWithCredentials = workflow.nodes.filter(\n              node => node.credentials && Object.keys(node.credentials).length > 0\n            );\n\n            if (\n              nodesWithCredentials.length === 0 &&\n              uniqueNodeTypes.some(type =>\n                ['http-request', 'gmail', 'slack', 'webhook'].some(cred =>\n                  type.toLowerCase().includes(cred)\n                )\n              )\n            ) {\n              issues.push(\n                'Nodes that typically require credentials found without credential configuration'\n              );\n              healthScore.security -= 30;\n            }\n\n            // Performance analysis\n            if (args.checkType === 'detailed' || args.checkType === 'comprehensive') {\n              const heavyNodes = workflow.nodes.filter(node =>\n                ['code', 'function', 'python', 'loop', 'merge'].some(heavy =>\n                  node.type.toLowerCase().includes(heavy)\n                )\n              );\n\n              if (heavyNodes.length > workflow.nodes.length * 0.3) {\n                warnings.push('High percentage of resource-intensive nodes detected');\n                healthScore.performance -= 15;\n              }\n            }\n\n            // Comprehensive analysis\n            if (args.checkType === 'comprehensive') {\n              // Check for error handling\n              const errorHandlingNodes = workflow.nodes.filter(\n                node => node.parameters && JSON.stringify(node.parameters).includes('error')\n              );\n\n              if (errorHandlingNodes.length === 0) {\n                recommendations.push('Consider adding error handling nodes for better reliability');\n                healthScore.reliability -= 10;\n              }\n\n              // Check for testing/debugging features\n              const debugNodes = workflow.nodes.filter(node =>\n                ['sticky-note', 'no-op', 'set'].includes(node.type.toLowerCase())\n              );\n\n              if (debugNodes.length === 0 && workflow.nodes.length > 5) {\n                recommendations.push(\n                  'Consider adding debugging/documentation nodes for better maintainability'\n                );\n                healthScore.maintainability -= 5;\n              }\n            }\n          }\n\n          // Calculate overall health score\n          healthScore.overall = Math.round(\n            (healthScore.configuration +\n              healthScore.security +\n              healthScore.performance +\n              healthScore.reliability +\n              healthScore.maintainability) /\n              5\n          );\n\n          // Health rating\n          const healthRating =\n            healthScore.overall >= 90\n              ? '\uD83D\uDFE2 Excellent'\n              : healthScore.overall >= 80\n                ? '\uD83D\uDFE1 Good'\n                : healthScore.overall >= 70\n                  ? '\uD83D\uDFE0 Fair'\n                  : healthScore.overall >= 60\n                    ? '\uD83D\uDD34 Poor'\n                    : '\uD83D\uDEA8 Critical';\n\n          healthReport += `### ${workflow.name} (${workflow.id})\\n`;\n          healthReport += `**Overall Health:** ${healthRating} (${healthScore.overall}/100)\\n\\n`;\n\n          if (args.checkType === 'detailed' || args.checkType === 'comprehensive') {\n            healthReport += `**Detailed Scores:**\\n`;\n            healthReport += `- Configuration: ${healthScore.configuration}/100\\n`;\n            healthReport += `- Security: ${healthScore.security}/100\\n`;\n            healthReport += `- Performance: ${healthScore.performance}/100\\n`;\n            healthReport += `- Reliability: ${healthScore.reliability}/100\\n`;\n            healthReport += `- Maintainability: ${healthScore.maintainability}/100\\n\\n`;\n          }\n\n          if (issues.length > 0) {\n            healthReport += `**\u274C Issues (${issues.length}):**\\n`;\n            issues.forEach(issue => {\n              healthReport += `- ${issue}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          if (warnings.length > 0) {\n            healthReport += `**\u26A0\uFE0F Warnings (${warnings.length}):**\\n`;\n            warnings.forEach(warning => {\n              healthReport += `- ${warning}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          if (args.includeRecommendations && recommendations.length > 0) {\n            healthReport += `**\uD83D\uDCA1 Recommendations (${recommendations.length}):**\\n`;\n            recommendations.forEach(rec => {\n              healthReport += `- ${rec}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          // Basic workflow info\n          healthReport += `**Workflow Details:**\\n`;\n          healthReport += `- Status: ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n`;\n          healthReport += `- Nodes: ${workflow.nodes?.length || 0}\\n`;\n          healthReport += `- Tags: ${workflow.tags?.join(', ') || 'None'}\\n`;\n          if (workflow.updatedAt) {\n            healthReport += `- Last Modified: ${new Date(workflow.updatedAt).toLocaleString()}\\n`;\n          }\n          healthReport += '\\n';\n        }\n\n        return healthReport;\n      } catch (error: any) {\n        throw new UserError(`Failed to check workflow health: ${error.message}`);\n      }\n    },\n  });\n\n  // Create alert rules\n  server.addTool({\n    name: 'create-alert-rule',\n    description:\n      'Create custom alert rules for workflow monitoring based on performance thresholds and conditions',\n    parameters: AlertRuleSchema,\n    annotations: {\n      title: 'Create Alert Rule',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AlertRuleSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Create alert rule configuration\n        const alertRule = {\n          id: `alert_${Date.now()}`,\n          name: args.ruleName,\n          condition: args.condition,\n          threshold: args.threshold,\n          action: args.action,\n          actionConfig: args.actionConfig || {},\n          enabled: true,\n          createdAt: new Date().toISOString(),\n        };\n\n        // Get existing alert rules or initialize empty array\n        const currentSettings = workflow.settings || {};\n        const existingAlerts = Array.isArray(currentSettings.alertRules)\n          ? currentSettings.alertRules\n          : [];\n\n        // Add new alert rule\n        const updatedAlerts = [...existingAlerts, alertRule];\n\n        // Update workflow settings with new alert rules\n        await client.updateWorkflow(args.workflowId, {\n          settings: {\n            ...currentSettings,\n            alertRules: updatedAlerts,\n          },\n        });\n\n        // Generate threshold description\n        const thresholdDescription = {\n          'execution-time-exceeds': `execution time exceeds ${args.threshold} seconds`,\n          'error-rate-exceeds': `error rate exceeds ${args.threshold}%`,\n          'success-rate-below': `success rate falls below ${args.threshold}%`,\n          'consecutive-failures': `${args.threshold} consecutive failures occur`,\n        };\n\n        const actionDescription = {\n          email: 'send email notification',\n          webhook: 'trigger webhook',\n          'disable-workflow': 'automatically disable workflow',\n          'log-only': 'log to system logs only',\n        };\n\n        return (\n          `\u2705 Successfully created alert rule \"${args.ruleName}\" for workflow \"${workflow.name}\":\\n\\n` +\n          `**Alert Rule Configuration:**\\n` +\n          `- Rule ID: ${alertRule.id}\\n` +\n          `- Condition: When ${thresholdDescription[args.condition]}\\n` +\n          `- Action: ${actionDescription[args.action]}\\n` +\n          `- Status: \u2705 Enabled\\n\\n` +\n          `**Action Configuration:**\\n\\`\\`\\`json\\n${JSON.stringify(args.actionConfig || {}, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Total Alert Rules:** ${updatedAlerts.length}\\n\\n` +\n          `**Note:** Alert rules are stored in workflow settings. In a production environment, you would implement monitoring services to actively check these conditions and trigger the specified actions.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to create alert rule: ${error.message}`);\n      }\n    },\n  });\n\n  // Get monitoring dashboard\n  server.addTool({\n    name: 'get-monitoring-dashboard',\n    description:\n      'Get a comprehensive monitoring dashboard with real-time status of workflows, alerts, and system health',\n    parameters: z.object({\n      includeInactive: z.boolean().optional().default(false),\n      timeframe: z.enum(['hour', 'day', 'week']).optional().default('day'),\n    }),\n    annotations: {\n      title: 'Get Monitoring Dashboard',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { includeInactive?: boolean; timeframe?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Get all workflows\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const allWorkflows = workflowsResponse.data;\n\n        const workflows = args.includeInactive ? allWorkflows : allWorkflows.filter(w => w.active);\n\n        // Get recent executions for all workflows\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(\n          now.getTime() - timeframeDuration[args.timeframe as keyof typeof timeframeDuration]\n        );\n\n        let dashboard = `# \uD83D\uDCCA n8n Monitoring Dashboard\\n\\n`;\n        dashboard += `**Generated:** ${now.toLocaleString()}\\n`;\n        dashboard += `**Timeframe:** Last ${args.timeframe}\\n`;\n        dashboard += `**Update Frequency:** Real-time\\n\\n`;\n\n        // System overview\n        dashboard += `## \uD83D\uDDA5\uFE0F System Overview\\n\\n`;\n        dashboard += `| Metric | Value |\\n`;\n        dashboard += `|--------|-------|\\n`;\n        dashboard += `| Total Workflows | ${allWorkflows.length} |\\n`;\n        dashboard += `| Active Workflows | ${allWorkflows.filter(w => w.active).length} |\\n`;\n        dashboard += `| Inactive Workflows | ${allWorkflows.filter(w => !w.active).length} |\\n`;\n\n        // Workflow status summary\n        let totalExecutions = 0;\n        let totalSuccessful = 0;\n        let totalFailed = 0;\n        let totalRunning = 0;\n        const workflowStatuses = [];\n\n        for (const workflow of workflows.slice(0, 10)) {\n          // Limit to 10 workflows for dashboard\n          try {\n            const executions = await client.getExecutions({\n              limit: 50,\n            });\n\n            const recentExecutions = executions.data.filter(\n              execution =>\n                execution.workflowId === workflow.id && new Date(execution.startedAt) >= startTime\n            );\n\n            const successful = recentExecutions.filter(e => e.status === 'success').length;\n            const failed = recentExecutions.filter(e => e.status === 'error').length;\n            const running = recentExecutions.filter(e => e.status === 'running').length;\n\n            totalExecutions += recentExecutions.length;\n            totalSuccessful += successful;\n            totalFailed += failed;\n            totalRunning += running;\n\n            const successRate =\n              recentExecutions.length > 0 ? (successful / recentExecutions.length) * 100 : 0;\n\n            const status =\n              successRate >= 95 ? '\uD83D\uDFE2' : successRate >= 90 ? '\uD83D\uDFE1' : successRate >= 70 ? '\uD83D\uDFE0' : '\uD83D\uDD34';\n\n            workflowStatuses.push({\n              name: workflow.name,\n              status,\n              executions: recentExecutions.length,\n              successRate: successRate.toFixed(1),\n              running,\n            });\n          } catch (_error) {\n            // Skip workflows that can't be analyzed\n            continue;\n          }\n        }\n\n        // Add execution summary to system overview\n        const systemSuccessRate =\n          totalExecutions > 0 ? (totalSuccessful / totalExecutions) * 100 : 0;\n\n        dashboard += `| Total Executions (${args.timeframe}) | ${totalExecutions} |\\n`;\n        dashboard += `| Successful Executions | ${totalSuccessful} (${systemSuccessRate.toFixed(1)}%) |\\n`;\n        dashboard += `| Failed Executions | ${totalFailed} |\\n`;\n        dashboard += `| Running Executions | ${totalRunning} |\\n`;\n        dashboard += `| System Health | ${systemSuccessRate >= 95 ? '\uD83D\uDFE2 Excellent' : systemSuccessRate >= 90 ? '\uD83D\uDFE1 Good' : systemSuccessRate >= 70 ? '\uD83D\uDFE0 Fair' : '\uD83D\uDD34 Poor'} |\\n\\n`;\n\n        // Workflow status table\n        if (workflowStatuses.length > 0) {\n          dashboard += `## \uD83D\uDCCB Workflow Status\\n\\n`;\n          dashboard += `| Workflow | Status | Executions | Success Rate | Running |\\n`;\n          dashboard += `|----------|--------|------------|--------------|----------|\\n`;\n\n          workflowStatuses.forEach(ws => {\n            dashboard += `| ${ws.name} | ${ws.status} | ${ws.executions} | ${ws.successRate}% | ${ws.running} |\\n`;\n          });\n          dashboard += '\\n';\n        }\n\n        // Active alerts summary\n        dashboard += `## \uD83D\uDEA8 Active Alerts\\n\\n`;\n        const workflowsWithAlerts = workflows.filter(w => {\n          const alertRules = w.settings?.alertRules;\n          return Array.isArray(alertRules) && alertRules.length > 0;\n        });\n\n        if (workflowsWithAlerts.length > 0) {\n          dashboard += `**Workflows with Alert Rules:** ${workflowsWithAlerts.length}\\n\\n`;\n          workflowsWithAlerts.forEach(workflow => {\n            const alertRules = workflow.settings?.alertRules;\n            const alertCount = Array.isArray(alertRules) ? alertRules.length : 0;\n            dashboard += `- **${workflow.name}**: ${alertCount} alert rule(s) configured\\n`;\n          });\n        } else {\n          dashboard += `No alert rules configured.\\n`;\n        }\n        dashboard += '\\n';\n\n        // Quick actions\n        dashboard += `## \u26A1 Quick Actions\\n\\n`;\n        dashboard += `**Common Monitoring Tasks:**\\n`;\n        dashboard += `- Use \\`track-workflow-performance\\` to analyze specific workflow metrics\\n`;\n        dashboard += `- Use \\`check-workflow-health\\` to perform comprehensive health checks\\n`;\n        dashboard += `- Use \\`create-alert-rule\\` to set up automated monitoring alerts\\n`;\n        dashboard += `- Use \\`setup-error-notifications\\` to configure failure notifications\\n\\n`;\n\n        dashboard += `**System Recommendations:**\\n`;\n        if (systemSuccessRate < 90) {\n          dashboard += `- \uD83D\uDD34 System success rate is below 90% - investigate failing workflows\\n`;\n        }\n        if (totalRunning > 10) {\n          dashboard += `- \u26A0\uFE0F High number of running executions - monitor for potential performance issues\\n`;\n        }\n        if (workflowsWithAlerts.length === 0) {\n          dashboard += `- \uD83D\uDCA1 No alert rules configured - consider setting up monitoring alerts\\n`;\n        }\n        if (totalExecutions === 0) {\n          dashboard += `- \uD83D\uDCCA No recent executions - workflows may be inactive or not triggered\\n`;\n        }\n\n        return dashboard;\n      } catch (error: any) {\n        throw new UserError(`Failed to generate monitoring dashboard: ${error.message}`);\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "62fb146363bdd749234c0d849b2fea4b38d21e1a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mp0bgbitd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mp0bgbitd();
cov_1mp0bgbitd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mp0bgbitd().s[1]++;
exports.createMonitoringTools = createMonitoringTools;
const zod_1 =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[3]++, require("fastmcp"));
// Zod schemas for monitoring and configuration
const WorkflowSettingsSchema =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[4]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  settings: zod_1.z.record(zod_1.z.any())
}));
const ErrorNotificationSchema =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[5]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  enableNotifications: zod_1.z.boolean(),
  notificationSettings: zod_1.z.object({
    email: zod_1.z.string().email().optional(),
    webhook: zod_1.z.string().url().optional(),
    slack: zod_1.z.string().optional(),
    retryAttempts: zod_1.z.number().min(0).max(10).optional().default(3),
    notifyOnFailure: zod_1.z.boolean().optional().default(true),
    notifyOnSuccess: zod_1.z.boolean().optional().default(false)
  }).optional()
}));
const PerformanceTrackingSchema =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[6]++, zod_1.z.object({
  workflowId: zod_1.z.string().optional(),
  timeframe: zod_1.z.enum(['hour', 'day', 'week', 'month']).optional().default('day'),
  includeMetrics: zod_1.z.array(zod_1.z.enum(['execution-time', 'success-rate', 'error-rate', 'node-performance', 'resource-usage'])).optional().default(['execution-time', 'success-rate', 'error-rate'])
}));
const WorkflowHealthSchema =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[7]++, zod_1.z.object({
  workflowId: zod_1.z.string().optional(),
  checkType: zod_1.z.enum(['basic', 'detailed', 'comprehensive']).optional().default('basic'),
  includeRecommendations: zod_1.z.boolean().optional().default(true)
}));
const AlertRuleSchema =
/* istanbul ignore next */
(cov_1mp0bgbitd().s[8]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  ruleName: zod_1.z.string().min(1, 'Rule name is required'),
  condition: zod_1.z.enum(['execution-time-exceeds', 'error-rate-exceeds', 'success-rate-below', 'consecutive-failures']),
  threshold: zod_1.z.number().min(0),
  action: zod_1.z.enum(['email', 'webhook', 'disable-workflow', 'log-only']),
  actionConfig: zod_1.z.record(zod_1.z.any()).optional()
}));
// Tool registration function for advanced monitoring tools
function createMonitoringTools(getClient, server) {
  /* istanbul ignore next */
  cov_1mp0bgbitd().f[0]++;
  cov_1mp0bgbitd().s[9]++;
  // Configure workflow settings
  server.addTool({
    name: 'configure-workflow-settings',
    description: 'Configure advanced workflow settings including timeouts, retries, error handling, and execution policies',
    parameters: WorkflowSettingsSchema,
    annotations: {
      title: 'Configure Workflow Settings',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[10]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[11]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[0][0]++;
        cov_1mp0bgbitd().s[12]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[0][1]++;
      }
      cov_1mp0bgbitd().s[13]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[14]++, await client.getWorkflow(args.workflowId));
        // Merge new settings with existing settings
        const updatedSettings =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[15]++, {
          ...workflow.settings,
          ...args.settings
        });
        // Update the workflow with new settings
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[16]++;
        await client.updateWorkflow(args.workflowId, {
          settings: updatedSettings
        });
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[17]++;
        return `Successfully updated workflow settings for "${workflow.name}":\n\n` + `**Applied Settings:**\n\`\`\`json\n${JSON.stringify(args.settings, null, 2)}\n\`\`\`\n\n` + `**Current Complete Settings:**\n\`\`\`json\n${JSON.stringify(updatedSettings, null, 2)}\n\`\`\`\n\n` + `**Common Setting Options:**\n` + `- \`timeout\`: Execution timeout in seconds\n` + `- \`retryOnFail\`: Number of retry attempts on failure\n` + `- \`maxExecutionTime\`: Maximum execution time limit\n` + `- \`saveExecutionProgress\`: Save intermediate execution data\n` + `- \`saveDataErrorExecution\`: Save data on error executions\n` + `- \`saveDataSuccessExecution\`: Save data on successful executions\n` + `- \`saveManualExecutions\`: Save manually triggered executions\n` + `- \`callerPolicy\`: Execution caller policy restrictions\n` + `- \`errorWorkflow\`: Workflow to run on error\n` + `- \`timezone\`: Timezone for scheduled executions`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[18]++;
        throw new fastmcp_1.UserError(`Failed to configure workflow settings: ${error.message}`);
      }
    }
  });
  // Setup error notifications
  /* istanbul ignore next */
  cov_1mp0bgbitd().s[19]++;
  server.addTool({
    name: 'setup-error-notifications',
    description: 'Configure error notifications and alerting for workflow failures and performance issues',
    parameters: ErrorNotificationSchema,
    annotations: {
      title: 'Setup Error Notifications',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[2]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[20]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[21]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[1][0]++;
        cov_1mp0bgbitd().s[22]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[1][1]++;
      }
      cov_1mp0bgbitd().s[23]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[24]++, await client.getWorkflow(args.workflowId));
        // Configure notification settings
        const notificationConfig =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[25]++, {
          errorNotifications: args.enableNotifications,
          notificationSettings:
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[2][0]++, args.notificationSettings) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[2][1]++, {}),
          configuredAt: new Date().toISOString()
        });
        // Update workflow settings with notification configuration
        const updatedSettings =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[26]++, {
          ...workflow.settings,
          notifications: notificationConfig
        });
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[27]++;
        await client.updateWorkflow(args.workflowId, {
          settings: updatedSettings
        });
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[28]++;
        return `${args.enableNotifications ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[3][0]++, '✅ Enabled') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[3][1]++, '❌ Disabled')} error notifications for workflow "${workflow.name}":\n\n` + `**Notification Configuration:**\n` + `- Notifications Enabled: ${args.enableNotifications ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[4][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[4][1]++, 'No')}\n` + `- Retry Attempts: ${
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[5][0]++, args.notificationSettings?.retryAttempts) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[5][1]++, 3)}\n` + `- Notify on Failure: ${args.notificationSettings?.notifyOnFailure ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[6][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[6][1]++, 'No')}\n` + `- Notify on Success: ${args.notificationSettings?.notifyOnSuccess ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[7][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[7][1]++, 'No')}\n\n` + `**Notification Channels:**\n` + `- Email: ${
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[8][0]++, args.notificationSettings?.email) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[8][1]++, 'Not configured')}\n` + `- Webhook: ${
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[9][0]++, args.notificationSettings?.webhook) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[9][1]++, 'Not configured')}\n` + `- Slack: ${
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[10][0]++, args.notificationSettings?.slack) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[10][1]++, 'Not configured')}\n\n` + `**Full Configuration:**\n\`\`\`json\n${JSON.stringify(notificationConfig, null, 2)}\n\`\`\`\n\n` + `**Note:** In a production environment, you would also need to configure the actual notification channels (email server, webhook endpoints, Slack integration) in your n8n instance settings.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[29]++;
        throw new fastmcp_1.UserError(`Failed to setup error notifications: ${error.message}`);
      }
    }
  });
  // Performance tracking and metrics
  /* istanbul ignore next */
  cov_1mp0bgbitd().s[30]++;
  server.addTool({
    name: 'track-workflow-performance',
    description: 'Track and analyze workflow performance metrics including execution times, success rates, and resource usage',
    parameters: PerformanceTrackingSchema,
    annotations: {
      title: 'Track Workflow Performance',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[31]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[32]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[11][0]++;
        cov_1mp0bgbitd().s[33]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[11][1]++;
      }
      cov_1mp0bgbitd().s[34]++;
      try {
        // Calculate timeframe for analysis
        const now =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[35]++, new Date());
        const timeframeDuration =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[36]++, {
          hour: 1 * 60 * 60 * 1000,
          day: 24 * 60 * 60 * 1000,
          week: 7 * 24 * 60 * 60 * 1000,
          month: 30 * 24 * 60 * 60 * 1000
        });
        const startTime =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[37]++, new Date(now.getTime() - timeframeDuration[args.timeframe]));
        let workflows =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[38]++, []);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[39]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[12][0]++;
          const workflow =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[40]++, await client.getWorkflow(args.workflowId));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[41]++;
          workflows = [workflow];
        } else {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[12][1]++;
          const response =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[42]++, await client.getWorkflows({
            limit: 50
          }));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[43]++;
          workflows = response.data;
        }
        let performanceReport =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[44]++, `**Workflow Performance Report** (${args.timeframe})\n`);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[45]++;
        performanceReport += `**Analysis Period:** ${startTime.toLocaleString()} to ${now.toLocaleString()}\n\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[46]++;
        for (const workflow of workflows) {
          // Get recent executions for the workflow
          const executions =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[47]++, await client.getExecutions({
            limit: 100
          }));
          // Filter executions by timeframe and workflow ID
          const recentExecutions =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[48]++, executions.data.filter(execution => {
            /* istanbul ignore next */
            cov_1mp0bgbitd().f[4]++;
            cov_1mp0bgbitd().s[49]++;
            return /* istanbul ignore next */(cov_1mp0bgbitd().b[13][0]++, execution.workflowId === workflow.id) &&
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[13][1]++, new Date(execution.startedAt) >= startTime);
          }));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[50]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[15][0]++, recentExecutions.length === 0) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[15][1]++, args.workflowId)) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[14][0]++;
            cov_1mp0bgbitd().s[51]++;
            return `No executions found for workflow "${workflow.name}" in the specified timeframe (${args.timeframe}).`;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[14][1]++;
          }
          cov_1mp0bgbitd().s[52]++;
          if (recentExecutions.length === 0) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[16][0]++;
            cov_1mp0bgbitd().s[53]++;
            continue; // Skip workflows with no recent executions
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[16][1]++;
          }
          const metrics =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[54]++, {
            totalExecutions: recentExecutions.length,
            successfulExecutions: recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[5]++;
              cov_1mp0bgbitd().s[55]++;
              return e.status === 'success';
            }).length,
            failedExecutions: recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[6]++;
              cov_1mp0bgbitd().s[56]++;
              return e.status === 'error';
            }).length,
            runningExecutions: recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[7]++;
              cov_1mp0bgbitd().s[57]++;
              return e.status === 'running';
            }).length,
            averageExecutionTime: 0,
            minExecutionTime: 0,
            maxExecutionTime: 0,
            successRate: 0,
            errorRate: 0
          });
          // Calculate execution times for completed executions
          const completedExecutions =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[58]++, recentExecutions.filter(e => {
            /* istanbul ignore next */
            cov_1mp0bgbitd().f[8]++;
            cov_1mp0bgbitd().s[59]++;
            return /* istanbul ignore next */(cov_1mp0bgbitd().b[17][0]++, e.status === 'success') ||
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[17][1]++, e.status === 'error');
          }));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[60]++;
          if (completedExecutions.length > 0) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[18][0]++;
            const executionTimes =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[61]++, completedExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[9]++;
              cov_1mp0bgbitd().s[62]++;
              return e.stoppedAt;
            }).map(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[10]++;
              cov_1mp0bgbitd().s[63]++;
              return new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime();
            }));
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[64]++;
            if (executionTimes.length > 0) {
              /* istanbul ignore next */
              cov_1mp0bgbitd().b[19][0]++;
              cov_1mp0bgbitd().s[65]++;
              metrics.averageExecutionTime = executionTimes.reduce((a, b) => {
                /* istanbul ignore next */
                cov_1mp0bgbitd().f[11]++;
                cov_1mp0bgbitd().s[66]++;
                return a + b;
              }, 0) / executionTimes.length;
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[67]++;
              metrics.minExecutionTime = Math.min(...executionTimes);
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[68]++;
              metrics.maxExecutionTime = Math.max(...executionTimes);
            } else
            /* istanbul ignore next */
            {
              cov_1mp0bgbitd().b[19][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[18][1]++;
          }
          cov_1mp0bgbitd().s[69]++;
          metrics.successRate = metrics.successfulExecutions / metrics.totalExecutions * 100;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[70]++;
          metrics.errorRate = metrics.failedExecutions / metrics.totalExecutions * 100;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[71]++;
          performanceReport += `### ${workflow.name} (${workflow.id})\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[72]++;
          performanceReport += `**Status:** ${workflow.active ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[20][0]++, '🟢 Active') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[20][1]++, '🔴 Inactive')}\n\n`;
          // Execution metrics
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[73]++;
          if (args.includeMetrics.includes('execution-time')) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[21][0]++;
            cov_1mp0bgbitd().s[74]++;
            performanceReport += `**Execution Time Metrics:**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[75]++;
            performanceReport += `- Average: ${(metrics.averageExecutionTime / 1000).toFixed(2)}s\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[76]++;
            performanceReport += `- Minimum: ${(metrics.minExecutionTime / 1000).toFixed(2)}s\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[77]++;
            performanceReport += `- Maximum: ${(metrics.maxExecutionTime / 1000).toFixed(2)}s\n\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[21][1]++;
          }
          // Success/Error rates
          cov_1mp0bgbitd().s[78]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[23][0]++, args.includeMetrics.includes('success-rate')) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[23][1]++, args.includeMetrics.includes('error-rate'))) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[22][0]++;
            cov_1mp0bgbitd().s[79]++;
            performanceReport += `**Execution Statistics:**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[80]++;
            performanceReport += `- Total Executions: ${metrics.totalExecutions}\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[81]++;
            performanceReport += `- Successful: ${metrics.successfulExecutions} (${metrics.successRate.toFixed(1)}%)\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[82]++;
            performanceReport += `- Failed: ${metrics.failedExecutions} (${metrics.errorRate.toFixed(1)}%)\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[83]++;
            performanceReport += `- Running: ${metrics.runningExecutions}\n\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[22][1]++;
          }
          // Performance assessment
          const performanceRating =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[84]++,
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[25][0]++, metrics.successRate >= 95) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[25][1]++, metrics.averageExecutionTime < 10000) ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[24][0]++, '🟢 Excellent') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[24][1]++,
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[27][0]++, metrics.successRate >= 90) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[27][1]++, metrics.averageExecutionTime < 30000) ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[26][0]++, '🟡 Good') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[26][1]++, metrics.successRate >= 80 ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[28][0]++, '🟠 Fair') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[28][1]++, '🔴 Poor'))));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[85]++;
          performanceReport += `**Performance Rating:** ${performanceRating}\n`;
          // Recommendations
          const recommendations =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[86]++, []);
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[87]++;
          if (metrics.errorRate > 10) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[29][0]++;
            cov_1mp0bgbitd().s[88]++;
            recommendations.push('High error rate detected - review workflow logic and error handling');
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[29][1]++;
          }
          cov_1mp0bgbitd().s[89]++;
          if (metrics.averageExecutionTime > 30000) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[30][0]++;
            cov_1mp0bgbitd().s[90]++;
            recommendations.push('Long execution times - consider optimizing slow nodes or breaking into smaller workflows');
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[30][1]++;
          }
          cov_1mp0bgbitd().s[91]++;
          if (metrics.successRate < 90) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[31][0]++;
            cov_1mp0bgbitd().s[92]++;
            recommendations.push('Low success rate - investigate common failure patterns');
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[31][1]++;
          }
          cov_1mp0bgbitd().s[93]++;
          if (recommendations.length === 0) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[32][0]++;
            cov_1mp0bgbitd().s[94]++;
            recommendations.push('Workflow is performing well - no immediate optimizations needed');
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[32][1]++;
          }
          cov_1mp0bgbitd().s[95]++;
          performanceReport += `**Recommendations:**\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[96]++;
          recommendations.forEach(rec => {
            /* istanbul ignore next */
            cov_1mp0bgbitd().f[12]++;
            cov_1mp0bgbitd().s[97]++;
            performanceReport += `- ${rec}\n`;
          });
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[98]++;
          performanceReport += '\n';
        }
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[99]++;
        if (
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[34][0]++, workflows.length === 0) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[34][1]++, performanceReport.split('###').length <= 1)) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[33][0]++;
          cov_1mp0bgbitd().s[100]++;
          return `No workflows with recent executions found in the specified timeframe (${args.timeframe}).`;
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[33][1]++;
        }
        cov_1mp0bgbitd().s[101]++;
        return performanceReport;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[102]++;
        throw new fastmcp_1.UserError(`Failed to track workflow performance: ${error.message}`);
      }
    }
  });
  // Workflow health check
  /* istanbul ignore next */
  cov_1mp0bgbitd().s[103]++;
  server.addTool({
    name: 'check-workflow-health',
    description: 'Perform comprehensive health checks on workflows including configuration validation, dependency analysis, and optimization recommendations',
    parameters: WorkflowHealthSchema,
    annotations: {
      title: 'Check Workflow Health',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[13]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[104]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[105]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[35][0]++;
        cov_1mp0bgbitd().s[106]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[35][1]++;
      }
      cov_1mp0bgbitd().s[107]++;
      try {
        let workflows =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[108]++, []);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[109]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[36][0]++;
          const workflow =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[110]++, await client.getWorkflow(args.workflowId));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[111]++;
          workflows = [workflow];
        } else {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[36][1]++;
          const response =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[112]++, await client.getWorkflows({
            limit: 20
          }));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[113]++;
          workflows = response.data;
        }
        let healthReport =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[114]++, `**Workflow Health Check Report**\n`);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[115]++;
        healthReport += `**Check Type:** ${args.checkType}\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[116]++;
        healthReport += `**Generated:** ${new Date().toLocaleString()}\n\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[117]++;
        for (const workflow of workflows) {
          const healthScore =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[118]++, {
            configuration: 100,
            security: 100,
            performance: 100,
            reliability: 100,
            maintainability: 100,
            overall: 100
          });
          const issues =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[119]++, []);
          const warnings =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[120]++, []);
          const recommendations =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[121]++, []);
          // Basic health checks
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[122]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[38][0]++, !workflow.nodes) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[38][1]++, workflow.nodes.length === 0)) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[37][0]++;
            cov_1mp0bgbitd().s[123]++;
            issues.push('Workflow has no nodes');
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[124]++;
            healthScore.configuration -= 50;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[37][1]++;
          }
          cov_1mp0bgbitd().s[125]++;
          if (!workflow.active) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[39][0]++;
            cov_1mp0bgbitd().s[126]++;
            warnings.push('Workflow is inactive');
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[127]++;
            healthScore.reliability -= 10;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[39][1]++;
          }
          // Node analysis
          cov_1mp0bgbitd().s[128]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[41][0]++, workflow.nodes) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[41][1]++, workflow.nodes.length > 0)) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[40][0]++;
            const nodeTypes =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[129]++, workflow.nodes.map(node => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[14]++;
              cov_1mp0bgbitd().s[130]++;
              return node.type;
            }));
            const uniqueNodeTypes =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[131]++, [...new Set(nodeTypes)]);
            // Check for common issues
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[132]++;
            if (workflow.nodes.length > 50) {
              /* istanbul ignore next */
              cov_1mp0bgbitd().b[42][0]++;
              cov_1mp0bgbitd().s[133]++;
              warnings.push('Workflow has many nodes (>50) - consider breaking into smaller workflows');
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[134]++;
              healthScore.maintainability -= 20;
            } else
            /* istanbul ignore next */
            {
              cov_1mp0bgbitd().b[42][1]++;
            }
            // Check for missing credentials
            const nodesWithCredentials =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[135]++, workflow.nodes.filter(node => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[15]++;
              cov_1mp0bgbitd().s[136]++;
              return /* istanbul ignore next */(cov_1mp0bgbitd().b[43][0]++, node.credentials) &&
              /* istanbul ignore next */
              (cov_1mp0bgbitd().b[43][1]++, Object.keys(node.credentials).length > 0);
            }));
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[137]++;
            if (
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[45][0]++, nodesWithCredentials.length === 0) &&
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[45][1]++, uniqueNodeTypes.some(type => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[16]++;
              cov_1mp0bgbitd().s[138]++;
              return ['http-request', 'gmail', 'slack', 'webhook'].some(cred => {
                /* istanbul ignore next */
                cov_1mp0bgbitd().f[17]++;
                cov_1mp0bgbitd().s[139]++;
                return type.toLowerCase().includes(cred);
              });
            }))) {
              /* istanbul ignore next */
              cov_1mp0bgbitd().b[44][0]++;
              cov_1mp0bgbitd().s[140]++;
              issues.push('Nodes that typically require credentials found without credential configuration');
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[141]++;
              healthScore.security -= 30;
            } else
            /* istanbul ignore next */
            {
              cov_1mp0bgbitd().b[44][1]++;
            }
            // Performance analysis
            cov_1mp0bgbitd().s[142]++;
            if (
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[47][0]++, args.checkType === 'detailed') ||
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[47][1]++, args.checkType === 'comprehensive')) {
              /* istanbul ignore next */
              cov_1mp0bgbitd().b[46][0]++;
              const heavyNodes =
              /* istanbul ignore next */
              (cov_1mp0bgbitd().s[143]++, workflow.nodes.filter(node => {
                /* istanbul ignore next */
                cov_1mp0bgbitd().f[18]++;
                cov_1mp0bgbitd().s[144]++;
                return ['code', 'function', 'python', 'loop', 'merge'].some(heavy => {
                  /* istanbul ignore next */
                  cov_1mp0bgbitd().f[19]++;
                  cov_1mp0bgbitd().s[145]++;
                  return node.type.toLowerCase().includes(heavy);
                });
              }));
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[146]++;
              if (heavyNodes.length > workflow.nodes.length * 0.3) {
                /* istanbul ignore next */
                cov_1mp0bgbitd().b[48][0]++;
                cov_1mp0bgbitd().s[147]++;
                warnings.push('High percentage of resource-intensive nodes detected');
                /* istanbul ignore next */
                cov_1mp0bgbitd().s[148]++;
                healthScore.performance -= 15;
              } else
              /* istanbul ignore next */
              {
                cov_1mp0bgbitd().b[48][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_1mp0bgbitd().b[46][1]++;
            }
            // Comprehensive analysis
            cov_1mp0bgbitd().s[149]++;
            if (args.checkType === 'comprehensive') {
              /* istanbul ignore next */
              cov_1mp0bgbitd().b[49][0]++;
              // Check for error handling
              const errorHandlingNodes =
              /* istanbul ignore next */
              (cov_1mp0bgbitd().s[150]++, workflow.nodes.filter(node => {
                /* istanbul ignore next */
                cov_1mp0bgbitd().f[20]++;
                cov_1mp0bgbitd().s[151]++;
                return /* istanbul ignore next */(cov_1mp0bgbitd().b[50][0]++, node.parameters) &&
                /* istanbul ignore next */
                (cov_1mp0bgbitd().b[50][1]++, JSON.stringify(node.parameters).includes('error'));
              }));
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[152]++;
              if (errorHandlingNodes.length === 0) {
                /* istanbul ignore next */
                cov_1mp0bgbitd().b[51][0]++;
                cov_1mp0bgbitd().s[153]++;
                recommendations.push('Consider adding error handling nodes for better reliability');
                /* istanbul ignore next */
                cov_1mp0bgbitd().s[154]++;
                healthScore.reliability -= 10;
              } else
              /* istanbul ignore next */
              {
                cov_1mp0bgbitd().b[51][1]++;
              }
              // Check for testing/debugging features
              const debugNodes =
              /* istanbul ignore next */
              (cov_1mp0bgbitd().s[155]++, workflow.nodes.filter(node => {
                /* istanbul ignore next */
                cov_1mp0bgbitd().f[21]++;
                cov_1mp0bgbitd().s[156]++;
                return ['sticky-note', 'no-op', 'set'].includes(node.type.toLowerCase());
              }));
              /* istanbul ignore next */
              cov_1mp0bgbitd().s[157]++;
              if (
              /* istanbul ignore next */
              (cov_1mp0bgbitd().b[53][0]++, debugNodes.length === 0) &&
              /* istanbul ignore next */
              (cov_1mp0bgbitd().b[53][1]++, workflow.nodes.length > 5)) {
                /* istanbul ignore next */
                cov_1mp0bgbitd().b[52][0]++;
                cov_1mp0bgbitd().s[158]++;
                recommendations.push('Consider adding debugging/documentation nodes for better maintainability');
                /* istanbul ignore next */
                cov_1mp0bgbitd().s[159]++;
                healthScore.maintainability -= 5;
              } else
              /* istanbul ignore next */
              {
                cov_1mp0bgbitd().b[52][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_1mp0bgbitd().b[49][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[40][1]++;
          }
          // Calculate overall health score
          cov_1mp0bgbitd().s[160]++;
          healthScore.overall = Math.round((healthScore.configuration + healthScore.security + healthScore.performance + healthScore.reliability + healthScore.maintainability) / 5);
          // Health rating
          const healthRating =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[161]++, healthScore.overall >= 90 ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[54][0]++, '🟢 Excellent') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[54][1]++, healthScore.overall >= 80 ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[55][0]++, '🟡 Good') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[55][1]++, healthScore.overall >= 70 ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[56][0]++, '🟠 Fair') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[56][1]++, healthScore.overall >= 60 ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[57][0]++, '🔴 Poor') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[57][1]++, '🚨 Critical')))));
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[162]++;
          healthReport += `### ${workflow.name} (${workflow.id})\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[163]++;
          healthReport += `**Overall Health:** ${healthRating} (${healthScore.overall}/100)\n\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[164]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[59][0]++, args.checkType === 'detailed') ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[59][1]++, args.checkType === 'comprehensive')) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[58][0]++;
            cov_1mp0bgbitd().s[165]++;
            healthReport += `**Detailed Scores:**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[166]++;
            healthReport += `- Configuration: ${healthScore.configuration}/100\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[167]++;
            healthReport += `- Security: ${healthScore.security}/100\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[168]++;
            healthReport += `- Performance: ${healthScore.performance}/100\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[169]++;
            healthReport += `- Reliability: ${healthScore.reliability}/100\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[170]++;
            healthReport += `- Maintainability: ${healthScore.maintainability}/100\n\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[58][1]++;
          }
          cov_1mp0bgbitd().s[171]++;
          if (issues.length > 0) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[60][0]++;
            cov_1mp0bgbitd().s[172]++;
            healthReport += `**❌ Issues (${issues.length}):**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[173]++;
            issues.forEach(issue => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[22]++;
              cov_1mp0bgbitd().s[174]++;
              healthReport += `- ${issue}\n`;
            });
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[175]++;
            healthReport += '\n';
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[60][1]++;
          }
          cov_1mp0bgbitd().s[176]++;
          if (warnings.length > 0) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[61][0]++;
            cov_1mp0bgbitd().s[177]++;
            healthReport += `**⚠️ Warnings (${warnings.length}):**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[178]++;
            warnings.forEach(warning => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[23]++;
              cov_1mp0bgbitd().s[179]++;
              healthReport += `- ${warning}\n`;
            });
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[180]++;
            healthReport += '\n';
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[61][1]++;
          }
          cov_1mp0bgbitd().s[181]++;
          if (
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[63][0]++, args.includeRecommendations) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[63][1]++, recommendations.length > 0)) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[62][0]++;
            cov_1mp0bgbitd().s[182]++;
            healthReport += `**💡 Recommendations (${recommendations.length}):**\n`;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[183]++;
            recommendations.forEach(rec => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[24]++;
              cov_1mp0bgbitd().s[184]++;
              healthReport += `- ${rec}\n`;
            });
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[185]++;
            healthReport += '\n';
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[62][1]++;
          }
          // Basic workflow info
          cov_1mp0bgbitd().s[186]++;
          healthReport += `**Workflow Details:**\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[187]++;
          healthReport += `- Status: ${workflow.active ?
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[64][0]++, '🟢 Active') :
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[64][1]++, '🔴 Inactive')}\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[188]++;
          healthReport += `- Nodes: ${
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[65][0]++, workflow.nodes?.length) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[65][1]++, 0)}\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[189]++;
          healthReport += `- Tags: ${
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[66][0]++, workflow.tags?.join(', ')) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[66][1]++, 'None')}\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[190]++;
          if (workflow.updatedAt) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().b[67][0]++;
            cov_1mp0bgbitd().s[191]++;
            healthReport += `- Last Modified: ${new Date(workflow.updatedAt).toLocaleString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1mp0bgbitd().b[67][1]++;
          }
          cov_1mp0bgbitd().s[192]++;
          healthReport += '\n';
        }
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[193]++;
        return healthReport;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[194]++;
        throw new fastmcp_1.UserError(`Failed to check workflow health: ${error.message}`);
      }
    }
  });
  // Create alert rules
  /* istanbul ignore next */
  cov_1mp0bgbitd().s[195]++;
  server.addTool({
    name: 'create-alert-rule',
    description: 'Create custom alert rules for workflow monitoring based on performance thresholds and conditions',
    parameters: AlertRuleSchema,
    annotations: {
      title: 'Create Alert Rule',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[25]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[196]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[197]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[68][0]++;
        cov_1mp0bgbitd().s[198]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[68][1]++;
      }
      cov_1mp0bgbitd().s[199]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[200]++, await client.getWorkflow(args.workflowId));
        // Create alert rule configuration
        const alertRule =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[201]++, {
          id: `alert_${Date.now()}`,
          name: args.ruleName,
          condition: args.condition,
          threshold: args.threshold,
          action: args.action,
          actionConfig:
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[69][0]++, args.actionConfig) ||
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[69][1]++, {}),
          enabled: true,
          createdAt: new Date().toISOString()
        });
        // Get existing alert rules or initialize empty array
        const currentSettings =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[202]++,
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[70][0]++, workflow.settings) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[70][1]++, {}));
        const existingAlerts =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[203]++, Array.isArray(currentSettings.alertRules) ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[71][0]++, currentSettings.alertRules) :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[71][1]++, []));
        // Add new alert rule
        const updatedAlerts =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[204]++, [...existingAlerts, alertRule]);
        // Update workflow settings with new alert rules
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[205]++;
        await client.updateWorkflow(args.workflowId, {
          settings: {
            ...currentSettings,
            alertRules: updatedAlerts
          }
        });
        // Generate threshold description
        const thresholdDescription =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[206]++, {
          'execution-time-exceeds': `execution time exceeds ${args.threshold} seconds`,
          'error-rate-exceeds': `error rate exceeds ${args.threshold}%`,
          'success-rate-below': `success rate falls below ${args.threshold}%`,
          'consecutive-failures': `${args.threshold} consecutive failures occur`
        });
        const actionDescription =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[207]++, {
          email: 'send email notification',
          webhook: 'trigger webhook',
          'disable-workflow': 'automatically disable workflow',
          'log-only': 'log to system logs only'
        });
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[208]++;
        return `✅ Successfully created alert rule "${args.ruleName}" for workflow "${workflow.name}":\n\n` + `**Alert Rule Configuration:**\n` + `- Rule ID: ${alertRule.id}\n` + `- Condition: When ${thresholdDescription[args.condition]}\n` + `- Action: ${actionDescription[args.action]}\n` + `- Status: ✅ Enabled\n\n` + `**Action Configuration:**\n\`\`\`json\n${JSON.stringify(
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[72][0]++, args.actionConfig) ||
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[72][1]++, {}), null, 2)}\n\`\`\`\n\n` + `**Total Alert Rules:** ${updatedAlerts.length}\n\n` + `**Note:** Alert rules are stored in workflow settings. In a production environment, you would implement monitoring services to actively check these conditions and trigger the specified actions.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[209]++;
        throw new fastmcp_1.UserError(`Failed to create alert rule: ${error.message}`);
      }
    }
  });
  // Get monitoring dashboard
  /* istanbul ignore next */
  cov_1mp0bgbitd().s[210]++;
  server.addTool({
    name: 'get-monitoring-dashboard',
    description: 'Get a comprehensive monitoring dashboard with real-time status of workflows, alerts, and system health',
    parameters: zod_1.z.object({
      includeInactive: zod_1.z.boolean().optional().default(false),
      timeframe: zod_1.z.enum(['hour', 'day', 'week']).optional().default('day')
    }),
    annotations: {
      title: 'Get Monitoring Dashboard',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mp0bgbitd().f[26]++;
      const client =
      /* istanbul ignore next */
      (cov_1mp0bgbitd().s[211]++, getClient());
      /* istanbul ignore next */
      cov_1mp0bgbitd().s[212]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().b[73][0]++;
        cov_1mp0bgbitd().s[213]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mp0bgbitd().b[73][1]++;
      }
      cov_1mp0bgbitd().s[214]++;
      try {
        // Get all workflows
        const workflowsResponse =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[215]++, await client.getWorkflows({
          limit: 100
        }));
        const allWorkflows =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[216]++, workflowsResponse.data);
        const workflows =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[217]++, args.includeInactive ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[74][0]++, allWorkflows) :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[74][1]++, allWorkflows.filter(w => {
          /* istanbul ignore next */
          cov_1mp0bgbitd().f[27]++;
          cov_1mp0bgbitd().s[218]++;
          return w.active;
        })));
        // Get recent executions for all workflows
        const now =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[219]++, new Date());
        const timeframeDuration =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[220]++, {
          hour: 1 * 60 * 60 * 1000,
          day: 24 * 60 * 60 * 1000,
          week: 7 * 24 * 60 * 60 * 1000
        });
        const startTime =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[221]++, new Date(now.getTime() - timeframeDuration[args.timeframe]));
        let dashboard =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[222]++, `# 📊 n8n Monitoring Dashboard\n\n`);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[223]++;
        dashboard += `**Generated:** ${now.toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[224]++;
        dashboard += `**Timeframe:** Last ${args.timeframe}\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[225]++;
        dashboard += `**Update Frequency:** Real-time\n\n`;
        // System overview
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[226]++;
        dashboard += `## 🖥️ System Overview\n\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[227]++;
        dashboard += `| Metric | Value |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[228]++;
        dashboard += `|--------|-------|\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[229]++;
        dashboard += `| Total Workflows | ${allWorkflows.length} |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[230]++;
        dashboard += `| Active Workflows | ${allWorkflows.filter(w => {
          /* istanbul ignore next */
          cov_1mp0bgbitd().f[28]++;
          cov_1mp0bgbitd().s[231]++;
          return w.active;
        }).length} |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[232]++;
        dashboard += `| Inactive Workflows | ${allWorkflows.filter(w => {
          /* istanbul ignore next */
          cov_1mp0bgbitd().f[29]++;
          cov_1mp0bgbitd().s[233]++;
          return !w.active;
        }).length} |\n`;
        // Workflow status summary
        let totalExecutions =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[234]++, 0);
        let totalSuccessful =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[235]++, 0);
        let totalFailed =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[236]++, 0);
        let totalRunning =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[237]++, 0);
        const workflowStatuses =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[238]++, []);
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[239]++;
        for (const workflow of workflows.slice(0, 10)) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[240]++;
          // Limit to 10 workflows for dashboard
          try {
            const executions =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[241]++, await client.getExecutions({
              limit: 50
            }));
            const recentExecutions =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[242]++, executions.data.filter(execution => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[30]++;
              cov_1mp0bgbitd().s[243]++;
              return /* istanbul ignore next */(cov_1mp0bgbitd().b[75][0]++, execution.workflowId === workflow.id) &&
              /* istanbul ignore next */
              (cov_1mp0bgbitd().b[75][1]++, new Date(execution.startedAt) >= startTime);
            }));
            const successful =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[244]++, recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[31]++;
              cov_1mp0bgbitd().s[245]++;
              return e.status === 'success';
            }).length);
            const failed =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[246]++, recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[32]++;
              cov_1mp0bgbitd().s[247]++;
              return e.status === 'error';
            }).length);
            const running =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[248]++, recentExecutions.filter(e => {
              /* istanbul ignore next */
              cov_1mp0bgbitd().f[33]++;
              cov_1mp0bgbitd().s[249]++;
              return e.status === 'running';
            }).length);
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[250]++;
            totalExecutions += recentExecutions.length;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[251]++;
            totalSuccessful += successful;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[252]++;
            totalFailed += failed;
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[253]++;
            totalRunning += running;
            const successRate =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[254]++, recentExecutions.length > 0 ?
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[76][0]++, successful / recentExecutions.length * 100) :
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[76][1]++, 0));
            const status =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[255]++, successRate >= 95 ?
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[77][0]++, '🟢') :
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[77][1]++, successRate >= 90 ?
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[78][0]++, '🟡') :
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[78][1]++, successRate >= 70 ?
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[79][0]++, '🟠') :
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[79][1]++, '🔴'))));
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[256]++;
            workflowStatuses.push({
              name: workflow.name,
              status,
              executions: recentExecutions.length,
              successRate: successRate.toFixed(1),
              running
            });
          } catch (_error) {
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[257]++;
            // Skip workflows that can't be analyzed
            continue;
          }
        }
        // Add execution summary to system overview
        const systemSuccessRate =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[258]++, totalExecutions > 0 ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[80][0]++, totalSuccessful / totalExecutions * 100) :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[80][1]++, 0));
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[259]++;
        dashboard += `| Total Executions (${args.timeframe}) | ${totalExecutions} |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[260]++;
        dashboard += `| Successful Executions | ${totalSuccessful} (${systemSuccessRate.toFixed(1)}%) |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[261]++;
        dashboard += `| Failed Executions | ${totalFailed} |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[262]++;
        dashboard += `| Running Executions | ${totalRunning} |\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[263]++;
        dashboard += `| System Health | ${systemSuccessRate >= 95 ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[81][0]++, '🟢 Excellent') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[81][1]++, systemSuccessRate >= 90 ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[82][0]++, '🟡 Good') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[82][1]++, systemSuccessRate >= 70 ?
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[83][0]++, '🟠 Fair') :
        /* istanbul ignore next */
        (cov_1mp0bgbitd().b[83][1]++, '🔴 Poor')))} |\n\n`;
        // Workflow status table
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[264]++;
        if (workflowStatuses.length > 0) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[84][0]++;
          cov_1mp0bgbitd().s[265]++;
          dashboard += `## 📋 Workflow Status\n\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[266]++;
          dashboard += `| Workflow | Status | Executions | Success Rate | Running |\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[267]++;
          dashboard += `|----------|--------|------------|--------------|----------|\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[268]++;
          workflowStatuses.forEach(ws => {
            /* istanbul ignore next */
            cov_1mp0bgbitd().f[34]++;
            cov_1mp0bgbitd().s[269]++;
            dashboard += `| ${ws.name} | ${ws.status} | ${ws.executions} | ${ws.successRate}% | ${ws.running} |\n`;
          });
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[270]++;
          dashboard += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[84][1]++;
        }
        // Active alerts summary
        cov_1mp0bgbitd().s[271]++;
        dashboard += `## 🚨 Active Alerts\n\n`;
        const workflowsWithAlerts =
        /* istanbul ignore next */
        (cov_1mp0bgbitd().s[272]++, workflows.filter(w => {
          /* istanbul ignore next */
          cov_1mp0bgbitd().f[35]++;
          const alertRules =
          /* istanbul ignore next */
          (cov_1mp0bgbitd().s[273]++, w.settings?.alertRules);
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[274]++;
          return /* istanbul ignore next */(cov_1mp0bgbitd().b[85][0]++, Array.isArray(alertRules)) &&
          /* istanbul ignore next */
          (cov_1mp0bgbitd().b[85][1]++, alertRules.length > 0);
        }));
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[275]++;
        if (workflowsWithAlerts.length > 0) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[86][0]++;
          cov_1mp0bgbitd().s[276]++;
          dashboard += `**Workflows with Alert Rules:** ${workflowsWithAlerts.length}\n\n`;
          /* istanbul ignore next */
          cov_1mp0bgbitd().s[277]++;
          workflowsWithAlerts.forEach(workflow => {
            /* istanbul ignore next */
            cov_1mp0bgbitd().f[36]++;
            const alertRules =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[278]++, workflow.settings?.alertRules);
            const alertCount =
            /* istanbul ignore next */
            (cov_1mp0bgbitd().s[279]++, Array.isArray(alertRules) ?
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[87][0]++, alertRules.length) :
            /* istanbul ignore next */
            (cov_1mp0bgbitd().b[87][1]++, 0));
            /* istanbul ignore next */
            cov_1mp0bgbitd().s[280]++;
            dashboard += `- **${workflow.name}**: ${alertCount} alert rule(s) configured\n`;
          });
        } else {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[86][1]++;
          cov_1mp0bgbitd().s[281]++;
          dashboard += `No alert rules configured.\n`;
        }
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[282]++;
        dashboard += '\n';
        // Quick actions
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[283]++;
        dashboard += `## ⚡ Quick Actions\n\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[284]++;
        dashboard += `**Common Monitoring Tasks:**\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[285]++;
        dashboard += `- Use \`track-workflow-performance\` to analyze specific workflow metrics\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[286]++;
        dashboard += `- Use \`check-workflow-health\` to perform comprehensive health checks\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[287]++;
        dashboard += `- Use \`create-alert-rule\` to set up automated monitoring alerts\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[288]++;
        dashboard += `- Use \`setup-error-notifications\` to configure failure notifications\n\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[289]++;
        dashboard += `**System Recommendations:**\n`;
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[290]++;
        if (systemSuccessRate < 90) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[88][0]++;
          cov_1mp0bgbitd().s[291]++;
          dashboard += `- 🔴 System success rate is below 90% - investigate failing workflows\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[88][1]++;
        }
        cov_1mp0bgbitd().s[292]++;
        if (totalRunning > 10) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[89][0]++;
          cov_1mp0bgbitd().s[293]++;
          dashboard += `- ⚠️ High number of running executions - monitor for potential performance issues\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[89][1]++;
        }
        cov_1mp0bgbitd().s[294]++;
        if (workflowsWithAlerts.length === 0) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[90][0]++;
          cov_1mp0bgbitd().s[295]++;
          dashboard += `- 💡 No alert rules configured - consider setting up monitoring alerts\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[90][1]++;
        }
        cov_1mp0bgbitd().s[296]++;
        if (totalExecutions === 0) {
          /* istanbul ignore next */
          cov_1mp0bgbitd().b[91][0]++;
          cov_1mp0bgbitd().s[297]++;
          dashboard += `- 📊 No recent executions - workflows may be inactive or not triggered\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1mp0bgbitd().b[91][1]++;
        }
        cov_1mp0bgbitd().s[298]++;
        return dashboard;
      } catch (error) {
        /* istanbul ignore next */
        cov_1mp0bgbitd().s[299]++;
        throw new fastmcp_1.UserError(`Failed to generate monitoring dashboard: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,