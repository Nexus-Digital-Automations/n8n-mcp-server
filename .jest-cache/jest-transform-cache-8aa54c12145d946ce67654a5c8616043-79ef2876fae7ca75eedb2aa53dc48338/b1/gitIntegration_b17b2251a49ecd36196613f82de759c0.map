{"version":3,"names":["cov_ri4cij7mu","actualCoverage","UserError","GitIntegrationClient","provider","auth","constructor","repositoryUrl","b","f","s","detectProvider","url","globalThis","URL","hostname","name","baseUrl","apiPath","includes","parseRepositoryUrl","pathParts","pathname","split","filter","Boolean","length","owner","repo","replace","makeRequest","endpoint","options","headers","Accept","token","username","password","credentials","btoa","response","fetch","ok","errorText","text","Error","toUpperCase","status","json","error","message","listContents","path","branch","map","item","type","size","content","sha","downloadUrl","download_url","getFileContent","filePath","encoding","atob","createOrUpdateFile","commitOptions","currentSha","requestBody","author","email","method","body","JSON","stringify","validateAccess","getRepositoryInfo","fullName","full_name","description","defaultBranch","default_branch","isPrivate","private","primaryLanguage","language","createGitClient"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/gitIntegration.ts"],"sourcesContent":["/**\n * Git Integration Client for n8n MCP Server\n *\n * Provides integration with Git hosting services (GitHub, GitLab, Bitbucket)\n * for workflow and configuration management operations.\n */\n\nimport { UserError } from 'fastmcp';\n\nexport interface GitAuthOptions {\n  token?: string;\n  username?: string;\n  password?: string;\n}\n\nexport interface RepositoryContent {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  size?: number;\n  content?: string;\n  sha?: string;\n  downloadUrl?: string;\n}\n\nexport interface GitCommitOptions {\n  message: string;\n  branch?: string;\n  author?: {\n    name: string;\n    email: string;\n  };\n}\n\nexport interface GitProvider {\n  name: string;\n  baseUrl: string;\n  apiPath: string;\n}\n\n/**\n * Git Integration Client\n *\n * Handles operations with various Git hosting providers.\n * Currently supports GitHub API with plans for GitLab and Bitbucket.\n */\nexport class GitIntegrationClient {\n  private provider: GitProvider;\n  private auth: GitAuthOptions;\n\n  constructor(repositoryUrl: string, auth: GitAuthOptions = {}) {\n    this.provider = this.detectProvider(repositoryUrl);\n    this.auth = auth;\n  }\n\n  /**\n   * Detect Git provider from repository URL\n   */\n  private detectProvider(repositoryUrl: string): GitProvider {\n    const url = new globalThis.URL(repositoryUrl);\n\n    if (url.hostname === 'github.com') {\n      return {\n        name: 'github',\n        baseUrl: 'https://api.github.com',\n        apiPath: '/repos',\n      };\n    }\n\n    if (url.hostname === 'gitlab.com') {\n      return {\n        name: 'gitlab',\n        baseUrl: 'https://gitlab.com/api/v4',\n        apiPath: '/projects',\n      };\n    }\n\n    if (url.hostname.includes('bitbucket')) {\n      return {\n        name: 'bitbucket',\n        baseUrl: 'https://api.bitbucket.org/2.0',\n        apiPath: '/repositories',\n      };\n    }\n\n    throw new UserError(\n      `Unsupported Git provider: ${url.hostname}. Currently supports GitHub, GitLab, and Bitbucket.`\n    );\n  }\n\n  /**\n   * Extract owner and repo from repository URL\n   */\n  private parseRepositoryUrl(repositoryUrl: string): { owner: string; repo: string } {\n    const url = new globalThis.URL(repositoryUrl);\n    const pathParts = url.pathname.split('/').filter(Boolean);\n\n    if (pathParts.length < 2) {\n      throw new UserError('Invalid repository URL format. Expected: https://host/owner/repo');\n    }\n\n    const owner = pathParts[0];\n    const repo = pathParts[1].replace(/\\.git$/, ''); // Remove .git suffix if present\n\n    return { owner, repo };\n  }\n\n  /**\n   * Make authenticated request to Git API\n   */\n  private async makeRequest<T>(endpoint: string, options: globalThis.RequestInit = {}): Promise<T> {\n    const headers: Record<string, string> = {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'User-Agent': 'n8n-mcp-server/1.0.0',\n    };\n\n    // Add authentication headers based on provider\n    if (this.auth.token) {\n      if (this.provider.name === 'github') {\n        headers['Authorization'] = `Bearer ${this.auth.token}`;\n      } else if (this.provider.name === 'gitlab') {\n        headers['PRIVATE-TOKEN'] = this.auth.token;\n      } else if (this.provider.name === 'bitbucket') {\n        headers['Authorization'] = `Bearer ${this.auth.token}`;\n      }\n    } else if (this.auth.username && this.auth.password) {\n      const credentials = globalThis.btoa(`${this.auth.username}:${this.auth.password}`);\n      headers['Authorization'] = `Basic ${credentials}`;\n    }\n\n    const url = `${this.provider.baseUrl}${endpoint}`;\n\n    try {\n      const response = await globalThis.fetch(url, {\n        ...options,\n        headers: { ...headers, ...options.headers },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(\n          `${this.provider.name.toUpperCase()} API error: ${response.status} - ${errorText}`\n        );\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new UserError(`Git API request failed: ${error.message}`);\n      }\n      throw new UserError('Git API request failed with unknown error');\n    }\n  }\n\n  /**\n   * List contents of a repository directory\n   */\n  async listContents(\n    repositoryUrl: string,\n    path: string = '',\n    branch: string = 'main'\n  ): Promise<RepositoryContent[]> {\n    const { owner, repo } = this.parseRepositoryUrl(repositoryUrl);\n    let endpoint: string;\n\n    if (this.provider.name === 'github') {\n      endpoint = `${this.provider.apiPath}/${owner}/${repo}/contents/${path}?ref=${branch}`;\n    } else if (this.provider.name === 'gitlab') {\n      // GitLab uses project ID, would need additional lookup\n      throw new UserError('GitLab integration not yet implemented');\n    } else {\n      throw new UserError(`Provider ${this.provider.name} not yet implemented`);\n    }\n\n    interface GitHubContent {\n      name: string;\n      path: string;\n      type: string;\n      size?: number;\n      content?: string;\n      sha: string;\n      download_url?: string;\n    }\n\n    const response = await this.makeRequest<GitHubContent[]>(endpoint);\n\n    return response.map(item => ({\n      name: item.name,\n      path: item.path,\n      type: item.type === 'dir' ? 'directory' : 'file',\n      size: item.size,\n      content: item.content,\n      sha: item.sha,\n      downloadUrl: item.download_url,\n    }));\n  }\n\n  /**\n   * Fetch file content from repository\n   */\n  async getFileContent(\n    repositoryUrl: string,\n    filePath: string,\n    branch: string = 'main'\n  ): Promise<string> {\n    const { owner, repo } = this.parseRepositoryUrl(repositoryUrl);\n    let endpoint: string;\n\n    if (this.provider.name === 'github') {\n      endpoint = `${this.provider.apiPath}/${owner}/${repo}/contents/${filePath}?ref=${branch}`;\n    } else {\n      throw new UserError(`Provider ${this.provider.name} not yet implemented`);\n    }\n\n    interface GitHubFileContent {\n      content: string;\n      encoding: string;\n      type: string;\n    }\n\n    const response = await this.makeRequest<GitHubFileContent>(endpoint);\n\n    if (response.type !== 'file') {\n      throw new UserError(`Path ${filePath} is not a file`);\n    }\n\n    if (response.encoding === 'base64') {\n      return globalThis.atob(response.content.replace(/\\s/g, ''));\n    }\n\n    return response.content;\n  }\n\n  /**\n   * Create or update file in repository\n   */\n  async createOrUpdateFile(\n    repositoryUrl: string,\n    filePath: string,\n    content: string,\n    commitOptions: GitCommitOptions,\n    branch: string = 'main'\n  ): Promise<void> {\n    const { owner, repo } = this.parseRepositoryUrl(repositoryUrl);\n\n    if (this.provider.name !== 'github') {\n      throw new UserError(`Provider ${this.provider.name} not yet implemented`);\n    }\n\n    // First, try to get the current file to get its SHA (required for updates)\n    let currentSha: string | undefined;\n    try {\n      const endpoint = `${this.provider.apiPath}/${owner}/${repo}/contents/${filePath}?ref=${branch}`;\n      const response = await this.makeRequest<{ sha: string }>(endpoint);\n      currentSha = response.sha;\n    } catch {\n      // File doesn't exist, that's okay for creation\n    }\n\n    // Create or update the file\n    const endpoint = `${this.provider.apiPath}/${owner}/${repo}/contents/${filePath}`;\n    const requestBody = {\n      message: commitOptions.message,\n      content: globalThis.btoa(content), // GitHub expects base64 encoded content\n      branch: branch,\n      ...(currentSha && { sha: currentSha }), // Include SHA for updates\n      ...(commitOptions.author && {\n        author: {\n          name: commitOptions.author.name,\n          email: commitOptions.author.email,\n        },\n      }),\n    };\n\n    await this.makeRequest(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(requestBody),\n    });\n  }\n\n  /**\n   * Validate repository access\n   */\n  async validateAccess(repositoryUrl: string): Promise<boolean> {\n    try {\n      const { owner, repo } = this.parseRepositoryUrl(repositoryUrl);\n      let endpoint: string;\n\n      if (this.provider.name === 'github') {\n        endpoint = `${this.provider.apiPath}/${owner}/${repo}`;\n      } else {\n        throw new UserError(`Provider ${this.provider.name} not yet implemented`);\n      }\n\n      await this.makeRequest(endpoint);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get repository information\n   */\n  async getRepositoryInfo(repositoryUrl: string) {\n    const { owner, repo } = this.parseRepositoryUrl(repositoryUrl);\n\n    if (this.provider.name !== 'github') {\n      throw new UserError(`Provider ${this.provider.name} not yet implemented`);\n    }\n\n    const endpoint = `${this.provider.apiPath}/${owner}/${repo}`;\n\n    interface GitHubRepo {\n      name: string;\n      full_name: string;\n      description: string;\n      default_branch: string;\n      private: boolean;\n      size: number;\n      language: string;\n    }\n\n    const response = await this.makeRequest<GitHubRepo>(endpoint);\n\n    return {\n      name: response.name,\n      fullName: response.full_name,\n      description: response.description,\n      defaultBranch: response.default_branch,\n      isPrivate: response.private,\n      size: response.size,\n      primaryLanguage: response.language,\n    };\n  }\n}\n\n/**\n * Helper function to create Git integration client\n */\nexport function createGitClient(\n  repositoryUrl: string,\n  auth: GitAuthOptions = {}\n): GitIntegrationClient {\n  return new GitIntegrationClient(repositoryUrl, auth);\n}\n"],"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","ignoreList":[]}