3eb5e4e8eaf0bed91812cb58c71c2439
"use strict";

/**
 * Execution State Management Utilities for n8n MCP Server
 *
 * Provides utilities for managing execution state, checkpoints, retry logic,
 * and execution flow control for sophisticated workflow execution control.
 */
/* istanbul ignore next */
function cov_7mukgb8g9() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts";
  var hash = "610ff2210c9a3979b3c4b0b8dddf3ad992442fbe";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 39
        }
      },
      "2": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "3": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "4": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "5": {
        start: {
          line: 53,
          column: 17
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "6": {
        start: {
          line: 54,
          column: 18
        },
        end: {
          line: 54,
          column: 27
        }
      },
      "7": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 30
        }
      },
      "8": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 16
        }
      },
      "9": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "10": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "11": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 121
        }
      },
      "12": {
        start: {
          line: 96,
          column: 84
        },
        end: {
          line: 96,
          column: 119
        }
      },
      "13": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "14": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "15": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 61
        }
      },
      "16": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "17": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 56
        }
      },
      "18": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "19": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 25
        }
      },
      "20": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 60
        }
      },
      "21": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "22": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "23": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 25
        }
      },
      "24": {
        start: {
          line: 152,
          column: 30
        },
        end: {
          line: 152,
          column: 61
        }
      },
      "25": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 51
        }
      },
      "26": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "27": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "28": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "29": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "30": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 20
        }
      },
      "31": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 56
        }
      },
      "32": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "33": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "34": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 70
        }
      },
      "35": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "36": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 188,
          column: 58
        }
      },
      "37": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 189,
          column: 40
        }
      },
      "38": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 55
        }
      },
      "39": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 55
        }
      },
      "40": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 51
        }
      },
      "41": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 26
        }
      },
      "42": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "43": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "44": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 25
        }
      },
      "45": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 67
        }
      },
      "46": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "47": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 25
        }
      },
      "48": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 66
        }
      },
      "49": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "50": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "51": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 39
        }
      },
      "52": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 45
        }
      },
      "53": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 39
        }
      },
      "54": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 111
        }
      },
      "55": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "56": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 227,
          column: 20
        }
      },
      "57": {
        start: {
          line: 233,
          column: 28
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "58": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "59": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 25
        }
      },
      "60": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 89
        }
      },
      "61": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 127
        }
      },
      "62": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 247,
          column: 43
        }
      },
      "63": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "64": {
        start: {
          line: 256,
          column: 24
        },
        end: {
          line: 256,
          column: 56
        }
      },
      "65": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 259,
          column: 9
        }
      },
      "66": {
        start: {
          line: 258,
          column: 12
        },
        end: {
          line: 258,
          column: 25
        }
      },
      "67": {
        start: {
          line: 260,
          column: 30
        },
        end: {
          line: 260,
          column: 37
        }
      },
      "68": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 65
        }
      },
      "69": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 262,
          column: 75
        }
      },
      "70": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 264,
          column: 37
        }
      },
      "71": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 270,
          column: 56
        }
      },
      "72": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 273,
          column: 9
        }
      },
      "73": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 272,
          column: 25
        }
      },
      "74": {
        start: {
          line: 274,
          column: 26
        },
        end: {
          line: 274,
          column: 85
        }
      },
      "75": {
        start: {
          line: 274,
          column: 65
        },
        end: {
          line: 274,
          column: 84
        }
      },
      "76": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "77": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 25
        }
      },
      "78": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 280,
          column: 57
        }
      },
      "79": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 286,
          column: 56
        }
      },
      "80": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 289,
          column: 9
        }
      },
      "81": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 288,
          column: 24
        }
      },
      "82": {
        start: {
          line: 290,
          column: 30
        },
        end: {
          line: 290,
          column: 37
        }
      },
      "83": {
        start: {
          line: 291,
          column: 31
        },
        end: {
          line: 291,
          column: 88
        }
      },
      "84": {
        start: {
          line: 291,
          column: 64
        },
        end: {
          line: 291,
          column: 87
        }
      },
      "85": {
        start: {
          line: 292,
          column: 28
        },
        end: {
          line: 292,
          column: 82
        }
      },
      "86": {
        start: {
          line: 292,
          column: 61
        },
        end: {
          line: 292,
          column: 81
        }
      },
      "87": {
        start: {
          line: 294,
          column: 35
        },
        end: {
          line: 294,
          column: 37
        }
      },
      "88": {
        start: {
          line: 295,
          column: 28
        },
        end: {
          line: 295,
          column: 29
        }
      },
      "89": {
        start: {
          line: 296,
          column: 25
        },
        end: {
          line: 296,
          column: 26
        }
      },
      "90": {
        start: {
          line: 297,
          column: 25
        },
        end: {
          line: 297,
          column: 26
        }
      },
      "91": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 303,
          column: 11
        }
      },
      "92": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 302,
          column: 13
        }
      },
      "93": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 64
        }
      },
      "94": {
        start: {
          line: 301,
          column: 16
        },
        end: {
          line: 301,
          column: 47
        }
      },
      "95": {
        start: {
          line: 305,
          column: 29
        },
        end: {
          line: 305,
          column: 77
        }
      },
      "96": {
        start: {
          line: 307,
          column: 28
        },
        end: {
          line: 315,
          column: 11
        }
      },
      "97": {
        start: {
          line: 308,
          column: 28
        },
        end: {
          line: 308,
          column: 65
        }
      },
      "98": {
        start: {
          line: 309,
          column: 28
        },
        end: {
          line: 309,
          column: 65
        }
      },
      "99": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "100": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "101": {
        start: {
          line: 330,
          column: 45
        },
        end: {
          line: 336,
          column: 13
        }
      },
      "102": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 344,
          column: 64
        }
      },
      "103": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "104": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 356,
          column: 14
        }
      },
      "105": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 375,
          column: 9
        }
      },
      "106": {
        start: {
          line: 360,
          column: 12
        },
        end: {
          line: 374,
          column: 14
        }
      },
      "107": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "108": {
        start: {
          line: 378,
          column: 12
        },
        end: {
          line: 378,
          column: 61
        }
      },
      "109": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 67
        }
      },
      "110": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "111": {
        start: {
          line: 382,
          column: 29
        },
        end: {
          line: 382,
          column: 78
        }
      },
      "112": {
        start: {
          line: 384,
          column: 31
        },
        end: {
          line: 384,
          column: 81
        }
      },
      "113": {
        start: {
          line: 385,
          column: 26
        },
        end: {
          line: 385,
          column: 53
        }
      },
      "114": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "115": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 44
        }
      },
      "116": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 28
        }
      },
      "117": {
        start: {
          line: 393,
          column: 31
        },
        end: {
          line: 393,
          column: 81
        }
      },
      "118": {
        start: {
          line: 394,
          column: 26
        },
        end: {
          line: 394,
          column: 53
        }
      },
      "119": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 397,
          column: 13
        }
      },
      "120": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 396,
          column: 44
        }
      },
      "121": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 408,
          column: 14
        }
      },
      "122": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 56
        }
      },
      "123": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 421,
          column: 51
        }
      },
      "124": {
        start: {
          line: 422,
          column: 22
        },
        end: {
          line: 422,
          column: 23
        }
      },
      "125": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 435,
          column: 9
        }
      },
      "126": {
        start: {
          line: 424,
          column: 34
        },
        end: {
          line: 424,
          column: 81
        }
      },
      "127": {
        start: {
          line: 425,
          column: 32
        },
        end: {
          line: 425,
          column: 110
        }
      },
      "128": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "129": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 52
        }
      },
      "130": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 56
        }
      },
      "131": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 432,
          column: 19
        }
      },
      "132": {
        start: {
          line: 431,
          column: 20
        },
        end: {
          line: 431,
          column: 69
        }
      },
      "133": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 26
        }
      },
      "134": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 70
        }
      },
      "135": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 437,
          column: 23
        }
      },
      "136": {
        start: {
          line: 441,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "137": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 443,
          column: 33
        }
      },
      "138": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 35
        }
      },
      "139": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 32
        }
      },
      "140": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 33
        }
      },
      "141": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 33
        }
      },
      "142": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 464,
          column: 10
        }
      },
      "143": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 62
        }
      },
      "144": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 471,
          column: 29
        }
      },
      "145": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 29
        }
      },
      "146": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 473,
          column: 28
        }
      },
      "147": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 28
        }
      },
      "148": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 475,
          column: 29
        }
      },
      "149": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 29
        }
      },
      "150": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 477,
          column: 31
        }
      },
      "151": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 31
        }
      },
      "152": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 479,
          column: 28
        }
      },
      "153": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 28
        }
      },
      "154": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 481,
          column: 31
        }
      },
      "155": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 31
        }
      },
      "156": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 483,
          column: 29
        }
      },
      "157": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 29
        }
      },
      "158": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 484,
          column: 25
        }
      },
      "159": {
        start: {
          line: 487,
          column: 30
        },
        end: {
          line: 487,
          column: 37
        }
      },
      "160": {
        start: {
          line: 488,
          column: 27
        },
        end: {
          line: 488,
          column: 54
        }
      },
      "161": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 492,
          column: 9
        }
      },
      "162": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 51
        }
      },
      "163": {
        start: {
          line: 491,
          column: 12
        },
        end: {
          line: 491,
          column: 19
        }
      },
      "164": {
        start: {
          line: 493,
          column: 26
        },
        end: {
          line: 493,
          column: 90
        }
      },
      "165": {
        start: {
          line: 493,
          column: 59
        },
        end: {
          line: 493,
          column: 82
        }
      },
      "166": {
        start: {
          line: 494,
          column: 23
        },
        end: {
          line: 494,
          column: 84
        }
      },
      "167": {
        start: {
          line: 494,
          column: 56
        },
        end: {
          line: 494,
          column: 76
        }
      },
      "168": {
        start: {
          line: 495,
          column: 24
        },
        end: {
          line: 495,
          column: 86
        }
      },
      "169": {
        start: {
          line: 495,
          column: 57
        },
        end: {
          line: 495,
          column: 78
        }
      },
      "170": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 54
        }
      },
      "171": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 48
        }
      },
      "172": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 50
        }
      },
      "173": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 109
        }
      },
      "174": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 508,
          column: 38
        }
      },
      "175": {
        start: {
          line: 505,
          column: 28
        },
        end: {
          line: 505,
          column: 65
        }
      },
      "176": {
        start: {
          line: 506,
          column: 28
        },
        end: {
          line: 506,
          column: 65
        }
      },
      "177": {
        start: {
          line: 508,
          column: 25
        },
        end: {
          line: 508,
          column: 36
        }
      },
      "178": {
        start: {
          line: 511,
          column: 28
        },
        end: {
          line: 511,
          column: 30
        }
      },
      "179": {
        start: {
          line: 513,
          column: 33
        },
        end: {
          line: 513,
          column: 108
        }
      },
      "180": {
        start: {
          line: 513,
          column: 69
        },
        end: {
          line: 513,
          column: 107
        }
      },
      "181": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 521,
          column: 9
        }
      },
      "182": {
        start: {
          line: 515,
          column: 12
        },
        end: {
          line: 520,
          column: 15
        }
      },
      "183": {
        start: {
          line: 522,
          column: 28
        },
        end: {
          line: 522,
          column: 88
        }
      },
      "184": {
        start: {
          line: 522,
          column: 64
        },
        end: {
          line: 522,
          column: 87
        }
      },
      "185": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 530,
          column: 9
        }
      },
      "186": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 529,
          column: 15
        }
      },
      "187": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 531,
          column: 27
        }
      },
      "188": {
        start: {
          line: 534,
          column: 30
        },
        end: {
          line: 534,
          column: 37
        }
      },
      "189": {
        start: {
          line: 535,
          column: 8
        },
        end: {
          line: 550,
          column: 9
        }
      },
      "190": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 64
        }
      },
      "191": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 539,
          column: 65
        }
      },
      "192": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 63
        }
      },
      "193": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 65
        }
      },
      "194": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 545,
          column: 64
        }
      },
      "195": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 547,
          column: 72
        }
      },
      "196": {
        start: {
          line: 549,
          column: 16
        },
        end: {
          line: 549,
          column: 73
        }
      },
      "197": {
        start: {
          line: 554,
          column: 27
        },
        end: {
          line: 554,
          column: 132
        }
      },
      "198": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 65
        }
      },
      "199": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 566,
          column: 10
        }
      },
      "200": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 569,
          column: 66
        }
      },
      "201": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 577,
          column: 10
        }
      },
      "202": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 580,
          column: 66
        }
      },
      "203": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 588,
          column: 10
        }
      },
      "204": {
        start: {
          line: 591,
          column: 23
        },
        end: {
          line: 591,
          column: 69
        }
      },
      "205": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 597,
          column: 10
        }
      },
      "206": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 68
        }
      },
      "207": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 606,
          column: 10
        }
      },
      "208": {
        start: {
          line: 609,
          column: 25
        },
        end: {
          line: 609,
          column: 131
        }
      },
      "209": {
        start: {
          line: 610,
          column: 34
        },
        end: {
          line: 610,
          column: 80
        }
      },
      "210": {
        start: {
          line: 611,
          column: 27
        },
        end: {
          line: 611,
          column: 117
        }
      },
      "211": {
        start: {
          line: 612,
          column: 8
        },
        end: {
          line: 624,
          column: 9
        }
      },
      "212": {
        start: {
          line: 613,
          column: 12
        },
        end: {
          line: 623,
          column: 14
        }
      },
      "213": {
        start: {
          line: 626,
          column: 27
        },
        end: {
          line: 626,
          column: 117
        }
      },
      "214": {
        start: {
          line: 628,
          column: 8
        },
        end: {
          line: 634,
          column: 10
        }
      },
      "215": {
        start: {
          line: 636,
          column: 8
        },
        end: {
          line: 642,
          column: 11
        }
      },
      "216": {
        start: {
          line: 637,
          column: 12
        },
        end: {
          line: 641,
          column: 13
        }
      },
      "217": {
        start: {
          line: 638,
          column: 16
        },
        end: {
          line: 638,
          column: 39
        }
      },
      "218": {
        start: {
          line: 639,
          column: 16
        },
        end: {
          line: 639,
          column: 39
        }
      },
      "219": {
        start: {
          line: 640,
          column: 16
        },
        end: {
          line: 640,
          column: 45
        }
      },
      "220": {
        start: {
          line: 643,
          column: 8
        },
        end: {
          line: 643,
          column: 67
        }
      },
      "221": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 657,
          column: 10
        }
      },
      "222": {
        start: {
          line: 660,
          column: 30
        },
        end: {
          line: 660,
          column: 63
        }
      },
      "223": {
        start: {
          line: 661,
          column: 8
        },
        end: {
          line: 673,
          column: 9
        }
      },
      "224": {
        start: {
          line: 662,
          column: 12
        },
        end: {
          line: 672,
          column: 14
        }
      },
      "225": {
        start: {
          line: 674,
          column: 26
        },
        end: {
          line: 674,
          column: 92
        }
      },
      "226": {
        start: {
          line: 674,
          column: 65
        },
        end: {
          line: 674,
          column: 91
        }
      },
      "227": {
        start: {
          line: 675,
          column: 8
        },
        end: {
          line: 687,
          column: 9
        }
      },
      "228": {
        start: {
          line: 676,
          column: 12
        },
        end: {
          line: 686,
          column: 14
        }
      },
      "229": {
        start: {
          line: 689,
          column: 29
        },
        end: {
          line: 689,
          column: 34
        }
      },
      "230": {
        start: {
          line: 690,
          column: 30
        },
        end: {
          line: 690,
          column: 32
        }
      },
      "231": {
        start: {
          line: 691,
          column: 8
        },
        end: {
          line: 701,
          column: 11
        }
      },
      "232": {
        start: {
          line: 692,
          column: 12
        },
        end: {
          line: 694,
          column: 13
        }
      },
      "233": {
        start: {
          line: 693,
          column: 16
        },
        end: {
          line: 693,
          column: 38
        }
      },
      "234": {
        start: {
          line: 695,
          column: 12
        },
        end: {
          line: 700,
          column: 13
        }
      },
      "235": {
        start: {
          line: 696,
          column: 16
        },
        end: {
          line: 696,
          column: 39
        }
      },
      "236": {
        start: {
          line: 697,
          column: 16
        },
        end: {
          line: 697,
          column: 39
        }
      },
      "237": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 45
        }
      },
      "238": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 699,
          column: 48
        }
      },
      "239": {
        start: {
          line: 702,
          column: 8
        },
        end: {
          line: 702,
          column: 66
        }
      },
      "240": {
        start: {
          line: 703,
          column: 8
        },
        end: {
          line: 713,
          column: 10
        }
      },
      "241": {
        start: {
          line: 716,
          column: 0
        },
        end: {
          line: 716,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 18
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 48
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 62
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 96,
            column: 76
          },
          end: {
            line: 96,
            column: 77
          }
        },
        loc: {
          start: {
            line: 96,
            column: 84
          },
          end: {
            line: 96,
            column: 119
          }
        },
        line: 96
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 58
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 136
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 62
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 176
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 25
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 58
          }
        },
        line: 188
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 22
          }
        },
        loc: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 40
          }
        },
        line: 189
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 40
          },
          end: {
            line: 228,
            column: 5
          }
        },
        line: 202
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 214,
            column: 45
          },
          end: {
            line: 214,
            column: 46
          }
        },
        loc: {
          start: {
            line: 214,
            column: 53
          },
          end: {
            line: 220,
            column: 9
          }
        },
        line: 214
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 232,
            column: 5
          }
        },
        loc: {
          start: {
            line: 232,
            column: 56
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 232
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 35
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 255
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 38
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 269
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 274,
            column: 60
          },
          end: {
            line: 274,
            column: 61
          }
        },
        loc: {
          start: {
            line: 274,
            column: 65
          },
          end: {
            line: 274,
            column: 84
          }
        },
        line: 274
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 39
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 285
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 291,
            column: 59
          },
          end: {
            line: 291,
            column: 60
          }
        },
        loc: {
          start: {
            line: 291,
            column: 64
          },
          end: {
            line: 291,
            column: 87
          }
        },
        line: 291
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 292,
            column: 56
          },
          end: {
            line: 292,
            column: 57
          }
        },
        loc: {
          start: {
            line: 292,
            column: 61
          },
          end: {
            line: 292,
            column: 81
          }
        },
        line: 292
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 298,
            column: 31
          },
          end: {
            line: 298,
            column: 32
          }
        },
        loc: {
          start: {
            line: 298,
            column: 39
          },
          end: {
            line: 303,
            column: 9
          }
        },
        line: 298
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 308,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        },
        loc: {
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 308,
            column: 65
          }
        },
        line: 308
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 309,
            column: 18
          },
          end: {
            line: 309,
            column: 19
          }
        },
        loc: {
          start: {
            line: 309,
            column: 28
          },
          end: {
            line: 309,
            column: 65
          }
        },
        line: 309
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 311,
            column: 17
          },
          end: {
            line: 311,
            column: 18
          }
        },
        loc: {
          start: {
            line: 311,
            column: 26
          },
          end: {
            line: 315,
            column: 9
          }
        },
        line: 311
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 330,
            column: 36
          },
          end: {
            line: 330,
            column: 37
          }
        },
        loc: {
          start: {
            line: 330,
            column: 45
          },
          end: {
            line: 336,
            column: 13
          }
        },
        line: 330
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 41
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 343
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 37
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 414
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 420,
            column: 4
          },
          end: {
            line: 420,
            column: 5
          }
        },
        loc: {
          start: {
            line: 420,
            column: 47
          },
          end: {
            line: 438,
            column: 5
          }
        },
        line: 420
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 430,
            column: 54
          },
          end: {
            line: 430,
            column: 55
          }
        },
        loc: {
          start: {
            line: 430,
            column: 68
          },
          end: {
            line: 432,
            column: 17
          }
        },
        line: 430
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 440,
            column: 4
          },
          end: {
            line: 440,
            column: 5
          }
        },
        loc: {
          start: {
            line: 440,
            column: 41
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 440
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 35
          },
          end: {
            line: 465,
            column: 5
          }
        },
        line: 454
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 37
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 466
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 469,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        loc: {
          start: {
            line: 469,
            column: 46
          },
          end: {
            line: 485,
            column: 5
          }
        },
        line: 469
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 486,
            column: 4
          },
          end: {
            line: 486,
            column: 5
          }
        },
        loc: {
          start: {
            line: 486,
            column: 37
          },
          end: {
            line: 500,
            column: 5
          }
        },
        line: 486
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 493,
            column: 54
          },
          end: {
            line: 493,
            column: 55
          }
        },
        loc: {
          start: {
            line: 493,
            column: 59
          },
          end: {
            line: 493,
            column: 82
          }
        },
        line: 493
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 494,
            column: 51
          },
          end: {
            line: 494,
            column: 52
          }
        },
        loc: {
          start: {
            line: 494,
            column: 56
          },
          end: {
            line: 494,
            column: 76
          }
        },
        line: 494
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 495,
            column: 52
          },
          end: {
            line: 495,
            column: 53
          }
        },
        loc: {
          start: {
            line: 495,
            column: 57
          },
          end: {
            line: 495,
            column: 78
          }
        },
        line: 495
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 501,
            column: 4
          },
          end: {
            line: 501,
            column: 5
          }
        },
        loc: {
          start: {
            line: 501,
            column: 38
          },
          end: {
            line: 509,
            column: 5
          }
        },
        line: 501
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 505,
            column: 20
          },
          end: {
            line: 505,
            column: 21
          }
        },
        loc: {
          start: {
            line: 505,
            column: 28
          },
          end: {
            line: 505,
            column: 65
          }
        },
        line: 505
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 506,
            column: 18
          },
          end: {
            line: 506,
            column: 19
          }
        },
        loc: {
          start: {
            line: 506,
            column: 28
          },
          end: {
            line: 506,
            column: 65
          }
        },
        line: 506
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 508,
            column: 17
          },
          end: {
            line: 508,
            column: 18
          }
        },
        loc: {
          start: {
            line: 508,
            column: 25
          },
          end: {
            line: 508,
            column: 36
          }
        },
        line: 508
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 510,
            column: 4
          },
          end: {
            line: 510,
            column: 5
          }
        },
        loc: {
          start: {
            line: 510,
            column: 47
          },
          end: {
            line: 532,
            column: 5
          }
        },
        line: 510
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 513,
            column: 61
          },
          end: {
            line: 513,
            column: 62
          }
        },
        loc: {
          start: {
            line: 513,
            column: 69
          },
          end: {
            line: 513,
            column: 107
          }
        },
        line: 513
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 522,
            column: 56
          },
          end: {
            line: 522,
            column: 57
          }
        },
        loc: {
          start: {
            line: 522,
            column: 64
          },
          end: {
            line: 522,
            column: 87
          }
        },
        line: 522
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 5
          }
        },
        loc: {
          start: {
            line: 533,
            column: 49
          },
          end: {
            line: 551,
            column: 5
          }
        },
        line: 533
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 552,
            column: 4
          },
          end: {
            line: 552,
            column: 5
          }
        },
        loc: {
          start: {
            line: 552,
            column: 46
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 552
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 568,
            column: 4
          },
          end: {
            line: 568,
            column: 5
          }
        },
        loc: {
          start: {
            line: 568,
            column: 47
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 568
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 579,
            column: 4
          },
          end: {
            line: 579,
            column: 5
          }
        },
        loc: {
          start: {
            line: 579,
            column: 45
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 579
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 47
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 590
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 46
          },
          end: {
            line: 658,
            column: 5
          }
        },
        line: 608
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 636,
            column: 45
          },
          end: {
            line: 636,
            column: 46
          }
        },
        loc: {
          start: {
            line: 636,
            column: 53
          },
          end: {
            line: 642,
            column: 9
          }
        },
        line: 636
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 659,
            column: 4
          },
          end: {
            line: 659,
            column: 5
          }
        },
        loc: {
          start: {
            line: 659,
            column: 54
          },
          end: {
            line: 714,
            column: 5
          }
        },
        line: 659
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 674,
            column: 60
          },
          end: {
            line: 674,
            column: 61
          }
        },
        loc: {
          start: {
            line: 674,
            column: 65
          },
          end: {
            line: 674,
            column: 91
          }
        },
        line: 674
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 691,
            column: 45
          },
          end: {
            line: 691,
            column: 46
          }
        },
        loc: {
          start: {
            line: 691,
            column: 53
          },
          end: {
            line: 701,
            column: 9
          }
        },
        line: 691
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 62,
            column: 46
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 65
          }
        }, {
          start: {
            line: 84,
            column: 69
          },
          end: {
            line: 84,
            column: 70
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 106,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 106,
            column: 58
          }
        }, {
          start: {
            line: 106,
            column: 62
          },
          end: {
            line: 106,
            column: 69
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 76
          }
        }, {
          start: {
            line: 127,
            column: 80
          },
          end: {
            line: 127,
            column: 82
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "6": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "7": {
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 58
          }
        }, {
          start: {
            line: 154,
            column: 62
          },
          end: {
            line: 154,
            column: 64
          }
        }],
        line: 154
      },
      "8": {
        loc: {
          start: {
            line: 176,
            column: 47
          },
          end: {
            line: 176,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 176,
            column: 58
          },
          end: {
            line: 176,
            column: 60
          }
        }],
        line: 176
      },
      "9": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "10": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "11": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 40
          }
        }, {
          start: {
            line: 215,
            column: 44
          },
          end: {
            line: 215,
            column: 67
          }
        }],
        line: 215
      },
      "14": {
        loc: {
          start: {
            line: 233,
            column: 28
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 233,
            column: 28
          },
          end: {
            line: 233,
            column: 45
          }
        }, {
          start: {
            line: 233,
            column: 49
          },
          end: {
            line: 237,
            column: 9
          }
        }],
        line: 233
      },
      "15": {
        loc: {
          start: {
            line: 238,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 239,
            column: 12
          },
          end: {
            line: 240,
            column: 25
          }
        }, {
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 242,
            column: 89
          }
        }, {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 244,
            column: 127
          }
        }, {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 43
          }
        }, {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 249,
            column: 43
          }
        }],
        line: 238
      },
      "16": {
        loc: {
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 8
          },
          end: {
            line: 259,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "17": {
        loc: {
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 60
          }
        }, {
          start: {
            line: 261,
            column: 64
          },
          end: {
            line: 261,
            column: 65
          }
        }],
        line: 261
      },
      "18": {
        loc: {
          start: {
            line: 262,
            column: 27
          },
          end: {
            line: 262,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 27
          },
          end: {
            line: 262,
            column: 70
          }
        }, {
          start: {
            line: 262,
            column: 74
          },
          end: {
            line: 262,
            column: 75
          }
        }],
        line: 262
      },
      "19": {
        loc: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 264,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 84
          }
        }, {
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 264,
            column: 35
          }
        }],
        line: 263
      },
      "20": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 273,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "21": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 280,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 278,
            column: 16
          },
          end: {
            line: 278,
            column: 44
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 279,
            column: 30
          }
        }, {
          start: {
            line: 280,
            column: 12
          },
          end: {
            line: 280,
            column: 55
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 289,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "24": {
        loc: {
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 12
          },
          end: {
            line: 302,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "25": {
        loc: {
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 308,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 308,
            column: 41
          }
        }, {
          start: {
            line: 308,
            column: 45
          },
          end: {
            line: 308,
            column: 65
          }
        }],
        line: 308
      },
      "26": {
        loc: {
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 29
          },
          end: {
            line: 309,
            column: 39
          }
        }, {
          start: {
            line: 309,
            column: 43
          },
          end: {
            line: 309,
            column: 44
          }
        }],
        line: 309
      },
      "27": {
        loc: {
          start: {
            line: 309,
            column: 49
          },
          end: {
            line: 309,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 49
          },
          end: {
            line: 309,
            column: 59
          }
        }, {
          start: {
            line: 309,
            column: 63
          },
          end: {
            line: 309,
            column: 64
          }
        }],
        line: 309
      },
      "28": {
        loc: {
          start: {
            line: 313,
            column: 22
          },
          end: {
            line: 313,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 313,
            column: 22
          },
          end: {
            line: 313,
            column: 35
          }
        }, {
          start: {
            line: 313,
            column: 39
          },
          end: {
            line: 313,
            column: 40
          }
        }],
        line: 313
      },
      "29": {
        loc: {
          start: {
            line: 332,
            column: 27
          },
          end: {
            line: 332,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 27
          },
          end: {
            line: 332,
            column: 43
          }
        }, {
          start: {
            line: 332,
            column: 47
          },
          end: {
            line: 332,
            column: 56
          }
        }],
        line: 332
      },
      "30": {
        loc: {
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 333,
            column: 49
          }
        }, {
          start: {
            line: 333,
            column: 53
          },
          end: {
            line: 333,
            column: 68
          }
        }],
        line: 333
      },
      "31": {
        loc: {
          start: {
            line: 335,
            column: 28
          },
          end: {
            line: 335,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 64
          },
          end: {
            line: 335,
            column: 71
          }
        }, {
          start: {
            line: 335,
            column: 74
          },
          end: {
            line: 335,
            column: 82
          }
        }],
        line: 335
      },
      "32": {
        loc: {
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 8
          },
          end: {
            line: 357,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "33": {
        loc: {
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 8
          },
          end: {
            line: 375,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "34": {
        loc: {
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 377,
            column: 8
          },
          end: {
            line: 379,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 377
      },
      "35": {
        loc: {
          start: {
            line: 384,
            column: 31
          },
          end: {
            line: 384,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 31
          },
          end: {
            line: 384,
            column: 75
          }
        }, {
          start: {
            line: 384,
            column: 79
          },
          end: {
            line: 384,
            column: 81
          }
        }],
        line: 384
      },
      "36": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "37": {
        loc: {
          start: {
            line: 393,
            column: 31
          },
          end: {
            line: 393,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 31
          },
          end: {
            line: 393,
            column: 75
          }
        }, {
          start: {
            line: 393,
            column: 79
          },
          end: {
            line: 393,
            column: 81
          }
        }],
        line: 393
      },
      "38": {
        loc: {
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 12
          },
          end: {
            line: 397,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "39": {
        loc: {
          start: {
            line: 400,
            column: 54
          },
          end: {
            line: 400,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 400,
            column: 79
          },
          end: {
            line: 400,
            column: 92
          }
        }, {
          start: {
            line: 400,
            column: 95
          },
          end: {
            line: 400,
            column: 110
          }
        }],
        line: 400
      },
      "40": {
        loc: {
          start: {
            line: 406,
            column: 29
          },
          end: {
            line: 406,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 406,
            column: 54
          },
          end: {
            line: 406,
            column: 67
          }
        }, {
          start: {
            line: 406,
            column: 70
          },
          end: {
            line: 406,
            column: 85
          }
        }],
        line: 406
      },
      "41": {
        loc: {
          start: {
            line: 415,
            column: 15
          },
          end: {
            line: 415,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 15
          },
          end: {
            line: 415,
            column: 47
          }
        }, {
          start: {
            line: 415,
            column: 51
          },
          end: {
            line: 415,
            column: 55
          }
        }],
        line: 415
      },
      "42": {
        loc: {
          start: {
            line: 420,
            column: 12
          },
          end: {
            line: 420,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 420,
            column: 26
          },
          end: {
            line: 420,
            column: 45
          }
        }],
        line: 420
      },
      "43": {
        loc: {
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "44": {
        loc: {
          start: {
            line: 426,
            column: 16
          },
          end: {
            line: 426,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 426,
            column: 16
          },
          end: {
            line: 426,
            column: 27
          }
        }, {
          start: {
            line: 426,
            column: 31
          },
          end: {
            line: 426,
            column: 57
          }
        }],
        line: 426
      },
      "45": {
        loc: {
          start: {
            line: 441,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 442,
            column: 12
          },
          end: {
            line: 443,
            column: 33
          }
        }, {
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 445,
            column: 35
          }
        }, {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 447,
            column: 32
          }
        }, {
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 449,
            column: 33
          }
        }, {
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 451,
            column: 33
          }
        }],
        line: 441
      },
      "46": {
        loc: {
          start: {
            line: 467,
            column: 15
          },
          end: {
            line: 467,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 15
          },
          end: {
            line: 467,
            column: 52
          }
        }, {
          start: {
            line: 467,
            column: 56
          },
          end: {
            line: 467,
            column: 61
          }
        }],
        line: 467
      },
      "47": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 471,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 471,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "48": {
        loc: {
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 470,
            column: 12
          },
          end: {
            line: 470,
            column: 30
          }
        }, {
          start: {
            line: 470,
            column: 34
          },
          end: {
            line: 470,
            column: 50
          }
        }],
        line: 470
      },
      "49": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "50": {
        loc: {
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 472,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 472,
            column: 30
          }
        }, {
          start: {
            line: 472,
            column: 34
          },
          end: {
            line: 472,
            column: 49
          }
        }],
        line: 472
      },
      "51": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "52": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 29
          }
        }, {
          start: {
            line: 474,
            column: 33
          },
          end: {
            line: 474,
            column: 49
          }
        }],
        line: 474
      },
      "53": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "54": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "55": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "56": {
        loc: {
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 483,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 483,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "57": {
        loc: {
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 489,
            column: 8
          },
          end: {
            line: 492,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 489
      },
      "58": {
        loc: {
          start: {
            line: 505,
            column: 28
          },
          end: {
            line: 505,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 505,
            column: 28
          },
          end: {
            line: 505,
            column: 41
          }
        }, {
          start: {
            line: 505,
            column: 45
          },
          end: {
            line: 505,
            column: 65
          }
        }],
        line: 505
      },
      "59": {
        loc: {
          start: {
            line: 506,
            column: 29
          },
          end: {
            line: 506,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 29
          },
          end: {
            line: 506,
            column: 39
          }
        }, {
          start: {
            line: 506,
            column: 43
          },
          end: {
            line: 506,
            column: 44
          }
        }],
        line: 506
      },
      "60": {
        loc: {
          start: {
            line: 506,
            column: 49
          },
          end: {
            line: 506,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 506,
            column: 49
          },
          end: {
            line: 506,
            column: 59
          }
        }, {
          start: {
            line: 506,
            column: 63
          },
          end: {
            line: 506,
            column: 64
          }
        }],
        line: 506
      },
      "61": {
        loc: {
          start: {
            line: 513,
            column: 69
          },
          end: {
            line: 513,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 513,
            column: 69
          },
          end: {
            line: 513,
            column: 82
          }
        }, {
          start: {
            line: 513,
            column: 86
          },
          end: {
            line: 513,
            column: 107
          }
        }],
        line: 513
      },
      "62": {
        loc: {
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 521,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 521,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "63": {
        loc: {
          start: {
            line: 523,
            column: 8
          },
          end: {
            line: 530,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 523,
            column: 8
          },
          end: {
            line: 530,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 523
      },
      "64": {
        loc: {
          start: {
            line: 535,
            column: 8
          },
          end: {
            line: 550,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 536,
            column: 12
          },
          end: {
            line: 537,
            column: 64
          }
        }, {
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 539,
            column: 65
          }
        }, {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 63
          }
        }, {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 543,
            column: 65
          }
        }, {
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 545,
            column: 64
          }
        }, {
          start: {
            line: 546,
            column: 12
          },
          end: {
            line: 547,
            column: 72
          }
        }, {
          start: {
            line: 548,
            column: 12
          },
          end: {
            line: 549,
            column: 73
          }
        }],
        line: 535
      },
      "65": {
        loc: {
          start: {
            line: 591,
            column: 23
          },
          end: {
            line: 591,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 591,
            column: 23
          },
          end: {
            line: 591,
            column: 49
          }
        }, {
          start: {
            line: 591,
            column: 53
          },
          end: {
            line: 591,
            column: 69
          }
        }],
        line: 591
      },
      "66": {
        loc: {
          start: {
            line: 609,
            column: 25
          },
          end: {
            line: 609,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 609,
            column: 25
          },
          end: {
            line: 609,
            column: 58
          }
        }, {
          start: {
            line: 609,
            column: 62
          },
          end: {
            line: 609,
            column: 114
          }
        }, {
          start: {
            line: 609,
            column: 118
          },
          end: {
            line: 609,
            column: 131
          }
        }],
        line: 609
      },
      "67": {
        loc: {
          start: {
            line: 610,
            column: 34
          },
          end: {
            line: 610,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 610,
            column: 34
          },
          end: {
            line: 610,
            column: 75
          }
        }, {
          start: {
            line: 610,
            column: 79
          },
          end: {
            line: 610,
            column: 80
          }
        }],
        line: 610
      },
      "68": {
        loc: {
          start: {
            line: 611,
            column: 27
          },
          end: {
            line: 611,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 611,
            column: 27
          },
          end: {
            line: 611,
            column: 57
          }
        }, {
          start: {
            line: 611,
            column: 61
          },
          end: {
            line: 611,
            column: 112
          }
        }, {
          start: {
            line: 611,
            column: 116
          },
          end: {
            line: 611,
            column: 117
          }
        }],
        line: 611
      },
      "69": {
        loc: {
          start: {
            line: 612,
            column: 8
          },
          end: {
            line: 624,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 612,
            column: 8
          },
          end: {
            line: 624,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 612
      },
      "70": {
        loc: {
          start: {
            line: 633,
            column: 33
          },
          end: {
            line: 633,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 633,
            column: 33
          },
          end: {
            line: 633,
            column: 81
          }
        }, {
          start: {
            line: 633,
            column: 85
          },
          end: {
            line: 633,
            column: 105
          }
        }],
        line: 633
      },
      "71": {
        loc: {
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 641,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 637,
            column: 12
          },
          end: {
            line: 641,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 637
      },
      "72": {
        loc: {
          start: {
            line: 661,
            column: 8
          },
          end: {
            line: 673,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 661,
            column: 8
          },
          end: {
            line: 673,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 661
      },
      "73": {
        loc: {
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 687,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 675,
            column: 8
          },
          end: {
            line: 687,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 675
      },
      "74": {
        loc: {
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 694,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 12
          },
          end: {
            line: 694,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "75": {
        loc: {
          start: {
            line: 695,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 695,
            column: 12
          },
          end: {
            line: 700,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 695
      },
      "76": {
        loc: {
          start: {
            line: 695,
            column: 16
          },
          end: {
            line: 695,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 695,
            column: 16
          },
          end: {
            line: 695,
            column: 30
          }
        }, {
          start: {
            line: 695,
            column: 34
          },
          end: {
            line: 695,
            column: 78
          }
        }],
        line: 695
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0, 0, 0, 0, 0],
      "65": [0, 0],
      "66": [0, 0, 0],
      "67": [0, 0],
      "68": [0, 0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts"],
      sourcesContent: ["/**\n * Execution State Management Utilities for n8n MCP Server\n *\n * Provides utilities for managing execution state, checkpoints, retry logic,\n * and execution flow control for sophisticated workflow execution control.\n */\n\nimport { EventEmitter } from 'events';\nimport { N8nExecution, N8nNode } from '../types/n8n.js';\nimport {\n  ExecutionState,\n  ExecutionAction,\n  ExecutionPriority,\n  CancellationReason,\n  RetryStrategy,\n  NodeExecutionState,\n  ExecutionCheckpoint,\n  ExecutionControlConfig,\n  EnhancedExecution,\n  ExecutionControlRequest,\n  ExecutionControlResponse,\n  ExecutionHistoryEntry,\n  ExecutionAnalytics,\n  ExecutionControlContext,\n} from '../types/executionTypes.js';\n\n/**\n * Execution state transition matrix\n */\nconst STATE_TRANSITIONS: Record<ExecutionState, ExecutionState[]> = {\n  pending: ['running', 'cancelled'],\n  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],\n  paused: ['running', 'stopping', 'cancelled'],\n  pausing: ['paused', 'running'],\n  stopping: ['stopped', 'cancelled'],\n  stopped: ['running', 'cancelled'],\n  cancelled: [],\n  completed: ['retrying'],\n  failed: ['retrying', 'cancelled'],\n  timeout: ['retrying', 'cancelled'],\n  waiting: ['running', 'cancelled', 'timeout'],\n  retrying: ['running', 'failed', 'cancelled'],\n  partial: ['running', 'completed', 'failed', 'cancelled'],\n};\n\n/**\n * Available actions for each execution state\n */\nconst STATE_ACTIONS: Record<ExecutionState, ExecutionAction[]> = {\n  pending: ['start', 'cancel'],\n  running: ['pause', 'stop', 'cancel'],\n  paused: ['resume', 'stop', 'cancel'],\n  pausing: ['stop', 'cancel'],\n  stopping: ['cancel'],\n  stopped: ['start', 'cancel'],\n  cancelled: ['retry'],\n  completed: ['retry'],\n  failed: ['retry', 'retry-from-node'],\n  timeout: ['retry', 'cancel'],\n  waiting: ['resume', 'cancel'],\n  retrying: ['stop', 'cancel'],\n  partial: ['resume', 'stop', 'cancel', 'execute-partial'],\n};\n\n/**\n * Execution State Manager\n *\n * Manages execution state transitions, checkpoints, and execution flow control.\n */\nexport class ExecutionStateManager extends EventEmitter {\n  private executions = new Map<string, ExecutionControlContext>();\n  private checkpoints = new Map<string, ExecutionCheckpoint>();\n  private activeRequests = new Map<string, ExecutionControlRequest[]>();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialize execution tracking\n   */\n  initializeExecution(\n    execution: N8nExecution,\n    config: Partial<ExecutionControlConfig> = {}\n  ): EnhancedExecution {\n    const enhancedExecution: EnhancedExecution = {\n      ...execution,\n      enhancedState: this.mapN8nStatusToExecutionState(execution.status),\n      priority: 'normal',\n      nodeStates: [],\n      checkpoints: [],\n      controlConfig: {\n        maxExecutionTime: 3600000, // 1 hour default\n        maxExecutionRetries: 3,\n        defaultRetryStrategy: 'exponential',\n        retryDelay: {\n          initial: 1000,\n          multiplier: 2,\n          maximum: 30000,\n        },\n        enableCheckpoints: true,\n        checkpointInterval: 5,\n        allowPartialExecution: true,\n        ...config,\n      },\n      progress: {\n        totalNodes: execution.workflowData?.nodes?.length || 0,\n        completedNodes: 0,\n        failedNodes: 0,\n        skippedNodes: 0,\n        percentComplete: 0,\n      },\n      metrics: {\n        nodeExecutionTimes: {},\n      },\n    };\n\n    // Initialize node states if workflow data is available\n    if (execution.workflowData?.nodes) {\n      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node => \n        this.createNodeExecutionState(node)\n      );\n    }\n\n    const context: ExecutionControlContext = {\n      execution: enhancedExecution,\n      config: enhancedExecution.controlConfig,\n      monitoring: {\n        enableRealTimeMonitoring: true,\n        monitoringInterval: 5000,\n        metricsToCollect: ['cpu', 'memory', 'duration'],\n        alertThresholds: {\n          executionTime: config.maxExecutionTime || 3600000,\n          memoryUsage: 1024 * 1024 * 1024, // 1GB\n          cpuUsage: 80,\n          errorRate: 10,\n        },\n        notifications: {\n          onFailure: true,\n          onTimeout: true,\n          onCompletion: false,\n          onThresholdExceeded: true,\n        },\n      },\n      history: [\n        {\n          timestamp: new Date().toISOString(),\n          state: enhancedExecution.enhancedState,\n          event: 'started',\n          description: 'Execution tracking initialized',\n        },\n      ],\n      activeRequests: [],\n      availableActions: STATE_ACTIONS[enhancedExecution.enhancedState] || [],\n    };\n\n    this.executions.set(execution.id, context);\n    this.emit('executionInitialized', enhancedExecution);\n\n    return enhancedExecution;\n  }\n\n  /**\n   * Update execution state\n   */\n  updateExecutionState(\n    executionId: string,\n    newState: ExecutionState,\n    metadata?: Record<string, unknown>\n  ): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const currentState = context.execution.enhancedState;\n    \n    // Validate state transition\n    if (!this.isValidStateTransition(currentState, newState)) {\n      this.emit('invalidStateTransition', {\n        executionId,\n        from: currentState,\n        to: newState,\n      });\n      return false;\n    }\n\n    // Update state\n    const previousState = context.execution.enhancedState;\n    context.execution.enhancedState = newState;\n    context.availableActions = STATE_ACTIONS[newState] || [];\n\n    // Add history entry\n    context.history.push({\n      timestamp: new Date().toISOString(),\n      state: newState,\n      event: this.getEventTypeFromStateTransition(previousState, newState),\n      description: `State changed from ${previousState} to ${newState}`,\n      metadata,\n    });\n\n    // Update progress\n    this.updateExecutionProgress(context);\n\n    this.emit('stateChanged', {\n      executionId,\n      previousState,\n      newState,\n      context,\n    });\n\n    return true;\n  }\n\n  /**\n   * Create execution checkpoint\n   */\n  createCheckpoint(\n    executionId: string,\n    description: string,\n    metadata: Record<string, unknown> = {}\n  ): ExecutionCheckpoint | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const checkpointId = `checkpoint_${executionId}_${Date.now()}`;\n    const checkpoint: ExecutionCheckpoint = {\n      checkpointId,\n      executionId,\n      timestamp: new Date().toISOString(),\n      description,\n      completedNodes: context.execution.nodeStates\n        .filter(node => node.state === 'completed')\n        .map(node => node.nodeId),\n      executionState: { ...context.execution },\n      nodeStates: [...context.execution.nodeStates],\n      metadata,\n    };\n\n    this.checkpoints.set(checkpointId, checkpoint);\n    context.execution.checkpoints.push(checkpoint);\n\n    this.emit('checkpointCreated', checkpoint);\n\n    return checkpoint;\n  }\n\n  /**\n   * Restore execution from checkpoint\n   */\n  restoreFromCheckpoint(checkpointId: string): boolean {\n    const checkpoint = this.checkpoints.get(checkpointId);\n    if (!checkpoint) {\n      return false;\n    }\n\n    const context = this.executions.get(checkpoint.executionId);\n    if (!context) {\n      return false;\n    }\n\n    // Restore node states\n    context.execution.nodeStates = [...checkpoint.nodeStates];\n    \n    // Reset nodes that were running or failed to pending\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'running' || node.state === 'failed') {\n        node.state = 'pending';\n        node.completedAt = undefined;\n        node.error = undefined;\n      }\n    });\n\n    // Update execution state\n    this.updateExecutionState(\n      checkpoint.executionId,\n      'pending',\n      { restoredFromCheckpoint: checkpointId }\n    );\n\n    this.emit('checkpointRestored', {\n      executionId: checkpoint.executionId,\n      checkpointId,\n    });\n\n    return true;\n  }\n\n  /**\n   * Calculate retry delay based on strategy\n   */\n  calculateRetryDelay(\n    strategy: RetryStrategy,\n    attemptCount: number,\n    config: ExecutionControlConfig\n  ): number {\n    const retryConfig = config.retryDelay || {\n      initial: 1000,\n      multiplier: 2,\n      maximum: 30000,\n    };\n\n    switch (strategy) {\n      case 'immediate':\n        return 0;\n      \n      case 'linear':\n        return Math.min(\n          retryConfig.initial * attemptCount,\n          retryConfig.maximum\n        );\n      \n      case 'exponential':\n        return Math.min(\n          retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1),\n          retryConfig.maximum\n        );\n      \n      case 'custom':\n        // Custom strategies can be implemented by overriding this method\n        return retryConfig.initial;\n      \n      default:\n        return retryConfig.initial;\n    }\n  }\n\n  /**\n   * Check if execution can be retried\n   */\n  canRetryExecution(executionId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const { execution } = context;\n    const retryCount = execution.retryInfo?.attemptCount || 0;\n    const maxRetries = execution.controlConfig.maxExecutionRetries || 3;\n\n    return (\n      ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState) &&\n      retryCount < maxRetries\n    );\n  }\n\n  /**\n   * Check if node can be retried\n   */\n  canRetryNode(executionId: string, nodeId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === nodeId);\n    if (!nodeState) {\n      return false;\n    }\n\n    return (\n      nodeState.state === 'failed' &&\n      nodeState.canRetry &&\n      nodeState.retryCount < nodeState.maxRetries\n    );\n  }\n\n  /**\n   * Get execution analytics\n   */\n  getExecutionAnalytics(executionId: string): ExecutionAnalytics | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const { execution } = context;\n    const completedNodes = execution.nodeStates.filter(n => n.state === 'completed');\n    const failedNodes = execution.nodeStates.filter(n => n.state === 'failed');\n\n    // Calculate performance metrics\n    const nodeExecutionTimes: Record<string, number> = {};\n    let totalDuration = 0;\n    let memoryPeak = 0;\n    let cpuAverage = 0;\n\n    completedNodes.forEach(node => {\n      if (node.duration) {\n        nodeExecutionTimes[node.nodeId] = node.duration;\n        totalDuration += node.duration;\n      }\n    });\n\n    // Find critical path (longest execution path)\n    const criticalPath = this.calculateCriticalPath(execution.nodeStates);\n\n    // Identify bottlenecks\n    const bottlenecks = completedNodes\n      .filter(node => node.duration && node.duration > 5000) // Nodes taking > 5 seconds\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 5)\n      .map(node => ({\n        nodeId: node.nodeId,\n        duration: node.duration || 0,\n        type: 'cpu' as const, // Could be enhanced to detect actual bottleneck type\n      }));\n\n    return {\n      executionId,\n      timestamp: new Date().toISOString(),\n      performance: {\n        totalDuration,\n        nodeExecutionTimes,\n        memoryPeak,\n        cpuAverage,\n      },\n      flow: {\n        criticalPath,\n        parallelNodes: [], // Could be calculated from workflow connections\n        bottlenecks,\n      },\n      errors: failedNodes.map(node => ({\n        nodeId: node.nodeId,\n        errorType: node.error?.type || 'unknown',\n        errorMessage: node.error?.message || 'Unknown error',\n        retryCount: node.retryCount,\n        resolution: node.retryCount < node.maxRetries ? 'retry' : 'manual',\n      })),\n      optimizations: this.generateOptimizationSuggestions(execution),\n    };\n  }\n\n  /**\n   * Process execution control request\n   */\n  async processControlRequest(\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const context = this.executions.get(request.executionId);\n    if (!context) {\n      return {\n        success: false,\n        message: `Execution ${request.executionId} not found`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'EXECUTION_NOT_FOUND',\n          message: 'The specified execution ID was not found',\n        },\n      };\n    }\n\n    // Check if action is allowed in current state\n    if (!context.availableActions.includes(request.action)) {\n      return {\n        success: false,\n        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'INVALID_ACTION',\n          message: `Action not allowed in current state`,\n          details: {\n            currentState: context.execution.enhancedState,\n            allowedActions: context.availableActions,\n          },\n        },\n      };\n    }\n\n    // Add request to active requests\n    if (!this.activeRequests.has(request.executionId)) {\n      this.activeRequests.set(request.executionId, []);\n    }\n    this.activeRequests.get(request.executionId)!.push(request);\n\n    try {\n      const response = await this.executeControlAction(context, request);\n      \n      // Remove request from active requests\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return response;\n    } catch (error) {\n      // Remove request from active requests on error\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return {\n        success: false,\n        message: `Failed to execute action: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'ACTION_EXECUTION_FAILED',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        },\n      };\n    }\n  }\n\n  /**\n   * Get execution context\n   */\n  getExecutionContext(executionId: string): ExecutionControlContext | null {\n    return this.executions.get(executionId) || null;\n  }\n\n  /**\n   * Clean up completed or old executions\n   */\n  cleanup(olderThanMs: number = 24 * 60 * 60 * 1000): number {\n    const cutoffTime = Date.now() - olderThanMs;\n    let cleaned = 0;\n\n    for (const [executionId, context] of this.executions.entries()) {\n      const executionTime = new Date(context.execution.startedAt).getTime();\n      const isCompleted = ['completed', 'failed', 'cancelled'].includes(\n        context.execution.enhancedState\n      );\n\n      if (isCompleted && executionTime < cutoffTime) {\n        this.executions.delete(executionId);\n        this.activeRequests.delete(executionId);\n        \n        // Clean up associated checkpoints\n        context.execution.checkpoints.forEach(checkpoint => {\n          this.checkpoints.delete(checkpoint.checkpointId);\n        });\n        \n        cleaned++;\n      }\n    }\n\n    this.emit('cleanupCompleted', { cleanedExecutions: cleaned });\n    return cleaned;\n  }\n\n  // Private helper methods\n\n  private mapN8nStatusToExecutionState(status: string): ExecutionState {\n    switch (status) {\n      case 'running':\n        return 'running';\n      case 'success':\n        return 'completed';\n      case 'error':\n        return 'failed';\n      case 'waiting':\n        return 'waiting';\n      default:\n        return 'pending';\n    }\n  }\n\n  private createNodeExecutionState(node: N8nNode): NodeExecutionState {\n    return {\n      nodeId: node.id,\n      nodeName: node.name,\n      nodeType: node.type,\n      state: 'pending',\n      retryCount: 0,\n      maxRetries: 3,\n      canRetry: true,\n      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase()),\n    };\n  }\n\n  private isValidStateTransition(from: ExecutionState, to: ExecutionState): boolean {\n    return STATE_TRANSITIONS[from]?.includes(to) || false;\n  }\n\n  private getEventTypeFromStateTransition(from: ExecutionState, to: ExecutionState): ExecutionHistoryEntry['event'] {\n    if (from === 'pending' && to === 'running') return 'started';\n    if (from === 'running' && to === 'paused') return 'paused';\n    if (from === 'paused' && to === 'running') return 'resumed';\n    if (to === 'completed') return 'completed';\n    if (to === 'failed') return 'failed';\n    if (to === 'cancelled') return 'cancelled';\n    if (to === 'retrying') return 'retried';\n    return 'started';\n  }\n\n  private updateExecutionProgress(context: ExecutionControlContext): void {\n    const { execution } = context;\n    const totalNodes = execution.nodeStates.length;\n    \n    if (totalNodes === 0) {\n      execution.progress.percentComplete = 0;\n      return;\n    }\n\n    const completed = execution.nodeStates.filter(n => n.state === 'completed').length;\n    const failed = execution.nodeStates.filter(n => n.state === 'failed').length;\n    const skipped = execution.nodeStates.filter(n => n.state === 'skipped').length;\n\n    execution.progress.completedNodes = completed;\n    execution.progress.failedNodes = failed;\n    execution.progress.skippedNodes = skipped;\n    execution.progress.percentComplete = Math.round(((completed + failed + skipped) / totalNodes) * 100);\n  }\n\n  private calculateCriticalPath(nodeStates: NodeExecutionState[]): string[] {\n    // Simplified critical path calculation\n    // In a real implementation, this would analyze workflow connections\n    return nodeStates\n      .filter(node => node.duration && node.duration > 1000)\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 10)\n      .map(node => node.nodeId);\n  }\n\n  private generateOptimizationSuggestions(execution: EnhancedExecution): ExecutionAnalytics['optimizations'] {\n    const suggestions: ExecutionAnalytics['optimizations'] = [];\n\n    // Suggest optimizations based on execution patterns\n    const longRunningNodes = execution.nodeStates.filter(\n      node => node.duration && node.duration > 10000\n    );\n\n    if (longRunningNodes.length > 0) {\n      suggestions.push({\n        type: 'performance',\n        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,\n        estimatedImpact: 'Reducing execution time by 30-50%',\n        priority: 'high',\n      });\n    }\n\n    const failedNodes = execution.nodeStates.filter(node => node.state === 'failed');\n    if (failedNodes.length > 0) {\n      suggestions.push({\n        type: 'reliability',\n        description: 'Consider adding error handling and retry logic for failed nodes',\n        estimatedImpact: 'Improving workflow reliability by 60-80%',\n        priority: 'high',\n      });\n    }\n\n    return suggestions;\n  }\n\n  private async executeControlAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const { execution } = context;\n    \n    switch (request.action) {\n      case 'pause':\n        return this.handlePauseAction(context, request);\n      case 'resume':\n        return this.handleResumeAction(context, request);\n      case 'stop':\n        return this.handleStopAction(context, request);\n      case 'cancel':\n        return this.handleCancelAction(context, request);\n      case 'retry':\n        return this.handleRetryAction(context, request);\n      case 'retry-from-node':\n        return this.handleRetryFromNodeAction(context, request);\n      default:\n        throw new Error(`Unsupported action: ${request.action}`);\n    }\n  }\n\n  private async handlePauseAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    // Create checkpoint before pausing\n    const checkpoint = this.createCheckpoint(\n      request.executionId,\n      'Execution paused by user',\n      { pausedBy: request.requestedBy }\n    );\n\n    this.updateExecutionState(request.executionId, 'paused');\n\n    return {\n      success: true,\n      message: 'Execution paused successfully',\n      executionState: 'paused',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        checkpointId: checkpoint?.checkpointId,\n      },\n    };\n  }\n\n  private async handleResumeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'running');\n\n    return {\n      success: true,\n      message: 'Execution resumed successfully',\n      executionState: 'running',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleStopAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'stopped');\n\n    return {\n      success: true,\n      message: 'Execution stopped successfully',\n      executionState: 'stopped',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleCancelAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const reason = request.parameters?.reason || 'user-requested';\n    \n    context.execution.cancellation = {\n      reason: reason as CancellationReason,\n      requestedAt: request.requestedAt,\n      requestedBy: request.requestedBy,\n      cancelledAt: new Date().toISOString(),\n    };\n\n    this.updateExecutionState(request.executionId, 'cancelled');\n\n    return {\n      success: true,\n      message: `Execution cancelled successfully (${reason})`,\n      executionState: 'cancelled',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleRetryAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const strategy = request.parameters?.retryStrategy || context.execution.controlConfig.defaultRetryStrategy || 'exponential';\n    const currentRetryCount = context.execution.retryInfo?.attemptCount || 0;\n    const maxRetries = request.parameters?.maxRetries || context.execution.controlConfig.maxExecutionRetries || 3;\n\n    if (currentRetryCount >= maxRetries) {\n      return {\n        success: false,\n        message: `Maximum retry attempts (${maxRetries}) exceeded`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MAX_RETRIES_EXCEEDED',\n          message: 'The execution has reached the maximum number of retry attempts',\n        },\n      };\n    }\n\n    // Calculate retry delay\n    const retryDelay = this.calculateRetryDelay(strategy, currentRetryCount + 1, context.execution.controlConfig);\n    \n    // Update retry information\n    context.execution.retryInfo = {\n      strategy,\n      attemptCount: currentRetryCount + 1,\n      maxAttempts: maxRetries,\n      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),\n      originalExecutionId: context.execution.retryInfo?.originalExecutionId || context.execution.id,\n    };\n\n    // Reset node states for retry\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'failed') {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'retrying');\n\n    return {\n      success: true,\n      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,\n      executionState: 'retrying',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        estimatedCompletion: context.execution.retryInfo.nextRetryAt,\n        performanceImpact: {\n          estimatedDelay: retryDelay,\n        },\n      },\n    };\n  }\n\n  private async handleRetryFromNodeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const startFromNode = request.parameters?.startFromNode;\n    if (!startFromNode) {\n      return {\n        success: false,\n        message: 'startFromNode parameter is required for retry-from-node action',\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MISSING_PARAMETER',\n          message: 'The startFromNode parameter is required',\n        },\n      };\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === startFromNode);\n    if (!nodeState) {\n      return {\n        success: false,\n        message: `Node ${startFromNode} not found in execution`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'NODE_NOT_FOUND',\n          message: 'The specified node was not found in the execution',\n        },\n      };\n    }\n\n    // Reset nodes from the specified node onwards\n    let resetFromFound = false;\n    const affectedNodes: string[] = [];\n\n    context.execution.nodeStates.forEach(node => {\n      if (node.nodeId === startFromNode) {\n        resetFromFound = true;\n      }\n      \n      if (resetFromFound && ['failed', 'completed'].includes(node.state)) {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n        affectedNodes.push(node.nodeId);\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'partial');\n\n    return {\n      success: true,\n      message: `Execution will retry from node ${startFromNode}`,\n      executionState: 'partial',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        affectedNodes,\n      },\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "610ff2210c9a3979b3c4b0b8dddf3ad992442fbe"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mukgb8g9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mukgb8g9();
cov_7mukgb8g9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_7mukgb8g9().s[1]++;
exports.ExecutionStateManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_7mukgb8g9().s[2]++, require("events"));
/**
 * Execution state transition matrix
 */
const STATE_TRANSITIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[3]++, {
  pending: ['running', 'cancelled'],
  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],
  paused: ['running', 'stopping', 'cancelled'],
  pausing: ['paused', 'running'],
  stopping: ['stopped', 'cancelled'],
  stopped: ['running', 'cancelled'],
  cancelled: [],
  completed: ['retrying'],
  failed: ['retrying', 'cancelled'],
  timeout: ['retrying', 'cancelled'],
  waiting: ['running', 'cancelled', 'timeout'],
  retrying: ['running', 'failed', 'cancelled'],
  partial: ['running', 'completed', 'failed', 'cancelled']
});
/**
 * Available actions for each execution state
 */
const STATE_ACTIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[4]++, {
  pending: ['start', 'cancel'],
  running: ['pause', 'stop', 'cancel'],
  paused: ['resume', 'stop', 'cancel'],
  pausing: ['stop', 'cancel'],
  stopping: ['cancel'],
  stopped: ['start', 'cancel'],
  cancelled: ['retry'],
  completed: ['retry'],
  failed: ['retry', 'retry-from-node'],
  timeout: ['retry', 'cancel'],
  waiting: ['resume', 'cancel'],
  retrying: ['stop', 'cancel'],
  partial: ['resume', 'stop', 'cancel', 'execute-partial']
});
/**
 * Execution State Manager
 *
 * Manages execution state transitions, checkpoints, and execution flow control.
 */
class ExecutionStateManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  executions =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[5]++, new Map());
  checkpoints =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[6]++, new Map());
  activeRequests =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[7]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[0]++;
    cov_7mukgb8g9().s[8]++;
    super();
  }
  /**
   * Initialize execution tracking
   */
  initializeExecution(execution, config =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[1]++;
    const enhancedExecution =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[9]++, {
      ...execution,
      enhancedState: this.mapN8nStatusToExecutionState(execution.status),
      priority: 'normal',
      nodeStates: [],
      checkpoints: [],
      controlConfig: {
        maxExecutionTime: 3600000,
        // 1 hour default
        maxExecutionRetries: 3,
        defaultRetryStrategy: 'exponential',
        retryDelay: {
          initial: 1000,
          multiplier: 2,
          maximum: 30000
        },
        enableCheckpoints: true,
        checkpointInterval: 5,
        allowPartialExecution: true,
        ...config
      },
      progress: {
        totalNodes:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][0]++, execution.workflowData?.nodes?.length) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][1]++, 0),
        completedNodes: 0,
        failedNodes: 0,
        skippedNodes: 0,
        percentComplete: 0
      },
      metrics: {
        nodeExecutionTimes: {}
      }
    });
    // Initialize node states if workflow data is available
    /* istanbul ignore next */
    cov_7mukgb8g9().s[10]++;
    if (execution.workflowData?.nodes) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[2][0]++;
      cov_7mukgb8g9().s[11]++;
      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[2]++;
        cov_7mukgb8g9().s[12]++;
        return this.createNodeExecutionState(node);
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[2][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[13]++, {
      execution: enhancedExecution,
      config: enhancedExecution.controlConfig,
      monitoring: {
        enableRealTimeMonitoring: true,
        monitoringInterval: 5000,
        metricsToCollect: ['cpu', 'memory', 'duration'],
        alertThresholds: {
          executionTime:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][0]++, config.maxExecutionTime) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][1]++, 3600000),
          memoryUsage: 1024 * 1024 * 1024,
          // 1GB
          cpuUsage: 80,
          errorRate: 10
        },
        notifications: {
          onFailure: true,
          onTimeout: true,
          onCompletion: false,
          onThresholdExceeded: true
        }
      },
      history: [{
        timestamp: new Date().toISOString(),
        state: enhancedExecution.enhancedState,
        event: 'started',
        description: 'Execution tracking initialized'
      }],
      activeRequests: [],
      availableActions:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][0]++, STATE_ACTIONS[enhancedExecution.enhancedState]) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][1]++, [])
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[14]++;
    this.executions.set(execution.id, context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[15]++;
    this.emit('executionInitialized', enhancedExecution);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[16]++;
    return enhancedExecution;
  }
  /**
   * Update execution state
   */
  updateExecutionState(executionId, newState, metadata) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[3]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[17]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[18]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[5][0]++;
      cov_7mukgb8g9().s[19]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[5][1]++;
    }
    const currentState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[20]++, context.execution.enhancedState);
    // Validate state transition
    /* istanbul ignore next */
    cov_7mukgb8g9().s[21]++;
    if (!this.isValidStateTransition(currentState, newState)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[6][0]++;
      cov_7mukgb8g9().s[22]++;
      this.emit('invalidStateTransition', {
        executionId,
        from: currentState,
        to: newState
      });
      /* istanbul ignore next */
      cov_7mukgb8g9().s[23]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[6][1]++;
    }
    // Update state
    const previousState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[24]++, context.execution.enhancedState);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[25]++;
    context.execution.enhancedState = newState;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[26]++;
    context.availableActions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][0]++, STATE_ACTIONS[newState]) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][1]++, []);
    // Add history entry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[27]++;
    context.history.push({
      timestamp: new Date().toISOString(),
      state: newState,
      event: this.getEventTypeFromStateTransition(previousState, newState),
      description: `State changed from ${previousState} to ${newState}`,
      metadata
    });
    // Update progress
    /* istanbul ignore next */
    cov_7mukgb8g9().s[28]++;
    this.updateExecutionProgress(context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[29]++;
    this.emit('stateChanged', {
      executionId,
      previousState,
      newState,
      context
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[30]++;
    return true;
  }
  /**
   * Create execution checkpoint
   */
  createCheckpoint(executionId, description, metadata =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[4]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[31]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[32]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[9][0]++;
      cov_7mukgb8g9().s[33]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[9][1]++;
    }
    const checkpointId =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[34]++, `checkpoint_${executionId}_${Date.now()}`);
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[35]++, {
      checkpointId,
      executionId,
      timestamp: new Date().toISOString(),
      description,
      completedNodes: context.execution.nodeStates.filter(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[5]++;
        cov_7mukgb8g9().s[36]++;
        return node.state === 'completed';
      }).map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[6]++;
        cov_7mukgb8g9().s[37]++;
        return node.nodeId;
      }),
      executionState: {
        ...context.execution
      },
      nodeStates: [...context.execution.nodeStates],
      metadata
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[38]++;
    this.checkpoints.set(checkpointId, checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[39]++;
    context.execution.checkpoints.push(checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[40]++;
    this.emit('checkpointCreated', checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[41]++;
    return checkpoint;
  }
  /**
   * Restore execution from checkpoint
   */
  restoreFromCheckpoint(checkpointId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[7]++;
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[42]++, this.checkpoints.get(checkpointId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[43]++;
    if (!checkpoint) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[10][0]++;
      cov_7mukgb8g9().s[44]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[10][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[45]++, this.executions.get(checkpoint.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[46]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[11][0]++;
      cov_7mukgb8g9().s[47]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[11][1]++;
    }
    // Restore node states
    cov_7mukgb8g9().s[48]++;
    context.execution.nodeStates = [...checkpoint.nodeStates];
    // Reset nodes that were running or failed to pending
    /* istanbul ignore next */
    cov_7mukgb8g9().s[49]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[8]++;
      cov_7mukgb8g9().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][0]++, node.state === 'running') ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][1]++, node.state === 'failed')) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[12][0]++;
        cov_7mukgb8g9().s[51]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[52]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[53]++;
        node.error = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[12][1]++;
      }
    });
    // Update execution state
    /* istanbul ignore next */
    cov_7mukgb8g9().s[54]++;
    this.updateExecutionState(checkpoint.executionId, 'pending', {
      restoredFromCheckpoint: checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[55]++;
    this.emit('checkpointRestored', {
      executionId: checkpoint.executionId,
      checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[56]++;
    return true;
  }
  /**
   * Calculate retry delay based on strategy
   */
  calculateRetryDelay(strategy, attemptCount, config) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[9]++;
    const retryConfig =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[57]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][0]++, config.retryDelay) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][1]++, {
      initial: 1000,
      multiplier: 2,
      maximum: 30000
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[58]++;
    switch (strategy) {
      case 'immediate':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][0]++;
        cov_7mukgb8g9().s[59]++;
        return 0;
      case 'linear':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][1]++;
        cov_7mukgb8g9().s[60]++;
        return Math.min(retryConfig.initial * attemptCount, retryConfig.maximum);
      case 'exponential':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][2]++;
        cov_7mukgb8g9().s[61]++;
        return Math.min(retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1), retryConfig.maximum);
      case 'custom':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][3]++;
        cov_7mukgb8g9().s[62]++;
        // Custom strategies can be implemented by overriding this method
        return retryConfig.initial;
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][4]++;
        cov_7mukgb8g9().s[63]++;
        return retryConfig.initial;
    }
  }
  /**
   * Check if execution can be retried
   */
  canRetryExecution(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[10]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[64]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[65]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[16][0]++;
      cov_7mukgb8g9().s[66]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[16][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[67]++, context);
    const retryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[68]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][0]++, execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[69]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][0]++, execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][1]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[70]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[19][0]++, ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState)) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[19][1]++, retryCount < maxRetries);
  }
  /**
   * Check if node can be retried
   */
  canRetryNode(executionId, nodeId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[11]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[71]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[72]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[20][0]++;
      cov_7mukgb8g9().s[73]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[20][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[74]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[12]++;
      cov_7mukgb8g9().s[75]++;
      return n.nodeId === nodeId;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[76]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[21][0]++;
      cov_7mukgb8g9().s[77]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[21][1]++;
    }
    cov_7mukgb8g9().s[78]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[22][0]++, nodeState.state === 'failed') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][1]++, nodeState.canRetry) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][2]++, nodeState.retryCount < nodeState.maxRetries);
  }
  /**
   * Get execution analytics
   */
  getExecutionAnalytics(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[13]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[79]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[80]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[23][0]++;
      cov_7mukgb8g9().s[81]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[23][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[82]++, context);
    const completedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[83]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[14]++;
      cov_7mukgb8g9().s[84]++;
      return n.state === 'completed';
    }));
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[85]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[15]++;
      cov_7mukgb8g9().s[86]++;
      return n.state === 'failed';
    }));
    // Calculate performance metrics
    const nodeExecutionTimes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[87]++, {});
    let totalDuration =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[88]++, 0);
    let memoryPeak =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[89]++, 0);
    let cpuAverage =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[90]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[91]++;
    completedNodes.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[16]++;
      cov_7mukgb8g9().s[92]++;
      if (node.duration) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[24][0]++;
        cov_7mukgb8g9().s[93]++;
        nodeExecutionTimes[node.nodeId] = node.duration;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[94]++;
        totalDuration += node.duration;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[24][1]++;
      }
    });
    // Find critical path (longest execution path)
    const criticalPath =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[95]++, this.calculateCriticalPath(execution.nodeStates));
    // Identify bottlenecks
    const bottlenecks =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[96]++, completedNodes.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[17]++;
      cov_7mukgb8g9().s[97]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[25][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[25][1]++, node.duration > 5000);
    }) // Nodes taking > 5 seconds
    .sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[18]++;
      cov_7mukgb8g9().s[98]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][1]++, 0));
    }).slice(0, 5).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[19]++;
      cov_7mukgb8g9().s[99]++;
      return {
        nodeId: node.nodeId,
        duration:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][0]++, node.duration) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][1]++, 0),
        type: 'cpu' // Could be enhanced to detect actual bottleneck type
      };
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[100]++;
    return {
      executionId,
      timestamp: new Date().toISOString(),
      performance: {
        totalDuration,
        nodeExecutionTimes,
        memoryPeak,
        cpuAverage
      },
      flow: {
        criticalPath,
        parallelNodes: [],
        // Could be calculated from workflow connections
        bottlenecks
      },
      errors: failedNodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[20]++;
        cov_7mukgb8g9().s[101]++;
        return {
          nodeId: node.nodeId,
          errorType:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][0]++, node.error?.type) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][1]++, 'unknown'),
          errorMessage:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][0]++, node.error?.message) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][1]++, 'Unknown error'),
          retryCount: node.retryCount,
          resolution: node.retryCount < node.maxRetries ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][0]++, 'retry') :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][1]++, 'manual')
        };
      }),
      optimizations: this.generateOptimizationSuggestions(execution)
    };
  }
  /**
   * Process execution control request
   */
  async processControlRequest(request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[21]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[102]++, this.executions.get(request.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[103]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[32][0]++;
      cov_7mukgb8g9().s[104]++;
      return {
        success: false,
        message: `Execution ${request.executionId} not found`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'EXECUTION_NOT_FOUND',
          message: 'The specified execution ID was not found'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[32][1]++;
    }
    // Check if action is allowed in current state
    cov_7mukgb8g9().s[105]++;
    if (!context.availableActions.includes(request.action)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[33][0]++;
      cov_7mukgb8g9().s[106]++;
      return {
        success: false,
        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'INVALID_ACTION',
          message: `Action not allowed in current state`,
          details: {
            currentState: context.execution.enhancedState,
            allowedActions: context.availableActions
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[33][1]++;
    }
    // Add request to active requests
    cov_7mukgb8g9().s[107]++;
    if (!this.activeRequests.has(request.executionId)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[34][0]++;
      cov_7mukgb8g9().s[108]++;
      this.activeRequests.set(request.executionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[34][1]++;
    }
    cov_7mukgb8g9().s[109]++;
    this.activeRequests.get(request.executionId).push(request);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[110]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[111]++, await this.executeControlAction(context, request));
      // Remove request from active requests
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[112]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[113]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[114]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[36][0]++;
        cov_7mukgb8g9().s[115]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[36][1]++;
      }
      cov_7mukgb8g9().s[116]++;
      return response;
    } catch (error) {
      // Remove request from active requests on error
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[117]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[118]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[119]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[38][0]++;
        cov_7mukgb8g9().s[120]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[38][1]++;
      }
      cov_7mukgb8g9().s[121]++;
      return {
        success: false,
        message: `Failed to execute action: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][1]++, 'Unknown error')}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'ACTION_EXECUTION_FAILED',
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][0]++, error.message) :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][1]++, 'Unknown error')
        }
      };
    }
  }
  /**
   * Get execution context
   */
  getExecutionContext(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[22]++;
    cov_7mukgb8g9().s[122]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[41][0]++, this.executions.get(executionId)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[41][1]++, null);
  }
  /**
   * Clean up completed or old executions
   */
  cleanup(olderThanMs =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[42][0]++, 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[23]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[123]++, Date.now() - olderThanMs);
    let cleaned =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[124]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[125]++;
    for (const [executionId, context] of this.executions.entries()) {
      const executionTime =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[126]++, new Date(context.execution.startedAt).getTime());
      const isCompleted =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[127]++, ['completed', 'failed', 'cancelled'].includes(context.execution.enhancedState));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[128]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][0]++, isCompleted) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][1]++, executionTime < cutoffTime)) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[43][0]++;
        cov_7mukgb8g9().s[129]++;
        this.executions.delete(executionId);
        /* istanbul ignore next */
        cov_7mukgb8g9().s[130]++;
        this.activeRequests.delete(executionId);
        // Clean up associated checkpoints
        /* istanbul ignore next */
        cov_7mukgb8g9().s[131]++;
        context.execution.checkpoints.forEach(checkpoint => {
          /* istanbul ignore next */
          cov_7mukgb8g9().f[24]++;
          cov_7mukgb8g9().s[132]++;
          this.checkpoints.delete(checkpoint.checkpointId);
        });
        /* istanbul ignore next */
        cov_7mukgb8g9().s[133]++;
        cleaned++;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[43][1]++;
      }
    }
    /* istanbul ignore next */
    cov_7mukgb8g9().s[134]++;
    this.emit('cleanupCompleted', {
      cleanedExecutions: cleaned
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[135]++;
    return cleaned;
  }
  // Private helper methods
  mapN8nStatusToExecutionState(status) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[25]++;
    cov_7mukgb8g9().s[136]++;
    switch (status) {
      case 'running':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][0]++;
        cov_7mukgb8g9().s[137]++;
        return 'running';
      case 'success':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][1]++;
        cov_7mukgb8g9().s[138]++;
        return 'completed';
      case 'error':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][2]++;
        cov_7mukgb8g9().s[139]++;
        return 'failed';
      case 'waiting':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][3]++;
        cov_7mukgb8g9().s[140]++;
        return 'waiting';
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][4]++;
        cov_7mukgb8g9().s[141]++;
        return 'pending';
    }
  }
  createNodeExecutionState(node) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[26]++;
    cov_7mukgb8g9().s[142]++;
    return {
      nodeId: node.id,
      nodeName: node.name,
      nodeType: node.type,
      state: 'pending',
      retryCount: 0,
      maxRetries: 3,
      canRetry: true,
      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase())
    };
  }
  isValidStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[27]++;
    cov_7mukgb8g9().s[143]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[46][0]++, STATE_TRANSITIONS[from]?.includes(to)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[46][1]++, false);
  }
  getEventTypeFromStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[28]++;
    cov_7mukgb8g9().s[144]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][0]++, from === 'pending') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[47][0]++;
      cov_7mukgb8g9().s[145]++;
      return 'started';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[47][1]++;
    }
    cov_7mukgb8g9().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][0]++, from === 'running') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][1]++, to === 'paused')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[49][0]++;
      cov_7mukgb8g9().s[147]++;
      return 'paused';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[49][1]++;
    }
    cov_7mukgb8g9().s[148]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][0]++, from === 'paused') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[51][0]++;
      cov_7mukgb8g9().s[149]++;
      return 'resumed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[51][1]++;
    }
    cov_7mukgb8g9().s[150]++;
    if (to === 'completed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[53][0]++;
      cov_7mukgb8g9().s[151]++;
      return 'completed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[53][1]++;
    }
    cov_7mukgb8g9().s[152]++;
    if (to === 'failed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[54][0]++;
      cov_7mukgb8g9().s[153]++;
      return 'failed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[54][1]++;
    }
    cov_7mukgb8g9().s[154]++;
    if (to === 'cancelled') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[55][0]++;
      cov_7mukgb8g9().s[155]++;
      return 'cancelled';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[55][1]++;
    }
    cov_7mukgb8g9().s[156]++;
    if (to === 'retrying') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[56][0]++;
      cov_7mukgb8g9().s[157]++;
      return 'retried';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[56][1]++;
    }
    cov_7mukgb8g9().s[158]++;
    return 'started';
  }
  updateExecutionProgress(context) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[29]++;
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[159]++, context);
    const totalNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[160]++, execution.nodeStates.length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[161]++;
    if (totalNodes === 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[57][0]++;
      cov_7mukgb8g9().s[162]++;
      execution.progress.percentComplete = 0;
      /* istanbul ignore next */
      cov_7mukgb8g9().s[163]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[57][1]++;
    }
    const completed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[164]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[30]++;
      cov_7mukgb8g9().s[165]++;
      return n.state === 'completed';
    }).length);
    const failed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[166]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[31]++;
      cov_7mukgb8g9().s[167]++;
      return n.state === 'failed';
    }).length);
    const skipped =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[168]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[32]++;
      cov_7mukgb8g9().s[169]++;
      return n.state === 'skipped';
    }).length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[170]++;
    execution.progress.completedNodes = completed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[171]++;
    execution.progress.failedNodes = failed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[172]++;
    execution.progress.skippedNodes = skipped;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[173]++;
    execution.progress.percentComplete = Math.round((completed + failed + skipped) / totalNodes * 100);
  }
  calculateCriticalPath(nodeStates) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[33]++;
    cov_7mukgb8g9().s[174]++;
    // Simplified critical path calculation
    // In a real implementation, this would analyze workflow connections
    return nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[34]++;
      cov_7mukgb8g9().s[175]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[58][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[58][1]++, node.duration > 1000);
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[35]++;
      cov_7mukgb8g9().s[176]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][1]++, 0));
    }).slice(0, 10).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[36]++;
      cov_7mukgb8g9().s[177]++;
      return node.nodeId;
    });
  }
  generateOptimizationSuggestions(execution) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[37]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[178]++, []);
    // Suggest optimizations based on execution patterns
    const longRunningNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[179]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[38]++;
      cov_7mukgb8g9().s[180]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[61][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[61][1]++, node.duration > 10000);
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[181]++;
    if (longRunningNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[62][0]++;
      cov_7mukgb8g9().s[182]++;
      suggestions.push({
        type: 'performance',
        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,
        estimatedImpact: 'Reducing execution time by 30-50%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[62][1]++;
    }
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[183]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[39]++;
      cov_7mukgb8g9().s[184]++;
      return node.state === 'failed';
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[185]++;
    if (failedNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[63][0]++;
      cov_7mukgb8g9().s[186]++;
      suggestions.push({
        type: 'reliability',
        description: 'Consider adding error handling and retry logic for failed nodes',
        estimatedImpact: 'Improving workflow reliability by 60-80%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[63][1]++;
    }
    cov_7mukgb8g9().s[187]++;
    return suggestions;
  }
  async executeControlAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[40]++;
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[188]++, context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[189]++;
    switch (request.action) {
      case 'pause':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][0]++;
        cov_7mukgb8g9().s[190]++;
        return this.handlePauseAction(context, request);
      case 'resume':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][1]++;
        cov_7mukgb8g9().s[191]++;
        return this.handleResumeAction(context, request);
      case 'stop':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][2]++;
        cov_7mukgb8g9().s[192]++;
        return this.handleStopAction(context, request);
      case 'cancel':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][3]++;
        cov_7mukgb8g9().s[193]++;
        return this.handleCancelAction(context, request);
      case 'retry':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][4]++;
        cov_7mukgb8g9().s[194]++;
        return this.handleRetryAction(context, request);
      case 'retry-from-node':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][5]++;
        cov_7mukgb8g9().s[195]++;
        return this.handleRetryFromNodeAction(context, request);
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][6]++;
        cov_7mukgb8g9().s[196]++;
        throw new Error(`Unsupported action: ${request.action}`);
    }
  }
  async handlePauseAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[41]++;
    // Create checkpoint before pausing
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[197]++, this.createCheckpoint(request.executionId, 'Execution paused by user', {
      pausedBy: request.requestedBy
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[198]++;
    this.updateExecutionState(request.executionId, 'paused');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[199]++;
    return {
      success: true,
      message: 'Execution paused successfully',
      executionState: 'paused',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        checkpointId: checkpoint?.checkpointId
      }
    };
  }
  async handleResumeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[42]++;
    cov_7mukgb8g9().s[200]++;
    this.updateExecutionState(request.executionId, 'running');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[201]++;
    return {
      success: true,
      message: 'Execution resumed successfully',
      executionState: 'running',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleStopAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[43]++;
    cov_7mukgb8g9().s[202]++;
    this.updateExecutionState(request.executionId, 'stopped');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[203]++;
    return {
      success: true,
      message: 'Execution stopped successfully',
      executionState: 'stopped',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleCancelAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[44]++;
    const reason =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[204]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][0]++, request.parameters?.reason) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][1]++, 'user-requested'));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[205]++;
    context.execution.cancellation = {
      reason: reason,
      requestedAt: request.requestedAt,
      requestedBy: request.requestedBy,
      cancelledAt: new Date().toISOString()
    };
    /* istanbul ignore next */
    cov_7mukgb8g9().s[206]++;
    this.updateExecutionState(request.executionId, 'cancelled');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[207]++;
    return {
      success: true,
      message: `Execution cancelled successfully (${reason})`,
      executionState: 'cancelled',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleRetryAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[45]++;
    const strategy =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[208]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][0]++, request.parameters?.retryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][1]++, context.execution.controlConfig.defaultRetryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][2]++, 'exponential'));
    const currentRetryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[209]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][0]++, context.execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[210]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][0]++, request.parameters?.maxRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][1]++, context.execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][2]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[211]++;
    if (currentRetryCount >= maxRetries) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[69][0]++;
      cov_7mukgb8g9().s[212]++;
      return {
        success: false,
        message: `Maximum retry attempts (${maxRetries}) exceeded`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MAX_RETRIES_EXCEEDED',
          message: 'The execution has reached the maximum number of retry attempts'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[69][1]++;
    }
    // Calculate retry delay
    const retryDelay =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[213]++, this.calculateRetryDelay(strategy, currentRetryCount + 1, context.execution.controlConfig));
    // Update retry information
    /* istanbul ignore next */
    cov_7mukgb8g9().s[214]++;
    context.execution.retryInfo = {
      strategy,
      attemptCount: currentRetryCount + 1,
      maxAttempts: maxRetries,
      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),
      originalExecutionId:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][0]++, context.execution.retryInfo?.originalExecutionId) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][1]++, context.execution.id)
    };
    // Reset node states for retry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[215]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[46]++;
      cov_7mukgb8g9().s[216]++;
      if (node.state === 'failed') {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[71][0]++;
        cov_7mukgb8g9().s[217]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[218]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[219]++;
        node.completedAt = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[71][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[220]++;
    this.updateExecutionState(request.executionId, 'retrying');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[221]++;
    return {
      success: true,
      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,
      executionState: 'retrying',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        estimatedCompletion: context.execution.retryInfo.nextRetryAt,
        performanceImpact: {
          estimatedDelay: retryDelay
        }
      }
    };
  }
  async handleRetryFromNodeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[47]++;
    const startFromNode =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[222]++, request.parameters?.startFromNode);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[223]++;
    if (!startFromNode) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[72][0]++;
      cov_7mukgb8g9().s[224]++;
      return {
        success: false,
        message: 'startFromNode parameter is required for retry-from-node action',
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MISSING_PARAMETER',
          message: 'The startFromNode parameter is required'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[72][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[225]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[48]++;
      cov_7mukgb8g9().s[226]++;
      return n.nodeId === startFromNode;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[227]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[73][0]++;
      cov_7mukgb8g9().s[228]++;
      return {
        success: false,
        message: `Node ${startFromNode} not found in execution`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'NODE_NOT_FOUND',
          message: 'The specified node was not found in the execution'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[73][1]++;
    }
    // Reset nodes from the specified node onwards
    let resetFromFound =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[229]++, false);
    const affectedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[230]++, []);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[231]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[49]++;
      cov_7mukgb8g9().s[232]++;
      if (node.nodeId === startFromNode) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[74][0]++;
        cov_7mukgb8g9().s[233]++;
        resetFromFound = true;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[74][1]++;
      }
      cov_7mukgb8g9().s[234]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][0]++, resetFromFound) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][1]++, ['failed', 'completed'].includes(node.state))) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[75][0]++;
        cov_7mukgb8g9().s[235]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[236]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[237]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[238]++;
        affectedNodes.push(node.nodeId);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[75][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[239]++;
    this.updateExecutionState(request.executionId, 'partial');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[240]++;
    return {
      success: true,
      message: `Execution will retry from node ${startFromNode}`,
      executionState: 'partial',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        affectedNodes
      }
    };
  }
}
/* istanbul ignore next */
cov_7mukgb8g9().s[241]++;
exports.ExecutionStateManager = ExecutionStateManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,