c1c0b798f6068d48744dcf7098624491
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const fs = __importStar(require("fs/promises"));
const path = __importStar(require("path"));
const fileHandling_js_1 = require("../src/utils/fileHandling.js");
(0, globals_1.describe)('Binary Data Operations', () => {
    let testFilePath;
    let testFileContent;
    let fileHandler;
    const testFileName = 'test-file.txt';
    const testMimeType = 'text/plain';
    (0, globals_1.beforeAll)(async () => {
        // Create test directory
        const testDir = path.join(process.cwd(), 'test-data');
        await fs.mkdir(testDir, { recursive: true });
        // Create test file
        testFilePath = path.join(testDir, testFileName);
        testFileContent = Buffer.from('This is a test file for binary data operations.\nIt contains multiple lines.\nAnd some test data: 12345');
        await fs.writeFile(testFilePath, testFileContent);
        // Initialize file handler
        fileHandler = new fileHandling_js_1.FileHandlingUtils({
            baseDirectory: testDir,
            maxFileSize: 10 * 1024 * 1024, // 10MB
            allowedMimeTypes: ['text/*', 'application/*', 'image/*'],
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up test files
        try {
            await fs.unlink(testFilePath);
            const testDir = path.dirname(testFilePath);
            await fs.rmdir(testDir);
        }
        catch (error) {
            // Ignore cleanup errors
        }
    });
    (0, globals_1.describe)('File Validation', () => {
        (0, globals_1.it)('should validate a valid file', async () => {
            const validation = await fileHandler.validateFile(testFileName, testMimeType, testFileContent.length);
            (0, globals_1.expect)(validation.isValid).toBe(true);
            (0, globals_1.expect)(validation.errors).toHaveLength(0);
        });
        (0, globals_1.it)('should reject oversized files', async () => {
            const validation = await fileHandler.validateFile('large-file.txt', testMimeType, 20 * 1024 * 1024, // 20MB
            { maxFileSize: 10 * 1024 * 1024 } // 10MB limit
            );
            (0, globals_1.expect)(validation.isValid).toBe(false);
            (0, globals_1.expect)(validation.errors.some(error => error.includes('exceeds maximum allowed size'))).toBe(true);
        });
        (0, globals_1.it)('should reject invalid MIME types', async () => {
            const validation = await fileHandler.validateFile('test.exe', 'application/x-executable', 1024, { allowedMimeTypes: ['text/*', 'image/*'] });
            (0, globals_1.expect)(validation.isValid).toBe(false);
            (0, globals_1.expect)(validation.errors.some(error => error.includes('not allowed'))).toBe(true);
        });
    });
    (0, globals_1.describe)('File Operations', () => {
        (0, globals_1.it)('should read file correctly', async () => {
            const fileExists = await fs.access(testFilePath).then(() => true).catch(() => false);
            (0, globals_1.expect)(fileExists).toBe(true);
            const content = await fs.readFile(testFilePath);
            (0, globals_1.expect)(content.equals(testFileContent)).toBe(true);
        });
        (0, globals_1.it)('should calculate file hash correctly', async () => {
            const crypto = await Promise.resolve().then(() => __importStar(require('crypto')));
            const hash1 = crypto.createHash('sha256').update(testFileContent).digest('hex');
            // Read file and calculate hash
            const fileContent = await fs.readFile(testFilePath);
            const hash2 = crypto.createHash('sha256').update(fileContent).digest('hex');
            (0, globals_1.expect)(hash1).toBe(hash2);
        });
        (0, globals_1.it)('should detect MIME type from file extension', async () => {
            const mimeTypes = {
                '.txt': 'text/plain',
                '.json': 'application/json',
                '.pdf': 'application/pdf',
                '.png': 'image/png',
                '.jpg': 'image/jpeg',
            };
            for (const [ext, expectedMime] of Object.entries(mimeTypes)) {
                const fileName = `test${ext}`;
                const ext_lower = path.extname(fileName).toLowerCase();
                // This mimics the logic from binary-data.ts
                const detectedMime = mimeTypes[ext_lower] || 'application/octet-stream';
                (0, globals_1.expect)(detectedMime).toBe(expectedMime);
            }
        });
    });
    (0, globals_1.describe)('Progress Tracking', () => {
        (0, globals_1.it)('should create valid transfer progress object', () => {
            const transferId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            const progress = {
                transferId,
                fileName: testFileName,
                totalBytes: testFileContent.length,
                transferredBytes: 0,
                percentComplete: 0,
                status: 'pending',
                startedAt: new Date().toISOString(),
            };
            (0, globals_1.expect)(progress.transferId).toMatch(/^upload_\d+_[a-z0-9]+$/);
            (0, globals_1.expect)(progress.fileName).toBe(testFileName);
            (0, globals_1.expect)(progress.totalBytes).toBe(testFileContent.length);
            (0, globals_1.expect)(progress.status).toBe('pending');
            (0, globals_1.expect)(progress.percentComplete).toBe(0);
        });
        (0, globals_1.it)('should calculate progress correctly', () => {
            const totalBytes = 1000;
            const transferredBytes = 250;
            const percentComplete = Math.round((transferredBytes / totalBytes) * 100);
            (0, globals_1.expect)(percentComplete).toBe(25);
        });
    });
    (0, globals_1.describe)('Base64 Encoding/Decoding', () => {
        (0, globals_1.it)('should encode and decode binary data correctly', () => {
            const originalData = testFileContent;
            const base64Data = originalData.toString('base64');
            const decodedData = Buffer.from(base64Data, 'base64');
            (0, globals_1.expect)(decodedData.equals(originalData)).toBe(true);
        });
        (0, globals_1.it)('should handle empty data', () => {
            const emptyBuffer = Buffer.alloc(0);
            const base64Empty = emptyBuffer.toString('base64');
            const decodedEmpty = Buffer.from(base64Empty, 'base64');
            (0, globals_1.expect)(base64Empty).toBe('');
            (0, globals_1.expect)(decodedEmpty.length).toBe(0);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle non-existent files gracefully', async () => {
            const nonExistentPath = path.join(process.cwd(), 'non-existent-file.txt');
            try {
                await fs.access(nonExistentPath);
                // Should not reach this point
                (0, globals_1.expect)(true).toBe(false);
            }
            catch (error) {
                (0, globals_1.expect)(error).toBeDefined();
            }
        });
        (0, globals_1.it)('should validate required parameters', () => {
            const requiredFields = ['fileName', 'mimeType', 'data'];
            requiredFields.forEach(field => {
                const testObject = {
                    fileName: 'test.txt',
                    mimeType: 'text/plain',
                    data: 'test-data',
                };
                delete testObject[field];
                // In a real scenario, this would be validated by Zod schemas
                (0, globals_1.expect)(testObject[field]).toBeUndefined();
            });
        });
    });
    (0, globals_1.describe)('File Size Calculations', () => {
        (0, globals_1.it)('should estimate base64 decoded size correctly', () => {
            const originalSize = 1000;
            const base64Size = Math.ceil((originalSize * 4) / 3);
            const estimatedOriginalSize = Math.floor((base64Size * 3) / 4);
            // Should be close to original (within base64 padding)
            (0, globals_1.expect)(Math.abs(estimatedOriginalSize - originalSize)).toBeLessThanOrEqual(3);
        });
        (0, globals_1.it)('should format file sizes correctly', () => {
            const formatBytes = (bytes) => {
                if (bytes === 0)
                    return '0 B';
                const k = 1024;
                const sizes = ['B', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            };
            (0, globals_1.expect)(formatBytes(0)).toBe('0 B');
            (0, globals_1.expect)(formatBytes(1024)).toBe('1 KB');
            (0, globals_1.expect)(formatBytes(1024 * 1024)).toBe('1 MB');
            (0, globals_1.expect)(formatBytes(1536)).toBe('1.5 KB');
        });
    });
});
// Mock tests for API integration (since we can't test actual API calls without a running n8n instance)
(0, globals_1.describe)('Binary Data Client (Mock Tests)', () => {
    (0, globals_1.describe)('API Endpoint Construction', () => {
        (0, globals_1.it)('should construct upload endpoint correctly', () => {
            const baseUrl = 'http://localhost:5678';
            const expectedUrl = `${baseUrl}/api/v1/binary-data/upload`;
            (0, globals_1.expect)(expectedUrl).toBe('http://localhost:5678/api/v1/binary-data/upload');
        });
        (0, globals_1.it)('should construct download endpoint with query params', () => {
            const baseUrl = 'http://localhost:5678';
            const fileId = 'test-file-id';
            const workflowId = 'workflow-123';
            const queryParams = new URLSearchParams();
            queryParams.append('workflowId', workflowId);
            const expectedUrl = `${baseUrl}/api/v1/binary-data/${encodeURIComponent(fileId)}?${queryParams.toString()}`;
            (0, globals_1.expect)(expectedUrl).toBe('http://localhost:5678/api/v1/binary-data/test-file-id?workflowId=workflow-123');
        });
        (0, globals_1.it)('should handle URL encoding correctly', () => {
            const fileId = 'file with spaces & special chars!';
            const encoded = encodeURIComponent(fileId);
            (0, globals_1.expect)(encoded).toBe('file%20with%20spaces%20%26%20special%20chars!');
        });
    });
    (0, globals_1.describe)('Request Headers', () => {
        (0, globals_1.it)('should construct proper headers for API requests', () => {
            const apiKey = 'test-api-key-123';
            const headers = {
                'X-N8N-API-KEY': apiKey,
                'Content-Type': 'application/json',
            };
            (0, globals_1.expect)(headers['X-N8N-API-KEY']).toBe(apiKey);
            (0, globals_1.expect)(headers['Content-Type']).toBe('application/json');
        });
        (0, globals_1.it)('should handle form data headers correctly', () => {
            const apiKey = 'test-api-key-123';
            const headers = {
                'X-N8N-API-KEY': apiKey,
                // Content-Type should not be set for FormData to allow boundary setting
            };
            (0, globals_1.expect)(headers['X-N8N-API-KEY']).toBe(apiKey);
            (0, globals_1.expect)(headers['Content-Type']).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,