e4fe7b58dc9fcddfcfdf87a0d0de11a3
/* istanbul ignore next */
function cov_2jz21e4ydh() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/oauth2Handler.ts";
  var hash = "3ada2b7b72805ec386a0aea7a9566b8da290b877";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/oauth2Handler.ts",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 14
        },
        end: {
          line: 17,
          column: 23
        }
      },
      "1": {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "2": {
        start: {
          line: 19,
          column: 13
        },
        end: {
          line: 19,
          column: 22
        }
      },
      "3": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "4": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 16
        }
      },
      "5": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 38
        }
      },
      "6": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 32
        }
      },
      "7": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 50
        }
      },
      "8": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 49
        }
      },
      "9": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 44,
          column: 9
        }
      },
      "10": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 76
        }
      },
      "11": {
        start: {
          line: 46,
          column: 26
        },
        end: {
          line: 46,
          column: 71
        }
      },
      "12": {
        start: {
          line: 47,
          column: 22
        },
        end: {
          line: 47,
          column: 42
        }
      },
      "13": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "14": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "15": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 58,
          column: 60
        }
      },
      "16": {
        start: {
          line: 59,
          column: 34
        },
        end: {
          line: 59,
          column: 103
        }
      },
      "17": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 48
        }
      },
      "18": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 50
        }
      },
      "19": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 46
        }
      },
      "20": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 73,
          column: 10
        }
      },
      "21": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "22": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 64
        }
      },
      "23": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 77
        }
      },
      "24": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 60
        }
      },
      "25": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 32
        }
      },
      "26": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "27": {
        start: {
          line: 87,
          column: 27
        },
        end: {
          line: 87,
          column: 53
        }
      },
      "28": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 90,
          column: 13
        }
      },
      "29": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 80
        }
      },
      "30": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "31": {
        start: {
          line: 93,
          column: 31
        },
        end: {
          line: 101,
          column: 17
        }
      },
      "32": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 65
        }
      },
      "33": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 30
        }
      },
      "34": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "35": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 88
        }
      },
      "36": {
        start: {
          line: 110,
          column: 28
        },
        end: {
          line: 110,
          column: 73
        }
      },
      "37": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 113,
          column: 13
        }
      },
      "38": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 77
        }
      },
      "39": {
        start: {
          line: 114,
          column: 12
        },
        end: {
          line: 116,
          column: 13
        }
      },
      "40": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 72
        }
      },
      "41": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "42": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 62
        }
      },
      "43": {
        start: {
          line: 121,
          column: 27
        },
        end: {
          line: 121,
          column: 97
        }
      },
      "44": {
        start: {
          line: 123,
          column: 29
        },
        end: {
          line: 123,
          column: 67
        }
      },
      "45": {
        start: {
          line: 125,
          column: 29
        },
        end: {
          line: 125,
          column: 68
        }
      },
      "46": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 126,
          column: 46
        }
      },
      "47": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 52
        }
      },
      "48": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 133,
          column: 13
        }
      },
      "49": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 57
        }
      },
      "50": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 135,
          column: 26
        }
      },
      "51": {
        start: {
          line: 138,
          column: 33
        },
        end: {
          line: 138,
          column: 105
        }
      },
      "52": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "53": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 61
        }
      },
      "54": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 26
        }
      },
      "55": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 151,
          column: 59
        }
      },
      "56": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 152,
          column: 49
        }
      },
      "57": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "58": {
        start: {
          line: 159,
          column: 27
        },
        end: {
          line: 159,
          column: 53
        }
      },
      "59": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 162,
          column: 13
        }
      },
      "60": {
        start: {
          line: 161,
          column: 16
        },
        end: {
          line: 161,
          column: 80
        }
      },
      "61": {
        start: {
          line: 163,
          column: 29
        },
        end: {
          line: 163,
          column: 63
        }
      },
      "62": {
        start: {
          line: 164,
          column: 34
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "63": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 13
        }
      },
      "64": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 62
        }
      },
      "65": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 173,
          column: 14
        }
      },
      "66": {
        start: {
          line: 174,
          column: 29
        },
        end: {
          line: 181,
          column: 14
        }
      },
      "67": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "68": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 99
        }
      },
      "69": {
        start: {
          line: 185,
          column: 30
        },
        end: {
          line: 185,
          column: 51
        }
      },
      "70": {
        start: {
          line: 186,
          column: 30
        },
        end: {
          line: 193,
          column: 13
        }
      },
      "71": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 194,
          column: 49
        }
      },
      "72": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 195,
          column: 67
        }
      },
      "73": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 196,
          column: 29
        }
      },
      "74": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 199,
          column: 88
        }
      },
      "75": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 200,
          column: 24
        }
      },
      "76": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "77": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 53
        }
      },
      "78": {
        start: {
          line: 209,
          column: 29
        },
        end: {
          line: 209,
          column: 63
        }
      },
      "79": {
        start: {
          line: 210,
          column: 27
        },
        end: {
          line: 210,
          column: 52
        }
      },
      "80": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "81": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "82": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 226,
          column: 21
        }
      },
      "83": {
        start: {
          line: 217,
          column: 42
        },
        end: {
          line: 217,
          column: 91
        }
      },
      "84": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 225,
          column: 27
        }
      },
      "85": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 45
        }
      },
      "86": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 24
        }
      },
      "87": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 87
        }
      },
      "88": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 25
        }
      },
      "89": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "90": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 25
        }
      },
      "91": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 251,
          column: 9
        }
      },
      "92": {
        start: {
          line: 248,
          column: 24
        },
        end: {
          line: 248,
          column: 34
        }
      },
      "93": {
        start: {
          line: 249,
          column: 29
        },
        end: {
          line: 249,
          column: 49
        }
      },
      "94": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 250,
          column: 53
        }
      },
      "95": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 20
        }
      },
      "96": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 30
        }
      },
      "97": {
        start: {
          line: 260,
          column: 31
        },
        end: {
          line: 260,
          column: 33
        }
      },
      "98": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "99": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "100": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 45
        }
      },
      "101": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 48
        }
      },
      "102": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 270,
          column: 30
        }
      },
      "103": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 276,
          column: 30
        }
      },
      "104": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "105": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 281,
          column: 13
        }
      },
      "106": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 48
        }
      },
      "107": {
        start: {
          line: 284,
          column: 8
        },
        end: {
          line: 298,
          column: 9
        }
      },
      "108": {
        start: {
          line: 285,
          column: 12
        },
        end: {
          line: 297,
          column: 13
        }
      },
      "109": {
        start: {
          line: 286,
          column: 37
        },
        end: {
          line: 286,
          column: 59
        }
      },
      "110": {
        start: {
          line: 287,
          column: 43
        },
        end: {
          line: 287,
          column: 62
        }
      },
      "111": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "112": {
        start: {
          line: 290,
          column: 20
        },
        end: {
          line: 290,
          column: 49
        }
      },
      "113": {
        start: {
          line: 292,
          column: 21
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "114": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 295,
          column: 98
        }
      },
      "115": {
        start: {
          line: 304,
          column: 23
        },
        end: {
          line: 310,
          column: 10
        }
      },
      "116": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "117": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 313,
          column: 62
        }
      },
      "118": {
        start: {
          line: 315,
          column: 25
        },
        end: {
          line: 322,
          column: 10
        }
      },
      "119": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "120": {
        start: {
          line: 324,
          column: 30
        },
        end: {
          line: 324,
          column: 51
        }
      },
      "121": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 111
        }
      },
      "122": {
        start: {
          line: 327,
          column: 26
        },
        end: {
          line: 327,
          column: 47
        }
      },
      "123": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "124": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 329,
          column: 103
        }
      },
      "125": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "126": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "127": {
        start: {
          line: 346,
          column: 12
        },
        end: {
          line: 349,
          column: 14
        }
      },
      "128": {
        start: {
          line: 351,
          column: 25
        },
        end: {
          line: 356,
          column: 10
        }
      },
      "129": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "130": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 98
        }
      },
      "131": {
        start: {
          line: 360,
          column: 25
        },
        end: {
          line: 360,
          column: 46
        }
      },
      "132": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 367,
          column: 10
        }
      },
      "133": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "134": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 376,
          column: 13
        }
      },
      "135": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 31
        }
      },
      "136": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 378,
          column: 20
        }
      },
      "137": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 384,
          column: 79
        }
      },
      "138": {
        start: {
          line: 390,
          column: 8
        },
        end: {
          line: 390,
          column: 60
        }
      },
      "139": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 396,
          column: 60
        }
      },
      "140": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "141": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 28
        }
      },
      "142": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 80
        }
      },
      "143": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 411,
          column: 39
        }
      },
      "144": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 420,
          column: 18
        }
      },
      "145": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 27
        }
      },
      "146": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 419,
          column: 37
        }
      },
      "147": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 440,
          column: 9
        }
      },
      "148": {
        start: {
          line: 427,
          column: 39
        },
        end: {
          line: 427,
          column: 58
        }
      },
      "149": {
        start: {
          line: 428,
          column: 27
        },
        end: {
          line: 428,
          column: 53
        }
      },
      "150": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "151": {
        start: {
          line: 430,
          column: 38
        },
        end: {
          line: 430,
          column: 81
        }
      },
      "152": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 438,
          column: 17
        }
      },
      "153": {
        start: {
          line: 432,
          column: 20
        },
        end: {
          line: 437,
          column: 21
        }
      },
      "154": {
        start: {
          line: 433,
          column: 24
        },
        end: {
          line: 433,
          column: 67
        }
      },
      "155": {
        start: {
          line: 436,
          column: 24
        },
        end: {
          line: 436,
          column: 95
        }
      },
      "156": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 16
        }
      },
      "157": {
        start: {
          line: 452,
          column: 8
        },
        end: {
          line: 452,
          column: 43
        }
      },
      "158": {
        start: {
          line: 455,
          column: 8
        },
        end: {
          line: 488,
          column: 9
        }
      },
      "159": {
        start: {
          line: 457,
          column: 27
        },
        end: {
          line: 457,
          column: 65
        }
      },
      "160": {
        start: {
          line: 458,
          column: 12
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "161": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 462,
          column: 18
        }
      },
      "162": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 470,
          column: 13
        }
      },
      "163": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 469,
          column: 18
        }
      },
      "164": {
        start: {
          line: 472,
          column: 25
        },
        end: {
          line: 472,
          column: 67
        }
      },
      "165": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 481,
          column: 14
        }
      },
      "166": {
        start: {
          line: 484,
          column: 12
        },
        end: {
          line: 487,
          column: 14
        }
      },
      "167": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 493,
          column: 42
        }
      },
      "168": {
        start: {
          line: 499,
          column: 24
        },
        end: {
          line: 499,
          column: 45
        }
      },
      "169": {
        start: {
          line: 501,
          column: 27
        },
        end: {
          line: 501,
          column: 73
        }
      },
      "170": {
        start: {
          line: 502,
          column: 8
        },
        end: {
          line: 509,
          column: 9
        }
      },
      "171": {
        start: {
          line: 503,
          column: 32
        },
        end: {
          line: 503,
          column: 55
        }
      },
      "172": {
        start: {
          line: 504,
          column: 12
        },
        end: {
          line: 508,
          column: 14
        }
      },
      "173": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 20
        }
      },
      "174": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 521,
          column: 10
        }
      },
      "175": {
        start: {
          line: 528,
          column: 20
        },
        end: {
          line: 528,
          column: 39
        }
      },
      "176": {
        start: {
          line: 530,
          column: 22
        },
        end: {
          line: 530,
          column: 66
        }
      },
      "177": {
        start: {
          line: 531,
          column: 4
        },
        end: {
          line: 540,
          column: 5
        }
      },
      "178": {
        start: {
          line: 532,
          column: 25
        },
        end: {
          line: 532,
          column: 82
        }
      },
      "179": {
        start: {
          line: 533,
          column: 29
        },
        end: {
          line: 533,
          column: 90
        }
      },
      "180": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 539,
          column: 9
        }
      },
      "181": {
        start: {
          line: 535,
          column: 27
        },
        end: {
          line: 535,
          column: 78
        }
      },
      "182": {
        start: {
          line: 536,
          column: 12
        },
        end: {
          line: 538,
          column: 13
        }
      },
      "183": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 49
        }
      },
      "184": {
        start: {
          line: 541,
          column: 4
        },
        end: {
          line: 541,
          column: 19
        }
      },
      "185": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 83
        }
      },
      "186": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 587,
          column: 5
        }
      },
      "187": {
        start: {
          line: 588,
          column: 19
        },
        end: {
          line: 588,
          column: 36
        }
      },
      "188": {
        start: {
          line: 589,
          column: 4
        },
        end: {
          line: 591,
          column: 5
        }
      },
      "189": {
        start: {
          line: 590,
          column: 8
        },
        end: {
          line: 590,
          column: 20
        }
      },
      "190": {
        start: {
          line: 592,
          column: 4
        },
        end: {
          line: 596,
          column: 6
        }
      },
      "191": {
        start: {
          line: 601,
          column: 36
        },
        end: {
          line: 601,
          column: 57
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        loc: {
          start: {
            line: 21,
            column: 18
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 21
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 25
          },
          end: {
            line: 30,
            column: 5
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        loc: {
          start: {
            line: 34,
            column: 29
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 34
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 44
          },
          end: {
            line: 81,
            column: 5
          }
        },
        line: 40
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 51
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 85
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 32
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 150
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 42
          },
          end: {
            line: 202,
            column: 5
          }
        },
        line: 157
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 41
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 206
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 48
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 243
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 24
          },
          end: {
            line: 271,
            column: 5
          }
        },
        line: 258
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 275,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        loc: {
          start: {
            line: 275,
            column: 14
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 275
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 303,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        loc: {
          start: {
            line: 303,
            column: 55
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 303
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 38
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 343
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 372,
            column: 4
          },
          end: {
            line: 372,
            column: 5
          }
        },
        loc: {
          start: {
            line: 372,
            column: 30
          },
          end: {
            line: 379,
            column: 5
          }
        },
        line: 372
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 383,
            column: 5
          }
        },
        loc: {
          start: {
            line: 383,
            column: 24
          },
          end: {
            line: 385,
            column: 5
          }
        },
        line: 383
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 20
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 389
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 27
          },
          end: {
            line: 397,
            column: 5
          }
        },
        line: 395
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 401,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        loc: {
          start: {
            line: 401,
            column: 44
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 401
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 34
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 410
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 29
          },
          end: {
            line: 421,
            column: 5
          }
        },
        line: 416
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 417,
            column: 20
          },
          end: {
            line: 417,
            column: 21
          }
        },
        loc: {
          start: {
            line: 417,
            column: 26
          },
          end: {
            line: 420,
            column: 9
          }
        },
        line: 417
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 425,
            column: 4
          },
          end: {
            line: 425,
            column: 5
          }
        },
        loc: {
          start: {
            line: 425,
            column: 30
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 425
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 31
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 450
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 32
          },
          end: {
            line: 489,
            column: 5
          }
        },
        line: 454
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 490,
            column: 4
          },
          end: {
            line: 490,
            column: 5
          }
        },
        loc: {
          start: {
            line: 490,
            column: 27
          },
          end: {
            line: 494,
            column: 5
          }
        },
        line: 490
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 498,
            column: 4
          },
          end: {
            line: 498,
            column: 5
          }
        },
        loc: {
          start: {
            line: 498,
            column: 38
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 498
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 515,
            column: 4
          },
          end: {
            line: 515,
            column: 5
          }
        },
        loc: {
          start: {
            line: 515,
            column: 43
          },
          end: {
            line: 522,
            column: 5
          }
        },
        line: 515
      },
      "27": {
        name: "createOAuth2Handler",
        decl: {
          start: {
            line: 527,
            column: 16
          },
          end: {
            line: 527,
            column: 35
          }
        },
        loc: {
          start: {
            line: 527,
            column: 38
          },
          end: {
            line: 542,
            column: 1
          }
        },
        line: 527
      },
      "28": {
        name: "getProviderConfig",
        decl: {
          start: {
            line: 546,
            column: 9
          },
          end: {
            line: 546,
            column: 26
          }
        },
        loc: {
          start: {
            line: 546,
            column: 61
          },
          end: {
            line: 597,
            column: 1
          }
        },
        line: 546
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 40,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 40,
            column: 40
          },
          end: {
            line: 40,
            column: 42
          }
        }],
        line: 40
      },
      "1": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 44,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 26
          },
          end: {
            line: 46,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 26
          },
          end: {
            line: 46,
            column: 43
          }
        }, {
          start: {
            line: 46,
            column: 47
          },
          end: {
            line: 46,
            column: 71
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 90,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "7": {
        loc: {
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 27
          },
          end: {
            line: 95,
            column: 59
          }
        }, {
          start: {
            line: 95,
            column: 63
          },
          end: {
            line: 95,
            column: 83
          }
        }],
        line: 95
      },
      "8": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 108,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "9": {
        loc: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 36
          }
        }, {
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 61
          }
        }],
        line: 106
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 113,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 116,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "12": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 33
          },
          end: {
            line: 138,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 58
          },
          end: {
            line: 138,
            column: 71
          }
        }, {
          start: {
            line: 138,
            column: 74
          },
          end: {
            line: 138,
            column: 105
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 152,
            column: 15
          },
          end: {
            line: 152,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 15
          },
          end: {
            line: 152,
            column: 40
          }
        }, {
          start: {
            line: 152,
            column: 44
          },
          end: {
            line: 152,
            column: 48
          }
        }],
        line: 152
      },
      "15": {
        loc: {
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 12
          },
          end: {
            line: 162,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "16": {
        loc: {
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 12
          },
          end: {
            line: 167,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "17": {
        loc: {
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 182,
            column: 12
          },
          end: {
            line: 184,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 182
      },
      "18": {
        loc: {
          start: {
            line: 188,
            column: 30
          },
          end: {
            line: 188,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 30
          },
          end: {
            line: 188,
            column: 53
          }
        }, {
          start: {
            line: 188,
            column: 57
          },
          end: {
            line: 188,
            column: 83
          }
        }],
        line: 188
      },
      "19": {
        loc: {
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 189,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 27
          },
          end: {
            line: 189,
            column: 47
          }
        }, {
          start: {
            line: 189,
            column: 51
          },
          end: {
            line: 189,
            column: 59
          }
        }],
        line: 189
      },
      "20": {
        loc: {
          start: {
            line: 190,
            column: 27
          },
          end: {
            line: 190,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 50
          },
          end: {
            line: 190,
            column: 90
          }
        }, {
          start: {
            line: 190,
            column: 93
          },
          end: {
            line: 190,
            column: 102
          }
        }],
        line: 190
      },
      "21": {
        loc: {
          start: {
            line: 191,
            column: 24
          },
          end: {
            line: 191,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 42
          },
          end: {
            line: 191,
            column: 68
          }
        }, {
          start: {
            line: 191,
            column: 71
          },
          end: {
            line: 191,
            column: 91
          }
        }],
        line: 191
      },
      "22": {
        loc: {
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 12
          },
          end: {
            line: 232,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "23": {
        loc: {
          start: {
            line: 215,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "24": {
        loc: {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 215,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 215,
            column: 30
          }
        }, {
          start: {
            line: 215,
            column: 34
          },
          end: {
            line: 215,
            column: 52
          }
        }],
        line: 215
      },
      "25": {
        loc: {
          start: {
            line: 243,
            column: 27
          },
          end: {
            line: 243,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 243,
            column: 43
          },
          end: {
            line: 243,
            column: 46
          }
        }],
        line: 243
      },
      "26": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "27": {
        loc: {
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 8
          },
          end: {
            line: 251,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "28": {
        loc: {
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 12
          },
          end: {
            line: 268,
            column: 13
          }
        }, {
          start: {
            line: 265,
            column: 17
          },
          end: {
            line: 268,
            column: 13
          }
        }],
        line: 262
      },
      "29": {
        loc: {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 281,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      },
      "30": {
        loc: {
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 12
          },
          end: {
            line: 297,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "31": {
        loc: {
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 296,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 16
          },
          end: {
            line: 296,
            column: 17
          }
        }, {
          start: {
            line: 292,
            column: 21
          },
          end: {
            line: 296,
            column: 17
          }
        }],
        line: 288
      },
      "32": {
        loc: {
          start: {
            line: 292,
            column: 21
          },
          end: {
            line: 296,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 21
          },
          end: {
            line: 296,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "33": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "34": {
        loc: {
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "35": {
        loc: {
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "36": {
        loc: {
          start: {
            line: 329,
            column: 53
          },
          end: {
            line: 329,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 53
          },
          end: {
            line: 329,
            column: 80
          }
        }, {
          start: {
            line: 329,
            column: 84
          },
          end: {
            line: 329,
            column: 99
          }
        }],
        line: 329
      },
      "37": {
        loc: {
          start: {
            line: 334,
            column: 23
          },
          end: {
            line: 334,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 23
          },
          end: {
            line: 334,
            column: 43
          }
        }, {
          start: {
            line: 334,
            column: 47
          },
          end: {
            line: 334,
            column: 55
          }
        }],
        line: 334
      },
      "38": {
        loc: {
          start: {
            line: 335,
            column: 23
          },
          end: {
            line: 335,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 46
          },
          end: {
            line: 335,
            column: 86
          }
        }, {
          start: {
            line: 335,
            column: 89
          },
          end: {
            line: 335,
            column: 98
          }
        }],
        line: 335
      },
      "39": {
        loc: {
          start: {
            line: 336,
            column: 20
          },
          end: {
            line: 336,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 336,
            column: 38
          },
          end: {
            line: 336,
            column: 64
          }
        }, {
          start: {
            line: 336,
            column: 67
          },
          end: {
            line: 336,
            column: 80
          }
        }],
        line: 336
      },
      "40": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "41": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "42": {
        loc: {
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 362,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 362,
            column: 27
          }
        }, {
          start: {
            line: 362,
            column: 31
          },
          end: {
            line: 362,
            column: 43
          }
        }, {
          start: {
            line: 362,
            column: 47
          },
          end: {
            line: 362,
            column: 63
          }
        }, {
          start: {
            line: 362,
            column: 67
          },
          end: {
            line: 362,
            column: 76
          }
        }],
        line: 362
      },
      "43": {
        loc: {
          start: {
            line: 364,
            column: 18
          },
          end: {
            line: 364,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 18
          },
          end: {
            line: 364,
            column: 31
          }
        }, {
          start: {
            line: 364,
            column: 35
          },
          end: {
            line: 364,
            column: 56
          }
        }, {
          start: {
            line: 364,
            column: 60
          },
          end: {
            line: 364,
            column: 77
          }
        }],
        line: 364
      },
      "44": {
        loc: {
          start: {
            line: 365,
            column: 20
          },
          end: {
            line: 365,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 20
          },
          end: {
            line: 365,
            column: 39
          }
        }, {
          start: {
            line: 365,
            column: 43
          },
          end: {
            line: 365,
            column: 59
          }
        }],
        line: 365
      },
      "45": {
        loc: {
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 12
          },
          end: {
            line: 376,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "46": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "47": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 439,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "48": {
        loc: {
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 429,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 429,
            column: 16
          },
          end: {
            line: 429,
            column: 52
          }
        }, {
          start: {
            line: 429,
            column: 56
          },
          end: {
            line: 429,
            column: 75
          }
        }],
        line: 429
      },
      "49": {
        loc: {
          start: {
            line: 430,
            column: 38
          },
          end: {
            line: 430,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 430,
            column: 38
          },
          end: {
            line: 430,
            column: 74
          }
        }, {
          start: {
            line: 430,
            column: 78
          },
          end: {
            line: 430,
            column: 81
          }
        }],
        line: 430
      },
      "50": {
        loc: {
          start: {
            line: 431,
            column: 16
          },
          end: {
            line: 438,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 16
          },
          end: {
            line: 438,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "51": {
        loc: {
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "52": {
        loc: {
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 12
          },
          end: {
            line: 470,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "53": {
        loc: {
          start: {
            line: 486,
            column: 56
          },
          end: {
            line: 486,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 486,
            column: 81
          },
          end: {
            line: 486,
            column: 94
          }
        }, {
          start: {
            line: 486,
            column: 97
          },
          end: {
            line: 486,
            column: 110
          }
        }],
        line: 486
      },
      "54": {
        loc: {
          start: {
            line: 499,
            column: 24
          },
          end: {
            line: 499,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 499,
            column: 24
          },
          end: {
            line: 499,
            column: 39
          }
        }, {
          start: {
            line: 499,
            column: 43
          },
          end: {
            line: 499,
            column: 45
          }
        }],
        line: 499
      },
      "55": {
        loc: {
          start: {
            line: 501,
            column: 27
          },
          end: {
            line: 501,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 501,
            column: 27
          },
          end: {
            line: 501,
            column: 48
          }
        }, {
          start: {
            line: 501,
            column: 52
          },
          end: {
            line: 501,
            column: 73
          }
        }],
        line: 501
      },
      "56": {
        loc: {
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 509,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 8
          },
          end: {
            line: 509,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 502
      },
      "57": {
        loc: {
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 539,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "58": {
        loc: {
          start: {
            line: 534,
            column: 12
          },
          end: {
            line: 534,
            column: 36
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 534,
            column: 12
          },
          end: {
            line: 534,
            column: 20
          }
        }, {
          start: {
            line: 534,
            column: 24
          },
          end: {
            line: 534,
            column: 36
          }
        }],
        line: 534
      },
      "59": {
        loc: {
          start: {
            line: 536,
            column: 12
          },
          end: {
            line: 538,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 12
          },
          end: {
            line: 538,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 536
      },
      "60": {
        loc: {
          start: {
            line: 547,
            column: 20
          },
          end: {
            line: 547,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 547,
            column: 20
          },
          end: {
            line: 547,
            column: 56
          }
        }, {
          start: {
            line: 547,
            column: 60
          },
          end: {
            line: 547,
            column: 83
          }
        }],
        line: 547
      },
      "61": {
        loc: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 591,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 589
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0],
      "43": [0, 0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/oauth2Handler.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/oauth2Handler.ts"],
      sourcesContent: ["/**\n * OAuth2 Handler for n8n MCP Server\n *\n * Provides OAuth2 authentication flows, token management, and callback handling\n * for enhanced security and integration with OAuth2-enabled services.\n */\n\n/* eslint-disable no-undef */\ndeclare const fetch: typeof globalThis.fetch;\n\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { setInterval } from 'timers';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { BaseAuthProvider, RequestContext, AuthResult, AuthenticatedUser } from './authProvider.js';\n\n/**\n * OAuth2 configuration for different providers\n */\nexport interface OAuth2Config {\n  /** OAuth2 provider name (e.g., 'google', 'github', 'microsoft') */\n  provider: string;\n\n  /** Client ID from OAuth2 provider */\n  clientId: string;\n\n  /** Client secret from OAuth2 provider */\n  clientSecret: string;\n\n  /** OAuth2 authorization endpoint URL */\n  authUrl: string;\n\n  /** OAuth2 token endpoint URL */\n  tokenUrl: string;\n\n  /** OAuth2 user info endpoint URL (optional) */\n  userInfoUrl?: string;\n\n  /** Redirect URI for OAuth2 callback */\n  redirectUri: string;\n\n  /** OAuth2 scopes to request */\n  scopes: string[];\n\n  /** Additional parameters for authorization request */\n  extraParams?: Record<string, string>;\n\n  /** Token refresh settings */\n  refreshSettings?: {\n    /** Whether to automatically refresh tokens */\n    autoRefresh: boolean;\n\n    /** Buffer time before expiry to refresh (seconds) */\n    refreshBuffer: number;\n  };\n\n  /** PKCE settings for enhanced security */\n  pkce?: {\n    /** Whether to use PKCE (Proof Key for Code Exchange) */\n    enabled: boolean;\n\n    /** Code challenge method */\n    challengeMethod: 'S256' | 'plain';\n  };\n}\n\n/**\n * OAuth2 token information\n */\nexport interface OAuth2Token {\n  /** Access token */\n  accessToken: string;\n\n  /** Refresh token (if available) */\n  refreshToken?: string;\n\n  /** Token type (usually 'Bearer') */\n  tokenType: string;\n\n  /** Token expiry timestamp */\n  expiresAt?: number;\n\n  /** OAuth2 scopes granted */\n  scopes: string[];\n\n  /** Additional token metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 authorization session\n */\nexport interface OAuth2Session {\n  /** Session ID */\n  sessionId: string;\n\n  /** OAuth2 provider */\n  provider: string;\n\n  /** Authorization state parameter */\n  state: string;\n\n  /** PKCE code verifier (if using PKCE) */\n  codeVerifier?: string;\n\n  /** PKCE code challenge (if using PKCE) */\n  codeChallenge?: string;\n\n  /** Session creation timestamp */\n  createdAt: number;\n\n  /** Session expiry timestamp */\n  expiresAt: number;\n\n  /** Additional session metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 callback result\n */\nexport interface OAuth2CallbackResult {\n  /** Whether the callback was successful */\n  success: boolean;\n\n  /** OAuth2 tokens (if successful) */\n  tokens?: OAuth2Token;\n\n  /** User information from OAuth2 provider */\n  userInfo?: OAuth2UserInfo;\n\n  /** Error message (if failed) */\n  error?: string;\n\n  /** Error details */\n  errorDetails?: {\n    code?: string;\n    description?: string;\n    uri?: string;\n  };\n}\n\n/**\n * User information from OAuth2 provider\n */\nexport interface OAuth2UserInfo {\n  /** User ID from provider */\n  id: string;\n\n  /** User email */\n  email?: string;\n\n  /** User display name */\n  name?: string;\n\n  /** User avatar URL */\n  avatar?: string;\n\n  /** Additional user data from provider */\n  raw?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 authentication provider events\n */\nexport interface OAuth2Events {\n  /** Token refresh event */\n  tokenRefresh: (provider: string, userId: string, tokens: OAuth2Token) => void;\n\n  /** Token expiry warning */\n  tokenExpiring: (provider: string, userId: string, expiresIn: number) => void;\n\n  /** Authentication success */\n  authSuccess: (provider: string, userInfo: OAuth2UserInfo) => void;\n\n  /** Authentication failure */\n  authFailure: (provider: string, error: string) => void;\n}\n\n/**\n * OAuth2 Handler class\n *\n * Manages OAuth2 authentication flows, token storage, and callback processing.\n */\nexport class OAuth2Handler extends EventEmitter {\n  private configs = new Map<string, OAuth2Config>();\n  private sessions = new Map<string, OAuth2Session>();\n  private tokens = new Map<string, OAuth2Token>();\n  private n8nClient: N8nClient | null = null;\n\n  constructor() {\n    super();\n    this.setupTokenRefreshTimer();\n  }\n\n  /**\n   * Set n8n client for enhanced integration\n   */\n  setN8nClient(client: N8nClient): void {\n    this.n8nClient = client;\n  }\n\n  /**\n   * Register OAuth2 provider configuration\n   */\n  registerProvider(config: OAuth2Config): void {\n    this.configs.set(config.provider, config);\n  }\n\n  /**\n   * Generate OAuth2 authorization URL\n   */\n  generateAuthUrl(\n    provider: string,\n    options: {\n      sessionId?: string;\n      extraParams?: Record<string, string>;\n      metadata?: Record<string, unknown>;\n    } = {}\n  ): { url: string; session: OAuth2Session } {\n    const config = this.configs.get(provider);\n    if (!config) {\n      throw new Error(`OAuth2 provider '${provider}' not configured`);\n    }\n\n    // Generate session\n    const sessionId = options.sessionId || this.generateSessionId();\n    const state = this.generateState();\n    const session: OAuth2Session = {\n      sessionId,\n      provider,\n      state,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + 15 * 60 * 1000, // 15 minutes\n      metadata: options.metadata,\n    };\n\n    // Generate PKCE parameters if enabled\n    if (config.pkce?.enabled) {\n      const codeVerifier = this.generateCodeVerifier();\n      const codeChallenge = this.generateCodeChallenge(codeVerifier, config.pkce.challengeMethod);\n      session.codeVerifier = codeVerifier;\n      session.codeChallenge = codeChallenge;\n    }\n\n    this.sessions.set(sessionId, session);\n\n    // Build authorization URL\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: config.clientId,\n      redirect_uri: config.redirectUri,\n      scope: config.scopes.join(' '),\n      state,\n      ...config.extraParams,\n      ...options.extraParams,\n    });\n\n    // Add PKCE parameters\n    if (session.codeChallenge) {\n      params.set('code_challenge', session.codeChallenge);\n      params.set('code_challenge_method', config.pkce!.challengeMethod);\n    }\n\n    const url = `${config.authUrl}?${params.toString()}`;\n\n    return { url, session };\n  }\n\n  /**\n   * Handle OAuth2 callback\n   */\n  async handleCallback(\n    provider: string,\n    callbackParams: {\n      code?: string;\n      state?: string;\n      error?: string;\n      error_description?: string;\n      error_uri?: string;\n    }\n  ): Promise<OAuth2CallbackResult> {\n    try {\n      const config = this.configs.get(provider);\n      if (!config) {\n        throw new Error(`OAuth2 provider '${provider}' not configured`);\n      }\n\n      // Handle error response\n      if (callbackParams.error) {\n        const result: OAuth2CallbackResult = {\n          success: false,\n          error: callbackParams.error_description || callbackParams.error,\n          errorDetails: {\n            code: callbackParams.error,\n            description: callbackParams.error_description,\n            uri: callbackParams.error_uri,\n          },\n        };\n        this.emit('authFailure', provider, result.error!);\n        return result;\n      }\n\n      // Validate required parameters\n      if (!callbackParams.code || !callbackParams.state) {\n        throw new Error('Missing required callback parameters (code or state)');\n      }\n\n      // Find and validate session\n      const session = this.findSessionByState(callbackParams.state);\n      if (!session) {\n        throw new Error('Invalid or expired OAuth2 state parameter');\n      }\n\n      if (session.provider !== provider) {\n        throw new Error('OAuth2 provider mismatch in callback');\n      }\n\n      if (session.expiresAt < Date.now()) {\n        throw new Error('OAuth2 session has expired');\n      }\n\n      // Exchange code for tokens\n      const tokens = await this.exchangeCodeForTokens(config, callbackParams.code, session);\n\n      // Get user information\n      const userInfo = await this.getUserInfo(config, tokens);\n\n      // Store tokens\n      const tokenKey = this.getTokenKey(provider, userInfo.id);\n      this.tokens.set(tokenKey, tokens);\n\n      // Clean up session\n      this.sessions.delete(session.sessionId);\n\n      const result: OAuth2CallbackResult = {\n        success: true,\n        tokens,\n        userInfo,\n      };\n\n      this.emit('authSuccess', provider, userInfo);\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown OAuth2 callback error';\n      const result: OAuth2CallbackResult = {\n        success: false,\n        error: errorMessage,\n      };\n      this.emit('authFailure', provider, errorMessage);\n      return result;\n    }\n  }\n\n  /**\n   * Get stored tokens for user\n   */\n  getTokens(provider: string, userId: string): OAuth2Token | null {\n    const tokenKey = this.getTokenKey(provider, userId);\n    return this.tokens.get(tokenKey) || null;\n  }\n\n  /**\n   * Refresh OAuth2 tokens\n   */\n  async refreshTokens(provider: string, userId: string): Promise<OAuth2Token | null> {\n    try {\n      const config = this.configs.get(provider);\n      if (!config) {\n        throw new Error(`OAuth2 provider '${provider}' not configured`);\n      }\n\n      const tokenKey = this.getTokenKey(provider, userId);\n      const currentTokens = this.tokens.get(tokenKey);\n      if (!currentTokens?.refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const params = new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: currentTokens.refreshToken,\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n      });\n\n      const response = await fetch(config.tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json',\n        },\n        body: params.toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);\n      }\n\n      const tokenData = await response.json();\n      const newTokens: OAuth2Token = {\n        accessToken: tokenData.access_token,\n        refreshToken: tokenData.refresh_token || currentTokens.refreshToken,\n        tokenType: tokenData.token_type || 'Bearer',\n        expiresAt: tokenData.expires_in ? Date.now() + tokenData.expires_in * 1000 : undefined,\n        scopes: tokenData.scope ? tokenData.scope.split(' ') : currentTokens.scopes,\n        metadata: { ...currentTokens.metadata, refreshedAt: Date.now() },\n      };\n\n      this.tokens.set(tokenKey, newTokens);\n      this.emit('tokenRefresh', provider, userId, newTokens);\n\n      return newTokens;\n    } catch (error) {\n      console.error(`Failed to refresh tokens for ${provider}:${userId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Revoke OAuth2 tokens\n   */\n  async revokeTokens(provider: string, userId: string): Promise<boolean> {\n    try {\n      const config = this.configs.get(provider);\n      const tokenKey = this.getTokenKey(provider, userId);\n      const tokens = this.tokens.get(tokenKey);\n\n      if (tokens) {\n        // Attempt to revoke token with provider (if supported)\n        // This is provider-specific and may not be supported by all providers\n        try {\n          if (config && tokens.accessToken) {\n            // Basic revocation attempt - providers may have different endpoints\n            const revokeUrl = `${config.tokenUrl.replace('/token', '/revoke')}`;\n            await fetch(revokeUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${tokens.accessToken}`,\n              },\n              body: `token=${tokens.accessToken}`,\n            });\n          }\n        } catch {\n          // Ignore revocation errors - we'll still remove locally\n        }\n\n        this.tokens.delete(tokenKey);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to revoke tokens for ${provider}:${userId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if tokens are valid and not expired\n   */\n  areTokensValid(tokens: OAuth2Token, bufferSeconds: number = 300): boolean {\n    if (!tokens.accessToken) {\n      return false;\n    }\n\n    if (tokens.expiresAt) {\n      const now = Date.now();\n      const bufferMs = bufferSeconds * 1000;\n      return tokens.expiresAt > now + bufferMs;\n    }\n\n    // If no expiry time, assume valid\n    return true;\n  }\n\n  /**\n   * Get all active sessions\n   */\n  getActiveSessions(): OAuth2Session[] {\n    const now = Date.now();\n    const activeSessions: OAuth2Session[] = [];\n\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.expiresAt > now) {\n        activeSessions.push(session);\n      } else {\n        // Clean up expired session\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    return activeSessions;\n  }\n\n  /**\n   * Clean up expired sessions and tokens\n   */\n  cleanup(): void {\n    const now = Date.now();\n\n    // Clean up expired sessions\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.expiresAt <= now) {\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    // Check for expiring tokens\n    for (const [tokenKey, tokens] of this.tokens.entries()) {\n      if (tokens.expiresAt) {\n        const timeToExpiry = tokens.expiresAt - now;\n        const [provider, userId] = tokenKey.split(':');\n\n        if (timeToExpiry <= 0) {\n          // Token expired, remove it\n          this.tokens.delete(tokenKey);\n        } else if (timeToExpiry <= 300000) {\n          // 5 minutes\n          // Token expiring soon, emit warning\n          this.emit('tokenExpiring', provider, userId, Math.floor(timeToExpiry / 1000));\n        }\n      }\n    }\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  private async exchangeCodeForTokens(\n    config: OAuth2Config,\n    code: string,\n    session: OAuth2Session\n  ): Promise<OAuth2Token> {\n    const params = new URLSearchParams({\n      grant_type: 'authorization_code',\n      code,\n      redirect_uri: config.redirectUri,\n      client_id: config.clientId,\n      client_secret: config.clientSecret,\n    });\n\n    // Add PKCE code verifier if used\n    if (session.codeVerifier) {\n      params.set('code_verifier', session.codeVerifier);\n    }\n\n    const response = await fetch(config.tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: params.toString(),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Token exchange failed: ${response.status} ${response.statusText} - ${errorText}`\n      );\n    }\n\n    const tokenData = await response.json();\n\n    if (tokenData.error) {\n      throw new Error(`Token exchange error: ${tokenData.error_description || tokenData.error}`);\n    }\n\n    return {\n      accessToken: tokenData.access_token,\n      refreshToken: tokenData.refresh_token,\n      tokenType: tokenData.token_type || 'Bearer',\n      expiresAt: tokenData.expires_in ? Date.now() + tokenData.expires_in * 1000 : undefined,\n      scopes: tokenData.scope ? tokenData.scope.split(' ') : config.scopes,\n      metadata: { acquiredAt: Date.now() },\n    };\n  }\n\n  /**\n   * Get user information from OAuth2 provider\n   */\n  private async getUserInfo(config: OAuth2Config, tokens: OAuth2Token): Promise<OAuth2UserInfo> {\n    if (!config.userInfoUrl) {\n      // If no user info URL, create basic user info from token\n      return {\n        id: 'unknown',\n        name: 'OAuth2 User',\n      };\n    }\n\n    const response = await fetch(config.userInfoUrl, {\n      headers: {\n        Authorization: `${tokens.tokenType} ${tokens.accessToken}`,\n        Accept: 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get user info: ${response.status} ${response.statusText}`);\n    }\n\n    const userData = await response.json();\n\n    return {\n      id: userData.id || userData.sub || userData.user_id || 'unknown',\n      email: userData.email,\n      name: userData.name || userData.display_name || userData.username,\n      avatar: userData.avatar_url || userData.picture,\n      raw: userData,\n    };\n  }\n\n  /**\n   * Find session by state parameter\n   */\n  private findSessionByState(state: string): OAuth2Session | null {\n    for (const session of this.sessions.values()) {\n      if (session.state === state) {\n        return session;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `oauth2_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate OAuth2 state parameter\n   */\n  private generateState(): string {\n    return crypto.randomBytes(32).toString('base64url');\n  }\n\n  /**\n   * Generate PKCE code verifier\n   */\n  private generateCodeVerifier(): string {\n    return crypto.randomBytes(32).toString('base64url');\n  }\n\n  /**\n   * Generate PKCE code challenge\n   */\n  private generateCodeChallenge(verifier: string, method: 'S256' | 'plain'): string {\n    if (method === 'plain') {\n      return verifier;\n    }\n\n    return crypto.createHash('sha256').update(verifier).digest('base64url');\n  }\n\n  /**\n   * Get token storage key\n   */\n  private getTokenKey(provider: string, userId: string): string {\n    return `${provider}:${userId}`;\n  }\n\n  /**\n   * Setup automatic token refresh timer\n   */\n  private setupTokenRefreshTimer(): void {\n    setInterval(() => {\n      this.cleanup();\n      this.autoRefreshTokens();\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Automatically refresh tokens that are about to expire\n   */\n  private async autoRefreshTokens(): Promise<void> {\n    for (const [tokenKey, tokens] of this.tokens.entries()) {\n      const [provider, userId] = tokenKey.split(':');\n      const config = this.configs.get(provider);\n\n      if (config?.refreshSettings?.autoRefresh && tokens.refreshToken) {\n        const bufferSeconds = config.refreshSettings.refreshBuffer || 300;\n\n        if (!this.areTokensValid(tokens, bufferSeconds)) {\n          try {\n            await this.refreshTokens(provider, userId);\n          } catch (error) {\n            console.error(`Auto-refresh failed for ${provider}:${userId}:`, error);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * OAuth2 Authentication Provider\n *\n * Integrates OAuth2Handler with the authentication provider interface.\n */\nexport class OAuth2AuthProvider extends BaseAuthProvider {\n  private oauth2Handler: OAuth2Handler;\n\n  constructor(oauth2Handler: OAuth2Handler) {\n    super();\n    this.oauth2Handler = oauth2Handler;\n  }\n\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    try {\n      // Extract OAuth2 tokens from context\n      const tokens = this.extractTokensFromContext(context);\n      if (!tokens) {\n        return {\n          success: false,\n          error: 'No OAuth2 tokens found in request context',\n        };\n      }\n\n      // Validate tokens\n      if (!this.oauth2Handler.areTokensValid(tokens)) {\n        return {\n          success: false,\n          error: 'OAuth2 tokens are invalid or expired',\n        };\n      }\n\n      // Create authenticated user\n      const user = this.createUserFromTokens(tokens, context);\n\n      return {\n        success: true,\n        user,\n        context: {\n          authType: 'oauth2',\n          tokenType: tokens.tokenType,\n          scopes: tokens.scopes,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `OAuth2 authentication failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    // OAuth2 refresh logic would be implemented here\n    // For now, re-authenticate\n    return this.authenticate(context);\n  }\n\n  /**\n   * Extract OAuth2 tokens from request context\n   */\n  private extractTokensFromContext(context: RequestContext): OAuth2Token | null {\n    const headers = context.headers || {};\n\n    // Look for Bearer token in Authorization header\n    const authHeader = headers.authorization || headers.Authorization;\n    if (authHeader?.startsWith('Bearer ')) {\n      const accessToken = authHeader.substring(7);\n      return {\n        accessToken,\n        tokenType: 'Bearer',\n        scopes: [], // Would need to be populated from stored token data\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Create authenticated user from OAuth2 tokens\n   */\n  private createUserFromTokens(tokens: OAuth2Token, _context: RequestContext): AuthenticatedUser {\n    return {\n      id: `oauth2_${crypto.createHash('sha256').update(tokens.accessToken).digest('hex').substring(0, 16)}`,\n      name: 'OAuth2 User',\n      roles: ['oauth2-user'],\n      permissions: this.createPermissions(['oauth2-user']),\n    };\n  }\n}\n\n/**\n * Create default OAuth2 handler with common provider configurations\n */\nexport function createOAuth2Handler(): OAuth2Handler {\n  const handler = new OAuth2Handler();\n\n  // Add common OAuth2 providers (can be configured via environment variables)\n  const providers = ['google', 'github', 'microsoft', 'discord'];\n\n  for (const provider of providers) {\n    const clientId = process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_ID`];\n    const clientSecret = process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_SECRET`];\n\n    if (clientId && clientSecret) {\n      const config = getProviderConfig(provider, clientId, clientSecret);\n      if (config) {\n        handler.registerProvider(config);\n      }\n    }\n  }\n\n  return handler;\n}\n\n/**\n * Get OAuth2 configuration for common providers\n */\nfunction getProviderConfig(\n  provider: string,\n  clientId: string,\n  clientSecret: string\n): OAuth2Config | null {\n  const baseUrl = process.env.OAUTH2_REDIRECT_BASE_URL || 'http://localhost:3000';\n\n  const configs: Record<string, Omit<OAuth2Config, 'clientId' | 'clientSecret'>> = {\n    google: {\n      provider: 'google',\n      authUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n      tokenUrl: 'https://oauth2.googleapis.com/token',\n      userInfoUrl: 'https://www.googleapis.com/oauth2/v2/userinfo',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/google`,\n      scopes: ['openid', 'email', 'profile'],\n      pkce: { enabled: true, challengeMethod: 'S256' },\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n    github: {\n      provider: 'github',\n      authUrl: 'https://github.com/login/oauth/authorize',\n      tokenUrl: 'https://github.com/login/oauth/access_token',\n      userInfoUrl: 'https://api.github.com/user',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/github`,\n      scopes: ['user:email'],\n      refreshSettings: { autoRefresh: false, refreshBuffer: 300 },\n    },\n    microsoft: {\n      provider: 'microsoft',\n      authUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n      tokenUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n      userInfoUrl: 'https://graph.microsoft.com/v1.0/me',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/microsoft`,\n      scopes: ['openid', 'email', 'profile'],\n      pkce: { enabled: true, challengeMethod: 'S256' },\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n    discord: {\n      provider: 'discord',\n      authUrl: 'https://discord.com/api/oauth2/authorize',\n      tokenUrl: 'https://discord.com/api/oauth2/token',\n      userInfoUrl: 'https://discord.com/api/users/@me',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/discord`,\n      scopes: ['identify', 'email'],\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n  };\n\n  const config = configs[provider];\n  if (!config) {\n    return null;\n  }\n\n  return {\n    ...config,\n    clientId,\n    clientSecret,\n  };\n}\n\n/**\n * Default OAuth2 handler instance\n */\nexport const defaultOAuth2Handler = createOAuth2Handler();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3ada2b7b72805ec386a0aea7a9566b8da290b877"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2jz21e4ydh = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2jz21e4ydh();
/**
 * OAuth2 Handler for n8n MCP Server
 *
 * Provides OAuth2 authentication flows, token management, and callback handling
 * for enhanced security and integration with OAuth2-enabled services.
 */
import * as crypto from 'crypto';
import { EventEmitter } from 'events';
import { setInterval } from 'timers';
import { BaseAuthProvider } from './authProvider.js';
/**
 * OAuth2 Handler class
 *
 * Manages OAuth2 authentication flows, token storage, and callback processing.
 */
export class OAuth2Handler extends EventEmitter {
  configs =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[0]++, new Map());
  sessions =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[1]++, new Map());
  tokens =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[2]++, new Map());
  n8nClient =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[3]++, null);
  constructor() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[0]++;
    cov_2jz21e4ydh().s[4]++;
    super();
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[5]++;
    this.setupTokenRefreshTimer();
  }
  /**
   * Set n8n client for enhanced integration
   */
  setN8nClient(client) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[1]++;
    cov_2jz21e4ydh().s[6]++;
    this.n8nClient = client;
  }
  /**
   * Register OAuth2 provider configuration
   */
  registerProvider(config) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[2]++;
    cov_2jz21e4ydh().s[7]++;
    this.configs.set(config.provider, config);
  }
  /**
   * Generate OAuth2 authorization URL
   */
  generateAuthUrl(provider, options =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[3]++;
    const config =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[8]++, this.configs.get(provider));
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[9]++;
    if (!config) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[1][0]++;
      cov_2jz21e4ydh().s[10]++;
      throw new Error(`OAuth2 provider '${provider}' not configured`);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[1][1]++;
    }
    // Generate session
    const sessionId =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[11]++,
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[2][0]++, options.sessionId) ||
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[2][1]++, this.generateSessionId()));
    const state =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[12]++, this.generateState());
    const session =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[13]++, {
      sessionId,
      provider,
      state,
      createdAt: Date.now(),
      expiresAt: Date.now() + 15 * 60 * 1000,
      // 15 minutes
      metadata: options.metadata
    });
    // Generate PKCE parameters if enabled
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[14]++;
    if (config.pkce?.enabled) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[3][0]++;
      const codeVerifier =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[15]++, this.generateCodeVerifier());
      const codeChallenge =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[16]++, this.generateCodeChallenge(codeVerifier, config.pkce.challengeMethod));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[17]++;
      session.codeVerifier = codeVerifier;
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[18]++;
      session.codeChallenge = codeChallenge;
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[3][1]++;
    }
    cov_2jz21e4ydh().s[19]++;
    this.sessions.set(sessionId, session);
    // Build authorization URL
    const params =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[20]++, new URLSearchParams({
      response_type: 'code',
      client_id: config.clientId,
      redirect_uri: config.redirectUri,
      scope: config.scopes.join(' '),
      state,
      ...config.extraParams,
      ...options.extraParams
    }));
    // Add PKCE parameters
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[21]++;
    if (session.codeChallenge) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[4][0]++;
      cov_2jz21e4ydh().s[22]++;
      params.set('code_challenge', session.codeChallenge);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[23]++;
      params.set('code_challenge_method', config.pkce.challengeMethod);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[4][1]++;
    }
    const url =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[24]++, `${config.authUrl}?${params.toString()}`);
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[25]++;
    return {
      url,
      session
    };
  }
  /**
   * Handle OAuth2 callback
   */
  async handleCallback(provider, callbackParams) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[4]++;
    cov_2jz21e4ydh().s[26]++;
    try {
      const config =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[27]++, this.configs.get(provider));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[28]++;
      if (!config) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[5][0]++;
        cov_2jz21e4ydh().s[29]++;
        throw new Error(`OAuth2 provider '${provider}' not configured`);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[5][1]++;
      }
      // Handle error response
      cov_2jz21e4ydh().s[30]++;
      if (callbackParams.error) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[6][0]++;
        const result =
        /* istanbul ignore next */
        (cov_2jz21e4ydh().s[31]++, {
          success: false,
          error:
          /* istanbul ignore next */
          (cov_2jz21e4ydh().b[7][0]++, callbackParams.error_description) ||
          /* istanbul ignore next */
          (cov_2jz21e4ydh().b[7][1]++, callbackParams.error),
          errorDetails: {
            code: callbackParams.error,
            description: callbackParams.error_description,
            uri: callbackParams.error_uri
          }
        });
        /* istanbul ignore next */
        cov_2jz21e4ydh().s[32]++;
        this.emit('authFailure', provider, result.error);
        /* istanbul ignore next */
        cov_2jz21e4ydh().s[33]++;
        return result;
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[6][1]++;
      }
      // Validate required parameters
      cov_2jz21e4ydh().s[34]++;
      if (
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[9][0]++, !callbackParams.code) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[9][1]++, !callbackParams.state)) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[8][0]++;
        cov_2jz21e4ydh().s[35]++;
        throw new Error('Missing required callback parameters (code or state)');
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[8][1]++;
      }
      // Find and validate session
      const session =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[36]++, this.findSessionByState(callbackParams.state));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[37]++;
      if (!session) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[10][0]++;
        cov_2jz21e4ydh().s[38]++;
        throw new Error('Invalid or expired OAuth2 state parameter');
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[10][1]++;
      }
      cov_2jz21e4ydh().s[39]++;
      if (session.provider !== provider) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[11][0]++;
        cov_2jz21e4ydh().s[40]++;
        throw new Error('OAuth2 provider mismatch in callback');
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[11][1]++;
      }
      cov_2jz21e4ydh().s[41]++;
      if (session.expiresAt < Date.now()) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[12][0]++;
        cov_2jz21e4ydh().s[42]++;
        throw new Error('OAuth2 session has expired');
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[12][1]++;
      }
      // Exchange code for tokens
      const tokens =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[43]++, await this.exchangeCodeForTokens(config, callbackParams.code, session));
      // Get user information
      const userInfo =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[44]++, await this.getUserInfo(config, tokens));
      // Store tokens
      const tokenKey =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[45]++, this.getTokenKey(provider, userInfo.id));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[46]++;
      this.tokens.set(tokenKey, tokens);
      // Clean up session
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[47]++;
      this.sessions.delete(session.sessionId);
      const result =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[48]++, {
        success: true,
        tokens,
        userInfo
      });
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[49]++;
      this.emit('authSuccess', provider, userInfo);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[50]++;
      return result;
    } catch (error) {
      const errorMessage =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[51]++, error instanceof Error ?
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[13][0]++, error.message) :
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[13][1]++, 'Unknown OAuth2 callback error'));
      const result =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[52]++, {
        success: false,
        error: errorMessage
      });
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[53]++;
      this.emit('authFailure', provider, errorMessage);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[54]++;
      return result;
    }
  }
  /**
   * Get stored tokens for user
   */
  getTokens(provider, userId) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[5]++;
    const tokenKey =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[55]++, this.getTokenKey(provider, userId));
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[56]++;
    return /* istanbul ignore next */(cov_2jz21e4ydh().b[14][0]++, this.tokens.get(tokenKey)) ||
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[14][1]++, null);
  }
  /**
   * Refresh OAuth2 tokens
   */
  async refreshTokens(provider, userId) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[6]++;
    cov_2jz21e4ydh().s[57]++;
    try {
      const config =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[58]++, this.configs.get(provider));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[59]++;
      if (!config) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[15][0]++;
        cov_2jz21e4ydh().s[60]++;
        throw new Error(`OAuth2 provider '${provider}' not configured`);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[15][1]++;
      }
      const tokenKey =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[61]++, this.getTokenKey(provider, userId));
      const currentTokens =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[62]++, this.tokens.get(tokenKey));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[63]++;
      if (!currentTokens?.refreshToken) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[16][0]++;
        cov_2jz21e4ydh().s[64]++;
        throw new Error('No refresh token available');
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[16][1]++;
      }
      const params =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[65]++, new URLSearchParams({
        grant_type: 'refresh_token',
        refresh_token: currentTokens.refreshToken,
        client_id: config.clientId,
        client_secret: config.clientSecret
      }));
      const response =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[66]++, await fetch(config.tokenUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          Accept: 'application/json'
        },
        body: params.toString()
      }));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[67]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[17][0]++;
        cov_2jz21e4ydh().s[68]++;
        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[17][1]++;
      }
      const tokenData =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[69]++, await response.json());
      const newTokens =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[70]++, {
        accessToken: tokenData.access_token,
        refreshToken:
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[18][0]++, tokenData.refresh_token) ||
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[18][1]++, currentTokens.refreshToken),
        tokenType:
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[19][0]++, tokenData.token_type) ||
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[19][1]++, 'Bearer'),
        expiresAt: tokenData.expires_in ?
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[20][0]++, Date.now() + tokenData.expires_in * 1000) :
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[20][1]++, undefined),
        scopes: tokenData.scope ?
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[21][0]++, tokenData.scope.split(' ')) :
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[21][1]++, currentTokens.scopes),
        metadata: {
          ...currentTokens.metadata,
          refreshedAt: Date.now()
        }
      });
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[71]++;
      this.tokens.set(tokenKey, newTokens);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[72]++;
      this.emit('tokenRefresh', provider, userId, newTokens);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[73]++;
      return newTokens;
    } catch (error) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[74]++;
      console.error(`Failed to refresh tokens for ${provider}:${userId}:`, error);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[75]++;
      return null;
    }
  }
  /**
   * Revoke OAuth2 tokens
   */
  async revokeTokens(provider, userId) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[7]++;
    cov_2jz21e4ydh().s[76]++;
    try {
      const config =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[77]++, this.configs.get(provider));
      const tokenKey =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[78]++, this.getTokenKey(provider, userId));
      const tokens =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[79]++, this.tokens.get(tokenKey));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[80]++;
      if (tokens) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[22][0]++;
        cov_2jz21e4ydh().s[81]++;
        // Attempt to revoke token with provider (if supported)
        // This is provider-specific and may not be supported by all providers
        try {
          /* istanbul ignore next */
          cov_2jz21e4ydh().s[82]++;
          if (
          /* istanbul ignore next */
          (cov_2jz21e4ydh().b[24][0]++, config) &&
          /* istanbul ignore next */
          (cov_2jz21e4ydh().b[24][1]++, tokens.accessToken)) {
            /* istanbul ignore next */
            cov_2jz21e4ydh().b[23][0]++;
            // Basic revocation attempt - providers may have different endpoints
            const revokeUrl =
            /* istanbul ignore next */
            (cov_2jz21e4ydh().s[83]++, `${config.tokenUrl.replace('/token', '/revoke')}`);
            /* istanbul ignore next */
            cov_2jz21e4ydh().s[84]++;
            await fetch(revokeUrl, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                Authorization: `Bearer ${tokens.accessToken}`
              },
              body: `token=${tokens.accessToken}`
            });
          } else
          /* istanbul ignore next */
          {
            cov_2jz21e4ydh().b[23][1]++;
          }
        } catch {
          // Ignore revocation errors - we'll still remove locally
        }
        /* istanbul ignore next */
        cov_2jz21e4ydh().s[85]++;
        this.tokens.delete(tokenKey);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[22][1]++;
      }
      cov_2jz21e4ydh().s[86]++;
      return true;
    } catch (error) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[87]++;
      console.error(`Failed to revoke tokens for ${provider}:${userId}:`, error);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[88]++;
      return false;
    }
  }
  /**
   * Check if tokens are valid and not expired
   */
  areTokensValid(tokens, bufferSeconds =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().b[25][0]++, 300)) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[8]++;
    cov_2jz21e4ydh().s[89]++;
    if (!tokens.accessToken) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[26][0]++;
      cov_2jz21e4ydh().s[90]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[26][1]++;
    }
    cov_2jz21e4ydh().s[91]++;
    if (tokens.expiresAt) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[27][0]++;
      const now =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[92]++, Date.now());
      const bufferMs =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[93]++, bufferSeconds * 1000);
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[94]++;
      return tokens.expiresAt > now + bufferMs;
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[27][1]++;
    }
    // If no expiry time, assume valid
    cov_2jz21e4ydh().s[95]++;
    return true;
  }
  /**
   * Get all active sessions
   */
  getActiveSessions() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[9]++;
    const now =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[96]++, Date.now());
    const activeSessions =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[97]++, []);
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[98]++;
    for (const [sessionId, session] of this.sessions.entries()) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[99]++;
      if (session.expiresAt > now) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[28][0]++;
        cov_2jz21e4ydh().s[100]++;
        activeSessions.push(session);
      } else {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[28][1]++;
        cov_2jz21e4ydh().s[101]++;
        // Clean up expired session
        this.sessions.delete(sessionId);
      }
    }
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[102]++;
    return activeSessions;
  }
  /**
   * Clean up expired sessions and tokens
   */
  cleanup() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[10]++;
    const now =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[103]++, Date.now());
    // Clean up expired sessions
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[104]++;
    for (const [sessionId, session] of this.sessions.entries()) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[105]++;
      if (session.expiresAt <= now) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[29][0]++;
        cov_2jz21e4ydh().s[106]++;
        this.sessions.delete(sessionId);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[29][1]++;
      }
    }
    // Check for expiring tokens
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[107]++;
    for (const [tokenKey, tokens] of this.tokens.entries()) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[108]++;
      if (tokens.expiresAt) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[30][0]++;
        const timeToExpiry =
        /* istanbul ignore next */
        (cov_2jz21e4ydh().s[109]++, tokens.expiresAt - now);
        const [provider, userId] =
        /* istanbul ignore next */
        (cov_2jz21e4ydh().s[110]++, tokenKey.split(':'));
        /* istanbul ignore next */
        cov_2jz21e4ydh().s[111]++;
        if (timeToExpiry <= 0) {
          /* istanbul ignore next */
          cov_2jz21e4ydh().b[31][0]++;
          cov_2jz21e4ydh().s[112]++;
          // Token expired, remove it
          this.tokens.delete(tokenKey);
        } else {
          /* istanbul ignore next */
          cov_2jz21e4ydh().b[31][1]++;
          cov_2jz21e4ydh().s[113]++;
          if (timeToExpiry <= 300000) {
            /* istanbul ignore next */
            cov_2jz21e4ydh().b[32][0]++;
            cov_2jz21e4ydh().s[114]++;
            // 5 minutes
            // Token expiring soon, emit warning
            this.emit('tokenExpiring', provider, userId, Math.floor(timeToExpiry / 1000));
          } else
          /* istanbul ignore next */
          {
            cov_2jz21e4ydh().b[32][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[30][1]++;
      }
    }
  }
  /**
   * Exchange authorization code for tokens
   */
  async exchangeCodeForTokens(config, code, session) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[11]++;
    const params =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[115]++, new URLSearchParams({
      grant_type: 'authorization_code',
      code,
      redirect_uri: config.redirectUri,
      client_id: config.clientId,
      client_secret: config.clientSecret
    }));
    // Add PKCE code verifier if used
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[116]++;
    if (session.codeVerifier) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[33][0]++;
      cov_2jz21e4ydh().s[117]++;
      params.set('code_verifier', session.codeVerifier);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[33][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[118]++, await fetch(config.tokenUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        Accept: 'application/json'
      },
      body: params.toString()
    }));
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[119]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[34][0]++;
      const errorText =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[120]++, await response.text());
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[121]++;
      throw new Error(`Token exchange failed: ${response.status} ${response.statusText} - ${errorText}`);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[34][1]++;
    }
    const tokenData =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[122]++, await response.json());
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[123]++;
    if (tokenData.error) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[35][0]++;
      cov_2jz21e4ydh().s[124]++;
      throw new Error(`Token exchange error: ${
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[36][0]++, tokenData.error_description) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[36][1]++, tokenData.error)}`);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[35][1]++;
    }
    cov_2jz21e4ydh().s[125]++;
    return {
      accessToken: tokenData.access_token,
      refreshToken: tokenData.refresh_token,
      tokenType:
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[37][0]++, tokenData.token_type) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[37][1]++, 'Bearer'),
      expiresAt: tokenData.expires_in ?
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[38][0]++, Date.now() + tokenData.expires_in * 1000) :
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[38][1]++, undefined),
      scopes: tokenData.scope ?
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[39][0]++, tokenData.scope.split(' ')) :
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[39][1]++, config.scopes),
      metadata: {
        acquiredAt: Date.now()
      }
    };
  }
  /**
   * Get user information from OAuth2 provider
   */
  async getUserInfo(config, tokens) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[12]++;
    cov_2jz21e4ydh().s[126]++;
    if (!config.userInfoUrl) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[40][0]++;
      cov_2jz21e4ydh().s[127]++;
      // If no user info URL, create basic user info from token
      return {
        id: 'unknown',
        name: 'OAuth2 User'
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[40][1]++;
    }
    const response =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[128]++, await fetch(config.userInfoUrl, {
      headers: {
        Authorization: `${tokens.tokenType} ${tokens.accessToken}`,
        Accept: 'application/json'
      }
    }));
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[129]++;
    if (!response.ok) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[41][0]++;
      cov_2jz21e4ydh().s[130]++;
      throw new Error(`Failed to get user info: ${response.status} ${response.statusText}`);
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[41][1]++;
    }
    const userData =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[131]++, await response.json());
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[132]++;
    return {
      id:
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[42][0]++, userData.id) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[42][1]++, userData.sub) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[42][2]++, userData.user_id) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[42][3]++, 'unknown'),
      email: userData.email,
      name:
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[43][0]++, userData.name) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[43][1]++, userData.display_name) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[43][2]++, userData.username),
      avatar:
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[44][0]++, userData.avatar_url) ||
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[44][1]++, userData.picture),
      raw: userData
    };
  }
  /**
   * Find session by state parameter
   */
  findSessionByState(state) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[13]++;
    cov_2jz21e4ydh().s[133]++;
    for (const session of this.sessions.values()) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[134]++;
      if (session.state === state) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[45][0]++;
        cov_2jz21e4ydh().s[135]++;
        return session;
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[45][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[136]++;
    return null;
  }
  /**
   * Generate unique session ID
   */
  generateSessionId() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[14]++;
    cov_2jz21e4ydh().s[137]++;
    return `oauth2_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;
  }
  /**
   * Generate OAuth2 state parameter
   */
  generateState() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[15]++;
    cov_2jz21e4ydh().s[138]++;
    return crypto.randomBytes(32).toString('base64url');
  }
  /**
   * Generate PKCE code verifier
   */
  generateCodeVerifier() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[16]++;
    cov_2jz21e4ydh().s[139]++;
    return crypto.randomBytes(32).toString('base64url');
  }
  /**
   * Generate PKCE code challenge
   */
  generateCodeChallenge(verifier, method) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[17]++;
    cov_2jz21e4ydh().s[140]++;
    if (method === 'plain') {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[46][0]++;
      cov_2jz21e4ydh().s[141]++;
      return verifier;
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[46][1]++;
    }
    cov_2jz21e4ydh().s[142]++;
    return crypto.createHash('sha256').update(verifier).digest('base64url');
  }
  /**
   * Get token storage key
   */
  getTokenKey(provider, userId) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[18]++;
    cov_2jz21e4ydh().s[143]++;
    return `${provider}:${userId}`;
  }
  /**
   * Setup automatic token refresh timer
   */
  setupTokenRefreshTimer() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[19]++;
    cov_2jz21e4ydh().s[144]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_2jz21e4ydh().f[20]++;
      cov_2jz21e4ydh().s[145]++;
      this.cleanup();
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[146]++;
      this.autoRefreshTokens();
    }, 60000); // Check every minute
  }
  /**
   * Automatically refresh tokens that are about to expire
   */
  async autoRefreshTokens() {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[21]++;
    cov_2jz21e4ydh().s[147]++;
    for (const [tokenKey, tokens] of this.tokens.entries()) {
      const [provider, userId] =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[148]++, tokenKey.split(':'));
      const config =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[149]++, this.configs.get(provider));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[150]++;
      if (
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[48][0]++, config?.refreshSettings?.autoRefresh) &&
      /* istanbul ignore next */
      (cov_2jz21e4ydh().b[48][1]++, tokens.refreshToken)) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[47][0]++;
        const bufferSeconds =
        /* istanbul ignore next */
        (cov_2jz21e4ydh().s[151]++,
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[49][0]++, config.refreshSettings.refreshBuffer) ||
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[49][1]++, 300));
        /* istanbul ignore next */
        cov_2jz21e4ydh().s[152]++;
        if (!this.areTokensValid(tokens, bufferSeconds)) {
          /* istanbul ignore next */
          cov_2jz21e4ydh().b[50][0]++;
          cov_2jz21e4ydh().s[153]++;
          try {
            /* istanbul ignore next */
            cov_2jz21e4ydh().s[154]++;
            await this.refreshTokens(provider, userId);
          } catch (error) {
            /* istanbul ignore next */
            cov_2jz21e4ydh().s[155]++;
            console.error(`Auto-refresh failed for ${provider}:${userId}:`, error);
          }
        } else
        /* istanbul ignore next */
        {
          cov_2jz21e4ydh().b[50][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[47][1]++;
      }
    }
  }
}
/**
 * OAuth2 Authentication Provider
 *
 * Integrates OAuth2Handler with the authentication provider interface.
 */
export class OAuth2AuthProvider extends BaseAuthProvider {
  oauth2Handler;
  constructor(oauth2Handler) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[22]++;
    cov_2jz21e4ydh().s[156]++;
    super();
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[157]++;
    this.oauth2Handler = oauth2Handler;
  }
  async authenticate(context) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[23]++;
    cov_2jz21e4ydh().s[158]++;
    try {
      // Extract OAuth2 tokens from context
      const tokens =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[159]++, this.extractTokensFromContext(context));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[160]++;
      if (!tokens) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[51][0]++;
        cov_2jz21e4ydh().s[161]++;
        return {
          success: false,
          error: 'No OAuth2 tokens found in request context'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[51][1]++;
      }
      // Validate tokens
      cov_2jz21e4ydh().s[162]++;
      if (!this.oauth2Handler.areTokensValid(tokens)) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[52][0]++;
        cov_2jz21e4ydh().s[163]++;
        return {
          success: false,
          error: 'OAuth2 tokens are invalid or expired'
        };
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[52][1]++;
      }
      // Create authenticated user
      const user =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[164]++, this.createUserFromTokens(tokens, context));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[165]++;
      return {
        success: true,
        user,
        context: {
          authType: 'oauth2',
          tokenType: tokens.tokenType,
          scopes: tokens.scopes
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[166]++;
      return {
        success: false,
        error: `OAuth2 authentication failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[53][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2jz21e4ydh().b[53][1]++, String(error))}`
      };
    }
  }
  async refresh(context) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[24]++;
    cov_2jz21e4ydh().s[167]++;
    // OAuth2 refresh logic would be implemented here
    // For now, re-authenticate
    return this.authenticate(context);
  }
  /**
   * Extract OAuth2 tokens from request context
   */
  extractTokensFromContext(context) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[25]++;
    const headers =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[168]++,
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[54][0]++, context.headers) ||
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[54][1]++, {}));
    // Look for Bearer token in Authorization header
    const authHeader =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[169]++,
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[55][0]++, headers.authorization) ||
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[55][1]++, headers.Authorization));
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[170]++;
    if (authHeader?.startsWith('Bearer ')) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[56][0]++;
      const accessToken =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[171]++, authHeader.substring(7));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[172]++;
      return {
        accessToken,
        tokenType: 'Bearer',
        scopes: [] // Would need to be populated from stored token data
      };
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[56][1]++;
    }
    cov_2jz21e4ydh().s[173]++;
    return null;
  }
  /**
   * Create authenticated user from OAuth2 tokens
   */
  createUserFromTokens(tokens, _context) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().f[26]++;
    cov_2jz21e4ydh().s[174]++;
    return {
      id: `oauth2_${crypto.createHash('sha256').update(tokens.accessToken).digest('hex').substring(0, 16)}`,
      name: 'OAuth2 User',
      roles: ['oauth2-user'],
      permissions: this.createPermissions(['oauth2-user'])
    };
  }
}
/**
 * Create default OAuth2 handler with common provider configurations
 */
export function createOAuth2Handler() {
  /* istanbul ignore next */
  cov_2jz21e4ydh().f[27]++;
  const handler =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[175]++, new OAuth2Handler());
  // Add common OAuth2 providers (can be configured via environment variables)
  const providers =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[176]++, ['google', 'github', 'microsoft', 'discord']);
  /* istanbul ignore next */
  cov_2jz21e4ydh().s[177]++;
  for (const provider of providers) {
    const clientId =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[178]++, process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_ID`]);
    const clientSecret =
    /* istanbul ignore next */
    (cov_2jz21e4ydh().s[179]++, process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_SECRET`]);
    /* istanbul ignore next */
    cov_2jz21e4ydh().s[180]++;
    if (
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[58][0]++, clientId) &&
    /* istanbul ignore next */
    (cov_2jz21e4ydh().b[58][1]++, clientSecret)) {
      /* istanbul ignore next */
      cov_2jz21e4ydh().b[57][0]++;
      const config =
      /* istanbul ignore next */
      (cov_2jz21e4ydh().s[181]++, getProviderConfig(provider, clientId, clientSecret));
      /* istanbul ignore next */
      cov_2jz21e4ydh().s[182]++;
      if (config) {
        /* istanbul ignore next */
        cov_2jz21e4ydh().b[59][0]++;
        cov_2jz21e4ydh().s[183]++;
        handler.registerProvider(config);
      } else
      /* istanbul ignore next */
      {
        cov_2jz21e4ydh().b[59][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2jz21e4ydh().b[57][1]++;
    }
  }
  /* istanbul ignore next */
  cov_2jz21e4ydh().s[184]++;
  return handler;
}
/**
 * Get OAuth2 configuration for common providers
 */
function getProviderConfig(provider, clientId, clientSecret) {
  /* istanbul ignore next */
  cov_2jz21e4ydh().f[28]++;
  const baseUrl =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[185]++,
  /* istanbul ignore next */
  (cov_2jz21e4ydh().b[60][0]++, process.env.OAUTH2_REDIRECT_BASE_URL) ||
  /* istanbul ignore next */
  (cov_2jz21e4ydh().b[60][1]++, 'http://localhost:3000'));
  const configs =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[186]++, {
    google: {
      provider: 'google',
      authUrl: 'https://accounts.google.com/o/oauth2/v2/auth',
      tokenUrl: 'https://oauth2.googleapis.com/token',
      userInfoUrl: 'https://www.googleapis.com/oauth2/v2/userinfo',
      redirectUri: `${baseUrl}/auth/oauth2/callback/google`,
      scopes: ['openid', 'email', 'profile'],
      pkce: {
        enabled: true,
        challengeMethod: 'S256'
      },
      refreshSettings: {
        autoRefresh: true,
        refreshBuffer: 300
      }
    },
    github: {
      provider: 'github',
      authUrl: 'https://github.com/login/oauth/authorize',
      tokenUrl: 'https://github.com/login/oauth/access_token',
      userInfoUrl: 'https://api.github.com/user',
      redirectUri: `${baseUrl}/auth/oauth2/callback/github`,
      scopes: ['user:email'],
      refreshSettings: {
        autoRefresh: false,
        refreshBuffer: 300
      }
    },
    microsoft: {
      provider: 'microsoft',
      authUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',
      tokenUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',
      userInfoUrl: 'https://graph.microsoft.com/v1.0/me',
      redirectUri: `${baseUrl}/auth/oauth2/callback/microsoft`,
      scopes: ['openid', 'email', 'profile'],
      pkce: {
        enabled: true,
        challengeMethod: 'S256'
      },
      refreshSettings: {
        autoRefresh: true,
        refreshBuffer: 300
      }
    },
    discord: {
      provider: 'discord',
      authUrl: 'https://discord.com/api/oauth2/authorize',
      tokenUrl: 'https://discord.com/api/oauth2/token',
      userInfoUrl: 'https://discord.com/api/users/@me',
      redirectUri: `${baseUrl}/auth/oauth2/callback/discord`,
      scopes: ['identify', 'email'],
      refreshSettings: {
        autoRefresh: true,
        refreshBuffer: 300
      }
    }
  });
  const config =
  /* istanbul ignore next */
  (cov_2jz21e4ydh().s[187]++, configs[provider]);
  /* istanbul ignore next */
  cov_2jz21e4ydh().s[188]++;
  if (!config) {
    /* istanbul ignore next */
    cov_2jz21e4ydh().b[61][0]++;
    cov_2jz21e4ydh().s[189]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_2jz21e4ydh().b[61][1]++;
  }
  cov_2jz21e4ydh().s[190]++;
  return {
    ...config,
    clientId,
    clientSecret
  };
}
/**
 * Default OAuth2 handler instance
 */
export const defaultOAuth2Handler =
/* istanbul ignore next */
(cov_2jz21e4ydh().s[191]++, createOAuth2Handler());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,