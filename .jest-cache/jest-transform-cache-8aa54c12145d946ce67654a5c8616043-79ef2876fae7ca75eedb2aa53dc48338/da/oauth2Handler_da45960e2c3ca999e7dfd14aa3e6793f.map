{"version":3,"names":["cov_2jz21e4ydh","actualCoverage","crypto","EventEmitter","setInterval","BaseAuthProvider","OAuth2Handler","configs","s","Map","sessions","tokens","n8nClient","constructor","f","setupTokenRefreshTimer","setN8nClient","client","registerProvider","config","set","provider","generateAuthUrl","options","b","get","Error","sessionId","generateSessionId","state","generateState","session","createdAt","Date","now","expiresAt","metadata","pkce","enabled","codeVerifier","generateCodeVerifier","codeChallenge","generateCodeChallenge","challengeMethod","params","URLSearchParams","response_type","client_id","clientId","redirect_uri","redirectUri","scope","scopes","join","extraParams","url","authUrl","toString","handleCallback","callbackParams","error","result","success","error_description","errorDetails","code","description","uri","error_uri","emit","findSessionByState","exchangeCodeForTokens","userInfo","getUserInfo","tokenKey","getTokenKey","id","delete","errorMessage","message","getTokens","userId","refreshTokens","currentTokens","refreshToken","grant_type","refresh_token","client_secret","clientSecret","response","fetch","tokenUrl","method","headers","Accept","body","ok","status","statusText","tokenData","json","newTokens","accessToken","access_token","tokenType","token_type","expires_in","undefined","split","refreshedAt","console","revokeTokens","revokeUrl","replace","Authorization","areTokensValid","bufferSeconds","bufferMs","getActiveSessions","activeSessions","entries","push","cleanup","timeToExpiry","Math","floor","errorText","text","acquiredAt","userInfoUrl","name","userData","sub","user_id","email","display_name","username","avatar","avatar_url","picture","raw","values","randomBytes","verifier","createHash","update","digest","autoRefreshTokens","refreshSettings","autoRefresh","refreshBuffer","OAuth2AuthProvider","oauth2Handler","authenticate","context","extractTokensFromContext","user","createUserFromTokens","authType","String","refresh","authHeader","authorization","startsWith","substring","_context","roles","permissions","createPermissions","createOAuth2Handler","handler","providers","process","env","toUpperCase","getProviderConfig","baseUrl","OAUTH2_REDIRECT_BASE_URL","google","github","microsoft","discord","defaultOAuth2Handler"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/oauth2Handler.ts"],"sourcesContent":["/**\n * OAuth2 Handler for n8n MCP Server\n *\n * Provides OAuth2 authentication flows, token management, and callback handling\n * for enhanced security and integration with OAuth2-enabled services.\n */\n\n/* eslint-disable no-undef */\ndeclare const fetch: typeof globalThis.fetch;\n\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { setInterval } from 'timers';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { BaseAuthProvider, RequestContext, AuthResult, AuthenticatedUser } from './authProvider.js';\n\n/**\n * OAuth2 configuration for different providers\n */\nexport interface OAuth2Config {\n  /** OAuth2 provider name (e.g., 'google', 'github', 'microsoft') */\n  provider: string;\n\n  /** Client ID from OAuth2 provider */\n  clientId: string;\n\n  /** Client secret from OAuth2 provider */\n  clientSecret: string;\n\n  /** OAuth2 authorization endpoint URL */\n  authUrl: string;\n\n  /** OAuth2 token endpoint URL */\n  tokenUrl: string;\n\n  /** OAuth2 user info endpoint URL (optional) */\n  userInfoUrl?: string;\n\n  /** Redirect URI for OAuth2 callback */\n  redirectUri: string;\n\n  /** OAuth2 scopes to request */\n  scopes: string[];\n\n  /** Additional parameters for authorization request */\n  extraParams?: Record<string, string>;\n\n  /** Token refresh settings */\n  refreshSettings?: {\n    /** Whether to automatically refresh tokens */\n    autoRefresh: boolean;\n\n    /** Buffer time before expiry to refresh (seconds) */\n    refreshBuffer: number;\n  };\n\n  /** PKCE settings for enhanced security */\n  pkce?: {\n    /** Whether to use PKCE (Proof Key for Code Exchange) */\n    enabled: boolean;\n\n    /** Code challenge method */\n    challengeMethod: 'S256' | 'plain';\n  };\n}\n\n/**\n * OAuth2 token information\n */\nexport interface OAuth2Token {\n  /** Access token */\n  accessToken: string;\n\n  /** Refresh token (if available) */\n  refreshToken?: string;\n\n  /** Token type (usually 'Bearer') */\n  tokenType: string;\n\n  /** Token expiry timestamp */\n  expiresAt?: number;\n\n  /** OAuth2 scopes granted */\n  scopes: string[];\n\n  /** Additional token metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 authorization session\n */\nexport interface OAuth2Session {\n  /** Session ID */\n  sessionId: string;\n\n  /** OAuth2 provider */\n  provider: string;\n\n  /** Authorization state parameter */\n  state: string;\n\n  /** PKCE code verifier (if using PKCE) */\n  codeVerifier?: string;\n\n  /** PKCE code challenge (if using PKCE) */\n  codeChallenge?: string;\n\n  /** Session creation timestamp */\n  createdAt: number;\n\n  /** Session expiry timestamp */\n  expiresAt: number;\n\n  /** Additional session metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 callback result\n */\nexport interface OAuth2CallbackResult {\n  /** Whether the callback was successful */\n  success: boolean;\n\n  /** OAuth2 tokens (if successful) */\n  tokens?: OAuth2Token;\n\n  /** User information from OAuth2 provider */\n  userInfo?: OAuth2UserInfo;\n\n  /** Error message (if failed) */\n  error?: string;\n\n  /** Error details */\n  errorDetails?: {\n    code?: string;\n    description?: string;\n    uri?: string;\n  };\n}\n\n/**\n * User information from OAuth2 provider\n */\nexport interface OAuth2UserInfo {\n  /** User ID from provider */\n  id: string;\n\n  /** User email */\n  email?: string;\n\n  /** User display name */\n  name?: string;\n\n  /** User avatar URL */\n  avatar?: string;\n\n  /** Additional user data from provider */\n  raw?: Record<string, unknown>;\n}\n\n/**\n * OAuth2 authentication provider events\n */\nexport interface OAuth2Events {\n  /** Token refresh event */\n  tokenRefresh: (provider: string, userId: string, tokens: OAuth2Token) => void;\n\n  /** Token expiry warning */\n  tokenExpiring: (provider: string, userId: string, expiresIn: number) => void;\n\n  /** Authentication success */\n  authSuccess: (provider: string, userInfo: OAuth2UserInfo) => void;\n\n  /** Authentication failure */\n  authFailure: (provider: string, error: string) => void;\n}\n\n/**\n * OAuth2 Handler class\n *\n * Manages OAuth2 authentication flows, token storage, and callback processing.\n */\nexport class OAuth2Handler extends EventEmitter {\n  private configs = new Map<string, OAuth2Config>();\n  private sessions = new Map<string, OAuth2Session>();\n  private tokens = new Map<string, OAuth2Token>();\n  private n8nClient: N8nClient | null = null;\n\n  constructor() {\n    super();\n    this.setupTokenRefreshTimer();\n  }\n\n  /**\n   * Set n8n client for enhanced integration\n   */\n  setN8nClient(client: N8nClient): void {\n    this.n8nClient = client;\n  }\n\n  /**\n   * Register OAuth2 provider configuration\n   */\n  registerProvider(config: OAuth2Config): void {\n    this.configs.set(config.provider, config);\n  }\n\n  /**\n   * Generate OAuth2 authorization URL\n   */\n  generateAuthUrl(\n    provider: string,\n    options: {\n      sessionId?: string;\n      extraParams?: Record<string, string>;\n      metadata?: Record<string, unknown>;\n    } = {}\n  ): { url: string; session: OAuth2Session } {\n    const config = this.configs.get(provider);\n    if (!config) {\n      throw new Error(`OAuth2 provider '${provider}' not configured`);\n    }\n\n    // Generate session\n    const sessionId = options.sessionId || this.generateSessionId();\n    const state = this.generateState();\n    const session: OAuth2Session = {\n      sessionId,\n      provider,\n      state,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + 15 * 60 * 1000, // 15 minutes\n      metadata: options.metadata,\n    };\n\n    // Generate PKCE parameters if enabled\n    if (config.pkce?.enabled) {\n      const codeVerifier = this.generateCodeVerifier();\n      const codeChallenge = this.generateCodeChallenge(codeVerifier, config.pkce.challengeMethod);\n      session.codeVerifier = codeVerifier;\n      session.codeChallenge = codeChallenge;\n    }\n\n    this.sessions.set(sessionId, session);\n\n    // Build authorization URL\n    const params = new URLSearchParams({\n      response_type: 'code',\n      client_id: config.clientId,\n      redirect_uri: config.redirectUri,\n      scope: config.scopes.join(' '),\n      state,\n      ...config.extraParams,\n      ...options.extraParams,\n    });\n\n    // Add PKCE parameters\n    if (session.codeChallenge) {\n      params.set('code_challenge', session.codeChallenge);\n      params.set('code_challenge_method', config.pkce!.challengeMethod);\n    }\n\n    const url = `${config.authUrl}?${params.toString()}`;\n\n    return { url, session };\n  }\n\n  /**\n   * Handle OAuth2 callback\n   */\n  async handleCallback(\n    provider: string,\n    callbackParams: {\n      code?: string;\n      state?: string;\n      error?: string;\n      error_description?: string;\n      error_uri?: string;\n    }\n  ): Promise<OAuth2CallbackResult> {\n    try {\n      const config = this.configs.get(provider);\n      if (!config) {\n        throw new Error(`OAuth2 provider '${provider}' not configured`);\n      }\n\n      // Handle error response\n      if (callbackParams.error) {\n        const result: OAuth2CallbackResult = {\n          success: false,\n          error: callbackParams.error_description || callbackParams.error,\n          errorDetails: {\n            code: callbackParams.error,\n            description: callbackParams.error_description,\n            uri: callbackParams.error_uri,\n          },\n        };\n        this.emit('authFailure', provider, result.error!);\n        return result;\n      }\n\n      // Validate required parameters\n      if (!callbackParams.code || !callbackParams.state) {\n        throw new Error('Missing required callback parameters (code or state)');\n      }\n\n      // Find and validate session\n      const session = this.findSessionByState(callbackParams.state);\n      if (!session) {\n        throw new Error('Invalid or expired OAuth2 state parameter');\n      }\n\n      if (session.provider !== provider) {\n        throw new Error('OAuth2 provider mismatch in callback');\n      }\n\n      if (session.expiresAt < Date.now()) {\n        throw new Error('OAuth2 session has expired');\n      }\n\n      // Exchange code for tokens\n      const tokens = await this.exchangeCodeForTokens(config, callbackParams.code, session);\n\n      // Get user information\n      const userInfo = await this.getUserInfo(config, tokens);\n\n      // Store tokens\n      const tokenKey = this.getTokenKey(provider, userInfo.id);\n      this.tokens.set(tokenKey, tokens);\n\n      // Clean up session\n      this.sessions.delete(session.sessionId);\n\n      const result: OAuth2CallbackResult = {\n        success: true,\n        tokens,\n        userInfo,\n      };\n\n      this.emit('authSuccess', provider, userInfo);\n      return result;\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown OAuth2 callback error';\n      const result: OAuth2CallbackResult = {\n        success: false,\n        error: errorMessage,\n      };\n      this.emit('authFailure', provider, errorMessage);\n      return result;\n    }\n  }\n\n  /**\n   * Get stored tokens for user\n   */\n  getTokens(provider: string, userId: string): OAuth2Token | null {\n    const tokenKey = this.getTokenKey(provider, userId);\n    return this.tokens.get(tokenKey) || null;\n  }\n\n  /**\n   * Refresh OAuth2 tokens\n   */\n  async refreshTokens(provider: string, userId: string): Promise<OAuth2Token | null> {\n    try {\n      const config = this.configs.get(provider);\n      if (!config) {\n        throw new Error(`OAuth2 provider '${provider}' not configured`);\n      }\n\n      const tokenKey = this.getTokenKey(provider, userId);\n      const currentTokens = this.tokens.get(tokenKey);\n      if (!currentTokens?.refreshToken) {\n        throw new Error('No refresh token available');\n      }\n\n      const params = new URLSearchParams({\n        grant_type: 'refresh_token',\n        refresh_token: currentTokens.refreshToken,\n        client_id: config.clientId,\n        client_secret: config.clientSecret,\n      });\n\n      const response = await fetch(config.tokenUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json',\n        },\n        body: params.toString(),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.status} ${response.statusText}`);\n      }\n\n      const tokenData = await response.json();\n      const newTokens: OAuth2Token = {\n        accessToken: tokenData.access_token,\n        refreshToken: tokenData.refresh_token || currentTokens.refreshToken,\n        tokenType: tokenData.token_type || 'Bearer',\n        expiresAt: tokenData.expires_in ? Date.now() + tokenData.expires_in * 1000 : undefined,\n        scopes: tokenData.scope ? tokenData.scope.split(' ') : currentTokens.scopes,\n        metadata: { ...currentTokens.metadata, refreshedAt: Date.now() },\n      };\n\n      this.tokens.set(tokenKey, newTokens);\n      this.emit('tokenRefresh', provider, userId, newTokens);\n\n      return newTokens;\n    } catch (error) {\n      console.error(`Failed to refresh tokens for ${provider}:${userId}:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Revoke OAuth2 tokens\n   */\n  async revokeTokens(provider: string, userId: string): Promise<boolean> {\n    try {\n      const config = this.configs.get(provider);\n      const tokenKey = this.getTokenKey(provider, userId);\n      const tokens = this.tokens.get(tokenKey);\n\n      if (tokens) {\n        // Attempt to revoke token with provider (if supported)\n        // This is provider-specific and may not be supported by all providers\n        try {\n          if (config && tokens.accessToken) {\n            // Basic revocation attempt - providers may have different endpoints\n            const revokeUrl = `${config.tokenUrl.replace('/token', '/revoke')}`;\n            await fetch(revokeUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                Authorization: `Bearer ${tokens.accessToken}`,\n              },\n              body: `token=${tokens.accessToken}`,\n            });\n          }\n        } catch {\n          // Ignore revocation errors - we'll still remove locally\n        }\n\n        this.tokens.delete(tokenKey);\n      }\n\n      return true;\n    } catch (error) {\n      console.error(`Failed to revoke tokens for ${provider}:${userId}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if tokens are valid and not expired\n   */\n  areTokensValid(tokens: OAuth2Token, bufferSeconds: number = 300): boolean {\n    if (!tokens.accessToken) {\n      return false;\n    }\n\n    if (tokens.expiresAt) {\n      const now = Date.now();\n      const bufferMs = bufferSeconds * 1000;\n      return tokens.expiresAt > now + bufferMs;\n    }\n\n    // If no expiry time, assume valid\n    return true;\n  }\n\n  /**\n   * Get all active sessions\n   */\n  getActiveSessions(): OAuth2Session[] {\n    const now = Date.now();\n    const activeSessions: OAuth2Session[] = [];\n\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.expiresAt > now) {\n        activeSessions.push(session);\n      } else {\n        // Clean up expired session\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    return activeSessions;\n  }\n\n  /**\n   * Clean up expired sessions and tokens\n   */\n  cleanup(): void {\n    const now = Date.now();\n\n    // Clean up expired sessions\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.expiresAt <= now) {\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    // Check for expiring tokens\n    for (const [tokenKey, tokens] of this.tokens.entries()) {\n      if (tokens.expiresAt) {\n        const timeToExpiry = tokens.expiresAt - now;\n        const [provider, userId] = tokenKey.split(':');\n\n        if (timeToExpiry <= 0) {\n          // Token expired, remove it\n          this.tokens.delete(tokenKey);\n        } else if (timeToExpiry <= 300000) {\n          // 5 minutes\n          // Token expiring soon, emit warning\n          this.emit('tokenExpiring', provider, userId, Math.floor(timeToExpiry / 1000));\n        }\n      }\n    }\n  }\n\n  /**\n   * Exchange authorization code for tokens\n   */\n  private async exchangeCodeForTokens(\n    config: OAuth2Config,\n    code: string,\n    session: OAuth2Session\n  ): Promise<OAuth2Token> {\n    const params = new URLSearchParams({\n      grant_type: 'authorization_code',\n      code,\n      redirect_uri: config.redirectUri,\n      client_id: config.clientId,\n      client_secret: config.clientSecret,\n    });\n\n    // Add PKCE code verifier if used\n    if (session.codeVerifier) {\n      params.set('code_verifier', session.codeVerifier);\n    }\n\n    const response = await fetch(config.tokenUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Accept: 'application/json',\n      },\n      body: params.toString(),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(\n        `Token exchange failed: ${response.status} ${response.statusText} - ${errorText}`\n      );\n    }\n\n    const tokenData = await response.json();\n\n    if (tokenData.error) {\n      throw new Error(`Token exchange error: ${tokenData.error_description || tokenData.error}`);\n    }\n\n    return {\n      accessToken: tokenData.access_token,\n      refreshToken: tokenData.refresh_token,\n      tokenType: tokenData.token_type || 'Bearer',\n      expiresAt: tokenData.expires_in ? Date.now() + tokenData.expires_in * 1000 : undefined,\n      scopes: tokenData.scope ? tokenData.scope.split(' ') : config.scopes,\n      metadata: { acquiredAt: Date.now() },\n    };\n  }\n\n  /**\n   * Get user information from OAuth2 provider\n   */\n  private async getUserInfo(config: OAuth2Config, tokens: OAuth2Token): Promise<OAuth2UserInfo> {\n    if (!config.userInfoUrl) {\n      // If no user info URL, create basic user info from token\n      return {\n        id: 'unknown',\n        name: 'OAuth2 User',\n      };\n    }\n\n    const response = await fetch(config.userInfoUrl, {\n      headers: {\n        Authorization: `${tokens.tokenType} ${tokens.accessToken}`,\n        Accept: 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to get user info: ${response.status} ${response.statusText}`);\n    }\n\n    const userData = await response.json();\n\n    return {\n      id: userData.id || userData.sub || userData.user_id || 'unknown',\n      email: userData.email,\n      name: userData.name || userData.display_name || userData.username,\n      avatar: userData.avatar_url || userData.picture,\n      raw: userData,\n    };\n  }\n\n  /**\n   * Find session by state parameter\n   */\n  private findSessionByState(state: string): OAuth2Session | null {\n    for (const session of this.sessions.values()) {\n      if (session.state === state) {\n        return session;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Generate unique session ID\n   */\n  private generateSessionId(): string {\n    return `oauth2_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate OAuth2 state parameter\n   */\n  private generateState(): string {\n    return crypto.randomBytes(32).toString('base64url');\n  }\n\n  /**\n   * Generate PKCE code verifier\n   */\n  private generateCodeVerifier(): string {\n    return crypto.randomBytes(32).toString('base64url');\n  }\n\n  /**\n   * Generate PKCE code challenge\n   */\n  private generateCodeChallenge(verifier: string, method: 'S256' | 'plain'): string {\n    if (method === 'plain') {\n      return verifier;\n    }\n\n    return crypto.createHash('sha256').update(verifier).digest('base64url');\n  }\n\n  /**\n   * Get token storage key\n   */\n  private getTokenKey(provider: string, userId: string): string {\n    return `${provider}:${userId}`;\n  }\n\n  /**\n   * Setup automatic token refresh timer\n   */\n  private setupTokenRefreshTimer(): void {\n    setInterval(() => {\n      this.cleanup();\n      this.autoRefreshTokens();\n    }, 60000); // Check every minute\n  }\n\n  /**\n   * Automatically refresh tokens that are about to expire\n   */\n  private async autoRefreshTokens(): Promise<void> {\n    for (const [tokenKey, tokens] of this.tokens.entries()) {\n      const [provider, userId] = tokenKey.split(':');\n      const config = this.configs.get(provider);\n\n      if (config?.refreshSettings?.autoRefresh && tokens.refreshToken) {\n        const bufferSeconds = config.refreshSettings.refreshBuffer || 300;\n\n        if (!this.areTokensValid(tokens, bufferSeconds)) {\n          try {\n            await this.refreshTokens(provider, userId);\n          } catch (error) {\n            console.error(`Auto-refresh failed for ${provider}:${userId}:`, error);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * OAuth2 Authentication Provider\n *\n * Integrates OAuth2Handler with the authentication provider interface.\n */\nexport class OAuth2AuthProvider extends BaseAuthProvider {\n  private oauth2Handler: OAuth2Handler;\n\n  constructor(oauth2Handler: OAuth2Handler) {\n    super();\n    this.oauth2Handler = oauth2Handler;\n  }\n\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    try {\n      // Extract OAuth2 tokens from context\n      const tokens = this.extractTokensFromContext(context);\n      if (!tokens) {\n        return {\n          success: false,\n          error: 'No OAuth2 tokens found in request context',\n        };\n      }\n\n      // Validate tokens\n      if (!this.oauth2Handler.areTokensValid(tokens)) {\n        return {\n          success: false,\n          error: 'OAuth2 tokens are invalid or expired',\n        };\n      }\n\n      // Create authenticated user\n      const user = this.createUserFromTokens(tokens, context);\n\n      return {\n        success: true,\n        user,\n        context: {\n          authType: 'oauth2',\n          tokenType: tokens.tokenType,\n          scopes: tokens.scopes,\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `OAuth2 authentication failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    // OAuth2 refresh logic would be implemented here\n    // For now, re-authenticate\n    return this.authenticate(context);\n  }\n\n  /**\n   * Extract OAuth2 tokens from request context\n   */\n  private extractTokensFromContext(context: RequestContext): OAuth2Token | null {\n    const headers = context.headers || {};\n\n    // Look for Bearer token in Authorization header\n    const authHeader = headers.authorization || headers.Authorization;\n    if (authHeader?.startsWith('Bearer ')) {\n      const accessToken = authHeader.substring(7);\n      return {\n        accessToken,\n        tokenType: 'Bearer',\n        scopes: [], // Would need to be populated from stored token data\n      };\n    }\n\n    return null;\n  }\n\n  /**\n   * Create authenticated user from OAuth2 tokens\n   */\n  private createUserFromTokens(tokens: OAuth2Token, _context: RequestContext): AuthenticatedUser {\n    return {\n      id: `oauth2_${crypto.createHash('sha256').update(tokens.accessToken).digest('hex').substring(0, 16)}`,\n      name: 'OAuth2 User',\n      roles: ['oauth2-user'],\n      permissions: this.createPermissions(['oauth2-user']),\n    };\n  }\n}\n\n/**\n * Create default OAuth2 handler with common provider configurations\n */\nexport function createOAuth2Handler(): OAuth2Handler {\n  const handler = new OAuth2Handler();\n\n  // Add common OAuth2 providers (can be configured via environment variables)\n  const providers = ['google', 'github', 'microsoft', 'discord'];\n\n  for (const provider of providers) {\n    const clientId = process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_ID`];\n    const clientSecret = process.env[`OAUTH2_${provider.toUpperCase()}_CLIENT_SECRET`];\n\n    if (clientId && clientSecret) {\n      const config = getProviderConfig(provider, clientId, clientSecret);\n      if (config) {\n        handler.registerProvider(config);\n      }\n    }\n  }\n\n  return handler;\n}\n\n/**\n * Get OAuth2 configuration for common providers\n */\nfunction getProviderConfig(\n  provider: string,\n  clientId: string,\n  clientSecret: string\n): OAuth2Config | null {\n  const baseUrl = process.env.OAUTH2_REDIRECT_BASE_URL || 'http://localhost:3000';\n\n  const configs: Record<string, Omit<OAuth2Config, 'clientId' | 'clientSecret'>> = {\n    google: {\n      provider: 'google',\n      authUrl: 'https://accounts.google.com/o/oauth2/v2/auth',\n      tokenUrl: 'https://oauth2.googleapis.com/token',\n      userInfoUrl: 'https://www.googleapis.com/oauth2/v2/userinfo',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/google`,\n      scopes: ['openid', 'email', 'profile'],\n      pkce: { enabled: true, challengeMethod: 'S256' },\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n    github: {\n      provider: 'github',\n      authUrl: 'https://github.com/login/oauth/authorize',\n      tokenUrl: 'https://github.com/login/oauth/access_token',\n      userInfoUrl: 'https://api.github.com/user',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/github`,\n      scopes: ['user:email'],\n      refreshSettings: { autoRefresh: false, refreshBuffer: 300 },\n    },\n    microsoft: {\n      provider: 'microsoft',\n      authUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n      tokenUrl: 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n      userInfoUrl: 'https://graph.microsoft.com/v1.0/me',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/microsoft`,\n      scopes: ['openid', 'email', 'profile'],\n      pkce: { enabled: true, challengeMethod: 'S256' },\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n    discord: {\n      provider: 'discord',\n      authUrl: 'https://discord.com/api/oauth2/authorize',\n      tokenUrl: 'https://discord.com/api/oauth2/token',\n      userInfoUrl: 'https://discord.com/api/users/@me',\n      redirectUri: `${baseUrl}/auth/oauth2/callback/discord`,\n      scopes: ['identify', 'email'],\n      refreshSettings: { autoRefresh: true, refreshBuffer: 300 },\n    },\n  };\n\n  const config = configs[provider];\n  if (!config) {\n    return null;\n  }\n\n  return {\n    ...config,\n    clientId,\n    clientSecret,\n  };\n}\n\n/**\n * Default OAuth2 handler instance\n */\nexport const defaultOAuth2Handler = createOAuth2Handler();\n"],"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","ignoreList":[]}