{"version":3,"names":["cov_1huohd1wyi","actualCoverage","z","UserError","CredentialIdSchema","s","object","credentialId","string","min","CredentialTypeSchema","credentialType","ListCredentialsSchema","limit","number","max","optional","cursor","CreateCredentialSchema","name","type","data","record","unknown","refine","f","Object","keys","length","message","projectId","createCredentialTools","getClient","server","addTool","description","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","client","b","options","response","getCredentials","result","forEach","credential","index","id","homeProject","sharedWith","scopes","join","createdAt","Date","toLocaleDateString","updatedAt","nextCursor","error","Error","getCredential","share","user","firstName","lastName","email","role","nodesAccess","access","nodeType","date","toLocaleString","credentialData","createCredential","deleteCredential","schema","getCredentialSchema","JSON","stringify"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nCredential, CreateCredentialRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst CredentialIdSchema = z.object({\n  credentialId: z.string().min(1, 'Credential ID is required'),\n});\n\nconst CredentialTypeSchema = z.object({\n  credentialType: z.string().min(1, 'Credential type is required'),\n});\n\nconst ListCredentialsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateCredentialSchema = z.object({\n  name: z.string().min(1, 'Credential name is required'),\n  type: z.string().min(1, 'Credential type is required'),\n  data: z.record(z.unknown()).refine(data => Object.keys(data).length > 0, {\n    message: 'Credential data is required',\n  }),\n  projectId: z.string().optional(),\n});\n\n// Tool registration function\nexport function createCredentialTools(getClient: () => N8nClient | null, server: any) {\n  // List credentials tool\n  server.addTool({\n    name: 'list-credentials',\n    description:\n      'List all credentials in the n8n instance with pagination support. Sensitive data is not included',\n    parameters: ListCredentialsSchema,\n    annotations: {\n      title: 'List n8n Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListCredentialsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getCredentials(options);\n\n        if (response.data.length === 0) {\n          return 'No credentials found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} credential(s):\\n\\n`;\n\n        response.data.forEach((credential: N8nCredential, index: number) => {\n          result += `${index + 1}. **${credential.name}**\\n`;\n          result += `   - ID: ${credential.id}\\n`;\n          result += `   - Type: ${credential.type}\\n`;\n\n          if (credential.homeProject) {\n            result += `   - Project: ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n          }\n\n          if (credential.sharedWith && credential.sharedWith.length > 0) {\n            result += `   - Shared with: ${credential.sharedWith.length} user(s)\\n`;\n          }\n\n          if (credential.scopes && credential.scopes.length > 0) {\n            result += `   - Scopes: ${credential.scopes.join(', ')}\\n`;\n          }\n\n          if (credential.createdAt) {\n            result += `   - Created: ${new Date(credential.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (credential.updatedAt) {\n            result += `   - Updated: ${new Date(credential.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\nðŸ“„ Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list credentials: ${error.message}`);\n        }\n        throw new UserError('Failed to list credentials with unknown error');\n      }\n    },\n  });\n\n  // Get credential tool\n  server.addTool({\n    name: 'get-credential',\n    description:\n      'Get detailed information about a specific credential by ID. Sensitive data is not included for security',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Get Credential Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credential = await client.getCredential(args.credentialId);\n\n        let result = `# Credential: ${credential.name}\\n\\n`;\n        result += `**ID:** ${credential.id}\\n`;\n        result += `**Name:** ${credential.name}\\n`;\n        result += `**Type:** ${credential.type}\\n`;\n\n        if (credential.homeProject) {\n          result += `**Project:** ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n        }\n\n        if (credential.sharedWith && credential.sharedWith.length > 0) {\n          result += `\\n## Shared With:\\n`;\n          credential.sharedWith.forEach((share, index) => {\n            result += `${index + 1}. ${share.user.firstName} ${share.user.lastName} (${share.user.email}) - Role: ${share.role}\\n`;\n          });\n        }\n\n        if (credential.nodesAccess && credential.nodesAccess.length > 0) {\n          result += `\\n## Node Access:\\n`;\n          credential.nodesAccess.forEach((access, index) => {\n            result += `${index + 1}. Node Type: ${access.nodeType}\\n`;\n            if (access.user) {\n              result += `   - User: ${access.user}\\n`;\n            }\n            if (access.date) {\n              result += `   - Date: ${new Date(access.date).toLocaleString()}\\n`;\n            }\n          });\n        }\n\n        if (credential.scopes && credential.scopes.length > 0) {\n          result += `\\n**Scopes:** ${credential.scopes.join(', ')}\\n`;\n        }\n\n        if (credential.createdAt) {\n          result += `**Created:** ${new Date(credential.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (credential.updatedAt) {\n          result += `**Updated:** ${new Date(credential.updatedAt).toLocaleString()}\\n`;\n        }\n\n        result += `\\n**Note:** Sensitive credential data is not displayed for security purposes.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential with unknown error');\n      }\n    },\n  });\n\n  // Create credential tool\n  server.addTool({\n    name: 'create-credential',\n    description: 'Create a new credential in n8n with the specified type and configuration data',\n    parameters: CreateCredentialSchema,\n    annotations: {\n      title: 'Create New Credential',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateCredentialSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credentialData: CreateCredentialRequest = {\n          name: args.name,\n          type: args.type,\n          data: args.data as Record<string, unknown>,\n          projectId: args.projectId,\n        };\n\n        const credential = await client.createCredential(credentialData);\n\n        let result = `âœ… Successfully created credential \"${credential.name}\" with ID: ${credential.id}\\n`;\n        result += `Type: ${credential.type}`;\n\n        if (credential.homeProject) {\n          result += `\\nProject: ${credential.homeProject.name}`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create credential: ${error.message}`);\n        }\n        throw new UserError('Failed to create credential with unknown error');\n      }\n    },\n  });\n\n  // Delete credential tool\n  server.addTool({\n    name: 'delete-credential',\n    description:\n      'Delete a credential from n8n permanently. WARNING: This action cannot be undone and may break workflows using this credential',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Delete Credential',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteCredential(args.credentialId);\n        return `âœ… Successfully deleted credential with ID: ${args.credentialId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete credential: ${error.message}`);\n        }\n        throw new UserError('Failed to delete credential with unknown error');\n      }\n    },\n  });\n\n  // Get credential schema tool\n  server.addTool({\n    name: 'get-credential-schema',\n    description:\n      'Get the schema definition for a specific credential type to understand required fields',\n    parameters: CredentialTypeSchema,\n    annotations: {\n      title: 'Get Credential Schema',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(args.credentialType);\n\n        let result = `# Credential Schema: ${args.credentialType}\\n\\n`;\n        result += `**Schema definition for credential type \"${args.credentialType}\":**\\n\\n`;\n        result += '```json\\n';\n        result += JSON.stringify(schema, null, 2);\n        result += '\\n```\\n';\n\n        result += `\\nUse this schema to understand the required fields when creating credentials of type \"${args.credentialType}\".`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential schema: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential schema with unknown error');\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}