ebd44482240fd9d534d2efd09dd83756
/* istanbul ignore next */
function cov_11rqno7mlg() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/data-management.ts";
  var hash = "72bd5dcbe9bf57cd98e76ba307b6993d4d57c78f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/data-management.ts",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "1": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "2": {
        start: {
          line: 18,
          column: 25
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "3": {
        start: {
          line: 21,
          column: 23
        },
        end: {
          line: 33,
          column: 2
        }
      },
      "4": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "5": {
        start: {
          line: 37,
          column: 31
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "6": {
        start: {
          line: 40,
          column: 26
        },
        end: {
          line: 43,
          column: 2
        }
      },
      "7": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 46,
          column: 2
        }
      },
      "8": {
        start: {
          line: 47,
          column: 29
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "9": {
        start: {
          line: 56,
          column: 18
        },
        end: {
          line: 56,
          column: 22
        }
      },
      "10": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 79,
          column: 1
        }
      },
      "11": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 77,
          column: 5
        }
      },
      "12": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "13": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 23
        }
      },
      "14": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 117,
          column: 7
        }
      },
      "15": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "16": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 96,
          column: 48
        }
      },
      "17": {
        start: {
          line: 97,
          column: 31
        },
        end: {
          line: 97,
          column: 61
        }
      },
      "18": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 108,
          column: 17
        }
      },
      "19": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 104,
          column: 115
        }
      },
      "20": {
        start: {
          line: 107,
          column: 20
        },
        end: {
          line: 107,
          column: 56
        }
      },
      "21": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 113,
          column: 17
        }
      },
      "22": {
        start: {
          line: 112,
          column: 20
        },
        end: {
          line: 112,
          column: 32
        }
      },
      "23": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 122
        }
      },
      "24": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 155,
          column: 7
        }
      },
      "25": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "26": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 48
        }
      },
      "27": {
        start: {
          line: 133,
          column: 31
        },
        end: {
          line: 133,
          column: 70
        }
      },
      "28": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "29": {
        start: {
          line: 135,
          column: 20
        },
        end: {
          line: 142,
          column: 83
        }
      },
      "30": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 56
        }
      },
      "31": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "32": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 32
        }
      },
      "33": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 124
        }
      },
      "34": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 189,
          column: 7
        }
      },
      "35": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "36": {
        start: {
          line: 170,
          column: 32
        },
        end: {
          line: 170,
          column: 48
        }
      },
      "37": {
        start: {
          line: 171,
          column: 31
        },
        end: {
          line: 171,
          column: 68
        }
      },
      "38": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 180,
          column: 17
        }
      },
      "39": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 176,
          column: 79
        }
      },
      "40": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 56
        }
      },
      "41": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "42": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 32
        }
      },
      "43": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 122
        }
      },
      "44": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 242,
          column: 7
        }
      },
      "45": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 240,
          column: 13
        }
      },
      "46": {
        start: {
          line: 204,
          column: 32
        },
        end: {
          line: 204,
          column: 48
        }
      },
      "47": {
        start: {
          line: 205,
          column: 30
        },
        end: {
          line: 205,
          column: 59
        }
      },
      "48": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 208,
          column: 17
        }
      },
      "49": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 77
        }
      },
      "50": {
        start: {
          line: 209,
          column: 29
        },
        end: {
          line: 209,
          column: 71
        }
      },
      "51": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 226,
          column: 19
        }
      },
      "52": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 69
        }
      },
      "53": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 58
        }
      },
      "54": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 66
        }
      },
      "55": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 82
        }
      },
      "56": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 215,
          column: 99
        }
      },
      "57": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "58": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 76
        }
      },
      "59": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "60": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 78
        }
      },
      "61": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 224,
          column: 21
        }
      },
      "62": {
        start: {
          line: 223,
          column: 24
        },
        end: {
          line: 223,
          column: 68
        }
      },
      "63": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 35
        }
      },
      "64": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 235,
          column: 17
        }
      },
      "65": {
        start: {
          line: 229,
          column: 35
        },
        end: {
          line: 229,
          column: 51
        }
      },
      "66": {
        start: {
          line: 230,
          column: 36
        },
        end: {
          line: 230,
          column: 48
        }
      },
      "67": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 91
        }
      },
      "68": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 234,
          column: 21
        }
      },
      "69": {
        start: {
          line: 233,
          column: 24
        },
        end: {
          line: 233,
          column: 85
        }
      },
      "70": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 30
        }
      },
      "71": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 121
        }
      },
      "72": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 289,
          column: 7
        }
      },
      "73": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "74": {
        start: {
          line: 257,
          column: 32
        },
        end: {
          line: 257,
          column: 48
        }
      },
      "75": {
        start: {
          line: 258,
          column: 33
        },
        end: {
          line: 258,
          column: 75
        }
      },
      "76": {
        start: {
          line: 259,
          column: 16
        },
        end: {
          line: 261,
          column: 17
        }
      },
      "77": {
        start: {
          line: 260,
          column: 20
        },
        end: {
          line: 260,
          column: 81
        }
      },
      "78": {
        start: {
          line: 262,
          column: 29
        },
        end: {
          line: 262,
          column: 55
        }
      },
      "79": {
        start: {
          line: 263,
          column: 16
        },
        end: {
          line: 263,
          column: 68
        }
      },
      "80": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 60
        }
      },
      "81": {
        start: {
          line: 265,
          column: 16
        },
        end: {
          line: 265,
          column: 68
        }
      },
      "82": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 266,
          column: 84
        }
      },
      "83": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 96
        }
      },
      "84": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 270,
          column: 17
        }
      },
      "85": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 76
        }
      },
      "86": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 273,
          column: 17
        }
      },
      "87": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 78
        }
      },
      "88": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 276,
          column: 17
        }
      },
      "89": {
        start: {
          line: 275,
          column: 20
        },
        end: {
          line: 275,
          column: 68
        }
      },
      "90": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 279,
          column: 17
        }
      },
      "91": {
        start: {
          line: 278,
          column: 20
        },
        end: {
          line: 278,
          column: 75
        }
      },
      "92": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 280,
          column: 30
        }
      },
      "93": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 285,
          column: 17
        }
      },
      "94": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 32
        }
      },
      "95": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 128
        }
      },
      "96": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 334,
          column: 7
        }
      },
      "97": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 332,
          column: 13
        }
      },
      "98": {
        start: {
          line: 304,
          column: 32
        },
        end: {
          line: 304,
          column: 48
        }
      },
      "99": {
        start: {
          line: 305,
          column: 33
        },
        end: {
          line: 305,
          column: 87
        }
      },
      "100": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "101": {
        start: {
          line: 307,
          column: 20
        },
        end: {
          line: 307,
          column: 76
        }
      },
      "102": {
        start: {
          line: 309,
          column: 29
        },
        end: {
          line: 309,
          column: 64
        }
      },
      "103": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 310,
          column: 72
        }
      },
      "104": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 71
        }
      },
      "105": {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 86
        }
      },
      "106": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 103
        }
      },
      "107": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 41
        }
      },
      "108": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 327,
          column: 19
        }
      },
      "109": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 82
        }
      },
      "110": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 78
        }
      },
      "111": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 62
        }
      },
      "112": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 319,
          column: 95
        }
      },
      "113": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 322,
          column: 21
        }
      },
      "114": {
        start: {
          line: 321,
          column: 24
        },
        end: {
          line: 321,
          column: 74
        }
      },
      "115": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 325,
          column: 21
        }
      },
      "116": {
        start: {
          line: 324,
          column: 24
        },
        end: {
          line: 324,
          column: 64
        }
      },
      "117": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 326,
          column: 35
        }
      },
      "118": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 30
        }
      },
      "119": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 331,
          column: 129
        }
      },
      "120": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 390,
          column: 7
        }
      },
      "121": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "122": {
        start: {
          line: 349,
          column: 32
        },
        end: {
          line: 349,
          column: 48
        }
      },
      "123": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "124": {
        start: {
          line: 352,
          column: 37
        },
        end: {
          line: 352,
          column: 62
        }
      },
      "125": {
        start: {
          line: 353,
          column: 40
        },
        end: {
          line: 353,
          column: 50
        }
      },
      "126": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 92
        }
      },
      "127": {
        start: {
          line: 355,
          column: 42
        },
        end: {
          line: 355,
          column: 106
        }
      },
      "128": {
        start: {
          line: 355,
          column: 66
        },
        end: {
          line: 355,
          column: 105
        }
      },
      "129": {
        start: {
          line: 356,
          column: 38
        },
        end: {
          line: 356,
          column: 97
        }
      },
      "130": {
        start: {
          line: 356,
          column: 74
        },
        end: {
          line: 356,
          column: 93
        }
      },
      "131": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 359,
          column: 21
        }
      },
      "132": {
        start: {
          line: 358,
          column: 24
        },
        end: {
          line: 358,
          column: 131
        }
      },
      "133": {
        start: {
          line: 360,
          column: 33
        },
        end: {
          line: 360,
          column: 61
        }
      },
      "134": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 361,
          column: 111
        }
      },
      "135": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 77
        }
      },
      "136": {
        start: {
          line: 363,
          column: 20
        },
        end: {
          line: 363,
          column: 84
        }
      },
      "137": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 59
        }
      },
      "138": {
        start: {
          line: 365,
          column: 20
        },
        end: {
          line: 367,
          column: 23
        }
      },
      "139": {
        start: {
          line: 366,
          column: 24
        },
        end: {
          line: 366,
          column: 156
        }
      },
      "140": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 370,
          column: 21
        }
      },
      "141": {
        start: {
          line: 369,
          column: 24
        },
        end: {
          line: 369,
          column: 86
        }
      },
      "142": {
        start: {
          line: 371,
          column: 20
        },
        end: {
          line: 371,
          column: 98
        }
      },
      "143": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 34
        }
      },
      "144": {
        start: {
          line: 374,
          column: 31
        },
        end: {
          line: 374,
          column: 80
        }
      },
      "145": {
        start: {
          line: 375,
          column: 31
        },
        end: {
          line: 375,
          column: 61
        }
      },
      "146": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 76
        }
      },
      "147": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 88
        }
      },
      "148": {
        start: {
          line: 378,
          column: 16
        },
        end: {
          line: 383,
          column: 17
        }
      },
      "149": {
        start: {
          line: 379,
          column: 20
        },
        end: {
          line: 379,
          column: 65
        }
      },
      "150": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 382,
          column: 23
        }
      },
      "151": {
        start: {
          line: 381,
          column: 24
        },
        end: {
          line: 381,
          column: 51
        }
      },
      "152": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 32
        }
      },
      "153": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 124
        }
      },
      "154": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 441,
          column: 7
        }
      },
      "155": {
        start: {
          line: 404,
          column: 12
        },
        end: {
          line: 439,
          column: 13
        }
      },
      "156": {
        start: {
          line: 405,
          column: 32
        },
        end: {
          line: 405,
          column: 48
        }
      },
      "157": {
        start: {
          line: 406,
          column: 33
        },
        end: {
          line: 406,
          column: 77
        }
      },
      "158": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 409,
          column: 17
        }
      },
      "159": {
        start: {
          line: 408,
          column: 20
        },
        end: {
          line: 408,
          column: 116
        }
      },
      "160": {
        start: {
          line: 410,
          column: 29
        },
        end: {
          line: 410,
          column: 59
        }
      },
      "161": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 411,
          column: 72
        }
      },
      "162": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 68
        }
      },
      "163": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 413,
          column: 77
        }
      },
      "164": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 75
        }
      },
      "165": {
        start: {
          line: 415,
          column: 16
        },
        end: {
          line: 415,
          column: 135
        }
      },
      "166": {
        start: {
          line: 416,
          column: 16
        },
        end: {
          line: 416,
          column: 94
        }
      },
      "167": {
        start: {
          line: 417,
          column: 16
        },
        end: {
          line: 419,
          column: 17
        }
      },
      "168": {
        start: {
          line: 418,
          column: 20
        },
        end: {
          line: 418,
          column: 102
        }
      },
      "169": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 422,
          column: 17
        }
      },
      "170": {
        start: {
          line: 421,
          column: 20
        },
        end: {
          line: 421,
          column: 65
        }
      },
      "171": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "172": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 424,
          column: 70
        }
      },
      "173": {
        start: {
          line: 426,
          column: 21
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "174": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 427,
          column: 69
        }
      },
      "175": {
        start: {
          line: 429,
          column: 21
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "176": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 430,
          column: 53
        }
      },
      "177": {
        start: {
          line: 432,
          column: 21
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "178": {
        start: {
          line: 433,
          column: 20
        },
        end: {
          line: 433,
          column: 61
        }
      },
      "179": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 30
        }
      },
      "180": {
        start: {
          line: 438,
          column: 16
        },
        end: {
          line: 438,
          column: 132
        }
      },
      "181": {
        start: {
          line: 443,
          column: 4
        },
        end: {
          line: 480,
          column: 7
        }
      },
      "182": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 478,
          column: 13
        }
      },
      "183": {
        start: {
          line: 456,
          column: 32
        },
        end: {
          line: 456,
          column: 48
        }
      },
      "184": {
        start: {
          line: 457,
          column: 34
        },
        end: {
          line: 457,
          column: 62
        }
      },
      "185": {
        start: {
          line: 458,
          column: 16
        },
        end: {
          line: 460,
          column: 17
        }
      },
      "186": {
        start: {
          line: 459,
          column: 20
        },
        end: {
          line: 459,
          column: 56
        }
      },
      "187": {
        start: {
          line: 461,
          column: 29
        },
        end: {
          line: 461,
          column: 80
        }
      },
      "188": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 473,
          column: 19
        }
      },
      "189": {
        start: {
          line: 463,
          column: 20
        },
        end: {
          line: 463,
          column: 73
        }
      },
      "190": {
        start: {
          line: 464,
          column: 20
        },
        end: {
          line: 464,
          column: 75
        }
      },
      "191": {
        start: {
          line: 465,
          column: 20
        },
        end: {
          line: 465,
          column: 80
        }
      },
      "192": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 78
        }
      },
      "193": {
        start: {
          line: 467,
          column: 20
        },
        end: {
          line: 467,
          column: 131
        }
      },
      "194": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 468,
          column: 97
        }
      },
      "195": {
        start: {
          line: 469,
          column: 20
        },
        end: {
          line: 471,
          column: 21
        }
      },
      "196": {
        start: {
          line: 470,
          column: 24
        },
        end: {
          line: 470,
          column: 68
        }
      },
      "197": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 35
        }
      },
      "198": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 30
        }
      },
      "199": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 477,
          column: 132
        }
      },
      "200": {
        start: {
          line: 482,
          column: 4
        },
        end: {
          line: 532,
          column: 7
        }
      },
      "201": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 530,
          column: 13
        }
      },
      "202": {
        start: {
          line: 495,
          column: 32
        },
        end: {
          line: 495,
          column: 48
        }
      },
      "203": {
        start: {
          line: 496,
          column: 35
        },
        end: {
          line: 500,
          column: 18
        }
      },
      "204": {
        start: {
          line: 501,
          column: 29
        },
        end: {
          line: 501,
          column: 65
        }
      },
      "205": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 64
        }
      },
      "206": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 503,
          column: 64
        }
      },
      "207": {
        start: {
          line: 504,
          column: 16
        },
        end: {
          line: 504,
          column: 80
        }
      },
      "208": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 505,
          column: 86
        }
      },
      "209": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 512,
          column: 17
        }
      },
      "210": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 48
        }
      },
      "211": {
        start: {
          line: 508,
          column: 20
        },
        end: {
          line: 510,
          column: 23
        }
      },
      "212": {
        start: {
          line: 509,
          column: 24
        },
        end: {
          line: 509,
          column: 49
        }
      },
      "213": {
        start: {
          line: 511,
          column: 20
        },
        end: {
          line: 511,
          column: 35
        }
      },
      "214": {
        start: {
          line: 513,
          column: 16
        },
        end: {
          line: 519,
          column: 17
        }
      },
      "215": {
        start: {
          line: 514,
          column: 20
        },
        end: {
          line: 514,
          column: 51
        }
      },
      "216": {
        start: {
          line: 515,
          column: 20
        },
        end: {
          line: 517,
          column: 23
        }
      },
      "217": {
        start: {
          line: 516,
          column: 24
        },
        end: {
          line: 516,
          column: 51
        }
      },
      "218": {
        start: {
          line: 518,
          column: 20
        },
        end: {
          line: 518,
          column: 35
        }
      },
      "219": {
        start: {
          line: 520,
          column: 16
        },
        end: {
          line: 525,
          column: 17
        }
      },
      "220": {
        start: {
          line: 521,
          column: 20
        },
        end: {
          line: 521,
          column: 70
        }
      },
      "221": {
        start: {
          line: 524,
          column: 20
        },
        end: {
          line: 524,
          column: 104
        }
      },
      "222": {
        start: {
          line: 526,
          column: 16
        },
        end: {
          line: 526,
          column: 30
        }
      },
      "223": {
        start: {
          line: 529,
          column: 16
        },
        end: {
          line: 529,
          column: 124
        }
      },
      "224": {
        start: {
          line: 534,
          column: 4
        },
        end: {
          line: 568,
          column: 7
        }
      },
      "225": {
        start: {
          line: 546,
          column: 12
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "226": {
        start: {
          line: 547,
          column: 32
        },
        end: {
          line: 547,
          column: 48
        }
      },
      "227": {
        start: {
          line: 548,
          column: 30
        },
        end: {
          line: 548,
          column: 61
        }
      },
      "228": {
        start: {
          line: 549,
          column: 29
        },
        end: {
          line: 549,
          column: 60
        }
      },
      "229": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 86
        }
      },
      "230": {
        start: {
          line: 551,
          column: 16
        },
        end: {
          line: 551,
          column: 83
        }
      },
      "231": {
        start: {
          line: 552,
          column: 16
        },
        end: {
          line: 552,
          column: 96
        }
      },
      "232": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 555,
          column: 17
        }
      },
      "233": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 100
        }
      },
      "234": {
        start: {
          line: 556,
          column: 16
        },
        end: {
          line: 558,
          column: 17
        }
      },
      "235": {
        start: {
          line: 557,
          column: 20
        },
        end: {
          line: 557,
          column: 100
        }
      },
      "236": {
        start: {
          line: 559,
          column: 16
        },
        end: {
          line: 561,
          column: 17
        }
      },
      "237": {
        start: {
          line: 560,
          column: 20
        },
        end: {
          line: 560,
          column: 68
        }
      },
      "238": {
        start: {
          line: 562,
          column: 16
        },
        end: {
          line: 562,
          column: 30
        }
      },
      "239": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 133
        }
      },
      "240": {
        start: {
          line: 572,
          column: 4
        },
        end: {
          line: 573,
          column: 25
        }
      },
      "241": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 25
        }
      },
      "242": {
        start: {
          line: 574,
          column: 14
        },
        end: {
          line: 574,
          column: 18
        }
      },
      "243": {
        start: {
          line: 575,
          column: 18
        },
        end: {
          line: 575,
          column: 51
        }
      },
      "244": {
        start: {
          line: 576,
          column: 14
        },
        end: {
          line: 576,
          column: 55
        }
      },
      "245": {
        start: {
          line: 577,
          column: 4
        },
        end: {
          line: 577,
          column: 76
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 58,
            column: 23
          },
          end: {
            line: 58,
            column: 24
          }
        },
        loc: {
          start: {
            line: 58,
            column: 29
          },
          end: {
            line: 79,
            column: 1
          }
        },
        line: 58
      },
      "1": {
        name: "createDataManagementTools",
        decl: {
          start: {
            line: 81,
            column: 16
          },
          end: {
            line: 81,
            column: 41
          }
        },
        loc: {
          start: {
            line: 81,
            column: 61
          },
          end: {
            line: 569,
            column: 1
          }
        },
        line: 81
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 94,
            column: 17
          },
          end: {
            line: 94,
            column: 18
          }
        },
        loc: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 116,
            column: 9
          }
        },
        line: 94
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 130,
            column: 18
          }
        },
        loc: {
          start: {
            line: 130,
            column: 33
          },
          end: {
            line: 154,
            column: 9
          }
        },
        line: 130
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 168,
            column: 17
          },
          end: {
            line: 168,
            column: 18
          }
        },
        loc: {
          start: {
            line: 168,
            column: 33
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 168
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 202,
            column: 17
          },
          end: {
            line: 202,
            column: 18
          }
        },
        loc: {
          start: {
            line: 202,
            column: 33
          },
          end: {
            line: 241,
            column: 9
          }
        },
        line: 202
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 210,
            column: 30
          },
          end: {
            line: 210,
            column: 31
          }
        },
        loc: {
          start: {
            line: 210,
            column: 47
          },
          end: {
            line: 226,
            column: 17
          }
        },
        line: 210
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 255,
            column: 17
          },
          end: {
            line: 255,
            column: 18
          }
        },
        loc: {
          start: {
            line: 255,
            column: 33
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 255
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 302,
            column: 17
          },
          end: {
            line: 302,
            column: 18
          }
        },
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 333,
            column: 9
          }
        },
        line: 302
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 315,
            column: 39
          },
          end: {
            line: 315,
            column: 40
          }
        },
        loc: {
          start: {
            line: 315,
            column: 56
          },
          end: {
            line: 327,
            column: 17
          }
        },
        line: 315
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 347,
            column: 17
          },
          end: {
            line: 347,
            column: 18
          }
        },
        loc: {
          start: {
            line: 347,
            column: 33
          },
          end: {
            line: 389,
            column: 9
          }
        },
        line: 347
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 355,
            column: 58
          },
          end: {
            line: 355,
            column: 59
          }
        },
        loc: {
          start: {
            line: 355,
            column: 66
          },
          end: {
            line: 355,
            column: 105
          }
        },
        line: 355
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 356,
            column: 59
          },
          end: {
            line: 356,
            column: 60
          }
        },
        loc: {
          start: {
            line: 356,
            column: 74
          },
          end: {
            line: 356,
            column: 93
          }
        },
        line: 356
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 365,
            column: 55
          },
          end: {
            line: 365,
            column: 56
          }
        },
        loc: {
          start: {
            line: 365,
            column: 72
          },
          end: {
            line: 367,
            column: 21
          }
        },
        line: 365
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 380,
            column: 42
          },
          end: {
            line: 380,
            column: 43
          }
        },
        loc: {
          start: {
            line: 380,
            column: 51
          },
          end: {
            line: 382,
            column: 21
          }
        },
        line: 380
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 403,
            column: 17
          },
          end: {
            line: 403,
            column: 18
          }
        },
        loc: {
          start: {
            line: 403,
            column: 33
          },
          end: {
            line: 440,
            column: 9
          }
        },
        line: 403
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 454,
            column: 17
          },
          end: {
            line: 454,
            column: 18
          }
        },
        loc: {
          start: {
            line: 454,
            column: 29
          },
          end: {
            line: 479,
            column: 9
          }
        },
        line: 454
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 462,
            column: 34
          },
          end: {
            line: 462,
            column: 35
          }
        },
        loc: {
          start: {
            line: 462,
            column: 55
          },
          end: {
            line: 473,
            column: 17
          }
        },
        line: 462
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 493,
            column: 17
          },
          end: {
            line: 493,
            column: 18
          }
        },
        loc: {
          start: {
            line: 493,
            column: 33
          },
          end: {
            line: 531,
            column: 9
          }
        },
        line: 493
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 508,
            column: 46
          },
          end: {
            line: 508,
            column: 47
          }
        },
        loc: {
          start: {
            line: 508,
            column: 55
          },
          end: {
            line: 510,
            column: 21
          }
        },
        line: 508
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 515,
            column: 48
          },
          end: {
            line: 515,
            column: 49
          }
        },
        loc: {
          start: {
            line: 515,
            column: 59
          },
          end: {
            line: 517,
            column: 21
          }
        },
        line: 515
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 545,
            column: 17
          },
          end: {
            line: 545,
            column: 18
          }
        },
        loc: {
          start: {
            line: 545,
            column: 29
          },
          end: {
            line: 567,
            column: 9
          }
        },
        line: 545
      },
      "22": {
        name: "formatFileSize",
        decl: {
          start: {
            line: 571,
            column: 9
          },
          end: {
            line: 571,
            column: 23
          }
        },
        loc: {
          start: {
            line: 571,
            column: 31
          },
          end: {
            line: 578,
            column: 1
          }
        },
        line: 571
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 61,
            column: 27
          },
          end: {
            line: 61,
            column: 52
          }
        }, {
          start: {
            line: 61,
            column: 56
          },
          end: {
            line: 61,
            column: 70
          }
        }],
        line: 61
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 34
          },
          end: {
            line: 62,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 34
          },
          end: {
            line: 62,
            column: 59
          }
        }, {
          start: {
            line: 62,
            column: 63
          },
          end: {
            line: 62,
            column: 74
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 75,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 30
          },
          end: {
            line: 63,
            column: 72
          }
        }, {
          start: {
            line: 63,
            column: 76
          },
          end: {
            line: 75,
            column: 13
          }
        }],
        line: 63
      },
      "4": {
        loc: {
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 16
          },
          end: {
            line: 108,
            column: 17
          }
        }, {
          start: {
            line: 106,
            column: 21
          },
          end: {
            line: 108,
            column: 17
          }
        }],
        line: 98
      },
      "5": {
        loc: {
          start: {
            line: 102,
            column: 59
          },
          end: {
            line: 102,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 59
          },
          end: {
            line: 102,
            column: 74
          }
        }, {
          start: {
            line: 102,
            column: 78
          },
          end: {
            line: 102,
            column: 79
          }
        }],
        line: 102
      },
      "6": {
        loc: {
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 16
          },
          end: {
            line: 113,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "7": {
        loc: {
          start: {
            line: 114,
            column: 62
          },
          end: {
            line: 114,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 114,
            column: 87
          },
          end: {
            line: 114,
            column: 100
          }
        }, {
          start: {
            line: 114,
            column: 103
          },
          end: {
            line: 114,
            column: 118
          }
        }],
        line: 114
      },
      "8": {
        loc: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: 144,
            column: 21
          },
          end: {
            line: 146,
            column: 17
          }
        }],
        line: 134
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 20
          },
          end: {
            line: 134,
            column: 34
          }
        }, {
          start: {
            line: 134,
            column: 38
          },
          end: {
            line: 134,
            column: 49
          }
        }, {
          start: {
            line: 134,
            column: 53
          },
          end: {
            line: 134,
            column: 68
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 64
          },
          end: {
            line: 152,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 152,
            column: 89
          },
          end: {
            line: 152,
            column: 102
          }
        }, {
          start: {
            line: 152,
            column: 105
          },
          end: {
            line: 152,
            column: 120
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 180,
            column: 17
          }
        }, {
          start: {
            line: 178,
            column: 21
          },
          end: {
            line: 180,
            column: 17
          }
        }],
        line: 172
      },
      "13": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "14": {
        loc: {
          start: {
            line: 186,
            column: 62
          },
          end: {
            line: 186,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 87
          },
          end: {
            line: 186,
            column: 100
          }
        }, {
          start: {
            line: 186,
            column: 103
          },
          end: {
            line: 186,
            column: 118
          }
        }],
        line: 186
      },
      "15": {
        loc: {
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "16": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "17": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "18": {
        loc: {
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 224,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 20
          },
          end: {
            line: 224,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "19": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "20": {
        loc: {
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 228,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 20
          },
          end: {
            line: 228,
            column: 30
          }
        }, {
          start: {
            line: 228,
            column: 34
          },
          end: {
            line: 228,
            column: 45
          }
        }],
        line: 228
      },
      "21": {
        loc: {
          start: {
            line: 229,
            column: 35
          },
          end: {
            line: 229,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 35
          },
          end: {
            line: 229,
            column: 46
          }
        }, {
          start: {
            line: 229,
            column: 50
          },
          end: {
            line: 229,
            column: 51
          }
        }],
        line: 229
      },
      "22": {
        loc: {
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 234,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 234,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "23": {
        loc: {
          start: {
            line: 232,
            column: 24
          },
          end: {
            line: 232,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 24
          },
          end: {
            line: 232,
            column: 34
          }
        }, {
          start: {
            line: 232,
            column: 38
          },
          end: {
            line: 232,
            column: 65
          }
        }],
        line: 232
      },
      "24": {
        loc: {
          start: {
            line: 239,
            column: 61
          },
          end: {
            line: 239,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 86
          },
          end: {
            line: 239,
            column: 99
          }
        }, {
          start: {
            line: 239,
            column: 102
          },
          end: {
            line: 239,
            column: 117
          }
        }],
        line: 239
      },
      "25": {
        loc: {
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 16
          },
          end: {
            line: 261,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "26": {
        loc: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 270,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 270,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "27": {
        loc: {
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 273,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 16
          },
          end: {
            line: 273,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "28": {
        loc: {
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 276,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "29": {
        loc: {
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "30": {
        loc: {
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 16
          },
          end: {
            line: 285,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "31": {
        loc: {
          start: {
            line: 286,
            column: 68
          },
          end: {
            line: 286,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 286,
            column: 93
          },
          end: {
            line: 286,
            column: 106
          }
        }, {
          start: {
            line: 286,
            column: 109
          },
          end: {
            line: 286,
            column: 124
          }
        }],
        line: 286
      },
      "32": {
        loc: {
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "33": {
        loc: {
          start: {
            line: 320,
            column: 20
          },
          end: {
            line: 322,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 320,
            column: 20
          },
          end: {
            line: 322,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 320
      },
      "34": {
        loc: {
          start: {
            line: 323,
            column: 20
          },
          end: {
            line: 325,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 20
          },
          end: {
            line: 325,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "35": {
        loc: {
          start: {
            line: 331,
            column: 69
          },
          end: {
            line: 331,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 94
          },
          end: {
            line: 331,
            column: 107
          }
        }, {
          start: {
            line: 331,
            column: 110
          },
          end: {
            line: 331,
            column: 125
          }
        }],
        line: 331
      },
      "36": {
        loc: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "37": {
        loc: {
          start: {
            line: 354,
            column: 65
          },
          end: {
            line: 354,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 65
          },
          end: {
            line: 354,
            column: 83
          }
        }, {
          start: {
            line: 354,
            column: 87
          },
          end: {
            line: 354,
            column: 89
          }
        }],
        line: 354
      },
      "38": {
        loc: {
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 359,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 20
          },
          end: {
            line: 359,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "39": {
        loc: {
          start: {
            line: 358,
            column: 80
          },
          end: {
            line: 358,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 80
          },
          end: {
            line: 358,
            column: 98
          }
        }, {
          start: {
            line: 358,
            column: 102
          },
          end: {
            line: 358,
            column: 104
          }
        }],
        line: 358
      },
      "40": {
        loc: {
          start: {
            line: 361,
            column: 73
          },
          end: {
            line: 361,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 73
          },
          end: {
            line: 361,
            column: 91
          }
        }, {
          start: {
            line: 361,
            column: 95
          },
          end: {
            line: 361,
            column: 97
          }
        }],
        line: 361
      },
      "41": {
        loc: {
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 370,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 20
          },
          end: {
            line: 370,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "42": {
        loc: {
          start: {
            line: 378,
            column: 16
          },
          end: {
            line: 383,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 16
          },
          end: {
            line: 383,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "43": {
        loc: {
          start: {
            line: 387,
            column: 64
          },
          end: {
            line: 387,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 387,
            column: 89
          },
          end: {
            line: 387,
            column: 102
          }
        }, {
          start: {
            line: 387,
            column: 105
          },
          end: {
            line: 387,
            column: 120
          }
        }],
        line: 387
      },
      "44": {
        loc: {
          start: {
            line: 407,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 16
          },
          end: {
            line: 409,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "45": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 419,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "46": {
        loc: {
          start: {
            line: 420,
            column: 16
          },
          end: {
            line: 422,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 16
          },
          end: {
            line: 422,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "47": {
        loc: {
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 434,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 16
          },
          end: {
            line: 434,
            column: 17
          }
        }, {
          start: {
            line: 426,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }],
        line: 423
      },
      "48": {
        loc: {
          start: {
            line: 426,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }, {
          start: {
            line: 429,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }],
        line: 426
      },
      "49": {
        loc: {
          start: {
            line: 429,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }, {
          start: {
            line: 432,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }],
        line: 429
      },
      "50": {
        loc: {
          start: {
            line: 432,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 21
          },
          end: {
            line: 434,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "51": {
        loc: {
          start: {
            line: 438,
            column: 72
          },
          end: {
            line: 438,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 438,
            column: 97
          },
          end: {
            line: 438,
            column: 110
          }
        }, {
          start: {
            line: 438,
            column: 113
          },
          end: {
            line: 438,
            column: 128
          }
        }],
        line: 438
      },
      "52": {
        loc: {
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 460,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 458,
            column: 16
          },
          end: {
            line: 460,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 458
      },
      "53": {
        loc: {
          start: {
            line: 469,
            column: 20
          },
          end: {
            line: 471,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 20
          },
          end: {
            line: 471,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "54": {
        loc: {
          start: {
            line: 477,
            column: 72
          },
          end: {
            line: 477,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 477,
            column: 97
          },
          end: {
            line: 477,
            column: 110
          }
        }, {
          start: {
            line: 477,
            column: 113
          },
          end: {
            line: 477,
            column: 128
          }
        }],
        line: 477
      },
      "55": {
        loc: {
          start: {
            line: 505,
            column: 42
          },
          end: {
            line: 505,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 505,
            column: 63
          },
          end: {
            line: 505,
            column: 70
          }
        }, {
          start: {
            line: 505,
            column: 73
          },
          end: {
            line: 505,
            column: 79
          }
        }],
        line: 505
      },
      "56": {
        loc: {
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 512,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "57": {
        loc: {
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 519,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 16
          },
          end: {
            line: 519,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "58": {
        loc: {
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 525,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 520,
            column: 16
          },
          end: {
            line: 525,
            column: 17
          }
        }, {
          start: {
            line: 523,
            column: 21
          },
          end: {
            line: 525,
            column: 17
          }
        }],
        line: 520
      },
      "59": {
        loc: {
          start: {
            line: 529,
            column: 64
          },
          end: {
            line: 529,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 529,
            column: 89
          },
          end: {
            line: 529,
            column: 102
          }
        }, {
          start: {
            line: 529,
            column: 105
          },
          end: {
            line: 529,
            column: 120
          }
        }],
        line: 529
      },
      "60": {
        loc: {
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "61": {
        loc: {
          start: {
            line: 556,
            column: 16
          },
          end: {
            line: 558,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 556,
            column: 16
          },
          end: {
            line: 558,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 556
      },
      "62": {
        loc: {
          start: {
            line: 559,
            column: 16
          },
          end: {
            line: 561,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 559,
            column: 16
          },
          end: {
            line: 561,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 559
      },
      "63": {
        loc: {
          start: {
            line: 565,
            column: 73
          },
          end: {
            line: 565,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 565,
            column: 98
          },
          end: {
            line: 565,
            column: 111
          }
        }, {
          start: {
            line: 565,
            column: 114
          },
          end: {
            line: 565,
            column: 129
          }
        }],
        line: 565
      },
      "64": {
        loc: {
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 573,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 572,
            column: 4
          },
          end: {
            line: 573,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 572
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/data-management.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/data-management.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\n// Note: Types are imported in the FileHandlingUtils but not directly used in this file\n// They are used indirectly through the utility class methods\n\n// Zod schemas for validation\nconst FileUploadSchema = z.object({\n  fileName: z.string().min(1, 'File name is required'),\n  mimeType: z.string().min(1, 'MIME type is required'),\n  data: z.string().min(1, 'File data (base64) is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst FileDownloadSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst FileDeleteSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst FileListSchema = z.object({\n  fileName: z.string().optional(),\n  mimeType: z.string().optional(),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  uploadedAfter: z.string().optional(),\n  uploadedBefore: z.string().optional(),\n  minFileSize: z.number().optional(),\n  maxFileSize: z.number().optional(),\n  limit: z.number().min(1).max(100).optional(),\n  offset: z.number().min(0).optional(),\n});\n\nconst FileMetadataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst WorkflowManifestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst FileCleanupSchema = z.object({\n  olderThanDays: z.number().min(1).max(365).optional(),\n  dryRun: z.boolean().optional().default(false),\n});\n\nconst TransferProgressSchema = z.object({\n  transferId: z.string().min(1, 'Transfer ID is required'),\n});\n\nconst FileValidationSchema = z.object({\n  fileName: z.string().min(1, 'File name is required'),\n  mimeType: z.string().min(1, 'MIME type is required'),\n  fileSize: z.number().min(1, 'File size is required'),\n  maxFileSize: z.number().optional(),\n  allowedMimeTypes: z.array(z.string()).optional(),\n  allowedExtensions: z.array(z.string()).optional(),\n});\n\n// Global file handling instance\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Function to get the global file handler instance\nconst getFileHandler = () => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Tool registration function\nexport function createDataManagementTools(getClient: () => N8nClient | null, server: any) {\n  // Upload file tool\n  server.addTool({\n    name: 'upload-file',\n    description:\n      'Upload a file to n8n for workflow or execution use. Supports binary data with progress tracking.',\n    parameters: FileUploadSchema,\n    annotations: {\n      title: 'Upload File',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileUploadSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const result = await handler.uploadFile(args);\n\n        if (result.success) {\n          return (\n            `\u2705 **File Uploaded Successfully**\\n\\n` +\n            `- **File Name:** ${result.fileName}\\n` +\n            `- **File ID:** ${result.fileId}\\n` +\n            `- **File Size:** ${formatFileSize(result.fileSize || 0)}\\n` +\n            `- **Transfer ID:** ${result.transferId}\\n\\n` +\n            `The file is now available for use in workflows and can be downloaded using the file ID.`\n          );\n        } else {\n          throw new UserError(result.message);\n        }\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to upload file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Download file tool\n  server.addTool({\n    name: 'download-file',\n    description: 'Download a file by its ID. Returns the file data as base64 along with metadata.',\n    parameters: FileDownloadSchema,\n    annotations: {\n      title: 'Download File',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileDownloadSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const result = await handler.downloadFile(args.fileId);\n\n        if (result.success && result.data && result.metadata) {\n          return (\n            `\u2705 **File Downloaded Successfully**\\n\\n` +\n            `- **File Name:** ${result.metadata.fileName}\\n` +\n            `- **MIME Type:** ${result.metadata.mimeType}\\n` +\n            `- **File Size:** ${formatFileSize(result.metadata.fileSize)}\\n` +\n            `- **Uploaded:** ${new Date(result.metadata.uploadedAt).toLocaleString()}\\n` +\n            `- **Transfer ID:** ${result.transferId}\\n\\n` +\n            `**Base64 Data:**\\n\\`\\`\\`\\n${result.data}\\n\\`\\`\\`\\n\\n` +\n            `\uD83D\uDCBE Use this base64 data in workflows or save to a file.`\n          );\n        } else {\n          throw new UserError(result.message);\n        }\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to download file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Delete file tool\n  server.addTool({\n    name: 'delete-file',\n    description: 'Delete a file from storage permanently. This action cannot be undone.',\n    parameters: FileDeleteSchema,\n    annotations: {\n      title: 'Delete File',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileDeleteSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const result = await handler.deleteFile(args.fileId);\n\n        if (result.success) {\n          return (\n            `\u2705 **File Deleted Successfully**\\n\\n` +\n            `- **File Name:** ${result.fileName}\\n` +\n            `- **File ID:** ${args.fileId}\\n\\n` +\n            `The file has been permanently removed from storage.`\n          );\n        } else {\n          throw new UserError(result.message);\n        }\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to delete file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // List files tool\n  server.addTool({\n    name: 'list-files',\n    description:\n      'List files in storage with optional filtering by workflow, execution, file type, etc.',\n    parameters: FileListSchema,\n    annotations: {\n      title: 'List Files',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileListSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const files = await handler.listFiles(args);\n\n        if (files.length === 0) {\n          return 'No files found matching the specified criteria.';\n        }\n\n        let result = `\uD83D\uDCC1 **Found ${files.length} file(s)**\\n\\n`;\n\n        files.forEach((file, index) => {\n          result += `${index + 1}. **${file.fileName}**\\n`;\n          result += `   - **ID:** ${file.id}\\n`;\n          result += `   - **Type:** ${file.mimeType}\\n`;\n          result += `   - **Size:** ${formatFileSize(file.fileSize)}\\n`;\n          result += `   - **Uploaded:** ${new Date(file.uploadedAt).toLocaleString()}\\n`;\n\n          if (file.workflowId) {\n            result += `   - **Workflow:** ${file.workflowId}\\n`;\n          }\n          if (file.executionId) {\n            result += `   - **Execution:** ${file.executionId}\\n`;\n          }\n          if (file.nodeId) {\n            result += `   - **Node:** ${file.nodeId}\\n`;\n          }\n          result += '\\n';\n        });\n\n        // Add pagination info if applicable\n        if (args.limit || args.offset) {\n          const offset = args.offset || 0;\n          const showing = files.length;\n          result += `\uD83D\uDCC4 Showing ${showing} files starting from offset ${offset}`;\n          if (args.limit && files.length === args.limit) {\n            result += `. Use offset ${offset + args.limit} to see more.`;\n          }\n        }\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to list files: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Get file metadata tool\n  server.addTool({\n    name: 'get-file-metadata',\n    description:\n      'Get detailed metadata for a specific file including upload date, associations, etc.',\n    parameters: FileMetadataSchema,\n    annotations: {\n      title: 'Get File Metadata',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileMetadataSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const metadata = await handler.getFileMetadata(args.fileId);\n\n        if (!metadata) {\n          throw new UserError(`File with ID ${args.fileId} not found`);\n        }\n\n        let result = `\uD83D\uDCC4 **File Metadata**\\n\\n`;\n        result += `- **File Name:** ${metadata.fileName}\\n`;\n        result += `- **File ID:** ${metadata.id}\\n`;\n        result += `- **MIME Type:** ${metadata.mimeType}\\n`;\n        result += `- **File Size:** ${formatFileSize(metadata.fileSize)}\\n`;\n        result += `- **Uploaded:** ${new Date(metadata.uploadedAt).toLocaleString()}\\n`;\n\n        if (metadata.workflowId) {\n          result += `- **Workflow ID:** ${metadata.workflowId}\\n`;\n        }\n        if (metadata.executionId) {\n          result += `- **Execution ID:** ${metadata.executionId}\\n`;\n        }\n        if (metadata.nodeId) {\n          result += `- **Node ID:** ${metadata.nodeId}\\n`;\n        }\n        if (metadata.filePath) {\n          result += `- **Storage Path:** ${metadata.filePath}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to get file metadata: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Get workflow file manifest tool\n  server.addTool({\n    name: 'get-workflow-files',\n    description: 'Get a manifest of all files associated with a specific workflow.',\n    parameters: WorkflowManifestSchema,\n    annotations: {\n      title: 'Get Workflow File Manifest',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowManifestSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const manifest = await handler.getWorkflowFileManifest(args.workflowId);\n\n        if (manifest.fileCount === 0) {\n          return `No files found for workflow ${args.workflowId}`;\n        }\n\n        let result = `\uD83D\uDCC2 **Workflow File Manifest**\\n\\n`;\n        result += `- **Workflow ID:** ${manifest.workflowId}\\n`;\n        result += `- **Total Files:** ${manifest.fileCount}\\n`;\n        result += `- **Total Size:** ${formatFileSize(manifest.totalSize)}\\n`;\n        result += `- **Last Updated:** ${new Date(manifest.lastUpdated).toLocaleString()}\\n\\n`;\n\n        result += `**Files:**\\n`;\n        manifest.files.forEach((file, index) => {\n          result += `${index + 1}. **${file.fileName}** (${file.id})\\n`;\n          result += `   - Size: ${formatFileSize(file.fileSize)}\\n`;\n          result += `   - Type: ${file.mimeType}\\n`;\n          result += `   - Uploaded: ${new Date(file.uploadedAt).toLocaleString()}\\n`;\n          if (file.executionId) {\n            result += `   - Execution: ${file.executionId}\\n`;\n          }\n          if (file.nodeId) {\n            result += `   - Node: ${file.nodeId}\\n`;\n          }\n          result += '\\n';\n        });\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to get workflow files: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Cleanup old files tool\n  server.addTool({\n    name: 'cleanup-old-files',\n    description:\n      'Clean up old files from storage to free space. Can run in dry-run mode to preview what would be deleted.',\n    parameters: FileCleanupSchema,\n    annotations: {\n      title: 'Cleanup Old Files',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileCleanupSchema>) => {\n      try {\n        const handler = getFileHandler();\n\n        if (args.dryRun) {\n          // Dry run - just show what would be deleted\n          const allFiles = await handler.listFiles();\n          const cleanupDate = new Date();\n          cleanupDate.setDate(cleanupDate.getDate() - (args.olderThanDays || 30));\n\n          const filesToDelete = allFiles.filter(file => new Date(file.uploadedAt) < cleanupDate);\n          const totalSize = filesToDelete.reduce((sum, file) => sum + file.fileSize, 0);\n\n          if (filesToDelete.length === 0) {\n            return `\uD83E\uDDEA **Dry Run Results**\\n\\nNo files older than ${args.olderThanDays || 30} days found for cleanup.`;\n          }\n\n          let result = `\uD83E\uDDEA **Dry Run Results**\\n\\n`;\n          result += `Files that would be deleted (older than ${args.olderThanDays || 30} days):\\n\\n`;\n          result += `- **Total Files:** ${filesToDelete.length}\\n`;\n          result += `- **Total Space:** ${formatFileSize(totalSize)}\\n\\n`;\n\n          result += `**Files to be deleted:**\\n`;\n          filesToDelete.slice(0, 10).forEach((file, index) => {\n            result += `${index + 1}. ${file.fileName} (${formatFileSize(file.fileSize)}) - ${new Date(file.uploadedAt).toLocaleDateString()}\\n`;\n          });\n\n          if (filesToDelete.length > 10) {\n            result += `... and ${filesToDelete.length - 10} more files\\n`;\n          }\n\n          result += `\\n\uD83D\uDCA1 Run without \\`dryRun: true\\` to actually delete these files.`;\n          return result;\n        }\n\n        const result = await handler.cleanupOldFiles(args.olderThanDays);\n\n        let response = `\uD83E\uDDF9 **Cleanup Completed**\\n\\n`;\n        response += `- **Files Deleted:** ${result.deletedFiles}\\n`;\n        response += `- **Space Freed:** ${formatFileSize(result.freedSpace)}\\n`;\n\n        if (result.errors.length > 0) {\n          response += `\\n\u26A0\uFE0F **Errors encountered:**\\n`;\n          result.errors.forEach(error => {\n            response += `- ${error}\\n`;\n          });\n        }\n\n        return response;\n      } catch (error) {\n        throw new UserError(\n          `Failed to cleanup files: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Get transfer progress tool\n  server.addTool({\n    name: 'get-transfer-progress',\n    description: 'Get the progress of an active file transfer (upload/download).',\n    parameters: TransferProgressSchema,\n    annotations: {\n      title: 'Get Transfer Progress',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TransferProgressSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const progress = handler.getTransferProgress(args.transferId);\n\n        if (!progress) {\n          return `Transfer with ID ${args.transferId} not found. It may have completed or never existed.`;\n        }\n\n        let result = `\uD83D\uDCCA **Transfer Progress**\\n\\n`;\n        result += `- **Transfer ID:** ${progress.transferId}\\n`;\n        result += `- **File Name:** ${progress.fileName}\\n`;\n        result += `- **Status:** ${progress.status.toUpperCase()}\\n`;\n        result += `- **Progress:** ${progress.percentComplete}%\\n`;\n        result += `- **Transferred:** ${formatFileSize(progress.transferredBytes)} / ${formatFileSize(progress.totalBytes)}\\n`;\n        result += `- **Started:** ${new Date(progress.startedAt).toLocaleString()}\\n`;\n\n        if (progress.completedAt) {\n          result += `- **Completed:** ${new Date(progress.completedAt).toLocaleString()}\\n`;\n        }\n\n        if (progress.error) {\n          result += `- **Error:** ${progress.error}\\n`;\n        }\n\n        if (progress.status === 'in-progress') {\n          result += `\\n\uD83D\uDD04 Transfer is still in progress...`;\n        } else if (progress.status === 'completed') {\n          result += `\\n\u2705 Transfer completed successfully!`;\n        } else if (progress.status === 'failed') {\n          result += `\\n\u274C Transfer failed.`;\n        } else if (progress.status === 'cancelled') {\n          result += `\\n\uD83D\uDEAB Transfer was cancelled.`;\n        }\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to get transfer progress: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // List active transfers tool\n  server.addTool({\n    name: 'list-active-transfers',\n    description: 'List all currently active file transfers with their progress.',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List Active Transfers',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async () => {\n      try {\n        const handler = getFileHandler();\n        const transfers = handler.getActiveTransfers();\n\n        if (transfers.length === 0) {\n          return 'No active transfers found.';\n        }\n\n        let result = `\uD83D\uDD04 **Active Transfers (${transfers.length})**\\n\\n`;\n\n        transfers.forEach((transfer, index) => {\n          result += `${index + 1}. **${transfer.fileName}**\\n`;\n          result += `   - Transfer ID: ${transfer.transferId}\\n`;\n          result += `   - Status: ${transfer.status.toUpperCase()}\\n`;\n          result += `   - Progress: ${transfer.percentComplete}%\\n`;\n          result += `   - Size: ${formatFileSize(transfer.transferredBytes)} / ${formatFileSize(transfer.totalBytes)}\\n`;\n          result += `   - Started: ${new Date(transfer.startedAt).toLocaleString()}\\n`;\n          if (transfer.error) {\n            result += `   - Error: ${transfer.error}\\n`;\n          }\n          result += '\\n';\n        });\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to list active transfers: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Validate file tool\n  server.addTool({\n    name: 'validate-file',\n    description: 'Validate a file before upload by checking size, type, and other constraints.',\n    parameters: FileValidationSchema,\n    annotations: {\n      title: 'Validate File',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof FileValidationSchema>) => {\n      try {\n        const handler = getFileHandler();\n        const validation = await handler.validateFile(args.fileName, args.mimeType, args.fileSize, {\n          maxFileSize: args.maxFileSize,\n          allowedMimeTypes: args.allowedMimeTypes,\n          allowedExtensions: args.allowedExtensions,\n        });\n\n        let result = `\uD83D\uDD0D **File Validation Results**\\n\\n`;\n        result += `- **File Name:** ${args.fileName}\\n`;\n        result += `- **MIME Type:** ${args.mimeType}\\n`;\n        result += `- **File Size:** ${formatFileSize(args.fileSize)}\\n`;\n        result += `- **Valid:** ${validation.isValid ? '\u2705 YES' : '\u274C NO'}\\n\\n`;\n\n        if (validation.errors.length > 0) {\n          result += `**\u274C Errors:**\\n`;\n          validation.errors.forEach(error => {\n            result += `- ${error}\\n`;\n          });\n          result += '\\n';\n        }\n\n        if (validation.warnings.length > 0) {\n          result += `**\u26A0\uFE0F Warnings:**\\n`;\n          validation.warnings.forEach(warning => {\n            result += `- ${warning}\\n`;\n          });\n          result += '\\n';\n        }\n\n        if (validation.isValid) {\n          result += `\u2705 File is valid and ready for upload!`;\n        } else {\n          result += `\u274C File validation failed. Please fix the errors above before uploading.`;\n        }\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to validate file: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Get storage statistics tool\n  server.addTool({\n    name: 'get-storage-stats',\n    description: 'Get storage statistics including total files, disk usage, and file distribution.',\n    parameters: z.object({}),\n    annotations: {\n      title: 'Get Storage Statistics',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async () => {\n      try {\n        const handler = getFileHandler();\n        const stats = await handler.getStorageStats();\n\n        let result = `\uD83D\uDCCA **Storage Statistics**\\n\\n`;\n        result += `- **Total Files:** ${stats.totalFiles.toLocaleString()}\\n`;\n        result += `- **Total Size:** ${formatFileSize(stats.totalSize)}\\n`;\n        result += `- **Average File Size:** ${formatFileSize(stats.averageFileSize)}\\n`;\n\n        if (stats.oldestFile) {\n          result += `- **Oldest File:** ${new Date(stats.oldestFile).toLocaleString()}\\n`;\n        }\n        if (stats.newestFile) {\n          result += `- **Newest File:** ${new Date(stats.newestFile).toLocaleString()}\\n`;\n        }\n\n        if (stats.totalFiles === 0) {\n          result += `\\n\uD83D\uDCC1 No files currently in storage.`;\n        }\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to get storage statistics: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n\n// Helper function to format file sizes\nfunction formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72bd5dcbe9bf57cd98e76ba307b6993d4d57c78f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_11rqno7mlg = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_11rqno7mlg();
import { z } from 'zod';
import { UserError } from 'fastmcp';
import { FileHandlingUtils } from '../utils/fileHandling.js';
// Note: Types are imported in the FileHandlingUtils but not directly used in this file
// They are used indirectly through the utility class methods
// Zod schemas for validation
const FileUploadSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[0]++, z.object({
  fileName: z.string().min(1, 'File name is required'),
  mimeType: z.string().min(1, 'MIME type is required'),
  data: z.string().min(1, 'File data (base64) is required'),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional()
}));
const FileDownloadSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[1]++, z.object({
  fileId: z.string().min(1, 'File ID is required')
}));
const FileDeleteSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[2]++, z.object({
  fileId: z.string().min(1, 'File ID is required')
}));
const FileListSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[3]++, z.object({
  fileName: z.string().optional(),
  mimeType: z.string().optional(),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional(),
  uploadedAfter: z.string().optional(),
  uploadedBefore: z.string().optional(),
  minFileSize: z.number().optional(),
  maxFileSize: z.number().optional(),
  limit: z.number().min(1).max(100).optional(),
  offset: z.number().min(0).optional()
}));
const FileMetadataSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[4]++, z.object({
  fileId: z.string().min(1, 'File ID is required')
}));
const WorkflowManifestSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[5]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required')
}));
const FileCleanupSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[6]++, z.object({
  olderThanDays: z.number().min(1).max(365).optional(),
  dryRun: z.boolean().optional().default(false)
}));
const TransferProgressSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[7]++, z.object({
  transferId: z.string().min(1, 'Transfer ID is required')
}));
const FileValidationSchema =
/* istanbul ignore next */
(cov_11rqno7mlg().s[8]++, z.object({
  fileName: z.string().min(1, 'File name is required'),
  mimeType: z.string().min(1, 'MIME type is required'),
  fileSize: z.number().min(1, 'File size is required'),
  maxFileSize: z.number().optional(),
  allowedMimeTypes: z.array(z.string()).optional(),
  allowedExtensions: z.array(z.string()).optional()
}));
// Global file handling instance
let fileHandler =
/* istanbul ignore next */
(cov_11rqno7mlg().s[9]++, null);
// Function to get the global file handler instance
/* istanbul ignore next */
cov_11rqno7mlg().s[10]++;
const getFileHandler = () => {
  /* istanbul ignore next */
  cov_11rqno7mlg().f[0]++;
  cov_11rqno7mlg().s[11]++;
  if (!fileHandler) {
    /* istanbul ignore next */
    cov_11rqno7mlg().b[0][0]++;
    cov_11rqno7mlg().s[12]++;
    fileHandler = new FileHandlingUtils({
      baseDirectory:
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[1][0]++, process.env.N8N_FILES_DIR) ||
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[1][1]++, './data/files'),
      maxFileSize: parseInt(
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[2][0]++, process.env.MAX_FILE_SIZE) ||
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[2][1]++, '104857600')),
      // 100MB
      allowedMimeTypes:
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[3][0]++, process.env.ALLOWED_MIME_TYPES?.split(',')) ||
      /* istanbul ignore next */
      (cov_11rqno7mlg().b[3][1]++, ['image/*', 'text/*', 'application/json', 'application/pdf', 'application/zip', 'application/x-zip-compressed', 'application/octet-stream', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
    });
  } else
  /* istanbul ignore next */
  {
    cov_11rqno7mlg().b[0][1]++;
  }
  cov_11rqno7mlg().s[13]++;
  return fileHandler;
};
// Tool registration function
export function createDataManagementTools(getClient, server) {
  /* istanbul ignore next */
  cov_11rqno7mlg().f[1]++;
  cov_11rqno7mlg().s[14]++;
  // Upload file tool
  server.addTool({
    name: 'upload-file',
    description: 'Upload a file to n8n for workflow or execution use. Supports binary data with progress tracking.',
    parameters: FileUploadSchema,
    annotations: {
      title: 'Upload File',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[2]++;
      cov_11rqno7mlg().s[15]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[16]++, getFileHandler());
        const result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[17]++, await handler.uploadFile(args));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[18]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[4][0]++;
          cov_11rqno7mlg().s[19]++;
          return `✅ **File Uploaded Successfully**\n\n` + `- **File Name:** ${result.fileName}\n` + `- **File ID:** ${result.fileId}\n` + `- **File Size:** ${formatFileSize(
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[5][0]++, result.fileSize) ||
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[5][1]++, 0))}\n` + `- **Transfer ID:** ${result.transferId}\n\n` + `The file is now available for use in workflows and can be downloaded using the file ID.`;
        } else {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[4][1]++;
          cov_11rqno7mlg().s[20]++;
          throw new UserError(result.message);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[21]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[6][0]++;
          cov_11rqno7mlg().s[22]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[6][1]++;
        }
        cov_11rqno7mlg().s[23]++;
        throw new UserError(`Failed to upload file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[7][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[7][1]++, 'Unknown error')}`);
      }
    }
  });
  // Download file tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[24]++;
  server.addTool({
    name: 'download-file',
    description: 'Download a file by its ID. Returns the file data as base64 along with metadata.',
    parameters: FileDownloadSchema,
    annotations: {
      title: 'Download File',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[3]++;
      cov_11rqno7mlg().s[25]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[26]++, getFileHandler());
        const result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[27]++, await handler.downloadFile(args.fileId));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[28]++;
        if (
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[9][0]++, result.success) &&
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[9][1]++, result.data) &&
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[9][2]++, result.metadata)) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[8][0]++;
          cov_11rqno7mlg().s[29]++;
          return `✅ **File Downloaded Successfully**\n\n` + `- **File Name:** ${result.metadata.fileName}\n` + `- **MIME Type:** ${result.metadata.mimeType}\n` + `- **File Size:** ${formatFileSize(result.metadata.fileSize)}\n` + `- **Uploaded:** ${new Date(result.metadata.uploadedAt).toLocaleString()}\n` + `- **Transfer ID:** ${result.transferId}\n\n` + `**Base64 Data:**\n\`\`\`\n${result.data}\n\`\`\`\n\n` + `💾 Use this base64 data in workflows or save to a file.`;
        } else {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[8][1]++;
          cov_11rqno7mlg().s[30]++;
          throw new UserError(result.message);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[31]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[10][0]++;
          cov_11rqno7mlg().s[32]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[10][1]++;
        }
        cov_11rqno7mlg().s[33]++;
        throw new UserError(`Failed to download file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[11][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[11][1]++, 'Unknown error')}`);
      }
    }
  });
  // Delete file tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[34]++;
  server.addTool({
    name: 'delete-file',
    description: 'Delete a file from storage permanently. This action cannot be undone.',
    parameters: FileDeleteSchema,
    annotations: {
      title: 'Delete File',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[4]++;
      cov_11rqno7mlg().s[35]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[36]++, getFileHandler());
        const result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[37]++, await handler.deleteFile(args.fileId));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[38]++;
        if (result.success) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[12][0]++;
          cov_11rqno7mlg().s[39]++;
          return `✅ **File Deleted Successfully**\n\n` + `- **File Name:** ${result.fileName}\n` + `- **File ID:** ${args.fileId}\n\n` + `The file has been permanently removed from storage.`;
        } else {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[12][1]++;
          cov_11rqno7mlg().s[40]++;
          throw new UserError(result.message);
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[41]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[13][0]++;
          cov_11rqno7mlg().s[42]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[13][1]++;
        }
        cov_11rqno7mlg().s[43]++;
        throw new UserError(`Failed to delete file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[14][1]++, 'Unknown error')}`);
      }
    }
  });
  // List files tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[44]++;
  server.addTool({
    name: 'list-files',
    description: 'List files in storage with optional filtering by workflow, execution, file type, etc.',
    parameters: FileListSchema,
    annotations: {
      title: 'List Files',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[5]++;
      cov_11rqno7mlg().s[45]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[46]++, getFileHandler());
        const files =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[47]++, await handler.listFiles(args));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[48]++;
        if (files.length === 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[15][0]++;
          cov_11rqno7mlg().s[49]++;
          return 'No files found matching the specified criteria.';
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[15][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[50]++, `📁 **Found ${files.length} file(s)**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[51]++;
        files.forEach((file, index) => {
          /* istanbul ignore next */
          cov_11rqno7mlg().f[6]++;
          cov_11rqno7mlg().s[52]++;
          result += `${index + 1}. **${file.fileName}**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[53]++;
          result += `   - **ID:** ${file.id}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[54]++;
          result += `   - **Type:** ${file.mimeType}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[55]++;
          result += `   - **Size:** ${formatFileSize(file.fileSize)}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[56]++;
          result += `   - **Uploaded:** ${new Date(file.uploadedAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[57]++;
          if (file.workflowId) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[16][0]++;
            cov_11rqno7mlg().s[58]++;
            result += `   - **Workflow:** ${file.workflowId}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[16][1]++;
          }
          cov_11rqno7mlg().s[59]++;
          if (file.executionId) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[17][0]++;
            cov_11rqno7mlg().s[60]++;
            result += `   - **Execution:** ${file.executionId}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[17][1]++;
          }
          cov_11rqno7mlg().s[61]++;
          if (file.nodeId) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[18][0]++;
            cov_11rqno7mlg().s[62]++;
            result += `   - **Node:** ${file.nodeId}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[18][1]++;
          }
          cov_11rqno7mlg().s[63]++;
          result += '\n';
        });
        // Add pagination info if applicable
        /* istanbul ignore next */
        cov_11rqno7mlg().s[64]++;
        if (
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[20][0]++, args.limit) ||
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[20][1]++, args.offset)) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[19][0]++;
          const offset =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[65]++,
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[21][0]++, args.offset) ||
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[21][1]++, 0));
          const showing =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[66]++, files.length);
          /* istanbul ignore next */
          cov_11rqno7mlg().s[67]++;
          result += `📄 Showing ${showing} files starting from offset ${offset}`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[68]++;
          if (
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[23][0]++, args.limit) &&
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[23][1]++, files.length === args.limit)) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[22][0]++;
            cov_11rqno7mlg().s[69]++;
            result += `. Use offset ${offset + args.limit} to see more.`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[22][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[19][1]++;
        }
        cov_11rqno7mlg().s[70]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[71]++;
        throw new UserError(`Failed to list files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[24][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get file metadata tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[72]++;
  server.addTool({
    name: 'get-file-metadata',
    description: 'Get detailed metadata for a specific file including upload date, associations, etc.',
    parameters: FileMetadataSchema,
    annotations: {
      title: 'Get File Metadata',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[7]++;
      cov_11rqno7mlg().s[73]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[74]++, getFileHandler());
        const metadata =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[75]++, await handler.getFileMetadata(args.fileId));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[76]++;
        if (!metadata) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[25][0]++;
          cov_11rqno7mlg().s[77]++;
          throw new UserError(`File with ID ${args.fileId} not found`);
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[25][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[78]++, `📄 **File Metadata**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[79]++;
        result += `- **File Name:** ${metadata.fileName}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[80]++;
        result += `- **File ID:** ${metadata.id}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[81]++;
        result += `- **MIME Type:** ${metadata.mimeType}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[82]++;
        result += `- **File Size:** ${formatFileSize(metadata.fileSize)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[83]++;
        result += `- **Uploaded:** ${new Date(metadata.uploadedAt).toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[84]++;
        if (metadata.workflowId) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[26][0]++;
          cov_11rqno7mlg().s[85]++;
          result += `- **Workflow ID:** ${metadata.workflowId}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[26][1]++;
        }
        cov_11rqno7mlg().s[86]++;
        if (metadata.executionId) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[27][0]++;
          cov_11rqno7mlg().s[87]++;
          result += `- **Execution ID:** ${metadata.executionId}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[27][1]++;
        }
        cov_11rqno7mlg().s[88]++;
        if (metadata.nodeId) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[28][0]++;
          cov_11rqno7mlg().s[89]++;
          result += `- **Node ID:** ${metadata.nodeId}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[28][1]++;
        }
        cov_11rqno7mlg().s[90]++;
        if (metadata.filePath) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[29][0]++;
          cov_11rqno7mlg().s[91]++;
          result += `- **Storage Path:** ${metadata.filePath}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[29][1]++;
        }
        cov_11rqno7mlg().s[92]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[93]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[30][0]++;
          cov_11rqno7mlg().s[94]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[30][1]++;
        }
        cov_11rqno7mlg().s[95]++;
        throw new UserError(`Failed to get file metadata: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[31][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get workflow file manifest tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[96]++;
  server.addTool({
    name: 'get-workflow-files',
    description: 'Get a manifest of all files associated with a specific workflow.',
    parameters: WorkflowManifestSchema,
    annotations: {
      title: 'Get Workflow File Manifest',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[8]++;
      cov_11rqno7mlg().s[97]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[98]++, getFileHandler());
        const manifest =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[99]++, await handler.getWorkflowFileManifest(args.workflowId));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[100]++;
        if (manifest.fileCount === 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[32][0]++;
          cov_11rqno7mlg().s[101]++;
          return `No files found for workflow ${args.workflowId}`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[32][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[102]++, `📂 **Workflow File Manifest**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[103]++;
        result += `- **Workflow ID:** ${manifest.workflowId}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[104]++;
        result += `- **Total Files:** ${manifest.fileCount}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[105]++;
        result += `- **Total Size:** ${formatFileSize(manifest.totalSize)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[106]++;
        result += `- **Last Updated:** ${new Date(manifest.lastUpdated).toLocaleString()}\n\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[107]++;
        result += `**Files:**\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[108]++;
        manifest.files.forEach((file, index) => {
          /* istanbul ignore next */
          cov_11rqno7mlg().f[9]++;
          cov_11rqno7mlg().s[109]++;
          result += `${index + 1}. **${file.fileName}** (${file.id})\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[110]++;
          result += `   - Size: ${formatFileSize(file.fileSize)}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[111]++;
          result += `   - Type: ${file.mimeType}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[112]++;
          result += `   - Uploaded: ${new Date(file.uploadedAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[113]++;
          if (file.executionId) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[33][0]++;
            cov_11rqno7mlg().s[114]++;
            result += `   - Execution: ${file.executionId}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[33][1]++;
          }
          cov_11rqno7mlg().s[115]++;
          if (file.nodeId) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[34][0]++;
            cov_11rqno7mlg().s[116]++;
            result += `   - Node: ${file.nodeId}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[34][1]++;
          }
          cov_11rqno7mlg().s[117]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_11rqno7mlg().s[118]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[119]++;
        throw new UserError(`Failed to get workflow files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[35][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[35][1]++, 'Unknown error')}`);
      }
    }
  });
  // Cleanup old files tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[120]++;
  server.addTool({
    name: 'cleanup-old-files',
    description: 'Clean up old files from storage to free space. Can run in dry-run mode to preview what would be deleted.',
    parameters: FileCleanupSchema,
    annotations: {
      title: 'Cleanup Old Files',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[10]++;
      cov_11rqno7mlg().s[121]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[122]++, getFileHandler());
        /* istanbul ignore next */
        cov_11rqno7mlg().s[123]++;
        if (args.dryRun) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[36][0]++;
          // Dry run - just show what would be deleted
          const allFiles =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[124]++, await handler.listFiles());
          const cleanupDate =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[125]++, new Date());
          /* istanbul ignore next */
          cov_11rqno7mlg().s[126]++;
          cleanupDate.setDate(cleanupDate.getDate() - (
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[37][0]++, args.olderThanDays) ||
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[37][1]++, 30)));
          const filesToDelete =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[127]++, allFiles.filter(file => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[11]++;
            cov_11rqno7mlg().s[128]++;
            return new Date(file.uploadedAt) < cleanupDate;
          }));
          const totalSize =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[129]++, filesToDelete.reduce((sum, file) => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[12]++;
            cov_11rqno7mlg().s[130]++;
            return sum + file.fileSize;
          }, 0));
          /* istanbul ignore next */
          cov_11rqno7mlg().s[131]++;
          if (filesToDelete.length === 0) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[38][0]++;
            cov_11rqno7mlg().s[132]++;
            return `🧪 **Dry Run Results**\n\nNo files older than ${
            /* istanbul ignore next */
            (cov_11rqno7mlg().b[39][0]++, args.olderThanDays) ||
            /* istanbul ignore next */
            (cov_11rqno7mlg().b[39][1]++, 30)} days found for cleanup.`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[38][1]++;
          }
          let result =
          /* istanbul ignore next */
          (cov_11rqno7mlg().s[133]++, `🧪 **Dry Run Results**\n\n`);
          /* istanbul ignore next */
          cov_11rqno7mlg().s[134]++;
          result += `Files that would be deleted (older than ${
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[40][0]++, args.olderThanDays) ||
          /* istanbul ignore next */
          (cov_11rqno7mlg().b[40][1]++, 30)} days):\n\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[135]++;
          result += `- **Total Files:** ${filesToDelete.length}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[136]++;
          result += `- **Total Space:** ${formatFileSize(totalSize)}\n\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[137]++;
          result += `**Files to be deleted:**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[138]++;
          filesToDelete.slice(0, 10).forEach((file, index) => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[13]++;
            cov_11rqno7mlg().s[139]++;
            result += `${index + 1}. ${file.fileName} (${formatFileSize(file.fileSize)}) - ${new Date(file.uploadedAt).toLocaleDateString()}\n`;
          });
          /* istanbul ignore next */
          cov_11rqno7mlg().s[140]++;
          if (filesToDelete.length > 10) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[41][0]++;
            cov_11rqno7mlg().s[141]++;
            result += `... and ${filesToDelete.length - 10} more files\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[41][1]++;
          }
          cov_11rqno7mlg().s[142]++;
          result += `\n💡 Run without \`dryRun: true\` to actually delete these files.`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[143]++;
          return result;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[36][1]++;
        }
        const result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[144]++, await handler.cleanupOldFiles(args.olderThanDays));
        let response =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[145]++, `🧹 **Cleanup Completed**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[146]++;
        response += `- **Files Deleted:** ${result.deletedFiles}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[147]++;
        response += `- **Space Freed:** ${formatFileSize(result.freedSpace)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[148]++;
        if (result.errors.length > 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[42][0]++;
          cov_11rqno7mlg().s[149]++;
          response += `\n⚠️ **Errors encountered:**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[150]++;
          result.errors.forEach(error => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[14]++;
            cov_11rqno7mlg().s[151]++;
            response += `- ${error}\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[42][1]++;
        }
        cov_11rqno7mlg().s[152]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[153]++;
        throw new UserError(`Failed to cleanup files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[43][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[43][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get transfer progress tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[154]++;
  server.addTool({
    name: 'get-transfer-progress',
    description: 'Get the progress of an active file transfer (upload/download).',
    parameters: TransferProgressSchema,
    annotations: {
      title: 'Get Transfer Progress',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[15]++;
      cov_11rqno7mlg().s[155]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[156]++, getFileHandler());
        const progress =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[157]++, handler.getTransferProgress(args.transferId));
        /* istanbul ignore next */
        cov_11rqno7mlg().s[158]++;
        if (!progress) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[44][0]++;
          cov_11rqno7mlg().s[159]++;
          return `Transfer with ID ${args.transferId} not found. It may have completed or never existed.`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[44][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[160]++, `📊 **Transfer Progress**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[161]++;
        result += `- **Transfer ID:** ${progress.transferId}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[162]++;
        result += `- **File Name:** ${progress.fileName}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[163]++;
        result += `- **Status:** ${progress.status.toUpperCase()}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[164]++;
        result += `- **Progress:** ${progress.percentComplete}%\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[165]++;
        result += `- **Transferred:** ${formatFileSize(progress.transferredBytes)} / ${formatFileSize(progress.totalBytes)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[166]++;
        result += `- **Started:** ${new Date(progress.startedAt).toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[167]++;
        if (progress.completedAt) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[45][0]++;
          cov_11rqno7mlg().s[168]++;
          result += `- **Completed:** ${new Date(progress.completedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[45][1]++;
        }
        cov_11rqno7mlg().s[169]++;
        if (progress.error) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[46][0]++;
          cov_11rqno7mlg().s[170]++;
          result += `- **Error:** ${progress.error}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[46][1]++;
        }
        cov_11rqno7mlg().s[171]++;
        if (progress.status === 'in-progress') {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[47][0]++;
          cov_11rqno7mlg().s[172]++;
          result += `\n🔄 Transfer is still in progress...`;
        } else {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[47][1]++;
          cov_11rqno7mlg().s[173]++;
          if (progress.status === 'completed') {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[48][0]++;
            cov_11rqno7mlg().s[174]++;
            result += `\n✅ Transfer completed successfully!`;
          } else {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[48][1]++;
            cov_11rqno7mlg().s[175]++;
            if (progress.status === 'failed') {
              /* istanbul ignore next */
              cov_11rqno7mlg().b[49][0]++;
              cov_11rqno7mlg().s[176]++;
              result += `\n❌ Transfer failed.`;
            } else {
              /* istanbul ignore next */
              cov_11rqno7mlg().b[49][1]++;
              cov_11rqno7mlg().s[177]++;
              if (progress.status === 'cancelled') {
                /* istanbul ignore next */
                cov_11rqno7mlg().b[50][0]++;
                cov_11rqno7mlg().s[178]++;
                result += `\n🚫 Transfer was cancelled.`;
              } else
              /* istanbul ignore next */
              {
                cov_11rqno7mlg().b[50][1]++;
              }
            }
          }
        }
        /* istanbul ignore next */
        cov_11rqno7mlg().s[179]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[180]++;
        throw new UserError(`Failed to get transfer progress: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[51][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[51][1]++, 'Unknown error')}`);
      }
    }
  });
  // List active transfers tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[181]++;
  server.addTool({
    name: 'list-active-transfers',
    description: 'List all currently active file transfers with their progress.',
    parameters: z.object({}),
    annotations: {
      title: 'List Active Transfers',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async () => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[16]++;
      cov_11rqno7mlg().s[182]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[183]++, getFileHandler());
        const transfers =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[184]++, handler.getActiveTransfers());
        /* istanbul ignore next */
        cov_11rqno7mlg().s[185]++;
        if (transfers.length === 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[52][0]++;
          cov_11rqno7mlg().s[186]++;
          return 'No active transfers found.';
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[52][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[187]++, `🔄 **Active Transfers (${transfers.length})**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[188]++;
        transfers.forEach((transfer, index) => {
          /* istanbul ignore next */
          cov_11rqno7mlg().f[17]++;
          cov_11rqno7mlg().s[189]++;
          result += `${index + 1}. **${transfer.fileName}**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[190]++;
          result += `   - Transfer ID: ${transfer.transferId}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[191]++;
          result += `   - Status: ${transfer.status.toUpperCase()}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[192]++;
          result += `   - Progress: ${transfer.percentComplete}%\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[193]++;
          result += `   - Size: ${formatFileSize(transfer.transferredBytes)} / ${formatFileSize(transfer.totalBytes)}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[194]++;
          result += `   - Started: ${new Date(transfer.startedAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[195]++;
          if (transfer.error) {
            /* istanbul ignore next */
            cov_11rqno7mlg().b[53][0]++;
            cov_11rqno7mlg().s[196]++;
            result += `   - Error: ${transfer.error}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_11rqno7mlg().b[53][1]++;
          }
          cov_11rqno7mlg().s[197]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_11rqno7mlg().s[198]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[199]++;
        throw new UserError(`Failed to list active transfers: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[54][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[54][1]++, 'Unknown error')}`);
      }
    }
  });
  // Validate file tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[200]++;
  server.addTool({
    name: 'validate-file',
    description: 'Validate a file before upload by checking size, type, and other constraints.',
    parameters: FileValidationSchema,
    annotations: {
      title: 'Validate File',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[18]++;
      cov_11rqno7mlg().s[201]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[202]++, getFileHandler());
        const validation =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[203]++, await handler.validateFile(args.fileName, args.mimeType, args.fileSize, {
          maxFileSize: args.maxFileSize,
          allowedMimeTypes: args.allowedMimeTypes,
          allowedExtensions: args.allowedExtensions
        }));
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[204]++, `🔍 **File Validation Results**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[205]++;
        result += `- **File Name:** ${args.fileName}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[206]++;
        result += `- **MIME Type:** ${args.mimeType}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[207]++;
        result += `- **File Size:** ${formatFileSize(args.fileSize)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[208]++;
        result += `- **Valid:** ${validation.isValid ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[55][0]++, '✅ YES') :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[55][1]++, '❌ NO')}\n\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[209]++;
        if (validation.errors.length > 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[56][0]++;
          cov_11rqno7mlg().s[210]++;
          result += `**❌ Errors:**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[211]++;
          validation.errors.forEach(error => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[19]++;
            cov_11rqno7mlg().s[212]++;
            result += `- ${error}\n`;
          });
          /* istanbul ignore next */
          cov_11rqno7mlg().s[213]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[56][1]++;
        }
        cov_11rqno7mlg().s[214]++;
        if (validation.warnings.length > 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[57][0]++;
          cov_11rqno7mlg().s[215]++;
          result += `**⚠️ Warnings:**\n`;
          /* istanbul ignore next */
          cov_11rqno7mlg().s[216]++;
          validation.warnings.forEach(warning => {
            /* istanbul ignore next */
            cov_11rqno7mlg().f[20]++;
            cov_11rqno7mlg().s[217]++;
            result += `- ${warning}\n`;
          });
          /* istanbul ignore next */
          cov_11rqno7mlg().s[218]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[57][1]++;
        }
        cov_11rqno7mlg().s[219]++;
        if (validation.isValid) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[58][0]++;
          cov_11rqno7mlg().s[220]++;
          result += `✅ File is valid and ready for upload!`;
        } else {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[58][1]++;
          cov_11rqno7mlg().s[221]++;
          result += `❌ File validation failed. Please fix the errors above before uploading.`;
        }
        /* istanbul ignore next */
        cov_11rqno7mlg().s[222]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[223]++;
        throw new UserError(`Failed to validate file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[59][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[59][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get storage statistics tool
  /* istanbul ignore next */
  cov_11rqno7mlg().s[224]++;
  server.addTool({
    name: 'get-storage-stats',
    description: 'Get storage statistics including total files, disk usage, and file distribution.',
    parameters: z.object({}),
    annotations: {
      title: 'Get Storage Statistics',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async () => {
      /* istanbul ignore next */
      cov_11rqno7mlg().f[21]++;
      cov_11rqno7mlg().s[225]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[226]++, getFileHandler());
        const stats =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[227]++, await handler.getStorageStats());
        let result =
        /* istanbul ignore next */
        (cov_11rqno7mlg().s[228]++, `📊 **Storage Statistics**\n\n`);
        /* istanbul ignore next */
        cov_11rqno7mlg().s[229]++;
        result += `- **Total Files:** ${stats.totalFiles.toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[230]++;
        result += `- **Total Size:** ${formatFileSize(stats.totalSize)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[231]++;
        result += `- **Average File Size:** ${formatFileSize(stats.averageFileSize)}\n`;
        /* istanbul ignore next */
        cov_11rqno7mlg().s[232]++;
        if (stats.oldestFile) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[60][0]++;
          cov_11rqno7mlg().s[233]++;
          result += `- **Oldest File:** ${new Date(stats.oldestFile).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[60][1]++;
        }
        cov_11rqno7mlg().s[234]++;
        if (stats.newestFile) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[61][0]++;
          cov_11rqno7mlg().s[235]++;
          result += `- **Newest File:** ${new Date(stats.newestFile).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[61][1]++;
        }
        cov_11rqno7mlg().s[236]++;
        if (stats.totalFiles === 0) {
          /* istanbul ignore next */
          cov_11rqno7mlg().b[62][0]++;
          cov_11rqno7mlg().s[237]++;
          result += `\n📁 No files currently in storage.`;
        } else
        /* istanbul ignore next */
        {
          cov_11rqno7mlg().b[62][1]++;
        }
        cov_11rqno7mlg().s[238]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_11rqno7mlg().s[239]++;
        throw new UserError(`Failed to get storage statistics: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[63][0]++, error.message) :
        /* istanbul ignore next */
        (cov_11rqno7mlg().b[63][1]++, 'Unknown error')}`);
      }
    }
  });
}
// Helper function to format file sizes
function formatFileSize(bytes) {
  /* istanbul ignore next */
  cov_11rqno7mlg().f[22]++;
  cov_11rqno7mlg().s[240]++;
  if (bytes === 0) {
    /* istanbul ignore next */
    cov_11rqno7mlg().b[64][0]++;
    cov_11rqno7mlg().s[241]++;
    return '0 Bytes';
  } else
  /* istanbul ignore next */
  {
    cov_11rqno7mlg().b[64][1]++;
  }
  const k =
  /* istanbul ignore next */
  (cov_11rqno7mlg().s[242]++, 1024);
  const sizes =
  /* istanbul ignore next */
  (cov_11rqno7mlg().s[243]++, ['Bytes', 'KB', 'MB', 'GB', 'TB']);
  const i =
  /* istanbul ignore next */
  (cov_11rqno7mlg().s[244]++, Math.floor(Math.log(bytes) / Math.log(k)));
  /* istanbul ignore next */
  cov_11rqno7mlg().s[245]++;
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,