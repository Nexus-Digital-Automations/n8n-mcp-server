0865499c3914fb62b91c68c6d60cd58a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('../../../src/client/n8nClient');
const workflowResources_1 = require("../../../src/resources/workflowResources");
// Mock console methods to avoid test output pollution
const mockConsoleLog = globals_1.jest.fn();
globals_1.jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);
(0, globals_1.describe)('WorkflowResourceManager', () => {
    let workflowManager;
    let mockServer;
    let mockClient;
    let getClientFn;
    // Mock workflow data
    const mockWorkflow = {
        id: 'workflow-123',
        name: 'Test Workflow',
        active: true,
        tags: ['test', 'automation'],
        createdAt: '2023-01-01T10:00:00Z',
        updatedAt: '2023-01-01T12:00:00Z',
        nodes: [
            { id: 'node1', type: 'n8n-nodes-base.httpRequest', name: 'HTTP Request' },
            { id: 'node2', type: 'n8n-nodes-base.code', name: 'Code' },
        ],
        connections: {
            'HTTP Request': {
                main: [
                    [
                        {
                            node: 'Code',
                            type: 'main',
                            index: 0,
                        },
                    ],
                ],
            },
        },
    };
    const mockInactiveWorkflow = {
        id: 'workflow-456',
        name: 'Inactive Workflow',
        active: false,
        tags: ['draft'],
        createdAt: '2023-01-02T10:00:00Z',
        updatedAt: '2023-01-02T11:00:00Z',
        nodes: [{ id: 'node3', type: 'n8n-nodes-base.webhook', name: 'Webhook' }],
        connections: {},
    };
    (0, globals_1.beforeEach)(() => {
        // Create mock instances
        mockServer = {
            addResource: globals_1.jest.fn(),
            addResourceTemplate: globals_1.jest.fn(),
        };
        mockClient = {
            getWorkflow: globals_1.jest.fn(),
            getWorkflows: globals_1.jest.fn(),
        };
        getClientFn = globals_1.jest.fn().mockReturnValue(mockClient);
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        mockConsoleLog.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Constructor and Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                baseUri: 'custom://workflows',
                maxWorkflows: 25,
                includeInactive: false,
                includeExecutions: true,
                cacheDuration: 10000,
            };
            workflowManager = new workflowResources_1.WorkflowResourceManager(config);
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should merge custom config with defaults', () => {
            const config = {
                maxWorkflows: 200,
                includeExecutions: true,
            };
            workflowManager = new workflowResources_1.WorkflowResourceManager(config);
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
    });
    (0, globals_1.describe)('Resource Registration', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
        });
        (0, globals_1.it)('should register all workflow resources', () => {
            workflowManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://workflows/{id}',
                name: 'n8n Workflow',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://workflows/{workflowId}',
                name: 'n8n Workflow by ID',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/list',
                name: 'n8n Workflow List',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/active',
                name: 'n8n Active Workflows',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/stats',
                name: 'n8n Workflow Statistics',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('ðŸ“„ Workflow resources registered');
        });
        (0, globals_1.it)('should register workflow template with correct arguments', () => {
            workflowManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n workflow',
                required: true,
            });
        });
        (0, globals_1.it)('should register duplicate workflow template with workflowId parameter', () => {
            workflowManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'workflowId',
                description: 'The ID of the n8n workflow',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('Individual Workflow Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow resource successfully', async () => {
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
            (0, globals_1.expect)(data.name).toBe('Test Workflow');
            (0, globals_1.expect)(data.active).toBe(true);
            (0, globals_1.expect)(data.metadata).toBeDefined();
            (0, globals_1.expect)(data.metadata.id).toBe('workflow-123');
            (0, globals_1.expect)(data.metadata.nodeCount).toBe(2);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(1);
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow');
        });
        (0, globals_1.it)('should handle workflow with no nodes or connections', async () => {
            const emptyWorkflow = {
                ...mockWorkflow,
                nodes: [],
                connections: {},
            };
            mockClient.getWorkflow.mockResolvedValue(emptyWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.nodeCount).toBe(0);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(0);
        });
        (0, globals_1.it)('should load workflow using workflowId template', async () => {
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
        });
        (0, globals_1.it)('should throw error when client not initialized', async () => {
            // Clear all previous mock calls first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            const nullClientFn = globals_1.jest.fn().mockReturnValue(null);
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, nullClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getWorkflow.mockRejectedValue(new Error('Workflow not found'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('Failed to load workflow workflow-123: Workflow not found');
        });
        (0, globals_1.it)('should handle workflow with no tags', async () => {
            const workflowWithoutTags = {
                ...mockWorkflow,
                tags: [],
            };
            mockClient.getWorkflow.mockResolvedValue(workflowWithoutTags);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.tags).toEqual([]);
        });
    });
    (0, globals_1.describe)('Workflow List Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow list successfully', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows).toHaveLength(2);
            (0, globals_1.expect)(data.workflows[0].id).toBe('workflow-123');
            (0, globals_1.expect)(data.workflows[0].name).toBe('Test Workflow');
            (0, globals_1.expect)(data.workflows[0].active).toBe(true);
            (0, globals_1.expect)(data.workflows[0].uri).toBe('n8n://workflows/workflow-123');
            (0, globals_1.expect)(data.workflows[1].id).toBe('workflow-456');
            (0, globals_1.expect)(data.workflows[1].active).toBe(false);
            (0, globals_1.expect)(data.metadata.total).toBe(2);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-list');
        });
        (0, globals_1.it)('should handle empty workflow list', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle workflow list API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('List API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load workflow list: List API Error');
        });
        (0, globals_1.it)('should handle workflows with missing tags', async () => {
            const workflowsWithMixedTags = [
                { ...mockWorkflow, tags: undefined },
                { ...mockInactiveWorkflow, tags: undefined },
            ];
            mockClient.getWorkflows.mockResolvedValue({ data: workflowsWithMixedTags });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows[0].tags).toEqual([]);
            (0, globals_1.expect)(data.workflows[1].tags).toEqual([]);
        });
    });
    (0, globals_1.describe)('Active Workflows Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load active workflows successfully', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.activeWorkflows).toHaveLength(1); // Only active workflow
            (0, globals_1.expect)(data.activeWorkflows[0].id).toBe('workflow-123');
            (0, globals_1.expect)(data.activeWorkflows[0].name).toBe('Test Workflow');
            (0, globals_1.expect)(data.activeWorkflows[0].lastExecution).toBe('2023-01-01T12:00:00Z');
            (0, globals_1.expect)(data.metadata.total).toBe(1);
            (0, globals_1.expect)(data.metadata.activeOnly).toBe(true);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-active-workflows');
        });
        (0, globals_1.it)('should handle no active workflows', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockInactiveWorkflow], // Only inactive workflow
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.activeWorkflows).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle active workflows API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('Active API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load active workflows: Active API Error');
        });
    });
    (0, globals_1.describe)('Workflow Statistics Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow statistics successfully', async () => {
            const recentWorkflow = {
                ...mockWorkflow,
                id: 'workflow-789',
                createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
                updatedAt: new Date(Date.now() - 60 * 60 * 1000).toISOString(), // 1 hour ago
                tags: ['test', 'recent'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow, recentWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalWorkflows).toBe(3);
            (0, globals_1.expect)(data.activeWorkflows).toBe(2); // mockWorkflow and recentWorkflow are active
            (0, globals_1.expect)(data.inactiveWorkflows).toBe(1);
            (0, globals_1.expect)(data.tagUsage).toBeDefined();
            (0, globals_1.expect)(data.tagUsage.test).toBe(2); // Present in mockWorkflow and recentWorkflow
            (0, globals_1.expect)(data.tagUsage.automation).toBe(1);
            (0, globals_1.expect)(data.tagUsage.draft).toBe(1);
            (0, globals_1.expect)(data.tagUsage.recent).toBe(1);
            (0, globals_1.expect)(data.creationStats).toBeDefined();
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-stats');
        });
        (0, globals_1.it)('should handle empty workflows for statistics', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalWorkflows).toBe(0);
            (0, globals_1.expect)(data.activeWorkflows).toBe(0);
            (0, globals_1.expect)(data.inactiveWorkflows).toBe(0);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
        (0, globals_1.it)('should handle stats API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('Stats API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load workflow statistics: Stats API Error');
        });
        (0, globals_1.it)('should handle workflows with string tags', async () => {
            const workflowWithStringTags = {
                ...mockWorkflow,
                tags: ['string-tag-1', 'string-tag-2'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithStringTags],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage['string-tag-1']).toBe(1);
            (0, globals_1.expect)(data.tagUsage['string-tag-2']).toBe(1);
        });
        (0, globals_1.it)('should handle workflows with mixed tag formats', async () => {
            const workflowWithMixedTags = {
                ...mockWorkflow,
                tags: ['object-tag', 'string-tag'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithMixedTags],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage['object-tag']).toBe(1);
            (0, globals_1.expect)(data.tagUsage['string-tag']).toBe(1);
        });
    });
    (0, globals_1.describe)('Cache Management', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 1000 });
        });
        (0, globals_1.it)('should cache workflow data', async () => {
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should cache workflow list data', async () => {
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            // First call
            await resource.load();
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await resource.load();
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should clear cache', () => {
            workflowManager.clearCache();
            // Should not throw
        });
        (0, globals_1.it)('should get cache statistics', () => {
            const stats = workflowManager.getCacheStats();
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(typeof stats.size).toBe('number');
            (0, globals_1.expect)(Array.isArray(stats.keys)).toBe(true);
        });
        (0, globals_1.it)('should not cache when duration is 0', () => {
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 0 });
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            return template
                .load({ id: 'workflow-123' })
                .then(() => {
                return template.load({ id: 'workflow-123' });
            })
                .then(() => {
                (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(2);
            });
        });
        (0, globals_1.it)('should handle cache expiration', async () => {
            globals_1.jest.useFakeTimers();
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 1 }); // 1ms cache
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(10);
            // Second call should not use expired cache
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(2);
            globals_1.jest.useRealTimers();
        });
    });
    (0, globals_1.describe)('Factory Function', () => {
        (0, globals_1.it)('should create workflow resource manager with factory function', () => {
            const manager = (0, workflowResources_1.createWorkflowResources)();
            (0, globals_1.expect)(manager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should create workflow resource manager with config via factory', () => {
            const config = { maxWorkflows: 50, includeInactive: false };
            const manager = (0, workflowResources_1.createWorkflowResources)(config);
            (0, globals_1.expect)(manager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
    });
    (0, globals_1.describe)('Tag Usage Calculation', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should calculate tag usage correctly with object tags', async () => {
            const workflowsWithObjectTags = [
                {
                    ...mockWorkflow,
                    tags: ['production', 'api'],
                },
                {
                    ...mockInactiveWorkflow,
                    tags: ['production', 'webhook'],
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithObjectTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage.production).toBe(2);
            (0, globals_1.expect)(data.tagUsage.api).toBe(1);
            (0, globals_1.expect)(data.tagUsage.webhook).toBe(1);
        });
        (0, globals_1.it)('should handle workflows with no tags gracefully', async () => {
            const workflowsWithNoTags = [
                { ...mockWorkflow, tags: undefined },
                { ...mockInactiveWorkflow, tags: undefined },
                { ...mockWorkflow, id: 'workflow-789', tags: [] },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithNoTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
        (0, globals_1.it)('should handle workflows with non-array tags', async () => {
            const workflowsWithInvalidTags = [
                { ...mockWorkflow, tags: 'invalid' },
                { ...mockInactiveWorkflow, tags: { invalid: true } },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithInvalidTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
    });
    (0, globals_1.describe)('Creation Statistics', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should calculate creation statistics correctly', async () => {
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            const workflowsWithDifferentDates = [
                {
                    ...mockWorkflow,
                    createdAt: oneDayAgo.toISOString(),
                    updatedAt: oneDayAgo.toISOString(),
                },
                {
                    ...mockInactiveWorkflow,
                    createdAt: oneWeekAgo.toISOString(),
                    updatedAt: oneDayAgo.toISOString(),
                },
                {
                    ...mockWorkflow,
                    id: 'workflow-789',
                    createdAt: oneMonthAgo.toISOString(),
                    updatedAt: oneMonthAgo.toISOString(),
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithDifferentDates,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(data.creationStats.createdLastMonth).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBeGreaterThanOrEqual(2);
            (0, globals_1.expect)(data.creationStats.updatedLastMonth).toBeGreaterThanOrEqual(2);
        });
        (0, globals_1.it)('should handle invalid date formats', async () => {
            const workflowsWithInvalidDates = [
                {
                    ...mockWorkflow,
                    createdAt: 'invalid-date',
                    updatedAt: undefined,
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithInvalidDates,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBe(0);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBe(0);
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            mockClient.getWorkflow.mockRejectedValue('String error');
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('Failed to load workflow workflow-123: String error');
        });
        (0, globals_1.it)('should handle malformed workflow data', async () => {
            const malformedWorkflow = {
                id: 'workflow-123',
                // Missing required fields
                name: undefined,
                active: undefined,
                nodes: [],
                connections: {},
            };
            mockClient.getWorkflow.mockResolvedValue(malformedWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
            (0, globals_1.expect)(data.metadata.tags).toEqual([]);
        });
        (0, globals_1.it)('should handle workflows with complex connection objects', async () => {
            const workflowWithComplexConnections = {
                ...mockWorkflow,
                connections: {
                    'HTTP Request': {
                        main: [
                            [
                                { node: 'Code', type: 'main', index: 0 },
                                { node: 'Another Node', type: 'main', index: 1 },
                            ],
                        ],
                        secondary: [[{ node: 'Error Handler', type: 'main', index: 0 }]],
                    },
                    Code: {
                        main: [[{ node: 'Final Node', type: 'main', index: 0 }]],
                    },
                },
            };
            mockClient.getWorkflow.mockResolvedValue(workflowWithComplexConnections);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(2); // HTTP Request and Code have connections
        });
        (0, globals_1.it)('should handle empty workflow list gracefully in all resources', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            // Test list resource
            const listResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!listResourceCall)
                throw new Error('List resource call not found');
            const listResource = listResourceCall[0];
            const listResult = await listResource.load();
            const listData = JSON.parse(listResult.text);
            (0, globals_1.expect)(listData.workflows).toHaveLength(0);
            // Test active resource
            const activeResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!activeResourceCall)
                throw new Error('Active resource call not found');
            const activeResource = activeResourceCall[0];
            const activeResult = await activeResource.load();
            const activeData = JSON.parse(activeResult.text);
            (0, globals_1.expect)(activeData.activeWorkflows).toHaveLength(0);
            // Test stats resource
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const statsResult = await statsResource.load();
            const statsData = JSON.parse(statsResult.text);
            (0, globals_1.expect)(statsData.totalWorkflows).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,