{"version":3,"names":["os","cov_1dcgrbr8i","s","__importStar","require","fs","util_1","stat","promisify","ResourceMonitor","config","dataPoints","alerts","monitoringInterval","startTime","executionHistory","Map","constructor","f","Date","now","monitoring","enabled","intervalMs","retentionDays","alertThresholds","cpuUsage","memoryUsage","diskUsage","executionTime","errorRate","collection","systemMetrics","workflowMetrics","nodeMetrics","healthChecks","storage","inMemory","persistToDisk","maxDataPoints","compressionEnabled","startMonitoring","b","clearInterval","setInterval","collectMetrics","error","console","log","stopMonitoring","timestamp","toISOString","getSystemResourceUsage","addDataPoint","metricType","data","tags","source","checkResourceThresholds","cleanupOldDataPoints","getCPUUsage","memoryInfo","getMemoryUsage","diskInfo","getDiskUsage","networkInfo","getNetworkUsage","cpu","totalUsage","processUsage","loadAverage","loadavg","coreCount","cpus","length","memory","totalMemory","totalmem","freeMemory","freemem","usedMemory","processMemory","utilization","disk","network","uptime","Promise","resolve","startUsage","process","hrtime","setTimeout","currentUsage","currentTime","elapsedTime","totalCPUTime","user","system","loadAvg","Math","min","round","memUsage","heapUsed","heapTotal","external","rss","stats","cwd","totalSpace","freeSpace","usedSpace","bytesReceived","bytesSent","packetsReceived","packetsSent","getWorkflowResourceUsage","workflowId","workflowName","isActive","get","recentExecutions","filter","exec","successfulRuns","success","totalRuns","totalExecutionTime","reduce","sum","duration","averageExecutionTime","executionCount","resourceMetrics","lastExecutionTime","average","peak","current","executionStats","failedRuns","successRate","lastExecution","averageRunsPerHour","calculateRunsPerHour","nodePerformance","executions","timeSpanHours","getInstanceHealthMetrics","systemUsage","issues","recommendations","push","healthScore","calculateHealthScore","status","determineHealthStatus","overall","score","performance","responseTime","throughput","availabilityUptime","resources","memoryPressure","cpuThrottling","diskSpaceWarning","networkLatency","dependencies","name","type","errorCount","alert","resolvedAt","map","id","severity","message","description","triggeredAt","resolved","Boolean","issueCount","max","thresholds","createAlert","title","toFixed","metadata","threshold","actualValue","alertData","random","toString","substr","actions","a","getTime","recordWorkflowExecution","has","set","history","splice","dataPoint","cutoffTime","dp","getMetrics","slice","workflows","health","getDataPoints","limit","points","getAlerts","undefined","sort","resolveAlert","alertId","find","updateConfig","newConfig","getConfig","exports"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts"],"sourcesContent":["import * as os from 'os';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  ResourceMonitoringConfig,\n  MonitoringDataPoint,\n  PerformanceAlert,\n  ResourceThresholds,\n  MonitoringMetrics,\n} from '../types/monitoringTypes.js';\n\nconst stat = promisify(fs.stat);\n\nexport class ResourceMonitor {\n  private config: ResourceMonitoringConfig;\n  private dataPoints: MonitoringDataPoint[] = [];\n  private alerts: PerformanceAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private startTime: number;\n  private executionHistory: Map<string, Array<{ timestamp: number; duration: number; success: boolean }>> = new Map();\n\n  constructor(config?: Partial<ResourceMonitoringConfig>) {\n    this.startTime = Date.now();\n    this.config = {\n      monitoring: {\n        enabled: true,\n        intervalMs: 30000, // 30 seconds default\n        retentionDays: 7,\n        alertThresholds: {\n          cpuUsage: 80,\n          memoryUsage: 85,\n          diskUsage: 90,\n          executionTime: 300000, // 5 minutes\n          errorRate: 10,\n        },\n      },\n      collection: {\n        systemMetrics: true,\n        workflowMetrics: true,\n        nodeMetrics: true,\n        healthChecks: true,\n      },\n      storage: {\n        inMemory: true,\n        persistToDisk: false,\n        maxDataPoints: 10000,\n        compressionEnabled: false,\n      },\n      ...config,\n    };\n  }\n\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    if (!this.config.monitoring.enabled) {\n      return;\n    }\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.collectMetrics();\n      } catch (error) {\n        console.error('Error collecting metrics:', error);\n      }\n    }, this.config.monitoring.intervalMs);\n\n    console.log(`Resource monitoring started with ${this.config.monitoring.intervalMs}ms interval`);\n  }\n\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n      console.log('Resource monitoring stopped');\n    }\n  }\n\n  private async collectMetrics(): Promise<void> {\n    const timestamp = new Date().toISOString();\n\n    if (this.config.collection.systemMetrics) {\n      const systemMetrics = await this.getSystemResourceUsage();\n      this.addDataPoint({\n        timestamp,\n        metricType: 'system',\n        data: systemMetrics as unknown as Record<string, unknown>,\n        tags: { source: 'system' },\n      });\n      \n      await this.checkResourceThresholds(systemMetrics);\n    }\n\n    // Clean up old data points\n    this.cleanupOldDataPoints();\n  }\n\n  async getSystemResourceUsage(): Promise<SystemResourceUsage> {\n    const cpuUsage = await this.getCPUUsage();\n    const memoryInfo = this.getMemoryUsage();\n    const diskInfo = await this.getDiskUsage();\n    const networkInfo = await this.getNetworkUsage();\n\n    return {\n      cpu: {\n        totalUsage: cpuUsage.totalUsage,\n        processUsage: cpuUsage.processUsage,\n        loadAverage: os.loadavg(),\n        coreCount: os.cpus().length,\n      },\n      memory: {\n        totalMemory: os.totalmem(),\n        freeMemory: os.freemem(),\n        usedMemory: os.totalmem() - os.freemem(),\n        processMemory: memoryInfo,\n        utilization: ((os.totalmem() - os.freemem()) / os.totalmem()) * 100,\n      },\n      disk: diskInfo,\n      network: networkInfo,\n      uptime: (Date.now() - this.startTime) / 1000,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async getCPUUsage(): Promise<{ totalUsage: number; processUsage: number }> {\n    return new Promise((resolve) => {\n      const startUsage = process.cpuUsage();\n      const startTime = process.hrtime();\n\n      setTimeout(() => {\n        const currentUsage = process.cpuUsage(startUsage);\n        const currentTime = process.hrtime(startTime);\n        \n        const elapsedTime = currentTime[0] * 1000000 + currentTime[1] / 1000; // microseconds\n        const totalCPUTime = currentUsage.user + currentUsage.system;\n        const processUsage = (totalCPUTime / elapsedTime) * 100;\n\n        // System CPU usage approximation based on load average\n        const loadAvg = os.loadavg()[0];\n        const coreCount = os.cpus().length;\n        const totalUsage = Math.min((loadAvg / coreCount) * 100, 100);\n\n        resolve({\n          totalUsage: Math.round(totalUsage * 100) / 100,\n          processUsage: Math.round(processUsage * 100) / 100,\n        });\n      }, 100);\n    });\n  }\n\n  private getMemoryUsage(): SystemResourceUsage['memory']['processMemory'] {\n    const memUsage = process.memoryUsage();\n    return {\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      rss: memUsage.rss,\n    };\n  }\n\n  private async getDiskUsage(): Promise<SystemResourceUsage['disk']> {\n    try {\n      const stats = await stat(process.cwd());\n      \n      // This is a simplified implementation\n      // In production, you'd use platform-specific methods to get actual disk usage\n      const totalSpace = 1000000000000; // 1TB placeholder\n      const freeSpace = 500000000000; // 500GB placeholder\n      const usedSpace = totalSpace - freeSpace;\n      \n      return {\n        totalSpace,\n        freeSpace,\n        usedSpace,\n        utilization: (usedSpace / totalSpace) * 100,\n      };\n    } catch (error) {\n      return {\n        totalSpace: 0,\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      };\n    }\n  }\n\n  private async getNetworkUsage(): Promise<SystemResourceUsage['network']> {\n    // Simplified network usage - in production you'd read from /proc/net/dev on Linux\n    // or use platform-specific APIs\n    return {\n      bytesReceived: 0,\n      bytesSent: 0,\n      packetsReceived: 0,\n      packetsSent: 0,\n    };\n  }\n\n  async getWorkflowResourceUsage(workflowId: string, workflowName: string, isActive: boolean): Promise<WorkflowResourceUsage> {\n    const executionHistory = this.executionHistory.get(workflowId) || [];\n    const recentExecutions = executionHistory.filter(exec => \n      Date.now() - exec.timestamp < 24 * 60 * 60 * 1000 // Last 24 hours\n    );\n\n    const successfulRuns = recentExecutions.filter(exec => exec.success).length;\n    const totalRuns = recentExecutions.length;\n    const totalExecutionTime = recentExecutions.reduce((sum, exec) => sum + exec.duration, 0);\n    const averageExecutionTime = totalRuns > 0 ? totalExecutionTime / totalRuns : 0;\n\n    return {\n      workflowId,\n      workflowName,\n      isActive,\n      executionCount: totalRuns,\n      resourceMetrics: {\n        averageExecutionTime: Math.round(averageExecutionTime),\n        lastExecutionTime: recentExecutions.length > 0 ? recentExecutions[recentExecutions.length - 1].duration : 0,\n        totalExecutionTime: Math.round(totalExecutionTime),\n        memoryUsage: {\n          average: 50000000, // 50MB placeholder\n          peak: 100000000, // 100MB placeholder\n          current: isActive ? 75000000 : 0, // 75MB placeholder\n        },\n        cpuUsage: {\n          average: 15, // 15% placeholder\n          peak: 80, // 80% placeholder\n          current: isActive ? 25 : 0, // 25% placeholder\n        },\n      },\n      executionStats: {\n        successfulRuns,\n        failedRuns: totalRuns - successfulRuns,\n        totalRuns,\n        successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 100,\n        lastExecution: recentExecutions.length > 0 \n          ? new Date(recentExecutions[recentExecutions.length - 1].timestamp).toISOString()\n          : new Date().toISOString(),\n        averageRunsPerHour: this.calculateRunsPerHour(recentExecutions),\n      },\n      nodePerformance: [], // Would be populated with actual node performance data\n    };\n  }\n\n  private calculateRunsPerHour(executions: Array<{ timestamp: number; duration: number; success: boolean }>): number {\n    if (executions.length === 0) return 0;\n    \n    const timeSpanHours = (Date.now() - executions[0].timestamp) / (1000 * 60 * 60);\n    return timeSpanHours > 0 ? executions.length / timeSpanHours : 0;\n  }\n\n  async getInstanceHealthMetrics(): Promise<InstanceHealthMetrics> {\n    const systemUsage = await this.getSystemResourceUsage();\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    \n    // Analyze system health\n    if (systemUsage.cpu.totalUsage > 80) {\n      issues.push('High CPU usage detected');\n      recommendations.push('Consider scaling horizontally or optimizing workflow execution');\n    }\n    \n    if (systemUsage.memory.utilization > 85) {\n      issues.push('High memory usage detected');\n      recommendations.push('Monitor memory-intensive workflows and consider increasing available memory');\n    }\n    \n    if (systemUsage.disk.utilization > 90) {\n      issues.push('Low disk space warning');\n      recommendations.push('Clean up old execution data and logs');\n    }\n\n    const healthScore = this.calculateHealthScore(systemUsage, issues.length);\n    const status = this.determineHealthStatus(healthScore, issues.length);\n\n    return {\n      overall: {\n        status,\n        score: healthScore,\n        issues,\n        recommendations,\n      },\n      performance: {\n        responseTime: 150, // Placeholder - would measure actual API response time\n        throughput: 10, // Placeholder - executions per minute\n        errorRate: 2, // Placeholder - error percentage\n        availabilityUptime: 99.5, // Placeholder - uptime percentage\n      },\n      resources: {\n        memoryPressure: systemUsage.memory.utilization > 85,\n        cpuThrottling: systemUsage.cpu.totalUsage > 90,\n        diskSpaceWarning: systemUsage.disk.utilization > 90,\n        networkLatency: 50, // Placeholder\n      },\n      dependencies: [\n        {\n          name: 'Database',\n          type: 'database',\n          status: 'online',\n          responseTime: 25,\n          errorCount: 0,\n        },\n        {\n          name: 'File System',\n          type: 'file_system',\n          status: 'online',\n          responseTime: 10,\n          errorCount: 0,\n        },\n      ],\n      alerts: this.alerts.filter(alert => !alert.resolvedAt).map(alert => ({\n        id: alert.id,\n        severity: alert.severity as 'info' | 'warning' | 'error' | 'critical',\n        message: alert.description,\n        timestamp: alert.triggeredAt,\n        resolved: Boolean(alert.resolvedAt),\n      })),\n    };\n  }\n\n  private calculateHealthScore(systemUsage: SystemResourceUsage, issueCount: number): number {\n    let score = 100;\n    \n    // Deduct points based on resource usage\n    score -= Math.max(0, systemUsage.cpu.totalUsage - 50) * 0.5;\n    score -= Math.max(0, systemUsage.memory.utilization - 60) * 0.3;\n    score -= Math.max(0, systemUsage.disk.utilization - 70) * 0.2;\n    \n    // Deduct points for issues\n    score -= issueCount * 10;\n    \n    return Math.max(0, Math.min(100, Math.round(score)));\n  }\n\n  private determineHealthStatus(score: number, issueCount: number): 'healthy' | 'warning' | 'critical' | 'degraded' {\n    if (score >= 90 && issueCount === 0) return 'healthy';\n    if (score >= 70 && issueCount <= 1) return 'warning';\n    if (score >= 50) return 'degraded';\n    return 'critical';\n  }\n\n  private async checkResourceThresholds(systemUsage: SystemResourceUsage): Promise<void> {\n    const thresholds = this.config.monitoring.alertThresholds;\n    \n    if (systemUsage.cpu.totalUsage > thresholds.cpuUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.cpu.totalUsage > 95 ? 'critical' : 'high',\n        title: 'High CPU Usage',\n        description: `CPU usage is ${systemUsage.cpu.totalUsage.toFixed(1)}%, exceeding threshold of ${thresholds.cpuUsage}%`,\n        metadata: {\n          threshold: thresholds.cpuUsage,\n          actualValue: systemUsage.cpu.totalUsage,\n        },\n      });\n    }\n    \n    if (systemUsage.memory.utilization > thresholds.memoryUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.memory.utilization > 95 ? 'critical' : 'high',\n        title: 'High Memory Usage',\n        description: `Memory usage is ${systemUsage.memory.utilization.toFixed(1)}%, exceeding threshold of ${thresholds.memoryUsage}%`,\n        metadata: {\n          threshold: thresholds.memoryUsage,\n          actualValue: systemUsage.memory.utilization,\n        },\n      });\n    }\n  }\n\n  private async createAlert(alertData: Partial<PerformanceAlert>): Promise<void> {\n    const alert: PerformanceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: alertData.type || 'resource_threshold',\n      severity: alertData.severity || 'medium',\n      title: alertData.title || 'Performance Alert',\n      description: alertData.description || 'Performance threshold exceeded',\n      triggeredAt: new Date().toISOString(),\n      metadata: alertData.metadata || {},\n      actions: [],\n    };\n    \n    this.alerts.push(alert);\n    \n    // Keep only recent alerts\n    this.alerts = this.alerts.filter(a => \n      Date.now() - new Date(a.triggeredAt).getTime() < 24 * 60 * 60 * 1000\n    );\n  }\n\n  recordWorkflowExecution(workflowId: string, duration: number, success: boolean): void {\n    if (!this.executionHistory.has(workflowId)) {\n      this.executionHistory.set(workflowId, []);\n    }\n    \n    const history = this.executionHistory.get(workflowId)!;\n    history.push({\n      timestamp: Date.now(),\n      duration,\n      success,\n    });\n    \n    // Keep only last 1000 executions per workflow\n    if (history.length > 1000) {\n      history.splice(0, history.length - 1000);\n    }\n  }\n\n  private addDataPoint(dataPoint: MonitoringDataPoint): void {\n    this.dataPoints.push(dataPoint);\n    \n    // Enforce max data points limit\n    if (this.dataPoints.length > this.config.storage.maxDataPoints) {\n      this.dataPoints.splice(0, this.dataPoints.length - this.config.storage.maxDataPoints);\n    }\n  }\n\n  private cleanupOldDataPoints(): void {\n    const cutoffTime = Date.now() - (this.config.monitoring.retentionDays * 24 * 60 * 60 * 1000);\n    this.dataPoints = this.dataPoints.filter(dp => \n      new Date(dp.timestamp).getTime() > cutoffTime\n    );\n  }\n\n  getMetrics(): MonitoringMetrics {\n    return {\n      system: (this.dataPoints\n        .filter(dp => dp.metricType === 'system')\n        .slice(-1)[0]?.data as unknown as SystemResourceUsage) || {} as SystemResourceUsage,\n      workflows: [],\n      health: {} as InstanceHealthMetrics,\n      alerts: this.alerts,\n      dataPoints: this.dataPoints,\n    };\n  }\n\n  getDataPoints(metricType?: string, limit?: number): MonitoringDataPoint[] {\n    let points = this.dataPoints;\n    \n    if (metricType) {\n      points = points.filter(dp => dp.metricType === metricType);\n    }\n    \n    if (limit) {\n      points = points.slice(-limit);\n    }\n    \n    return points;\n  }\n\n  getAlerts(severity?: string, resolved?: boolean): PerformanceAlert[] {\n    let alerts = this.alerts;\n    \n    if (severity) {\n      alerts = alerts.filter(alert => alert.severity === severity);\n    }\n    \n    if (resolved !== undefined) {\n      alerts = alerts.filter(alert => Boolean(alert.resolvedAt) === resolved);\n    }\n    \n    return alerts.sort((a, b) => \n      new Date(b.triggeredAt).getTime() - new Date(a.triggeredAt).getTime()\n    );\n  }\n\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert && !alert.resolvedAt) {\n      alert.resolvedAt = new Date().toISOString();\n      return true;\n    }\n    return false;\n  }\n\n  updateConfig(newConfig: Partial<ResourceMonitoringConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    if (this.monitoringInterval) {\n      this.stopMonitoring();\n      this.startMonitoring();\n    }\n  }\n\n  getConfig(): ResourceMonitoringConfig {\n    return { ...this.config };\n  }\n}"],"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","ignoreList":[]}