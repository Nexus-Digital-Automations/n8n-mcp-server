4545e0e326d08a106b8bc3d03980703b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProjectTools = createProjectTools;
const zod_1 = require("zod");
const fastmcp_1 = require("fastmcp");
// Zod schemas for validation
const ProjectIdSchema = zod_1.z.object({
    projectId: zod_1.z.string().min(1, 'Project ID is required'),
});
const ListProjectsSchema = zod_1.z.object({
    limit: zod_1.z.number().min(1).max(100).optional(),
    cursor: zod_1.z.string().optional(),
});
const CreateProjectSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Project name is required'),
    type: zod_1.z.string().optional(),
});
const UpdateProjectSchema = zod_1.z.object({
    projectId: zod_1.z.string().min(1, 'Project ID is required'),
    name: zod_1.z.string().min(1, 'Project name is required'),
});
// Tool registration function
function createProjectTools(getClient, server) {
    // List projects tool
    server.addTool({
        name: 'list-projects',
        description: 'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled',
        parameters: ListProjectsSchema,
        annotations: {
            title: 'List n8n Projects',
            readOnlyHint: true,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const options = {};
                if (args.limit)
                    options.limit = args.limit;
                if (args.cursor)
                    options.cursor = args.cursor;
                const response = await client.getProjects(options);
                if (response.data.length === 0) {
                    return 'No projects found in the n8n instance.';
                }
                let result = `Found ${response.data.length} project(s):\n\n`;
                response.data.forEach((project, index) => {
                    result += `${index + 1}. **${project.name}**\n`;
                    result += `   - ID: ${project.id}\n`;
                    if (project.type) {
                        result += `   - Type: ${project.type}\n`;
                    }
                    if (project.createdAt) {
                        result += `   - Created: ${new Date(project.createdAt).toLocaleDateString()}\n`;
                    }
                    result += '\n';
                });
                if (response.nextCursor) {
                    result += `\nðŸ“„ Use cursor "${response.nextCursor}" to get the next page.`;
                }
                return result;
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to list projects: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to list projects with unknown error');
            }
        },
    });
    // Create project tool
    server.addTool({
        name: 'create-project',
        description: 'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled',
        parameters: CreateProjectSchema,
        annotations: {
            title: 'Create New Project',
            readOnlyHint: false,
            destructiveHint: false,
            idempotentHint: false,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const projectData = {
                    name: args.name,
                    type: args.type,
                };
                const project = await client.createProject(projectData);
                return (`âœ… Successfully created project "${project.name}" with ID: ${project.id}\n` +
                    (project.type ? `Type: ${project.type}` : ''));
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to create project: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to create project with unknown error');
            }
        },
    });
    // Update project tool
    server.addTool({
        name: 'update-project',
        description: "Update a project's name and properties. NOTE: Requires n8n Enterprise license with project management features enabled",
        parameters: UpdateProjectSchema,
        annotations: {
            title: 'Update Project',
            readOnlyHint: false,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const { projectId, ...updateData } = args;
                const projectData = {
                    name: updateData.name,
                };
                const project = await client.updateProject(projectId, projectData);
                return (`âœ… Successfully updated project "${project.name}" (ID: ${project.id})\n` +
                    (project.type ? `Type: ${project.type}` : ''));
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to update project: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to update project with unknown error');
            }
        },
    });
    // Delete project tool
    server.addTool({
        name: 'delete-project',
        description: 'Delete a project from n8n permanently. NOTE: Requires n8n Enterprise license with project management features enabled',
        parameters: ProjectIdSchema,
        annotations: {
            title: 'Delete Project',
            readOnlyHint: false,
            destructiveHint: true,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                await client.deleteProject(args.projectId);
                return `âœ… Successfully deleted project with ID: ${args.projectId}`;
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with project management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to delete project: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to delete project with unknown error');
            }
        },
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvc3JjL3Rvb2xzL3Byb2plY3RzLnRzIiwibWFwcGluZ3MiOiI7O0FBK0JBLGdEQWlNQztBQWhPRCw2QkFBd0I7QUFDeEIscUNBQW9DO0FBU3BDLDZCQUE2QjtBQUM3QixNQUFNLGVBQWUsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQy9CLFNBQVMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSx3QkFBd0IsQ0FBQztDQUN2RCxDQUFDLENBQUM7QUFFSCxNQUFNLGtCQUFrQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbEMsS0FBSyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUM1QyxNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsRUFBRTtDQUM5QixDQUFDLENBQUM7QUFFSCxNQUFNLG1CQUFtQixHQUFHLE9BQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDBCQUEwQixDQUFDO0lBQ25ELElBQUksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxFQUFFO0NBQzVCLENBQUMsQ0FBQztBQUVILE1BQU0sbUJBQW1CLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUNuQyxTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsd0JBQXdCLENBQUM7SUFDdEQsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLDBCQUEwQixDQUFDO0NBQ3BELENBQUMsQ0FBQztBQUVILDZCQUE2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QUFNLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxPQUFPLDJDQUEyQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDckUsQ0FBQztZQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7Z0JBQ2YsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFLENBQUM7b0JBQzNCLG1DQUFtQztvQkFDbkMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO3dCQUN0QyxNQUFNLElBQUksbUJBQVMsQ0FDakIsc0dBQXNHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FDdEgsQ0FBQztvQkFDSixDQUFDO29CQUNELE1BQU0sSUFBSSxtQkFBUyxDQUFDLDZCQUE2QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDcEUsQ0FBQztnQkFDRCxNQUFNLElBQUksbUJBQVMsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO1lBQ3JFLENBQUM7UUFDSCxDQUFDO0tBQ0YsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci9zcmMvdG9vbHMvcHJvamVjdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBVc2VyRXJyb3IgfSBmcm9tICdmYXN0bWNwJztcbmltcG9ydCB7IE44bkNsaWVudCB9IGZyb20gJy4uL2NsaWVudC9uOG5DbGllbnQuanMnO1xuaW1wb3J0IHtcbiAgTjhuUHJvamVjdCxcbiAgQ3JlYXRlUHJvamVjdFJlcXVlc3QsXG4gIFVwZGF0ZVByb2plY3RSZXF1ZXN0LFxuICBQYWdpbmF0aW9uT3B0aW9ucyxcbn0gZnJvbSAnLi4vdHlwZXMvbjhuLmpzJztcblxuLy8gWm9kIHNjaGVtYXMgZm9yIHZhbGlkYXRpb25cbmNvbnN0IFByb2plY3RJZFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgcHJvamVjdElkOiB6LnN0cmluZygpLm1pbigxLCAnUHJvamVjdCBJRCBpcyByZXF1aXJlZCcpLFxufSk7XG5cbmNvbnN0IExpc3RQcm9qZWN0c1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgbGltaXQ6IHoubnVtYmVyKCkubWluKDEpLm1heCgxMDApLm9wdGlvbmFsKCksXG4gIGN1cnNvcjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IENyZWF0ZVByb2plY3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsICdQcm9qZWN0IG5hbWUgaXMgcmVxdWlyZWQnKSxcbiAgdHlwZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IFVwZGF0ZVByb2plY3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHByb2plY3RJZDogei5zdHJpbmcoKS5taW4oMSwgJ1Byb2plY3QgSUQgaXMgcmVxdWlyZWQnKSxcbiAgbmFtZTogei5zdHJpbmcoKS5taW4oMSwgJ1Byb2plY3QgbmFtZSBpcyByZXF1aXJlZCcpLFxufSk7XG5cbi8vIFRvb2wgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvamVjdFRvb2xzKGdldENsaWVudDogKCkgPT4gTjhuQ2xpZW50IHwgbnVsbCwgc2VydmVyOiBhbnkpIHtcbiAgLy8gTGlzdCBwcm9qZWN0cyB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnbGlzdC1wcm9qZWN0cycsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICAnTGlzdCBhbGwgcHJvamVjdHMgZnJvbSBuOG4uIE5PVEU6IFJlcXVpcmVzIG44biBFbnRlcnByaXNlIGxpY2Vuc2Ugd2l0aCBwcm9qZWN0IG1hbmFnZW1lbnQgZmVhdHVyZXMgZW5hYmxlZCcsXG4gICAgcGFyYW1ldGVyczogTGlzdFByb2plY3RzU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0xpc3QgbjhuIFByb2plY3RzJyxcbiAgICAgIHJlYWRPbmx5SGludDogdHJ1ZSxcbiAgICAgIGRlc3RydWN0aXZlSGludDogZmFsc2UsXG4gICAgICBpZGVtcG90ZW50SGludDogdHJ1ZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgTGlzdFByb2plY3RzU2NoZW1hPikgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgb3B0aW9uczogUGFnaW5hdGlvbk9wdGlvbnMgPSB7fTtcbiAgICAgICAgaWYgKGFyZ3MubGltaXQpIG9wdGlvbnMubGltaXQgPSBhcmdzLmxpbWl0O1xuICAgICAgICBpZiAoYXJncy5jdXJzb3IpIG9wdGlvbnMuY3Vyc29yID0gYXJncy5jdXJzb3I7XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjbGllbnQuZ2V0UHJvamVjdHMob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuICdObyBwcm9qZWN0cyBmb3VuZCBpbiB0aGUgbjhuIGluc3RhbmNlLic7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmVzdWx0ID0gYEZvdW5kICR7cmVzcG9uc2UuZGF0YS5sZW5ndGh9IHByb2plY3Qocyk6XFxuXFxuYDtcblxuICAgICAgICByZXNwb25zZS5kYXRhLmZvckVhY2goKHByb2plY3Q6IE44blByb2plY3QsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICByZXN1bHQgKz0gYCR7aW5kZXggKyAxfS4gKioke3Byb2plY3QubmFtZX0qKlxcbmA7XG4gICAgICAgICAgcmVzdWx0ICs9IGAgICAtIElEOiAke3Byb2plY3QuaWR9XFxuYDtcbiAgICAgICAgICBpZiAocHJvamVjdC50eXBlKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gYCAgIC0gVHlwZTogJHtwcm9qZWN0LnR5cGV9XFxuYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb2plY3QuY3JlYXRlZEF0KSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gYCAgIC0gQ3JlYXRlZDogJHtuZXcgRGF0ZShwcm9qZWN0LmNyZWF0ZWRBdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVzcG9uc2UubmV4dEN1cnNvcikge1xuICAgICAgICAgIHJlc3VsdCArPSBgXFxu8J+ThCBVc2UgY3Vyc29yIFwiJHtyZXNwb25zZS5uZXh0Q3Vyc29yfVwiIHRvIGdldCB0aGUgbmV4dCBwYWdlLmA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAvLyBDaGVjayBmb3IgbGljZW5zZS1yZWxhdGVkIGVycm9yc1xuICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdsaWNlbnNlJykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoXG4gICAgICAgICAgICAgIGBUaGlzIG9wZXJhdGlvbiByZXF1aXJlcyBhbiBuOG4gRW50ZXJwcmlzZSBsaWNlbnNlIHdpdGggcHJvamVjdCBtYW5hZ2VtZW50IGZlYXR1cmVzIGVuYWJsZWQuIEVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGxpc3QgcHJvamVjdHM6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gbGlzdCBwcm9qZWN0cyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBDcmVhdGUgcHJvamVjdCB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnY3JlYXRlLXByb2plY3QnLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ0NyZWF0ZSBhIG5ldyBwcm9qZWN0IGluIG44bi4gTk9URTogUmVxdWlyZXMgbjhuIEVudGVycHJpc2UgbGljZW5zZSB3aXRoIHByb2plY3QgbWFuYWdlbWVudCBmZWF0dXJlcyBlbmFibGVkJyxcbiAgICBwYXJhbWV0ZXJzOiBDcmVhdGVQcm9qZWN0U2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0NyZWF0ZSBOZXcgUHJvamVjdCcsXG4gICAgICByZWFkT25seUhpbnQ6IGZhbHNlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiBmYWxzZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgQ3JlYXRlUHJvamVjdFNjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHByb2plY3REYXRhOiBDcmVhdGVQcm9qZWN0UmVxdWVzdCA9IHtcbiAgICAgICAgICBuYW1lOiBhcmdzLm5hbWUsXG4gICAgICAgICAgdHlwZTogYXJncy50eXBlLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjbGllbnQuY3JlYXRlUHJvamVjdChwcm9qZWN0RGF0YSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBg4pyFIFN1Y2Nlc3NmdWxseSBjcmVhdGVkIHByb2plY3QgXCIke3Byb2plY3QubmFtZX1cIiB3aXRoIElEOiAke3Byb2plY3QuaWR9XFxuYCArXG4gICAgICAgICAgKHByb2plY3QudHlwZSA/IGBUeXBlOiAke3Byb2plY3QudHlwZX1gIDogJycpXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIC8vIENoZWNrIGZvciBsaWNlbnNlLXJlbGF0ZWQgZXJyb3JzXG4gICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ2xpY2Vuc2UnKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihcbiAgICAgICAgICAgICAgYFRoaXMgb3BlcmF0aW9uIHJlcXVpcmVzIGFuIG44biBFbnRlcnByaXNlIGxpY2Vuc2Ugd2l0aCBwcm9qZWN0IG1hbmFnZW1lbnQgZmVhdHVyZXMgZW5hYmxlZC4gRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIHByb2plY3Q6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHByb2plY3Qgd2l0aCB1bmtub3duIGVycm9yJyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVXBkYXRlIHByb2plY3QgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ3VwZGF0ZS1wcm9qZWN0JyxcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgIFwiVXBkYXRlIGEgcHJvamVjdCdzIG5hbWUgYW5kIHByb3BlcnRpZXMuIE5PVEU6IFJlcXVpcmVzIG44biBFbnRlcnByaXNlIGxpY2Vuc2Ugd2l0aCBwcm9qZWN0IG1hbmFnZW1lbnQgZmVhdHVyZXMgZW5hYmxlZFwiLFxuICAgIHBhcmFtZXRlcnM6IFVwZGF0ZVByb2plY3RTY2hlbWEsXG4gICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgIHRpdGxlOiAnVXBkYXRlIFByb2plY3QnLFxuICAgICAgcmVhZE9ubHlIaW50OiBmYWxzZSxcbiAgICAgIGRlc3RydWN0aXZlSGludDogZmFsc2UsXG4gICAgICBpZGVtcG90ZW50SGludDogdHJ1ZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgVXBkYXRlUHJvamVjdFNjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgcHJvamVjdElkLCAuLi51cGRhdGVEYXRhIH0gPSBhcmdzO1xuICAgICAgICBjb25zdCBwcm9qZWN0RGF0YTogVXBkYXRlUHJvamVjdFJlcXVlc3QgPSB7XG4gICAgICAgICAgbmFtZTogdXBkYXRlRGF0YS5uYW1lLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBjbGllbnQudXBkYXRlUHJvamVjdChwcm9qZWN0SWQsIHByb2plY3REYXRhKTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGDinIUgU3VjY2Vzc2Z1bGx5IHVwZGF0ZWQgcHJvamVjdCBcIiR7cHJvamVjdC5uYW1lfVwiIChJRDogJHtwcm9qZWN0LmlkfSlcXG5gICtcbiAgICAgICAgICAocHJvamVjdC50eXBlID8gYFR5cGU6ICR7cHJvamVjdC50eXBlfWAgOiAnJylcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIGxpY2Vuc2UtcmVsYXRlZCBlcnJvcnNcbiAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnbGljZW5zZScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKFxuICAgICAgICAgICAgICBgVGhpcyBvcGVyYXRpb24gcmVxdWlyZXMgYW4gbjhuIEVudGVycHJpc2UgbGljZW5zZSB3aXRoIHByb2plY3QgbWFuYWdlbWVudCBmZWF0dXJlcyBlbmFibGVkLiBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byB1cGRhdGUgcHJvamVjdDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgcHJvamVjdCB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBEZWxldGUgcHJvamVjdCB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnZGVsZXRlLXByb2plY3QnLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ0RlbGV0ZSBhIHByb2plY3QgZnJvbSBuOG4gcGVybWFuZW50bHkuIE5PVEU6IFJlcXVpcmVzIG44biBFbnRlcnByaXNlIGxpY2Vuc2Ugd2l0aCBwcm9qZWN0IG1hbmFnZW1lbnQgZmVhdHVyZXMgZW5hYmxlZCcsXG4gICAgcGFyYW1ldGVyczogUHJvamVjdElkU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0RlbGV0ZSBQcm9qZWN0JyxcbiAgICAgIHJlYWRPbmx5SGludDogZmFsc2UsXG4gICAgICBkZXN0cnVjdGl2ZUhpbnQ6IHRydWUsXG4gICAgICBpZGVtcG90ZW50SGludDogdHJ1ZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgUHJvamVjdElkU2NoZW1hPikgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgY2xpZW50LmRlbGV0ZVByb2plY3QoYXJncy5wcm9qZWN0SWQpO1xuICAgICAgICByZXR1cm4gYOKchSBTdWNjZXNzZnVsbHkgZGVsZXRlZCBwcm9qZWN0IHdpdGggSUQ6ICR7YXJncy5wcm9qZWN0SWR9YDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgLy8gQ2hlY2sgZm9yIGxpY2Vuc2UtcmVsYXRlZCBlcnJvcnNcbiAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnbGljZW5zZScpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKFxuICAgICAgICAgICAgICBgVGhpcyBvcGVyYXRpb24gcmVxdWlyZXMgYW4gbjhuIEVudGVycHJpc2UgbGljZW5zZSB3aXRoIHByb2plY3QgbWFuYWdlbWVudCBmZWF0dXJlcyBlbmFibGVkLiBFcnJvcjogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBkZWxldGUgcHJvamVjdDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0ZhaWxlZCB0byBkZWxldGUgcHJvamVjdCB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cbiJdLCJ2ZXJzaW9uIjozfQ==