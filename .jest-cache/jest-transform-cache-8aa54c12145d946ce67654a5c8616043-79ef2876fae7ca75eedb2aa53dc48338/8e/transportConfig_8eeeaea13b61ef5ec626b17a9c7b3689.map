{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts"],"sourcesContent":["/**\n * Transport Configuration for n8n MCP Server\n *\n * Provides transport type detection and configuration for different deployment scenarios.\n * Supports both stdio (local development) and SSE (remote/web access) transports.\n */\n\nimport { z } from 'zod';\n\n// Transport configuration schema\nexport const TransportConfigSchema = z.object({\n  type: z.enum(['stdio', 'sse']).default('stdio'),\n  sse: z\n    .object({\n      port: z.number().min(1024).max(65535).default(8080),\n      endpoint: z.string().default('/sse'),\n      host: z.string().default('localhost'),\n      cors: z\n        .object({\n          enabled: z.boolean().default(true),\n          origins: z.array(z.string()).default(['*']),\n          credentials: z.boolean().default(false),\n        })\n        .default({}),\n      healthCheck: z\n        .object({\n          enabled: z.boolean().default(true),\n          endpoint: z.string().default('/health'),\n        })\n        .default({}),\n    })\n    .optional(),\n});\n\nexport type TransportConfig = z.infer<typeof TransportConfigSchema>;\n\n/**\n * Default transport configurations for different environments\n */\nexport const DEFAULT_CONFIGS = {\n  development: {\n    type: 'stdio' as const,\n  },\n  production: {\n    type: 'sse' as const,\n    sse: {\n      port: 8080,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: ['*'],\n        credentials: false,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n  web: {\n    type: 'sse' as const,\n    sse: {\n      port: process.env.PORT ? parseInt(process.env.PORT) : 3000,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: process.env.CORS_ORIGINS?.split(',') || ['*'],\n        credentials: true,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n} as const;\n\n/**\n * Detect appropriate transport configuration based on environment\n */\nexport function detectTransportConfig(): TransportConfig {\n  // Check environment variables for explicit transport type\n  const transportType = process.env.N8N_MCP_TRANSPORT as 'stdio' | 'sse' | undefined;\n\n  if (transportType === 'sse') {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  if (transportType === 'stdio') {\n    return DEFAULT_CONFIGS.development;\n  }\n\n  // Auto-detect based on environment\n  if (process.env.NODE_ENV === 'production' || process.env.PORT) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Check if running in a web environment (Railway, Vercel, etc.)\n  if (process.env.RAILWAY_ENVIRONMENT || process.env.VERCEL || process.env.RENDER) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Default to stdio for local development\n  return DEFAULT_CONFIGS.development;\n}\n\n/**\n * Validate and normalize transport configuration\n */\nexport function validateTransportConfig(config: unknown): TransportConfig {\n  return TransportConfigSchema.parse(config);\n}\n\n/**\n * Get SSE server URL from configuration\n */\nexport function getServerUrl(config: TransportConfig): string | null {\n  if (config.type !== 'sse' || !config.sse) {\n    return null;\n  }\n\n  const { host, port, endpoint } = config.sse;\n  const protocol = port === 443 ? 'https' : 'http';\n  return `${protocol}://${host}:${port}${endpoint}`;\n}\n\n/**\n * Environment variable configuration helpers\n */\nexport const ENV_CONFIG = {\n  // Transport type selection\n  TRANSPORT_TYPE: 'N8N_MCP_TRANSPORT', // 'stdio' | 'sse'\n\n  // SSE configuration\n  SSE_PORT: 'N8N_MCP_SSE_PORT',\n  SSE_HOST: 'N8N_MCP_SSE_HOST',\n  SSE_ENDPOINT: 'N8N_MCP_SSE_ENDPOINT',\n\n  // CORS configuration\n  CORS_ORIGINS: 'N8N_MCP_CORS_ORIGINS', // comma-separated list\n  CORS_CREDENTIALS: 'N8N_MCP_CORS_CREDENTIALS', // 'true' | 'false'\n\n  // Health check configuration\n  HEALTH_CHECK_ENABLED: 'N8N_MCP_HEALTH_CHECK_ENABLED',\n  HEALTH_CHECK_ENDPOINT: 'N8N_MCP_HEALTH_CHECK_ENDPOINT',\n} as const;\n\n/**\n * Parse transport configuration from environment variables\n */\nexport function parseConfigFromEnv(): Partial<TransportConfig> {\n  const config: Partial<TransportConfig> = {};\n\n  // Transport type\n  if (process.env[ENV_CONFIG.TRANSPORT_TYPE]) {\n    config.type = process.env[ENV_CONFIG.TRANSPORT_TYPE] as 'stdio' | 'sse';\n  }\n\n  // SSE configuration - create if any SSE-related environment variables are set\n  const hasAnySSEConfig =\n    ENV_CONFIG.SSE_PORT in process.env ||\n    ENV_CONFIG.SSE_HOST in process.env ||\n    ENV_CONFIG.SSE_ENDPOINT in process.env ||\n    ENV_CONFIG.CORS_ORIGINS in process.env ||\n    ENV_CONFIG.CORS_CREDENTIALS in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENABLED in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENDPOINT in process.env;\n\n  if (config.type === 'sse' || hasAnySSEConfig) {\n    const ssePortEnv = process.env[ENV_CONFIG.SSE_PORT];\n    config.sse = {\n      port: ssePortEnv ? parseInt(ssePortEnv) : 8080,\n      host: process.env[ENV_CONFIG.SSE_HOST] || 'localhost',\n      endpoint: process.env[ENV_CONFIG.SSE_ENDPOINT] || '/sse',\n      cors: {\n        enabled: process.env[ENV_CONFIG.CORS_ORIGINS] !== undefined,\n        origins: process.env[ENV_CONFIG.CORS_ORIGINS]?.split(',') ?? ['*'],\n        credentials: process.env[ENV_CONFIG.CORS_CREDENTIALS] === 'true',\n      },\n      healthCheck: {\n        enabled: process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] !== 'false',\n        endpoint: process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT] || '/health',\n      },\n    };\n  }\n\n  return config;\n}\n"],"version":3}