{"version":3,"names":["cov_uanzse2i5","path","hash","global","Function","gcv","coverageData","statementMap","start","line","column","end","fnMap","name","decl","loc","branchMap","type","locations","s","f","b","inputSourceMap","file","mappings","names","sources","sourcesContent","version","_coverageSchema","coverage","actualCoverage","exports","createWorkflowManagementClient","zod_1","require","WorkflowSchema","z","object","id","string","optional","active","boolean","default","nodes","array","any","connections","record","settings","staticData","tags","meta","templateCredsSetupCompleted","pinData","versionId","createdAt","updatedAt","WorkflowExecutionSchema","workflowId","mode","enum","retryOf","retrySuccessId","startedAt","stoppedAt","finished","status","data","workflowData","ProjectSchema","relations","projectRelations","workflowRelations","TagSchema","ShareSchema","userId","role","WorkflowManagementClient","client","constructor","createWorkflow","workflow","response","parse","getWorkflow","updateWorkflow","updates","deleteWorkflow","listWorkflows","options","getWorkflows","workflows","map","totalCount","length","activateWorkflow","deactivateWorkflow","executeWorkflow","inputData","Error","getExecution","executionId","listExecutions","getExecutions","executions","execution","stopExecution","retryExecution","deleteExecution","createProject","project","getProject","projectId","listProjects","getProjects","updateProject","deleteProject","moveWorkflowToProject","createTag","tag","listTags","getTags","updateTag","tagId","deleteTag","addTagsToWorkflow","tagIds","updateWorkflowTags","removeTagsFromWorkflow","shareWorkflow","updateWorkflowShare","removeWorkflowShare","listWorkflowCollaborators","getWorkflowAnalytics","getGlobalAnalytics","getExecutionStatistics","bulkActivateWorkflows","workflowIds","bulkDeleteWorkflows","bulkDeleteExecutions","criteria","exportWorkflows","importWorkflows","n8nClient"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/workflowManagementClient.ts"],"sourcesContent":["/**\n * Workflow Management Client for n8n Fork Integration\n *\n * Provides comprehensive API client for programmatic workflow creation, execution,\n * monitoring, and management using n8n fork APIs with support for tags, projects,\n * and collaboration features.\n */\n\nimport { z } from 'zod';\nimport { N8nClient } from './n8nClient.js';\n\n// Workflow schemas\nexport const WorkflowSchema = z.object({\n  id: z.string().optional(),\n  name: z.string(),\n  active: z.boolean().default(false),\n  nodes: z.array(z.any()),\n  connections: z.record(z.any()),\n  settings: z.record(z.any()).default({}),\n  staticData: z.record(z.any()).default({}),\n  tags: z.array(z.string()).default([]),\n  meta: z.object({\n    templateCredsSetupCompleted: z.boolean().default(false),\n  }).default({}),\n  pinData: z.record(z.any()).default({}),\n  versionId: z.string().optional(),\n  createdAt: z.string().optional(),\n  updatedAt: z.string().optional(),\n});\n\nexport const WorkflowExecutionSchema = z.object({\n  id: z.string(),\n  workflowId: z.string(),\n  mode: z.enum(['cli', 'error', 'integrated', 'internal', 'manual', 'retry', 'trigger', 'webhook']),\n  retryOf: z.string().optional(),\n  retrySuccessId: z.string().optional(),\n  startedAt: z.string(),\n  stoppedAt: z.string().optional(),\n  finished: z.boolean(),\n  status: z.enum(['canceled', 'crashed', 'error', 'new', 'running', 'success', 'unknown', 'waiting']),\n  data: z.any().optional(),\n  workflowData: z.any().optional(),\n});\n\nexport const ProjectSchema = z.object({\n  id: z.string().optional(),\n  name: z.string(),\n  type: z.enum(['Personal', 'Team']).default('Personal'),\n  createdAt: z.string().optional(),\n  updatedAt: z.string().optional(),\n  relations: z.object({\n    projectRelations: z.array(z.any()).default([]),\n    workflowRelations: z.array(z.any()).default([]),\n  }).optional(),\n});\n\nexport const TagSchema = z.object({\n  id: z.string().optional(),\n  name: z.string(),\n  createdAt: z.string().optional(),\n  updatedAt: z.string().optional(),\n});\n\nexport const ShareSchema = z.object({\n  workflowId: z.string(),\n  userId: z.string(),\n  role: z.enum(['workflow:owner', 'workflow:editor', 'workflow:user']),\n});\n\nexport type Workflow = z.infer<typeof WorkflowSchema>;\nexport type WorkflowExecution = z.infer<typeof WorkflowExecutionSchema>;\nexport type Project = z.infer<typeof ProjectSchema>;\nexport type Tag = z.infer<typeof TagSchema>;\nexport type Share = z.infer<typeof ShareSchema>;\n\nexport interface WorkflowListOptions {\n  limit?: number;\n  offset?: number;\n  active?: boolean;\n  tags?: string[];\n  projectId?: string;\n  ownedBy?: string;\n  sharedWith?: string;\n}\n\nexport interface ExecutionListOptions {\n  limit?: number;\n  offset?: number;\n  workflowId?: string;\n  status?: string[];\n  finished?: boolean;\n  mode?: string[];\n  startedAfter?: string;\n  startedBefore?: string;\n}\n\nexport interface WorkflowAnalytics {\n  workflowId: string;\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  averageExecutionTime: number;\n  lastExecuted: string;\n  successRate: number;\n  executionTrend: {\n    date: string;\n    executions: number;\n    successRate: number;\n  }[];\n}\n\n/**\n * Workflow Management Client\n *\n * Comprehensive client for managing workflows, executions, projects,\n * tags, and collaboration features in n8n fork.\n */\nexport class WorkflowManagementClient {\n  private client: N8nClient;\n\n  constructor(client: N8nClient) {\n    this.client = client;\n  }\n\n  // ============================================================================\n  // Workflow Management - leverages existing N8nClient methods\n  // ============================================================================\n\n  async createWorkflow(workflow: Omit<Workflow, 'id' | 'createdAt' | 'updatedAt'>): Promise<Workflow> {\n    const response = await this.client.createWorkflow(workflow as any);\n    return WorkflowSchema.parse(response);\n  }\n\n  async getWorkflow(workflowId: string): Promise<Workflow> {\n    const response = await this.client.getWorkflow(workflowId);\n    return WorkflowSchema.parse(response);\n  }\n\n  async updateWorkflow(workflowId: string, updates: Partial<Workflow>): Promise<Workflow> {\n    const response = await this.client.updateWorkflow(workflowId, updates as any);\n    return WorkflowSchema.parse(response);\n  }\n\n  async deleteWorkflow(workflowId: string): Promise<void> {\n    await this.client.deleteWorkflow(workflowId);\n  }\n\n  async listWorkflows(options: WorkflowListOptions = {}): Promise<{\n    workflows: Workflow[];\n    totalCount: number;\n  }> {\n    const response = await this.client.getWorkflows(options as any);\n    return {\n      workflows: response.data.map((workflow: any) => WorkflowSchema.parse(workflow)),\n      totalCount: response.data.length,\n    };\n  }\n\n  async activateWorkflow(workflowId: string): Promise<Workflow> {\n    const response = await this.client.activateWorkflow(workflowId);\n    return WorkflowSchema.parse(response);\n  }\n\n  async deactivateWorkflow(workflowId: string): Promise<Workflow> {\n    const response = await this.client.deactivateWorkflow(workflowId);\n    return WorkflowSchema.parse(response);\n  }\n\n  // ============================================================================\n  // Execution Management - leverages existing N8nClient methods\n  // ============================================================================\n\n  async executeWorkflow(\n    workflowId: string,\n    inputData?: any,\n    options?: { loadFromDatabase?: boolean; startNodes?: string[] }\n  ): Promise<WorkflowExecution> {\n    // Note: N8nClient doesn't have executeWorkflow method, this would need to be added\n    throw new Error('Workflow execution not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async getExecution(executionId: string): Promise<WorkflowExecution> {\n    const response = await this.client.getExecution(executionId);\n    return WorkflowExecutionSchema.parse(response);\n  }\n\n  async listExecutions(options: ExecutionListOptions = {}): Promise<{\n    executions: WorkflowExecution[];\n    totalCount: number;\n  }> {\n    const response = await this.client.getExecutions(options as any);\n    return {\n      executions: response.data.map((execution: any) => WorkflowExecutionSchema.parse(execution)),\n      totalCount: response.data.length,\n    };\n  }\n\n  async stopExecution(executionId: string): Promise<WorkflowExecution> {\n    // Note: This would require addition to N8nClient\n    throw new Error('Stop execution not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async retryExecution(\n    executionId: string,\n    options?: { loadFromDatabase?: boolean; startNodes?: string[] }\n  ): Promise<WorkflowExecution> {\n    // Note: This would require addition to N8nClient  \n    throw new Error('Retry execution not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async deleteExecution(executionId: string): Promise<void> {\n    await this.client.deleteExecution(executionId);\n  }\n\n  // ============================================================================\n  // Project Management - leverages existing N8nClient methods\n  // ============================================================================\n\n  async createProject(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): Promise<Project> {\n    const response = await this.client.createProject(project as any);\n    return ProjectSchema.parse(response);\n  }\n\n  async getProject(projectId: string): Promise<Project> {\n    const response = await this.client.getProject(projectId);\n    return ProjectSchema.parse(response);\n  }\n\n  async listProjects(): Promise<Project[]> {\n    const response = await this.client.getProjects({});\n    return response.data.map((project: any) => ProjectSchema.parse(project));\n  }\n\n  async updateProject(projectId: string, updates: Partial<Project>): Promise<Project> {\n    const response = await this.client.updateProject(projectId, updates as any);\n    return ProjectSchema.parse(response);\n  }\n\n  async deleteProject(projectId: string): Promise<void> {\n    await this.client.deleteProject(projectId);\n  }\n\n  async moveWorkflowToProject(workflowId: string, projectId: string): Promise<void> {\n    // Note: This would require addition to N8nClient\n    throw new Error('Move workflow to project not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  // ============================================================================\n  // Tag Management - leverages existing N8nClient methods\n  // ============================================================================\n\n  async createTag(tag: Omit<Tag, 'id' | 'createdAt' | 'updatedAt'>): Promise<Tag> {\n    const response = await this.client.createTag(tag as any);\n    return TagSchema.parse(response);\n  }\n\n  async listTags(): Promise<Tag[]> {\n    const response = await this.client.getTags({});\n    return response.data.map((tag: any) => TagSchema.parse(tag));\n  }\n\n  async updateTag(tagId: string, updates: Partial<Tag>): Promise<Tag> {\n    const response = await this.client.updateTag(tagId, updates as any);\n    return TagSchema.parse(response);\n  }\n\n  async deleteTag(tagId: string): Promise<void> {\n    await this.client.deleteTag(tagId);\n  }\n\n  async addTagsToWorkflow(workflowId: string, tagIds: string[]): Promise<void> {\n    await this.client.updateWorkflowTags(workflowId, tagIds);\n  }\n\n  async removeTagsFromWorkflow(workflowId: string, tagIds: string[]): Promise<void> {\n    // Note: This would require modification to updateWorkflowTags or new method\n    throw new Error('Remove tags from workflow not implemented in base N8nClient - would require API extension');\n  }\n\n  // ============================================================================\n  // Collaboration Features - would require n8n fork API extensions\n  // ============================================================================\n\n  async shareWorkflow(workflowId: string, userId: string, role: Share['role']): Promise<void> {\n    throw new Error('Workflow sharing not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async updateWorkflowShare(workflowId: string, userId: string, role: Share['role']): Promise<void> {\n    throw new Error('Update workflow sharing not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async removeWorkflowShare(workflowId: string, userId: string): Promise<void> {\n    throw new Error('Remove workflow sharing not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async listWorkflowCollaborators(workflowId: string): Promise<Array<{\n    userId: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: Share['role'];\n  }>> {\n    throw new Error('List workflow collaborators not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  // ============================================================================\n  // Analytics and Monitoring - would require n8n fork API extensions\n  // ============================================================================\n\n  async getWorkflowAnalytics(\n    workflowId: string, \n    options?: { \n      startDate?: string; \n      endDate?: string; \n      granularity?: 'day' | 'week' | 'month' \n    }\n  ): Promise<WorkflowAnalytics> {\n    throw new Error('Workflow analytics not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async getGlobalAnalytics(options?: { \n    startDate?: string; \n    endDate?: string; \n    projectId?: string \n  }): Promise<{\n    totalWorkflows: number;\n    activeWorkflows: number;\n    totalExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    averageExecutionTime: number;\n    topPerformingWorkflows: Array<{\n      workflowId: string;\n      name: string;\n      executions: number;\n      successRate: number;\n    }>;\n  }> {\n    throw new Error('Global analytics not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async getExecutionStatistics(workflowId?: string): Promise<{\n    totalExecutions: number;\n    runningExecutions: number;\n    successfulExecutions: number;\n    failedExecutions: number;\n    canceledExecutions: number;\n    averageExecutionTime: number;\n    medianExecutionTime: number;\n    executionsByStatus: Record<string, number>;\n    executionsByMode: Record<string, number>;\n    recentExecutions: WorkflowExecution[];\n  }> {\n    throw new Error('Execution statistics not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  // ============================================================================\n  // Bulk Operations - would require n8n fork API extensions\n  // ============================================================================\n\n  async bulkActivateWorkflows(workflowIds: string[], active: boolean): Promise<{\n    successful: string[];\n    failed: Array<{ id: string; error: string }>;\n  }> {\n    throw new Error('Bulk workflow operations not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async bulkDeleteWorkflows(workflowIds: string[]): Promise<{\n    successful: string[];\n    failed: Array<{ id: string; error: string }>;\n  }> {\n    throw new Error('Bulk workflow operations not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async bulkDeleteExecutions(\n    criteria: {\n      workflowId?: string;\n      status?: string[];\n      startedBefore?: string;\n      limit?: number;\n    }\n  ): Promise<{\n    deletedCount: number;\n    remainingCount: number;\n  }> {\n    throw new Error('Bulk execution operations not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  // ============================================================================\n  // Import/Export - would require n8n fork API extensions\n  // ============================================================================\n\n  async exportWorkflows(\n    workflowIds: string[],\n    options?: { \n      includeCredentials?: boolean; \n      format?: 'json' | 'zip' \n    }\n  ): Promise<any> {\n    throw new Error('Workflow export not implemented in base N8nClient - would require n8n fork API extension');\n  }\n\n  async importWorkflows(\n    workflows: any[], \n    options?: { \n      updateExisting?: boolean; \n      projectId?: string \n    }\n  ): Promise<{\n    imported: Array<{ id: string; name: string }>;\n    skipped: Array<{ name: string; reason: string }>;\n    errors: Array<{ name: string; error: string }>;\n  }> {\n    throw new Error('Workflow import not implemented in base N8nClient - would require n8n fork API extension');\n  }\n}\n\n/**\n * Create workflow management client with default configuration\n */\nexport function createWorkflowManagementClient(n8nClient: N8nClient): WorkflowManagementClient {\n  return new WorkflowManagementClient(n8nClient);\n}"],"mappings":"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","ignoreList":[]}