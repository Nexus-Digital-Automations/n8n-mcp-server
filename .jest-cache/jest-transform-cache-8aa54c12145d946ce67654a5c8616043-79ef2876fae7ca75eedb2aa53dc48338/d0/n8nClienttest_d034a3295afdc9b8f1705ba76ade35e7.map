{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/client/n8nClient.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/client/n8nClient.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest, afterEach } from '@jest/globals';\nimport { N8nClient } from '../../../src/client/n8nClient';\n\n// Mock node-fetch before importing\njest.mock('node-fetch');\nimport fetch, { Response } from 'node-fetch';\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>;\n\ndescribe('N8nClient', () => {\n  let client: N8nClient;\n  const baseUrl = 'https://test.n8n.io';\n  const apiKey = 'test-api-key';\n\n  beforeEach(() => {\n    client = new N8nClient(baseUrl, apiKey);\n    mockFetch.mockClear();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('constructor', () => {\n    it('should initialize with correct base URL and API key', () => {\n      expect(client).toBeInstanceOf(N8nClient);\n    });\n\n    it('should remove trailing slash from base URL', () => {\n      const clientWithSlash = new N8nClient('https://test.n8n.io/', apiKey);\n      expect(clientWithSlash).toBeInstanceOf(N8nClient);\n    });\n  });\n\n  describe('makeRequest', () => {\n    it('should make successful API request', async () => {\n      const mockResponse = {\n        ok: true,\n        headers: {\n          get: jest.fn().mockReturnValue('application/json'),\n        },\n        json: jest.fn(() => Promise.resolve({ success: true })),\n      } as unknown as Response;\n      mockFetch.mockResolvedValue(mockResponse as unknown as Response);\n\n      const result = await client.getWorkflows();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows',\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'X-N8N-API-KEY': 'test-api-key',\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n          }),\n        })\n      );\n      expect(result).toEqual({ success: true });\n    });\n\n    it('should handle API error responses', async () => {\n      const mockResponse = {\n        ok: false,\n        status: 404,\n        text: jest.fn(() => Promise.resolve('Not Found')),\n      };\n      mockFetch.mockResolvedValue(mockResponse as unknown as Response);\n\n      await expect(client.getWorkflows()).rejects.toThrow(\n        'n8n API request failed: HTTP 404: Not Found'\n      );\n    });\n\n    it('should handle network errors', async () => {\n      mockFetch.mockRejectedValue(new Error('Network error'));\n\n      await expect(client.getWorkflows()).rejects.toThrow('n8n API request failed: Network error');\n    });\n\n    it('should handle unknown errors', async () => {\n      mockFetch.mockRejectedValue('Unknown error string');\n\n      await expect(client.getWorkflows()).rejects.toThrow(\n        'n8n API request failed with unknown error'\n      );\n    });\n\n    it('should handle non-JSON responses', async () => {\n      const mockResponse = {\n        ok: true,\n        headers: {\n          get: jest.fn().mockReturnValue('text/plain'),\n        },\n        text: jest.fn(() => Promise.resolve('Plain text response')),\n      };\n      mockFetch.mockResolvedValue(mockResponse as unknown as Response);\n\n      const result = await client.getWorkflows();\n      expect(result).toBe('Plain text response');\n    });\n  });\n\n  describe('workflow methods', () => {\n    beforeEach(() => {\n      const mockResponse = {\n        ok: true,\n        headers: {\n          get: jest.fn().mockReturnValue('application/json'),\n        },\n        json: jest.fn(),\n      };\n      mockFetch.mockResolvedValue(mockResponse as unknown as Response);\n    });\n\n    it('should get workflows with pagination', async () => {\n      const mockWorkflows = [\n        (global as any).testUtils.createMockWorkflow({ id: '1' }),\n        (global as any).testUtils.createMockWorkflow({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockWorkflows }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getWorkflows({ limit: 10, cursor: 'abc123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows?limit=10&cursor=abc123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockWorkflows);\n    });\n\n    it('should get single workflow', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockWorkflow),\n        } as unknown as Response)\n      );\n\n      const result = await client.getWorkflow('workflow-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockWorkflow);\n    });\n\n    it('should create workflow', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow();\n      const workflowData = {\n        name: 'Test Workflow',\n        nodes: [],\n        connections: {},\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockWorkflow),\n        } as unknown as Response)\n      );\n\n      const result = await client.createWorkflow(workflowData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(workflowData),\n        })\n      );\n      expect(result).toEqual(mockWorkflow);\n    });\n\n    it('should update workflow', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow();\n      const workflowData = {\n        name: 'Updated Workflow',\n        nodes: [],\n        connections: {},\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockWorkflow),\n        } as unknown as Response)\n      );\n\n      const result = await client.updateWorkflow('workflow-123', workflowData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123',\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(workflowData),\n        })\n      );\n      expect(result).toEqual(mockWorkflow);\n    });\n\n    it('should activate workflow', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockWorkflow),\n        } as unknown as Response)\n      );\n\n      const result = await client.activateWorkflow('workflow-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123/activate',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n      expect(result).toEqual(mockWorkflow);\n    });\n\n    it('should deactivate workflow', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockWorkflow),\n        } as unknown as Response)\n      );\n\n      const result = await client.deactivateWorkflow('workflow-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123/deactivate',\n        expect.objectContaining({\n          method: 'POST',\n        })\n      );\n      expect(result).toEqual(mockWorkflow);\n    });\n\n    it('should delete workflow', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteWorkflow('workflow-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n  });\n\n  describe('user methods', () => {\n    it('should get users', async () => {\n      const mockUsers = [\n        (global as any).testUtils.createMockUser({ id: '1' }),\n        (global as any).testUtils.createMockUser({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockUsers }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getUsers();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockUsers);\n    });\n\n    it('should get users with pagination', async () => {\n      const mockUsers = [(global as any).testUtils.createMockUser({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockUsers }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getUsers({ limit: 10, cursor: 'user123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users?limit=10&cursor=user123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockUsers);\n    });\n\n    it('should get single user', async () => {\n      const mockUser = (global as any).testUtils.createMockUser();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockUser),\n        } as unknown as Response)\n      );\n\n      const result = await client.getUser('user-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users/user-123',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockUser);\n    });\n\n    it('should create user', async () => {\n      const mockUser = (global as any).testUtils.createMockUser();\n      const userData = {\n        email: 'test@example.com',\n        firstName: 'Test',\n        lastName: 'User',\n        password: 'password123',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockUser),\n        } as unknown as Response)\n      );\n\n      const result = await client.createUser(userData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(userData),\n        })\n      );\n      expect(result).toEqual(mockUser);\n    });\n\n    it('should update user', async () => {\n      const mockUser = (global as any).testUtils.createMockUser();\n      const userData = {\n        firstName: 'Updated',\n        lastName: 'User',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockUser),\n        } as unknown as Response)\n      );\n\n      const result = await client.updateUser('user-123', userData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users/user-123',\n        expect.objectContaining({\n          method: 'PATCH',\n          body: JSON.stringify(userData),\n        })\n      );\n      expect(result).toEqual(mockUser);\n    });\n\n    it('should delete user', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteUser('user-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/users/user-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n  });\n\n  describe('execution methods', () => {\n    it('should get executions', async () => {\n      const mockExecutions = [\n        (global as any).testUtils.createMockExecution({ id: '1' }),\n        (global as any).testUtils.createMockExecution({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockExecutions }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getExecutions();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/executions',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockExecutions);\n    });\n\n    it('should get executions with pagination', async () => {\n      const mockExecutions = [(global as any).testUtils.createMockExecution({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockExecutions }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getExecutions({ limit: 5, cursor: 'exec123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/executions?limit=5&cursor=exec123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockExecutions);\n    });\n\n    it('should get single execution', async () => {\n      const mockExecution = (global as any).testUtils.createMockExecution();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockExecution),\n        } as unknown as Response)\n      );\n\n      const result = await client.getExecution('execution-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/executions/execution-123',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockExecution);\n    });\n\n    it('should delete execution', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteExecution('execution-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/executions/execution-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n  });\n\n  describe('credential methods', () => {\n    it('should get credentials', async () => {\n      const mockCredentials = [\n        (global as any).testUtils.createMockCredential({ id: '1' }),\n        (global as any).testUtils.createMockCredential({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockCredentials }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getCredentials();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockCredentials);\n    });\n\n    it('should get credentials with pagination', async () => {\n      const mockCredentials = [(global as any).testUtils.createMockCredential({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockCredentials }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getCredentials({ limit: 10, cursor: 'cred123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials?limit=10&cursor=cred123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockCredentials);\n    });\n\n    it('should get single credential', async () => {\n      const mockCredential = (global as any).testUtils.createMockCredential();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockCredential),\n        } as unknown as Response)\n      );\n\n      const result = await client.getCredential('credential-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials/credential-123',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockCredential);\n    });\n\n    it('should create credential', async () => {\n      const mockCredential = (global as any).testUtils.createMockCredential();\n      const credentialData = {\n        name: 'Test Credential',\n        type: 'httpBasicAuth',\n        data: { username: 'test', password: 'pass' },\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockCredential),\n        } as unknown as Response)\n      );\n\n      const result = await client.createCredential(credentialData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(credentialData),\n        })\n      );\n      expect(result).toEqual(mockCredential);\n    });\n\n    it('should delete credential', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteCredential('credential-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials/credential-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n\n    it('should get credential schema', async () => {\n      const mockSchema = { properties: { username: { type: 'string' } } };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockSchema),\n        } as unknown as Response)\n      );\n\n      const result = await client.getCredentialSchema('httpBasicAuth');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/credentials/schema/httpBasicAuth',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockSchema);\n    });\n  });\n\n  describe('project methods', () => {\n    it('should get projects', async () => {\n      const mockProjects = [\n        (global as any).testUtils.createMockProject({ id: '1' }),\n        (global as any).testUtils.createMockProject({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockProjects }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getProjects();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/projects',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockProjects);\n    });\n\n    it('should get projects with pagination', async () => {\n      const mockProjects = [(global as any).testUtils.createMockProject({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockProjects }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getProjects({ limit: 5, cursor: 'proj123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/projects?limit=5&cursor=proj123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockProjects);\n    });\n\n    it('should create project', async () => {\n      const mockProject = (global as any).testUtils.createMockProject();\n      const projectData = {\n        name: 'Test Project',\n        type: 'team',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockProject),\n        } as unknown as Response)\n      );\n\n      const result = await client.createProject(projectData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/projects',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(projectData),\n        })\n      );\n      expect(result).toEqual(mockProject);\n    });\n\n    it('should update project', async () => {\n      const mockProject = (global as any).testUtils.createMockProject();\n      const projectData = {\n        name: 'Updated Project',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockProject),\n        } as unknown as Response)\n      );\n\n      const result = await client.updateProject('project-123', projectData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/projects/project-123',\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(projectData),\n        })\n      );\n      expect(result).toEqual(mockProject);\n    });\n\n    it('should delete project', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteProject('project-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/projects/project-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n  });\n\n  describe('variable methods', () => {\n    it('should get variables', async () => {\n      const mockVariables = [\n        (global as any).testUtils.createMockVariable({ id: '1' }),\n        (global as any).testUtils.createMockVariable({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockVariables }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getVariables();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/variables',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockVariables);\n    });\n\n    it('should get variables with pagination', async () => {\n      const mockVariables = [(global as any).testUtils.createMockVariable({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockVariables }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getVariables({ limit: 20, cursor: 'var123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/variables?limit=20&cursor=var123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockVariables);\n    });\n\n    it('should create variable', async () => {\n      const mockVariable = (global as any).testUtils.createMockVariable();\n      const variableData = {\n        key: 'TEST_VAR',\n        value: 'test-value',\n        type: 'string' as const,\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockVariable),\n        } as unknown as Response)\n      );\n\n      const result = await client.createVariable(variableData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/variables',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(variableData),\n        })\n      );\n      expect(result).toEqual(mockVariable);\n    });\n\n    it('should delete variable', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteVariable('variable-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/variables/variable-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n  });\n\n  describe('tag methods', () => {\n    it('should get tags', async () => {\n      const mockTags = [\n        (global as any).testUtils.createMockTag({ id: '1' }),\n        (global as any).testUtils.createMockTag({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockTags }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getTags();\n\n      expect(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags', expect.any(Object));\n      expect(result.data).toEqual(mockTags);\n    });\n\n    it('should get tags with pagination', async () => {\n      const mockTags = [(global as any).testUtils.createMockTag({ id: '1' })];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({ data: mockTags }),\n        } as unknown as Response)\n      );\n\n      const result = await client.getTags({ limit: 15, cursor: 'tag123' });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/tags?limit=15&cursor=tag123',\n        expect.any(Object)\n      );\n      expect(result.data).toEqual(mockTags);\n    });\n\n    it('should get single tag', async () => {\n      const mockTag = (global as any).testUtils.createMockTag();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockTag),\n        } as unknown as Response)\n      );\n\n      const result = await client.getTag('tag-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/tags/tag-123',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockTag);\n    });\n\n    it('should create tag', async () => {\n      const mockTag = (global as any).testUtils.createMockTag();\n      const tagData = {\n        name: 'Test Tag',\n        color: '#ff0000',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockTag),\n        } as unknown as Response)\n      );\n\n      const result = await client.createTag(tagData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/tags',\n        expect.objectContaining({\n          method: 'POST',\n          body: JSON.stringify(tagData),\n        })\n      );\n      expect(result).toEqual(mockTag);\n    });\n\n    it('should update tag', async () => {\n      const mockTag = (global as any).testUtils.createMockTag();\n      const tagData = {\n        name: 'Updated Tag',\n        color: '#00ff00',\n      };\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockTag),\n        } as unknown as Response)\n      );\n\n      const result = await client.updateTag('tag-123', tagData);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/tags/tag-123',\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify(tagData),\n        })\n      );\n      expect(result).toEqual(mockTag);\n    });\n\n    it('should delete tag', async () => {\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.deleteTag('tag-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/tags/tag-123',\n        expect.objectContaining({\n          method: 'DELETE',\n        })\n      );\n    });\n\n    it('should get workflow tags', async () => {\n      const mockTags = [\n        (global as any).testUtils.createMockTag({ id: '1' }),\n        (global as any).testUtils.createMockTag({ id: '2' }),\n      ];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockTags),\n        } as unknown as Response)\n      );\n\n      const result = await client.getWorkflowTags('workflow-123');\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123/tags',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockTags);\n    });\n\n    it('should update workflow tags', async () => {\n      const tagIds = ['tag-1', 'tag-2'];\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve({}),\n          text: () => Promise.resolve(''),\n        } as unknown as Response)\n      );\n\n      await client.updateWorkflowTags('workflow-123', tagIds);\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/workflows/workflow-123/tags',\n        expect.objectContaining({\n          method: 'PUT',\n          body: JSON.stringify({ tagIds }),\n        })\n      );\n    });\n  });\n\n  describe('audit methods', () => {\n    it('should generate audit report', async () => {\n      const mockAuditReport = (global as any).testUtils.createMockAuditReport();\n\n      mockFetch.mockImplementation(() =>\n        Promise.resolve({\n          ok: true,\n          headers: { get: () => 'application/json' },\n          json: () => Promise.resolve(mockAuditReport),\n        } as unknown as Response)\n      );\n\n      const result = await client.generateAuditReport();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        'https://test.n8n.io/api/v1/audit',\n        expect.any(Object)\n      );\n      expect(result).toEqual(mockAuditReport);\n    });\n  });\n});\n"],"version":3}