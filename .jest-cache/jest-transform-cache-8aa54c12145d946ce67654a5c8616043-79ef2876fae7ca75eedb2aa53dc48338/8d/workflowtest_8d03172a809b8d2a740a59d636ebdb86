918979d79e9b53f176a1276129706ab6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const workflow_1 = require("../../../src/tools/workflow");
(0, globals_1.describe)('Workflow Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register workflow tools
        (0, workflow_1.createWorkflowTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all workflow tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(7);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-workflows');
        (0, globals_1.expect)(toolNames).toContain('get-workflow');
        (0, globals_1.expect)(toolNames).toContain('create-workflow');
        (0, globals_1.expect)(toolNames).toContain('update-workflow');
        (0, globals_1.expect)(toolNames).toContain('delete-workflow');
        (0, globals_1.expect)(toolNames).toContain('activate-workflow');
        (0, globals_1.expect)(toolNames).toContain('deactivate-workflow');
    });
    (0, globals_1.describe)('list-workflows tool', () => {
        let listWorkflowsTool;
        (0, globals_1.beforeEach)(() => {
            listWorkflowsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-workflows')[0];
        });
        (0, globals_1.it)('should list workflows successfully', async () => {
            const mockWorkflows = [
                global.testUtils.createMockWorkflow({ id: '1', name: 'Workflow 1', active: true }),
                global.testUtils.createMockWorkflow({
                    id: '2',
                    name: 'Workflow 2',
                    active: false,
                }),
            ];
            mockClient.getWorkflows.mockResolvedValue(global.testUtils.createMockApiResponse(mockWorkflows));
            const result = await listWorkflowsTool.execute({ limit: 10 });
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledWith({ limit: 10 });
            (0, globals_1.expect)(result).toContain('Found 2 workflow(s)');
            (0, globals_1.expect)(result).toContain('Workflow 1');
            (0, globals_1.expect)(result).toContain('Workflow 2');
            (0, globals_1.expect)(result).toContain('ðŸŸ¢ Active');
            (0, globals_1.expect)(result).toContain('ðŸ”´ Inactive');
        });
        (0, globals_1.it)('should list workflows with tags and pagination', async () => {
            const mockWorkflows = [
                global.testUtils.createMockWorkflow({
                    id: '1',
                    name: 'Tagged Workflow',
                    tags: ['production', 'automation'],
                    createdAt: '2023-01-01T00:00:00.000Z',
                }),
            ];
            mockClient.getWorkflows.mockResolvedValue({
                ...global.testUtils.createMockApiResponse(mockWorkflows),
                nextCursor: 'next-page-cursor',
            });
            const result = await listWorkflowsTool.execute({ cursor: 'current-cursor' });
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledWith({ cursor: 'current-cursor' });
            (0, globals_1.expect)(result).toContain('Tagged Workflow');
            (0, globals_1.expect)(result).toContain('Tags: production, automation');
            (0, globals_1.expect)(result).toContain('ðŸ“„ Use cursor "next-page-cursor" to get the next page.');
        });
        (0, globals_1.it)('should handle empty workflow list', async () => {
            mockClient.getWorkflows.mockResolvedValue(global.testUtils.createMockApiResponse([]));
            const result = await listWorkflowsTool.execute({});
            (0, globals_1.expect)(result).toBe('No workflows found in the n8n instance.');
        });
        (0, globals_1.it)('should handle API errors with Error instance', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('API connection failed'));
            await (0, globals_1.expect)(listWorkflowsTool.execute({})).rejects.toThrow('Failed to list workflows: API connection failed');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getWorkflows.mockRejectedValue('Unknown error type');
            await (0, globals_1.expect)(listWorkflowsTool.execute({})).rejects.toThrow('Failed to list workflows with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'list-workflows')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            (0, globals_1.expect)(tool).toHaveProperty('execute');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
    });
    (0, globals_1.describe)('get-workflow tool', () => {
        let getWorkflowTool;
        (0, globals_1.beforeEach)(() => {
            getWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-workflow')[0];
        });
        (0, globals_1.it)('should get workflow details successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-123',
                name: 'Test Workflow',
                active: true,
            });
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const result = await getWorkflowTool.execute({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledWith('workflow-123');
            (0, globals_1.expect)(result).toContain('# Workflow: Test Workflow');
            (0, globals_1.expect)(result).toContain('**ID:** workflow-123');
            (0, globals_1.expect)(result).toContain('**Status:** ðŸŸ¢ Active');
        });
        (0, globals_1.it)('should get workflow details with tags and dates', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-456',
                name: 'Complex Workflow',
                active: false,
                tags: ['test', 'automation'],
                createdAt: '2023-01-01T12:00:00.000Z',
                updatedAt: '2023-01-02T15:30:00.000Z',
                nodes: [
                    { name: 'Start Node', type: 'manual' },
                    { name: undefined, type: undefined }, // Test fallback values
                ],
            });
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const result = await getWorkflowTool.execute({ workflowId: 'workflow-456' });
            (0, globals_1.expect)(result).toContain('**Tags:** test, automation');
            (0, globals_1.expect)(result).toContain('**Created:**');
            (0, globals_1.expect)(result).toContain('**Updated:**');
            (0, globals_1.expect)(result).toContain('**Status:** ðŸ”´ Inactive');
            (0, globals_1.expect)(result).toContain('Start Node');
            (0, globals_1.expect)(result).toContain('Unnamed Node');
            (0, globals_1.expect)(result).toContain('Unknown Type');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'get-workflow')?.[0];
            await (0, globals_1.expect)(tool.execute({ workflowId: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle workflow not found error', async () => {
            mockClient.getWorkflow.mockRejectedValue(new Error('Workflow not found'));
            await (0, globals_1.expect)(getWorkflowTool.execute({ workflowId: 'nonexistent' })).rejects.toThrow('Failed to get workflow: Workflow not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getWorkflow.mockRejectedValue('Unknown error type');
            await (0, globals_1.expect)(getWorkflowTool.execute({ workflowId: 'test' })).rejects.toThrow('Failed to get workflow with unknown error');
        });
    });
    (0, globals_1.describe)('create-workflow tool', () => {
        let createWorkflowTool;
        (0, globals_1.beforeEach)(() => {
            createWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-workflow')[0];
        });
        (0, globals_1.it)('should create workflow successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'new-workflow-123',
                name: 'New Workflow',
                active: false,
            });
            mockClient.createWorkflow.mockResolvedValue(mockWorkflow);
            const workflowData = {
                name: 'New Workflow',
                nodes: [{ name: 'Start', type: 'manual' }],
                connections: {},
                active: false,
            };
            const result = await createWorkflowTool.execute(workflowData);
            (0, globals_1.expect)(mockClient.createWorkflow).toHaveBeenCalledWith(workflowData);
            (0, globals_1.expect)(result).toContain('âœ… Successfully created workflow "New Workflow"');
            (0, globals_1.expect)(result).toContain('ID: new-workflow-123');
            (0, globals_1.expect)(result).toContain('ðŸ”´ Inactive');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'create-workflow')?.[0];
            const workflowData = {
                name: 'Test Workflow',
                nodes: [{ name: 'Start', type: 'manual' }],
                connections: {},
            };
            await (0, globals_1.expect)(tool.execute(workflowData)).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle creation errors with Error instance', async () => {
            mockClient.createWorkflow.mockRejectedValue(new Error('Invalid workflow data'));
            const workflowData = {
                name: 'Invalid Workflow',
                nodes: [{ name: 'Start', type: 'manual' }],
                connections: {},
            };
            await (0, globals_1.expect)(createWorkflowTool.execute(workflowData)).rejects.toThrow('Failed to create workflow: Invalid workflow data');
        });
        (0, globals_1.it)('should handle unknown creation errors', async () => {
            mockClient.createWorkflow.mockRejectedValue('Unknown error type');
            const workflowData = {
                name: 'Test Workflow',
                nodes: [{ name: 'Start', type: 'manual' }],
                connections: {},
            };
            await (0, globals_1.expect)(createWorkflowTool.execute(workflowData)).rejects.toThrow('Failed to create workflow with unknown error');
        });
        (0, globals_1.it)('should create active workflow successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'active-workflow-123',
                name: 'Active Workflow',
                active: true,
            });
            mockClient.createWorkflow.mockResolvedValue(mockWorkflow);
            const workflowData = {
                name: 'Active Workflow',
                nodes: [{ name: 'Start', type: 'manual' }],
                connections: {},
                active: true,
            };
            const result = await createWorkflowTool.execute(workflowData);
            (0, globals_1.expect)(result).toContain('âœ… Successfully created workflow "Active Workflow"');
            (0, globals_1.expect)(result).toContain('ðŸŸ¢ Active');
        });
    });
    (0, globals_1.describe)('update-workflow tool', () => {
        let updateWorkflowTool;
        (0, globals_1.beforeEach)(() => {
            updateWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-workflow')[0];
        });
        (0, globals_1.it)('should update workflow successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-123',
                name: 'Updated Workflow',
                active: false,
            });
            mockClient.updateWorkflow.mockResolvedValue(mockWorkflow);
            const updateData = {
                workflowId: 'workflow-123',
                name: 'Updated Workflow',
                active: false,
            };
            const result = await updateWorkflowTool.execute(updateData);
            (0, globals_1.expect)(mockClient.updateWorkflow).toHaveBeenCalledWith('workflow-123', {
                name: 'Updated Workflow',
                active: false,
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated workflow "Updated Workflow"');
            (0, globals_1.expect)(result).toContain('ID: workflow-123');
            (0, globals_1.expect)(result).toContain('Status: ðŸ”´ Inactive');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'update-workflow')?.[0];
            const updateData = {
                workflowId: 'test-id',
                name: 'Test Update',
            };
            await (0, globals_1.expect)(tool.execute(updateData)).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle update errors with Error instance', async () => {
            mockClient.updateWorkflow.mockRejectedValue(new Error('Workflow not found'));
            const updateData = {
                workflowId: 'nonexistent-id',
                name: 'Updated Name',
            };
            await (0, globals_1.expect)(updateWorkflowTool.execute(updateData)).rejects.toThrow('Failed to update workflow: Workflow not found');
        });
        (0, globals_1.it)('should handle unknown update errors', async () => {
            mockClient.updateWorkflow.mockRejectedValue('Unknown error type');
            const updateData = {
                workflowId: 'test-id',
                name: 'Test Update',
            };
            await (0, globals_1.expect)(updateWorkflowTool.execute(updateData)).rejects.toThrow('Failed to update workflow with unknown error');
        });
        (0, globals_1.it)('should update workflow to active status successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-456',
                name: 'Activated Workflow',
                active: true,
            });
            mockClient.updateWorkflow.mockResolvedValue(mockWorkflow);
            const updateData = {
                workflowId: 'workflow-456',
                name: 'Activated Workflow',
                active: true,
            };
            const result = await updateWorkflowTool.execute(updateData);
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated workflow "Activated Workflow"');
            (0, globals_1.expect)(result).toContain('Status: ðŸŸ¢ Active');
        });
    });
    (0, globals_1.describe)('delete-workflow tool', () => {
        let deleteWorkflowTool;
        (0, globals_1.beforeEach)(() => {
            deleteWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-workflow')[0];
        });
        (0, globals_1.it)('should delete workflow successfully', async () => {
            mockClient.deleteWorkflow.mockResolvedValue(undefined);
            const result = await deleteWorkflowTool.execute({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(mockClient.deleteWorkflow).toHaveBeenCalledWith('workflow-123');
            (0, globals_1.expect)(result).toContain('âœ… Successfully deleted workflow with ID: workflow-123');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'delete-workflow')?.[0];
            await (0, globals_1.expect)(tool.execute({ workflowId: 'test-id' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle delete errors with Error instance', async () => {
            mockClient.deleteWorkflow.mockRejectedValue(new Error('Workflow not found'));
            await (0, globals_1.expect)(deleteWorkflowTool.execute({ workflowId: 'nonexistent' })).rejects.toThrow('Failed to delete workflow: Workflow not found');
        });
        (0, globals_1.it)('should handle unknown delete errors', async () => {
            mockClient.deleteWorkflow.mockRejectedValue('Unknown error type');
            await (0, globals_1.expect)(deleteWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow('Failed to delete workflow with unknown error');
        });
    });
    (0, globals_1.describe)('workflow activation tools', () => {
        let activateWorkflowTool;
        let deactivateWorkflowTool;
        (0, globals_1.beforeEach)(() => {
            activateWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'activate-workflow')[0];
            deactivateWorkflowTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'deactivate-workflow')[0];
        });
        (0, globals_1.it)('should activate workflow successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-123',
                name: 'Test Workflow',
                active: true,
            });
            mockClient.activateWorkflow.mockResolvedValue(mockWorkflow);
            const result = await activateWorkflowTool.execute({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(mockClient.activateWorkflow).toHaveBeenCalledWith('workflow-123');
            (0, globals_1.expect)(result).toContain('âœ… Successfully activated workflow "Test Workflow"');
            (0, globals_1.expect)(result).toContain('Status: ðŸŸ¢ Active');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized for activation', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'activate-workflow')?.[0];
            await (0, globals_1.expect)(tool.execute({ workflowId: 'test-id' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle activation errors with Error instance', async () => {
            mockClient.activateWorkflow.mockRejectedValue(new Error('Workflow activation failed'));
            await (0, globals_1.expect)(activateWorkflowTool.execute({ workflowId: 'broken-workflow' })).rejects.toThrow('Failed to activate workflow: Workflow activation failed');
        });
        (0, globals_1.it)('should handle unknown activation errors', async () => {
            mockClient.activateWorkflow.mockRejectedValue('Unknown error type');
            await (0, globals_1.expect)(activateWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow('Failed to activate workflow with unknown error');
        });
        (0, globals_1.it)('should deactivate workflow successfully', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow({
                id: 'workflow-123',
                name: 'Test Workflow',
                active: false,
            });
            mockClient.deactivateWorkflow.mockResolvedValue(mockWorkflow);
            const result = await deactivateWorkflowTool.execute({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(mockClient.deactivateWorkflow).toHaveBeenCalledWith('workflow-123');
            (0, globals_1.expect)(result).toContain('âœ… Successfully deactivated workflow "Test Workflow"');
            (0, globals_1.expect)(result).toContain('Status: ðŸ”´ Inactive');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized for deactivation', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, workflow_1.createWorkflowTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'deactivate-workflow')?.[0];
            await (0, globals_1.expect)(tool.execute({ workflowId: 'test-id' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should handle deactivation errors with Error instance', async () => {
            mockClient.deactivateWorkflow.mockRejectedValue(new Error('Workflow deactivation failed'));
            await (0, globals_1.expect)(deactivateWorkflowTool.execute({ workflowId: 'broken-workflow' })).rejects.toThrow('Failed to deactivate workflow: Workflow deactivation failed');
        });
        (0, globals_1.it)('should handle unknown deactivation errors', async () => {
            mockClient.deactivateWorkflow.mockRejectedValue('Unknown error type');
            await (0, globals_1.expect)(deactivateWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow('Failed to deactivate workflow with unknown error');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,