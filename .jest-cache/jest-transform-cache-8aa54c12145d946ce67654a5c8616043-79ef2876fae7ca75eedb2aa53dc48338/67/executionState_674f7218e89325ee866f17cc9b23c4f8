34d93aca324b2fad3e522f23c8434a84
"use strict";

/**
 * Execution State Management Utilities for n8n MCP Server
 *
 * Provides utilities for managing execution state, checkpoints, retry logic,
 * and execution flow control for sophisticated workflow execution control.
 */
/* istanbul ignore next */
function cov_7mukgb8g9() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts";
  var hash = "8d7909ca1547595aac2cbe62c87ae16b498e2b30";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 0
        },
        end: {
          line: 8,
          column: 62
        }
      },
      "1": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 39
        }
      },
      "2": {
        start: {
          line: 10,
          column: 17
        },
        end: {
          line: 10,
          column: 34
        }
      },
      "3": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 28,
          column: 1
        }
      },
      "4": {
        start: {
          line: 32,
          column: 22
        },
        end: {
          line: 46,
          column: 1
        }
      },
      "5": {
        start: {
          line: 53,
          column: 17
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "6": {
        start: {
          line: 54,
          column: 18
        },
        end: {
          line: 54,
          column: 27
        }
      },
      "7": {
        start: {
          line: 55,
          column: 21
        },
        end: {
          line: 55,
          column: 30
        }
      },
      "8": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 16
        }
      },
      "9": {
        start: {
          line: 63,
          column: 34
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "10": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "11": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 121
        }
      },
      "12": {
        start: {
          line: 96,
          column: 84
        },
        end: {
          line: 96,
          column: 119
        }
      },
      "13": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "14": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 51
        }
      },
      "15": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 61
        }
      },
      "16": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 131,
          column: 33
        }
      },
      "17": {
        start: {
          line: 137,
          column: 24
        },
        end: {
          line: 137,
          column: 56
        }
      },
      "18": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 140,
          column: 9
        }
      },
      "19": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 139,
          column: 25
        }
      },
      "20": {
        start: {
          line: 141,
          column: 29
        },
        end: {
          line: 141,
          column: 60
        }
      },
      "21": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "22": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 148,
          column: 15
        }
      },
      "23": {
        start: {
          line: 149,
          column: 12
        },
        end: {
          line: 149,
          column: 25
        }
      },
      "24": {
        start: {
          line: 152,
          column: 30
        },
        end: {
          line: 152,
          column: 61
        }
      },
      "25": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 153,
          column: 51
        }
      },
      "26": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 65
        }
      },
      "27": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "28": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "29": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "30": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 20
        }
      },
      "31": {
        start: {
          line: 177,
          column: 24
        },
        end: {
          line: 177,
          column: 56
        }
      },
      "32": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "33": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 24
        }
      },
      "34": {
        start: {
          line: 181,
          column: 29
        },
        end: {
          line: 181,
          column: 70
        }
      },
      "35": {
        start: {
          line: 182,
          column: 27
        },
        end: {
          line: 193,
          column: 9
        }
      },
      "36": {
        start: {
          line: 188,
          column: 32
        },
        end: {
          line: 188,
          column: 58
        }
      },
      "37": {
        start: {
          line: 189,
          column: 29
        },
        end: {
          line: 189,
          column: 40
        }
      },
      "38": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 55
        }
      },
      "39": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 55
        }
      },
      "40": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 196,
          column: 51
        }
      },
      "41": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 26
        }
      },
      "42": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 61
        }
      },
      "43": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 206,
          column: 9
        }
      },
      "44": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 205,
          column: 25
        }
      },
      "45": {
        start: {
          line: 207,
          column: 24
        },
        end: {
          line: 207,
          column: 67
        }
      },
      "46": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "47": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 209,
          column: 25
        }
      },
      "48": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 66
        }
      },
      "49": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 220,
          column: 11
        }
      },
      "50": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "51": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 39
        }
      },
      "52": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 45
        }
      },
      "53": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 39
        }
      },
      "54": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 224,
          column: 11
        }
      },
      "55": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 228,
          column: 11
        }
      },
      "56": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 229,
          column: 20
        }
      },
      "57": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 239,
          column: 9
        }
      },
      "58": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "59": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 25
        }
      },
      "60": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 89
        }
      },
      "61": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 127
        }
      },
      "62": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 43
        }
      },
      "63": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 43
        }
      },
      "64": {
        start: {
          line: 258,
          column: 24
        },
        end: {
          line: 258,
          column: 56
        }
      },
      "65": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "66": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 25
        }
      },
      "67": {
        start: {
          line: 262,
          column: 30
        },
        end: {
          line: 262,
          column: 37
        }
      },
      "68": {
        start: {
          line: 263,
          column: 27
        },
        end: {
          line: 263,
          column: 65
        }
      },
      "69": {
        start: {
          line: 264,
          column: 27
        },
        end: {
          line: 264,
          column: 75
        }
      },
      "70": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 266,
          column: 37
        }
      },
      "71": {
        start: {
          line: 272,
          column: 24
        },
        end: {
          line: 272,
          column: 56
        }
      },
      "72": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "73": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 25
        }
      },
      "74": {
        start: {
          line: 276,
          column: 26
        },
        end: {
          line: 276,
          column: 85
        }
      },
      "75": {
        start: {
          line: 276,
          column: 65
        },
        end: {
          line: 276,
          column: 84
        }
      },
      "76": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "77": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 25
        }
      },
      "78": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 282,
          column: 57
        }
      },
      "79": {
        start: {
          line: 288,
          column: 24
        },
        end: {
          line: 288,
          column: 56
        }
      },
      "80": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "81": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 24
        }
      },
      "82": {
        start: {
          line: 292,
          column: 30
        },
        end: {
          line: 292,
          column: 37
        }
      },
      "83": {
        start: {
          line: 293,
          column: 31
        },
        end: {
          line: 293,
          column: 88
        }
      },
      "84": {
        start: {
          line: 293,
          column: 64
        },
        end: {
          line: 293,
          column: 87
        }
      },
      "85": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 82
        }
      },
      "86": {
        start: {
          line: 294,
          column: 61
        },
        end: {
          line: 294,
          column: 81
        }
      },
      "87": {
        start: {
          line: 296,
          column: 35
        },
        end: {
          line: 296,
          column: 37
        }
      },
      "88": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 297,
          column: 29
        }
      },
      "89": {
        start: {
          line: 298,
          column: 27
        },
        end: {
          line: 298,
          column: 28
        }
      },
      "90": {
        start: {
          line: 299,
          column: 27
        },
        end: {
          line: 299,
          column: 28
        }
      },
      "91": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 305,
          column: 11
        }
      },
      "92": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "93": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 302,
          column: 64
        }
      },
      "94": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 47
        }
      },
      "95": {
        start: {
          line: 307,
          column: 29
        },
        end: {
          line: 307,
          column: 77
        }
      },
      "96": {
        start: {
          line: 309,
          column: 28
        },
        end: {
          line: 317,
          column: 11
        }
      },
      "97": {
        start: {
          line: 310,
          column: 28
        },
        end: {
          line: 310,
          column: 65
        }
      },
      "98": {
        start: {
          line: 311,
          column: 28
        },
        end: {
          line: 311,
          column: 65
        }
      },
      "99": {
        start: {
          line: 313,
          column: 26
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "100": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 340,
          column: 10
        }
      },
      "101": {
        start: {
          line: 332,
          column: 45
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "102": {
        start: {
          line: 346,
          column: 24
        },
        end: {
          line: 346,
          column: 64
        }
      },
      "103": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "104": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 358,
          column: 14
        }
      },
      "105": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 377,
          column: 9
        }
      },
      "106": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 376,
          column: 14
        }
      },
      "107": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 381,
          column: 9
        }
      },
      "108": {
        start: {
          line: 380,
          column: 12
        },
        end: {
          line: 380,
          column: 61
        }
      },
      "109": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 382,
          column: 67
        }
      },
      "110": {
        start: {
          line: 383,
          column: 8
        },
        end: {
          line: 411,
          column: 9
        }
      },
      "111": {
        start: {
          line: 384,
          column: 29
        },
        end: {
          line: 384,
          column: 78
        }
      },
      "112": {
        start: {
          line: 386,
          column: 31
        },
        end: {
          line: 386,
          column: 81
        }
      },
      "113": {
        start: {
          line: 387,
          column: 26
        },
        end: {
          line: 387,
          column: 53
        }
      },
      "114": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 390,
          column: 13
        }
      },
      "115": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 44
        }
      },
      "116": {
        start: {
          line: 391,
          column: 12
        },
        end: {
          line: 391,
          column: 28
        }
      },
      "117": {
        start: {
          line: 395,
          column: 31
        },
        end: {
          line: 395,
          column: 81
        }
      },
      "118": {
        start: {
          line: 396,
          column: 26
        },
        end: {
          line: 396,
          column: 53
        }
      },
      "119": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 399,
          column: 13
        }
      },
      "120": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 44
        }
      },
      "121": {
        start: {
          line: 400,
          column: 12
        },
        end: {
          line: 410,
          column: 14
        }
      },
      "122": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 417,
          column: 56
        }
      },
      "123": {
        start: {
          line: 423,
          column: 27
        },
        end: {
          line: 423,
          column: 51
        }
      },
      "124": {
        start: {
          line: 424,
          column: 22
        },
        end: {
          line: 424,
          column: 23
        }
      },
      "125": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 437,
          column: 9
        }
      },
      "126": {
        start: {
          line: 426,
          column: 34
        },
        end: {
          line: 426,
          column: 81
        }
      },
      "127": {
        start: {
          line: 427,
          column: 32
        },
        end: {
          line: 427,
          column: 110
        }
      },
      "128": {
        start: {
          line: 428,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "129": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 429,
          column: 52
        }
      },
      "130": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 56
        }
      },
      "131": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 434,
          column: 19
        }
      },
      "132": {
        start: {
          line: 433,
          column: 20
        },
        end: {
          line: 433,
          column: 69
        }
      },
      "133": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 26
        }
      },
      "134": {
        start: {
          line: 438,
          column: 8
        },
        end: {
          line: 438,
          column: 70
        }
      },
      "135": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 439,
          column: 23
        }
      },
      "136": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 454,
          column: 9
        }
      },
      "137": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 33
        }
      },
      "138": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 35
        }
      },
      "139": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 449,
          column: 32
        }
      },
      "140": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 33
        }
      },
      "141": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 33
        }
      },
      "142": {
        start: {
          line: 457,
          column: 8
        },
        end: {
          line: 466,
          column: 10
        }
      },
      "143": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 469,
          column: 62
        }
      },
      "144": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 473,
          column: 29
        }
      },
      "145": {
        start: {
          line: 473,
          column: 12
        },
        end: {
          line: 473,
          column: 29
        }
      },
      "146": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 475,
          column: 28
        }
      },
      "147": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 28
        }
      },
      "148": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 477,
          column: 29
        }
      },
      "149": {
        start: {
          line: 477,
          column: 12
        },
        end: {
          line: 477,
          column: 29
        }
      },
      "150": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 479,
          column: 31
        }
      },
      "151": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 31
        }
      },
      "152": {
        start: {
          line: 480,
          column: 8
        },
        end: {
          line: 481,
          column: 28
        }
      },
      "153": {
        start: {
          line: 481,
          column: 12
        },
        end: {
          line: 481,
          column: 28
        }
      },
      "154": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 483,
          column: 31
        }
      },
      "155": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 31
        }
      },
      "156": {
        start: {
          line: 484,
          column: 8
        },
        end: {
          line: 485,
          column: 29
        }
      },
      "157": {
        start: {
          line: 485,
          column: 12
        },
        end: {
          line: 485,
          column: 29
        }
      },
      "158": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 25
        }
      },
      "159": {
        start: {
          line: 489,
          column: 30
        },
        end: {
          line: 489,
          column: 37
        }
      },
      "160": {
        start: {
          line: 490,
          column: 27
        },
        end: {
          line: 490,
          column: 54
        }
      },
      "161": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 494,
          column: 9
        }
      },
      "162": {
        start: {
          line: 492,
          column: 12
        },
        end: {
          line: 492,
          column: 51
        }
      },
      "163": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 493,
          column: 19
        }
      },
      "164": {
        start: {
          line: 495,
          column: 26
        },
        end: {
          line: 495,
          column: 90
        }
      },
      "165": {
        start: {
          line: 495,
          column: 59
        },
        end: {
          line: 495,
          column: 82
        }
      },
      "166": {
        start: {
          line: 496,
          column: 23
        },
        end: {
          line: 496,
          column: 84
        }
      },
      "167": {
        start: {
          line: 496,
          column: 56
        },
        end: {
          line: 496,
          column: 76
        }
      },
      "168": {
        start: {
          line: 497,
          column: 24
        },
        end: {
          line: 497,
          column: 86
        }
      },
      "169": {
        start: {
          line: 497,
          column: 57
        },
        end: {
          line: 497,
          column: 78
        }
      },
      "170": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 54
        }
      },
      "171": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 499,
          column: 48
        }
      },
      "172": {
        start: {
          line: 500,
          column: 8
        },
        end: {
          line: 500,
          column: 50
        }
      },
      "173": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 501,
          column: 109
        }
      },
      "174": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 510,
          column: 38
        }
      },
      "175": {
        start: {
          line: 507,
          column: 28
        },
        end: {
          line: 507,
          column: 65
        }
      },
      "176": {
        start: {
          line: 508,
          column: 28
        },
        end: {
          line: 508,
          column: 65
        }
      },
      "177": {
        start: {
          line: 510,
          column: 25
        },
        end: {
          line: 510,
          column: 36
        }
      },
      "178": {
        start: {
          line: 513,
          column: 28
        },
        end: {
          line: 513,
          column: 30
        }
      },
      "179": {
        start: {
          line: 515,
          column: 33
        },
        end: {
          line: 515,
          column: 108
        }
      },
      "180": {
        start: {
          line: 515,
          column: 69
        },
        end: {
          line: 515,
          column: 107
        }
      },
      "181": {
        start: {
          line: 516,
          column: 8
        },
        end: {
          line: 523,
          column: 9
        }
      },
      "182": {
        start: {
          line: 517,
          column: 12
        },
        end: {
          line: 522,
          column: 15
        }
      },
      "183": {
        start: {
          line: 524,
          column: 28
        },
        end: {
          line: 524,
          column: 88
        }
      },
      "184": {
        start: {
          line: 524,
          column: 64
        },
        end: {
          line: 524,
          column: 87
        }
      },
      "185": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 532,
          column: 9
        }
      },
      "186": {
        start: {
          line: 526,
          column: 12
        },
        end: {
          line: 531,
          column: 15
        }
      },
      "187": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 533,
          column: 27
        }
      },
      "188": {
        start: {
          line: 536,
          column: 8
        },
        end: {
          line: 551,
          column: 9
        }
      },
      "189": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 538,
          column: 64
        }
      },
      "190": {
        start: {
          line: 540,
          column: 16
        },
        end: {
          line: 540,
          column: 65
        }
      },
      "191": {
        start: {
          line: 542,
          column: 16
        },
        end: {
          line: 542,
          column: 63
        }
      },
      "192": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 544,
          column: 65
        }
      },
      "193": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 546,
          column: 64
        }
      },
      "194": {
        start: {
          line: 548,
          column: 16
        },
        end: {
          line: 548,
          column: 72
        }
      },
      "195": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 73
        }
      },
      "196": {
        start: {
          line: 555,
          column: 27
        },
        end: {
          line: 557,
          column: 10
        }
      },
      "197": {
        start: {
          line: 558,
          column: 8
        },
        end: {
          line: 558,
          column: 65
        }
      },
      "198": {
        start: {
          line: 559,
          column: 8
        },
        end: {
          line: 569,
          column: 10
        }
      },
      "199": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 66
        }
      },
      "200": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 580,
          column: 10
        }
      },
      "201": {
        start: {
          line: 583,
          column: 8
        },
        end: {
          line: 583,
          column: 66
        }
      },
      "202": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 591,
          column: 10
        }
      },
      "203": {
        start: {
          line: 594,
          column: 23
        },
        end: {
          line: 594,
          column: 69
        }
      },
      "204": {
        start: {
          line: 595,
          column: 8
        },
        end: {
          line: 600,
          column: 10
        }
      },
      "205": {
        start: {
          line: 601,
          column: 8
        },
        end: {
          line: 601,
          column: 68
        }
      },
      "206": {
        start: {
          line: 602,
          column: 8
        },
        end: {
          line: 609,
          column: 10
        }
      },
      "207": {
        start: {
          line: 612,
          column: 25
        },
        end: {
          line: 614,
          column: 25
        }
      },
      "208": {
        start: {
          line: 615,
          column: 34
        },
        end: {
          line: 615,
          column: 80
        }
      },
      "209": {
        start: {
          line: 616,
          column: 27
        },
        end: {
          line: 616,
          column: 117
        }
      },
      "210": {
        start: {
          line: 617,
          column: 8
        },
        end: {
          line: 629,
          column: 9
        }
      },
      "211": {
        start: {
          line: 618,
          column: 12
        },
        end: {
          line: 628,
          column: 14
        }
      },
      "212": {
        start: {
          line: 631,
          column: 27
        },
        end: {
          line: 631,
          column: 117
        }
      },
      "213": {
        start: {
          line: 633,
          column: 8
        },
        end: {
          line: 639,
          column: 10
        }
      },
      "214": {
        start: {
          line: 641,
          column: 8
        },
        end: {
          line: 647,
          column: 11
        }
      },
      "215": {
        start: {
          line: 642,
          column: 12
        },
        end: {
          line: 646,
          column: 13
        }
      },
      "216": {
        start: {
          line: 643,
          column: 16
        },
        end: {
          line: 643,
          column: 39
        }
      },
      "217": {
        start: {
          line: 644,
          column: 16
        },
        end: {
          line: 644,
          column: 39
        }
      },
      "218": {
        start: {
          line: 645,
          column: 16
        },
        end: {
          line: 645,
          column: 45
        }
      },
      "219": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 648,
          column: 67
        }
      },
      "220": {
        start: {
          line: 649,
          column: 8
        },
        end: {
          line: 662,
          column: 10
        }
      },
      "221": {
        start: {
          line: 665,
          column: 30
        },
        end: {
          line: 665,
          column: 63
        }
      },
      "222": {
        start: {
          line: 666,
          column: 8
        },
        end: {
          line: 678,
          column: 9
        }
      },
      "223": {
        start: {
          line: 667,
          column: 12
        },
        end: {
          line: 677,
          column: 14
        }
      },
      "224": {
        start: {
          line: 679,
          column: 26
        },
        end: {
          line: 679,
          column: 92
        }
      },
      "225": {
        start: {
          line: 679,
          column: 65
        },
        end: {
          line: 679,
          column: 91
        }
      },
      "226": {
        start: {
          line: 680,
          column: 8
        },
        end: {
          line: 692,
          column: 9
        }
      },
      "227": {
        start: {
          line: 681,
          column: 12
        },
        end: {
          line: 691,
          column: 14
        }
      },
      "228": {
        start: {
          line: 694,
          column: 29
        },
        end: {
          line: 694,
          column: 34
        }
      },
      "229": {
        start: {
          line: 695,
          column: 30
        },
        end: {
          line: 695,
          column: 32
        }
      },
      "230": {
        start: {
          line: 696,
          column: 8
        },
        end: {
          line: 706,
          column: 11
        }
      },
      "231": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 699,
          column: 13
        }
      },
      "232": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 38
        }
      },
      "233": {
        start: {
          line: 700,
          column: 12
        },
        end: {
          line: 705,
          column: 13
        }
      },
      "234": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 39
        }
      },
      "235": {
        start: {
          line: 702,
          column: 16
        },
        end: {
          line: 702,
          column: 39
        }
      },
      "236": {
        start: {
          line: 703,
          column: 16
        },
        end: {
          line: 703,
          column: 45
        }
      },
      "237": {
        start: {
          line: 704,
          column: 16
        },
        end: {
          line: 704,
          column: 48
        }
      },
      "238": {
        start: {
          line: 707,
          column: 8
        },
        end: {
          line: 707,
          column: 66
        }
      },
      "239": {
        start: {
          line: 708,
          column: 8
        },
        end: {
          line: 718,
          column: 10
        }
      },
      "240": {
        start: {
          line: 721,
          column: 0
        },
        end: {
          line: 721,
          column: 54
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 18
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        loc: {
          start: {
            line: 62,
            column: 48
          },
          end: {
            line: 132,
            column: 5
          }
        },
        line: 62
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 96,
            column: 76
          },
          end: {
            line: 96,
            column: 77
          }
        },
        loc: {
          start: {
            line: 96,
            column: 84
          },
          end: {
            line: 96,
            column: 119
          }
        },
        line: 96
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 58
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 136
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 62
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 176
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 25
          }
        },
        loc: {
          start: {
            line: 188,
            column: 32
          },
          end: {
            line: 188,
            column: 58
          }
        },
        line: 188
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 189,
            column: 21
          },
          end: {
            line: 189,
            column: 22
          }
        },
        loc: {
          start: {
            line: 189,
            column: 29
          },
          end: {
            line: 189,
            column: 40
          }
        },
        line: 189
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 40
          },
          end: {
            line: 230,
            column: 5
          }
        },
        line: 202
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 214,
            column: 45
          },
          end: {
            line: 214,
            column: 46
          }
        },
        loc: {
          start: {
            line: 214,
            column: 53
          },
          end: {
            line: 220,
            column: 9
          }
        },
        line: 214
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 234,
            column: 4
          },
          end: {
            line: 234,
            column: 5
          }
        },
        loc: {
          start: {
            line: 234,
            column: 56
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 234
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 35
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 257
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 38
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 271
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 276,
            column: 60
          },
          end: {
            line: 276,
            column: 61
          }
        },
        loc: {
          start: {
            line: 276,
            column: 65
          },
          end: {
            line: 276,
            column: 84
          }
        },
        line: 276
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 287,
            column: 4
          },
          end: {
            line: 287,
            column: 5
          }
        },
        loc: {
          start: {
            line: 287,
            column: 39
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 287
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 293,
            column: 59
          },
          end: {
            line: 293,
            column: 60
          }
        },
        loc: {
          start: {
            line: 293,
            column: 64
          },
          end: {
            line: 293,
            column: 87
          }
        },
        line: 293
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 294,
            column: 56
          },
          end: {
            line: 294,
            column: 57
          }
        },
        loc: {
          start: {
            line: 294,
            column: 61
          },
          end: {
            line: 294,
            column: 81
          }
        },
        line: 294
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 300,
            column: 31
          },
          end: {
            line: 300,
            column: 32
          }
        },
        loc: {
          start: {
            line: 300,
            column: 39
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 300
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 310,
            column: 20
          },
          end: {
            line: 310,
            column: 21
          }
        },
        loc: {
          start: {
            line: 310,
            column: 28
          },
          end: {
            line: 310,
            column: 65
          }
        },
        line: 310
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 311,
            column: 18
          },
          end: {
            line: 311,
            column: 19
          }
        },
        loc: {
          start: {
            line: 311,
            column: 28
          },
          end: {
            line: 311,
            column: 65
          }
        },
        line: 311
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 313,
            column: 17
          },
          end: {
            line: 313,
            column: 18
          }
        },
        loc: {
          start: {
            line: 313,
            column: 26
          },
          end: {
            line: 317,
            column: 9
          }
        },
        line: 313
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 332,
            column: 36
          },
          end: {
            line: 332,
            column: 37
          }
        },
        loc: {
          start: {
            line: 332,
            column: 45
          },
          end: {
            line: 338,
            column: 13
          }
        },
        line: 332
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 41
          },
          end: {
            line: 412,
            column: 5
          }
        },
        line: 345
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 416,
            column: 4
          },
          end: {
            line: 416,
            column: 5
          }
        },
        loc: {
          start: {
            line: 416,
            column: 37
          },
          end: {
            line: 418,
            column: 5
          }
        },
        line: 416
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 422,
            column: 4
          },
          end: {
            line: 422,
            column: 5
          }
        },
        loc: {
          start: {
            line: 422,
            column: 47
          },
          end: {
            line: 440,
            column: 5
          }
        },
        line: 422
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 432,
            column: 54
          },
          end: {
            line: 432,
            column: 55
          }
        },
        loc: {
          start: {
            line: 432,
            column: 68
          },
          end: {
            line: 434,
            column: 17
          }
        },
        line: 432
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 41
          },
          end: {
            line: 455,
            column: 5
          }
        },
        line: 442
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 35
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 456
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 37
          },
          end: {
            line: 470,
            column: 5
          }
        },
        line: 468
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 471,
            column: 4
          },
          end: {
            line: 471,
            column: 5
          }
        },
        loc: {
          start: {
            line: 471,
            column: 46
          },
          end: {
            line: 487,
            column: 5
          }
        },
        line: 471
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 37
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 488
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 495,
            column: 54
          },
          end: {
            line: 495,
            column: 55
          }
        },
        loc: {
          start: {
            line: 495,
            column: 59
          },
          end: {
            line: 495,
            column: 82
          }
        },
        line: 495
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 496,
            column: 51
          },
          end: {
            line: 496,
            column: 52
          }
        },
        loc: {
          start: {
            line: 496,
            column: 56
          },
          end: {
            line: 496,
            column: 76
          }
        },
        line: 496
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 497,
            column: 52
          },
          end: {
            line: 497,
            column: 53
          }
        },
        loc: {
          start: {
            line: 497,
            column: 57
          },
          end: {
            line: 497,
            column: 78
          }
        },
        line: 497
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 38
          },
          end: {
            line: 511,
            column: 5
          }
        },
        line: 503
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 507,
            column: 20
          },
          end: {
            line: 507,
            column: 21
          }
        },
        loc: {
          start: {
            line: 507,
            column: 28
          },
          end: {
            line: 507,
            column: 65
          }
        },
        line: 507
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 508,
            column: 18
          },
          end: {
            line: 508,
            column: 19
          }
        },
        loc: {
          start: {
            line: 508,
            column: 28
          },
          end: {
            line: 508,
            column: 65
          }
        },
        line: 508
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 510,
            column: 17
          },
          end: {
            line: 510,
            column: 18
          }
        },
        loc: {
          start: {
            line: 510,
            column: 25
          },
          end: {
            line: 510,
            column: 36
          }
        },
        line: 510
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 512,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        loc: {
          start: {
            line: 512,
            column: 47
          },
          end: {
            line: 534,
            column: 5
          }
        },
        line: 512
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 515,
            column: 61
          },
          end: {
            line: 515,
            column: 62
          }
        },
        loc: {
          start: {
            line: 515,
            column: 69
          },
          end: {
            line: 515,
            column: 107
          }
        },
        line: 515
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 524,
            column: 56
          },
          end: {
            line: 524,
            column: 57
          }
        },
        loc: {
          start: {
            line: 524,
            column: 64
          },
          end: {
            line: 524,
            column: 87
          }
        },
        line: 524
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 535,
            column: 4
          },
          end: {
            line: 535,
            column: 5
          }
        },
        loc: {
          start: {
            line: 535,
            column: 49
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 535
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 553,
            column: 4
          },
          end: {
            line: 553,
            column: 5
          }
        },
        loc: {
          start: {
            line: 553,
            column: 46
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 553
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 47
          },
          end: {
            line: 581,
            column: 5
          }
        },
        line: 571
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 582,
            column: 5
          }
        },
        loc: {
          start: {
            line: 582,
            column: 45
          },
          end: {
            line: 592,
            column: 5
          }
        },
        line: 582
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 593,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        loc: {
          start: {
            line: 593,
            column: 47
          },
          end: {
            line: 610,
            column: 5
          }
        },
        line: 593
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 611,
            column: 5
          }
        },
        loc: {
          start: {
            line: 611,
            column: 46
          },
          end: {
            line: 663,
            column: 5
          }
        },
        line: 611
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 641,
            column: 45
          },
          end: {
            line: 641,
            column: 46
          }
        },
        loc: {
          start: {
            line: 641,
            column: 53
          },
          end: {
            line: 647,
            column: 9
          }
        },
        line: 641
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 664,
            column: 4
          },
          end: {
            line: 664,
            column: 5
          }
        },
        loc: {
          start: {
            line: 664,
            column: 54
          },
          end: {
            line: 719,
            column: 5
          }
        },
        line: 664
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 679,
            column: 60
          },
          end: {
            line: 679,
            column: 61
          }
        },
        loc: {
          start: {
            line: 679,
            column: 65
          },
          end: {
            line: 679,
            column: 91
          }
        },
        line: 679
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 696,
            column: 45
          },
          end: {
            line: 696,
            column: 46
          }
        },
        loc: {
          start: {
            line: 696,
            column: 53
          },
          end: {
            line: 706,
            column: 9
          }
        },
        line: 696
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 62,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 62,
            column: 44
          },
          end: {
            line: 62,
            column: 46
          }
        }],
        line: 62
      },
      "1": {
        loc: {
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 84,
            column: 28
          },
          end: {
            line: 84,
            column: 65
          }
        }, {
          start: {
            line: 84,
            column: 69
          },
          end: {
            line: 84,
            column: 70
          }
        }],
        line: 84
      },
      "2": {
        loc: {
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "3": {
        loc: {
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 106,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 35
          },
          end: {
            line: 106,
            column: 58
          }
        }, {
          start: {
            line: 106,
            column: 62
          },
          end: {
            line: 106,
            column: 69
          }
        }],
        line: 106
      },
      "4": {
        loc: {
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 30
          },
          end: {
            line: 127,
            column: 76
          }
        }, {
          start: {
            line: 127,
            column: 80
          },
          end: {
            line: 127,
            column: 82
          }
        }],
        line: 127
      },
      "5": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 140,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "6": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "7": {
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 58
          }
        }, {
          start: {
            line: 154,
            column: 62
          },
          end: {
            line: 154,
            column: 64
          }
        }],
        line: 154
      },
      "8": {
        loc: {
          start: {
            line: 176,
            column: 47
          },
          end: {
            line: 176,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 176,
            column: 58
          },
          end: {
            line: 176,
            column: 60
          }
        }],
        line: 176
      },
      "9": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "10": {
        loc: {
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 8
          },
          end: {
            line: 206,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "11": {
        loc: {
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 8
          },
          end: {
            line: 210,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 215,
            column: 40
          }
        }, {
          start: {
            line: 215,
            column: 44
          },
          end: {
            line: 215,
            column: 67
          }
        }],
        line: 215
      },
      "14": {
        loc: {
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 239,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 28
          },
          end: {
            line: 235,
            column: 45
          }
        }, {
          start: {
            line: 235,
            column: 49
          },
          end: {
            line: 239,
            column: 9
          }
        }],
        line: 235
      },
      "15": {
        loc: {
          start: {
            line: 240,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 241,
            column: 12
          },
          end: {
            line: 242,
            column: 25
          }
        }, {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 244,
            column: 89
          }
        }, {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 246,
            column: 127
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 249,
            column: 43
          }
        }, {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 251,
            column: 43
          }
        }],
        line: 240
      },
      "16": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "17": {
        loc: {
          start: {
            line: 263,
            column: 27
          },
          end: {
            line: 263,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 263,
            column: 27
          },
          end: {
            line: 263,
            column: 60
          }
        }, {
          start: {
            line: 263,
            column: 64
          },
          end: {
            line: 263,
            column: 65
          }
        }],
        line: 263
      },
      "18": {
        loc: {
          start: {
            line: 264,
            column: 27
          },
          end: {
            line: 264,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 27
          },
          end: {
            line: 264,
            column: 70
          }
        }, {
          start: {
            line: 264,
            column: 74
          },
          end: {
            line: 264,
            column: 75
          }
        }],
        line: 264
      },
      "19": {
        loc: {
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 266,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 16
          },
          end: {
            line: 265,
            column: 84
          }
        }, {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 266,
            column: 35
          }
        }],
        line: 265
      },
      "20": {
        loc: {
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "21": {
        loc: {
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 8
          },
          end: {
            line: 279,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "22": {
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 282,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 280,
            column: 44
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 281,
            column: 30
          }
        }, {
          start: {
            line: 282,
            column: 12
          },
          end: {
            line: 282,
            column: 55
          }
        }],
        line: 280
      },
      "23": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "24": {
        loc: {
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "25": {
        loc: {
          start: {
            line: 310,
            column: 28
          },
          end: {
            line: 310,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 28
          },
          end: {
            line: 310,
            column: 41
          }
        }, {
          start: {
            line: 310,
            column: 45
          },
          end: {
            line: 310,
            column: 65
          }
        }],
        line: 310
      },
      "26": {
        loc: {
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 311,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 311,
            column: 39
          }
        }, {
          start: {
            line: 311,
            column: 43
          },
          end: {
            line: 311,
            column: 44
          }
        }],
        line: 311
      },
      "27": {
        loc: {
          start: {
            line: 311,
            column: 49
          },
          end: {
            line: 311,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 311,
            column: 49
          },
          end: {
            line: 311,
            column: 59
          }
        }, {
          start: {
            line: 311,
            column: 63
          },
          end: {
            line: 311,
            column: 64
          }
        }],
        line: 311
      },
      "28": {
        loc: {
          start: {
            line: 315,
            column: 22
          },
          end: {
            line: 315,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 22
          },
          end: {
            line: 315,
            column: 35
          }
        }, {
          start: {
            line: 315,
            column: 39
          },
          end: {
            line: 315,
            column: 40
          }
        }],
        line: 315
      },
      "29": {
        loc: {
          start: {
            line: 334,
            column: 27
          },
          end: {
            line: 334,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 27
          },
          end: {
            line: 334,
            column: 43
          }
        }, {
          start: {
            line: 334,
            column: 47
          },
          end: {
            line: 334,
            column: 56
          }
        }],
        line: 334
      },
      "30": {
        loc: {
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 30
          },
          end: {
            line: 335,
            column: 49
          }
        }, {
          start: {
            line: 335,
            column: 53
          },
          end: {
            line: 335,
            column: 68
          }
        }],
        line: 335
      },
      "31": {
        loc: {
          start: {
            line: 337,
            column: 28
          },
          end: {
            line: 337,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 64
          },
          end: {
            line: 337,
            column: 71
          }
        }, {
          start: {
            line: 337,
            column: 74
          },
          end: {
            line: 337,
            column: 82
          }
        }],
        line: 337
      },
      "32": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "33": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 377,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "34": {
        loc: {
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 8
          },
          end: {
            line: 381,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "35": {
        loc: {
          start: {
            line: 386,
            column: 31
          },
          end: {
            line: 386,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 386,
            column: 31
          },
          end: {
            line: 386,
            column: 75
          }
        }, {
          start: {
            line: 386,
            column: 79
          },
          end: {
            line: 386,
            column: 81
          }
        }],
        line: 386
      },
      "36": {
        loc: {
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "37": {
        loc: {
          start: {
            line: 395,
            column: 31
          },
          end: {
            line: 395,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 395,
            column: 31
          },
          end: {
            line: 395,
            column: 75
          }
        }, {
          start: {
            line: 395,
            column: 79
          },
          end: {
            line: 395,
            column: 81
          }
        }],
        line: 395
      },
      "38": {
        loc: {
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 399,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 12
          },
          end: {
            line: 399,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "39": {
        loc: {
          start: {
            line: 402,
            column: 54
          },
          end: {
            line: 402,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 402,
            column: 79
          },
          end: {
            line: 402,
            column: 92
          }
        }, {
          start: {
            line: 402,
            column: 95
          },
          end: {
            line: 402,
            column: 110
          }
        }],
        line: 402
      },
      "40": {
        loc: {
          start: {
            line: 408,
            column: 29
          },
          end: {
            line: 408,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 408,
            column: 54
          },
          end: {
            line: 408,
            column: 67
          }
        }, {
          start: {
            line: 408,
            column: 70
          },
          end: {
            line: 408,
            column: 85
          }
        }],
        line: 408
      },
      "41": {
        loc: {
          start: {
            line: 417,
            column: 15
          },
          end: {
            line: 417,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 15
          },
          end: {
            line: 417,
            column: 47
          }
        }, {
          start: {
            line: 417,
            column: 51
          },
          end: {
            line: 417,
            column: 55
          }
        }],
        line: 417
      },
      "42": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 422,
            column: 26
          },
          end: {
            line: 422,
            column: 45
          }
        }],
        line: 422
      },
      "43": {
        loc: {
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 436,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 428,
            column: 12
          },
          end: {
            line: 436,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 428
      },
      "44": {
        loc: {
          start: {
            line: 428,
            column: 16
          },
          end: {
            line: 428,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 428,
            column: 16
          },
          end: {
            line: 428,
            column: 27
          }
        }, {
          start: {
            line: 428,
            column: 31
          },
          end: {
            line: 428,
            column: 57
          }
        }],
        line: 428
      },
      "45": {
        loc: {
          start: {
            line: 443,
            column: 8
          },
          end: {
            line: 454,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 444,
            column: 12
          },
          end: {
            line: 445,
            column: 33
          }
        }, {
          start: {
            line: 446,
            column: 12
          },
          end: {
            line: 447,
            column: 35
          }
        }, {
          start: {
            line: 448,
            column: 12
          },
          end: {
            line: 449,
            column: 32
          }
        }, {
          start: {
            line: 450,
            column: 12
          },
          end: {
            line: 451,
            column: 33
          }
        }, {
          start: {
            line: 452,
            column: 12
          },
          end: {
            line: 453,
            column: 33
          }
        }],
        line: 443
      },
      "46": {
        loc: {
          start: {
            line: 469,
            column: 15
          },
          end: {
            line: 469,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 15
          },
          end: {
            line: 469,
            column: 52
          }
        }, {
          start: {
            line: 469,
            column: 56
          },
          end: {
            line: 469,
            column: 61
          }
        }],
        line: 469
      },
      "47": {
        loc: {
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 8
          },
          end: {
            line: 473,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "48": {
        loc: {
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 472,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 472,
            column: 12
          },
          end: {
            line: 472,
            column: 30
          }
        }, {
          start: {
            line: 472,
            column: 34
          },
          end: {
            line: 472,
            column: 50
          }
        }],
        line: 472
      },
      "49": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 475,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "50": {
        loc: {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 474,
            column: 30
          }
        }, {
          start: {
            line: 474,
            column: 34
          },
          end: {
            line: 474,
            column: 49
          }
        }],
        line: 474
      },
      "51": {
        loc: {
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 476,
            column: 8
          },
          end: {
            line: 477,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 476
      },
      "52": {
        loc: {
          start: {
            line: 476,
            column: 12
          },
          end: {
            line: 476,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 476,
            column: 12
          },
          end: {
            line: 476,
            column: 29
          }
        }, {
          start: {
            line: 476,
            column: 33
          },
          end: {
            line: 476,
            column: 49
          }
        }],
        line: 476
      },
      "53": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 479,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "54": {
        loc: {
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 480,
            column: 8
          },
          end: {
            line: 481,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 480
      },
      "55": {
        loc: {
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 483,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 483,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "56": {
        loc: {
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 485,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 484,
            column: 8
          },
          end: {
            line: 485,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 484
      },
      "57": {
        loc: {
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 494,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 491,
            column: 8
          },
          end: {
            line: 494,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 491
      },
      "58": {
        loc: {
          start: {
            line: 507,
            column: 28
          },
          end: {
            line: 507,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 507,
            column: 28
          },
          end: {
            line: 507,
            column: 41
          }
        }, {
          start: {
            line: 507,
            column: 45
          },
          end: {
            line: 507,
            column: 65
          }
        }],
        line: 507
      },
      "59": {
        loc: {
          start: {
            line: 508,
            column: 29
          },
          end: {
            line: 508,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 29
          },
          end: {
            line: 508,
            column: 39
          }
        }, {
          start: {
            line: 508,
            column: 43
          },
          end: {
            line: 508,
            column: 44
          }
        }],
        line: 508
      },
      "60": {
        loc: {
          start: {
            line: 508,
            column: 49
          },
          end: {
            line: 508,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 49
          },
          end: {
            line: 508,
            column: 59
          }
        }, {
          start: {
            line: 508,
            column: 63
          },
          end: {
            line: 508,
            column: 64
          }
        }],
        line: 508
      },
      "61": {
        loc: {
          start: {
            line: 515,
            column: 69
          },
          end: {
            line: 515,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 69
          },
          end: {
            line: 515,
            column: 82
          }
        }, {
          start: {
            line: 515,
            column: 86
          },
          end: {
            line: 515,
            column: 107
          }
        }],
        line: 515
      },
      "62": {
        loc: {
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 523,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 516,
            column: 8
          },
          end: {
            line: 523,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 516
      },
      "63": {
        loc: {
          start: {
            line: 525,
            column: 8
          },
          end: {
            line: 532,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 525,
            column: 8
          },
          end: {
            line: 532,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 525
      },
      "64": {
        loc: {
          start: {
            line: 536,
            column: 8
          },
          end: {
            line: 551,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 537,
            column: 12
          },
          end: {
            line: 538,
            column: 64
          }
        }, {
          start: {
            line: 539,
            column: 12
          },
          end: {
            line: 540,
            column: 65
          }
        }, {
          start: {
            line: 541,
            column: 12
          },
          end: {
            line: 542,
            column: 63
          }
        }, {
          start: {
            line: 543,
            column: 12
          },
          end: {
            line: 544,
            column: 65
          }
        }, {
          start: {
            line: 545,
            column: 12
          },
          end: {
            line: 546,
            column: 64
          }
        }, {
          start: {
            line: 547,
            column: 12
          },
          end: {
            line: 548,
            column: 72
          }
        }, {
          start: {
            line: 549,
            column: 12
          },
          end: {
            line: 550,
            column: 73
          }
        }],
        line: 536
      },
      "65": {
        loc: {
          start: {
            line: 594,
            column: 23
          },
          end: {
            line: 594,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 594,
            column: 23
          },
          end: {
            line: 594,
            column: 49
          }
        }, {
          start: {
            line: 594,
            column: 53
          },
          end: {
            line: 594,
            column: 69
          }
        }],
        line: 594
      },
      "66": {
        loc: {
          start: {
            line: 612,
            column: 25
          },
          end: {
            line: 614,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 612,
            column: 25
          },
          end: {
            line: 612,
            column: 58
          }
        }, {
          start: {
            line: 613,
            column: 12
          },
          end: {
            line: 613,
            column: 64
          }
        }, {
          start: {
            line: 614,
            column: 12
          },
          end: {
            line: 614,
            column: 25
          }
        }],
        line: 612
      },
      "67": {
        loc: {
          start: {
            line: 615,
            column: 34
          },
          end: {
            line: 615,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 615,
            column: 34
          },
          end: {
            line: 615,
            column: 75
          }
        }, {
          start: {
            line: 615,
            column: 79
          },
          end: {
            line: 615,
            column: 80
          }
        }],
        line: 615
      },
      "68": {
        loc: {
          start: {
            line: 616,
            column: 27
          },
          end: {
            line: 616,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 616,
            column: 27
          },
          end: {
            line: 616,
            column: 57
          }
        }, {
          start: {
            line: 616,
            column: 61
          },
          end: {
            line: 616,
            column: 112
          }
        }, {
          start: {
            line: 616,
            column: 116
          },
          end: {
            line: 616,
            column: 117
          }
        }],
        line: 616
      },
      "69": {
        loc: {
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 629,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 617,
            column: 8
          },
          end: {
            line: 629,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 617
      },
      "70": {
        loc: {
          start: {
            line: 638,
            column: 33
          },
          end: {
            line: 638,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 638,
            column: 33
          },
          end: {
            line: 638,
            column: 81
          }
        }, {
          start: {
            line: 638,
            column: 85
          },
          end: {
            line: 638,
            column: 105
          }
        }],
        line: 638
      },
      "71": {
        loc: {
          start: {
            line: 642,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 642,
            column: 12
          },
          end: {
            line: 646,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 642
      },
      "72": {
        loc: {
          start: {
            line: 666,
            column: 8
          },
          end: {
            line: 678,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 666,
            column: 8
          },
          end: {
            line: 678,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 666
      },
      "73": {
        loc: {
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 680,
            column: 8
          },
          end: {
            line: 692,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 680
      },
      "74": {
        loc: {
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 699,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 699,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 697
      },
      "75": {
        loc: {
          start: {
            line: 700,
            column: 12
          },
          end: {
            line: 705,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 700,
            column: 12
          },
          end: {
            line: 705,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 700
      },
      "76": {
        loc: {
          start: {
            line: 700,
            column: 16
          },
          end: {
            line: 700,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 700,
            column: 16
          },
          end: {
            line: 700,
            column: 30
          }
        }, {
          start: {
            line: 700,
            column: 34
          },
          end: {
            line: 700,
            column: 78
          }
        }],
        line: 700
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0, 0, 0, 0, 0],
      "65": [0, 0],
      "66": [0, 0, 0],
      "67": [0, 0],
      "68": [0, 0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts"],
      sourcesContent: ["/**\n * Execution State Management Utilities for n8n MCP Server\n *\n * Provides utilities for managing execution state, checkpoints, retry logic,\n * and execution flow control for sophisticated workflow execution control.\n */\n\nimport { EventEmitter } from 'events';\nimport { N8nExecution, N8nNode } from '../types/n8n.js';\nimport {\n  ExecutionState,\n  ExecutionAction,\n  CancellationReason,\n  RetryStrategy,\n  NodeExecutionState,\n  ExecutionCheckpoint,\n  ExecutionControlConfig,\n  EnhancedExecution,\n  ExecutionControlRequest,\n  ExecutionControlResponse,\n  ExecutionHistoryEntry,\n  ExecutionAnalytics,\n  ExecutionControlContext,\n} from '../types/executionTypes.js';\n\n/**\n * Execution state transition matrix\n */\nconst STATE_TRANSITIONS: Record<ExecutionState, ExecutionState[]> = {\n  pending: ['running', 'cancelled'],\n  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],\n  paused: ['running', 'stopping', 'cancelled'],\n  pausing: ['paused', 'running'],\n  stopping: ['stopped', 'cancelled'],\n  stopped: ['running', 'cancelled'],\n  cancelled: [],\n  completed: ['retrying'],\n  failed: ['retrying', 'cancelled'],\n  timeout: ['retrying', 'cancelled'],\n  waiting: ['running', 'cancelled', 'timeout'],\n  retrying: ['running', 'failed', 'cancelled'],\n  partial: ['running', 'completed', 'failed', 'cancelled'],\n};\n\n/**\n * Available actions for each execution state\n */\nconst STATE_ACTIONS: Record<ExecutionState, ExecutionAction[]> = {\n  pending: ['start', 'cancel'],\n  running: ['pause', 'stop', 'cancel'],\n  paused: ['resume', 'stop', 'cancel'],\n  pausing: ['stop', 'cancel'],\n  stopping: ['cancel'],\n  stopped: ['start', 'cancel'],\n  cancelled: ['retry'],\n  completed: ['retry'],\n  failed: ['retry', 'retry-from-node'],\n  timeout: ['retry', 'cancel'],\n  waiting: ['resume', 'cancel'],\n  retrying: ['stop', 'cancel'],\n  partial: ['resume', 'stop', 'cancel', 'execute-partial'],\n};\n\n/**\n * Execution State Manager\n *\n * Manages execution state transitions, checkpoints, and execution flow control.\n */\nexport class ExecutionStateManager extends EventEmitter {\n  private executions = new Map<string, ExecutionControlContext>();\n  private checkpoints = new Map<string, ExecutionCheckpoint>();\n  private activeRequests = new Map<string, ExecutionControlRequest[]>();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialize execution tracking\n   */\n  initializeExecution(\n    execution: N8nExecution,\n    config: Partial<ExecutionControlConfig> = {}\n  ): EnhancedExecution {\n    const enhancedExecution: EnhancedExecution = {\n      ...execution,\n      enhancedState: this.mapN8nStatusToExecutionState(execution.status),\n      priority: 'normal',\n      nodeStates: [],\n      checkpoints: [],\n      controlConfig: {\n        maxExecutionTime: 3600000, // 1 hour default\n        maxExecutionRetries: 3,\n        defaultRetryStrategy: 'exponential',\n        retryDelay: {\n          initial: 1000,\n          multiplier: 2,\n          maximum: 30000,\n        },\n        enableCheckpoints: true,\n        checkpointInterval: 5,\n        allowPartialExecution: true,\n        ...config,\n      },\n      progress: {\n        totalNodes: execution.workflowData?.nodes?.length || 0,\n        completedNodes: 0,\n        failedNodes: 0,\n        skippedNodes: 0,\n        percentComplete: 0,\n      },\n      metrics: {\n        nodeExecutionTimes: {},\n      },\n    };\n\n    // Initialize node states if workflow data is available\n    if (execution.workflowData?.nodes) {\n      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node =>\n        this.createNodeExecutionState(node)\n      );\n    }\n\n    const context: ExecutionControlContext = {\n      execution: enhancedExecution,\n      config: enhancedExecution.controlConfig,\n      monitoring: {\n        enableRealTimeMonitoring: true,\n        monitoringInterval: 5000,\n        metricsToCollect: ['cpu', 'memory', 'duration'],\n        alertThresholds: {\n          executionTime: config.maxExecutionTime || 3600000,\n          memoryUsage: 1024 * 1024 * 1024, // 1GB\n          cpuUsage: 80,\n          errorRate: 10,\n        },\n        notifications: {\n          onFailure: true,\n          onTimeout: true,\n          onCompletion: false,\n          onThresholdExceeded: true,\n        },\n      },\n      history: [\n        {\n          timestamp: new Date().toISOString(),\n          state: enhancedExecution.enhancedState,\n          event: 'started',\n          description: 'Execution tracking initialized',\n        },\n      ],\n      activeRequests: [],\n      availableActions: STATE_ACTIONS[enhancedExecution.enhancedState] || [],\n    };\n\n    this.executions.set(execution.id, context);\n    this.emit('executionInitialized', enhancedExecution);\n\n    return enhancedExecution;\n  }\n\n  /**\n   * Update execution state\n   */\n  updateExecutionState(\n    executionId: string,\n    newState: ExecutionState,\n    metadata?: Record<string, unknown>\n  ): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const currentState = context.execution.enhancedState;\n\n    // Validate state transition\n    if (!this.isValidStateTransition(currentState, newState)) {\n      this.emit('invalidStateTransition', {\n        executionId,\n        from: currentState,\n        to: newState,\n      });\n      return false;\n    }\n\n    // Update state\n    const previousState = context.execution.enhancedState;\n    context.execution.enhancedState = newState;\n    context.availableActions = STATE_ACTIONS[newState] || [];\n\n    // Add history entry\n    context.history.push({\n      timestamp: new Date().toISOString(),\n      state: newState,\n      event: this.getEventTypeFromStateTransition(previousState, newState),\n      description: `State changed from ${previousState} to ${newState}`,\n      metadata,\n    });\n\n    // Update progress\n    this.updateExecutionProgress(context);\n\n    this.emit('stateChanged', {\n      executionId,\n      previousState,\n      newState,\n      context,\n    });\n\n    return true;\n  }\n\n  /**\n   * Create execution checkpoint\n   */\n  createCheckpoint(\n    executionId: string,\n    description: string,\n    metadata: Record<string, unknown> = {}\n  ): ExecutionCheckpoint | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const checkpointId = `checkpoint_${executionId}_${Date.now()}`;\n    const checkpoint: ExecutionCheckpoint = {\n      checkpointId,\n      executionId,\n      timestamp: new Date().toISOString(),\n      description,\n      completedNodes: context.execution.nodeStates\n        .filter(node => node.state === 'completed')\n        .map(node => node.nodeId),\n      executionState: { ...context.execution },\n      nodeStates: [...context.execution.nodeStates],\n      metadata,\n    };\n\n    this.checkpoints.set(checkpointId, checkpoint);\n    context.execution.checkpoints.push(checkpoint);\n\n    this.emit('checkpointCreated', checkpoint);\n\n    return checkpoint;\n  }\n\n  /**\n   * Restore execution from checkpoint\n   */\n  restoreFromCheckpoint(checkpointId: string): boolean {\n    const checkpoint = this.checkpoints.get(checkpointId);\n    if (!checkpoint) {\n      return false;\n    }\n\n    const context = this.executions.get(checkpoint.executionId);\n    if (!context) {\n      return false;\n    }\n\n    // Restore node states\n    context.execution.nodeStates = [...checkpoint.nodeStates];\n\n    // Reset nodes that were running or failed to pending\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'running' || node.state === 'failed') {\n        node.state = 'pending';\n        node.completedAt = undefined;\n        node.error = undefined;\n      }\n    });\n\n    // Update execution state\n    this.updateExecutionState(checkpoint.executionId, 'pending', {\n      restoredFromCheckpoint: checkpointId,\n    });\n\n    this.emit('checkpointRestored', {\n      executionId: checkpoint.executionId,\n      checkpointId,\n    });\n\n    return true;\n  }\n\n  /**\n   * Calculate retry delay based on strategy\n   */\n  calculateRetryDelay(\n    strategy: RetryStrategy,\n    attemptCount: number,\n    config: ExecutionControlConfig\n  ): number {\n    const retryConfig = config.retryDelay || {\n      initial: 1000,\n      multiplier: 2,\n      maximum: 30000,\n    };\n\n    switch (strategy) {\n      case 'immediate':\n        return 0;\n\n      case 'linear':\n        return Math.min(retryConfig.initial * attemptCount, retryConfig.maximum);\n\n      case 'exponential':\n        return Math.min(\n          retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1),\n          retryConfig.maximum\n        );\n\n      case 'custom':\n        // Custom strategies can be implemented by overriding this method\n        return retryConfig.initial;\n\n      default:\n        return retryConfig.initial;\n    }\n  }\n\n  /**\n   * Check if execution can be retried\n   */\n  canRetryExecution(executionId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const { execution } = context;\n    const retryCount = execution.retryInfo?.attemptCount || 0;\n    const maxRetries = execution.controlConfig.maxExecutionRetries || 3;\n\n    return (\n      ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState) &&\n      retryCount < maxRetries\n    );\n  }\n\n  /**\n   * Check if node can be retried\n   */\n  canRetryNode(executionId: string, nodeId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === nodeId);\n    if (!nodeState) {\n      return false;\n    }\n\n    return (\n      nodeState.state === 'failed' &&\n      nodeState.canRetry &&\n      nodeState.retryCount < nodeState.maxRetries\n    );\n  }\n\n  /**\n   * Get execution analytics\n   */\n  getExecutionAnalytics(executionId: string): ExecutionAnalytics | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const { execution } = context;\n    const completedNodes = execution.nodeStates.filter(n => n.state === 'completed');\n    const failedNodes = execution.nodeStates.filter(n => n.state === 'failed');\n\n    // Calculate performance metrics\n    const nodeExecutionTimes: Record<string, number> = {};\n    let totalDuration = 0;\n    const memoryPeak = 0;\n    const cpuAverage = 0;\n\n    completedNodes.forEach(node => {\n      if (node.duration) {\n        nodeExecutionTimes[node.nodeId] = node.duration;\n        totalDuration += node.duration;\n      }\n    });\n\n    // Find critical path (longest execution path)\n    const criticalPath = this.calculateCriticalPath(execution.nodeStates);\n\n    // Identify bottlenecks\n    const bottlenecks = completedNodes\n      .filter(node => node.duration && node.duration > 5000) // Nodes taking > 5 seconds\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 5)\n      .map(node => ({\n        nodeId: node.nodeId,\n        duration: node.duration || 0,\n        type: 'cpu' as const, // Could be enhanced to detect actual bottleneck type\n      }));\n\n    return {\n      executionId,\n      timestamp: new Date().toISOString(),\n      performance: {\n        totalDuration,\n        nodeExecutionTimes,\n        memoryPeak,\n        cpuAverage,\n      },\n      flow: {\n        criticalPath,\n        parallelNodes: [], // Could be calculated from workflow connections\n        bottlenecks,\n      },\n      errors: failedNodes.map(node => ({\n        nodeId: node.nodeId,\n        errorType: node.error?.type || 'unknown',\n        errorMessage: node.error?.message || 'Unknown error',\n        retryCount: node.retryCount,\n        resolution: node.retryCount < node.maxRetries ? 'retry' : 'manual',\n      })),\n      optimizations: this.generateOptimizationSuggestions(execution),\n    };\n  }\n\n  /**\n   * Process execution control request\n   */\n  async processControlRequest(request: ExecutionControlRequest): Promise<ExecutionControlResponse> {\n    const context = this.executions.get(request.executionId);\n    if (!context) {\n      return {\n        success: false,\n        message: `Execution ${request.executionId} not found`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'EXECUTION_NOT_FOUND',\n          message: 'The specified execution ID was not found',\n        },\n      };\n    }\n\n    // Check if action is allowed in current state\n    if (!context.availableActions.includes(request.action)) {\n      return {\n        success: false,\n        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'INVALID_ACTION',\n          message: `Action not allowed in current state`,\n          details: {\n            currentState: context.execution.enhancedState,\n            allowedActions: context.availableActions,\n          },\n        },\n      };\n    }\n\n    // Add request to active requests\n    if (!this.activeRequests.has(request.executionId)) {\n      this.activeRequests.set(request.executionId, []);\n    }\n    this.activeRequests.get(request.executionId)!.push(request);\n\n    try {\n      const response = await this.executeControlAction(context, request);\n\n      // Remove request from active requests\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return response;\n    } catch (error) {\n      // Remove request from active requests on error\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return {\n        success: false,\n        message: `Failed to execute action: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'ACTION_EXECUTION_FAILED',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        },\n      };\n    }\n  }\n\n  /**\n   * Get execution context\n   */\n  getExecutionContext(executionId: string): ExecutionControlContext | null {\n    return this.executions.get(executionId) || null;\n  }\n\n  /**\n   * Clean up completed or old executions\n   */\n  cleanup(olderThanMs: number = 24 * 60 * 60 * 1000): number {\n    const cutoffTime = Date.now() - olderThanMs;\n    let cleaned = 0;\n\n    for (const [executionId, context] of this.executions.entries()) {\n      const executionTime = new Date(context.execution.startedAt).getTime();\n      const isCompleted = ['completed', 'failed', 'cancelled'].includes(\n        context.execution.enhancedState\n      );\n\n      if (isCompleted && executionTime < cutoffTime) {\n        this.executions.delete(executionId);\n        this.activeRequests.delete(executionId);\n\n        // Clean up associated checkpoints\n        context.execution.checkpoints.forEach(checkpoint => {\n          this.checkpoints.delete(checkpoint.checkpointId);\n        });\n\n        cleaned++;\n      }\n    }\n\n    this.emit('cleanupCompleted', { cleanedExecutions: cleaned });\n    return cleaned;\n  }\n\n  // Private helper methods\n\n  private mapN8nStatusToExecutionState(status: string): ExecutionState {\n    switch (status) {\n      case 'running':\n        return 'running';\n      case 'success':\n        return 'completed';\n      case 'error':\n        return 'failed';\n      case 'waiting':\n        return 'waiting';\n      default:\n        return 'pending';\n    }\n  }\n\n  private createNodeExecutionState(node: N8nNode): NodeExecutionState {\n    return {\n      nodeId: node.id,\n      nodeName: node.name,\n      nodeType: node.type,\n      state: 'pending',\n      retryCount: 0,\n      maxRetries: 3,\n      canRetry: true,\n      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase()),\n    };\n  }\n\n  private isValidStateTransition(from: ExecutionState, to: ExecutionState): boolean {\n    return STATE_TRANSITIONS[from]?.includes(to) || false;\n  }\n\n  private getEventTypeFromStateTransition(\n    from: ExecutionState,\n    to: ExecutionState\n  ): ExecutionHistoryEntry['event'] {\n    if (from === 'pending' && to === 'running') return 'started';\n    if (from === 'running' && to === 'paused') return 'paused';\n    if (from === 'paused' && to === 'running') return 'resumed';\n    if (to === 'completed') return 'completed';\n    if (to === 'failed') return 'failed';\n    if (to === 'cancelled') return 'cancelled';\n    if (to === 'retrying') return 'retried';\n    return 'started';\n  }\n\n  private updateExecutionProgress(context: ExecutionControlContext): void {\n    const { execution } = context;\n    const totalNodes = execution.nodeStates.length;\n\n    if (totalNodes === 0) {\n      execution.progress.percentComplete = 0;\n      return;\n    }\n\n    const completed = execution.nodeStates.filter(n => n.state === 'completed').length;\n    const failed = execution.nodeStates.filter(n => n.state === 'failed').length;\n    const skipped = execution.nodeStates.filter(n => n.state === 'skipped').length;\n\n    execution.progress.completedNodes = completed;\n    execution.progress.failedNodes = failed;\n    execution.progress.skippedNodes = skipped;\n    execution.progress.percentComplete = Math.round(\n      ((completed + failed + skipped) / totalNodes) * 100\n    );\n  }\n\n  private calculateCriticalPath(nodeStates: NodeExecutionState[]): string[] {\n    // Simplified critical path calculation\n    // In a real implementation, this would analyze workflow connections\n    return nodeStates\n      .filter(node => node.duration && node.duration > 1000)\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 10)\n      .map(node => node.nodeId);\n  }\n\n  private generateOptimizationSuggestions(\n    execution: EnhancedExecution\n  ): ExecutionAnalytics['optimizations'] {\n    const suggestions: ExecutionAnalytics['optimizations'] = [];\n\n    // Suggest optimizations based on execution patterns\n    const longRunningNodes = execution.nodeStates.filter(\n      node => node.duration && node.duration > 10000\n    );\n\n    if (longRunningNodes.length > 0) {\n      suggestions.push({\n        type: 'performance',\n        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,\n        estimatedImpact: 'Reducing execution time by 30-50%',\n        priority: 'high',\n      });\n    }\n\n    const failedNodes = execution.nodeStates.filter(node => node.state === 'failed');\n    if (failedNodes.length > 0) {\n      suggestions.push({\n        type: 'reliability',\n        description: 'Consider adding error handling and retry logic for failed nodes',\n        estimatedImpact: 'Improving workflow reliability by 60-80%',\n        priority: 'high',\n      });\n    }\n\n    return suggestions;\n  }\n\n  private async executeControlAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    switch (request.action) {\n      case 'pause':\n        return this.handlePauseAction(context, request);\n      case 'resume':\n        return this.handleResumeAction(context, request);\n      case 'stop':\n        return this.handleStopAction(context, request);\n      case 'cancel':\n        return this.handleCancelAction(context, request);\n      case 'retry':\n        return this.handleRetryAction(context, request);\n      case 'retry-from-node':\n        return this.handleRetryFromNodeAction(context, request);\n      default:\n        throw new Error(`Unsupported action: ${request.action}`);\n    }\n  }\n\n  private async handlePauseAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    // Create checkpoint before pausing\n    const checkpoint = this.createCheckpoint(request.executionId, 'Execution paused by user', {\n      pausedBy: request.requestedBy,\n    });\n\n    this.updateExecutionState(request.executionId, 'paused');\n\n    return {\n      success: true,\n      message: 'Execution paused successfully',\n      executionState: 'paused',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        checkpointId: checkpoint?.checkpointId,\n      },\n    };\n  }\n\n  private async handleResumeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'running');\n\n    return {\n      success: true,\n      message: 'Execution resumed successfully',\n      executionState: 'running',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleStopAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'stopped');\n\n    return {\n      success: true,\n      message: 'Execution stopped successfully',\n      executionState: 'stopped',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleCancelAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const reason = request.parameters?.reason || 'user-requested';\n\n    context.execution.cancellation = {\n      reason: reason as CancellationReason,\n      requestedAt: request.requestedAt,\n      requestedBy: request.requestedBy,\n      cancelledAt: new Date().toISOString(),\n    };\n\n    this.updateExecutionState(request.executionId, 'cancelled');\n\n    return {\n      success: true,\n      message: `Execution cancelled successfully (${reason})`,\n      executionState: 'cancelled',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleRetryAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const strategy =\n      request.parameters?.retryStrategy ||\n      context.execution.controlConfig.defaultRetryStrategy ||\n      'exponential';\n    const currentRetryCount = context.execution.retryInfo?.attemptCount || 0;\n    const maxRetries =\n      request.parameters?.maxRetries || context.execution.controlConfig.maxExecutionRetries || 3;\n\n    if (currentRetryCount >= maxRetries) {\n      return {\n        success: false,\n        message: `Maximum retry attempts (${maxRetries}) exceeded`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MAX_RETRIES_EXCEEDED',\n          message: 'The execution has reached the maximum number of retry attempts',\n        },\n      };\n    }\n\n    // Calculate retry delay\n    const retryDelay = this.calculateRetryDelay(\n      strategy,\n      currentRetryCount + 1,\n      context.execution.controlConfig\n    );\n\n    // Update retry information\n    context.execution.retryInfo = {\n      strategy,\n      attemptCount: currentRetryCount + 1,\n      maxAttempts: maxRetries,\n      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),\n      originalExecutionId: context.execution.retryInfo?.originalExecutionId || context.execution.id,\n    };\n\n    // Reset node states for retry\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'failed') {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'retrying');\n\n    return {\n      success: true,\n      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,\n      executionState: 'retrying',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        estimatedCompletion: context.execution.retryInfo.nextRetryAt,\n        performanceImpact: {\n          estimatedDelay: retryDelay,\n        },\n      },\n    };\n  }\n\n  private async handleRetryFromNodeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const startFromNode = request.parameters?.startFromNode;\n    if (!startFromNode) {\n      return {\n        success: false,\n        message: 'startFromNode parameter is required for retry-from-node action',\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MISSING_PARAMETER',\n          message: 'The startFromNode parameter is required',\n        },\n      };\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === startFromNode);\n    if (!nodeState) {\n      return {\n        success: false,\n        message: `Node ${startFromNode} not found in execution`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'NODE_NOT_FOUND',\n          message: 'The specified node was not found in the execution',\n        },\n      };\n    }\n\n    // Reset nodes from the specified node onwards\n    let resetFromFound = false;\n    const affectedNodes: string[] = [];\n\n    context.execution.nodeStates.forEach(node => {\n      if (node.nodeId === startFromNode) {\n        resetFromFound = true;\n      }\n\n      if (resetFromFound && ['failed', 'completed'].includes(node.state)) {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n        affectedNodes.push(node.nodeId);\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'partial');\n\n    return {\n      success: true,\n      message: `Execution will retry from node ${startFromNode}`,\n      executionState: 'partial',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        affectedNodes,\n      },\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8d7909ca1547595aac2cbe62c87ae16b498e2b30"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mukgb8g9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mukgb8g9();
cov_7mukgb8g9().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_7mukgb8g9().s[1]++;
exports.ExecutionStateManager = void 0;
const events_1 =
/* istanbul ignore next */
(cov_7mukgb8g9().s[2]++, require("events"));
/**
 * Execution state transition matrix
 */
const STATE_TRANSITIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[3]++, {
  pending: ['running', 'cancelled'],
  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],
  paused: ['running', 'stopping', 'cancelled'],
  pausing: ['paused', 'running'],
  stopping: ['stopped', 'cancelled'],
  stopped: ['running', 'cancelled'],
  cancelled: [],
  completed: ['retrying'],
  failed: ['retrying', 'cancelled'],
  timeout: ['retrying', 'cancelled'],
  waiting: ['running', 'cancelled', 'timeout'],
  retrying: ['running', 'failed', 'cancelled'],
  partial: ['running', 'completed', 'failed', 'cancelled']
});
/**
 * Available actions for each execution state
 */
const STATE_ACTIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[4]++, {
  pending: ['start', 'cancel'],
  running: ['pause', 'stop', 'cancel'],
  paused: ['resume', 'stop', 'cancel'],
  pausing: ['stop', 'cancel'],
  stopping: ['cancel'],
  stopped: ['start', 'cancel'],
  cancelled: ['retry'],
  completed: ['retry'],
  failed: ['retry', 'retry-from-node'],
  timeout: ['retry', 'cancel'],
  waiting: ['resume', 'cancel'],
  retrying: ['stop', 'cancel'],
  partial: ['resume', 'stop', 'cancel', 'execute-partial']
});
/**
 * Execution State Manager
 *
 * Manages execution state transitions, checkpoints, and execution flow control.
 */
class ExecutionStateManager extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  executions =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[5]++, new Map());
  checkpoints =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[6]++, new Map());
  activeRequests =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[7]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[0]++;
    cov_7mukgb8g9().s[8]++;
    super();
  }
  /**
   * Initialize execution tracking
   */
  initializeExecution(execution, config =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[1]++;
    const enhancedExecution =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[9]++, {
      ...execution,
      enhancedState: this.mapN8nStatusToExecutionState(execution.status),
      priority: 'normal',
      nodeStates: [],
      checkpoints: [],
      controlConfig: {
        maxExecutionTime: 3600000,
        // 1 hour default
        maxExecutionRetries: 3,
        defaultRetryStrategy: 'exponential',
        retryDelay: {
          initial: 1000,
          multiplier: 2,
          maximum: 30000
        },
        enableCheckpoints: true,
        checkpointInterval: 5,
        allowPartialExecution: true,
        ...config
      },
      progress: {
        totalNodes:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][0]++, execution.workflowData?.nodes?.length) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][1]++, 0),
        completedNodes: 0,
        failedNodes: 0,
        skippedNodes: 0,
        percentComplete: 0
      },
      metrics: {
        nodeExecutionTimes: {}
      }
    });
    // Initialize node states if workflow data is available
    /* istanbul ignore next */
    cov_7mukgb8g9().s[10]++;
    if (execution.workflowData?.nodes) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[2][0]++;
      cov_7mukgb8g9().s[11]++;
      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[2]++;
        cov_7mukgb8g9().s[12]++;
        return this.createNodeExecutionState(node);
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[2][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[13]++, {
      execution: enhancedExecution,
      config: enhancedExecution.controlConfig,
      monitoring: {
        enableRealTimeMonitoring: true,
        monitoringInterval: 5000,
        metricsToCollect: ['cpu', 'memory', 'duration'],
        alertThresholds: {
          executionTime:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][0]++, config.maxExecutionTime) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][1]++, 3600000),
          memoryUsage: 1024 * 1024 * 1024,
          // 1GB
          cpuUsage: 80,
          errorRate: 10
        },
        notifications: {
          onFailure: true,
          onTimeout: true,
          onCompletion: false,
          onThresholdExceeded: true
        }
      },
      history: [{
        timestamp: new Date().toISOString(),
        state: enhancedExecution.enhancedState,
        event: 'started',
        description: 'Execution tracking initialized'
      }],
      activeRequests: [],
      availableActions:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][0]++, STATE_ACTIONS[enhancedExecution.enhancedState]) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][1]++, [])
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[14]++;
    this.executions.set(execution.id, context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[15]++;
    this.emit('executionInitialized', enhancedExecution);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[16]++;
    return enhancedExecution;
  }
  /**
   * Update execution state
   */
  updateExecutionState(executionId, newState, metadata) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[3]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[17]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[18]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[5][0]++;
      cov_7mukgb8g9().s[19]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[5][1]++;
    }
    const currentState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[20]++, context.execution.enhancedState);
    // Validate state transition
    /* istanbul ignore next */
    cov_7mukgb8g9().s[21]++;
    if (!this.isValidStateTransition(currentState, newState)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[6][0]++;
      cov_7mukgb8g9().s[22]++;
      this.emit('invalidStateTransition', {
        executionId,
        from: currentState,
        to: newState
      });
      /* istanbul ignore next */
      cov_7mukgb8g9().s[23]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[6][1]++;
    }
    // Update state
    const previousState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[24]++, context.execution.enhancedState);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[25]++;
    context.execution.enhancedState = newState;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[26]++;
    context.availableActions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][0]++, STATE_ACTIONS[newState]) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][1]++, []);
    // Add history entry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[27]++;
    context.history.push({
      timestamp: new Date().toISOString(),
      state: newState,
      event: this.getEventTypeFromStateTransition(previousState, newState),
      description: `State changed from ${previousState} to ${newState}`,
      metadata
    });
    // Update progress
    /* istanbul ignore next */
    cov_7mukgb8g9().s[28]++;
    this.updateExecutionProgress(context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[29]++;
    this.emit('stateChanged', {
      executionId,
      previousState,
      newState,
      context
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[30]++;
    return true;
  }
  /**
   * Create execution checkpoint
   */
  createCheckpoint(executionId, description, metadata =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[4]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[31]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[32]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[9][0]++;
      cov_7mukgb8g9().s[33]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[9][1]++;
    }
    const checkpointId =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[34]++, `checkpoint_${executionId}_${Date.now()}`);
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[35]++, {
      checkpointId,
      executionId,
      timestamp: new Date().toISOString(),
      description,
      completedNodes: context.execution.nodeStates.filter(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[5]++;
        cov_7mukgb8g9().s[36]++;
        return node.state === 'completed';
      }).map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[6]++;
        cov_7mukgb8g9().s[37]++;
        return node.nodeId;
      }),
      executionState: {
        ...context.execution
      },
      nodeStates: [...context.execution.nodeStates],
      metadata
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[38]++;
    this.checkpoints.set(checkpointId, checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[39]++;
    context.execution.checkpoints.push(checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[40]++;
    this.emit('checkpointCreated', checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[41]++;
    return checkpoint;
  }
  /**
   * Restore execution from checkpoint
   */
  restoreFromCheckpoint(checkpointId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[7]++;
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[42]++, this.checkpoints.get(checkpointId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[43]++;
    if (!checkpoint) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[10][0]++;
      cov_7mukgb8g9().s[44]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[10][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[45]++, this.executions.get(checkpoint.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[46]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[11][0]++;
      cov_7mukgb8g9().s[47]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[11][1]++;
    }
    // Restore node states
    cov_7mukgb8g9().s[48]++;
    context.execution.nodeStates = [...checkpoint.nodeStates];
    // Reset nodes that were running or failed to pending
    /* istanbul ignore next */
    cov_7mukgb8g9().s[49]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[8]++;
      cov_7mukgb8g9().s[50]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][0]++, node.state === 'running') ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][1]++, node.state === 'failed')) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[12][0]++;
        cov_7mukgb8g9().s[51]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[52]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[53]++;
        node.error = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[12][1]++;
      }
    });
    // Update execution state
    /* istanbul ignore next */
    cov_7mukgb8g9().s[54]++;
    this.updateExecutionState(checkpoint.executionId, 'pending', {
      restoredFromCheckpoint: checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[55]++;
    this.emit('checkpointRestored', {
      executionId: checkpoint.executionId,
      checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[56]++;
    return true;
  }
  /**
   * Calculate retry delay based on strategy
   */
  calculateRetryDelay(strategy, attemptCount, config) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[9]++;
    const retryConfig =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[57]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][0]++, config.retryDelay) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][1]++, {
      initial: 1000,
      multiplier: 2,
      maximum: 30000
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[58]++;
    switch (strategy) {
      case 'immediate':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][0]++;
        cov_7mukgb8g9().s[59]++;
        return 0;
      case 'linear':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][1]++;
        cov_7mukgb8g9().s[60]++;
        return Math.min(retryConfig.initial * attemptCount, retryConfig.maximum);
      case 'exponential':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][2]++;
        cov_7mukgb8g9().s[61]++;
        return Math.min(retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1), retryConfig.maximum);
      case 'custom':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][3]++;
        cov_7mukgb8g9().s[62]++;
        // Custom strategies can be implemented by overriding this method
        return retryConfig.initial;
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][4]++;
        cov_7mukgb8g9().s[63]++;
        return retryConfig.initial;
    }
  }
  /**
   * Check if execution can be retried
   */
  canRetryExecution(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[10]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[64]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[65]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[16][0]++;
      cov_7mukgb8g9().s[66]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[16][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[67]++, context);
    const retryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[68]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][0]++, execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[69]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][0]++, execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][1]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[70]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[19][0]++, ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState)) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[19][1]++, retryCount < maxRetries);
  }
  /**
   * Check if node can be retried
   */
  canRetryNode(executionId, nodeId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[11]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[71]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[72]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[20][0]++;
      cov_7mukgb8g9().s[73]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[20][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[74]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[12]++;
      cov_7mukgb8g9().s[75]++;
      return n.nodeId === nodeId;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[76]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[21][0]++;
      cov_7mukgb8g9().s[77]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[21][1]++;
    }
    cov_7mukgb8g9().s[78]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[22][0]++, nodeState.state === 'failed') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][1]++, nodeState.canRetry) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][2]++, nodeState.retryCount < nodeState.maxRetries);
  }
  /**
   * Get execution analytics
   */
  getExecutionAnalytics(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[13]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[79]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[80]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[23][0]++;
      cov_7mukgb8g9().s[81]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[23][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[82]++, context);
    const completedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[83]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[14]++;
      cov_7mukgb8g9().s[84]++;
      return n.state === 'completed';
    }));
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[85]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[15]++;
      cov_7mukgb8g9().s[86]++;
      return n.state === 'failed';
    }));
    // Calculate performance metrics
    const nodeExecutionTimes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[87]++, {});
    let totalDuration =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[88]++, 0);
    const memoryPeak =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[89]++, 0);
    const cpuAverage =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[90]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[91]++;
    completedNodes.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[16]++;
      cov_7mukgb8g9().s[92]++;
      if (node.duration) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[24][0]++;
        cov_7mukgb8g9().s[93]++;
        nodeExecutionTimes[node.nodeId] = node.duration;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[94]++;
        totalDuration += node.duration;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[24][1]++;
      }
    });
    // Find critical path (longest execution path)
    const criticalPath =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[95]++, this.calculateCriticalPath(execution.nodeStates));
    // Identify bottlenecks
    const bottlenecks =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[96]++, completedNodes.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[17]++;
      cov_7mukgb8g9().s[97]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[25][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[25][1]++, node.duration > 5000);
    }) // Nodes taking > 5 seconds
    .sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[18]++;
      cov_7mukgb8g9().s[98]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][1]++, 0));
    }).slice(0, 5).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[19]++;
      cov_7mukgb8g9().s[99]++;
      return {
        nodeId: node.nodeId,
        duration:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][0]++, node.duration) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][1]++, 0),
        type: 'cpu' // Could be enhanced to detect actual bottleneck type
      };
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[100]++;
    return {
      executionId,
      timestamp: new Date().toISOString(),
      performance: {
        totalDuration,
        nodeExecutionTimes,
        memoryPeak,
        cpuAverage
      },
      flow: {
        criticalPath,
        parallelNodes: [],
        // Could be calculated from workflow connections
        bottlenecks
      },
      errors: failedNodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[20]++;
        cov_7mukgb8g9().s[101]++;
        return {
          nodeId: node.nodeId,
          errorType:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][0]++, node.error?.type) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][1]++, 'unknown'),
          errorMessage:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][0]++, node.error?.message) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][1]++, 'Unknown error'),
          retryCount: node.retryCount,
          resolution: node.retryCount < node.maxRetries ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][0]++, 'retry') :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][1]++, 'manual')
        };
      }),
      optimizations: this.generateOptimizationSuggestions(execution)
    };
  }
  /**
   * Process execution control request
   */
  async processControlRequest(request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[21]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[102]++, this.executions.get(request.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[103]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[32][0]++;
      cov_7mukgb8g9().s[104]++;
      return {
        success: false,
        message: `Execution ${request.executionId} not found`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'EXECUTION_NOT_FOUND',
          message: 'The specified execution ID was not found'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[32][1]++;
    }
    // Check if action is allowed in current state
    cov_7mukgb8g9().s[105]++;
    if (!context.availableActions.includes(request.action)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[33][0]++;
      cov_7mukgb8g9().s[106]++;
      return {
        success: false,
        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'INVALID_ACTION',
          message: `Action not allowed in current state`,
          details: {
            currentState: context.execution.enhancedState,
            allowedActions: context.availableActions
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[33][1]++;
    }
    // Add request to active requests
    cov_7mukgb8g9().s[107]++;
    if (!this.activeRequests.has(request.executionId)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[34][0]++;
      cov_7mukgb8g9().s[108]++;
      this.activeRequests.set(request.executionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[34][1]++;
    }
    cov_7mukgb8g9().s[109]++;
    this.activeRequests.get(request.executionId).push(request);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[110]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[111]++, await this.executeControlAction(context, request));
      // Remove request from active requests
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[112]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[113]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[114]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[36][0]++;
        cov_7mukgb8g9().s[115]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[36][1]++;
      }
      cov_7mukgb8g9().s[116]++;
      return response;
    } catch (error) {
      // Remove request from active requests on error
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[117]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[118]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[119]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[38][0]++;
        cov_7mukgb8g9().s[120]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[38][1]++;
      }
      cov_7mukgb8g9().s[121]++;
      return {
        success: false,
        message: `Failed to execute action: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][1]++, 'Unknown error')}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'ACTION_EXECUTION_FAILED',
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][0]++, error.message) :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][1]++, 'Unknown error')
        }
      };
    }
  }
  /**
   * Get execution context
   */
  getExecutionContext(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[22]++;
    cov_7mukgb8g9().s[122]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[41][0]++, this.executions.get(executionId)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[41][1]++, null);
  }
  /**
   * Clean up completed or old executions
   */
  cleanup(olderThanMs =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[42][0]++, 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[23]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[123]++, Date.now() - olderThanMs);
    let cleaned =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[124]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[125]++;
    for (const [executionId, context] of this.executions.entries()) {
      const executionTime =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[126]++, new Date(context.execution.startedAt).getTime());
      const isCompleted =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[127]++, ['completed', 'failed', 'cancelled'].includes(context.execution.enhancedState));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[128]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][0]++, isCompleted) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][1]++, executionTime < cutoffTime)) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[43][0]++;
        cov_7mukgb8g9().s[129]++;
        this.executions.delete(executionId);
        /* istanbul ignore next */
        cov_7mukgb8g9().s[130]++;
        this.activeRequests.delete(executionId);
        // Clean up associated checkpoints
        /* istanbul ignore next */
        cov_7mukgb8g9().s[131]++;
        context.execution.checkpoints.forEach(checkpoint => {
          /* istanbul ignore next */
          cov_7mukgb8g9().f[24]++;
          cov_7mukgb8g9().s[132]++;
          this.checkpoints.delete(checkpoint.checkpointId);
        });
        /* istanbul ignore next */
        cov_7mukgb8g9().s[133]++;
        cleaned++;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[43][1]++;
      }
    }
    /* istanbul ignore next */
    cov_7mukgb8g9().s[134]++;
    this.emit('cleanupCompleted', {
      cleanedExecutions: cleaned
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[135]++;
    return cleaned;
  }
  // Private helper methods
  mapN8nStatusToExecutionState(status) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[25]++;
    cov_7mukgb8g9().s[136]++;
    switch (status) {
      case 'running':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][0]++;
        cov_7mukgb8g9().s[137]++;
        return 'running';
      case 'success':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][1]++;
        cov_7mukgb8g9().s[138]++;
        return 'completed';
      case 'error':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][2]++;
        cov_7mukgb8g9().s[139]++;
        return 'failed';
      case 'waiting':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][3]++;
        cov_7mukgb8g9().s[140]++;
        return 'waiting';
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][4]++;
        cov_7mukgb8g9().s[141]++;
        return 'pending';
    }
  }
  createNodeExecutionState(node) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[26]++;
    cov_7mukgb8g9().s[142]++;
    return {
      nodeId: node.id,
      nodeName: node.name,
      nodeType: node.type,
      state: 'pending',
      retryCount: 0,
      maxRetries: 3,
      canRetry: true,
      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase())
    };
  }
  isValidStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[27]++;
    cov_7mukgb8g9().s[143]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[46][0]++, STATE_TRANSITIONS[from]?.includes(to)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[46][1]++, false);
  }
  getEventTypeFromStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[28]++;
    cov_7mukgb8g9().s[144]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][0]++, from === 'pending') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[47][0]++;
      cov_7mukgb8g9().s[145]++;
      return 'started';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[47][1]++;
    }
    cov_7mukgb8g9().s[146]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][0]++, from === 'running') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][1]++, to === 'paused')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[49][0]++;
      cov_7mukgb8g9().s[147]++;
      return 'paused';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[49][1]++;
    }
    cov_7mukgb8g9().s[148]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][0]++, from === 'paused') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[51][0]++;
      cov_7mukgb8g9().s[149]++;
      return 'resumed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[51][1]++;
    }
    cov_7mukgb8g9().s[150]++;
    if (to === 'completed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[53][0]++;
      cov_7mukgb8g9().s[151]++;
      return 'completed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[53][1]++;
    }
    cov_7mukgb8g9().s[152]++;
    if (to === 'failed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[54][0]++;
      cov_7mukgb8g9().s[153]++;
      return 'failed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[54][1]++;
    }
    cov_7mukgb8g9().s[154]++;
    if (to === 'cancelled') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[55][0]++;
      cov_7mukgb8g9().s[155]++;
      return 'cancelled';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[55][1]++;
    }
    cov_7mukgb8g9().s[156]++;
    if (to === 'retrying') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[56][0]++;
      cov_7mukgb8g9().s[157]++;
      return 'retried';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[56][1]++;
    }
    cov_7mukgb8g9().s[158]++;
    return 'started';
  }
  updateExecutionProgress(context) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[29]++;
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[159]++, context);
    const totalNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[160]++, execution.nodeStates.length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[161]++;
    if (totalNodes === 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[57][0]++;
      cov_7mukgb8g9().s[162]++;
      execution.progress.percentComplete = 0;
      /* istanbul ignore next */
      cov_7mukgb8g9().s[163]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[57][1]++;
    }
    const completed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[164]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[30]++;
      cov_7mukgb8g9().s[165]++;
      return n.state === 'completed';
    }).length);
    const failed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[166]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[31]++;
      cov_7mukgb8g9().s[167]++;
      return n.state === 'failed';
    }).length);
    const skipped =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[168]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[32]++;
      cov_7mukgb8g9().s[169]++;
      return n.state === 'skipped';
    }).length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[170]++;
    execution.progress.completedNodes = completed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[171]++;
    execution.progress.failedNodes = failed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[172]++;
    execution.progress.skippedNodes = skipped;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[173]++;
    execution.progress.percentComplete = Math.round((completed + failed + skipped) / totalNodes * 100);
  }
  calculateCriticalPath(nodeStates) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[33]++;
    cov_7mukgb8g9().s[174]++;
    // Simplified critical path calculation
    // In a real implementation, this would analyze workflow connections
    return nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[34]++;
      cov_7mukgb8g9().s[175]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[58][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[58][1]++, node.duration > 1000);
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[35]++;
      cov_7mukgb8g9().s[176]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][1]++, 0));
    }).slice(0, 10).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[36]++;
      cov_7mukgb8g9().s[177]++;
      return node.nodeId;
    });
  }
  generateOptimizationSuggestions(execution) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[37]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[178]++, []);
    // Suggest optimizations based on execution patterns
    const longRunningNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[179]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[38]++;
      cov_7mukgb8g9().s[180]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[61][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[61][1]++, node.duration > 10000);
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[181]++;
    if (longRunningNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[62][0]++;
      cov_7mukgb8g9().s[182]++;
      suggestions.push({
        type: 'performance',
        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,
        estimatedImpact: 'Reducing execution time by 30-50%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[62][1]++;
    }
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[183]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[39]++;
      cov_7mukgb8g9().s[184]++;
      return node.state === 'failed';
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[185]++;
    if (failedNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[63][0]++;
      cov_7mukgb8g9().s[186]++;
      suggestions.push({
        type: 'reliability',
        description: 'Consider adding error handling and retry logic for failed nodes',
        estimatedImpact: 'Improving workflow reliability by 60-80%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[63][1]++;
    }
    cov_7mukgb8g9().s[187]++;
    return suggestions;
  }
  async executeControlAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[40]++;
    cov_7mukgb8g9().s[188]++;
    switch (request.action) {
      case 'pause':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][0]++;
        cov_7mukgb8g9().s[189]++;
        return this.handlePauseAction(context, request);
      case 'resume':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][1]++;
        cov_7mukgb8g9().s[190]++;
        return this.handleResumeAction(context, request);
      case 'stop':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][2]++;
        cov_7mukgb8g9().s[191]++;
        return this.handleStopAction(context, request);
      case 'cancel':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][3]++;
        cov_7mukgb8g9().s[192]++;
        return this.handleCancelAction(context, request);
      case 'retry':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][4]++;
        cov_7mukgb8g9().s[193]++;
        return this.handleRetryAction(context, request);
      case 'retry-from-node':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][5]++;
        cov_7mukgb8g9().s[194]++;
        return this.handleRetryFromNodeAction(context, request);
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][6]++;
        cov_7mukgb8g9().s[195]++;
        throw new Error(`Unsupported action: ${request.action}`);
    }
  }
  async handlePauseAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[41]++;
    // Create checkpoint before pausing
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[196]++, this.createCheckpoint(request.executionId, 'Execution paused by user', {
      pausedBy: request.requestedBy
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[197]++;
    this.updateExecutionState(request.executionId, 'paused');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[198]++;
    return {
      success: true,
      message: 'Execution paused successfully',
      executionState: 'paused',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        checkpointId: checkpoint?.checkpointId
      }
    };
  }
  async handleResumeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[42]++;
    cov_7mukgb8g9().s[199]++;
    this.updateExecutionState(request.executionId, 'running');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[200]++;
    return {
      success: true,
      message: 'Execution resumed successfully',
      executionState: 'running',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleStopAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[43]++;
    cov_7mukgb8g9().s[201]++;
    this.updateExecutionState(request.executionId, 'stopped');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[202]++;
    return {
      success: true,
      message: 'Execution stopped successfully',
      executionState: 'stopped',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleCancelAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[44]++;
    const reason =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[203]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][0]++, request.parameters?.reason) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][1]++, 'user-requested'));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[204]++;
    context.execution.cancellation = {
      reason: reason,
      requestedAt: request.requestedAt,
      requestedBy: request.requestedBy,
      cancelledAt: new Date().toISOString()
    };
    /* istanbul ignore next */
    cov_7mukgb8g9().s[205]++;
    this.updateExecutionState(request.executionId, 'cancelled');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[206]++;
    return {
      success: true,
      message: `Execution cancelled successfully (${reason})`,
      executionState: 'cancelled',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleRetryAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[45]++;
    const strategy =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[207]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][0]++, request.parameters?.retryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][1]++, context.execution.controlConfig.defaultRetryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][2]++, 'exponential'));
    const currentRetryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[208]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][0]++, context.execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[209]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][0]++, request.parameters?.maxRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][1]++, context.execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][2]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[210]++;
    if (currentRetryCount >= maxRetries) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[69][0]++;
      cov_7mukgb8g9().s[211]++;
      return {
        success: false,
        message: `Maximum retry attempts (${maxRetries}) exceeded`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MAX_RETRIES_EXCEEDED',
          message: 'The execution has reached the maximum number of retry attempts'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[69][1]++;
    }
    // Calculate retry delay
    const retryDelay =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[212]++, this.calculateRetryDelay(strategy, currentRetryCount + 1, context.execution.controlConfig));
    // Update retry information
    /* istanbul ignore next */
    cov_7mukgb8g9().s[213]++;
    context.execution.retryInfo = {
      strategy,
      attemptCount: currentRetryCount + 1,
      maxAttempts: maxRetries,
      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),
      originalExecutionId:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][0]++, context.execution.retryInfo?.originalExecutionId) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][1]++, context.execution.id)
    };
    // Reset node states for retry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[214]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[46]++;
      cov_7mukgb8g9().s[215]++;
      if (node.state === 'failed') {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[71][0]++;
        cov_7mukgb8g9().s[216]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[217]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[218]++;
        node.completedAt = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[71][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[219]++;
    this.updateExecutionState(request.executionId, 'retrying');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[220]++;
    return {
      success: true,
      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,
      executionState: 'retrying',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        estimatedCompletion: context.execution.retryInfo.nextRetryAt,
        performanceImpact: {
          estimatedDelay: retryDelay
        }
      }
    };
  }
  async handleRetryFromNodeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[47]++;
    const startFromNode =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[221]++, request.parameters?.startFromNode);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[222]++;
    if (!startFromNode) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[72][0]++;
      cov_7mukgb8g9().s[223]++;
      return {
        success: false,
        message: 'startFromNode parameter is required for retry-from-node action',
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MISSING_PARAMETER',
          message: 'The startFromNode parameter is required'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[72][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[224]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[48]++;
      cov_7mukgb8g9().s[225]++;
      return n.nodeId === startFromNode;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[226]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[73][0]++;
      cov_7mukgb8g9().s[227]++;
      return {
        success: false,
        message: `Node ${startFromNode} not found in execution`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'NODE_NOT_FOUND',
          message: 'The specified node was not found in the execution'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[73][1]++;
    }
    // Reset nodes from the specified node onwards
    let resetFromFound =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[228]++, false);
    const affectedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[229]++, []);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[230]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[49]++;
      cov_7mukgb8g9().s[231]++;
      if (node.nodeId === startFromNode) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[74][0]++;
        cov_7mukgb8g9().s[232]++;
        resetFromFound = true;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[74][1]++;
      }
      cov_7mukgb8g9().s[233]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][0]++, resetFromFound) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][1]++, ['failed', 'completed'].includes(node.state))) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[75][0]++;
        cov_7mukgb8g9().s[234]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[235]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[236]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[237]++;
        affectedNodes.push(node.nodeId);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[75][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[238]++;
    this.updateExecutionState(request.executionId, 'partial');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[239]++;
    return {
      success: true,
      message: `Execution will retry from node ${startFromNode}`,
      executionState: 'partial',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        affectedNodes
      }
    };
  }
}
/* istanbul ignore next */
cov_7mukgb8g9().s[240]++;
exports.ExecutionStateManager = ExecutionStateManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,