694b1a09853997dda5015d5438559bc4
// Mock for Zod to fix Jest ES module import issues
const createMockSchema = () => ({
  parse: (data) => data,
  safeParse: (data) => ({ success: true, data }),
  optional: () => createMockSchema(),
  min: () => createMockSchema(),
  max: () => createMockSchema(),
  email: () => createMockSchema(),
  url: () => createMockSchema(),
  default: () => createMockSchema(),
  refine: () => createMockSchema(),
  transform: () => createMockSchema(),
  pipe: () => createMockSchema(),
  nullable: () => createMockSchema(),
  nullish: () => createMockSchema(),
  and: () => createMockSchema(),
  or: () => createMockSchema(),
  catch: () => createMockSchema(),
  preprocess: () => createMockSchema(),
  brand: () => createMockSchema(),
});

const mockZod = {
  z: {
    string: () => createMockSchema(),
    number: () => createMockSchema(),
    boolean: () => createMockSchema(),
    any: () => createMockSchema(),
    unknown: () => createMockSchema(),
    void: () => createMockSchema(),
    null: () => createMockSchema(),
    undefined: () => createMockSchema(),
    literal: () => createMockSchema(),
    object: (shape) => ({
      shape,
      parse: (data) => data,
      safeParse: (data) => ({ success: true, data }),
      optional: () => createMockSchema(),
      refine: () => createMockSchema(),
      extend: () => createMockSchema(),
      merge: () => createMockSchema(),
      pick: () => createMockSchema(),
      omit: () => createMockSchema(),
      partial: () => createMockSchema(),
      deepPartial: () => createMockSchema(),
      required: () => createMockSchema(),
      passthrough: () => createMockSchema(),
      strict: () => createMockSchema(),
      strip: () => createMockSchema(),
      catchall: () => createMockSchema(),
    }),
    array: (item) => ({
      item,
      parse: (data) => data,
      safeParse: (data) => ({ success: true, data }),
      optional: () => createMockSchema(),
      min: () => createMockSchema(),
      max: () => createMockSchema(),
      length: () => createMockSchema(),
      nonempty: () => createMockSchema(),
      refine: () => createMockSchema(),
    }),
    record: (value) => ({
      value,
      parse: (data) => data,
      safeParse: (data) => ({ success: true, data }),
      optional: () => createMockSchema(),
      refine: () => createMockSchema(),
    }),
    enum: (values) => ({
      values,
      parse: (data) => data,
      safeParse: (data) => ({ success: true, data }),
      optional: () => createMockSchema(),
    }),
    union: () => createMockSchema(),
    intersection: () => createMockSchema(),
    tuple: () => createMockSchema(),
    lazy: () => createMockSchema(),
    nativeEnum: () => createMockSchema(),
    function: () => createMockSchema(),
    instanceof: () => createMockSchema(),
    promise: () => createMockSchema(),
    date: () => createMockSchema(),
    bigint: () => createMockSchema(),
    symbol: () => createMockSchema(),
    map: () => createMockSchema(),
    set: () => createMockSchema(),
    nan: () => createMockSchema(),
    never: () => createMockSchema(),
    discriminatedUnion: () => createMockSchema(),
    coerce: {
      string: () => createMockSchema(),
      number: () => createMockSchema(),
      boolean: () => createMockSchema(),
      bigint: () => createMockSchema(),
      date: () => createMockSchema(),
    },
    NEVER: Symbol('NEVER'),
    infer: (schema) => schema,
    custom: () => createMockSchema(),
    ostring: () => createMockSchema(),
    onumber: () => createMockSchema(),
    oboolean: () => createMockSchema(),
  },
};

module.exports = mockZod;
module.exports.z = mockZod.z;
module.exports.default = mockZod;