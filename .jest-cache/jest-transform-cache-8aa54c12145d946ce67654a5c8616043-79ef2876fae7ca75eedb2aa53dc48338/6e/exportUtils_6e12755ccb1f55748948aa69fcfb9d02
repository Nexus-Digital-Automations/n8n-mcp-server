882234802bfdff7da281f5696f2fa932
/* istanbul ignore next */
function cov_2ps4yyv4hd() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/exportUtils.ts";
  var hash = "291d5a4e353a9ae342a3e611ec3b22255f4292ca";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/exportUtils.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 10,
          column: 66
        }
      },
      "2": {
        start: {
          line: 11,
          column: 31
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "3": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 30
        }
      },
      "4": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 26
        }
      },
      "5": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 40,
          column: 9
        }
      },
      "6": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 39,
          column: 13
        }
      },
      "7": {
        start: {
          line: 34,
          column: 39
        },
        end: {
          line: 34,
          column: 85
        }
      },
      "8": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 45
        }
      },
      "9": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 80
        }
      },
      "10": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 23
        }
      },
      "11": {
        start: {
          line: 47,
          column: 27
        },
        end: {
          line: 47,
          column: 72
        }
      },
      "12": {
        start: {
          line: 48,
          column: 33
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "13": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "14": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 52
        }
      },
      "15": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 32
        }
      },
      "16": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 26
        }
      },
      "17": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "18": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 75,
          column: 13
        }
      },
      "19": {
        start: {
          line: 70,
          column: 41
        },
        end: {
          line: 70,
          column: 91
        }
      },
      "20": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "21": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 84
        }
      },
      "22": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 23
        }
      },
      "23": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 83,
          column: 63
        }
      },
      "24": {
        start: {
          line: 85,
          column: 34
        },
        end: {
          line: 85,
          column: 79
        }
      },
      "25": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 100
        }
      },
      "26": {
        start: {
          line: 86,
          column: 85
        },
        end: {
          line: 86,
          column: 89
        }
      },
      "27": {
        start: {
          line: 87,
          column: 26
        },
        end: {
          line: 87,
          column: 28
        }
      },
      "28": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "29": {
        start: {
          line: 90,
          column: 40
        },
        end: {
          line: 90,
          column: 87
        }
      },
      "30": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 105
        }
      },
      "31": {
        start: {
          line: 91,
          column: 89
        },
        end: {
          line: 91,
          column: 93
        }
      },
      "32": {
        start: {
          line: 94,
          column: 34
        },
        end: {
          line: 94,
          column: 66
        }
      },
      "33": {
        start: {
          line: 95,
          column: 33
        },
        end: {
          line: 96,
          column: 9
        }
      },
      "34": {
        start: {
          line: 95,
          column: 68
        },
        end: {
          line: 95,
          column: 109
        }
      },
      "35": {
        start: {
          line: 97,
          column: 30
        },
        end: {
          line: 105,
          column: 9
        }
      },
      "36": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 29
        }
      },
      "37": {
        start: {
          line: 112,
          column: 27
        },
        end: {
          line: 112,
          column: 51
        }
      },
      "38": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 64
        }
      },
      "39": {
        start: {
          line: 115,
          column: 25
        },
        end: {
          line: 115,
          column: 27
        }
      },
      "40": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 124,
          column: 9
        }
      },
      "41": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "42": {
        start: {
          line: 118,
          column: 38
        },
        end: {
          line: 118,
          column: 83
        }
      },
      "43": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 45
        }
      },
      "44": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 79
        }
      },
      "45": {
        start: {
          line: 126,
          column: 37
        },
        end: {
          line: 126,
          column: 69
        }
      },
      "46": {
        start: {
          line: 127,
          column: 35
        },
        end: {
          line: 127,
          column: 100
        }
      },
      "47": {
        start: {
          line: 127,
          column: 65
        },
        end: {
          line: 127,
          column: 98
        }
      },
      "48": {
        start: {
          line: 127,
          column: 87
        },
        end: {
          line: 127,
          column: 91
        }
      },
      "49": {
        start: {
          line: 128,
          column: 34
        },
        end: {
          line: 130,
          column: 27
        }
      },
      "50": {
        start: {
          line: 129,
          column: 25
        },
        end: {
          line: 129,
          column: 54
        }
      },
      "51": {
        start: {
          line: 130,
          column: 22
        },
        end: {
          line: 130,
          column: 26
        }
      },
      "52": {
        start: {
          line: 131,
          column: 32
        },
        end: {
          line: 131,
          column: 86
        }
      },
      "53": {
        start: {
          line: 133,
          column: 32
        },
        end: {
          line: 133,
          column: 34
        }
      },
      "54": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 141,
          column: 9
        }
      },
      "55": {
        start: {
          line: 135,
          column: 43
        },
        end: {
          line: 135,
          column: 77
        }
      },
      "56": {
        start: {
          line: 136,
          column: 41
        },
        end: {
          line: 136,
          column: 108
        }
      },
      "57": {
        start: {
          line: 136,
          column: 71
        },
        end: {
          line: 136,
          column: 106
        }
      },
      "58": {
        start: {
          line: 136,
          column: 95
        },
        end: {
          line: 136,
          column: 99
        }
      },
      "59": {
        start: {
          line: 137,
          column: 40
        },
        end: {
          line: 139,
          column: 31
        }
      },
      "60": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 138,
          column: 60
        }
      },
      "61": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 30
        }
      },
      "62": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 140,
          column: 91
        }
      },
      "63": {
        start: {
          line: 143,
          column: 34
        },
        end: {
          line: 143,
          column: 66
        }
      },
      "64": {
        start: {
          line: 144,
          column: 36
        },
        end: {
          line: 144,
          column: 102
        }
      },
      "65": {
        start: {
          line: 144,
          column: 66
        },
        end: {
          line: 144,
          column: 100
        }
      },
      "66": {
        start: {
          line: 144,
          column: 88
        },
        end: {
          line: 144,
          column: 93
        }
      },
      "67": {
        start: {
          line: 145,
          column: 32
        },
        end: {
          line: 145,
          column: 99
        }
      },
      "68": {
        start: {
          line: 145,
          column: 67
        },
        end: {
          line: 145,
          column: 98
        }
      },
      "69": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 162,
          column: 9
        }
      },
      "70": {
        start: {
          line: 152,
          column: 59
        },
        end: {
          line: 152,
          column: 91
        }
      },
      "71": {
        start: {
          line: 154,
          column: 50
        },
        end: {
          line: 154,
          column: 84
        }
      },
      "72": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 26
        }
      },
      "73": {
        start: {
          line: 169,
          column: 34
        },
        end: {
          line: 169,
          column: 66
        }
      },
      "74": {
        start: {
          line: 170,
          column: 34
        },
        end: {
          line: 170,
          column: 139
        }
      },
      "75": {
        start: {
          line: 170,
          column: 76
        },
        end: {
          line: 170,
          column: 138
        }
      },
      "76": {
        start: {
          line: 170,
          column: 119
        },
        end: {
          line: 170,
          column: 137
        }
      },
      "77": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 79
        }
      },
      "78": {
        start: {
          line: 171,
          column: 63
        },
        end: {
          line: 171,
          column: 67
        }
      },
      "79": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "80": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 48
        }
      },
      "81": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 185,
          column: 63
        }
      },
      "82": {
        start: {
          line: 187,
          column: 13
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "83": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 194,
          column: 41
        }
      },
      "84": {
        start: {
          line: 196,
          column: 13
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "85": {
        start: {
          line: 198,
          column: 34
        },
        end: {
          line: 198,
          column: 51
        }
      },
      "86": {
        start: {
          line: 199,
          column: 34
        },
        end: {
          line: 199,
          column: 87
        }
      },
      "87": {
        start: {
          line: 199,
          column: 66
        },
        end: {
          line: 199,
          column: 85
        }
      },
      "88": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 203,
          column: 124
        }
      },
      "89": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 48
        }
      },
      "90": {
        start: {
          line: 213,
          column: 30
        },
        end: {
          line: 213,
          column: 39
        }
      },
      "91": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "92": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "93": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 221,
          column: 17
        }
      },
      "94": {
        start: {
          line: 217,
          column: 39
        },
        end: {
          line: 217,
          column: 71
        }
      },
      "95": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 220,
          column: 21
        }
      },
      "96": {
        start: {
          line: 219,
          column: 24
        },
        end: {
          line: 219,
          column: 57
        }
      },
      "97": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 224,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 5
          }
        },
        loc: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 5,
            column: 5
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 9,
            column: 4
          },
          end: {
            line: 9,
            column: 5
          }
        },
        loc: {
          start: {
            line: 9,
            column: 52
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 9
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 53
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 30
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        loc: {
          start: {
            line: 46,
            column: 55
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 46
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 57
          },
          end: {
            line: 78,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 82,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        loc: {
          start: {
            line: 82,
            column: 49
          },
          end: {
            line: 107,
            column: 5
          }
        },
        line: 82
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 86,
            column: 80
          },
          end: {
            line: 86,
            column: 81
          }
        },
        loc: {
          start: {
            line: 86,
            column: 85
          },
          end: {
            line: 86,
            column: 89
          }
        },
        line: 86
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 91,
            column: 84
          },
          end: {
            line: 91,
            column: 85
          }
        },
        loc: {
          start: {
            line: 91,
            column: 89
          },
          end: {
            line: 91,
            column: 93
          }
        },
        line: 91
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 95,
            column: 63
          },
          end: {
            line: 95,
            column: 64
          }
        },
        loc: {
          start: {
            line: 95,
            column: 68
          },
          end: {
            line: 95,
            column: 109
          }
        },
        line: 95
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 39
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 111
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 127,
            column: 60
          },
          end: {
            line: 127,
            column: 61
          }
        },
        loc: {
          start: {
            line: 127,
            column: 65
          },
          end: {
            line: 127,
            column: 98
          }
        },
        line: 127
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 127,
            column: 82
          },
          end: {
            line: 127,
            column: 83
          }
        },
        loc: {
          start: {
            line: 127,
            column: 87
          },
          end: {
            line: 127,
            column: 91
          }
        },
        line: 127
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 129,
            column: 20
          },
          end: {
            line: 129,
            column: 21
          }
        },
        loc: {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 129,
            column: 54
          }
        },
        line: 129
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 130,
            column: 18
          }
        },
        loc: {
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 130,
            column: 26
          }
        },
        line: 130
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 136,
            column: 66
          },
          end: {
            line: 136,
            column: 67
          }
        },
        loc: {
          start: {
            line: 136,
            column: 71
          },
          end: {
            line: 136,
            column: 106
          }
        },
        line: 136
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 136,
            column: 90
          },
          end: {
            line: 136,
            column: 91
          }
        },
        loc: {
          start: {
            line: 136,
            column: 95
          },
          end: {
            line: 136,
            column: 99
          }
        },
        line: 136
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 138,
            column: 24
          },
          end: {
            line: 138,
            column: 25
          }
        },
        loc: {
          start: {
            line: 138,
            column: 29
          },
          end: {
            line: 138,
            column: 60
          }
        },
        line: 138
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 139,
            column: 21
          },
          end: {
            line: 139,
            column: 22
          }
        },
        loc: {
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 30
          }
        },
        line: 139
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 144,
            column: 61
          },
          end: {
            line: 144,
            column: 62
          }
        },
        loc: {
          start: {
            line: 144,
            column: 66
          },
          end: {
            line: 144,
            column: 100
          }
        },
        line: 144
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 144,
            column: 83
          },
          end: {
            line: 144,
            column: 84
          }
        },
        loc: {
          start: {
            line: 144,
            column: 88
          },
          end: {
            line: 144,
            column: 93
          }
        },
        line: 144
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 145,
            column: 62
          },
          end: {
            line: 145,
            column: 63
          }
        },
        loc: {
          start: {
            line: 145,
            column: 67
          },
          end: {
            line: 145,
            column: 98
          }
        },
        line: 145
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 152,
            column: 47
          },
          end: {
            line: 152,
            column: 48
          }
        },
        loc: {
          start: {
            line: 152,
            column: 59
          },
          end: {
            line: 152,
            column: 91
          }
        },
        line: 152
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 154,
            column: 38
          },
          end: {
            line: 154,
            column: 39
          }
        },
        loc: {
          start: {
            line: 154,
            column: 50
          },
          end: {
            line: 154,
            column: 84
          }
        },
        line: 154
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 168,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        loc: {
          start: {
            line: 168,
            column: 52
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 168
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 170,
            column: 64
          },
          end: {
            line: 170,
            column: 65
          }
        },
        loc: {
          start: {
            line: 170,
            column: 76
          },
          end: {
            line: 170,
            column: 138
          }
        },
        line: 170
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 170,
            column: 112
          },
          end: {
            line: 170,
            column: 113
          }
        },
        loc: {
          start: {
            line: 170,
            column: 119
          },
          end: {
            line: 170,
            column: 137
          }
        },
        line: 170
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 171,
            column: 58
          },
          end: {
            line: 171,
            column: 59
          }
        },
        loc: {
          start: {
            line: 171,
            column: 63
          },
          end: {
            line: 171,
            column: 67
          }
        },
        line: 171
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 38
          },
          end: {
            line: 208,
            column: 5
          }
        },
        line: 176
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 199,
            column: 61
          },
          end: {
            line: 199,
            column: 62
          }
        },
        loc: {
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 85
          }
        },
        line: 199
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 5
          }
        },
        loc: {
          start: {
            line: 212,
            column: 32
          },
          end: {
            line: 225,
            column: 5
          }
        },
        line: 212
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 9,
            column: 37
          },
          end: {
            line: 9,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 9,
            column: 48
          },
          end: {
            line: 9,
            column: 50
          }
        }],
        line: 9
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 19
          },
          end: {
            line: 15,
            column: 33
          }
        }, {
          start: {
            line: 15,
            column: 37
          },
          end: {
            line: 15,
            column: 39
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 51
          },
          end: {
            line: 23,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 51
          },
          end: {
            line: 23,
            column: 65
          }
        }, {
          start: {
            line: 23,
            column: 69
          },
          end: {
            line: 23,
            column: 71
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 39
          },
          end: {
            line: 30,
            column: 51
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 30,
            column: 49
          },
          end: {
            line: 30,
            column: 51
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 46,
            column: 41
          },
          end: {
            line: 46,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 46,
            column: 51
          },
          end: {
            line: 46,
            column: 53
          }
        }],
        line: 46
      },
      "5": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 12
          },
          end: {
            line: 58,
            column: 34
          }
        }, {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 53
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 66,
            column: 43
          },
          end: {
            line: 66,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 66,
            column: 53
          },
          end: {
            line: 66,
            column: 55
          }
        }],
        line: 66
      },
      "8": {
        loc: {
          start: {
            line: 82,
            column: 35
          },
          end: {
            line: 82,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 82,
            column: 45
          },
          end: {
            line: 82,
            column: 47
          }
        }],
        line: 82
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 103,
            column: 25
          },
          end: {
            line: 103,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 103,
            column: 54
          },
          end: {
            line: 103,
            column: 65
          }
        }, {
          start: {
            line: 103,
            column: 68
          },
          end: {
            line: 103,
            column: 77
          }
        }],
        line: 103
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 111,
            column: 37
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 111,
            column: 35
          },
          end: {
            line: 111,
            column: 37
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 127,
            column: 65
          },
          end: {
            line: 127,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 65
          },
          end: {
            line: 127,
            column: 92
          }
        }, {
          start: {
            line: 127,
            column: 96
          },
          end: {
            line: 127,
            column: 98
          }
        }],
        line: 127
      },
      "13": {
        loc: {
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 8
          },
          end: {
            line: 141,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "14": {
        loc: {
          start: {
            line: 136,
            column: 71
          },
          end: {
            line: 136,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 71
          },
          end: {
            line: 136,
            column: 100
          }
        }, {
          start: {
            line: 136,
            column: 104
          },
          end: {
            line: 136,
            column: 106
          }
        }],
        line: 136
      },
      "15": {
        loc: {
          start: {
            line: 144,
            column: 66
          },
          end: {
            line: 144,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 66
          },
          end: {
            line: 144,
            column: 94
          }
        }, {
          start: {
            line: 144,
            column: 98
          },
          end: {
            line: 144,
            column: 100
          }
        }],
        line: 144
      },
      "16": {
        loc: {
          start: {
            line: 150,
            column: 32
          },
          end: {
            line: 150,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 32
          },
          end: {
            line: 150,
            column: 54
          }
        }, {
          start: {
            line: 150,
            column: 58
          },
          end: {
            line: 150,
            column: 63
          }
        }],
        line: 150
      },
      "17": {
        loc: {
          start: {
            line: 152,
            column: 66
          },
          end: {
            line: 152,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 66
          },
          end: {
            line: 152,
            column: 85
          }
        }, {
          start: {
            line: 152,
            column: 89
          },
          end: {
            line: 152,
            column: 90
          }
        }],
        line: 152
      },
      "18": {
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 156,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 22
          },
          end: {
            line: 155,
            column: 48
          }
        }, {
          start: {
            line: 156,
            column: 22
          },
          end: {
            line: 156,
            column: 23
          }
        }],
        line: 153
      },
      "19": {
        loc: {
          start: {
            line: 154,
            column: 57
          },
          end: {
            line: 154,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 57
          },
          end: {
            line: 154,
            column: 78
          }
        }, {
          start: {
            line: 154,
            column: 82
          },
          end: {
            line: 154,
            column: 83
          }
        }],
        line: 154
      },
      "20": {
        loc: {
          start: {
            line: 168,
            column: 38
          },
          end: {
            line: 168,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 168,
            column: 48
          },
          end: {
            line: 168,
            column: 50
          }
        }],
        line: 168
      },
      "21": {
        loc: {
          start: {
            line: 170,
            column: 76
          },
          end: {
            line: 170,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 76
          },
          end: {
            line: 170,
            column: 89
          }
        }, {
          start: {
            line: 170,
            column: 93
          },
          end: {
            line: 170,
            column: 138
          }
        }],
        line: 170
      },
      "22": {
        loc: {
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 177
      },
      "23": {
        loc: {
          start: {
            line: 185,
            column: 22
          },
          end: {
            line: 185,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 48
          },
          end: {
            line: 185,
            column: 53
          }
        }, {
          start: {
            line: 185,
            column: 56
          },
          end: {
            line: 185,
            column: 60
          }
        }],
        line: 185
      },
      "24": {
        loc: {
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 187
      },
      "25": {
        loc: {
          start: {
            line: 191,
            column: 15
          },
          end: {
            line: 191,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 15
          },
          end: {
            line: 191,
            column: 43
          }
        }, {
          start: {
            line: 191,
            column: 47
          },
          end: {
            line: 191,
            column: 48
          }
        }],
        line: 191
      },
      "26": {
        loc: {
          start: {
            line: 192,
            column: 17
          },
          end: {
            line: 192,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 192,
            column: 17
          },
          end: {
            line: 192,
            column: 47
          }
        }, {
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 52
          }
        }],
        line: 192
      },
      "27": {
        loc: {
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 15
          },
          end: {
            line: 193,
            column: 43
          }
        }, {
          start: {
            line: 193,
            column: 47
          },
          end: {
            line: 193,
            column: 48
          }
        }],
        line: 193
      },
      "28": {
        loc: {
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: 205,
            column: 13
          },
          end: {
            line: 207,
            column: 9
          }
        }],
        line: 196
      },
      "29": {
        loc: {
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 66
          },
          end: {
            line: 199,
            column: 79
          }
        }, {
          start: {
            line: 199,
            column: 83
          },
          end: {
            line: 199,
            column: 85
          }
        }],
        line: 199
      },
      "30": {
        loc: {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 203,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 203,
            column: 94
          }
        }, {
          start: {
            line: 203,
            column: 97
          },
          end: {
            line: 203,
            column: 121
          }
        }],
        line: 203
      },
      "31": {
        loc: {
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 203,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 41
          },
          end: {
            line: 203,
            column: 66
          }
        }, {
          start: {
            line: 203,
            column: 70
          },
          end: {
            line: 203,
            column: 94
          }
        }],
        line: 203
      },
      "32": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 222,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "33": {
        loc: {
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 220,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 20
          },
          end: {
            line: 220,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "34": {
        loc: {
          start: {
            line: 218,
            column: 24
          },
          end: {
            line: 218,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 24
          },
          end: {
            line: 218,
            column: 34
          }
        }, {
          start: {
            line: 218,
            column: 38
          },
          end: {
            line: 218,
            column: 51
          }
        }],
        line: 218
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/exportUtils.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/exportUtils.ts"],
      sourcesContent: ["import { N8nClient } from '../client/n8nClient.js';\nimport { N8nVariable } from '../types/n8n.js';\n\nexport interface ExportOptions {\n  includeCredentials?: boolean;\n  includeSecrets?: boolean;\n  projectId?: string;\n  tagFilter?: string[];\n}\n\nexport interface WorkflowExport {\n  id: string;\n  name: string;\n  active: boolean;\n  nodes: any[];\n  connections: Record<string, unknown>;\n  settings?: Record<string, unknown>;\n  staticData?: Record<string, unknown>;\n  tags?: string[];\n  pinData?: Record<string, unknown>;\n  meta?: Record<string, unknown>;\n  exportedAt: string;\n  credentials?: string[]; // Array of credential IDs referenced\n}\n\nexport interface CredentialExport {\n  id: string;\n  name: string;\n  type: string;\n  data?: Record<string, unknown>; // Only included if includeSecrets is true\n  homeProject?: {\n    id: string;\n    name: string;\n    type: string;\n  };\n  scopes?: string[];\n  exportedAt: string;\n  sanitized: boolean; // Indicates if sensitive data was removed\n}\n\nexport interface ProjectExport {\n  id: string;\n  name: string;\n  type: string;\n  exportedAt: string;\n  workflows?: WorkflowExport[];\n  credentials?: CredentialExport[];\n  variables?: N8nVariable[];\n}\n\nexport interface FullExport {\n  metadata: {\n    exportedAt: string;\n    sourceInstance: string;\n    n8nVersion?: string;\n    includeSecrets: boolean;\n    projectCount: number;\n    workflowCount: number;\n    credentialCount: number;\n  };\n  projects: ProjectExport[];\n  globalWorkflows: WorkflowExport[]; // Workflows not in any project\n  globalCredentials: CredentialExport[]; // Credentials not in any project\n  variables: N8nVariable[];\n}\n\nexport class ExportUtils {\n  constructor(private client: N8nClient) {}\n\n  /**\n   * Export a single workflow with its dependencies\n   */\n  async exportWorkflow(workflowId: string, _options: ExportOptions = {}): Promise<WorkflowExport> {\n    const workflow = await this.client.getWorkflow(workflowId);\n\n    const workflowExport: WorkflowExport = {\n      id: workflow.id,\n      name: workflow.name,\n      active: workflow.active,\n      nodes: workflow.nodes || [],\n      connections: workflow.connections,\n      settings: workflow.settings,\n      staticData: workflow.staticData,\n      tags: workflow.tags,\n      pinData: workflow.pinData,\n      meta: workflow.meta,\n      exportedAt: new Date().toISOString(),\n      credentials: this.extractCredentialIds(workflow.nodes || []),\n    };\n\n    return workflowExport;\n  }\n\n  /**\n   * Export multiple workflows\n   */\n  async exportWorkflows(\n    workflowIds: string[],\n    options: ExportOptions = {}\n  ): Promise<WorkflowExport[]> {\n    const exports: WorkflowExport[] = [];\n\n    for (const workflowId of workflowIds) {\n      try {\n        const workflowExport = await this.exportWorkflow(workflowId, options);\n        exports.push(workflowExport);\n      } catch (error) {\n        console.warn(`Failed to export workflow ${workflowId}:`, error);\n      }\n    }\n\n    return exports;\n  }\n\n  /**\n   * Export a credential (with security considerations)\n   */\n  async exportCredential(\n    credentialId: string,\n    options: ExportOptions = {}\n  ): Promise<CredentialExport> {\n    const credential = await this.client.getCredential(credentialId);\n\n    const credentialExport: CredentialExport = {\n      id: credential.id,\n      name: credential.name,\n      type: credential.type,\n      homeProject: credential.homeProject,\n      scopes: credential.scopes,\n      exportedAt: new Date().toISOString(),\n      sanitized: !options.includeSecrets,\n    };\n\n    // Only include sensitive data if explicitly requested\n    if (options.includeSecrets && credential.data) {\n      credentialExport.data = credential.data;\n    }\n\n    return credentialExport;\n  }\n\n  /**\n   * Export multiple credentials\n   */\n  async exportCredentials(\n    credentialIds: string[],\n    options: ExportOptions = {}\n  ): Promise<CredentialExport[]> {\n    const exports: CredentialExport[] = [];\n\n    for (const credentialId of credentialIds) {\n      try {\n        const credentialExport = await this.exportCredential(credentialId, options);\n        exports.push(credentialExport);\n      } catch (error) {\n        console.warn(`Failed to export credential ${credentialId}:`, error);\n      }\n    }\n\n    return exports;\n  }\n\n  /**\n   * Export a complete project with all its resources\n   */\n  async exportProject(projectId: string, options: ExportOptions = {}): Promise<ProjectExport> {\n    const project = await this.client.getProject(projectId);\n\n    // Get all workflows in the project\n    const workflowsResponse = await this.client.getWorkflows({ projectId });\n    const workflows = await this.exportWorkflows(\n      workflowsResponse.data.map(w => w.id),\n      options\n    );\n\n    let credentials: CredentialExport[] = [];\n    if (options.includeCredentials) {\n      // Get all credentials in the project\n      const credentialsResponse = await this.client.getCredentials({ projectId });\n      credentials = await this.exportCredentials(\n        credentialsResponse.data.map(c => c.id),\n        options\n      );\n    }\n\n    // Get project variables\n    const variablesResponse = await this.client.getVariables();\n    const projectVariables = variablesResponse.data.filter(\n      v => v.key.startsWith(`project_${projectId}_`) // Assuming project-scoped variables have this prefix\n    );\n\n    const projectExport: ProjectExport = {\n      id: project.id,\n      name: project.name,\n      type: project.type,\n      exportedAt: new Date().toISOString(),\n      workflows,\n      credentials: options.includeCredentials ? credentials : undefined,\n      variables: projectVariables,\n    };\n\n    return projectExport;\n  }\n\n  /**\n   * Export the entire n8n instance\n   */\n  async exportInstance(options: ExportOptions = {}): Promise<FullExport> {\n    const exportTime = new Date().toISOString();\n\n    // Get all projects\n    const projectsResponse = await this.client.getProjects();\n    const projects: ProjectExport[] = [];\n\n    for (const project of projectsResponse.data) {\n      try {\n        const projectExport = await this.exportProject(project.id, options);\n        projects.push(projectExport);\n      } catch (error) {\n        console.warn(`Failed to export project ${project.id}:`, error);\n      }\n    }\n\n    // Get workflows not in any project (global workflows)\n    const allWorkflowsResponse = await this.client.getWorkflows();\n    const projectWorkflowIds = new Set(projects.flatMap(p => p.workflows?.map(w => w.id) || []));\n    const globalWorkflowIds = allWorkflowsResponse.data\n      .filter(w => !projectWorkflowIds.has(w.id))\n      .map(w => w.id);\n\n    const globalWorkflows = await this.exportWorkflows(globalWorkflowIds, options);\n\n    // Get credentials not in any project (global credentials)\n    let globalCredentials: CredentialExport[] = [];\n    if (options.includeCredentials) {\n      const allCredentialsResponse = await this.client.getCredentials();\n      const projectCredentialIds = new Set(\n        projects.flatMap(p => p.credentials?.map(c => c.id) || [])\n      );\n      const globalCredentialIds = allCredentialsResponse.data\n        .filter(c => !projectCredentialIds.has(c.id))\n        .map(c => c.id);\n\n      globalCredentials = await this.exportCredentials(globalCredentialIds, options);\n    }\n\n    // Get all variables\n    const variablesResponse = await this.client.getVariables();\n    const projectVariableKeys = new Set(projects.flatMap(p => p.variables?.map(v => v.key) || []));\n    const globalVariables = variablesResponse.data.filter(v => !projectVariableKeys.has(v.key));\n\n    const fullExport: FullExport = {\n      metadata: {\n        exportedAt: exportTime,\n        sourceInstance: 'n8n-instance', // Could be made configurable\n        includeSecrets: options.includeSecrets || false,\n        projectCount: projects.length,\n        workflowCount:\n          projects.reduce((acc, p) => acc + (p.workflows?.length || 0), 0) + globalWorkflows.length,\n        credentialCount: options.includeCredentials\n          ? projects.reduce((acc, p) => acc + (p.credentials?.length || 0), 0) +\n            globalCredentials.length\n          : 0,\n      },\n      projects,\n      globalWorkflows,\n      globalCredentials,\n      variables: globalVariables,\n    };\n\n    return fullExport;\n  }\n\n  /**\n   * Export workflows by tag filter\n   */\n  async exportWorkflowsByTags(\n    tags: string[],\n    options: ExportOptions = {}\n  ): Promise<WorkflowExport[]> {\n    const workflowsResponse = await this.client.getWorkflows();\n    const filteredWorkflows = workflowsResponse.data.filter(\n      workflow => workflow.tags && workflow.tags.some(tag => tags.includes(tag))\n    );\n\n    return this.exportWorkflows(\n      filteredWorkflows.map(w => w.id),\n      options\n    );\n  }\n\n  /**\n   * Generate export summary\n   */\n  generateExportSummary(exportData: FullExport | ProjectExport | WorkflowExport[]): string {\n    if ('metadata' in exportData) {\n      // Full instance export\n      const metadata = exportData.metadata;\n      return `Export Summary:\n- Exported at: ${metadata.exportedAt}\n- Projects: ${metadata.projectCount}\n- Workflows: ${metadata.workflowCount}\n- Credentials: ${metadata.credentialCount}\n- Secrets included: ${metadata.includeSecrets ? 'Yes' : 'No'}`;\n    } else if ('workflows' in exportData) {\n      // Project export\n      return `Project Export Summary:\n- Project: ${exportData.name} (${exportData.type})\n- Workflows: ${exportData.workflows?.length || 0}\n- Credentials: ${exportData.credentials?.length || 0}\n- Variables: ${exportData.variables?.length || 0}\n- Exported at: ${exportData.exportedAt}`;\n    } else if (Array.isArray(exportData)) {\n      // Workflow array export\n      const workflowCount = exportData.length;\n      const credentialIds = new Set(exportData.flatMap(w => w.credentials || []));\n      return `Workflow Export Summary:\n- Workflows: ${workflowCount}\n- Referenced credentials: ${credentialIds.size}\n- Exported at: ${exportData.length > 0 ? exportData[0]?.exportedAt || new Date().toISOString() : new Date().toISOString()}`;\n    } else {\n      return 'Unknown export data format';\n    }\n  }\n\n  /**\n   * Extract credential IDs from workflow nodes\n   */\n  private extractCredentialIds(nodes: any[]): string[] {\n    const credentialIds = new Set<string>();\n\n    for (const node of nodes) {\n      if (node.credentials) {\n        for (const credentialType in node.credentials) {\n          const credential = node.credentials[credentialType];\n          if (credential && credential.id) {\n            credentialIds.add(credential.id);\n          }\n        }\n      }\n    }\n\n    return Array.from(credentialIds);\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "291d5a4e353a9ae342a3e611ec3b22255f4292ca"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2ps4yyv4hd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2ps4yyv4hd();
export class ExportUtils {
  client;
  constructor(client) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[0]++;
    cov_2ps4yyv4hd().s[0]++;
    this.client = client;
  }
  /**
   * Export a single workflow with its dependencies
   */
  async exportWorkflow(workflowId, _options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[1]++;
    const workflow =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[1]++, await this.client.getWorkflow(workflowId));
    const workflowExport =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[2]++, {
      id: workflow.id,
      name: workflow.name,
      active: workflow.active,
      nodes:
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[1][0]++, workflow.nodes) ||
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[1][1]++, []),
      connections: workflow.connections,
      settings: workflow.settings,
      staticData: workflow.staticData,
      tags: workflow.tags,
      pinData: workflow.pinData,
      meta: workflow.meta,
      exportedAt: new Date().toISOString(),
      credentials: this.extractCredentialIds(
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[2][0]++, workflow.nodes) ||
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[2][1]++, []))
    });
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[3]++;
    return workflowExport;
  }
  /**
   * Export multiple workflows
   */
  async exportWorkflows(workflowIds, options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[2]++;
    const exports =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[4]++, []);
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[5]++;
    for (const workflowId of workflowIds) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[6]++;
      try {
        const workflowExport =
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().s[7]++, await this.exportWorkflow(workflowId, options));
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[8]++;
        exports.push(workflowExport);
      } catch (error) {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[9]++;
        console.warn(`Failed to export workflow ${workflowId}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[10]++;
    return exports;
  }
  /**
   * Export a credential (with security considerations)
   */
  async exportCredential(credentialId, options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[4][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[3]++;
    const credential =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[11]++, await this.client.getCredential(credentialId));
    const credentialExport =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[12]++, {
      id: credential.id,
      name: credential.name,
      type: credential.type,
      homeProject: credential.homeProject,
      scopes: credential.scopes,
      exportedAt: new Date().toISOString(),
      sanitized: !options.includeSecrets
    });
    // Only include sensitive data if explicitly requested
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[13]++;
    if (
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().b[6][0]++, options.includeSecrets) &&
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().b[6][1]++, credential.data)) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().b[5][0]++;
      cov_2ps4yyv4hd().s[14]++;
      credentialExport.data = credential.data;
    } else
    /* istanbul ignore next */
    {
      cov_2ps4yyv4hd().b[5][1]++;
    }
    cov_2ps4yyv4hd().s[15]++;
    return credentialExport;
  }
  /**
   * Export multiple credentials
   */
  async exportCredentials(credentialIds, options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[7][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[4]++;
    const exports =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[16]++, []);
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[17]++;
    for (const credentialId of credentialIds) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[18]++;
      try {
        const credentialExport =
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().s[19]++, await this.exportCredential(credentialId, options));
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[20]++;
        exports.push(credentialExport);
      } catch (error) {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[21]++;
        console.warn(`Failed to export credential ${credentialId}:`, error);
      }
    }
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[22]++;
    return exports;
  }
  /**
   * Export a complete project with all its resources
   */
  async exportProject(projectId, options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[5]++;
    const project =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[23]++, await this.client.getProject(projectId));
    // Get all workflows in the project
    const workflowsResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[24]++, await this.client.getWorkflows({
      projectId
    }));
    const workflows =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[25]++, await this.exportWorkflows(workflowsResponse.data.map(w => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[6]++;
      cov_2ps4yyv4hd().s[26]++;
      return w.id;
    }), options));
    let credentials =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[27]++, []);
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[28]++;
    if (options.includeCredentials) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().b[9][0]++;
      // Get all credentials in the project
      const credentialsResponse =
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().s[29]++, await this.client.getCredentials({
        projectId
      }));
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[30]++;
      credentials = await this.exportCredentials(credentialsResponse.data.map(c => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[7]++;
        cov_2ps4yyv4hd().s[31]++;
        return c.id;
      }), options);
    } else
    /* istanbul ignore next */
    {
      cov_2ps4yyv4hd().b[9][1]++;
    }
    // Get project variables
    const variablesResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[32]++, await this.client.getVariables());
    const projectVariables =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[33]++, variablesResponse.data.filter(v => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[8]++;
      cov_2ps4yyv4hd().s[34]++;
      return v.key.startsWith(`project_${projectId}_`);
    } // Assuming project-scoped variables have this prefix
    ));
    const projectExport =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[35]++, {
      id: project.id,
      name: project.name,
      type: project.type,
      exportedAt: new Date().toISOString(),
      workflows,
      credentials: options.includeCredentials ?
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[10][0]++, credentials) :
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[10][1]++, undefined),
      variables: projectVariables
    });
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[36]++;
    return projectExport;
  }
  /**
   * Export the entire n8n instance
   */
  async exportInstance(options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[9]++;
    const exportTime =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[37]++, new Date().toISOString());
    // Get all projects
    const projectsResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[38]++, await this.client.getProjects());
    const projects =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[39]++, []);
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[40]++;
    for (const project of projectsResponse.data) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[41]++;
      try {
        const projectExport =
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().s[42]++, await this.exportProject(project.id, options));
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[43]++;
        projects.push(projectExport);
      } catch (error) {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().s[44]++;
        console.warn(`Failed to export project ${project.id}:`, error);
      }
    }
    // Get workflows not in any project (global workflows)
    const allWorkflowsResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[45]++, await this.client.getWorkflows());
    const projectWorkflowIds =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[46]++, new Set(projects.flatMap(p => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[10]++;
      cov_2ps4yyv4hd().s[47]++;
      return /* istanbul ignore next */(cov_2ps4yyv4hd().b[12][0]++, p.workflows?.map(w => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[11]++;
        cov_2ps4yyv4hd().s[48]++;
        return w.id;
      })) ||
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[12][1]++, []);
    })));
    const globalWorkflowIds =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[49]++, allWorkflowsResponse.data.filter(w => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[12]++;
      cov_2ps4yyv4hd().s[50]++;
      return !projectWorkflowIds.has(w.id);
    }).map(w => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[13]++;
      cov_2ps4yyv4hd().s[51]++;
      return w.id;
    }));
    const globalWorkflows =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[52]++, await this.exportWorkflows(globalWorkflowIds, options));
    // Get credentials not in any project (global credentials)
    let globalCredentials =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[53]++, []);
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[54]++;
    if (options.includeCredentials) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().b[13][0]++;
      const allCredentialsResponse =
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().s[55]++, await this.client.getCredentials());
      const projectCredentialIds =
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().s[56]++, new Set(projects.flatMap(p => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[14]++;
        cov_2ps4yyv4hd().s[57]++;
        return /* istanbul ignore next */(cov_2ps4yyv4hd().b[14][0]++, p.credentials?.map(c => {
          /* istanbul ignore next */
          cov_2ps4yyv4hd().f[15]++;
          cov_2ps4yyv4hd().s[58]++;
          return c.id;
        })) ||
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[14][1]++, []);
      })));
      const globalCredentialIds =
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().s[59]++, allCredentialsResponse.data.filter(c => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[16]++;
        cov_2ps4yyv4hd().s[60]++;
        return !projectCredentialIds.has(c.id);
      }).map(c => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[17]++;
        cov_2ps4yyv4hd().s[61]++;
        return c.id;
      }));
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[62]++;
      globalCredentials = await this.exportCredentials(globalCredentialIds, options);
    } else
    /* istanbul ignore next */
    {
      cov_2ps4yyv4hd().b[13][1]++;
    }
    // Get all variables
    const variablesResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[63]++, await this.client.getVariables());
    const projectVariableKeys =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[64]++, new Set(projects.flatMap(p => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[18]++;
      cov_2ps4yyv4hd().s[65]++;
      return /* istanbul ignore next */(cov_2ps4yyv4hd().b[15][0]++, p.variables?.map(v => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[19]++;
        cov_2ps4yyv4hd().s[66]++;
        return v.key;
      })) ||
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[15][1]++, []);
    })));
    const globalVariables =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[67]++, variablesResponse.data.filter(v => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[20]++;
      cov_2ps4yyv4hd().s[68]++;
      return !projectVariableKeys.has(v.key);
    }));
    const fullExport =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[69]++, {
      metadata: {
        exportedAt: exportTime,
        sourceInstance: 'n8n-instance',
        // Could be made configurable
        includeSecrets:
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[16][0]++, options.includeSecrets) ||
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[16][1]++, false),
        projectCount: projects.length,
        workflowCount: projects.reduce((acc, p) => {
          /* istanbul ignore next */
          cov_2ps4yyv4hd().f[21]++;
          cov_2ps4yyv4hd().s[70]++;
          return acc + (
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[17][0]++, p.workflows?.length) ||
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[17][1]++, 0));
        }, 0) + globalWorkflows.length,
        credentialCount: options.includeCredentials ?
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[18][0]++, projects.reduce((acc, p) => {
          /* istanbul ignore next */
          cov_2ps4yyv4hd().f[22]++;
          cov_2ps4yyv4hd().s[71]++;
          return acc + (
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[19][0]++, p.credentials?.length) ||
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[19][1]++, 0));
        }, 0) + globalCredentials.length) :
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[18][1]++, 0)
      },
      projects,
      globalWorkflows,
      globalCredentials,
      variables: globalVariables
    });
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[72]++;
    return fullExport;
  }
  /**
   * Export workflows by tag filter
   */
  async exportWorkflowsByTags(tags, options =
  /* istanbul ignore next */
  (cov_2ps4yyv4hd().b[20][0]++, {})) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[23]++;
    const workflowsResponse =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[73]++, await this.client.getWorkflows());
    const filteredWorkflows =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[74]++, workflowsResponse.data.filter(workflow => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[24]++;
      cov_2ps4yyv4hd().s[75]++;
      return /* istanbul ignore next */(cov_2ps4yyv4hd().b[21][0]++, workflow.tags) &&
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[21][1]++, workflow.tags.some(tag => {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().f[25]++;
        cov_2ps4yyv4hd().s[76]++;
        return tags.includes(tag);
      }));
    }));
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[77]++;
    return this.exportWorkflows(filteredWorkflows.map(w => {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().f[26]++;
      cov_2ps4yyv4hd().s[78]++;
      return w.id;
    }), options);
  }
  /**
   * Generate export summary
   */
  generateExportSummary(exportData) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[27]++;
    cov_2ps4yyv4hd().s[79]++;
    if ('metadata' in exportData) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().b[22][0]++;
      // Full instance export
      const metadata =
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().s[80]++, exportData.metadata);
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[81]++;
      return `Export Summary:
- Exported at: ${metadata.exportedAt}
- Projects: ${metadata.projectCount}
- Workflows: ${metadata.workflowCount}
- Credentials: ${metadata.credentialCount}
- Secrets included: ${metadata.includeSecrets ?
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[23][0]++, 'Yes') :
      /* istanbul ignore next */
      (cov_2ps4yyv4hd().b[23][1]++, 'No')}`;
    } else {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().b[22][1]++;
      cov_2ps4yyv4hd().s[82]++;
      if ('workflows' in exportData) {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().b[24][0]++;
        cov_2ps4yyv4hd().s[83]++;
        // Project export
        return `Project Export Summary:
- Project: ${exportData.name} (${exportData.type})
- Workflows: ${
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[25][0]++, exportData.workflows?.length) ||
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[25][1]++, 0)}
- Credentials: ${
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[26][0]++, exportData.credentials?.length) ||
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[26][1]++, 0)}
- Variables: ${
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[27][0]++, exportData.variables?.length) ||
        /* istanbul ignore next */
        (cov_2ps4yyv4hd().b[27][1]++, 0)}
- Exported at: ${exportData.exportedAt}`;
      } else {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().b[24][1]++;
        cov_2ps4yyv4hd().s[84]++;
        if (Array.isArray(exportData)) {
          /* istanbul ignore next */
          cov_2ps4yyv4hd().b[28][0]++;
          // Workflow array export
          const workflowCount =
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().s[85]++, exportData.length);
          const credentialIds =
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().s[86]++, new Set(exportData.flatMap(w => {
            /* istanbul ignore next */
            cov_2ps4yyv4hd().f[28]++;
            cov_2ps4yyv4hd().s[87]++;
            return /* istanbul ignore next */(cov_2ps4yyv4hd().b[29][0]++, w.credentials) ||
            /* istanbul ignore next */
            (cov_2ps4yyv4hd().b[29][1]++, []);
          })));
          /* istanbul ignore next */
          cov_2ps4yyv4hd().s[88]++;
          return `Workflow Export Summary:
- Workflows: ${workflowCount}
- Referenced credentials: ${credentialIds.size}
- Exported at: ${exportData.length > 0 ?
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[30][0]++,
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[31][0]++, exportData[0]?.exportedAt) ||
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[31][1]++, new Date().toISOString())) :
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[30][1]++, new Date().toISOString())}`;
        } else {
          /* istanbul ignore next */
          cov_2ps4yyv4hd().b[28][1]++;
          cov_2ps4yyv4hd().s[89]++;
          return 'Unknown export data format';
        }
      }
    }
  }
  /**
   * Extract credential IDs from workflow nodes
   */
  extractCredentialIds(nodes) {
    /* istanbul ignore next */
    cov_2ps4yyv4hd().f[29]++;
    const credentialIds =
    /* istanbul ignore next */
    (cov_2ps4yyv4hd().s[90]++, new Set());
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[91]++;
    for (const node of nodes) {
      /* istanbul ignore next */
      cov_2ps4yyv4hd().s[92]++;
      if (node.credentials) {
        /* istanbul ignore next */
        cov_2ps4yyv4hd().b[32][0]++;
        cov_2ps4yyv4hd().s[93]++;
        for (const credentialType in node.credentials) {
          const credential =
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().s[94]++, node.credentials[credentialType]);
          /* istanbul ignore next */
          cov_2ps4yyv4hd().s[95]++;
          if (
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[34][0]++, credential) &&
          /* istanbul ignore next */
          (cov_2ps4yyv4hd().b[34][1]++, credential.id)) {
            /* istanbul ignore next */
            cov_2ps4yyv4hd().b[33][0]++;
            cov_2ps4yyv4hd().s[96]++;
            credentialIds.add(credential.id);
          } else
          /* istanbul ignore next */
          {
            cov_2ps4yyv4hd().b[33][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_2ps4yyv4hd().b[32][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2ps4yyv4hd().s[97]++;
    return Array.from(credentialIds);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,