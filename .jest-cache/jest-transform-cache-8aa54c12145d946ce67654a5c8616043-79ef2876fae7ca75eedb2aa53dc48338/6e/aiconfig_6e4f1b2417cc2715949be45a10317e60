35868660cafc02c151098941e709c0e6
/* istanbul ignore next */
function cov_nop76s7lu() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts";
  var hash = "65185ae2cb5426919f0711518cbc949c7302bac5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 8,
          column: 2
        }
      },
      "1": {
        start: {
          line: 9,
          column: 27
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "2": {
        start: {
          line: 15,
          column: 31
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "3": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "4": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 120,
          column: 7
        }
      },
      "5": {
        start: {
          line: 46,
          column: 27
        },
        end: {
          line: 46,
          column: 38
        }
      },
      "6": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "7": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 94
        }
      },
      "8": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "9": {
        start: {
          line: 51,
          column: 36
        },
        end: {
          line: 67,
          column: 17
        }
      },
      "10": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "11": {
        start: {
          line: 70,
          column: 37
        },
        end: {
          line: 70,
          column: 78
        }
      },
      "12": {
        start: {
          line: 71,
          column: 36
        },
        end: {
          line: 73,
          column: 68
        }
      },
      "13": {
        start: {
          line: 71,
          column: 67
        },
        end: {
          line: 73,
          column: 61
        }
      },
      "14": {
        start: {
          line: 71,
          column: 94
        },
        end: {
          line: 73,
          column: 60
        }
      },
      "15": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 76,
          column: 21
        }
      },
      "16": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 103
        }
      },
      "17": {
        start: {
          line: 77,
          column: 33
        },
        end: {
          line: 77,
          column: 105
        }
      },
      "18": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 89,
          column: 23
        }
      },
      "19": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 84
        }
      },
      "20": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 63
        }
      },
      "21": {
        start: {
          line: 81,
          column: 24
        },
        end: {
          line: 81,
          column: 110
        }
      },
      "22": {
        start: {
          line: 82,
          column: 24
        },
        end: {
          line: 84,
          column: 25
        }
      },
      "23": {
        start: {
          line: 83,
          column: 28
        },
        end: {
          line: 83,
          column: 79
        }
      },
      "24": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 87,
          column: 25
        }
      },
      "25": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 91
        }
      },
      "26": {
        start: {
          line: 88,
          column: 24
        },
        end: {
          line: 88,
          column: 39
        }
      },
      "27": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 34
        }
      },
      "28": {
        start: {
          line: 94,
          column: 38
        },
        end: {
          line: 94,
          column: 79
        }
      },
      "29": {
        start: {
          line: 95,
          column: 39
        },
        end: {
          line: 95,
          column: 40
        }
      },
      "30": {
        start: {
          line: 96,
          column: 33
        },
        end: {
          line: 96,
          column: 75
        }
      },
      "31": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 109,
          column: 21
        }
      },
      "32": {
        start: {
          line: 98,
          column: 40
        },
        end: {
          line: 100,
          column: 72
        }
      },
      "33": {
        start: {
          line: 98,
          column: 71
        },
        end: {
          line: 100,
          column: 65
        }
      },
      "34": {
        start: {
          line: 98,
          column: 98
        },
        end: {
          line: 100,
          column: 64
        }
      },
      "35": {
        start: {
          line: 101,
          column: 24
        },
        end: {
          line: 108,
          column: 25
        }
      },
      "36": {
        start: {
          line: 102,
          column: 28
        },
        end: {
          line: 102,
          column: 59
        }
      },
      "37": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 110
        }
      },
      "38": {
        start: {
          line: 104,
          column: 28
        },
        end: {
          line: 106,
          column: 31
        }
      },
      "39": {
        start: {
          line: 105,
          column: 32
        },
        end: {
          line: 105,
          column: 78
        }
      },
      "40": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 107,
          column: 43
        }
      },
      "41": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 112,
          column: 21
        }
      },
      "42": {
        start: {
          line: 111,
          column: 24
        },
        end: {
          line: 111,
          column: 69
        }
      },
      "43": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 80
        }
      },
      "44": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 81
        }
      },
      "45": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 194,
          column: 7
        }
      },
      "46": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 38
        }
      },
      "47": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "48": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 94
        }
      },
      "49": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 192,
          column: 13
        }
      },
      "50": {
        start: {
          line: 142,
          column: 33
        },
        end: {
          line: 142,
          column: 74
        }
      },
      "51": {
        start: {
          line: 143,
          column: 29
        },
        end: {
          line: 143,
          column: 76
        }
      },
      "52": {
        start: {
          line: 143,
          column: 55
        },
        end: {
          line: 143,
          column: 75
        }
      },
      "53": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "54": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 116
        }
      },
      "55": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 156,
          column: 17
        }
      },
      "56": {
        start: {
          line: 158,
          column: 33
        },
        end: {
          line: 170,
          column: 17
        }
      },
      "57": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 188,
          column: 108
        }
      },
      "58": {
        start: {
          line: 191,
          column: 16
        },
        end: {
          line: 191,
          column: 93
        }
      },
      "59": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 237,
          column: 7
        }
      },
      "60": {
        start: {
          line: 208,
          column: 27
        },
        end: {
          line: 208,
          column: 38
        }
      },
      "61": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "62": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 94
        }
      },
      "63": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "64": {
        start: {
          line: 213,
          column: 33
        },
        end: {
          line: 213,
          column: 74
        }
      },
      "65": {
        start: {
          line: 214,
          column: 34
        },
        end: {
          line: 214,
          column: 86
        }
      },
      "66": {
        start: {
          line: 214,
          column: 65
        },
        end: {
          line: 214,
          column: 85
        }
      },
      "67": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 217,
          column: 17
        }
      },
      "68": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 216,
          column: 116
        }
      },
      "69": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 224,
          column: 17
        }
      },
      "70": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 223,
          column: 22
        }
      },
      "71": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 229,
          column: 19
        }
      },
      "72": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 231,
          column: 104
        }
      },
      "73": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 96
        }
      },
      "74": {
        start: {
          line: 239,
          column: 4
        },
        end: {
          line: 298,
          column: 7
        }
      },
      "75": {
        start: {
          line: 251,
          column: 27
        },
        end: {
          line: 251,
          column: 38
        }
      },
      "76": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 254,
          column: 13
        }
      },
      "77": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 253,
          column: 94
        }
      },
      "78": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 296,
          column: 13
        }
      },
      "79": {
        start: {
          line: 256,
          column: 33
        },
        end: {
          line: 256,
          column: 74
        }
      },
      "80": {
        start: {
          line: 257,
          column: 29
        },
        end: {
          line: 257,
          column: 76
        }
      },
      "81": {
        start: {
          line: 257,
          column: 55
        },
        end: {
          line: 257,
          column: 75
        }
      },
      "82": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "83": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 116
        }
      },
      "84": {
        start: {
          line: 262,
          column: 35
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "85": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 292,
          column: 124
        }
      },
      "86": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 295,
          column: 82
        }
      },
      "87": {
        start: {
          line: 300,
          column: 4
        },
        end: {
          line: 350,
          column: 7
        }
      },
      "88": {
        start: {
          line: 312,
          column: 27
        },
        end: {
          line: 312,
          column: 38
        }
      },
      "89": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 315,
          column: 13
        }
      },
      "90": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 94
        }
      },
      "91": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 348,
          column: 13
        }
      },
      "92": {
        start: {
          line: 317,
          column: 33
        },
        end: {
          line: 317,
          column: 74
        }
      },
      "93": {
        start: {
          line: 318,
          column: 34
        },
        end: {
          line: 318,
          column: 86
        }
      },
      "94": {
        start: {
          line: 318,
          column: 65
        },
        end: {
          line: 318,
          column: 85
        }
      },
      "95": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 321,
          column: 17
        }
      },
      "96": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 320,
          column: 116
        }
      },
      "97": {
        start: {
          line: 323,
          column: 36
        },
        end: {
          line: 327,
          column: 17
        }
      },
      "98": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 333,
          column: 17
        }
      },
      "99": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 332,
          column: 22
        }
      },
      "100": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 338,
          column: 19
        }
      },
      "101": {
        start: {
          line: 339,
          column: 16
        },
        end: {
          line: 344,
          column: 108
        }
      },
      "102": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 86
        }
      },
      "103": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 409,
          column: 7
        }
      },
      "104": {
        start: {
          line: 364,
          column: 27
        },
        end: {
          line: 364,
          column: 38
        }
      },
      "105": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "106": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 94
        }
      },
      "107": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 407,
          column: 13
        }
      },
      "108": {
        start: {
          line: 369,
          column: 33
        },
        end: {
          line: 369,
          column: 74
        }
      },
      "109": {
        start: {
          line: 370,
          column: 34
        },
        end: {
          line: 370,
          column: 86
        }
      },
      "110": {
        start: {
          line: 370,
          column: 65
        },
        end: {
          line: 370,
          column: 85
        }
      },
      "111": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "112": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 116
        }
      },
      "113": {
        start: {
          line: 375,
          column: 37
        },
        end: {
          line: 382,
          column: 17
        }
      },
      "114": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 388,
          column: 17
        }
      },
      "115": {
        start: {
          line: 384,
          column: 20
        },
        end: {
          line: 387,
          column: 22
        }
      },
      "116": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 393,
          column: 19
        }
      },
      "117": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 403,
          column: 86
        }
      },
      "118": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 406,
          column: 87
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAIConfigTools",
        decl: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 35
          }
        },
        loc: {
          start: {
            line: 30,
            column: 55
          },
          end: {
            line: 410,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 17
          },
          end: {
            line: 45,
            column: 18
          }
        },
        loc: {
          start: {
            line: 45,
            column: 33
          },
          end: {
            line: 119,
            column: 9
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 71,
            column: 59
          },
          end: {
            line: 71,
            column: 60
          }
        },
        loc: {
          start: {
            line: 71,
            column: 67
          },
          end: {
            line: 73,
            column: 61
          }
        },
        line: 71
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 71,
            column: 84
          },
          end: {
            line: 71,
            column: 85
          }
        },
        loc: {
          start: {
            line: 71,
            column: 94
          },
          end: {
            line: 73,
            column: 60
          }
        },
        line: 71
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 78,
            column: 36
          },
          end: {
            line: 78,
            column: 37
          }
        },
        loc: {
          start: {
            line: 78,
            column: 53
          },
          end: {
            line: 89,
            column: 21
          }
        },
        line: 78
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 63
          },
          end: {
            line: 98,
            column: 64
          }
        },
        loc: {
          start: {
            line: 98,
            column: 71
          },
          end: {
            line: 100,
            column: 65
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 98,
            column: 88
          },
          end: {
            line: 98,
            column: 89
          }
        },
        loc: {
          start: {
            line: 98,
            column: 98
          },
          end: {
            line: 100,
            column: 64
          }
        },
        line: 98
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 45
          }
        },
        loc: {
          start: {
            line: 104,
            column: 52
          },
          end: {
            line: 106,
            column: 29
          }
        },
        line: 104
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 18
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 193,
            column: 9
          }
        },
        line: 136
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 143,
            column: 50
          },
          end: {
            line: 143,
            column: 51
          }
        },
        loc: {
          start: {
            line: 143,
            column: 55
          },
          end: {
            line: 143,
            column: 75
          }
        },
        line: 143
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 207,
            column: 17
          },
          end: {
            line: 207,
            column: 18
          }
        },
        loc: {
          start: {
            line: 207,
            column: 33
          },
          end: {
            line: 236,
            column: 9
          }
        },
        line: 207
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 214,
            column: 60
          },
          end: {
            line: 214,
            column: 61
          }
        },
        loc: {
          start: {
            line: 214,
            column: 65
          },
          end: {
            line: 214,
            column: 85
          }
        },
        line: 214
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 250,
            column: 18
          }
        },
        loc: {
          start: {
            line: 250,
            column: 33
          },
          end: {
            line: 297,
            column: 9
          }
        },
        line: 250
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 257,
            column: 50
          },
          end: {
            line: 257,
            column: 51
          }
        },
        loc: {
          start: {
            line: 257,
            column: 55
          },
          end: {
            line: 257,
            column: 75
          }
        },
        line: 257
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 311,
            column: 17
          },
          end: {
            line: 311,
            column: 18
          }
        },
        loc: {
          start: {
            line: 311,
            column: 33
          },
          end: {
            line: 349,
            column: 9
          }
        },
        line: 311
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 318,
            column: 60
          },
          end: {
            line: 318,
            column: 61
          }
        },
        loc: {
          start: {
            line: 318,
            column: 65
          },
          end: {
            line: 318,
            column: 85
          }
        },
        line: 318
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 363,
            column: 17
          },
          end: {
            line: 363,
            column: 18
          }
        },
        loc: {
          start: {
            line: 363,
            column: 33
          },
          end: {
            line: 408,
            column: 9
          }
        },
        line: 363
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 370,
            column: 60
          },
          end: {
            line: 370,
            column: 61
          }
        },
        loc: {
          start: {
            line: 370,
            column: 65
          },
          end: {
            line: 370,
            column: 85
          }
        },
        line: 370
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 47
      },
      "1": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: 92,
            column: 21
          },
          end: {
            line: 114,
            column: 17
          }
        }],
        line: 68
      },
      "2": {
        loc: {
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 73,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 36
          },
          end: {
            line: 73,
            column: 62
          }
        }, {
          start: {
            line: 73,
            column: 66
          },
          end: {
            line: 73,
            column: 68
          }
        }],
        line: 71
      },
      "3": {
        loc: {
          start: {
            line: 71,
            column: 94
          },
          end: {
            line: 73,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 94
          },
          end: {
            line: 71,
            column: 135
          }
        }, {
          start: {
            line: 72,
            column: 24
          },
          end: {
            line: 72,
            column: 63
          }
        }, {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 60
          }
        }],
        line: 71
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 76,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 81,
            column: 53
          },
          end: {
            line: 81,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 53
          },
          end: {
            line: 81,
            column: 71
          }
        }, {
          start: {
            line: 81,
            column: 75
          },
          end: {
            line: 81,
            column: 76
          }
        }],
        line: 81
      },
      "6": {
        loc: {
          start: {
            line: 81,
            column: 81
          },
          end: {
            line: 81,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 81
          },
          end: {
            line: 81,
            column: 99
          }
        }, {
          start: {
            line: 81,
            column: 103
          },
          end: {
            line: 81,
            column: 104
          }
        }],
        line: 81
      },
      "7": {
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 84,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 84,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 87,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 24
          },
          end: {
            line: 87,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 100,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 40
          },
          end: {
            line: 100,
            column: 66
          }
        }, {
          start: {
            line: 100,
            column: 70
          },
          end: {
            line: 100,
            column: 72
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 98,
            column: 98
          },
          end: {
            line: 100,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 98,
            column: 98
          },
          end: {
            line: 98,
            column: 139
          }
        }, {
          start: {
            line: 99,
            column: 28
          },
          end: {
            line: 99,
            column: 67
          }
        }, {
          start: {
            line: 100,
            column: 28
          },
          end: {
            line: 100,
            column: 64
          }
        }],
        line: 98
      },
      "11": {
        loc: {
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 108,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 24
          },
          end: {
            line: 108,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 112,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 20
          },
          end: {
            line: 112,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 16
          },
          end: {
            line: 146,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "15": {
        loc: {
          start: {
            line: 152,
            column: 32
          },
          end: {
            line: 152,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 32
          },
          end: {
            line: 152,
            column: 47
          }
        }, {
          start: {
            line: 152,
            column: 51
          },
          end: {
            line: 152,
            column: 53
          }
        }],
        line: 152
      },
      "16": {
        loc: {
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 153,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 33
          },
          end: {
            line: 153,
            column: 49
          }
        }, {
          start: {
            line: 153,
            column: 53
          },
          end: {
            line: 153,
            column: 55
          }
        }],
        line: 153
      },
      "17": {
        loc: {
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 30
          },
          end: {
            line: 155,
            column: 43
          }
        }, {
          start: {
            line: 155,
            column: 47
          },
          end: {
            line: 155,
            column: 52
          }
        }],
        line: 155
      },
      "18": {
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 54
          }
        }, {
          start: {
            line: 161,
            column: 58
          },
          end: {
            line: 161,
            column: 62
          }
        }],
        line: 161
      },
      "19": {
        loc: {
          start: {
            line: 162,
            column: 37
          },
          end: {
            line: 162,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 37
          },
          end: {
            line: 162,
            column: 66
          }
        }, {
          start: {
            line: 162,
            column: 70
          },
          end: {
            line: 162,
            column: 74
          }
        }],
        line: 162
      },
      "20": {
        loc: {
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 163,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 163,
            column: 62
          }
        }, {
          start: {
            line: 163,
            column: 66
          },
          end: {
            line: 163,
            column: 94
          }
        }, {
          start: {
            line: 163,
            column: 98
          },
          end: {
            line: 163,
            column: 102
          }
        }],
        line: 163
      },
      "21": {
        loc: {
          start: {
            line: 164,
            column: 38
          },
          end: {
            line: 164,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 38
          },
          end: {
            line: 164,
            column: 68
          }
        }, {
          start: {
            line: 164,
            column: 72
          },
          end: {
            line: 164,
            column: 103
          }
        }, {
          start: {
            line: 164,
            column: 107
          },
          end: {
            line: 164,
            column: 111
          }
        }],
        line: 164
      },
      "22": {
        loc: {
          start: {
            line: 165,
            column: 36
          },
          end: {
            line: 165,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 36
          },
          end: {
            line: 165,
            column: 60
          }
        }, {
          start: {
            line: 165,
            column: 64
          },
          end: {
            line: 165,
            column: 92
          }
        }, {
          start: {
            line: 165,
            column: 96
          },
          end: {
            line: 165,
            column: 100
          }
        }],
        line: 165
      },
      "23": {
        loc: {
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 166,
            column: 32
          },
          end: {
            line: 166,
            column: 56
          }
        }, {
          start: {
            line: 166,
            column: 60
          },
          end: {
            line: 166,
            column: 64
          }
        }],
        line: 166
      },
      "24": {
        loc: {
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 167,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 31
          },
          end: {
            line: 167,
            column: 54
          }
        }, {
          start: {
            line: 167,
            column: 58
          },
          end: {
            line: 167,
            column: 62
          }
        }],
        line: 167
      },
      "25": {
        loc: {
          start: {
            line: 168,
            column: 33
          },
          end: {
            line: 168,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 33
          },
          end: {
            line: 168,
            column: 58
          }
        }, {
          start: {
            line: 168,
            column: 62
          },
          end: {
            line: 168,
            column: 66
          }
        }],
        line: 168
      },
      "26": {
        loc: {
          start: {
            line: 177,
            column: 36
          },
          end: {
            line: 177,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 36
          },
          end: {
            line: 177,
            column: 58
          }
        }, {
          start: {
            line: 177,
            column: 62
          },
          end: {
            line: 177,
            column: 63
          }
        }],
        line: 177
      },
      "27": {
        loc: {
          start: {
            line: 177,
            column: 68
          },
          end: {
            line: 177,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 177,
            column: 68
          },
          end: {
            line: 177,
            column: 90
          }
        }, {
          start: {
            line: 177,
            column: 94
          },
          end: {
            line: 177,
            column: 95
          }
        }],
        line: 177
      },
      "28": {
        loc: {
          start: {
            line: 179,
            column: 32
          },
          end: {
            line: 179,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 32
          },
          end: {
            line: 179,
            column: 57
          }
        }, {
          start: {
            line: 179,
            column: 61
          },
          end: {
            line: 179,
            column: 77
          }
        }],
        line: 179
      },
      "29": {
        loc: {
          start: {
            line: 180,
            column: 38
          },
          end: {
            line: 180,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 38
          },
          end: {
            line: 180,
            column: 69
          }
        }, {
          start: {
            line: 180,
            column: 73
          },
          end: {
            line: 180,
            column: 82
          }
        }],
        line: 180
      },
      "30": {
        loc: {
          start: {
            line: 181,
            column: 37
          },
          end: {
            line: 181,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 37
          },
          end: {
            line: 181,
            column: 66
          }
        }, {
          start: {
            line: 181,
            column: 70
          },
          end: {
            line: 181,
            column: 79
          }
        }],
        line: 181
      },
      "31": {
        loc: {
          start: {
            line: 182,
            column: 40
          },
          end: {
            line: 182,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 75
          },
          end: {
            line: 182,
            column: 87
          }
        }, {
          start: {
            line: 182,
            column: 90
          },
          end: {
            line: 182,
            column: 99
          }
        }],
        line: 182
      },
      "32": {
        loc: {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 183,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 183,
            column: 71
          },
          end: {
            line: 183,
            column: 83
          }
        }, {
          start: {
            line: 183,
            column: 86
          },
          end: {
            line: 183,
            column: 95
          }
        }],
        line: 183
      },
      "33": {
        loc: {
          start: {
            line: 184,
            column: 33
          },
          end: {
            line: 184,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 33
          },
          end: {
            line: 184,
            column: 59
          }
        }, {
          start: {
            line: 184,
            column: 63
          },
          end: {
            line: 184,
            column: 79
          }
        }],
        line: 184
      },
      "34": {
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 60
          },
          end: {
            line: 185,
            column: 72
          }
        }, {
          start: {
            line: 185,
            column: 75
          },
          end: {
            line: 185,
            column: 84
          }
        }],
        line: 185
      },
      "35": {
        loc: {
          start: {
            line: 186,
            column: 34
          },
          end: {
            line: 186,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 64
          },
          end: {
            line: 186,
            column: 76
          }
        }, {
          start: {
            line: 186,
            column: 79
          },
          end: {
            line: 186,
            column: 88
          }
        }],
        line: 186
      },
      "36": {
        loc: {
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "37": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 217,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "38": {
        loc: {
          start: {
            line: 215,
            column: 20
          },
          end: {
            line: 215,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 20
          },
          end: {
            line: 215,
            column: 36
          }
        }, {
          start: {
            line: 215,
            column: 40
          },
          end: {
            line: 215,
            column: 63
          }
        }],
        line: 215
      },
      "39": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 224,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "40": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 254,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "41": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "42": {
        loc: {
          start: {
            line: 267,
            column: 32
          },
          end: {
            line: 267,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 267,
            column: 32
          },
          end: {
            line: 267,
            column: 47
          }
        }, {
          start: {
            line: 267,
            column: 51
          },
          end: {
            line: 267,
            column: 53
          }
        }],
        line: 267
      },
      "43": {
        loc: {
          start: {
            line: 268,
            column: 27
          },
          end: {
            line: 268,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 27
          },
          end: {
            line: 268,
            column: 49
          }
        }, {
          start: {
            line: 268,
            column: 53
          },
          end: {
            line: 268,
            column: 62
          }
        }],
        line: 268
      },
      "44": {
        loc: {
          start: {
            line: 288,
            column: 39
          },
          end: {
            line: 288,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 82
          },
          end: {
            line: 288,
            column: 85
          }
        }, {
          start: {
            line: 288,
            column: 88
          },
          end: {
            line: 288,
            column: 91
          }
        }],
        line: 288
      },
      "45": {
        loc: {
          start: {
            line: 289,
            column: 47
          },
          end: {
            line: 289,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 289,
            column: 97
          },
          end: {
            line: 289,
            column: 100
          }
        }, {
          start: {
            line: 289,
            column: 103
          },
          end: {
            line: 289,
            column: 106
          }
        }],
        line: 289
      },
      "46": {
        loc: {
          start: {
            line: 290,
            column: 51
          },
          end: {
            line: 290,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 290,
            column: 105
          },
          end: {
            line: 290,
            column: 108
          }
        }, {
          start: {
            line: 290,
            column: 111
          },
          end: {
            line: 290,
            column: 114
          }
        }],
        line: 290
      },
      "47": {
        loc: {
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 12
          },
          end: {
            line: 315,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "48": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 321,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 321,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "49": {
        loc: {
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 319,
            column: 20
          },
          end: {
            line: 319,
            column: 36
          }
        }, {
          start: {
            line: 319,
            column: 40
          },
          end: {
            line: 319,
            column: 63
          }
        }],
        line: 319
      },
      "50": {
        loc: {
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "51": {
        loc: {
          start: {
            line: 343,
            column: 63
          },
          end: {
            line: 343,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 63
          },
          end: {
            line: 343,
            column: 78
          }
        }, {
          start: {
            line: 343,
            column: 82
          },
          end: {
            line: 343,
            column: 84
          }
        }],
        line: 343
      },
      "52": {
        loc: {
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 365,
            column: 12
          },
          end: {
            line: 367,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 365
      },
      "53": {
        loc: {
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 371,
            column: 16
          },
          end: {
            line: 373,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 371
      },
      "54": {
        loc: {
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 371,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 371,
            column: 36
          }
        }, {
          start: {
            line: 371,
            column: 40
          },
          end: {
            line: 371,
            column: 63
          }
        }],
        line: 371
      },
      "55": {
        loc: {
          start: {
            line: 383,
            column: 16
          },
          end: {
            line: 388,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 16
          },
          end: {
            line: 388,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "56": {
        loc: {
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 397,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 397,
            column: 51
          }
        }, {
          start: {
            line: 397,
            column: 55
          },
          end: {
            line: 397,
            column: 66
          }
        }],
        line: 397
      },
      "57": {
        loc: {
          start: {
            line: 398,
            column: 42
          },
          end: {
            line: 398,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 398,
            column: 57
          },
          end: {
            line: 398,
            column: 62
          }
        }, {
          start: {
            line: 398,
            column: 65
          },
          end: {
            line: 398,
            column: 69
          }
        }],
        line: 398
      },
      "58": {
        loc: {
          start: {
            line: 403,
            column: 54
          },
          end: {
            line: 403,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 54
          },
          end: {
            line: 403,
            column: 66
          }
        }, {
          start: {
            line: 403,
            column: 70
          },
          end: {
            line: 403,
            column: 72
          }
        }],
        line: 403
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI configuration validation\nconst AINodeConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  config: z.record(z.any()),\n});\n\nconst AIPromptTestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  prompt: z.string().min(1, 'Prompt is required'),\n  sampleData: z.record(z.any()).optional(),\n});\n\nconst AIModelSelectionSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  modelType: z.enum(['openai', 'anthropic', 'local', 'custom']),\n  modelName: z.string().min(1, 'Model name is required'),\n  parameters: z.record(z.any()).optional(),\n});\n\nconst AIMemoryConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  memoryType: z.enum(['buffer', 'summary', 'conversation', 'vector']),\n  maxTokens: z.number().min(1).max(100000).optional(),\n  context: z.record(z.any()).optional(),\n});\n\n// Tool registration function for AI configuration tools\nexport function createAIConfigTools(getClient: () => N8nClient | null, server: any) {\n  // List AI nodes in workflow\n  server.addTool({\n    name: 'list-ai-nodes',\n    description: 'List all AI-enabled nodes in a specific workflow or across all workflows',\n    parameters: z.object({\n      workflowId: z.string().optional(),\n    }),\n    annotations: {\n      title: 'List AI Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const aiNodeTypes = [\n          'openai',\n          'anthropic',\n          'chatgpt',\n          'gpt3',\n          'gpt4',\n          'claude',\n          'mistral',\n          'llama',\n          'huggingface',\n          'cohere',\n          'ai-agent',\n          'ai-memory',\n          'ai-tool',\n          'ai-chain',\n          'langchain',\n        ];\n\n        if (args.workflowId) {\n          // Get specific workflow and analyze its nodes\n          const workflow = await client.getWorkflow(args.workflowId);\n          const aiNodes =\n            workflow.nodes?.filter(node =>\n              aiNodeTypes.some(\n                aiType =>\n                  node.type?.toLowerCase().includes(aiType) ||\n                  node.name?.toLowerCase().includes('ai') ||\n                  node.parameters?.model !== undefined\n              )\n            ) || [];\n\n          if (aiNodes.length === 0) {\n            return `No AI nodes found in workflow \"${workflow.name}\" (${args.workflowId})`;\n          }\n\n          let result = `Found ${aiNodes.length} AI node(s) in workflow \"${workflow.name}\":\\n\\n`;\n          aiNodes.forEach((node, index) => {\n            result += `${index + 1}. **${node.name}** (${node.type})\\n`;\n            result += `   - Node ID: ${node.id}\\n`;\n            result += `   - Position: (${node.position?.[0] || 0}, ${node.position?.[1] || 0})\\n`;\n            if (node.parameters?.model) {\n              result += `   - Model: ${node.parameters.model}\\n`;\n            }\n            if (node.parameters?.temperature) {\n              result += `   - Temperature: ${node.parameters.temperature}\\n`;\n            }\n            result += '\\n';\n          });\n\n          return result;\n        } else {\n          // List AI nodes across all workflows\n          const workflows = await client.getWorkflows({ limit: 100 });\n          let totalAINodes = 0;\n          let result = 'AI nodes found across all workflows:\\n\\n';\n\n          for (const workflow of workflows.data) {\n            const aiNodes =\n              workflow.nodes?.filter(node =>\n                aiNodeTypes.some(\n                  aiType =>\n                    node.type?.toLowerCase().includes(aiType) ||\n                    node.name?.toLowerCase().includes('ai') ||\n                    node.parameters?.model !== undefined\n                )\n              ) || [];\n\n            if (aiNodes.length > 0) {\n              totalAINodes += aiNodes.length;\n              result += `**${workflow.name}** (${workflow.id}): ${aiNodes.length} AI node(s)\\n`;\n              aiNodes.forEach(node => {\n                result += `  - ${node.name} (${node.type})\\n`;\n              });\n              result += '\\n';\n            }\n          }\n\n          if (totalAINodes === 0) {\n            return 'No AI nodes found in any workflows.';\n          }\n\n          return `Total AI nodes found: ${totalAINodes}\\n\\n${result}`;\n        }\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI nodes: ${error.message}`);\n      }\n    },\n  });\n\n  // Get AI node configuration\n  server.addTool({\n    name: 'get-ai-node-config',\n    description:\n      'Get the configuration of a specific AI node including model settings, prompts, and parameters',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      nodeId: z.string().min(1, 'Node ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Node Configuration',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId: string; nodeId: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        const config = {\n          nodeId: node.id,\n          nodeName: node.name,\n          nodeType: node.type,\n          position: node.position,\n          parameters: node.parameters || {},\n          credentials: node.credentials || {},\n          typeVersion: node.typeVersion,\n          disabled: node.disabled || false,\n        };\n\n        // Extract AI-specific configuration\n        const aiConfig: any = {\n          ...config,\n          aiSpecific: {\n            model: config.parameters.model || null,\n            temperature: config.parameters.temperature || null,\n            maxTokens: config.parameters.maxTokens || config.parameters.max_tokens || null,\n            systemPrompt: config.parameters.systemPrompt || config.parameters.system_prompt || null,\n            userPrompt: config.parameters.prompt || config.parameters.userPrompt || null,\n            memory: config.parameters.memory || null,\n            tools: config.parameters.tools || null,\n            context: config.parameters.context || null,\n          },\n        };\n\n        return (\n          `AI Node Configuration for \"${node.name}\" (${node.type}):\\n\\n` +\n          `**Basic Information:**\\n` +\n          `- Node ID: ${aiConfig.nodeId}\\n` +\n          `- Node Type: ${aiConfig.nodeType}\\n` +\n          `- Type Version: ${aiConfig.typeVersion}\\n` +\n          `- Disabled: ${aiConfig.disabled}\\n` +\n          `- Position: (${aiConfig.position?.[0] || 0}, ${aiConfig.position?.[1] || 0})\\n\\n` +\n          `**AI-Specific Configuration:**\\n` +\n          `- Model: ${aiConfig.aiSpecific.model || 'Not configured'}\\n` +\n          `- Temperature: ${aiConfig.aiSpecific.temperature || 'Not set'}\\n` +\n          `- Max Tokens: ${aiConfig.aiSpecific.maxTokens || 'Not set'}\\n` +\n          `- System Prompt: ${aiConfig.aiSpecific.systemPrompt ? 'Configured' : 'Not set'}\\n` +\n          `- User Prompt: ${aiConfig.aiSpecific.userPrompt ? 'Configured' : 'Not set'}\\n` +\n          `- Memory: ${aiConfig.aiSpecific.memory || 'Not configured'}\\n` +\n          `- Tools: ${aiConfig.aiSpecific.tools ? 'Configured' : 'Not set'}\\n` +\n          `- Context: ${aiConfig.aiSpecific.context ? 'Configured' : 'Not set'}\\n\\n` +\n          `**Full Parameters:**\\n\\`\\`\\`json\\n${JSON.stringify(config.parameters, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Credentials:**\\n\\`\\`\\`json\\n${JSON.stringify(config.credentials, null, 2)}\\n\\`\\`\\``\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to get AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Update AI node configuration\n  server.addTool({\n    name: 'update-ai-node-config',\n    description:\n      'Update the configuration of an AI node including model settings, prompts, and parameters',\n    parameters: AINodeConfigSchema,\n    annotations: {\n      title: 'Update AI Node Configuration',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AINodeConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Update the node configuration\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...args.config,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully updated AI node configuration for \"${workflow.nodes?.[nodeIndex]?.name}\" in workflow \"${workflow.name}\".\\n\\n` +\n          `Updated parameters:\\n\\`\\`\\`json\\n${JSON.stringify(args.config, null, 2)}\\n\\`\\`\\``\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to update AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Test AI prompt with sample data\n  server.addTool({\n    name: 'test-ai-prompt',\n    description:\n      'Test an AI node prompt with sample data to validate functionality before execution',\n    parameters: AIPromptTestSchema,\n    annotations: {\n      title: 'Test AI Prompt',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIPromptTestSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Simulate prompt testing (in a real implementation, this would execute the node with test data)\n        const testResult = {\n          nodeId: args.nodeId,\n          nodeName: node.name,\n          nodeType: node.type,\n          prompt: args.prompt,\n          sampleData: args.sampleData || {},\n          model: node.parameters?.model || 'Unknown',\n          timestamp: new Date().toISOString(),\n          // Simulated response (in real implementation, would be actual AI response)\n          simulatedResponse: `[TEST MODE] This is a simulated response for prompt: \"${args.prompt}\". In a real implementation, this would execute the AI node with the provided sample data and return the actual AI response.`,\n          status: 'test_completed',\n          validationResults: {\n            promptValid: args.prompt.length > 0,\n            dataStructureValid: typeof args.sampleData === 'object',\n            nodeConfigurationValid: !!node.parameters?.model,\n          },\n        };\n\n        return (\n          `AI Prompt Test Results:\\n\\n` +\n          `**Node Information:**\\n` +\n          `- Node: ${testResult.nodeName} (${testResult.nodeType})\\n` +\n          `- Model: ${testResult.model}\\n` +\n          `- Test Time: ${testResult.timestamp}\\n\\n` +\n          `**Test Input:**\\n` +\n          `- Prompt: \"${testResult.prompt}\"\\n` +\n          `- Sample Data: ${JSON.stringify(testResult.sampleData, null, 2)}\\n\\n` +\n          `**Validation Results:**\\n` +\n          `- Prompt Valid: ${testResult.validationResults.promptValid ? '\u2705' : '\u274C'}\\n` +\n          `- Data Structure Valid: ${testResult.validationResults.dataStructureValid ? '\u2705' : '\u274C'}\\n` +\n          `- Node Configuration Valid: ${testResult.validationResults.nodeConfigurationValid ? '\u2705' : '\u274C'}\\n\\n` +\n          `**Simulated Response:**\\n${testResult.simulatedResponse}\\n\\n` +\n          `**Note:** This is a test simulation. To execute the actual AI node, use the 'execute-workflow' tool.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to test AI prompt: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI model selection\n  server.addTool({\n    name: 'configure-ai-model',\n    description: 'Configure AI model selection and parameters for an AI node',\n    parameters: AIModelSelectionSchema,\n    annotations: {\n      title: 'Configure AI Model',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIModelSelectionSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Update model configuration\n        const modelConfig = {\n          model: args.modelName,\n          modelType: args.modelType,\n          ...args.parameters,\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...modelConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully configured AI model for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n          `**Model Configuration:**\\n` +\n          `- Model Type: ${args.modelType}\\n` +\n          `- Model Name: ${args.modelName}\\n` +\n          `- Additional Parameters: ${JSON.stringify(args.parameters || {}, null, 2)}\\n\\n` +\n          `The workflow has been updated and is ready for use with the new model configuration.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI model: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI memory and context\n  server.addTool({\n    name: 'configure-ai-memory',\n    description: 'Configure AI memory, context, and $fromAI() functionality for an AI node',\n    parameters: AIMemoryConfigSchema,\n    annotations: {\n      title: 'Configure AI Memory',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIMemoryConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Configure memory settings\n        const memoryConfig = {\n          memory: {\n            type: args.memoryType,\n            maxTokens: args.maxTokens,\n            context: args.context,\n            fromAI: true, // Enable $fromAI() functionality\n          },\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...memoryConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully configured AI memory for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n          `**Memory Configuration:**\\n` +\n          `- Memory Type: ${args.memoryType}\\n` +\n          `- Max Tokens: ${args.maxTokens || 'Unlimited'}\\n` +\n          `- Context Enabled: ${args.context ? 'Yes' : 'No'}\\n` +\n          `- $fromAI() Function: Enabled\\n\\n` +\n          `**Usage:**\\n` +\n          `- Use $fromAI() in expressions to access AI-generated data\\n` +\n          `- Memory will be maintained across workflow executions\\n` +\n          `- Context data: ${JSON.stringify(args.context || {}, null, 2)}`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI memory: ${error.message}`);\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "65185ae2cb5426919f0711518cbc949c7302bac5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nop76s7lu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nop76s7lu();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Zod schemas for AI configuration validation
const AINodeConfigSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[0]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  config: z.record(z.any())
}));
const AIPromptTestSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[1]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  prompt: z.string().min(1, 'Prompt is required'),
  sampleData: z.record(z.any()).optional()
}));
const AIModelSelectionSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[2]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  modelType: z.enum(['openai', 'anthropic', 'local', 'custom']),
  modelName: z.string().min(1, 'Model name is required'),
  parameters: z.record(z.any()).optional()
}));
const AIMemoryConfigSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[3]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  memoryType: z.enum(['buffer', 'summary', 'conversation', 'vector']),
  maxTokens: z.number().min(1).max(100000).optional(),
  context: z.record(z.any()).optional()
}));
// Tool registration function for AI configuration tools
export function createAIConfigTools(getClient, server) {
  /* istanbul ignore next */
  cov_nop76s7lu().f[0]++;
  cov_nop76s7lu().s[4]++;
  // List AI nodes in workflow
  server.addTool({
    name: 'list-ai-nodes',
    description: 'List all AI-enabled nodes in a specific workflow or across all workflows',
    parameters: z.object({
      workflowId: z.string().optional()
    }),
    annotations: {
      title: 'List AI Nodes',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[5]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[6]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[0][0]++;
        cov_nop76s7lu().s[7]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[0][1]++;
      }
      cov_nop76s7lu().s[8]++;
      try {
        const aiNodeTypes =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[9]++, ['openai', 'anthropic', 'chatgpt', 'gpt3', 'gpt4', 'claude', 'mistral', 'llama', 'huggingface', 'cohere', 'ai-agent', 'ai-memory', 'ai-tool', 'ai-chain', 'langchain']);
        /* istanbul ignore next */
        cov_nop76s7lu().s[10]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[1][0]++;
          // Get specific workflow and analyze its nodes
          const workflow =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[11]++, await client.getWorkflow(args.workflowId));
          const aiNodes =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[12]++,
          /* istanbul ignore next */
          (cov_nop76s7lu().b[2][0]++, workflow.nodes?.filter(node => {
            /* istanbul ignore next */
            cov_nop76s7lu().f[2]++;
            cov_nop76s7lu().s[13]++;
            return aiNodeTypes.some(aiType => {
              /* istanbul ignore next */
              cov_nop76s7lu().f[3]++;
              cov_nop76s7lu().s[14]++;
              return /* istanbul ignore next */(cov_nop76s7lu().b[3][0]++, node.type?.toLowerCase().includes(aiType)) ||
              /* istanbul ignore next */
              (cov_nop76s7lu().b[3][1]++, node.name?.toLowerCase().includes('ai')) ||
              /* istanbul ignore next */
              (cov_nop76s7lu().b[3][2]++, node.parameters?.model !== undefined);
            });
          })) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[2][1]++, []));
          /* istanbul ignore next */
          cov_nop76s7lu().s[15]++;
          if (aiNodes.length === 0) {
            /* istanbul ignore next */
            cov_nop76s7lu().b[4][0]++;
            cov_nop76s7lu().s[16]++;
            return `No AI nodes found in workflow "${workflow.name}" (${args.workflowId})`;
          } else
          /* istanbul ignore next */
          {
            cov_nop76s7lu().b[4][1]++;
          }
          let result =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[17]++, `Found ${aiNodes.length} AI node(s) in workflow "${workflow.name}":\n\n`);
          /* istanbul ignore next */
          cov_nop76s7lu().s[18]++;
          aiNodes.forEach((node, index) => {
            /* istanbul ignore next */
            cov_nop76s7lu().f[4]++;
            cov_nop76s7lu().s[19]++;
            result += `${index + 1}. **${node.name}** (${node.type})\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[20]++;
            result += `   - Node ID: ${node.id}\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[21]++;
            result += `   - Position: (${
            /* istanbul ignore next */
            (cov_nop76s7lu().b[5][0]++, node.position?.[0]) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[5][1]++, 0)}, ${
            /* istanbul ignore next */
            (cov_nop76s7lu().b[6][0]++, node.position?.[1]) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[6][1]++, 0)})\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[22]++;
            if (node.parameters?.model) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[7][0]++;
              cov_nop76s7lu().s[23]++;
              result += `   - Model: ${node.parameters.model}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[7][1]++;
            }
            cov_nop76s7lu().s[24]++;
            if (node.parameters?.temperature) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[8][0]++;
              cov_nop76s7lu().s[25]++;
              result += `   - Temperature: ${node.parameters.temperature}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[8][1]++;
            }
            cov_nop76s7lu().s[26]++;
            result += '\n';
          });
          /* istanbul ignore next */
          cov_nop76s7lu().s[27]++;
          return result;
        } else {
          /* istanbul ignore next */
          cov_nop76s7lu().b[1][1]++;
          // List AI nodes across all workflows
          const workflows =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[28]++, await client.getWorkflows({
            limit: 100
          }));
          let totalAINodes =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[29]++, 0);
          let result =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[30]++, 'AI nodes found across all workflows:\n\n');
          /* istanbul ignore next */
          cov_nop76s7lu().s[31]++;
          for (const workflow of workflows.data) {
            const aiNodes =
            /* istanbul ignore next */
            (cov_nop76s7lu().s[32]++,
            /* istanbul ignore next */
            (cov_nop76s7lu().b[9][0]++, workflow.nodes?.filter(node => {
              /* istanbul ignore next */
              cov_nop76s7lu().f[5]++;
              cov_nop76s7lu().s[33]++;
              return aiNodeTypes.some(aiType => {
                /* istanbul ignore next */
                cov_nop76s7lu().f[6]++;
                cov_nop76s7lu().s[34]++;
                return /* istanbul ignore next */(cov_nop76s7lu().b[10][0]++, node.type?.toLowerCase().includes(aiType)) ||
                /* istanbul ignore next */
                (cov_nop76s7lu().b[10][1]++, node.name?.toLowerCase().includes('ai')) ||
                /* istanbul ignore next */
                (cov_nop76s7lu().b[10][2]++, node.parameters?.model !== undefined);
              });
            })) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[9][1]++, []));
            /* istanbul ignore next */
            cov_nop76s7lu().s[35]++;
            if (aiNodes.length > 0) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[11][0]++;
              cov_nop76s7lu().s[36]++;
              totalAINodes += aiNodes.length;
              /* istanbul ignore next */
              cov_nop76s7lu().s[37]++;
              result += `**${workflow.name}** (${workflow.id}): ${aiNodes.length} AI node(s)\n`;
              /* istanbul ignore next */
              cov_nop76s7lu().s[38]++;
              aiNodes.forEach(node => {
                /* istanbul ignore next */
                cov_nop76s7lu().f[7]++;
                cov_nop76s7lu().s[39]++;
                result += `  - ${node.name} (${node.type})\n`;
              });
              /* istanbul ignore next */
              cov_nop76s7lu().s[40]++;
              result += '\n';
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[11][1]++;
            }
          }
          /* istanbul ignore next */
          cov_nop76s7lu().s[41]++;
          if (totalAINodes === 0) {
            /* istanbul ignore next */
            cov_nop76s7lu().b[12][0]++;
            cov_nop76s7lu().s[42]++;
            return 'No AI nodes found in any workflows.';
          } else
          /* istanbul ignore next */
          {
            cov_nop76s7lu().b[12][1]++;
          }
          cov_nop76s7lu().s[43]++;
          return `Total AI nodes found: ${totalAINodes}\n\n${result}`;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[44]++;
        throw new UserError(`Failed to list AI nodes: ${error.message}`);
      }
    }
  });
  // Get AI node configuration
  /* istanbul ignore next */
  cov_nop76s7lu().s[45]++;
  server.addTool({
    name: 'get-ai-node-config',
    description: 'Get the configuration of a specific AI node including model settings, prompts, and parameters',
    parameters: z.object({
      workflowId: z.string().min(1, 'Workflow ID is required'),
      nodeId: z.string().min(1, 'Node ID is required')
    }),
    annotations: {
      title: 'Get AI Node Configuration',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[46]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[47]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[13][0]++;
        cov_nop76s7lu().s[48]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[13][1]++;
      }
      cov_nop76s7lu().s[49]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[50]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[51]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[9]++;
          cov_nop76s7lu().s[52]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[53]++;
        if (!node) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[14][0]++;
          cov_nop76s7lu().s[54]++;
          throw new UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[14][1]++;
        }
        const config =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[55]++, {
          nodeId: node.id,
          nodeName: node.name,
          nodeType: node.type,
          position: node.position,
          parameters:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[15][0]++, node.parameters) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[15][1]++, {}),
          credentials:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[16][0]++, node.credentials) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[16][1]++, {}),
          typeVersion: node.typeVersion,
          disabled:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[17][0]++, node.disabled) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[17][1]++, false)
        });
        // Extract AI-specific configuration
        const aiConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[56]++, {
          ...config,
          aiSpecific: {
            model:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[18][0]++, config.parameters.model) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[18][1]++, null),
            temperature:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[19][0]++, config.parameters.temperature) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[19][1]++, null),
            maxTokens:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][0]++, config.parameters.maxTokens) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][1]++, config.parameters.max_tokens) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][2]++, null),
            systemPrompt:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][0]++, config.parameters.systemPrompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][1]++, config.parameters.system_prompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][2]++, null),
            userPrompt:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][0]++, config.parameters.prompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][1]++, config.parameters.userPrompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][2]++, null),
            memory:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[23][0]++, config.parameters.memory) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[23][1]++, null),
            tools:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[24][0]++, config.parameters.tools) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[24][1]++, null),
            context:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[25][0]++, config.parameters.context) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[25][1]++, null)
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[57]++;
        return `AI Node Configuration for "${node.name}" (${node.type}):\n\n` + `**Basic Information:**\n` + `- Node ID: ${aiConfig.nodeId}\n` + `- Node Type: ${aiConfig.nodeType}\n` + `- Type Version: ${aiConfig.typeVersion}\n` + `- Disabled: ${aiConfig.disabled}\n` + `- Position: (${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[26][0]++, aiConfig.position?.[0]) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[26][1]++, 0)}, ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[27][0]++, aiConfig.position?.[1]) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[27][1]++, 0)})\n\n` + `**AI-Specific Configuration:**\n` + `- Model: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[28][0]++, aiConfig.aiSpecific.model) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[28][1]++, 'Not configured')}\n` + `- Temperature: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[29][0]++, aiConfig.aiSpecific.temperature) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[29][1]++, 'Not set')}\n` + `- Max Tokens: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[30][0]++, aiConfig.aiSpecific.maxTokens) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[30][1]++, 'Not set')}\n` + `- System Prompt: ${aiConfig.aiSpecific.systemPrompt ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[31][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[31][1]++, 'Not set')}\n` + `- User Prompt: ${aiConfig.aiSpecific.userPrompt ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[32][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[32][1]++, 'Not set')}\n` + `- Memory: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[33][0]++, aiConfig.aiSpecific.memory) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[33][1]++, 'Not configured')}\n` + `- Tools: ${aiConfig.aiSpecific.tools ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[34][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[34][1]++, 'Not set')}\n` + `- Context: ${aiConfig.aiSpecific.context ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[35][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[35][1]++, 'Not set')}\n\n` + `**Full Parameters:**\n\`\`\`json\n${JSON.stringify(config.parameters, null, 2)}\n\`\`\`\n\n` + `**Credentials:**\n\`\`\`json\n${JSON.stringify(config.credentials, null, 2)}\n\`\`\``;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[58]++;
        throw new UserError(`Failed to get AI node configuration: ${error.message}`);
      }
    }
  });
  // Update AI node configuration
  /* istanbul ignore next */
  cov_nop76s7lu().s[59]++;
  server.addTool({
    name: 'update-ai-node-config',
    description: 'Update the configuration of an AI node including model settings, prompts, and parameters',
    parameters: AINodeConfigSchema,
    annotations: {
      title: 'Update AI Node Configuration',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[10]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[60]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[61]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[36][0]++;
        cov_nop76s7lu().s[62]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[36][1]++;
      }
      cov_nop76s7lu().s[63]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[64]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[65]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[11]++;
          cov_nop76s7lu().s[66]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[67]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[38][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[38][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[37][0]++;
          cov_nop76s7lu().s[68]++;
          throw new UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[37][1]++;
        }
        // Update the node configuration
        cov_nop76s7lu().s[69]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[39][0]++;
          cov_nop76s7lu().s[70]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...args.config
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[39][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[71]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[72]++;
        return `Successfully updated AI node configuration for "${workflow.nodes?.[nodeIndex]?.name}" in workflow "${workflow.name}".\n\n` + `Updated parameters:\n\`\`\`json\n${JSON.stringify(args.config, null, 2)}\n\`\`\``;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[73]++;
        throw new UserError(`Failed to update AI node configuration: ${error.message}`);
      }
    }
  });
  // Test AI prompt with sample data
  /* istanbul ignore next */
  cov_nop76s7lu().s[74]++;
  server.addTool({
    name: 'test-ai-prompt',
    description: 'Test an AI node prompt with sample data to validate functionality before execution',
    parameters: AIPromptTestSchema,
    annotations: {
      title: 'Test AI Prompt',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[12]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[75]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[76]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[40][0]++;
        cov_nop76s7lu().s[77]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[40][1]++;
      }
      cov_nop76s7lu().s[78]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[79]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[80]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[13]++;
          cov_nop76s7lu().s[81]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[82]++;
        if (!node) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[41][0]++;
          cov_nop76s7lu().s[83]++;
          throw new UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[41][1]++;
        }
        // Simulate prompt testing (in a real implementation, this would execute the node with test data)
        const testResult =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[84]++, {
          nodeId: args.nodeId,
          nodeName: node.name,
          nodeType: node.type,
          prompt: args.prompt,
          sampleData:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[42][0]++, args.sampleData) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[42][1]++, {}),
          model:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[43][0]++, node.parameters?.model) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[43][1]++, 'Unknown'),
          timestamp: new Date().toISOString(),
          // Simulated response (in real implementation, would be actual AI response)
          simulatedResponse: `[TEST MODE] This is a simulated response for prompt: "${args.prompt}". In a real implementation, this would execute the AI node with the provided sample data and return the actual AI response.`,
          status: 'test_completed',
          validationResults: {
            promptValid: args.prompt.length > 0,
            dataStructureValid: typeof args.sampleData === 'object',
            nodeConfigurationValid: !!node.parameters?.model
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[85]++;
        return `AI Prompt Test Results:\n\n` + `**Node Information:**\n` + `- Node: ${testResult.nodeName} (${testResult.nodeType})\n` + `- Model: ${testResult.model}\n` + `- Test Time: ${testResult.timestamp}\n\n` + `**Test Input:**\n` + `- Prompt: "${testResult.prompt}"\n` + `- Sample Data: ${JSON.stringify(testResult.sampleData, null, 2)}\n\n` + `**Validation Results:**\n` + `- Prompt Valid: ${testResult.validationResults.promptValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[44][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[44][1]++, '❌')}\n` + `- Data Structure Valid: ${testResult.validationResults.dataStructureValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[45][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[45][1]++, '❌')}\n` + `- Node Configuration Valid: ${testResult.validationResults.nodeConfigurationValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[46][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[46][1]++, '❌')}\n\n` + `**Simulated Response:**\n${testResult.simulatedResponse}\n\n` + `**Note:** This is a test simulation. To execute the actual AI node, use the 'execute-workflow' tool.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[86]++;
        throw new UserError(`Failed to test AI prompt: ${error.message}`);
      }
    }
  });
  // Configure AI model selection
  /* istanbul ignore next */
  cov_nop76s7lu().s[87]++;
  server.addTool({
    name: 'configure-ai-model',
    description: 'Configure AI model selection and parameters for an AI node',
    parameters: AIModelSelectionSchema,
    annotations: {
      title: 'Configure AI Model',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[14]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[88]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[89]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[47][0]++;
        cov_nop76s7lu().s[90]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[47][1]++;
      }
      cov_nop76s7lu().s[91]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[92]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[93]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[15]++;
          cov_nop76s7lu().s[94]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[95]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[49][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[49][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[48][0]++;
          cov_nop76s7lu().s[96]++;
          throw new UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[48][1]++;
        }
        // Update model configuration
        const modelConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[97]++, {
          model: args.modelName,
          modelType: args.modelType,
          ...args.parameters
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[98]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[50][0]++;
          cov_nop76s7lu().s[99]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...modelConfig
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[50][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[100]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[101]++;
        return `Successfully configured AI model for node "${workflow.nodes?.[nodeIndex]?.name}":\n\n` + `**Model Configuration:**\n` + `- Model Type: ${args.modelType}\n` + `- Model Name: ${args.modelName}\n` + `- Additional Parameters: ${JSON.stringify(
        /* istanbul ignore next */
        (cov_nop76s7lu().b[51][0]++, args.parameters) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[51][1]++, {}), null, 2)}\n\n` + `The workflow has been updated and is ready for use with the new model configuration.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[102]++;
        throw new UserError(`Failed to configure AI model: ${error.message}`);
      }
    }
  });
  // Configure AI memory and context
  /* istanbul ignore next */
  cov_nop76s7lu().s[103]++;
  server.addTool({
    name: 'configure-ai-memory',
    description: 'Configure AI memory, context, and $fromAI() functionality for an AI node',
    parameters: AIMemoryConfigSchema,
    annotations: {
      title: 'Configure AI Memory',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[16]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[104]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[105]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[52][0]++;
        cov_nop76s7lu().s[106]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[52][1]++;
      }
      cov_nop76s7lu().s[107]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[108]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[109]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[17]++;
          cov_nop76s7lu().s[110]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[111]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[54][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[54][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[53][0]++;
          cov_nop76s7lu().s[112]++;
          throw new UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[53][1]++;
        }
        // Configure memory settings
        const memoryConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[113]++, {
          memory: {
            type: args.memoryType,
            maxTokens: args.maxTokens,
            context: args.context,
            fromAI: true // Enable $fromAI() functionality
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[114]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[55][0]++;
          cov_nop76s7lu().s[115]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...memoryConfig
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[55][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[116]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[117]++;
        return `Successfully configured AI memory for node "${workflow.nodes?.[nodeIndex]?.name}":\n\n` + `**Memory Configuration:**\n` + `- Memory Type: ${args.memoryType}\n` + `- Max Tokens: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[56][0]++, args.maxTokens) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[56][1]++, 'Unlimited')}\n` + `- Context Enabled: ${args.context ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[57][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[57][1]++, 'No')}\n` + `- $fromAI() Function: Enabled\n\n` + `**Usage:**\n` + `- Use $fromAI() in expressions to access AI-generated data\n` + `- Memory will be maintained across workflow executions\n` + `- Context data: ${JSON.stringify(
        /* istanbul ignore next */
        (cov_nop76s7lu().b[58][0]++, args.context) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[58][1]++, {}), null, 2)}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[118]++;
        throw new UserError(`Failed to configure AI memory: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3Zfbm9wNzZzN2x1IiwiYWN0dWFsQ292ZXJhZ2UiLCJ6IiwiVXNlckVycm9yIiwiQUlOb2RlQ29uZmlnU2NoZW1hIiwicyIsIm9iamVjdCIsIndvcmtmbG93SWQiLCJzdHJpbmciLCJtaW4iLCJub2RlSWQiLCJjb25maWciLCJyZWNvcmQiLCJhbnkiLCJBSVByb21wdFRlc3RTY2hlbWEiLCJwcm9tcHQiLCJzYW1wbGVEYXRhIiwib3B0aW9uYWwiLCJBSU1vZGVsU2VsZWN0aW9uU2NoZW1hIiwibW9kZWxUeXBlIiwiZW51bSIsIm1vZGVsTmFtZSIsInBhcmFtZXRlcnMiLCJBSU1lbW9yeUNvbmZpZ1NjaGVtYSIsIm1lbW9yeVR5cGUiLCJtYXhUb2tlbnMiLCJudW1iZXIiLCJtYXgiLCJjb250ZXh0IiwiY3JlYXRlQUlDb25maWdUb29scyIsImdldENsaWVudCIsInNlcnZlciIsImYiLCJhZGRUb29sIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiYW5ub3RhdGlvbnMiLCJ0aXRsZSIsInJlYWRPbmx5SGludCIsImRlc3RydWN0aXZlSGludCIsImlkZW1wb3RlbnRIaW50Iiwib3BlbldvcmxkSGludCIsImV4ZWN1dGUiLCJhcmdzIiwiY2xpZW50IiwiYiIsImFpTm9kZVR5cGVzIiwid29ya2Zsb3ciLCJnZXRXb3JrZmxvdyIsImFpTm9kZXMiLCJub2RlcyIsImZpbHRlciIsIm5vZGUiLCJzb21lIiwiYWlUeXBlIiwidHlwZSIsInRvTG93ZXJDYXNlIiwiaW5jbHVkZXMiLCJtb2RlbCIsInVuZGVmaW5lZCIsImxlbmd0aCIsInJlc3VsdCIsImZvckVhY2giLCJpbmRleCIsImlkIiwicG9zaXRpb24iLCJ0ZW1wZXJhdHVyZSIsIndvcmtmbG93cyIsImdldFdvcmtmbG93cyIsImxpbWl0IiwidG90YWxBSU5vZGVzIiwiZGF0YSIsImVycm9yIiwibWVzc2FnZSIsImZpbmQiLCJuIiwibm9kZU5hbWUiLCJub2RlVHlwZSIsImNyZWRlbnRpYWxzIiwidHlwZVZlcnNpb24iLCJkaXNhYmxlZCIsImFpQ29uZmlnIiwiYWlTcGVjaWZpYyIsIm1heF90b2tlbnMiLCJzeXN0ZW1Qcm9tcHQiLCJzeXN0ZW1fcHJvbXB0IiwidXNlclByb21wdCIsIm1lbW9yeSIsInRvb2xzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5vZGVJbmRleCIsImZpbmRJbmRleCIsInVwZGF0ZVdvcmtmbG93IiwiY29ubmVjdGlvbnMiLCJ0ZXN0UmVzdWx0IiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2ltdWxhdGVkUmVzcG9uc2UiLCJzdGF0dXMiLCJ2YWxpZGF0aW9uUmVzdWx0cyIsInByb21wdFZhbGlkIiwiZGF0YVN0cnVjdHVyZVZhbGlkIiwibm9kZUNvbmZpZ3VyYXRpb25WYWxpZCIsIm1vZGVsQ29uZmlnIiwibWVtb3J5Q29uZmlnIiwiZnJvbUFJIl0sInNvdXJjZXMiOlsiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvc3JjL3Rvb2xzL2FpLWNvbmZpZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gJ2Zhc3RtY3AnO1xuaW1wb3J0IHsgTjhuQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L244bkNsaWVudC5qcyc7XG5cbi8vIFpvZCBzY2hlbWFzIGZvciBBSSBjb25maWd1cmF0aW9uIHZhbGlkYXRpb25cbmNvbnN0IEFJTm9kZUNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5taW4oMSwgJ1dvcmtmbG93IElEIGlzIHJlcXVpcmVkJyksXG4gIG5vZGVJZDogei5zdHJpbmcoKS5taW4oMSwgJ05vZGUgSUQgaXMgcmVxdWlyZWQnKSxcbiAgY29uZmlnOiB6LnJlY29yZCh6LmFueSgpKSxcbn0pO1xuXG5jb25zdCBBSVByb21wdFRlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHdvcmtmbG93SWQ6IHouc3RyaW5nKCkubWluKDEsICdXb3JrZmxvdyBJRCBpcyByZXF1aXJlZCcpLFxuICBub2RlSWQ6IHouc3RyaW5nKCkubWluKDEsICdOb2RlIElEIGlzIHJlcXVpcmVkJyksXG4gIHByb21wdDogei5zdHJpbmcoKS5taW4oMSwgJ1Byb21wdCBpcyByZXF1aXJlZCcpLFxuICBzYW1wbGVEYXRhOiB6LnJlY29yZCh6LmFueSgpKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IEFJTW9kZWxTZWxlY3Rpb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHdvcmtmbG93SWQ6IHouc3RyaW5nKCkubWluKDEsICdXb3JrZmxvdyBJRCBpcyByZXF1aXJlZCcpLFxuICBub2RlSWQ6IHouc3RyaW5nKCkubWluKDEsICdOb2RlIElEIGlzIHJlcXVpcmVkJyksXG4gIG1vZGVsVHlwZTogei5lbnVtKFsnb3BlbmFpJywgJ2FudGhyb3BpYycsICdsb2NhbCcsICdjdXN0b20nXSksXG4gIG1vZGVsTmFtZTogei5zdHJpbmcoKS5taW4oMSwgJ01vZGVsIG5hbWUgaXMgcmVxdWlyZWQnKSxcbiAgcGFyYW1ldGVyczogei5yZWNvcmQoei5hbnkoKSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBBSU1lbW9yeUNvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5taW4oMSwgJ1dvcmtmbG93IElEIGlzIHJlcXVpcmVkJyksXG4gIG5vZGVJZDogei5zdHJpbmcoKS5taW4oMSwgJ05vZGUgSUQgaXMgcmVxdWlyZWQnKSxcbiAgbWVtb3J5VHlwZTogei5lbnVtKFsnYnVmZmVyJywgJ3N1bW1hcnknLCAnY29udmVyc2F0aW9uJywgJ3ZlY3RvciddKSxcbiAgbWF4VG9rZW5zOiB6Lm51bWJlcigpLm1pbigxKS5tYXgoMTAwMDAwKS5vcHRpb25hbCgpLFxuICBjb250ZXh0OiB6LnJlY29yZCh6LmFueSgpKS5vcHRpb25hbCgpLFxufSk7XG5cbi8vIFRvb2wgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBBSSBjb25maWd1cmF0aW9uIHRvb2xzXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQUlDb25maWdUb29scyhnZXRDbGllbnQ6ICgpID0+IE44bkNsaWVudCB8IG51bGwsIHNlcnZlcjogYW55KSB7XG4gIC8vIExpc3QgQUkgbm9kZXMgaW4gd29ya2Zsb3dcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdsaXN0LWFpLW5vZGVzJyxcbiAgICBkZXNjcmlwdGlvbjogJ0xpc3QgYWxsIEFJLWVuYWJsZWQgbm9kZXMgaW4gYSBzcGVjaWZpYyB3b3JrZmxvdyBvciBhY3Jvc3MgYWxsIHdvcmtmbG93cycsXG4gICAgcGFyYW1ldGVyczogei5vYmplY3Qoe1xuICAgICAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICAgIH0pLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0xpc3QgQUkgTm9kZXMnLFxuICAgICAgcmVhZE9ubHlIaW50OiB0cnVlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB7IHdvcmtmbG93SWQ/OiBzdHJpbmcgfSkgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYWlOb2RlVHlwZXMgPSBbXG4gICAgICAgICAgJ29wZW5haScsXG4gICAgICAgICAgJ2FudGhyb3BpYycsXG4gICAgICAgICAgJ2NoYXRncHQnLFxuICAgICAgICAgICdncHQzJyxcbiAgICAgICAgICAnZ3B0NCcsXG4gICAgICAgICAgJ2NsYXVkZScsXG4gICAgICAgICAgJ21pc3RyYWwnLFxuICAgICAgICAgICdsbGFtYScsXG4gICAgICAgICAgJ2h1Z2dpbmdmYWNlJyxcbiAgICAgICAgICAnY29oZXJlJyxcbiAgICAgICAgICAnYWktYWdlbnQnLFxuICAgICAgICAgICdhaS1tZW1vcnknLFxuICAgICAgICAgICdhaS10b29sJyxcbiAgICAgICAgICAnYWktY2hhaW4nLFxuICAgICAgICAgICdsYW5nY2hhaW4nLFxuICAgICAgICBdO1xuXG4gICAgICAgIGlmIChhcmdzLndvcmtmbG93SWQpIHtcbiAgICAgICAgICAvLyBHZXQgc3BlY2lmaWMgd29ya2Zsb3cgYW5kIGFuYWx5emUgaXRzIG5vZGVzXG4gICAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBjbGllbnQuZ2V0V29ya2Zsb3coYXJncy53b3JrZmxvd0lkKTtcbiAgICAgICAgICBjb25zdCBhaU5vZGVzID1cbiAgICAgICAgICAgIHdvcmtmbG93Lm5vZGVzPy5maWx0ZXIobm9kZSA9PlxuICAgICAgICAgICAgICBhaU5vZGVUeXBlcy5zb21lKFxuICAgICAgICAgICAgICAgIGFpVHlwZSA9PlxuICAgICAgICAgICAgICAgICAgbm9kZS50eXBlPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFpVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgIG5vZGUubmFtZT8udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnYWknKSB8fFxuICAgICAgICAgICAgICAgICAgbm9kZS5wYXJhbWV0ZXJzPy5tb2RlbCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkgfHwgW107XG5cbiAgICAgICAgICBpZiAoYWlOb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBgTm8gQUkgbm9kZXMgZm91bmQgaW4gd29ya2Zsb3cgXCIke3dvcmtmbG93Lm5hbWV9XCIgKCR7YXJncy53b3JrZmxvd0lkfSlgO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldCByZXN1bHQgPSBgRm91bmQgJHthaU5vZGVzLmxlbmd0aH0gQUkgbm9kZShzKSBpbiB3b3JrZmxvdyBcIiR7d29ya2Zsb3cubmFtZX1cIjpcXG5cXG5gO1xuICAgICAgICAgIGFpTm9kZXMuZm9yRWFjaCgobm9kZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgJHtpbmRleCArIDF9LiAqKiR7bm9kZS5uYW1lfSoqICgke25vZGUudHlwZX0pXFxuYDtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgICAgLSBOb2RlIElEOiAke25vZGUuaWR9XFxuYDtcbiAgICAgICAgICAgIHJlc3VsdCArPSBgICAgLSBQb3NpdGlvbjogKCR7bm9kZS5wb3NpdGlvbj8uWzBdIHx8IDB9LCAke25vZGUucG9zaXRpb24/LlsxXSB8fCAwfSlcXG5gO1xuICAgICAgICAgICAgaWYgKG5vZGUucGFyYW1ldGVycz8ubW9kZWwpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IGAgICAtIE1vZGVsOiAke25vZGUucGFyYW1ldGVycy5tb2RlbH1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGUucGFyYW1ldGVycz8udGVtcGVyYXR1cmUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9IGAgICAtIFRlbXBlcmF0dXJlOiAke25vZGUucGFyYW1ldGVycy50ZW1wZXJhdHVyZX1cXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBMaXN0IEFJIG5vZGVzIGFjcm9zcyBhbGwgd29ya2Zsb3dzXG4gICAgICAgICAgY29uc3Qgd29ya2Zsb3dzID0gYXdhaXQgY2xpZW50LmdldFdvcmtmbG93cyh7IGxpbWl0OiAxMDAgfSk7XG4gICAgICAgICAgbGV0IHRvdGFsQUlOb2RlcyA9IDA7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9ICdBSSBub2RlcyBmb3VuZCBhY3Jvc3MgYWxsIHdvcmtmbG93czpcXG5cXG4nO1xuXG4gICAgICAgICAgZm9yIChjb25zdCB3b3JrZmxvdyBvZiB3b3JrZmxvd3MuZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgYWlOb2RlcyA9XG4gICAgICAgICAgICAgIHdvcmtmbG93Lm5vZGVzPy5maWx0ZXIobm9kZSA9PlxuICAgICAgICAgICAgICAgIGFpTm9kZVR5cGVzLnNvbWUoXG4gICAgICAgICAgICAgICAgICBhaVR5cGUgPT5cbiAgICAgICAgICAgICAgICAgICAgbm9kZS50eXBlPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGFpVHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5uYW1lPy50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdhaScpIHx8XG4gICAgICAgICAgICAgICAgICAgIG5vZGUucGFyYW1ldGVycz8ubW9kZWwgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSB8fCBbXTtcblxuICAgICAgICAgICAgaWYgKGFpTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICB0b3RhbEFJTm9kZXMgKz0gYWlOb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICAgIHJlc3VsdCArPSBgKioke3dvcmtmbG93Lm5hbWV9KiogKCR7d29ya2Zsb3cuaWR9KTogJHthaU5vZGVzLmxlbmd0aH0gQUkgbm9kZShzKVxcbmA7XG4gICAgICAgICAgICAgIGFpTm9kZXMuZm9yRWFjaChub2RlID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYCAgLSAke25vZGUubmFtZX0gKCR7bm9kZS50eXBlfSlcXG5gO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0b3RhbEFJTm9kZXMgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnTm8gQUkgbm9kZXMgZm91bmQgaW4gYW55IHdvcmtmbG93cy4nO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBgVG90YWwgQUkgbm9kZXMgZm91bmQ6ICR7dG90YWxBSU5vZGVzfVxcblxcbiR7cmVzdWx0fWA7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGxpc3QgQUkgbm9kZXM6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBHZXQgQUkgbm9kZSBjb25maWd1cmF0aW9uXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnZ2V0LWFpLW5vZGUtY29uZmlnJyxcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgICdHZXQgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYSBzcGVjaWZpYyBBSSBub2RlIGluY2x1ZGluZyBtb2RlbCBzZXR0aW5ncywgcHJvbXB0cywgYW5kIHBhcmFtZXRlcnMnLFxuICAgIHBhcmFtZXRlcnM6IHoub2JqZWN0KHtcbiAgICAgIHdvcmtmbG93SWQ6IHouc3RyaW5nKCkubWluKDEsICdXb3JrZmxvdyBJRCBpcyByZXF1aXJlZCcpLFxuICAgICAgbm9kZUlkOiB6LnN0cmluZygpLm1pbigxLCAnTm9kZSBJRCBpcyByZXF1aXJlZCcpLFxuICAgIH0pLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0dldCBBSSBOb2RlIENvbmZpZ3VyYXRpb24nLFxuICAgICAgcmVhZE9ubHlIaW50OiB0cnVlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB7IHdvcmtmbG93SWQ6IHN0cmluZzsgbm9kZUlkOiBzdHJpbmcgfSkgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBjbGllbnQuZ2V0V29ya2Zsb3coYXJncy53b3JrZmxvd0lkKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHdvcmtmbG93Lm5vZGVzPy5maW5kKG4gPT4gbi5pZCA9PT0gYXJncy5ub2RlSWQpO1xuXG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoXG4gICAgICAgICAgICBgTm9kZSB3aXRoIElEIFwiJHthcmdzLm5vZGVJZH1cIiBub3QgZm91bmQgaW4gd29ya2Zsb3cgXCIke2FyZ3Mud29ya2Zsb3dJZH1cImBcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgICAgIG5vZGVJZDogbm9kZS5pZCxcbiAgICAgICAgICBub2RlTmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgIG5vZGVUeXBlOiBub2RlLnR5cGUsXG4gICAgICAgICAgcG9zaXRpb246IG5vZGUucG9zaXRpb24sXG4gICAgICAgICAgcGFyYW1ldGVyczogbm9kZS5wYXJhbWV0ZXJzIHx8IHt9LFxuICAgICAgICAgIGNyZWRlbnRpYWxzOiBub2RlLmNyZWRlbnRpYWxzIHx8IHt9LFxuICAgICAgICAgIHR5cGVWZXJzaW9uOiBub2RlLnR5cGVWZXJzaW9uLFxuICAgICAgICAgIGRpc2FibGVkOiBub2RlLmRpc2FibGVkIHx8IGZhbHNlLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEV4dHJhY3QgQUktc3BlY2lmaWMgY29uZmlndXJhdGlvblxuICAgICAgICBjb25zdCBhaUNvbmZpZzogYW55ID0ge1xuICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICBhaVNwZWNpZmljOiB7XG4gICAgICAgICAgICBtb2RlbDogY29uZmlnLnBhcmFtZXRlcnMubW9kZWwgfHwgbnVsbCxcbiAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBjb25maWcucGFyYW1ldGVycy50ZW1wZXJhdHVyZSB8fCBudWxsLFxuICAgICAgICAgICAgbWF4VG9rZW5zOiBjb25maWcucGFyYW1ldGVycy5tYXhUb2tlbnMgfHwgY29uZmlnLnBhcmFtZXRlcnMubWF4X3Rva2VucyB8fCBudWxsLFxuICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBjb25maWcucGFyYW1ldGVycy5zeXN0ZW1Qcm9tcHQgfHwgY29uZmlnLnBhcmFtZXRlcnMuc3lzdGVtX3Byb21wdCB8fCBudWxsLFxuICAgICAgICAgICAgdXNlclByb21wdDogY29uZmlnLnBhcmFtZXRlcnMucHJvbXB0IHx8IGNvbmZpZy5wYXJhbWV0ZXJzLnVzZXJQcm9tcHQgfHwgbnVsbCxcbiAgICAgICAgICAgIG1lbW9yeTogY29uZmlnLnBhcmFtZXRlcnMubWVtb3J5IHx8IG51bGwsXG4gICAgICAgICAgICB0b29sczogY29uZmlnLnBhcmFtZXRlcnMudG9vbHMgfHwgbnVsbCxcbiAgICAgICAgICAgIGNvbnRleHQ6IGNvbmZpZy5wYXJhbWV0ZXJzLmNvbnRleHQgfHwgbnVsbCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgYEFJIE5vZGUgQ29uZmlndXJhdGlvbiBmb3IgXCIke25vZGUubmFtZX1cIiAoJHtub2RlLnR5cGV9KTpcXG5cXG5gICtcbiAgICAgICAgICBgKipCYXNpYyBJbmZvcm1hdGlvbjoqKlxcbmAgK1xuICAgICAgICAgIGAtIE5vZGUgSUQ6ICR7YWlDb25maWcubm9kZUlkfVxcbmAgK1xuICAgICAgICAgIGAtIE5vZGUgVHlwZTogJHthaUNvbmZpZy5ub2RlVHlwZX1cXG5gICtcbiAgICAgICAgICBgLSBUeXBlIFZlcnNpb246ICR7YWlDb25maWcudHlwZVZlcnNpb259XFxuYCArXG4gICAgICAgICAgYC0gRGlzYWJsZWQ6ICR7YWlDb25maWcuZGlzYWJsZWR9XFxuYCArXG4gICAgICAgICAgYC0gUG9zaXRpb246ICgke2FpQ29uZmlnLnBvc2l0aW9uPy5bMF0gfHwgMH0sICR7YWlDb25maWcucG9zaXRpb24/LlsxXSB8fCAwfSlcXG5cXG5gICtcbiAgICAgICAgICBgKipBSS1TcGVjaWZpYyBDb25maWd1cmF0aW9uOioqXFxuYCArXG4gICAgICAgICAgYC0gTW9kZWw6ICR7YWlDb25maWcuYWlTcGVjaWZpYy5tb2RlbCB8fCAnTm90IGNvbmZpZ3VyZWQnfVxcbmAgK1xuICAgICAgICAgIGAtIFRlbXBlcmF0dXJlOiAke2FpQ29uZmlnLmFpU3BlY2lmaWMudGVtcGVyYXR1cmUgfHwgJ05vdCBzZXQnfVxcbmAgK1xuICAgICAgICAgIGAtIE1heCBUb2tlbnM6ICR7YWlDb25maWcuYWlTcGVjaWZpYy5tYXhUb2tlbnMgfHwgJ05vdCBzZXQnfVxcbmAgK1xuICAgICAgICAgIGAtIFN5c3RlbSBQcm9tcHQ6ICR7YWlDb25maWcuYWlTcGVjaWZpYy5zeXN0ZW1Qcm9tcHQgPyAnQ29uZmlndXJlZCcgOiAnTm90IHNldCd9XFxuYCArXG4gICAgICAgICAgYC0gVXNlciBQcm9tcHQ6ICR7YWlDb25maWcuYWlTcGVjaWZpYy51c2VyUHJvbXB0ID8gJ0NvbmZpZ3VyZWQnIDogJ05vdCBzZXQnfVxcbmAgK1xuICAgICAgICAgIGAtIE1lbW9yeTogJHthaUNvbmZpZy5haVNwZWNpZmljLm1lbW9yeSB8fCAnTm90IGNvbmZpZ3VyZWQnfVxcbmAgK1xuICAgICAgICAgIGAtIFRvb2xzOiAke2FpQ29uZmlnLmFpU3BlY2lmaWMudG9vbHMgPyAnQ29uZmlndXJlZCcgOiAnTm90IHNldCd9XFxuYCArXG4gICAgICAgICAgYC0gQ29udGV4dDogJHthaUNvbmZpZy5haVNwZWNpZmljLmNvbnRleHQgPyAnQ29uZmlndXJlZCcgOiAnTm90IHNldCd9XFxuXFxuYCArXG4gICAgICAgICAgYCoqRnVsbCBQYXJhbWV0ZXJzOioqXFxuXFxgXFxgXFxganNvblxcbiR7SlNPTi5zdHJpbmdpZnkoY29uZmlnLnBhcmFtZXRlcnMsIG51bGwsIDIpfVxcblxcYFxcYFxcYFxcblxcbmAgK1xuICAgICAgICAgIGAqKkNyZWRlbnRpYWxzOioqXFxuXFxgXFxgXFxganNvblxcbiR7SlNPTi5zdHJpbmdpZnkoY29uZmlnLmNyZWRlbnRpYWxzLCBudWxsLCAyKX1cXG5cXGBcXGBcXGBgXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBnZXQgQUkgbm9kZSBjb25maWd1cmF0aW9uOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVXBkYXRlIEFJIG5vZGUgY29uZmlndXJhdGlvblxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ3VwZGF0ZS1haS1ub2RlLWNvbmZpZycsXG4gICAgZGVzY3JpcHRpb246XG4gICAgICAnVXBkYXRlIHRoZSBjb25maWd1cmF0aW9uIG9mIGFuIEFJIG5vZGUgaW5jbHVkaW5nIG1vZGVsIHNldHRpbmdzLCBwcm9tcHRzLCBhbmQgcGFyYW1ldGVycycsXG4gICAgcGFyYW1ldGVyczogQUlOb2RlQ29uZmlnU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ1VwZGF0ZSBBSSBOb2RlIENvbmZpZ3VyYXRpb24nLFxuICAgICAgcmVhZE9ubHlIaW50OiBmYWxzZSxcbiAgICAgIGRlc3RydWN0aXZlSGludDogZmFsc2UsXG4gICAgICBpZGVtcG90ZW50SGludDogZmFsc2UsXG4gICAgICBvcGVuV29ybGRIaW50OiB0cnVlLFxuICAgIH0sXG4gICAgZXhlY3V0ZTogYXN5bmMgKGFyZ3M6IHouaW5mZXI8dHlwZW9mIEFJTm9kZUNvbmZpZ1NjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gYXdhaXQgY2xpZW50LmdldFdvcmtmbG93KGFyZ3Mud29ya2Zsb3dJZCk7XG4gICAgICAgIGNvbnN0IG5vZGVJbmRleCA9IHdvcmtmbG93Lm5vZGVzPy5maW5kSW5kZXgobiA9PiBuLmlkID09PSBhcmdzLm5vZGVJZCk7XG5cbiAgICAgICAgaWYgKG5vZGVJbmRleCA9PT0gLTEgfHwgbm9kZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKFxuICAgICAgICAgICAgYE5vZGUgd2l0aCBJRCBcIiR7YXJncy5ub2RlSWR9XCIgbm90IGZvdW5kIGluIHdvcmtmbG93IFwiJHthcmdzLndvcmtmbG93SWR9XCJgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgbm9kZSBjb25maWd1cmF0aW9uXG4gICAgICAgIGlmICh3b3JrZmxvdy5ub2Rlcykge1xuICAgICAgICAgIHdvcmtmbG93Lm5vZGVzW25vZGVJbmRleF0ucGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIC4uLndvcmtmbG93Lm5vZGVzW25vZGVJbmRleF0ucGFyYW1ldGVycyxcbiAgICAgICAgICAgIC4uLmFyZ3MuY29uZmlnLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGUgdGhlIHdvcmtmbG93XG4gICAgICAgIGF3YWl0IGNsaWVudC51cGRhdGVXb3JrZmxvdyhhcmdzLndvcmtmbG93SWQsIHtcbiAgICAgICAgICBub2Rlczogd29ya2Zsb3cubm9kZXMgYXMgQXJyYXk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+LFxuICAgICAgICAgIGNvbm5lY3Rpb25zOiB3b3JrZmxvdy5jb25uZWN0aW9ucyxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICBgU3VjY2Vzc2Z1bGx5IHVwZGF0ZWQgQUkgbm9kZSBjb25maWd1cmF0aW9uIGZvciBcIiR7d29ya2Zsb3cubm9kZXM/Lltub2RlSW5kZXhdPy5uYW1lfVwiIGluIHdvcmtmbG93IFwiJHt3b3JrZmxvdy5uYW1lfVwiLlxcblxcbmAgK1xuICAgICAgICAgIGBVcGRhdGVkIHBhcmFtZXRlcnM6XFxuXFxgXFxgXFxganNvblxcbiR7SlNPTi5zdHJpbmdpZnkoYXJncy5jb25maWcsIG51bGwsIDIpfVxcblxcYFxcYFxcYGBcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIHVwZGF0ZSBBSSBub2RlIGNvbmZpZ3VyYXRpb246ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBUZXN0IEFJIHByb21wdCB3aXRoIHNhbXBsZSBkYXRhXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAndGVzdC1haS1wcm9tcHQnLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ1Rlc3QgYW4gQUkgbm9kZSBwcm9tcHQgd2l0aCBzYW1wbGUgZGF0YSB0byB2YWxpZGF0ZSBmdW5jdGlvbmFsaXR5IGJlZm9yZSBleGVjdXRpb24nLFxuICAgIHBhcmFtZXRlcnM6IEFJUHJvbXB0VGVzdFNjaGVtYSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgdGl0bGU6ICdUZXN0IEFJIFByb21wdCcsXG4gICAgICByZWFkT25seUhpbnQ6IGZhbHNlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiBmYWxzZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgQUlQcm9tcHRUZXN0U2NoZW1hPikgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgd29ya2Zsb3cgPSBhd2FpdCBjbGllbnQuZ2V0V29ya2Zsb3coYXJncy53b3JrZmxvd0lkKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHdvcmtmbG93Lm5vZGVzPy5maW5kKG4gPT4gbi5pZCA9PT0gYXJncy5ub2RlSWQpO1xuXG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoXG4gICAgICAgICAgICBgTm9kZSB3aXRoIElEIFwiJHthcmdzLm5vZGVJZH1cIiBub3QgZm91bmQgaW4gd29ya2Zsb3cgXCIke2FyZ3Mud29ya2Zsb3dJZH1cImBcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2ltdWxhdGUgcHJvbXB0IHRlc3RpbmcgKGluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBleGVjdXRlIHRoZSBub2RlIHdpdGggdGVzdCBkYXRhKVxuICAgICAgICBjb25zdCB0ZXN0UmVzdWx0ID0ge1xuICAgICAgICAgIG5vZGVJZDogYXJncy5ub2RlSWQsXG4gICAgICAgICAgbm9kZU5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICBub2RlVHlwZTogbm9kZS50eXBlLFxuICAgICAgICAgIHByb21wdDogYXJncy5wcm9tcHQsXG4gICAgICAgICAgc2FtcGxlRGF0YTogYXJncy5zYW1wbGVEYXRhIHx8IHt9LFxuICAgICAgICAgIG1vZGVsOiBub2RlLnBhcmFtZXRlcnM/Lm1vZGVsIHx8ICdVbmtub3duJyxcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAvLyBTaW11bGF0ZWQgcmVzcG9uc2UgKGluIHJlYWwgaW1wbGVtZW50YXRpb24sIHdvdWxkIGJlIGFjdHVhbCBBSSByZXNwb25zZSlcbiAgICAgICAgICBzaW11bGF0ZWRSZXNwb25zZTogYFtURVNUIE1PREVdIFRoaXMgaXMgYSBzaW11bGF0ZWQgcmVzcG9uc2UgZm9yIHByb21wdDogXCIke2FyZ3MucHJvbXB0fVwiLiBJbiBhIHJlYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd291bGQgZXhlY3V0ZSB0aGUgQUkgbm9kZSB3aXRoIHRoZSBwcm92aWRlZCBzYW1wbGUgZGF0YSBhbmQgcmV0dXJuIHRoZSBhY3R1YWwgQUkgcmVzcG9uc2UuYCxcbiAgICAgICAgICBzdGF0dXM6ICd0ZXN0X2NvbXBsZXRlZCcsXG4gICAgICAgICAgdmFsaWRhdGlvblJlc3VsdHM6IHtcbiAgICAgICAgICAgIHByb21wdFZhbGlkOiBhcmdzLnByb21wdC5sZW5ndGggPiAwLFxuICAgICAgICAgICAgZGF0YVN0cnVjdHVyZVZhbGlkOiB0eXBlb2YgYXJncy5zYW1wbGVEYXRhID09PSAnb2JqZWN0JyxcbiAgICAgICAgICAgIG5vZGVDb25maWd1cmF0aW9uVmFsaWQ6ICEhbm9kZS5wYXJhbWV0ZXJzPy5tb2RlbCxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgYEFJIFByb21wdCBUZXN0IFJlc3VsdHM6XFxuXFxuYCArXG4gICAgICAgICAgYCoqTm9kZSBJbmZvcm1hdGlvbjoqKlxcbmAgK1xuICAgICAgICAgIGAtIE5vZGU6ICR7dGVzdFJlc3VsdC5ub2RlTmFtZX0gKCR7dGVzdFJlc3VsdC5ub2RlVHlwZX0pXFxuYCArXG4gICAgICAgICAgYC0gTW9kZWw6ICR7dGVzdFJlc3VsdC5tb2RlbH1cXG5gICtcbiAgICAgICAgICBgLSBUZXN0IFRpbWU6ICR7dGVzdFJlc3VsdC50aW1lc3RhbXB9XFxuXFxuYCArXG4gICAgICAgICAgYCoqVGVzdCBJbnB1dDoqKlxcbmAgK1xuICAgICAgICAgIGAtIFByb21wdDogXCIke3Rlc3RSZXN1bHQucHJvbXB0fVwiXFxuYCArXG4gICAgICAgICAgYC0gU2FtcGxlIERhdGE6ICR7SlNPTi5zdHJpbmdpZnkodGVzdFJlc3VsdC5zYW1wbGVEYXRhLCBudWxsLCAyKX1cXG5cXG5gICtcbiAgICAgICAgICBgKipWYWxpZGF0aW9uIFJlc3VsdHM6KipcXG5gICtcbiAgICAgICAgICBgLSBQcm9tcHQgVmFsaWQ6ICR7dGVzdFJlc3VsdC52YWxpZGF0aW9uUmVzdWx0cy5wcm9tcHRWYWxpZCA/ICfinIUnIDogJ+KdjCd9XFxuYCArXG4gICAgICAgICAgYC0gRGF0YSBTdHJ1Y3R1cmUgVmFsaWQ6ICR7dGVzdFJlc3VsdC52YWxpZGF0aW9uUmVzdWx0cy5kYXRhU3RydWN0dXJlVmFsaWQgPyAn4pyFJyA6ICfinYwnfVxcbmAgK1xuICAgICAgICAgIGAtIE5vZGUgQ29uZmlndXJhdGlvbiBWYWxpZDogJHt0ZXN0UmVzdWx0LnZhbGlkYXRpb25SZXN1bHRzLm5vZGVDb25maWd1cmF0aW9uVmFsaWQgPyAn4pyFJyA6ICfinYwnfVxcblxcbmAgK1xuICAgICAgICAgIGAqKlNpbXVsYXRlZCBSZXNwb25zZToqKlxcbiR7dGVzdFJlc3VsdC5zaW11bGF0ZWRSZXNwb25zZX1cXG5cXG5gICtcbiAgICAgICAgICBgKipOb3RlOioqIFRoaXMgaXMgYSB0ZXN0IHNpbXVsYXRpb24uIFRvIGV4ZWN1dGUgdGhlIGFjdHVhbCBBSSBub2RlLCB1c2UgdGhlICdleGVjdXRlLXdvcmtmbG93JyB0b29sLmBcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIHRlc3QgQUkgcHJvbXB0OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQ29uZmlndXJlIEFJIG1vZGVsIHNlbGVjdGlvblxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2NvbmZpZ3VyZS1haS1tb2RlbCcsXG4gICAgZGVzY3JpcHRpb246ICdDb25maWd1cmUgQUkgbW9kZWwgc2VsZWN0aW9uIGFuZCBwYXJhbWV0ZXJzIGZvciBhbiBBSSBub2RlJyxcbiAgICBwYXJhbWV0ZXJzOiBBSU1vZGVsU2VsZWN0aW9uU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0NvbmZpZ3VyZSBBSSBNb2RlbCcsXG4gICAgICByZWFkT25seUhpbnQ6IGZhbHNlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiBmYWxzZSxcbiAgICAgIG9wZW5Xb3JsZEhpbnQ6IHRydWUsXG4gICAgfSxcbiAgICBleGVjdXRlOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgQUlNb2RlbFNlbGVjdGlvblNjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gYXdhaXQgY2xpZW50LmdldFdvcmtmbG93KGFyZ3Mud29ya2Zsb3dJZCk7XG4gICAgICAgIGNvbnN0IG5vZGVJbmRleCA9IHdvcmtmbG93Lm5vZGVzPy5maW5kSW5kZXgobiA9PiBuLmlkID09PSBhcmdzLm5vZGVJZCk7XG5cbiAgICAgICAgaWYgKG5vZGVJbmRleCA9PT0gLTEgfHwgbm9kZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKFxuICAgICAgICAgICAgYE5vZGUgd2l0aCBJRCBcIiR7YXJncy5ub2RlSWR9XCIgbm90IGZvdW5kIGluIHdvcmtmbG93IFwiJHthcmdzLndvcmtmbG93SWR9XCJgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSBtb2RlbCBjb25maWd1cmF0aW9uXG4gICAgICAgIGNvbnN0IG1vZGVsQ29uZmlnID0ge1xuICAgICAgICAgIG1vZGVsOiBhcmdzLm1vZGVsTmFtZSxcbiAgICAgICAgICBtb2RlbFR5cGU6IGFyZ3MubW9kZWxUeXBlLFxuICAgICAgICAgIC4uLmFyZ3MucGFyYW1ldGVycyxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAod29ya2Zsb3cubm9kZXMpIHtcbiAgICAgICAgICB3b3JrZmxvdy5ub2Rlc1tub2RlSW5kZXhdLnBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICAuLi53b3JrZmxvdy5ub2Rlc1tub2RlSW5kZXhdLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICAuLi5tb2RlbENvbmZpZyxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHRoZSB3b3JrZmxvd1xuICAgICAgICBhd2FpdCBjbGllbnQudXBkYXRlV29ya2Zsb3coYXJncy53b3JrZmxvd0lkLCB7XG4gICAgICAgICAgbm9kZXM6IHdvcmtmbG93Lm5vZGVzIGFzIEFycmF5PFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgICAgICBjb25uZWN0aW9uczogd29ya2Zsb3cuY29ubmVjdGlvbnMsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgYFN1Y2Nlc3NmdWxseSBjb25maWd1cmVkIEFJIG1vZGVsIGZvciBub2RlIFwiJHt3b3JrZmxvdy5ub2Rlcz8uW25vZGVJbmRleF0/Lm5hbWV9XCI6XFxuXFxuYCArXG4gICAgICAgICAgYCoqTW9kZWwgQ29uZmlndXJhdGlvbjoqKlxcbmAgK1xuICAgICAgICAgIGAtIE1vZGVsIFR5cGU6ICR7YXJncy5tb2RlbFR5cGV9XFxuYCArXG4gICAgICAgICAgYC0gTW9kZWwgTmFtZTogJHthcmdzLm1vZGVsTmFtZX1cXG5gICtcbiAgICAgICAgICBgLSBBZGRpdGlvbmFsIFBhcmFtZXRlcnM6ICR7SlNPTi5zdHJpbmdpZnkoYXJncy5wYXJhbWV0ZXJzIHx8IHt9LCBudWxsLCAyKX1cXG5cXG5gICtcbiAgICAgICAgICBgVGhlIHdvcmtmbG93IGhhcyBiZWVuIHVwZGF0ZWQgYW5kIGlzIHJlYWR5IGZvciB1c2Ugd2l0aCB0aGUgbmV3IG1vZGVsIGNvbmZpZ3VyYXRpb24uYFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gY29uZmlndXJlIEFJIG1vZGVsOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQ29uZmlndXJlIEFJIG1lbW9yeSBhbmQgY29udGV4dFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2NvbmZpZ3VyZS1haS1tZW1vcnknLFxuICAgIGRlc2NyaXB0aW9uOiAnQ29uZmlndXJlIEFJIG1lbW9yeSwgY29udGV4dCwgYW5kICRmcm9tQUkoKSBmdW5jdGlvbmFsaXR5IGZvciBhbiBBSSBub2RlJyxcbiAgICBwYXJhbWV0ZXJzOiBBSU1lbW9yeUNvbmZpZ1NjaGVtYSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgdGl0bGU6ICdDb25maWd1cmUgQUkgTWVtb3J5JyxcbiAgICAgIHJlYWRPbmx5SGludDogZmFsc2UsXG4gICAgICBkZXN0cnVjdGl2ZUhpbnQ6IGZhbHNlLFxuICAgICAgaWRlbXBvdGVudEhpbnQ6IGZhbHNlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBBSU1lbW9yeUNvbmZpZ1NjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHdvcmtmbG93ID0gYXdhaXQgY2xpZW50LmdldFdvcmtmbG93KGFyZ3Mud29ya2Zsb3dJZCk7XG4gICAgICAgIGNvbnN0IG5vZGVJbmRleCA9IHdvcmtmbG93Lm5vZGVzPy5maW5kSW5kZXgobiA9PiBuLmlkID09PSBhcmdzLm5vZGVJZCk7XG5cbiAgICAgICAgaWYgKG5vZGVJbmRleCA9PT0gLTEgfHwgbm9kZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKFxuICAgICAgICAgICAgYE5vZGUgd2l0aCBJRCBcIiR7YXJncy5ub2RlSWR9XCIgbm90IGZvdW5kIGluIHdvcmtmbG93IFwiJHthcmdzLndvcmtmbG93SWR9XCJgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbmZpZ3VyZSBtZW1vcnkgc2V0dGluZ3NcbiAgICAgICAgY29uc3QgbWVtb3J5Q29uZmlnID0ge1xuICAgICAgICAgIG1lbW9yeToge1xuICAgICAgICAgICAgdHlwZTogYXJncy5tZW1vcnlUeXBlLFxuICAgICAgICAgICAgbWF4VG9rZW5zOiBhcmdzLm1heFRva2VucyxcbiAgICAgICAgICAgIGNvbnRleHQ6IGFyZ3MuY29udGV4dCxcbiAgICAgICAgICAgIGZyb21BSTogdHJ1ZSwgLy8gRW5hYmxlICRmcm9tQUkoKSBmdW5jdGlvbmFsaXR5XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAod29ya2Zsb3cubm9kZXMpIHtcbiAgICAgICAgICB3b3JrZmxvdy5ub2Rlc1tub2RlSW5kZXhdLnBhcmFtZXRlcnMgPSB7XG4gICAgICAgICAgICAuLi53b3JrZmxvdy5ub2Rlc1tub2RlSW5kZXhdLnBhcmFtZXRlcnMsXG4gICAgICAgICAgICAuLi5tZW1vcnlDb25maWcsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgd29ya2Zsb3dcbiAgICAgICAgYXdhaXQgY2xpZW50LnVwZGF0ZVdvcmtmbG93KGFyZ3Mud29ya2Zsb3dJZCwge1xuICAgICAgICAgIG5vZGVzOiB3b3JrZmxvdy5ub2RlcyBhcyBBcnJheTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sXG4gICAgICAgICAgY29ubmVjdGlvbnM6IHdvcmtmbG93LmNvbm5lY3Rpb25zLFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGBTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBBSSBtZW1vcnkgZm9yIG5vZGUgXCIke3dvcmtmbG93Lm5vZGVzPy5bbm9kZUluZGV4XT8ubmFtZX1cIjpcXG5cXG5gICtcbiAgICAgICAgICBgKipNZW1vcnkgQ29uZmlndXJhdGlvbjoqKlxcbmAgK1xuICAgICAgICAgIGAtIE1lbW9yeSBUeXBlOiAke2FyZ3MubWVtb3J5VHlwZX1cXG5gICtcbiAgICAgICAgICBgLSBNYXggVG9rZW5zOiAke2FyZ3MubWF4VG9rZW5zIHx8ICdVbmxpbWl0ZWQnfVxcbmAgK1xuICAgICAgICAgIGAtIENvbnRleHQgRW5hYmxlZDogJHthcmdzLmNvbnRleHQgPyAnWWVzJyA6ICdObyd9XFxuYCArXG4gICAgICAgICAgYC0gJGZyb21BSSgpIEZ1bmN0aW9uOiBFbmFibGVkXFxuXFxuYCArXG4gICAgICAgICAgYCoqVXNhZ2U6KipcXG5gICtcbiAgICAgICAgICBgLSBVc2UgJGZyb21BSSgpIGluIGV4cHJlc3Npb25zIHRvIGFjY2VzcyBBSS1nZW5lcmF0ZWQgZGF0YVxcbmAgK1xuICAgICAgICAgIGAtIE1lbW9yeSB3aWxsIGJlIG1haW50YWluZWQgYWNyb3NzIHdvcmtmbG93IGV4ZWN1dGlvbnNcXG5gICtcbiAgICAgICAgICBgLSBDb250ZXh0IGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoYXJncy5jb250ZXh0IHx8IHt9LCBudWxsLCAyKX1gXG4gICAgICAgICk7XG4gICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBjb25maWd1cmUgQUkgbWVtb3J5OiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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