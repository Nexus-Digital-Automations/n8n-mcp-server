{"version":3,"names":["cov_1kbgesm3jb","actualCoverage","z","UserError","fs","path","BinaryDataClient","FileHandlingUtils","UploadBinaryDataSchema","s","object","filePath","string","min","workflowId","optional","executionId","nodeId","propertyName","default","overrideMimeType","DownloadBinaryDataSchema","fileId","outputPath","UploadFromBase64Schema","data","fileName","mimeType","DownloadExecutionBinarySchema","outputIndex","number","itemIndex","UploadWorkflowBinarySchema","ListBinaryDataSchema","limit","max","offset","DeleteBinaryDataSchema","GetBinaryMetadataSchema","UploadLargeFileSchema","chunkSize","showProgress","boolean","binaryDataClient","fileHandler","getBinaryDataClient","getClient","f","b","client","baseUrl","process","env","N8N_BASE_URL","apiKey","N8N_API_KEY","getFileHandler","baseDirectory","N8N_FILES_DIR","maxFileSize","parseInt","MAX_FILE_SIZE","allowedMimeTypes","ALLOWED_MIME_TYPES","split","getMimeTypeFromExtension","ext","extname","toLowerCase","mimeTypes","createBinaryDataTools","server","addTool","name","description","parameters","handler","args","binaryClient","access","fileData","readFile","basename","validation","validateFile","length","isValid","errors","join","uploadRequest","toString","result","uploadBinaryData","success","fileInfo","message","error","Error","downloadRequest","downloadBinaryData","Buffer","from","outputDir","dirname","mkdir","recursive","writeFile","fileSize","dataSize","getExecutionBinaryData","uploadWorkflowBinaryData","files","listBinaryData","count","filters","pagination","deleteBinaryData","metadata","getBinaryDataMetadata","progressUpdates","uploadLargeFile","onProgress","progress","push","undefined"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { BinaryDataClient } from '../client/binaryDataClient.js';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\nimport {\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n  N8nBinaryDataResponse,\n} from '../types/fileTypes.js';\n\n// Zod schemas for validation\nconst UploadBinaryDataSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst DownloadBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst UploadFromBase64Schema = z.object({\n  data: z.string().min(1, 'Base64 data is required'),\n  fileName: z.string().min(1, 'File name is required'),\n  mimeType: z.string().min(1, 'MIME type is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst DownloadExecutionBinarySchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  outputIndex: z.number().min(0).default(0),\n  itemIndex: z.number().min(0).default(0),\n  propertyName: z.string().default('data'),\n});\n\nconst UploadWorkflowBinarySchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  filePath: z.string().min(1, 'File path is required'),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst ListBinaryDataSchema = z.object({\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  limit: z.number().min(1).max(100).default(20),\n  offset: z.number().min(0).default(0),\n});\n\nconst DeleteBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst GetBinaryMetadataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst UploadLargeFileSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  chunkSize: z.number().min(1024).max(10 * 1024 * 1024).default(1024 * 1024), // 1MB default, max 10MB\n  showProgress: z.boolean().default(true),\n});\n\n// Global instances\nlet binaryDataClient: BinaryDataClient | null = null;\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Initialize binary data client\nconst getBinaryDataClient = (getClient: () => N8nClient | null): BinaryDataClient => {\n  if (!binaryDataClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n    // Extract baseUrl and apiKey from client (assuming they're accessible)\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n    \n    binaryDataClient = new BinaryDataClient(client, baseUrl, apiKey);\n  }\n  return binaryDataClient;\n};\n\n// Initialize file handler\nconst getFileHandler = () => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Helper function to detect MIME type from file extension\nconst getMimeTypeFromExtension = (fileName: string): string => {\n  const ext = path.extname(fileName).toLowerCase();\n  const mimeTypes: Record<string, string> = {\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.png': 'image/png',\n    '.gif': 'image/gif',\n    '.pdf': 'application/pdf',\n    '.txt': 'text/plain',\n    '.json': 'application/json',\n    '.zip': 'application/zip',\n    '.csv': 'text/csv',\n    '.xml': 'application/xml',\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    '.xls': 'application/vnd.ms-excel',\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    '.doc': 'application/msword',\n  };\n  return mimeTypes[ext] || 'application/octet-stream';\n};\n\n// Tool registration function\nexport function createBinaryDataTools(getClient: () => N8nClient | null, server: any) {\n  // Upload binary data from file system\n  server.addTool({\n    name: 'upload-binary-data',\n    description: 'Upload a file from the local file system to n8n as binary data',\n    parameters: UploadBinaryDataSchema,\n    handler: async (args: z.infer<typeof UploadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload file\n        const uploadRequest: FileUploadRequest = {\n          fileName,\n          mimeType,\n          data: fileData.toString('base64'),\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download binary data to file system\n  server.addTool({\n    name: 'download-binary-data',\n    description: 'Download binary data from n8n to the local file system',\n    parameters: DownloadBinaryDataSchema,\n    handler: async (args: z.infer<typeof DownloadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download file\n        const downloadRequest: FileDownloadRequest = {\n          fileId: args.fileId,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.downloadBinaryData(downloadRequest);\n        \n        // Convert base64 to buffer and save\n        const fileData = Buffer.from(result.data, 'base64');\n        \n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileName: result.fileName,\n          mimeType: result.mimeType,\n          fileSize: result.fileSize,\n          message: `Successfully downloaded ${result.fileName} to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload binary data from base64 string\n  server.addTool({\n    name: 'upload-from-base64',\n    description: 'Upload binary data from a base64 encoded string',\n    parameters: UploadFromBase64Schema,\n    handler: async (args: z.infer<typeof UploadFromBase64Schema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Validate base64 data size\n        const dataSize = (args.data.length * 3) / 4; // Approximate decoded size\n        const validation = await fileHandler.validateFile(args.fileName, args.mimeType, dataSize);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        const uploadRequest: FileUploadRequest = {\n          fileName: args.fileName,\n          mimeType: args.mimeType,\n          data: args.data,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${args.fileName} from base64 data`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload from base64: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download execution binary data\n  server.addTool({\n    name: 'download-execution-binary',\n    description: 'Download binary data from a specific workflow execution output',\n    parameters: DownloadExecutionBinarySchema,\n    handler: async (args: z.infer<typeof DownloadExecutionBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download binary data from execution\n        const fileData = await binaryClient.getExecutionBinaryData(\n          args.executionId,\n          args.nodeId,\n          args.outputIndex,\n          args.itemIndex,\n          args.propertyName\n        );\n\n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileSize: fileData.length,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          message: `Successfully downloaded execution binary data to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download execution binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload workflow binary data\n  server.addTool({\n    name: 'upload-workflow-binary',\n    description: 'Upload binary data for use in a specific workflow',\n    parameters: UploadWorkflowBinarySchema,\n    handler: async (args: z.infer<typeof UploadWorkflowBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload workflow binary data\n        const result = await binaryClient.uploadWorkflowBinaryData(\n          args.workflowId,\n          args.nodeId,\n          fileData,\n          fileName,\n          mimeType,\n          args.propertyName\n        );\n\n        return {\n          success: true,\n          fileInfo: result,\n          workflowId: args.workflowId,\n          nodeId: args.nodeId,\n          message: `Successfully uploaded ${fileName} for workflow ${args.workflowId}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload workflow binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // List binary data\n  server.addTool({\n    name: 'list-binary-data',\n    description: 'List binary data files stored in n8n',\n    parameters: ListBinaryDataSchema,\n    handler: async (args: z.infer<typeof ListBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const files = await binaryClient.listBinaryData({\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          limit: args.limit,\n          offset: args.offset,\n        });\n\n        return {\n          success: true,\n          files,\n          count: files.length,\n          filters: {\n            workflowId: args.workflowId,\n            executionId: args.executionId,\n            nodeId: args.nodeId,\n          },\n          pagination: {\n            limit: args.limit,\n            offset: args.offset,\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to list binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Delete binary data\n  server.addTool({\n    name: 'delete-binary-data',\n    description: 'Delete binary data from n8n storage',\n    parameters: DeleteBinaryDataSchema,\n    handler: async (args: z.infer<typeof DeleteBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const result = await binaryClient.deleteBinaryData(args.fileId);\n\n        return {\n          success: result.success,\n          fileId: args.fileId,\n          message: result.message,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to delete binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get binary data metadata\n  server.addTool({\n    name: 'get-binary-metadata',\n    description: 'Get metadata for binary data stored in n8n',\n    parameters: GetBinaryMetadataSchema,\n    handler: async (args: z.infer<typeof GetBinaryMetadataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const metadata = await binaryClient.getBinaryDataMetadata(args.fileId);\n\n        return {\n          success: true,\n          metadata,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get binary metadata: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload large file with progress tracking\n  server.addTool({\n    name: 'upload-large-file',\n    description: 'Upload a large file with progress tracking and chunked transfer',\n    parameters: UploadLargeFileSchema,\n    handler: async (args: z.infer<typeof UploadLargeFileSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        const progressUpdates: FileTransferProgress[] = [];\n\n        // Upload with progress tracking\n        const result = await binaryClient.uploadLargeFile(fileData, fileName, mimeType, {\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          chunkSize: args.chunkSize,\n          onProgress: args.showProgress ? (progress) => {\n            progressUpdates.push({ ...progress });\n          } : undefined,\n        });\n\n        return {\n          success: true,\n          fileInfo: result,\n          fileName,\n          fileSize: fileData.length,\n          chunkSize: args.chunkSize,\n          progressUpdates: args.showProgress ? progressUpdates : undefined,\n          message: `Successfully uploaded large file ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload large file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],"mappingsyBM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAzBN,SAASE,CAAC,QAAQ,KAAK;AACvB,SAASC,SAAS,QAAQ,SAAS;AACnC,OAAO,KAAKC,EAAE,MAAM,aAAa;AACjC,OAAO,KAAKC,IAAI,MAAM,MAAM;AAE5B,SAASC,gBAAgB,QAAQ,+BAA+B;AAChE,SAASC,iBAAiB,QAAQ,0BAA0B;AAS5D;AACA,MAAMC,sBAAsB;AAAA;AAAA,CAAAR,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACtCC,QAAQ,EAAET,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;EACpDC,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EACjCC,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCE,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC7BG,YAAY,EAAEhB,CAAC,CAACU,MAAM,EAAE,CAACO,OAAO,CAAC,MAAM,CAAC;EACxCC,gBAAgB,EAAElB,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ;CACtC,CAAC;AAEF,MAAMM,wBAAwB;AAAA;AAAA,CAAArB,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACxCY,MAAM,EAAEpB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;EAChDU,UAAU,EAAErB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC;EACxDC,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EACjCC,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCE,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ;CAC5B,CAAC;AAEF,MAAMS,sBAAsB;AAAA;AAAA,CAAAxB,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACtCe,IAAI,EAAEvB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC;EAClDa,QAAQ,EAAExB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;EACpDc,QAAQ,EAAEzB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;EACpDC,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EACjCC,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCE,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ;CAC5B,CAAC;AAEF,MAAMa,6BAA6B;AAAA;AAAA,CAAA5B,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EAC7CM,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,0BAA0B,CAAC;EAC1DI,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;EAChDU,UAAU,EAAErB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC;EACxDgB,WAAW,EAAE3B,CAAC,CAAC4B,MAAM,EAAE,CAACjB,GAAG,CAAC,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC,CAAC;EACzCY,SAAS,EAAE7B,CAAC,CAAC4B,MAAM,EAAE,CAACjB,GAAG,CAAC,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC,CAAC;EACvCD,YAAY,EAAEhB,CAAC,CAACU,MAAM,EAAE,CAACO,OAAO,CAAC,MAAM;CACxC,CAAC;AAEF,MAAMa,0BAA0B;AAAA;AAAA,CAAAhC,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EAC1CI,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,yBAAyB,CAAC;EACxDI,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;EAChDF,QAAQ,EAAET,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;EACpDK,YAAY,EAAEhB,CAAC,CAACU,MAAM,EAAE,CAACO,OAAO,CAAC,MAAM,CAAC;EACxCC,gBAAgB,EAAElB,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ;CACtC,CAAC;AAEF,MAAMkB,oBAAoB;AAAA;AAAA,CAAAjC,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACpCI,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EACjCC,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCE,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC7BmB,KAAK,EAAEhC,CAAC,CAAC4B,MAAM,EAAE,CAACjB,GAAG,CAAC,CAAC,CAAC,CAACsB,GAAG,CAAC,GAAG,CAAC,CAAChB,OAAO,CAAC,EAAE,CAAC;EAC7CiB,MAAM,EAAElC,CAAC,CAAC4B,MAAM,EAAE,CAACjB,GAAG,CAAC,CAAC,CAAC,CAACM,OAAO,CAAC,CAAC;CACpC,CAAC;AAEF,MAAMkB,sBAAsB;AAAA;AAAA,CAAArC,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACtCY,MAAM,EAAEpB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB;CAChD,CAAC;AAEF,MAAMyB,uBAAuB;AAAA;AAAA,CAAAtC,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACvCY,MAAM,EAAEpB,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,qBAAqB;CAChD,CAAC;AAEF,MAAM0B,qBAAqB;AAAA;AAAA,CAAAvC,cAAA,GAAAS,CAAA,OAAGP,CAAC,CAACQ,MAAM,CAAC;EACrCC,QAAQ,EAAET,CAAC,CAACU,MAAM,EAAE,CAACC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;EACpDC,UAAU,EAAEZ,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EACjCC,WAAW,EAAEd,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAClCE,MAAM,EAAEf,CAAC,CAACU,MAAM,EAAE,CAACG,QAAQ,EAAE;EAC7ByB,SAAS,EAAEtC,CAAC,CAAC4B,MAAM,EAAE,CAACjB,GAAG,CAAC,IAAI,CAAC,CAACsB,GAAG,CAAC,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAChB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;EAAE;EAC5EsB,YAAY,EAAEvC,CAAC,CAACwC,OAAO,EAAE,CAACvB,OAAO,CAAC,IAAI;CACvC,CAAC;AAEF;AACA,IAAIwB,gBAAgB;AAAA;AAAA,CAAA3C,cAAA,GAAAS,CAAA,OAA4B,IAAI;AACpD,IAAImC,WAAW;AAAA;AAAA,CAAA5C,cAAA,GAAAS,CAAA,QAA6B,IAAI;AAEhD;AAAA;AAAAT,cAAA,GAAAS,CAAA;AACA,MAAMoC,mBAAmB,GAAIC,SAAiC,IAAsB;EAAA;EAAA9C,cAAA,GAAA+C,CAAA;EAAA/C,cAAA,GAAAS,CAAA;EAClF,IAAI,CAACkC,gBAAgB,EAAE;IAAA;IAAA3C,cAAA,GAAAgD,CAAA;IACrB,MAAMC,MAAM;IAAA;IAAA,CAAAjD,cAAA,GAAAS,CAAA,QAAGqC,SAAS,EAAE;IAAC;IAAA9C,cAAA,GAAAS,CAAA;IAC3B,IAAI,CAACwC,MAAM,EAAE;MAAA;MAAAjD,cAAA,GAAAgD,CAAA;MAAAhD,cAAA,GAAAS,CAAA;MACX,MAAM,IAAIN,SAAS,CAAC,0BAA0B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAAH,cAAA,GAAAgD,CAAA;IAAA;IACD;IACA,MAAME,OAAO;IAAA;IAAA,CAAAlD,cAAA,GAAAS,CAAA;IAAI;IAAA,CAAAT,cAAA,GAAAgD,CAAA,UAAAC,MAAc,CAACC,OAAO;IAAA;IAAA,CAAAlD,cAAA,GAAAgD,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACC,YAAY;IAAA;IAAA,CAAArD,cAAA,GAAAgD,CAAA,UAAI,uBAAuB;IAC9F,MAAMM,MAAM;IAAA;IAAA,CAAAtD,cAAA,GAAAS,CAAA;IAAI;IAAA,CAAAT,cAAA,GAAAgD,CAAA,UAAAC,MAAc,CAACK,MAAM;IAAA;IAAA,CAAAtD,cAAA,GAAAgD,CAAA,UAAIG,OAAO,CAACC,GAAG,CAACG,WAAW;IAAA;IAAA,CAAAvD,cAAA,GAAAgD,CAAA,UAAI,EAAE;IAAC;IAAAhD,cAAA,GAAAS,CAAA;IAEvEkC,gBAAgB,GAAG,IAAIrC,gBAAgB,CAAC2C,MAAM,EAAEC,OAAO,EAAEI,MAAM,CAAC;EAClE,CAAC;EAAA;EAAA;IAAAtD,cAAA,GAAAgD,CAAA;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACD,OAAOkC,gBAAgB;AACzB,CAAC;AAED;AAAA;AAAA3C,cAAA,GAAAS,CAAA;AACA,MAAM+C,cAAc,GAAGA,CAAA,KAAK;EAAA;EAAAxD,cAAA,GAAA+C,CAAA;EAAA/C,cAAA,GAAAS,CAAA;EAC1B,IAAI,CAACmC,WAAW,EAAE;IAAA;IAAA5C,cAAA,GAAAgD,CAAA;IAAAhD,cAAA,GAAAS,CAAA;IAChBmC,WAAW,GAAG,IAAIrC,iBAAiB,CAAC;MAClCkD,aAAa;MAAE;MAAA,CAAAzD,cAAA,GAAAgD,CAAA,UAAAG,OAAO,CAACC,GAAG,CAACM,aAAa;MAAA;MAAA,CAAA1D,cAAA,GAAAgD,CAAA,UAAI,cAAc;MAC1DW,WAAW,EAAEC,QAAQ;MAAC;MAAA,CAAA5D,cAAA,GAAAgD,CAAA,UAAAG,OAAO,CAACC,GAAG,CAACS,aAAa;MAAA;MAAA,CAAA7D,cAAA,GAAAgD,CAAA,UAAI,WAAW,EAAC;MAAE;MACjEc,gBAAgB;MAAE;MAAA,CAAA9D,cAAA,GAAAgD,CAAA,UAAAG,OAAO,CAACC,GAAG,CAACW,kBAAkB,EAAEC,KAAK,CAAC,GAAG,CAAC;MAAA;MAAA,CAAAhE,cAAA,GAAAgD,CAAA,UAAI,CAC9D,SAAS,EACT,QAAQ,EACR,kBAAkB,EAClB,iBAAiB,EACjB,iBAAiB,EACjB,8BAA8B,EAC9B,0BAA0B,EAC1B,0BAA0B,EAC1B,mEAAmE,EACnE,oBAAoB,EACpB,yEAAyE,CAC1E;KACF,CAAC;EACJ,CAAC;EAAA;EAAA;IAAAhD,cAAA,GAAAgD,CAAA;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACD,OAAOmC,WAAW;AACpB,CAAC;AAED;AAAA;AAAA5C,cAAA,GAAAS,CAAA;AACA,MAAMwD,wBAAwB,GAAIvC,QAAgB,IAAY;EAAA;EAAA1B,cAAA,GAAA+C,CAAA;EAC5D,MAAMmB,GAAG;EAAA;EAAA,CAAAlE,cAAA,GAAAS,CAAA,QAAGJ,IAAI,CAAC8D,OAAO,CAACzC,QAAQ,CAAC,CAAC0C,WAAW,EAAE;EAChD,MAAMC,SAAS;EAAA;EAAA,CAAArE,cAAA,GAAAS,CAAA,QAA2B;IACxC,MAAM,EAAE,YAAY;IACpB,OAAO,EAAE,YAAY;IACrB,MAAM,EAAE,WAAW;IACnB,MAAM,EAAE,WAAW;IACnB,MAAM,EAAE,iBAAiB;IACzB,MAAM,EAAE,YAAY;IACpB,OAAO,EAAE,kBAAkB;IAC3B,MAAM,EAAE,iBAAiB;IACzB,MAAM,EAAE,UAAU;IAClB,MAAM,EAAE,iBAAiB;IACzB,OAAO,EAAE,mEAAmE;IAC5E,MAAM,EAAE,0BAA0B;IAClC,OAAO,EAAE,yEAAyE;IAClF,MAAM,EAAE;GACT;EAAC;EAAAT,cAAA,GAAAS,CAAA;EACF,OAAO,2BAAAT,cAAA,GAAAgD,CAAA,UAAAqB,SAAS,CAACH,GAAG,CAAC;EAAA;EAAA,CAAAlE,cAAA,GAAAgD,CAAA,UAAI,0BAA0B;AACrD,CAAC;AAED;AACA,OAAM,SAAUsB,qBAAqBA,CAACxB,SAAiC,EAAEyB,MAAW;EAAA;EAAAvE,cAAA,GAAA+C,CAAA;EAAA/C,cAAA,GAAAS,CAAA;EAClF;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,oBAAoB;IAC1BC,WAAW,EAAE,gEAAgE;IAC7EC,UAAU,EAAEnE,sBAAsB;IAClCoE,OAAO,EAAE,MAAOC,IAA4C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC9D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGoC,mBAAmB,CAACC,SAAS,CAAC;QACnD,MAAMF,WAAW;QAAA;QAAA,CAAA5C,cAAA,GAAAS,CAAA,QAAG+C,cAAc,EAAE;QAEpC;QAAA;QAAAxD,cAAA,GAAAS,CAAA;QACA,IAAI;UAAA;UAAAT,cAAA,GAAAS,CAAA;UACF,MAAML,EAAE,CAAC2E,MAAM,CAACF,IAAI,CAAClE,QAAQ,CAAC;QAChC,CAAC,CAAC,MAAM;UAAA;UAAAX,cAAA,GAAAS,CAAA;UACN,MAAM,IAAIN,SAAS,CAAC,mBAAmB0E,IAAI,CAAClE,QAAQ,EAAE,CAAC;QACzD;QAEA;QACA,MAAMqE,QAAQ;QAAA;QAAA,CAAAhF,cAAA,GAAAS,CAAA,QAAG,MAAML,EAAE,CAAC6E,QAAQ,CAACJ,IAAI,CAAClE,QAAQ,CAAC;QACjD,MAAMe,QAAQ;QAAA;QAAA,CAAA1B,cAAA,GAAAS,CAAA,QAAGJ,IAAI,CAAC6E,QAAQ,CAACL,IAAI,CAAClE,QAAQ,CAAC;QAC7C,MAAMgB,QAAQ;QAAA;QAAA,CAAA3B,cAAA,GAAAS,CAAA;QAAG;QAAA,CAAAT,cAAA,GAAAgD,CAAA,UAAA6B,IAAI,CAACzD,gBAAgB;QAAA;QAAA,CAAApB,cAAA,GAAAgD,CAAA,UAAIiB,wBAAwB,CAACvC,QAAQ,CAAC;QAE5E;QACA,MAAMyD,UAAU;QAAA;QAAA,CAAAnF,cAAA,GAAAS,CAAA,QAAG,MAAMmC,WAAW,CAACwC,YAAY,CAAC1D,QAAQ,EAAEC,QAAQ,EAAEqD,QAAQ,CAACK,MAAM,CAAC;QAAC;QAAArF,cAAA,GAAAS,CAAA;QACvF,IAAI,CAAC0E,UAAU,CAACG,OAAO,EAAE;UAAA;UAAAtF,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UACvB,MAAM,IAAIN,SAAS,CAAC,2BAA2BgF,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAChF,CAAC;QAAA;QAAA;UAAAxF,cAAA,GAAAgD,CAAA;QAAA;QAED;QACA,MAAMyC,aAAa;QAAA;QAAA,CAAAzF,cAAA,GAAAS,CAAA,QAAsB;UACvCiB,QAAQ;UACRC,QAAQ;UACRF,IAAI,EAAEuD,QAAQ,CAACU,QAAQ,CAAC,QAAQ,CAAC;UACjC5E,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D;SACd;QAED,MAAM0E,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,QAAG,MAAMqE,YAAY,CAACc,gBAAgB,CAACH,aAAa,CAAC;QAAC;QAAAzF,cAAA,GAAAS,CAAA;QAElE,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAEH,MAAM;UAChBI,OAAO,EAAE,yBAAyBrE,QAAQ,KAAKsD,QAAQ,CAACK,MAAM;SAC/D;MACH,CAAC,CAAC,OAAOW,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,iCAAiC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAClH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,sBAAsB;IAC5BC,WAAW,EAAE,wDAAwD;IACrEC,UAAU,EAAEtD,wBAAwB;IACpCuD,OAAO,EAAE,MAAOC,IAA8C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAChE,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGoC,mBAAmB,CAACC,SAAS,CAAC;QAEnD;QACA,MAAMoD,eAAe;QAAA;QAAA,CAAAlG,cAAA,GAAAS,CAAA,QAAwB;UAC3Ca,MAAM,EAAEuD,IAAI,CAACvD,MAAM;UACnBR,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D;SACd;QAED,MAAM0E,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,QAAG,MAAMqE,YAAY,CAACqB,kBAAkB,CAACD,eAAe,CAAC;QAErE;QACA,MAAMlB,QAAQ;QAAA;QAAA,CAAAhF,cAAA,GAAAS,CAAA,QAAG2F,MAAM,CAACC,IAAI,CAACV,MAAM,CAAClE,IAAI,EAAE,QAAQ,CAAC;QAEnD;QACA,MAAM6E,SAAS;QAAA;QAAA,CAAAtG,cAAA,GAAAS,CAAA,QAAGJ,IAAI,CAACkG,OAAO,CAAC1B,IAAI,CAACtD,UAAU,CAAC;QAAC;QAAAvB,cAAA,GAAAS,CAAA;QAChD,MAAML,EAAE,CAACoG,KAAK,CAACF,SAAS,EAAE;UAAEG,SAAS,EAAE;QAAI,CAAE,CAAC;QAAC;QAAAzG,cAAA,GAAAS,CAAA;QAE/C,MAAML,EAAE,CAACsG,SAAS,CAAC7B,IAAI,CAACtD,UAAU,EAAEyD,QAAQ,CAAC;QAAC;QAAAhF,cAAA,GAAAS,CAAA;QAE9C,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbtE,UAAU,EAAEsD,IAAI,CAACtD,UAAU;UAC3BG,QAAQ,EAAEiE,MAAM,CAACjE,QAAQ;UACzBC,QAAQ,EAAEgE,MAAM,CAAChE,QAAQ;UACzBgF,QAAQ,EAAEhB,MAAM,CAACgB,QAAQ;UACzBZ,OAAO,EAAE,2BAA2BJ,MAAM,CAACjE,QAAQ,OAAOmD,IAAI,CAACtD,UAAU;SAC1E;MACH,CAAC,CAAC,OAAOyE,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,mCAAmC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MACpH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,oBAAoB;IAC1BC,WAAW,EAAE,iDAAiD;IAC9DC,UAAU,EAAEnD,sBAAsB;IAClCoD,OAAO,EAAE,MAAOC,IAA4C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC9D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGoC,mBAAmB,CAACC,SAAS,CAAC;QACnD,MAAMF,WAAW;QAAA;QAAA,CAAA5C,cAAA,GAAAS,CAAA,QAAG+C,cAAc,EAAE;QAEpC;QACA,MAAMoD,QAAQ;QAAA;QAAA,CAAA5G,cAAA,GAAAS,CAAA,QAAIoE,IAAI,CAACpD,IAAI,CAAC4D,MAAM,GAAG,CAAC,GAAI,CAAC,EAAC,CAAC;QAC7C,MAAMF,UAAU;QAAA;QAAA,CAAAnF,cAAA,GAAAS,CAAA,QAAG,MAAMmC,WAAW,CAACwC,YAAY,CAACP,IAAI,CAACnD,QAAQ,EAAEmD,IAAI,CAAClD,QAAQ,EAAEiF,QAAQ,CAAC;QAAC;QAAA5G,cAAA,GAAAS,CAAA;QAC1F,IAAI,CAAC0E,UAAU,CAACG,OAAO,EAAE;UAAA;UAAAtF,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UACvB,MAAM,IAAIN,SAAS,CAAC,2BAA2BgF,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAChF,CAAC;QAAA;QAAA;UAAAxF,cAAA,GAAAgD,CAAA;QAAA;QAED,MAAMyC,aAAa;QAAA;QAAA,CAAAzF,cAAA,GAAAS,CAAA,QAAsB;UACvCiB,QAAQ,EAAEmD,IAAI,CAACnD,QAAQ;UACvBC,QAAQ,EAAEkD,IAAI,CAAClD,QAAQ;UACvBF,IAAI,EAAEoD,IAAI,CAACpD,IAAI;UACfX,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D;SACd;QAED,MAAM0E,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,QAAG,MAAMqE,YAAY,CAACc,gBAAgB,CAACH,aAAa,CAAC;QAAC;QAAAzF,cAAA,GAAAS,CAAA;QAElE,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAEH,MAAM;UAChBI,OAAO,EAAE,yBAAyBlB,IAAI,CAACnD,QAAQ;SAChD;MACH,CAAC,CAAC,OAAOsE,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,iCAAiC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAClH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,2BAA2B;IACjCC,WAAW,EAAE,gEAAgE;IAC7EC,UAAU,EAAE/C,6BAA6B;IACzCgD,OAAO,EAAE,MAAOC,IAAmD,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MACrE,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGoC,mBAAmB,CAACC,SAAS,CAAC;QAEnD;QACA,MAAMkC,QAAQ;QAAA;QAAA,CAAAhF,cAAA,GAAAS,CAAA,QAAG,MAAMqE,YAAY,CAAC+B,sBAAsB,CACxDhC,IAAI,CAAC7D,WAAW,EAChB6D,IAAI,CAAC5D,MAAM,EACX4D,IAAI,CAAChD,WAAW,EAChBgD,IAAI,CAAC9C,SAAS,EACd8C,IAAI,CAAC3D,YAAY,CAClB;QAED;QACA,MAAMoF,SAAS;QAAA;QAAA,CAAAtG,cAAA,GAAAS,CAAA,QAAGJ,IAAI,CAACkG,OAAO,CAAC1B,IAAI,CAACtD,UAAU,CAAC;QAAC;QAAAvB,cAAA,GAAAS,CAAA;QAChD,MAAML,EAAE,CAACoG,KAAK,CAACF,SAAS,EAAE;UAAEG,SAAS,EAAE;QAAI,CAAE,CAAC;QAAC;QAAAzG,cAAA,GAAAS,CAAA;QAE/C,MAAML,EAAE,CAACsG,SAAS,CAAC7B,IAAI,CAACtD,UAAU,EAAEyD,QAAQ,CAAC;QAAC;QAAAhF,cAAA,GAAAS,CAAA;QAE9C,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbtE,UAAU,EAAEsD,IAAI,CAACtD,UAAU;UAC3BoF,QAAQ,EAAE3B,QAAQ,CAACK,MAAM;UACzBrE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D,MAAM;UACnB8E,OAAO,EAAE,oDAAoDlB,IAAI,CAACtD,UAAU;SAC7E;MACH,CAAC,CAAC,OAAOyE,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,6CAA6C6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAC9H;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,wBAAwB;IAC9BC,WAAW,EAAE,mDAAmD;IAChEC,UAAU,EAAE3C,0BAA0B;IACtC4C,OAAO,EAAE,MAAOC,IAAgD,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAClE,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,QAAGoC,mBAAmB,CAACC,SAAS,CAAC;QACnD,MAAMF,WAAW;QAAA;QAAA,CAAA5C,cAAA,GAAAS,CAAA,QAAG+C,cAAc,EAAE;QAEpC;QAAA;QAAAxD,cAAA,GAAAS,CAAA;QACA,IAAI;UAAA;UAAAT,cAAA,GAAAS,CAAA;UACF,MAAML,EAAE,CAAC2E,MAAM,CAACF,IAAI,CAAClE,QAAQ,CAAC;QAChC,CAAC,CAAC,MAAM;UAAA;UAAAX,cAAA,GAAAS,CAAA;UACN,MAAM,IAAIN,SAAS,CAAC,mBAAmB0E,IAAI,CAAClE,QAAQ,EAAE,CAAC;QACzD;QAEA;QACA,MAAMqE,QAAQ;QAAA;QAAA,CAAAhF,cAAA,GAAAS,CAAA,QAAG,MAAML,EAAE,CAAC6E,QAAQ,CAACJ,IAAI,CAAClE,QAAQ,CAAC;QACjD,MAAMe,QAAQ;QAAA;QAAA,CAAA1B,cAAA,GAAAS,CAAA,QAAGJ,IAAI,CAAC6E,QAAQ,CAACL,IAAI,CAAClE,QAAQ,CAAC;QAC7C,MAAMgB,QAAQ;QAAA;QAAA,CAAA3B,cAAA,GAAAS,CAAA;QAAG;QAAA,CAAAT,cAAA,GAAAgD,CAAA,WAAA6B,IAAI,CAACzD,gBAAgB;QAAA;QAAA,CAAApB,cAAA,GAAAgD,CAAA,WAAIiB,wBAAwB,CAACvC,QAAQ,CAAC;QAE5E;QACA,MAAMyD,UAAU;QAAA;QAAA,CAAAnF,cAAA,GAAAS,CAAA,QAAG,MAAMmC,WAAW,CAACwC,YAAY,CAAC1D,QAAQ,EAAEC,QAAQ,EAAEqD,QAAQ,CAACK,MAAM,CAAC;QAAC;QAAArF,cAAA,GAAAS,CAAA;QACvF,IAAI,CAAC0E,UAAU,CAACG,OAAO,EAAE;UAAA;UAAAtF,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UACvB,MAAM,IAAIN,SAAS,CAAC,2BAA2BgF,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAChF,CAAC;QAAA;QAAA;UAAAxF,cAAA,GAAAgD,CAAA;QAAA;QAED;QACA,MAAM2C,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,QAAG,MAAMqE,YAAY,CAACgC,wBAAwB,CACxDjC,IAAI,CAAC/D,UAAU,EACf+D,IAAI,CAAC5D,MAAM,EACX+D,QAAQ,EACRtD,QAAQ,EACRC,QAAQ,EACRkD,IAAI,CAAC3D,YAAY,CAClB;QAAC;QAAAlB,cAAA,GAAAS,CAAA;QAEF,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAEH,MAAM;UAChB7E,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BG,MAAM,EAAE4D,IAAI,CAAC5D,MAAM;UACnB8E,OAAO,EAAE,yBAAyBrE,QAAQ,iBAAiBmD,IAAI,CAAC/D,UAAU;SAC3E;MACH,CAAC,CAAC,OAAOkF,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,0CAA0C6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAC3H;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,kBAAkB;IACxBC,WAAW,EAAE,sCAAsC;IACnDC,UAAU,EAAE1C,oBAAoB;IAChC2C,OAAO,EAAE,MAAOC,IAA0C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC5D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,SAAGoC,mBAAmB,CAACC,SAAS,CAAC;QAEnD,MAAMiE,KAAK;QAAA;QAAA,CAAA/G,cAAA,GAAAS,CAAA,SAAG,MAAMqE,YAAY,CAACkC,cAAc,CAAC;UAC9ClG,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D,MAAM;UACnBiB,KAAK,EAAE2C,IAAI,CAAC3C,KAAK;UACjBE,MAAM,EAAEyC,IAAI,CAACzC;SACd,CAAC;QAAC;QAAApC,cAAA,GAAAS,CAAA;QAEH,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbkB,KAAK;UACLE,KAAK,EAAEF,KAAK,CAAC1B,MAAM;UACnB6B,OAAO,EAAE;YACPpG,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;YAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;YAC7BC,MAAM,EAAE4D,IAAI,CAAC5D;WACd;UACDkG,UAAU,EAAE;YACVjF,KAAK,EAAE2C,IAAI,CAAC3C,KAAK;YACjBE,MAAM,EAAEyC,IAAI,CAACzC;;SAEhB;MACH,CAAC,CAAC,OAAO4D,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,+BAA+B6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAChH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,oBAAoB;IAC1BC,WAAW,EAAE,qCAAqC;IAClDC,UAAU,EAAEtC,sBAAsB;IAClCuC,OAAO,EAAE,MAAOC,IAA4C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC9D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,SAAGoC,mBAAmB,CAACC,SAAS,CAAC;QAEnD,MAAM6C,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,SAAG,MAAMqE,YAAY,CAACsC,gBAAgB,CAACvC,IAAI,CAACvD,MAAM,CAAC;QAAC;QAAAtB,cAAA,GAAAS,CAAA;QAEhE,OAAO;UACLoF,OAAO,EAAEF,MAAM,CAACE,OAAO;UACvBvE,MAAM,EAAEuD,IAAI,CAACvD,MAAM;UACnByE,OAAO,EAAEJ,MAAM,CAACI;SACjB;MACH,CAAC,CAAC,OAAOC,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,iCAAiC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MAClH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,qBAAqB;IAC3BC,WAAW,EAAE,4CAA4C;IACzDC,UAAU,EAAErC,uBAAuB;IACnCsC,OAAO,EAAE,MAAOC,IAA6C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC/D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,SAAGoC,mBAAmB,CAACC,SAAS,CAAC;QAEnD,MAAMuE,QAAQ;QAAA;QAAA,CAAArH,cAAA,GAAAS,CAAA,SAAG,MAAMqE,YAAY,CAACwC,qBAAqB,CAACzC,IAAI,CAACvD,MAAM,CAAC;QAAC;QAAAtB,cAAA,GAAAS,CAAA;QAEvE,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbwB;SACD;MACH,CAAC,CAAC,OAAOrB,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,kCAAkC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MACnH;IACF;GACD,CAAC;EAEF;EAAA;EAAAhD,cAAA,GAAAS,CAAA;EACA8D,MAAM,CAACC,OAAO,CAAC;IACbC,IAAI,EAAE,mBAAmB;IACzBC,WAAW,EAAE,iEAAiE;IAC9EC,UAAU,EAAEpC,qBAAqB;IACjCqC,OAAO,EAAE,MAAOC,IAA2C,IAAI;MAAA;MAAA7E,cAAA,GAAA+C,CAAA;MAAA/C,cAAA,GAAAS,CAAA;MAC7D,IAAI;QACF,MAAMqE,YAAY;QAAA;QAAA,CAAA9E,cAAA,GAAAS,CAAA,SAAGoC,mBAAmB,CAACC,SAAS,CAAC;QACnD,MAAMF,WAAW;QAAA;QAAA,CAAA5C,cAAA,GAAAS,CAAA,SAAG+C,cAAc,EAAE;QAEpC;QAAA;QAAAxD,cAAA,GAAAS,CAAA;QACA,IAAI;UAAA;UAAAT,cAAA,GAAAS,CAAA;UACF,MAAML,EAAE,CAAC2E,MAAM,CAACF,IAAI,CAAClE,QAAQ,CAAC;QAChC,CAAC,CAAC,MAAM;UAAA;UAAAX,cAAA,GAAAS,CAAA;UACN,MAAM,IAAIN,SAAS,CAAC,mBAAmB0E,IAAI,CAAClE,QAAQ,EAAE,CAAC;QACzD;QAEA;QACA,MAAMqE,QAAQ;QAAA;QAAA,CAAAhF,cAAA,GAAAS,CAAA,SAAG,MAAML,EAAE,CAAC6E,QAAQ,CAACJ,IAAI,CAAClE,QAAQ,CAAC;QACjD,MAAMe,QAAQ;QAAA;QAAA,CAAA1B,cAAA,GAAAS,CAAA,SAAGJ,IAAI,CAAC6E,QAAQ,CAACL,IAAI,CAAClE,QAAQ,CAAC;QAC7C,MAAMgB,QAAQ;QAAA;QAAA,CAAA3B,cAAA,GAAAS,CAAA,SAAGwD,wBAAwB,CAACvC,QAAQ,CAAC;QAEnD;QACA,MAAMyD,UAAU;QAAA;QAAA,CAAAnF,cAAA,GAAAS,CAAA,SAAG,MAAMmC,WAAW,CAACwC,YAAY,CAAC1D,QAAQ,EAAEC,QAAQ,EAAEqD,QAAQ,CAACK,MAAM,CAAC;QAAC;QAAArF,cAAA,GAAAS,CAAA;QACvF,IAAI,CAAC0E,UAAU,CAACG,OAAO,EAAE;UAAA;UAAAtF,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UACvB,MAAM,IAAIN,SAAS,CAAC,2BAA2BgF,UAAU,CAACI,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;QAChF,CAAC;QAAA;QAAA;UAAAxF,cAAA,GAAAgD,CAAA;QAAA;QAED,MAAMuE,eAAe;QAAA;QAAA,CAAAvH,cAAA,GAAAS,CAAA,SAA2B,EAAE;QAElD;QACA,MAAMkF,MAAM;QAAA;QAAA,CAAA3F,cAAA,GAAAS,CAAA,SAAG,MAAMqE,YAAY,CAAC0C,eAAe,CAACxC,QAAQ,EAAEtD,QAAQ,EAAEC,QAAQ,EAAE;UAC9Eb,UAAU,EAAE+D,IAAI,CAAC/D,UAAU;UAC3BE,WAAW,EAAE6D,IAAI,CAAC7D,WAAW;UAC7BC,MAAM,EAAE4D,IAAI,CAAC5D,MAAM;UACnBuB,SAAS,EAAEqC,IAAI,CAACrC,SAAS;UACzBiF,UAAU,EAAE5C,IAAI,CAACpC,YAAY;UAAA;UAAA,CAAAzC,cAAA,GAAAgD,CAAA,WAAI0E,QAAQ,IAAI;YAAA;YAAA1H,cAAA,GAAA+C,CAAA;YAAA/C,cAAA,GAAAS,CAAA;YAC3C8G,eAAe,CAACI,IAAI,CAAC;cAAE,GAAGD;YAAQ,CAAE,CAAC;UACvC,CAAC;UAAA;UAAA,CAAA1H,cAAA,GAAAgD,CAAA,WAAG4E,SAAS;SACd,CAAC;QAAC;QAAA5H,cAAA,GAAAS,CAAA;QAEH,OAAO;UACLoF,OAAO,EAAE,IAAI;UACbC,QAAQ,EAAEH,MAAM;UAChBjE,QAAQ;UACRiF,QAAQ,EAAE3B,QAAQ,CAACK,MAAM;UACzB7C,SAAS,EAAEqC,IAAI,CAACrC,SAAS;UACzB+E,eAAe,EAAE1C,IAAI,CAACpC,YAAY;UAAA;UAAA,CAAAzC,cAAA,GAAAgD,CAAA,WAAGuE,eAAe;UAAA;UAAA,CAAAvH,cAAA,GAAAgD,CAAA,WAAG4E,SAAS;UAChE7B,OAAO,EAAE,oCAAoCrE,QAAQ,KAAKsD,QAAQ,CAACK,MAAM;SAC1E;MACH,CAAC,CAAC,OAAOW,KAAK,EAAE;QAAA;QAAAhG,cAAA,GAAAS,CAAA;QACd,IAAIuF,KAAK,YAAY7F,SAAS,EAAE;UAAA;UAAAH,cAAA,GAAAgD,CAAA;UAAAhD,cAAA,GAAAS,CAAA;UAC9B,MAAMuF,KAAK;QACb,CAAC;QAAA;QAAA;UAAAhG,cAAA,GAAAgD,CAAA;QAAA;QAAAhD,cAAA,GAAAS,CAAA;QACD,MAAM,IAAIN,SAAS,CAAC,gCAAgC6F,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAAjG,cAAA,GAAAgD,CAAA,WAAGgD,KAAK,CAACD,OAAO;QAAA;QAAA,CAAA/F,cAAA,GAAAgD,CAAA,WAAG,eAAe,GAAE,CAAC;MACjH;IACF;GACD,CAAC;AACJ","ignoreList":[]}