{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/workflow.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/workflow.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createWorkflowTools } from '../../../src/tools/workflow';\nimport { N8nClient } from '../../../src/client/n8nClient';\n\ndescribe('Workflow Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register workflow tools\n    createWorkflowTools(getClient, mockServer);\n  });\n\n  it('should register all workflow tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(7);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-workflows');\n    expect(toolNames).toContain('get-workflow');\n    expect(toolNames).toContain('create-workflow');\n    expect(toolNames).toContain('update-workflow');\n    expect(toolNames).toContain('delete-workflow');\n    expect(toolNames).toContain('activate-workflow');\n    expect(toolNames).toContain('deactivate-workflow');\n  });\n\n  describe('list-workflows tool', () => {\n    let listWorkflowsTool: any;\n\n    beforeEach(() => {\n      listWorkflowsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-workflows'\n      )[0];\n    });\n\n    it('should list workflows successfully', async () => {\n      const mockWorkflows = [\n        (global as any).testUtils.createMockWorkflow({ id: '1', name: 'Workflow 1', active: true }),\n        (global as any).testUtils.createMockWorkflow({ id: '2', name: 'Workflow 2', active: false }),\n      ];\n\n      mockClient.getWorkflows.mockResolvedValue(\n        (global as any).testUtils.createMockApiResponse(mockWorkflows)\n      );\n\n      const result = await listWorkflowsTool.execute({ limit: 10 });\n\n      expect(mockClient.getWorkflows).toHaveBeenCalledWith({ limit: 10 });\n      expect(result).toContain('Found 2 workflow(s)');\n      expect(result).toContain('Workflow 1');\n      expect(result).toContain('Workflow 2');\n      expect(result).toContain('🟢 Active');\n      expect(result).toContain('🔴 Inactive');\n    });\n\n    it('should list workflows with tags and pagination', async () => {\n      const mockWorkflows = [\n        (global as any).testUtils.createMockWorkflow({ \n          id: '1', \n          name: 'Tagged Workflow',\n          tags: ['production', 'automation'],\n          createdAt: '2023-01-01T00:00:00.000Z'\n        }),\n      ];\n\n      mockClient.getWorkflows.mockResolvedValue({\n        ...(global as any).testUtils.createMockApiResponse(mockWorkflows),\n        nextCursor: 'next-page-cursor'\n      });\n\n      const result = await listWorkflowsTool.execute({ cursor: 'current-cursor' });\n\n      expect(mockClient.getWorkflows).toHaveBeenCalledWith({ cursor: 'current-cursor' });\n      expect(result).toContain('Tagged Workflow');\n      expect(result).toContain('Tags: production, automation');\n      expect(result).toContain('📄 Use cursor \"next-page-cursor\" to get the next page.');\n    });\n\n    it('should handle empty workflow list', async () => {\n      mockClient.getWorkflows.mockResolvedValue(\n        (global as any).testUtils.createMockApiResponse([])\n      );\n\n      const result = await listWorkflowsTool.execute({});\n\n      expect(result).toBe('No workflows found in the n8n instance.');\n    });\n\n    it('should handle API errors with Error instance', async () => {\n      mockClient.getWorkflows.mockRejectedValue(new Error('API connection failed'));\n\n      await expect(listWorkflowsTool.execute({})).rejects.toThrow(\n        'Failed to list workflows: API connection failed'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getWorkflows.mockRejectedValue('Unknown error type');\n\n      await expect(listWorkflowsTool.execute({})).rejects.toThrow(\n        'Failed to list workflows with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-workflows'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      expect(tool).toHaveProperty('execute');\n      await expect((tool as any).execute({})).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n  });\n\n  describe('get-workflow tool', () => {\n    let getWorkflowTool: any;\n\n    beforeEach(() => {\n      getWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-workflow'\n      )[0];\n    });\n\n    it('should get workflow details successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-123',\n        name: 'Test Workflow',\n        active: true,\n      });\n\n      mockClient.getWorkflow.mockResolvedValue(mockWorkflow);\n\n      const result = await getWorkflowTool.execute({ workflowId: 'workflow-123' });\n\n      expect(mockClient.getWorkflow).toHaveBeenCalledWith('workflow-123');\n      expect(result).toContain('# Workflow: Test Workflow');\n      expect(result).toContain('**ID:** workflow-123');\n      expect(result).toContain('**Status:** 🟢 Active');\n    });\n\n    it('should get workflow details with tags and dates', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-456',\n        name: 'Complex Workflow',\n        active: false,\n        tags: ['test', 'automation'],\n        createdAt: '2023-01-01T12:00:00.000Z',\n        updatedAt: '2023-01-02T15:30:00.000Z',\n        nodes: [\n          { name: 'Start Node', type: 'manual' },\n          { name: undefined, type: undefined } // Test fallback values\n        ]\n      });\n\n      mockClient.getWorkflow.mockResolvedValue(mockWorkflow);\n\n      const result = await getWorkflowTool.execute({ workflowId: 'workflow-456' });\n\n      expect(result).toContain('**Tags:** test, automation');\n      expect(result).toContain('**Created:**');\n      expect(result).toContain('**Updated:**');\n      expect(result).toContain('**Status:** 🔴 Inactive');\n      expect(result).toContain('Start Node');\n      expect(result).toContain('Unnamed Node');\n      expect(result).toContain('Unknown Type');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-workflow'\n      )?.[0];\n\n      await expect((tool as any).execute({ workflowId: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle workflow not found error', async () => {\n      mockClient.getWorkflow.mockRejectedValue(new Error('Workflow not found'));\n\n      await expect(getWorkflowTool.execute({ workflowId: 'nonexistent' })).rejects.toThrow(\n        'Failed to get workflow: Workflow not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getWorkflow.mockRejectedValue('Unknown error type');\n\n      await expect(getWorkflowTool.execute({ workflowId: 'test' })).rejects.toThrow(\n        'Failed to get workflow with unknown error'\n      );\n    });\n  });\n\n  describe('create-workflow tool', () => {\n    let createWorkflowTool: any;\n\n    beforeEach(() => {\n      createWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-workflow'\n      )[0];\n    });\n\n    it('should create workflow successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'new-workflow-123',\n        name: 'New Workflow',\n        active: false,\n      });\n\n      mockClient.createWorkflow.mockResolvedValue(mockWorkflow);\n\n      const workflowData = {\n        name: 'New Workflow',\n        nodes: [{ name: 'Start', type: 'manual' }],\n        connections: {},\n        active: false,\n      };\n\n      const result = await createWorkflowTool.execute(workflowData);\n\n      expect(mockClient.createWorkflow).toHaveBeenCalledWith(workflowData);\n      expect(result).toContain('✅ Successfully created workflow \"New Workflow\"');\n      expect(result).toContain('ID: new-workflow-123');\n      expect(result).toContain('🔴 Inactive');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-workflow'\n      )?.[0];\n\n      const workflowData = {\n        name: 'Test Workflow',\n        nodes: [{ name: 'Start', type: 'manual' }],\n        connections: {},\n      };\n\n      await expect((tool as any).execute(workflowData)).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle creation errors with Error instance', async () => {\n      mockClient.createWorkflow.mockRejectedValue(new Error('Invalid workflow data'));\n\n      const workflowData = {\n        name: 'Invalid Workflow',\n        nodes: [{ name: 'Start', type: 'manual' }],\n        connections: {},\n      };\n\n      await expect(createWorkflowTool.execute(workflowData)).rejects.toThrow(\n        'Failed to create workflow: Invalid workflow data'\n      );\n    });\n\n    it('should handle unknown creation errors', async () => {\n      mockClient.createWorkflow.mockRejectedValue('Unknown error type');\n\n      const workflowData = {\n        name: 'Test Workflow',\n        nodes: [{ name: 'Start', type: 'manual' }],\n        connections: {},\n      };\n\n      await expect(createWorkflowTool.execute(workflowData)).rejects.toThrow(\n        'Failed to create workflow with unknown error'\n      );\n    });\n\n    it('should create active workflow successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'active-workflow-123',\n        name: 'Active Workflow',\n        active: true,\n      });\n\n      mockClient.createWorkflow.mockResolvedValue(mockWorkflow);\n\n      const workflowData = {\n        name: 'Active Workflow',\n        nodes: [{ name: 'Start', type: 'manual' }],\n        connections: {},\n        active: true,\n      };\n\n      const result = await createWorkflowTool.execute(workflowData);\n\n      expect(result).toContain('✅ Successfully created workflow \"Active Workflow\"');\n      expect(result).toContain('🟢 Active');\n    });\n  });\n\n  describe('update-workflow tool', () => {\n    let updateWorkflowTool: any;\n\n    beforeEach(() => {\n      updateWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-workflow'\n      )[0];\n    });\n\n    it('should update workflow successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-123',\n        name: 'Updated Workflow',\n        active: false,\n      });\n\n      mockClient.updateWorkflow.mockResolvedValue(mockWorkflow);\n\n      const updateData = {\n        workflowId: 'workflow-123',\n        name: 'Updated Workflow',\n        active: false,\n      };\n\n      const result = await updateWorkflowTool.execute(updateData);\n\n      expect(mockClient.updateWorkflow).toHaveBeenCalledWith('workflow-123', {\n        name: 'Updated Workflow',\n        active: false,\n      });\n      expect(result).toContain('✅ Successfully updated workflow \"Updated Workflow\"');\n      expect(result).toContain('ID: workflow-123');\n      expect(result).toContain('Status: 🔴 Inactive');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-workflow'\n      )?.[0];\n\n      const updateData = {\n        workflowId: 'test-id',\n        name: 'Test Update',\n      };\n\n      await expect((tool as any).execute(updateData)).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle update errors with Error instance', async () => {\n      mockClient.updateWorkflow.mockRejectedValue(new Error('Workflow not found'));\n\n      const updateData = {\n        workflowId: 'nonexistent-id',\n        name: 'Updated Name',\n      };\n\n      await expect(updateWorkflowTool.execute(updateData)).rejects.toThrow(\n        'Failed to update workflow: Workflow not found'\n      );\n    });\n\n    it('should handle unknown update errors', async () => {\n      mockClient.updateWorkflow.mockRejectedValue('Unknown error type');\n\n      const updateData = {\n        workflowId: 'test-id',\n        name: 'Test Update',\n      };\n\n      await expect(updateWorkflowTool.execute(updateData)).rejects.toThrow(\n        'Failed to update workflow with unknown error'\n      );\n    });\n\n    it('should update workflow to active status successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-456',\n        name: 'Activated Workflow',\n        active: true,\n      });\n\n      mockClient.updateWorkflow.mockResolvedValue(mockWorkflow);\n\n      const updateData = {\n        workflowId: 'workflow-456',\n        name: 'Activated Workflow',\n        active: true,\n      };\n\n      const result = await updateWorkflowTool.execute(updateData);\n\n      expect(result).toContain('✅ Successfully updated workflow \"Activated Workflow\"');\n      expect(result).toContain('Status: 🟢 Active');\n    });\n  });\n\n  describe('delete-workflow tool', () => {\n    let deleteWorkflowTool: any;\n\n    beforeEach(() => {\n      deleteWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-workflow'\n      )[0];\n    });\n\n    it('should delete workflow successfully', async () => {\n      mockClient.deleteWorkflow.mockResolvedValue(undefined);\n\n      const result = await deleteWorkflowTool.execute({ workflowId: 'workflow-123' });\n\n      expect(mockClient.deleteWorkflow).toHaveBeenCalledWith('workflow-123');\n      expect(result).toContain('✅ Successfully deleted workflow with ID: workflow-123');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-workflow'\n      )?.[0];\n\n      await expect((tool as any).execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle delete errors with Error instance', async () => {\n      mockClient.deleteWorkflow.mockRejectedValue(new Error('Workflow not found'));\n\n      await expect(deleteWorkflowTool.execute({ workflowId: 'nonexistent' })).rejects.toThrow(\n        'Failed to delete workflow: Workflow not found'\n      );\n    });\n\n    it('should handle unknown delete errors', async () => {\n      mockClient.deleteWorkflow.mockRejectedValue('Unknown error type');\n\n      await expect(deleteWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'Failed to delete workflow with unknown error'\n      );\n    });\n  });\n\n  describe('workflow activation tools', () => {\n    let activateWorkflowTool: any;\n    let deactivateWorkflowTool: any;\n\n    beforeEach(() => {\n      activateWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'activate-workflow'\n      )[0];\n      deactivateWorkflowTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'deactivate-workflow'\n      )[0];\n    });\n\n    it('should activate workflow successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-123',\n        name: 'Test Workflow',\n        active: true,\n      });\n\n      mockClient.activateWorkflow.mockResolvedValue(mockWorkflow);\n\n      const result = await activateWorkflowTool.execute({ workflowId: 'workflow-123' });\n\n      expect(mockClient.activateWorkflow).toHaveBeenCalledWith('workflow-123');\n      expect(result).toContain('✅ Successfully activated workflow \"Test Workflow\"');\n      expect(result).toContain('Status: 🟢 Active');\n    });\n\n    it('should throw UserError when client is not initialized for activation', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'activate-workflow'\n      )?.[0];\n\n      await expect((tool as any).execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle activation errors with Error instance', async () => {\n      mockClient.activateWorkflow.mockRejectedValue(new Error('Workflow activation failed'));\n\n      await expect(activateWorkflowTool.execute({ workflowId: 'broken-workflow' })).rejects.toThrow(\n        'Failed to activate workflow: Workflow activation failed'\n      );\n    });\n\n    it('should handle unknown activation errors', async () => {\n      mockClient.activateWorkflow.mockRejectedValue('Unknown error type');\n\n      await expect(activateWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'Failed to activate workflow with unknown error'\n      );\n    });\n\n    it('should deactivate workflow successfully', async () => {\n      const mockWorkflow = (global as any).testUtils.createMockWorkflow({\n        id: 'workflow-123',\n        name: 'Test Workflow',\n        active: false,\n      });\n\n      mockClient.deactivateWorkflow.mockResolvedValue(mockWorkflow);\n\n      const result = await deactivateWorkflowTool.execute({ workflowId: 'workflow-123' });\n\n      expect(mockClient.deactivateWorkflow).toHaveBeenCalledWith('workflow-123');\n      expect(result).toContain('✅ Successfully deactivated workflow \"Test Workflow\"');\n      expect(result).toContain('Status: 🔴 Inactive');\n    });\n\n    it('should throw UserError when client is not initialized for deactivation', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createWorkflowTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'deactivate-workflow'\n      )?.[0];\n\n      await expect((tool as any).execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should handle deactivation errors with Error instance', async () => {\n      mockClient.deactivateWorkflow.mockRejectedValue(new Error('Workflow deactivation failed'));\n\n      await expect(deactivateWorkflowTool.execute({ workflowId: 'broken-workflow' })).rejects.toThrow(\n        'Failed to deactivate workflow: Workflow deactivation failed'\n      );\n    });\n\n    it('should handle unknown deactivation errors', async () => {\n      mockClient.deactivateWorkflow.mockRejectedValue('Unknown error type');\n\n      await expect(deactivateWorkflowTool.execute({ workflowId: 'test-id' })).rejects.toThrow(\n        'Failed to deactivate workflow with unknown error'\n      );\n    });\n  });\n});\n"],"version":3}