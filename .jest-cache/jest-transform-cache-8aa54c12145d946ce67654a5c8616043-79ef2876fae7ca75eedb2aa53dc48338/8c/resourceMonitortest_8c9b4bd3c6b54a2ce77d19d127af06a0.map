{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/utils/resourceMonitor.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/utils/resourceMonitor.test.ts"],"sourcesContent":["import { ResourceMonitor } from '../../../src/utils/resourceMonitor.js';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  ResourceMonitoringConfig,\n  MonitoringDataPoint,\n  PerformanceAlert,\n  MonitoringMetrics,\n} from '../../../src/types/monitoringTypes.js';\n\n// Mock Node.js modules\njest.mock('os', () => ({\n  totalmem: jest.fn(() => 8589934592), // 8GB\n  freemem: jest.fn(() => 4294967296), // 4GB\n  loadavg: jest.fn(() => [1.5, 2.0, 2.5]),\n  cpus: jest.fn(() => new Array(4).fill({})), // 4 cores\n}));\n\njest.mock('fs', () => ({\n  stat: jest.fn(),\n}));\n\njest.mock('util', () => ({\n  promisify: jest.fn((fn) => fn),\n}));\n\ndescribe('ResourceMonitor', () => {\n  let resourceMonitor: ResourceMonitor;\n  let mockConsoleLog: jest.SpyInstance;\n  let mockConsoleError: jest.SpyInstance;\n  let mockSetInterval: jest.SpyInstance;\n  let mockClearInterval: jest.SpyInstance;\n\n  beforeEach(() => {\n    // Mock console methods\n    mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\n    mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\n    // Mock timer functions\n    mockSetInterval = jest.spyOn(global, 'setInterval').mockImplementation((fn, interval) => {\n      return setTimeout(fn, 0) as any; // Execute immediately for testing\n    });\n    mockClearInterval = jest.spyOn(global, 'clearInterval').mockImplementation();\n\n    // Mock process.cpuUsage and process.hrtime\n    const mockCpuUsage = jest.fn();\n    mockCpuUsage.mockReturnValueOnce({ user: 1000000, system: 500000 }); // Initial\n    mockCpuUsage.mockReturnValueOnce({ user: 2000000, system: 1000000 }); // After timeout\n    (process as any).cpuUsage = mockCpuUsage;\n\n    const mockHrtime = jest.fn();\n    mockHrtime.mockReturnValueOnce([0, 0]); // Initial\n    mockHrtime.mockReturnValueOnce([0, 100000000]); // After timeout (100ms)\n    (process as any).hrtime = mockHrtime;\n\n    // Mock process.memoryUsage\n    (process as any).memoryUsage = jest.fn(() => ({\n      heapUsed: 67108864, // 64MB\n      heapTotal: 134217728, // 128MB\n      external: 16777216, // 16MB\n      rss: 201326592, // 192MB\n    }));\n\n    // Mock fs.stat\n    const fs = require('fs');\n    fs.stat.mockResolvedValue({\n      isDirectory: () => true,\n    });\n\n    jest.clearAllMocks();\n  });\n\n  afterEach(() => {\n    if (resourceMonitor) {\n      resourceMonitor.stopMonitoring();\n    }\n    jest.clearAllTimers();\n    mockConsoleLog.mockRestore();\n    mockConsoleError.mockRestore();\n    mockSetInterval.mockRestore();\n    mockClearInterval.mockRestore();\n  });\n\n  describe('Constructor', () => {\n    it('should create ResourceMonitor with default configuration', () => {\n      resourceMonitor = new ResourceMonitor();\n      const config = resourceMonitor.getConfig();\n\n      expect(config.monitoring.enabled).toBe(true);\n      expect(config.monitoring.intervalMs).toBe(30000);\n      expect(config.monitoring.retentionDays).toBe(7);\n      expect(config.monitoring.alertThresholds.cpuUsage).toBe(80);\n      expect(config.monitoring.alertThresholds.memoryUsage).toBe(85);\n      expect(config.storage.maxDataPoints).toBe(10000);\n    });\n\n    it('should create ResourceMonitor with custom configuration', () => {\n      const customConfig: Partial<ResourceMonitoringConfig> = {\n        monitoring: {\n          enabled: false,\n          intervalMs: 60000,\n          retentionDays: 7,\n          alertThresholds: {\n            cpuUsage: 70,\n            memoryUsage: 80,\n            diskUsage: 85,\n            executionTime: 600000,\n            errorRate: 5,\n          },\n        },\n        storage: {\n          inMemory: true,\n          persistToDisk: false,\n          maxDataPoints: 5000,\n          compressionEnabled: false,\n        },\n      };\n\n      resourceMonitor = new ResourceMonitor(customConfig);\n      const config = resourceMonitor.getConfig();\n\n      expect(config.monitoring.enabled).toBe(false);\n      expect(config.monitoring.intervalMs).toBe(60000);\n      expect(config.monitoring.alertThresholds.cpuUsage).toBe(70);\n      expect(config.monitoring.alertThresholds.memoryUsage).toBe(80);\n      expect(config.storage.maxDataPoints).toBe(5000);\n    });\n  });\n\n  describe('Monitoring Lifecycle', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should start monitoring when enabled', async () => {\n      await resourceMonitor.startMonitoring();\n\n      expect(mockSetInterval).toHaveBeenCalledWith(\n        expect.any(Function),\n        30000\n      );\n      expect(mockConsoleLog).toHaveBeenCalledWith(\n        'Resource monitoring started with 30000ms interval'\n      );\n    });\n\n    it('should not start monitoring when disabled', async () => {\n      resourceMonitor = new ResourceMonitor({\n        monitoring: { \n          enabled: false,\n          intervalMs: 30000,\n          retentionDays: 7,\n          alertThresholds: {\n            cpuUsage: 80,\n            memoryUsage: 85,\n            diskUsage: 90,\n            executionTime: 300000,\n            errorRate: 10,\n          },\n        },\n      });\n\n      await resourceMonitor.startMonitoring();\n\n      expect(mockSetInterval).not.toHaveBeenCalled();\n      expect(mockConsoleLog).not.toHaveBeenCalled();\n    });\n\n    it('should stop monitoring', () => {\n      resourceMonitor.stopMonitoring();\n\n      expect(mockClearInterval).toHaveBeenCalled();\n      expect(mockConsoleLog).toHaveBeenCalledWith('Resource monitoring stopped');\n    });\n\n    it('should clear existing interval before starting new one', async () => {\n      await resourceMonitor.startMonitoring();\n      await resourceMonitor.startMonitoring(); // Start again\n\n      expect(mockClearInterval).toHaveBeenCalled();\n      expect(mockSetInterval).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('System Resource Usage', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should collect system resource usage', async () => {\n      const systemUsage = await resourceMonitor.getSystemResourceUsage();\n\n      expect(systemUsage).toMatchObject({\n        cpu: {\n          totalUsage: expect.any(Number),\n          processUsage: expect.any(Number),\n          loadAverage: [1.5, 2.0, 2.5],\n          coreCount: 4,\n        },\n        memory: {\n          totalMemory: 8589934592,\n          freeMemory: 4294967296,\n          usedMemory: 4294967296,\n          processMemory: {\n            heapUsed: 67108864,\n            heapTotal: 134217728,\n            external: 16777216,\n            rss: 201326592,\n          },\n          utilization: 50,\n        },\n        disk: {\n          totalSpace: expect.any(Number),\n          freeSpace: expect.any(Number),\n          usedSpace: expect.any(Number),\n          utilization: expect.any(Number),\n        },\n        network: {\n          bytesReceived: 0,\n          bytesSent: 0,\n          packetsReceived: 0,\n          packetsSent: 0,\n        },\n        uptime: expect.any(Number),\n        timestamp: expect.any(String),\n      });\n    });\n\n    it('should calculate memory utilization correctly', async () => {\n      const systemUsage = await resourceMonitor.getSystemResourceUsage();\n      \n      const expectedUtilization = ((8589934592 - 4294967296) / 8589934592) * 100;\n      expect(systemUsage.memory.utilization).toBe(expectedUtilization);\n    });\n\n    it('should handle disk usage errors gracefully', async () => {\n      const fs = require('fs');\n      fs.stat.mockRejectedValue(new Error('Access denied'));\n\n      const systemUsage = await resourceMonitor.getSystemResourceUsage();\n\n      expect(systemUsage.disk).toEqual({\n        totalSpace: 0,\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      });\n    });\n  });\n\n  describe('Workflow Resource Usage', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should get workflow resource usage with no execution history', async () => {\n      const workflowUsage = await resourceMonitor.getWorkflowResourceUsage(\n        'workflow-1',\n        'Test Workflow',\n        true\n      );\n\n      expect(workflowUsage).toMatchObject({\n        workflowId: 'workflow-1',\n        workflowName: 'Test Workflow',\n        isActive: true,\n        executionCount: 0,\n        resourceMetrics: {\n          averageExecutionTime: 0,\n          lastExecutionTime: 0,\n          totalExecutionTime: 0,\n          memoryUsage: {\n            average: 50000000,\n            peak: 100000000,\n            current: 75000000,\n          },\n          cpuUsage: {\n            average: 15,\n            peak: 80,\n            current: 25,\n          },\n        },\n        executionStats: {\n          successfulRuns: 0,\n          failedRuns: 0,\n          totalRuns: 0,\n          successRate: 100,\n          averageRunsPerHour: 0,\n        },\n        nodePerformance: [],\n      });\n    });\n\n    it('should calculate workflow resource usage with execution history', async () => {\n      // Record some executions\n      resourceMonitor.recordWorkflowExecution('workflow-1', 5000, true);\n      resourceMonitor.recordWorkflowExecution('workflow-1', 3000, true);\n      resourceMonitor.recordWorkflowExecution('workflow-1', 7000, false);\n\n      const workflowUsage = await resourceMonitor.getWorkflowResourceUsage(\n        'workflow-1',\n        'Test Workflow',\n        false\n      );\n\n      expect(workflowUsage.executionCount).toBe(3);\n      expect(workflowUsage.resourceMetrics.averageExecutionTime).toBe(5000);\n      expect(workflowUsage.resourceMetrics.totalExecutionTime).toBe(15000);\n      expect(workflowUsage.executionStats.successfulRuns).toBe(2);\n      expect(workflowUsage.executionStats.failedRuns).toBe(1);\n      expect(workflowUsage.executionStats.successRate).toBe(66.66666666666666);\n      expect(workflowUsage.resourceMetrics.memoryUsage.current).toBe(0); // Inactive workflow\n    });\n  });\n\n  describe('Instance Health Metrics', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should get instance health metrics with healthy status', async () => {\n      const healthMetrics = await resourceMonitor.getInstanceHealthMetrics();\n\n      expect(healthMetrics).toMatchObject({\n        overall: {\n          status: expect.stringMatching(/^(healthy|warning|degraded|critical)$/),\n          score: expect.any(Number),\n          issues: expect.any(Array),\n          recommendations: expect.any(Array),\n        },\n        performance: {\n          responseTime: 150,\n          throughput: 10,\n          errorRate: 2,\n          availabilityUptime: 99.5,\n        },\n        resources: {\n          memoryPressure: false, // 50% utilization < 85%\n          cpuThrottling: expect.any(Boolean),\n          diskSpaceWarning: expect.any(Boolean),\n          networkLatency: 50,\n        },\n        dependencies: expect.arrayContaining([\n          expect.objectContaining({\n            name: 'Database',\n            type: 'database',\n            status: 'online',\n            responseTime: 25,\n            errorCount: 0,\n          }),\n          expect.objectContaining({\n            name: 'File System',\n            type: 'file_system',\n            status: 'online',\n            responseTime: 10,\n            errorCount: 0,\n          }),\n        ]),\n        alerts: expect.any(Array),\n      });\n\n      expect(healthMetrics.overall.score).toBeGreaterThanOrEqual(0);\n      expect(healthMetrics.overall.score).toBeLessThanOrEqual(100);\n    });\n\n    it('should detect high memory usage issues', async () => {\n      // Mock high memory usage\n      const os = require('os');\n      os.totalmem.mockReturnValue(1000000000); // 1GB total\n      os.freemem.mockReturnValue(100000000);   // 100MB free (90% used)\n\n      const healthMetrics = await resourceMonitor.getInstanceHealthMetrics();\n\n      expect(healthMetrics.overall.issues).toContain('High memory usage detected');\n      expect(healthMetrics.overall.recommendations).toContain(\n        'Monitor memory-intensive workflows and consider increasing available memory'\n      );\n      expect(healthMetrics.resources.memoryPressure).toBe(true);\n    });\n  });\n\n  describe('Alert Management', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor({\n        monitoring: {\n          enabled: true,\n          intervalMs: 30000,\n          retentionDays: 7,\n          alertThresholds: {\n            cpuUsage: 70,\n            memoryUsage: 80,\n            diskUsage: 90,\n            executionTime: 300000,\n            errorRate: 10,\n          },\n        },\n      });\n    });\n\n    it('should create CPU usage alert when threshold exceeded', async () => {\n      // Mock high CPU usage\n      const os = require('os');\n      os.loadavg.mockReturnValue([3.0, 3.5, 4.0]); // High load average\n      os.cpus.mockReturnValue(new Array(4).fill({}));\n\n      await resourceMonitor.startMonitoring();\n\n      // Wait a bit for the monitoring to collect metrics\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const alerts = resourceMonitor.getAlerts();\n      const cpuAlert = alerts.find(alert => alert.title === 'High CPU Usage');\n      \n      if (cpuAlert) {\n        expect(cpuAlert.type).toBe('resource_threshold');\n        expect(cpuAlert.severity).toMatch(/^(high|critical)$/);\n        expect(cpuAlert.description).toContain('CPU usage');\n      }\n    });\n\n    it('should create memory usage alert when threshold exceeded', async () => {\n      // Mock high memory usage\n      const os = require('os');\n      os.totalmem.mockReturnValue(1000000000); // 1GB total\n      os.freemem.mockReturnValue(150000000);   // 150MB free (85% used)\n\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const alerts = resourceMonitor.getAlerts();\n      const memoryAlert = alerts.find(alert => alert.title === 'High Memory Usage');\n      \n      if (memoryAlert) {\n        expect(memoryAlert.type).toBe('resource_threshold');\n        expect(memoryAlert.severity).toMatch(/^(high|critical)$/);\n        expect(memoryAlert.description).toContain('Memory usage');\n      }\n    });\n\n    it('should resolve alerts', async () => {\n      // Create a mock alert first\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const alerts = resourceMonitor.getAlerts();\n      if (alerts.length > 0) {\n        const alertId = alerts[0].id;\n        const resolved = resourceMonitor.resolveAlert(alertId);\n        \n        expect(resolved).toBe(true);\n        \n        const resolvedAlerts = resourceMonitor.getAlerts(undefined, true);\n        expect(resolvedAlerts.some(alert => alert.id === alertId)).toBe(true);\n      }\n    });\n\n    it('should filter alerts by severity', async () => {\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const highSeverityAlerts = resourceMonitor.getAlerts('high');\n      const criticalSeverityAlerts = resourceMonitor.getAlerts('critical');\n\n      highSeverityAlerts.forEach(alert => {\n        expect(alert.severity).toBe('high');\n      });\n\n      criticalSeverityAlerts.forEach(alert => {\n        expect(alert.severity).toBe('critical');\n      });\n    });\n  });\n\n  describe('Data Point Management', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor({\n        storage: { \n          inMemory: true,\n          persistToDisk: false,\n          maxDataPoints: 5,\n          compressionEnabled: false,\n        },\n      });\n    });\n\n    it('should add and retrieve data points', async () => {\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const dataPoints = resourceMonitor.getDataPoints();\n      expect(dataPoints.length).toBeGreaterThan(0);\n      expect(dataPoints[0]).toMatchObject({\n        timestamp: expect.any(String),\n        metricType: expect.any(String),\n        data: expect.any(Object),\n        tags: expect.any(Object),\n      });\n    });\n\n    it('should limit data points to maxDataPoints', async () => {\n      // Simulate multiple monitoring intervals\n      for (let i = 0; i < 10; i++) {\n        await resourceMonitor.startMonitoring();\n        await new Promise(resolve => setTimeout(resolve, 5));\n        resourceMonitor.stopMonitoring();\n      }\n\n      const dataPoints = resourceMonitor.getDataPoints();\n      expect(dataPoints.length).toBeLessThanOrEqual(5);\n    });\n\n    it('should filter data points by metric type', async () => {\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const systemDataPoints = resourceMonitor.getDataPoints('system');\n      systemDataPoints.forEach(dp => {\n        expect(dp.metricType).toBe('system');\n      });\n    });\n\n    it('should limit data points by count', async () => {\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const limitedDataPoints = resourceMonitor.getDataPoints(undefined, 2);\n      expect(limitedDataPoints.length).toBeLessThanOrEqual(2);\n    });\n  });\n\n  describe('Configuration Management', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should update configuration', () => {\n      const newConfig: Partial<ResourceMonitoringConfig> = {\n        monitoring: {\n          enabled: true,\n          intervalMs: 45000,\n          retentionDays: 7,\n          alertThresholds: {\n            cpuUsage: 75,\n            memoryUsage: 85,\n            diskUsage: 90,\n            executionTime: 300000,\n            errorRate: 10,\n          },\n        },\n      };\n\n      resourceMonitor.updateConfig(newConfig);\n      const config = resourceMonitor.getConfig();\n\n      expect(config.monitoring.intervalMs).toBe(45000);\n      expect(config.monitoring.alertThresholds.cpuUsage).toBe(75);\n      // Ensure other values are preserved\n      expect(config.monitoring.enabled).toBe(true);\n      expect(config.monitoring.alertThresholds.memoryUsage).toBe(85);\n    });\n\n    it('should restart monitoring after config update', async () => {\n      await resourceMonitor.startMonitoring();\n      \n      resourceMonitor.updateConfig({\n        monitoring: { \n          enabled: true,\n          intervalMs: 60000,\n          retentionDays: 7,\n          alertThresholds: {\n            cpuUsage: 80,\n            memoryUsage: 85,\n            diskUsage: 90,\n            executionTime: 300000,\n            errorRate: 10,\n          },\n        },\n      });\n\n      expect(mockClearInterval).toHaveBeenCalled();\n      expect(mockSetInterval).toHaveBeenCalledWith(\n        expect.any(Function),\n        60000\n      );\n    });\n  });\n\n  describe('Workflow Execution Recording', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should record workflow execution', () => {\n      resourceMonitor.recordWorkflowExecution('workflow-1', 5000, true);\n      resourceMonitor.recordWorkflowExecution('workflow-1', 3000, false);\n\n      // Verify through getWorkflowResourceUsage\n      return resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test', false).then(usage => {\n        expect(usage.executionCount).toBe(2);\n        expect(usage.executionStats.successfulRuns).toBe(1);\n        expect(usage.executionStats.failedRuns).toBe(1);\n      });\n    });\n\n    it('should limit execution history per workflow', () => {\n      // Record more than 1000 executions\n      for (let i = 0; i < 1200; i++) {\n        resourceMonitor.recordWorkflowExecution('workflow-1', 1000, true);\n      }\n\n      return resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test', false).then(usage => {\n        expect(usage.executionCount).toBe(1000); // Should be capped at 1000\n      });\n    });\n  });\n\n  describe('Metrics Aggregation', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should get monitoring metrics', async () => {\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      const metrics = resourceMonitor.getMetrics();\n\n      expect(metrics).toMatchObject({\n        system: expect.any(Object),\n        workflows: expect.any(Array),\n        health: expect.any(Object),\n        alerts: expect.any(Array),\n        dataPoints: expect.any(Array),\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    beforeEach(() => {\n      resourceMonitor = new ResourceMonitor();\n    });\n\n    it('should handle errors during metric collection', async () => {\n      // Mock os.totalmem to throw an error\n      const os = require('os');\n      os.totalmem.mockImplementation(() => {\n        throw new Error('System error');\n      });\n\n      await resourceMonitor.startMonitoring();\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      expect(mockConsoleError).toHaveBeenCalledWith(\n        'Error collecting metrics:',\n        expect.any(Error)\n      );\n    });\n  });\n});"],"version":3}