ac46bbf5b3f21690be18bcaf6a553a67
/* istanbul ignore next */
function cov_1kbgesm3jb() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts";
  var hash = "1fdee381b1ba541f60b688a5e19899c53091b499";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 31
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "1": {
        start: {
          line: 16,
          column: 33
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "2": {
        start: {
          line: 23,
          column: 31
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "3": {
        start: {
          line: 31,
          column: 38
        },
        end: {
          line: 38,
          column: 2
        }
      },
      "4": {
        start: {
          line: 39,
          column: 35
        },
        end: {
          line: 45,
          column: 2
        }
      },
      "5": {
        start: {
          line: 46,
          column: 29
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "6": {
        start: {
          line: 53,
          column: 31
        },
        end: {
          line: 55,
          column: 2
        }
      },
      "7": {
        start: {
          line: 56,
          column: 32
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "8": {
        start: {
          line: 59,
          column: 30
        },
        end: {
          line: 66,
          column: 2
        }
      },
      "9": {
        start: {
          line: 68,
          column: 23
        },
        end: {
          line: 68,
          column: 27
        }
      },
      "10": {
        start: {
          line: 69,
          column: 18
        },
        end: {
          line: 69,
          column: 22
        }
      },
      "11": {
        start: {
          line: 71,
          column: 28
        },
        end: {
          line: 83,
          column: 1
        }
      },
      "12": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 81,
          column: 5
        }
      },
      "13": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 34
        }
      },
      "14": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      "15": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 60
        }
      },
      "16": {
        start: {
          line: 78,
          column: 24
        },
        end: {
          line: 78,
          column: 93
        }
      },
      "17": {
        start: {
          line: 79,
          column: 23
        },
        end: {
          line: 79,
          column: 69
        }
      },
      "18": {
        start: {
          line: 80,
          column: 8
        },
        end: {
          line: 80,
          column: 73
        }
      },
      "19": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 28
        }
      },
      "20": {
        start: {
          line: 85,
          column: 23
        },
        end: {
          line: 106,
          column: 1
        }
      },
      "21": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "22": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "23": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 23
        }
      },
      "24": {
        start: {
          line: 108,
          column: 33
        },
        end: {
          line: 127,
          column: 1
        }
      },
      "25": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 52
        }
      },
      "26": {
        start: {
          line: 110,
          column: 22
        },
        end: {
          line: 125,
          column: 5
        }
      },
      "27": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 56
        }
      },
      "28": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 178,
          column: 7
        }
      },
      "29": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "30": {
        start: {
          line: 137,
          column: 37
        },
        end: {
          line: 137,
          column: 67
        }
      },
      "31": {
        start: {
          line: 138,
          column: 36
        },
        end: {
          line: 138,
          column: 52
        }
      },
      "32": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "33": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 51
        }
      },
      "34": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 76
        }
      },
      "35": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "36": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "37": {
        start: {
          line: 149,
          column: 33
        },
        end: {
          line: 149,
          column: 92
        }
      },
      "38": {
        start: {
          line: 151,
          column: 35
        },
        end: {
          line: 151,
          column: 102
        }
      },
      "39": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 154,
          column: 17
        }
      },
      "40": {
        start: {
          line: 153,
          column: 20
        },
        end: {
          line: 153,
          column: 99
        }
      },
      "41": {
        start: {
          line: 156,
          column: 38
        },
        end: {
          line: 163,
          column: 17
        }
      },
      "42": {
        start: {
          line: 164,
          column: 31
        },
        end: {
          line: 164,
          column: 81
        }
      },
      "43": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 169,
          column: 18
        }
      },
      "44": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "45": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 32
        }
      },
      "46": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 129
        }
      },
      "47": {
        start: {
          line: 180,
          column: 4
        },
        end: {
          line: 217,
          column: 7
        }
      },
      "48": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "49": {
        start: {
          line: 186,
          column: 37
        },
        end: {
          line: 186,
          column: 67
        }
      },
      "50": {
        start: {
          line: 188,
          column: 40
        },
        end: {
          line: 193,
          column: 17
        }
      },
      "51": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 85
        }
      },
      "52": {
        start: {
          line: 196,
          column: 33
        },
        end: {
          line: 196,
          column: 67
        }
      },
      "53": {
        start: {
          line: 198,
          column: 34
        },
        end: {
          line: 198,
          column: 63
        }
      },
      "54": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 63
        }
      },
      "55": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 62
        }
      },
      "56": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 208,
          column: 18
        }
      },
      "57": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "58": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 32
        }
      },
      "59": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 131
        }
      },
      "60": {
        start: {
          line: 219,
          column: 4
        },
        end: {
          line: 255,
          column: 7
        }
      },
      "61": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "62": {
        start: {
          line: 225,
          column: 37
        },
        end: {
          line: 225,
          column: 67
        }
      },
      "63": {
        start: {
          line: 226,
          column: 36
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "64": {
        start: {
          line: 228,
          column: 33
        },
        end: {
          line: 228,
          column: 59
        }
      },
      "65": {
        start: {
          line: 229,
          column: 35
        },
        end: {
          line: 229,
          column: 105
        }
      },
      "66": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 232,
          column: 17
        }
      },
      "67": {
        start: {
          line: 231,
          column: 20
        },
        end: {
          line: 231,
          column: 99
        }
      },
      "68": {
        start: {
          line: 233,
          column: 38
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "69": {
        start: {
          line: 241,
          column: 31
        },
        end: {
          line: 241,
          column: 81
        }
      },
      "70": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 246,
          column: 18
        }
      },
      "71": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "72": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 32
        }
      },
      "73": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 129
        }
      },
      "74": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 286,
          column: 7
        }
      },
      "75": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "76": {
        start: {
          line: 263,
          column: 37
        },
        end: {
          line: 263,
          column: 67
        }
      },
      "77": {
        start: {
          line: 265,
          column: 33
        },
        end: {
          line: 265,
          column: 158
        }
      },
      "78": {
        start: {
          line: 267,
          column: 34
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "79": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 63
        }
      },
      "80": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 269,
          column: 62
        }
      },
      "81": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 277,
          column: 18
        }
      },
      "82": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 282,
          column: 17
        }
      },
      "83": {
        start: {
          line: 281,
          column: 20
        },
        end: {
          line: 281,
          column: 32
        }
      },
      "84": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 283,
          column: 141
        }
      },
      "85": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 329,
          column: 7
        }
      },
      "86": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 327,
          column: 13
        }
      },
      "87": {
        start: {
          line: 294,
          column: 37
        },
        end: {
          line: 294,
          column: 67
        }
      },
      "88": {
        start: {
          line: 295,
          column: 36
        },
        end: {
          line: 295,
          column: 52
        }
      },
      "89": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "90": {
        start: {
          line: 298,
          column: 20
        },
        end: {
          line: 298,
          column: 51
        }
      },
      "91": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 76
        }
      },
      "92": {
        start: {
          line: 304,
          column: 33
        },
        end: {
          line: 304,
          column: 65
        }
      },
      "93": {
        start: {
          line: 305,
          column: 33
        },
        end: {
          line: 305,
          column: 61
        }
      },
      "94": {
        start: {
          line: 306,
          column: 33
        },
        end: {
          line: 306,
          column: 92
        }
      },
      "95": {
        start: {
          line: 308,
          column: 35
        },
        end: {
          line: 308,
          column: 102
        }
      },
      "96": {
        start: {
          line: 309,
          column: 16
        },
        end: {
          line: 311,
          column: 17
        }
      },
      "97": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 99
        }
      },
      "98": {
        start: {
          line: 313,
          column: 31
        },
        end: {
          line: 313,
          column: 153
        }
      },
      "99": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 320,
          column: 18
        }
      },
      "100": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 325,
          column: 17
        }
      },
      "101": {
        start: {
          line: 324,
          column: 20
        },
        end: {
          line: 324,
          column: 32
        }
      },
      "102": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 326,
          column: 138
        }
      },
      "103": {
        start: {
          line: 331,
          column: 4
        },
        end: {
          line: 367,
          column: 7
        }
      },
      "104": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 365,
          column: 13
        }
      },
      "105": {
        start: {
          line: 337,
          column: 37
        },
        end: {
          line: 337,
          column: 67
        }
      },
      "106": {
        start: {
          line: 338,
          column: 30
        },
        end: {
          line: 344,
          column: 18
        }
      },
      "107": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 358,
          column: 18
        }
      },
      "108": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 363,
          column: 17
        }
      },
      "109": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 32
        }
      },
      "110": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 127
        }
      },
      "111": {
        start: {
          line: 369,
          column: 4
        },
        end: {
          line: 390,
          column: 7
        }
      },
      "112": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "113": {
        start: {
          line: 375,
          column: 37
        },
        end: {
          line: 375,
          column: 67
        }
      },
      "114": {
        start: {
          line: 376,
          column: 31
        },
        end: {
          line: 376,
          column: 79
        }
      },
      "115": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 381,
          column: 18
        }
      },
      "116": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 386,
          column: 17
        }
      },
      "117": {
        start: {
          line: 385,
          column: 20
        },
        end: {
          line: 385,
          column: 32
        }
      },
      "118": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 129
        }
      },
      "119": {
        start: {
          line: 392,
          column: 4
        },
        end: {
          line: 412,
          column: 7
        }
      },
      "120": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 410,
          column: 13
        }
      },
      "121": {
        start: {
          line: 398,
          column: 37
        },
        end: {
          line: 398,
          column: 67
        }
      },
      "122": {
        start: {
          line: 399,
          column: 33
        },
        end: {
          line: 399,
          column: 86
        }
      },
      "123": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 403,
          column: 18
        }
      },
      "124": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 408,
          column: 17
        }
      },
      "125": {
        start: {
          line: 407,
          column: 20
        },
        end: {
          line: 407,
          column: 32
        }
      },
      "126": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 409,
          column: 130
        }
      },
      "127": {
        start: {
          line: 414,
          column: 4
        },
        end: {
          line: 466,
          column: 7
        }
      },
      "128": {
        start: {
          line: 419,
          column: 12
        },
        end: {
          line: 464,
          column: 13
        }
      },
      "129": {
        start: {
          line: 420,
          column: 37
        },
        end: {
          line: 420,
          column: 67
        }
      },
      "130": {
        start: {
          line: 421,
          column: 36
        },
        end: {
          line: 421,
          column: 52
        }
      },
      "131": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 428,
          column: 17
        }
      },
      "132": {
        start: {
          line: 424,
          column: 20
        },
        end: {
          line: 424,
          column: 51
        }
      },
      "133": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 427,
          column: 76
        }
      },
      "134": {
        start: {
          line: 430,
          column: 33
        },
        end: {
          line: 430,
          column: 65
        }
      },
      "135": {
        start: {
          line: 431,
          column: 33
        },
        end: {
          line: 431,
          column: 61
        }
      },
      "136": {
        start: {
          line: 432,
          column: 33
        },
        end: {
          line: 432,
          column: 67
        }
      },
      "137": {
        start: {
          line: 434,
          column: 35
        },
        end: {
          line: 434,
          column: 102
        }
      },
      "138": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 437,
          column: 17
        }
      },
      "139": {
        start: {
          line: 436,
          column: 20
        },
        end: {
          line: 436,
          column: 99
        }
      },
      "140": {
        start: {
          line: 438,
          column: 38
        },
        end: {
          line: 438,
          column: 40
        }
      },
      "141": {
        start: {
          line: 440,
          column: 31
        },
        end: {
          line: 448,
          column: 18
        }
      },
      "142": {
        start: {
          line: 446,
          column: 24
        },
        end: {
          line: 446,
          column: 62
        }
      },
      "143": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 457,
          column: 18
        }
      },
      "144": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 462,
          column: 17
        }
      },
      "145": {
        start: {
          line: 461,
          column: 20
        },
        end: {
          line: 461,
          column: 32
        }
      },
      "146": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 463,
          column: 128
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 71,
            column: 29
          }
        },
        loc: {
          start: {
            line: 71,
            column: 43
          },
          end: {
            line: 83,
            column: 1
          }
        },
        line: 71
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 85,
            column: 23
          },
          end: {
            line: 85,
            column: 24
          }
        },
        loc: {
          start: {
            line: 85,
            column: 29
          },
          end: {
            line: 106,
            column: 1
          }
        },
        line: 85
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 108,
            column: 33
          },
          end: {
            line: 108,
            column: 34
          }
        },
        loc: {
          start: {
            line: 108,
            column: 47
          },
          end: {
            line: 127,
            column: 1
          }
        },
        line: 108
      },
      "3": {
        name: "createBinaryDataTools",
        decl: {
          start: {
            line: 129,
            column: 16
          },
          end: {
            line: 129,
            column: 37
          }
        },
        loc: {
          start: {
            line: 129,
            column: 57
          },
          end: {
            line: 467,
            column: 1
          }
        },
        line: 129
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 135,
            column: 18
          }
        },
        loc: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 135
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 184,
            column: 17
          },
          end: {
            line: 184,
            column: 18
          }
        },
        loc: {
          start: {
            line: 184,
            column: 33
          },
          end: {
            line: 216,
            column: 9
          }
        },
        line: 184
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 223,
            column: 17
          },
          end: {
            line: 223,
            column: 18
          }
        },
        loc: {
          start: {
            line: 223,
            column: 33
          },
          end: {
            line: 254,
            column: 9
          }
        },
        line: 223
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 261,
            column: 18
          }
        },
        loc: {
          start: {
            line: 261,
            column: 33
          },
          end: {
            line: 285,
            column: 9
          }
        },
        line: 261
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 292,
            column: 17
          },
          end: {
            line: 292,
            column: 18
          }
        },
        loc: {
          start: {
            line: 292,
            column: 33
          },
          end: {
            line: 328,
            column: 9
          }
        },
        line: 292
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 335,
            column: 17
          },
          end: {
            line: 335,
            column: 18
          }
        },
        loc: {
          start: {
            line: 335,
            column: 33
          },
          end: {
            line: 366,
            column: 9
          }
        },
        line: 335
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 373,
            column: 17
          },
          end: {
            line: 373,
            column: 18
          }
        },
        loc: {
          start: {
            line: 373,
            column: 33
          },
          end: {
            line: 389,
            column: 9
          }
        },
        line: 373
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 396,
            column: 17
          },
          end: {
            line: 396,
            column: 18
          }
        },
        loc: {
          start: {
            line: 396,
            column: 33
          },
          end: {
            line: 411,
            column: 9
          }
        },
        line: 396
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 418,
            column: 17
          },
          end: {
            line: 418,
            column: 18
          }
        },
        loc: {
          start: {
            line: 418,
            column: 33
          },
          end: {
            line: 465,
            column: 9
          }
        },
        line: 418
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 445,
            column: 52
          },
          end: {
            line: 445,
            column: 53
          }
        },
        loc: {
          start: {
            line: 445,
            column: 66
          },
          end: {
            line: 447,
            column: 21
          }
        },
        line: 445
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 8
          },
          end: {
            line: 76,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 38
          }
        }, {
          start: {
            line: 78,
            column: 42
          },
          end: {
            line: 78,
            column: 66
          }
        }, {
          start: {
            line: 78,
            column: 70
          },
          end: {
            line: 78,
            column: 93
          }
        }],
        line: 78
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 79,
            column: 23
          },
          end: {
            line: 79,
            column: 36
          }
        }, {
          start: {
            line: 79,
            column: 40
          },
          end: {
            line: 79,
            column: 63
          }
        }, {
          start: {
            line: 79,
            column: 67
          },
          end: {
            line: 79,
            column: 69
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 52
          }
        }, {
          start: {
            line: 88,
            column: 56
          },
          end: {
            line: 88,
            column: 70
          }
        }],
        line: 88
      },
      "6": {
        loc: {
          start: {
            line: 89,
            column: 34
          },
          end: {
            line: 89,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 34
          },
          end: {
            line: 89,
            column: 59
          }
        }, {
          start: {
            line: 89,
            column: 63
          },
          end: {
            line: 89,
            column: 74
          }
        }],
        line: 89
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 30
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 90,
            column: 30
          },
          end: {
            line: 90,
            column: 72
          }
        }, {
          start: {
            line: 90,
            column: 76
          },
          end: {
            line: 102,
            column: 13
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 126,
            column: 11
          },
          end: {
            line: 126,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 11
          },
          end: {
            line: 126,
            column: 25
          }
        }, {
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 126,
            column: 55
          }
        }],
        line: 126
      },
      "9": {
        loc: {
          start: {
            line: 149,
            column: 33
          },
          end: {
            line: 149,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 33
          },
          end: {
            line: 149,
            column: 54
          }
        }, {
          start: {
            line: 149,
            column: 58
          },
          end: {
            line: 149,
            column: 92
          }
        }],
        line: 149
      },
      "10": {
        loc: {
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 154,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 16
          },
          end: {
            line: 154,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "11": {
        loc: {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 174,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "12": {
        loc: {
          start: {
            line: 175,
            column: 69
          },
          end: {
            line: 175,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 175,
            column: 94
          },
          end: {
            line: 175,
            column: 107
          }
        }, {
          start: {
            line: 175,
            column: 110
          },
          end: {
            line: 175,
            column: 125
          }
        }],
        line: 175
      },
      "13": {
        loc: {
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "14": {
        loc: {
          start: {
            line: 214,
            column: 71
          },
          end: {
            line: 214,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 96
          },
          end: {
            line: 214,
            column: 109
          }
        }, {
          start: {
            line: 214,
            column: 112
          },
          end: {
            line: 214,
            column: 127
          }
        }],
        line: 214
      },
      "15": {
        loc: {
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 232,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "16": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "17": {
        loc: {
          start: {
            line: 252,
            column: 69
          },
          end: {
            line: 252,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 94
          },
          end: {
            line: 252,
            column: 107
          }
        }, {
          start: {
            line: 252,
            column: 110
          },
          end: {
            line: 252,
            column: 125
          }
        }],
        line: 252
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 282,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 16
          },
          end: {
            line: 282,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      },
      "19": {
        loc: {
          start: {
            line: 283,
            column: 81
          },
          end: {
            line: 283,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 106
          },
          end: {
            line: 283,
            column: 119
          }
        }, {
          start: {
            line: 283,
            column: 122
          },
          end: {
            line: 283,
            column: 137
          }
        }],
        line: 283
      },
      "20": {
        loc: {
          start: {
            line: 306,
            column: 33
          },
          end: {
            line: 306,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 33
          },
          end: {
            line: 306,
            column: 54
          }
        }, {
          start: {
            line: 306,
            column: 58
          },
          end: {
            line: 306,
            column: 92
          }
        }],
        line: 306
      },
      "21": {
        loc: {
          start: {
            line: 309,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 309,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 309
      },
      "22": {
        loc: {
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 325,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 325,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "23": {
        loc: {
          start: {
            line: 326,
            column: 78
          },
          end: {
            line: 326,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 326,
            column: 103
          },
          end: {
            line: 326,
            column: 116
          }
        }, {
          start: {
            line: 326,
            column: 119
          },
          end: {
            line: 326,
            column: 134
          }
        }],
        line: 326
      },
      "24": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 363,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "25": {
        loc: {
          start: {
            line: 364,
            column: 67
          },
          end: {
            line: 364,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 364,
            column: 92
          },
          end: {
            line: 364,
            column: 105
          }
        }, {
          start: {
            line: 364,
            column: 108
          },
          end: {
            line: 364,
            column: 123
          }
        }],
        line: 364
      },
      "26": {
        loc: {
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 386,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 16
          },
          end: {
            line: 386,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "27": {
        loc: {
          start: {
            line: 387,
            column: 69
          },
          end: {
            line: 387,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 387,
            column: 94
          },
          end: {
            line: 387,
            column: 107
          }
        }, {
          start: {
            line: 387,
            column: 110
          },
          end: {
            line: 387,
            column: 125
          }
        }],
        line: 387
      },
      "28": {
        loc: {
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 16
          },
          end: {
            line: 408,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "29": {
        loc: {
          start: {
            line: 409,
            column: 70
          },
          end: {
            line: 409,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 409,
            column: 95
          },
          end: {
            line: 409,
            column: 108
          }
        }, {
          start: {
            line: 409,
            column: 111
          },
          end: {
            line: 409,
            column: 126
          }
        }],
        line: 409
      },
      "30": {
        loc: {
          start: {
            line: 435,
            column: 16
          },
          end: {
            line: 437,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 435,
            column: 16
          },
          end: {
            line: 437,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 435
      },
      "31": {
        loc: {
          start: {
            line: 445,
            column: 32
          },
          end: {
            line: 447,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 445,
            column: 52
          },
          end: {
            line: 447,
            column: 21
          }
        }, {
          start: {
            line: 447,
            column: 24
          },
          end: {
            line: 447,
            column: 33
          }
        }],
        line: 445
      },
      "32": {
        loc: {
          start: {
            line: 455,
            column: 37
          },
          end: {
            line: 455,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 57
          },
          end: {
            line: 455,
            column: 72
          }
        }, {
          start: {
            line: 455,
            column: 75
          },
          end: {
            line: 455,
            column: 84
          }
        }],
        line: 455
      },
      "33": {
        loc: {
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 462,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 460,
            column: 16
          },
          end: {
            line: 462,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 460
      },
      "34": {
        loc: {
          start: {
            line: 463,
            column: 68
          },
          end: {
            line: 463,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 463,
            column: 93
          },
          end: {
            line: 463,
            column: 106
          }
        }, {
          start: {
            line: 463,
            column: 109
          },
          end: {
            line: 463,
            column: 124
          }
        }],
        line: 463
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { BinaryDataClient } from '../client/binaryDataClient.js';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\nimport {\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n  N8nBinaryDataResponse,\n} from '../types/fileTypes.js';\n\n// Zod schemas for validation\nconst UploadBinaryDataSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst DownloadBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst UploadFromBase64Schema = z.object({\n  data: z.string().min(1, 'Base64 data is required'),\n  fileName: z.string().min(1, 'File name is required'),\n  mimeType: z.string().min(1, 'MIME type is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst DownloadExecutionBinarySchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  outputIndex: z.number().min(0).default(0),\n  itemIndex: z.number().min(0).default(0),\n  propertyName: z.string().default('data'),\n});\n\nconst UploadWorkflowBinarySchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  filePath: z.string().min(1, 'File path is required'),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst ListBinaryDataSchema = z.object({\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  limit: z.number().min(1).max(100).default(20),\n  offset: z.number().min(0).default(0),\n});\n\nconst DeleteBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst GetBinaryMetadataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst UploadLargeFileSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  chunkSize: z.number().min(1024).max(10 * 1024 * 1024).default(1024 * 1024), // 1MB default, max 10MB\n  showProgress: z.boolean().default(true),\n});\n\n// Global instances\nlet binaryDataClient: BinaryDataClient | null = null;\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Initialize binary data client\nconst getBinaryDataClient = (getClient: () => N8nClient | null): BinaryDataClient => {\n  if (!binaryDataClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n    // Extract baseUrl and apiKey from client (assuming they're accessible)\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n    \n    binaryDataClient = new BinaryDataClient(client, baseUrl, apiKey);\n  }\n  return binaryDataClient;\n};\n\n// Initialize file handler\nconst getFileHandler = () => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Helper function to detect MIME type from file extension\nconst getMimeTypeFromExtension = (fileName: string): string => {\n  const ext = path.extname(fileName).toLowerCase();\n  const mimeTypes: Record<string, string> = {\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.png': 'image/png',\n    '.gif': 'image/gif',\n    '.pdf': 'application/pdf',\n    '.txt': 'text/plain',\n    '.json': 'application/json',\n    '.zip': 'application/zip',\n    '.csv': 'text/csv',\n    '.xml': 'application/xml',\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    '.xls': 'application/vnd.ms-excel',\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    '.doc': 'application/msword',\n  };\n  return mimeTypes[ext] || 'application/octet-stream';\n};\n\n// Tool registration function\nexport function createBinaryDataTools(getClient: () => N8nClient | null, server: any) {\n  // Upload binary data from file system\n  server.addTool({\n    name: 'upload-binary-data',\n    description: 'Upload a file from the local file system to n8n as binary data',\n    parameters: UploadBinaryDataSchema,\n    handler: async (args: z.infer<typeof UploadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload file\n        const uploadRequest: FileUploadRequest = {\n          fileName,\n          mimeType,\n          data: fileData.toString('base64'),\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download binary data to file system\n  server.addTool({\n    name: 'download-binary-data',\n    description: 'Download binary data from n8n to the local file system',\n    parameters: DownloadBinaryDataSchema,\n    handler: async (args: z.infer<typeof DownloadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download file\n        const downloadRequest: FileDownloadRequest = {\n          fileId: args.fileId,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.downloadBinaryData(downloadRequest);\n        \n        // Convert base64 to buffer and save\n        const fileData = Buffer.from(result.data, 'base64');\n        \n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileName: result.fileName,\n          mimeType: result.mimeType,\n          fileSize: result.fileSize,\n          message: `Successfully downloaded ${result.fileName} to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload binary data from base64 string\n  server.addTool({\n    name: 'upload-from-base64',\n    description: 'Upload binary data from a base64 encoded string',\n    parameters: UploadFromBase64Schema,\n    handler: async (args: z.infer<typeof UploadFromBase64Schema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Validate base64 data size\n        const dataSize = (args.data.length * 3) / 4; // Approximate decoded size\n        const validation = await fileHandler.validateFile(args.fileName, args.mimeType, dataSize);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        const uploadRequest: FileUploadRequest = {\n          fileName: args.fileName,\n          mimeType: args.mimeType,\n          data: args.data,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${args.fileName} from base64 data`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload from base64: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download execution binary data\n  server.addTool({\n    name: 'download-execution-binary',\n    description: 'Download binary data from a specific workflow execution output',\n    parameters: DownloadExecutionBinarySchema,\n    handler: async (args: z.infer<typeof DownloadExecutionBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download binary data from execution\n        const fileData = await binaryClient.getExecutionBinaryData(\n          args.executionId,\n          args.nodeId,\n          args.outputIndex,\n          args.itemIndex,\n          args.propertyName\n        );\n\n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileSize: fileData.length,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          message: `Successfully downloaded execution binary data to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download execution binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload workflow binary data\n  server.addTool({\n    name: 'upload-workflow-binary',\n    description: 'Upload binary data for use in a specific workflow',\n    parameters: UploadWorkflowBinarySchema,\n    handler: async (args: z.infer<typeof UploadWorkflowBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload workflow binary data\n        const result = await binaryClient.uploadWorkflowBinaryData(\n          args.workflowId,\n          args.nodeId,\n          fileData,\n          fileName,\n          mimeType,\n          args.propertyName\n        );\n\n        return {\n          success: true,\n          fileInfo: result,\n          workflowId: args.workflowId,\n          nodeId: args.nodeId,\n          message: `Successfully uploaded ${fileName} for workflow ${args.workflowId}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload workflow binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // List binary data\n  server.addTool({\n    name: 'list-binary-data',\n    description: 'List binary data files stored in n8n',\n    parameters: ListBinaryDataSchema,\n    handler: async (args: z.infer<typeof ListBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const files = await binaryClient.listBinaryData({\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          limit: args.limit,\n          offset: args.offset,\n        });\n\n        return {\n          success: true,\n          files,\n          count: files.length,\n          filters: {\n            workflowId: args.workflowId,\n            executionId: args.executionId,\n            nodeId: args.nodeId,\n          },\n          pagination: {\n            limit: args.limit,\n            offset: args.offset,\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to list binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Delete binary data\n  server.addTool({\n    name: 'delete-binary-data',\n    description: 'Delete binary data from n8n storage',\n    parameters: DeleteBinaryDataSchema,\n    handler: async (args: z.infer<typeof DeleteBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const result = await binaryClient.deleteBinaryData(args.fileId);\n\n        return {\n          success: result.success,\n          fileId: args.fileId,\n          message: result.message,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to delete binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get binary data metadata\n  server.addTool({\n    name: 'get-binary-metadata',\n    description: 'Get metadata for binary data stored in n8n',\n    parameters: GetBinaryMetadataSchema,\n    handler: async (args: z.infer<typeof GetBinaryMetadataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const metadata = await binaryClient.getBinaryDataMetadata(args.fileId);\n\n        return {\n          success: true,\n          metadata,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get binary metadata: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload large file with progress tracking\n  server.addTool({\n    name: 'upload-large-file',\n    description: 'Upload a large file with progress tracking and chunked transfer',\n    parameters: UploadLargeFileSchema,\n    handler: async (args: z.infer<typeof UploadLargeFileSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        let progressUpdates: FileTransferProgress[] = [];\n\n        // Upload with progress tracking\n        const result = await binaryClient.uploadLargeFile(fileData, fileName, mimeType, {\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          chunkSize: args.chunkSize,\n          onProgress: args.showProgress ? (progress) => {\n            progressUpdates.push({ ...progress });\n          } : undefined,\n        });\n\n        return {\n          success: true,\n          fileInfo: result,\n          fileName,\n          fileSize: fileData.length,\n          chunkSize: args.chunkSize,\n          progressUpdates: args.showProgress ? progressUpdates : undefined,\n          message: `Successfully uploaded large file ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload large file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1fdee381b1ba541f60b688a5e19899c53091b499"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kbgesm3jb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kbgesm3jb();
import { z } from 'zod';
import { UserError } from 'fastmcp';
import * as fs from 'fs/promises';
import * as path from 'path';
import { BinaryDataClient } from '../client/binaryDataClient.js';
import { FileHandlingUtils } from '../utils/fileHandling.js';
// Zod schemas for validation
const UploadBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[0]++, z.object({
  filePath: z.string().min(1, 'File path is required'),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional(),
  propertyName: z.string().default('data'),
  overrideMimeType: z.string().optional()
}));
const DownloadBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[1]++, z.object({
  fileId: z.string().min(1, 'File ID is required'),
  outputPath: z.string().min(1, 'Output path is required'),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional()
}));
const UploadFromBase64Schema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[2]++, z.object({
  data: z.string().min(1, 'Base64 data is required'),
  fileName: z.string().min(1, 'File name is required'),
  mimeType: z.string().min(1, 'MIME type is required'),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional()
}));
const DownloadExecutionBinarySchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[3]++, z.object({
  executionId: z.string().min(1, 'Execution ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  outputPath: z.string().min(1, 'Output path is required'),
  outputIndex: z.number().min(0).default(0),
  itemIndex: z.number().min(0).default(0),
  propertyName: z.string().default('data')
}));
const UploadWorkflowBinarySchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[4]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  filePath: z.string().min(1, 'File path is required'),
  propertyName: z.string().default('data'),
  overrideMimeType: z.string().optional()
}));
const ListBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[5]++, z.object({
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional(),
  limit: z.number().min(1).max(100).default(20),
  offset: z.number().min(0).default(0)
}));
const DeleteBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[6]++, z.object({
  fileId: z.string().min(1, 'File ID is required')
}));
const GetBinaryMetadataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[7]++, z.object({
  fileId: z.string().min(1, 'File ID is required')
}));
const UploadLargeFileSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[8]++, z.object({
  filePath: z.string().min(1, 'File path is required'),
  workflowId: z.string().optional(),
  executionId: z.string().optional(),
  nodeId: z.string().optional(),
  chunkSize: z.number().min(1024).max(10 * 1024 * 1024).default(1024 * 1024),
  // 1MB default, max 10MB
  showProgress: z.boolean().default(true)
}));
// Global instances
let binaryDataClient =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[9]++, null);
let fileHandler =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[10]++, null);
// Initialize binary data client
/* istanbul ignore next */
cov_1kbgesm3jb().s[11]++;
const getBinaryDataClient = getClient => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[0]++;
  cov_1kbgesm3jb().s[12]++;
  if (!binaryDataClient) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[0][0]++;
    const client =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[13]++, getClient());
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[14]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1kbgesm3jb().b[1][0]++;
      cov_1kbgesm3jb().s[15]++;
      throw new UserError('N8n client not available');
    } else
    /* istanbul ignore next */
    {
      cov_1kbgesm3jb().b[1][1]++;
    }
    // Extract baseUrl and apiKey from client (assuming they're accessible)
    const baseUrl =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[16]++,
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[2][0]++, client.baseUrl) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[2][1]++, process.env.N8N_BASE_URL) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[2][2]++, 'http://localhost:5678'));
    const apiKey =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[17]++,
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[3][0]++, client.apiKey) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[3][1]++, process.env.N8N_API_KEY) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[3][2]++, ''));
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[18]++;
    binaryDataClient = new BinaryDataClient(client, baseUrl, apiKey);
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[0][1]++;
  }
  cov_1kbgesm3jb().s[19]++;
  return binaryDataClient;
};
// Initialize file handler
/* istanbul ignore next */
cov_1kbgesm3jb().s[20]++;
const getFileHandler = () => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[1]++;
  cov_1kbgesm3jb().s[21]++;
  if (!fileHandler) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[4][0]++;
    cov_1kbgesm3jb().s[22]++;
    fileHandler = new FileHandlingUtils({
      baseDirectory:
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[5][0]++, process.env.N8N_FILES_DIR) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[5][1]++, './data/files'),
      maxFileSize: parseInt(
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[6][0]++, process.env.MAX_FILE_SIZE) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[6][1]++, '104857600')),
      // 100MB
      allowedMimeTypes:
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[7][0]++, process.env.ALLOWED_MIME_TYPES?.split(',')) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[7][1]++, ['image/*', 'text/*', 'application/json', 'application/pdf', 'application/zip', 'application/x-zip-compressed', 'application/octet-stream', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
    });
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[4][1]++;
  }
  cov_1kbgesm3jb().s[23]++;
  return fileHandler;
};
// Helper function to detect MIME type from file extension
/* istanbul ignore next */
cov_1kbgesm3jb().s[24]++;
const getMimeTypeFromExtension = fileName => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[2]++;
  const ext =
  /* istanbul ignore next */
  (cov_1kbgesm3jb().s[25]++, path.extname(fileName).toLowerCase());
  const mimeTypes =
  /* istanbul ignore next */
  (cov_1kbgesm3jb().s[26]++, {
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.gif': 'image/gif',
    '.pdf': 'application/pdf',
    '.txt': 'text/plain',
    '.json': 'application/json',
    '.zip': 'application/zip',
    '.csv': 'text/csv',
    '.xml': 'application/xml',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    '.doc': 'application/msword'
  });
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[27]++;
  return /* istanbul ignore next */(cov_1kbgesm3jb().b[8][0]++, mimeTypes[ext]) ||
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[8][1]++, 'application/octet-stream');
};
// Tool registration function
export function createBinaryDataTools(getClient, server) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[3]++;
  cov_1kbgesm3jb().s[28]++;
  // Upload binary data from file system
  server.addTool({
    name: 'upload-binary-data',
    description: 'Upload a file from the local file system to n8n as binary data',
    parameters: UploadBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[4]++;
      cov_1kbgesm3jb().s[29]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[30]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[31]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[32]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[33]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[34]++;
          throw new UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[35]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[36]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[37]++,
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[9][0]++, args.overrideMimeType) ||
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[9][1]++, getMimeTypeFromExtension(fileName)));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[38]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[39]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[10][0]++;
          cov_1kbgesm3jb().s[40]++;
          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[10][1]++;
        }
        // Upload file
        const uploadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[41]++, {
          fileName,
          mimeType,
          data: fileData.toString('base64'),
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[42]++, await binaryClient.uploadBinaryData(uploadRequest));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[43]++;
        return {
          success: true,
          fileInfo: result,
          message: `Successfully uploaded ${fileName} (${fileData.length} bytes)`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[44]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[11][0]++;
          cov_1kbgesm3jb().s[45]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[11][1]++;
        }
        cov_1kbgesm3jb().s[46]++;
        throw new UserError(`Failed to upload binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[12][1]++, 'Unknown error')}`);
      }
    }
  });
  // Download binary data to file system
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[47]++;
  server.addTool({
    name: 'download-binary-data',
    description: 'Download binary data from n8n to the local file system',
    parameters: DownloadBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[5]++;
      cov_1kbgesm3jb().s[48]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[49]++, getBinaryDataClient(getClient));
        // Download file
        const downloadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[50]++, {
          fileId: args.fileId,
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[51]++, await binaryClient.downloadBinaryData(downloadRequest));
        // Convert base64 to buffer and save
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[52]++, Buffer.from(result.data, 'base64'));
        // Ensure output directory exists
        const outputDir =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[53]++, path.dirname(args.outputPath));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[54]++;
        await fs.mkdir(outputDir, {
          recursive: true
        });
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[55]++;
        await fs.writeFile(args.outputPath, fileData);
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[56]++;
        return {
          success: true,
          outputPath: args.outputPath,
          fileName: result.fileName,
          mimeType: result.mimeType,
          fileSize: result.fileSize,
          message: `Successfully downloaded ${result.fileName} to ${args.outputPath}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[57]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[13][0]++;
          cov_1kbgesm3jb().s[58]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[13][1]++;
        }
        cov_1kbgesm3jb().s[59]++;
        throw new UserError(`Failed to download binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[14][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload binary data from base64 string
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[60]++;
  server.addTool({
    name: 'upload-from-base64',
    description: 'Upload binary data from a base64 encoded string',
    parameters: UploadFromBase64Schema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[6]++;
      cov_1kbgesm3jb().s[61]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[62]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[63]++, getFileHandler());
        // Validate base64 data size
        const dataSize =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[64]++, args.data.length * 3 / 4); // Approximate decoded size
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[65]++, await fileHandler.validateFile(args.fileName, args.mimeType, dataSize));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[66]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[15][0]++;
          cov_1kbgesm3jb().s[67]++;
          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[15][1]++;
        }
        const uploadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[68]++, {
          fileName: args.fileName,
          mimeType: args.mimeType,
          data: args.data,
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[69]++, await binaryClient.uploadBinaryData(uploadRequest));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[70]++;
        return {
          success: true,
          fileInfo: result,
          message: `Successfully uploaded ${args.fileName} from base64 data`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[71]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[16][0]++;
          cov_1kbgesm3jb().s[72]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[16][1]++;
        }
        cov_1kbgesm3jb().s[73]++;
        throw new UserError(`Failed to upload from base64: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[17][1]++, 'Unknown error')}`);
      }
    }
  });
  // Download execution binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[74]++;
  server.addTool({
    name: 'download-execution-binary',
    description: 'Download binary data from a specific workflow execution output',
    parameters: DownloadExecutionBinarySchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[7]++;
      cov_1kbgesm3jb().s[75]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[76]++, getBinaryDataClient(getClient));
        // Download binary data from execution
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[77]++, await binaryClient.getExecutionBinaryData(args.executionId, args.nodeId, args.outputIndex, args.itemIndex, args.propertyName));
        // Ensure output directory exists
        const outputDir =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[78]++, path.dirname(args.outputPath));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[79]++;
        await fs.mkdir(outputDir, {
          recursive: true
        });
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[80]++;
        await fs.writeFile(args.outputPath, fileData);
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[81]++;
        return {
          success: true,
          outputPath: args.outputPath,
          fileSize: fileData.length,
          executionId: args.executionId,
          nodeId: args.nodeId,
          message: `Successfully downloaded execution binary data to ${args.outputPath}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[82]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[18][0]++;
          cov_1kbgesm3jb().s[83]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[18][1]++;
        }
        cov_1kbgesm3jb().s[84]++;
        throw new UserError(`Failed to download execution binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[19][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload workflow binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[85]++;
  server.addTool({
    name: 'upload-workflow-binary',
    description: 'Upload binary data for use in a specific workflow',
    parameters: UploadWorkflowBinarySchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[8]++;
      cov_1kbgesm3jb().s[86]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[87]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[88]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[89]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[90]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[91]++;
          throw new UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[92]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[93]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[94]++,
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[20][0]++, args.overrideMimeType) ||
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[20][1]++, getMimeTypeFromExtension(fileName)));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[95]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[96]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[21][0]++;
          cov_1kbgesm3jb().s[97]++;
          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[21][1]++;
        }
        // Upload workflow binary data
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[98]++, await binaryClient.uploadWorkflowBinaryData(args.workflowId, args.nodeId, fileData, fileName, mimeType, args.propertyName));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[99]++;
        return {
          success: true,
          fileInfo: result,
          workflowId: args.workflowId,
          nodeId: args.nodeId,
          message: `Successfully uploaded ${fileName} for workflow ${args.workflowId}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[100]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[22][0]++;
          cov_1kbgesm3jb().s[101]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[22][1]++;
        }
        cov_1kbgesm3jb().s[102]++;
        throw new UserError(`Failed to upload workflow binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[23][1]++, 'Unknown error')}`);
      }
    }
  });
  // List binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[103]++;
  server.addTool({
    name: 'list-binary-data',
    description: 'List binary data files stored in n8n',
    parameters: ListBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[9]++;
      cov_1kbgesm3jb().s[104]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[105]++, getBinaryDataClient(getClient));
        const files =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[106]++, await binaryClient.listBinaryData({
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId,
          limit: args.limit,
          offset: args.offset
        }));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[107]++;
        return {
          success: true,
          files,
          count: files.length,
          filters: {
            workflowId: args.workflowId,
            executionId: args.executionId,
            nodeId: args.nodeId
          },
          pagination: {
            limit: args.limit,
            offset: args.offset
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[108]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[24][0]++;
          cov_1kbgesm3jb().s[109]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[24][1]++;
        }
        cov_1kbgesm3jb().s[110]++;
        throw new UserError(`Failed to list binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[25][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[25][1]++, 'Unknown error')}`);
      }
    }
  });
  // Delete binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[111]++;
  server.addTool({
    name: 'delete-binary-data',
    description: 'Delete binary data from n8n storage',
    parameters: DeleteBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[10]++;
      cov_1kbgesm3jb().s[112]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[113]++, getBinaryDataClient(getClient));
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[114]++, await binaryClient.deleteBinaryData(args.fileId));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[115]++;
        return {
          success: result.success,
          fileId: args.fileId,
          message: result.message
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[116]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[26][0]++;
          cov_1kbgesm3jb().s[117]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[26][1]++;
        }
        cov_1kbgesm3jb().s[118]++;
        throw new UserError(`Failed to delete binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[27][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get binary data metadata
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[119]++;
  server.addTool({
    name: 'get-binary-metadata',
    description: 'Get metadata for binary data stored in n8n',
    parameters: GetBinaryMetadataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[11]++;
      cov_1kbgesm3jb().s[120]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[121]++, getBinaryDataClient(getClient));
        const metadata =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[122]++, await binaryClient.getBinaryDataMetadata(args.fileId));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[123]++;
        return {
          success: true,
          metadata
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[124]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[28][0]++;
          cov_1kbgesm3jb().s[125]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[28][1]++;
        }
        cov_1kbgesm3jb().s[126]++;
        throw new UserError(`Failed to get binary metadata: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[29][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload large file with progress tracking
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[127]++;
  server.addTool({
    name: 'upload-large-file',
    description: 'Upload a large file with progress tracking and chunked transfer',
    parameters: UploadLargeFileSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[12]++;
      cov_1kbgesm3jb().s[128]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[129]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[130]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[131]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[132]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[133]++;
          throw new UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[134]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[135]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[136]++, getMimeTypeFromExtension(fileName));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[137]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[138]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[30][0]++;
          cov_1kbgesm3jb().s[139]++;
          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[30][1]++;
        }
        let progressUpdates =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[140]++, []);
        // Upload with progress tracking
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[141]++, await binaryClient.uploadLargeFile(fileData, fileName, mimeType, {
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId,
          chunkSize: args.chunkSize,
          onProgress: args.showProgress ?
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[31][0]++, progress => {
            /* istanbul ignore next */
            cov_1kbgesm3jb().f[13]++;
            cov_1kbgesm3jb().s[142]++;
            progressUpdates.push({
              ...progress
            });
          }) :
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[31][1]++, undefined)
        }));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[143]++;
        return {
          success: true,
          fileInfo: result,
          fileName,
          fileSize: fileData.length,
          chunkSize: args.chunkSize,
          progressUpdates: args.showProgress ?
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[32][0]++, progressUpdates) :
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[32][1]++, undefined),
          message: `Successfully uploaded large file ${fileName} (${fileData.length} bytes)`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[144]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[33][0]++;
          cov_1kbgesm3jb().s[145]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[33][1]++;
        }
        cov_1kbgesm3jb().s[146]++;
        throw new UserError(`Failed to upload large file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[34][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[34][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,