{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/setup.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/setup.ts"],"sourcesContent":["// Test setup file - runs before all tests\nimport '@testing-library/jest-dom';\n\n// Mock console methods to reduce noise in tests\nconst originalError = console.error;\nconst originalWarn = console.warn;\n\nbeforeEach(() => {\n  // Reset console mocks before each test\n  jest.clearAllMocks();\n});\n\nafterEach(() => {\n  // Clean up any test artifacts\n  jest.clearAllTimers();\n});\n\n// Global test utilities\nglobal.testUtils = {\n  // Create a mock n8n client\n  createMockClient: () => ({\n    getWorkflows: jest.fn(),\n    getWorkflow: jest.fn(),\n    createWorkflow: jest.fn(),\n    updateWorkflow: jest.fn(),\n    deleteWorkflow: jest.fn(),\n    activateWorkflow: jest.fn(),\n    deactivateWorkflow: jest.fn(),\n    getUsers: jest.fn(),\n    getUser: jest.fn(),\n    createUser: jest.fn(),\n    updateUser: jest.fn(),\n    deleteUser: jest.fn(),\n    getProjects: jest.fn(),\n    createProject: jest.fn(),\n    updateProject: jest.fn(),\n    deleteProject: jest.fn(),\n    getVariables: jest.fn(),\n    createVariable: jest.fn(),\n    deleteVariable: jest.fn(),\n    getExecutions: jest.fn(),\n    getExecution: jest.fn(),\n    deleteExecution: jest.fn(),\n    getTags: jest.fn(),\n    getTag: jest.fn(),\n    createTag: jest.fn(),\n    updateTag: jest.fn(),\n    deleteTag: jest.fn(),\n    getWorkflowTags: jest.fn(),\n    updateWorkflowTags: jest.fn(),\n    getCredentials: jest.fn(),\n    getCredential: jest.fn(),\n    createCredential: jest.fn(),\n    deleteCredential: jest.fn(),\n    getCredentialSchema: jest.fn(),\n    generateAuditReport: jest.fn(),\n  }),\n\n  // Create mock n8n API responses\n  createMockApiResponse: <T>(data: T, nextCursor?: string) => ({\n    data,\n    nextCursor,\n  }),\n\n  // Create mock workflow data\n  createMockWorkflow: (overrides = {}) => ({\n    id: 'workflow-123',\n    name: 'Test Workflow',\n    active: false,\n    nodes: [\n      { name: 'Start', type: 'manual' },\n      { name: 'End', type: 'set' },\n    ],\n    connections: {},\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    tags: [],\n    ...overrides,\n  }),\n\n  // Create mock user data\n  createMockUser: (overrides = {}) => ({\n    id: 'user-123',\n    email: 'test@example.com',\n    firstName: 'Test',\n    lastName: 'User',\n    role: 'member',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Create mock execution data\n  createMockExecution: (overrides = {}) => ({\n    id: 'execution-123',\n    finished: true,\n    mode: 'manual',\n    startedAt: '2024-01-01T00:00:00Z',\n    stoppedAt: '2024-01-01T00:01:00Z',\n    workflowId: 'workflow-123',\n    status: 'success' as const,\n    ...overrides,\n  }),\n\n  // Create mock credential data\n  createMockCredential: (overrides = {}) => ({\n    id: 'credential-123',\n    name: 'Test Credential',\n    type: 'httpBasicAuth',\n    data: { username: 'test', password: 'pass' },\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Create mock project data\n  createMockProject: (overrides = {}) => ({\n    id: 'project-123',\n    name: 'Test Project',\n    type: 'team',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Create mock variable data\n  createMockVariable: (overrides = {}) => ({\n    id: 'variable-123',\n    key: 'TEST_VAR',\n    value: 'test-value',\n    type: 'string',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Create mock tag data\n  createMockTag: (overrides = {}) => ({\n    id: 'tag-123',\n    name: 'Test Tag',\n    color: '#ff0000',\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Create mock audit report data\n  createMockAuditReport: (overrides = {}) => ({\n    riskLevel: 'medium',\n    categories: [\n      {\n        name: 'security',\n        score: 75,\n        issues: [\n          {\n            level: 'warning',\n            message: 'Some credentials are not encrypted',\n            location: 'credentials',\n          },\n        ],\n      },\n    ],\n    generatedAt: '2024-01-01T00:00:00Z',\n    ...overrides,\n  }),\n\n  // Suppress console output in tests\n  suppressConsole: () => {\n    console.error = jest.fn();\n    console.warn = jest.fn();\n    console.log = jest.fn();\n  },\n\n  // Restore console output\n  restoreConsole: () => {\n    console.error = originalError;\n    console.warn = originalWarn;\n  },\n};\n\n// Type definitions for test utilities\ninterface TestUtils {\n  createMockClient: () => any;\n  createMockApiResponse: <T>(data: T, nextCursor?: string) => { data: T; nextCursor?: string };\n  createMockWorkflow: (overrides?: any) => any;\n  createMockUser: (overrides?: any) => any;\n  createMockExecution: (overrides?: any) => any;\n  createMockCredential: (overrides?: any) => any;\n  createMockProject: (overrides?: any) => any;\n  createMockVariable: (overrides?: any) => any;\n  createMockTag: (overrides?: any) => any;\n  createMockAuditReport: (overrides?: any) => any;\n  suppressConsole: () => void;\n  restoreConsole: () => void;\n}\n\n// Extend Jest matchers and global types\ndeclare global {\n  namespace jest {\n    interface Matchers<R> {\n      toBeValidWorkflow(): R;\n      toBeValidUser(): R;\n      toBeValidExecution(): R;\n    }\n  }\n\n  namespace NodeJS {\n    interface Global {\n      testUtils: TestUtils;\n    }\n  }\n}\n\n// Type assertion for global object\ndeclare const global: typeof globalThis & {\n  testUtils: TestUtils;\n};\n\n// Custom Jest matchers\nexpect.extend({\n  toBeValidWorkflow(received) {\n    const pass =\n      received &&\n      typeof received.id === 'string' &&\n      typeof received.name === 'string' &&\n      typeof received.active === 'boolean' &&\n      Array.isArray(received.nodes);\n\n    return {\n      message: () => `expected ${received} to be a valid workflow object`,\n      pass,\n    };\n  },\n\n  toBeValidUser(received) {\n    const pass =\n      received &&\n      typeof received.id === 'string' &&\n      typeof received.email === 'string' &&\n      typeof received.firstName === 'string' &&\n      typeof received.lastName === 'string';\n\n    return {\n      message: () => `expected ${received} to be a valid user object`,\n      pass,\n    };\n  },\n\n  toBeValidExecution(received) {\n    const pass =\n      received &&\n      typeof received.id === 'string' &&\n      typeof received.workflowId === 'string' &&\n      typeof received.finished === 'boolean' &&\n      typeof received.startedAt === 'string';\n\n    return {\n      message: () => `expected ${received} to be a valid execution object`,\n      pass,\n    };\n  },\n});\n"],"version":3}