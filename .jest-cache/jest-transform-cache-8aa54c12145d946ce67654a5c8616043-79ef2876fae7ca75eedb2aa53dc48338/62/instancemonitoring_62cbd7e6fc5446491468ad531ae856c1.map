{"version":3,"names":["cov_y8xrsz6ie","actualCoverage","z","UserError","ResourceMonitor","MonitoringPeriodSchema","s","object","hours","number","min","max","optional","default","includeInactive","boolean","WorkflowMonitoringSchema","workflowId","string","includeNodeMetrics","timeRange","enum","AlertManagementSchema","severity","resolved","limit","HealthCheckSchema","includeRecommendations","includeAlerts","includeDependencies","ReportGenerationSchema","includeWorkflows","format","resourceMonitor","getResourceMonitor","f","b","startMonitoring","formatSystemUsage","usage","sections","push","Date","timestamp","toLocaleString","cpu","totalUsage","toFixed","processUsage","loadAverage","map","l","join","coreCount","formatBytes","memory","totalMemory","usedMemory","utilization","freeMemory","processMemory","heapUsed","heapTotal","rss","disk","totalSpace","usedSpace","freeSpace","network","bytesReceived","bytesSent","formatDuration","uptime","formatWorkflowUsage","length","forEach","workflow","index","status","isActive","successRate","executionStats","workflowName","executionCount","resourceMetrics","averageExecutionTime","memoryUsage","average","peak","cpuUsage","averageRunsPerHour","formatHealthMetrics","health","statusEmoji","healthy","warning","degraded","critical","overall","toUpperCase","score","issues","issue","i","recommendations","rec","performance","responseTime","throughput","errorRate","availabilityUptime","resources","memoryPressure","cpuThrottling","diskSpaceWarning","networkLatency","dependencies","dep","name","errorCount","alerts","slice","alert","severityEmoji","info","error","message","formatAlerts","low","medium","high","resolvedAt","title","type","description","triggeredAt","metadata","threshold","actualValue","bytes","k","sizes","Math","floor","log","parseFloat","pow","seconds","minutes","secs","createInstanceMonitoringTools","getClient","server","addTool","parameters","annotations","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","monitor","systemUsage","getSystemResourceUsage","Error","args","client","workflowUsages","getWorkflow","getWorkflowResourceUsage","id","active","workflowsResponse","getWorkflows","data","healthMetrics","getInstanceHealthMetrics","getAlerts","limitedAlerts","alertId","resolveAlert","action","intervalMs","stopMonitoring","updateConfig","monitoring","getConfig","config","enabled","retentionDays","getDataPoints","undefined","duration","success","recordWorkflowExecution"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/instance-monitoring.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { ResourceMonitor } from '../utils/resourceMonitor.js';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  MonitoringReport,\n  PerformanceAlert,\n} from '../types/monitoringTypes.js';\n\n// Validation Schemas\nconst MonitoringPeriodSchema = z.object({\n  hours: z.number().min(1).max(168).optional().default(24), // 1 hour to 1 week\n  includeInactive: z.boolean().optional().default(false),\n});\n\nconst WorkflowMonitoringSchema = z.object({\n  workflowId: z.string().optional(),\n  includeNodeMetrics: z.boolean().optional().default(true),\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).optional().default('24h'),\n});\n\nconst AlertManagementSchema = z.object({\n  severity: z.enum(['low', 'medium', 'high', 'critical']).optional(),\n  resolved: z.boolean().optional(),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst HealthCheckSchema = z.object({\n  includeRecommendations: z.boolean().optional().default(true),\n  includeAlerts: z.boolean().optional().default(true),\n  includeDependencies: z.boolean().optional().default(true),\n});\n\nconst ReportGenerationSchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).optional().default('24h'),\n  includeWorkflows: z.boolean().optional().default(true),\n  includeRecommendations: z.boolean().optional().default(true),\n  format: z.enum(['summary', 'detailed', 'dashboard']).optional().default('summary'),\n});\n\n// Global resource monitor instance\nlet resourceMonitor: ResourceMonitor | null = null;\n\nfunction getResourceMonitor(): ResourceMonitor {\n  if (!resourceMonitor) {\n    resourceMonitor = new ResourceMonitor();\n    resourceMonitor.startMonitoring();\n  }\n  return resourceMonitor;\n}\n\n// Helper Functions\nfunction formatSystemUsage(usage: SystemResourceUsage): string {\n  const sections = [];\n\n  sections.push(`🖥️ **System Resource Usage**\\n`);\n  sections.push(`**Timestamp:** ${new Date(usage.timestamp).toLocaleString()}\\n`);\n\n  sections.push(`**💻 CPU:**`);\n  sections.push(`• Total Usage: ${usage.cpu.totalUsage.toFixed(1)}%`);\n  sections.push(`• Process Usage: ${usage.cpu.processUsage.toFixed(1)}%`);\n  sections.push(`• Load Average: ${usage.cpu.loadAverage.map(l => l.toFixed(2)).join(', ')}`);\n  sections.push(`• Cores: ${usage.cpu.coreCount}`);\n  sections.push('');\n\n  sections.push(`**🧠 Memory:**`);\n  sections.push(`• Total: ${formatBytes(usage.memory.totalMemory)}`);\n  sections.push(`• Used: ${formatBytes(usage.memory.usedMemory)} (${usage.memory.utilization.toFixed(1)}%)`);\n  sections.push(`• Free: ${formatBytes(usage.memory.freeMemory)}`);\n  sections.push(`• Process Heap: ${formatBytes(usage.memory.processMemory.heapUsed)} / ${formatBytes(usage.memory.processMemory.heapTotal)}`);\n  sections.push(`• Process RSS: ${formatBytes(usage.memory.processMemory.rss)}`);\n  sections.push('');\n\n  sections.push(`**💾 Disk:**`);\n  sections.push(`• Total: ${formatBytes(usage.disk.totalSpace)}`);\n  sections.push(`• Used: ${formatBytes(usage.disk.usedSpace)} (${usage.disk.utilization.toFixed(1)}%)`);\n  sections.push(`• Free: ${formatBytes(usage.disk.freeSpace)}`);\n  sections.push('');\n\n  sections.push(`**🌐 Network:**`);\n  sections.push(`• Bytes Received: ${formatBytes(usage.network.bytesReceived)}`);\n  sections.push(`• Bytes Sent: ${formatBytes(usage.network.bytesSent)}`);\n  sections.push('');\n\n  sections.push(`**⏱️ Uptime:** ${formatDuration(usage.uptime)}`);\n\n  return sections.join('\\n');\n}\n\nfunction formatWorkflowUsage(usage: WorkflowResourceUsage[]): string {\n  if (usage.length === 0) {\n    return 'No workflow usage data available.';\n  }\n\n  const sections = [];\n  sections.push(`📊 **Workflow Resource Usage (${usage.length} workflows)**\\n`);\n\n  usage.forEach((workflow, index) => {\n    const status = workflow.isActive ? '✅ Active' : '⏸️ Inactive';\n    const successRate = workflow.executionStats.successRate.toFixed(1);\n    \n    sections.push(`**${index + 1}. ${workflow.workflowName}** ${status}`);\n    sections.push(`   ID: ${workflow.workflowId}`);\n    sections.push(`   Executions: ${workflow.executionCount} (${successRate}% success rate)`);\n    sections.push(`   Avg Execution Time: ${formatDuration(workflow.resourceMetrics.averageExecutionTime / 1000)}`);\n    sections.push(`   Memory Usage: Avg ${formatBytes(workflow.resourceMetrics.memoryUsage.average)}, Peak ${formatBytes(workflow.resourceMetrics.memoryUsage.peak)}`);\n    sections.push(`   CPU Usage: Avg ${workflow.resourceMetrics.cpuUsage.average}%, Peak ${workflow.resourceMetrics.cpuUsage.peak}%`);\n    sections.push(`   Runs/Hour: ${workflow.executionStats.averageRunsPerHour.toFixed(1)}`);\n    sections.push('');\n  });\n\n  return sections.join('\\n');\n}\n\nfunction formatHealthMetrics(health: InstanceHealthMetrics): string {\n  const sections = [];\n  const statusEmoji = {\n    healthy: '✅',\n    warning: '⚠️',\n    degraded: '🟡',\n    critical: '🚨'\n  };\n\n  sections.push(`🏥 **Instance Health Report**\\n`);\n  sections.push(`**Overall Status:** ${statusEmoji[health.overall.status]} ${health.overall.status.toUpperCase()}`);\n  sections.push(`**Health Score:** ${health.overall.score}/100\\n`);\n\n  if (health.overall.issues.length > 0) {\n    sections.push(`**🚨 Issues:**`);\n    health.overall.issues.forEach((issue, i) => {\n      sections.push(`${i + 1}. ${issue}`);\n    });\n    sections.push('');\n  }\n\n  if (health.overall.recommendations.length > 0) {\n    sections.push(`**💡 Recommendations:**`);\n    health.overall.recommendations.forEach((rec, i) => {\n      sections.push(`${i + 1}. ${rec}`);\n    });\n    sections.push('');\n  }\n\n  sections.push(`**📈 Performance Metrics:**`);\n  sections.push(`• API Response Time: ${health.performance.responseTime}ms`);\n  sections.push(`• Throughput: ${health.performance.throughput} executions/min`);\n  sections.push(`• Error Rate: ${health.performance.errorRate}%`);\n  sections.push(`• Uptime: ${health.performance.availabilityUptime}%`);\n  sections.push('');\n\n  sections.push(`**🔧 Resource Status:**`);\n  sections.push(`• Memory Pressure: ${health.resources.memoryPressure ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• CPU Throttling: ${health.resources.cpuThrottling ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• Disk Space Warning: ${health.resources.diskSpaceWarning ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• Network Latency: ${health.resources.networkLatency}ms`);\n  sections.push('');\n\n  if (health.dependencies.length > 0) {\n    sections.push(`**🔗 Dependencies:**`);\n    health.dependencies.forEach(dep => {\n      const statusEmoji = dep.status === 'online' ? '✅' : dep.status === 'degraded' ? '⚠️' : '❌';\n      sections.push(`• ${dep.name}: ${statusEmoji} ${dep.status} (${dep.responseTime}ms, ${dep.errorCount} errors)`);\n    });\n    sections.push('');\n  }\n\n  if (health.alerts.length > 0) {\n    sections.push(`**🚨 Active Alerts (${health.alerts.length}):**`);\n    health.alerts.slice(0, 5).forEach(alert => {\n      const severityEmoji: Record<string, string> = {\n        info: '💡',\n        warning: '⚠️',\n        error: '🚨',\n        critical: '🔴'\n      };\n      sections.push(`• ${severityEmoji[alert.severity] || '💡'} ${alert.message}`);\n    });\n    if (health.alerts.length > 5) {\n      sections.push(`  ... and ${health.alerts.length - 5} more alerts`);\n    }\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatAlerts(alerts: PerformanceAlert[]): string {\n  if (alerts.length === 0) {\n    return 'No alerts found.';\n  }\n\n  const sections = [];\n  sections.push(`🚨 **Performance Alerts (${alerts.length})**\\n`);\n\n  alerts.forEach((alert, index) => {\n    const severityEmoji = {\n      low: '💡',\n      medium: '⚠️',\n      high: '🚨',\n      critical: '🔴'\n    };\n    \n    const status = alert.resolvedAt ? '✅ Resolved' : '🔴 Active';\n    \n    sections.push(`**${index + 1}. ${alert.title}** ${status}`);\n    sections.push(`   Severity: ${severityEmoji[alert.severity]} ${alert.severity.toUpperCase()}`);\n    sections.push(`   Type: ${alert.type}`);\n    sections.push(`   Description: ${alert.description}`);\n    sections.push(`   Triggered: ${new Date(alert.triggeredAt).toLocaleString()}`);\n    \n    if (alert.resolvedAt) {\n      sections.push(`   Resolved: ${new Date(alert.resolvedAt).toLocaleString()}`);\n    }\n    \n    if (alert.metadata.workflowId) {\n      sections.push(`   Workflow: ${alert.metadata.workflowId}`);\n    }\n    \n    if (alert.metadata.threshold && alert.metadata.actualValue) {\n      sections.push(`   Threshold: ${alert.metadata.threshold}, Actual: ${alert.metadata.actualValue}`);\n    }\n    \n    sections.push('');\n  });\n\n  return sections.join('\\n');\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n  \n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n}\n\nexport function createInstanceMonitoringTools(getClient: () => N8nClient | null, server: any) {\n  // System Resource Monitoring\n  server.addTool({\n    name: 'get-system-resources',\n    description: 'Get real-time system resource usage including CPU, memory, disk, and network statistics',\n    parameters: z.object({}),\n    annotations: {\n      title: 'System Resource Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      try {\n        const monitor = getResourceMonitor();\n        const systemUsage = await monitor.getSystemResourceUsage();\n        return formatSystemUsage(systemUsage);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get system resources: ${error.message}`);\n        }\n        throw new UserError('Failed to get system resources with unknown error');\n      }\n    },\n  });\n\n  // Workflow Resource Usage\n  server.addTool({\n    name: 'get-workflow-resources',\n    description: 'Monitor per-workflow resource consumption including execution times and memory usage',\n    parameters: WorkflowMonitoringSchema,\n    annotations: {\n      title: 'Workflow Resource Monitoring',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof WorkflowMonitoringSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const monitor = getResourceMonitor();\n        const workflowUsages: WorkflowResourceUsage[] = [];\n\n        if (args.workflowId) {\n          // Get specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const usage = await monitor.getWorkflowResourceUsage(\n            workflow.id,\n            workflow.name,\n            workflow.active\n          );\n          workflowUsages.push(usage);\n        } else {\n          // Get all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: 50 });\n          \n          for (const workflow of workflowsResponse.data) {\n            const usage = await monitor.getWorkflowResourceUsage(\n              workflow.id,\n              workflow.name,\n              workflow.active\n            );\n            workflowUsages.push(usage);\n          }\n        }\n\n        return formatWorkflowUsage(workflowUsages);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow resources: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow resources with unknown error');\n      }\n    },\n  });\n\n  // Instance Health Check\n  server.addTool({\n    name: 'check-instance-health',\n    description: 'Comprehensive health check of the n8n instance including performance metrics and recommendations',\n    parameters: HealthCheckSchema,\n    annotations: {\n      title: 'Instance Health Check',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof HealthCheckSchema>) => {\n      try {\n        const monitor = getResourceMonitor();\n        const healthMetrics = await monitor.getInstanceHealthMetrics();\n        return formatHealthMetrics(healthMetrics);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to check instance health: ${error.message}`);\n        }\n        throw new UserError('Failed to check instance health with unknown error');\n      }\n    },\n  });\n\n  // Performance Alerts Management\n  server.addTool({\n    name: 'get-performance-alerts',\n    description: 'Retrieve and manage performance alerts with filtering options',\n    parameters: AlertManagementSchema,\n    annotations: {\n      title: 'Performance Alerts',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof AlertManagementSchema>) => {\n      try {\n        const monitor = getResourceMonitor();\n        const alerts = monitor.getAlerts(args.severity, args.resolved);\n        const limitedAlerts = alerts.slice(0, args.limit);\n        return formatAlerts(limitedAlerts);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get performance alerts: ${error.message}`);\n        }\n        throw new UserError('Failed to get performance alerts with unknown error');\n      }\n    },\n  });\n\n  // Resolve Alert\n  server.addTool({\n    name: 'resolve-performance-alert',\n    description: 'Mark a performance alert as resolved',\n    parameters: z.object({\n      alertId: z.string().min(1, 'Alert ID is required'),\n    }),\n    annotations: {\n      title: 'Resolve Performance Alert',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { alertId: string }) => {\n      try {\n        const monitor = getResourceMonitor();\n        const resolved = monitor.resolveAlert(args.alertId);\n        \n        if (resolved) {\n          return `✅ Alert ${args.alertId} has been marked as resolved.`;\n        } else {\n          return `❌ Alert ${args.alertId} not found or already resolved.`;\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to resolve alert: ${error.message}`);\n        }\n        throw new UserError('Failed to resolve alert with unknown error');\n      }\n    },\n  });\n\n  // Start/Stop Monitoring\n  server.addTool({\n    name: 'control-monitoring',\n    description: 'Start or stop resource monitoring and configure monitoring settings',\n    parameters: z.object({\n      action: z.enum(['start', 'stop', 'restart', 'status']),\n      intervalMs: z.number().min(5000).max(300000).optional(), // 5 seconds to 5 minutes\n    }),\n    annotations: {\n      title: 'Control Resource Monitoring',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: { action: string; intervalMs?: number }) => {\n      try {\n        const monitor = getResourceMonitor();\n        \n        switch (args.action) {\n          case 'start':\n            await monitor.startMonitoring();\n            return '✅ Resource monitoring started successfully.';\n            \n          case 'stop':\n            monitor.stopMonitoring();\n            return '⏹️ Resource monitoring stopped.';\n            \n          case 'restart':\n            monitor.stopMonitoring();\n            if (args.intervalMs) {\n              monitor.updateConfig({\n                monitoring: { ...monitor.getConfig().monitoring, intervalMs: args.intervalMs }\n              });\n            }\n            await monitor.startMonitoring();\n            return '🔄 Resource monitoring restarted successfully.';\n            \n          case 'status':\n            const config = monitor.getConfig();\n            return `📊 **Monitoring Status**\\n\\nEnabled: ${config.monitoring.enabled ? '✅ Yes' : '❌ No'}\\nInterval: ${config.monitoring.intervalMs}ms\\nRetention: ${config.monitoring.retentionDays} days\\nData Points: ${monitor.getDataPoints().length}\\nActive Alerts: ${monitor.getAlerts(undefined, false).length}`;\n            \n          default:\n            throw new UserError(`Unknown action: ${args.action}`);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to control monitoring: ${error.message}`);\n        }\n        throw new UserError('Failed to control monitoring with unknown error');\n      }\n    },\n  });\n\n  // Record Workflow Execution (for tracking)\n  server.addTool({\n    name: 'record-execution-metrics',\n    description: 'Record execution metrics for a workflow (used internally for tracking)',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      duration: z.number().min(0, 'Duration must be non-negative'),\n      success: z.boolean(),\n    }),\n    annotations: {\n      title: 'Record Execution Metrics',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: { workflowId: string; duration: number; success: boolean }) => {\n      try {\n        const monitor = getResourceMonitor();\n        monitor.recordWorkflowExecution(args.workflowId, args.duration, args.success);\n        \n        return `📊 Execution metrics recorded for workflow ${args.workflowId}: ${args.duration}ms (${args.success ? 'success' : 'failure'})`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to record execution metrics: ${error.message}`);\n        }\n        throw new UserError('Failed to record execution metrics with unknown error');\n      }\n    },\n  });\n}"],"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","ignoreList":[]}