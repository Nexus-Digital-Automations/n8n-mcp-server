170e6cc4e46ee91fe9d94817bc60eeda
/* istanbul ignore next */
function cov_1g9zbwmm0d() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts";
  var hash = "6078cc1ae9aa15d5c5a7f13b4993bbeef07823bc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 27
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "1": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "2": {
        start: {
          line: 21,
          column: 33
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "3": {
        start: {
          line: 25,
          column: 27
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "4": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 34,
          column: 2
        }
      },
      "5": {
        start: {
          line: 35,
          column: 33
        },
        end: {
          line: 44,
          column: 2
        }
      },
      "6": {
        start: {
          line: 45,
          column: 27
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "7": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "8": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "9": {
        start: {
          line: 64,
          column: 32
        },
        end: {
          line: 69,
          column: 2
        }
      },
      "10": {
        start: {
          line: 71,
          column: 18
        },
        end: {
          line: 71,
          column: 22
        }
      },
      "11": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 94,
          column: 1
        }
      },
      "12": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "13": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 91,
          column: 11
        }
      },
      "14": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "15": {
        start: {
          line: 96,
          column: 26
        },
        end: {
          line: 101,
          column: 1
        }
      },
      "16": {
        start: {
          line: 97,
          column: 23
        },
        end: {
          line: 97,
          column: 50
        }
      },
      "17": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "18": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 31
        }
      },
      "19": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 33
        }
      },
      "20": {
        start: {
          line: 102,
          column: 30
        },
        end: {
          line: 125,
          column: 1
        }
      },
      "21": {
        start: {
          line: 104,
          column: 23
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "22": {
        start: {
          line: 115,
          column: 19
        },
        end: {
          line: 115,
          column: 70
        }
      },
      "23": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "24": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "25": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 28
        }
      },
      "26": {
        start: {
          line: 122,
          column: 23
        },
        end: {
          line: 122,
          column: 46
        }
      },
      "27": {
        start: {
          line: 123,
          column: 19
        },
        end: {
          line: 123,
          column: 126
        }
      },
      "28": {
        start: {
          line: 123,
          column: 44
        },
        end: {
          line: 123,
          column: 125
        }
      },
      "29": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 124,
          column: 62
        }
      },
      "30": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 176,
          column: 7
        }
      },
      "31": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "32": {
        start: {
          line: 135,
          column: 36
        },
        end: {
          line: 135,
          column: 52
        }
      },
      "33": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 142,
          column: 17
        }
      },
      "34": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "35": {
        start: {
          line: 141,
          column: 20
        },
        end: {
          line: 141,
          column: 76
        }
      },
      "36": {
        start: {
          line: 144,
          column: 30
        },
        end: {
          line: 144,
          column: 58
        }
      },
      "37": {
        start: {
          line: 145,
          column: 33
        },
        end: {
          line: 145,
          column: 61
        }
      },
      "38": {
        start: {
          line: 147,
          column: 31
        },
        end: {
          line: 147,
          column: 63
        }
      },
      "39": {
        start: {
          line: 148,
          column: 41
        },
        end: {
          line: 148,
          column: 76
        }
      },
      "40": {
        start: {
          line: 150,
          column: 35
        },
        end: {
          line: 155,
          column: 18
        }
      },
      "41": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 167,
          column: 18
        }
      },
      "42": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "43": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 171,
          column: 32
        }
      },
      "44": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 124
        }
      },
      "45": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "46": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "47": {
        start: {
          line: 184,
          column: 36
        },
        end: {
          line: 184,
          column: 52
        }
      },
      "48": {
        start: {
          line: 186,
          column: 31
        },
        end: {
          line: 186,
          column: 84
        }
      },
      "49": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 194,
          column: 18
        }
      },
      "50": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "51": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 32
        }
      },
      "52": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 124
        }
      },
      "53": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 234,
          column: 7
        }
      },
      "54": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 232,
          column: 13
        }
      },
      "55": {
        start: {
          line: 211,
          column: 36
        },
        end: {
          line: 211,
          column: 52
        }
      },
      "56": {
        start: {
          line: 213,
          column: 33
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "57": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 225,
          column: 18
        }
      },
      "58": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "59": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 32
        }
      },
      "60": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 131
        }
      },
      "61": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 323,
          column: 7
        }
      },
      "62": {
        start: {
          line: 241,
          column: 12
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "63": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "64": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 52
        }
      },
      "65": {
        start: {
          line: 245,
          column: 20
        },
        end: {
          line: 245,
          column: 52
        }
      },
      "66": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 71
        }
      },
      "67": {
        start: {
          line: 251,
          column: 31
        },
        end: {
          line: 251,
          column: 60
        }
      },
      "68": {
        start: {
          line: 252,
          column: 31
        },
        end: {
          line: 252,
          column: 60
        }
      },
      "69": {
        start: {
          line: 253,
          column: 35
        },
        end: {
          line: 271,
          column: 17
        }
      },
      "70": {
        start: {
          line: 273,
          column: 39
        },
        end: {
          line: 276,
          column: 18
        }
      },
      "71": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 41
        }
      },
      "72": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 41
        }
      },
      "73": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 58
        }
      },
      "74": {
        start: {
          line: 281,
          column: 41
        },
        end: {
          line: 281,
          column: 45
        }
      },
      "75": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 306,
          column: 17
        }
      },
      "76": {
        start: {
          line: 283,
          column: 49
        },
        end: {
          line: 286,
          column: 22
        }
      },
      "77": {
        start: {
          line: 287,
          column: 35
        },
        end: {
          line: 287,
          column: 55
        }
      },
      "78": {
        start: {
          line: 288,
          column: 35
        },
        end: {
          line: 288,
          column: 55
        }
      },
      "79": {
        start: {
          line: 289,
          column: 37
        },
        end: {
          line: 289,
          column: 75
        }
      },
      "80": {
        start: {
          line: 290,
          column: 40
        },
        end: {
          line: 290,
          column: 42
        }
      },
      "81": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 301,
          column: 21
        }
      },
      "82": {
        start: {
          line: 291,
          column: 33
        },
        end: {
          line: 291,
          column: 34
        }
      },
      "83": {
        start: {
          line: 292,
          column: 38
        },
        end: {
          line: 292,
          column: 53
        }
      },
      "84": {
        start: {
          line: 293,
          column: 38
        },
        end: {
          line: 293,
          column: 53
        }
      },
      "85": {
        start: {
          line: 294,
          column: 24
        },
        end: {
          line: 300,
          column: 25
        }
      },
      "86": {
        start: {
          line: 295,
          column: 28
        },
        end: {
          line: 299,
          column: 31
        }
      },
      "87": {
        start: {
          line: 302,
          column: 20
        },
        end: {
          line: 305,
          column: 22
        }
      },
      "88": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 314,
          column: 18
        }
      },
      "89": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 319,
          column: 17
        }
      },
      "90": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 32
        }
      },
      "91": {
        start: {
          line: 320,
          column: 16
        },
        end: {
          line: 320,
          column: 124
        }
      },
      "92": {
        start: {
          line: 325,
          column: 4
        },
        end: {
          line: 379,
          column: 7
        }
      },
      "93": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 377,
          column: 13
        }
      },
      "94": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 337,
          column: 17
        }
      },
      "95": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 333,
          column: 51
        }
      },
      "96": {
        start: {
          line: 336,
          column: 20
        },
        end: {
          line: 336,
          column: 76
        }
      },
      "97": {
        start: {
          line: 339,
          column: 30
        },
        end: {
          line: 339,
          column: 58
        }
      },
      "98": {
        start: {
          line: 340,
          column: 33
        },
        end: {
          line: 340,
          column: 61
        }
      },
      "99": {
        start: {
          line: 341,
          column: 38
        },
        end: {
          line: 341,
          column: 65
        }
      },
      "100": {
        start: {
          line: 343,
          column: 31
        },
        end: {
          line: 343,
          column: 78
        }
      },
      "101": {
        start: {
          line: 344,
          column: 41
        },
        end: {
          line: 344,
          column: 76
        }
      },
      "102": {
        start: {
          line: 345,
          column: 33
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "103": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 366,
          column: 17
        }
      },
      "104": {
        start: {
          line: 361,
          column: 33
        },
        end: {
          line: 361,
          column: 91
        }
      },
      "105": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 365,
          column: 22
        }
      },
      "106": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 370,
          column: 18
        }
      },
      "107": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 375,
          column: 17
        }
      },
      "108": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 32
        }
      },
      "109": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 124
        }
      },
      "110": {
        start: {
          line: 381,
          column: 4
        },
        end: {
          line: 478,
          column: 7
        }
      },
      "111": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "112": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "113": {
        start: {
          line: 389,
          column: 34
        },
        end: {
          line: 389,
          column: 67
        }
      },
      "114": {
        start: {
          line: 390,
          column: 20
        },
        end: {
          line: 392,
          column: 21
        }
      },
      "115": {
        start: {
          line: 391,
          column: 24
        },
        end: {
          line: 391,
          column: 71
        }
      },
      "116": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 86
        }
      },
      "117": {
        start: {
          line: 397,
          column: 41
        },
        end: {
          line: 441,
          column: 17
        }
      },
      "118": {
        start: {
          line: 398,
          column: 36
        },
        end: {
          line: 398,
          column: 86
        }
      },
      "119": {
        start: {
          line: 399,
          column: 37
        },
        end: {
          line: 399,
          column: 38
        }
      },
      "120": {
        start: {
          line: 400,
          column: 43
        },
        end: {
          line: 400,
          column: 44
        }
      },
      "121": {
        start: {
          line: 401,
          column: 36
        },
        end: {
          line: 401,
          column: 37
        }
      },
      "122": {
        start: {
          line: 402,
          column: 39
        },
        end: {
          line: 402,
          column: 41
        }
      },
      "123": {
        start: {
          line: 403,
          column: 20
        },
        end: {
          line: 439,
          column: 21
        }
      },
      "124": {
        start: {
          line: 404,
          column: 41
        },
        end: {
          line: 404,
          column: 71
        }
      },
      "125": {
        start: {
          line: 406,
          column: 24
        },
        end: {
          line: 408,
          column: 25
        }
      },
      "126": {
        start: {
          line: 407,
          column: 28
        },
        end: {
          line: 407,
          column: 37
        }
      },
      "127": {
        start: {
          line: 409,
          column: 24
        },
        end: {
          line: 438,
          column: 25
        }
      },
      "128": {
        start: {
          line: 410,
          column: 28
        },
        end: {
          line: 410,
          column: 47
        }
      },
      "129": {
        start: {
          line: 411,
          column: 28
        },
        end: {
          line: 424,
          column: 29
        }
      },
      "130": {
        start: {
          line: 412,
          column: 49
        },
        end: {
          line: 412,
          column: 81
        }
      },
      "131": {
        start: {
          line: 413,
          column: 32
        },
        end: {
          line: 413,
          column: 66
        }
      },
      "132": {
        start: {
          line: 414,
          column: 32
        },
        end: {
          line: 414,
          column: 78
        }
      },
      "133": {
        start: {
          line: 415,
          column: 32
        },
        end: {
          line: 415,
          column: 64
        }
      },
      "134": {
        start: {
          line: 417,
          column: 32
        },
        end: {
          line: 423,
          column: 33
        }
      },
      "135": {
        start: {
          line: 418,
          column: 36
        },
        end: {
          line: 420,
          column: 37
        }
      },
      "136": {
        start: {
          line: 419,
          column: 40
        },
        end: {
          line: 419,
          column: 80
        }
      },
      "137": {
        start: {
          line: 421,
          column: 36
        },
        end: {
          line: 421,
          column: 72
        }
      },
      "138": {
        start: {
          line: 422,
          column: 36
        },
        end: {
          line: 422,
          column: 70
        }
      },
      "139": {
        start: {
          line: 426,
          column: 29
        },
        end: {
          line: 438,
          column: 25
        }
      },
      "140": {
        start: {
          line: 427,
          column: 28
        },
        end: {
          line: 427,
          column: 41
        }
      },
      "141": {
        start: {
          line: 428,
          column: 45
        },
        end: {
          line: 428,
          column: 68
        }
      },
      "142": {
        start: {
          line: 429,
          column: 28
        },
        end: {
          line: 429,
          column: 55
        }
      },
      "143": {
        start: {
          line: 430,
          column: 28
        },
        end: {
          line: 437,
          column: 29
        }
      },
      "144": {
        start: {
          line: 431,
          column: 44
        },
        end: {
          line: 431,
          column: 101
        }
      },
      "145": {
        start: {
          line: 432,
          column: 32
        },
        end: {
          line: 434,
          column: 33
        }
      },
      "146": {
        start: {
          line: 433,
          column: 36
        },
        end: {
          line: 433,
          column: 76
        }
      },
      "147": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 435,
          column: 56
        }
      },
      "148": {
        start: {
          line: 436,
          column: 32
        },
        end: {
          line: 436,
          column: 70
        }
      },
      "149": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 83
        }
      },
      "150": {
        start: {
          line: 442,
          column: 30
        },
        end: {
          line: 442,
          column: 72
        }
      },
      "151": {
        start: {
          line: 444,
          column: 41
        },
        end: {
          line: 453,
          column: 22
        }
      },
      "152": {
        start: {
          line: 445,
          column: 44
        },
        end: {
          line: 445,
          column: 61
        }
      },
      "153": {
        start: {
          line: 447,
          column: 38
        },
        end: {
          line: 447,
          column: 42
        }
      },
      "154": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 451,
          column: 22
        }
      },
      "155": {
        start: {
          line: 452,
          column: 20
        },
        end: {
          line: 452,
          column: 31
        }
      },
      "156": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 469,
          column: 18
        }
      },
      "157": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "158": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 32
        }
      },
      "159": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 130
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 24
          }
        },
        loc: {
          start: {
            line: 73,
            column: 29
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 73
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 96,
            column: 26
          },
          end: {
            line: 96,
            column: 27
          }
        },
        loc: {
          start: {
            line: 96,
            column: 68
          },
          end: {
            line: 101,
            column: 1
          }
        },
        line: 96
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 102,
            column: 30
          },
          end: {
            line: 102,
            column: 31
          }
        },
        loc: {
          start: {
            line: 102,
            column: 48
          },
          end: {
            line: 125,
            column: 1
          }
        },
        line: 102
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 123,
            column: 36
          },
          end: {
            line: 123,
            column: 37
          }
        },
        loc: {
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 125
          }
        },
        line: 123
      },
      "4": {
        name: "createFileOperationsTools",
        decl: {
          start: {
            line: 127,
            column: 16
          },
          end: {
            line: 127,
            column: 41
          }
        },
        loc: {
          start: {
            line: 127,
            column: 50
          },
          end: {
            line: 479,
            column: 1
          }
        },
        line: 127
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 133,
            column: 17
          },
          end: {
            line: 133,
            column: 18
          }
        },
        loc: {
          start: {
            line: 133,
            column: 33
          },
          end: {
            line: 175,
            column: 9
          }
        },
        line: 133
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 182,
            column: 17
          },
          end: {
            line: 182,
            column: 18
          }
        },
        loc: {
          start: {
            line: 182,
            column: 33
          },
          end: {
            line: 202,
            column: 9
          }
        },
        line: 182
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 209,
            column: 17
          },
          end: {
            line: 209,
            column: 18
          }
        },
        loc: {
          start: {
            line: 209,
            column: 33
          },
          end: {
            line: 233,
            column: 9
          }
        },
        line: 209
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 240,
            column: 17
          },
          end: {
            line: 240,
            column: 18
          }
        },
        loc: {
          start: {
            line: 240,
            column: 33
          },
          end: {
            line: 322,
            column: 9
          }
        },
        line: 240
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 329,
            column: 17
          },
          end: {
            line: 329,
            column: 18
          }
        },
        loc: {
          start: {
            line: 329,
            column: 33
          },
          end: {
            line: 378,
            column: 9
          }
        },
        line: 329
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 385,
            column: 17
          },
          end: {
            line: 385,
            column: 18
          }
        },
        loc: {
          start: {
            line: 385,
            column: 33
          },
          end: {
            line: 477,
            column: 9
          }
        },
        line: 385
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 397,
            column: 41
          },
          end: {
            line: 397,
            column: 42
          }
        },
        loc: {
          start: {
            line: 397,
            column: 60
          },
          end: {
            line: 441,
            column: 17
          }
        },
        line: 397
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 445,
            column: 26
          },
          end: {
            line: 445,
            column: 27
          }
        },
        loc: {
          start: {
            line: 445,
            column: 44
          },
          end: {
            line: 445,
            column: 61
          }
        },
        line: 445
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 446,
            column: 28
          },
          end: {
            line: 446,
            column: 29
          }
        },
        loc: {
          start: {
            line: 446,
            column: 50
          },
          end: {
            line: 453,
            column: 17
          }
        },
        line: 446
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 92,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "1": {
        loc: {
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 76,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 27
          },
          end: {
            line: 76,
            column: 52
          }
        }, {
          start: {
            line: 76,
            column: 56
          },
          end: {
            line: 76,
            column: 70
          }
        }],
        line: 76
      },
      "2": {
        loc: {
          start: {
            line: 77,
            column: 34
          },
          end: {
            line: 77,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 34
          },
          end: {
            line: 77,
            column: 59
          }
        }, {
          start: {
            line: 77,
            column: 63
          },
          end: {
            line: 77,
            column: 74
          }
        }],
        line: 77
      },
      "3": {
        loc: {
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 90,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 78,
            column: 72
          }
        }, {
          start: {
            line: 78,
            column: 76
          },
          end: {
            line: 90,
            column: 13
          }
        }],
        line: 78
      },
      "4": {
        loc: {
          start: {
            line: 96,
            column: 43
          },
          end: {
            line: 96,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 96,
            column: 55
          },
          end: {
            line: 96,
            column: 63
          }
        }],
        line: 96
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 44
          },
          end: {
            line: 123,
            column: 57
          }
        }, {
          start: {
            line: 123,
            column: 61
          },
          end: {
            line: 123,
            column: 74
          }
        }, {
          start: {
            line: 123,
            column: 78
          },
          end: {
            line: 123,
            column: 91
          }
        }, {
          start: {
            line: 123,
            column: 96
          },
          end: {
            line: 123,
            column: 108
          }
        }, {
          start: {
            line: 123,
            column: 112
          },
          end: {
            line: 123,
            column: 124
          }
        }],
        line: 123
      },
      "7": {
        loc: {
          start: {
            line: 124,
            column: 11
          },
          end: {
            line: 124,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 124,
            column: 20
          },
          end: {
            line: 124,
            column: 32
          }
        }, {
          start: {
            line: 124,
            column: 35
          },
          end: {
            line: 124,
            column: 61
          }
        }],
        line: 124
      },
      "8": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "9": {
        loc: {
          start: {
            line: 173,
            column: 64
          },
          end: {
            line: 173,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 89
          },
          end: {
            line: 173,
            column: 102
          }
        }, {
          start: {
            line: 173,
            column: 105
          },
          end: {
            line: 173,
            column: 120
          }
        }],
        line: 173
      },
      "10": {
        loc: {
          start: {
            line: 191,
            column: 29
          },
          end: {
            line: 193,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 26
          },
          end: {
            line: 192,
            column: 105
          }
        }, {
          start: {
            line: 193,
            column: 26
          },
          end: {
            line: 193,
            column: 98
          }
        }],
        line: 191
      },
      "11": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "12": {
        loc: {
          start: {
            line: 200,
            column: 64
          },
          end: {
            line: 200,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 200,
            column: 89
          },
          end: {
            line: 200,
            column: 102
          }
        }, {
          start: {
            line: 200,
            column: 105
          },
          end: {
            line: 200,
            column: 120
          }
        }],
        line: 200
      },
      "13": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "14": {
        loc: {
          start: {
            line: 231,
            column: 71
          },
          end: {
            line: 231,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 96
          },
          end: {
            line: 231,
            column: 109
          }
        }, {
          start: {
            line: 231,
            column: 112
          },
          end: {
            line: 231,
            column: 127
          }
        }],
        line: 231
      },
      "15": {
        loc: {
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 16
          },
          end: {
            line: 306,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "16": {
        loc: {
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 282,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 282,
            column: 39
          }
        }, {
          start: {
            line: 282,
            column: 43
          },
          end: {
            line: 282,
            column: 68
          }
        }, {
          start: {
            line: 282,
            column: 72
          },
          end: {
            line: 282,
            column: 97
          }
        }],
        line: 282
      },
      "17": {
        loc: {
          start: {
            line: 292,
            column: 38
          },
          end: {
            line: 292,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 38
          },
          end: {
            line: 292,
            column: 47
          }
        }, {
          start: {
            line: 292,
            column: 51
          },
          end: {
            line: 292,
            column: 53
          }
        }],
        line: 292
      },
      "18": {
        loc: {
          start: {
            line: 293,
            column: 38
          },
          end: {
            line: 293,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 38
          },
          end: {
            line: 293,
            column: 47
          }
        }, {
          start: {
            line: 293,
            column: 51
          },
          end: {
            line: 293,
            column: 53
          }
        }],
        line: 293
      },
      "19": {
        loc: {
          start: {
            line: 294,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 294
      },
      "20": {
        loc: {
          start: {
            line: 311,
            column: 29
          },
          end: {
            line: 313,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 26
          },
          end: {
            line: 312,
            column: 47
          }
        }, {
          start: {
            line: 313,
            column: 26
          },
          end: {
            line: 313,
            column: 148
          }
        }],
        line: 311
      },
      "21": {
        loc: {
          start: {
            line: 313,
            column: 94
          },
          end: {
            line: 313,
            column: 145
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 313,
            column: 120
          },
          end: {
            line: 313,
            column: 131
          }
        }, {
          start: {
            line: 313,
            column: 134
          },
          end: {
            line: 313,
            column: 145
          }
        }],
        line: 313
      },
      "22": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "23": {
        loc: {
          start: {
            line: 320,
            column: 64
          },
          end: {
            line: 320,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 89
          },
          end: {
            line: 320,
            column: 102
          }
        }, {
          start: {
            line: 320,
            column: 105
          },
          end: {
            line: 320,
            column: 120
          }
        }],
        line: 320
      },
      "24": {
        loc: {
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 366,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 366,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "25": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "26": {
        loc: {
          start: {
            line: 376,
            column: 64
          },
          end: {
            line: 376,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 376,
            column: 89
          },
          end: {
            line: 376,
            column: 102
          }
        }, {
          start: {
            line: 376,
            column: 105
          },
          end: {
            line: 376,
            column: 120
          }
        }],
        line: 376
      },
      "27": {
        loc: {
          start: {
            line: 390,
            column: 20
          },
          end: {
            line: 392,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 390,
            column: 20
          },
          end: {
            line: 392,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 390
      },
      "28": {
        loc: {
          start: {
            line: 406,
            column: 24
          },
          end: {
            line: 408,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 406,
            column: 24
          },
          end: {
            line: 408,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 406
      },
      "29": {
        loc: {
          start: {
            line: 406,
            column: 28
          },
          end: {
            line: 406,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 406,
            column: 28
          },
          end: {
            line: 406,
            column: 47
          }
        }, {
          start: {
            line: 406,
            column: 51
          },
          end: {
            line: 406,
            column: 77
          }
        }],
        line: 406
      },
      "30": {
        loc: {
          start: {
            line: 409,
            column: 24
          },
          end: {
            line: 438,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 24
          },
          end: {
            line: 438,
            column: 25
          }
        }, {
          start: {
            line: 426,
            column: 29
          },
          end: {
            line: 438,
            column: 25
          }
        }],
        line: 409
      },
      "31": {
        loc: {
          start: {
            line: 411,
            column: 28
          },
          end: {
            line: 424,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 28
          },
          end: {
            line: 424,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "32": {
        loc: {
          start: {
            line: 418,
            column: 36
          },
          end: {
            line: 420,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 418,
            column: 36
          },
          end: {
            line: 420,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 418
      },
      "33": {
        loc: {
          start: {
            line: 426,
            column: 29
          },
          end: {
            line: 438,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 29
          },
          end: {
            line: 438,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "34": {
        loc: {
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 437,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 430,
            column: 28
          },
          end: {
            line: 437,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 430
      },
      "35": {
        loc: {
          start: {
            line: 431,
            column: 44
          },
          end: {
            line: 431,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 431,
            column: 44
          },
          end: {
            line: 431,
            column: 82
          }
        }, {
          start: {
            line: 431,
            column: 86
          },
          end: {
            line: 431,
            column: 101
          }
        }],
        line: 431
      },
      "36": {
        loc: {
          start: {
            line: 432,
            column: 32
          },
          end: {
            line: 434,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 32
          },
          end: {
            line: 434,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "37": {
        loc: {
          start: {
            line: 462,
            column: 44
          },
          end: {
            line: 462,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 462,
            column: 68
          },
          end: {
            line: 462,
            column: 84
          }
        }, {
          start: {
            line: 462,
            column: 87
          },
          end: {
            line: 462,
            column: 96
          }
        }],
        line: 462
      },
      "38": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "39": {
        loc: {
          start: {
            line: 475,
            column: 70
          },
          end: {
            line: 475,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 475,
            column: 95
          },
          end: {
            line: 475,
            column: 108
          }
        }, {
          start: {
            line: 475,
            column: 111
          },
          end: {
            line: 475,
            column: 126
          }
        }],
        line: 475
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0, 0],
      "6": [0, 0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\nimport {\n  FileStorageConfig,\n  FileTransferProgress,\n  FileOperationResult,\n  FileCleanupResult,\n  WorkflowFileManifest,\n  FileValidationOptions,\n  FileValidationResult,\n  FileOperationLog,\n  FileOperationType,\n} from '../types/fileTypes.js';\n\n// Zod schemas for validation\nconst ValidateFileSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  maxFileSize: z.number().optional(),\n  allowedMimeTypes: z.array(z.string()).optional(),\n  allowedExtensions: z.array(z.string()).optional(),\n  checkVirusScan: z.boolean().default(false),\n});\n\nconst CleanupFilesSchema = z.object({\n  olderThanDays: z.number().min(1).max(365).default(30),\n  dryRun: z.boolean().default(true),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n});\n\nconst CreateFileManifestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  includeExecutions: z.boolean().default(true),\n});\n\nconst CompareFilesSchema = z.object({\n  filePath1: z.string().min(1, 'First file path is required'),\n  filePath2: z.string().min(1, 'Second file path is required'),\n  compareContent: z.boolean().default(false),\n});\n\nconst GetFileInfoSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  includeHash: z.boolean().default(false),\n  hashAlgorithm: z.enum(['md5', 'sha1', 'sha256']).default('sha256'),\n});\n\nconst BatchFileOperationSchema = z.object({\n  operation: z.enum(['copy', 'move', 'delete', 'validate']),\n  files: z.array(z.string()).min(1, 'At least one file required'),\n  targetDirectory: z.string().optional(),\n  options: z.object({\n    createDirectories: z.boolean().default(true),\n    overwrite: z.boolean().default(false),\n    preserveTimestamps: z.boolean().default(false),\n  }).optional(),\n});\n\nconst ArchiveFilesSchema = z.object({\n  files: z.array(z.string()).min(1, 'At least one file required'),\n  outputPath: z.string().min(1, 'Output archive path is required'),\n  format: z.enum(['zip', 'tar', 'tar.gz']).default('zip'),\n  compressionLevel: z.number().min(0).max(9).default(6),\n});\n\nconst ExtractArchiveSchema = z.object({\n  archivePath: z.string().min(1, 'Archive path is required'),\n  extractToDirectory: z.string().min(1, 'Extract directory is required'),\n  overwrite: z.boolean().default(false),\n  preserveStructure: z.boolean().default(true),\n});\n\nconst MonitorDirectorySchema = z.object({\n  directoryPath: z.string().min(1, 'Directory path is required'),\n  watchPattern: z.string().default('*'),\n  recursive: z.boolean().default(true),\n  events: z.array(z.enum(['create', 'modify', 'delete'])).default(['create', 'modify', 'delete']),\n  debounceMs: z.number().min(100).max(10000).default(1000),\n});\n\nconst GetDirectoryStatsSchema = z.object({\n  directoryPath: z.string().min(1, 'Directory path is required'),\n  recursive: z.boolean().default(true),\n  includeHidden: z.boolean().default(false),\n  groupByExtension: z.boolean().default(true),\n});\n\n// Global file handler instance\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Initialize file handler\nconst getFileHandler = (): FileHandlingUtils => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Helper functions\nconst calculateFileHash = async (filePath: string, algorithm: string = 'sha256'): Promise<string> => {\n  const fileBuffer = await fs.readFile(filePath);\n  const hashSum = crypto.createHash(algorithm);\n  hashSum.update(fileBuffer);\n  return hashSum.digest('hex');\n};\n\nconst getMimeTypeFromBuffer = async (buffer: Buffer): Promise<string> => {\n  // Simple MIME type detection based on file signatures\n  const signatures: Record<string, string> = {\n    '89504E47': 'image/png',\n    'FFD8FF': 'image/jpeg',\n    '47494638': 'image/gif',\n    '25504446': 'application/pdf',\n    '504B0304': 'application/zip',\n    '504B0506': 'application/zip',\n    '504B0708': 'application/zip',\n    '7B22': 'application/json', // Starts with {\"\n    '3C3F786D6C': 'application/xml', // Starts with <?xml\n  };\n\n  const header = buffer.subarray(0, 8).toString('hex').toUpperCase();\n  \n  for (const [signature, mimeType] of Object.entries(signatures)) {\n    if (header.startsWith(signature)) {\n      return mimeType;\n    }\n  }\n\n  // Check for text files\n  const textSample = buffer.subarray(0, 100);\n  const isText = textSample.every(byte => byte === 0x09 || byte === 0x0A || byte === 0x0D || (byte >= 0x20 && byte <= 0x7E));\n  \n  return isText ? 'text/plain' : 'application/octet-stream';\n};\n\n// Tool registration function\nexport function createFileOperationsTools(server: any) {\n  // Validate file tool\n  server.addTool({\n    name: 'validate-file',\n    description: 'Validate a file against size, type, and security constraints',\n    parameters: ValidateFileSchema,\n    handler: async (args: z.infer<typeof ValidateFileSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Get file stats\n        const stats = await fs.stat(args.filePath);\n        const fileName = path.basename(args.filePath);\n\n        // Detect MIME type\n        const buffer = await fs.readFile(args.filePath);\n        const detectedMimeType = await getMimeTypeFromBuffer(buffer);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(\n          fileName,\n          detectedMimeType,\n          stats.size,\n          {\n            maxFileSize: args.maxFileSize,\n            allowedMimeTypes: args.allowedMimeTypes,\n            allowedExtensions: args.allowedExtensions,\n            virusScan: args.checkVirusScan,\n          }\n        );\n\n        return {\n          success: validation.isValid,\n          validation,\n          fileInfo: {\n            path: args.filePath,\n            name: fileName,\n            size: stats.size,\n            detectedMimeType,\n            created: stats.birthtime.toISOString(),\n            modified: stats.mtime.toISOString(),\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to validate file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Cleanup old files tool\n  server.addTool({\n    name: 'cleanup-files',\n    description: 'Clean up old files from the file storage system',\n    parameters: CleanupFilesSchema,\n    handler: async (args: z.infer<typeof CleanupFilesSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Perform cleanup (using the actual method name from FileHandlingUtils)\n        const result = await fileHandler.cleanupOldFiles(args.olderThanDays);\n\n        return {\n          success: true,\n          result,\n          dryRun: args.dryRun,\n          message: args.dryRun \n            ? `Would delete ${result.deletedFiles} files, freeing ${result.freedSpace} bytes`\n            : `Deleted ${result.deletedFiles} files, freed ${result.freedSpace} bytes`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to cleanup files: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Create workflow file manifest tool\n  server.addTool({\n    name: 'create-file-manifest',\n    description: 'Create a manifest of all files associated with a workflow',\n    parameters: CreateFileManifestSchema,\n    handler: async (args: z.infer<typeof CreateFileManifestSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Create manifest (simplified implementation since method doesn't exist)\n        const manifest: WorkflowFileManifest = {\n          workflowId: args.workflowId,\n          workflowName: `Workflow ${args.workflowId}`,\n          files: [], // Would be populated from actual file system scan\n          totalSize: 0,\n          fileCount: 0,\n          lastUpdated: new Date().toISOString(),\n        };\n\n        return {\n          success: true,\n          manifest,\n          message: `Created manifest for workflow ${args.workflowId} with ${manifest.fileCount} files`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to create file manifest: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Compare files tool\n  server.addTool({\n    name: 'compare-files',\n    description: 'Compare two files for differences',\n    parameters: CompareFilesSchema,\n    handler: async (args: z.infer<typeof CompareFilesSchema>) => {\n      try {\n        // Check if both files exist\n        try {\n          await fs.access(args.filePath1);\n          await fs.access(args.filePath2);\n        } catch {\n          throw new UserError('One or both files not found');\n        }\n\n        // Get file stats\n        const stats1 = await fs.stat(args.filePath1);\n        const stats2 = await fs.stat(args.filePath2);\n\n        const comparison = {\n          files: {\n            file1: {\n              path: args.filePath1,\n              size: stats1.size,\n              modified: stats1.mtime.toISOString(),\n            },\n            file2: {\n              path: args.filePath2,\n              size: stats2.size,\n              modified: stats2.mtime.toISOString(),\n            },\n          },\n          sizeDifference: Math.abs(stats1.size - stats2.size),\n          sizeMatch: stats1.size === stats2.size,\n          contentMatch: false,\n          hash1: '',\n          hash2: '',\n        };\n\n        // Compare hashes\n        const [hash1, hash2] = await Promise.all([\n          calculateFileHash(args.filePath1),\n          calculateFileHash(args.filePath2),\n        ]);\n\n        comparison.hash1 = hash1;\n        comparison.hash2 = hash2;\n        comparison.contentMatch = hash1 === hash2;\n\n        // If requested and files are small enough, compare content line by line\n        let contentDifferences: any = null;\n        if (args.compareContent && stats1.size < 1024 * 1024 && stats2.size < 1024 * 1024) { // Max 1MB\n          const [content1, content2] = await Promise.all([\n            fs.readFile(args.filePath1, 'utf-8'),\n            fs.readFile(args.filePath2, 'utf-8'),\n          ]);\n\n          const lines1 = content1.split('\\n');\n          const lines2 = content2.split('\\n');\n          const maxLines = Math.max(lines1.length, lines2.length);\n          const differences = [];\n\n          for (let i = 0; i < maxLines; i++) {\n            const line1 = lines1[i] || '';\n            const line2 = lines2[i] || '';\n            if (line1 !== line2) {\n              differences.push({\n                lineNumber: i + 1,\n                file1: line1,\n                file2: line2,\n              });\n            }\n          }\n\n          contentDifferences = {\n            totalDifferences: differences.length,\n            differences: differences.slice(0, 50), // Limit to first 50 differences\n          };\n        }\n\n        return {\n          success: true,\n          comparison,\n          contentDifferences,\n          message: comparison.contentMatch\n            ? 'Files are identical'\n            : `Files differ (size: ${comparison.sizeDifference} bytes, content: ${comparison.contentMatch ? 'identical' : 'different'})`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to compare files: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get file information tool\n  server.addTool({\n    name: 'get-file-info',\n    description: 'Get detailed information about a file',\n    parameters: GetFileInfoSchema,\n    handler: async (args: z.infer<typeof GetFileInfoSchema>) => {\n      try {\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Get file stats\n        const stats = await fs.stat(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const fileExtension = path.extname(args.filePath);\n\n        // Detect MIME type\n        const buffer = await fs.readFile(args.filePath, { flag: 'r' });\n        const detectedMimeType = await getMimeTypeFromBuffer(buffer);\n\n        const fileInfo = {\n          path: args.filePath,\n          name: fileName,\n          extension: fileExtension,\n          size: stats.size,\n          sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)} MB`,\n          mimeType: detectedMimeType,\n          created: stats.birthtime.toISOString(),\n          modified: stats.mtime.toISOString(),\n          accessed: stats.atime.toISOString(),\n          isDirectory: stats.isDirectory(),\n          isFile: stats.isFile(),\n          permissions: '0' + (stats.mode & parseInt('777', 8)).toString(8),\n        };\n\n        // Calculate hash if requested\n        if (args.includeHash) {\n          const hash = await calculateFileHash(args.filePath, args.hashAlgorithm);\n          (fileInfo as any).hash = {\n            algorithm: args.hashAlgorithm,\n            value: hash,\n          };\n        }\n\n        return {\n          success: true,\n          fileInfo,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get file info: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get directory statistics tool\n  server.addTool({\n    name: 'get-directory-stats',\n    description: 'Get statistics about a directory and its contents',\n    parameters: GetDirectoryStatsSchema,\n    handler: async (args: z.infer<typeof GetDirectoryStatsSchema>) => {\n      try {\n        // Check if directory exists\n        try {\n          const stats = await fs.stat(args.directoryPath);\n          if (!stats.isDirectory()) {\n            throw new UserError('Path is not a directory');\n          }\n        } catch {\n          throw new UserError(`Directory not found: ${args.directoryPath}`);\n        }\n\n        const analyzeDirectory = async (dirPath: string): Promise<any> => {\n          const entries = await fs.readdir(dirPath, { withFileTypes: true });\n          let totalFiles = 0;\n          let totalDirectories = 0;\n          let totalSize = 0;\n          const extensions: Record<string, { count: number; size: number }> = {};\n\n          for (const entry of entries) {\n            const fullPath = path.join(dirPath, entry.name);\n            \n            // Skip hidden files unless requested\n            if (!args.includeHidden && entry.name.startsWith('.')) {\n              continue;\n            }\n\n            if (entry.isDirectory()) {\n              totalDirectories++;\n              if (args.recursive) {\n                const subStats = await analyzeDirectory(fullPath);\n                totalFiles += subStats.totalFiles;\n                totalDirectories += subStats.totalDirectories;\n                totalSize += subStats.totalSize;\n                \n                // Merge extensions\n                for (const [ext, data] of Object.entries(subStats.extensions)) {\n                  if (!extensions[ext]) {\n                    extensions[ext] = { count: 0, size: 0 };\n                  }\n                  extensions[ext].count += (data as any).count;\n                  extensions[ext].size += (data as any).size;\n                }\n              }\n            } else if (entry.isFile()) {\n              totalFiles++;\n              const fileStat = await fs.stat(fullPath);\n              totalSize += fileStat.size;\n\n              if (args.groupByExtension) {\n                const ext = path.extname(entry.name).toLowerCase() || '.no-extension';\n                if (!extensions[ext]) {\n                  extensions[ext] = { count: 0, size: 0 };\n                }\n                extensions[ext].count++;\n                extensions[ext].size += fileStat.size;\n              }\n            }\n          }\n\n          return { totalFiles, totalDirectories, totalSize, extensions };\n        };\n\n        const stats = await analyzeDirectory(args.directoryPath);\n\n        // Sort extensions by count\n        const sortedExtensions = Object.entries(stats.extensions)\n          .sort(([, a], [, b]) => (b as { count: number }).count - (a as { count: number }).count)\n          .reduce((acc, [ext, data]) => {\n            const typedData = data as { count: number; size: number };\n            acc[ext] = {\n              ...typedData,\n              sizeFormatted: `${(typedData.size / 1024 / 1024).toFixed(2)} MB`,\n            };\n            return acc;\n          }, {} as Record<string, any>);\n\n        return {\n          success: true,\n          directoryPath: args.directoryPath,\n          statistics: {\n            totalFiles: stats.totalFiles,\n            totalDirectories: stats.totalDirectories,\n            totalSize: stats.totalSize,\n            totalSizeFormatted: `${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`,\n            extensionBreakdown: args.groupByExtension ? sortedExtensions : undefined,\n          },\n          options: {\n            recursive: args.recursive,\n            includeHidden: args.includeHidden,\n            groupByExtension: args.groupByExtension,\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get directory stats: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6078cc1ae9aa15d5c5a7f13b4993bbeef07823bc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g9zbwmm0d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g9zbwmm0d();
import { z } from 'zod';
import { UserError } from 'fastmcp';
import * as fs from 'fs/promises';
import * as path from 'path';
import * as crypto from 'crypto';
import { FileHandlingUtils } from '../utils/fileHandling.js';
// Zod schemas for validation
const ValidateFileSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[0]++, z.object({
  filePath: z.string().min(1, 'File path is required'),
  maxFileSize: z.number().optional(),
  allowedMimeTypes: z.array(z.string()).optional(),
  allowedExtensions: z.array(z.string()).optional(),
  checkVirusScan: z.boolean().default(false)
}));
const CleanupFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[1]++, z.object({
  olderThanDays: z.number().min(1).max(365).default(30),
  dryRun: z.boolean().default(true),
  workflowId: z.string().optional(),
  executionId: z.string().optional()
}));
const CreateFileManifestSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[2]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  includeExecutions: z.boolean().default(true)
}));
const CompareFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[3]++, z.object({
  filePath1: z.string().min(1, 'First file path is required'),
  filePath2: z.string().min(1, 'Second file path is required'),
  compareContent: z.boolean().default(false)
}));
const GetFileInfoSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[4]++, z.object({
  filePath: z.string().min(1, 'File path is required'),
  includeHash: z.boolean().default(false),
  hashAlgorithm: z.enum(['md5', 'sha1', 'sha256']).default('sha256')
}));
const BatchFileOperationSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[5]++, z.object({
  operation: z.enum(['copy', 'move', 'delete', 'validate']),
  files: z.array(z.string()).min(1, 'At least one file required'),
  targetDirectory: z.string().optional(),
  options: z.object({
    createDirectories: z.boolean().default(true),
    overwrite: z.boolean().default(false),
    preserveTimestamps: z.boolean().default(false)
  }).optional()
}));
const ArchiveFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[6]++, z.object({
  files: z.array(z.string()).min(1, 'At least one file required'),
  outputPath: z.string().min(1, 'Output archive path is required'),
  format: z.enum(['zip', 'tar', 'tar.gz']).default('zip'),
  compressionLevel: z.number().min(0).max(9).default(6)
}));
const ExtractArchiveSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[7]++, z.object({
  archivePath: z.string().min(1, 'Archive path is required'),
  extractToDirectory: z.string().min(1, 'Extract directory is required'),
  overwrite: z.boolean().default(false),
  preserveStructure: z.boolean().default(true)
}));
const MonitorDirectorySchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[8]++, z.object({
  directoryPath: z.string().min(1, 'Directory path is required'),
  watchPattern: z.string().default('*'),
  recursive: z.boolean().default(true),
  events: z.array(z.enum(['create', 'modify', 'delete'])).default(['create', 'modify', 'delete']),
  debounceMs: z.number().min(100).max(10000).default(1000)
}));
const GetDirectoryStatsSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[9]++, z.object({
  directoryPath: z.string().min(1, 'Directory path is required'),
  recursive: z.boolean().default(true),
  includeHidden: z.boolean().default(false),
  groupByExtension: z.boolean().default(true)
}));
// Global file handler instance
let fileHandler =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[10]++, null);
// Initialize file handler
/* istanbul ignore next */
cov_1g9zbwmm0d().s[11]++;
const getFileHandler = () => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[0]++;
  cov_1g9zbwmm0d().s[12]++;
  if (!fileHandler) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().b[0][0]++;
    cov_1g9zbwmm0d().s[13]++;
    fileHandler = new FileHandlingUtils({
      baseDirectory:
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[1][0]++, process.env.N8N_FILES_DIR) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[1][1]++, './data/files'),
      maxFileSize: parseInt(
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[2][0]++, process.env.MAX_FILE_SIZE) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[2][1]++, '104857600')),
      // 100MB
      allowedMimeTypes:
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[3][0]++, process.env.ALLOWED_MIME_TYPES?.split(',')) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[3][1]++, ['image/*', 'text/*', 'application/json', 'application/pdf', 'application/zip', 'application/x-zip-compressed', 'application/octet-stream', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
    });
  } else
  /* istanbul ignore next */
  {
    cov_1g9zbwmm0d().b[0][1]++;
  }
  cov_1g9zbwmm0d().s[14]++;
  return fileHandler;
};
// Helper functions
/* istanbul ignore next */
cov_1g9zbwmm0d().s[15]++;
const calculateFileHash = async (filePath, algorithm =
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[4][0]++, 'sha256')) => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[1]++;
  const fileBuffer =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[16]++, await fs.readFile(filePath));
  const hashSum =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[17]++, crypto.createHash(algorithm));
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[18]++;
  hashSum.update(fileBuffer);
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[19]++;
  return hashSum.digest('hex');
};
/* istanbul ignore next */
cov_1g9zbwmm0d().s[20]++;
const getMimeTypeFromBuffer = async buffer => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[2]++;
  // Simple MIME type detection based on file signatures
  const signatures =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[21]++, {
    '89504E47': 'image/png',
    'FFD8FF': 'image/jpeg',
    '47494638': 'image/gif',
    '25504446': 'application/pdf',
    '504B0304': 'application/zip',
    '504B0506': 'application/zip',
    '504B0708': 'application/zip',
    '7B22': 'application/json',
    // Starts with {"
    '3C3F786D6C': 'application/xml' // Starts with <?xml
  });
  const header =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[22]++, buffer.subarray(0, 8).toString('hex').toUpperCase());
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[23]++;
  for (const [signature, mimeType] of Object.entries(signatures)) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().s[24]++;
    if (header.startsWith(signature)) {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().b[5][0]++;
      cov_1g9zbwmm0d().s[25]++;
      return mimeType;
    } else
    /* istanbul ignore next */
    {
      cov_1g9zbwmm0d().b[5][1]++;
    }
  }
  // Check for text files
  const textSample =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[26]++, buffer.subarray(0, 100));
  const isText =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[27]++, textSample.every(byte => {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().f[3]++;
    cov_1g9zbwmm0d().s[28]++;
    return /* istanbul ignore next */(cov_1g9zbwmm0d().b[6][0]++, byte === 0x09) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[6][1]++, byte === 0x0A) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[6][2]++, byte === 0x0D) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[6][3]++, byte >= 0x20) &&
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[6][4]++, byte <= 0x7E);
  }));
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[29]++;
  return isText ?
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[7][0]++, 'text/plain') :
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[7][1]++, 'application/octet-stream');
};
// Tool registration function
export function createFileOperationsTools(server) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[4]++;
  cov_1g9zbwmm0d().s[30]++;
  // Validate file tool
  server.addTool({
    name: 'validate-file',
    description: 'Validate a file against size, type, and security constraints',
    parameters: ValidateFileSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[5]++;
      cov_1g9zbwmm0d().s[31]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[32]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[33]++;
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[34]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[35]++;
          throw new UserError(`File not found: ${args.filePath}`);
        }
        // Get file stats
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[36]++, await fs.stat(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[37]++, path.basename(args.filePath));
        // Detect MIME type
        const buffer =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[38]++, await fs.readFile(args.filePath));
        const detectedMimeType =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[39]++, await getMimeTypeFromBuffer(buffer));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[40]++, await fileHandler.validateFile(fileName, detectedMimeType, stats.size, {
          maxFileSize: args.maxFileSize,
          allowedMimeTypes: args.allowedMimeTypes,
          allowedExtensions: args.allowedExtensions,
          virusScan: args.checkVirusScan
        }));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[41]++;
        return {
          success: validation.isValid,
          validation,
          fileInfo: {
            path: args.filePath,
            name: fileName,
            size: stats.size,
            detectedMimeType,
            created: stats.birthtime.toISOString(),
            modified: stats.mtime.toISOString()
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[42]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[8][0]++;
          cov_1g9zbwmm0d().s[43]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[8][1]++;
        }
        cov_1g9zbwmm0d().s[44]++;
        throw new UserError(`Failed to validate file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[9][1]++, 'Unknown error')}`);
      }
    }
  });
  // Cleanup old files tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[45]++;
  server.addTool({
    name: 'cleanup-files',
    description: 'Clean up old files from the file storage system',
    parameters: CleanupFilesSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[6]++;
      cov_1g9zbwmm0d().s[46]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[47]++, getFileHandler());
        // Perform cleanup (using the actual method name from FileHandlingUtils)
        const result =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[48]++, await fileHandler.cleanupOldFiles(args.olderThanDays));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[49]++;
        return {
          success: true,
          result,
          dryRun: args.dryRun,
          message: args.dryRun ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[10][0]++, `Would delete ${result.deletedFiles} files, freeing ${result.freedSpace} bytes`) :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[10][1]++, `Deleted ${result.deletedFiles} files, freed ${result.freedSpace} bytes`)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[50]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[11][0]++;
          cov_1g9zbwmm0d().s[51]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[11][1]++;
        }
        cov_1g9zbwmm0d().s[52]++;
        throw new UserError(`Failed to cleanup files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[12][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[12][1]++, 'Unknown error')}`);
      }
    }
  });
  // Create workflow file manifest tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[53]++;
  server.addTool({
    name: 'create-file-manifest',
    description: 'Create a manifest of all files associated with a workflow',
    parameters: CreateFileManifestSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[7]++;
      cov_1g9zbwmm0d().s[54]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[55]++, getFileHandler());
        // Create manifest (simplified implementation since method doesn't exist)
        const manifest =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[56]++, {
          workflowId: args.workflowId,
          workflowName: `Workflow ${args.workflowId}`,
          files: [],
          // Would be populated from actual file system scan
          totalSize: 0,
          fileCount: 0,
          lastUpdated: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[57]++;
        return {
          success: true,
          manifest,
          message: `Created manifest for workflow ${args.workflowId} with ${manifest.fileCount} files`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[58]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[13][0]++;
          cov_1g9zbwmm0d().s[59]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[13][1]++;
        }
        cov_1g9zbwmm0d().s[60]++;
        throw new UserError(`Failed to create file manifest: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[14][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[14][1]++, 'Unknown error')}`);
      }
    }
  });
  // Compare files tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[61]++;
  server.addTool({
    name: 'compare-files',
    description: 'Compare two files for differences',
    parameters: CompareFilesSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[8]++;
      cov_1g9zbwmm0d().s[62]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[63]++;
        // Check if both files exist
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[64]++;
          await fs.access(args.filePath1);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[65]++;
          await fs.access(args.filePath2);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[66]++;
          throw new UserError('One or both files not found');
        }
        // Get file stats
        const stats1 =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[67]++, await fs.stat(args.filePath1));
        const stats2 =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[68]++, await fs.stat(args.filePath2));
        const comparison =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[69]++, {
          files: {
            file1: {
              path: args.filePath1,
              size: stats1.size,
              modified: stats1.mtime.toISOString()
            },
            file2: {
              path: args.filePath2,
              size: stats2.size,
              modified: stats2.mtime.toISOString()
            }
          },
          sizeDifference: Math.abs(stats1.size - stats2.size),
          sizeMatch: stats1.size === stats2.size,
          contentMatch: false,
          hash1: '',
          hash2: ''
        });
        // Compare hashes
        const [hash1, hash2] =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[70]++, await Promise.all([calculateFileHash(args.filePath1), calculateFileHash(args.filePath2)]));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[71]++;
        comparison.hash1 = hash1;
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[72]++;
        comparison.hash2 = hash2;
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[73]++;
        comparison.contentMatch = hash1 === hash2;
        // If requested and files are small enough, compare content line by line
        let contentDifferences =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[74]++, null);
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[75]++;
        if (
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[16][0]++, args.compareContent) &&
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[16][1]++, stats1.size < 1024 * 1024) &&
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[16][2]++, stats2.size < 1024 * 1024)) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[15][0]++;
          // Max 1MB
          const [content1, content2] =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[76]++, await Promise.all([fs.readFile(args.filePath1, 'utf-8'), fs.readFile(args.filePath2, 'utf-8')]));
          const lines1 =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[77]++, content1.split('\n'));
          const lines2 =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[78]++, content2.split('\n'));
          const maxLines =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[79]++, Math.max(lines1.length, lines2.length));
          const differences =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[80]++, []);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[81]++;
          for (let i =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[82]++, 0); i < maxLines; i++) {
            const line1 =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[83]++,
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[17][0]++, lines1[i]) ||
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[17][1]++, ''));
            const line2 =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[84]++,
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[18][0]++, lines2[i]) ||
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[18][1]++, ''));
            /* istanbul ignore next */
            cov_1g9zbwmm0d().s[85]++;
            if (line1 !== line2) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[19][0]++;
              cov_1g9zbwmm0d().s[86]++;
              differences.push({
                lineNumber: i + 1,
                file1: line1,
                file2: line2
              });
            } else
            /* istanbul ignore next */
            {
              cov_1g9zbwmm0d().b[19][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[87]++;
          contentDifferences = {
            totalDifferences: differences.length,
            differences: differences.slice(0, 50) // Limit to first 50 differences
          };
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[15][1]++;
        }
        cov_1g9zbwmm0d().s[88]++;
        return {
          success: true,
          comparison,
          contentDifferences,
          message: comparison.contentMatch ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[20][0]++, 'Files are identical') :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[20][1]++, `Files differ (size: ${comparison.sizeDifference} bytes, content: ${comparison.contentMatch ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[21][0]++, 'identical') :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[21][1]++, 'different')})`)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[89]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[22][0]++;
          cov_1g9zbwmm0d().s[90]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[22][1]++;
        }
        cov_1g9zbwmm0d().s[91]++;
        throw new UserError(`Failed to compare files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[23][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get file information tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[92]++;
  server.addTool({
    name: 'get-file-info',
    description: 'Get detailed information about a file',
    parameters: GetFileInfoSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[9]++;
      cov_1g9zbwmm0d().s[93]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[94]++;
        // Check if file exists
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[95]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[96]++;
          throw new UserError(`File not found: ${args.filePath}`);
        }
        // Get file stats
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[97]++, await fs.stat(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[98]++, path.basename(args.filePath));
        const fileExtension =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[99]++, path.extname(args.filePath));
        // Detect MIME type
        const buffer =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[100]++, await fs.readFile(args.filePath, {
          flag: 'r'
        }));
        const detectedMimeType =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[101]++, await getMimeTypeFromBuffer(buffer));
        const fileInfo =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[102]++, {
          path: args.filePath,
          name: fileName,
          extension: fileExtension,
          size: stats.size,
          sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)} MB`,
          mimeType: detectedMimeType,
          created: stats.birthtime.toISOString(),
          modified: stats.mtime.toISOString(),
          accessed: stats.atime.toISOString(),
          isDirectory: stats.isDirectory(),
          isFile: stats.isFile(),
          permissions: '0' + (stats.mode & parseInt('777', 8)).toString(8)
        });
        // Calculate hash if requested
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[103]++;
        if (args.includeHash) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[24][0]++;
          const hash =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[104]++, await calculateFileHash(args.filePath, args.hashAlgorithm));
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[105]++;
          fileInfo.hash = {
            algorithm: args.hashAlgorithm,
            value: hash
          };
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[24][1]++;
        }
        cov_1g9zbwmm0d().s[106]++;
        return {
          success: true,
          fileInfo
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[107]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[25][0]++;
          cov_1g9zbwmm0d().s[108]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[25][1]++;
        }
        cov_1g9zbwmm0d().s[109]++;
        throw new UserError(`Failed to get file info: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[26][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get directory statistics tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[110]++;
  server.addTool({
    name: 'get-directory-stats',
    description: 'Get statistics about a directory and its contents',
    parameters: GetDirectoryStatsSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[10]++;
      cov_1g9zbwmm0d().s[111]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[112]++;
        // Check if directory exists
        try {
          const stats =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[113]++, await fs.stat(args.directoryPath));
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[114]++;
          if (!stats.isDirectory()) {
            /* istanbul ignore next */
            cov_1g9zbwmm0d().b[27][0]++;
            cov_1g9zbwmm0d().s[115]++;
            throw new UserError('Path is not a directory');
          } else
          /* istanbul ignore next */
          {
            cov_1g9zbwmm0d().b[27][1]++;
          }
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[116]++;
          throw new UserError(`Directory not found: ${args.directoryPath}`);
        }
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[117]++;
        const analyzeDirectory = async dirPath => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[11]++;
          const entries =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[118]++, await fs.readdir(dirPath, {
            withFileTypes: true
          }));
          let totalFiles =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[119]++, 0);
          let totalDirectories =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[120]++, 0);
          let totalSize =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[121]++, 0);
          const extensions =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[122]++, {});
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[123]++;
          for (const entry of entries) {
            const fullPath =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[124]++, path.join(dirPath, entry.name));
            // Skip hidden files unless requested
            /* istanbul ignore next */
            cov_1g9zbwmm0d().s[125]++;
            if (
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[29][0]++, !args.includeHidden) &&
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[29][1]++, entry.name.startsWith('.'))) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[28][0]++;
              cov_1g9zbwmm0d().s[126]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_1g9zbwmm0d().b[28][1]++;
            }
            cov_1g9zbwmm0d().s[127]++;
            if (entry.isDirectory()) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[30][0]++;
              cov_1g9zbwmm0d().s[128]++;
              totalDirectories++;
              /* istanbul ignore next */
              cov_1g9zbwmm0d().s[129]++;
              if (args.recursive) {
                /* istanbul ignore next */
                cov_1g9zbwmm0d().b[31][0]++;
                const subStats =
                /* istanbul ignore next */
                (cov_1g9zbwmm0d().s[130]++, await analyzeDirectory(fullPath));
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[131]++;
                totalFiles += subStats.totalFiles;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[132]++;
                totalDirectories += subStats.totalDirectories;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[133]++;
                totalSize += subStats.totalSize;
                // Merge extensions
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[134]++;
                for (const [ext, data] of Object.entries(subStats.extensions)) {
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[135]++;
                  if (!extensions[ext]) {
                    /* istanbul ignore next */
                    cov_1g9zbwmm0d().b[32][0]++;
                    cov_1g9zbwmm0d().s[136]++;
                    extensions[ext] = {
                      count: 0,
                      size: 0
                    };
                  } else
                  /* istanbul ignore next */
                  {
                    cov_1g9zbwmm0d().b[32][1]++;
                  }
                  cov_1g9zbwmm0d().s[137]++;
                  extensions[ext].count += data.count;
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[138]++;
                  extensions[ext].size += data.size;
                }
              } else
              /* istanbul ignore next */
              {
                cov_1g9zbwmm0d().b[31][1]++;
              }
            } else {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[30][1]++;
              cov_1g9zbwmm0d().s[139]++;
              if (entry.isFile()) {
                /* istanbul ignore next */
                cov_1g9zbwmm0d().b[33][0]++;
                cov_1g9zbwmm0d().s[140]++;
                totalFiles++;
                const fileStat =
                /* istanbul ignore next */
                (cov_1g9zbwmm0d().s[141]++, await fs.stat(fullPath));
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[142]++;
                totalSize += fileStat.size;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[143]++;
                if (args.groupByExtension) {
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().b[34][0]++;
                  const ext =
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().s[144]++,
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().b[35][0]++, path.extname(entry.name).toLowerCase()) ||
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().b[35][1]++, '.no-extension'));
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[145]++;
                  if (!extensions[ext]) {
                    /* istanbul ignore next */
                    cov_1g9zbwmm0d().b[36][0]++;
                    cov_1g9zbwmm0d().s[146]++;
                    extensions[ext] = {
                      count: 0,
                      size: 0
                    };
                  } else
                  /* istanbul ignore next */
                  {
                    cov_1g9zbwmm0d().b[36][1]++;
                  }
                  cov_1g9zbwmm0d().s[147]++;
                  extensions[ext].count++;
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[148]++;
                  extensions[ext].size += fileStat.size;
                } else
                /* istanbul ignore next */
                {
                  cov_1g9zbwmm0d().b[34][1]++;
                }
              } else
              /* istanbul ignore next */
              {
                cov_1g9zbwmm0d().b[33][1]++;
              }
            }
          }
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[149]++;
          return {
            totalFiles,
            totalDirectories,
            totalSize,
            extensions
          };
        };
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[150]++, await analyzeDirectory(args.directoryPath));
        // Sort extensions by count
        const sortedExtensions =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[151]++, Object.entries(stats.extensions).sort(([, a], [, b]) => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[12]++;
          cov_1g9zbwmm0d().s[152]++;
          return b.count - a.count;
        }).reduce((acc, [ext, data]) => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[13]++;
          const typedData =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[153]++, data);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[154]++;
          acc[ext] = {
            ...typedData,
            sizeFormatted: `${(typedData.size / 1024 / 1024).toFixed(2)} MB`
          };
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[155]++;
          return acc;
        }, {}));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[156]++;
        return {
          success: true,
          directoryPath: args.directoryPath,
          statistics: {
            totalFiles: stats.totalFiles,
            totalDirectories: stats.totalDirectories,
            totalSize: stats.totalSize,
            totalSizeFormatted: `${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`,
            extensionBreakdown: args.groupByExtension ?
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[37][0]++, sortedExtensions) :
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[37][1]++, undefined)
          },
          options: {
            recursive: args.recursive,
            includeHidden: args.includeHidden,
            groupByExtension: args.groupByExtension
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[157]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[38][0]++;
          cov_1g9zbwmm0d().s[158]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[38][1]++;
        }
        cov_1g9zbwmm0d().s[159]++;
        throw new UserError(`Failed to get directory stats: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[39][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,