e4ecaf94dec32a4152bd45c1a7236149
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const parameterMapper_js_1 = require("../../utils/parameterMapper.js");
const testData_js_1 = require("../testData.js");
(0, globals_1.describe)('ParameterMapper', () => {
    let mapper;
    (0, globals_1.beforeEach)(() => {
        mapper = new parameterMapper_js_1.ParameterMapper();
    });
    (0, globals_1.describe)('mapN8nParametersToMCP', () => {
        (0, globals_1.it)('should map simple parameters correctly', () => {
            const nodeParameters = {
                message: 'Test message',
                count: 5,
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result.name).toBe('simple_test');
            (0, globals_1.expect)(result.arguments).toEqual({
                message: 'Test message',
                count: 5,
            });
        });
        (0, globals_1.it)('should use default values for missing optional parameters', () => {
            const nodeParameters = {
                message: 'Test message',
                // count is missing, should use no default (not in schema)
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result.arguments).toEqual({
                message: 'Test message',
                // count should not be included since it's not required and has no default
            });
        });
        (0, globals_1.it)('should use schema defaults when provided', () => {
            const toolWithDefaults = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    ...testData_js_1.mockSimpleTool.inputSchema,
                    properties: {
                        ...testData_js_1.mockSimpleTool.inputSchema.properties,
                        message: {
                            ...testData_js_1.mockSimpleTool.inputSchema.properties.message,
                            default: 'Default message',
                        },
                    },
                    required: [], // Make message optional to test default
                },
            };
            const nodeParameters = {
            // message is missing, should use default
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, toolWithDefaults);
            (0, globals_1.expect)(result.arguments).toEqual({
                message: 'Default message',
            });
        });
        (0, globals_1.it)('should throw error for missing required parameters', () => {
            const nodeParameters = {
                count: 5,
                // message is required but missing
            };
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            }).toThrow("Required parameter 'message' is missing or empty");
        });
        (0, globals_1.it)('should handle complex nested parameters', () => {
            const nodeParameters = {
                operation: 'create',
                config: {
                    enabled: true,
                    timeout: 10.5,
                },
                items: [
                    { id: 'item1', value: 100 },
                    { id: 'item2', value: 200 },
                ],
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockComplexTool);
            (0, globals_1.expect)(result.arguments).toEqual({
                operation: 'create',
                config: {
                    enabled: true,
                    timeout: 10.5,
                },
                items: [
                    { id: 'item1', value: 100 },
                    { id: 'item2', value: 200 },
                ],
            });
        });
        (0, globals_1.it)('should handle enum parameters', () => {
            const nodeParameters = {
                priority: 'high',
                status: 3,
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockEnumTool);
            (0, globals_1.expect)(result.arguments).toEqual({
                priority: 'high',
                status: 3,
            });
        });
        (0, globals_1.it)('should skip null, undefined, and empty string values for optional parameters', () => {
            const nodeParameters = {
                message: 'Valid message',
                count: null,
                optional: undefined,
                empty: '',
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result.arguments).toEqual({
                message: 'Valid message',
            });
        });
        (0, globals_1.it)('should validate mapped arguments against schema', () => {
            const nodeParameters = {
                message: 'Valid message',
                unexpectedParam: 'should cause error',
            };
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            }).toThrow("Unexpected parameter 'unexpectedParam'");
        });
        (0, globals_1.it)('should allow additional properties when schema permits', () => {
            const flexibleTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    ...testData_js_1.mockSimpleTool.inputSchema,
                    additionalProperties: true,
                },
            };
            const nodeParameters = {
                message: 'Valid message',
                extraParam: 'should be allowed',
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, flexibleTool);
            (0, globals_1.expect)(result.arguments).toEqual({
                message: 'Valid message',
                extraParam: 'should be allowed',
            });
        });
    });
    (0, globals_1.describe)('expression resolution', () => {
        testData_js_1.expressionTestCases.forEach(({ input, expected, description }) => {
            (0, globals_1.it)(`should resolve ${description}`, () => {
                const nodeParameters = {
                    message: input,
                };
                const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
                (0, globals_1.expect)(result.arguments.message).toBe(expected);
            });
        });
        (0, globals_1.it)('should handle expressions with missing input data', () => {
            const nodeParameters = {
                message: '{{ $json.name }}',
            };
            const emptyInputData = [];
            const result = mapper.mapN8nParametersToMCP(nodeParameters, emptyInputData, testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result.arguments.message).toBe('{{ $json.name }}');
        });
        (0, globals_1.it)('should handle expressions with malformed input data', () => {
            const nodeParameters = {
                message: '{{ $json.name }}',
            };
            const malformedInputData = [
                {
                    json: null,
                    pairedItem: { item: 0 },
                },
            ];
            const result = mapper.mapN8nParametersToMCP(nodeParameters, malformedInputData, testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result.arguments.message).toBe('{{ $json.name }}');
        });
        (0, globals_1.it)('should handle deeply nested expression paths', () => {
            const nodeParameters = {
                message: '{{ $json.nested.array.0 }}',
            };
            // Modify test data to include array access
            const inputDataWithArray = [
                {
                    json: {
                        nested: {
                            array: ['first', 'second', 'third'],
                        },
                    },
                    pairedItem: { item: 0 },
                },
            ];
            const result = mapper.mapN8nParametersToMCP(nodeParameters, inputDataWithArray, testData_js_1.mockSimpleTool);
            // Note: Our current implementation doesn't handle array indexing
            // This would need to be enhanced for full expression support
            (0, globals_1.expect)(result.arguments.message).toBe('{{ $json.nested.array.0 }}');
        });
    });
    (0, globals_1.describe)('type conversion', () => {
        testData_js_1.typeConversionTestCases.forEach((testCase) => {
            const { input, type, expected, expectedError } = testCase;
            if (expectedError) {
                (0, globals_1.it)(`should throw error when converting ${JSON.stringify(input)} to ${type}`, () => {
                    const tool = {
                        name: 'test',
                        description: 'Test tool',
                        inputSchema: {
                            type: 'object',
                            properties: {
                                testParam: {
                                    type: type,
                                },
                            },
                            required: ['testParam'],
                        },
                    };
                    const nodeParameters = {
                        testParam: input,
                    };
                    (0, globals_1.expect)(() => {
                        mapper.mapN8nParametersToMCP(nodeParameters, [], tool);
                    }).toThrow(globals_1.expect.stringContaining(expectedError));
                });
            }
            else {
                (0, globals_1.it)(`should convert ${JSON.stringify(input)} to ${type} = ${JSON.stringify(expected)}`, () => {
                    const tool = {
                        name: 'test',
                        description: 'Test tool',
                        inputSchema: {
                            type: 'object',
                            properties: {
                                testParam: {
                                    type: type,
                                },
                            },
                            required: ['testParam'],
                        },
                    };
                    const nodeParameters = {
                        testParam: input,
                    };
                    const result = mapper.mapN8nParametersToMCP(nodeParameters, [], tool);
                    (0, globals_1.expect)(result.arguments.testParam).toEqual(expected);
                });
            }
        });
        (0, globals_1.it)('should handle string constraints validation', () => {
            const nodeParameters = {
                email: 'test@example.com',
                password: 'validpassword123',
                website: 'https://example.com',
                code: 'ABC123',
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockStringConstraintsTool);
            (0, globals_1.expect)(result.arguments).toEqual(nodeParameters);
        });
        (0, globals_1.it)('should validate string length constraints', () => {
            const shortPasswordTool = {
                ...testData_js_1.mockStringConstraintsTool,
                inputSchema: {
                    ...testData_js_1.mockStringConstraintsTool.inputSchema,
                    required: ['password'],
                },
            };
            const nodeParameters = {
                password: '123', // Too short
            };
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, shortPasswordTool);
            }).toThrow('String value too short');
        });
        (0, globals_1.it)('should validate string pattern constraints', () => {
            const nodeParameters = {
                email: 'test@example.com',
                code: 'invalid-format', // Doesn't match pattern
            };
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockStringConstraintsTool);
            }).toThrow('String value does not match required pattern');
        });
        (0, globals_1.it)('should validate enum constraints', () => {
            const nodeParameters = {
                priority: 'invalid-priority', // Not in enum
            };
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockEnumTool);
            }).toThrow('Invalid enum value');
        });
        (0, globals_1.it)('should validate number constraints', () => {
            const numberTool = {
                name: 'number_test',
                description: 'Test number constraints',
                inputSchema: {
                    type: 'object',
                    properties: {
                        value: {
                            type: 'number',
                            minimum: 10,
                            maximum: 100,
                        },
                    },
                    required: ['value'],
                },
            };
            // Test value too small
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP({ value: 5 }, [], numberTool);
            }).toThrow('Number too small');
            // Test value too large
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP({ value: 150 }, [], numberTool);
            }).toThrow('Number too large');
            // Test valid value
            const result = mapper.mapN8nParametersToMCP({ value: 50 }, [], numberTool);
            (0, globals_1.expect)(result.arguments.value).toBe(50);
        });
        (0, globals_1.it)('should handle array conversion with item schemas', () => {
            const arrayTool = {
                name: 'array_test',
                description: 'Test array conversion',
                inputSchema: {
                    type: 'object',
                    properties: {
                        items: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                        },
                    },
                    required: ['items'],
                },
            };
            const nodeParameters = {
                items: ['item1', 'item2', 123], // Mixed types
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, [], arrayTool);
            (0, globals_1.expect)(result.arguments.items).toEqual(['item1', 'item2', '123']);
        });
        (0, globals_1.it)('should handle object conversion with property schemas', () => {
            const objectTool = {
                name: 'object_test',
                description: 'Test object conversion',
                inputSchema: {
                    type: 'object',
                    properties: {
                        config: {
                            type: 'object',
                            properties: {
                                name: { type: 'string' },
                                count: { type: 'number' },
                            },
                        },
                    },
                    required: ['config'],
                },
            };
            const nodeParameters = {
                config: {
                    name: 'test',
                    count: '42', // String that should convert to number
                    extra: 'ignored', // Should be filtered out
                },
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, [], objectTool);
            (0, globals_1.expect)(result.arguments.config).toEqual({
                name: 'test',
                count: 42,
            });
        });
    });
    (0, globals_1.describe)('mapMCPResponseToN8n', () => {
        (0, globals_1.it)('should map standard MCP response with content array', () => {
            const result = mapper.mapMCPResponseToN8n(testData_js_1.mockMCPToolResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(2);
            (0, globals_1.expect)(result[0].json).toMatchObject({
                type: 'text',
                index: 0,
                text: 'Operation completed successfully',
            });
            (0, globals_1.expect)(result[1].json).toMatchObject({
                type: 'image',
                index: 1,
                mimeType: 'image/png',
                hasData: true,
            });
            (0, globals_1.expect)(result[1].binary).toBeDefined();
            (0, globals_1.expect)(result[1].binary.data.mimeType).toBe('image/png');
        });
        (0, globals_1.it)('should map direct object response', () => {
            const directResponse = {
                status: 'success',
                data: { key: 'value' },
            };
            const result = mapper.mapMCPResponseToN8n(directResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].json).toEqual(directResponse);
        });
        (0, globals_1.it)('should map simple value response', () => {
            const simpleResponse = 'Simple text response';
            const result = mapper.mapMCPResponseToN8n(simpleResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].json).toEqual({ result: simpleResponse });
        });
        (0, globals_1.it)('should handle empty response', () => {
            const emptyResponse = null;
            const result = mapper.mapMCPResponseToN8n(emptyResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].json).toEqual({ result: null });
        });
        (0, globals_1.it)('should handle response with no content', () => {
            const emptyContentResponse = { content: [] };
            const result = mapper.mapMCPResponseToN8n(emptyContentResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].json.message).toContain('no output');
        });
        (0, globals_1.it)('should handle different content types', () => {
            const multiContentResponse = {
                content: [
                    {
                        type: 'text',
                        text: 'Text content',
                    },
                    {
                        type: 'resource',
                        uri: 'file://test.txt',
                        mimeType: 'text/plain',
                    },
                    {
                        type: 'unknown',
                        customField: 'custom value',
                    },
                ],
            };
            const result = mapper.mapMCPResponseToN8n(multiContentResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(3);
            (0, globals_1.expect)(result[0].json).toMatchObject({
                type: 'text',
                text: 'Text content',
            });
            (0, globals_1.expect)(result[1].json).toMatchObject({
                type: 'resource',
                uri: 'file://test.txt',
                mimeType: 'text/plain',
            });
            (0, globals_1.expect)(result[2].json).toMatchObject({
                type: 'unknown',
                customField: 'custom value',
            });
        });
        (0, globals_1.it)('should handle binary data with different MIME types', () => {
            const binaryResponse = {
                content: [
                    {
                        type: 'image',
                        data: 'base64-encoded-data',
                        mimeType: 'image/jpeg',
                    },
                ],
            };
            const result = mapper.mapMCPResponseToN8n(binaryResponse, testData_js_1.mockExecutionContext);
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].binary).toBeDefined();
            (0, globals_1.expect)(result[0].binary.data.mimeType).toBe('image/jpeg');
            (0, globals_1.expect)(result[0].binary.data.fileName).toBe('mcp_response_0.jpg');
        });
        (0, globals_1.it)('should handle processing errors gracefully', () => {
            const invalidResponse = {
                content: [
                    {
                    // Missing required fields that might cause processing to fail
                    },
                ],
            };
            const result = mapper.mapMCPResponseToN8n(invalidResponse, testData_js_1.mockExecutionContext);
            // Should still return a result, possibly with error information
            (0, globals_1.expect)(result).toHaveLength(1);
            (0, globals_1.expect)(result[0].json).toBeDefined();
        });
        (0, globals_1.it)('should get correct file extensions for MIME types', () => {
            const mimeTestCases = [
                { mimeType: 'image/png', expectedExt: 'png' },
                { mimeType: 'image/jpeg', expectedExt: 'jpg' },
                { mimeType: 'text/plain', expectedExt: 'txt' },
                { mimeType: 'application/json', expectedExt: 'json' },
                { mimeType: 'unknown/type', expectedExt: 'bin' },
                { mimeType: undefined, expectedExt: 'bin' },
            ];
            mimeTestCases.forEach(({ mimeType, expectedExt }, index) => {
                const response = {
                    content: [
                        {
                            type: 'image',
                            data: 'test-data',
                            mimeType,
                        },
                    ],
                };
                const result = mapper.mapMCPResponseToN8n(response, testData_js_1.mockExecutionContext);
                if (result[0].binary) {
                    (0, globals_1.expect)(result[0].binary.data.fileName).toBe(`mcp_response_0.${expectedExt}`);
                }
            });
        });
    });
    (0, globals_1.describe)('validation utilities', () => {
        (0, globals_1.it)('should create validation summary for tool parameters', () => {
            const summary = mapper.createValidationSummary(testData_js_1.mockStringConstraintsTool);
            (0, globals_1.expect)(summary.email).toMatchObject({
                type: 'string',
                required: true,
                hasDefault: false,
                constraints: {},
            });
            (0, globals_1.expect)(summary.password).toMatchObject({
                type: 'string',
                required: false,
                hasDefault: false,
                constraints: {
                    minLength: 8,
                    maxLength: 128,
                },
            });
            (0, globals_1.expect)(summary.code).toMatchObject({
                type: 'string',
                required: false,
                hasDefault: false,
                constraints: {
                    pattern: '^[A-Z]{3}[0-9]{3}$',
                },
            });
        });
        (0, globals_1.it)('should identify parameters with defaults', () => {
            const summary = mapper.createValidationSummary(testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(summary.message).toMatchObject({
                hasDefault: true,
            });
            (0, globals_1.expect)(summary.count).toMatchObject({
                hasDefault: false,
            });
        });
        (0, globals_1.it)('should extract all constraint types', () => {
            const constrainedTool = {
                name: 'constrained',
                description: 'Tool with all constraint types',
                inputSchema: {
                    type: 'object',
                    properties: {
                        enumParam: {
                            type: 'string',
                            enum: ['a', 'b', 'c'],
                        },
                        numberParam: {
                            type: 'number',
                            minimum: 0,
                            maximum: 100,
                        },
                        stringParam: {
                            type: 'string',
                            minLength: 5,
                            maxLength: 50,
                            pattern: '^test',
                        },
                    },
                },
            };
            const summary = mapper.createValidationSummary(constrainedTool);
            (0, globals_1.expect)(summary.enumParam.constraints).toMatchObject({
                enum: ['a', 'b', 'c'],
            });
            (0, globals_1.expect)(summary.numberParam.constraints).toMatchObject({
                minimum: 0,
                maximum: 100,
            });
            (0, globals_1.expect)(summary.stringParam.constraints).toMatchObject({
                minLength: 5,
                maxLength: 50,
                pattern: '^test',
            });
        });
    });
    (0, globals_1.describe)('edge cases and error handling', () => {
        (0, globals_1.it)('should handle circular JSON in string conversion', () => {
            const circularObj = { prop: 'value' };
            circularObj.self = circularObj;
            // JSON.stringify will throw on circular references
            const nodeParameters = {
                message: circularObj, // This should be converted to string
            };
            // The conversion should handle this gracefully
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP(nodeParameters, testData_js_1.mockN8nExecutionData, testData_js_1.mockSimpleTool);
            }).toThrow(); // JSON.stringify will throw on circular reference
        });
        (0, globals_1.it)('should handle very large numbers', () => {
            const largeNumberTool = {
                name: 'large_number',
                description: 'Test large numbers',
                inputSchema: {
                    type: 'object',
                    properties: {
                        value: { type: 'number' },
                    },
                    required: ['value'],
                },
            };
            const nodeParameters = {
                value: Number.MAX_SAFE_INTEGER,
            };
            const result = mapper.mapN8nParametersToMCP(nodeParameters, [], largeNumberTool);
            (0, globals_1.expect)(result.arguments.value).toBe(Number.MAX_SAFE_INTEGER);
        });
        (0, globals_1.it)('should handle special number values', () => {
            const specialNumberTool = {
                name: 'special_numbers',
                description: 'Test special number values',
                inputSchema: {
                    type: 'object',
                    properties: {
                        value: { type: 'number' },
                    },
                    required: ['value'],
                },
            };
            // Test NaN
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP({ value: 'not-a-number' }, [], specialNumberTool);
            }).toThrow('Cannot convert');
            // Test Infinity
            const resultInf = mapper.mapN8nParametersToMCP({ value: Infinity }, [], specialNumberTool);
            (0, globals_1.expect)(resultInf.arguments.value).toBe(Infinity);
        });
        (0, globals_1.it)('should handle empty and whitespace strings appropriately', () => {
            const result1 = mapper.mapN8nParametersToMCP({ message: '   ' }, // Whitespace should be preserved
            [], testData_js_1.mockSimpleTool);
            (0, globals_1.expect)(result1.arguments.message).toBe('   ');
            // Empty string should be skipped for optional parameters
            const optionalTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    ...testData_js_1.mockSimpleTool.inputSchema,
                    required: [], // Make message optional
                },
            };
            const result2 = mapper.mapN8nParametersToMCP({ message: '' }, [], optionalTool);
            (0, globals_1.expect)(result2.arguments.message).toBeUndefined();
        });
        (0, globals_1.it)('should handle boolean edge cases', () => {
            const booleanTool = {
                name: 'boolean_test',
                description: 'Test boolean conversion',
                inputSchema: {
                    type: 'object',
                    properties: {
                        flag: { type: 'boolean' },
                    },
                    required: ['flag'],
                },
            };
            const testCases = [
                { input: 'TRUE', expected: true },
                { input: 'FALSE', expected: false },
                { input: 'YES', expected: true },
                { input: 'NO', expected: false },
                { input: '1', expected: true },
                { input: '0', expected: false },
                { input: 1, expected: true },
                { input: 0, expected: false },
                { input: [], expected: true }, // Truthy object
                { input: {}, expected: true }, // Truthy object
            ];
            testCases.forEach(({ input, expected }) => {
                const result = mapper.mapN8nParametersToMCP({ flag: input }, [], booleanTool);
                (0, globals_1.expect)(result.arguments.flag).toBe(expected);
            });
            // Test invalid boolean conversion
            (0, globals_1.expect)(() => {
                mapper.mapN8nParametersToMCP({ flag: 'invalid' }, [], booleanTool);
            }).toThrow('Cannot convert');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,