{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/utils/parameterMapper.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/utils/parameterMapper.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach } from '@jest/globals';\nimport { ParameterMapper } from '../../utils/parameterMapper.js';\nimport {\n  mockSimpleTool,\n  mockComplexTool,\n  mockEnumTool,\n  mockStringConstraintsTool,\n  mockN8nExecutionData,\n  mockExecutionContext,\n  mockMCPToolResponse,\n  expressionTestCases,\n  typeConversionTestCases,\n} from '../testData.js';\nimport { MCPTool, N8nExecutionData } from '../../types/mcpTypes.js';\n\ndescribe('ParameterMapper', () => {\n  let mapper: ParameterMapper;\n\n  beforeEach(() => {\n    mapper = new ParameterMapper();\n  });\n\n  describe('mapN8nParametersToMCP', () => {\n    it('should map simple parameters correctly', () => {\n      const nodeParameters = {\n        message: 'Test message',\n        count: 5,\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockSimpleTool\n      );\n\n      expect(result.name).toBe('simple_test');\n      expect(result.arguments).toEqual({\n        message: 'Test message',\n        count: 5,\n      });\n    });\n\n    it('should use default values for missing optional parameters', () => {\n      const nodeParameters = {\n        message: 'Test message',\n        // count is missing, should use no default (not in schema)\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockSimpleTool\n      );\n\n      expect(result.arguments).toEqual({\n        message: 'Test message',\n        // count should not be included since it's not required and has no default\n      });\n    });\n\n    it('should use schema defaults when provided', () => {\n      const toolWithDefaults: MCPTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          ...mockSimpleTool.inputSchema,\n          properties: {\n            ...mockSimpleTool.inputSchema.properties,\n            message: {\n              ...mockSimpleTool.inputSchema.properties.message,\n              default: 'Default message',\n            },\n          },\n          required: [], // Make message optional to test default\n        },\n      };\n\n      const nodeParameters = {\n        // message is missing, should use default\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        toolWithDefaults\n      );\n\n      expect(result.arguments).toEqual({\n        message: 'Default message',\n      });\n    });\n\n    it('should throw error for missing required parameters', () => {\n      const nodeParameters = {\n        count: 5,\n        // message is required but missing\n      };\n\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockSimpleTool\n        );\n      }).toThrow(\"Required parameter 'message' is missing or empty\");\n    });\n\n    it('should handle complex nested parameters', () => {\n      const nodeParameters = {\n        operation: 'create',\n        config: {\n          enabled: true,\n          timeout: 10.5,\n        },\n        items: [\n          { id: 'item1', value: 100 },\n          { id: 'item2', value: 200 },\n        ],\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockComplexTool\n      );\n\n      expect(result.arguments).toEqual({\n        operation: 'create',\n        config: {\n          enabled: true,\n          timeout: 10.5,\n        },\n        items: [\n          { id: 'item1', value: 100 },\n          { id: 'item2', value: 200 },\n        ],\n      });\n    });\n\n    it('should handle enum parameters', () => {\n      const nodeParameters = {\n        priority: 'high',\n        status: 3,\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockEnumTool\n      );\n\n      expect(result.arguments).toEqual({\n        priority: 'high',\n        status: 3,\n      });\n    });\n\n    it('should skip null, undefined, and empty string values for optional parameters', () => {\n      const nodeParameters = {\n        message: 'Valid message',\n        count: null,\n        optional: undefined,\n        empty: '',\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockSimpleTool\n      );\n\n      expect(result.arguments).toEqual({\n        message: 'Valid message',\n      });\n    });\n\n    it('should validate mapped arguments against schema', () => {\n      const nodeParameters = {\n        message: 'Valid message',\n        unexpectedParam: 'should cause error',\n      };\n\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockSimpleTool\n        );\n      }).toThrow(\"Unexpected parameter 'unexpectedParam'\");\n    });\n\n    it('should allow additional properties when schema permits', () => {\n      const flexibleTool: MCPTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          ...mockSimpleTool.inputSchema,\n          additionalProperties: true,\n        },\n      };\n\n      const nodeParameters = {\n        message: 'Valid message',\n        extraParam: 'should be allowed',\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        flexibleTool\n      );\n\n      expect(result.arguments).toEqual({\n        message: 'Valid message',\n        extraParam: 'should be allowed',\n      });\n    });\n  });\n\n  describe('expression resolution', () => {\n    expressionTestCases.forEach(({ input, expected, description }) => {\n      it(`should resolve ${description}`, () => {\n        const nodeParameters = {\n          message: input,\n        };\n\n        const result = mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockSimpleTool\n        );\n\n        expect(result.arguments.message).toBe(expected);\n      });\n    });\n\n    it('should handle expressions with missing input data', () => {\n      const nodeParameters = {\n        message: '{{ $json.name }}',\n      };\n\n      const emptyInputData: N8nExecutionData[] = [];\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        emptyInputData,\n        mockSimpleTool\n      );\n\n      expect(result.arguments.message).toBe('{{ $json.name }}');\n    });\n\n    it('should handle expressions with malformed input data', () => {\n      const nodeParameters = {\n        message: '{{ $json.name }}',\n      };\n\n      const malformedInputData: N8nExecutionData[] = [\n        {\n          json: null as any,\n          pairedItem: { item: 0 },\n        },\n      ];\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        malformedInputData,\n        mockSimpleTool\n      );\n\n      expect(result.arguments.message).toBe('{{ $json.name }}');\n    });\n\n    it('should handle deeply nested expression paths', () => {\n      const nodeParameters = {\n        message: '{{ $json.nested.array.0 }}',\n      };\n\n      // Modify test data to include array access\n      const inputDataWithArray: N8nExecutionData[] = [\n        {\n          json: {\n            nested: {\n              array: ['first', 'second', 'third'],\n            },\n          },\n          pairedItem: { item: 0 },\n        },\n      ];\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        inputDataWithArray,\n        mockSimpleTool\n      );\n\n      // Note: Our current implementation doesn't handle array indexing\n      // This would need to be enhanced for full expression support\n      expect(result.arguments.message).toBe('{{ $json.nested.array.0 }}');\n    });\n  });\n\n  describe('type conversion', () => {\n    typeConversionTestCases.forEach((testCase) => {\n      const { input, type, expected, expectedError } = testCase;\n\n      if (expectedError) {\n        it(`should throw error when converting ${JSON.stringify(input)} to ${type}`, () => {\n          const tool: MCPTool = {\n            name: 'test',\n            description: 'Test tool',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                testParam: {\n                  type: type as any,\n                },\n              },\n              required: ['testParam'],\n            },\n          };\n\n          const nodeParameters = {\n            testParam: input,\n          };\n\n          expect(() => {\n            mapper.mapN8nParametersToMCP(nodeParameters, [], tool);\n          }).toThrow(expect.stringContaining(expectedError));\n        });\n      } else {\n        it(`should convert ${JSON.stringify(input)} to ${type} = ${JSON.stringify(expected)}`, () => {\n          const tool: MCPTool = {\n            name: 'test',\n            description: 'Test tool',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                testParam: {\n                  type: type as any,\n                },\n              },\n              required: ['testParam'],\n            },\n          };\n\n          const nodeParameters = {\n            testParam: input,\n          };\n\n          const result = mapper.mapN8nParametersToMCP(nodeParameters, [], tool);\n          expect(result.arguments.testParam).toEqual(expected);\n        });\n      }\n    });\n\n    it('should handle string constraints validation', () => {\n      const nodeParameters = {\n        email: 'test@example.com',\n        password: 'validpassword123',\n        website: 'https://example.com',\n        code: 'ABC123',\n      };\n\n      const result = mapper.mapN8nParametersToMCP(\n        nodeParameters,\n        mockN8nExecutionData,\n        mockStringConstraintsTool\n      );\n\n      expect(result.arguments).toEqual(nodeParameters);\n    });\n\n    it('should validate string length constraints', () => {\n      const shortPasswordTool: MCPTool = {\n        ...mockStringConstraintsTool,\n        inputSchema: {\n          ...mockStringConstraintsTool.inputSchema,\n          required: ['password'],\n        },\n      };\n\n      const nodeParameters = {\n        password: '123', // Too short\n      };\n\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          shortPasswordTool\n        );\n      }).toThrow('String value too short');\n    });\n\n    it('should validate string pattern constraints', () => {\n      const nodeParameters = {\n        email: 'test@example.com',\n        code: 'invalid-format', // Doesn't match pattern\n      };\n\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockStringConstraintsTool\n        );\n      }).toThrow('String value does not match required pattern');\n    });\n\n    it('should validate enum constraints', () => {\n      const nodeParameters = {\n        priority: 'invalid-priority', // Not in enum\n      };\n\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockEnumTool\n        );\n      }).toThrow('Invalid enum value');\n    });\n\n    it('should validate number constraints', () => {\n      const numberTool: MCPTool = {\n        name: 'number_test',\n        description: 'Test number constraints',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            value: {\n              type: 'number',\n              minimum: 10,\n              maximum: 100,\n            },\n          },\n          required: ['value'],\n        },\n      };\n\n      // Test value too small\n      expect(() => {\n        mapper.mapN8nParametersToMCP({ value: 5 }, [], numberTool);\n      }).toThrow('Number too small');\n\n      // Test value too large\n      expect(() => {\n        mapper.mapN8nParametersToMCP({ value: 150 }, [], numberTool);\n      }).toThrow('Number too large');\n\n      // Test valid value\n      const result = mapper.mapN8nParametersToMCP({ value: 50 }, [], numberTool);\n      expect(result.arguments.value).toBe(50);\n    });\n\n    it('should handle array conversion with item schemas', () => {\n      const arrayTool: MCPTool = {\n        name: 'array_test',\n        description: 'Test array conversion',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            items: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n          },\n          required: ['items'],\n        },\n      };\n\n      const nodeParameters = {\n        items: ['item1', 'item2', 123], // Mixed types\n      };\n\n      const result = mapper.mapN8nParametersToMCP(nodeParameters, [], arrayTool);\n      expect(result.arguments.items).toEqual(['item1', 'item2', '123']);\n    });\n\n    it('should handle object conversion with property schemas', () => {\n      const objectTool: MCPTool = {\n        name: 'object_test',\n        description: 'Test object conversion',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            config: {\n              type: 'object',\n              properties: {\n                name: { type: 'string' },\n                count: { type: 'number' },\n              },\n            },\n          },\n          required: ['config'],\n        },\n      };\n\n      const nodeParameters = {\n        config: {\n          name: 'test',\n          count: '42', // String that should convert to number\n          extra: 'ignored', // Should be filtered out\n        },\n      };\n\n      const result = mapper.mapN8nParametersToMCP(nodeParameters, [], objectTool);\n      expect(result.arguments.config).toEqual({\n        name: 'test',\n        count: 42,\n      });\n    });\n  });\n\n  describe('mapMCPResponseToN8n', () => {\n    it('should map standard MCP response with content array', () => {\n      const result = mapper.mapMCPResponseToN8n(mockMCPToolResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(2);\n      expect(result[0].json).toMatchObject({\n        type: 'text',\n        index: 0,\n        text: 'Operation completed successfully',\n      });\n      expect(result[1].json).toMatchObject({\n        type: 'image',\n        index: 1,\n        mimeType: 'image/png',\n        hasData: true,\n      });\n      expect(result[1].binary).toBeDefined();\n      expect(result[1].binary!.data.mimeType).toBe('image/png');\n    });\n\n    it('should map direct object response', () => {\n      const directResponse = {\n        status: 'success',\n        data: { key: 'value' },\n      };\n\n      const result = mapper.mapMCPResponseToN8n(directResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].json).toEqual(directResponse);\n    });\n\n    it('should map simple value response', () => {\n      const simpleResponse = 'Simple text response';\n\n      const result = mapper.mapMCPResponseToN8n(simpleResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].json).toEqual({ result: simpleResponse });\n    });\n\n    it('should handle empty response', () => {\n      const emptyResponse = null;\n\n      const result = mapper.mapMCPResponseToN8n(emptyResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].json).toEqual({ result: null });\n    });\n\n    it('should handle response with no content', () => {\n      const emptyContentResponse = { content: [] };\n\n      const result = mapper.mapMCPResponseToN8n(emptyContentResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].json.message).toContain('no output');\n    });\n\n    it('should handle different content types', () => {\n      const multiContentResponse = {\n        content: [\n          {\n            type: 'text',\n            text: 'Text content',\n          },\n          {\n            type: 'resource',\n            uri: 'file://test.txt',\n            mimeType: 'text/plain',\n          },\n          {\n            type: 'unknown',\n            customField: 'custom value',\n          },\n        ],\n      };\n\n      const result = mapper.mapMCPResponseToN8n(multiContentResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(3);\n      \n      expect(result[0].json).toMatchObject({\n        type: 'text',\n        text: 'Text content',\n      });\n      \n      expect(result[1].json).toMatchObject({\n        type: 'resource',\n        uri: 'file://test.txt',\n        mimeType: 'text/plain',\n      });\n      \n      expect(result[2].json).toMatchObject({\n        type: 'unknown',\n        customField: 'custom value',\n      });\n    });\n\n    it('should handle binary data with different MIME types', () => {\n      const binaryResponse = {\n        content: [\n          {\n            type: 'image',\n            data: 'base64-encoded-data',\n            mimeType: 'image/jpeg',\n          },\n        ],\n      };\n\n      const result = mapper.mapMCPResponseToN8n(binaryResponse, mockExecutionContext);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].binary).toBeDefined();\n      expect(result[0].binary!.data.mimeType).toBe('image/jpeg');\n      expect(result[0].binary!.data.fileName).toBe('mcp_response_0.jpg');\n    });\n\n    it('should handle processing errors gracefully', () => {\n      const invalidResponse = {\n        content: [\n          {\n            // Missing required fields that might cause processing to fail\n          },\n        ],\n      };\n\n      const result = mapper.mapMCPResponseToN8n(invalidResponse, mockExecutionContext);\n\n      // Should still return a result, possibly with error information\n      expect(result).toHaveLength(1);\n      expect(result[0].json).toBeDefined();\n    });\n\n    it('should get correct file extensions for MIME types', () => {\n      const mimeTestCases = [\n        { mimeType: 'image/png', expectedExt: 'png' },\n        { mimeType: 'image/jpeg', expectedExt: 'jpg' },\n        { mimeType: 'text/plain', expectedExt: 'txt' },\n        { mimeType: 'application/json', expectedExt: 'json' },\n        { mimeType: 'unknown/type', expectedExt: 'bin' },\n        { mimeType: undefined, expectedExt: 'bin' },\n      ];\n\n      mimeTestCases.forEach(({ mimeType, expectedExt }, index) => {\n        const response = {\n          content: [\n            {\n              type: 'image',\n              data: 'test-data',\n              mimeType,\n            },\n          ],\n        };\n\n        const result = mapper.mapMCPResponseToN8n(response, mockExecutionContext);\n        \n        if (result[0].binary) {\n          expect(result[0].binary.data.fileName).toBe(`mcp_response_0.${expectedExt}`);\n        }\n      });\n    });\n  });\n\n  describe('validation utilities', () => {\n    it('should create validation summary for tool parameters', () => {\n      const summary = mapper.createValidationSummary(mockStringConstraintsTool);\n\n      expect(summary.email).toMatchObject({\n        type: 'string',\n        required: true,\n        hasDefault: false,\n        constraints: {},\n      });\n\n      expect(summary.password).toMatchObject({\n        type: 'string',\n        required: false,\n        hasDefault: false,\n        constraints: {\n          minLength: 8,\n          maxLength: 128,\n        },\n      });\n\n      expect(summary.code).toMatchObject({\n        type: 'string',\n        required: false,\n        hasDefault: false,\n        constraints: {\n          pattern: '^[A-Z]{3}[0-9]{3}$',\n        },\n      });\n    });\n\n    it('should identify parameters with defaults', () => {\n      const summary = mapper.createValidationSummary(mockSimpleTool);\n\n      expect(summary.message).toMatchObject({\n        hasDefault: true,\n      });\n      expect(summary.count).toMatchObject({\n        hasDefault: false,\n      });\n    });\n\n    it('should extract all constraint types', () => {\n      const constrainedTool: MCPTool = {\n        name: 'constrained',\n        description: 'Tool with all constraint types',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            enumParam: {\n              type: 'string',\n              enum: ['a', 'b', 'c'],\n            },\n            numberParam: {\n              type: 'number',\n              minimum: 0,\n              maximum: 100,\n            },\n            stringParam: {\n              type: 'string',\n              minLength: 5,\n              maxLength: 50,\n              pattern: '^test',\n            },\n          },\n        },\n      };\n\n      const summary = mapper.createValidationSummary(constrainedTool);\n\n      expect(summary.enumParam.constraints).toMatchObject({\n        enum: ['a', 'b', 'c'],\n      });\n\n      expect(summary.numberParam.constraints).toMatchObject({\n        minimum: 0,\n        maximum: 100,\n      });\n\n      expect(summary.stringParam.constraints).toMatchObject({\n        minLength: 5,\n        maxLength: 50,\n        pattern: '^test',\n      });\n    });\n  });\n\n  describe('edge cases and error handling', () => {\n    it('should handle circular JSON in string conversion', () => {\n      const circularObj: any = { prop: 'value' };\n      circularObj.self = circularObj;\n\n      // JSON.stringify will throw on circular references\n      const nodeParameters = {\n        message: circularObj, // This should be converted to string\n      };\n\n      // The conversion should handle this gracefully\n      expect(() => {\n        mapper.mapN8nParametersToMCP(\n          nodeParameters,\n          mockN8nExecutionData,\n          mockSimpleTool\n        );\n      }).toThrow(); // JSON.stringify will throw on circular reference\n    });\n\n    it('should handle very large numbers', () => {\n      const largeNumberTool: MCPTool = {\n        name: 'large_number',\n        description: 'Test large numbers',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            value: { type: 'number' },\n          },\n          required: ['value'],\n        },\n      };\n\n      const nodeParameters = {\n        value: Number.MAX_SAFE_INTEGER,\n      };\n\n      const result = mapper.mapN8nParametersToMCP(nodeParameters, [], largeNumberTool);\n      expect(result.arguments.value).toBe(Number.MAX_SAFE_INTEGER);\n    });\n\n    it('should handle special number values', () => {\n      const specialNumberTool: MCPTool = {\n        name: 'special_numbers',\n        description: 'Test special number values',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            value: { type: 'number' },\n          },\n          required: ['value'],\n        },\n      };\n\n      // Test NaN\n      expect(() => {\n        mapper.mapN8nParametersToMCP({ value: 'not-a-number' }, [], specialNumberTool);\n      }).toThrow('Cannot convert');\n\n      // Test Infinity\n      const resultInf = mapper.mapN8nParametersToMCP(\n        { value: Infinity },\n        [],\n        specialNumberTool\n      );\n      expect(resultInf.arguments.value).toBe(Infinity);\n    });\n\n    it('should handle empty and whitespace strings appropriately', () => {\n      const result1 = mapper.mapN8nParametersToMCP(\n        { message: '   ' }, // Whitespace should be preserved\n        [],\n        mockSimpleTool\n      );\n      expect(result1.arguments.message).toBe('   ');\n\n      // Empty string should be skipped for optional parameters\n      const optionalTool: MCPTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          ...mockSimpleTool.inputSchema,\n          required: [], // Make message optional\n        },\n      };\n\n      const result2 = mapper.mapN8nParametersToMCP(\n        { message: '' },\n        [],\n        optionalTool\n      );\n      expect(result2.arguments.message).toBeUndefined();\n    });\n\n    it('should handle boolean edge cases', () => {\n      const booleanTool: MCPTool = {\n        name: 'boolean_test',\n        description: 'Test boolean conversion',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            flag: { type: 'boolean' },\n          },\n          required: ['flag'],\n        },\n      };\n\n      const testCases = [\n        { input: 'TRUE', expected: true },\n        { input: 'FALSE', expected: false },\n        { input: 'YES', expected: true },\n        { input: 'NO', expected: false },\n        { input: '1', expected: true },\n        { input: '0', expected: false },\n        { input: 1, expected: true },\n        { input: 0, expected: false },\n        { input: [], expected: true }, // Truthy object\n        { input: {}, expected: true }, // Truthy object\n      ];\n\n      testCases.forEach(({ input, expected }) => {\n        const result = mapper.mapN8nParametersToMCP({ flag: input }, [], booleanTool);\n        expect(result.arguments.flag).toBe(expected);\n      });\n\n      // Test invalid boolean conversion\n      expect(() => {\n        mapper.mapN8nParametersToMCP({ flag: 'invalid' }, [], booleanTool);\n      }).toThrow('Cannot convert');\n    });\n  });\n});"],"version":3}