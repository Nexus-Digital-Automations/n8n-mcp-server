{"version":3,"names":["cov_t0u8xt9l2","actualCoverage","N8nClient","BaseAuthProvider","N8nAuthProvider","config","authCache","s","Map","constructor","b","f","required","defaultBaseUrl","process","env","N8N_BASE_URL","defaultApiKey","N8N_API_KEY","validateConnection","cacheDuration","defaultRoles","authenticate","context","createAnonymousAuth","credentials","extractCredentials","success","error","cacheKey","getCacheKey","cached","get","expires","Date","now","result","authResult","validateCredentials","set","Error","message","String","refresh","user","baseUrl","n8nBaseUrl","apiKey","n8nApiKey","delete","id","name","roles","permissions","community","enterprise","workflows","executions","users","audit","authType","features","headers","replace","client","getWorkflows","limit","createAuthenticatedUser","detectFeatures","detectUserRoles","createPermissions","slice","getUsers","push","getProjects","Set","clearCache","clear","getCacheStats","validEntries","key","entry","entries","size","createN8nAuth","N8N_MCP_AUTH_REQUIRED","N8N_MCP_VALIDATE_CONNECTION","N8N_MCP_AUTH_CACHE_DURATION","parseInt","undefined","N8N_MCP_DEFAULT_ROLES","split","defaultN8nAuth"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/n8nAuth.ts"],"sourcesContent":["/**\n * n8n-specific Authentication Provider\n *\n * Implements authentication for n8n MCP server using n8n API keys and role-based access control.\n * Supports both Community and Enterprise n8n instances with appropriate feature detection.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  AuthProvider,\n  BaseAuthProvider,\n  RequestContext,\n  AuthResult,\n  AuthenticatedUser,\n} from './authProvider.js';\n\n/**\n * n8n authentication configuration\n */\nexport interface N8nAuthConfig {\n  /** Whether authentication is required (default: false for backward compatibility) */\n  required?: boolean;\n\n  /** Default n8n instance URL (can be overridden per request) */\n  defaultBaseUrl?: string;\n\n  /** Default n8n API key (can be overridden per request) */\n  defaultApiKey?: string;\n\n  /** Whether to validate n8n connection during authentication */\n  validateConnection?: boolean;\n\n  /** Cache authentication results for this duration (ms) */\n  cacheDuration?: number;\n\n  /** Default user roles for authenticated users */\n  defaultRoles?: string[];\n}\n\n/**\n * Authentication cache entry\n */\ninterface AuthCacheEntry {\n  result: AuthResult;\n  expires: number;\n}\n\n/**\n * n8n authentication provider\n *\n * Provides authentication using n8n API keys with role-based access control.\n * Supports both authenticated and anonymous access based on configuration.\n */\nexport class N8nAuthProvider extends BaseAuthProvider {\n  private config: Required<N8nAuthConfig>;\n  private authCache = new Map<string, AuthCacheEntry>();\n\n  constructor(config: N8nAuthConfig = {}) {\n    super();\n\n    // Set defaults\n    this.config = {\n      required: false,\n      defaultBaseUrl: process.env.N8N_BASE_URL || '',\n      defaultApiKey: process.env.N8N_API_KEY || '',\n      validateConnection: true,\n      cacheDuration: 5 * 60 * 1000, // 5 minutes\n      defaultRoles: ['member'],\n      ...config,\n    };\n  }\n\n  /**\n   * Authenticate client request\n   */\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    try {\n      // If authentication is not required, allow anonymous access\n      if (!this.config.required) {\n        return this.createAnonymousAuth(context);\n      }\n\n      // Extract credentials from context\n      const credentials = this.extractCredentials(context);\n      if (!credentials) {\n        return {\n          success: false,\n          error: 'Authentication required but no credentials provided',\n        };\n      }\n\n      // Check cache first\n      const cacheKey = this.getCacheKey(credentials);\n      const cached = this.authCache.get(cacheKey);\n      if (cached && cached.expires > Date.now()) {\n        return cached.result;\n      }\n\n      // Validate credentials\n      const authResult = await this.validateCredentials(credentials);\n\n      // Cache successful results\n      if (authResult.success && this.config.cacheDuration > 0) {\n        this.authCache.set(cacheKey, {\n          result: authResult,\n          expires: Date.now() + this.config.cacheDuration,\n        });\n      }\n\n      return authResult;\n    } catch (error) {\n      return {\n        success: false,\n        error: `Authentication failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  /**\n   * Refresh authentication\n   */\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    // Clear cache and re-authenticate\n    if (context.user) {\n      const cacheKey = this.getCacheKey({\n        baseUrl: context.user.n8nBaseUrl || this.config.defaultBaseUrl,\n        apiKey: context.user.n8nApiKey || this.config.defaultApiKey,\n      });\n      this.authCache.delete(cacheKey);\n    }\n\n    return this.authenticate(context);\n  }\n\n  /**\n   * Create anonymous authentication result\n   */\n  private createAnonymousAuth(context: RequestContext): AuthResult {\n    const user: AuthenticatedUser = {\n      id: 'anonymous',\n      name: 'Anonymous User',\n      roles: ['anonymous'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n      n8nBaseUrl: this.config.defaultBaseUrl,\n      n8nApiKey: this.config.defaultApiKey,\n    };\n\n    return {\n      success: true,\n      user,\n      context: {\n        authType: 'anonymous',\n        features: ['community'],\n      },\n    };\n  }\n\n  /**\n   * Extract credentials from request context\n   */\n  private extractCredentials(context: RequestContext): { baseUrl: string; apiKey: string } | null {\n    const headers = context.headers || {};\n\n    // Try different credential sources\n    const apiKey =\n      headers['x-n8n-api-key'] ||\n      headers['authorization']?.replace(/^Bearer\\s+/, '') ||\n      this.config.defaultApiKey;\n\n    const baseUrl = headers['x-n8n-base-url'] || this.config.defaultBaseUrl;\n\n    if (!apiKey || !baseUrl) {\n      return null;\n    }\n\n    return { baseUrl, apiKey };\n  }\n\n  /**\n   * Validate credentials against n8n instance\n   */\n  private async validateCredentials(credentials: {\n    baseUrl: string;\n    apiKey: string;\n  }): Promise<AuthResult> {\n    try {\n      // Create n8n client to test connection\n      const client = new N8nClient(credentials.baseUrl, credentials.apiKey);\n\n      if (this.config.validateConnection) {\n        // Test connection by fetching user info or workflows\n        try {\n          await client.getWorkflows({ limit: 1 });\n        } catch (error) {\n          return {\n            success: false,\n            error: `Invalid n8n credentials or connection failed: ${error instanceof Error ? error.message : String(error)}`,\n          };\n        }\n      }\n\n      // Create authenticated user\n      const user = await this.createAuthenticatedUser(credentials, client);\n\n      return {\n        success: true,\n        user,\n        context: {\n          authType: 'n8n-api-key',\n          features: this.detectFeatures(user),\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Authentication validation failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  /**\n   * Create authenticated user from credentials\n   */\n  private async createAuthenticatedUser(\n    credentials: { baseUrl: string; apiKey: string },\n    client: N8nClient\n  ): Promise<AuthenticatedUser> {\n    // Detect user roles and permissions\n    const roles = await this.detectUserRoles(client);\n    const permissions = this.createPermissions(roles);\n\n    return {\n      id: `n8n-${credentials.baseUrl}-${credentials.apiKey.slice(-8)}`,\n      name: 'n8n API User',\n      roles,\n      permissions,\n      n8nBaseUrl: credentials.baseUrl,\n      n8nApiKey: credentials.apiKey,\n    };\n  }\n\n  /**\n   * Detect user roles based on n8n API capabilities\n   */\n  private async detectUserRoles(client: N8nClient): Promise<string[]> {\n    const roles: string[] = [...this.config.defaultRoles];\n\n    try {\n      // Test Enterprise features to determine if user has elevated permissions\n      try {\n        await client.getUsers({ limit: 1 });\n        roles.push('admin'); // Can access user management\n      } catch {\n        // User management not accessible, likely not an admin\n      }\n\n      try {\n        await client.getProjects({ limit: 1 });\n        roles.push('enterprise'); // Can access Enterprise features\n      } catch {\n        // Enterprise features not accessible\n      }\n    } catch {\n      // Default to basic roles\n    }\n\n    return [...new Set(roles)]; // Remove duplicates\n  }\n\n  /**\n   * Detect available features\n   */\n  private detectFeatures(user: AuthenticatedUser): string[] {\n    const features: string[] = ['community'];\n\n    if (user.permissions.enterprise) {\n      features.push('enterprise');\n    }\n\n    if (user.permissions.users) {\n      features.push('user-management');\n    }\n\n    if (user.permissions.audit) {\n      features.push('audit');\n    }\n\n    return features;\n  }\n\n  /**\n   * Generate cache key for credentials\n   */\n  private getCacheKey(credentials: { baseUrl: string; apiKey: string }): string {\n    return `${credentials.baseUrl}:${credentials.apiKey}`;\n  }\n\n  /**\n   * Clear authentication cache\n   */\n  public clearCache(): void {\n    this.authCache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; entries: number } {\n    const now = Date.now();\n    let validEntries = 0;\n\n    for (const [key, entry] of this.authCache.entries()) {\n      if (entry.expires > now) {\n        validEntries++;\n      } else {\n        this.authCache.delete(key); // Clean up expired entries\n      }\n    }\n\n    return {\n      size: this.authCache.size,\n      entries: validEntries,\n    };\n  }\n}\n\n/**\n * Create n8n authentication provider from environment variables\n */\nexport function createN8nAuth(): N8nAuthProvider {\n  const config: N8nAuthConfig = {\n    required: process.env.N8N_MCP_AUTH_REQUIRED === 'true',\n    defaultBaseUrl: process.env.N8N_BASE_URL,\n    defaultApiKey: process.env.N8N_API_KEY,\n    validateConnection: process.env.N8N_MCP_VALIDATE_CONNECTION !== 'false',\n    cacheDuration: process.env.N8N_MCP_AUTH_CACHE_DURATION\n      ? parseInt(process.env.N8N_MCP_AUTH_CACHE_DURATION)\n      : undefined,\n    defaultRoles: process.env.N8N_MCP_DEFAULT_ROLES?.split(',') || undefined,\n  };\n\n  return new N8nAuthProvider(config);\n}\n\n/**\n * Default n8n authentication provider instance\n */\nexport const defaultN8nAuth = createN8nAuth();\n"],"mappingsuDM;IAAAA,aAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,aAAA;AAvDN;;;;;;AAOA;AAEA,SAASE,SAAS,QAAQ,wBAAwB;AAClD,SAEEC,gBAAgB,QAIX,mBAAmB;AAiC1B;;;;;;AAMA,OAAM,MAAOC,eAAgB,SAAQD,gBAAgB;EAC3CE,MAAM;EACNC,SAAS;EAAA;EAAA,CAAAN,aAAA,GAAAO,CAAA,OAAG,IAAIC,GAAG,EAA0B;EAErDC,YAAYJ,MAAA;EAAA;EAAA,CAAAL,aAAA,GAAAU,CAAA,UAAwB,EAAE;IAAA;IAAAV,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IACpC,KAAK,EAAE;IAEP;IAAA;IAAAP,aAAA,GAAAO,CAAA;IACA,IAAI,CAACF,MAAM,GAAG;MACZO,QAAQ,EAAE,KAAK;MACfC,cAAc;MAAE;MAAA,CAAAb,aAAA,GAAAU,CAAA,UAAAI,OAAO,CAACC,GAAG,CAACC,YAAY;MAAA;MAAA,CAAAhB,aAAA,GAAAU,CAAA,UAAI,EAAE;MAC9CO,aAAa;MAAE;MAAA,CAAAjB,aAAA,GAAAU,CAAA,UAAAI,OAAO,CAACC,GAAG,CAACG,WAAW;MAAA;MAAA,CAAAlB,aAAA,GAAAU,CAAA,UAAI,EAAE;MAC5CS,kBAAkB,EAAE,IAAI;MACxBC,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI;MAAE;MAC9BC,YAAY,EAAE,CAAC,QAAQ,CAAC;MACxB,GAAGhB;KACJ;EACH;EAEA;;;EAGA,MAAMiB,YAAYA,CAACC,OAAuB;IAAA;IAAAvB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IACxC,IAAI;MAAA;MAAAP,aAAA,GAAAO,CAAA;MACF;MACA,IAAI,CAAC,IAAI,CAACF,MAAM,CAACO,QAAQ,EAAE;QAAA;QAAAZ,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QACzB,OAAO,IAAI,CAACiB,mBAAmB,CAACD,OAAO,CAAC;MAC1C,CAAC;MAAA;MAAA;QAAAvB,aAAA,GAAAU,CAAA;MAAA;MAED;MACA,MAAMe,WAAW;MAAA;MAAA,CAAAzB,aAAA,GAAAO,CAAA,OAAG,IAAI,CAACmB,kBAAkB,CAACH,OAAO,CAAC;MAAC;MAAAvB,aAAA,GAAAO,CAAA;MACrD,IAAI,CAACkB,WAAW,EAAE;QAAA;QAAAzB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QAChB,OAAO;UACLoB,OAAO,EAAE,KAAK;UACdC,KAAK,EAAE;SACR;MACH,CAAC;MAAA;MAAA;QAAA5B,aAAA,GAAAU,CAAA;MAAA;MAED;MACA,MAAMmB,QAAQ;MAAA;MAAA,CAAA7B,aAAA,GAAAO,CAAA,OAAG,IAAI,CAACuB,WAAW,CAACL,WAAW,CAAC;MAC9C,MAAMM,MAAM;MAAA;MAAA,CAAA/B,aAAA,GAAAO,CAAA,QAAG,IAAI,CAACD,SAAS,CAAC0B,GAAG,CAACH,QAAQ,CAAC;MAAC;MAAA7B,aAAA,GAAAO,CAAA;MAC5C;MAAI;MAAA,CAAAP,aAAA,GAAAU,CAAA,UAAAqB,MAAM;MAAA;MAAA,CAAA/B,aAAA,GAAAU,CAAA,UAAIqB,MAAM,CAACE,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAE;QAAA;QAAAnC,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QACzC,OAAOwB,MAAM,CAACK,MAAM;MACtB,CAAC;MAAA;MAAA;QAAApC,aAAA,GAAAU,CAAA;MAAA;MAED;MACA,MAAM2B,UAAU;MAAA;MAAA,CAAArC,aAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC+B,mBAAmB,CAACb,WAAW,CAAC;MAE9D;MAAA;MAAAzB,aAAA,GAAAO,CAAA;MACA;MAAI;MAAA,CAAAP,aAAA,GAAAU,CAAA,UAAA2B,UAAU,CAACV,OAAO;MAAA;MAAA,CAAA3B,aAAA,GAAAU,CAAA,UAAI,IAAI,CAACL,MAAM,CAACe,aAAa,GAAG,CAAC,GAAE;QAAA;QAAApB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QACvD,IAAI,CAACD,SAAS,CAACiC,GAAG,CAACV,QAAQ,EAAE;UAC3BO,MAAM,EAAEC,UAAU;UAClBJ,OAAO,EAAEC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAAC9B,MAAM,CAACe;SACnC,CAAC;MACJ,CAAC;MAAA;MAAA;QAAApB,aAAA,GAAAU,CAAA;MAAA;MAAAV,aAAA,GAAAO,CAAA;MAED,OAAO8B,UAAU;IACnB,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAO,CAAA;MACd,OAAO;QACLoB,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,0BAA0BA,KAAK,YAAYY,KAAK;QAAA;QAAA,CAAAxC,aAAA,GAAAU,CAAA,UAAGkB,KAAK,CAACa,OAAO;QAAA;QAAA,CAAAzC,aAAA,GAAAU,CAAA,UAAGgC,MAAM,CAACd,KAAK,CAAC;OACxF;IACH;EACF;EAEA;;;EAGA,MAAMe,OAAOA,CAACpB,OAAuB;IAAA;IAAAvB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IACnC;IACA,IAAIgB,OAAO,CAACqB,IAAI,EAAE;MAAA;MAAA5C,aAAA,GAAAU,CAAA;MAChB,MAAMmB,QAAQ;MAAA;MAAA,CAAA7B,aAAA,GAAAO,CAAA,QAAG,IAAI,CAACuB,WAAW,CAAC;QAChCe,OAAO;QAAE;QAAA,CAAA7C,aAAA,GAAAU,CAAA,WAAAa,OAAO,CAACqB,IAAI,CAACE,UAAU;QAAA;QAAA,CAAA9C,aAAA,GAAAU,CAAA,WAAI,IAAI,CAACL,MAAM,CAACQ,cAAc;QAC9DkC,MAAM;QAAE;QAAA,CAAA/C,aAAA,GAAAU,CAAA,WAAAa,OAAO,CAACqB,IAAI,CAACI,SAAS;QAAA;QAAA,CAAAhD,aAAA,GAAAU,CAAA,WAAI,IAAI,CAACL,MAAM,CAACY,aAAa;OAC5D,CAAC;MAAC;MAAAjB,aAAA,GAAAO,CAAA;MACH,IAAI,CAACD,SAAS,CAAC2C,MAAM,CAACpB,QAAQ,CAAC;IACjC,CAAC;IAAA;IAAA;MAAA7B,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAO,CAAA;IAED,OAAO,IAAI,CAACe,YAAY,CAACC,OAAO,CAAC;EACnC;EAEA;;;EAGQC,mBAAmBA,CAACD,OAAuB;IAAA;IAAAvB,aAAA,GAAAW,CAAA;IACjD,MAAMiC,IAAI;IAAA;IAAA,CAAA5C,aAAA,GAAAO,CAAA,QAAsB;MAC9B2C,EAAE,EAAE,WAAW;MACfC,IAAI,EAAE,gBAAgB;MACtBC,KAAK,EAAE,CAAC,WAAW,CAAC;MACpBC,WAAW,EAAE;QACXC,SAAS,EAAE,IAAI;QACfC,UAAU,EAAE,KAAK;QACjBC,SAAS,EAAE,IAAI;QACfC,UAAU,EAAE,IAAI;QAChBhC,WAAW,EAAE,KAAK;QAClBiC,KAAK,EAAE,KAAK;QACZC,KAAK,EAAE;OACR;MACDb,UAAU,EAAE,IAAI,CAACzC,MAAM,CAACQ,cAAc;MACtCmC,SAAS,EAAE,IAAI,CAAC3C,MAAM,CAACY;KACxB;IAAC;IAAAjB,aAAA,GAAAO,CAAA;IAEF,OAAO;MACLoB,OAAO,EAAE,IAAI;MACbiB,IAAI;MACJrB,OAAO,EAAE;QACPqC,QAAQ,EAAE,WAAW;QACrBC,QAAQ,EAAE,CAAC,WAAW;;KAEzB;EACH;EAEA;;;EAGQnC,kBAAkBA,CAACH,OAAuB;IAAA;IAAAvB,aAAA,GAAAW,CAAA;IAChD,MAAMmD,OAAO;IAAA;IAAA,CAAA9D,aAAA,GAAAO,CAAA;IAAG;IAAA,CAAAP,aAAA,GAAAU,CAAA,WAAAa,OAAO,CAACuC,OAAO;IAAA;IAAA,CAAA9D,aAAA,GAAAU,CAAA,WAAI,EAAE;IAErC;IACA,MAAMqC,MAAM;IAAA;IAAA,CAAA/C,aAAA,GAAAO,CAAA;IACV;IAAA,CAAAP,aAAA,GAAAU,CAAA,WAAAoD,OAAO,CAAC,eAAe,CAAC;IAAA;IAAA,CAAA9D,aAAA,GAAAU,CAAA,WACxBoD,OAAO,CAAC,eAAe,CAAC,EAAEC,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAAA;IAAA,CAAA/D,aAAA,GAAAU,CAAA,WACnD,IAAI,CAACL,MAAM,CAACY,aAAa;IAE3B,MAAM4B,OAAO;IAAA;IAAA,CAAA7C,aAAA,GAAAO,CAAA;IAAG;IAAA,CAAAP,aAAA,GAAAU,CAAA,WAAAoD,OAAO,CAAC,gBAAgB,CAAC;IAAA;IAAA,CAAA9D,aAAA,GAAAU,CAAA,WAAI,IAAI,CAACL,MAAM,CAACQ,cAAc;IAAC;IAAAb,aAAA,GAAAO,CAAA;IAExE;IAAI;IAAA,CAAAP,aAAA,GAAAU,CAAA,YAACqC,MAAM;IAAA;IAAA,CAAA/C,aAAA,GAAAU,CAAA,WAAI,CAACmC,OAAO,GAAE;MAAA;MAAA7C,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAO,CAAA;MACvB,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAP,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAO,CAAA;IAED,OAAO;MAAEsC,OAAO;MAAEE;IAAM,CAAE;EAC5B;EAEA;;;EAGQ,MAAMT,mBAAmBA,CAACb,WAGjC;IAAA;IAAAzB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IACC,IAAI;MACF;MACA,MAAMyD,MAAM;MAAA;MAAA,CAAAhE,aAAA,GAAAO,CAAA,QAAG,IAAIL,SAAS,CAACuB,WAAW,CAACoB,OAAO,EAAEpB,WAAW,CAACsB,MAAM,CAAC;MAAC;MAAA/C,aAAA,GAAAO,CAAA;MAEtE,IAAI,IAAI,CAACF,MAAM,CAACc,kBAAkB,EAAE;QAAA;QAAAnB,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QAClC;QACA,IAAI;UAAA;UAAAP,aAAA,GAAAO,CAAA;UACF,MAAMyD,MAAM,CAACC,YAAY,CAAC;YAAEC,KAAK,EAAE;UAAC,CAAE,CAAC;QACzC,CAAC,CAAC,OAAOtC,KAAK,EAAE;UAAA;UAAA5B,aAAA,GAAAO,CAAA;UACd,OAAO;YACLoB,OAAO,EAAE,KAAK;YACdC,KAAK,EAAE,iDAAiDA,KAAK,YAAYY,KAAK;YAAA;YAAA,CAAAxC,aAAA,GAAAU,CAAA,WAAGkB,KAAK,CAACa,OAAO;YAAA;YAAA,CAAAzC,aAAA,GAAAU,CAAA,WAAGgC,MAAM,CAACd,KAAK,CAAC;WAC/G;QACH;MACF,CAAC;MAAA;MAAA;QAAA5B,aAAA,GAAAU,CAAA;MAAA;MAED;MACA,MAAMkC,IAAI;MAAA;MAAA,CAAA5C,aAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC4D,uBAAuB,CAAC1C,WAAW,EAAEuC,MAAM,CAAC;MAAC;MAAAhE,aAAA,GAAAO,CAAA;MAErE,OAAO;QACLoB,OAAO,EAAE,IAAI;QACbiB,IAAI;QACJrB,OAAO,EAAE;UACPqC,QAAQ,EAAE,aAAa;UACvBC,QAAQ,EAAE,IAAI,CAACO,cAAc,CAACxB,IAAI;;OAErC;IACH,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA;MAAA5B,aAAA,GAAAO,CAAA;MACd,OAAO;QACLoB,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,qCAAqCA,KAAK,YAAYY,KAAK;QAAA;QAAA,CAAAxC,aAAA,GAAAU,CAAA,WAAGkB,KAAK,CAACa,OAAO;QAAA;QAAA,CAAAzC,aAAA,GAAAU,CAAA,WAAGgC,MAAM,CAACd,KAAK,CAAC;OACnG;IACH;EACF;EAEA;;;EAGQ,MAAMuC,uBAAuBA,CACnC1C,WAAgD,EAChDuC,MAAiB;IAAA;IAAAhE,aAAA,GAAAW,CAAA;IAEjB;IACA,MAAMyC,KAAK;IAAA;IAAA,CAAApD,aAAA,GAAAO,CAAA,QAAG,MAAM,IAAI,CAAC8D,eAAe,CAACL,MAAM,CAAC;IAChD,MAAMX,WAAW;IAAA;IAAA,CAAArD,aAAA,GAAAO,CAAA,QAAG,IAAI,CAAC+D,iBAAiB,CAAClB,KAAK,CAAC;IAAC;IAAApD,aAAA,GAAAO,CAAA;IAElD,OAAO;MACL2C,EAAE,EAAE,OAAOzB,WAAW,CAACoB,OAAO,IAAIpB,WAAW,CAACsB,MAAM,CAACwB,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;MAChEpB,IAAI,EAAE,cAAc;MACpBC,KAAK;MACLC,WAAW;MACXP,UAAU,EAAErB,WAAW,CAACoB,OAAO;MAC/BG,SAAS,EAAEvB,WAAW,CAACsB;KACxB;EACH;EAEA;;;EAGQ,MAAMsB,eAAeA,CAACL,MAAiB;IAAA;IAAAhE,aAAA,GAAAW,CAAA;IAC7C,MAAMyC,KAAK;IAAA;IAAA,CAAApD,aAAA,GAAAO,CAAA,QAAa,CAAC,GAAG,IAAI,CAACF,MAAM,CAACgB,YAAY,CAAC;IAAC;IAAArB,aAAA,GAAAO,CAAA;IAEtD,IAAI;MAAA;MAAAP,aAAA,GAAAO,CAAA;MACF;MACA,IAAI;QAAA;QAAAP,aAAA,GAAAO,CAAA;QACF,MAAMyD,MAAM,CAACQ,QAAQ,CAAC;UAAEN,KAAK,EAAE;QAAC,CAAE,CAAC;QAAC;QAAAlE,aAAA,GAAAO,CAAA;QACpC6C,KAAK,CAACqB,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;MACvB,CAAC,CAAC,MAAM;QACN;MAAA;MACD;MAAAzE,aAAA,GAAAO,CAAA;MAED,IAAI;QAAA;QAAAP,aAAA,GAAAO,CAAA;QACF,MAAMyD,MAAM,CAACU,WAAW,CAAC;UAAER,KAAK,EAAE;QAAC,CAAE,CAAC;QAAC;QAAAlE,aAAA,GAAAO,CAAA;QACvC6C,KAAK,CAACqB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;MAC5B,CAAC,CAAC,MAAM;QACN;MAAA;IAEJ,CAAC,CAAC,MAAM;MACN;IAAA;IACD;IAAAzE,aAAA,GAAAO,CAAA;IAED,OAAO,CAAC,GAAG,IAAIoE,GAAG,CAACvB,KAAK,CAAC,CAAC,CAAC,CAAC;EAC9B;EAEA;;;EAGQgB,cAAcA,CAACxB,IAAuB;IAAA;IAAA5C,aAAA,GAAAW,CAAA;IAC5C,MAAMkD,QAAQ;IAAA;IAAA,CAAA7D,aAAA,GAAAO,CAAA,QAAa,CAAC,WAAW,CAAC;IAAC;IAAAP,aAAA,GAAAO,CAAA;IAEzC,IAAIqC,IAAI,CAACS,WAAW,CAACE,UAAU,EAAE;MAAA;MAAAvD,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAO,CAAA;MAC/BsD,QAAQ,CAACY,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAAzE,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAO,CAAA;IAED,IAAIqC,IAAI,CAACS,WAAW,CAACK,KAAK,EAAE;MAAA;MAAA1D,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAO,CAAA;MAC1BsD,QAAQ,CAACY,IAAI,CAAC,iBAAiB,CAAC;IAClC,CAAC;IAAA;IAAA;MAAAzE,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAO,CAAA;IAED,IAAIqC,IAAI,CAACS,WAAW,CAACM,KAAK,EAAE;MAAA;MAAA3D,aAAA,GAAAU,CAAA;MAAAV,aAAA,GAAAO,CAAA;MAC1BsD,QAAQ,CAACY,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IAAA;IAAA;MAAAzE,aAAA,GAAAU,CAAA;IAAA;IAAAV,aAAA,GAAAO,CAAA;IAED,OAAOsD,QAAQ;EACjB;EAEA;;;EAGQ/B,WAAWA,CAACL,WAAgD;IAAA;IAAAzB,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IAClE,OAAO,GAAGkB,WAAW,CAACoB,OAAO,IAAIpB,WAAW,CAACsB,MAAM,EAAE;EACvD;EAEA;;;EAGO6B,UAAUA,CAAA;IAAA;IAAA5E,aAAA,GAAAW,CAAA;IAAAX,aAAA,GAAAO,CAAA;IACf,IAAI,CAACD,SAAS,CAACuE,KAAK,EAAE;EACxB;EAEA;;;EAGOC,aAAaA,CAAA;IAAA;IAAA9E,aAAA,GAAAW,CAAA;IAClB,MAAMwB,GAAG;IAAA;IAAA,CAAAnC,aAAA,GAAAO,CAAA,QAAG2B,IAAI,CAACC,GAAG,EAAE;IACtB,IAAI4C,YAAY;IAAA;IAAA,CAAA/E,aAAA,GAAAO,CAAA,QAAG,CAAC;IAAC;IAAAP,aAAA,GAAAO,CAAA;IAErB,KAAK,MAAM,CAACyE,GAAG,EAAEC,KAAK,CAAC,IAAI,IAAI,CAAC3E,SAAS,CAAC4E,OAAO,EAAE,EAAE;MAAA;MAAAlF,aAAA,GAAAO,CAAA;MACnD,IAAI0E,KAAK,CAAChD,OAAO,GAAGE,GAAG,EAAE;QAAA;QAAAnC,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QACvBwE,YAAY,EAAE;MAChB,CAAC,MAAM;QAAA;QAAA/E,aAAA,GAAAU,CAAA;QAAAV,aAAA,GAAAO,CAAA;QACL,IAAI,CAACD,SAAS,CAAC2C,MAAM,CAAC+B,GAAG,CAAC,CAAC,CAAC;MAC9B;IACF;IAAC;IAAAhF,aAAA,GAAAO,CAAA;IAED,OAAO;MACL4E,IAAI,EAAE,IAAI,CAAC7E,SAAS,CAAC6E,IAAI;MACzBD,OAAO,EAAEH;KACV;EACH;;AAGF;;;AAGA,OAAM,SAAUK,aAAaA,CAAA;EAAA;EAAApF,aAAA,GAAAW,CAAA;EAC3B,MAAMN,MAAM;EAAA;EAAA,CAAAL,aAAA,GAAAO,CAAA,QAAkB;IAC5BK,QAAQ,EAAEE,OAAO,CAACC,GAAG,CAACsE,qBAAqB,KAAK,MAAM;IACtDxE,cAAc,EAAEC,OAAO,CAACC,GAAG,CAACC,YAAY;IACxCC,aAAa,EAAEH,OAAO,CAACC,GAAG,CAACG,WAAW;IACtCC,kBAAkB,EAAEL,OAAO,CAACC,GAAG,CAACuE,2BAA2B,KAAK,OAAO;IACvElE,aAAa,EAAEN,OAAO,CAACC,GAAG,CAACwE,2BAA2B;IAAA;IAAA,CAAAvF,aAAA,GAAAU,CAAA,WAClD8E,QAAQ,CAAC1E,OAAO,CAACC,GAAG,CAACwE,2BAA2B,CAAC;IAAA;IAAA,CAAAvF,aAAA,GAAAU,CAAA,WACjD+E,SAAS;IACbpE,YAAY;IAAE;IAAA,CAAArB,aAAA,GAAAU,CAAA,WAAAI,OAAO,CAACC,GAAG,CAAC2E,qBAAqB,EAAEC,KAAK,CAAC,GAAG,CAAC;IAAA;IAAA,CAAA3F,aAAA,GAAAU,CAAA,WAAI+E,SAAS;GACzE;EAAC;EAAAzF,aAAA,GAAAO,CAAA;EAEF,OAAO,IAAIH,eAAe,CAACC,MAAM,CAAC;AACpC;AAEA;;;AAGA,OAAO,MAAMuF,cAAc;AAAA;AAAA,CAAA5F,aAAA,GAAAO,CAAA,QAAG6E,aAAa,EAAE","ignoreList":[]}