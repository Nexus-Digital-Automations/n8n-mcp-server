7205cf2ff606a8b73d333a345e77af5b
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N8nClient = exports.clients = exports.server = void 0;
exports.startServer = startServer;
const index_js_1 = require("@modelcontextprotocol/sdk/server/index.js");
const stdio_js_1 = require("@modelcontextprotocol/sdk/server/stdio.js");
const types_js_1 = require("@modelcontextprotocol/sdk/types.js");
const node_fetch_1 = __importDefault(require("node-fetch"));
class N8nClient {
    baseUrl;
    apiKey;
    constructor(baseUrl, apiKey) {
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        // Remove trailing slash if present
        this.baseUrl = baseUrl.replace(/\/$/, '');
        // Ensure apiKey is properly assigned for ESLint
        this.apiKey = apiKey;
    }
    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseUrl}/api/v1${endpoint}`;
        const headers = {
            'X-N8N-API-KEY': this.apiKey,
            Accept: 'application/json',
            'Content-Type': 'application/json',
        };
        try {
            const response = await (0, node_fetch_1.default)(url, {
                ...options,
                headers: {
                    ...headers,
                    ...options.headers,
                },
            });
            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage;
                try {
                    const errorJson = JSON.parse(errorText);
                    // Check for license-related errors
                    if (errorJson.message && errorJson.message.includes('license')) {
                        errorMessage = `This operation requires an n8n Enterprise license with project management features enabled. Error: ${errorJson.message}`;
                    }
                    else {
                        errorMessage = errorJson.message || errorText;
                    }
                }
                catch {
                    errorMessage = errorText;
                }
                throw new Error(`N8N API error: ${errorMessage}`);
            }
            // Handle 204 No Content responses
            if (response.status === 204) {
                return {};
            }
            return (await response.json());
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`Failed to connect to n8n: ${error.message}`);
            }
            throw error;
        }
    }
    async listWorkflows() {
        return this.makeRequest('/workflows');
    }
    async getWorkflow(id) {
        return this.makeRequest(`/workflows/${id}`);
    }
    async createWorkflow(name, nodes = [], connections = {}) {
        return this.makeRequest('/workflows', {
            method: 'POST',
            body: JSON.stringify({
                name,
                nodes,
                connections,
                settings: {
                    saveManualExecutions: true,
                    saveExecutionProgress: true,
                },
            }),
        });
    }
    async updateWorkflow(id, workflow) {
        return this.makeRequest(`/workflows/${id}`, {
            method: 'PUT',
            body: JSON.stringify(workflow),
        });
    }
    async deleteWorkflow(id) {
        return this.makeRequest(`/workflows/${id}`, {
            method: 'DELETE',
        });
    }
    async activateWorkflow(id) {
        return this.makeRequest(`/workflows/${id}/activate`, {
            method: 'POST',
        });
    }
    async deactivateWorkflow(id) {
        return this.makeRequest(`/workflows/${id}/deactivate`, {
            method: 'POST',
        });
    }
    // Project management methods (requires n8n Enterprise license)
    async listProjects() {
        return this.makeRequest('/projects');
    }
    async createProject(name) {
        return this.makeRequest('/projects', {
            method: 'POST',
            body: JSON.stringify({ name }),
        });
    }
    async deleteProject(projectId) {
        return this.makeRequest(`/projects/${projectId}`, {
            method: 'DELETE',
        });
    }
    async updateProject(projectId, name) {
        return this.makeRequest(`/projects/${projectId}`, {
            method: 'PUT',
            body: JSON.stringify({ name }),
        });
    }
    // User management methods
    async listUsers() {
        return this.makeRequest('/users');
    }
    async createUsers(users) {
        return this.makeRequest('/users', {
            method: 'POST',
            body: JSON.stringify(users),
        });
    }
    async getUser(idOrEmail) {
        return this.makeRequest(`/users/${idOrEmail}`);
    }
    async deleteUser(idOrEmail) {
        return this.makeRequest(`/users/${idOrEmail}`, {
            method: 'DELETE',
        });
    }
    // Variable management methods
    async listVariables() {
        return this.makeRequest('/variables');
    }
    async createVariable(key, value) {
        return this.makeRequest('/variables', {
            method: 'POST',
            body: JSON.stringify({ key, value }),
        });
    }
    async deleteVariable(id) {
        return this.makeRequest(`/variables/${id}`, {
            method: 'DELETE',
        });
    }
    // Execution management methods
    async getExecutions(options = {}) {
        const params = new URLSearchParams();
        if (options.includeData !== undefined)
            params.append('includeData', String(options.includeData));
        if (options.status)
            params.append('status', options.status);
        if (options.workflowId)
            params.append('workflowId', options.workflowId);
        if (options.limit)
            params.append('limit', String(options.limit));
        return this.makeRequest(`/executions?${params.toString()}`);
    }
    async getExecution(id, includeData = false) {
        const params = new URLSearchParams();
        if (includeData)
            params.append('includeData', 'true');
        return this.makeRequest(`/executions/${id}?${params.toString()}`);
    }
    async deleteExecution(id) {
        return this.makeRequest(`/executions/${id}`, {
            method: 'DELETE',
        });
    }
    // Tag management methods
    async createTag(name) {
        return this.makeRequest('/tags', {
            method: 'POST',
            body: JSON.stringify({ name }),
        });
    }
    async getTags(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', String(options.limit));
        return this.makeRequest(`/tags?${params.toString()}`);
    }
    async getTag(id) {
        return this.makeRequest(`/tags/${id}`);
    }
    async updateTag(id, name) {
        return this.makeRequest(`/tags/${id}`, {
            method: 'PUT',
            body: JSON.stringify({ name }),
        });
    }
    async deleteTag(id) {
        return this.makeRequest(`/tags/${id}`, {
            method: 'DELETE',
        });
    }
    async getWorkflowTags(workflowId) {
        return this.makeRequest(`/workflows/${workflowId}/tags`);
    }
    async updateWorkflowTags(workflowId, tagIds) {
        return this.makeRequest(`/workflows/${workflowId}/tags`, {
            method: 'PUT',
            body: JSON.stringify(tagIds),
        });
    }
    // Security audit method
    async generateAudit(options = {}) {
        return this.makeRequest('/audit', {
            method: 'POST',
            body: JSON.stringify({
                additionalOptions: {
                    daysAbandonedWorkflow: options.daysAbandonedWorkflow,
                    categories: options.categories,
                },
            }),
        });
    }
    // Credential management methods
    async createCredential(name, type, data) {
        return this.makeRequest('/credentials', {
            method: 'POST',
            body: JSON.stringify({
                name,
                type,
                data,
            }),
        });
    }
    async deleteCredential(id) {
        return this.makeRequest(`/credentials/${id}`, {
            method: 'DELETE',
        });
    }
    async getCredentialSchema(credentialTypeName) {
        return this.makeRequest(`/credentials/schema/${credentialTypeName}`);
    }
}
exports.N8nClient = N8nClient;
// Create an MCP server
const server = new index_js_1.Server({
    name: 'n8n-integration',
    version: '1.0.0',
}, {
    capabilities: {
        tools: {},
    },
});
exports.server = server;
// Store client instances
const clients = new Map();
exports.clients = clients;
// List tools handler
server.setRequestHandler(types_js_1.ListToolsRequestSchema, async () => {
    return {
        tools: [
            {
                name: 'init-n8n',
                description: 'Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        url: { type: 'string' },
                        apiKey: { type: 'string' },
                    },
                    required: ['url', 'apiKey'],
                },
            },
            {
                name: 'list-workflows',
                description: 'List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'get-workflow',
                description: 'Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'create-workflow',
                description: "Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        name: { type: 'string' },
                        nodes: { type: 'array' },
                        connections: { type: 'object' },
                    },
                    required: ['clientId', 'name'],
                },
            },
            {
                name: 'update-workflow',
                description: "Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                        workflow: {
                            type: 'object',
                            properties: {
                                name: { type: 'string' },
                                active: { type: 'boolean' },
                                nodes: { type: 'array' },
                                connections: { type: 'object' },
                                settings: { type: 'object' },
                            },
                        },
                    },
                    required: ['clientId', 'id', 'workflow'],
                },
            },
            {
                name: 'delete-workflow',
                description: 'Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'activate-workflow',
                description: 'Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'deactivate-workflow',
                description: 'Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'list-projects',
                description: 'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'create-project',
                description: 'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        name: { type: 'string' },
                    },
                    required: ['clientId', 'name'],
                },
            },
            {
                name: 'delete-project',
                description: 'Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        projectId: { type: 'string' },
                    },
                    required: ['clientId', 'projectId'],
                },
            },
            {
                name: 'update-project',
                description: "Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        projectId: { type: 'string' },
                        name: { type: 'string' },
                    },
                    required: ['clientId', 'projectId', 'name'],
                },
            },
            {
                name: 'list-users',
                description: 'Retrieve all users from your instance. Only available for the instance owner.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'create-users',
                description: 'Create one or more users in your instance.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        users: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    email: { type: 'string' },
                                    role: {
                                        type: 'string',
                                        enum: ['global:admin', 'global:member'],
                                    },
                                },
                                required: ['email'],
                            },
                        },
                    },
                    required: ['clientId', 'users'],
                },
            },
            {
                name: 'get-user',
                description: 'Get user by ID or email address.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        idOrEmail: { type: 'string' },
                    },
                    required: ['clientId', 'idOrEmail'],
                },
            },
            {
                name: 'delete-user',
                description: 'Delete a user from your instance.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        idOrEmail: { type: 'string' },
                    },
                    required: ['clientId', 'idOrEmail'],
                },
            },
            {
                name: 'list-variables',
                description: 'List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'create-variable',
                description: 'Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        key: { type: 'string' },
                        value: { type: 'string' },
                    },
                    required: ['clientId', 'key', 'value'],
                },
            },
            {
                name: 'delete-variable',
                description: 'Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'create-credential',
                description: "Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        name: { type: 'string' },
                        type: { type: 'string' },
                        data: { type: 'object' },
                    },
                    required: ['clientId', 'name', 'type', 'data'],
                },
            },
            {
                name: 'delete-credential',
                description: 'Delete a credential by ID. You must be the owner of the credentials.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'get-credential-schema',
                description: "Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        credentialTypeName: { type: 'string' },
                    },
                    required: ['clientId', 'credentialTypeName'],
                },
            },
            // Execution Management Tools
            {
                name: 'list-executions',
                description: 'Retrieve all executions from your instance with optional filtering.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        includeData: { type: 'boolean' },
                        status: {
                            type: 'string',
                            enum: ['error', 'success', 'waiting'],
                        },
                        workflowId: { type: 'string' },
                        limit: { type: 'number' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'get-execution',
                description: 'Retrieve a specific execution by ID.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'number' },
                        includeData: { type: 'boolean' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'delete-execution',
                description: 'Delete a specific execution by ID.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'number' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            // Tag Management Tools
            {
                name: 'create-tag',
                description: 'Create a new tag in your instance.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        name: { type: 'string' },
                    },
                    required: ['clientId', 'name'],
                },
            },
            {
                name: 'list-tags',
                description: 'Retrieve all tags from your instance.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        limit: { type: 'number' },
                    },
                    required: ['clientId'],
                },
            },
            {
                name: 'get-tag',
                description: 'Retrieve a specific tag by ID.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'update-tag',
                description: "Update a tag's name.",
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                        name: { type: 'string' },
                    },
                    required: ['clientId', 'id', 'name'],
                },
            },
            {
                name: 'delete-tag',
                description: 'Delete a tag by ID.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        id: { type: 'string' },
                    },
                    required: ['clientId', 'id'],
                },
            },
            {
                name: 'get-workflow-tags',
                description: 'Get tags associated with a workflow.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        workflowId: { type: 'string' },
                    },
                    required: ['clientId', 'workflowId'],
                },
            },
            {
                name: 'update-workflow-tags',
                description: 'Update tags associated with a workflow.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        workflowId: { type: 'string' },
                        tagIds: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: { type: 'string' },
                                },
                                required: ['id'],
                            },
                        },
                    },
                    required: ['clientId', 'workflowId', 'tagIds'],
                },
            },
            // Security Audit Tool
            {
                name: 'generate-audit',
                description: 'Generate a security audit for your n8n instance.',
                inputSchema: {
                    type: 'object',
                    properties: {
                        clientId: { type: 'string' },
                        daysAbandonedWorkflow: { type: 'number' },
                        categories: {
                            type: 'array',
                            items: {
                                type: 'string',
                                enum: ['credentials', 'database', 'nodes', 'filesystem', 'instance'],
                            },
                        },
                    },
                    required: ['clientId'],
                },
            },
        ],
    };
});
// Tool execution handler
server.setRequestHandler(types_js_1.CallToolRequestSchema, async (request) => {
    const { name, arguments: args } = request.params;
    switch (name) {
        case 'init-n8n': {
            const { url, apiKey } = args;
            try {
                const client = new N8nClient(url, apiKey);
                // Test connection by listing workflows
                await client.listWorkflows();
                // Generate a unique client ID
                const clientId = Buffer.from(url).toString('base64');
                clients.set(clientId, client);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully connected to n8n at ${url}. Use this client ID for future operations: ${clientId}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'list-workflows': {
            const { clientId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflows = await client.listWorkflows();
                const formattedWorkflows = workflows.data.map(wf => ({
                    id: wf.id,
                    name: wf.name,
                    active: wf.active,
                    created: wf.createdAt,
                    updated: wf.updatedAt,
                    tags: wf.tags,
                }));
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(formattedWorkflows, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-workflow': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflow = await client.getWorkflow(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(workflow, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'update-workflow': {
            const { clientId, id, workflow } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const updatedWorkflow = await client.updateWorkflow(id, workflow);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully updated workflow:\n${JSON.stringify(updatedWorkflow, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'create-workflow': {
            const { clientId, name, nodes = [], connections = {}, } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflow = await client.createWorkflow(name, nodes, connections);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully created workflow:\n${JSON.stringify(workflow, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-workflow': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflow = await client.deleteWorkflow(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted workflow:\n${JSON.stringify(workflow, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'activate-workflow': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflow = await client.activateWorkflow(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully activated workflow:\n${JSON.stringify(workflow, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'deactivate-workflow': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const workflow = await client.deactivateWorkflow(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deactivated workflow:\n${JSON.stringify(workflow, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'list-projects': {
            const { clientId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const projects = await client.listProjects();
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(projects.data, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'create-project': {
            const { clientId, name } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.createProject(name);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully created project: ${name}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-project': {
            const { clientId, projectId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.deleteProject(projectId);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted project with ID: ${projectId}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'update-project': {
            const { clientId, projectId, name } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.updateProject(projectId, name);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully updated project ${projectId} with new name: ${name}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'list-users': {
            const { clientId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const users = await client.listUsers();
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(users.data, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'create-users': {
            const { clientId, users } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const result = await client.createUsers(users);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(result, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-user': {
            const { clientId, idOrEmail } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const user = await client.getUser(idOrEmail);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(user, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-user': {
            const { clientId, idOrEmail } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.deleteUser(idOrEmail);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted user: ${idOrEmail}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'list-variables': {
            const { clientId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const variables = await client.listVariables();
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(variables.data, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'create-variable': {
            const { clientId, key, value } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.createVariable(key, value);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully created variable with key: ${key}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-variable': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                await client.deleteVariable(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted variable with ID: ${id}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'create-credential': {
            const { clientId, name, type, data } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const credential = await client.createCredential(name, type, data);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully created credential:\n${JSON.stringify(credential, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-credential': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const result = await client.deleteCredential(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted credential:\n${JSON.stringify(result, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-credential-schema': {
            const { clientId, credentialTypeName } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const schema = await client.getCredentialSchema(credentialTypeName);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(schema, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        // Execution Management Handlers
        case 'list-executions': {
            const { clientId, includeData, status, workflowId, limit } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const executions = await client.getExecutions({ includeData, status, workflowId, limit });
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(executions.data, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-execution': {
            const { clientId, id, includeData } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const execution = await client.getExecution(id, includeData);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(execution, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-execution': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const execution = await client.deleteExecution(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted execution:\n${JSON.stringify(execution, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        // Tag Management Handlers
        case 'create-tag': {
            const { clientId, name } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tag = await client.createTag(name);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully created tag:\n${JSON.stringify(tag, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'list-tags': {
            const { clientId, limit } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tags = await client.getTags({ limit });
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(tags.data, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-tag': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tag = await client.getTag(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(tag, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'update-tag': {
            const { clientId, id, name } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tag = await client.updateTag(id, name);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully updated tag:\n${JSON.stringify(tag, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'delete-tag': {
            const { clientId, id } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tag = await client.deleteTag(id);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully deleted tag:\n${JSON.stringify(tag, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'get-workflow-tags': {
            const { clientId, workflowId } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tags = await client.getWorkflowTags(workflowId);
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(tags, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'update-workflow-tags': {
            const { clientId, workflowId, tagIds } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const tags = await client.updateWorkflowTags(workflowId, tagIds);
                return {
                    content: [
                        {
                            type: 'text',
                            text: `Successfully updated workflow tags:\n${JSON.stringify(tags, null, 2)}`,
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        case 'generate-audit': {
            const { clientId, daysAbandonedWorkflow, categories } = args;
            const client = clients.get(clientId);
            if (!client) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: 'Client not initialized. Please run init-n8n first.',
                        },
                    ],
                    isError: true,
                };
            }
            try {
                const audit = await client.generateAudit({ daysAbandonedWorkflow, categories });
                return {
                    content: [
                        {
                            type: 'text',
                            text: JSON.stringify(audit, null, 2),
                        },
                    ],
                };
            }
            catch (error) {
                return {
                    content: [
                        {
                            type: 'text',
                            text: error instanceof Error ? error.message : 'Unknown error occurred',
                        },
                    ],
                    isError: true,
                };
            }
        }
        default:
            return {
                content: [
                    {
                        type: 'text',
                        text: `Unknown tool: ${name}`,
                    },
                ],
                isError: true,
            };
    }
});
// Main function to start the server
async function startServer() {
    const transport = new stdio_js_1.StdioServerTransport();
    await server.connect(transport);
    console.error('N8N MCP Server running on stdio');
}
// Start the server only if this module is run directly
// Note: import.meta.url check is replaced with process.argv check for Jest compatibility
if (process.argv[1] && process.argv[1].includes('index.js') && !process.env.NODE_ENV?.includes('test')) {
    startServer().catch((error) => {
        console.error('Failed to start server:', error);
        process.exit(1);
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,