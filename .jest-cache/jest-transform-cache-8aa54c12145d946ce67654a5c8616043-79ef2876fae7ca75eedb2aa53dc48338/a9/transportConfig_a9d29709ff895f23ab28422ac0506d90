8122f83612381763b3356f0527693dc7
"use strict";
/**
 * Transport Configuration for n8n MCP Server
 *
 * Provides transport type detection and configuration for different deployment scenarios.
 * Supports both stdio (local development) and SSE (remote/web access) transports.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ENV_CONFIG = exports.DEFAULT_CONFIGS = exports.TransportConfigSchema = void 0;
exports.detectTransportConfig = detectTransportConfig;
exports.validateTransportConfig = validateTransportConfig;
exports.getServerUrl = getServerUrl;
exports.parseConfigFromEnv = parseConfigFromEnv;
const zod_1 = require("zod");
// Transport configuration schema
exports.TransportConfigSchema = zod_1.z.object({
    type: zod_1.z.enum(['stdio', 'sse']).default('stdio'),
    sse: zod_1.z
        .object({
        port: zod_1.z.number().min(1024).max(65535).default(8080),
        endpoint: zod_1.z.string().default('/sse'),
        host: zod_1.z.string().default('localhost'),
        cors: zod_1.z
            .object({
            enabled: zod_1.z.boolean().default(true),
            origins: zod_1.z.array(zod_1.z.string()).default(['*']),
            credentials: zod_1.z.boolean().default(false),
        })
            .default({}),
        healthCheck: zod_1.z
            .object({
            enabled: zod_1.z.boolean().default(true),
            endpoint: zod_1.z.string().default('/health'),
        })
            .default({}),
    })
        .optional(),
});
/**
 * Default transport configurations for different environments
 */
exports.DEFAULT_CONFIGS = {
    development: {
        type: 'stdio',
    },
    production: {
        type: 'sse',
        sse: {
            port: 8080,
            endpoint: '/sse',
            host: '0.0.0.0',
            cors: {
                enabled: true,
                origins: ['*'],
                credentials: false,
            },
            healthCheck: {
                enabled: true,
                endpoint: '/health',
            },
        },
    },
    web: {
        type: 'sse',
        sse: {
            port: process.env.PORT ? parseInt(process.env.PORT) : 3000,
            endpoint: '/sse',
            host: '0.0.0.0',
            cors: {
                enabled: true,
                origins: process.env.CORS_ORIGINS?.split(',') || ['*'],
                credentials: true,
            },
            healthCheck: {
                enabled: true,
                endpoint: '/health',
            },
        },
    },
};
/**
 * Detect appropriate transport configuration based on environment
 */
function detectTransportConfig() {
    // Check environment variables for explicit transport type
    const transportType = process.env.N8N_MCP_TRANSPORT;
    if (transportType === 'sse') {
        return exports.DEFAULT_CONFIGS.web;
    }
    if (transportType === 'stdio') {
        return exports.DEFAULT_CONFIGS.development;
    }
    // Auto-detect based on environment
    if (process.env.NODE_ENV === 'production' || process.env.PORT) {
        return exports.DEFAULT_CONFIGS.web;
    }
    // Check if running in a web environment (Railway, Vercel, etc.)
    if (process.env.RAILWAY_ENVIRONMENT || process.env.VERCEL || process.env.RENDER) {
        return exports.DEFAULT_CONFIGS.web;
    }
    // Default to stdio for local development
    return exports.DEFAULT_CONFIGS.development;
}
/**
 * Validate and normalize transport configuration
 */
function validateTransportConfig(config) {
    return exports.TransportConfigSchema.parse(config);
}
/**
 * Get SSE server URL from configuration
 */
function getServerUrl(config) {
    if (config.type !== 'sse' || !config.sse) {
        return null;
    }
    const { host, port, endpoint } = config.sse;
    const protocol = port === 443 ? 'https' : 'http';
    return `${protocol}://${host}:${port}${endpoint}`;
}
/**
 * Environment variable configuration helpers
 */
exports.ENV_CONFIG = {
    // Transport type selection
    TRANSPORT_TYPE: 'N8N_MCP_TRANSPORT', // 'stdio' | 'sse'
    // SSE configuration
    SSE_PORT: 'N8N_MCP_SSE_PORT',
    SSE_HOST: 'N8N_MCP_SSE_HOST',
    SSE_ENDPOINT: 'N8N_MCP_SSE_ENDPOINT',
    // CORS configuration
    CORS_ORIGINS: 'N8N_MCP_CORS_ORIGINS', // comma-separated list
    CORS_CREDENTIALS: 'N8N_MCP_CORS_CREDENTIALS', // 'true' | 'false'
    // Health check configuration
    HEALTH_CHECK_ENABLED: 'N8N_MCP_HEALTH_CHECK_ENABLED',
    HEALTH_CHECK_ENDPOINT: 'N8N_MCP_HEALTH_CHECK_ENDPOINT',
};
/**
 * Parse transport configuration from environment variables
 */
function parseConfigFromEnv() {
    const config = {};
    // Transport type
    if (process.env[exports.ENV_CONFIG.TRANSPORT_TYPE]) {
        config.type = process.env[exports.ENV_CONFIG.TRANSPORT_TYPE];
    }
    // SSE configuration - create if any SSE-related environment variables are set
    const hasAnySSEConfig = exports.ENV_CONFIG.SSE_PORT in process.env ||
        exports.ENV_CONFIG.SSE_HOST in process.env ||
        exports.ENV_CONFIG.SSE_ENDPOINT in process.env ||
        exports.ENV_CONFIG.CORS_ORIGINS in process.env ||
        exports.ENV_CONFIG.CORS_CREDENTIALS in process.env ||
        exports.ENV_CONFIG.HEALTH_CHECK_ENABLED in process.env ||
        exports.ENV_CONFIG.HEALTH_CHECK_ENDPOINT in process.env;
    if (config.type === 'sse' || hasAnySSEConfig) {
        const ssePortEnv = process.env[exports.ENV_CONFIG.SSE_PORT];
        config.sse = {
            port: ssePortEnv ? parseInt(ssePortEnv) : 8080,
            host: process.env[exports.ENV_CONFIG.SSE_HOST] || 'localhost',
            endpoint: process.env[exports.ENV_CONFIG.SSE_ENDPOINT] || '/sse',
            cors: {
                enabled: process.env[exports.ENV_CONFIG.CORS_ORIGINS] !== undefined,
                origins: process.env[exports.ENV_CONFIG.CORS_ORIGINS]?.split(',') ?? ['*'],
                credentials: process.env[exports.ENV_CONFIG.CORS_CREDENTIALS] === 'true',
            },
            healthCheck: {
                enabled: process.env[exports.ENV_CONFIG.HEALTH_CHECK_ENABLED] !== 'false',
                endpoint: process.env[exports.ENV_CONFIG.HEALTH_CHECK_ENDPOINT] || '/health',
            },
        };
    }
    return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,