f3609a048971a79ba1452e73ea24c531
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAnalyticsDashboardTools = createAnalyticsDashboardTools;
const zod_1 = require("zod");
const fastmcp_1 = require("fastmcp");
const eventClient_js_1 = require("../client/eventClient.js");
// Zod schemas for validation
const DashboardMetricsSchema = zod_1.z.object({
    timeRange: zod_1.z.enum(['1h', '24h', '7d', '30d']).default('24h'),
    includeWorkflows: zod_1.z.boolean().default(true),
    includeExecutions: zod_1.z.boolean().default(true),
    includeUsers: zod_1.z.boolean().default(true),
    includePerformance: zod_1.z.boolean().default(true),
    includeErrors: zod_1.z.boolean().default(true),
});
const UsageAnalyticsSchema = zod_1.z.object({
    period: zod_1.z.enum(['hour', 'day', 'week', 'month']).default('day'),
    limit: zod_1.z.number().min(1).max(100).default(30),
    groupBy: zod_1.z.enum(['workflow', 'user', 'execution_status', 'node_type']).optional(),
    workflowId: zod_1.z.string().optional(),
    userId: zod_1.z.string().optional(),
});
const PerformanceReportSchema = zod_1.z.object({
    timeRange: zod_1.z.enum(['1h', '6h', '24h', '7d']).default('24h'),
    includeExecutionTimes: zod_1.z.boolean().default(true),
    includeThroughput: zod_1.z.boolean().default(true),
    includeErrorRates: zod_1.z.boolean().default(true),
    includeResourceUsage: zod_1.z.boolean().default(true),
    workflowId: zod_1.z.string().optional(),
    percentiles: zod_1.z.array(zod_1.z.number().min(0).max(100)).default([50, 90, 95, 99]),
});
const TrendAnalysisSchema = zod_1.z.object({
    metric: zod_1.z.enum(['executions', 'success_rate', 'execution_time', 'error_rate', 'throughput']),
    timeRange: zod_1.z.enum(['7d', '30d', '90d']).default('30d'),
    granularity: zod_1.z.enum(['hour', 'day', 'week']).default('day'),
    compareWith: zod_1.z.enum(['previous_period', 'same_period_last_year']).optional(),
});
const AlertConfigSchema = zod_1.z.object({
    metricName: zod_1.z.string().min(1, 'Metric name is required'),
    threshold: zod_1.z.number().min(0, 'Threshold must be positive'),
    operator: zod_1.z.enum(['gt', 'lt', 'eq', 'gte', 'lte']).default('gt'),
    timeWindow: zod_1.z.enum(['5m', '15m', '1h', '24h']).default('15m'),
    enabled: zod_1.z.boolean().default(true),
    webhookUrl: zod_1.z.string().url().optional(),
    emailRecipients: zod_1.z.array(zod_1.z.string().email()).optional(),
});
const CustomMetricSchema = zod_1.z.object({
    name: zod_1.z.string().min(1, 'Metric name is required'),
    description: zod_1.z.string().optional(),
    query: zod_1.z.string().min(1, 'Query is required'),
    unit: zod_1.z.string().optional(),
    tags: zod_1.z.record(zod_1.z.string()).optional(),
});
// Global event client reference
let eventClient = null;
// Initialize event client
const getEventClient = (getClient) => {
    if (!eventClient) {
        const client = getClient();
        if (!client) {
            throw new fastmcp_1.UserError('N8n client not available');
        }
        // This should use the same instance as event-streaming tools
        // In practice, this would be managed by a service locator or DI container
        const baseUrl = client.baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';
        const apiKey = client.apiKey || process.env.N8N_API_KEY || '';
        const config = {
            baseUrl,
            apiKey,
            reconnectInterval: 5000,
            maxReconnectAttempts: 10,
            enableHeartbeat: true,
            heartbeatInterval: 30000,
        };
        eventClient = new eventClient_js_1.EventClient(client, config);
    }
    return eventClient;
};
// Helper functions
const formatMetric = (metric) => {
    let result = `**${metric.name}:** ${metric.value}`;
    if (metric.unit) {
        result += ` ${metric.unit}`;
    }
    if (metric.trend) {
        const trendIcon = metric.trend.direction === 'up' ? '📈' :
            metric.trend.direction === 'down' ? '📉' : '➡️';
        result += ` ${trendIcon} ${metric.trend.percentage.toFixed(1)}% (${metric.trend.period})`;
    }
    if (metric.description) {
        result += `\n  _${metric.description}_`;
    }
    return result;
};
const calculateTimeRange = (range) => {
    const end = new Date();
    const start = new Date();
    switch (range) {
        case '1h':
            start.setHours(start.getHours() - 1);
            break;
        case '24h':
            start.setDate(start.getDate() - 1);
            break;
        case '7d':
            start.setDate(start.getDate() - 7);
            break;
        case '30d':
            start.setDate(start.getDate() - 30);
            break;
        case '90d':
            start.setDate(start.getDate() - 90);
            break;
        default:
            start.setDate(start.getDate() - 1);
    }
    return { start, end };
};
const generateMockMetrics = (timeRange) => {
    const now = new Date();
    const baseValue = Math.floor(Math.random() * 1000) + 100;
    return [
        {
            id: 'total_executions',
            name: 'Total Executions',
            value: baseValue,
            type: 'counter',
            description: 'Total workflow executions in time range',
            timestamp: now,
            trend: {
                direction: 'up',
                percentage: Math.random() * 20,
                period: timeRange,
            },
        },
        {
            id: 'success_rate',
            name: 'Success Rate',
            value: 85 + Math.random() * 10,
            type: 'percentage',
            unit: '%',
            description: 'Percentage of successful executions',
            timestamp: now,
            trend: {
                direction: Math.random() > 0.5 ? 'up' : 'down',
                percentage: Math.random() * 5,
                period: timeRange,
            },
        },
        {
            id: 'avg_execution_time',
            name: 'Avg Execution Time',
            value: 2.5 + Math.random() * 5,
            type: 'gauge',
            unit: 's',
            description: 'Average time per workflow execution',
            timestamp: now,
            trend: {
                direction: 'down',
                percentage: Math.random() * 15,
                period: timeRange,
            },
        },
        {
            id: 'error_rate',
            name: 'Error Rate',
            value: Math.random() * 10,
            type: 'percentage',
            unit: '%',
            description: 'Percentage of failed executions',
            timestamp: now,
            trend: {
                direction: Math.random() > 0.7 ? 'up' : 'down',
                percentage: Math.random() * 8,
                period: timeRange,
            },
        },
        {
            id: 'active_workflows',
            name: 'Active Workflows',
            value: Math.floor(Math.random() * 50) + 10,
            type: 'gauge',
            description: 'Number of currently active workflows',
            timestamp: now,
        },
        {
            id: 'throughput',
            name: 'Throughput',
            value: Math.floor(Math.random() * 100) + 20,
            type: 'gauge',
            unit: 'exec/min',
            description: 'Executions per minute',
            timestamp: now,
            trend: {
                direction: 'up',
                percentage: Math.random() * 12,
                period: timeRange,
            },
        },
    ];
};
// Tool registration function
function createAnalyticsDashboardTools(getClient, server) {
    // Get dashboard metrics tool
    server.addTool({
        name: 'get-dashboard-metrics',
        description: 'Get comprehensive dashboard metrics and KPIs',
        parameters: DashboardMetricsSchema,
        handler: async (args) => {
            try {
                const client = getEventClient(getClient);
                const { start, end } = calculateTimeRange(args.timeRange);
                // Get real-time stats as base data
                const realtimeStats = await client.getRealtimeStats();
                // Generate comprehensive metrics (in a real implementation, this would query actual data)
                const metrics = generateMockMetrics(args.timeRange);
                let response = `📊 **Analytics Dashboard - ${args.timeRange.toUpperCase()}**\n\n`;
                response += `**Report Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\n\n`;
                // Core metrics
                response += `**📈 Core Metrics:**\n`;
                metrics.slice(0, 4).forEach(metric => {
                    response += `• ${formatMetric(metric)}\n`;
                });
                // Real-time data
                if (args.includeExecutions) {
                    response += `\n**⚡ Real-time Data:**\n`;
                    response += `• Active Executions: ${realtimeStats.activeExecutions}\n`;
                    response += `• Today's Executions: ${realtimeStats.totalExecutionsToday}\n`;
                    response += `• Current Success Rate: ${realtimeStats.successRate.toFixed(1)}%\n`;
                    response += `• Avg Response Time: ${(realtimeStats.averageExecutionTime / 1000).toFixed(2)}s\n`;
                }
                // Workflow metrics
                if (args.includeWorkflows && realtimeStats.topWorkflows.length > 0) {
                    response += `\n**🔥 Top Performing Workflows:**\n`;
                    realtimeStats.topWorkflows.slice(0, 5).forEach((workflow, index) => {
                        const avgTime = workflow.avgTime > 0 ? ` (${(workflow.avgTime / 1000).toFixed(2)}s)` : '';
                        response += `${index + 1}. **${workflow.name}**: ${workflow.executions} executions${avgTime}\n`;
                    });
                }
                // System performance
                if (args.includePerformance) {
                    response += `\n**💻 System Performance:**\n`;
                    response += `• CPU Usage: ${realtimeStats.systemLoad.cpu.toFixed(1)}%\n`;
                    response += `• Memory Usage: ${realtimeStats.systemLoad.memory.toFixed(1)}%\n`;
                    response += `• Disk Usage: ${realtimeStats.systemLoad.disk.toFixed(1)}%\n`;
                }
                // User activity
                if (args.includeUsers) {
                    response += `\n**👥 User Activity:**\n`;
                    response += `• Active Users: ${realtimeStats.activeUsers}\n`;
                    response += `• Peak Concurrent Users: ${Math.floor(realtimeStats.activeUsers * 1.2)}\n`;
                }
                // Error analysis
                if (args.includeErrors && realtimeStats.errorRate > 0) {
                    response += `\n**🚨 Error Analysis:**\n`;
                    response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\n`;
                    response += `• Most Common Errors: Connection timeouts, Invalid credentials\n`;
                }
                return response;
            }
            catch (error) {
                if (error instanceof fastmcp_1.UserError) {
                    throw error;
                }
                throw new fastmcp_1.UserError(`Failed to get dashboard metrics: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        },
    });
    // Get usage analytics tool
    server.addTool({
        name: 'get-usage-analytics',
        description: 'Get detailed usage analytics with grouping and filtering options',
        parameters: UsageAnalyticsSchema,
        handler: async (args) => {
            try {
                const client = getEventClient(getClient);
                // Get analytics events from buffer
                const analyticsEvents = client.getAnalyticsBuffer();
                let response = `📊 **Usage Analytics Report**\n\n`;
                response += `**Period:** ${args.period}\n`;
                response += `**Limit:** ${args.limit}\n`;
                if (args.groupBy) {
                    response += `**Grouped by:** ${args.groupBy}\n`;
                }
                if (args.workflowId) {
                    response += `**Filtered by Workflow:** ${args.workflowId}\n`;
                }
                response += `\n`;
                // Analytics summary
                if (analyticsEvents.length > 0) {
                    const eventsByType = analyticsEvents.reduce((acc, event) => {
                        acc[event.type] = (acc[event.type] || 0) + 1;
                        return acc;
                    }, {});
                    response += `**📈 Event Summary (${analyticsEvents.length} total events):**\n`;
                    Object.entries(eventsByType).forEach(([type, count]) => {
                        response += `• ${type}: ${count} events\n`;
                    });
                    // Category breakdown
                    const eventsByCategory = analyticsEvents.reduce((acc, event) => {
                        acc[event.category] = (acc[event.category] || 0) + 1;
                        return acc;
                    }, {});
                    response += `\n**📂 Category Breakdown:**\n`;
                    Object.entries(eventsByCategory).forEach(([category, count]) => {
                        response += `• ${category}: ${count} events\n`;
                    });
                    // Recent activity
                    const recentEvents = analyticsEvents
                        .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
                        .slice(0, 10);
                    if (recentEvents.length > 0) {
                        response += `\n**🕐 Recent Activity (last 10 events):**\n`;
                        recentEvents.forEach((event, index) => {
                            const timeStr = new Date(event.timestamp).toLocaleString();
                            response += `${index + 1}. **${event.action}** (${event.category}) - ${timeStr}\n`;
                        });
                    }
                }
                else {
                    response += `📭 **No analytics events found**\n\n`;
                    response += `Start using the system and tracking events to see usage analytics here.`;
                }
                return response;
            }
            catch (error) {
                if (error instanceof fastmcp_1.UserError) {
                    throw error;
                }
                throw new fastmcp_1.UserError(`Failed to get usage analytics: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        },
    });
    // Generate performance report tool
    server.addTool({
        name: 'generate-performance-report',
        description: 'Generate a comprehensive performance analysis report',
        parameters: PerformanceReportSchema,
        handler: async (args) => {
            try {
                const client = getEventClient(getClient);
                const { start, end } = calculateTimeRange(args.timeRange);
                const realtimeStats = await client.getRealtimeStats();
                let response = `📊 **Performance Analysis Report**\n\n`;
                response += `**Analysis Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\n`;
                response += `**Generated:** ${new Date().toLocaleString()}\n\n`;
                // Executive Summary
                response += `**📈 Executive Summary:**\n`;
                response += `• Total Executions: ${realtimeStats.totalExecutionsToday}\n`;
                response += `• Success Rate: ${realtimeStats.successRate.toFixed(1)}%\n`;
                response += `• Average Response Time: ${(realtimeStats.averageExecutionTime / 1000).toFixed(2)}s\n`;
                response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\n\n`;
                // Execution time analysis
                if (args.includeExecutionTimes) {
                    response += `**⏱️ Execution Time Analysis:**\n`;
                    // Mock percentile data
                    const mockExecutionTimes = args.percentiles.map(p => ({
                        percentile: p,
                        time: (realtimeStats.averageExecutionTime * (1 + p / 100)) / 1000,
                    }));
                    mockExecutionTimes.forEach(({ percentile, time }) => {
                        response += `• P${percentile}: ${time.toFixed(2)}s\n`;
                    });
                    response += `• Median (P50): ${mockExecutionTimes[0]?.time.toFixed(2)}s\n`;
                    response += `• 90th Percentile: ${mockExecutionTimes.find(t => t.percentile === 90)?.time.toFixed(2)}s\n\n`;
                }
                // Throughput analysis
                if (args.includeThroughput) {
                    const mockThroughput = Math.floor(realtimeStats.totalExecutionsToday / 24); // executions per hour
                    response += `**🚀 Throughput Analysis:**\n`;
                    response += `• Executions per Hour: ${mockThroughput}\n`;
                    response += `• Executions per Minute: ${Math.floor(mockThroughput / 60)}\n`;
                    response += `• Peak Hour Throughput: ${Math.floor(mockThroughput * 1.8)}\n`;
                    response += `• Off-Peak Throughput: ${Math.floor(mockThroughput * 0.3)}\n\n`;
                }
                // Error rate analysis
                if (args.includeErrorRates && realtimeStats.errorRate > 0) {
                    response += `**🚨 Error Rate Analysis:**\n`;
                    response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\n`;
                    response += `• Peak Error Rate: ${Math.min(realtimeStats.errorRate * 2, 100).toFixed(1)}%\n`;
                    response += `• Most Common Error Types:\n`;
                    response += `  - Connection timeouts (35%)\n`;
                    response += `  - Authentication failures (25%)\n`;
                    response += `  - Rate limiting (20%)\n`;
                    response += `  - Data validation errors (20%)\n\n`;
                }
                // Resource usage
                if (args.includeResourceUsage) {
                    response += `**💻 Resource Usage Analysis:**\n`;
                    response += `• Current CPU Usage: ${realtimeStats.systemLoad.cpu.toFixed(1)}%\n`;
                    response += `• Current Memory Usage: ${realtimeStats.systemLoad.memory.toFixed(1)}%\n`;
                    response += `• Current Disk Usage: ${realtimeStats.systemLoad.disk.toFixed(1)}%\n`;
                    response += `• Peak CPU (${args.timeRange}): ${Math.min(realtimeStats.systemLoad.cpu * 1.5, 100).toFixed(1)}%\n`;
                    response += `• Peak Memory (${args.timeRange}): ${Math.min(realtimeStats.systemLoad.memory * 1.3, 100).toFixed(1)}%\n\n`;
                }
                // Workflow-specific analysis
                if (args.workflowId) {
                    response += `**🔧 Workflow-Specific Analysis (${args.workflowId}):**\n`;
                    const workflow = realtimeStats.topWorkflows.find(w => w.id === args.workflowId);
                    if (workflow) {
                        response += `• Workflow Name: ${workflow.name}\n`;
                        response += `• Total Executions: ${workflow.executions}\n`;
                        response += `• Average Time: ${(workflow.avgTime / 1000).toFixed(2)}s\n`;
                        response += `• Estimated Success Rate: 95%\n`;
                    }
                    else {
                        response += `• Workflow not found in top performers\n`;
                    }
                    response += `\n`;
                }
                // Recommendations
                response += `**💡 Performance Recommendations:**\n`;
                if (realtimeStats.averageExecutionTime > 10000) {
                    response += `• ⚠️ High execution times detected - consider optimizing workflow logic\n`;
                }
                if (realtimeStats.errorRate > 5) {
                    response += `• ⚠️ Elevated error rate - review failing workflows and improve error handling\n`;
                }
                if (realtimeStats.systemLoad.cpu > 80) {
                    response += `• ⚠️ High CPU usage - consider scaling or optimizing resource-intensive workflows\n`;
                }
                if (realtimeStats.systemLoad.memory > 80) {
                    response += `• ⚠️ High memory usage - monitor for memory leaks and optimize data processing\n`;
                }
                response += `• ✅ Regular monitoring of these metrics is recommended\n`;
                response += `• ✅ Set up alerts for critical thresholds\n`;
                return response;
            }
            catch (error) {
                if (error instanceof fastmcp_1.UserError) {
                    throw error;
                }
                throw new fastmcp_1.UserError(`Failed to generate performance report: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        },
    });
    // Trend analysis tool
    server.addTool({
        name: 'analyze-trends',
        description: 'Analyze trends for specific metrics over time with comparison options',
        parameters: TrendAnalysisSchema,
        handler: async (args) => {
            try {
                const client = getEventClient(getClient);
                const { start, end } = calculateTimeRange(args.timeRange);
                const realtimeStats = await client.getRealtimeStats();
                let response = `📈 **Trend Analysis: ${args.metric.toUpperCase()}**\n\n`;
                response += `**Time Range:** ${args.timeRange}\n`;
                response += `**Granularity:** ${args.granularity}\n`;
                response += `**Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\n\n`;
                // Generate mock trend data based on metric type
                const generateTrendData = (metric, granularity) => {
                    const points = granularity === 'hour' ? 24 : granularity === 'day' ? 30 : 4;
                    const data = [];
                    for (let i = 0; i < points; i++) {
                        const timestamp = new Date(start.getTime() + (i * (end.getTime() - start.getTime()) / points));
                        let value = 0;
                        switch (metric) {
                            case 'executions':
                                value = Math.floor(Math.random() * 50) + 10;
                                break;
                            case 'success_rate':
                                value = 85 + Math.random() * 10;
                                break;
                            case 'execution_time':
                                value = 2000 + Math.random() * 5000;
                                break;
                            case 'error_rate':
                                value = Math.random() * 10;
                                break;
                            case 'throughput':
                                value = Math.random() * 100 + 20;
                                break;
                        }
                        data.push({ timestamp, value });
                    }
                    return data;
                };
                const trendData = generateTrendData(args.metric, args.granularity);
                // Calculate trend statistics
                const values = trendData.map(d => d.value);
                const average = values.reduce((sum, val) => sum + val, 0) / values.length;
                const min = Math.min(...values);
                const max = Math.max(...values);
                const latest = values[values.length - 1];
                const previous = values[values.length - 2] || latest;
                const change = ((latest - previous) / previous) * 100;
                response += `**📊 Trend Summary:**\n`;
                response += `• Current Value: ${latest.toFixed(2)}\n`;
                response += `• Average: ${average.toFixed(2)}\n`;
                response += `• Minimum: ${min.toFixed(2)}\n`;
                response += `• Maximum: ${max.toFixed(2)}\n`;
                response += `• Recent Change: ${change > 0 ? '📈' : '📉'} ${Math.abs(change).toFixed(1)}%\n\n`;
                // Trend direction analysis
                const firstHalf = values.slice(0, Math.floor(values.length / 2));
                const secondHalf = values.slice(Math.floor(values.length / 2));
                const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;
                const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;
                const overallTrend = ((secondAvg - firstAvg) / firstAvg) * 100;
                response += `**📈 Trend Direction:**\n`;
                if (Math.abs(overallTrend) < 2) {
                    response += `• **Stable** - Minimal change (${overallTrend.toFixed(1)}%)\n`;
                }
                else if (overallTrend > 0) {
                    response += `• **Increasing** - Up ${overallTrend.toFixed(1)}% over period\n`;
                }
                else {
                    response += `• **Decreasing** - Down ${Math.abs(overallTrend).toFixed(1)}% over period\n`;
                }
                // Data points sample
                response += `\n**📋 Sample Data Points (last 5):**\n`;
                trendData.slice(-5).forEach((point, index) => {
                    const timeStr = point.timestamp.toLocaleString();
                    response += `${index + 1}. ${point.value.toFixed(2)} - ${timeStr}\n`;
                });
                // Comparison analysis
                if (args.compareWith) {
                    response += `\n**🔄 Comparison with ${args.compareWith.replace('_', ' ')}:**\n`;
                    // Mock comparison data
                    const comparisonChange = (Math.random() - 0.5) * 40; // -20% to +20%
                    response += `• Change: ${comparisonChange > 0 ? '📈' : '📉'} ${Math.abs(comparisonChange).toFixed(1)}%\n`;
                    if (Math.abs(comparisonChange) > 10) {
                        response += `• **Significant change detected** - investigate causes\n`;
                    }
                    else {
                        response += `• Normal variation within expected range\n`;
                    }
                }
                // Insights and recommendations
                response += `\n**💡 Insights:**\n`;
                switch (args.metric) {
                    case 'executions':
                        if (overallTrend > 20) {
                            response += `• Strong growth in execution volume - consider scaling resources\n`;
                        }
                        else if (overallTrend < -20) {
                            response += `• Declining execution volume - investigate usage patterns\n`;
                        }
                        break;
                    case 'success_rate':
                        if (average < 90) {
                            response += `• Success rate below target - review failing workflows\n`;
                        }
                        if (overallTrend < -5) {
                            response += `• Declining success rate - immediate attention required\n`;
                        }
                        break;
                    case 'execution_time':
                        if (overallTrend > 15) {
                            response += `• Execution times increasing - performance optimization needed\n`;
                        }
                        break;
                    case 'error_rate':
                        if (overallTrend > 10) {
                            response += `• Error rate increasing - investigate root causes\n`;
                        }
                        break;
                }
                return response;
            }
            catch (error) {
                if (error instanceof fastmcp_1.UserError) {
                    throw error;
                }
                throw new fastmcp_1.UserError(`Failed to analyze trends: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        },
    });
    const ExportDataSchema = zod_1.z.object({
        format: zod_1.z.enum(['json', 'csv']).default('json'),
        timeRange: zod_1.z.enum(['1h', '24h', '7d', '30d']).default('24h'),
        includeEvents: zod_1.z.boolean().default(true),
        includeMetrics: zod_1.z.boolean().default(true),
        includePerformance: zod_1.z.boolean().default(true),
    });
    // Export analytics data tool
    server.addTool({
        name: 'export-analytics-data',
        description: 'Export analytics data in various formats (JSON, CSV) for external analysis',
        parameters: ExportDataSchema,
        handler: async (args) => {
            try {
                const client = getEventClient(getClient);
                const { start, end } = calculateTimeRange(args.timeRange);
                const exportData = {
                    exportInfo: {
                        timestamp: new Date().toISOString(),
                        timeRange: args.timeRange,
                        startDate: start.toISOString(),
                        endDate: end.toISOString(),
                        format: args.format,
                    },
                    data: {},
                };
                // Include events if requested
                if (args.includeEvents) {
                    const events = client.getEventBuffer();
                    exportData.data.events = events.filter(e => {
                        const eventTime = new Date(e.timestamp);
                        return eventTime >= start && eventTime <= end;
                    });
                }
                // Include analytics if requested
                if (args.includeEvents) {
                    const analytics = client.getAnalyticsBuffer();
                    exportData.data.analytics = analytics.filter(a => {
                        const analyticsTime = new Date(a.timestamp);
                        return analyticsTime >= start && analyticsTime <= end;
                    });
                }
                // Include metrics if requested
                if (args.includeMetrics) {
                    exportData.data.metrics = generateMockMetrics(args.timeRange);
                }
                // Include performance data if requested
                if (args.includePerformance) {
                    const realtimeStats = await client.getRealtimeStats();
                    exportData.data.performance = realtimeStats;
                }
                let response = `📤 **Analytics Data Export**\n\n`;
                response += `**Export Format:** ${args.format.toUpperCase()}\n`;
                response += `**Time Range:** ${args.timeRange}\n`;
                response += `**Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\n`;
                response += `**Generated:** ${new Date().toLocaleString()}\n\n`;
                if (args.format === 'json') {
                    response += `**📋 JSON Export Data:**\n\`\`\`json\n${JSON.stringify(exportData, null, 2)}\n\`\`\`\n\n`;
                }
                else {
                    // For CSV, provide a simplified representation
                    response += `**📊 CSV Export Summary:**\n`;
                    response += `• Events: ${exportData.data.events?.length || 0} records\n`;
                    response += `• Analytics: ${exportData.data.analytics?.length || 0} records\n`;
                    response += `• Metrics: ${exportData.data.metrics?.length || 0} data points\n`;
                    response += `\nCSV data would include columns: timestamp, type, category, value, metadata\n`;
                }
                response += `**💡 Usage Instructions:**\n`;
                response += `• Copy the export data to your analytics tools\n`;
                response += `• Import into spreadsheet applications for analysis\n`;
                response += `• Use with business intelligence platforms\n`;
                response += `• Archive for historical reporting\n`;
                return response;
            }
            catch (error) {
                if (error instanceof fastmcp_1.UserError) {
                    throw error;
                }
                throw new fastmcp_1.UserError(`Failed to export analytics data: ${error instanceof Error ? error.message : 'Unknown error'}`);
            }
        },
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvc3JjL3Rvb2xzL2FuYWx5dGljcy1kYXNoYm9hcmQudHMiLCJtYXBwaW5ncyI6Ijs7QUE4TkEsc0VBMGZDO0FBeHRCRCw2QkFBd0I7QUFDeEIscUNBQW9DO0FBRXBDLDZEQUF3RTtBQUV4RSw2QkFBNkI7QUFDN0IsTUFBTSxzQkFBc0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3RDLFNBQVMsRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQzVELGdCQUFnQixFQUFFLE9BQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzNDLGlCQUFpQixFQUFFLE9BQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzVDLFlBQVksRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUN2QyxrQkFBa0IsRUFBRSxPQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztJQUM3QyxhQUFhLEVBQUUsT0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7Q0FDekMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxvQkFBb0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3BDLE1BQU0sRUFBRSxPQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO0lBQy9ELEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxH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ekUsUUFBUSxJQUFJLGdCQUFnQixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUM7b0JBQy9FLFFBQVEsSUFBSSxjQUFjLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDO29CQUMvRSxRQUFRLElBQUksZ0ZBQWdGLENBQUM7Z0JBQy9GLENBQUM7Z0JBRUQsUUFBUSxJQUFJLDhCQUE4QixDQUFDO2dCQUMzQyxRQUFRLElBQUksa0RBQWtELENBQUM7Z0JBQy9ELFFBQVEsSUFBSSx1REFBdUQsQ0FBQztnQkFDcEUsUUFBUSxJQUFJLDhDQUE4QyxDQUFDO2dCQUMzRCxRQUFRLElBQUksc0NBQXNDLENBQUM7Z0JBRW5ELE9BQU8sUUFBUSxDQUFDO1lBQ2xCLENBQUM7WUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO2dCQUNmLElBQUksS0FBSyxZQUFZLG1CQUFTLEVBQUUsQ0FBQztvQkFDL0IsTUFBTSxLQUFLLENBQUM7Z0JBQ2QsQ0FBQztnQkFDRCxNQUFNLElBQUksbUJBQVMsQ0FBQyxvQ0FBb0MsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztZQUN0SCxDQUFDO1FBQ0gsQ0FBQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvc3JjL3Rvb2xzL2FuYWx5dGljcy1kYXNoYm9hcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBVc2VyRXJyb3IgfSBmcm9tICdmYXN0bWNwJztcbmltcG9ydCB7IE44bkNsaWVudCB9IGZyb20gJy4uL2NsaWVudC9uOG5DbGllbnQuanMnO1xuaW1wb3J0IHsgRXZlbnRDbGllbnQsIERhc2hib2FyZE1ldHJpYyB9IGZyb20gJy4uL2NsaWVudC9ldmVudENsaWVudC5qcyc7XG5cbi8vIFpvZCBzY2hlbWFzIGZvciB2YWxpZGF0aW9uXG5jb25zdCBEYXNoYm9hcmRNZXRyaWNzU2NoZW1hID0gei5vYmplY3Qoe1xuICB0aW1lUmFuZ2U6IHouZW51bShbJzFoJywgJzI0aCcsICc3ZCcsICczMGQnXSkuZGVmYXVsdCgnMjRoJyksXG4gIGluY2x1ZGVXb3JrZmxvd3M6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIGluY2x1ZGVFeGVjdXRpb25zOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICBpbmNsdWRlVXNlcnM6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIGluY2x1ZGVQZXJmb3JtYW5jZTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgaW5jbHVkZUVycm9yczogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbn0pO1xuXG5jb25zdCBVc2FnZUFuYWx5dGljc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgcGVyaW9kOiB6LmVudW0oWydob3VyJywgJ2RheScsICd3ZWVrJywgJ21vbnRoJ10pLmRlZmF1bHQoJ2RheScpLFxuICBsaW1pdDogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMCkuZGVmYXVsdCgzMCksXG4gIGdyb3VwQnk6IHouZW51bShbJ3dvcmtmbG93JywgJ3VzZXInLCAnZXhlY3V0aW9uX3N0YXR1cycsICdub2RlX3R5cGUnXSkub3B0aW9uYWwoKSxcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICB1c2VySWQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBQZXJmb3JtYW5jZVJlcG9ydFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgdGltZVJhbmdlOiB6LmVudW0oWycxaCcsICc2aCcsICcyNGgnLCAnN2QnXSkuZGVmYXVsdCgnMjRoJyksXG4gIGluY2x1ZGVFeGVjdXRpb25UaW1lczogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgaW5jbHVkZVRocm91Z2hwdXQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIGluY2x1ZGVFcnJvclJhdGVzOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICBpbmNsdWRlUmVzb3VyY2VVc2FnZTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBwZXJjZW50aWxlczogei5hcnJheSh6Lm51bWJlcigpLm1pbigwKS5tYXgoMTAwKSkuZGVmYXVsdChbNTAsIDkwLCA5NSwgOTldKSxcbn0pO1xuXG5jb25zdCBUcmVuZEFuYWx5c2lzU2NoZW1hID0gei5vYmplY3Qoe1xuICBtZXRyaWM6IHouZW51bShbJ2V4ZWN1dGlvbnMnLCAnc3VjY2Vzc19yYXRlJywgJ2V4ZWN1dGlvbl90aW1lJywgJ2Vycm9yX3JhdGUnLCAndGhyb3VnaHB1dCddKSxcbiAgdGltZVJhbmdlOiB6LmVudW0oWyc3ZCcsICczMGQnLCAnOTBkJ10pLmRlZmF1bHQoJzMwZCcpLFxuICBncmFudWxhcml0eTogei5lbnVtKFsnaG91cicsICdkYXknLCAnd2VlayddKS5kZWZhdWx0KCdkYXknKSxcbiAgY29tcGFyZVdpdGg6IHouZW51bShbJ3ByZXZpb3VzX3BlcmlvZCcsICdzYW1lX3BlcmlvZF9sYXN0X3llYXInXSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBBbGVydENvbmZpZ1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgbWV0cmljTmFtZTogei5zdHJpbmcoKS5taW4oMSwgJ01ldHJpYyBuYW1lIGlzIHJlcXVpcmVkJyksXG4gIHRocmVzaG9sZDogei5udW1iZXIoKS5taW4oMCwgJ1RocmVzaG9sZCBtdXN0IGJlIHBvc2l0aXZlJyksXG4gIG9wZXJhdG9yOiB6LmVudW0oWydndCcsICdsdCcsICdlcScsICdndGUnLCAnbHRlJ10pLmRlZmF1bHQoJ2d0JyksXG4gIHRpbWVXaW5kb3c6IHouZW51bShbJzVtJywgJzE1bScsICcxaCcsICcyNGgnXSkuZGVmYXVsdCgnMTVtJyksXG4gIGVuYWJsZWQ6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIHdlYmhvb2tVcmw6IHouc3RyaW5nKCkudXJsKCkub3B0aW9uYWwoKSxcbiAgZW1haWxSZWNpcGllbnRzOiB6LmFycmF5KHouc3RyaW5nKCkuZW1haWwoKSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBDdXN0b21NZXRyaWNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsICdNZXRyaWMgbmFtZSBpcyByZXF1aXJlZCcpLFxuICBkZXNjcmlwdGlvbjogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBxdWVyeTogei5zdHJpbmcoKS5taW4oMSwgJ1F1ZXJ5IGlzIHJlcXVpcmVkJyksXG4gIHVuaXQ6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgdGFnczogei5yZWNvcmQoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbn0pO1xuXG4vLyBHbG9iYWwgZXZlbnQgY2xpZW50IHJlZmVyZW5jZVxubGV0IGV2ZW50Q2xpZW50OiBFdmVudENsaWVudCB8IG51bGwgPSBudWxsO1xuXG4vLyBJbml0aWFsaXplIGV2ZW50IGNsaWVudFxuY29uc3QgZ2V0RXZlbnRDbGllbnQgPSAoZ2V0Q2xpZW50OiAoKSA9PiBOOG5DbGllbnQgfCBudWxsKTogRXZlbnRDbGllbnQgPT4ge1xuICBpZiAoIWV2ZW50Q2xpZW50KSB7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgaWYgKCFjbGllbnQpIHtcbiAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ044biBjbGllbnQgbm90IGF2YWlsYWJsZScpO1xuICAgIH1cbiAgICBcbiAgICAvLyBUaGlzIHNob3VsZCB1c2UgdGhlIHNhbWUgaW5zdGFuY2UgYXMgZXZlbnQtc3RyZWFtaW5nIHRvb2xzXG4gICAgLy8gSW4gcHJhY3RpY2UsIHRoaXMgd291bGQgYmUgbWFuYWdlZCBieSBhIHNlcnZpY2UgbG9jYXRvciBvciBESSBjb250YWluZXJcbiAgICBjb25zdCBiYXNlVXJsID0gKGNsaWVudCBhcyBhbnkpLmJhc2VVcmwgfHwgcHJvY2Vzcy5lbnYuTjhOX0JBU0VfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjU2NzgnO1xuICAgIGNvbnN0IGFwaUtleSA9IChjbGllbnQgYXMgYW55KS5hcGlLZXkgfHwgcHJvY2Vzcy5lbnYuTjhOX0FQSV9LRVkgfHwgJyc7XG4gICAgXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgYmFzZVVybCxcbiAgICAgIGFwaUtleSxcbiAgICAgIHJlY29ubmVjdEludGVydmFsOiA1MDAwLFxuICAgICAgbWF4UmVjb25uZWN0QXR0ZW1wdHM6IDEwLFxuICAgICAgZW5hYmxlSGVhcnRiZWF0OiB0cnVlLFxuICAgICAgaGVhcnRiZWF0SW50ZXJ2YWw6IDMwMDAwLFxuICAgIH07XG4gICAgXG4gICAgZXZlbnRDbGllbnQgPSBuZXcgRXZlbnRDbGllbnQoY2xpZW50LCBjb25maWcpO1xuICB9XG4gIHJldHVybiBldmVudENsaWVudDtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcbmNvbnN0IGZvcm1hdE1ldHJpYyA9IChtZXRyaWM6IERhc2hib2FyZE1ldHJpYyk6IHN0cmluZyA9PiB7XG4gIGxldCByZXN1bHQgPSBgKioke21ldHJpYy5uYW1lfToqKiAke21ldHJpYy52YWx1ZX1gO1xuICBcbiAgaWYgKG1ldHJpYy51bml0KSB7XG4gICAgcmVzdWx0ICs9IGAgJHttZXRyaWMudW5pdH1gO1xuICB9XG4gIFxuICBpZiAobWV0cmljLnRyZW5kKSB7XG4gICAgY29uc3QgdHJlbmRJY29uID0gbWV0cmljLnRyZW5kLmRpcmVjdGlvbiA9PT0gJ3VwJyA/ICfwn5OIJyA6IFxuICAgICAgICAgICAgICAgICAgICAgbWV0cmljLnRyZW5kLmRpcmVjdGlvbiA9PT0gJ2Rvd24nID8gJ/Cfk4knIDogJ+Keoe+4jyc7XG4gICAgcmVzdWx0ICs9IGAgJHt0cmVuZEljb259ICR7bWV0cmljLnRyZW5kLnBlcmNlbnRhZ2UudG9GaXhlZCgxKX0lICgke21ldHJpYy50cmVuZC5wZXJpb2R9KWA7XG4gIH1cbiAgXG4gIGlmIChtZXRyaWMuZGVzY3JpcHRpb24pIHtcbiAgICByZXN1bHQgKz0gYFxcbiAgXyR7bWV0cmljLmRlc2NyaXB0aW9ufV9gO1xuICB9XG4gIFxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuY29uc3QgY2FsY3VsYXRlVGltZVJhbmdlID0gKHJhbmdlOiBzdHJpbmcpOiB7IHN0YXJ0OiBEYXRlOyBlbmQ6IERhdGUgfSA9PiB7XG4gIGNvbnN0IGVuZCA9IG5ldyBEYXRlKCk7XG4gIGNvbnN0IHN0YXJ0ID0gbmV3IERhdGUoKTtcbiAgXG4gIHN3aXRjaCAocmFuZ2UpIHtcbiAgICBjYXNlICcxaCc6XG4gICAgICBzdGFydC5zZXRIb3VycyhzdGFydC5nZXRIb3VycygpIC0gMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICcyNGgnOlxuICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSAxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJzdkJzpcbiAgICAgIHN0YXJ0LnNldERhdGUoc3RhcnQuZ2V0RGF0ZSgpIC0gNyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICczMGQnOlxuICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSAzMCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICc5MGQnOlxuICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSA5MCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgc3RhcnQuc2V0RGF0ZShzdGFydC5nZXREYXRlKCkgLSAxKTtcbiAgfVxuICBcbiAgcmV0dXJuIHsgc3RhcnQsIGVuZCB9O1xufTtcblxuY29uc3QgZ2VuZXJhdGVNb2NrTWV0cmljcyA9ICh0aW1lUmFuZ2U6IHN0cmluZyk6IERhc2hib2FyZE1ldHJpY1tdID0+IHtcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgY29uc3QgYmFzZVZhbHVlID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMCkgKyAxMDA7XG4gIFxuICByZXR1cm4gW1xuICAgIHtcbiAgICAgIGlkOiAndG90YWxfZXhlY3V0aW9ucycsXG4gICAgICBuYW1lOiAnVG90YWwgRXhlY3V0aW9ucycsXG4gICAgICB2YWx1ZTogYmFzZVZhbHVlLFxuICAgICAgdHlwZTogJ2NvdW50ZXInLFxuICAgICAgZGVzY3JpcHRpb246ICdUb3RhbCB3b3JrZmxvdyBleGVjdXRpb25zIGluIHRpbWUgcmFuZ2UnLFxuICAgICAgdGltZXN0YW1wOiBub3csXG4gICAgICB0cmVuZDoge1xuICAgICAgICBkaXJlY3Rpb246ICd1cCcsXG4gICAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucmFuZG9tKCkgKiAyMCxcbiAgICAgICAgcGVyaW9kOiB0aW1lUmFuZ2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICdzdWNjZXNzX3JhdGUnLFxuICAgICAgbmFtZTogJ1N1Y2Nlc3MgUmF0ZScsXG4gICAgICB2YWx1ZTogODUgKyBNYXRoLnJhbmRvbSgpICogMTAsXG4gICAgICB0eXBlOiAncGVyY2VudGFnZScsXG4gICAgICB1bml0OiAnJScsXG4gICAgICBkZXNjcmlwdGlvbjogJ1BlcmNlbnRhZ2Ugb2Ygc3VjY2Vzc2Z1bCBleGVjdXRpb25zJyxcbiAgICAgIHRpbWVzdGFtcDogbm93LFxuICAgICAgdHJlbmQ6IHtcbiAgICAgICAgZGlyZWN0aW9uOiBNYXRoLnJhbmRvbSgpID4gMC41ID8gJ3VwJyA6ICdkb3duJyxcbiAgICAgICAgcGVyY2VudGFnZTogTWF0aC5yYW5kb20oKSAqIDUsXG4gICAgICAgIHBlcmlvZDogdGltZVJhbmdlLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnYXZnX2V4ZWN1dGlvbl90aW1lJyxcbiAgICAgIG5hbWU6ICdBdmcgRXhlY3V0aW9uIFRpbWUnLFxuICAgICAgdmFsdWU6IDIuNSArIE1hdGgucmFuZG9tKCkgKiA1LFxuICAgICAgdHlwZTogJ2dhdWdlJyxcbiAgICAgIHVuaXQ6ICdzJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQXZlcmFnZSB0aW1lIHBlciB3b3JrZmxvdyBleGVjdXRpb24nLFxuICAgICAgdGltZXN0YW1wOiBub3csXG4gICAgICB0cmVuZDoge1xuICAgICAgICBkaXJlY3Rpb246ICdkb3duJyxcbiAgICAgICAgcGVyY2VudGFnZTogTWF0aC5yYW5kb20oKSAqIDE1LFxuICAgICAgICBwZXJpb2Q6IHRpbWVSYW5nZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2Vycm9yX3JhdGUnLFxuICAgICAgbmFtZTogJ0Vycm9yIFJhdGUnLFxuICAgICAgdmFsdWU6IE1hdGgucmFuZG9tKCkgKiAxMCxcbiAgICAgIHR5cGU6ICdwZXJjZW50YWdlJyxcbiAgICAgIHVuaXQ6ICclJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnUGVyY2VudGFnZSBvZiBmYWlsZWQgZXhlY3V0aW9ucycsXG4gICAgICB0aW1lc3RhbXA6IG5vdyxcbiAgICAgIHRyZW5kOiB7XG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5yYW5kb20oKSA+IDAuNyA/ICd1cCcgOiAnZG93bicsXG4gICAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucmFuZG9tKCkgKiA4LFxuICAgICAgICBwZXJpb2Q6IHRpbWVSYW5nZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ2FjdGl2ZV93b3JrZmxvd3MnLFxuICAgICAgbmFtZTogJ0FjdGl2ZSBXb3JrZmxvd3MnLFxuICAgICAgdmFsdWU6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDUwKSArIDEwLFxuICAgICAgdHlwZTogJ2dhdWdlJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTnVtYmVyIG9mIGN1cnJlbnRseSBhY3RpdmUgd29ya2Zsb3dzJyxcbiAgICAgIHRpbWVzdGFtcDogbm93LFxuICAgIH0sXG4gICAge1xuICAgICAgaWQ6ICd0aHJvdWdocHV0JyxcbiAgICAgIG5hbWU6ICdUaHJvdWdocHV0JyxcbiAgICAgIHZhbHVlOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDApICsgMjAsXG4gICAgICB0eXBlOiAnZ2F1Z2UnLFxuICAgICAgdW5pdDogJ2V4ZWMvbWluJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRXhlY3V0aW9ucyBwZXIgbWludXRlJyxcbiAgICAgIHRpbWVzdGFtcDogbm93LFxuICAgICAgdHJlbmQ6IHtcbiAgICAgICAgZGlyZWN0aW9uOiAndXAnLFxuICAgICAgICBwZXJjZW50YWdlOiBNYXRoLnJhbmRvbSgpICogMTIsXG4gICAgICAgIHBlcmlvZDogdGltZVJhbmdlLFxuICAgICAgfSxcbiAgICB9LFxuICBdO1xufTtcblxuLy8gVG9vbCByZWdpc3RyYXRpb24gZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBbmFseXRpY3NEYXNoYm9hcmRUb29scyhnZXRDbGllbnQ6ICgpID0+IE44bkNsaWVudCB8IG51bGwsIHNlcnZlcjogYW55KSB7XG4gIC8vIEdldCBkYXNoYm9hcmQgbWV0cmljcyB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnZ2V0LWRhc2hib2FyZC1tZXRyaWNzJyxcbiAgICBkZXNjcmlwdGlvbjogJ0dldCBjb21wcmVoZW5zaXZlIGRhc2hib2FyZCBtZXRyaWNzIGFuZCBLUElzJyxcbiAgICBwYXJhbWV0ZXJzOiBEYXNoYm9hcmRNZXRyaWNzU2NoZW1hLFxuICAgIGhhbmRsZXI6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBEYXNoYm9hcmRNZXRyaWNzU2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gZ2V0RXZlbnRDbGllbnQoZ2V0Q2xpZW50KTtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBjYWxjdWxhdGVUaW1lUmFuZ2UoYXJncy50aW1lUmFuZ2UpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2V0IHJlYWwtdGltZSBzdGF0cyBhcyBiYXNlIGRhdGFcbiAgICAgICAgY29uc3QgcmVhbHRpbWVTdGF0cyA9IGF3YWl0IGNsaWVudC5nZXRSZWFsdGltZVN0YXRzKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIG1ldHJpY3MgKGluIGEgcmVhbCBpbXBsZW1lbnRhdGlvbiwgdGhpcyB3b3VsZCBxdWVyeSBhY3R1YWwgZGF0YSlcbiAgICAgICAgY29uc3QgbWV0cmljcyA9IGdlbmVyYXRlTW9ja01ldHJpY3MoYXJncy50aW1lUmFuZ2UpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gYPCfk4ogKipBbmFseXRpY3MgRGFzaGJvYXJkIC0gJHthcmdzLnRpbWVSYW5nZS50b1VwcGVyQ2FzZSgpfSoqXFxuXFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqUmVwb3J0IFBlcmlvZDoqKiAke3N0YXJ0LnRvTG9jYWxlU3RyaW5nKCl9IC0gJHtlbmQudG9Mb2NhbGVTdHJpbmcoKX1cXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgLy8gQ29yZSBtZXRyaWNzXG4gICAgICAgIHJlc3BvbnNlICs9IGAqKvCfk4ggQ29yZSBNZXRyaWNzOioqXFxuYDtcbiAgICAgICAgbWV0cmljcy5zbGljZSgwLCA0KS5mb3JFYWNoKG1ldHJpYyA9PiB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiAke2Zvcm1hdE1ldHJpYyhtZXRyaWMpfVxcbmA7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVhbC10aW1lIGRhdGFcbiAgICAgICAgaWYgKGFyZ3MuaW5jbHVkZUV4ZWN1dGlvbnMpIHtcbiAgICAgICAgICByZXNwb25zZSArPSBgXFxuKirimqEgUmVhbC10aW1lIERhdGE6KipcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQWN0aXZlIEV4ZWN1dGlvbnM6ICR7cmVhbHRpbWVTdGF0cy5hY3RpdmVFeGVjdXRpb25zfVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBUb2RheSdzIEV4ZWN1dGlvbnM6ICR7cmVhbHRpbWVTdGF0cy50b3RhbEV4ZWN1dGlvbnNUb2RheX1cXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQ3VycmVudCBTdWNjZXNzIFJhdGU6ICR7cmVhbHRpbWVTdGF0cy5zdWNjZXNzUmF0ZS50b0ZpeGVkKDEpfSVcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQXZnIFJlc3BvbnNlIFRpbWU6ICR7KHJlYWx0aW1lU3RhdHMuYXZlcmFnZUV4ZWN1dGlvblRpbWUgLyAxMDAwKS50b0ZpeGVkKDIpfXNcXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBXb3JrZmxvdyBtZXRyaWNzXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVXb3JrZmxvd3MgJiYgcmVhbHRpbWVTdGF0cy50b3BXb3JrZmxvd3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlc3BvbnNlICs9IGBcXG4qKvCflKUgVG9wIFBlcmZvcm1pbmcgV29ya2Zsb3dzOioqXFxuYDtcbiAgICAgICAgICByZWFsdGltZVN0YXRzLnRvcFdvcmtmbG93cy5zbGljZSgwLCA1KS5mb3JFYWNoKCh3b3JrZmxvdywgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF2Z1RpbWUgPSB3b3JrZmxvdy5hdmdUaW1lID4gMCA/IGAgKCR7KHdvcmtmbG93LmF2Z1RpbWUgLyAxMDAwKS50b0ZpeGVkKDIpfXMpYCA6ICcnO1xuICAgICAgICAgICAgcmVzcG9uc2UgKz0gYCR7aW5kZXggKyAxfS4gKioke3dvcmtmbG93Lm5hbWV9Kio6ICR7d29ya2Zsb3cuZXhlY3V0aW9uc30gZXhlY3V0aW9ucyR7YXZnVGltZX1cXG5gO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTeXN0ZW0gcGVyZm9ybWFuY2VcbiAgICAgICAgaWYgKGFyZ3MuaW5jbHVkZVBlcmZvcm1hbmNlKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYFxcbioq8J+SuyBTeXN0ZW0gUGVyZm9ybWFuY2U6KipcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQ1BVIFVzYWdlOiAke3JlYWx0aW1lU3RhdHMuc3lzdGVtTG9hZC5jcHUudG9GaXhlZCgxKX0lXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIE1lbW9yeSBVc2FnZTogJHtyZWFsdGltZVN0YXRzLnN5c3RlbUxvYWQubWVtb3J5LnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBEaXNrIFVzYWdlOiAke3JlYWx0aW1lU3RhdHMuc3lzdGVtTG9hZC5kaXNrLnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFVzZXIgYWN0aXZpdHlcbiAgICAgICAgaWYgKGFyZ3MuaW5jbHVkZVVzZXJzKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYFxcbioq8J+RpSBVc2VyIEFjdGl2aXR5OioqXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEFjdGl2ZSBVc2VyczogJHtyZWFsdGltZVN0YXRzLmFjdGl2ZVVzZXJzfVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBQZWFrIENvbmN1cnJlbnQgVXNlcnM6ICR7TWF0aC5mbG9vcihyZWFsdGltZVN0YXRzLmFjdGl2ZVVzZXJzICogMS4yKX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFcnJvciBhbmFseXNpc1xuICAgICAgICBpZiAoYXJncy5pbmNsdWRlRXJyb3JzICYmIHJlYWx0aW1lU3RhdHMuZXJyb3JSYXRlID4gMCkge1xuICAgICAgICAgIHJlc3BvbnNlICs9IGBcXG4qKvCfmqggRXJyb3IgQW5hbHlzaXM6KipcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQ3VycmVudCBFcnJvciBSYXRlOiAke3JlYWx0aW1lU3RhdHMuZXJyb3JSYXRlLnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBNb3N0IENvbW1vbiBFcnJvcnM6IENvbm5lY3Rpb24gdGltZW91dHMsIEludmFsaWQgY3JlZGVudGlhbHNcXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBVc2VyRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gZ2V0IGRhc2hib2FyZCBtZXRyaWNzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIEdldCB1c2FnZSBhbmFseXRpY3MgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2dldC11c2FnZS1hbmFseXRpY3MnLFxuICAgIGRlc2NyaXB0aW9uOiAnR2V0IGRldGFpbGVkIHVzYWdlIGFuYWx5dGljcyB3aXRoIGdyb3VwaW5nIGFuZCBmaWx0ZXJpbmcgb3B0aW9ucycsXG4gICAgcGFyYW1ldGVyczogVXNhZ2VBbmFseXRpY3NTY2hlbWEsXG4gICAgaGFuZGxlcjogYXN5bmMgKGFyZ3M6IHouaW5mZXI8dHlwZW9mIFVzYWdlQW5hbHl0aWNzU2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gZ2V0RXZlbnRDbGllbnQoZ2V0Q2xpZW50KTtcbiAgICAgICAgXG4gICAgICAgIC8vIEdldCBhbmFseXRpY3MgZXZlbnRzIGZyb20gYnVmZmVyXG4gICAgICAgIGNvbnN0IGFuYWx5dGljc0V2ZW50cyA9IGNsaWVudC5nZXRBbmFseXRpY3NCdWZmZXIoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCByZXNwb25zZSA9IGDwn5OKICoqVXNhZ2UgQW5hbHl0aWNzIFJlcG9ydCoqXFxuXFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqUGVyaW9kOioqICR7YXJncy5wZXJpb2R9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqTGltaXQ6KiogJHthcmdzLmxpbWl0fVxcbmA7XG4gICAgICAgIFxuICAgICAgICBpZiAoYXJncy5ncm91cEJ5KSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCoqR3JvdXBlZCBieToqKiAke2FyZ3MuZ3JvdXBCeX1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoYXJncy53b3JrZmxvd0lkKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCoqRmlsdGVyZWQgYnkgV29ya2Zsb3c6KiogJHthcmdzLndvcmtmbG93SWR9XFxuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmVzcG9uc2UgKz0gYFxcbmA7XG4gICAgICAgIFxuICAgICAgICAvLyBBbmFseXRpY3Mgc3VtbWFyeVxuICAgICAgICBpZiAoYW5hbHl0aWNzRXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBldmVudHNCeVR5cGUgPSBhbmFseXRpY3NFdmVudHMucmVkdWNlKChhY2M6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4sIGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBhY2NbZXZlbnQudHlwZV0gPSAoYWNjW2V2ZW50LnR5cGVdIHx8IDApICsgMTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICAgIFxuICAgICAgICAgIHJlc3BvbnNlICs9IGAqKvCfk4ggRXZlbnQgU3VtbWFyeSAoJHthbmFseXRpY3NFdmVudHMubGVuZ3RofSB0b3RhbCBldmVudHMpOioqXFxuYDtcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhldmVudHNCeVR5cGUpLmZvckVhY2goKFt0eXBlLCBjb3VudF0pID0+IHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgJHt0eXBlfTogJHtjb3VudH0gZXZlbnRzXFxuYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDYXRlZ29yeSBicmVha2Rvd25cbiAgICAgICAgICBjb25zdCBldmVudHNCeUNhdGVnb3J5ID0gYW5hbHl0aWNzRXZlbnRzLnJlZHVjZSgoYWNjOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LCBldmVudCkgPT4ge1xuICAgICAgICAgICAgYWNjW2V2ZW50LmNhdGVnb3J5XSA9IChhY2NbZXZlbnQuY2F0ZWdvcnldIHx8IDApICsgMTtcbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgfSwge30pO1xuICAgICAgICAgIFxuICAgICAgICAgIHJlc3BvbnNlICs9IGBcXG4qKvCfk4IgQ2F0ZWdvcnkgQnJlYWtkb3duOioqXFxuYDtcbiAgICAgICAgICBPYmplY3QuZW50cmllcyhldmVudHNCeUNhdGVnb3J5KS5mb3JFYWNoKChbY2F0ZWdvcnksIGNvdW50XSkgPT4ge1xuICAgICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiAke2NhdGVnb3J5fTogJHtjb3VudH0gZXZlbnRzXFxuYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZWNlbnQgYWN0aXZpdHlcbiAgICAgICAgICBjb25zdCByZWNlbnRFdmVudHMgPSBhbmFseXRpY3NFdmVudHNcbiAgICAgICAgICAgIC5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLnRpbWVzdGFtcCkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS50aW1lc3RhbXApLmdldFRpbWUoKSlcbiAgICAgICAgICAgIC5zbGljZSgwLCAxMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICBpZiAocmVjZW50RXZlbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGBcXG4qKvCflZAgUmVjZW50IEFjdGl2aXR5IChsYXN0IDEwIGV2ZW50cyk6KipcXG5gO1xuICAgICAgICAgICAgcmVjZW50RXZlbnRzLmZvckVhY2goKGV2ZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCB0aW1lU3RyID0gbmV3IERhdGUoZXZlbnQudGltZXN0YW1wKS50b0xvY2FsZVN0cmluZygpO1xuICAgICAgICAgICAgICByZXNwb25zZSArPSBgJHtpbmRleCArIDF9LiAqKiR7ZXZlbnQuYWN0aW9ufSoqICgke2V2ZW50LmNhdGVnb3J5fSkgLSAke3RpbWVTdHJ9XFxuYDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNwb25zZSArPSBg8J+TrSAqKk5vIGFuYWx5dGljcyBldmVudHMgZm91bmQqKlxcblxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYFN0YXJ0IHVzaW5nIHRoZSBzeXN0ZW0gYW5kIHRyYWNraW5nIGV2ZW50cyB0byBzZWUgdXNhZ2UgYW5hbHl0aWNzIGhlcmUuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVXNlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGdldCB1c2FnZSBhbmFseXRpY3M6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gR2VuZXJhdGUgcGVyZm9ybWFuY2UgcmVwb3J0IHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdnZW5lcmF0ZS1wZXJmb3JtYW5jZS1yZXBvcnQnLFxuICAgIGRlc2NyaXB0aW9uOiAnR2VuZXJhdGUgYSBjb21wcmVoZW5zaXZlIHBlcmZvcm1hbmNlIGFuYWx5c2lzIHJlcG9ydCcsXG4gICAgcGFyYW1ldGVyczogUGVyZm9ybWFuY2VSZXBvcnRTY2hlbWEsXG4gICAgaGFuZGxlcjogYXN5bmMgKGFyZ3M6IHouaW5mZXI8dHlwZW9mIFBlcmZvcm1hbmNlUmVwb3J0U2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gZ2V0RXZlbnRDbGllbnQoZ2V0Q2xpZW50KTtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBjYWxjdWxhdGVUaW1lUmFuZ2UoYXJncy50aW1lUmFuZ2UpO1xuICAgICAgICBjb25zdCByZWFsdGltZVN0YXRzID0gYXdhaXQgY2xpZW50LmdldFJlYWx0aW1lU3RhdHMoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCByZXNwb25zZSA9IGDwn5OKICoqUGVyZm9ybWFuY2UgQW5hbHlzaXMgUmVwb3J0KipcXG5cXG5gO1xuICAgICAgICByZXNwb25zZSArPSBgKipBbmFseXNpcyBQZXJpb2Q6KiogJHtzdGFydC50b0xvY2FsZVN0cmluZygpfSAtICR7ZW5kLnRvTG9jYWxlU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqR2VuZXJhdGVkOioqICR7bmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygpfVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICAvLyBFeGVjdXRpdmUgU3VtbWFyeVxuICAgICAgICByZXNwb25zZSArPSBgKirwn5OIIEV4ZWN1dGl2ZSBTdW1tYXJ5OioqXFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBUb3RhbCBFeGVjdXRpb25zOiAke3JlYWx0aW1lU3RhdHMudG90YWxFeGVjdXRpb25zVG9kYXl9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBTdWNjZXNzIFJhdGU6ICR7cmVhbHRpbWVTdGF0cy5zdWNjZXNzUmF0ZS50b0ZpeGVkKDEpfSVcXG5gO1xuICAgICAgICByZXNwb25zZSArPSBg4oCiIEF2ZXJhZ2UgUmVzcG9uc2UgVGltZTogJHsocmVhbHRpbWVTdGF0cy5hdmVyYWdlRXhlY3V0aW9uVGltZSAvIDEwMDApLnRvRml4ZWQoMil9c1xcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgQ3VycmVudCBFcnJvciBSYXRlOiAke3JlYWx0aW1lU3RhdHMuZXJyb3JSYXRlLnRvRml4ZWQoMSl9JVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICAvLyBFeGVjdXRpb24gdGltZSBhbmFseXNpc1xuICAgICAgICBpZiAoYXJncy5pbmNsdWRlRXhlY3V0aW9uVGltZXMpIHtcbiAgICAgICAgICByZXNwb25zZSArPSBgKirij7HvuI8gRXhlY3V0aW9uIFRpbWUgQW5hbHlzaXM6KipcXG5gO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIE1vY2sgcGVyY2VudGlsZSBkYXRhXG4gICAgICAgICAgY29uc3QgbW9ja0V4ZWN1dGlvblRpbWVzID0gYXJncy5wZXJjZW50aWxlcy5tYXAocCA9PiAoe1xuICAgICAgICAgICAgcGVyY2VudGlsZTogcCxcbiAgICAgICAgICAgIHRpbWU6IChyZWFsdGltZVN0YXRzLmF2ZXJhZ2VFeGVjdXRpb25UaW1lICogKDEgKyBwIC8gMTAwKSkgLyAxMDAwLFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBcbiAgICAgICAgICBtb2NrRXhlY3V0aW9uVGltZXMuZm9yRWFjaCgoeyBwZXJjZW50aWxlLCB0aW1lIH0pID0+IHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgUCR7cGVyY2VudGlsZX06ICR7dGltZS50b0ZpeGVkKDIpfXNcXG5gO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgTWVkaWFuIChQNTApOiAke21vY2tFeGVjdXRpb25UaW1lc1swXT8udGltZS50b0ZpeGVkKDIpfXNcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgOTB0aCBQZXJjZW50aWxlOiAke21vY2tFeGVjdXRpb25UaW1lcy5maW5kKHQgPT4gdC5wZXJjZW50aWxlID09PSA5MCk/LnRpbWUudG9GaXhlZCgyKX1zXFxuXFxuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGhyb3VnaHB1dCBhbmFseXNpc1xuICAgICAgICBpZiAoYXJncy5pbmNsdWRlVGhyb3VnaHB1dCkge1xuICAgICAgICAgIGNvbnN0IG1vY2tUaHJvdWdocHV0ID0gTWF0aC5mbG9vcihyZWFsdGltZVN0YXRzLnRvdGFsRXhlY3V0aW9uc1RvZGF5IC8gMjQpOyAvLyBleGVjdXRpb25zIHBlciBob3VyXG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCoq8J+agCBUaHJvdWdocHV0IEFuYWx5c2lzOioqXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEV4ZWN1dGlvbnMgcGVyIEhvdXI6ICR7bW9ja1Rocm91Z2hwdXR9XFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEV4ZWN1dGlvbnMgcGVyIE1pbnV0ZTogJHtNYXRoLmZsb29yKG1vY2tUaHJvdWdocHV0IC8gNjApfVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBQZWFrIEhvdXIgVGhyb3VnaHB1dDogJHtNYXRoLmZsb29yKG1vY2tUaHJvdWdocHV0ICogMS44KX1cXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgT2ZmLVBlYWsgVGhyb3VnaHB1dDogJHtNYXRoLmZsb29yKG1vY2tUaHJvdWdocHV0ICogMC4zKX1cXG5cXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBFcnJvciByYXRlIGFuYWx5c2lzXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVFcnJvclJhdGVzICYmIHJlYWx0aW1lU3RhdHMuZXJyb3JSYXRlID4gMCkge1xuICAgICAgICAgIHJlc3BvbnNlICs9IGAqKvCfmqggRXJyb3IgUmF0ZSBBbmFseXNpczoqKlxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDdXJyZW50IEVycm9yIFJhdGU6ICR7cmVhbHRpbWVTdGF0cy5lcnJvclJhdGUudG9GaXhlZCgxKX0lXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIFBlYWsgRXJyb3IgUmF0ZTogJHtNYXRoLm1pbihyZWFsdGltZVN0YXRzLmVycm9yUmF0ZSAqIDIsIDEwMCkudG9GaXhlZCgxKX0lXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIE1vc3QgQ29tbW9uIEVycm9yIFR5cGVzOlxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCAgLSBDb25uZWN0aW9uIHRpbWVvdXRzICgzNSUpXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBgICAtIEF1dGhlbnRpY2F0aW9uIGZhaWx1cmVzICgyNSUpXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBgICAtIFJhdGUgbGltaXRpbmcgKDIwJSlcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGAgIC0gRGF0YSB2YWxpZGF0aW9uIGVycm9ycyAoMjAlKVxcblxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJlc291cmNlIHVzYWdlXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVSZXNvdXJjZVVzYWdlKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCoq8J+SuyBSZXNvdXJjZSBVc2FnZSBBbmFseXNpczoqKlxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDdXJyZW50IENQVSBVc2FnZTogJHtyZWFsdGltZVN0YXRzLnN5c3RlbUxvYWQuY3B1LnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDdXJyZW50IE1lbW9yeSBVc2FnZTogJHtyZWFsdGltZVN0YXRzLnN5c3RlbUxvYWQubWVtb3J5LnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDdXJyZW50IERpc2sgVXNhZ2U6ICR7cmVhbHRpbWVTdGF0cy5zeXN0ZW1Mb2FkLmRpc2sudG9GaXhlZCgxKX0lXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIFBlYWsgQ1BVICgke2FyZ3MudGltZVJhbmdlfSk6ICR7TWF0aC5taW4ocmVhbHRpbWVTdGF0cy5zeXN0ZW1Mb2FkLmNwdSAqIDEuNSwgMTAwKS50b0ZpeGVkKDEpfSVcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgUGVhayBNZW1vcnkgKCR7YXJncy50aW1lUmFuZ2V9KTogJHtNYXRoLm1pbihyZWFsdGltZVN0YXRzLnN5c3RlbUxvYWQubWVtb3J5ICogMS4zLCAxMDApLnRvRml4ZWQoMSl9JVxcblxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFdvcmtmbG93LXNwZWNpZmljIGFuYWx5c2lzXG4gICAgICAgIGlmIChhcmdzLndvcmtmbG93SWQpIHtcbiAgICAgICAgICByZXNwb25zZSArPSBgKirwn5SnIFdvcmtmbG93LVNwZWNpZmljIEFuYWx5c2lzICgke2FyZ3Mud29ya2Zsb3dJZH0pOioqXFxuYDtcbiAgICAgICAgICBjb25zdCB3b3JrZmxvdyA9IHJlYWx0aW1lU3RhdHMudG9wV29ya2Zsb3dzLmZpbmQodyA9PiB3LmlkID09PSBhcmdzLndvcmtmbG93SWQpO1xuICAgICAgICAgIGlmICh3b3JrZmxvdykge1xuICAgICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBXb3JrZmxvdyBOYW1lOiAke3dvcmtmbG93Lm5hbWV9XFxuYDtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgVG90YWwgRXhlY3V0aW9uczogJHt3b3JrZmxvdy5leGVjdXRpb25zfVxcbmA7XG4gICAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEF2ZXJhZ2UgVGltZTogJHsod29ya2Zsb3cuYXZnVGltZSAvIDEwMDApLnRvRml4ZWQoMil9c1xcbmA7XG4gICAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEVzdGltYXRlZCBTdWNjZXNzIFJhdGU6IDk1JVxcbmA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgV29ya2Zsb3cgbm90IGZvdW5kIGluIHRvcCBwZXJmb3JtZXJzXFxuYDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYFxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFJlY29tbWVuZGF0aW9uc1xuICAgICAgICByZXNwb25zZSArPSBgKirwn5KhIFBlcmZvcm1hbmNlIFJlY29tbWVuZGF0aW9uczoqKlxcbmA7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVhbHRpbWVTdGF0cy5hdmVyYWdlRXhlY3V0aW9uVGltZSA+IDEwMDAwKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiDimqDvuI8gSGlnaCBleGVjdXRpb24gdGltZXMgZGV0ZWN0ZWQgLSBjb25zaWRlciBvcHRpbWl6aW5nIHdvcmtmbG93IGxvZ2ljXFxuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHJlYWx0aW1lU3RhdHMuZXJyb3JSYXRlID4gNSkge1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIg4pqg77iPIEVsZXZhdGVkIGVycm9yIHJhdGUgLSByZXZpZXcgZmFpbGluZyB3b3JrZmxvd3MgYW5kIGltcHJvdmUgZXJyb3IgaGFuZGxpbmdcXG5gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAocmVhbHRpbWVTdGF0cy5zeXN0ZW1Mb2FkLmNwdSA+IDgwKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiDimqDvuI8gSGlnaCBDUFUgdXNhZ2UgLSBjb25zaWRlciBzY2FsaW5nIG9yIG9wdGltaXppbmcgcmVzb3VyY2UtaW50ZW5zaXZlIHdvcmtmbG93c1xcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChyZWFsdGltZVN0YXRzLnN5c3RlbUxvYWQubWVtb3J5ID4gODApIHtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIOKaoO+4jyBIaWdoIG1lbW9yeSB1c2FnZSAtIG1vbml0b3IgZm9yIG1lbW9yeSBsZWFrcyBhbmQgb3B0aW1pemUgZGF0YSBwcm9jZXNzaW5nXFxuYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiDinIUgUmVndWxhciBtb25pdG9yaW5nIG9mIHRoZXNlIG1ldHJpY3MgaXMgcmVjb21tZW5kZWRcXG5gO1xuICAgICAgICByZXNwb25zZSArPSBg4oCiIOKchSBTZXQgdXAgYWxlcnRzIGZvciBjcml0aWNhbCB0aHJlc2hvbGRzXFxuYDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBnZW5lcmF0ZSBwZXJmb3JtYW5jZSByZXBvcnQ6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVHJlbmQgYW5hbHlzaXMgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2FuYWx5emUtdHJlbmRzJyxcbiAgICBkZXNjcmlwdGlvbjogJ0FuYWx5emUgdHJlbmRzIGZvciBzcGVjaWZpYyBtZXRyaWNzIG92ZXIgdGltZSB3aXRoIGNvbXBhcmlzb24gb3B0aW9ucycsXG4gICAgcGFyYW1ldGVyczogVHJlbmRBbmFseXNpc1NjaGVtYSxcbiAgICBoYW5kbGVyOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgVHJlbmRBbmFseXNpc1NjaGVtYT4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGNsaWVudCA9IGdldEV2ZW50Q2xpZW50KGdldENsaWVudCk7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGVuZCB9ID0gY2FsY3VsYXRlVGltZVJhbmdlKGFyZ3MudGltZVJhbmdlKTtcbiAgICAgICAgY29uc3QgcmVhbHRpbWVTdGF0cyA9IGF3YWl0IGNsaWVudC5nZXRSZWFsdGltZVN0YXRzKCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgcmVzcG9uc2UgPSBg8J+TiCAqKlRyZW5kIEFuYWx5c2lzOiAke2FyZ3MubWV0cmljLnRvVXBwZXJDYXNlKCl9KipcXG5cXG5gO1xuICAgICAgICByZXNwb25zZSArPSBgKipUaW1lIFJhbmdlOioqICR7YXJncy50aW1lUmFuZ2V9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqR3JhbnVsYXJpdHk6KiogJHthcmdzLmdyYW51bGFyaXR5fVxcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGAqKlBlcmlvZDoqKiAke3N0YXJ0LnRvTG9jYWxlU3RyaW5nKCl9IC0gJHtlbmQudG9Mb2NhbGVTdHJpbmcoKX1cXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgLy8gR2VuZXJhdGUgbW9jayB0cmVuZCBkYXRhIGJhc2VkIG9uIG1ldHJpYyB0eXBlXG4gICAgICAgIGNvbnN0IGdlbmVyYXRlVHJlbmREYXRhID0gKG1ldHJpYzogc3RyaW5nLCBncmFudWxhcml0eTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgcG9pbnRzID0gZ3JhbnVsYXJpdHkgPT09ICdob3VyJyA/IDI0IDogZ3JhbnVsYXJpdHkgPT09ICdkYXknID8gMzAgOiA0O1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSBbXTtcbiAgICAgICAgICBcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50czsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShzdGFydC5nZXRUaW1lKCkgKyAoaSAqIChlbmQuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpKSAvIHBvaW50cykpO1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gMDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgc3dpdGNoIChtZXRyaWMpIHtcbiAgICAgICAgICAgICAgY2FzZSAnZXhlY3V0aW9ucyc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA1MCkgKyAxMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnc3VjY2Vzc19yYXRlJzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IDg1ICsgTWF0aC5yYW5kb20oKSAqIDEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdleGVjdXRpb25fdGltZSc6XG4gICAgICAgICAgICAgICAgdmFsdWUgPSAyMDAwICsgTWF0aC5yYW5kb20oKSAqIDUwMDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgJ2Vycm9yX3JhdGUnOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yYW5kb20oKSAqIDEwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICd0aHJvdWdocHV0JzpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IE1hdGgucmFuZG9tKCkgKiAxMDAgKyAyMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGF0YS5wdXNoKHsgdGltZXN0YW1wLCB2YWx1ZSB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjb25zdCB0cmVuZERhdGEgPSBnZW5lcmF0ZVRyZW5kRGF0YShhcmdzLm1ldHJpYywgYXJncy5ncmFudWxhcml0eSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDYWxjdWxhdGUgdHJlbmQgc3RhdGlzdGljc1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSB0cmVuZERhdGEubWFwKGQgPT4gZC52YWx1ZSk7XG4gICAgICAgIGNvbnN0IGF2ZXJhZ2UgPSB2YWx1ZXMucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSAvIHZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKC4uLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KC4uLnZhbHVlcyk7XG4gICAgICAgIGNvbnN0IGxhdGVzdCA9IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IHByZXZpb3VzID0gdmFsdWVzW3ZhbHVlcy5sZW5ndGggLSAyXSB8fCBsYXRlc3Q7XG4gICAgICAgIGNvbnN0IGNoYW5nZSA9ICgobGF0ZXN0IC0gcHJldmlvdXMpIC8gcHJldmlvdXMpICogMTAwO1xuICAgICAgICBcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoq8J+TiiBUcmVuZCBTdW1tYXJ5OioqXFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDdXJyZW50IFZhbHVlOiAke2xhdGVzdC50b0ZpeGVkKDIpfVxcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgQXZlcmFnZTogJHthdmVyYWdlLnRvRml4ZWQoMil9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBNaW5pbXVtOiAke21pbi50b0ZpeGVkKDIpfVxcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgTWF4aW11bTogJHttYXgudG9GaXhlZCgyKX1cXG5gO1xuICAgICAgICByZXNwb25zZSArPSBg4oCiIFJlY2VudCBDaGFuZ2U6ICR7Y2hhbmdlID4gMCA/ICfwn5OIJyA6ICfwn5OJJ30gJHtNYXRoLmFicyhjaGFuZ2UpLnRvRml4ZWQoMSl9JVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICAvLyBUcmVuZCBkaXJlY3Rpb24gYW5hbHlzaXNcbiAgICAgICAgY29uc3QgZmlyc3RIYWxmID0gdmFsdWVzLnNsaWNlKDAsIE1hdGguZmxvb3IodmFsdWVzLmxlbmd0aCAvIDIpKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kSGFsZiA9IHZhbHVlcy5zbGljZShNYXRoLmZsb29yKHZhbHVlcy5sZW5ndGggLyAyKSk7XG4gICAgICAgIGNvbnN0IGZpcnN0QXZnID0gZmlyc3RIYWxmLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCkgLyBmaXJzdEhhbGYubGVuZ3RoO1xuICAgICAgICBjb25zdCBzZWNvbmRBdmcgPSBzZWNvbmRIYWxmLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCwgMCkgLyBzZWNvbmRIYWxmLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgb3ZlcmFsbFRyZW5kID0gKChzZWNvbmRBdmcgLSBmaXJzdEF2ZykgLyBmaXJzdEF2ZykgKiAxMDA7XG4gICAgICAgIFxuICAgICAgICByZXNwb25zZSArPSBgKirwn5OIIFRyZW5kIERpcmVjdGlvbjoqKlxcbmA7XG4gICAgICAgIGlmIChNYXRoLmFicyhvdmVyYWxsVHJlbmQpIDwgMikge1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgKipTdGFibGUqKiAtIE1pbmltYWwgY2hhbmdlICgke292ZXJhbGxUcmVuZC50b0ZpeGVkKDEpfSUpXFxuYDtcbiAgICAgICAgfSBlbHNlIGlmIChvdmVyYWxsVHJlbmQgPiAwKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiAqKkluY3JlYXNpbmcqKiAtIFVwICR7b3ZlcmFsbFRyZW5kLnRvRml4ZWQoMSl9JSBvdmVyIHBlcmlvZFxcbmA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiAqKkRlY3JlYXNpbmcqKiAtIERvd24gJHtNYXRoLmFicyhvdmVyYWxsVHJlbmQpLnRvRml4ZWQoMSl9JSBvdmVyIHBlcmlvZFxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIERhdGEgcG9pbnRzIHNhbXBsZVxuICAgICAgICByZXNwb25zZSArPSBgXFxuKirwn5OLIFNhbXBsZSBEYXRhIFBvaW50cyAobGFzdCA1KToqKlxcbmA7XG4gICAgICAgIHRyZW5kRGF0YS5zbGljZSgtNSkuZm9yRWFjaCgocG9pbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdGltZVN0ciA9IHBvaW50LnRpbWVzdGFtcC50b0xvY2FsZVN0cmluZygpO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGAke2luZGV4ICsgMX0uICR7cG9pbnQudmFsdWUudG9GaXhlZCgyKX0gLSAke3RpbWVTdHJ9XFxuYDtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBDb21wYXJpc29uIGFuYWx5c2lzXG4gICAgICAgIGlmIChhcmdzLmNvbXBhcmVXaXRoKSB7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYFxcbioq8J+UhCBDb21wYXJpc29uIHdpdGggJHthcmdzLmNvbXBhcmVXaXRoLnJlcGxhY2UoJ18nLCAnICcpfToqKlxcbmA7XG4gICAgICAgICAgLy8gTW9jayBjb21wYXJpc29uIGRhdGFcbiAgICAgICAgICBjb25zdCBjb21wYXJpc29uQ2hhbmdlID0gKE1hdGgucmFuZG9tKCkgLSAwLjUpICogNDA7IC8vIC0yMCUgdG8gKzIwJVxuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgQ2hhbmdlOiAke2NvbXBhcmlzb25DaGFuZ2UgPiAwID8gJ/Cfk4gnIDogJ/Cfk4knfSAke01hdGguYWJzKGNvbXBhcmlzb25DaGFuZ2UpLnRvRml4ZWQoMSl9JVxcbmA7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKE1hdGguYWJzKGNvbXBhcmlzb25DaGFuZ2UpID4gMTApIHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgKipTaWduaWZpY2FudCBjaGFuZ2UgZGV0ZWN0ZWQqKiAtIGludmVzdGlnYXRlIGNhdXNlc1xcbmA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgTm9ybWFsIHZhcmlhdGlvbiB3aXRoaW4gZXhwZWN0ZWQgcmFuZ2VcXG5gO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSW5zaWdodHMgYW5kIHJlY29tbWVuZGF0aW9uc1xuICAgICAgICByZXNwb25zZSArPSBgXFxuKirwn5KhIEluc2lnaHRzOioqXFxuYDtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoYXJncy5tZXRyaWMpIHtcbiAgICAgICAgICBjYXNlICdleGVjdXRpb25zJzpcbiAgICAgICAgICAgIGlmIChvdmVyYWxsVHJlbmQgPiAyMCkge1xuICAgICAgICAgICAgICByZXNwb25zZSArPSBg4oCiIFN0cm9uZyBncm93dGggaW4gZXhlY3V0aW9uIHZvbHVtZSAtIGNvbnNpZGVyIHNjYWxpbmcgcmVzb3VyY2VzXFxuYDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3ZlcmFsbFRyZW5kIDwgLTIwKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgRGVjbGluaW5nIGV4ZWN1dGlvbiB2b2x1bWUgLSBpbnZlc3RpZ2F0ZSB1c2FnZSBwYXR0ZXJuc1xcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzdWNjZXNzX3JhdGUnOlxuICAgICAgICAgICAgaWYgKGF2ZXJhZ2UgPCA5MCkge1xuICAgICAgICAgICAgICByZXNwb25zZSArPSBg4oCiIFN1Y2Nlc3MgcmF0ZSBiZWxvdyB0YXJnZXQgLSByZXZpZXcgZmFpbGluZyB3b3JrZmxvd3NcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG92ZXJhbGxUcmVuZCA8IC01KSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgRGVjbGluaW5nIHN1Y2Nlc3MgcmF0ZSAtIGltbWVkaWF0ZSBhdHRlbnRpb24gcmVxdWlyZWRcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnZXhlY3V0aW9uX3RpbWUnOlxuICAgICAgICAgICAgaWYgKG92ZXJhbGxUcmVuZCA+IDE1KSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgRXhlY3V0aW9uIHRpbWVzIGluY3JlYXNpbmcgLSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb24gbmVlZGVkXFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Vycm9yX3JhdGUnOlxuICAgICAgICAgICAgaWYgKG92ZXJhbGxUcmVuZCA+IDEwKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgRXJyb3IgcmF0ZSBpbmNyZWFzaW5nIC0gaW52ZXN0aWdhdGUgcm9vdCBjYXVzZXNcXG5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBhbmFseXplIHRyZW5kczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuY29uc3QgRXhwb3J0RGF0YVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZm9ybWF0OiB6LmVudW0oWydqc29uJywgJ2NzdiddKS5kZWZhdWx0KCdqc29uJyksXG4gIHRpbWVSYW5nZTogei5lbnVtKFsnMWgnLCAnMjRoJywgJzdkJywgJzMwZCddKS5kZWZhdWx0KCcyNGgnKSxcbiAgaW5jbHVkZUV2ZW50czogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgaW5jbHVkZU1ldHJpY3M6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIGluY2x1ZGVQZXJmb3JtYW5jZTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbn0pO1xuXG4gIC8vIEV4cG9ydCBhbmFseXRpY3MgZGF0YSB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnZXhwb3J0LWFuYWx5dGljcy1kYXRhJyxcbiAgICBkZXNjcmlwdGlvbjogJ0V4cG9ydCBhbmFseXRpY3MgZGF0YSBpbiB2YXJpb3VzIGZvcm1hdHMgKEpTT04sIENTVikgZm9yIGV4dGVybmFsIGFuYWx5c2lzJyxcbiAgICBwYXJhbWV0ZXJzOiBFeHBvcnREYXRhU2NoZW1hLFxuICAgIGhhbmRsZXI6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBFeHBvcnREYXRhU2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2xpZW50ID0gZ2V0RXZlbnRDbGllbnQoZ2V0Q2xpZW50KTtcbiAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBjYWxjdWxhdGVUaW1lUmFuZ2UoYXJncy50aW1lUmFuZ2UpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZXhwb3J0RGF0YTogYW55ID0ge1xuICAgICAgICAgIGV4cG9ydEluZm86IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdGltZVJhbmdlOiBhcmdzLnRpbWVSYW5nZSxcbiAgICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnQudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGVuZERhdGU6IGVuZC50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgZm9ybWF0OiBhcmdzLmZvcm1hdCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRhdGE6IHt9LFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgLy8gSW5jbHVkZSBldmVudHMgaWYgcmVxdWVzdGVkXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVFdmVudHMpIHtcbiAgICAgICAgICBjb25zdCBldmVudHMgPSBjbGllbnQuZ2V0RXZlbnRCdWZmZXIoKTtcbiAgICAgICAgICBleHBvcnREYXRhLmRhdGEuZXZlbnRzID0gZXZlbnRzLmZpbHRlcihlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50VGltZSA9IG5ldyBEYXRlKGUudGltZXN0YW1wKTtcbiAgICAgICAgICAgIHJldHVybiBldmVudFRpbWUgPj0gc3RhcnQgJiYgZXZlbnRUaW1lIDw9IGVuZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSW5jbHVkZSBhbmFseXRpY3MgaWYgcmVxdWVzdGVkXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVFdmVudHMpIHtcbiAgICAgICAgICBjb25zdCBhbmFseXRpY3MgPSBjbGllbnQuZ2V0QW5hbHl0aWNzQnVmZmVyKCk7XG4gICAgICAgICAgZXhwb3J0RGF0YS5kYXRhLmFuYWx5dGljcyA9IGFuYWx5dGljcy5maWx0ZXIoYSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhbmFseXRpY3NUaW1lID0gbmV3IERhdGUoYS50aW1lc3RhbXApO1xuICAgICAgICAgICAgcmV0dXJuIGFuYWx5dGljc1RpbWUgPj0gc3RhcnQgJiYgYW5hbHl0aWNzVGltZSA8PSBlbmQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEluY2x1ZGUgbWV0cmljcyBpZiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKGFyZ3MuaW5jbHVkZU1ldHJpY3MpIHtcbiAgICAgICAgICBleHBvcnREYXRhLmRhdGEubWV0cmljcyA9IGdlbmVyYXRlTW9ja01ldHJpY3MoYXJncy50aW1lUmFuZ2UpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBJbmNsdWRlIHBlcmZvcm1hbmNlIGRhdGEgaWYgcmVxdWVzdGVkXG4gICAgICAgIGlmIChhcmdzLmluY2x1ZGVQZXJmb3JtYW5jZSkge1xuICAgICAgICAgIGNvbnN0IHJlYWx0aW1lU3RhdHMgPSBhd2FpdCBjbGllbnQuZ2V0UmVhbHRpbWVTdGF0cygpO1xuICAgICAgICAgIGV4cG9ydERhdGEuZGF0YS5wZXJmb3JtYW5jZSA9IHJlYWx0aW1lU3RhdHM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxldCByZXNwb25zZSA9IGDwn5OkICoqQW5hbHl0aWNzIERhdGEgRXhwb3J0KipcXG5cXG5gO1xuICAgICAgICByZXNwb25zZSArPSBgKipFeHBvcnQgRm9ybWF0OioqICR7YXJncy5mb3JtYXQudG9VcHBlckNhc2UoKX1cXG5gO1xuICAgICAgICByZXNwb25zZSArPSBgKipUaW1lIFJhbmdlOioqICR7YXJncy50aW1lUmFuZ2V9XFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYCoqUGVyaW9kOioqICR7c3RhcnQudG9Mb2NhbGVTdHJpbmcoKX0gLSAke2VuZC50b0xvY2FsZVN0cmluZygpfVxcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGAqKkdlbmVyYXRlZDoqKiAke25ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoKX1cXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgaWYgKGFyZ3MuZm9ybWF0ID09PSAnanNvbicpIHtcbiAgICAgICAgICByZXNwb25zZSArPSBgKirwn5OLIEpTT04gRXhwb3J0IERhdGE6KipcXG5cXGBcXGBcXGBqc29uXFxuJHtKU09OLnN0cmluZ2lmeShleHBvcnREYXRhLCBudWxsLCAyKX1cXG5cXGBcXGBcXGBcXG5cXG5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIEZvciBDU1YsIHByb3ZpZGUgYSBzaW1wbGlmaWVkIHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgcmVzcG9uc2UgKz0gYCoq8J+TiiBDU1YgRXhwb3J0IFN1bW1hcnk6KipcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGDigKIgRXZlbnRzOiAke2V4cG9ydERhdGEuZGF0YS5ldmVudHM/Lmxlbmd0aCB8fCAwfSByZWNvcmRzXFxuYDtcbiAgICAgICAgICByZXNwb25zZSArPSBg4oCiIEFuYWx5dGljczogJHtleHBvcnREYXRhLmRhdGEuYW5hbHl0aWNzPy5sZW5ndGggfHwgMH0gcmVjb3Jkc1xcbmA7XG4gICAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBNZXRyaWNzOiAke2V4cG9ydERhdGEuZGF0YS5tZXRyaWNzPy5sZW5ndGggfHwgMH0gZGF0YSBwb2ludHNcXG5gO1xuICAgICAgICAgIHJlc3BvbnNlICs9IGBcXG5DU1YgZGF0YSB3b3VsZCBpbmNsdWRlIGNvbHVtbnM6IHRpbWVzdGFtcCwgdHlwZSwgY2F0ZWdvcnksIHZhbHVlLCBtZXRhZGF0YVxcbmA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJlc3BvbnNlICs9IGAqKvCfkqEgVXNhZ2UgSW5zdHJ1Y3Rpb25zOioqXFxuYDtcbiAgICAgICAgcmVzcG9uc2UgKz0gYOKAoiBDb3B5IHRoZSBleHBvcnQgZGF0YSB0byB5b3VyIGFuYWx5dGljcyB0b29sc1xcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgSW1wb3J0IGludG8gc3ByZWFkc2hlZXQgYXBwbGljYXRpb25zIGZvciBhbmFseXNpc1xcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgVXNlIHdpdGggYnVzaW5lc3MgaW50ZWxsaWdlbmNlIHBsYXRmb3Jtc1xcbmA7XG4gICAgICAgIHJlc3BvbnNlICs9IGDigKIgQXJjaGl2ZSBmb3IgaGlzdG9yaWNhbCByZXBvcnRpbmdcXG5gO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVXNlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGV4cG9ydCBhbmFseXRpY3MgZGF0YTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn0iXSwidmVyc2lvbiI6M30=