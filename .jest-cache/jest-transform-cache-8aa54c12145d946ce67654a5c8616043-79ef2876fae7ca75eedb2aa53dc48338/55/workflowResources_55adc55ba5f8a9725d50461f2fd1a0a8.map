{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/workflowResources.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/workflowResources.ts"],"sourcesContent":["/**\n * Workflow Resources for n8n MCP Server\n *\n * Provides MCP resources for accessing n8n workflow data including definitions,\n * metadata, and configuration. Supports both static workflow access and dynamic\n * workflow discovery.\n */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n/**\n * Workflow resource configuration\n */\nexport interface WorkflowResourceConfig {\n  /** Base URI prefix for workflow resources */\n  baseUri?: string;\n\n  /** Maximum number of workflows to include in listings */\n  maxWorkflows?: number;\n\n  /** Whether to include inactive workflows */\n  includeInactive?: boolean;\n\n  /** Whether to include workflow execution history */\n  includeExecutions?: boolean;\n\n  /** Cache duration for workflow data (ms) */\n  cacheDuration?: number;\n}\n\n/**\n * Workflow resource manager\n *\n * Manages workflow-related MCP resources including individual workflow access,\n * workflow listings, and workflow metadata.\n */\nexport class WorkflowResourceManager {\n  private config: Required<WorkflowResourceConfig>;\n  private cache = new Map<string, { data: any; expires: number }>();\n\n  constructor(config: WorkflowResourceConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://workflows',\n      maxWorkflows: 100,\n      includeInactive: true,\n      includeExecutions: false,\n      cacheDuration: 5 * 60 * 1000, // 5 minutes\n      ...config,\n    };\n  }\n\n  /**\n   * Register workflow resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Individual workflow resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}`,\n      name: 'n8n Workflow',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n workflow',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflow = await this.getWorkflowResource(client, id);\n        return {\n          text: JSON.stringify(workflow, null, 2),\n        };\n      },\n    });\n\n    // Workflow listing resource\n    server.addResource({\n      uri: `${this.config.baseUri}/list`,\n      name: 'n8n Workflow List',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflows = await this.getWorkflowListResource(client);\n        return {\n          text: JSON.stringify(workflows, null, 2),\n        };\n      },\n    });\n\n    // Active workflows resource\n    server.addResource({\n      uri: `${this.config.baseUri}/active`,\n      name: 'n8n Active Workflows',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const activeWorkflows = await this.getActiveWorkflowsResource(client);\n        return {\n          text: JSON.stringify(activeWorkflows, null, 2),\n        };\n      },\n    });\n\n    // Workflow statistics resource\n    server.addResource({\n      uri: `${this.config.baseUri}/stats`,\n      name: 'n8n Workflow Statistics',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const stats = await this.getWorkflowStatsResource(client);\n        return {\n          text: JSON.stringify(stats, null, 2),\n        };\n      },\n    });\n\n    // Workflow resource template for pattern matching\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{workflowId}`,\n      name: 'n8n Workflow by ID',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'workflowId',\n          description: 'The ID of the n8n workflow',\n          required: true,\n        },\n      ],\n      load: async ({ workflowId }: { workflowId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflow = await this.getWorkflowResource(client, workflowId);\n        return {\n          text: JSON.stringify(workflow, null, 2),\n        };\n      },\n    });\n\n    console.log('📄 Workflow resources registered');\n  }\n\n  /**\n   * Get individual workflow resource\n   */\n  private async getWorkflowResource(client: N8nClient, workflowId: string): Promise<any> {\n    const cacheKey = `workflow:${workflowId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflow = await client.getWorkflow(workflowId);\n\n      // Enhance workflow data with metadata\n      const enhancedWorkflow = {\n        ...workflow,\n        metadata: {\n          id: workflow.id,\n          name: workflow.name,\n          active: workflow.active,\n          tags: workflow.tags || [],\n          createdAt: workflow.createdAt,\n          updatedAt: workflow.updatedAt,\n          nodeCount: workflow.nodes?.length || 0,\n          connectionCount: workflow.connections ? Object.keys(workflow.connections).length : 0,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/${workflowId}`,\n          type: 'n8n-workflow',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, enhancedWorkflow);\n      return enhancedWorkflow;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow ${workflowId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow list resource\n   */\n  private async getWorkflowListResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:list';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      const workflowList = {\n        workflows: workflows.data.map(workflow => ({\n          id: workflow.id,\n          name: workflow.name,\n          active: workflow.active,\n          tags: workflow.tags || [],\n          createdAt: workflow.createdAt,\n          updatedAt: workflow.updatedAt,\n          uri: `${this.config.baseUri}/${workflow.id}`,\n        })),\n        metadata: {\n          total: workflows.data.length, // API doesn't provide total count\n          returned: workflows.data.length,\n          includeInactive: this.config.includeInactive,\n          maxWorkflows: this.config.maxWorkflows,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/list`,\n          type: 'n8n-workflow-list',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, workflowList);\n      return workflowList;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow list: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get active workflows resource\n   */\n  private async getActiveWorkflowsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:active';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      // Filter for active workflows client-side\n      const activeWorkflowsData = workflows.data.filter(w => w.active);\n\n      const activeWorkflows = {\n        activeWorkflows: activeWorkflowsData.map(workflow => ({\n          id: workflow.id,\n          name: workflow.name,\n          tags: workflow.tags || [],\n          lastExecution: workflow.updatedAt,\n          uri: `${this.config.baseUri}/${workflow.id}`,\n        })),\n        metadata: {\n          total: activeWorkflowsData.length,\n          returned: activeWorkflowsData.length,\n          activeOnly: true,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/active`,\n          type: 'n8n-active-workflows',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, activeWorkflows);\n      return activeWorkflows;\n    } catch (error) {\n      throw new Error(\n        `Failed to load active workflows: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow statistics resource\n   */\n  private async getWorkflowStatsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:stats';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      const stats = {\n        totalWorkflows: workflows.data.length,\n        activeWorkflows: workflows.data.filter(w => w.active).length,\n        inactiveWorkflows: workflows.data.filter(w => !w.active).length,\n        tagUsage: this.calculateTagUsage(workflows.data),\n        creationStats: this.calculateCreationStats(workflows.data),\n        resourceInfo: {\n          uri: `${this.config.baseUri}/stats`,\n          type: 'n8n-workflow-stats',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, stats);\n      return stats;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow statistics: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Calculate tag usage statistics\n   */\n  private calculateTagUsage(workflows: any[]): Record<string, number> {\n    const tagUsage: Record<string, number> = {};\n\n    workflows.forEach(workflow => {\n      if (workflow.tags && Array.isArray(workflow.tags)) {\n        workflow.tags.forEach((tag: any) => {\n          const tagName = typeof tag === 'string' ? tag : tag.name;\n          tagUsage[tagName] = (tagUsage[tagName] || 0) + 1;\n        });\n      }\n    });\n\n    return tagUsage;\n  }\n\n  /**\n   * Calculate creation statistics\n   */\n  private calculateCreationStats(workflows: any[]): any {\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    return {\n      createdLastWeek: workflows.filter(w => new Date(w.createdAt) > oneWeekAgo).length,\n      createdLastMonth: workflows.filter(w => new Date(w.createdAt) > oneMonthAgo).length,\n      updatedLastWeek: workflows.filter(w => new Date(w.updatedAt) > oneWeekAgo).length,\n      updatedLastMonth: workflows.filter(w => new Date(w.updatedAt) > oneMonthAgo).length,\n    };\n  }\n\n  /**\n   * Get cached data if not expired\n   */\n  private getCachedData(key: string): any | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expires > Date.now()) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  /**\n   * Set cached data with expiration\n   */\n  private setCachedData(key: string, data: any): void {\n    if (this.config.cacheDuration > 0) {\n      this.cache.set(key, {\n        data,\n        expires: Date.now() + this.config.cacheDuration,\n      });\n    }\n  }\n\n  /**\n   * Clear resource cache\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n/**\n * Create workflow resource manager\n */\nexport function createWorkflowResources(config?: WorkflowResourceConfig): WorkflowResourceManager {\n  return new WorkflowResourceManager(config);\n}\n"],"version":3}