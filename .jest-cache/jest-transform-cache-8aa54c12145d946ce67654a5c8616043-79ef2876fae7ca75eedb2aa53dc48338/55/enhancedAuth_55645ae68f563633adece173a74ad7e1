0cbf98f0ddc2596ba97f61713e7fb481
/* istanbul ignore next */
function cov_12tiuhqsm7() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/enhancedAuth.ts";
  var hash = "b3af94a7f4c34e720f0d4aaa40287fa0d652750f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/enhancedAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 15
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "1": {
        start: {
          line: 19,
          column: 20
        },
        end: {
          line: 19,
          column: 29
        }
      },
      "2": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "3": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 30
        }
      },
      "4": {
        start: {
          line: 22,
          column: 17
        },
        end: {
          line: 22,
          column: 26
        }
      },
      "5": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 16
        }
      },
      "6": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 49
        }
      },
      "7": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 58,
          column: 10
        }
      },
      "8": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 33
        }
      },
      "9": {
        start: {
          line: 65,
          column: 8
        },
        end: {
          line: 65,
          column: 37
        }
      },
      "10": {
        start: {
          line: 71,
          column: 25
        },
        end: {
          line: 71,
          column: 58
        }
      },
      "11": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "12": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "13": {
        start: {
          line: 75,
          column: 34
        },
        end: {
          line: 75,
          column: 63
        }
      },
      "14": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 87,
          column: 17
        }
      },
      "15": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 82,
          column: 23
        }
      },
      "16": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 86,
          column: 22
        }
      },
      "17": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "18": {
        start: {
          line: 91,
          column: 32
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "19": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 103,
          column: 17
        }
      },
      "20": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 98,
          column: 23
        }
      },
      "21": {
        start: {
          line: 99,
          column: 20
        },
        end: {
          line: 102,
          column: 22
        }
      },
      "22": {
        start: {
          line: 106,
          column: 38
        },
        end: {
          line: 106,
          column: 68
        }
      },
      "23": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "24": {
        start: {
          line: 108,
          column: 32
        },
        end: {
          line: 108,
          column: 68
        }
      },
      "25": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "26": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 114,
          column: 21
        }
      },
      "27": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 58
        }
      },
      "28": {
        start: {
          line: 113,
          column: 24
        },
        end: {
          line: 113,
          column: 85
        }
      },
      "29": {
        start: {
          line: 115,
          column: 33
        },
        end: {
          line: 115,
          column: 71
        }
      },
      "30": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 126,
          column: 21
        }
      },
      "31": {
        start: {
          line: 117,
          column: 24
        },
        end: {
          line: 125,
          column: 26
        }
      },
      "32": {
        start: {
          line: 128,
          column: 21
        },
        end: {
          line: 131,
          column: 17
        }
      },
      "33": {
        start: {
          line: 130,
          column: 20
        },
        end: {
          line: 130,
          column: 60
        }
      },
      "34": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 134,
          column: 80
        }
      },
      "35": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "36": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 139,
          column: 17
        }
      },
      "37": {
        start: {
          line: 138,
          column: 20
        },
        end: {
          line: 138,
          column: 54
        }
      },
      "38": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 145,
          column: 19
        }
      },
      "39": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 34
        }
      },
      "40": {
        start: {
          line: 149,
          column: 28
        },
        end: {
          line: 149,
          column: 78
        }
      },
      "41": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 172,
          column: 13
        }
      },
      "42": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 52
        }
      },
      "43": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 54
        }
      },
      "44": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 161,
          column: 19
        }
      },
      "45": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 171,
          column: 18
        }
      },
      "46": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "47": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 53
        }
      },
      "48": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 184,
          column: 15
        }
      },
      "49": {
        start: {
          line: 185,
          column: 12
        },
        end: {
          line: 193,
          column: 14
        }
      },
      "50": {
        start: {
          line: 197,
          column: 12
        },
        end: {
          line: 199,
          column: 13
        }
      },
      "51": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 198,
          column: 50
        }
      },
      "52": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 208,
          column: 15
        }
      },
      "53": {
        start: {
          line: 209,
          column: 12
        },
        end: {
          line: 212,
          column: 14
        }
      },
      "54": {
        start: {
          line: 219,
          column: 26
        },
        end: {
          line: 219,
          column: 56
        }
      },
      "55": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "56": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 224,
          column: 14
        }
      },
      "57": {
        start: {
          line: 226,
          column: 24
        },
        end: {
          line: 226,
          column: 52
        }
      },
      "58": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 232,
          column: 9
        }
      },
      "59": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "60": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 42
        }
      },
      "61": {
        start: {
          line: 235,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "62": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 73
        }
      },
      "63": {
        start: {
          line: 238,
          column: 21
        },
        end: {
          line: 238,
          column: 59
        }
      },
      "64": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 244,
          column: 9
        }
      },
      "65": {
        start: {
          line: 240,
          column: 12
        },
        end: {
          line: 243,
          column: 14
        }
      },
      "66": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 253,
          column: 10
        }
      },
      "67": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 70
        }
      },
      "68": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 77
        }
      },
      "69": {
        start: {
          line: 271,
          column: 28
        },
        end: {
          line: 271,
          column: 54
        }
      },
      "70": {
        start: {
          line: 272,
          column: 26
        },
        end: {
          line: 280,
          column: 9
        }
      },
      "71": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 295,
          column: 9
        }
      },
      "72": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 22
        }
      },
      "73": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 290,
          column: 18
        }
      },
      "74": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 22
        }
      },
      "75": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 22
        }
      },
      "76": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 55
        }
      },
      "77": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 304,
          column: 11
        }
      },
      "78": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 25
        }
      },
      "79": {
        start: {
          line: 311,
          column: 26
        },
        end: {
          line: 311,
          column: 61
        }
      },
      "80": {
        start: {
          line: 312,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "81": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 316,
          column: 14
        }
      },
      "82": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 324,
          column: 9
        }
      },
      "83": {
        start: {
          line: 319,
          column: 12
        },
        end: {
          line: 319,
          column: 51
        }
      },
      "84": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 323,
          column: 14
        }
      },
      "85": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "86": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 326,
          column: 51
        }
      },
      "87": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "88": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 338,
          column: 14
        }
      },
      "89": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 29
        }
      },
      "90": {
        start: {
          line: 342,
          column: 22
        },
        end: {
          line: 342,
          column: 27
        }
      },
      "91": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "92": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 345,
          column: 80
        }
      },
      "93": {
        start: {
          line: 346,
          column: 16
        },
        end: {
          line: 346,
          column: 22
        }
      },
      "94": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 60
        }
      },
      "95": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 350,
          column: 22
        }
      },
      "96": {
        start: {
          line: 352,
          column: 16
        },
        end: {
          line: 352,
          column: 82
        }
      },
      "97": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 22
        }
      },
      "98": {
        start: {
          line: 355,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "99": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 51
        }
      },
      "100": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "101": {
        start: {
          line: 359,
          column: 32
        },
        end: {
          line: 359,
          column: 60
        }
      },
      "102": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "103": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 361,
          column: 57
        }
      },
      "104": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 371,
          column: 15
        }
      },
      "105": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 372,
          column: 37
        }
      },
      "106": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 386,
          column: 11
        }
      },
      "107": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 390,
          column: 10
        }
      },
      "108": {
        start: {
          line: 396,
          column: 24
        },
        end: {
          line: 396,
          column: 52
        }
      },
      "109": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 399,
          column: 9
        }
      },
      "110": {
        start: {
          line: 398,
          column: 12
        },
        end: {
          line: 398,
          column: 25
        }
      },
      "111": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 400,
          column: 40
        }
      },
      "112": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 408,
          column: 11
        }
      },
      "113": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 409,
          column: 20
        }
      },
      "114": {
        start: {
          line: 415,
          column: 25
        },
        end: {
          line: 415,
          column: 27
        }
      },
      "115": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 420,
          column: 9
        }
      },
      "116": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 419,
          column: 13
        }
      },
      "117": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 418,
          column: 39
        }
      },
      "118": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 421,
          column: 24
        }
      },
      "119": {
        start: {
          line: 427,
          column: 25
        },
        end: {
          line: 427,
          column: 26
        }
      },
      "120": {
        start: {
          line: 428,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "121": {
        start: {
          line: 429,
          column: 12
        },
        end: {
          line: 432,
          column: 13
        }
      },
      "122": {
        start: {
          line: 430,
          column: 16
        },
        end: {
          line: 430,
          column: 48
        }
      },
      "123": {
        start: {
          line: 431,
          column: 16
        },
        end: {
          line: 431,
          column: 29
        }
      },
      "124": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 442,
          column: 9
        }
      },
      "125": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 441,
          column: 15
        }
      },
      "126": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 26
        }
      },
      "127": {
        start: {
          line: 449,
          column: 21
        },
        end: {
          line: 449,
          column: 45
        }
      },
      "128": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 452,
          column: 9
        }
      },
      "129": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 69
        }
      },
      "130": {
        start: {
          line: 451,
          column: 40
        },
        end: {
          line: 451,
          column: 67
        }
      },
      "131": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 455,
          column: 9
        }
      },
      "132": {
        start: {
          line: 454,
          column: 12
        },
        end: {
          line: 454,
          column: 65
        }
      },
      "133": {
        start: {
          line: 454,
          column: 40
        },
        end: {
          line: 454,
          column: 63
        }
      },
      "134": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 458,
          column: 9
        }
      },
      "135": {
        start: {
          line: 457,
          column: 12
        },
        end: {
          line: 457,
          column: 73
        }
      },
      "136": {
        start: {
          line: 457,
          column: 40
        },
        end: {
          line: 457,
          column: 71
        }
      },
      "137": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 461,
          column: 9
        }
      },
      "138": {
        start: {
          line: 460,
          column: 12
        },
        end: {
          line: 460,
          column: 70
        }
      },
      "139": {
        start: {
          line: 460,
          column: 40
        },
        end: {
          line: 460,
          column: 68
        }
      },
      "140": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 57
        }
      },
      "141": {
        start: {
          line: 463,
          column: 30
        },
        end: {
          line: 463,
          column: 55
        }
      },
      "142": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 466,
          column: 9
        }
      },
      "143": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 52
        }
      },
      "144": {
        start: {
          line: 467,
          column: 8
        },
        end: {
          line: 467,
          column: 22
        }
      },
      "145": {
        start: {
          line: 473,
          column: 30
        },
        end: {
          line: 473,
          column: 65
        }
      },
      "146": {
        start: {
          line: 474,
          column: 8
        },
        end: {
          line: 476,
          column: 9
        }
      },
      "147": {
        start: {
          line: 475,
          column: 12
        },
        end: {
          line: 475,
          column: 50
        }
      },
      "148": {
        start: {
          line: 477,
          column: 20
        },
        end: {
          line: 477,
          column: 30
        }
      },
      "149": {
        start: {
          line: 478,
          column: 23
        },
        end: {
          line: 478,
          column: 90
        }
      },
      "150": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 483,
          column: 10
        }
      },
      "151": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 54
        }
      },
      "152": {
        start: {
          line: 495,
          column: 26
        },
        end: {
          line: 495,
          column: 50
        }
      },
      "153": {
        start: {
          line: 496,
          column: 20
        },
        end: {
          line: 496,
          column: 30
        }
      },
      "154": {
        start: {
          line: 498,
          column: 31
        },
        end: {
          line: 498,
          column: 62
        }
      },
      "155": {
        start: {
          line: 499,
          column: 8
        },
        end: {
          line: 503,
          column: 9
        }
      },
      "156": {
        start: {
          line: 501,
          column: 34
        },
        end: {
          line: 501,
          column: 93
        }
      },
      "157": {
        start: {
          line: 501,
          column: 64
        },
        end: {
          line: 501,
          column: 89
        }
      },
      "158": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 502,
          column: 58
        }
      },
      "159": {
        start: {
          line: 504,
          column: 24
        },
        end: {
          line: 522,
          column: 9
        }
      },
      "160": {
        start: {
          line: 523,
          column: 8
        },
        end: {
          line: 523,
          column: 46
        }
      },
      "161": {
        start: {
          line: 524,
          column: 8
        },
        end: {
          line: 533,
          column: 9
        }
      },
      "162": {
        start: {
          line: 525,
          column: 12
        },
        end: {
          line: 532,
          column: 15
        }
      },
      "163": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 534,
          column: 23
        }
      },
      "164": {
        start: {
          line: 540,
          column: 20
        },
        end: {
          line: 540,
          column: 30
        }
      },
      "165": {
        start: {
          line: 541,
          column: 8
        },
        end: {
          line: 541,
          column: 39
        }
      },
      "166": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 562,
          column: 10
        }
      },
      "167": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 569,
          column: 96
        }
      },
      "168": {
        start: {
          line: 575,
          column: 20
        },
        end: {
          line: 575,
          column: 30
        }
      },
      "169": {
        start: {
          line: 576,
          column: 24
        },
        end: {
          line: 576,
          column: 91
        }
      },
      "170": {
        start: {
          line: 577,
          column: 8
        },
        end: {
          line: 577,
          column: 24
        }
      },
      "171": {
        start: {
          line: 578,
          column: 8
        },
        end: {
          line: 578,
          column: 34
        }
      },
      "172": {
        start: {
          line: 579,
          column: 8
        },
        end: {
          line: 581,
          column: 9
        }
      },
      "173": {
        start: {
          line: 580,
          column: 12
        },
        end: {
          line: 580,
          column: 77
        }
      },
      "174": {
        start: {
          line: 582,
          column: 8
        },
        end: {
          line: 582,
          column: 53
        }
      },
      "175": {
        start: {
          line: 588,
          column: 24
        },
        end: {
          line: 588,
          column: 59
        }
      },
      "176": {
        start: {
          line: 589,
          column: 8
        },
        end: {
          line: 591,
          column: 9
        }
      },
      "177": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 590,
          column: 24
        }
      },
      "178": {
        start: {
          line: 592,
          column: 20
        },
        end: {
          line: 592,
          column: 30
        }
      },
      "179": {
        start: {
          line: 593,
          column: 8
        },
        end: {
          line: 595,
          column: 9
        }
      },
      "180": {
        start: {
          line: 594,
          column: 12
        },
        end: {
          line: 594,
          column: 39
        }
      },
      "181": {
        start: {
          line: 597,
          column: 8
        },
        end: {
          line: 597,
          column: 47
        }
      },
      "182": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 20
        }
      },
      "183": {
        start: {
          line: 604,
          column: 20
        },
        end: {
          line: 604,
          column: 30
        }
      },
      "184": {
        start: {
          line: 605,
          column: 25
        },
        end: {
          line: 605,
          column: 56
        }
      },
      "185": {
        start: {
          line: 606,
          column: 8
        },
        end: {
          line: 617,
          column: 9
        }
      },
      "186": {
        start: {
          line: 608,
          column: 30
        },
        end: {
          line: 614,
          column: 13
        }
      },
      "187": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 615,
          column: 55
        }
      },
      "188": {
        start: {
          line: 616,
          column: 12
        },
        end: {
          line: 616,
          column: 29
        }
      },
      "189": {
        start: {
          line: 619,
          column: 8
        },
        end: {
          line: 619,
          column: 28
        }
      },
      "190": {
        start: {
          line: 620,
          column: 8
        },
        end: {
          line: 620,
          column: 90
        }
      },
      "191": {
        start: {
          line: 621,
          column: 8
        },
        end: {
          line: 621,
          column: 24
        }
      },
      "192": {
        start: {
          line: 627,
          column: 8
        },
        end: {
          line: 629,
          column: 9
        }
      },
      "193": {
        start: {
          line: 628,
          column: 12
        },
        end: {
          line: 628,
          column: 19
        }
      },
      "194": {
        start: {
          line: 630,
          column: 26
        },
        end: {
          line: 634,
          column: 41
        }
      },
      "195": {
        start: {
          line: 635,
          column: 8
        },
        end: {
          line: 637,
          column: 9
        }
      },
      "196": {
        start: {
          line: 636,
          column: 12
        },
        end: {
          line: 636,
          column: 19
        }
      },
      "197": {
        start: {
          line: 638,
          column: 30
        },
        end: {
          line: 643,
          column: 9
        }
      },
      "198": {
        start: {
          line: 644,
          column: 8
        },
        end: {
          line: 644,
          column: 48
        }
      },
      "199": {
        start: {
          line: 646,
          column: 8
        },
        end: {
          line: 646,
          column: 50
        }
      },
      "200": {
        start: {
          line: 648,
          column: 8
        },
        end: {
          line: 650,
          column: 9
        }
      },
      "201": {
        start: {
          line: 649,
          column: 12
        },
        end: {
          line: 649,
          column: 67
        }
      },
      "202": {
        start: {
          line: 656,
          column: 8
        },
        end: {
          line: 658,
          column: 18
        }
      },
      "203": {
        start: {
          line: 664,
          column: 8
        },
        end: {
          line: 667,
          column: 23
        }
      },
      "204": {
        start: {
          line: 673,
          column: 27
        },
        end: {
          line: 677,
          column: 25
        }
      },
      "205": {
        start: {
          line: 678,
          column: 8
        },
        end: {
          line: 678,
          column: 86
        }
      },
      "206": {
        start: {
          line: 684,
          column: 8
        },
        end: {
          line: 684,
          column: 78
        }
      },
      "207": {
        start: {
          line: 690,
          column: 8
        },
        end: {
          line: 690,
          column: 76
        }
      },
      "208": {
        start: {
          line: 696,
          column: 8
        },
        end: {
          line: 696,
          column: 76
        }
      },
      "209": {
        start: {
          line: 702,
          column: 8
        },
        end: {
          line: 702,
          column: 70
        }
      },
      "210": {
        start: {
          line: 710,
          column: 8
        },
        end: {
          line: 710,
          column: 21
        }
      },
      "211": {
        start: {
          line: 718,
          column: 8
        },
        end: {
          line: 718,
          column: 21
        }
      },
      "212": {
        start: {
          line: 724,
          column: 8
        },
        end: {
          line: 726,
          column: 18
        }
      },
      "213": {
        start: {
          line: 725,
          column: 12
        },
        end: {
          line: 725,
          column: 27
        }
      },
      "214": {
        start: {
          line: 732,
          column: 20
        },
        end: {
          line: 732,
          column: 30
        }
      },
      "215": {
        start: {
          line: 734,
          column: 8
        },
        end: {
          line: 738,
          column: 9
        }
      },
      "216": {
        start: {
          line: 735,
          column: 12
        },
        end: {
          line: 737,
          column: 13
        }
      },
      "217": {
        start: {
          line: 736,
          column: 16
        },
        end: {
          line: 736,
          column: 48
        }
      },
      "218": {
        start: {
          line: 740,
          column: 8
        },
        end: {
          line: 744,
          column: 9
        }
      },
      "219": {
        start: {
          line: 741,
          column: 12
        },
        end: {
          line: 743,
          column: 13
        }
      },
      "220": {
        start: {
          line: 742,
          column: 16
        },
        end: {
          line: 742,
          column: 55
        }
      },
      "221": {
        start: {
          line: 746,
          column: 8
        },
        end: {
          line: 750,
          column: 9
        }
      },
      "222": {
        start: {
          line: 747,
          column: 12
        },
        end: {
          line: 749,
          column: 13
        }
      },
      "223": {
        start: {
          line: 748,
          column: 16
        },
        end: {
          line: 748,
          column: 51
        }
      },
      "224": {
        start: {
          line: 752,
          column: 8
        },
        end: {
          line: 756,
          column: 9
        }
      },
      "225": {
        start: {
          line: 753,
          column: 12
        },
        end: {
          line: 755,
          column: 13
        }
      },
      "226": {
        start: {
          line: 754,
          column: 16
        },
        end: {
          line: 754,
          column: 55
        }
      },
      "227": {
        start: {
          line: 763,
          column: 4
        },
        end: {
          line: 763,
          column: 62
        }
      },
      "228": {
        start: {
          line: 768,
          column: 40
        },
        end: {
          line: 791,
          column: 1
        }
      },
      "229": {
        start: {
          line: 796,
          column: 4
        },
        end: {
          line: 838,
          column: 6
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        loc: {
          start: {
            line: 25,
            column: 47
          },
          end: {
            line: 60,
            column: 5
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        loc: {
          start: {
            line: 64,
            column: 30
          },
          end: {
            line: 66,
            column: 5
          }
        },
        line: 64
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        loc: {
          start: {
            line: 70,
            column: 32
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 70
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 27
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 218
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 258,
            column: 5
          }
        },
        loc: {
          start: {
            line: 258,
            column: 43
          },
          end: {
            line: 260,
            column: 5
          }
        },
        line: 258
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 50
          },
          end: {
            line: 266,
            column: 5
          }
        },
        line: 264
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        loc: {
          start: {
            line: 270,
            column: 54
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 270
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 63
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 310
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 28
          },
          end: {
            line: 410,
            column: 5
          }
        },
        line: 395
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 30
          },
          end: {
            line: 422,
            column: 5
          }
        },
        line: 414
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 426,
            column: 4
          },
          end: {
            line: 426,
            column: 5
          }
        },
        loc: {
          start: {
            line: 426,
            column: 33
          },
          end: {
            line: 444,
            column: 5
          }
        },
        line: 426
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 448,
            column: 5
          }
        },
        loc: {
          start: {
            line: 448,
            column: 36
          },
          end: {
            line: 468,
            column: 5
          }
        },
        line: 448
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 451,
            column: 35
          },
          end: {
            line: 451,
            column: 36
          }
        },
        loc: {
          start: {
            line: 451,
            column: 40
          },
          end: {
            line: 451,
            column: 67
          }
        },
        line: 451
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 454,
            column: 35
          },
          end: {
            line: 454,
            column: 36
          }
        },
        loc: {
          start: {
            line: 454,
            column: 40
          },
          end: {
            line: 454,
            column: 63
          }
        },
        line: 454
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 457,
            column: 35
          },
          end: {
            line: 457,
            column: 36
          }
        },
        loc: {
          start: {
            line: 457,
            column: 40
          },
          end: {
            line: 457,
            column: 71
          }
        },
        line: 457
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 460,
            column: 35
          },
          end: {
            line: 460,
            column: 36
          }
        },
        loc: {
          start: {
            line: 460,
            column: 40
          },
          end: {
            line: 460,
            column: 68
          }
        },
        line: 460
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 463,
            column: 20
          },
          end: {
            line: 463,
            column: 21
          }
        },
        loc: {
          start: {
            line: 463,
            column: 30
          },
          end: {
            line: 463,
            column: 55
          }
        },
        line: 463
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 472,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        loc: {
          start: {
            line: 472,
            column: 33
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 472
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 488,
            column: 4
          },
          end: {
            line: 488,
            column: 5
          }
        },
        loc: {
          start: {
            line: 488,
            column: 29
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 488
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 39
          },
          end: {
            line: 535,
            column: 5
          }
        },
        line: 494
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 501,
            column: 54
          },
          end: {
            line: 501,
            column: 55
          }
        },
        loc: {
          start: {
            line: 501,
            column: 64
          },
          end: {
            line: 501,
            column: 89
          }
        },
        line: 501
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 539,
            column: 4
          },
          end: {
            line: 539,
            column: 5
          }
        },
        loc: {
          start: {
            line: 539,
            column: 28
          },
          end: {
            line: 542,
            column: 5
          }
        },
        line: 539
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 546,
            column: 4
          },
          end: {
            line: 546,
            column: 5
          }
        },
        loc: {
          start: {
            line: 546,
            column: 38
          },
          end: {
            line: 563,
            column: 5
          }
        },
        line: 546
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 567,
            column: 4
          },
          end: {
            line: 567,
            column: 5
          }
        },
        loc: {
          start: {
            line: 567,
            column: 22
          },
          end: {
            line: 570,
            column: 5
          }
        },
        line: 567
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 574,
            column: 5
          }
        },
        loc: {
          start: {
            line: 574,
            column: 35
          },
          end: {
            line: 583,
            column: 5
          }
        },
        line: 574
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 587,
            column: 4
          },
          end: {
            line: 587,
            column: 5
          }
        },
        loc: {
          start: {
            line: 587,
            column: 29
          },
          end: {
            line: 599,
            column: 5
          }
        },
        line: 587
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 603,
            column: 5
          }
        },
        loc: {
          start: {
            line: 603,
            column: 31
          },
          end: {
            line: 622,
            column: 5
          }
        },
        line: 603
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 626,
            column: 4
          },
          end: {
            line: 626,
            column: 5
          }
        },
        loc: {
          start: {
            line: 626,
            column: 28
          },
          end: {
            line: 651,
            column: 5
          }
        },
        line: 626
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 655,
            column: 4
          },
          end: {
            line: 655,
            column: 5
          }
        },
        loc: {
          start: {
            line: 655,
            column: 30
          },
          end: {
            line: 659,
            column: 5
          }
        },
        line: 655
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 663,
            column: 4
          },
          end: {
            line: 663,
            column: 5
          }
        },
        loc: {
          start: {
            line: 663,
            column: 33
          },
          end: {
            line: 668,
            column: 5
          }
        },
        line: 663
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 672,
            column: 4
          },
          end: {
            line: 672,
            column: 5
          }
        },
        loc: {
          start: {
            line: 672,
            column: 39
          },
          end: {
            line: 679,
            column: 5
          }
        },
        line: 672
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 683,
            column: 4
          },
          end: {
            line: 683,
            column: 5
          }
        },
        loc: {
          start: {
            line: 683,
            column: 24
          },
          end: {
            line: 685,
            column: 5
          }
        },
        line: 683
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 689,
            column: 4
          },
          end: {
            line: 689,
            column: 5
          }
        },
        loc: {
          start: {
            line: 689,
            column: 26
          },
          end: {
            line: 691,
            column: 5
          }
        },
        line: 689
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 695,
            column: 4
          },
          end: {
            line: 695,
            column: 5
          }
        },
        loc: {
          start: {
            line: 695,
            column: 22
          },
          end: {
            line: 697,
            column: 5
          }
        },
        line: 695
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 701,
            column: 4
          },
          end: {
            line: 701,
            column: 5
          }
        },
        loc: {
          start: {
            line: 701,
            column: 22
          },
          end: {
            line: 703,
            column: 5
          }
        },
        line: 701
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 707,
            column: 4
          },
          end: {
            line: 707,
            column: 5
          }
        },
        loc: {
          start: {
            line: 707,
            column: 41
          },
          end: {
            line: 711,
            column: 5
          }
        },
        line: 707
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 715,
            column: 4
          },
          end: {
            line: 715,
            column: 5
          }
        },
        loc: {
          start: {
            line: 715,
            column: 43
          },
          end: {
            line: 719,
            column: 5
          }
        },
        line: 715
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 723,
            column: 4
          },
          end: {
            line: 723,
            column: 5
          }
        },
        loc: {
          start: {
            line: 723,
            column: 24
          },
          end: {
            line: 727,
            column: 5
          }
        },
        line: 723
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 724,
            column: 20
          },
          end: {
            line: 724,
            column: 21
          }
        },
        loc: {
          start: {
            line: 724,
            column: 26
          },
          end: {
            line: 726,
            column: 9
          }
        },
        line: 724
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 731,
            column: 4
          },
          end: {
            line: 731,
            column: 5
          }
        },
        loc: {
          start: {
            line: 731,
            column: 14
          },
          end: {
            line: 757,
            column: 5
          }
        },
        line: 731
      },
      "40": {
        name: "createEnhancedAuth",
        decl: {
          start: {
            line: 762,
            column: 16
          },
          end: {
            line: 762,
            column: 34
          }
        },
        loc: {
          start: {
            line: 762,
            column: 61
          },
          end: {
            line: 764,
            column: 1
          }
        },
        line: 762
      },
      "41": {
        name: "parseEnhancedAuthConfigFromEnv",
        decl: {
          start: {
            line: 795,
            column: 16
          },
          end: {
            line: 795,
            column: 46
          }
        },
        loc: {
          start: {
            line: 795,
            column: 49
          },
          end: {
            line: 839,
            column: 1
          }
        },
        line: 795
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 34
          },
          end: {
            line: 25,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 43
          },
          end: {
            line: 25,
            column: 45
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 12
          },
          end: {
            line: 88,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 87,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "4": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 103,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "5": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 131,
            column: 17
          }
        }, {
          start: {
            line: 128,
            column: 21
          },
          end: {
            line: 131,
            column: 17
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 109,
            column: 20
          },
          end: {
            line: 109,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 109,
            column: 20
          },
          end: {
            line: 109,
            column: 27
          }
        }, {
          start: {
            line: 109,
            column: 31
          },
          end: {
            line: 109,
            column: 59
          }
        }],
        line: 109
      },
      "8": {
        loc: {
          start: {
            line: 111,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 20
          },
          end: {
            line: 114,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "9": {
        loc: {
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 20
          },
          end: {
            line: 126,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "10": {
        loc: {
          start: {
            line: 123,
            column: 45
          },
          end: {
            line: 123,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 45
          },
          end: {
            line: 123,
            column: 73
          }
        }, {
          start: {
            line: 123,
            column: 77
          },
          end: {
            line: 123,
            column: 107
          }
        }],
        line: 123
      },
      "11": {
        loc: {
          start: {
            line: 128,
            column: 21
          },
          end: {
            line: 131,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 21
          },
          end: {
            line: 131,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 147,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 16
          },
          end: {
            line: 139,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 172,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 38
          }
        }, {
          start: {
            line: 151,
            column: 42
          },
          end: {
            line: 151,
            column: 75
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "17": {
        loc: {
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 12
          },
          end: {
            line: 199,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "18": {
        loc: {
          start: {
            line: 204,
            column: 27
          },
          end: {
            line: 204,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 52
          },
          end: {
            line: 204,
            column: 65
          }
        }, {
          start: {
            line: 204,
            column: 68
          },
          end: {
            line: 204,
            column: 83
          }
        }],
        line: 204
      },
      "19": {
        loc: {
          start: {
            line: 211,
            column: 49
          },
          end: {
            line: 211,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 74
          },
          end: {
            line: 211,
            column: 87
          }
        }, {
          start: {
            line: 211,
            column: 90
          },
          end: {
            line: 211,
            column: 105
          }
        }],
        line: 211
      },
      "20": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "21": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 232,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "22": {
        loc: {
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 12
          },
          end: {
            line: 227,
            column: 20
          }
        }, {
          start: {
            line: 227,
            column: 24
          },
          end: {
            line: 227,
            column: 53
          }
        }],
        line: 227
      },
      "23": {
        loc: {
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 8
          },
          end: {
            line: 237,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "24": {
        loc: {
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 8
          },
          end: {
            line: 244,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "25": {
        loc: {
          start: {
            line: 251,
            column: 29
          },
          end: {
            line: 251,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 29
          },
          end: {
            line: 251,
            column: 57
          }
        }, {
          start: {
            line: 251,
            column: 61
          },
          end: {
            line: 251,
            column: 91
          }
        }],
        line: 251
      },
      "26": {
        loc: {
          start: {
            line: 282,
            column: 8
          },
          end: {
            line: 295,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 283,
            column: 12
          },
          end: {
            line: 285,
            column: 22
          }
        }, {
          start: {
            line: 286,
            column: 12
          },
          end: {
            line: 286,
            column: 23
          }
        }, {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 291,
            column: 22
          }
        }, {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 294,
            column: 22
          }
        }],
        line: 282
      },
      "27": {
        loc: {
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "28": {
        loc: {
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 8
          },
          end: {
            line: 324,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "29": {
        loc: {
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "30": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 344,
            column: 12
          },
          end: {
            line: 346,
            column: 22
          }
        }, {
          start: {
            line: 347,
            column: 12
          },
          end: {
            line: 347,
            column: 23
          }
        }, {
          start: {
            line: 348,
            column: 12
          },
          end: {
            line: 350,
            column: 22
          }
        }, {
          start: {
            line: 351,
            column: 12
          },
          end: {
            line: 353,
            column: 22
          }
        }],
        line: 343
      },
      "31": {
        loc: {
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "32": {
        loc: {
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 12
          },
          end: {
            line: 363,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "33": {
        loc: {
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "34": {
        loc: {
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 8
          },
          end: {
            line: 399,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "35": {
        loc: {
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 12
          },
          end: {
            line: 419,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "36": {
        loc: {
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 16
          },
          end: {
            line: 417,
            column: 41
          }
        }, {
          start: {
            line: 417,
            column: 45
          },
          end: {
            line: 417,
            column: 73
          }
        }],
        line: 417
      },
      "37": {
        loc: {
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 12
          },
          end: {
            line: 432,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "38": {
        loc: {
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 442,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "39": {
        loc: {
          start: {
            line: 448,
            column: 22
          },
          end: {
            line: 448,
            column: 34
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 448,
            column: 32
          },
          end: {
            line: 448,
            column: 34
          }
        }],
        line: 448
      },
      "40": {
        loc: {
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 450,
            column: 8
          },
          end: {
            line: 452,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 450
      },
      "41": {
        loc: {
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 8
          },
          end: {
            line: 455,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "42": {
        loc: {
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 456,
            column: 8
          },
          end: {
            line: 458,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 456
      },
      "43": {
        loc: {
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 8
          },
          end: {
            line: 461,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "44": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 466,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "45": {
        loc: {
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 474,
            column: 8
          },
          end: {
            line: 476,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 474
      },
      "46": {
        loc: {
          start: {
            line: 478,
            column: 23
          },
          end: {
            line: 478,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 478,
            column: 51
          },
          end: {
            line: 478,
            column: 82
          }
        }, {
          start: {
            line: 478,
            column: 85
          },
          end: {
            line: 478,
            column: 90
          }
        }],
        line: 478
      },
      "47": {
        loc: {
          start: {
            line: 499,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 499,
            column: 8
          },
          end: {
            line: 503,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 499
      },
      "48": {
        loc: {
          start: {
            line: 511,
            column: 20
          },
          end: {
            line: 511,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 511,
            column: 20
          },
          end: {
            line: 511,
            column: 56
          }
        }, {
          start: {
            line: 511,
            column: 60
          },
          end: {
            line: 511,
            column: 90
          }
        }],
        line: 511
      },
      "49": {
        loc: {
          start: {
            line: 524,
            column: 8
          },
          end: {
            line: 533,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 8
          },
          end: {
            line: 533,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "50": {
        loc: {
          start: {
            line: 569,
            column: 15
          },
          end: {
            line: 569,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 569,
            column: 15
          },
          end: {
            line: 569,
            column: 37
          }
        }, {
          start: {
            line: 569,
            column: 41
          },
          end: {
            line: 569,
            column: 63
          }
        }, {
          start: {
            line: 569,
            column: 67
          },
          end: {
            line: 569,
            column: 95
          }
        }],
        line: 569
      },
      "51": {
        loc: {
          start: {
            line: 576,
            column: 24
          },
          end: {
            line: 576,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 576,
            column: 24
          },
          end: {
            line: 576,
            column: 59
          }
        }, {
          start: {
            line: 576,
            column: 63
          },
          end: {
            line: 576,
            column: 91
          }
        }],
        line: 576
      },
      "52": {
        loc: {
          start: {
            line: 579,
            column: 8
          },
          end: {
            line: 581,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 579,
            column: 8
          },
          end: {
            line: 581,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 579
      },
      "53": {
        loc: {
          start: {
            line: 589,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 589,
            column: 8
          },
          end: {
            line: 591,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 589
      },
      "54": {
        loc: {
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 589,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 589,
            column: 12
          },
          end: {
            line: 589,
            column: 20
          }
        }, {
          start: {
            line: 589,
            column: 24
          },
          end: {
            line: 589,
            column: 44
          }
        }],
        line: 589
      },
      "55": {
        loc: {
          start: {
            line: 593,
            column: 8
          },
          end: {
            line: 595,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 593,
            column: 8
          },
          end: {
            line: 595,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 593
      },
      "56": {
        loc: {
          start: {
            line: 606,
            column: 8
          },
          end: {
            line: 617,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 606,
            column: 8
          },
          end: {
            line: 617,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 606
      },
      "57": {
        loc: {
          start: {
            line: 606,
            column: 12
          },
          end: {
            line: 606,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 606,
            column: 12
          },
          end: {
            line: 606,
            column: 21
          }
        }, {
          start: {
            line: 606,
            column: 25
          },
          end: {
            line: 606,
            column: 50
          }
        }],
        line: 606
      },
      "58": {
        loc: {
          start: {
            line: 627,
            column: 8
          },
          end: {
            line: 629,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 627,
            column: 8
          },
          end: {
            line: 629,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 627
      },
      "59": {
        loc: {
          start: {
            line: 630,
            column: 26
          },
          end: {
            line: 634,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 630,
            column: 27
          },
          end: {
            line: 630,
            column: 49
          }
        }, {
          start: {
            line: 630,
            column: 54
          },
          end: {
            line: 630,
            column: 82
          }
        }, {
          start: {
            line: 630,
            column: 86
          },
          end: {
            line: 630,
            column: 115
          }
        }, {
          start: {
            line: 631,
            column: 13
          },
          end: {
            line: 631,
            column: 36
          }
        }, {
          start: {
            line: 631,
            column: 40
          },
          end: {
            line: 631,
            column: 69
          }
        }, {
          start: {
            line: 632,
            column: 13
          },
          end: {
            line: 632,
            column: 33
          }
        }, {
          start: {
            line: 632,
            column: 37
          },
          end: {
            line: 632,
            column: 66
          }
        }, {
          start: {
            line: 633,
            column: 12
          },
          end: {
            line: 633,
            column: 37
          }
        }, {
          start: {
            line: 634,
            column: 12
          },
          end: {
            line: 634,
            column: 41
          }
        }],
        line: 630
      },
      "60": {
        loc: {
          start: {
            line: 635,
            column: 8
          },
          end: {
            line: 637,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 635,
            column: 8
          },
          end: {
            line: 637,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 635
      },
      "61": {
        loc: {
          start: {
            line: 648,
            column: 8
          },
          end: {
            line: 650,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 648,
            column: 8
          },
          end: {
            line: 650,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 648
      },
      "62": {
        loc: {
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 658,
            column: 16
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 656,
            column: 49
          }
        }, {
          start: {
            line: 657,
            column: 12
          },
          end: {
            line: 657,
            column: 74
          }
        }, {
          start: {
            line: 658,
            column: 12
          },
          end: {
            line: 658,
            column: 16
          }
        }],
        line: 656
      },
      "63": {
        loc: {
          start: {
            line: 664,
            column: 16
          },
          end: {
            line: 667,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 664,
            column: 16
          },
          end: {
            line: 664,
            column: 52
          }
        }, {
          start: {
            line: 665,
            column: 12
          },
          end: {
            line: 665,
            column: 42
          }
        }, {
          start: {
            line: 666,
            column: 12
          },
          end: {
            line: 666,
            column: 28
          }
        }, {
          start: {
            line: 667,
            column: 12
          },
          end: {
            line: 667,
            column: 21
          }
        }],
        line: 664
      },
      "64": {
        loc: {
          start: {
            line: 735,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 735,
            column: 12
          },
          end: {
            line: 737,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 735
      },
      "65": {
        loc: {
          start: {
            line: 741,
            column: 12
          },
          end: {
            line: 743,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 741,
            column: 12
          },
          end: {
            line: 743,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 741
      },
      "66": {
        loc: {
          start: {
            line: 747,
            column: 12
          },
          end: {
            line: 749,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 747,
            column: 12
          },
          end: {
            line: 749,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 747
      },
      "67": {
        loc: {
          start: {
            line: 753,
            column: 12
          },
          end: {
            line: 755,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 753,
            column: 12
          },
          end: {
            line: 755,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 753
      },
      "68": {
        loc: {
          start: {
            line: 753,
            column: 16
          },
          end: {
            line: 753,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 753,
            column: 16
          },
          end: {
            line: 753,
            column: 35
          }
        }, {
          start: {
            line: 753,
            column: 39
          },
          end: {
            line: 753,
            column: 65
          }
        }],
        line: 753
      },
      "69": {
        loc: {
          start: {
            line: 799,
            column: 21
          },
          end: {
            line: 801,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 800,
            column: 18
          },
          end: {
            line: 800,
            column: 88
          }
        }, {
          start: {
            line: 801,
            column: 18
          },
          end: {
            line: 801,
            column: 37
          }
        }],
        line: 799
      },
      "70": {
        loc: {
          start: {
            line: 803,
            column: 27
          },
          end: {
            line: 805,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 804,
            column: 18
          },
          end: {
            line: 804,
            column: 89
          }
        }, {
          start: {
            line: 805,
            column: 18
          },
          end: {
            line: 805,
            column: 19
          }
        }],
        line: 803
      },
      "71": {
        loc: {
          start: {
            line: 810,
            column: 22
          },
          end: {
            line: 812,
            column: 32
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 811,
            column: 18
          },
          end: {
            line: 811,
            column: 96
          }
        }, {
          start: {
            line: 812,
            column: 18
          },
          end: {
            line: 812,
            column: 32
          }
        }],
        line: 810
      },
      "72": {
        loc: {
          start: {
            line: 817,
            column: 31
          },
          end: {
            line: 819,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 818,
            column: 18
          },
          end: {
            line: 818,
            column: 85
          }
        }, {
          start: {
            line: 819,
            column: 18
          },
          end: {
            line: 819,
            column: 19
          }
        }],
        line: 817
      },
      "73": {
        loc: {
          start: {
            line: 820,
            column: 29
          },
          end: {
            line: 822,
            column: 32
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 821,
            column: 18
          },
          end: {
            line: 821,
            column: 89
          }
        }, {
          start: {
            line: 822,
            column: 18
          },
          end: {
            line: 822,
            column: 32
          }
        }],
        line: 820
      },
      "74": {
        loc: {
          start: {
            line: 824,
            column: 29
          },
          end: {
            line: 826,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 825,
            column: 18
          },
          end: {
            line: 825,
            column: 90
          }
        }, {
          start: {
            line: 826,
            column: 18
          },
          end: {
            line: 826,
            column: 27
          }
        }],
        line: 824
      },
      "75": {
        loc: {
          start: {
            line: 827,
            column: 34
          },
          end: {
            line: 829,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 828,
            column: 18
          },
          end: {
            line: 828,
            column: 89
          }
        }, {
          start: {
            line: 829,
            column: 18
          },
          end: {
            line: 829,
            column: 20
          }
        }],
        line: 827
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0, 0, 0, 0, 0, 0, 0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0, 0],
      "63": [0, 0, 0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/enhancedAuth.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/enhancedAuth.ts"],
      sourcesContent: ["/**\n * Enhanced Authentication Flows for n8n MCP Server\n *\n * Provides advanced authentication capabilities including multi-factor authentication,\n * session management, token rotation, and security monitoring.\n */\n\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { setInterval } from 'timers';\nimport { AuthProvider, RequestContext, AuthResult, AuthenticatedUser } from './authProvider.js';\nimport { OAuth2Handler } from './oauth2Handler.js';\n\n/**\n * Enhanced authentication configuration\n */\nexport interface EnhancedAuthConfig {\n  /** Enable multi-factor authentication */\n  mfaEnabled?: boolean;\n\n  /** Session configuration */\n  session?: {\n    /** Session timeout in milliseconds */\n    timeout: number;\n\n    /** Enable session sliding (extend on activity) */\n    sliding: boolean;\n\n    /** Maximum concurrent sessions per user */\n    maxConcurrent: number;\n\n    /** Session storage type */\n    storage: 'memory' | 'redis' | 'database';\n  };\n\n  /** Token rotation configuration */\n  tokenRotation?: {\n    /** Enable automatic token rotation */\n    enabled: boolean;\n\n    /** Rotation interval in milliseconds */\n    interval: number;\n\n    /** Grace period for old tokens */\n    gracePeriod: number;\n  };\n\n  /** Security monitoring */\n  security?: {\n    /** Enable failed login attempt tracking */\n    trackFailedAttempts: boolean;\n\n    /** Maximum failed attempts before lockout */\n    maxFailedAttempts: number;\n\n    /** Lockout duration in milliseconds */\n    lockoutDuration: number;\n\n    /** Enable IP-based rate limiting */\n    rateLimiting: boolean;\n\n    /** Rate limit window in milliseconds */\n    rateLimitWindow: number;\n\n    /** Maximum requests per window */\n    maxRequestsPerWindow: number;\n  };\n\n  /** Audit configuration */\n  audit?: {\n    /** Enable authentication event logging */\n    enabled: boolean;\n\n    /** Log successful authentications */\n    logSuccess: boolean;\n\n    /** Log failed authentications */\n    logFailures: boolean;\n\n    /** Log session events */\n    logSessions: boolean;\n\n    /** Log security events */\n    logSecurity: boolean;\n  };\n}\n\n/**\n * Authentication session information\n */\nexport interface AuthSession {\n  /** Session ID */\n  sessionId: string;\n\n  /** User ID */\n  userId: string;\n\n  /** Session creation timestamp */\n  createdAt: number;\n\n  /** Last activity timestamp */\n  lastActivity: number;\n\n  /** Session expiry timestamp */\n  expiresAt: number;\n\n  /** Client information */\n  client: {\n    /** IP address */\n    ip?: string;\n\n    /** User agent */\n    userAgent?: string;\n\n    /** Device fingerprint */\n    fingerprint?: string;\n  };\n\n  /** Session metadata */\n  metadata?: Record<string, unknown>;\n\n  /** Security flags */\n  security: {\n    /** Requires MFA */\n    requiresMfa: boolean;\n\n    /** MFA completed */\n    mfaCompleted: boolean;\n\n    /** Is elevated session */\n    elevated: boolean;\n\n    /** Last security check */\n    lastSecurityCheck: number;\n  };\n}\n\n/**\n * MFA challenge information\n */\nexport interface MfaChallenge {\n  /** Challenge ID */\n  challengeId: string;\n\n  /** User ID */\n  userId: string;\n\n  /** Challenge type */\n  type: 'totp' | 'sms' | 'email' | 'backup-code';\n\n  /** Challenge creation timestamp */\n  createdAt: number;\n\n  /** Challenge expiry timestamp */\n  expiresAt: number;\n\n  /** Challenge-specific data */\n  data?: Record<string, unknown>;\n\n  /** Number of attempts */\n  attempts: number;\n\n  /** Maximum allowed attempts */\n  maxAttempts: number;\n}\n\n/**\n * Security event information\n */\nexport interface SecurityEvent {\n  /** Event ID */\n  id: string;\n\n  /** Event type */\n  type: 'login' | 'logout' | 'mfa' | 'token-rotation' | 'suspicious-activity' | 'lockout';\n\n  /** User ID (if applicable) */\n  userId?: string;\n\n  /** Session ID (if applicable) */\n  sessionId?: string;\n\n  /** Event timestamp */\n  timestamp: number;\n\n  /** Client information */\n  client?: {\n    ip?: string;\n    userAgent?: string;\n    fingerprint?: string;\n  };\n\n  /** Event details */\n  details: Record<string, unknown>;\n\n  /** Severity level */\n  severity: 'low' | 'medium' | 'high' | 'critical';\n\n  /** Whether event was suspicious */\n  suspicious: boolean;\n}\n\n/**\n * Rate limiting information\n */\nexport interface RateLimit {\n  /** Client identifier (IP, user ID, etc.) */\n  identifier: string;\n\n  /** Request count in current window */\n  requests: number;\n\n  /** Window start timestamp */\n  windowStart: number;\n\n  /** Window end timestamp */\n  windowEnd: number;\n\n  /** Whether rate limit is exceeded */\n  exceeded: boolean;\n}\n\n/**\n * Enhanced Authentication Provider\n *\n * Provides advanced authentication features with security monitoring,\n * session management, and multi-factor authentication.\n */\nexport class EnhancedAuthProvider extends EventEmitter implements AuthProvider {\n  private config: Required<EnhancedAuthConfig>;\n  private sessions = new Map<string, AuthSession>();\n  private mfaChallenges = new Map<string, MfaChallenge>();\n  private securityEvents: SecurityEvent[] = [];\n  private failedAttempts = new Map<\n    string,\n    { count: number; lastAttempt: number; lockedUntil?: number }\n  >();\n  private rateLimits = new Map<string, RateLimit>();\n  private baseAuthProvider: AuthProvider;\n  private oauth2Handler?: OAuth2Handler;\n\n  constructor(baseAuthProvider: AuthProvider, config: Partial<EnhancedAuthConfig> = {}) {\n    super();\n    this.baseAuthProvider = baseAuthProvider;\n\n    // Set defaults\n    this.config = {\n      mfaEnabled: false,\n      session: {\n        timeout: 24 * 60 * 60 * 1000, // 24 hours\n        sliding: true,\n        maxConcurrent: 5,\n        storage: 'memory',\n      },\n      tokenRotation: {\n        enabled: false,\n        interval: 60 * 60 * 1000, // 1 hour\n        gracePeriod: 5 * 60 * 1000, // 5 minutes\n      },\n      security: {\n        trackFailedAttempts: true,\n        maxFailedAttempts: 5,\n        lockoutDuration: 15 * 60 * 1000, // 15 minutes\n        rateLimiting: true,\n        rateLimitWindow: 60 * 1000, // 1 minute\n        maxRequestsPerWindow: 60,\n      },\n      audit: {\n        enabled: true,\n        logSuccess: true,\n        logFailures: true,\n        logSessions: true,\n        logSecurity: true,\n      },\n      ...config,\n    } as Required<EnhancedAuthConfig>;\n\n    this.setupCleanupTimer();\n  }\n\n  /**\n   * Set OAuth2 handler for enhanced OAuth2 support\n   */\n  setOAuth2Handler(handler: OAuth2Handler): void {\n    this.oauth2Handler = handler;\n  }\n\n  /**\n   * Authenticate client request with enhanced security\n   */\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    const clientId = this.getClientIdentifier(context);\n\n    try {\n      // Check rate limiting\n      if (this.config.security.rateLimiting) {\n        const rateLimit = this.checkRateLimit(clientId);\n        if (rateLimit.exceeded) {\n          this.logSecurityEvent({\n            type: 'suspicious-activity',\n            details: { reason: 'rate-limit-exceeded', identifier: clientId },\n            severity: 'medium',\n            suspicious: true,\n          });\n          return {\n            success: false,\n            error: 'Rate limit exceeded. Please try again later.',\n          };\n        }\n      }\n\n      // Check for account lockout\n      if (this.config.security.trackFailedAttempts) {\n        const lockout = this.checkLockout(clientId);\n        if (lockout) {\n          this.logSecurityEvent({\n            type: 'lockout',\n            details: { reason: 'account-locked', identifier: clientId, lockedUntil: lockout },\n            severity: 'high',\n            suspicious: true,\n          });\n          return {\n            success: false,\n            error: `Account locked due to too many failed attempts. Try again after ${new Date(lockout).toLocaleString()}.`,\n          };\n        }\n      }\n\n      // Check for existing session\n      const existingSessionId = this.extractSessionId(context);\n      if (existingSessionId) {\n        const session = this.sessions.get(existingSessionId);\n        if (session && this.isSessionValid(session)) {\n          // Update session activity\n          if (this.config.session.sliding) {\n            session.lastActivity = Date.now();\n            session.expiresAt = Date.now() + this.config.session.timeout;\n          }\n\n          const user = await this.getUserFromSession(session);\n          if (user) {\n            return {\n              success: true,\n              user,\n              context: {\n                sessionId: session.sessionId,\n                authType: 'session',\n                requiresMfa: session.security.requiresMfa && !session.security.mfaCompleted,\n              },\n            };\n          }\n        } else if (session) {\n          // Remove invalid session\n          this.sessions.delete(existingSessionId);\n        }\n      }\n\n      // Perform base authentication\n      const baseResult = await this.baseAuthProvider.authenticate(context);\n      if (!baseResult.success) {\n        // Track failed attempt\n        if (this.config.security.trackFailedAttempts) {\n          this.trackFailedAttempt(clientId);\n        }\n\n        this.logSecurityEvent({\n          type: 'login',\n          details: { success: false, error: baseResult.error, identifier: clientId },\n          severity: 'low',\n          suspicious: false,\n        });\n\n        return baseResult;\n      }\n\n      // Create new session\n      const session = await this.createSession(baseResult.user!, context);\n\n      // Check if MFA is required\n      if (this.config.mfaEnabled && this.requiresMfa(baseResult.user!)) {\n        session.security.requiresMfa = true;\n        session.security.mfaCompleted = false;\n\n        this.logSecurityEvent({\n          type: 'login',\n          userId: baseResult.user!.id,\n          sessionId: session.sessionId,\n          details: { success: true, requiresMfa: true },\n          severity: 'low',\n          suspicious: false,\n        });\n\n        return {\n          success: true,\n          user: baseResult.user,\n          context: {\n            sessionId: session.sessionId,\n            authType: 'partial',\n            requiresMfa: true,\n            mfaChallengeRequired: true,\n          },\n        };\n      }\n\n      // Clear failed attempts on successful login\n      if (this.config.security.trackFailedAttempts) {\n        this.failedAttempts.delete(clientId);\n      }\n\n      this.logSecurityEvent({\n        type: 'login',\n        userId: baseResult.user!.id,\n        sessionId: session.sessionId,\n        details: { success: true, requiresMfa: false },\n        severity: 'low',\n        suspicious: false,\n      });\n\n      return {\n        success: true,\n        user: baseResult.user,\n        context: {\n          sessionId: session.sessionId,\n          authType: 'enhanced',\n          requiresMfa: false,\n        },\n      };\n    } catch (error) {\n      // Track failed attempt\n      if (this.config.security.trackFailedAttempts) {\n        this.trackFailedAttempt(clientId);\n      }\n\n      this.logSecurityEvent({\n        type: 'login',\n        details: {\n          success: false,\n          error: error instanceof Error ? error.message : 'Unknown error',\n        },\n        severity: 'medium',\n        suspicious: true,\n      });\n\n      return {\n        success: false,\n        error: `Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Refresh authentication\n   */\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    const sessionId = this.extractSessionId(context);\n    if (!sessionId) {\n      return {\n        success: false,\n        error: 'No session found for refresh',\n      };\n    }\n\n    const session = this.sessions.get(sessionId);\n    if (!session || !this.isSessionValid(session)) {\n      return {\n        success: false,\n        error: 'Invalid or expired session',\n      };\n    }\n\n    // Update session activity\n    session.lastActivity = Date.now();\n    if (this.config.session.sliding) {\n      session.expiresAt = Date.now() + this.config.session.timeout;\n    }\n\n    const user = await this.getUserFromSession(session);\n    if (!user) {\n      return {\n        success: false,\n        error: 'Unable to refresh user information',\n      };\n    }\n\n    return {\n      success: true,\n      user,\n      context: {\n        sessionId: session.sessionId,\n        authType: 'session-refresh',\n        requiresMfa: session.security.requiresMfa && !session.security.mfaCompleted,\n      },\n    };\n  }\n\n  /**\n   * Check tool access permissions\n   */\n  async canAccessTool(toolName: string, context: RequestContext): Promise<boolean> {\n    return this.baseAuthProvider.canAccessTool(toolName, context);\n  }\n\n  /**\n   * Check resource access permissions\n   */\n  async canAccessResource(resourceUri: string, context: RequestContext): Promise<boolean> {\n    return this.baseAuthProvider.canAccessResource(resourceUri, context);\n  }\n\n  /**\n   * Create MFA challenge\n   */\n  async createMfaChallenge(\n    userId: string,\n    type: MfaChallenge['type'],\n    sessionId?: string\n  ): Promise<MfaChallenge> {\n    const challengeId = this.generateChallengeId();\n    const challenge: MfaChallenge = {\n      challengeId,\n      userId,\n      type,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + 5 * 60 * 1000, // 5 minutes\n      attempts: 0,\n      maxAttempts: 3,\n    };\n\n    // Generate challenge-specific data\n    switch (type) {\n      case 'totp':\n        // TOTP challenges don't need additional data\n        break;\n      case 'sms':\n      case 'email':\n        challenge.data = {\n          code: this.generateMfaCode(),\n        };\n        break;\n      case 'backup-code':\n        // Backup codes are pre-generated\n        break;\n    }\n\n    this.mfaChallenges.set(challengeId, challenge);\n\n    this.logSecurityEvent({\n      type: 'mfa',\n      userId,\n      sessionId,\n      details: { action: 'challenge-created', type, challengeId },\n      severity: 'low',\n      suspicious: false,\n    });\n\n    return challenge;\n  }\n\n  /**\n   * Verify MFA challenge\n   */\n  async verifyMfaChallenge(\n    challengeId: string,\n    response: string,\n    sessionId?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    const challenge = this.mfaChallenges.get(challengeId);\n    if (!challenge) {\n      return {\n        success: false,\n        error: 'Invalid or expired MFA challenge',\n      };\n    }\n\n    if (challenge.expiresAt < Date.now()) {\n      this.mfaChallenges.delete(challengeId);\n      return {\n        success: false,\n        error: 'MFA challenge has expired',\n      };\n    }\n\n    if (challenge.attempts >= challenge.maxAttempts) {\n      this.mfaChallenges.delete(challengeId);\n      this.logSecurityEvent({\n        type: 'mfa',\n        userId: challenge.userId,\n        sessionId,\n        details: { action: 'max-attempts-exceeded', challengeId },\n        severity: 'medium',\n        suspicious: true,\n      });\n      return {\n        success: false,\n        error: 'Maximum MFA attempts exceeded',\n      };\n    }\n\n    challenge.attempts++;\n\n    // Verify response based on challenge type\n    let isValid = false;\n    switch (challenge.type) {\n      case 'totp':\n        isValid = await this.verifyTotpCode(challenge.userId, response);\n        break;\n      case 'sms':\n      case 'email':\n        isValid = challenge.data?.code === response;\n        break;\n      case 'backup-code':\n        isValid = await this.verifyBackupCode(challenge.userId, response);\n        break;\n    }\n\n    if (isValid) {\n      this.mfaChallenges.delete(challengeId);\n\n      // Update session if provided\n      if (sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (session) {\n          session.security.mfaCompleted = true;\n        }\n      }\n\n      this.logSecurityEvent({\n        type: 'mfa',\n        userId: challenge.userId,\n        sessionId,\n        details: { action: 'challenge-verified', type: challenge.type, challengeId },\n        severity: 'low',\n        suspicious: false,\n      });\n\n      return { success: true };\n    }\n\n    this.logSecurityEvent({\n      type: 'mfa',\n      userId: challenge.userId,\n      sessionId,\n      details: {\n        action: 'challenge-failed',\n        type: challenge.type,\n        challengeId,\n        attempts: challenge.attempts,\n      },\n      severity: 'low',\n      suspicious: challenge.attempts > 1,\n    });\n\n    return {\n      success: false,\n      error: 'Invalid MFA code',\n    };\n  }\n\n  /**\n   * Logout user and invalidate session\n   */\n  async logout(sessionId: string): Promise<boolean> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      return false;\n    }\n\n    this.sessions.delete(sessionId);\n\n    this.logSecurityEvent({\n      type: 'logout',\n      userId: session.userId,\n      sessionId,\n      details: { action: 'explicit-logout' },\n      severity: 'low',\n      suspicious: false,\n    });\n\n    return true;\n  }\n\n  /**\n   * Get active sessions for user\n   */\n  getActiveSessions(userId: string): AuthSession[] {\n    const sessions: AuthSession[] = [];\n    for (const session of this.sessions.values()) {\n      if (session.userId === userId && this.isSessionValid(session)) {\n        sessions.push(session);\n      }\n    }\n    return sessions;\n  }\n\n  /**\n   * Terminate all sessions for user\n   */\n  terminateAllSessions(userId: string): number {\n    let terminated = 0;\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.userId === userId) {\n        this.sessions.delete(sessionId);\n        terminated++;\n      }\n    }\n\n    if (terminated > 0) {\n      this.logSecurityEvent({\n        type: 'logout',\n        userId,\n        details: { action: 'terminate-all-sessions', count: terminated },\n        severity: 'medium',\n        suspicious: false,\n      });\n    }\n\n    return terminated;\n  }\n\n  /**\n   * Get security events\n   */\n  getSecurityEvents(\n    options: {\n      userId?: string;\n      type?: SecurityEvent['type'];\n      severity?: SecurityEvent['severity'];\n      limit?: number;\n      since?: number;\n    } = {}\n  ): SecurityEvent[] {\n    let events = [...this.securityEvents];\n\n    if (options.userId) {\n      events = events.filter(e => e.userId === options.userId);\n    }\n\n    if (options.type) {\n      events = events.filter(e => e.type === options.type);\n    }\n\n    if (options.severity) {\n      events = events.filter(e => e.severity === options.severity);\n    }\n\n    if (options.since) {\n      events = events.filter(e => e.timestamp >= options.since!);\n    }\n\n    // Sort by timestamp (newest first)\n    events.sort((a, b) => b.timestamp - a.timestamp);\n\n    if (options.limit) {\n      events = events.slice(0, options.limit);\n    }\n\n    return events;\n  }\n\n  /**\n   * Get account lockout status\n   */\n  getLockoutStatus(identifier: string): {\n    locked: boolean;\n    lockedUntil?: number;\n    attempts: number;\n  } {\n    const failedAttempt = this.failedAttempts.get(identifier);\n    if (!failedAttempt) {\n      return { locked: false, attempts: 0 };\n    }\n\n    const now = Date.now();\n    const locked = failedAttempt.lockedUntil ? failedAttempt.lockedUntil > now : false;\n\n    return {\n      locked,\n      lockedUntil: failedAttempt.lockedUntil,\n      attempts: failedAttempt.count,\n    };\n  }\n\n  /**\n   * Clear account lockout\n   */\n  clearLockout(identifier: string): boolean {\n    return this.failedAttempts.delete(identifier);\n  }\n\n  /**\n   * Create authentication session\n   */\n  private async createSession(\n    user: AuthenticatedUser,\n    context: RequestContext\n  ): Promise<AuthSession> {\n    const sessionId = this.generateSessionId();\n    const now = Date.now();\n\n    // Check concurrent session limit\n    const activeSessions = this.getActiveSessions(user.id);\n    if (activeSessions.length >= this.config.session.maxConcurrent) {\n      // Remove oldest session\n      const oldestSession = activeSessions.sort((a, b) => a.createdAt - b.createdAt)[0];\n      this.sessions.delete(oldestSession.sessionId);\n    }\n\n    const session: AuthSession = {\n      sessionId,\n      userId: user.id,\n      createdAt: now,\n      lastActivity: now,\n      expiresAt: now + this.config.session.timeout,\n      client: {\n        ip: context.headers?.['x-forwarded-for'] || context.headers?.['x-real-ip'],\n        userAgent: context.headers?.['user-agent'],\n        fingerprint: this.generateClientFingerprint(context),\n      },\n      metadata: context.metadata,\n      security: {\n        requiresMfa: false,\n        mfaCompleted: false,\n        elevated: false,\n        lastSecurityCheck: now,\n      },\n    };\n\n    this.sessions.set(sessionId, session);\n\n    if (this.config.audit.logSessions) {\n      this.logSecurityEvent({\n        type: 'login',\n        userId: user.id,\n        sessionId,\n        details: { action: 'session-created' },\n        severity: 'low',\n        suspicious: false,\n      });\n    }\n\n    return session;\n  }\n\n  /**\n   * Check if session is valid\n   */\n  private isSessionValid(session: AuthSession): boolean {\n    const now = Date.now();\n    return session.expiresAt > now;\n  }\n\n  /**\n   * Get user from session\n   */\n  private async getUserFromSession(session: AuthSession): Promise<AuthenticatedUser | null> {\n    // This would typically fetch user data from the base auth provider\n    // For now, we'll create a basic user object\n    return {\n      id: session.userId,\n      name: 'Session User',\n      roles: ['user'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n    };\n  }\n\n  /**\n   * Check if user requires MFA\n   */\n  private requiresMfa(user: AuthenticatedUser): boolean {\n    // Check if user has elevated permissions that require MFA\n    return user.permissions.users || user.permissions.audit || user.roles.includes('admin');\n  }\n\n  /**\n   * Track failed authentication attempt\n   */\n  private trackFailedAttempt(identifier: string): void {\n    const now = Date.now();\n    const attempt = this.failedAttempts.get(identifier) || { count: 0, lastAttempt: 0 };\n\n    attempt.count++;\n    attempt.lastAttempt = now;\n\n    if (attempt.count >= this.config.security.maxFailedAttempts) {\n      attempt.lockedUntil = now + this.config.security.lockoutDuration;\n    }\n\n    this.failedAttempts.set(identifier, attempt);\n  }\n\n  /**\n   * Check for account lockout\n   */\n  private checkLockout(identifier: string): number | null {\n    const attempt = this.failedAttempts.get(identifier);\n    if (!attempt || !attempt.lockedUntil) {\n      return null;\n    }\n\n    const now = Date.now();\n    if (attempt.lockedUntil > now) {\n      return attempt.lockedUntil;\n    }\n\n    // Lockout period has expired, clear it\n    this.failedAttempts.delete(identifier);\n    return null;\n  }\n\n  /**\n   * Check rate limit\n   */\n  private checkRateLimit(identifier: string): RateLimit {\n    const now = Date.now();\n    const existing = this.rateLimits.get(identifier);\n\n    if (!existing || existing.windowEnd <= now) {\n      // Create new rate limit window\n      const rateLimit: RateLimit = {\n        identifier,\n        requests: 1,\n        windowStart: now,\n        windowEnd: now + this.config.security.rateLimitWindow,\n        exceeded: false,\n      };\n      this.rateLimits.set(identifier, rateLimit);\n      return rateLimit;\n    }\n\n    // Increment request count\n    existing.requests++;\n    existing.exceeded = existing.requests > this.config.security.maxRequestsPerWindow;\n\n    return existing;\n  }\n\n  /**\n   * Log security event\n   */\n  private logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp' | 'client'>): void {\n    if (!this.config.audit.enabled) {\n      return;\n    }\n\n    const shouldLog =\n      (event.type === 'login' && (this.config.audit.logSuccess || this.config.audit.logFailures)) ||\n      (event.type === 'logout' && this.config.audit.logSessions) ||\n      (event.type === 'mfa' && this.config.audit.logSecurity) ||\n      event.severity === 'high' ||\n      event.severity === 'critical';\n\n    if (!shouldLog) {\n      return;\n    }\n\n    const securityEvent: SecurityEvent = {\n      ...event,\n      id: this.generateEventId(),\n      timestamp: Date.now(),\n      client: event.details?.client as SecurityEvent['client'],\n    };\n\n    this.securityEvents.push(securityEvent);\n\n    // Emit event for external listeners\n    this.emit('securityEvent', securityEvent);\n\n    // Keep only last 1000 events in memory\n    if (this.securityEvents.length > 1000) {\n      this.securityEvents = this.securityEvents.slice(-1000);\n    }\n  }\n\n  /**\n   * Extract session ID from context\n   */\n  private extractSessionId(context: RequestContext): string | null {\n    return (\n      context.headers?.['x-session-id'] ||\n      context.headers?.['authorization']?.replace(/^Session\\s+/, '') ||\n      null\n    );\n  }\n\n  /**\n   * Get client identifier for rate limiting\n   */\n  private getClientIdentifier(context: RequestContext): string {\n    return (\n      context.headers?.['x-forwarded-for'] ||\n      context.headers?.['x-real-ip'] ||\n      context.clientId ||\n      'unknown'\n    );\n  }\n\n  /**\n   * Generate client fingerprint\n   */\n  private generateClientFingerprint(context: RequestContext): string {\n    const components = [\n      context.headers?.['user-agent'],\n      context.headers?.['accept-language'],\n      context.headers?.['accept-encoding'],\n    ].filter(Boolean);\n\n    return crypto.createHash('sha256').update(components.join('|')).digest('hex');\n  }\n\n  /**\n   * Generate session ID\n   */\n  private generateSessionId(): string {\n    return `sess_${Date.now()}_${crypto.randomBytes(16).toString('hex')}`;\n  }\n\n  /**\n   * Generate MFA challenge ID\n   */\n  private generateChallengeId(): string {\n    return `mfa_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate security event ID\n   */\n  private generateEventId(): string {\n    return `evt_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate MFA code\n   */\n  private generateMfaCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  /**\n   * Verify TOTP code (placeholder implementation)\n   */\n  private async verifyTotpCode(_userId: string, _code: string): Promise<boolean> {\n    // This would integrate with a TOTP library like speakeasy\n    // For now, return false as we don't have TOTP secrets stored\n    return false;\n  }\n\n  /**\n   * Verify backup code (placeholder implementation)\n   */\n  private async verifyBackupCode(_userId: string, _code: string): Promise<boolean> {\n    // This would check against stored backup codes\n    // For now, return false as we don't have backup codes stored\n    return false;\n  }\n\n  /**\n   * Setup cleanup timer for expired sessions and challenges\n   */\n  private setupCleanupTimer(): void {\n    setInterval(() => {\n      this.cleanup();\n    }, 60000); // Run every minute\n  }\n\n  /**\n   * Clean up expired sessions, challenges, and rate limits\n   */\n  private cleanup(): void {\n    const now = Date.now();\n\n    // Clean up expired sessions\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (!this.isSessionValid(session)) {\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    // Clean up expired MFA challenges\n    for (const [challengeId, challenge] of this.mfaChallenges.entries()) {\n      if (challenge.expiresAt <= now) {\n        this.mfaChallenges.delete(challengeId);\n      }\n    }\n\n    // Clean up expired rate limits\n    for (const [identifier, rateLimit] of this.rateLimits.entries()) {\n      if (rateLimit.windowEnd <= now) {\n        this.rateLimits.delete(identifier);\n      }\n    }\n\n    // Clean up old failed attempts\n    for (const [identifier, attempt] of this.failedAttempts.entries()) {\n      if (attempt.lockedUntil && attempt.lockedUntil <= now) {\n        this.failedAttempts.delete(identifier);\n      }\n    }\n  }\n}\n\n/**\n * Create enhanced authentication provider\n */\nexport function createEnhancedAuth(\n  baseAuthProvider: AuthProvider,\n  config?: Partial<EnhancedAuthConfig>\n): EnhancedAuthProvider {\n  return new EnhancedAuthProvider(baseAuthProvider, config);\n}\n\n/**\n * Environment variable configuration for enhanced authentication\n */\nexport const ENHANCED_AUTH_ENV_CONFIG = {\n  /** Enable MFA */\n  MFA_ENABLED: 'N8N_MCP_MFA_ENABLED',\n\n  /** Session timeout in seconds */\n  SESSION_TIMEOUT: 'N8N_MCP_SESSION_TIMEOUT',\n\n  /** Enable session sliding */\n  SESSION_SLIDING: 'N8N_MCP_SESSION_SLIDING',\n\n  /** Maximum concurrent sessions */\n  MAX_CONCURRENT_SESSIONS: 'N8N_MCP_MAX_CONCURRENT_SESSIONS',\n\n  /** Enable token rotation */\n  TOKEN_ROTATION_ENABLED: 'N8N_MCP_TOKEN_ROTATION_ENABLED',\n\n  /** Token rotation interval in seconds */\n  TOKEN_ROTATION_INTERVAL: 'N8N_MCP_TOKEN_ROTATION_INTERVAL',\n\n  /** Maximum failed attempts */\n  MAX_FAILED_ATTEMPTS: 'N8N_MCP_MAX_FAILED_ATTEMPTS',\n\n  /** Lockout duration in seconds */\n  LOCKOUT_DURATION: 'N8N_MCP_LOCKOUT_DURATION',\n\n  /** Enable rate limiting */\n  RATE_LIMITING_ENABLED: 'N8N_MCP_RATE_LIMITING_ENABLED',\n\n  /** Rate limit window in seconds */\n  RATE_LIMIT_WINDOW: 'N8N_MCP_RATE_LIMIT_WINDOW',\n\n  /** Max requests per window */\n  MAX_REQUESTS_PER_WINDOW: 'N8N_MCP_MAX_REQUESTS_PER_WINDOW',\n} as const;\n\n/**\n * Parse enhanced authentication configuration from environment\n */\nexport function parseEnhancedAuthConfigFromEnv(): Partial<EnhancedAuthConfig> {\n  return {\n    mfaEnabled: process.env[ENHANCED_AUTH_ENV_CONFIG.MFA_ENABLED] === 'true',\n    session: {\n      timeout: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT]!) * 1000\n        : 24 * 60 * 60 * 1000,\n      sliding: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_SLIDING] !== 'false',\n      maxConcurrent: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS]!)\n        : 5,\n      storage: 'memory' as const,\n    },\n    tokenRotation: {\n      enabled: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_ENABLED] === 'true',\n      interval: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL]!) * 1000\n        : 60 * 60 * 1000,\n      gracePeriod: 5 * 60 * 1000,\n    },\n    security: {\n      trackFailedAttempts: true,\n      maxFailedAttempts: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS]!)\n        : 5,\n      lockoutDuration: process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION]!) * 1000\n        : 15 * 60 * 1000,\n      rateLimiting: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMITING_ENABLED] !== 'false',\n      rateLimitWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW]!) * 1000\n        : 60 * 1000,\n      maxRequestsPerWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW]!)\n        : 60,\n    },\n    audit: {\n      enabled: true,\n      logSuccess: true,\n      logFailures: true,\n      logSessions: true,\n      logSecurity: true,\n    },\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b3af94a7f4c34e720f0d4aaa40287fa0d652750f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_12tiuhqsm7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_12tiuhqsm7();
/**
 * Enhanced Authentication Flows for n8n MCP Server
 *
 * Provides advanced authentication capabilities including multi-factor authentication,
 * session management, token rotation, and security monitoring.
 */
import * as crypto from 'crypto';
import { EventEmitter } from 'events';
import { setInterval } from 'timers';
/**
 * Enhanced Authentication Provider
 *
 * Provides advanced authentication features with security monitoring,
 * session management, and multi-factor authentication.
 */
export class EnhancedAuthProvider extends EventEmitter {
  config;
  sessions =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().s[0]++, new Map());
  mfaChallenges =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().s[1]++, new Map());
  securityEvents =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().s[2]++, []);
  failedAttempts =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().s[3]++, new Map());
  rateLimits =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().s[4]++, new Map());
  baseAuthProvider;
  oauth2Handler;
  constructor(baseAuthProvider, config =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[0]++;
    cov_12tiuhqsm7().s[5]++;
    super();
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[6]++;
    this.baseAuthProvider = baseAuthProvider;
    // Set defaults
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[7]++;
    this.config = {
      mfaEnabled: false,
      session: {
        timeout: 24 * 60 * 60 * 1000,
        // 24 hours
        sliding: true,
        maxConcurrent: 5,
        storage: 'memory'
      },
      tokenRotation: {
        enabled: false,
        interval: 60 * 60 * 1000,
        // 1 hour
        gracePeriod: 5 * 60 * 1000 // 5 minutes
      },
      security: {
        trackFailedAttempts: true,
        maxFailedAttempts: 5,
        lockoutDuration: 15 * 60 * 1000,
        // 15 minutes
        rateLimiting: true,
        rateLimitWindow: 60 * 1000,
        // 1 minute
        maxRequestsPerWindow: 60
      },
      audit: {
        enabled: true,
        logSuccess: true,
        logFailures: true,
        logSessions: true,
        logSecurity: true
      },
      ...config
    };
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[8]++;
    this.setupCleanupTimer();
  }
  /**
   * Set OAuth2 handler for enhanced OAuth2 support
   */
  setOAuth2Handler(handler) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[1]++;
    cov_12tiuhqsm7().s[9]++;
    this.oauth2Handler = handler;
  }
  /**
   * Authenticate client request with enhanced security
   */
  async authenticate(context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[2]++;
    const clientId =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[10]++, this.getClientIdentifier(context));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[11]++;
    try {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[12]++;
      // Check rate limiting
      if (this.config.security.rateLimiting) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[1][0]++;
        const rateLimit =
        /* istanbul ignore next */
        (cov_12tiuhqsm7().s[13]++, this.checkRateLimit(clientId));
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[14]++;
        if (rateLimit.exceeded) {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[2][0]++;
          cov_12tiuhqsm7().s[15]++;
          this.logSecurityEvent({
            type: 'suspicious-activity',
            details: {
              reason: 'rate-limit-exceeded',
              identifier: clientId
            },
            severity: 'medium',
            suspicious: true
          });
          /* istanbul ignore next */
          cov_12tiuhqsm7().s[16]++;
          return {
            success: false,
            error: 'Rate limit exceeded. Please try again later.'
          };
        } else
        /* istanbul ignore next */
        {
          cov_12tiuhqsm7().b[2][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[1][1]++;
      }
      // Check for account lockout
      cov_12tiuhqsm7().s[17]++;
      if (this.config.security.trackFailedAttempts) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[3][0]++;
        const lockout =
        /* istanbul ignore next */
        (cov_12tiuhqsm7().s[18]++, this.checkLockout(clientId));
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[19]++;
        if (lockout) {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[4][0]++;
          cov_12tiuhqsm7().s[20]++;
          this.logSecurityEvent({
            type: 'lockout',
            details: {
              reason: 'account-locked',
              identifier: clientId,
              lockedUntil: lockout
            },
            severity: 'high',
            suspicious: true
          });
          /* istanbul ignore next */
          cov_12tiuhqsm7().s[21]++;
          return {
            success: false,
            error: `Account locked due to too many failed attempts. Try again after ${new Date(lockout).toLocaleString()}.`
          };
        } else
        /* istanbul ignore next */
        {
          cov_12tiuhqsm7().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[3][1]++;
      }
      // Check for existing session
      const existingSessionId =
      /* istanbul ignore next */
      (cov_12tiuhqsm7().s[22]++, this.extractSessionId(context));
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[23]++;
      if (existingSessionId) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[5][0]++;
        const session =
        /* istanbul ignore next */
        (cov_12tiuhqsm7().s[24]++, this.sessions.get(existingSessionId));
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[25]++;
        if (
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[7][0]++, session) &&
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[7][1]++, this.isSessionValid(session))) {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[6][0]++;
          cov_12tiuhqsm7().s[26]++;
          // Update session activity
          if (this.config.session.sliding) {
            /* istanbul ignore next */
            cov_12tiuhqsm7().b[8][0]++;
            cov_12tiuhqsm7().s[27]++;
            session.lastActivity = Date.now();
            /* istanbul ignore next */
            cov_12tiuhqsm7().s[28]++;
            session.expiresAt = Date.now() + this.config.session.timeout;
          } else
          /* istanbul ignore next */
          {
            cov_12tiuhqsm7().b[8][1]++;
          }
          const user =
          /* istanbul ignore next */
          (cov_12tiuhqsm7().s[29]++, await this.getUserFromSession(session));
          /* istanbul ignore next */
          cov_12tiuhqsm7().s[30]++;
          if (user) {
            /* istanbul ignore next */
            cov_12tiuhqsm7().b[9][0]++;
            cov_12tiuhqsm7().s[31]++;
            return {
              success: true,
              user,
              context: {
                sessionId: session.sessionId,
                authType: 'session',
                requiresMfa:
                /* istanbul ignore next */
                (cov_12tiuhqsm7().b[10][0]++, session.security.requiresMfa) &&
                /* istanbul ignore next */
                (cov_12tiuhqsm7().b[10][1]++, !session.security.mfaCompleted)
              }
            };
          } else
          /* istanbul ignore next */
          {
            cov_12tiuhqsm7().b[9][1]++;
          }
        } else {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[6][1]++;
          cov_12tiuhqsm7().s[32]++;
          if (session) {
            /* istanbul ignore next */
            cov_12tiuhqsm7().b[11][0]++;
            cov_12tiuhqsm7().s[33]++;
            // Remove invalid session
            this.sessions.delete(existingSessionId);
          } else
          /* istanbul ignore next */
          {
            cov_12tiuhqsm7().b[11][1]++;
          }
        }
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[5][1]++;
      }
      // Perform base authentication
      const baseResult =
      /* istanbul ignore next */
      (cov_12tiuhqsm7().s[34]++, await this.baseAuthProvider.authenticate(context));
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[35]++;
      if (!baseResult.success) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[12][0]++;
        cov_12tiuhqsm7().s[36]++;
        // Track failed attempt
        if (this.config.security.trackFailedAttempts) {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[13][0]++;
          cov_12tiuhqsm7().s[37]++;
          this.trackFailedAttempt(clientId);
        } else
        /* istanbul ignore next */
        {
          cov_12tiuhqsm7().b[13][1]++;
        }
        cov_12tiuhqsm7().s[38]++;
        this.logSecurityEvent({
          type: 'login',
          details: {
            success: false,
            error: baseResult.error,
            identifier: clientId
          },
          severity: 'low',
          suspicious: false
        });
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[39]++;
        return baseResult;
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[12][1]++;
      }
      // Create new session
      const session =
      /* istanbul ignore next */
      (cov_12tiuhqsm7().s[40]++, await this.createSession(baseResult.user, context));
      // Check if MFA is required
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[41]++;
      if (
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[15][0]++, this.config.mfaEnabled) &&
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[15][1]++, this.requiresMfa(baseResult.user))) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[14][0]++;
        cov_12tiuhqsm7().s[42]++;
        session.security.requiresMfa = true;
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[43]++;
        session.security.mfaCompleted = false;
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[44]++;
        this.logSecurityEvent({
          type: 'login',
          userId: baseResult.user.id,
          sessionId: session.sessionId,
          details: {
            success: true,
            requiresMfa: true
          },
          severity: 'low',
          suspicious: false
        });
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[45]++;
        return {
          success: true,
          user: baseResult.user,
          context: {
            sessionId: session.sessionId,
            authType: 'partial',
            requiresMfa: true,
            mfaChallengeRequired: true
          }
        };
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[14][1]++;
      }
      // Clear failed attempts on successful login
      cov_12tiuhqsm7().s[46]++;
      if (this.config.security.trackFailedAttempts) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[16][0]++;
        cov_12tiuhqsm7().s[47]++;
        this.failedAttempts.delete(clientId);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[16][1]++;
      }
      cov_12tiuhqsm7().s[48]++;
      this.logSecurityEvent({
        type: 'login',
        userId: baseResult.user.id,
        sessionId: session.sessionId,
        details: {
          success: true,
          requiresMfa: false
        },
        severity: 'low',
        suspicious: false
      });
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[49]++;
      return {
        success: true,
        user: baseResult.user,
        context: {
          sessionId: session.sessionId,
          authType: 'enhanced',
          requiresMfa: false
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[50]++;
      // Track failed attempt
      if (this.config.security.trackFailedAttempts) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[17][0]++;
        cov_12tiuhqsm7().s[51]++;
        this.trackFailedAttempt(clientId);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[17][1]++;
      }
      cov_12tiuhqsm7().s[52]++;
      this.logSecurityEvent({
        type: 'login',
        details: {
          success: false,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_12tiuhqsm7().b[18][0]++, error.message) :
          /* istanbul ignore next */
          (cov_12tiuhqsm7().b[18][1]++, 'Unknown error')
        },
        severity: 'medium',
        suspicious: true
      });
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[53]++;
      return {
        success: false,
        error: `Authentication failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[19][1]++, 'Unknown error')}`
      };
    }
  }
  /**
   * Refresh authentication
   */
  async refresh(context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[3]++;
    const sessionId =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[54]++, this.extractSessionId(context));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[55]++;
    if (!sessionId) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[20][0]++;
      cov_12tiuhqsm7().s[56]++;
      return {
        success: false,
        error: 'No session found for refresh'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[20][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[57]++, this.sessions.get(sessionId));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[58]++;
    if (
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[22][0]++, !session) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[22][1]++, !this.isSessionValid(session))) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[21][0]++;
      cov_12tiuhqsm7().s[59]++;
      return {
        success: false,
        error: 'Invalid or expired session'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[21][1]++;
    }
    // Update session activity
    cov_12tiuhqsm7().s[60]++;
    session.lastActivity = Date.now();
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[61]++;
    if (this.config.session.sliding) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[23][0]++;
      cov_12tiuhqsm7().s[62]++;
      session.expiresAt = Date.now() + this.config.session.timeout;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[23][1]++;
    }
    const user =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[63]++, await this.getUserFromSession(session));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[64]++;
    if (!user) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[24][0]++;
      cov_12tiuhqsm7().s[65]++;
      return {
        success: false,
        error: 'Unable to refresh user information'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[24][1]++;
    }
    cov_12tiuhqsm7().s[66]++;
    return {
      success: true,
      user,
      context: {
        sessionId: session.sessionId,
        authType: 'session-refresh',
        requiresMfa:
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[25][0]++, session.security.requiresMfa) &&
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[25][1]++, !session.security.mfaCompleted)
      }
    };
  }
  /**
   * Check tool access permissions
   */
  async canAccessTool(toolName, context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[4]++;
    cov_12tiuhqsm7().s[67]++;
    return this.baseAuthProvider.canAccessTool(toolName, context);
  }
  /**
   * Check resource access permissions
   */
  async canAccessResource(resourceUri, context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[5]++;
    cov_12tiuhqsm7().s[68]++;
    return this.baseAuthProvider.canAccessResource(resourceUri, context);
  }
  /**
   * Create MFA challenge
   */
  async createMfaChallenge(userId, type, sessionId) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[6]++;
    const challengeId =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[69]++, this.generateChallengeId());
    const challenge =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[70]++, {
      challengeId,
      userId,
      type,
      createdAt: Date.now(),
      expiresAt: Date.now() + 5 * 60 * 1000,
      // 5 minutes
      attempts: 0,
      maxAttempts: 3
    });
    // Generate challenge-specific data
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[71]++;
    switch (type) {
      case 'totp':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[26][0]++;
        cov_12tiuhqsm7().s[72]++;
        // TOTP challenges don't need additional data
        break;
      case 'sms':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[26][1]++;
      case 'email':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[26][2]++;
        cov_12tiuhqsm7().s[73]++;
        challenge.data = {
          code: this.generateMfaCode()
        };
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[74]++;
        break;
      case 'backup-code':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[26][3]++;
        cov_12tiuhqsm7().s[75]++;
        // Backup codes are pre-generated
        break;
    }
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[76]++;
    this.mfaChallenges.set(challengeId, challenge);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[77]++;
    this.logSecurityEvent({
      type: 'mfa',
      userId,
      sessionId,
      details: {
        action: 'challenge-created',
        type,
        challengeId
      },
      severity: 'low',
      suspicious: false
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[78]++;
    return challenge;
  }
  /**
   * Verify MFA challenge
   */
  async verifyMfaChallenge(challengeId, response, sessionId) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[7]++;
    const challenge =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[79]++, this.mfaChallenges.get(challengeId));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[80]++;
    if (!challenge) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[27][0]++;
      cov_12tiuhqsm7().s[81]++;
      return {
        success: false,
        error: 'Invalid or expired MFA challenge'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[27][1]++;
    }
    cov_12tiuhqsm7().s[82]++;
    if (challenge.expiresAt < Date.now()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[28][0]++;
      cov_12tiuhqsm7().s[83]++;
      this.mfaChallenges.delete(challengeId);
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[84]++;
      return {
        success: false,
        error: 'MFA challenge has expired'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[28][1]++;
    }
    cov_12tiuhqsm7().s[85]++;
    if (challenge.attempts >= challenge.maxAttempts) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[29][0]++;
      cov_12tiuhqsm7().s[86]++;
      this.mfaChallenges.delete(challengeId);
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[87]++;
      this.logSecurityEvent({
        type: 'mfa',
        userId: challenge.userId,
        sessionId,
        details: {
          action: 'max-attempts-exceeded',
          challengeId
        },
        severity: 'medium',
        suspicious: true
      });
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[88]++;
      return {
        success: false,
        error: 'Maximum MFA attempts exceeded'
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[29][1]++;
    }
    cov_12tiuhqsm7().s[89]++;
    challenge.attempts++;
    // Verify response based on challenge type
    let isValid =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[90]++, false);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[91]++;
    switch (challenge.type) {
      case 'totp':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[30][0]++;
        cov_12tiuhqsm7().s[92]++;
        isValid = await this.verifyTotpCode(challenge.userId, response);
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[93]++;
        break;
      case 'sms':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[30][1]++;
      case 'email':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[30][2]++;
        cov_12tiuhqsm7().s[94]++;
        isValid = challenge.data?.code === response;
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[95]++;
        break;
      case 'backup-code':
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[30][3]++;
        cov_12tiuhqsm7().s[96]++;
        isValid = await this.verifyBackupCode(challenge.userId, response);
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[97]++;
        break;
    }
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[98]++;
    if (isValid) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[31][0]++;
      cov_12tiuhqsm7().s[99]++;
      this.mfaChallenges.delete(challengeId);
      // Update session if provided
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[100]++;
      if (sessionId) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[32][0]++;
        const session =
        /* istanbul ignore next */
        (cov_12tiuhqsm7().s[101]++, this.sessions.get(sessionId));
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[102]++;
        if (session) {
          /* istanbul ignore next */
          cov_12tiuhqsm7().b[33][0]++;
          cov_12tiuhqsm7().s[103]++;
          session.security.mfaCompleted = true;
        } else
        /* istanbul ignore next */
        {
          cov_12tiuhqsm7().b[33][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[32][1]++;
      }
      cov_12tiuhqsm7().s[104]++;
      this.logSecurityEvent({
        type: 'mfa',
        userId: challenge.userId,
        sessionId,
        details: {
          action: 'challenge-verified',
          type: challenge.type,
          challengeId
        },
        severity: 'low',
        suspicious: false
      });
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[105]++;
      return {
        success: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[31][1]++;
    }
    cov_12tiuhqsm7().s[106]++;
    this.logSecurityEvent({
      type: 'mfa',
      userId: challenge.userId,
      sessionId,
      details: {
        action: 'challenge-failed',
        type: challenge.type,
        challengeId,
        attempts: challenge.attempts
      },
      severity: 'low',
      suspicious: challenge.attempts > 1
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[107]++;
    return {
      success: false,
      error: 'Invalid MFA code'
    };
  }
  /**
   * Logout user and invalidate session
   */
  async logout(sessionId) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[8]++;
    const session =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[108]++, this.sessions.get(sessionId));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[109]++;
    if (!session) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[34][0]++;
      cov_12tiuhqsm7().s[110]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[34][1]++;
    }
    cov_12tiuhqsm7().s[111]++;
    this.sessions.delete(sessionId);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[112]++;
    this.logSecurityEvent({
      type: 'logout',
      userId: session.userId,
      sessionId,
      details: {
        action: 'explicit-logout'
      },
      severity: 'low',
      suspicious: false
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[113]++;
    return true;
  }
  /**
   * Get active sessions for user
   */
  getActiveSessions(userId) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[9]++;
    const sessions =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[114]++, []);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[115]++;
    for (const session of this.sessions.values()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[36][0]++, session.userId === userId) &&
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[36][1]++, this.isSessionValid(session))) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[35][0]++;
        cov_12tiuhqsm7().s[117]++;
        sessions.push(session);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[35][1]++;
      }
    }
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[118]++;
    return sessions;
  }
  /**
   * Terminate all sessions for user
   */
  terminateAllSessions(userId) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[10]++;
    let terminated =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[119]++, 0);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[120]++;
    for (const [sessionId, session] of this.sessions.entries()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[121]++;
      if (session.userId === userId) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[37][0]++;
        cov_12tiuhqsm7().s[122]++;
        this.sessions.delete(sessionId);
        /* istanbul ignore next */
        cov_12tiuhqsm7().s[123]++;
        terminated++;
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[37][1]++;
      }
    }
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[124]++;
    if (terminated > 0) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[38][0]++;
      cov_12tiuhqsm7().s[125]++;
      this.logSecurityEvent({
        type: 'logout',
        userId,
        details: {
          action: 'terminate-all-sessions',
          count: terminated
        },
        severity: 'medium',
        suspicious: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[38][1]++;
    }
    cov_12tiuhqsm7().s[126]++;
    return terminated;
  }
  /**
   * Get security events
   */
  getSecurityEvents(options =
  /* istanbul ignore next */
  (cov_12tiuhqsm7().b[39][0]++, {})) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[11]++;
    let events =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[127]++, [...this.securityEvents]);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[128]++;
    if (options.userId) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[40][0]++;
      cov_12tiuhqsm7().s[129]++;
      events = events.filter(e => {
        /* istanbul ignore next */
        cov_12tiuhqsm7().f[12]++;
        cov_12tiuhqsm7().s[130]++;
        return e.userId === options.userId;
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[40][1]++;
    }
    cov_12tiuhqsm7().s[131]++;
    if (options.type) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[41][0]++;
      cov_12tiuhqsm7().s[132]++;
      events = events.filter(e => {
        /* istanbul ignore next */
        cov_12tiuhqsm7().f[13]++;
        cov_12tiuhqsm7().s[133]++;
        return e.type === options.type;
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[41][1]++;
    }
    cov_12tiuhqsm7().s[134]++;
    if (options.severity) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[42][0]++;
      cov_12tiuhqsm7().s[135]++;
      events = events.filter(e => {
        /* istanbul ignore next */
        cov_12tiuhqsm7().f[14]++;
        cov_12tiuhqsm7().s[136]++;
        return e.severity === options.severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[42][1]++;
    }
    cov_12tiuhqsm7().s[137]++;
    if (options.since) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[43][0]++;
      cov_12tiuhqsm7().s[138]++;
      events = events.filter(e => {
        /* istanbul ignore next */
        cov_12tiuhqsm7().f[15]++;
        cov_12tiuhqsm7().s[139]++;
        return e.timestamp >= options.since;
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[43][1]++;
    }
    // Sort by timestamp (newest first)
    cov_12tiuhqsm7().s[140]++;
    events.sort((a, b) => {
      /* istanbul ignore next */
      cov_12tiuhqsm7().f[16]++;
      cov_12tiuhqsm7().s[141]++;
      return b.timestamp - a.timestamp;
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[142]++;
    if (options.limit) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[44][0]++;
      cov_12tiuhqsm7().s[143]++;
      events = events.slice(0, options.limit);
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[44][1]++;
    }
    cov_12tiuhqsm7().s[144]++;
    return events;
  }
  /**
   * Get account lockout status
   */
  getLockoutStatus(identifier) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[17]++;
    const failedAttempt =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[145]++, this.failedAttempts.get(identifier));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[146]++;
    if (!failedAttempt) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[45][0]++;
      cov_12tiuhqsm7().s[147]++;
      return {
        locked: false,
        attempts: 0
      };
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[45][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[148]++, Date.now());
    const locked =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[149]++, failedAttempt.lockedUntil ?
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[46][0]++, failedAttempt.lockedUntil > now) :
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[46][1]++, false));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[150]++;
    return {
      locked,
      lockedUntil: failedAttempt.lockedUntil,
      attempts: failedAttempt.count
    };
  }
  /**
   * Clear account lockout
   */
  clearLockout(identifier) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[18]++;
    cov_12tiuhqsm7().s[151]++;
    return this.failedAttempts.delete(identifier);
  }
  /**
   * Create authentication session
   */
  async createSession(user, context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[19]++;
    const sessionId =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[152]++, this.generateSessionId());
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[153]++, Date.now());
    // Check concurrent session limit
    const activeSessions =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[154]++, this.getActiveSessions(user.id));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[155]++;
    if (activeSessions.length >= this.config.session.maxConcurrent) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[47][0]++;
      // Remove oldest session
      const oldestSession =
      /* istanbul ignore next */
      (cov_12tiuhqsm7().s[156]++, activeSessions.sort((a, b) => {
        /* istanbul ignore next */
        cov_12tiuhqsm7().f[20]++;
        cov_12tiuhqsm7().s[157]++;
        return a.createdAt - b.createdAt;
      })[0]);
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[158]++;
      this.sessions.delete(oldestSession.sessionId);
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[47][1]++;
    }
    const session =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[159]++, {
      sessionId,
      userId: user.id,
      createdAt: now,
      lastActivity: now,
      expiresAt: now + this.config.session.timeout,
      client: {
        ip:
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[48][0]++, context.headers?.['x-forwarded-for']) ||
        /* istanbul ignore next */
        (cov_12tiuhqsm7().b[48][1]++, context.headers?.['x-real-ip']),
        userAgent: context.headers?.['user-agent'],
        fingerprint: this.generateClientFingerprint(context)
      },
      metadata: context.metadata,
      security: {
        requiresMfa: false,
        mfaCompleted: false,
        elevated: false,
        lastSecurityCheck: now
      }
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[160]++;
    this.sessions.set(sessionId, session);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[161]++;
    if (this.config.audit.logSessions) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[49][0]++;
      cov_12tiuhqsm7().s[162]++;
      this.logSecurityEvent({
        type: 'login',
        userId: user.id,
        sessionId,
        details: {
          action: 'session-created'
        },
        severity: 'low',
        suspicious: false
      });
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[49][1]++;
    }
    cov_12tiuhqsm7().s[163]++;
    return session;
  }
  /**
   * Check if session is valid
   */
  isSessionValid(session) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[21]++;
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[164]++, Date.now());
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[165]++;
    return session.expiresAt > now;
  }
  /**
   * Get user from session
   */
  async getUserFromSession(session) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[22]++;
    cov_12tiuhqsm7().s[166]++;
    // This would typically fetch user data from the base auth provider
    // For now, we'll create a basic user object
    return {
      id: session.userId,
      name: 'Session User',
      roles: ['user'],
      permissions: {
        community: true,
        enterprise: false,
        workflows: true,
        executions: true,
        credentials: false,
        users: false,
        audit: false
      }
    };
  }
  /**
   * Check if user requires MFA
   */
  requiresMfa(user) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[23]++;
    cov_12tiuhqsm7().s[167]++;
    // Check if user has elevated permissions that require MFA
    return /* istanbul ignore next */(cov_12tiuhqsm7().b[50][0]++, user.permissions.users) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[50][1]++, user.permissions.audit) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[50][2]++, user.roles.includes('admin'));
  }
  /**
   * Track failed authentication attempt
   */
  trackFailedAttempt(identifier) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[24]++;
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[168]++, Date.now());
    const attempt =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[169]++,
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[51][0]++, this.failedAttempts.get(identifier)) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[51][1]++, {
      count: 0,
      lastAttempt: 0
    }));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[170]++;
    attempt.count++;
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[171]++;
    attempt.lastAttempt = now;
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[172]++;
    if (attempt.count >= this.config.security.maxFailedAttempts) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[52][0]++;
      cov_12tiuhqsm7().s[173]++;
      attempt.lockedUntil = now + this.config.security.lockoutDuration;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[52][1]++;
    }
    cov_12tiuhqsm7().s[174]++;
    this.failedAttempts.set(identifier, attempt);
  }
  /**
   * Check for account lockout
   */
  checkLockout(identifier) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[25]++;
    const attempt =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[175]++, this.failedAttempts.get(identifier));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[176]++;
    if (
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[54][0]++, !attempt) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[54][1]++, !attempt.lockedUntil)) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[53][0]++;
      cov_12tiuhqsm7().s[177]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[53][1]++;
    }
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[178]++, Date.now());
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[179]++;
    if (attempt.lockedUntil > now) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[55][0]++;
      cov_12tiuhqsm7().s[180]++;
      return attempt.lockedUntil;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[55][1]++;
    }
    // Lockout period has expired, clear it
    cov_12tiuhqsm7().s[181]++;
    this.failedAttempts.delete(identifier);
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[182]++;
    return null;
  }
  /**
   * Check rate limit
   */
  checkRateLimit(identifier) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[26]++;
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[183]++, Date.now());
    const existing =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[184]++, this.rateLimits.get(identifier));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[185]++;
    if (
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[57][0]++, !existing) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[57][1]++, existing.windowEnd <= now)) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[56][0]++;
      // Create new rate limit window
      const rateLimit =
      /* istanbul ignore next */
      (cov_12tiuhqsm7().s[186]++, {
        identifier,
        requests: 1,
        windowStart: now,
        windowEnd: now + this.config.security.rateLimitWindow,
        exceeded: false
      });
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[187]++;
      this.rateLimits.set(identifier, rateLimit);
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[188]++;
      return rateLimit;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[56][1]++;
    }
    // Increment request count
    cov_12tiuhqsm7().s[189]++;
    existing.requests++;
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[190]++;
    existing.exceeded = existing.requests > this.config.security.maxRequestsPerWindow;
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[191]++;
    return existing;
  }
  /**
   * Log security event
   */
  logSecurityEvent(event) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[27]++;
    cov_12tiuhqsm7().s[192]++;
    if (!this.config.audit.enabled) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[58][0]++;
      cov_12tiuhqsm7().s[193]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[58][1]++;
    }
    const shouldLog =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[194]++,
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][0]++, event.type === 'login') && (
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][1]++, this.config.audit.logSuccess) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][2]++, this.config.audit.logFailures)) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][3]++, event.type === 'logout') &&
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][4]++, this.config.audit.logSessions) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][5]++, event.type === 'mfa') &&
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][6]++, this.config.audit.logSecurity) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][7]++, event.severity === 'high') ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[59][8]++, event.severity === 'critical'));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[195]++;
    if (!shouldLog) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[60][0]++;
      cov_12tiuhqsm7().s[196]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[60][1]++;
    }
    const securityEvent =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[197]++, {
      ...event,
      id: this.generateEventId(),
      timestamp: Date.now(),
      client: event.details?.client
    });
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[198]++;
    this.securityEvents.push(securityEvent);
    // Emit event for external listeners
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[199]++;
    this.emit('securityEvent', securityEvent);
    // Keep only last 1000 events in memory
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[200]++;
    if (this.securityEvents.length > 1000) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().b[61][0]++;
      cov_12tiuhqsm7().s[201]++;
      this.securityEvents = this.securityEvents.slice(-1000);
    } else
    /* istanbul ignore next */
    {
      cov_12tiuhqsm7().b[61][1]++;
    }
  }
  /**
   * Extract session ID from context
   */
  extractSessionId(context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[28]++;
    cov_12tiuhqsm7().s[202]++;
    return /* istanbul ignore next */(cov_12tiuhqsm7().b[62][0]++, context.headers?.['x-session-id']) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[62][1]++, context.headers?.['authorization']?.replace(/^Session\s+/, '')) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[62][2]++, null);
  }
  /**
   * Get client identifier for rate limiting
   */
  getClientIdentifier(context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[29]++;
    cov_12tiuhqsm7().s[203]++;
    return /* istanbul ignore next */(cov_12tiuhqsm7().b[63][0]++, context.headers?.['x-forwarded-for']) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[63][1]++, context.headers?.['x-real-ip']) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[63][2]++, context.clientId) ||
    /* istanbul ignore next */
    (cov_12tiuhqsm7().b[63][3]++, 'unknown');
  }
  /**
   * Generate client fingerprint
   */
  generateClientFingerprint(context) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[30]++;
    const components =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[204]++, [context.headers?.['user-agent'], context.headers?.['accept-language'], context.headers?.['accept-encoding']].filter(Boolean));
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[205]++;
    return crypto.createHash('sha256').update(components.join('|')).digest('hex');
  }
  /**
   * Generate session ID
   */
  generateSessionId() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[31]++;
    cov_12tiuhqsm7().s[206]++;
    return `sess_${Date.now()}_${crypto.randomBytes(16).toString('hex')}`;
  }
  /**
   * Generate MFA challenge ID
   */
  generateChallengeId() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[32]++;
    cov_12tiuhqsm7().s[207]++;
    return `mfa_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;
  }
  /**
   * Generate security event ID
   */
  generateEventId() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[33]++;
    cov_12tiuhqsm7().s[208]++;
    return `evt_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;
  }
  /**
   * Generate MFA code
   */
  generateMfaCode() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[34]++;
    cov_12tiuhqsm7().s[209]++;
    return Math.floor(100000 + Math.random() * 900000).toString();
  }
  /**
   * Verify TOTP code (placeholder implementation)
   */
  async verifyTotpCode(_userId, _code) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[35]++;
    cov_12tiuhqsm7().s[210]++;
    // This would integrate with a TOTP library like speakeasy
    // For now, return false as we don't have TOTP secrets stored
    return false;
  }
  /**
   * Verify backup code (placeholder implementation)
   */
  async verifyBackupCode(_userId, _code) {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[36]++;
    cov_12tiuhqsm7().s[211]++;
    // This would check against stored backup codes
    // For now, return false as we don't have backup codes stored
    return false;
  }
  /**
   * Setup cleanup timer for expired sessions and challenges
   */
  setupCleanupTimer() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[37]++;
    cov_12tiuhqsm7().s[212]++;
    setInterval(() => {
      /* istanbul ignore next */
      cov_12tiuhqsm7().f[38]++;
      cov_12tiuhqsm7().s[213]++;
      this.cleanup();
    }, 60000); // Run every minute
  }
  /**
   * Clean up expired sessions, challenges, and rate limits
   */
  cleanup() {
    /* istanbul ignore next */
    cov_12tiuhqsm7().f[39]++;
    const now =
    /* istanbul ignore next */
    (cov_12tiuhqsm7().s[214]++, Date.now());
    // Clean up expired sessions
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[215]++;
    for (const [sessionId, session] of this.sessions.entries()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[216]++;
      if (!this.isSessionValid(session)) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[64][0]++;
        cov_12tiuhqsm7().s[217]++;
        this.sessions.delete(sessionId);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[64][1]++;
      }
    }
    // Clean up expired MFA challenges
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[218]++;
    for (const [challengeId, challenge] of this.mfaChallenges.entries()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[219]++;
      if (challenge.expiresAt <= now) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[65][0]++;
        cov_12tiuhqsm7().s[220]++;
        this.mfaChallenges.delete(challengeId);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[65][1]++;
      }
    }
    // Clean up expired rate limits
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[221]++;
    for (const [identifier, rateLimit] of this.rateLimits.entries()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[222]++;
      if (rateLimit.windowEnd <= now) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[66][0]++;
        cov_12tiuhqsm7().s[223]++;
        this.rateLimits.delete(identifier);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[66][1]++;
      }
    }
    // Clean up old failed attempts
    /* istanbul ignore next */
    cov_12tiuhqsm7().s[224]++;
    for (const [identifier, attempt] of this.failedAttempts.entries()) {
      /* istanbul ignore next */
      cov_12tiuhqsm7().s[225]++;
      if (
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[68][0]++, attempt.lockedUntil) &&
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[68][1]++, attempt.lockedUntil <= now)) {
        /* istanbul ignore next */
        cov_12tiuhqsm7().b[67][0]++;
        cov_12tiuhqsm7().s[226]++;
        this.failedAttempts.delete(identifier);
      } else
      /* istanbul ignore next */
      {
        cov_12tiuhqsm7().b[67][1]++;
      }
    }
  }
}
/**
 * Create enhanced authentication provider
 */
export function createEnhancedAuth(baseAuthProvider, config) {
  /* istanbul ignore next */
  cov_12tiuhqsm7().f[40]++;
  cov_12tiuhqsm7().s[227]++;
  return new EnhancedAuthProvider(baseAuthProvider, config);
}
/**
 * Environment variable configuration for enhanced authentication
 */
export const ENHANCED_AUTH_ENV_CONFIG =
/* istanbul ignore next */
(cov_12tiuhqsm7().s[228]++, {
  /** Enable MFA */
  MFA_ENABLED: 'N8N_MCP_MFA_ENABLED',
  /** Session timeout in seconds */
  SESSION_TIMEOUT: 'N8N_MCP_SESSION_TIMEOUT',
  /** Enable session sliding */
  SESSION_SLIDING: 'N8N_MCP_SESSION_SLIDING',
  /** Maximum concurrent sessions */
  MAX_CONCURRENT_SESSIONS: 'N8N_MCP_MAX_CONCURRENT_SESSIONS',
  /** Enable token rotation */
  TOKEN_ROTATION_ENABLED: 'N8N_MCP_TOKEN_ROTATION_ENABLED',
  /** Token rotation interval in seconds */
  TOKEN_ROTATION_INTERVAL: 'N8N_MCP_TOKEN_ROTATION_INTERVAL',
  /** Maximum failed attempts */
  MAX_FAILED_ATTEMPTS: 'N8N_MCP_MAX_FAILED_ATTEMPTS',
  /** Lockout duration in seconds */
  LOCKOUT_DURATION: 'N8N_MCP_LOCKOUT_DURATION',
  /** Enable rate limiting */
  RATE_LIMITING_ENABLED: 'N8N_MCP_RATE_LIMITING_ENABLED',
  /** Rate limit window in seconds */
  RATE_LIMIT_WINDOW: 'N8N_MCP_RATE_LIMIT_WINDOW',
  /** Max requests per window */
  MAX_REQUESTS_PER_WINDOW: 'N8N_MCP_MAX_REQUESTS_PER_WINDOW'
});
/**
 * Parse enhanced authentication configuration from environment
 */
export function parseEnhancedAuthConfigFromEnv() {
  /* istanbul ignore next */
  cov_12tiuhqsm7().f[41]++;
  cov_12tiuhqsm7().s[229]++;
  return {
    mfaEnabled: process.env[ENHANCED_AUTH_ENV_CONFIG.MFA_ENABLED] === 'true',
    session: {
      timeout: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[69][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT]) * 1000) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[69][1]++, 24 * 60 * 60 * 1000),
      sliding: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_SLIDING] !== 'false',
      maxConcurrent: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[70][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS])) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[70][1]++, 5),
      storage: 'memory'
    },
    tokenRotation: {
      enabled: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_ENABLED] === 'true',
      interval: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[71][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL]) * 1000) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[71][1]++, 60 * 60 * 1000),
      gracePeriod: 5 * 60 * 1000
    },
    security: {
      trackFailedAttempts: true,
      maxFailedAttempts: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[72][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS])) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[72][1]++, 5),
      lockoutDuration: process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[73][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION]) * 1000) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[73][1]++, 15 * 60 * 1000),
      rateLimiting: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMITING_ENABLED] !== 'false',
      rateLimitWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[74][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW]) * 1000) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[74][1]++, 60 * 1000),
      maxRequestsPerWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW] ?
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[75][0]++, parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW])) :
      /* istanbul ignore next */
      (cov_12tiuhqsm7().b[75][1]++, 60)
    },
    audit: {
      enabled: true,
      logSuccess: true,
      logFailures: true,
      logSessions: true,
      logSecurity: true
    }
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,