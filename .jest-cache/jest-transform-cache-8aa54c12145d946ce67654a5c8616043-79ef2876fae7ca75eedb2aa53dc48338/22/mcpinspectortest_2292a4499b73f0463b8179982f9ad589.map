{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/e2e/mcp-inspector.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/e2e/mcp-inspector.test.ts"],"sourcesContent":["import { describe, beforeAll, afterAll, it, expect } from '@jest/globals';\nimport { spawn, ChildProcess } from 'child_process';\nimport { setTimeout, clearTimeout } from 'timers';\nimport { MockN8nServer } from '../mocks/mockN8nServer';\nimport * as path from 'path';\n\n// Use process.cwd() + relative path for Jest compatibility\nconst testDir = path.join(process.cwd(), 'tests', 'e2e');\n\n/**\n * MCP Inspector integration tests\n * Tests the FastMCP server using MCP Inspector tool for protocol validation\n */\ndescribe('MCP Inspector Integration Tests', () => {\n  let mockN8nServer: MockN8nServer;\n  let mcpServerProcess: ChildProcess;\n  const mockServerPort = 3002;\n  const testTimeout = 15000;\n\n  beforeAll(async () => {\n    // Start mock n8n server for inspector tests\n    mockN8nServer = new MockN8nServer(mockServerPort);\n    await mockN8nServer.start();\n\n    console.log('Mock n8n server started for MCP Inspector tests');\n  }, 20000);\n\n  afterAll(async () => {\n    // Clean up mock server\n    if (mockN8nServer) {\n      await mockN8nServer.stop();\n    }\n\n    // Clean up MCP server process\n    if (mcpServerProcess) {\n      mcpServerProcess.kill('SIGTERM');\n    }\n\n    console.log('MCP Inspector test cleanup completed');\n  }, 10000);\n\n  describe('Protocol Compliance via Inspector', () => {\n    it(\n      'should pass MCP Inspector protocol validation',\n      async () => {\n        const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n        const runInspectorValidation = (): Promise<string> => {\n          return new Promise((resolve, reject) => {\n            // Start the MCP server\n            mcpServerProcess = spawn('node', [serverPath], {\n              env: {\n                ...process.env,\n                N8N_BASE_URL: mockN8nServer.getUrl(),\n                N8N_API_KEY: 'test-api-key',\n                N8N_MCP_TRANSPORT: 'stdio',\n              },\n              stdio: ['pipe', 'pipe', 'pipe'],\n            });\n\n            let outputBuffer = '';\n            let errorBuffer = '';\n            let inspectorTimeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n            const cleanup = () => {\n              if (inspectorTimeout) {\n                clearTimeout(inspectorTimeout);\n              }\n            };\n\n            mcpServerProcess.stdout?.on('data', data => {\n              outputBuffer += data.toString();\n            });\n\n            mcpServerProcess.stderr?.on('data', data => {\n              errorBuffer += data.toString();\n            });\n\n            mcpServerProcess.on('error', error => {\n              cleanup();\n              reject(new Error(`Failed to start MCP server: ${error.message}`));\n            });\n\n            // Simulate MCP Inspector protocol validation sequence\n            const performInspectorChecks = async () => {\n              try {\n                // Wait for server to be ready\n                await new Promise(resolve => {\n                  setTimeout(resolve, 2000);\n                });\n\n                // 1. Test initialization protocol\n                const initRequest = {\n                  jsonrpc: '2.0',\n                  id: 1,\n                  method: 'initialize',\n                  params: {\n                    protocolVersion: '2024-11-05',\n                    capabilities: {\n                      tools: {},\n                      resources: {},\n                    },\n                    clientInfo: {\n                      name: 'mcp-inspector',\n                      version: '1.0.0',\n                    },\n                  },\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n\n                // Wait for init response\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                // 2. Test tools/list protocol\n                const toolsListRequest = {\n                  jsonrpc: '2.0',\n                  id: 2,\n                  method: 'tools/list',\n                  params: {},\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(toolsListRequest) + '\\n');\n\n                // Wait for tools response\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                // 3. Test a tool call\n                const toolCallRequest = {\n                  jsonrpc: '2.0',\n                  id: 3,\n                  method: 'tools/call',\n                  params: {\n                    name: 'init-n8n',\n                    arguments: {\n                      baseUrl: mockN8nServer.getUrl(),\n                      apiKey: 'test-api-key',\n                    },\n                  },\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(toolCallRequest) + '\\n');\n\n                // Wait for tool call response\n                await new Promise(resolve => {\n                  setTimeout(resolve, 2000);\n                });\n\n                cleanup();\n                resolve(outputBuffer);\n              } catch (error) {\n                cleanup();\n                reject(error);\n              }\n            };\n\n            // Set timeout for inspector validation\n            inspectorTimeout = setTimeout(() => {\n              cleanup();\n              reject(new Error('MCP Inspector validation timeout'));\n            }, testTimeout - 2000);\n\n            // Start inspector checks after brief delay\n            setTimeout(performInspectorChecks, 500);\n          });\n        };\n\n        const inspectorOutput = await runInspectorValidation();\n\n        // Verify inspector found valid MCP protocol responses\n        expect(inspectorOutput).toBeDefined();\n        expect(inspectorOutput.length).toBeGreaterThan(0);\n\n        // Check for JSON-RPC responses in output\n        const lines = inspectorOutput.split('\\n').filter(line => line.trim());\n        const jsonResponses = lines.filter(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.jsonrpc === '2.0' && (parsed.result || parsed.error);\n          } catch {\n            return false;\n          }\n        });\n\n        expect(jsonResponses.length).toBeGreaterThan(0);\n\n        // Verify initialization response\n        const initResponse = jsonResponses.find(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.id === 1 && parsed.result?.capabilities;\n          } catch {\n            return false;\n          }\n        });\n\n        expect(initResponse).toBeDefined();\n\n        // Verify tools list response\n        const toolsResponse = jsonResponses.find(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.id === 2 && parsed.result?.tools;\n          } catch {\n            return false;\n          }\n        });\n\n        expect(toolsResponse).toBeDefined();\n      },\n      testTimeout\n    );\n\n    it(\n      'should handle MCP Inspector error scenarios',\n      async () => {\n        const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n        const testErrorHandling = (): Promise<string> => {\n          return new Promise((resolve, reject) => {\n            mcpServerProcess = spawn('node', [serverPath], {\n              env: {\n                ...process.env,\n                N8N_BASE_URL: mockN8nServer.getUrl(),\n                N8N_API_KEY: 'test-api-key',\n                N8N_MCP_TRANSPORT: 'stdio',\n              },\n              stdio: ['pipe', 'pipe', 'pipe'],\n            });\n\n            let outputBuffer = '';\n            let errorTestTimeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n            const cleanup = () => {\n              if (errorTestTimeout) {\n                clearTimeout(errorTestTimeout);\n              }\n            };\n\n            mcpServerProcess.stdout?.on('data', data => {\n              outputBuffer += data.toString();\n            });\n\n            mcpServerProcess.on('error', error => {\n              cleanup();\n              reject(error);\n            });\n\n            const testErrorScenarios = async () => {\n              try {\n                // Wait for server startup\n                await new Promise(resolve => {\n                  setTimeout(resolve, 2000);\n                });\n\n                // Initialize first\n                const initRequest = {\n                  jsonrpc: '2.0',\n                  id: 1,\n                  method: 'initialize',\n                  params: {\n                    protocolVersion: '2024-11-05',\n                    capabilities: { tools: {} },\n                    clientInfo: { name: 'mcp-inspector', version: '1.0.0' },\n                  },\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                // Test invalid method\n                const invalidMethodRequest = {\n                  jsonrpc: '2.0',\n                  id: 2,\n                  method: 'invalid/method',\n                  params: {},\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(invalidMethodRequest) + '\\n');\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                // Test invalid tool call\n                const invalidToolRequest = {\n                  jsonrpc: '2.0',\n                  id: 3,\n                  method: 'tools/call',\n                  params: {\n                    name: 'nonexistent-tool',\n                    arguments: {},\n                  },\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(invalidToolRequest) + '\\n');\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                cleanup();\n                resolve(outputBuffer);\n              } catch (error) {\n                cleanup();\n                reject(error);\n              }\n            };\n\n            errorTestTimeout = setTimeout(() => {\n              cleanup();\n              reject(new Error('Error handling test timeout'));\n            }, testTimeout - 2000);\n\n            setTimeout(testErrorScenarios, 500);\n          });\n        };\n\n        const errorOutput = await testErrorHandling();\n\n        // Verify error responses are properly formatted\n        const lines = errorOutput.split('\\n').filter(line => line.trim());\n        const errorResponses = lines.filter(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.jsonrpc === '2.0' && parsed.error;\n          } catch {\n            return false;\n          }\n        });\n\n        expect(errorResponses.length).toBeGreaterThan(0);\n\n        // Verify error responses have proper structure\n        errorResponses.forEach(responseStr => {\n          const response = JSON.parse(responseStr);\n          expect(response.jsonrpc).toBe('2.0');\n          expect(response.error).toBeDefined();\n          expect(response.error.code).toBeDefined();\n          expect(response.error.message).toBeDefined();\n          expect(typeof response.error.code).toBe('number');\n          expect(typeof response.error.message).toBe('string');\n        });\n      },\n      testTimeout\n    );\n  });\n\n  describe('Performance and Reliability', () => {\n    it(\n      'should handle rapid sequential requests',\n      async () => {\n        const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n        const testRapidRequests = (): Promise<string> => {\n          return new Promise((resolve, reject) => {\n            mcpServerProcess = spawn('node', [serverPath], {\n              env: {\n                ...process.env,\n                N8N_BASE_URL: mockN8nServer.getUrl(),\n                N8N_API_KEY: 'test-api-key',\n                N8N_MCP_TRANSPORT: 'stdio',\n              },\n              stdio: ['pipe', 'pipe', 'pipe'],\n            });\n\n            let outputBuffer = '';\n            let rapidTestTimeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n            const cleanup = () => {\n              if (rapidTestTimeout) {\n                clearTimeout(rapidTestTimeout);\n              }\n            };\n\n            mcpServerProcess.stdout?.on('data', data => {\n              outputBuffer += data.toString();\n            });\n\n            mcpServerProcess.on('error', error => {\n              cleanup();\n              reject(error);\n            });\n\n            const performRapidRequests = async () => {\n              try {\n                // Initialize server\n                await new Promise(resolve => {\n                  setTimeout(resolve, 2000);\n                });\n\n                const initRequest = {\n                  jsonrpc: '2.0',\n                  id: 1,\n                  method: 'initialize',\n                  params: {\n                    protocolVersion: '2024-11-05',\n                    capabilities: { tools: {} },\n                    clientInfo: { name: 'mcp-inspector', version: '1.0.0' },\n                  },\n                };\n\n                mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n                await new Promise(resolve => {\n                  setTimeout(resolve, 1000);\n                });\n\n                // Send rapid sequential tool list requests\n                for (let i = 2; i <= 11; i++) {\n                  const toolsListRequest = {\n                    jsonrpc: '2.0',\n                    id: i,\n                    method: 'tools/list',\n                    params: {},\n                  };\n                  mcpServerProcess.stdin?.write(JSON.stringify(toolsListRequest) + '\\n');\n                }\n\n                // Wait for all responses\n                await new Promise(resolve => {\n                  setTimeout(resolve, 3000);\n                });\n\n                cleanup();\n                resolve(outputBuffer);\n              } catch (error) {\n                cleanup();\n                reject(error);\n              }\n            };\n\n            rapidTestTimeout = setTimeout(() => {\n              cleanup();\n              reject(new Error('Rapid requests test timeout'));\n            }, testTimeout - 1000);\n\n            setTimeout(performRapidRequests, 500);\n          });\n        };\n\n        const rapidOutput = await testRapidRequests();\n\n        // Count successful responses\n        const lines = rapidOutput.split('\\n').filter(line => line.trim());\n        const responses = lines.filter(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.jsonrpc === '2.0' && (parsed.result || parsed.error);\n          } catch {\n            return false;\n          }\n        });\n\n        // Should handle at least the init + 10 tools/list requests\n        expect(responses.length).toBeGreaterThanOrEqual(11);\n\n        // Verify all tool list responses have proper structure\n        const toolsResponses = responses.filter(line => {\n          try {\n            const parsed = JSON.parse(line);\n            return parsed.result?.tools && Array.isArray(parsed.result.tools);\n          } catch {\n            return false;\n          }\n        });\n\n        expect(toolsResponses.length).toBeGreaterThanOrEqual(10);\n      },\n      testTimeout\n    );\n  });\n});\n"],"version":3}