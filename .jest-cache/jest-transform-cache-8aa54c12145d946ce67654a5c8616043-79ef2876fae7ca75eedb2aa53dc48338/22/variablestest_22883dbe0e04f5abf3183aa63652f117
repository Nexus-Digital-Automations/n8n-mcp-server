5f4614d4fd9e00becf40d933f089eda9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const variables_1 = require("../../../src/tools/variables");
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('Variable Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register variable tools
        (0, variables_1.createVariableTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all variable tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(3);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-variables');
        (0, globals_1.expect)(toolNames).toContain('create-variable');
        (0, globals_1.expect)(toolNames).toContain('delete-variable');
    });
    (0, globals_1.describe)('list-variables tool', () => {
        let listVariablesTool;
        (0, globals_1.beforeEach)(() => {
            listVariablesTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-variables')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(listVariablesTool.name).toBe('list-variables');
            (0, globals_1.expect)(listVariablesTool.description).toContain('List all environment variables in n8n');
            (0, globals_1.expect)(listVariablesTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(listVariablesTool.annotations).toEqual({
                title: 'List n8n Variables',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should list variables successfully with full data', async () => {
            const mockVariables = [
                {
                    id: 'var-1',
                    key: 'API_KEY',
                    value: 'secret-api-key',
                    type: 'string',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-02T00:00:00.000Z',
                },
                {
                    id: 'var-2',
                    key: 'DEBUG_MODE',
                    value: 'true',
                    type: 'boolean',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-03T00:00:00.000Z',
                },
            ];
            mockClient.getVariables.mockResolvedValue({
                data: mockVariables,
                nextCursor: 'next-cursor',
            });
            const result = await listVariablesTool.execute({ limit: 10 });
            (0, globals_1.expect)(mockClient.getVariables).toHaveBeenCalledWith({ limit: 10 });
            (0, globals_1.expect)(result).toContain('Found 2 variable(s)');
            (0, globals_1.expect)(result).toContain('**API_KEY**');
            (0, globals_1.expect)(result).toContain('ID: var-1');
            (0, globals_1.expect)(result).toContain('Type: string');
            (0, globals_1.expect)(result).toContain('Value: [HIDDEN]');
            // Use more flexible date matching to handle timezone differences
            (0, globals_1.expect)(result).toMatch(/Created: (12\/31\/2022|1\/1\/2023)/);
            (0, globals_1.expect)(result).toMatch(/Updated: (1\/1\/2023|1\/2\/2023|1\/3\/2023)/);
            (0, globals_1.expect)(result).toContain('**DEBUG_MODE**');
            (0, globals_1.expect)(result).toContain('ID: var-2');
            (0, globals_1.expect)(result).toContain('Type: boolean');
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor" to get the next page');
            // Ensure actual values are hidden for security
            (0, globals_1.expect)(result).not.toContain('secret-api-key');
            (0, globals_1.expect)(result).not.toContain('true');
        });
        (0, globals_1.it)('should list variables with minimal data', async () => {
            const mockVariables = [
                {
                    id: 'var-1',
                    key: 'SIMPLE_VAR',
                    value: 'simple-value',
                    type: 'string',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                    // Test with dates but we'll modify the data after creation
                },
            ];
            // Remove the date fields to test the optional behavior
            delete mockVariables[0].createdAt;
            delete mockVariables[0].updatedAt;
            mockClient.getVariables.mockResolvedValue({
                data: mockVariables,
            });
            const result = await listVariablesTool.execute({});
            (0, globals_1.expect)(mockClient.getVariables).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 1 variable(s)');
            (0, globals_1.expect)(result).toContain('**SIMPLE_VAR**');
            (0, globals_1.expect)(result).toContain('ID: var-1');
            (0, globals_1.expect)(result).toContain('Type: string'); // Default type
            (0, globals_1.expect)(result).toContain('Value: [HIDDEN]');
            // When no createdAt/updatedAt provided, these lines should not appear
            (0, globals_1.expect)(result).not.toContain('Created:');
            (0, globals_1.expect)(result).not.toContain('Updated:');
            (0, globals_1.expect)(result).not.toContain('cursor');
            // Ensure actual value is hidden
            (0, globals_1.expect)(result).not.toContain('simple-value');
        });
        (0, globals_1.it)('should handle empty variable list', async () => {
            mockClient.getVariables.mockResolvedValue({
                data: [],
            });
            const result = await listVariablesTool.execute({});
            (0, globals_1.expect)(result).toBe('No variables found in the n8n instance.');
        });
        (0, globals_1.it)('should handle pagination parameters', async () => {
            mockClient.getVariables.mockResolvedValue({ data: [] });
            await listVariablesTool.execute({ limit: 50, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getVariables).toHaveBeenCalledWith({
                limit: 50,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, variables_1.createVariableTools)(getClientNull, nullClientServer);
            const listVariablesToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'list-variables')?.[0];
            (0, globals_1.expect)(listVariablesToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(listVariablesToolWithNullClient.execute({})).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.getVariables.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(listVariablesTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('API request failed');
            mockClient.getVariables.mockRejectedValue(apiError);
            await (0, globals_1.expect)(listVariablesTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list variables: API request failed'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getVariables.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(listVariablesTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list variables with unknown error'));
        });
    });
    (0, globals_1.describe)('create-variable tool', () => {
        let createVariableTool;
        (0, globals_1.beforeEach)(() => {
            createVariableTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-variable')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(createVariableTool.name).toBe('create-variable');
            (0, globals_1.expect)(createVariableTool.description).toContain('Create a new environment variable in n8n');
            (0, globals_1.expect)(createVariableTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(createVariableTool.annotations).toEqual({
                title: 'Create New Variable',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should create variable successfully with type', async () => {
            const mockVariable = {
                id: 'var-new',
                key: 'NEW_API_KEY',
                value: 'new-secret-value',
                type: 'string',
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            mockClient.createVariable.mockResolvedValue(mockVariable);
            const result = await createVariableTool.execute({
                key: 'NEW_API_KEY',
                value: 'new-secret-value',
                type: 'string',
            });
            (0, globals_1.expect)(mockClient.createVariable).toHaveBeenCalledWith({
                key: 'NEW_API_KEY',
                value: 'new-secret-value',
                type: 'string',
            });
            (0, globals_1.expect)(result).toContain('✅ Successfully created variable "NEW_API_KEY" with ID: var-new');
            (0, globals_1.expect)(result).toContain('Type: string');
            (0, globals_1.expect)(result).toContain('Value: [HIDDEN for security]');
            // Ensure actual value is hidden
            (0, globals_1.expect)(result).not.toContain('new-secret-value');
        });
        (0, globals_1.it)('should create variable successfully with default type', async () => {
            const mockVariable = {
                id: 'var-new',
                key: 'SIMPLE_VAR',
                value: 'simple-value',
                type: 'string',
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            mockClient.createVariable.mockResolvedValue(mockVariable);
            const result = await createVariableTool.execute({
                key: 'SIMPLE_VAR',
                value: 'simple-value',
                // Note: type parameter not provided, should default to 'string'
            });
            // The implementation should handle undefined type by defaulting to 'string'
            (0, globals_1.expect)(mockClient.createVariable).toHaveBeenCalledWith({
                key: 'SIMPLE_VAR',
                value: 'simple-value',
                type: undefined, // This is what actually gets passed
            });
            (0, globals_1.expect)(result).toContain('✅ Successfully created variable "SIMPLE_VAR" with ID: var-new');
            (0, globals_1.expect)(result).toContain('Type: string');
            (0, globals_1.expect)(result).toContain('Value: [HIDDEN for security]');
        });
        (0, globals_1.it)('should create variable with different types', async () => {
            const mockVariable = {
                id: 'var-new',
                key: 'DEBUG_FLAG',
                value: 'true',
                type: 'boolean',
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            mockClient.createVariable.mockResolvedValue(mockVariable);
            const result = await createVariableTool.execute({
                key: 'DEBUG_FLAG',
                value: 'true',
                type: 'boolean',
            });
            (0, globals_1.expect)(mockClient.createVariable).toHaveBeenCalledWith({
                key: 'DEBUG_FLAG',
                value: 'true',
                type: 'boolean',
            });
            (0, globals_1.expect)(result).toContain('Type: boolean');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, variables_1.createVariableTools)(getClientNull, nullClientServer);
            const createVariableToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'create-variable')?.[0];
            (0, globals_1.expect)(createVariableToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(createVariableToolWithNullClient.execute({ key: 'TEST_VAR', value: 'test-value' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.createVariable.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(createVariableTool.execute({ key: 'TEST_VAR', value: 'test-value' })).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('Variable key already exists');
            mockClient.createVariable.mockRejectedValue(apiError);
            await (0, globals_1.expect)(createVariableTool.execute({ key: 'DUPLICATE_VAR', value: 'test-value' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create variable: Variable key already exists'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.createVariable.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(createVariableTool.execute({ key: 'TEST_VAR', value: 'test-value' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create variable with unknown error'));
        });
    });
    (0, globals_1.describe)('delete-variable tool', () => {
        let deleteVariableTool;
        (0, globals_1.beforeEach)(() => {
            deleteVariableTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-variable')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(deleteVariableTool.name).toBe('delete-variable');
            (0, globals_1.expect)(deleteVariableTool.description).toContain('Delete an environment variable from n8n permanently');
            (0, globals_1.expect)(deleteVariableTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(deleteVariableTool.annotations).toEqual({
                title: 'Delete Variable',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should delete variable successfully', async () => {
            mockClient.deleteVariable.mockResolvedValue(undefined);
            const result = await deleteVariableTool.execute({
                variableId: 'var-1',
            });
            (0, globals_1.expect)(mockClient.deleteVariable).toHaveBeenCalledWith('var-1');
            (0, globals_1.expect)(result).toBe('✅ Successfully deleted variable with ID: var-1');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, variables_1.createVariableTools)(getClientNull, nullClientServer);
            const deleteVariableToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'delete-variable')?.[0];
            (0, globals_1.expect)(deleteVariableToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(deleteVariableToolWithNullClient.execute({ variableId: 'var-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.deleteVariable.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(deleteVariableTool.execute({ variableId: 'var-1' })).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with variable management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('Variable not found');
            mockClient.deleteVariable.mockRejectedValue(apiError);
            await (0, globals_1.expect)(deleteVariableTool.execute({ variableId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete variable: Variable not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteVariable.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(deleteVariableTool.execute({ variableId: 'var-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete variable with unknown error'));
        });
    });
    (0, globals_1.describe)('parameter validation', () => {
        (0, globals_1.it)('should validate variable ID parameters', () => {
            const deleteVariableTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-variable')[0];
            (0, globals_1.expect)(deleteVariableTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate create variable parameters', () => {
            const createVariableTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-variable')[0];
            (0, globals_1.expect)(createVariableTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate list variables parameters', () => {
            const listVariablesTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-variables')[0];
            (0, globals_1.expect)(listVariablesTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
    });
    (0, globals_1.describe)('security considerations', () => {
        (0, globals_1.it)('should never expose actual variable values in list output', async () => {
            const mockVariables = [
                {
                    id: 'var-1',
                    key: 'SECRET_KEY',
                    value: 'super-secret-password-123',
                    type: 'string',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
                {
                    id: 'var-2',
                    key: 'API_TOKEN',
                    value: 'sk-1234567890abcdef',
                    type: 'string',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
            ];
            mockClient.getVariables.mockResolvedValue({
                data: mockVariables,
            });
            const result = await mockServer.addTool.mock.calls
                .find((call) => call[0].name === 'list-variables')[0]
                .execute({});
            // Ensure no actual values are leaked
            (0, globals_1.expect)(result).not.toContain('super-secret-password-123');
            (0, globals_1.expect)(result).not.toContain('sk-1234567890abcdef');
            (0, globals_1.expect)(result).toContain('[HIDDEN]');
        });
        (0, globals_1.it)('should never expose actual variable values in create output', async () => {
            const mockVariable = {
                id: 'var-new',
                key: 'NEW_SECRET',
                value: 'extremely-secret-value',
                type: 'string',
                createdAt: '2024-01-01T00:00:00Z',
                updatedAt: '2024-01-01T00:00:00Z',
            };
            mockClient.createVariable.mockResolvedValue(mockVariable);
            const result = await mockServer.addTool.mock.calls
                .find((call) => call[0].name === 'create-variable')[0]
                .execute({
                key: 'NEW_SECRET',
                value: 'extremely-secret-value',
                type: 'string',
            });
            // Ensure no actual value is leaked
            (0, globals_1.expect)(result).not.toContain('extremely-secret-value');
            (0, globals_1.expect)(result).toContain('[HIDDEN for security]');
        });
        (0, globals_1.it)('should handle different variable types securely', async () => {
            const mockVariables = [
                {
                    id: 'var-1',
                    key: 'STRING_VAR',
                    value: 'secret-string',
                    type: 'string',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
                {
                    id: 'var-2',
                    key: 'NUMBER_VAR',
                    value: '12345',
                    type: 'number',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
                {
                    id: 'var-3',
                    key: 'BOOLEAN_VAR',
                    value: 'true',
                    type: 'boolean',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
                {
                    id: 'var-4',
                    key: 'JSON_VAR',
                    value: '{"secret": "value"}',
                    type: 'json',
                    createdAt: '2024-01-01T00:00:00Z',
                    updatedAt: '2024-01-01T00:00:00Z',
                },
            ];
            mockClient.getVariables.mockResolvedValue({
                data: mockVariables,
            });
            const result = await mockServer.addTool.mock.calls
                .find((call) => call[0].name === 'list-variables')[0]
                .execute({});
            // Ensure no actual values are leaked for any type
            (0, globals_1.expect)(result).not.toContain('secret-string');
            (0, globals_1.expect)(result).not.toContain('12345');
            (0, globals_1.expect)(result).not.toContain('true');
            (0, globals_1.expect)(result).not.toContain('{"secret": "value"}');
            // But types should be shown
            (0, globals_1.expect)(result).toContain('Type: string');
            (0, globals_1.expect)(result).toContain('Type: number');
            (0, globals_1.expect)(result).toContain('Type: boolean');
            (0, globals_1.expect)(result).toContain('Type: json');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,