{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/projects.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/projects.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createProjectTools } from '../../../src/tools/projects';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nProject, CreateProjectRequest, UpdateProjectRequest } from '../../../src/types/n8n';\nimport { UserError } from 'fastmcp';\n\ndescribe('Project Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register project tools\n    createProjectTools(getClient, mockServer);\n  });\n\n  it('should register all project tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(4);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-projects');\n    expect(toolNames).toContain('create-project');\n    expect(toolNames).toContain('update-project');\n    expect(toolNames).toContain('delete-project');\n  });\n\n  describe('list-projects tool', () => {\n    let listProjectsTool: any;\n\n    beforeEach(() => {\n      listProjectsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-projects'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(listProjectsTool.name).toBe('list-projects');\n      expect(listProjectsTool.description).toContain('List all projects from n8n');\n      expect(listProjectsTool.description).toContain('n8n Enterprise license');\n      expect(listProjectsTool.annotations).toEqual({\n        title: 'List n8n Projects',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should list projects successfully with full data', async () => {\n      const mockProjects: N8nProject[] = [\n        {\n          id: 'proj-1',\n          name: 'Test Project 1',\n          type: 'Team',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-01T00:00:00.000Z',\n        },\n        {\n          id: 'proj-2',\n          name: 'Test Project 2',\n          type: 'Personal',\n          createdAt: '2023-01-02T00:00:00.000Z',\n          updatedAt: '2023-01-02T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getProjects.mockResolvedValue({\n        data: mockProjects,\n        nextCursor: 'next-cursor',\n      });\n\n      const result = await listProjectsTool.execute({ limit: 10 });\n\n      expect(mockClient.getProjects).toHaveBeenCalledWith({ limit: 10 });\n      expect(result).toContain('Found 2 project(s)');\n      expect(result).toContain('**Test Project 1**');\n      expect(result).toContain('ID: proj-1');\n      expect(result).toContain('Type: Team');\n      expect(result).toContain('Created: 1/1/2023');\n      expect(result).toContain('**Test Project 2**');\n      expect(result).toContain('ID: proj-2');\n      expect(result).toContain('Type: Personal');\n      expect(result).toContain('Use cursor \"next-cursor\" to get the next page');\n    });\n\n    it('should list projects with minimal data', async () => {\n      const mockProjects: N8nProject[] = [\n        {\n          id: 'proj-1',\n          name: 'Minimal Project',\n          type: 'Personal',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-01T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getProjects.mockResolvedValue({\n        data: mockProjects,\n      });\n\n      const result = await listProjectsTool.execute({});\n\n      expect(mockClient.getProjects).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 1 project(s)');\n      expect(result).toContain('**Minimal Project**');\n      expect(result).toContain('ID: proj-1');\n      expect(result).toContain('Type: Personal');\n      expect(result).toContain('Created: 12/31/2022');\n      expect(result).not.toContain('cursor');\n    });\n\n    it('should handle empty project list', async () => {\n      mockClient.getProjects.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listProjectsTool.execute({});\n\n      expect(result).toBe('No projects found in the n8n instance.');\n    });\n\n    it('should handle pagination parameters', async () => {\n      mockClient.getProjects.mockResolvedValue({ data: [] });\n\n      await listProjectsTool.execute({ limit: 50, cursor: 'test-cursor' });\n\n      expect(mockClient.getProjects).toHaveBeenCalledWith({\n        limit: 50,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const mockServerNull = { addTool: jest.fn() };\n      createProjectTools(getClientNull, mockServerNull);\n\n      const toolCall = mockServerNull.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-projects'\n      );\n      expect(toolCall).toBeDefined();\n      const toolWithNullClient = (toolCall as any)[0];\n\n      await expect(toolWithNullClient.execute({})).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.getProjects.mockRejectedValue(licenseError);\n\n      await expect(listProjectsTool.execute({})).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with project management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('API request failed');\n      mockClient.getProjects.mockRejectedValue(apiError);\n\n      await expect(listProjectsTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list projects: API request failed')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getProjects.mockRejectedValue('Unknown error string');\n\n      await expect(listProjectsTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list projects with unknown error')\n      );\n    });\n\n    it('should validate parameters', async () => {\n      // Mock successful responses for parameter validation tests\n      mockClient.getProjects.mockResolvedValue({ data: [] });\n\n      // Should not throw for valid parameters\n      await expect(listProjectsTool.execute({ limit: 50 })).resolves.toBeDefined();\n      await expect(listProjectsTool.execute({ cursor: 'valid-cursor' })).resolves.toBeDefined();\n      await expect(listProjectsTool.execute({})).resolves.toBeDefined();\n    });\n  });\n\n  describe('create-project tool', () => {\n    let createProjectTool: any;\n\n    beforeEach(() => {\n      createProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-project'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(createProjectTool.name).toBe('create-project');\n      expect(createProjectTool.description).toContain('Create a new project in n8n');\n      expect(createProjectTool.description).toContain('n8n Enterprise license');\n      expect(createProjectTool.annotations).toEqual({\n        title: 'Create New Project',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should create project successfully with type', async () => {\n      const mockProject: N8nProject = {\n        id: 'proj-new',\n        name: 'New Project',\n        type: 'Team',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z',\n      };\n\n      mockClient.createProject.mockResolvedValue(mockProject);\n\n      const result = await createProjectTool.execute({\n        name: 'New Project',\n        type: 'Team',\n      });\n\n      expect(mockClient.createProject).toHaveBeenCalledWith({\n        name: 'New Project',\n        type: 'Team',\n      });\n      expect(result).toContain('✅ Successfully created project \"New Project\" with ID: proj-new');\n      expect(result).toContain('Type: Team');\n    });\n\n    it('should create project successfully without type', async () => {\n      const mockProject: N8nProject = {\n        id: 'proj-new',\n        name: 'Simple Project',\n        type: 'Personal',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z',\n      };\n\n      mockClient.createProject.mockResolvedValue(mockProject);\n\n      const result = await createProjectTool.execute({\n        name: 'Simple Project',\n      });\n\n      expect(mockClient.createProject).toHaveBeenCalledWith({\n        name: 'Simple Project',\n        type: undefined,\n      });\n      expect(result).toContain(\n        '✅ Successfully created project \"Simple Project\" with ID: proj-new'\n      );\n      expect(result).toContain('Type: Personal');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const mockServerNull = { addTool: jest.fn() };\n      createProjectTools(getClientNull, mockServerNull);\n\n      const createToolCall = mockServerNull.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-project'\n      );\n      expect(createToolCall).toBeDefined();\n      const toolWithNullClient = (createToolCall as any)[0];\n\n      await expect(toolWithNullClient.execute({ name: 'Test Project' })).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.createProject.mockRejectedValue(licenseError);\n\n      await expect(createProjectTool.execute({ name: 'Test Project' })).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with project management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('Project name already exists');\n      mockClient.createProject.mockRejectedValue(apiError);\n\n      await expect(createProjectTool.execute({ name: 'Duplicate Project' })).rejects.toThrow(\n        new UserError('Failed to create project: Project name already exists')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.createProject.mockRejectedValue('Unknown error string');\n\n      await expect(createProjectTool.execute({ name: 'Test Project' })).rejects.toThrow(\n        new UserError('Failed to create project with unknown error')\n      );\n    });\n  });\n\n  describe('update-project tool', () => {\n    let updateProjectTool: any;\n\n    beforeEach(() => {\n      updateProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-project'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(updateProjectTool.name).toBe('update-project');\n      expect(updateProjectTool.description).toContain(\"Update a project's name and properties\");\n      expect(updateProjectTool.description).toContain('n8n Enterprise license');\n      expect(updateProjectTool.annotations).toEqual({\n        title: 'Update Project',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should update project successfully with type', async () => {\n      const mockProject: N8nProject = {\n        id: 'proj-1',\n        name: 'Updated Project',\n        type: 'Team',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z',\n      };\n\n      mockClient.updateProject.mockResolvedValue(mockProject);\n\n      const result = await updateProjectTool.execute({\n        projectId: 'proj-1',\n        name: 'Updated Project',\n      });\n\n      expect(mockClient.updateProject).toHaveBeenCalledWith('proj-1', {\n        name: 'Updated Project',\n      });\n      expect(result).toContain('✅ Successfully updated project \"Updated Project\" (ID: proj-1)');\n      expect(result).toContain('Type: Team');\n    });\n\n    it('should update project successfully without type', async () => {\n      const mockProject: N8nProject = {\n        id: 'proj-1',\n        name: 'Updated Project',\n        type: 'Personal',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z',\n      };\n\n      mockClient.updateProject.mockResolvedValue(mockProject);\n\n      const result = await updateProjectTool.execute({\n        projectId: 'proj-1',\n        name: 'Updated Project',\n      });\n\n      expect(result).toContain('✅ Successfully updated project \"Updated Project\" (ID: proj-1)');\n      expect(result).toContain('Type: Personal');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const mockServerNull = { addTool: jest.fn() };\n      createProjectTools(getClientNull, mockServerNull);\n\n      const updateToolCall = mockServerNull.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-project'\n      );\n      expect(updateToolCall).toBeDefined();\n      const toolWithNullClient = (updateToolCall as any)[0];\n\n      await expect(\n        toolWithNullClient.execute({ projectId: 'proj-1', name: 'Updated' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.updateProject.mockRejectedValue(licenseError);\n\n      await expect(\n        updateProjectTool.execute({ projectId: 'proj-1', name: 'Updated' })\n      ).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with project management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('Project not found');\n      mockClient.updateProject.mockRejectedValue(apiError);\n\n      await expect(\n        updateProjectTool.execute({ projectId: 'invalid-id', name: 'Updated' })\n      ).rejects.toThrow(new UserError('Failed to update project: Project not found'));\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.updateProject.mockRejectedValue('Unknown error string');\n\n      await expect(\n        updateProjectTool.execute({ projectId: 'proj-1', name: 'Updated' })\n      ).rejects.toThrow(new UserError('Failed to update project with unknown error'));\n    });\n  });\n\n  describe('delete-project tool', () => {\n    let deleteProjectTool: any;\n\n    beforeEach(() => {\n      deleteProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-project'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(deleteProjectTool.name).toBe('delete-project');\n      expect(deleteProjectTool.description).toContain('Delete a project from n8n permanently');\n      expect(deleteProjectTool.description).toContain('n8n Enterprise license');\n      expect(deleteProjectTool.annotations).toEqual({\n        title: 'Delete Project',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should delete project successfully', async () => {\n      mockClient.deleteProject.mockResolvedValue(undefined);\n\n      const result = await deleteProjectTool.execute({\n        projectId: 'proj-1',\n      });\n\n      expect(mockClient.deleteProject).toHaveBeenCalledWith('proj-1');\n      expect(result).toBe('✅ Successfully deleted project with ID: proj-1');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const mockServerNull = { addTool: jest.fn() };\n      createProjectTools(getClientNull, mockServerNull);\n\n      const deleteToolCall = mockServerNull.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-project'\n      );\n      expect(deleteToolCall).toBeDefined();\n      const toolWithNullClient = (deleteToolCall as any)[0];\n\n      await expect(toolWithNullClient.execute({ projectId: 'proj-1' })).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle license-related errors', async () => {\n      const licenseError = new Error('license required');\n      mockClient.deleteProject.mockRejectedValue(licenseError);\n\n      await expect(deleteProjectTool.execute({ projectId: 'proj-1' })).rejects.toThrow(\n        new UserError(\n          'This operation requires an n8n Enterprise license with project management features enabled. Error: license required'\n        )\n      );\n    });\n\n    it('should handle general API errors', async () => {\n      const apiError = new Error('Project not found');\n      mockClient.deleteProject.mockRejectedValue(apiError);\n\n      await expect(deleteProjectTool.execute({ projectId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to delete project: Project not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteProject.mockRejectedValue('Unknown error string');\n\n      await expect(deleteProjectTool.execute({ projectId: 'proj-1' })).rejects.toThrow(\n        new UserError('Failed to delete project with unknown error')\n      );\n    });\n  });\n\n  describe('parameter validation', () => {\n    it('should validate project ID parameters', () => {\n      const deleteProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-project'\n      )[0];\n\n      expect(deleteProjectTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate create project parameters', () => {\n      const createProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-project'\n      )[0];\n\n      expect(createProjectTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate update project parameters', () => {\n      const updateProjectTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-project'\n      )[0];\n\n      expect(updateProjectTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate list projects parameters', () => {\n      const listProjectsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-projects'\n      )[0];\n\n      expect(listProjectsTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n  });\n});\n"],"version":3}