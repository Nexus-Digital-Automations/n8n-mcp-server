e5a8a6d835ec2698e605cd0e33b56b62
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const users_1 = require("../../../src/tools/users");
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('User Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register user tools
        (0, users_1.createUserTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all user tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(5);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-users');
        (0, globals_1.expect)(toolNames).toContain('get-user');
        (0, globals_1.expect)(toolNames).toContain('create-user');
        (0, globals_1.expect)(toolNames).toContain('update-user');
        (0, globals_1.expect)(toolNames).toContain('delete-user');
    });
    (0, globals_1.describe)('list-users tool', () => {
        let listUsersTool;
        (0, globals_1.beforeEach)(() => {
            listUsersTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-users')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(listUsersTool.name).toBe('list-users');
            (0, globals_1.expect)(listUsersTool.description).toContain('List all users in the n8n instance');
            (0, globals_1.expect)(listUsersTool.annotations).toEqual({
                title: 'List n8n Users',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should list users successfully with full data', async () => {
            const mockUsers = [
                {
                    id: 'user-1',
                    email: 'john.doe@example.com',
                    firstName: 'John',
                    lastName: 'Doe',
                    role: 'admin',
                    disabled: false,
                    createdAt: '2023-01-01T00:00:00.000Z',
                    lastSeenAt: '2023-01-15T00:00:00.000Z',
                },
                {
                    id: 'user-2',
                    email: 'jane.smith@example.com',
                    firstName: 'Jane',
                    lastName: 'Smith',
                    role: 'member',
                    disabled: true,
                    createdAt: '2023-01-02T00:00:00.000Z',
                },
            ];
            mockClient.getUsers.mockResolvedValue({
                data: mockUsers,
                nextCursor: 'next-cursor',
            });
            const result = await listUsersTool.execute({ limit: 10 });
            (0, globals_1.expect)(mockClient.getUsers).toHaveBeenCalledWith({ limit: 10 });
            (0, globals_1.expect)(result).toContain('Found 2 user(s)');
            (0, globals_1.expect)(result).toContain('**John Doe**');
            (0, globals_1.expect)(result).toContain('ID: user-1');
            (0, globals_1.expect)(result).toContain('Email: john.doe@example.com');
            (0, globals_1.expect)(result).toContain('Role: admin');
            (0, globals_1.expect)(result).toContain('Status: ðŸŸ¢ Active');
            // Use more flexible date matching to handle timezone differences
            (0, globals_1.expect)(result).toMatch(/Created: (12\/31\/2022|1\/1\/2023)/);
            (0, globals_1.expect)(result).toMatch(/Last Seen: (1\/14\/2023|1\/15\/2023)/);
            (0, globals_1.expect)(result).toContain('**Jane Smith**');
            (0, globals_1.expect)(result).toContain('ID: user-2');
            (0, globals_1.expect)(result).toContain('Email: jane.smith@example.com');
            (0, globals_1.expect)(result).toContain('Role: member');
            (0, globals_1.expect)(result).toContain('Status: ðŸ”´ Disabled');
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor" to get the next page');
        });
        (0, globals_1.it)('should list users with minimal data', async () => {
            const mockUsers = [
                {
                    id: 'user-1',
                    email: 'simple@example.com',
                    firstName: 'Simple',
                    lastName: 'User',
                    role: 'member',
                    disabled: false,
                },
            ];
            mockClient.getUsers.mockResolvedValue({
                data: mockUsers,
            });
            const result = await listUsersTool.execute({});
            (0, globals_1.expect)(mockClient.getUsers).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 1 user(s)');
            (0, globals_1.expect)(result).toContain('**Simple User**');
            (0, globals_1.expect)(result).toContain('ID: user-1');
            (0, globals_1.expect)(result).toContain('Email: simple@example.com');
            (0, globals_1.expect)(result).toContain('Role: member');
            (0, globals_1.expect)(result).toContain('Status: ðŸŸ¢ Active');
            (0, globals_1.expect)(result).not.toContain('Created:');
            (0, globals_1.expect)(result).not.toContain('Last Seen:');
            (0, globals_1.expect)(result).not.toContain('cursor');
        });
        (0, globals_1.it)('should handle empty user list', async () => {
            mockClient.getUsers.mockResolvedValue({
                data: [],
            });
            const result = await listUsersTool.execute({});
            (0, globals_1.expect)(result).toBe('No users found in the n8n instance.');
        });
        (0, globals_1.it)('should handle pagination parameters', async () => {
            mockClient.getUsers.mockResolvedValue({ data: [] });
            await listUsersTool.execute({ limit: 50, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getUsers).toHaveBeenCalledWith({
                limit: 50,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, users_1.createUserTools)(getClientNull, nullClientServer);
            const listUsersToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'list-users')?.[0];
            (0, globals_1.expect)(listUsersToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(listUsersToolWithNullClient.execute({})).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('API request failed');
            mockClient.getUsers.mockRejectedValue(apiError);
            await (0, globals_1.expect)(listUsersTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list users: API request failed'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getUsers.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(listUsersTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list users with unknown error'));
        });
    });
    (0, globals_1.describe)('get-user tool', () => {
        let getUserTool;
        (0, globals_1.beforeEach)(() => {
            getUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-user')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(getUserTool.name).toBe('get-user');
            (0, globals_1.expect)(getUserTool.description).toContain('Get detailed information about a specific user');
            (0, globals_1.expect)(getUserTool.annotations).toEqual({
                title: 'Get User Details',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should get user successfully with full data', async () => {
            const mockUser = {
                id: 'user-1',
                email: 'john.doe@example.com',
                firstName: 'John',
                lastName: 'Doe',
                role: 'admin',
                disabled: false,
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-02T00:00:00.000Z',
                lastSeenAt: '2023-01-15T00:00:00.000Z',
            };
            mockClient.getUser.mockResolvedValue(mockUser);
            const result = await getUserTool.execute({ userId: 'user-1' });
            (0, globals_1.expect)(mockClient.getUser).toHaveBeenCalledWith('user-1');
            (0, globals_1.expect)(result).toContain('# User: John Doe');
            (0, globals_1.expect)(result).toContain('**ID:** user-1');
            (0, globals_1.expect)(result).toContain('**Email:** john.doe@example.com');
            (0, globals_1.expect)(result).toContain('**Role:** admin');
            (0, globals_1.expect)(result).toContain('**Status:** ðŸŸ¢ Active');
            (0, globals_1.expect)(result).toContain('**Created:**');
            (0, globals_1.expect)(result).toContain('**Updated:**');
            (0, globals_1.expect)(result).toContain('**Last Seen:**');
        });
        (0, globals_1.it)('should get user with minimal data', async () => {
            const mockUser = {
                id: 'user-1',
                email: 'simple@example.com',
                firstName: 'Simple',
                lastName: 'User',
                role: 'member',
                disabled: true,
            };
            mockClient.getUser.mockResolvedValue(mockUser);
            const result = await getUserTool.execute({ userId: 'user-1' });
            (0, globals_1.expect)(result).toContain('# User: Simple User');
            (0, globals_1.expect)(result).toContain('**ID:** user-1');
            (0, globals_1.expect)(result).toContain('**Email:** simple@example.com');
            (0, globals_1.expect)(result).toContain('**Role:** member');
            (0, globals_1.expect)(result).toContain('**Status:** ðŸ”´ Disabled');
            (0, globals_1.expect)(result).not.toContain('**Created:**');
            (0, globals_1.expect)(result).not.toContain('**Updated:**');
            (0, globals_1.expect)(result).not.toContain('**Last Seen:**');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, users_1.createUserTools)(getClientNull, nullClientServer);
            const getUserToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'get-user')?.[0];
            (0, globals_1.expect)(getUserToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(getUserToolWithNullClient.execute({ userId: 'user-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('User not found');
            mockClient.getUser.mockRejectedValue(apiError);
            await (0, globals_1.expect)(getUserTool.execute({ userId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get user: User not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getUser.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(getUserTool.execute({ userId: 'user-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get user with unknown error'));
        });
    });
    (0, globals_1.describe)('create-user tool', () => {
        let createUserTool;
        (0, globals_1.beforeEach)(() => {
            createUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-user')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(createUserTool.name).toBe('create-user');
            (0, globals_1.expect)(createUserTool.description).toContain('Create a new user in n8n');
            (0, globals_1.expect)(createUserTool.annotations).toEqual({
                title: 'Create New User',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should create user successfully with all fields', async () => {
            const mockUser = {
                id: 'user-new',
                email: 'new.user@example.com',
                firstName: 'New',
                lastName: 'User',
                role: 'admin',
                disabled: false,
            };
            mockClient.createUser.mockResolvedValue(mockUser);
            const result = await createUserTool.execute({
                email: 'new.user@example.com',
                firstName: 'New',
                lastName: 'User',
                password: 'password123',
                role: 'admin',
            });
            (0, globals_1.expect)(mockClient.createUser).toHaveBeenCalledWith({
                email: 'new.user@example.com',
                firstName: 'New',
                lastName: 'User',
                password: 'password123',
                role: 'admin',
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully created user "New User" with ID: user-new');
            (0, globals_1.expect)(result).toContain('Email: new.user@example.com');
            (0, globals_1.expect)(result).toContain('Role: admin');
        });
        (0, globals_1.it)('should create user successfully with default role', async () => {
            const mockUser = {
                id: 'user-new',
                email: 'simple.user@example.com',
                firstName: 'Simple',
                lastName: 'User',
                role: 'member',
                disabled: false,
            };
            mockClient.createUser.mockResolvedValue(mockUser);
            const result = await createUserTool.execute({
                email: 'simple.user@example.com',
                firstName: 'Simple',
                lastName: 'User',
                password: 'password123',
            });
            // The implementation should handle undefined role by defaulting to 'member'
            (0, globals_1.expect)(mockClient.createUser).toHaveBeenCalledWith({
                email: 'simple.user@example.com',
                firstName: 'Simple',
                lastName: 'User',
                password: 'password123',
                role: undefined, // This is what actually gets passed
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully created user "Simple User" with ID: user-new');
            (0, globals_1.expect)(result).toContain('Email: simple.user@example.com');
            (0, globals_1.expect)(result).toContain('Role: member');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, users_1.createUserTools)(getClientNull, nullClientServer);
            const createUserToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'create-user')?.[0];
            (0, globals_1.expect)(createUserToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(createUserToolWithNullClient.execute({
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                password: 'password123',
            })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Email already exists');
            mockClient.createUser.mockRejectedValue(apiError);
            await (0, globals_1.expect)(createUserTool.execute({
                email: 'duplicate@example.com',
                firstName: 'Duplicate',
                lastName: 'User',
                password: 'password123',
            })).rejects.toThrow(new fastmcp_1.UserError('Failed to create user: Email already exists'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.createUser.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(createUserTool.execute({
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                password: 'password123',
            })).rejects.toThrow(new fastmcp_1.UserError('Failed to create user with unknown error'));
        });
    });
    (0, globals_1.describe)('update-user tool', () => {
        let updateUserTool;
        (0, globals_1.beforeEach)(() => {
            updateUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-user')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(updateUserTool.name).toBe('update-user');
            (0, globals_1.expect)(updateUserTool.description).toContain("Update a user's information");
            (0, globals_1.expect)(updateUserTool.annotations).toEqual({
                title: 'Update User',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should update user successfully with all fields', async () => {
            const mockUser = {
                id: 'user-1',
                email: 'updated@example.com',
                firstName: 'Updated',
                lastName: 'User',
                role: 'admin',
                disabled: true,
            };
            mockClient.updateUser.mockResolvedValue(mockUser);
            const result = await updateUserTool.execute({
                userId: 'user-1',
                email: 'updated@example.com',
                firstName: 'Updated',
                lastName: 'User',
                role: 'admin',
                disabled: true,
            });
            (0, globals_1.expect)(mockClient.updateUser).toHaveBeenCalledWith('user-1', {
                email: 'updated@example.com',
                firstName: 'Updated',
                lastName: 'User',
                role: 'admin',
                disabled: true,
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated user "Updated User" (ID: user-1)');
            (0, globals_1.expect)(result).toContain('Email: updated@example.com');
            (0, globals_1.expect)(result).toContain('Role: admin');
            (0, globals_1.expect)(result).toContain('Status: ðŸ”´ Disabled');
        });
        (0, globals_1.it)('should update user successfully with partial fields', async () => {
            const mockUser = {
                id: 'user-1',
                email: 'original@example.com',
                firstName: 'Updated',
                lastName: 'Name',
                role: 'member',
                disabled: false,
            };
            mockClient.updateUser.mockResolvedValue(mockUser);
            const result = await updateUserTool.execute({
                userId: 'user-1',
                firstName: 'Updated',
                lastName: 'Name',
            });
            (0, globals_1.expect)(mockClient.updateUser).toHaveBeenCalledWith('user-1', {
                firstName: 'Updated',
                lastName: 'Name',
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated user "Updated Name" (ID: user-1)');
            (0, globals_1.expect)(result).toContain('Email: original@example.com');
            (0, globals_1.expect)(result).toContain('Role: member');
            (0, globals_1.expect)(result).toContain('Status: ðŸŸ¢ Active');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, users_1.createUserTools)(getClientNull, nullClientServer);
            const updateUserToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'update-user')?.[0];
            (0, globals_1.expect)(updateUserToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(updateUserToolWithNullClient.execute({ userId: 'user-1', firstName: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('User not found');
            mockClient.updateUser.mockRejectedValue(apiError);
            await (0, globals_1.expect)(updateUserTool.execute({ userId: 'invalid-id', firstName: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update user: User not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.updateUser.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(updateUserTool.execute({ userId: 'user-1', firstName: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update user with unknown error'));
        });
    });
    (0, globals_1.describe)('delete-user tool', () => {
        let deleteUserTool;
        (0, globals_1.beforeEach)(() => {
            deleteUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-user')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(deleteUserTool.name).toBe('delete-user');
            (0, globals_1.expect)(deleteUserTool.description).toContain('Delete a user from n8n permanently');
            (0, globals_1.expect)(deleteUserTool.annotations).toEqual({
                title: 'Delete User',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should delete user successfully', async () => {
            mockClient.deleteUser.mockResolvedValue(undefined);
            const result = await deleteUserTool.execute({
                userId: 'user-1',
            });
            (0, globals_1.expect)(mockClient.deleteUser).toHaveBeenCalledWith('user-1');
            (0, globals_1.expect)(result).toBe('âœ… Successfully deleted user with ID: user-1');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, users_1.createUserTools)(getClientNull, nullClientServer);
            const deleteUserToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'delete-user')?.[0];
            (0, globals_1.expect)(deleteUserToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(deleteUserToolWithNullClient.execute({ userId: 'user-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('User not found');
            mockClient.deleteUser.mockRejectedValue(apiError);
            await (0, globals_1.expect)(deleteUserTool.execute({ userId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete user: User not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteUser.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(deleteUserTool.execute({ userId: 'user-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete user with unknown error'));
        });
    });
    (0, globals_1.describe)('parameter validation', () => {
        (0, globals_1.it)('should validate user ID parameters', () => {
            const getUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-user')[0];
            (0, globals_1.expect)(getUserTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate create user parameters', () => {
            const createUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-user')[0];
            (0, globals_1.expect)(createUserTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate update user parameters', () => {
            const updateUserTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-user')[0];
            (0, globals_1.expect)(updateUserTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate list users parameters', () => {
            const listUsersTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-users')[0];
            (0, globals_1.expect)(listUsersTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,