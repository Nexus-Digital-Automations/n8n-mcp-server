c2b7c23c79e7f85730130cfb088b1444
/* istanbul ignore next */
function cov_t0u8xt9l2() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/n8nAuth.ts";
  var hash = "04eef7797e9b6a86826bd9104bda91be10946dde";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/n8nAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 25
        }
      },
      "1": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 16
        }
      },
      "2": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 31,
          column: 10
        }
      },
      "3": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "4": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "5": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 57
        }
      },
      "6": {
        start: {
          line: 43,
          column: 32
        },
        end: {
          line: 43,
          column: 64
        }
      },
      "7": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 49,
          column: 13
        }
      },
      "8": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 48,
          column: 18
        }
      },
      "9": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 58
        }
      },
      "10": {
        start: {
          line: 52,
          column: 27
        },
        end: {
          line: 52,
          column: 55
        }
      },
      "11": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "12": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 37
        }
      },
      "13": {
        start: {
          line: 57,
          column: 31
        },
        end: {
          line: 57,
          column: 74
        }
      },
      "14": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 13
        }
      },
      "15": {
        start: {
          line: 60,
          column: 16
        },
        end: {
          line: 63,
          column: 19
        }
      },
      "16": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 65,
          column: 30
        }
      },
      "17": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 71,
          column: 14
        }
      },
      "18": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "19": {
        start: {
          line: 80,
          column: 29
        },
        end: {
          line: 83,
          column: 14
        }
      },
      "20": {
        start: {
          line: 84,
          column: 12
        },
        end: {
          line: 84,
          column: 44
        }
      },
      "21": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 42
        }
      },
      "22": {
        start: {
          line: 92,
          column: 21
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "23": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 115,
          column: 10
        }
      },
      "24": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 45
        }
      },
      "25": {
        start: {
          line: 123,
          column: 23
        },
        end: {
          line: 125,
          column: 37
        }
      },
      "26": {
        start: {
          line: 126,
          column: 24
        },
        end: {
          line: 126,
          column: 79
        }
      },
      "27": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 129,
          column: 9
        }
      },
      "28": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 128,
          column: 24
        }
      },
      "29": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 35
        }
      },
      "30": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 167,
          column: 9
        }
      },
      "31": {
        start: {
          line: 138,
          column: 27
        },
        end: {
          line: 138,
          column: 81
        }
      },
      "32": {
        start: {
          line: 139,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "33": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 149,
          column: 17
        }
      },
      "34": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 60
        }
      },
      "35": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 148,
          column: 22
        }
      },
      "36": {
        start: {
          line: 152,
          column: 25
        },
        end: {
          line: 152,
          column: 80
        }
      },
      "37": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "38": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 166,
          column: 14
        }
      },
      "39": {
        start: {
          line: 174,
          column: 22
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "40": {
        start: {
          line: 175,
          column: 28
        },
        end: {
          line: 175,
          column: 57
        }
      },
      "41": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 183,
          column: 10
        }
      },
      "42": {
        start: {
          line: 189,
          column: 22
        },
        end: {
          line: 189,
          column: 51
        }
      },
      "43": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "44": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "45": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 52
        }
      },
      "46": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 36
        }
      },
      "47": {
        start: {
          line: 199,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "48": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 55
        }
      },
      "49": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 41
        }
      },
      "50": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 35
        }
      },
      "51": {
        start: {
          line: 216,
          column: 25
        },
        end: {
          line: 216,
          column: 38
        }
      },
      "52": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 219,
          column: 9
        }
      },
      "53": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 40
        }
      },
      "54": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "55": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 45
        }
      },
      "56": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "57": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 35
        }
      },
      "58": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 24
        }
      },
      "59": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 62
        }
      },
      "60": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 31
        }
      },
      "61": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "62": {
        start: {
          line: 245,
          column: 27
        },
        end: {
          line: 245,
          column: 28
        }
      },
      "63": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 253,
          column: 9
        }
      },
      "64": {
        start: {
          line: 247,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "65": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 31
        }
      },
      "66": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 43
        }
      },
      "67": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 10
        }
      },
      "68": {
        start: {
          line: 264,
          column: 19
        },
        end: {
          line: 273,
          column: 5
        }
      },
      "69": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 39
        }
      },
      "70": {
        start: {
          line: 279,
          column: 30
        },
        end: {
          line: 279,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 29
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 32
          },
          end: {
            line: 73,
            column: 5
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 77,
            column: 5
          }
        },
        loc: {
          start: {
            line: 77,
            column: 27
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 77
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 91,
            column: 5
          }
        },
        loc: {
          start: {
            line: 91,
            column: 33
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 91
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 32
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 120
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 43
          },
          end: {
            line: 168,
            column: 5
          }
        },
        line: 135
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 55
          },
          end: {
            line: 184,
            column: 5
          }
        },
        line: 172
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 34
          },
          end: {
            line: 211,
            column: 5
          }
        },
        line: 188
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 25
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 215
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 29
          },
          end: {
            line: 233,
            column: 5
          }
        },
        line: 231
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 17
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 237
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 20
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 243
      },
      "12": {
        name: "createN8nAuth",
        decl: {
          start: {
            line: 263,
            column: 16
          },
          end: {
            line: 263,
            column: 29
          }
        },
        loc: {
          start: {
            line: 263,
            column: 32
          },
          end: {
            line: 275,
            column: 1
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 25
          },
          end: {
            line: 20,
            column: 27
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 52
          }
        }, {
          start: {
            line: 25,
            column: 56
          },
          end: {
            line: 25,
            column: 58
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 27
          },
          end: {
            line: 26,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 27
          },
          end: {
            line: 26,
            column: 50
          }
        }, {
          start: {
            line: 26,
            column: 54
          },
          end: {
            line: 26,
            column: 56
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 49,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 22
          }
        }, {
          start: {
            line: 53,
            column: 26
          },
          end: {
            line: 53,
            column: 53
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 12
          },
          end: {
            line: 64,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "8": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 59,
            column: 34
          }
        }, {
          start: {
            line: 59,
            column: 38
          },
          end: {
            line: 59,
            column: 67
          }
        }],
        line: 59
      },
      "9": {
        loc: {
          start: {
            line: 70,
            column: 49
          },
          end: {
            line: 70,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 70,
            column: 74
          },
          end: {
            line: 70,
            column: 87
          }
        }, {
          start: {
            line: 70,
            column: 90
          },
          end: {
            line: 70,
            column: 103
          }
        }],
        line: 70
      },
      "10": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "11": {
        loc: {
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 25
          },
          end: {
            line: 81,
            column: 48
          }
        }, {
          start: {
            line: 81,
            column: 52
          },
          end: {
            line: 81,
            column: 78
          }
        }],
        line: 81
      },
      "12": {
        loc: {
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 24
          },
          end: {
            line: 82,
            column: 46
          }
        }, {
          start: {
            line: 82,
            column: 50
          },
          end: {
            line: 82,
            column: 75
          }
        }],
        line: 82
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 121,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 121,
            column: 39
          }
        }, {
          start: {
            line: 121,
            column: 43
          },
          end: {
            line: 121,
            column: 45
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 125,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 123,
            column: 23
          },
          end: {
            line: 123,
            column: 47
          }
        }, {
          start: {
            line: 124,
            column: 12
          },
          end: {
            line: 124,
            column: 63
          }
        }, {
          start: {
            line: 125,
            column: 12
          },
          end: {
            line: 125,
            column: 37
          }
        }],
        line: 123
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 24
          },
          end: {
            line: 126,
            column: 49
          }
        }, {
          start: {
            line: 126,
            column: 53
          },
          end: {
            line: 126,
            column: 79
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 127,
            column: 8
          },
          end: {
            line: 129,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 127
      },
      "17": {
        loc: {
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 127,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 12
          },
          end: {
            line: 127,
            column: 19
          }
        }, {
          start: {
            line: 127,
            column: 23
          },
          end: {
            line: 127,
            column: 31
          }
        }],
        line: 127
      },
      "18": {
        loc: {
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 12
          },
          end: {
            line: 150,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "19": {
        loc: {
          start: {
            line: 147,
            column: 80
          },
          end: {
            line: 147,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 105
          },
          end: {
            line: 147,
            column: 118
          }
        }, {
          start: {
            line: 147,
            column: 121
          },
          end: {
            line: 147,
            column: 134
          }
        }],
        line: 147
      },
      "20": {
        loc: {
          start: {
            line: 165,
            column: 60
          },
          end: {
            line: 165,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 85
          },
          end: {
            line: 165,
            column: 98
          }
        }, {
          start: {
            line: 165,
            column: 101
          },
          end: {
            line: 165,
            column: 114
          }
        }],
        line: 165
      },
      "21": {
        loc: {
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 8
          },
          end: {
            line: 219,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "22": {
        loc: {
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "23": {
        loc: {
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "24": {
        loc: {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: 250,
            column: 17
          },
          end: {
            line: 252,
            column: 13
          }
        }],
        line: 247
      },
      "25": {
        loc: {
          start: {
            line: 269,
            column: 23
          },
          end: {
            line: 271,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 270,
            column: 14
          },
          end: {
            line: 270,
            column: 63
          }
        }, {
          start: {
            line: 271,
            column: 14
          },
          end: {
            line: 271,
            column: 23
          }
        }],
        line: 269
      },
      "26": {
        loc: {
          start: {
            line: 272,
            column: 22
          },
          end: {
            line: 272,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 22
          },
          end: {
            line: 272,
            column: 67
          }
        }, {
          start: {
            line: 272,
            column: 71
          },
          end: {
            line: 272,
            column: 80
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/n8nAuth.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/n8nAuth.ts"],
      sourcesContent: ["/**\n * n8n-specific Authentication Provider\n *\n * Implements authentication for n8n MCP server using n8n API keys and role-based access control.\n * Supports both Community and Enterprise n8n instances with appropriate feature detection.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-unused-vars */\n\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  AuthProvider,\n  BaseAuthProvider,\n  RequestContext,\n  AuthResult,\n  AuthenticatedUser,\n} from './authProvider.js';\n\n/**\n * n8n authentication configuration\n */\nexport interface N8nAuthConfig {\n  /** Whether authentication is required (default: false for backward compatibility) */\n  required?: boolean;\n\n  /** Default n8n instance URL (can be overridden per request) */\n  defaultBaseUrl?: string;\n\n  /** Default n8n API key (can be overridden per request) */\n  defaultApiKey?: string;\n\n  /** Whether to validate n8n connection during authentication */\n  validateConnection?: boolean;\n\n  /** Cache authentication results for this duration (ms) */\n  cacheDuration?: number;\n\n  /** Default user roles for authenticated users */\n  defaultRoles?: string[];\n}\n\n/**\n * Authentication cache entry\n */\ninterface AuthCacheEntry {\n  result: AuthResult;\n  expires: number;\n}\n\n/**\n * n8n authentication provider\n *\n * Provides authentication using n8n API keys with role-based access control.\n * Supports both authenticated and anonymous access based on configuration.\n */\nexport class N8nAuthProvider extends BaseAuthProvider {\n  private config: Required<N8nAuthConfig>;\n  private authCache = new Map<string, AuthCacheEntry>();\n\n  constructor(config: N8nAuthConfig = {}) {\n    super();\n\n    // Set defaults\n    this.config = {\n      required: false,\n      defaultBaseUrl: process.env.N8N_BASE_URL || '',\n      defaultApiKey: process.env.N8N_API_KEY || '',\n      validateConnection: true,\n      cacheDuration: 5 * 60 * 1000, // 5 minutes\n      defaultRoles: ['member'],\n      ...config,\n    };\n  }\n\n  /**\n   * Authenticate client request\n   */\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    try {\n      // If authentication is not required, allow anonymous access\n      if (!this.config.required) {\n        return this.createAnonymousAuth(context);\n      }\n\n      // Extract credentials from context\n      const credentials = this.extractCredentials(context);\n      if (!credentials) {\n        return {\n          success: false,\n          error: 'Authentication required but no credentials provided',\n        };\n      }\n\n      // Check cache first\n      const cacheKey = this.getCacheKey(credentials);\n      const cached = this.authCache.get(cacheKey);\n      if (cached && cached.expires > Date.now()) {\n        return cached.result;\n      }\n\n      // Validate credentials\n      const authResult = await this.validateCredentials(credentials);\n\n      // Cache successful results\n      if (authResult.success && this.config.cacheDuration > 0) {\n        this.authCache.set(cacheKey, {\n          result: authResult,\n          expires: Date.now() + this.config.cacheDuration,\n        });\n      }\n\n      return authResult;\n    } catch (error) {\n      return {\n        success: false,\n        error: `Authentication failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  /**\n   * Refresh authentication\n   */\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    // Clear cache and re-authenticate\n    if (context.user) {\n      const cacheKey = this.getCacheKey({\n        baseUrl: context.user.n8nBaseUrl || this.config.defaultBaseUrl,\n        apiKey: context.user.n8nApiKey || this.config.defaultApiKey,\n      });\n      this.authCache.delete(cacheKey);\n    }\n\n    return this.authenticate(context);\n  }\n\n  /**\n   * Create anonymous authentication result\n   */\n  private createAnonymousAuth(context: RequestContext): AuthResult {\n    const user: AuthenticatedUser = {\n      id: 'anonymous',\n      name: 'Anonymous User',\n      roles: ['anonymous'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n      n8nBaseUrl: this.config.defaultBaseUrl,\n      n8nApiKey: this.config.defaultApiKey,\n    };\n\n    return {\n      success: true,\n      user,\n      context: {\n        authType: 'anonymous',\n        features: ['community'],\n      },\n    };\n  }\n\n  /**\n   * Extract credentials from request context\n   */\n  private extractCredentials(context: RequestContext): { baseUrl: string; apiKey: string } | null {\n    const headers = context.headers || {};\n\n    // Try different credential sources\n    const apiKey =\n      headers['x-n8n-api-key'] ||\n      headers['authorization']?.replace(/^Bearer\\s+/, '') ||\n      this.config.defaultApiKey;\n\n    const baseUrl = headers['x-n8n-base-url'] || this.config.defaultBaseUrl;\n\n    if (!apiKey || !baseUrl) {\n      return null;\n    }\n\n    return { baseUrl, apiKey };\n  }\n\n  /**\n   * Validate credentials against n8n instance\n   */\n  private async validateCredentials(credentials: {\n    baseUrl: string;\n    apiKey: string;\n  }): Promise<AuthResult> {\n    try {\n      // Create n8n client to test connection\n      const client = new N8nClient(credentials.baseUrl, credentials.apiKey);\n\n      if (this.config.validateConnection) {\n        // Test connection by fetching user info or workflows\n        try {\n          await client.getWorkflows({ limit: 1 });\n        } catch (error) {\n          return {\n            success: false,\n            error: `Invalid n8n credentials or connection failed: ${error instanceof Error ? error.message : String(error)}`,\n          };\n        }\n      }\n\n      // Create authenticated user\n      const user = await this.createAuthenticatedUser(credentials, client);\n\n      return {\n        success: true,\n        user,\n        context: {\n          authType: 'n8n-api-key',\n          features: this.detectFeatures(user),\n        },\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: `Authentication validation failed: ${error instanceof Error ? error.message : String(error)}`,\n      };\n    }\n  }\n\n  /**\n   * Create authenticated user from credentials\n   */\n  private async createAuthenticatedUser(\n    credentials: { baseUrl: string; apiKey: string },\n    client: N8nClient\n  ): Promise<AuthenticatedUser> {\n    // Detect user roles and permissions\n    const roles = await this.detectUserRoles(client);\n    const permissions = this.createPermissions(roles);\n\n    return {\n      id: `n8n-${credentials.baseUrl}-${credentials.apiKey.slice(-8)}`,\n      name: 'n8n API User',\n      roles,\n      permissions,\n      n8nBaseUrl: credentials.baseUrl,\n      n8nApiKey: credentials.apiKey,\n    };\n  }\n\n  /**\n   * Detect user roles based on n8n API capabilities\n   */\n  private async detectUserRoles(client: N8nClient): Promise<string[]> {\n    const roles: string[] = [...this.config.defaultRoles];\n\n    try {\n      // Test Enterprise features to determine if user has elevated permissions\n      try {\n        await client.getUsers({ limit: 1 });\n        roles.push('admin'); // Can access user management\n      } catch {\n        // User management not accessible, likely not an admin\n      }\n\n      try {\n        await client.getProjects({ limit: 1 });\n        roles.push('enterprise'); // Can access Enterprise features\n      } catch {\n        // Enterprise features not accessible\n      }\n    } catch {\n      // Default to basic roles\n    }\n\n    return [...new Set(roles)]; // Remove duplicates\n  }\n\n  /**\n   * Detect available features\n   */\n  private detectFeatures(user: AuthenticatedUser): string[] {\n    const features: string[] = ['community'];\n\n    if (user.permissions.enterprise) {\n      features.push('enterprise');\n    }\n\n    if (user.permissions.users) {\n      features.push('user-management');\n    }\n\n    if (user.permissions.audit) {\n      features.push('audit');\n    }\n\n    return features;\n  }\n\n  /**\n   * Generate cache key for credentials\n   */\n  private getCacheKey(credentials: { baseUrl: string; apiKey: string }): string {\n    return `${credentials.baseUrl}:${credentials.apiKey}`;\n  }\n\n  /**\n   * Clear authentication cache\n   */\n  public clearCache(): void {\n    this.authCache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; entries: number } {\n    const now = Date.now();\n    let validEntries = 0;\n\n    for (const [key, entry] of this.authCache.entries()) {\n      if (entry.expires > now) {\n        validEntries++;\n      } else {\n        this.authCache.delete(key); // Clean up expired entries\n      }\n    }\n\n    return {\n      size: this.authCache.size,\n      entries: validEntries,\n    };\n  }\n}\n\n/**\n * Create n8n authentication provider from environment variables\n */\nexport function createN8nAuth(): N8nAuthProvider {\n  const config: N8nAuthConfig = {\n    required: process.env.N8N_MCP_AUTH_REQUIRED === 'true',\n    defaultBaseUrl: process.env.N8N_BASE_URL,\n    defaultApiKey: process.env.N8N_API_KEY,\n    validateConnection: process.env.N8N_MCP_VALIDATE_CONNECTION !== 'false',\n    cacheDuration: process.env.N8N_MCP_AUTH_CACHE_DURATION\n      ? parseInt(process.env.N8N_MCP_AUTH_CACHE_DURATION)\n      : undefined,\n    defaultRoles: process.env.N8N_MCP_DEFAULT_ROLES?.split(',') || undefined,\n  };\n\n  return new N8nAuthProvider(config);\n}\n\n/**\n * Default n8n authentication provider instance\n */\nexport const defaultN8nAuth = createN8nAuth();\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04eef7797e9b6a86826bd9104bda91be10946dde"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_t0u8xt9l2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_t0u8xt9l2();
/**
 * n8n-specific Authentication Provider
 *
 * Implements authentication for n8n MCP server using n8n API keys and role-based access control.
 * Supports both Community and Enterprise n8n instances with appropriate feature detection.
 */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-unused-vars */
import { N8nClient } from '../client/n8nClient.js';
import { BaseAuthProvider } from './authProvider.js';
/**
 * n8n authentication provider
 *
 * Provides authentication using n8n API keys with role-based access control.
 * Supports both authenticated and anonymous access based on configuration.
 */
export class N8nAuthProvider extends BaseAuthProvider {
  config;
  authCache =
  /* istanbul ignore next */
  (cov_t0u8xt9l2().s[0]++, new Map());
  constructor(config =
  /* istanbul ignore next */
  (cov_t0u8xt9l2().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[0]++;
    cov_t0u8xt9l2().s[1]++;
    super();
    // Set defaults
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[2]++;
    this.config = {
      required: false,
      defaultBaseUrl:
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[1][0]++, process.env.N8N_BASE_URL) ||
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[1][1]++, ''),
      defaultApiKey:
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[2][0]++, process.env.N8N_API_KEY) ||
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[2][1]++, ''),
      validateConnection: true,
      cacheDuration: 5 * 60 * 1000,
      // 5 minutes
      defaultRoles: ['member'],
      ...config
    };
  }
  /**
   * Authenticate client request
   */
  async authenticate(context) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[1]++;
    cov_t0u8xt9l2().s[3]++;
    try {
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[4]++;
      // If authentication is not required, allow anonymous access
      if (!this.config.required) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[3][0]++;
        cov_t0u8xt9l2().s[5]++;
        return this.createAnonymousAuth(context);
      } else
      /* istanbul ignore next */
      {
        cov_t0u8xt9l2().b[3][1]++;
      }
      // Extract credentials from context
      const credentials =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[6]++, this.extractCredentials(context));
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[7]++;
      if (!credentials) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[4][0]++;
        cov_t0u8xt9l2().s[8]++;
        return {
          success: false,
          error: 'Authentication required but no credentials provided'
        };
      } else
      /* istanbul ignore next */
      {
        cov_t0u8xt9l2().b[4][1]++;
      }
      // Check cache first
      const cacheKey =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[9]++, this.getCacheKey(credentials));
      const cached =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[10]++, this.authCache.get(cacheKey));
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[11]++;
      if (
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[6][0]++, cached) &&
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[6][1]++, cached.expires > Date.now())) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[5][0]++;
        cov_t0u8xt9l2().s[12]++;
        return cached.result;
      } else
      /* istanbul ignore next */
      {
        cov_t0u8xt9l2().b[5][1]++;
      }
      // Validate credentials
      const authResult =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[13]++, await this.validateCredentials(credentials));
      // Cache successful results
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[14]++;
      if (
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[8][0]++, authResult.success) &&
      /* istanbul ignore next */
      (cov_t0u8xt9l2().b[8][1]++, this.config.cacheDuration > 0)) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[7][0]++;
        cov_t0u8xt9l2().s[15]++;
        this.authCache.set(cacheKey, {
          result: authResult,
          expires: Date.now() + this.config.cacheDuration
        });
      } else
      /* istanbul ignore next */
      {
        cov_t0u8xt9l2().b[7][1]++;
      }
      cov_t0u8xt9l2().s[16]++;
      return authResult;
    } catch (error) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[17]++;
      return {
        success: false,
        error: `Authentication failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[9][1]++, String(error))}`
      };
    }
  }
  /**
   * Refresh authentication
   */
  async refresh(context) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[2]++;
    cov_t0u8xt9l2().s[18]++;
    // Clear cache and re-authenticate
    if (context.user) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().b[10][0]++;
      const cacheKey =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[19]++, this.getCacheKey({
        baseUrl:
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[11][0]++, context.user.n8nBaseUrl) ||
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[11][1]++, this.config.defaultBaseUrl),
        apiKey:
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[12][0]++, context.user.n8nApiKey) ||
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[12][1]++, this.config.defaultApiKey)
      }));
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[20]++;
      this.authCache.delete(cacheKey);
    } else
    /* istanbul ignore next */
    {
      cov_t0u8xt9l2().b[10][1]++;
    }
    cov_t0u8xt9l2().s[21]++;
    return this.authenticate(context);
  }
  /**
   * Create anonymous authentication result
   */
  createAnonymousAuth(context) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[3]++;
    const user =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[22]++, {
      id: 'anonymous',
      name: 'Anonymous User',
      roles: ['anonymous'],
      permissions: {
        community: true,
        enterprise: false,
        workflows: true,
        executions: true,
        credentials: false,
        users: false,
        audit: false
      },
      n8nBaseUrl: this.config.defaultBaseUrl,
      n8nApiKey: this.config.defaultApiKey
    });
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[23]++;
    return {
      success: true,
      user,
      context: {
        authType: 'anonymous',
        features: ['community']
      }
    };
  }
  /**
   * Extract credentials from request context
   */
  extractCredentials(context) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[4]++;
    const headers =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[24]++,
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[13][0]++, context.headers) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[13][1]++, {}));
    // Try different credential sources
    const apiKey =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[25]++,
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[14][0]++, headers['x-n8n-api-key']) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[14][1]++, headers['authorization']?.replace(/^Bearer\s+/, '')) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[14][2]++, this.config.defaultApiKey));
    const baseUrl =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[26]++,
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[15][0]++, headers['x-n8n-base-url']) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[15][1]++, this.config.defaultBaseUrl));
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[27]++;
    if (
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[17][0]++, !apiKey) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[17][1]++, !baseUrl)) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().b[16][0]++;
      cov_t0u8xt9l2().s[28]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_t0u8xt9l2().b[16][1]++;
    }
    cov_t0u8xt9l2().s[29]++;
    return {
      baseUrl,
      apiKey
    };
  }
  /**
   * Validate credentials against n8n instance
   */
  async validateCredentials(credentials) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[5]++;
    cov_t0u8xt9l2().s[30]++;
    try {
      // Create n8n client to test connection
      const client =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[31]++, new N8nClient(credentials.baseUrl, credentials.apiKey));
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[32]++;
      if (this.config.validateConnection) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[18][0]++;
        cov_t0u8xt9l2().s[33]++;
        // Test connection by fetching user info or workflows
        try {
          /* istanbul ignore next */
          cov_t0u8xt9l2().s[34]++;
          await client.getWorkflows({
            limit: 1
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_t0u8xt9l2().s[35]++;
          return {
            success: false,
            error: `Invalid n8n credentials or connection failed: ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_t0u8xt9l2().b[19][0]++, error.message) :
            /* istanbul ignore next */
            (cov_t0u8xt9l2().b[19][1]++, String(error))}`
          };
        }
      } else
      /* istanbul ignore next */
      {
        cov_t0u8xt9l2().b[18][1]++;
      }
      // Create authenticated user
      const user =
      /* istanbul ignore next */
      (cov_t0u8xt9l2().s[36]++, await this.createAuthenticatedUser(credentials, client));
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[37]++;
      return {
        success: true,
        user,
        context: {
          authType: 'n8n-api-key',
          features: this.detectFeatures(user)
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[38]++;
      return {
        success: false,
        error: `Authentication validation failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_t0u8xt9l2().b[20][1]++, String(error))}`
      };
    }
  }
  /**
   * Create authenticated user from credentials
   */
  async createAuthenticatedUser(credentials, client) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[6]++;
    // Detect user roles and permissions
    const roles =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[39]++, await this.detectUserRoles(client));
    const permissions =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[40]++, this.createPermissions(roles));
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[41]++;
    return {
      id: `n8n-${credentials.baseUrl}-${credentials.apiKey.slice(-8)}`,
      name: 'n8n API User',
      roles,
      permissions,
      n8nBaseUrl: credentials.baseUrl,
      n8nApiKey: credentials.apiKey
    };
  }
  /**
   * Detect user roles based on n8n API capabilities
   */
  async detectUserRoles(client) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[7]++;
    const roles =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[42]++, [...this.config.defaultRoles]);
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[43]++;
    try {
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[44]++;
      // Test Enterprise features to determine if user has elevated permissions
      try {
        /* istanbul ignore next */
        cov_t0u8xt9l2().s[45]++;
        await client.getUsers({
          limit: 1
        });
        /* istanbul ignore next */
        cov_t0u8xt9l2().s[46]++;
        roles.push('admin'); // Can access user management
      } catch {
        // User management not accessible, likely not an admin
      }
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[47]++;
      try {
        /* istanbul ignore next */
        cov_t0u8xt9l2().s[48]++;
        await client.getProjects({
          limit: 1
        });
        /* istanbul ignore next */
        cov_t0u8xt9l2().s[49]++;
        roles.push('enterprise'); // Can access Enterprise features
      } catch {
        // Enterprise features not accessible
      }
    } catch {
      // Default to basic roles
    }
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[50]++;
    return [...new Set(roles)]; // Remove duplicates
  }
  /**
   * Detect available features
   */
  detectFeatures(user) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[8]++;
    const features =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[51]++, ['community']);
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[52]++;
    if (user.permissions.enterprise) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().b[21][0]++;
      cov_t0u8xt9l2().s[53]++;
      features.push('enterprise');
    } else
    /* istanbul ignore next */
    {
      cov_t0u8xt9l2().b[21][1]++;
    }
    cov_t0u8xt9l2().s[54]++;
    if (user.permissions.users) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().b[22][0]++;
      cov_t0u8xt9l2().s[55]++;
      features.push('user-management');
    } else
    /* istanbul ignore next */
    {
      cov_t0u8xt9l2().b[22][1]++;
    }
    cov_t0u8xt9l2().s[56]++;
    if (user.permissions.audit) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().b[23][0]++;
      cov_t0u8xt9l2().s[57]++;
      features.push('audit');
    } else
    /* istanbul ignore next */
    {
      cov_t0u8xt9l2().b[23][1]++;
    }
    cov_t0u8xt9l2().s[58]++;
    return features;
  }
  /**
   * Generate cache key for credentials
   */
  getCacheKey(credentials) {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[9]++;
    cov_t0u8xt9l2().s[59]++;
    return `${credentials.baseUrl}:${credentials.apiKey}`;
  }
  /**
   * Clear authentication cache
   */
  clearCache() {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[10]++;
    cov_t0u8xt9l2().s[60]++;
    this.authCache.clear();
  }
  /**
   * Get cache statistics
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_t0u8xt9l2().f[11]++;
    const now =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[61]++, Date.now());
    let validEntries =
    /* istanbul ignore next */
    (cov_t0u8xt9l2().s[62]++, 0);
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[63]++;
    for (const [key, entry] of this.authCache.entries()) {
      /* istanbul ignore next */
      cov_t0u8xt9l2().s[64]++;
      if (entry.expires > now) {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[24][0]++;
        cov_t0u8xt9l2().s[65]++;
        validEntries++;
      } else {
        /* istanbul ignore next */
        cov_t0u8xt9l2().b[24][1]++;
        cov_t0u8xt9l2().s[66]++;
        this.authCache.delete(key); // Clean up expired entries
      }
    }
    /* istanbul ignore next */
    cov_t0u8xt9l2().s[67]++;
    return {
      size: this.authCache.size,
      entries: validEntries
    };
  }
}
/**
 * Create n8n authentication provider from environment variables
 */
export function createN8nAuth() {
  /* istanbul ignore next */
  cov_t0u8xt9l2().f[12]++;
  const config =
  /* istanbul ignore next */
  (cov_t0u8xt9l2().s[68]++, {
    required: process.env.N8N_MCP_AUTH_REQUIRED === 'true',
    defaultBaseUrl: process.env.N8N_BASE_URL,
    defaultApiKey: process.env.N8N_API_KEY,
    validateConnection: process.env.N8N_MCP_VALIDATE_CONNECTION !== 'false',
    cacheDuration: process.env.N8N_MCP_AUTH_CACHE_DURATION ?
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[25][0]++, parseInt(process.env.N8N_MCP_AUTH_CACHE_DURATION)) :
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[25][1]++, undefined),
    defaultRoles:
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[26][0]++, process.env.N8N_MCP_DEFAULT_ROLES?.split(',')) ||
    /* istanbul ignore next */
    (cov_t0u8xt9l2().b[26][1]++, undefined)
  });
  /* istanbul ignore next */
  cov_t0u8xt9l2().s[69]++;
  return new N8nAuthProvider(config);
}
/**
 * Default n8n authentication provider instance
 */
export const defaultN8nAuth =
/* istanbul ignore next */
(cov_t0u8xt9l2().s[70]++, createN8nAuth());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,