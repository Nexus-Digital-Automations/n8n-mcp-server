{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nTag, CreateTagRequest, UpdateTagRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst TagIdSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n});\n\nconst WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst ListTagsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateTagSchema = z.object({\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateTagSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateWorkflowTagsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  tagIds: z.array(z.string()).min(0, 'Tag IDs must be an array'),\n});\n\n// Tool registration function\nexport function createTagTools(getClient: () => N8nClient | null, server: any) {\n  // List tags tool\n  server.addTool({\n    name: 'list-tags',\n    description: 'List all tags in the n8n instance with pagination support and usage statistics',\n    parameters: ListTagsSchema,\n    annotations: {\n      title: 'List n8n Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getTags(options);\n\n        if (response.data.length === 0) {\n          return 'No tags found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} tag(s):\\n\\n`;\n\n        response.data.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}**\\n`;\n          result += `   - ID: ${tag.id}\\n`;\n\n          if (tag.usageCount !== undefined) {\n            result += `   - Usage Count: ${tag.usageCount}\\n`;\n          }\n\n          if (tag.createdAt) {\n            result += `   - Created: ${new Date(tag.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (tag.updatedAt) {\n            result += `   - Updated: ${new Date(tag.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n📄 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list tags: ${error.message}`);\n        }\n        throw new UserError('Failed to list tags with unknown error');\n      }\n    },\n  });\n\n  // Get tag tool\n  server.addTool({\n    name: 'get-tag',\n    description: 'Get detailed information about a specific tag by ID',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Get Tag Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tag = await client.getTag(args.tagId);\n\n        let result = `# Tag: ${tag.name}\\n\\n`;\n        result += `**ID:** ${tag.id}\\n`;\n        result += `**Name:** ${tag.name}\\n`;\n\n        if (tag.usageCount !== undefined) {\n          result += `**Usage Count:** ${tag.usageCount}\\n`;\n        }\n\n        if (tag.createdAt) {\n          result += `**Created:** ${new Date(tag.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (tag.updatedAt) {\n          result += `**Updated:** ${new Date(tag.updatedAt).toLocaleString()}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get tag: ${error.message}`);\n        }\n        throw new UserError('Failed to get tag with unknown error');\n      }\n    },\n  });\n\n  // Create tag tool\n  server.addTool({\n    name: 'create-tag',\n    description: 'Create a new tag in n8n for organizing workflows',\n    parameters: CreateTagSchema,\n    annotations: {\n      title: 'Create New Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tagData: CreateTagRequest = {\n          name: args.name,\n        };\n\n        const tag = await client.createTag(tagData);\n\n        return `✅ Successfully created tag \"${tag.name}\" with ID: ${tag.id}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create tag: ${error.message}`);\n        }\n        throw new UserError('Failed to create tag with unknown error');\n      }\n    },\n  });\n\n  // Update tag tool\n  server.addTool({\n    name: 'update-tag',\n    description: \"Update a tag's name in n8n\",\n    parameters: UpdateTagSchema,\n    annotations: {\n      title: 'Update Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { tagId, ...updateData } = args;\n        const tagData: UpdateTagRequest = {\n          name: updateData.name,\n        };\n\n        const tag = await client.updateTag(tagId, tagData);\n\n        return `✅ Successfully updated tag to \"${tag.name}\" (ID: ${tag.id})`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update tag: ${error.message}`);\n        }\n        throw new UserError('Failed to update tag with unknown error');\n      }\n    },\n  });\n\n  // Delete tag tool\n  server.addTool({\n    name: 'delete-tag',\n    description:\n      'Delete a tag from n8n permanently. This will remove the tag from all workflows using it',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Delete Tag',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteTag(args.tagId);\n        return `✅ Successfully deleted tag with ID: ${args.tagId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete tag: ${error.message}`);\n        }\n        throw new UserError('Failed to delete tag with unknown error');\n      }\n    },\n  });\n\n  // Get workflow tags tool\n  server.addTool({\n    name: 'get-workflow-tags',\n    description: 'Get all tags assigned to a specific workflow',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Get Workflow Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(args.workflowId);\n\n        if (tags.length === 0) {\n          return `No tags found for workflow ID: ${args.workflowId}`;\n        }\n\n        let result = `Found ${tags.length} tag(s) for workflow ${args.workflowId}:\\n\\n`;\n\n        tags.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}** (ID: ${tag.id})\\n`;\n        });\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow tags with unknown error');\n      }\n    },\n  });\n\n  // Update workflow tags tool\n  server.addTool({\n    name: 'update-workflow-tags',\n    description:\n      'Update the tags assigned to a workflow. This replaces all existing tags with the provided list',\n    parameters: UpdateWorkflowTagsSchema,\n    annotations: {\n      title: 'Update Workflow Tags',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateWorkflowTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.updateWorkflowTags(args.workflowId, args.tagIds);\n\n        const tagCount = args.tagIds.length;\n        return `✅ Successfully updated workflow ${args.workflowId} with ${tagCount} tag(s)`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to update workflow tags with unknown error');\n      }\n    },\n  });\n}\n"],"version":3}