{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/users.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/users.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createUserTools } from '../../../src/tools/users';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nUser, CreateUserRequest, UpdateUserRequest } from '../../../src/types/n8n';\nimport { UserError } from 'fastmcp';\n\ndescribe('User Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register user tools\n    createUserTools(getClient, mockServer);\n  });\n\n  it('should register all user tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(5);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-users');\n    expect(toolNames).toContain('get-user');\n    expect(toolNames).toContain('create-user');\n    expect(toolNames).toContain('update-user');\n    expect(toolNames).toContain('delete-user');\n  });\n\n  describe('list-users tool', () => {\n    let listUsersTool: any;\n\n    beforeEach(() => {\n      listUsersTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-users'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(listUsersTool.name).toBe('list-users');\n      expect(listUsersTool.description).toContain('List all users in the n8n instance');\n      expect(listUsersTool.annotations).toEqual({\n        title: 'List n8n Users',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should list users successfully with full data', async () => {\n      const mockUsers: N8nUser[] = [\n        {\n          id: 'user-1',\n          email: 'john.doe@example.com',\n          firstName: 'John',\n          lastName: 'Doe',\n          role: 'admin',\n          disabled: false,\n          createdAt: '2023-01-01T00:00:00.000Z',\n          lastSeenAt: '2023-01-15T00:00:00.000Z',\n        },\n        {\n          id: 'user-2',\n          email: 'jane.smith@example.com',\n          firstName: 'Jane',\n          lastName: 'Smith',\n          role: 'member',\n          disabled: true,\n          createdAt: '2023-01-02T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getUsers.mockResolvedValue({\n        data: mockUsers,\n        nextCursor: 'next-cursor',\n      });\n\n      const result = await listUsersTool.execute({ limit: 10 });\n\n      expect(mockClient.getUsers).toHaveBeenCalledWith({ limit: 10 });\n      expect(result).toContain('Found 2 user(s)');\n      expect(result).toContain('**John Doe**');\n      expect(result).toContain('ID: user-1');\n      expect(result).toContain('Email: john.doe@example.com');\n      expect(result).toContain('Role: admin');\n      expect(result).toContain('Status: 🟢 Active');\n      // Use more flexible date matching to handle timezone differences\n      expect(result).toMatch(/Created: (12\\/31\\/2022|1\\/1\\/2023)/);\n      expect(result).toMatch(/Last Seen: (1\\/14\\/2023|1\\/15\\/2023)/);\n      expect(result).toContain('**Jane Smith**');\n      expect(result).toContain('ID: user-2');\n      expect(result).toContain('Email: jane.smith@example.com');\n      expect(result).toContain('Role: member');\n      expect(result).toContain('Status: 🔴 Disabled');\n      expect(result).toContain('Use cursor \"next-cursor\" to get the next page');\n    });\n\n    it('should list users with minimal data', async () => {\n      const mockUsers: N8nUser[] = [\n        {\n          id: 'user-1',\n          email: 'simple@example.com',\n          firstName: 'Simple',\n          lastName: 'User',\n          role: 'member',\n          disabled: false,\n        },\n      ];\n\n      mockClient.getUsers.mockResolvedValue({\n        data: mockUsers,\n      });\n\n      const result = await listUsersTool.execute({});\n\n      expect(mockClient.getUsers).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 1 user(s)');\n      expect(result).toContain('**Simple User**');\n      expect(result).toContain('ID: user-1');\n      expect(result).toContain('Email: simple@example.com');\n      expect(result).toContain('Role: member');\n      expect(result).toContain('Status: 🟢 Active');\n      expect(result).not.toContain('Created:');\n      expect(result).not.toContain('Last Seen:');\n      expect(result).not.toContain('cursor');\n    });\n\n    it('should handle empty user list', async () => {\n      mockClient.getUsers.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listUsersTool.execute({});\n\n      expect(result).toBe('No users found in the n8n instance.');\n    });\n\n    it('should handle pagination parameters', async () => {\n      mockClient.getUsers.mockResolvedValue({ data: [] });\n\n      await listUsersTool.execute({ limit: 50, cursor: 'test-cursor' });\n\n      expect(mockClient.getUsers).toHaveBeenCalledWith({\n        limit: 50,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createUserTools(getClientNull, nullClientServer);\n\n      const listUsersToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-users'\n      )?.[0];\n\n      expect(listUsersToolWithNullClient).toBeDefined();\n      await expect((listUsersToolWithNullClient as any).execute({})).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('API request failed');\n      mockClient.getUsers.mockRejectedValue(apiError);\n\n      await expect(listUsersTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list users: API request failed')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getUsers.mockRejectedValue('Unknown error string');\n\n      await expect(listUsersTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list users with unknown error')\n      );\n    });\n  });\n\n  describe('get-user tool', () => {\n    let getUserTool: any;\n\n    beforeEach(() => {\n      getUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-user'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(getUserTool.name).toBe('get-user');\n      expect(getUserTool.description).toContain('Get detailed information about a specific user');\n      expect(getUserTool.annotations).toEqual({\n        title: 'Get User Details',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should get user successfully with full data', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-1',\n        email: 'john.doe@example.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'admin',\n        disabled: false,\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z',\n        lastSeenAt: '2023-01-15T00:00:00.000Z',\n      };\n\n      mockClient.getUser.mockResolvedValue(mockUser);\n\n      const result = await getUserTool.execute({ userId: 'user-1' });\n\n      expect(mockClient.getUser).toHaveBeenCalledWith('user-1');\n      expect(result).toContain('# User: John Doe');\n      expect(result).toContain('**ID:** user-1');\n      expect(result).toContain('**Email:** john.doe@example.com');\n      expect(result).toContain('**Role:** admin');\n      expect(result).toContain('**Status:** 🟢 Active');\n      expect(result).toContain('**Created:**');\n      expect(result).toContain('**Updated:**');\n      expect(result).toContain('**Last Seen:**');\n    });\n\n    it('should get user with minimal data', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-1',\n        email: 'simple@example.com',\n        firstName: 'Simple',\n        lastName: 'User',\n        role: 'member',\n        disabled: true,\n      };\n\n      mockClient.getUser.mockResolvedValue(mockUser);\n\n      const result = await getUserTool.execute({ userId: 'user-1' });\n\n      expect(result).toContain('# User: Simple User');\n      expect(result).toContain('**ID:** user-1');\n      expect(result).toContain('**Email:** simple@example.com');\n      expect(result).toContain('**Role:** member');\n      expect(result).toContain('**Status:** 🔴 Disabled');\n      expect(result).not.toContain('**Created:**');\n      expect(result).not.toContain('**Updated:**');\n      expect(result).not.toContain('**Last Seen:**');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createUserTools(getClientNull, nullClientServer);\n\n      const getUserToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-user'\n      )?.[0];\n\n      expect(getUserToolWithNullClient).toBeDefined();\n      await expect(\n        (getUserToolWithNullClient as any).execute({ userId: 'user-1' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('User not found');\n      mockClient.getUser.mockRejectedValue(apiError);\n\n      await expect(getUserTool.execute({ userId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to get user: User not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getUser.mockRejectedValue('Unknown error string');\n\n      await expect(getUserTool.execute({ userId: 'user-1' })).rejects.toThrow(\n        new UserError('Failed to get user with unknown error')\n      );\n    });\n  });\n\n  describe('create-user tool', () => {\n    let createUserTool: any;\n\n    beforeEach(() => {\n      createUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-user'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(createUserTool.name).toBe('create-user');\n      expect(createUserTool.description).toContain('Create a new user in n8n');\n      expect(createUserTool.annotations).toEqual({\n        title: 'Create New User',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should create user successfully with all fields', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-new',\n        email: 'new.user@example.com',\n        firstName: 'New',\n        lastName: 'User',\n        role: 'admin',\n        disabled: false,\n      };\n\n      mockClient.createUser.mockResolvedValue(mockUser);\n\n      const result = await createUserTool.execute({\n        email: 'new.user@example.com',\n        firstName: 'New',\n        lastName: 'User',\n        password: 'password123',\n        role: 'admin',\n      });\n\n      expect(mockClient.createUser).toHaveBeenCalledWith({\n        email: 'new.user@example.com',\n        firstName: 'New',\n        lastName: 'User',\n        password: 'password123',\n        role: 'admin',\n      });\n      expect(result).toContain('✅ Successfully created user \"New User\" with ID: user-new');\n      expect(result).toContain('Email: new.user@example.com');\n      expect(result).toContain('Role: admin');\n    });\n\n    it('should create user successfully with default role', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-new',\n        email: 'simple.user@example.com',\n        firstName: 'Simple',\n        lastName: 'User',\n        role: 'member',\n        disabled: false,\n      };\n\n      mockClient.createUser.mockResolvedValue(mockUser);\n\n      const result = await createUserTool.execute({\n        email: 'simple.user@example.com',\n        firstName: 'Simple',\n        lastName: 'User',\n        password: 'password123',\n      });\n\n      // The implementation should handle undefined role by defaulting to 'member'\n      expect(mockClient.createUser).toHaveBeenCalledWith({\n        email: 'simple.user@example.com',\n        firstName: 'Simple',\n        lastName: 'User',\n        password: 'password123',\n        role: undefined, // This is what actually gets passed\n      });\n      expect(result).toContain('✅ Successfully created user \"Simple User\" with ID: user-new');\n      expect(result).toContain('Email: simple.user@example.com');\n      expect(result).toContain('Role: member');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createUserTools(getClientNull, nullClientServer);\n\n      const createUserToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-user'\n      )?.[0];\n\n      expect(createUserToolWithNullClient).toBeDefined();\n      await expect(\n        (createUserToolWithNullClient as any).execute({\n          email: 'test@example.com',\n          firstName: 'Test',\n          lastName: 'User',\n          password: 'password123',\n        })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Email already exists');\n      mockClient.createUser.mockRejectedValue(apiError);\n\n      await expect(\n        createUserTool.execute({\n          email: 'duplicate@example.com',\n          firstName: 'Duplicate',\n          lastName: 'User',\n          password: 'password123',\n        })\n      ).rejects.toThrow(new UserError('Failed to create user: Email already exists'));\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.createUser.mockRejectedValue('Unknown error string');\n\n      await expect(\n        createUserTool.execute({\n          email: 'test@example.com',\n          firstName: 'Test',\n          lastName: 'User',\n          password: 'password123',\n        })\n      ).rejects.toThrow(new UserError('Failed to create user with unknown error'));\n    });\n  });\n\n  describe('update-user tool', () => {\n    let updateUserTool: any;\n\n    beforeEach(() => {\n      updateUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-user'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(updateUserTool.name).toBe('update-user');\n      expect(updateUserTool.description).toContain(\"Update a user's information\");\n      expect(updateUserTool.annotations).toEqual({\n        title: 'Update User',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should update user successfully with all fields', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-1',\n        email: 'updated@example.com',\n        firstName: 'Updated',\n        lastName: 'User',\n        role: 'admin',\n        disabled: true,\n      };\n\n      mockClient.updateUser.mockResolvedValue(mockUser);\n\n      const result = await updateUserTool.execute({\n        userId: 'user-1',\n        email: 'updated@example.com',\n        firstName: 'Updated',\n        lastName: 'User',\n        role: 'admin',\n        disabled: true,\n      });\n\n      expect(mockClient.updateUser).toHaveBeenCalledWith('user-1', {\n        email: 'updated@example.com',\n        firstName: 'Updated',\n        lastName: 'User',\n        role: 'admin',\n        disabled: true,\n      });\n      expect(result).toContain('✅ Successfully updated user \"Updated User\" (ID: user-1)');\n      expect(result).toContain('Email: updated@example.com');\n      expect(result).toContain('Role: admin');\n      expect(result).toContain('Status: 🔴 Disabled');\n    });\n\n    it('should update user successfully with partial fields', async () => {\n      const mockUser: N8nUser = {\n        id: 'user-1',\n        email: 'original@example.com',\n        firstName: 'Updated',\n        lastName: 'Name',\n        role: 'member',\n        disabled: false,\n      };\n\n      mockClient.updateUser.mockResolvedValue(mockUser);\n\n      const result = await updateUserTool.execute({\n        userId: 'user-1',\n        firstName: 'Updated',\n        lastName: 'Name',\n      });\n\n      expect(mockClient.updateUser).toHaveBeenCalledWith('user-1', {\n        firstName: 'Updated',\n        lastName: 'Name',\n      });\n      expect(result).toContain('✅ Successfully updated user \"Updated Name\" (ID: user-1)');\n      expect(result).toContain('Email: original@example.com');\n      expect(result).toContain('Role: member');\n      expect(result).toContain('Status: 🟢 Active');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createUserTools(getClientNull, nullClientServer);\n\n      const updateUserToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-user'\n      )?.[0];\n\n      expect(updateUserToolWithNullClient).toBeDefined();\n      await expect(\n        (updateUserToolWithNullClient as any).execute({ userId: 'user-1', firstName: 'Updated' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('User not found');\n      mockClient.updateUser.mockRejectedValue(apiError);\n\n      await expect(\n        updateUserTool.execute({ userId: 'invalid-id', firstName: 'Updated' })\n      ).rejects.toThrow(new UserError('Failed to update user: User not found'));\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.updateUser.mockRejectedValue('Unknown error string');\n\n      await expect(\n        updateUserTool.execute({ userId: 'user-1', firstName: 'Updated' })\n      ).rejects.toThrow(new UserError('Failed to update user with unknown error'));\n    });\n  });\n\n  describe('delete-user tool', () => {\n    let deleteUserTool: any;\n\n    beforeEach(() => {\n      deleteUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-user'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(deleteUserTool.name).toBe('delete-user');\n      expect(deleteUserTool.description).toContain('Delete a user from n8n permanently');\n      expect(deleteUserTool.annotations).toEqual({\n        title: 'Delete User',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should delete user successfully', async () => {\n      mockClient.deleteUser.mockResolvedValue(undefined);\n\n      const result = await deleteUserTool.execute({\n        userId: 'user-1',\n      });\n\n      expect(mockClient.deleteUser).toHaveBeenCalledWith('user-1');\n      expect(result).toBe('✅ Successfully deleted user with ID: user-1');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createUserTools(getClientNull, nullClientServer);\n\n      const deleteUserToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-user'\n      )?.[0];\n\n      expect(deleteUserToolWithNullClient).toBeDefined();\n      await expect(\n        (deleteUserToolWithNullClient as any).execute({ userId: 'user-1' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('User not found');\n      mockClient.deleteUser.mockRejectedValue(apiError);\n\n      await expect(deleteUserTool.execute({ userId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to delete user: User not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteUser.mockRejectedValue('Unknown error string');\n\n      await expect(deleteUserTool.execute({ userId: 'user-1' })).rejects.toThrow(\n        new UserError('Failed to delete user with unknown error')\n      );\n    });\n  });\n\n  describe('parameter validation', () => {\n    it('should validate user ID parameters', () => {\n      const getUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-user'\n      )[0];\n\n      expect(getUserTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate create user parameters', () => {\n      const createUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-user'\n      )[0];\n\n      expect(createUserTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate update user parameters', () => {\n      const updateUserTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-user'\n      )[0];\n\n      expect(updateUserTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate list users parameters', () => {\n      const listUsersTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-users'\n      )[0];\n\n      expect(listUsersTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n  });\n});\n"],"version":3}