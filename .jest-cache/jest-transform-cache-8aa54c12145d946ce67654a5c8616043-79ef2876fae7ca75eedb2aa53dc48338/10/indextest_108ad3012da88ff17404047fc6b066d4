6a5b583201872592bf5f91b39d0afa65
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock all dependencies before imports
globals_1.jest.mock('@modelcontextprotocol/sdk/server/index.js', () => ({
    Server: globals_1.jest.fn(),
}));
globals_1.jest.mock('@modelcontextprotocol/sdk/server/stdio.js', () => ({
    StdioServerTransport: globals_1.jest.fn(),
}));
globals_1.jest.mock('@modelcontextprotocol/sdk/types.js', () => ({
    ListToolsRequestSchema: { type: 'list_tools' },
    CallToolRequestSchema: { type: 'call_tool' },
}));
globals_1.jest.mock('node-fetch', () => globals_1.jest.fn());
// Mock process to prevent actual exit
const originalProcessExit = process.exit;
(0, globals_1.describe)('src/index.ts - Main MCP Server Entry Point', () => {
    let mockServer;
    let mockTransport;
    let mockFetch;
    let mockConsoleError;
    (0, globals_1.beforeEach)(() => {
        // Mock console.error to capture log messages
        mockConsoleError = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
        // Mock Server class
        mockServer = {
            setRequestHandler: globals_1.jest.fn(),
            connect: globals_1.jest.fn().mockResolvedValue(undefined),
        };
        const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
        Server.mockImplementation(() => mockServer);
        // Mock StdioServerTransport
        mockTransport = {};
        const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
        StdioServerTransport.mockImplementation(() => mockTransport);
        // Mock node-fetch
        mockFetch = require('node-fetch');
        // Mock process.exit to prevent actual exit during tests
        process.exit = globals_1.jest.fn();
        // Clear all mocks
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // Restore original functions
        process.exit = originalProcessExit;
        mockConsoleError.mockRestore();
        // Clear module cache to ensure fresh imports
        globals_1.jest.resetModules();
    });
    (0, globals_1.describe)('Server Initialization', () => {
        (0, globals_1.it)('should create Server with correct configuration', async () => {
            const { Server } = require('@modelcontextprotocol/sdk/server/index.js');
            // Import the module to access the server
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(Server).toHaveBeenCalledWith({
                name: 'n8n-integration',
                version: '1.0.0',
            }, {
                capabilities: {
                    tools: {},
                },
            });
        });
        (0, globals_1.it)('should create StdioServerTransport', async () => {
            const { StdioServerTransport } = require('@modelcontextprotocol/sdk/server/stdio.js');
            // Import the module and call startServer
            const { startServer } = await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            await startServer();
            (0, globals_1.expect)(StdioServerTransport).toHaveBeenCalledWith();
        });
        (0, globals_1.it)('should connect server to transport', async () => {
            // Import the module and call startServer
            const { startServer } = await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            await startServer();
            (0, globals_1.expect)(mockServer.connect).toHaveBeenCalledWith(mockTransport);
        });
        (0, globals_1.it)('should log startup message', async () => {
            // Import the module and call startServer
            const { startServer } = await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            await startServer();
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('N8N MCP Server running on stdio');
        });
    });
    (0, globals_1.describe)('Request Handlers Registration', () => {
        (0, globals_1.it)('should register ListToolsRequestSchema handler', async () => {
            const { ListToolsRequestSchema } = require('@modelcontextprotocol/sdk/types.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledWith(ListToolsRequestSchema, globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should register CallToolRequestSchema handler', async () => {
            const { CallToolRequestSchema } = require('@modelcontextprotocol/sdk/types.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledWith(CallToolRequestSchema, globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should register exactly 2 request handlers', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledTimes(2);
        });
    });
    (0, globals_1.describe)('Tools Registration', () => {
        let listToolsHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            // Extract the ListTools handler
            const listToolsCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'list_tools');
            if (listToolsCalls.length > 0) {
                listToolsHandler = listToolsCalls[0][1];
            }
        });
        (0, globals_1.it)('should return comprehensive list of tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            (0, globals_1.expect)(result).toHaveProperty('tools');
            (0, globals_1.expect)(result.tools).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.tools.length).toBeGreaterThan(20); // Should have many tools
        });
        (0, globals_1.it)('should include essential workflow tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('init-n8n');
            (0, globals_1.expect)(toolNames).toContain('list-workflows');
            (0, globals_1.expect)(toolNames).toContain('get-workflow');
            (0, globals_1.expect)(toolNames).toContain('create-workflow');
            (0, globals_1.expect)(toolNames).toContain('update-workflow');
            (0, globals_1.expect)(toolNames).toContain('delete-workflow');
            (0, globals_1.expect)(toolNames).toContain('activate-workflow');
            (0, globals_1.expect)(toolNames).toContain('deactivate-workflow');
        });
        (0, globals_1.it)('should include user management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-users');
            (0, globals_1.expect)(toolNames).toContain('create-users');
            (0, globals_1.expect)(toolNames).toContain('get-user');
            (0, globals_1.expect)(toolNames).toContain('delete-user');
        });
        (0, globals_1.it)('should include project management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-projects');
            (0, globals_1.expect)(toolNames).toContain('create-project');
            (0, globals_1.expect)(toolNames).toContain('delete-project');
            (0, globals_1.expect)(toolNames).toContain('update-project');
        });
        (0, globals_1.it)('should include execution management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-executions');
            (0, globals_1.expect)(toolNames).toContain('get-execution');
            (0, globals_1.expect)(toolNames).toContain('delete-execution');
        });
        (0, globals_1.it)('should include variable management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-variables');
            (0, globals_1.expect)(toolNames).toContain('create-variable');
            (0, globals_1.expect)(toolNames).toContain('delete-variable');
        });
        (0, globals_1.it)('should include credential management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('create-credential');
            (0, globals_1.expect)(toolNames).toContain('delete-credential');
            (0, globals_1.expect)(toolNames).toContain('get-credential-schema');
        });
        (0, globals_1.it)('should include tag management tools', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('create-tag');
            (0, globals_1.expect)(toolNames).toContain('list-tags');
            (0, globals_1.expect)(toolNames).toContain('get-tag');
            (0, globals_1.expect)(toolNames).toContain('update-tag');
            (0, globals_1.expect)(toolNames).toContain('delete-tag');
            (0, globals_1.expect)(toolNames).toContain('get-workflow-tags');
            (0, globals_1.expect)(toolNames).toContain('update-workflow-tags');
        });
        (0, globals_1.it)('should include audit tool', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('generate-audit');
        });
        (0, globals_1.it)('should have proper tool schema structure', async () => {
            if (!listToolsHandler) {
                throw new Error('ListTools handler not found');
            }
            const result = await listToolsHandler();
            const initTool = result.tools.find((tool) => tool.name === 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('name', 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('description');
            (0, globals_1.expect)(initTool).toHaveProperty('inputSchema');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('type', 'object');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('properties');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('required');
        });
    });
    (0, globals_1.describe)('Global State Management', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            // Extract the CallTool handler
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
        });
        (0, globals_1.it)('should maintain client instances map', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Test that the clients map is used by trying to use an uninitialized client
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId: 'non-existent' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Client not initialized');
        });
        (0, globals_1.it)('should handle invalid tool names', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const result = await callToolHandler({
                params: {
                    name: 'invalid-tool',
                    arguments: {},
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Unknown tool: invalid-tool');
        });
    });
    (0, globals_1.describe)('N8nClient Integration', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
        });
        (0, globals_1.it)('should handle successful n8n connection initialization', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Mock successful fetch response
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValueOnce(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content[0].text).toContain('Successfully connected to n8n');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:5678/api/v1/workflows', globals_1.expect.objectContaining({
                headers: globals_1.expect.objectContaining({
                    'X-N8N-API-KEY': 'test-key',
                }),
            }));
        });
        (0, globals_1.it)('should handle connection errors gracefully', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Mock fetch to throw an error
            mockFetch.mockRejectedValueOnce(new Error('Connection failed'));
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Failed to connect to n8n');
        });
        (0, globals_1.it)('should handle API errors with proper error messages', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Mock fetch to return an error response
            const mockResponse = {
                ok: false,
                status: 401,
                text: globals_1.jest
                    .fn()
                    .mockResolvedValue(JSON.stringify({ message: 'Unauthorized' })),
            };
            mockFetch.mockResolvedValueOnce(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'invalid-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('N8N API error');
        });
        (0, globals_1.it)('should handle 204 No Content responses', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // First call for init-n8n (mock successful connection test)
            const mockSuccessResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            // Second call that returns 204
            const mock204Response = {
                ok: true,
                status: 204,
                json: globals_1.jest.fn(),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValueOnce(mockSuccessResponse).mockResolvedValueOnce(mock204Response);
            // First initialize a client
            const initResult = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(initResult.isError).toBeFalsy();
            // Get the clientId from the response
            const clientIdMatch = initResult.content[0].text.match(/client ID for future operations: (.+)/);
            (0, globals_1.expect)(clientIdMatch).toBeTruthy();
            const clientId = clientIdMatch?.[1];
            // Now test a call that returns 204
            const result = await callToolHandler({
                params: {
                    name: 'create-project',
                    arguments: { clientId, name: 'Test Project' },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
        });
        (0, globals_1.it)('should handle license-related errors specially', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockResponse = {
                ok: false,
                status: 403,
                text: globals_1.jest.fn().mockResolvedValue(JSON.stringify({
                    message: 'This operation requires an enterprise license',
                })),
            };
            mockFetch.mockResolvedValueOnce(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('enterprise license');
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Mock fetch to throw a non-Error object
            mockFetch.mockRejectedValueOnce('String error');
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toBeTruthy();
        });
    });
    (0, globals_1.describe)('Tool Execution Integration', () => {
        let callToolHandler;
        let clientId;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
            // Mock successful n8n connection
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockResponse);
            // Initialize a client
            if (callToolHandler) {
                const initResult = await callToolHandler({
                    params: {
                        name: 'init-n8n',
                        arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                    },
                });
                const clientIdMatch = initResult.content[0].text.match(/client ID for future operations: (.+)/);
                clientId = clientIdMatch?.[1] || '';
            }
        });
        (0, globals_1.it)('should successfully initialize n8n connection', () => {
            (0, globals_1.expect)(clientId).toBeTruthy();
        });
        (0, globals_1.it)('should execute list-workflows tool', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content[0].text).toBeTruthy();
        });
        (0, globals_1.it)('should execute workflow creation with proper parameters', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const result = await callToolHandler({
                params: {
                    name: 'create-workflow',
                    arguments: {
                        clientId,
                        name: 'Test Workflow',
                        nodes: [],
                        connections: {},
                    },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content[0].text).toContain('Successfully created workflow');
        });
        (0, globals_1.it)('should handle workflow activation/deactivation', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const activateResult = await callToolHandler({
                params: {
                    name: 'activate-workflow',
                    arguments: { clientId, id: 'test-workflow-id' },
                },
            });
            (0, globals_1.expect)(activateResult.isError).toBeFalsy();
            (0, globals_1.expect)(activateResult.content[0].text).toContain('Successfully activated workflow');
            const deactivateResult = await callToolHandler({
                params: {
                    name: 'deactivate-workflow',
                    arguments: { clientId, id: 'test-workflow-id' },
                },
            });
            (0, globals_1.expect)(deactivateResult.isError).toBeFalsy();
            (0, globals_1.expect)(deactivateResult.content[0].text).toContain('Successfully deactivated workflow');
        });
        (0, globals_1.it)('should execute user management operations', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const listResult = await callToolHandler({
                params: {
                    name: 'list-users',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-users',
                    arguments: {
                        clientId,
                        users: [{ email: 'test@example.com', role: 'global:member' }],
                    },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute variable management operations', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const listResult = await callToolHandler({
                params: {
                    name: 'list-variables',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-variable',
                    arguments: { clientId, key: 'TEST_VAR', value: 'test-value' },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute execution management operations', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const listResult = await callToolHandler({
                params: {
                    name: 'list-executions',
                    arguments: { clientId, limit: 10 },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const getResult = await callToolHandler({
                params: {
                    name: 'get-execution',
                    arguments: { clientId, id: 123, includeData: true },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute tag management operations', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const createResult = await callToolHandler({
                params: {
                    name: 'create-tag',
                    arguments: { clientId, name: 'Test Tag' },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
            const listResult = await callToolHandler({
                params: {
                    name: 'list-tags',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute audit generation', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const result = await callToolHandler({
                params: {
                    name: 'generate-audit',
                    arguments: {
                        clientId,
                        categories: ['credentials', 'database'],
                        daysAbandonedWorkflow: 30,
                    },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute credential management operations', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const schemaResult = await callToolHandler({
                params: {
                    name: 'get-credential-schema',
                    arguments: { clientId, credentialTypeName: 'httpBasicAuth' },
                },
            });
            (0, globals_1.expect)(schemaResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-credential',
                    arguments: {
                        clientId,
                        name: 'Test Credential',
                        type: 'httpBasicAuth',
                        data: { username: 'test', password: 'pass' },
                    },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
    });
    (0, globals_1.describe)('Response Format Validation', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
        });
        (0, globals_1.it)('should return proper error response structure', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId: 'invalid' },
                },
            });
            (0, globals_1.expect)(result).toHaveProperty('content');
            (0, globals_1.expect)(result).toHaveProperty('isError', true);
            (0, globals_1.expect)(result.content).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.content[0]).toHaveProperty('type', 'text');
            (0, globals_1.expect)(result.content[0]).toHaveProperty('text');
        });
        (0, globals_1.it)('should return proper success response structure', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Mock successful response
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result).toHaveProperty('content');
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.content[0]).toHaveProperty('type', 'text');
            (0, globals_1.expect)(result.content[0]).toHaveProperty('text');
        });
        (0, globals_1.it)('should format JSON responses properly', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockWorkflows = [
                {
                    id: 1,
                    name: 'Test Workflow',
                    active: true,
                    createdAt: '2024-01-01',
                    updatedAt: '2024-01-01',
                    tags: [],
                },
            ];
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: mockWorkflows }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockResponse);
            // First initialize client
            const initResult = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            const clientIdMatch = initResult.content[0].text.match(/client ID for future operations: (.+)/);
            const clientId = clientIdMatch?.[1];
            // Then list workflows
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            const responseText = result.content[0].text;
            (0, globals_1.expect)(() => JSON.parse(responseText)).not.toThrow();
            const parsedResponse = JSON.parse(responseText);
            (0, globals_1.expect)(parsedResponse).toBeInstanceOf(Array);
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('id');
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('name');
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('active');
        });
    });
    (0, globals_1.describe)('N8nClient Class Functionality', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
        });
        (0, globals_1.it)('should normalize baseUrl by removing trailing slash', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678/', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            // Verify the API call was made without trailing slash
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('http://localhost:5678/api/v1/workflows', globals_1.expect.any(Object));
        });
        (0, globals_1.it)('should handle malformed JSON error responses', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockResponse = {
                ok: false,
                status: 500,
                text: globals_1.jest.fn().mockResolvedValue('Internal Server Error'),
            };
            mockFetch.mockResolvedValue(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('N8N API error: Internal Server Error');
        });
    });
    (0, globals_1.describe)('N8nClient Method Coverage', () => {
        let callToolHandler;
        let clientId;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCalls = mockServer.setRequestHandler.mock.calls.filter((call) => call[0].type === 'call_tool');
            if (callToolCalls.length > 0) {
                callToolHandler = callToolCalls[0][1];
            }
            // Initialize a client for coverage testing
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockResponse);
            if (callToolHandler) {
                const initResult = await callToolHandler({
                    params: {
                        name: 'init-n8n',
                        arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                    },
                });
                const clientIdMatch = initResult.content[0].text.match(/client ID for future operations: (.+)/);
                clientId = clientIdMatch?.[1] || '';
            }
        });
        (0, globals_1.it)('should cover workflow methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockWorkflowResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ id: 1, name: 'Test Workflow' }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockWorkflowResponse);
            // Test get-workflow
            const getResult = await callToolHandler({
                params: {
                    name: 'get-workflow',
                    arguments: { clientId, id: '1' },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
            // Test update-workflow
            const updateResult = await callToolHandler({
                params: {
                    name: 'update-workflow',
                    arguments: { clientId, id: '1', workflow: { name: 'Updated Workflow' } },
                },
            });
            (0, globals_1.expect)(updateResult.isError).toBeFalsy();
            // Test delete-workflow
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-workflow',
                    arguments: { clientId, id: '1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover project methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockProjectResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ id: 'project-1', name: 'Test Project' }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockProjectResponse);
            // Test update-project (this method exists)
            const updateResult = await callToolHandler({
                params: {
                    name: 'update-project',
                    arguments: { clientId, id: 'project-1', name: 'Updated Project' },
                },
            });
            (0, globals_1.expect)(updateResult.isError).toBeFalsy();
            // Test delete-project (this method exists)
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-project',
                    arguments: { clientId, id: 'project-1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover user methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockUserResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ id: 'user-1', email: 'test@example.com' }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockUserResponse);
            // Test get-user
            const getResult = await callToolHandler({
                params: {
                    name: 'get-user',
                    arguments: { clientId, id: 'user-1' },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
            // Test delete-user
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-user',
                    arguments: { clientId, id: 'user-1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover variable methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockVariableResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ id: 'var-1', key: 'TEST_VAR', value: 'test' }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockVariableResponse);
            // Test delete-variable (this method exists)
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-variable',
                    arguments: { clientId, id: 'var-1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover execution methods with data parameter', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockExecutionResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({
                    id: 123,
                    finished: true,
                    data: { resultData: { runData: {} } }
                }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockExecutionResponse);
            // Test get-execution with includeData parameter
            const getResult = await callToolHandler({
                params: {
                    name: 'get-execution',
                    arguments: { clientId, id: 123, includeData: false },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover tag methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockTagResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ id: 'tag-1', name: 'Test Tag' }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockTagResponse);
            // Test get-tag
            const getResult = await callToolHandler({
                params: {
                    name: 'get-tag',
                    arguments: { clientId, id: 'tag-1' },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
            // Test delete-tag
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-tag',
                    arguments: { clientId, id: 'tag-1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
            // Test get-workflow-tags
            const workflowTagsResult = await callToolHandler({
                params: {
                    name: 'get-workflow-tags',
                    arguments: { clientId, workflowId: '1' },
                },
            });
            (0, globals_1.expect)(workflowTagsResult.isError).toBeFalsy();
            // Test update-workflow-tags
            const updateTagsResult = await callToolHandler({
                params: {
                    name: 'update-workflow-tags',
                    arguments: { clientId, workflowId: '1', tags: ['tag-1', 'tag-2'] },
                },
            });
            (0, globals_1.expect)(updateTagsResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should cover credential methods', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            const mockCredentialResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({
                    id: 'cred-1',
                    name: 'Test Credential',
                    type: 'httpBasicAuth'
                }),
                text: globals_1.jest.fn().mockResolvedValue(''),
            };
            mockFetch.mockResolvedValue(mockCredentialResponse);
            // Test delete-credential (this method exists)
            const deleteResult = await callToolHandler({
                params: {
                    name: 'delete-credential',
                    arguments: { clientId, id: 'cred-1' },
                },
            });
            (0, globals_1.expect)(deleteResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should test error handling in different contexts', async () => {
            if (!callToolHandler) {
                throw new Error('CallTool handler not found');
            }
            // Test with network error
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            const networkErrorResult = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(networkErrorResult.isError).toBe(true);
            // Test with HTTP 404 error
            const mock404Response = {
                ok: false,
                status: 404,
                text: globals_1.jest.fn().mockResolvedValue('{"message": "Not found"}'),
            };
            mockFetch.mockResolvedValueOnce(mock404Response);
            const notFoundResult = await callToolHandler({
                params: {
                    name: 'get-workflow',
                    arguments: { clientId, id: '999' },
                },
            });
            (0, globals_1.expect)(notFoundResult.isError).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,