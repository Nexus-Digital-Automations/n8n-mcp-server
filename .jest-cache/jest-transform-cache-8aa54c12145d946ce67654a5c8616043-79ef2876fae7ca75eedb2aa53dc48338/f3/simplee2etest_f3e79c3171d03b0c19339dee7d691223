33658e9cfd10bff6cb633e8f93a51c8a
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const child_process_1 = require("child_process");
const timers_1 = require("timers");
const http = __importStar(require("http"));
const url_1 = require("url");
const mockN8nServer_1 = require("../mocks/mockN8nServer");
/**
 * Simplified E2E tests for MCP protocol functionality
 * These tests verify the basic MCP server functionality without complex infrastructure
 */
(0, globals_1.describe)('Simple E2E MCP Tests', () => {
    let mockN8nServer;
    let mcpServerProcess;
    const mockServerPort = 3004;
    (0, globals_1.beforeAll)(async () => {
        // Start mock n8n server
        mockN8nServer = new mockN8nServer_1.MockN8nServer(mockServerPort);
        await mockN8nServer.start();
        console.log('Mock n8n server started for simple E2E tests');
    }, 15000);
    (0, globals_1.afterAll)(async () => {
        // Clean up mock server
        if (mockN8nServer) {
            await mockN8nServer.stop();
        }
        // Clean up MCP server process
        if (mcpServerProcess) {
            mcpServerProcess.kill('SIGTERM');
        }
        console.log('Simple E2E test cleanup completed');
    }, 10000);
    (0, globals_1.it)('should successfully start MCP server and respond to basic requests', async () => {
        const testMCPServer = () => {
            return new Promise((resolve, reject) => {
                // Start the MCP server
                mcpServerProcess = (0, child_process_1.spawn)('node', ['build/index-fastmcp.js'], {
                    env: {
                        ...process.env,
                        N8N_BASE_URL: mockN8nServer.getUrl(),
                        N8N_API_KEY: 'test-api-key',
                        N8N_MCP_TRANSPORT: 'stdio',
                    },
                    stdio: ['pipe', 'pipe', 'pipe'],
                    cwd: process.cwd(),
                });
                let hasSucceeded = false;
                let outputData = '';
                const timeout = (0, timers_1.setTimeout)(() => {
                    if (!hasSucceeded) {
                        hasSucceeded = true;
                        if (mcpServerProcess && mcpServerProcess.stderr) {
                            mcpServerProcess.stderr.off('data', stderrHandler);
                        }
                        resolve(true); // Consider it successful if no errors occurred
                    }
                }, 8000);
                mcpServerProcess.stdout?.on('data', data => {
                    outputData += data.toString();
                    console.log('MCP Server output:', data.toString());
                });
                const stderrHandler = (data) => {
                    const error = data.toString();
                    if (!hasSucceeded) {
                        console.log('MCP Server stderr:', error);
                    }
                    // Check for critical errors
                    if (error.includes('EADDRINUSE') || error.includes('Error:')) {
                        (0, timers_1.clearTimeout)(timeout);
                        if (!hasSucceeded) {
                            hasSucceeded = true;
                            if (mcpServerProcess && mcpServerProcess.stderr) {
                                mcpServerProcess.stderr.off('data', stderrHandler);
                            }
                            reject(new Error(`MCP server error: ${error}`));
                        }
                    }
                };
                mcpServerProcess.stderr?.on('data', stderrHandler);
                mcpServerProcess.on('error', error => {
                    (0, timers_1.clearTimeout)(timeout);
                    if (!hasSucceeded) {
                        hasSucceeded = true;
                        if (mcpServerProcess && mcpServerProcess.stderr) {
                            mcpServerProcess.stderr.off('data', stderrHandler);
                        }
                        reject(new Error(`Failed to start MCP server: ${error.message}`));
                    }
                });
                mcpServerProcess.on('exit', (code, signal) => {
                    (0, timers_1.clearTimeout)(timeout);
                    if (code !== 0 && code !== null && !hasSucceeded) {
                        hasSucceeded = true;
                        if (mcpServerProcess && mcpServerProcess.stderr) {
                            mcpServerProcess.stderr.off('data', stderrHandler);
                        }
                        reject(new Error(`MCP server exited with code ${code}, signal ${signal}`));
                    }
                });
                // Try to send a simple initialization request after server starts
                (0, timers_1.setTimeout)(() => {
                    if (mcpServerProcess && mcpServerProcess.stdin) {
                        const initRequest = {
                            jsonrpc: '2.0',
                            id: 1,
                            method: 'initialize',
                            params: {
                                protocolVersion: '2024-11-05',
                                capabilities: { tools: {} },
                                clientInfo: { name: 'simple-e2e-test', version: '1.0.0' },
                            },
                        };
                        try {
                            mcpServerProcess.stdin.write(JSON.stringify(initRequest) + '\n');
                        }
                        catch (e) {
                            console.log('Could not write to stdin:', e);
                        }
                    }
                }, 2000);
            });
        };
        const result = await testMCPServer();
        (0, globals_1.expect)(result).toBe(true);
        (0, globals_1.expect)(mcpServerProcess).toBeDefined();
        (0, globals_1.expect)(mcpServerProcess.pid).toBeGreaterThan(0);
    }, 12000);
    (0, globals_1.it)('should handle mock n8n server requests', async () => {
        // Test that our mock server is working
        const testMockServer = async () => {
            return new Promise(resolve => {
                const url = new url_1.URL(`${mockN8nServer.getUrl()}/api/v1/workflows`);
                const options = {
                    hostname: url.hostname,
                    port: url.port,
                    path: url.pathname,
                    method: 'GET',
                    headers: {
                        'X-N8N-API-KEY': 'test-api-key',
                    },
                };
                const req = http.request(options, res => {
                    resolve(res.statusCode === 200);
                });
                req.on('error', () => {
                    resolve(false);
                });
                req.end();
            });
        };
        const mockServerWorking = await testMockServer();
        (0, globals_1.expect)(mockServerWorking).toBe(true);
    });
    (0, globals_1.it)('should validate E2E testing infrastructure is working', async () => {
        // This test validates that our E2E testing setup is functional
        (0, globals_1.expect)(mockN8nServer).toBeDefined();
        (0, globals_1.expect)(mockN8nServer.getUrl()).toMatch(/^http:\/\/localhost:\d+$/);
        (0, globals_1.expect)(mockServerPort).toBe(3004);
        // Verify mock server is responding
        const testMockServerResponse = async () => {
            return new Promise(resolve => {
                const url = new url_1.URL(`${mockN8nServer.getUrl()}/api/v1/me`);
                const options = {
                    hostname: url.hostname,
                    port: url.port,
                    path: url.pathname,
                    method: 'GET',
                    headers: {
                        'X-N8N-API-KEY': 'test-api-key',
                    },
                };
                const req = http.request(options, res => {
                    let data = '';
                    res.on('data', chunk => {
                        data += chunk;
                    });
                    res.on('end', () => {
                        try {
                            const jsonData = JSON.parse(data);
                            resolve(res.statusCode === 200 && jsonData && typeof jsonData.id !== 'undefined');
                        }
                        catch {
                            resolve(res.statusCode === 200);
                        }
                    });
                });
                req.on('error', () => {
                    resolve(false);
                });
                req.end();
            });
        };
        try {
            const responseValid = await testMockServerResponse();
            (0, globals_1.expect)(responseValid).toBe(true);
        }
        catch (error) {
            // If http request fails, that's still okay for this infrastructure test
            console.log('Mock server validation note:', error);
            (0, globals_1.expect)(mockN8nServer).toBeDefined(); // Just verify mock server exists
        }
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,