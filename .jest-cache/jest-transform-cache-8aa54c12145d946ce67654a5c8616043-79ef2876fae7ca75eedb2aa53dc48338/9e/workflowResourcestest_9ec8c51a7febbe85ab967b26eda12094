bdd35b628a848a32b9748e194ce71264
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('../../../src/client/n8nClient');
const workflowResources_1 = require("../../../src/resources/workflowResources");
// Mock console methods to avoid test output pollution
const mockConsoleLog = globals_1.jest.fn();
globals_1.jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);
(0, globals_1.describe)('WorkflowResourceManager', () => {
    let workflowManager;
    let mockServer;
    let mockClient;
    let getClientFn;
    // Mock workflow data
    const mockWorkflow = {
        id: 'workflow-123',
        name: 'Test Workflow',
        active: true,
        tags: ['test', 'automation'],
        createdAt: '2023-01-01T10:00:00Z',
        updatedAt: '2023-01-01T12:00:00Z',
        nodes: [
            {
                id: 'node1',
                name: 'HTTP Request',
                type: 'n8n-nodes-base.httpRequest',
                typeVersion: 1,
                position: [100, 200],
            },
            {
                id: 'node2',
                name: 'Code',
                type: 'n8n-nodes-base.code',
                typeVersion: 1,
                position: [300, 200],
            },
        ],
        connections: {
            'HTTP Request': {
                main: [
                    [
                        {
                            node: 'Code',
                            type: 'main',
                            index: 0,
                        },
                    ],
                ],
            },
        },
    };
    const mockInactiveWorkflow = {
        id: 'workflow-456',
        name: 'Inactive Workflow',
        active: false,
        tags: ['draft'],
        createdAt: '2023-01-02T10:00:00Z',
        updatedAt: '2023-01-02T11:00:00Z',
        nodes: [
            {
                id: 'node3',
                name: 'Webhook',
                type: 'n8n-nodes-base.webhook',
                typeVersion: 1,
                position: [100, 200],
            },
        ],
        connections: {},
    };
    (0, globals_1.beforeEach)(() => {
        // Create mock instances
        mockServer = {
            addResource: globals_1.jest.fn(),
            addResourceTemplate: globals_1.jest.fn(),
        };
        mockClient = {
            getWorkflow: globals_1.jest.fn(),
            getWorkflows: globals_1.jest.fn(),
        };
        getClientFn = globals_1.jest.fn().mockReturnValue(mockClient);
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        mockConsoleLog.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Constructor and Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                baseUri: 'custom://workflows',
                maxWorkflows: 25,
                includeInactive: false,
                includeExecutions: true,
                cacheDuration: 10000,
            };
            workflowManager = new workflowResources_1.WorkflowResourceManager(config);
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should merge custom config with defaults', () => {
            const config = {
                maxWorkflows: 200,
                includeExecutions: true,
            };
            workflowManager = new workflowResources_1.WorkflowResourceManager(config);
            (0, globals_1.expect)(workflowManager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
    });
    (0, globals_1.describe)('Resource Registration', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
        });
        (0, globals_1.it)('should register all workflow resources', () => {
            workflowManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://workflows/{id}',
                name: 'n8n Workflow',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://workflows/{workflowId}',
                name: 'n8n Workflow by ID',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/list',
                name: 'n8n Workflow List',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/active',
                name: 'n8n Active Workflows',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://workflows/stats',
                name: 'n8n Workflow Statistics',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('ðŸ“„ Workflow resources registered');
        });
        (0, globals_1.it)('should register workflow template with correct arguments', () => {
            workflowManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n workflow',
                required: true,
            });
        });
        (0, globals_1.it)('should register duplicate workflow template with workflowId parameter', () => {
            workflowManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'workflowId',
                description: 'The ID of the n8n workflow',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('Individual Workflow Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow resource successfully', async () => {
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
            (0, globals_1.expect)(data.name).toBe('Test Workflow');
            (0, globals_1.expect)(data.active).toBe(true);
            (0, globals_1.expect)(data.metadata).toBeDefined();
            (0, globals_1.expect)(data.metadata.id).toBe('workflow-123');
            (0, globals_1.expect)(data.metadata.nodeCount).toBe(2);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(1);
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow');
        });
        (0, globals_1.it)('should handle workflow with no nodes or connections', async () => {
            const emptyWorkflow = {
                ...mockWorkflow,
                nodes: [],
                connections: {},
            };
            mockClient.getWorkflow.mockResolvedValue(emptyWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.nodeCount).toBe(0);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(0);
        });
        (0, globals_1.it)('should load workflow using workflowId template', async () => {
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
        });
        (0, globals_1.it)('should throw error when client not initialized', async () => {
            // Clear all previous mock calls first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            const nullClientFn = globals_1.jest.fn().mockReturnValue(null);
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, nullClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getWorkflow.mockRejectedValue(new Error('Workflow not found'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('Failed to load workflow workflow-123: Workflow not found');
        });
        (0, globals_1.it)('should handle workflow with no tags', async () => {
            const workflowWithoutTags = {
                ...mockWorkflow,
                tags: [],
            };
            mockClient.getWorkflow.mockResolvedValue(workflowWithoutTags);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.tags).toEqual([]);
        });
    });
    (0, globals_1.describe)('Workflow List Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow list successfully', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows).toHaveLength(2);
            (0, globals_1.expect)(data.workflows[0].id).toBe('workflow-123');
            (0, globals_1.expect)(data.workflows[0].name).toBe('Test Workflow');
            (0, globals_1.expect)(data.workflows[0].active).toBe(true);
            (0, globals_1.expect)(data.workflows[0].uri).toBe('n8n://workflows/workflow-123');
            (0, globals_1.expect)(data.workflows[1].id).toBe('workflow-456');
            (0, globals_1.expect)(data.workflows[1].active).toBe(false);
            (0, globals_1.expect)(data.metadata.total).toBe(2);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-list');
        });
        (0, globals_1.it)('should handle empty workflow list', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle workflow list API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('List API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load workflow list: List API Error');
        });
        (0, globals_1.it)('should handle workflows with missing tags', async () => {
            const workflowsWithMixedTags = [
                { ...mockWorkflow, tags: undefined },
                { ...mockInactiveWorkflow, tags: undefined },
            ];
            mockClient.getWorkflows.mockResolvedValue({ data: workflowsWithMixedTags });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflows[0].tags).toEqual([]);
            (0, globals_1.expect)(data.workflows[1].tags).toEqual([]);
        });
    });
    (0, globals_1.describe)('Active Workflows Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load active workflows successfully', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.activeWorkflows).toHaveLength(1); // Only active workflow
            (0, globals_1.expect)(data.activeWorkflows[0].id).toBe('workflow-123');
            (0, globals_1.expect)(data.activeWorkflows[0].name).toBe('Test Workflow');
            (0, globals_1.expect)(data.activeWorkflows[0].lastExecution).toBe('2023-01-01T12:00:00Z');
            (0, globals_1.expect)(data.metadata.total).toBe(1);
            (0, globals_1.expect)(data.metadata.activeOnly).toBe(true);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-active-workflows');
        });
        (0, globals_1.it)('should handle no active workflows', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockInactiveWorkflow], // Only inactive workflow
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.activeWorkflows).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle active workflows API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('Active API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load active workflows: Active API Error');
        });
    });
    (0, globals_1.describe)('Workflow Statistics Resource', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow statistics successfully', async () => {
            const recentWorkflow = {
                ...mockWorkflow,
                id: 'workflow-789',
                createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // 1 day ago
                updatedAt: new Date(Date.now() - 60 * 60 * 1000).toISOString(), // 1 hour ago
                tags: ['test', 'recent'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow, mockInactiveWorkflow, recentWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalWorkflows).toBe(3);
            (0, globals_1.expect)(data.activeWorkflows).toBe(2); // mockWorkflow and recentWorkflow are active
            (0, globals_1.expect)(data.inactiveWorkflows).toBe(1);
            (0, globals_1.expect)(data.tagUsage).toBeDefined();
            (0, globals_1.expect)(data.tagUsage.test).toBe(2); // Present in mockWorkflow and recentWorkflow
            (0, globals_1.expect)(data.tagUsage.automation).toBe(1);
            (0, globals_1.expect)(data.tagUsage.draft).toBe(1);
            (0, globals_1.expect)(data.tagUsage.recent).toBe(1);
            (0, globals_1.expect)(data.creationStats).toBeDefined();
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-stats');
        });
        (0, globals_1.it)('should handle empty workflows for statistics', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalWorkflows).toBe(0);
            (0, globals_1.expect)(data.activeWorkflows).toBe(0);
            (0, globals_1.expect)(data.inactiveWorkflows).toBe(0);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
        (0, globals_1.it)('should handle stats API errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('Stats API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load workflow statistics: Stats API Error');
        });
        (0, globals_1.it)('should handle workflows with string tags', async () => {
            const workflowWithStringTags = {
                ...mockWorkflow,
                tags: ['string-tag-1', 'string-tag-2'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithStringTags],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage['string-tag-1']).toBe(1);
            (0, globals_1.expect)(data.tagUsage['string-tag-2']).toBe(1);
        });
        (0, globals_1.it)('should handle workflows with mixed tag formats', async () => {
            const workflowWithMixedTags = {
                ...mockWorkflow,
                tags: ['object-tag', 'string-tag'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithMixedTags],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage['object-tag']).toBe(1);
            (0, globals_1.expect)(data.tagUsage['string-tag']).toBe(1);
        });
    });
    (0, globals_1.describe)('Cache Management', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 1000 });
        });
        (0, globals_1.it)('should cache workflow data', async () => {
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should cache workflow list data', async () => {
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflows.mockResolvedValue({
                data: [mockWorkflow],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            // First call
            await resource.load();
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await resource.load();
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should clear cache', () => {
            workflowManager.clearCache();
            // Should not throw
        });
        (0, globals_1.it)('should get cache statistics', () => {
            const stats = workflowManager.getCacheStats();
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(typeof stats.size).toBe('number');
            (0, globals_1.expect)(Array.isArray(stats.keys)).toBe(true);
        });
        (0, globals_1.it)('should not cache when duration is 0', () => {
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 0 });
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            return template
                .load({ id: 'workflow-123' })
                .then(() => {
                return template.load({ id: 'workflow-123' });
            })
                .then(() => {
                (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(2);
            });
        });
        (0, globals_1.it)('should handle cache expiration', async () => {
            globals_1.jest.useFakeTimers();
            workflowManager = new workflowResources_1.WorkflowResourceManager({ cacheDuration: 1 }); // 1ms cache
            workflowManager.register(mockServer, getClientFn);
            mockClient.getWorkflow.mockResolvedValue(mockWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(10);
            // Second call should not use expired cache
            await template.load({ id: 'workflow-123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledTimes(2);
            globals_1.jest.useRealTimers();
        });
    });
    (0, globals_1.describe)('Factory Function', () => {
        (0, globals_1.it)('should create workflow resource manager with factory function', () => {
            const manager = (0, workflowResources_1.createWorkflowResources)();
            (0, globals_1.expect)(manager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
        (0, globals_1.it)('should create workflow resource manager with config via factory', () => {
            const config = { maxWorkflows: 50, includeInactive: false };
            const manager = (0, workflowResources_1.createWorkflowResources)(config);
            (0, globals_1.expect)(manager).toBeInstanceOf(workflowResources_1.WorkflowResourceManager);
        });
    });
    (0, globals_1.describe)('Tag Usage Calculation', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should calculate tag usage correctly with object tags', async () => {
            const workflowsWithObjectTags = [
                {
                    ...mockWorkflow,
                    tags: ['production', 'api'],
                },
                {
                    ...mockInactiveWorkflow,
                    tags: ['production', 'webhook'],
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithObjectTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage.production).toBe(2);
            (0, globals_1.expect)(data.tagUsage.api).toBe(1);
            (0, globals_1.expect)(data.tagUsage.webhook).toBe(1);
        });
        (0, globals_1.it)('should handle workflows with no tags gracefully', async () => {
            const workflowsWithNoTags = [
                { ...mockWorkflow, tags: undefined },
                { ...mockInactiveWorkflow, tags: undefined },
                { ...mockWorkflow, id: 'workflow-789', tags: [] },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithNoTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
        (0, globals_1.it)('should handle workflows with non-array tags', async () => {
            const workflowsWithInvalidTags = [
                { ...mockWorkflow, tags: 'invalid' },
                { ...mockInactiveWorkflow, tags: { invalid: true } },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithInvalidTags,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.tagUsage).toEqual({});
        });
    });
    (0, globals_1.describe)('Creation Statistics', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should calculate creation statistics correctly', async () => {
            const now = new Date();
            const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);
            const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            const workflowsWithDifferentDates = [
                {
                    ...mockWorkflow,
                    createdAt: oneDayAgo.toISOString(),
                    updatedAt: oneDayAgo.toISOString(),
                },
                {
                    ...mockInactiveWorkflow,
                    createdAt: oneWeekAgo.toISOString(),
                    updatedAt: oneDayAgo.toISOString(),
                },
                {
                    ...mockWorkflow,
                    id: 'workflow-789',
                    createdAt: oneMonthAgo.toISOString(),
                    updatedAt: oneMonthAgo.toISOString(),
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithDifferentDates,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(data.creationStats.createdLastMonth).toBeGreaterThanOrEqual(1);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBeGreaterThanOrEqual(2);
            (0, globals_1.expect)(data.creationStats.updatedLastMonth).toBeGreaterThanOrEqual(2);
        });
        (0, globals_1.it)('should handle invalid date formats', async () => {
            const workflowsWithInvalidDates = [
                {
                    ...mockWorkflow,
                    createdAt: 'invalid-date',
                    updatedAt: undefined,
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithInvalidDates,
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.creationStats.createdLastWeek).toBe(0);
            (0, globals_1.expect)(data.creationStats.updatedLastWeek).toBe(0);
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            mockClient.getWorkflow.mockRejectedValue('String error');
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'workflow-123' })).rejects.toThrow('Failed to load workflow workflow-123: String error');
        });
        (0, globals_1.it)('should handle malformed workflow data', async () => {
            const malformedWorkflow = {
                id: 'workflow-123',
                // Missing required fields
                name: undefined,
                active: undefined,
                nodes: [],
                connections: {},
            };
            mockClient.getWorkflow.mockResolvedValue(malformedWorkflow);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('workflow-123');
            (0, globals_1.expect)(data.metadata.tags).toEqual([]);
        });
        (0, globals_1.it)('should handle workflows with complex connection objects', async () => {
            const workflowWithComplexConnections = {
                ...mockWorkflow,
                connections: {
                    'HTTP Request': {
                        main: [
                            [
                                { node: 'Code', type: 'main', index: 0 },
                                { node: 'Another Node', type: 'main', index: 1 },
                            ],
                        ],
                        secondary: [[{ node: 'Error Handler', type: 'main', index: 0 }]],
                    },
                    Code: {
                        main: [[{ node: 'Final Node', type: 'main', index: 0 }]],
                    },
                },
            };
            mockClient.getWorkflow.mockResolvedValue(workflowWithComplexConnections);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(2); // HTTP Request and Code have connections
        });
        (0, globals_1.it)('should handle empty workflow list gracefully in all resources', async () => {
            mockClient.getWorkflows.mockResolvedValue({ data: [] });
            // Test list resource
            const listResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!listResourceCall)
                throw new Error('List resource call not found');
            const listResource = listResourceCall[0];
            const listResult = await listResource.load();
            const listData = JSON.parse(listResult.text);
            (0, globals_1.expect)(listData.workflows).toHaveLength(0);
            // Test active resource
            const activeResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/active');
            if (!activeResourceCall)
                throw new Error('Active resource call not found');
            const activeResource = activeResourceCall[0];
            const activeResult = await activeResource.load();
            const activeData = JSON.parse(activeResult.text);
            (0, globals_1.expect)(activeData.activeWorkflows).toHaveLength(0);
            // Test stats resource
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const statsResult = await statsResource.load();
            const statsData = JSON.parse(statsResult.text);
            (0, globals_1.expect)(statsData.totalWorkflows).toBe(0);
        });
    });
    (0, globals_1.describe)('Branch Coverage Edge Cases', () => {
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.clearAllMocks();
            workflowManager = new workflowResources_1.WorkflowResourceManager();
            workflowManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle workflows with null/undefined tags', async () => {
            const workflowWithNullTags = {
                ...mockWorkflow,
                tags: undefined,
            };
            const workflowWithUndefinedTags = {
                ...mockInactiveWorkflow,
                tags: undefined,
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithNullTags, workflowWithUndefinedTags],
            });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should handle null/undefined tags gracefully
            (0, globals_1.expect)(data.totalWorkflows).toBe(2);
            (0, globals_1.expect)(data.tagUsage).toBeDefined();
        });
        (0, globals_1.it)('should handle workflows with invalid tag objects', async () => {
            const workflowWithObjectTags = {
                ...mockWorkflow,
                tags: [{ invalid: 'structure' }, null, undefined, 'valid-tag'],
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [workflowWithObjectTags],
            });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should extract only valid string tags
            (0, globals_1.expect)(data.totalWorkflows).toBe(1);
            (0, globals_1.expect)(data.tagUsage).toBeDefined();
        });
        (0, globals_1.it)('should handle workflows with null nodes/connections', async () => {
            const workflowWithNullStructure = {
                ...mockWorkflow,
                nodes: null,
                connections: null,
            };
            mockClient.getWorkflow.mockResolvedValue(workflowWithNullStructure);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://workflows/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'workflow-123' });
            const data = JSON.parse(result.text);
            // Should handle null values gracefully
            (0, globals_1.expect)(data.nodes).toBeNull();
            (0, globals_1.expect)(data.connections).toBeNull();
            (0, globals_1.expect)(data.metadata.nodeCount).toBe(0);
            (0, globals_1.expect)(data.metadata.connectionCount).toBe(0);
        });
        (0, globals_1.it)('should handle invalid date formats in creation statistics', async () => {
            const workflowsWithInvalidDates = [
                {
                    ...mockWorkflow,
                    createdAt: 'not-a-date',
                    updatedAt: undefined,
                },
                {
                    ...mockInactiveWorkflow,
                    createdAt: 'not-a-date',
                    updatedAt: 'also-not-a-date',
                },
            ];
            mockClient.getWorkflows.mockResolvedValue({
                data: workflowsWithInvalidDates,
            });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should handle invalid dates gracefully
            (0, globals_1.expect)(data.totalWorkflows).toBe(2);
            (0, globals_1.expect)(data.creationStats).toBeDefined();
        });
        (0, globals_1.it)('should handle errors with circular references in error messages', async () => {
            const circularError = { message: 'test error' };
            circularError.self = circularError;
            circularError.parent = { child: circularError };
            mockClient.getWorkflows.mockRejectedValue(circularError);
            const listResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/list');
            if (!listResourceCall)
                throw new Error('List resource call not found');
            const listResource = listResourceCall[0];
            // Should handle circular references without crashing
            await (0, globals_1.expect)(listResource.load()).rejects.toThrow();
        });
        (0, globals_1.it)('should handle workflows with missing standard properties', async () => {
            const malformedWorkflow = {
                id: 'malformed-workflow',
                // Missing: name, active, tags, createdAt, updatedAt, nodes, connections
            };
            mockClient.getWorkflows.mockResolvedValue({
                data: [malformedWorkflow],
            });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://workflows/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should handle missing properties gracefully
            (0, globals_1.expect)(data.totalWorkflows).toBe(1);
            (0, globals_1.expect)(data.tagUsage).toBeDefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvdGVzdHMvdW5pdC9yZXNvdXJjZXMvd29ya2Zsb3dSZXNvdXJjZXMudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDJDQUFrRjtBQVFsRixvQkFBb0I7QUFDcEIsY0FBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNyQixjQUFJLENBQUMsSUFBSSxDQUFDLCtCQUErQixDQUFDLENBQUM7QUFSM0MsZ0ZBR2tEO0FBT2xELHNEQUFzRDtBQUN0RCxNQUFNLGNBQWMsR0FBRyxjQUFJLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDakMsY0FBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsa0JBQWtCLENBQUMsY0FBYyxDQUFDLENBQUM7QUFFOUQsSUFBQSxrQkFBUSxFQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUN2QyxJQUFJLGVBQXdDLENBQUM7SUFDN0MsSUFBSSxVQUFnQyxDQUFDO0lBQ3JDLElBQUksVUFBa0MsQ0FBQztJQUN2QyxJQUFJLFdBQW1DLENBQUM7SUFFeEMscUJBQXFCO0lBQ3JCLE1BQU0sWUFBWSxHQUFHO1FBQ25CLEVBQUUsRUFBRSxjQUFjO1FBQ2xCLElBQUksRUFBRSxlQUFlO1FBQ3JCLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQztRQUM1QixTQUFTLEVBQUUsc0JBQXNCO1FBQ2pDLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsS0FBSyxFQUFFO1lBQ0w7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gsSUFBSSxFQUFFLGNBQWM7Z0JBQ3BCLElBQUksRUFBRSw0QkFBNEI7Z0JBQ2xDLFdBQVcsRUFBRSxDQUFDO2dCQUNkLFFBQVEsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQXFCO2FBQ3pDO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE9BQU87Z0JBQ1gs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S0FBSyxDQUFFLE1BQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU5Qyw4Q0FBOEM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDcEMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvdGVzdHMvdW5pdC9yZXNvdXJjZXMvd29ya2Zsb3dSZXNvdXJjZXMudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZXNjcmliZSwgaXQsIGV4cGVjdCwgYmVmb3JlRWFjaCwgamVzdCwgYWZ0ZXJFYWNoIH0gZnJvbSAnQGplc3QvZ2xvYmFscyc7XG5pbXBvcnQgeyBGYXN0TUNQIH0gZnJvbSAnZmFzdG1jcCc7XG5pbXBvcnQge1xuICBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcixcbiAgY3JlYXRlV29ya2Zsb3dSZXNvdXJjZXMsXG59IGZyb20gJy4uLy4uLy4uL3NyYy9yZXNvdXJjZXMvd29ya2Zsb3dSZXNvdXJjZXMnO1xuaW1wb3J0IHsgTjhuQ2xpZW50IH0gZnJvbSAnLi4vLi4vLi4vc3JjL2NsaWVudC9uOG5DbGllbnQnO1xuXG4vLyBNb2NrIGRlcGVuZGVuY2llc1xuamVzdC5tb2NrKCdmYXN0bWNwJyk7XG5qZXN0Lm1vY2soJy4uLy4uLy4uL3NyYy9jbGllbnQvbjhuQ2xpZW50Jyk7XG5cbi8vIE1vY2sgY29uc29sZSBtZXRob2RzIHRvIGF2b2lkIHRlc3Qgb3V0cHV0IHBvbGx1dGlvblxuY29uc3QgbW9ja0NvbnNvbGVMb2cgPSBqZXN0LmZuKCk7XG5qZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24obW9ja0NvbnNvbGVMb2cpO1xuXG5kZXNjcmliZSgnV29ya2Zsb3dSZXNvdXJjZU1hbmFnZXInLCAoKSA9PiB7XG4gIGxldCB3b3JrZmxvd01hbmFnZXI6IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyO1xuICBsZXQgbW9ja1NlcnZlcjogamVzdC5Nb2NrZWQ8RmFzdE1DUD47XG4gIGxldCBtb2NrQ2xpZW50OiBqZXN0Lk1vY2tlZDxOOG5DbGllbnQ+O1xuICBsZXQgZ2V0Q2xpZW50Rm46ICgpID0+IE44bkNsaWVudCB8IG51bGw7XG5cbiAgLy8gTW9jayB3b3JrZmxvdyBkYXRhXG4gIGNvbnN0IG1vY2tXb3JrZmxvdyA9IHtcbiAgICBpZDogJ3dvcmtmbG93LTEyMycsXG4gICAgbmFtZTogJ1Rlc3QgV29ya2Zsb3cnLFxuICAgIGFjdGl2ZTogdHJ1ZSxcbiAgICB0YWdzOiBbJ3Rlc3QnLCAnYXV0b21hdGlvbiddLFxuICAgIGNyZWF0ZWRBdDogJzIwMjMtMDEtMDFUMTA6MDA6MDBaJyxcbiAgICB1cGRhdGVkQXQ6ICcyMDIzLTAxLTAxVDEyOjAwOjAwWicsXG4gICAgbm9kZXM6IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdub2RlMScsXG4gICAgICAgIG5hbWU6ICdIVFRQIFJlcXVlc3QnLFxuICAgICAgICB0eXBlOiAnbjhuLW5vZGVzLWJhc2UuaHR0cFJlcXVlc3QnLFxuICAgICAgICB0eXBlVmVyc2lvbjogMSxcbiAgICAgICAgcG9zaXRpb246IFsxMDAsIDIwMF0gYXMgW251bWJlciwgbnVtYmVyXSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGlkOiAnbm9kZTInLFxuICAgICAgICBuYW1lOiAnQ29kZScsXG4gICAgICAgIHR5cGU6ICduOG4tbm9kZXMtYmFzZS5jb2RlJyxcbiAgICAgICAgdHlwZVZlcnNpb246IDEsXG4gICAgICAgIHBvc2l0aW9uOiBbMzAwLCAyMDBdIGFzIFtudW1iZXIsIG51bWJlcl0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgY29ubmVjdGlvbnM6IHtcbiAgICAgICdIVFRQIFJlcXVlc3QnOiB7XG4gICAgICAgIG1haW46IFtcbiAgICAgICAgICBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5vZGU6ICdDb2RlJyxcbiAgICAgICAgICAgICAgdHlwZTogJ21haW4nLFxuICAgICAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBtb2NrSW5hY3RpdmVXb3JrZmxvdyA9IHtcbiAgICBpZDogJ3dvcmtmbG93LTQ1NicsXG4gICAgbmFtZTogJ0luYWN0aXZlIFdvcmtmbG93JyxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIHRhZ3M6IFsnZHJhZnQnXSxcbiAgICBjcmVhdGVkQXQ6ICcyMDIzLTAxLTAyVDEwOjAwOjAwWicsXG4gICAgdXBkYXRlZEF0OiAnMjAyMy0wMS0wMlQxMTowMDowMFonLFxuICAgIG5vZGVzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnbm9kZTMnLFxuICAgICAgICBuYW1lOiAnV2ViaG9vaycsXG4gICAgICAgIHR5cGU6ICduOG4tbm9kZXMtYmFzZS53ZWJob29rJyxcbiAgICAgICAgdHlwZVZlcnNpb246IDEsXG4gICAgICAgIHBvc2l0aW9uOiBbMTAwLCAyMDBdIGFzIFtudW1iZXIsIG51bWJlcl0sXG4gICAgICB9LFxuICAgIF0sXG4gICAgY29ubmVjdGlvbnM6IHt9LFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBtb2NrIGluc3RhbmNlc1xuICAgIG1vY2tTZXJ2ZXIgPSB7XG4gICAgICBhZGRSZXNvdXJjZTogamVzdC5mbigpLFxuICAgICAgYWRkUmVzb3VyY2VUZW1wbGF0ZTogamVzdC5mbigpLFxuICAgIH0gYXMgdW5rbm93biBhcyBqZXN0Lk1vY2tlZDxGYXN0TUNQPjtcblxuICAgIG1vY2tDbGllbnQgPSB7XG4gICAgICBnZXRXb3JrZmxvdzogamVzdC5mbigpLFxuICAgICAgZ2V0V29ya2Zsb3dzOiBqZXN0LmZuKCksXG4gICAgfSBhcyB1bmtub3duIGFzIGplc3QuTW9ja2VkPE44bkNsaWVudD47XG5cbiAgICBnZXRDbGllbnRGbiA9IGplc3QuZm4oKS5tb2NrUmV0dXJuVmFsdWUobW9ja0NsaWVudCkgYXMgKCkgPT4gTjhuQ2xpZW50IHwgbnVsbDtcblxuICAgIC8vIENsZWFyIGFsbCBtb2Nrc1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIG1vY2tDb25zb2xlTG9nLm1vY2tDbGVhcigpO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ29uc3RydWN0b3IgYW5kIENvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggZGVmYXVsdCBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICBleHBlY3Qod29ya2Zsb3dNYW5hZ2VyKS50b0JlSW5zdGFuY2VPZihXb3JrZmxvd1Jlc291cmNlTWFuYWdlcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBjdXN0b20gY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgYmFzZVVyaTogJ2N1c3RvbTovL3dvcmtmbG93cycsXG4gICAgICAgIG1heFdvcmtmbG93czogMjUsXG4gICAgICAgIGluY2x1ZGVJbmFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGluY2x1ZGVFeGVjdXRpb25zOiB0cnVlLFxuICAgICAgICBjYWNoZUR1cmF0aW9uOiAxMDAwMCxcbiAgICAgIH07XG5cbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcihjb25maWcpO1xuICAgICAgZXhwZWN0KHdvcmtmbG93TWFuYWdlcikudG9CZUluc3RhbmNlT2YoV29ya2Zsb3dSZXNvdXJjZU1hbmFnZXIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtZXJnZSBjdXN0b20gY29uZmlnIHdpdGggZGVmYXVsdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIG1heFdvcmtmbG93czogMjAwLFxuICAgICAgICBpbmNsdWRlRXhlY3V0aW9uczogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcihjb25maWcpO1xuICAgICAgZXhwZWN0KHdvcmtmbG93TWFuYWdlcikudG9CZUluc3RhbmNlT2YoV29ya2Zsb3dSZXNvdXJjZU1hbmFnZXIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnUmVzb3VyY2UgUmVnaXN0cmF0aW9uJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZ2lzdGVyIGFsbCB3b3JrZmxvdyByZXNvdXJjZXMnLCAoKSA9PiB7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuXG4gICAgICBleHBlY3QobW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVyaVRlbXBsYXRlOiAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nLFxuICAgICAgICAgIG5hbWU6ICduOG4gV29ya2Zsb3cnLFxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVyaVRlbXBsYXRlOiAnbjhuOi8vd29ya2Zsb3dzL3t3b3JrZmxvd0lkfScsXG4gICAgICAgICAgbmFtZTogJ244biBXb3JrZmxvdyBieSBJRCcsXG4gICAgICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtb2NrU2VydmVyLmFkZFJlc291cmNlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVyaTogJ244bjovL3dvcmtmbG93cy9saXN0JyxcbiAgICAgICAgICBuYW1lOiAnbjhuIFdvcmtmbG93IExpc3QnLFxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1NlcnZlci5hZGRSZXNvdXJjZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB1cmk6ICduOG46Ly93b3JrZmxvd3MvYWN0aXZlJyxcbiAgICAgICAgICBuYW1lOiAnbjhuIEFjdGl2ZSBXb3JrZmxvd3MnLFxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1NlcnZlci5hZGRSZXNvdXJjZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB1cmk6ICduOG46Ly93b3JrZmxvd3Mvc3RhdHMnLFxuICAgICAgICAgIG5hbWU6ICduOG4gV29ya2Zsb3cgU3RhdGlzdGljcycsXG4gICAgICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ29uc29sZUxvZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ/Cfk4QgV29ya2Zsb3cgcmVzb3VyY2VzIHJlZ2lzdGVyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVnaXN0ZXIgd29ya2Zsb3cgdGVtcGxhdGUgd2l0aCBjb3JyZWN0IGFyZ3VtZW50cycsICgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL3dvcmtmbG93cy97aWR9J1xuICAgICAgKTtcbiAgICAgIGV4cGVjdCh0ZW1wbGF0ZUNhbGwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuXG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzWzBdKS50b0VxdWFsKHtcbiAgICAgICAgbmFtZTogJ2lkJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgSUQgb2YgdGhlIG44biB3b3JrZmxvdycsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZ2lzdGVyIGR1cGxpY2F0ZSB3b3JrZmxvdyB0ZW1wbGF0ZSB3aXRoIHdvcmtmbG93SWQgcGFyYW1ldGVyJywgKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3t3b3JrZmxvd0lkfSdcbiAgICAgICk7XG4gICAgICBleHBlY3QodGVtcGxhdGVDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlLmFyZ3VtZW50cykudG9IYXZlTGVuZ3RoKDEpO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlLmFyZ3VtZW50c1swXSkudG9FcXVhbCh7XG4gICAgICAgIG5hbWU6ICd3b3JrZmxvd0lkJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgSUQgb2YgdGhlIG44biB3b3JrZmxvdycsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdJbmRpdmlkdWFsIFdvcmtmbG93IFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHdvcmtmbG93IHJlc291cmNlIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3cubW9ja1Jlc29sdmVkVmFsdWUobW9ja1dvcmtmbG93KTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nXG4gICAgICApO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlQ2FsbCkudG9CZURlZmluZWQoKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG5cbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG5cbiAgICAgIGV4cGVjdCgocmVzdWx0IGFzIGFueSkudGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmlkKS50b0JlKCd3b3JrZmxvdy0xMjMnKTtcbiAgICAgIGV4cGVjdChkYXRhLm5hbWUpLnRvQmUoJ1Rlc3QgV29ya2Zsb3cnKTtcbiAgICAgIGV4cGVjdChkYXRhLmFjdGl2ZSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuaWQpLnRvQmUoJ3dvcmtmbG93LTEyMycpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEubm9kZUNvdW50KS50b0JlKDIpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuY29ubmVjdGlvbkNvdW50KS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvLnR5cGUpLnRvQmUoJ244bi13b3JrZmxvdycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd29ya2Zsb3cgd2l0aCBubyBub2RlcyBvciBjb25uZWN0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVtcHR5V29ya2Zsb3cgPSB7XG4gICAgICAgIC4uLm1vY2tXb3JrZmxvdyxcbiAgICAgICAgbm9kZXM6IFtdLFxuICAgICAgICBjb25uZWN0aW9uczoge30sXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZShlbXB0eVdvcmtmbG93KTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnd29ya2Zsb3ctMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEubm9kZUNvdW50KS50b0JlKDApO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuY29ubmVjdGlvbkNvdW50KS50b0JlKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHdvcmtmbG93IHVzaW5nIHdvcmtmbG93SWQgdGVtcGxhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tXb3JrZmxvdyk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL3dvcmtmbG93cy97d29ya2Zsb3dJZH0nXG4gICAgICApO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlQ2FsbCkudG9CZURlZmluZWQoKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG5cbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyB3b3JrZmxvd0lkOiAnd29ya2Zsb3ctMTIzJyB9KTtcblxuICAgICAgZXhwZWN0KChyZXN1bHQgYXMgYW55KS50ZXh0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuaWQpLnRvQmUoJ3dvcmtmbG93LTEyMycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDbGVhciBhbGwgcHJldmlvdXMgbW9jayBjYWxscyBmaXJzdFxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICBtb2NrQ29uc29sZUxvZy5tb2NrQ2xlYXIoKTtcblxuICAgICAgY29uc3QgbnVsbENsaWVudEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShudWxsKSBhcyAoKSA9PiBOOG5DbGllbnQgfCBudWxsO1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgbnVsbENsaWVudEZuKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuXG4gICAgICBhd2FpdCBleHBlY3QodGVtcGxhdGUubG9hZCh7IGlkOiAnd29ya2Zsb3ctMTIzJyB9KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFJ1biBpbml0LW44biBmaXJzdC4nXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgQVBJIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3cubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdXb3JrZmxvdyBub3QgZm91bmQnKSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL3dvcmtmbG93cy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHdvcmtmbG93IHdvcmtmbG93LTEyMzogV29ya2Zsb3cgbm90IGZvdW5kJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93IHdpdGggbm8gdGFncycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtmbG93V2l0aG91dFRhZ3MgPSB7XG4gICAgICAgIC4uLm1vY2tXb3JrZmxvdyxcbiAgICAgICAgdGFnczogW10sXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZSh3b3JrZmxvd1dpdGhvdXRUYWdzKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnd29ya2Zsb3ctMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEudGFncykudG9FcXVhbChbXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdXb3JrZmxvdyBMaXN0IFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHdvcmtmbG93IGxpc3Qgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbbW9ja1dvcmtmbG93LCBtb2NrSW5hY3RpdmVXb3JrZmxvd10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3MvbGlzdCdcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzb3VyY2VDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBleHBlY3QoKHJlc3VsdCBhcyBhbnkpLnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd3MpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChkYXRhLndvcmtmbG93c1swXS5pZCkudG9CZSgnd29ya2Zsb3ctMTIzJyk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd3NbMF0ubmFtZSkudG9CZSgnVGVzdCBXb3JrZmxvdycpO1xuICAgICAgZXhwZWN0KGRhdGEud29ya2Zsb3dzWzBdLmFjdGl2ZSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkYXRhLndvcmtmbG93c1swXS51cmkpLnRvQmUoJ244bjovL3dvcmtmbG93cy93b3JrZmxvdy0xMjMnKTtcbiAgICAgIGV4cGVjdChkYXRhLndvcmtmbG93c1sxXS5pZCkudG9CZSgnd29ya2Zsb3ctNDU2Jyk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd3NbMV0uYWN0aXZlKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLnRvdGFsKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvLnR5cGUpLnRvQmUoJ244bi13b3JrZmxvdy1saXN0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSB3b3JrZmxvdyBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBbXSB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3MvbGlzdCdcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLndvcmtmbG93cykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEudG90YWwpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB3b3JrZmxvdyBsaXN0IEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0xpc3QgQVBJIEVycm9yJykpO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9saXN0J1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHJlc291cmNlLmxvYWQoKSkucmVqZWN0cy50b1Rocm93KCdGYWlsZWQgdG8gbG9hZCB3b3JrZmxvdyBsaXN0OiBMaXN0IEFQSSBFcnJvcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd29ya2Zsb3dzIHdpdGggbWlzc2luZyB0YWdzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dzV2l0aE1peGVkVGFncyA9IFtcbiAgICAgICAgeyAuLi5tb2NrV29ya2Zsb3csIHRhZ3M6IHVuZGVmaW5lZCB9LFxuICAgICAgICB7IC4uLm1vY2tJbmFjdGl2ZVdvcmtmbG93LCB0YWdzOiB1bmRlZmluZWQgfSxcbiAgICAgIF07XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IHdvcmtmbG93c1dpdGhNaXhlZFRhZ3MgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL2xpc3QnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd3NbMF0udGFncykudG9FcXVhbChbXSk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd3NbMV0udGFncykudG9FcXVhbChbXSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBY3RpdmUgV29ya2Zsb3dzIFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGFjdGl2ZSB3b3JrZmxvd3Mgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbbW9ja1dvcmtmbG93LCBtb2NrSW5hY3RpdmVXb3JrZmxvd10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3MvYWN0aXZlJ1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXNvdXJjZUNhbGwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuXG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGV4cGVjdCgocmVzdWx0IGFzIGFueSkudGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmFjdGl2ZVdvcmtmbG93cykudG9IYXZlTGVuZ3RoKDEpOyAvLyBPbmx5IGFjdGl2ZSB3b3JrZmxvd1xuICAgICAgZXhwZWN0KGRhdGEuYWN0aXZlV29ya2Zsb3dzWzBdLmlkKS50b0JlKCd3b3JrZmxvdy0xMjMnKTtcbiAgICAgIGV4cGVjdChkYXRhLmFjdGl2ZVdvcmtmbG93c1swXS5uYW1lKS50b0JlKCdUZXN0IFdvcmtmbG93Jyk7XG4gICAgICBleHBlY3QoZGF0YS5hY3RpdmVXb3JrZmxvd3NbMF0ubGFzdEV4ZWN1dGlvbikudG9CZSgnMjAyMy0wMS0wMVQxMjowMDowMFonKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLnRvdGFsKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuYWN0aXZlT25seSkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkYXRhLnJlc291cmNlSW5mby50eXBlKS50b0JlKCduOG4tYWN0aXZlLXdvcmtmbG93cycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gYWN0aXZlIHdvcmtmbG93cycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW21vY2tJbmFjdGl2ZVdvcmtmbG93XSwgLy8gT25seSBpbmFjdGl2ZSB3b3JrZmxvd1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL2FjdGl2ZSdcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmFjdGl2ZVdvcmtmbG93cykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEudG90YWwpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBhY3RpdmUgd29ya2Zsb3dzIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0FjdGl2ZSBBUEkgRXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL2FjdGl2ZSdcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChyZXNvdXJjZS5sb2FkKCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIGFjdGl2ZSB3b3JrZmxvd3M6IEFjdGl2ZSBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnV29ya2Zsb3cgU3RhdGlzdGljcyBSZXNvdXJjZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcigpO1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCB3b3JrZmxvdyBzdGF0aXN0aWNzIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlY2VudFdvcmtmbG93ID0ge1xuICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgIGlkOiAnd29ya2Zsb3ctNzg5JyxcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZShEYXRlLm5vdygpIC0gMjQgKiA2MCAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKSwgLy8gMSBkYXkgYWdvXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoRGF0ZS5ub3coKSAtIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLCAvLyAxIGhvdXIgYWdvXG4gICAgICAgIHRhZ3M6IFsndGVzdCcsICdyZWNlbnQnXSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW21vY2tXb3JrZmxvdywgbW9ja0luYWN0aXZlV29ya2Zsb3csIHJlY2VudFdvcmtmbG93XSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzb3VyY2VDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBleHBlY3QoKHJlc3VsdCBhcyBhbnkpLnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS50b3RhbFdvcmtmbG93cykudG9CZSgzKTtcbiAgICAgIGV4cGVjdChkYXRhLmFjdGl2ZVdvcmtmbG93cykudG9CZSgyKTsgLy8gbW9ja1dvcmtmbG93IGFuZCByZWNlbnRXb3JrZmxvdyBhcmUgYWN0aXZlXG4gICAgICBleHBlY3QoZGF0YS5pbmFjdGl2ZVdvcmtmbG93cykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRhdGEudGFnVXNhZ2UudGVzdCkudG9CZSgyKTsgLy8gUHJlc2VudCBpbiBtb2NrV29ya2Zsb3cgYW5kIHJlY2VudFdvcmtmbG93XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZS5hdXRvbWF0aW9uKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGRhdGEudGFnVXNhZ2UuZHJhZnQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZS5yZWNlbnQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5jcmVhdGlvblN0YXRzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRhdGEuY3JlYXRpb25TdGF0cy5jcmVhdGVkTGFzdFdlZWspLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QoZGF0YS5jcmVhdGlvblN0YXRzLnVwZGF0ZWRMYXN0V2VlaykudG9CZUdyZWF0ZXJUaGFuT3JFcXVhbCgwKTtcbiAgICAgIGV4cGVjdChkYXRhLnJlc291cmNlSW5mby50eXBlKS50b0JlKCduOG4td29ya2Zsb3ctc3RhdHMnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IHdvcmtmbG93cyBmb3Igc3RhdGlzdGljcycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogW10gfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlLmxvYWQoKTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEudG90YWxXb3JrZmxvd3MpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZGF0YS5hY3RpdmVXb3JrZmxvd3MpLnRvQmUoMCk7XG4gICAgICBleHBlY3QoZGF0YS5pbmFjdGl2ZVdvcmtmbG93cykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlKS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0YXRzIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1N0YXRzIEFQSSBFcnJvcicpKTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3Mvc3RhdHMnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuXG4gICAgICBhd2FpdCBleHBlY3QocmVzb3VyY2UubG9hZCgpKS5yZWplY3RzLnRvVGhyb3coXG4gICAgICAgICdGYWlsZWQgdG8gbG9hZCB3b3JrZmxvdyBzdGF0aXN0aWNzOiBTdGF0cyBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd29ya2Zsb3dzIHdpdGggc3RyaW5nIHRhZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZmxvd1dpdGhTdHJpbmdUYWdzID0ge1xuICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgIHRhZ3M6IFsnc3RyaW5nLXRhZy0xJywgJ3N0cmluZy10YWctMiddLFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbd29ya2Zsb3dXaXRoU3RyaW5nVGFnc10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3Mvc3RhdHMnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZVsnc3RyaW5nLXRhZy0xJ10pLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZVsnc3RyaW5nLXRhZy0yJ10pLnRvQmUoMSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB3b3JrZmxvd3Mgd2l0aCBtaXhlZCB0YWcgZm9ybWF0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtmbG93V2l0aE1peGVkVGFncyA9IHtcbiAgICAgICAgLi4ubW9ja1dvcmtmbG93LFxuICAgICAgICB0YWdzOiBbJ29iamVjdC10YWcnLCAnc3RyaW5nLXRhZyddLFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbd29ya2Zsb3dXaXRoTWl4ZWRUYWdzXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlWydvYmplY3QtdGFnJ10pLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZVsnc3RyaW5nLXRhZyddKS50b0JlKDEpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ2FjaGUgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcih7IGNhY2hlRHVyYXRpb246IDEwMDAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhY2hlIHdvcmtmbG93IGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrV29ya2Zsb3cpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly93b3JrZmxvd3Mve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRXb3JrZmxvdykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBTZWNvbmQgY2FsbCBzaG91bGQgdXNlIGNhY2hlXG4gICAgICBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICd3b3JrZmxvdy0xMjMnIH0pO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0V29ya2Zsb3cpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FjaGUgd29ya2Zsb3cgbGlzdCBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW21vY2tXb3JrZmxvd10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3MvbGlzdCdcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHJlc291cmNlLmxvYWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQ2xpZW50LmdldFdvcmtmbG93cykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBTZWNvbmQgY2FsbCBzaG91bGQgdXNlIGNhY2hlXG4gICAgICBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRXb3JrZmxvd3MpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgY2FjaGUnLCAoKSA9PiB7XG4gICAgICB3b3JrZmxvd01hbmFnZXIuY2xlYXJDYWNoZSgpO1xuICAgICAgLy8gU2hvdWxkIG5vdCB0aHJvd1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgY2FjaGUgc3RhdGlzdGljcycsICgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXRzID0gd29ya2Zsb3dNYW5hZ2VyLmdldENhY2hlU3RhdHMoKTtcbiAgICAgIGV4cGVjdChzdGF0cykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdCh0eXBlb2Ygc3RhdHMuc2l6ZSkudG9CZSgnbnVtYmVyJyk7XG4gICAgICBleHBlY3QoQXJyYXkuaXNBcnJheShzdGF0cy5rZXlzKSkudG9CZSh0cnVlKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IGNhY2hlIHdoZW4gZHVyYXRpb24gaXMgMCcsICgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcih7IGNhY2hlRHVyYXRpb246IDAgfSk7XG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrV29ya2Zsb3cpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly93b3JrZmxvd3Mve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIHJldHVybiB0ZW1wbGF0ZVxuICAgICAgICAubG9hZCh7IGlkOiAnd29ya2Zsb3ctMTIzJyB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRXb3JrZmxvdykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhY2hlIGV4cGlyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBqZXN0LnVzZUZha2VUaW1lcnMoKTtcblxuICAgICAgd29ya2Zsb3dNYW5hZ2VyID0gbmV3IFdvcmtmbG93UmVzb3VyY2VNYW5hZ2VyKHsgY2FjaGVEdXJhdGlvbjogMSB9KTsgLy8gMW1zIGNhY2hlXG4gICAgICB3b3JrZmxvd01hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrV29ya2Zsb3cpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly93b3JrZmxvd3Mve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRXb3JrZmxvdykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBGYXN0LWZvcndhcmQgdGltZSB0byBleHBpcmUgY2FjaGVcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSgxMCk7XG5cbiAgICAgIC8vIFNlY29uZCBjYWxsIHNob3VsZCBub3QgdXNlIGV4cGlyZWQgY2FjaGVcbiAgICAgIGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRXb3JrZmxvdykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuXG4gICAgICBqZXN0LnVzZVJlYWxUaW1lcnMoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0ZhY3RvcnkgRnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgd29ya2Zsb3cgcmVzb3VyY2UgbWFuYWdlciB3aXRoIGZhY3RvcnkgZnVuY3Rpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBtYW5hZ2VyID0gY3JlYXRlV29ya2Zsb3dSZXNvdXJjZXMoKTtcbiAgICAgIGV4cGVjdChtYW5hZ2VyKS50b0JlSW5zdGFuY2VPZihXb3JrZmxvd1Jlc291cmNlTWFuYWdlcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSB3b3JrZmxvdyByZXNvdXJjZSBtYW5hZ2VyIHdpdGggY29uZmlnIHZpYSBmYWN0b3J5JywgKCkgPT4ge1xuICAgICAgY29uc3QgY29uZmlnID0geyBtYXhXb3JrZmxvd3M6IDUwLCBpbmNsdWRlSW5hY3RpdmU6IGZhbHNlIH07XG4gICAgICBjb25zdCBtYW5hZ2VyID0gY3JlYXRlV29ya2Zsb3dSZXNvdXJjZXMoY29uZmlnKTtcbiAgICAgIGV4cGVjdChtYW5hZ2VyKS50b0JlSW5zdGFuY2VPZihXb3JrZmxvd1Jlc291cmNlTWFuYWdlcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdUYWcgVXNhZ2UgQ2FsY3VsYXRpb24nLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICB3b3JrZmxvd01hbmFnZXIgPSBuZXcgV29ya2Zsb3dSZXNvdXJjZU1hbmFnZXIoKTtcbiAgICAgIHdvcmtmbG93TWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB0YWcgdXNhZ2UgY29ycmVjdGx5IHdpdGggb2JqZWN0IHRhZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZmxvd3NXaXRoT2JqZWN0VGFncyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIC4uLm1vY2tXb3JrZmxvdyxcbiAgICAgICAgICB0YWdzOiBbJ3Byb2R1Y3Rpb24nLCAnYXBpJ10sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5tb2NrSW5hY3RpdmVXb3JrZmxvdyxcbiAgICAgICAgICB0YWdzOiBbJ3Byb2R1Y3Rpb24nLCAnd2ViaG9vayddLFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvd3MubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiB3b3JrZmxvd3NXaXRoT2JqZWN0VGFncyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlLnByb2R1Y3Rpb24pLnRvQmUoMik7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZS5hcGkpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZS53ZWJob29rKS50b0JlKDEpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd29ya2Zsb3dzIHdpdGggbm8gdGFncyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dzV2l0aE5vVGFncyA9IFtcbiAgICAgICAgeyAuLi5tb2NrV29ya2Zsb3csIHRhZ3M6IHVuZGVmaW5lZCB9LFxuICAgICAgICB7IC4uLm1vY2tJbmFjdGl2ZVdvcmtmbG93LCB0YWdzOiB1bmRlZmluZWQgfSxcbiAgICAgICAgeyAuLi5tb2NrV29ya2Zsb3csIGlkOiAnd29ya2Zsb3ctNzg5JywgdGFnczogW10gfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogd29ya2Zsb3dzV2l0aE5vVGFncyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlKS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93cyB3aXRoIG5vbi1hcnJheSB0YWdzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dzV2l0aEludmFsaWRUYWdzID0gW1xuICAgICAgICB7IC4uLm1vY2tXb3JrZmxvdywgdGFnczogJ2ludmFsaWQnIGFzIGFueSB9LFxuICAgICAgICB7IC4uLm1vY2tJbmFjdGl2ZVdvcmtmbG93LCB0YWdzOiB7IGludmFsaWQ6IHRydWUgfSBhcyBhbnkgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogd29ya2Zsb3dzV2l0aEludmFsaWRUYWdzLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlLmxvYWQoKTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEudGFnVXNhZ2UpLnRvRXF1YWwoe30pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQ3JlYXRpb24gU3RhdGlzdGljcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcigpO1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIGNyZWF0aW9uIHN0YXRpc3RpY3MgY29ycmVjdGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgIGNvbnN0IG9uZURheUFnbyA9IG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgLSAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGNvbnN0IG9uZVdlZWtBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gNyAqIDI0ICogNjAgKiA2MCAqIDEwMDApO1xuICAgICAgY29uc3Qgb25lTW9udGhBZ28gPSBuZXcgRGF0ZShub3cuZ2V0VGltZSgpIC0gMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwKTtcblxuICAgICAgY29uc3Qgd29ya2Zsb3dzV2l0aERpZmZlcmVudERhdGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgLi4ubW9ja1dvcmtmbG93LFxuICAgICAgICAgIGNyZWF0ZWRBdDogb25lRGF5QWdvLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgdXBkYXRlZEF0OiBvbmVEYXlBZ28udG9JU09TdHJpbmcoKSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIC4uLm1vY2tJbmFjdGl2ZVdvcmtmbG93LFxuICAgICAgICAgIGNyZWF0ZWRBdDogb25lV2Vla0Fnby50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHVwZGF0ZWRBdDogb25lRGF5QWdvLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgICAgaWQ6ICd3b3JrZmxvdy03ODknLFxuICAgICAgICAgIGNyZWF0ZWRBdDogb25lTW9udGhBZ28udG9JU09TdHJpbmcoKSxcbiAgICAgICAgICB1cGRhdGVkQXQ6IG9uZU1vbnRoQWdvLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IHdvcmtmbG93c1dpdGhEaWZmZXJlbnREYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmNyZWF0aW9uU3RhdHMuY3JlYXRlZExhc3RXZWVrKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEpO1xuICAgICAgZXhwZWN0KGRhdGEuY3JlYXRpb25TdGF0cy5jcmVhdGVkTGFzdE1vbnRoKS50b0JlR3JlYXRlclRoYW5PckVxdWFsKDEpO1xuICAgICAgZXhwZWN0KGRhdGEuY3JlYXRpb25TdGF0cy51cGRhdGVkTGFzdFdlZWspLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMik7XG4gICAgICBleHBlY3QoZGF0YS5jcmVhdGlvblN0YXRzLnVwZGF0ZWRMYXN0TW9udGgpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBpbnZhbGlkIGRhdGUgZm9ybWF0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtmbG93c1dpdGhJbnZhbGlkRGF0ZXMgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgICAgY3JlYXRlZEF0OiAnaW52YWxpZC1kYXRlJyxcbiAgICAgICAgICB1cGRhdGVkQXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogd29ya2Zsb3dzV2l0aEludmFsaWREYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmNyZWF0aW9uU3RhdHMuY3JlYXRlZExhc3RXZWVrKS50b0JlKDApO1xuICAgICAgZXhwZWN0KGRhdGEuY3JlYXRpb25TdGF0cy51cGRhdGVkTGFzdFdlZWspLnRvQmUoMCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzIGFuZCBFcnJvciBIYW5kbGluZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcigpO1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG5vbi1FcnJvciBleGNlcHRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVqZWN0ZWRWYWx1ZSgnU3RyaW5nIGVycm9yJyk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL3dvcmtmbG93cy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHdvcmtmbG93IHdvcmtmbG93LTEyMzogU3RyaW5nIGVycm9yJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1hbGZvcm1lZCB3b3JrZmxvdyBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWFsZm9ybWVkV29ya2Zsb3cgPSB7XG4gICAgICAgIGlkOiAnd29ya2Zsb3ctMTIzJyxcbiAgICAgICAgLy8gTWlzc2luZyByZXF1aXJlZCBmaWVsZHNcbiAgICAgICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICAgICBhY3RpdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgbm9kZXM6IFtdLFxuICAgICAgICBjb25uZWN0aW9uczoge30sXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRXb3JrZmxvdy5tb2NrUmVzb2x2ZWRWYWx1ZShtYWxmb3JtZWRXb3JrZmxvdyBhcyBhbnkpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly93b3JrZmxvd3Mve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICd3b3JrZmxvdy0xMjMnIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5pZCkudG9CZSgnd29ya2Zsb3ctMTIzJyk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YS50YWdzKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93cyB3aXRoIGNvbXBsZXggY29ubmVjdGlvbiBvYmplY3RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dXaXRoQ29tcGxleENvbm5lY3Rpb25zID0ge1xuICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgIGNvbm5lY3Rpb25zOiB7XG4gICAgICAgICAgJ0hUVFAgUmVxdWVzdCc6IHtcbiAgICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIHsgbm9kZTogJ0NvZGUnLCB0eXBlOiAnbWFpbicsIGluZGV4OiAwIH0sXG4gICAgICAgICAgICAgICAgeyBub2RlOiAnQW5vdGhlciBOb2RlJywgdHlwZTogJ21haW4nLCBpbmRleDogMSB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNlY29uZGFyeTogW1t7IG5vZGU6ICdFcnJvciBIYW5kbGVyJywgdHlwZTogJ21haW4nLCBpbmRleDogMCB9XV0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBDb2RlOiB7XG4gICAgICAgICAgICBtYWluOiBbW3sgbm9kZTogJ0ZpbmFsIE5vZGUnLCB0eXBlOiAnbWFpbicsIGluZGV4OiAwIH1dXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3cubW9ja1Jlc29sdmVkVmFsdWUod29ya2Zsb3dXaXRoQ29tcGxleENvbm5lY3Rpb25zKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vd29ya2Zsb3dzL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnd29ya2Zsb3ctMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuY29ubmVjdGlvbkNvdW50KS50b0JlKDIpOyAvLyBIVFRQIFJlcXVlc3QgYW5kIENvZGUgaGF2ZSBjb25uZWN0aW9uc1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgd29ya2Zsb3cgbGlzdCBncmFjZWZ1bGx5IGluIGFsbCByZXNvdXJjZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldFdvcmtmbG93cy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IFtdIH0pO1xuXG4gICAgICAvLyBUZXN0IGxpc3QgcmVzb3VyY2VcbiAgICAgIGNvbnN0IGxpc3RSZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL3dvcmtmbG93cy9saXN0J1xuICAgICAgKTtcbiAgICAgIGlmICghbGlzdFJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdMaXN0IHJlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCBsaXN0UmVzb3VyY2UgPSBsaXN0UmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgbGlzdFJlc3VsdCA9IGF3YWl0IGxpc3RSZXNvdXJjZS5sb2FkKCk7XG4gICAgICBjb25zdCBsaXN0RGF0YSA9IEpTT04ucGFyc2UoKGxpc3RSZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIGV4cGVjdChsaXN0RGF0YS53b3JrZmxvd3MpLnRvSGF2ZUxlbmd0aCgwKTtcblxuICAgICAgLy8gVGVzdCBhY3RpdmUgcmVzb3VyY2VcbiAgICAgIGNvbnN0IGFjdGl2ZVJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL2FjdGl2ZSdcbiAgICAgICk7XG4gICAgICBpZiAoIWFjdGl2ZVJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdBY3RpdmUgcmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IGFjdGl2ZVJlc291cmNlID0gYWN0aXZlUmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgYWN0aXZlUmVzdWx0ID0gYXdhaXQgYWN0aXZlUmVzb3VyY2UubG9hZCgpO1xuICAgICAgY29uc3QgYWN0aXZlRGF0YSA9IEpTT04ucGFyc2UoKGFjdGl2ZVJlc3VsdCBhcyBhbnkpLnRleHQpO1xuICAgICAgZXhwZWN0KGFjdGl2ZURhdGEuYWN0aXZlV29ya2Zsb3dzKS50b0hhdmVMZW5ndGgoMCk7XG5cbiAgICAgIC8vIFRlc3Qgc3RhdHMgcmVzb3VyY2VcbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3Mvc3RhdHMnXG4gICAgICApO1xuICAgICAgaWYgKCFzdGF0c1Jlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdTdGF0cyByZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3Qgc3RhdHNSZXNvdXJjZSA9IHN0YXRzUmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3Qgc3RhdHNSZXN1bHQgPSBhd2FpdCBzdGF0c1Jlc291cmNlLmxvYWQoKTtcbiAgICAgIGNvbnN0IHN0YXRzRGF0YSA9IEpTT04ucGFyc2UoKHN0YXRzUmVzdWx0IGFzIGFueSkudGV4dCk7XG4gICAgICBleHBlY3Qoc3RhdHNEYXRhLnRvdGFsV29ya2Zsb3dzKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnQnJhbmNoIENvdmVyYWdlIEVkZ2UgQ2FzZXMnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICAgIHdvcmtmbG93TWFuYWdlciA9IG5ldyBXb3JrZmxvd1Jlc291cmNlTWFuYWdlcigpO1xuICAgICAgd29ya2Zsb3dNYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93cyB3aXRoIG51bGwvdW5kZWZpbmVkIHRhZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZmxvd1dpdGhOdWxsVGFncyA9IHtcbiAgICAgICAgLi4ubW9ja1dvcmtmbG93LFxuICAgICAgICB0YWdzOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgY29uc3Qgd29ya2Zsb3dXaXRoVW5kZWZpbmVkVGFncyA9IHtcbiAgICAgICAgLi4ubW9ja0luYWN0aXZlV29ya2Zsb3csXG4gICAgICAgIHRhZ3M6IHVuZGVmaW5lZCxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW3dvcmtmbG93V2l0aE51bGxUYWdzLCB3b3JrZmxvd1dpdGhVbmRlZmluZWRUYWdzXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGF0c1Jlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHNSZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignU3RhdHMgcmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2UgPSBzdGF0c1Jlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YXRzUmVzb3VyY2UubG9hZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuXG4gICAgICAvLyBTaG91bGQgaGFuZGxlIG51bGwvdW5kZWZpbmVkIHRhZ3MgZ3JhY2VmdWxseVxuICAgICAgZXhwZWN0KGRhdGEudG90YWxXb3JrZmxvd3MpLnRvQmUoMik7XG4gICAgICBleHBlY3QoZGF0YS50YWdVc2FnZSkudG9CZURlZmluZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93cyB3aXRoIGludmFsaWQgdGFnIG9iamVjdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZmxvd1dpdGhPYmplY3RUYWdzID0ge1xuICAgICAgICAuLi5tb2NrV29ya2Zsb3csXG4gICAgICAgIHRhZ3M6IFt7IGludmFsaWQ6ICdzdHJ1Y3R1cmUnIH0sIG51bGwsIHVuZGVmaW5lZCwgJ3ZhbGlkLXRhZyddIGFzIGFueSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW3dvcmtmbG93V2l0aE9iamVjdFRhZ3NdLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3Mvc3RhdHMnXG4gICAgICApO1xuICAgICAgaWYgKCFzdGF0c1Jlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdTdGF0cyByZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3Qgc3RhdHNSZXNvdXJjZSA9IHN0YXRzUmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3RhdHNSZXNvdXJjZS5sb2FkKCk7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZSgocmVzdWx0IGFzIGFueSkudGV4dCk7XG5cbiAgICAgIC8vIFNob3VsZCBleHRyYWN0IG9ubHkgdmFsaWQgc3RyaW5nIHRhZ3NcbiAgICAgIGV4cGVjdChkYXRhLnRvdGFsV29ya2Zsb3dzKS50b0JlKDEpO1xuICAgICAgZXhwZWN0KGRhdGEudGFnVXNhZ2UpLnRvQmVEZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB3b3JrZmxvd3Mgd2l0aCBudWxsIG5vZGVzL2Nvbm5lY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dXaXRoTnVsbFN0cnVjdHVyZSA9IHtcbiAgICAgICAgLi4ubW9ja1dvcmtmbG93LFxuICAgICAgICBub2RlczogbnVsbCBhcyBhbnksXG4gICAgICAgIGNvbm5lY3Rpb25zOiBudWxsIGFzIGFueSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3cubW9ja1Jlc29sdmVkVmFsdWUod29ya2Zsb3dXaXRoTnVsbFN0cnVjdHVyZSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL3dvcmtmbG93cy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ3dvcmtmbG93LTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKChyZXN1bHQgYXMgYW55KS50ZXh0KTtcbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgbnVsbCB2YWx1ZXMgZ3JhY2VmdWxseVxuICAgICAgZXhwZWN0KGRhdGEubm9kZXMpLnRvQmVOdWxsKCk7XG4gICAgICBleHBlY3QoZGF0YS5jb25uZWN0aW9ucykudG9CZU51bGwoKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLm5vZGVDb3VudCkudG9CZSgwKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLmNvbm5lY3Rpb25Db3VudCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGludmFsaWQgZGF0ZSBmb3JtYXRzIGluIGNyZWF0aW9uIHN0YXRpc3RpY3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB3b3JrZmxvd3NXaXRoSW52YWxpZERhdGVzID0gW1xuICAgICAgICB7XG4gICAgICAgICAgLi4ubW9ja1dvcmtmbG93LFxuICAgICAgICAgIGNyZWF0ZWRBdDogJ25vdC1hLWRhdGUnLFxuICAgICAgICAgIHVwZGF0ZWRBdDogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4ubW9ja0luYWN0aXZlV29ya2Zsb3csXG4gICAgICAgICAgY3JlYXRlZEF0OiAnbm90LWEtZGF0ZScsXG4gICAgICAgICAgdXBkYXRlZEF0OiAnYWxzby1ub3QtYS1kYXRlJyxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogd29ya2Zsb3dzV2l0aEludmFsaWREYXRlcyxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGF0c1Jlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHNSZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignU3RhdHMgcmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2UgPSBzdGF0c1Jlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YXRzUmVzb3VyY2UubG9hZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuXG4gICAgICAvLyBTaG91bGQgaGFuZGxlIGludmFsaWQgZGF0ZXMgZ3JhY2VmdWxseVxuICAgICAgZXhwZWN0KGRhdGEudG90YWxXb3JrZmxvd3MpLnRvQmUoMik7XG4gICAgICBleHBlY3QoZGF0YS5jcmVhdGlvblN0YXRzKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIHdpdGggY2lyY3VsYXIgcmVmZXJlbmNlcyBpbiBlcnJvciBtZXNzYWdlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNpcmN1bGFyRXJyb3I6IGFueSA9IHsgbWVzc2FnZTogJ3Rlc3QgZXJyb3InIH07XG4gICAgICBjaXJjdWxhckVycm9yLnNlbGYgPSBjaXJjdWxhckVycm9yO1xuICAgICAgY2lyY3VsYXJFcnJvci5wYXJlbnQgPSB7IGNoaWxkOiBjaXJjdWxhckVycm9yIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZWplY3RlZFZhbHVlKGNpcmN1bGFyRXJyb3IpO1xuXG4gICAgICBjb25zdCBsaXN0UmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly93b3JrZmxvd3MvbGlzdCdcbiAgICAgICk7XG4gICAgICBpZiAoIWxpc3RSZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignTGlzdCByZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgbGlzdFJlc291cmNlID0gbGlzdFJlc291cmNlQ2FsbFswXTtcblxuICAgICAgLy8gU2hvdWxkIGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzIHdpdGhvdXQgY3Jhc2hpbmdcbiAgICAgIGF3YWl0IGV4cGVjdChsaXN0UmVzb3VyY2UubG9hZCgpKS5yZWplY3RzLnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHdvcmtmbG93cyB3aXRoIG1pc3Npbmcgc3RhbmRhcmQgcHJvcGVydGllcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1hbGZvcm1lZFdvcmtmbG93ID0ge1xuICAgICAgICBpZDogJ21hbGZvcm1lZC13b3JrZmxvdycsXG4gICAgICAgIC8vIE1pc3Npbmc6IG5hbWUsIGFjdGl2ZSwgdGFncywgY3JlYXRlZEF0LCB1cGRhdGVkQXQsIG5vZGVzLCBjb25uZWN0aW9uc1xuICAgICAgfSBhcyBhbnk7XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0V29ya2Zsb3dzLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW21hbGZvcm1lZFdvcmtmbG93XSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBzdGF0c1Jlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vd29ya2Zsb3dzL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHNSZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignU3RhdHMgcmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2UgPSBzdGF0c1Jlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YXRzUmVzb3VyY2UubG9hZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoKHJlc3VsdCBhcyBhbnkpLnRleHQpO1xuXG4gICAgICAvLyBTaG91bGQgaGFuZGxlIG1pc3NpbmcgcHJvcGVydGllcyBncmFjZWZ1bGx5XG4gICAgICBleHBlY3QoZGF0YS50b3RhbFdvcmtmbG93cykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChkYXRhLnRhZ1VzYWdlKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9