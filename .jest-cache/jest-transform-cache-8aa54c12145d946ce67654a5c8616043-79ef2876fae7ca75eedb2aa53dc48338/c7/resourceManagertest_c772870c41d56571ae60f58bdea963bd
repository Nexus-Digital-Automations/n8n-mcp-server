c10ad97db8aca570b2f44cf5604f9ce5
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('../../../src/client/n8nClient');
globals_1.jest.mock('../../../src/resources/workflowResources');
globals_1.jest.mock('../../../src/resources/executionResources');
const resourceManager_1 = require("../../../src/resources/resourceManager");
// Mock console methods to avoid test output pollution
const mockConsoleLog = globals_1.jest.fn();
globals_1.jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);
(0, globals_1.describe)('ResourceManager', () => {
    let resourceManager;
    let mockServer;
    let mockClient;
    let getClientFn;
    (0, globals_1.beforeEach)(() => {
        // Create mock instances
        mockServer = {
            addResource: globals_1.jest.fn(),
            addResourceTemplate: globals_1.jest.fn(),
        };
        mockClient = {
            getWorkflows: globals_1.jest.fn(),
            getExecutions: globals_1.jest.fn(),
            getProjects: globals_1.jest.fn(),
            getUsers: globals_1.jest.fn(),
            getVariables: globals_1.jest.fn(),
        };
        getClientFn = globals_1.jest.fn().mockReturnValue(mockClient);
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        mockConsoleLog.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Constructor and Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            resourceManager = new resourceManager_1.ResourceManager();
            (0, globals_1.expect)(resourceManager).toBeInstanceOf(resourceManager_1.ResourceManager);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                baseUri: 'custom://n8n',
                enableWorkflows: false,
                enableExecutions: false,
                enableCredentials: true,
                enableNodes: false,
                globalCacheDuration: 10000,
                maxItems: 50,
            };
            resourceManager = new resourceManager_1.ResourceManager(config);
            (0, globals_1.expect)(resourceManager).toBeInstanceOf(resourceManager_1.ResourceManager);
        });
        (0, globals_1.it)('should merge custom config with defaults', () => {
            const config = {
                maxItems: 200,
                enableCredentials: true,
            };
            resourceManager = new resourceManager_1.ResourceManager(config);
            (0, globals_1.expect)(resourceManager).toBeInstanceOf(resourceManager_1.ResourceManager);
        });
    });
    (0, globals_1.describe)('Resource Registration', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager();
        });
        (0, globals_1.it)('should register all enabled resources with default config', () => {
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ All n8n MCP resources registered');
        });
        (0, globals_1.it)('should register workflow resources when enabled', () => {
            const config = { enableWorkflows: true };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');
        });
        (0, globals_1.it)('should register execution resources when enabled', () => {
            const config = { enableExecutions: true };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');
        });
        (0, globals_1.it)('should register node resources when enabled', () => {
            const config = { enableNodes: true };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://nodes/available',
                name: 'n8n Available Nodes',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://nodes/{nodeType}',
                name: 'n8n Node Documentation',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📦 Node resources registered');
        });
        (0, globals_1.it)('should register credential resources when enabled', () => {
            const config = { enableCredentials: true };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://credentials/types',
                name: 'n8n Credential Types',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://credentials/template/{credType}',
                name: 'n8n Credential Template',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🔐 Credential resources registered');
        });
        (0, globals_1.it)('should register general resources', () => {
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://info',
                name: 'n8n Instance Information',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://index',
                name: 'n8n Resource Directory',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('ℹ️  General resources registered');
        });
        (0, globals_1.it)('should skip resources when disabled', () => {
            const config = {
                enableWorkflows: false,
                enableExecutions: false,
                enableCredentials: false,
                enableNodes: false,
            };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('ℹ️  General resources registered');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ All n8n MCP resources registered');
        });
    });
    (0, globals_1.describe)('Node Resources', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager({ enableNodes: true });
            resourceManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load available nodes resource', async () => {
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://nodes/available');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.nodes).toBeDefined();
            (0, globals_1.expect)(data.metadata).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.uri).toBe('n8n://nodes/available');
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-available-nodes');
        });
        (0, globals_1.it)('should load node documentation template', async () => {
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://nodes/{nodeType}');
            (0, globals_1.expect)(addTemplateCall).toBeDefined();
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            const result = await template.load({ nodeType: 'n8n-nodes-base.httpRequest' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.nodeType).toBe('n8n-nodes-base.httpRequest');
            (0, globals_1.expect)(data.name).toBe('httpRequest');
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-node-documentation');
        });
        (0, globals_1.it)('should validate node template arguments', () => {
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://nodes/{nodeType}');
            (0, globals_1.expect)(addTemplateCall).toBeDefined();
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'nodeType',
                description: 'The type of n8n node (e.g., "n8n-nodes-base.httpRequest")',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('Credential Resources', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager({ enableCredentials: true });
            resourceManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load credential types resource', async () => {
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://credentials/types');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.credentialTypes).toBeDefined();
            (0, globals_1.expect)(data.metadata).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-credential-types');
        });
        (0, globals_1.it)('should load credential template', async () => {
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://credentials/template/{credType}');
            (0, globals_1.expect)(addTemplateCall).toBeDefined();
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            const result = await template.load({ credType: 'httpBasicAuth' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.credentialType).toBe('httpBasicAuth');
            (0, globals_1.expect)(data.template).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-credential-template');
        });
        (0, globals_1.it)('should validate credential template arguments', () => {
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://credentials/template/{credType}');
            (0, globals_1.expect)(addTemplateCall).toBeDefined();
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'credType',
                description: 'The credential type name',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('General Resources', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager();
            resourceManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load instance info resource successfully', async () => {
            mockClient.getWorkflows.mockResolvedValue({
                data: [{ id: '1', name: 'Test Workflow' }],
            });
            mockClient.getExecutions.mockResolvedValue({
                data: [{ id: '1', workflowId: '1' }],
            });
            mockClient.getProjects.mockResolvedValue({
                data: [{ id: '1', name: 'Test Project' }],
            });
            mockClient.getUsers.mockResolvedValue({
                data: [{ id: '1', email: 'test@example.com' }],
            });
            mockClient.getVariables.mockResolvedValue({
                data: [{ id: '1', key: 'test' }],
            });
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('connected');
            (0, globals_1.expect)(data.features).toBeDefined();
            (0, globals_1.expect)(data.statistics).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-instance-info');
        });
        (0, globals_1.it)('should handle instance info resource errors', async () => {
            mockClient.getWorkflows.mockRejectedValue(new Error('API Error'));
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('error');
            (0, globals_1.expect)(data.error).toBe('API Error');
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
        });
        (0, globals_1.it)('should throw error when client not initialized', async () => {
            getClientFn.mockReturnValue(null);
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should load resource directory', async () => {
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://index');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.resources).toBeDefined();
            (0, globals_1.expect)(data.metadata).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-resource-directory');
            (0, globals_1.expect)(Array.isArray(data.resources)).toBe(true);
        });
        (0, globals_1.it)('should include enabled resources in directory', () => {
            const config = {
                enableWorkflows: true,
                enableExecutions: true,
                enableNodes: true,
                enableCredentials: false,
            };
            resourceManager = new resourceManager_1.ResourceManager(config);
            resourceManager.register(mockServer, getClientFn);
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://index');
            (0, globals_1.expect)(addResourceCall).toBeDefined();
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            return resource.load().then((result) => {
                const data = JSON.parse(result.text);
                const resourceNames = data.resources.map((r) => r.name);
                (0, globals_1.expect)(resourceNames).toContain('Workflows');
                (0, globals_1.expect)(resourceNames).toContain('Executions');
                (0, globals_1.expect)(resourceNames).toContain('Nodes');
                (0, globals_1.expect)(resourceNames).not.toContain('Credentials');
            });
        });
    });
    (0, globals_1.describe)('Cache Management', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager();
        });
        (0, globals_1.it)('should clear all caches', () => {
            resourceManager.clearAllCaches();
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🧹 All resource caches cleared');
        });
        (0, globals_1.it)('should get cache statistics', () => {
            const stats = resourceManager.getAllCacheStats();
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(stats.workflows).toBeDefined();
            (0, globals_1.expect)(stats.executions).toBeDefined();
            (0, globals_1.expect)(typeof stats.workflows.size).toBe('number');
            (0, globals_1.expect)(Array.isArray(stats.workflows.keys)).toBe(true);
        });
    });
    (0, globals_1.describe)('Feature Testing', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager();
        });
        (0, globals_1.it)('should test features that succeed', async () => {
            mockClient.getProjects.mockResolvedValue({ data: [] });
            resourceManager.register(mockServer, getClientFn);
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.features.projects).toBe(true);
        });
        (0, globals_1.it)('should test features that fail', async () => {
            mockClient.getProjects.mockRejectedValue(new Error('Feature not available'));
            resourceManager.register(mockServer, getClientFn);
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.features.projects).toBe(false);
        });
    });
    (0, globals_1.describe)('Factory Functions', () => {
        (0, globals_1.it)('should create resource manager with factory function', () => {
            const manager = (0, resourceManager_1.createResourceManager)();
            (0, globals_1.expect)(manager).toBeInstanceOf(resourceManager_1.ResourceManager);
        });
        (0, globals_1.it)('should create resource manager with config via factory', () => {
            const config = { maxItems: 50 };
            const manager = (0, resourceManager_1.createResourceManager)(config);
            (0, globals_1.expect)(manager).toBeInstanceOf(resourceManager_1.ResourceManager);
        });
    });
    (0, globals_1.describe)('Environment Configuration', () => {
        const originalEnv = process.env;
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.resetModules();
            process.env = { ...originalEnv };
        });
        (0, globals_1.afterEach)(() => {
            process.env = originalEnv;
        });
        (0, globals_1.it)('should parse default configuration from empty environment', () => {
            const config = (0, resourceManager_1.parseResourceConfigFromEnv)();
            (0, globals_1.expect)(config.enableWorkflows).toBe(true);
            (0, globals_1.expect)(config.enableExecutions).toBe(true);
            (0, globals_1.expect)(config.enableCredentials).toBe(false);
            (0, globals_1.expect)(config.enableNodes).toBe(true);
        });
        (0, globals_1.it)('should parse configuration from environment variables', () => {
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.BASE_URI] = 'custom://n8n';
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] = 'false';
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] = 'true';
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.CACHE_DURATION] = '10000';
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.MAX_ITEMS] = '200';
            const config = (0, resourceManager_1.parseResourceConfigFromEnv)();
            (0, globals_1.expect)(config.baseUri).toBe('custom://n8n');
            (0, globals_1.expect)(config.enableWorkflows).toBe(false);
            (0, globals_1.expect)(config.enableCredentials).toBe(true);
            (0, globals_1.expect)(config.globalCacheDuration).toBe(10000);
            (0, globals_1.expect)(config.maxItems).toBe(200);
        });
        (0, globals_1.it)('should handle invalid numeric environment variables', () => {
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.CACHE_DURATION] = 'invalid';
            process.env[resourceManager_1.RESOURCE_ENV_CONFIG.MAX_ITEMS] = 'not-a-number';
            const config = (0, resourceManager_1.parseResourceConfigFromEnv)();
            (0, globals_1.expect)(config.globalCacheDuration).toBeNaN();
            (0, globals_1.expect)(config.maxItems).toBeNaN();
        });
        (0, globals_1.it)('should validate environment variable constants', () => {
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.BASE_URI).toBe('N8N_MCP_RESOURCE_BASE_URI');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS).toBe('N8N_MCP_ENABLE_WORKFLOW_RESOURCES');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS).toBe('N8N_MCP_ENABLE_EXECUTION_RESOURCES');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS).toBe('N8N_MCP_ENABLE_CREDENTIAL_RESOURCES');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.ENABLE_NODES).toBe('N8N_MCP_ENABLE_NODE_RESOURCES');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.CACHE_DURATION).toBe('N8N_MCP_RESOURCE_CACHE_DURATION');
            (0, globals_1.expect)(resourceManager_1.RESOURCE_ENV_CONFIG.MAX_ITEMS).toBe('N8N_MCP_RESOURCE_MAX_ITEMS');
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            resourceManager = new resourceManager_1.ResourceManager();
        });
        (0, globals_1.it)('should handle client function that returns null', async () => {
            const nullClientFn = globals_1.jest.fn().mockReturnValue(null);
            resourceManager.register(mockServer, nullClientFn);
            const addResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://info');
            if (!addResourceCall)
                throw new Error('Resource call not found');
            const resource = addResourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle undefined values in configuration', () => {
            const config = {
                baseUri: undefined,
                enableWorkflows: undefined,
                globalCacheDuration: undefined,
                maxItems: undefined,
            };
            (0, globals_1.expect)(() => new resourceManager_1.ResourceManager(config)).not.toThrow();
        });
        (0, globals_1.it)('should handle empty string values in node type parameters', async () => {
            resourceManager = new resourceManager_1.ResourceManager({ enableNodes: true });
            resourceManager.register(mockServer, getClientFn);
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://nodes/{nodeType}');
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            const result = await template.load({ nodeType: '' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.nodeType).toBe('');
            (0, globals_1.expect)(data.name).toBe('');
        });
        (0, globals_1.it)('should handle special characters in credential type parameters', async () => {
            resourceManager = new resourceManager_1.ResourceManager({ enableCredentials: true });
            resourceManager.register(mockServer, getClientFn);
            const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://credentials/template/{credType}');
            if (!addTemplateCall)
                throw new Error('Template call not found');
            const template = addTemplateCall[0];
            const result = await template.load({ credType: 'special@chars!type' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.credentialType).toBe('special@chars!type');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,