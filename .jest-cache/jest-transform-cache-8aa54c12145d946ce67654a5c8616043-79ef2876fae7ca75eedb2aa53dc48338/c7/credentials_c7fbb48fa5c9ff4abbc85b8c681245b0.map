{"version":3,"names":["cov_1huohd1wyi","actualCoverage","s","exports","createCredentialTools","zod_1","require","fastmcp_1","CredentialIdSchema","z","object","credentialId","string","min","CredentialTypeSchema","credentialType","ListCredentialsSchema","limit","number","max","optional","cursor","CreateCredentialSchema","name","type","data","record","unknown","refine","f","Object","keys","length","message","projectId","getClient","server","addTool","description","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","client","b","UserError","options","response","getCredentials","result","forEach","credential","index","id","homeProject","sharedWith","scopes","join","createdAt","Date","toLocaleDateString","updatedAt","nextCursor","error","Error","getCredential","share","user","firstName","lastName","email","role","nodesAccess","access","nodeType","date","toLocaleString","credentialData","createCredential","deleteCredential","schema","getCredentialSchema","JSON","stringify"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nCredential, CreateCredentialRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst CredentialIdSchema = z.object({\n  credentialId: z.string().min(1, 'Credential ID is required'),\n});\n\nconst CredentialTypeSchema = z.object({\n  credentialType: z.string().min(1, 'Credential type is required'),\n});\n\nconst ListCredentialsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateCredentialSchema = z.object({\n  name: z.string().min(1, 'Credential name is required'),\n  type: z.string().min(1, 'Credential type is required'),\n  data: z.record(z.unknown()).refine(data => Object.keys(data).length > 0, {\n    message: 'Credential data is required',\n  }),\n  projectId: z.string().optional(),\n});\n\n// Tool registration function\nexport function createCredentialTools(getClient: () => N8nClient | null, server: any) {\n  // List credentials tool\n  server.addTool({\n    name: 'list-credentials',\n    description:\n      'List all credentials in the n8n instance with pagination support. Sensitive data is not included',\n    parameters: ListCredentialsSchema,\n    annotations: {\n      title: 'List n8n Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListCredentialsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getCredentials(options);\n\n        if (response.data.length === 0) {\n          return 'No credentials found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} credential(s):\\n\\n`;\n\n        response.data.forEach((credential: N8nCredential, index: number) => {\n          result += `${index + 1}. **${credential.name}**\\n`;\n          result += `   - ID: ${credential.id}\\n`;\n          result += `   - Type: ${credential.type}\\n`;\n\n          if (credential.homeProject) {\n            result += `   - Project: ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n          }\n\n          if (credential.sharedWith && credential.sharedWith.length > 0) {\n            result += `   - Shared with: ${credential.sharedWith.length} user(s)\\n`;\n          }\n\n          if (credential.scopes && credential.scopes.length > 0) {\n            result += `   - Scopes: ${credential.scopes.join(', ')}\\n`;\n          }\n\n          if (credential.createdAt) {\n            result += `   - Created: ${new Date(credential.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (credential.updatedAt) {\n            result += `   - Updated: ${new Date(credential.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\nðŸ“„ Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list credentials: ${error.message}`);\n        }\n        throw new UserError('Failed to list credentials with unknown error');\n      }\n    },\n  });\n\n  // Get credential tool\n  server.addTool({\n    name: 'get-credential',\n    description:\n      'Get detailed information about a specific credential by ID. Sensitive data is not included for security',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Get Credential Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credential = await client.getCredential(args.credentialId);\n\n        let result = `# Credential: ${credential.name}\\n\\n`;\n        result += `**ID:** ${credential.id}\\n`;\n        result += `**Name:** ${credential.name}\\n`;\n        result += `**Type:** ${credential.type}\\n`;\n\n        if (credential.homeProject) {\n          result += `**Project:** ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n        }\n\n        if (credential.sharedWith && credential.sharedWith.length > 0) {\n          result += `\\n## Shared With:\\n`;\n          credential.sharedWith.forEach((share, index) => {\n            result += `${index + 1}. ${share.user.firstName} ${share.user.lastName} (${share.user.email}) - Role: ${share.role}\\n`;\n          });\n        }\n\n        if (credential.nodesAccess && credential.nodesAccess.length > 0) {\n          result += `\\n## Node Access:\\n`;\n          credential.nodesAccess.forEach((access, index) => {\n            result += `${index + 1}. Node Type: ${access.nodeType}\\n`;\n            if (access.user) {\n              result += `   - User: ${access.user}\\n`;\n            }\n            if (access.date) {\n              result += `   - Date: ${new Date(access.date).toLocaleString()}\\n`;\n            }\n          });\n        }\n\n        if (credential.scopes && credential.scopes.length > 0) {\n          result += `\\n**Scopes:** ${credential.scopes.join(', ')}\\n`;\n        }\n\n        if (credential.createdAt) {\n          result += `**Created:** ${new Date(credential.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (credential.updatedAt) {\n          result += `**Updated:** ${new Date(credential.updatedAt).toLocaleString()}\\n`;\n        }\n\n        result += `\\n**Note:** Sensitive credential data is not displayed for security purposes.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential with unknown error');\n      }\n    },\n  });\n\n  // Create credential tool\n  server.addTool({\n    name: 'create-credential',\n    description: 'Create a new credential in n8n with the specified type and configuration data',\n    parameters: CreateCredentialSchema,\n    annotations: {\n      title: 'Create New Credential',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateCredentialSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credentialData: CreateCredentialRequest = {\n          name: args.name,\n          type: args.type,\n          data: args.data as Record<string, unknown>,\n          projectId: args.projectId,\n        };\n\n        const credential = await client.createCredential(credentialData);\n\n        let result = `âœ… Successfully created credential \"${credential.name}\" with ID: ${credential.id}\\n`;\n        result += `Type: ${credential.type}`;\n\n        if (credential.homeProject) {\n          result += `\\nProject: ${credential.homeProject.name}`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create credential: ${error.message}`);\n        }\n        throw new UserError('Failed to create credential with unknown error');\n      }\n    },\n  });\n\n  // Delete credential tool\n  server.addTool({\n    name: 'delete-credential',\n    description:\n      'Delete a credential from n8n permanently. WARNING: This action cannot be undone and may break workflows using this credential',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Delete Credential',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteCredential(args.credentialId);\n        return `âœ… Successfully deleted credential with ID: ${args.credentialId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete credential: ${error.message}`);\n        }\n        throw new UserError('Failed to delete credential with unknown error');\n      }\n    },\n  });\n\n  // Get credential schema tool\n  server.addTool({\n    name: 'get-credential-schema',\n    description:\n      'Get the schema definition for a specific credential type to understand required fields',\n    parameters: CredentialTypeSchema,\n    annotations: {\n      title: 'Get Credential Schema',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(args.credentialType);\n\n        let result = `# Credential Schema: ${args.credentialType}\\n\\n`;\n        result += `**Schema definition for credential type \"${args.credentialType}\":**\\n\\n`;\n        result += '```json\\n';\n        result += JSON.stringify(schema, null, 2);\n        result += '\\n```\\n';\n\n        result += `\\nUse this schema to understand the required fields when creating credentials of type \"${args.credentialType}\".`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential schema: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential schema with unknown error');\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}