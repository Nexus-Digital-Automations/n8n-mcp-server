{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/resources/resourceManager.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/resources/resourceManager.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest, afterEach } from '@jest/globals';\nimport { FastMCP } from 'fastmcp';\nimport {\n  ResourceManager,\n  createResourceManager,\n  parseResourceConfigFromEnv,\n  RESOURCE_ENV_CONFIG,\n} from '../../../src/resources/resourceManager';\nimport { N8nClient } from '../../../src/client/n8nClient';\n\n// Mock dependencies\njest.mock('fastmcp');\njest.mock('../../../src/client/n8nClient');\njest.mock('../../../src/resources/workflowResources');\njest.mock('../../../src/resources/executionResources');\n\n// Mock console methods to avoid test output pollution\nconst mockConsoleLog = jest.fn();\njest.spyOn(console, 'log').mockImplementation(mockConsoleLog);\n\ndescribe('ResourceManager', () => {\n  let resourceManager: ResourceManager;\n  let mockServer: jest.Mocked<FastMCP>;\n  let mockClient: jest.Mocked<N8nClient>;\n  let getClientFn: () => N8nClient | null;\n\n  beforeEach(() => {\n    // Create mock instances\n    mockServer = {\n      addResource: jest.fn(),\n      addResourceTemplate: jest.fn(),\n    } as unknown as jest.Mocked<FastMCP>;\n\n    mockClient = {\n      getWorkflows: jest.fn(),\n      getExecutions: jest.fn(),\n      getProjects: jest.fn(),\n      getUsers: jest.fn(),\n      getVariables: jest.fn(),\n    } as unknown as jest.Mocked<N8nClient>;\n\n    getClientFn = jest.fn().mockReturnValue(mockClient) as () => N8nClient | null;\n\n    // Clear all mocks\n    jest.clearAllMocks();\n    mockConsoleLog.mockClear();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Constructor and Configuration', () => {\n    it('should initialize with default configuration', () => {\n      resourceManager = new ResourceManager();\n      expect(resourceManager).toBeInstanceOf(ResourceManager);\n    });\n\n    it('should initialize with custom configuration', () => {\n      const config = {\n        baseUri: 'custom://n8n',\n        enableWorkflows: false,\n        enableExecutions: false,\n        enableCredentials: true,\n        enableNodes: false,\n        globalCacheDuration: 10000,\n        maxItems: 50,\n      };\n\n      resourceManager = new ResourceManager(config);\n      expect(resourceManager).toBeInstanceOf(ResourceManager);\n    });\n\n    it('should merge custom config with defaults', () => {\n      const config = {\n        maxItems: 200,\n        enableCredentials: true,\n      };\n\n      resourceManager = new ResourceManager(config);\n      expect(resourceManager).toBeInstanceOf(ResourceManager);\n    });\n  });\n\n  describe('Resource Registration', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager();\n    });\n\n    it('should register all enabled resources with default config', () => {\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');\n      expect(mockConsoleLog).toHaveBeenCalledWith('✅ All n8n MCP resources registered');\n    });\n\n    it('should register workflow resources when enabled', () => {\n      const config = { enableWorkflows: true };\n      resourceManager = new ResourceManager(config);\n\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');\n    });\n\n    it('should register execution resources when enabled', () => {\n      const config = { enableExecutions: true };\n      resourceManager = new ResourceManager(config);\n\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');\n    });\n\n    it('should register node resources when enabled', () => {\n      const config = { enableNodes: true };\n      resourceManager = new ResourceManager(config);\n\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://nodes/available',\n          name: 'n8n Available Nodes',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResourceTemplate).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uriTemplate: 'n8n://nodes/{nodeType}',\n          name: 'n8n Node Documentation',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('📦 Node resources registered');\n    });\n\n    it('should register credential resources when enabled', () => {\n      const config = { enableCredentials: true };\n      resourceManager = new ResourceManager(config);\n\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://credentials/types',\n          name: 'n8n Credential Types',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResourceTemplate).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uriTemplate: 'n8n://credentials/template/{credType}',\n          name: 'n8n Credential Template',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('🔐 Credential resources registered');\n    });\n\n    it('should register general resources', () => {\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://info',\n          name: 'n8n Instance Information',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://index',\n          name: 'n8n Resource Directory',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('ℹ️  General resources registered');\n    });\n\n    it('should skip resources when disabled', () => {\n      const config = {\n        enableWorkflows: false,\n        enableExecutions: false,\n        enableCredentials: false,\n        enableNodes: false,\n      };\n      resourceManager = new ResourceManager(config);\n\n      resourceManager.register(mockServer, getClientFn);\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('📚 Registering n8n MCP resources...');\n      expect(mockConsoleLog).toHaveBeenCalledWith('ℹ️  General resources registered');\n      expect(mockConsoleLog).toHaveBeenCalledWith('✅ All n8n MCP resources registered');\n    });\n  });\n\n  describe('Node Resources', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager({ enableNodes: true });\n      resourceManager.register(mockServer, getClientFn);\n    });\n\n    it('should load available nodes resource', async () => {\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://nodes/available'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.nodes).toBeDefined();\n      expect(data.metadata).toBeDefined();\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.uri).toBe('n8n://nodes/available');\n      expect(data.resourceInfo.type).toBe('n8n-available-nodes');\n    });\n\n    it('should load node documentation template', async () => {\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://nodes/{nodeType}'\n      );\n      expect(addTemplateCall).toBeDefined();\n      if (!addTemplateCall) throw new Error('Template call not found');\n\n      const template = addTemplateCall[0];\n      const result = await template.load({ nodeType: 'n8n-nodes-base.httpRequest' });\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.nodeType).toBe('n8n-nodes-base.httpRequest');\n      expect(data.name).toBe('httpRequest');\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-node-documentation');\n    });\n\n    it('should validate node template arguments', () => {\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://nodes/{nodeType}'\n      );\n      expect(addTemplateCall).toBeDefined();\n      if (!addTemplateCall) throw new Error('Template call not found');\n\n      const template = addTemplateCall[0];\n      expect(template.arguments).toHaveLength(1);\n      expect(template.arguments[0]).toEqual({\n        name: 'nodeType',\n        description: 'The type of n8n node (e.g., \"n8n-nodes-base.httpRequest\")',\n        required: true,\n      });\n    });\n  });\n\n  describe('Credential Resources', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager({ enableCredentials: true });\n      resourceManager.register(mockServer, getClientFn);\n    });\n\n    it('should load credential types resource', async () => {\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://credentials/types'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.credentialTypes).toBeDefined();\n      expect(data.metadata).toBeDefined();\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-credential-types');\n    });\n\n    it('should load credential template', async () => {\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://credentials/template/{credType}'\n      );\n      expect(addTemplateCall).toBeDefined();\n      if (!addTemplateCall) throw new Error('Template call not found');\n\n      const template = addTemplateCall[0];\n      const result = await template.load({ credType: 'httpBasicAuth' });\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.credentialType).toBe('httpBasicAuth');\n      expect(data.template).toBeDefined();\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-credential-template');\n    });\n\n    it('should validate credential template arguments', () => {\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://credentials/template/{credType}'\n      );\n      expect(addTemplateCall).toBeDefined();\n      if (!addTemplateCall) throw new Error('Template call not found');\n\n      const template = addTemplateCall[0];\n      expect(template.arguments).toHaveLength(1);\n      expect(template.arguments[0]).toEqual({\n        name: 'credType',\n        description: 'The credential type name',\n        required: true,\n      });\n    });\n  });\n\n  describe('General Resources', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager();\n      resourceManager.register(mockServer, getClientFn);\n    });\n\n    it('should load instance info resource successfully', async () => {\n      mockClient.getWorkflows.mockResolvedValue({\n        data: [{ id: '1', name: 'Test Workflow' }],\n      } as any);\n      mockClient.getExecutions.mockResolvedValue({\n        data: [{ id: '1', workflowId: '1' }],\n      } as any);\n      mockClient.getProjects.mockResolvedValue({\n        data: [{ id: '1', name: 'Test Project' }],\n      } as any);\n      mockClient.getUsers.mockResolvedValue({\n        data: [{ id: '1', email: 'test@example.com' }],\n      } as any);\n      mockClient.getVariables.mockResolvedValue({\n        data: [{ id: '1', key: 'test' }],\n      } as any);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.status).toBe('connected');\n      expect(data.features).toBeDefined();\n      expect(data.statistics).toBeDefined();\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-instance-info');\n    });\n\n    it('should handle instance info resource errors', async () => {\n      mockClient.getWorkflows.mockRejectedValue(new Error('API Error'));\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.status).toBe('error');\n      expect(data.error).toBe('API Error');\n      expect(data.resourceInfo).toBeDefined();\n    });\n\n    it('should throw error when client not initialized', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      await expect(resource.load()).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should load resource directory', async () => {\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://index'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.resources).toBeDefined();\n      expect(data.metadata).toBeDefined();\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-resource-directory');\n      expect(Array.isArray(data.resources)).toBe(true);\n    });\n\n    it('should include enabled resources in directory', () => {\n      const config = {\n        enableWorkflows: true,\n        enableExecutions: true,\n        enableNodes: true,\n        enableCredentials: false,\n      };\n      resourceManager = new ResourceManager(config);\n      resourceManager.register(mockServer, getClientFn);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://index'\n      );\n      expect(addResourceCall).toBeDefined();\n      if (!addResourceCall) throw new Error('Resource call not found');\n\n      const resource = addResourceCall[0];\n      return resource.load().then((result: any) => {\n        const data = JSON.parse((result as any).text);\n        const resourceNames = data.resources.map((r: any) => r.name);\n        expect(resourceNames).toContain('Workflows');\n        expect(resourceNames).toContain('Executions');\n        expect(resourceNames).toContain('Nodes');\n        expect(resourceNames).not.toContain('Credentials');\n      });\n    });\n  });\n\n  describe('Cache Management', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager();\n    });\n\n    it('should clear all caches', () => {\n      resourceManager.clearAllCaches();\n      expect(mockConsoleLog).toHaveBeenCalledWith('🧹 All resource caches cleared');\n    });\n\n    it('should get cache statistics', () => {\n      const stats = resourceManager.getAllCacheStats();\n      expect(stats).toBeDefined();\n      expect(stats.workflows).toBeDefined();\n      expect(stats.executions).toBeDefined();\n      expect(typeof stats.workflows.size).toBe('number');\n      expect(Array.isArray(stats.workflows.keys)).toBe(true);\n    });\n  });\n\n  describe('Feature Testing', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager();\n    });\n\n    it('should test features that succeed', async () => {\n      mockClient.getProjects.mockResolvedValue({ data: [] });\n      resourceManager.register(mockServer, getClientFn);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      if (!addResourceCall) throw new Error('Resource call not found');\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n      const data = JSON.parse((result as any).text);\n\n      expect(data.features.projects).toBe(true);\n    });\n\n    it('should test features that fail', async () => {\n      mockClient.getProjects.mockRejectedValue(new Error('Feature not available'));\n      resourceManager.register(mockServer, getClientFn);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      if (!addResourceCall) throw new Error('Resource call not found');\n      const resource = addResourceCall[0];\n      const result = await resource.load();\n      const data = JSON.parse((result as any).text);\n\n      expect(data.features.projects).toBe(false);\n    });\n  });\n\n  describe('Factory Functions', () => {\n    it('should create resource manager with factory function', () => {\n      const manager = createResourceManager();\n      expect(manager).toBeInstanceOf(ResourceManager);\n    });\n\n    it('should create resource manager with config via factory', () => {\n      const config = { maxItems: 50 };\n      const manager = createResourceManager(config);\n      expect(manager).toBeInstanceOf(ResourceManager);\n    });\n  });\n\n  describe('Environment Configuration', () => {\n    const originalEnv = process.env;\n\n    beforeEach(() => {\n      jest.resetModules();\n      process.env = { ...originalEnv };\n    });\n\n    afterEach(() => {\n      process.env = originalEnv;\n    });\n\n    it('should parse default configuration from empty environment', () => {\n      const config = parseResourceConfigFromEnv();\n      expect(config.enableWorkflows).toBe(true);\n      expect(config.enableExecutions).toBe(true);\n      expect(config.enableCredentials).toBe(false);\n      expect(config.enableNodes).toBe(true);\n    });\n\n    it('should parse configuration from environment variables', () => {\n      process.env[RESOURCE_ENV_CONFIG.BASE_URI] = 'custom://n8n';\n      process.env[RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] = 'false';\n      process.env[RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] = 'true';\n      process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION] = '10000';\n      process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS] = '200';\n\n      const config = parseResourceConfigFromEnv();\n\n      expect(config.baseUri).toBe('custom://n8n');\n      expect(config.enableWorkflows).toBe(false);\n      expect(config.enableCredentials).toBe(true);\n      expect(config.globalCacheDuration).toBe(10000);\n      expect(config.maxItems).toBe(200);\n    });\n\n    it('should handle invalid numeric environment variables', () => {\n      process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION] = 'invalid';\n      process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS] = 'not-a-number';\n\n      const config = parseResourceConfigFromEnv();\n\n      expect(config.globalCacheDuration).toBeNaN();\n      expect(config.maxItems).toBeNaN();\n    });\n\n    it('should validate environment variable constants', () => {\n      expect(RESOURCE_ENV_CONFIG.BASE_URI).toBe('N8N_MCP_RESOURCE_BASE_URI');\n      expect(RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS).toBe('N8N_MCP_ENABLE_WORKFLOW_RESOURCES');\n      expect(RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS).toBe('N8N_MCP_ENABLE_EXECUTION_RESOURCES');\n      expect(RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS).toBe('N8N_MCP_ENABLE_CREDENTIAL_RESOURCES');\n      expect(RESOURCE_ENV_CONFIG.ENABLE_NODES).toBe('N8N_MCP_ENABLE_NODE_RESOURCES');\n      expect(RESOURCE_ENV_CONFIG.CACHE_DURATION).toBe('N8N_MCP_RESOURCE_CACHE_DURATION');\n      expect(RESOURCE_ENV_CONFIG.MAX_ITEMS).toBe('N8N_MCP_RESOURCE_MAX_ITEMS');\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    beforeEach(() => {\n      resourceManager = new ResourceManager();\n    });\n\n    it('should handle client function that returns null', async () => {\n      const nullClientFn = jest.fn().mockReturnValue(null) as () => N8nClient | null;\n      resourceManager.register(mockServer, nullClientFn);\n\n      const addResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://info'\n      );\n      if (!addResourceCall) throw new Error('Resource call not found');\n      const resource = addResourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle undefined values in configuration', () => {\n      const config = {\n        baseUri: undefined,\n        enableWorkflows: undefined,\n        globalCacheDuration: undefined,\n        maxItems: undefined,\n      };\n\n      expect(() => new ResourceManager(config as any)).not.toThrow();\n    });\n\n    it('should handle empty string values in node type parameters', async () => {\n      resourceManager = new ResourceManager({ enableNodes: true });\n      resourceManager.register(mockServer, getClientFn);\n\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://nodes/{nodeType}'\n      );\n      if (!addTemplateCall) throw new Error('Template call not found');\n      const template = addTemplateCall[0];\n      const result = await template.load({ nodeType: '' });\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.nodeType).toBe('');\n      expect(data.name).toBe('');\n    });\n\n    it('should handle special characters in credential type parameters', async () => {\n      resourceManager = new ResourceManager({ enableCredentials: true });\n      resourceManager.register(mockServer, getClientFn);\n\n      const addTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://credentials/template/{credType}'\n      );\n      if (!addTemplateCall) throw new Error('Template call not found');\n      const template = addTemplateCall[0];\n      const result = await template.load({ credType: 'special@chars!type' });\n\n      expect((result as any).text).toBeDefined();\n      const data = JSON.parse((result as any).text);\n      expect(data.credentialType).toBe('special@chars!type');\n    });\n  });\n});\n"],"version":3}