{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/tags.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/tags.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createTagTools } from '../../../src/tools/tags';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nTag, CreateTagRequest, UpdateTagRequest } from '../../../src/types/n8n';\nimport { UserError } from 'fastmcp';\n\ndescribe('Tag Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register tag tools\n    createTagTools(getClient, mockServer);\n  });\n\n  it('should register all tag tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(7);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-tags');\n    expect(toolNames).toContain('get-tag');\n    expect(toolNames).toContain('create-tag');\n    expect(toolNames).toContain('update-tag');\n    expect(toolNames).toContain('delete-tag');\n    expect(toolNames).toContain('get-workflow-tags');\n    expect(toolNames).toContain('update-workflow-tags');\n  });\n\n  describe('list-tags tool', () => {\n    let listTagsTool: any;\n\n    beforeEach(() => {\n      listTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-tags'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(listTagsTool.name).toBe('list-tags');\n      expect(listTagsTool.description).toContain('List all tags in the n8n instance');\n      expect(listTagsTool.annotations).toEqual({\n        title: 'List n8n Tags',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should list tags successfully with full data', async () => {\n      const mockTags: N8nTag[] = [\n        {\n          id: 'tag-1',\n          name: 'Production',\n          usageCount: 15,\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-02T00:00:00.000Z',\n        },\n        {\n          id: 'tag-2',\n          name: 'Development',\n          usageCount: 8,\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-03T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getTags.mockResolvedValue({\n        data: mockTags,\n        nextCursor: 'next-cursor',\n      });\n\n      const result = await listTagsTool.execute({ limit: 10 });\n\n      expect(mockClient.getTags).toHaveBeenCalledWith({ limit: 10 });\n      expect(result).toContain('Found 2 tag(s)');\n      expect(result).toContain('**Production**');\n      expect(result).toContain('ID: tag-1');\n      expect(result).toContain('Usage Count: 15');\n      expect(result).toContain('Created: 12/31/2022');\n      expect(result).toContain('Updated: 1/2/2023');\n      expect(result).toContain('**Development**');\n      expect(result).toContain('ID: tag-2');\n      expect(result).toContain('Usage Count: 8');\n      expect(result).toContain('Use cursor \"next-cursor\" to get the next page');\n    });\n\n    it('should list tags with minimal data', async () => {\n      const mockTags: N8nTag[] = [\n        {\n          id: 'tag-1',\n          name: 'Simple Tag',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-01T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getTags.mockResolvedValue({\n        data: mockTags,\n      });\n\n      const result = await listTagsTool.execute({});\n\n      expect(mockClient.getTags).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 1 tag(s)');\n      expect(result).toContain('**Simple Tag**');\n      expect(result).toContain('ID: tag-1');\n      expect(result).toContain('Created: 12/31/2022');\n      expect(result).toContain('Updated: 12/31/2022');\n      expect(result).not.toContain('Usage Count:');\n      expect(result).not.toContain('cursor');\n    });\n\n    it('should handle empty tag list', async () => {\n      mockClient.getTags.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listTagsTool.execute({});\n\n      expect(result).toBe('No tags found in the n8n instance.');\n    });\n\n    it('should handle pagination parameters', async () => {\n      mockClient.getTags.mockResolvedValue({ data: [] });\n\n      await listTagsTool.execute({ limit: 50, cursor: 'test-cursor' });\n\n      expect(mockClient.getTags).toHaveBeenCalledWith({\n        limit: 50,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const mockServerNull = { addTool: jest.fn() };\n      createTagTools(getClientNull, mockServerNull);\n\n      const toolCall = mockServerNull.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-tags'\n      );\n      expect(toolCall).toBeDefined();\n      const toolWithNullClient = (toolCall as any)[0];\n\n      await expect(toolWithNullClient.execute({})).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('API request failed');\n      mockClient.getTags.mockRejectedValue(apiError);\n\n      await expect(listTagsTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list tags: API request failed')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getTags.mockRejectedValue('Unknown error string');\n\n      await expect(listTagsTool.execute({})).rejects.toThrow(\n        new UserError('Failed to list tags with unknown error')\n      );\n    });\n  });\n\n  describe('get-tag tool', () => {\n    let getTagTool: any;\n\n    beforeEach(() => {\n      getTagTool = mockServer.addTool.mock.calls.find((call: any) => call[0].name === 'get-tag')[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(getTagTool.name).toBe('get-tag');\n      expect(getTagTool.description).toContain('Get detailed information about a specific tag');\n      expect(getTagTool.annotations).toEqual({\n        title: 'Get Tag Details',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should get tag successfully with full data', async () => {\n      const mockTag: N8nTag = {\n        id: 'tag-1',\n        name: 'Production',\n        usageCount: 15,\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z',\n      };\n\n      mockClient.getTag.mockResolvedValue(mockTag);\n\n      const result = await getTagTool.execute({ tagId: 'tag-1' });\n\n      expect(mockClient.getTag).toHaveBeenCalledWith('tag-1');\n      expect(result).toContain('# Tag: Production');\n      expect(result).toContain('**ID:** tag-1');\n      expect(result).toContain('**Name:** Production');\n      expect(result).toContain('**Usage Count:** 15');\n      expect(result).toContain('**Created:**');\n      expect(result).toContain('**Updated:**');\n    });\n\n    it('should get tag with minimal data', async () => {\n      const mockTag: N8nTag = {\n        id: 'tag-1',\n        name: 'Simple Tag',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z',\n      };\n\n      mockClient.getTag.mockResolvedValue(mockTag);\n\n      const result = await getTagTool.execute({ tagId: 'tag-1' });\n\n      expect(result).toContain('# Tag: Simple Tag');\n      expect(result).toContain('**ID:** tag-1');\n      expect(result).toContain('**Name:** Simple Tag');\n      expect(result).toContain('**Created:**');\n      expect(result).toContain('**Updated:**');\n      expect(result).not.toContain('**Usage Count:**');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const getTagToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-tag'\n      )?.[0];\n\n      expect(getTagToolWithNullClient).toBeDefined();\n      await expect((getTagToolWithNullClient as any).execute({ tagId: 'tag-1' })).rejects.toThrow(\n        new UserError('n8n client not initialized. Please run init-n8n first.')\n      );\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Tag not found');\n      mockClient.getTag.mockRejectedValue(apiError);\n\n      await expect(getTagTool.execute({ tagId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to get tag: Tag not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getTag.mockRejectedValue('Unknown error string');\n\n      await expect(getTagTool.execute({ tagId: 'tag-1' })).rejects.toThrow(\n        new UserError('Failed to get tag with unknown error')\n      );\n    });\n  });\n\n  describe('create-tag tool', () => {\n    let createTagTool: any;\n\n    beforeEach(() => {\n      createTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-tag'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(createTagTool.name).toBe('create-tag');\n      expect(createTagTool.description).toContain('Create a new tag in n8n');\n      expect(createTagTool.annotations).toEqual({\n        title: 'Create New Tag',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should create tag successfully', async () => {\n      const mockTag: N8nTag = {\n        id: 'tag-new',\n        name: 'New Tag',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-01T00:00:00.000Z',\n        usageCount: 0,\n      };\n\n      mockClient.createTag.mockResolvedValue(mockTag);\n\n      const result = await createTagTool.execute({\n        name: 'New Tag',\n      });\n\n      expect(mockClient.createTag).toHaveBeenCalledWith({\n        name: 'New Tag',\n      });\n      expect(result).toBe('✅ Successfully created tag \"New Tag\" with ID: tag-new');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const createTagToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-tag'\n      )?.[0];\n\n      expect(createTagToolWithNullClient).toBeDefined();\n      await expect(\n        (createTagToolWithNullClient as any).execute({ name: 'Test Tag' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Tag name already exists');\n      mockClient.createTag.mockRejectedValue(apiError);\n\n      await expect(createTagTool.execute({ name: 'Duplicate Tag' })).rejects.toThrow(\n        new UserError('Failed to create tag: Tag name already exists')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.createTag.mockRejectedValue('Unknown error string');\n\n      await expect(createTagTool.execute({ name: 'Test Tag' })).rejects.toThrow(\n        new UserError('Failed to create tag with unknown error')\n      );\n    });\n  });\n\n  describe('update-tag tool', () => {\n    let updateTagTool: any;\n\n    beforeEach(() => {\n      updateTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-tag'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(updateTagTool.name).toBe('update-tag');\n      expect(updateTagTool.description).toContain(\"Update a tag's name in n8n\");\n      expect(updateTagTool.annotations).toEqual({\n        title: 'Update Tag',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should update tag successfully', async () => {\n      const mockTag: N8nTag = {\n        id: 'tag-1',\n        name: 'Updated Tag',\n        createdAt: '2023-01-01T00:00:00.000Z',\n        updatedAt: '2023-01-02T00:00:00.000Z',\n        usageCount: 5,\n      };\n\n      mockClient.updateTag.mockResolvedValue(mockTag);\n\n      const result = await updateTagTool.execute({\n        tagId: 'tag-1',\n        name: 'Updated Tag',\n      });\n\n      expect(mockClient.updateTag).toHaveBeenCalledWith('tag-1', {\n        name: 'Updated Tag',\n      });\n      expect(result).toBe('✅ Successfully updated tag to \"Updated Tag\" (ID: tag-1)');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const updateTagToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-tag'\n      )?.[0];\n\n      expect(updateTagToolWithNullClient).toBeDefined();\n      await expect(\n        (updateTagToolWithNullClient as any).execute({ tagId: 'tag-1', name: 'Updated' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Tag not found');\n      mockClient.updateTag.mockRejectedValue(apiError);\n\n      await expect(updateTagTool.execute({ tagId: 'invalid-id', name: 'Updated' })).rejects.toThrow(\n        new UserError('Failed to update tag: Tag not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.updateTag.mockRejectedValue('Unknown error string');\n\n      await expect(updateTagTool.execute({ tagId: 'tag-1', name: 'Updated' })).rejects.toThrow(\n        new UserError('Failed to update tag with unknown error')\n      );\n    });\n  });\n\n  describe('delete-tag tool', () => {\n    let deleteTagTool: any;\n\n    beforeEach(() => {\n      deleteTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-tag'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(deleteTagTool.name).toBe('delete-tag');\n      expect(deleteTagTool.description).toContain('Delete a tag from n8n permanently');\n      expect(deleteTagTool.annotations).toEqual({\n        title: 'Delete Tag',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should delete tag successfully', async () => {\n      mockClient.deleteTag.mockResolvedValue(undefined);\n\n      const result = await deleteTagTool.execute({\n        tagId: 'tag-1',\n      });\n\n      expect(mockClient.deleteTag).toHaveBeenCalledWith('tag-1');\n      expect(result).toBe('✅ Successfully deleted tag with ID: tag-1');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const deleteTagToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-tag'\n      )?.[0];\n\n      expect(deleteTagToolWithNullClient).toBeDefined();\n      await expect(\n        (deleteTagToolWithNullClient as any).execute({ tagId: 'tag-1' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Tag not found');\n      mockClient.deleteTag.mockRejectedValue(apiError);\n\n      await expect(deleteTagTool.execute({ tagId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to delete tag: Tag not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteTag.mockRejectedValue('Unknown error string');\n\n      await expect(deleteTagTool.execute({ tagId: 'tag-1' })).rejects.toThrow(\n        new UserError('Failed to delete tag with unknown error')\n      );\n    });\n  });\n\n  describe('get-workflow-tags tool', () => {\n    let getWorkflowTagsTool: any;\n\n    beforeEach(() => {\n      getWorkflowTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-workflow-tags'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(getWorkflowTagsTool.name).toBe('get-workflow-tags');\n      expect(getWorkflowTagsTool.description).toContain(\n        'Get all tags assigned to a specific workflow'\n      );\n      expect(getWorkflowTagsTool.annotations).toEqual({\n        title: 'Get Workflow Tags',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should get workflow tags successfully', async () => {\n      const mockTags: N8nTag[] = [\n        {\n          id: 'tag-1',\n          name: 'Production',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-01T00:00:00.000Z',\n        },\n        {\n          id: 'tag-2',\n          name: 'API',\n          createdAt: '2023-01-01T00:00:00.000Z',\n          updatedAt: '2023-01-01T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getWorkflowTags.mockResolvedValue(mockTags);\n\n      const result = await getWorkflowTagsTool.execute({ workflowId: 'workflow-1' });\n\n      expect(mockClient.getWorkflowTags).toHaveBeenCalledWith('workflow-1');\n      expect(result).toContain('Found 2 tag(s) for workflow workflow-1');\n      expect(result).toContain('**Production** (ID: tag-1)');\n      expect(result).toContain('**API** (ID: tag-2)');\n    });\n\n    it('should handle workflow with no tags', async () => {\n      mockClient.getWorkflowTags.mockResolvedValue([]);\n\n      const result = await getWorkflowTagsTool.execute({ workflowId: 'workflow-1' });\n\n      expect(result).toBe('No tags found for workflow ID: workflow-1');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const getWorkflowTagsToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-workflow-tags'\n      )?.[0];\n\n      expect(getWorkflowTagsToolWithNullClient).toBeDefined();\n      await expect(\n        (getWorkflowTagsToolWithNullClient as any).execute({ workflowId: 'workflow-1' })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Workflow not found');\n      mockClient.getWorkflowTags.mockRejectedValue(apiError);\n\n      await expect(getWorkflowTagsTool.execute({ workflowId: 'invalid-id' })).rejects.toThrow(\n        new UserError('Failed to get workflow tags: Workflow not found')\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getWorkflowTags.mockRejectedValue('Unknown error string');\n\n      await expect(getWorkflowTagsTool.execute({ workflowId: 'workflow-1' })).rejects.toThrow(\n        new UserError('Failed to get workflow tags with unknown error')\n      );\n    });\n  });\n\n  describe('update-workflow-tags tool', () => {\n    let updateWorkflowTagsTool: any;\n\n    beforeEach(() => {\n      updateWorkflowTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-workflow-tags'\n      )[0];\n    });\n\n    it('should have correct tool configuration', () => {\n      expect(updateWorkflowTagsTool.name).toBe('update-workflow-tags');\n      expect(updateWorkflowTagsTool.description).toContain(\n        'Update the tags assigned to a workflow'\n      );\n      expect(updateWorkflowTagsTool.annotations).toEqual({\n        title: 'Update Workflow Tags',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should update workflow tags successfully with multiple tags', async () => {\n      mockClient.updateWorkflowTags.mockResolvedValue(undefined);\n\n      const result = await updateWorkflowTagsTool.execute({\n        workflowId: 'workflow-1',\n        tagIds: ['tag-1', 'tag-2', 'tag-3'],\n      });\n\n      expect(mockClient.updateWorkflowTags).toHaveBeenCalledWith('workflow-1', [\n        'tag-1',\n        'tag-2',\n        'tag-3',\n      ]);\n      expect(result).toBe('✅ Successfully updated workflow workflow-1 with 3 tag(s)');\n    });\n\n    it('should update workflow tags successfully with no tags', async () => {\n      mockClient.updateWorkflowTags.mockResolvedValue(undefined);\n\n      const result = await updateWorkflowTagsTool.execute({\n        workflowId: 'workflow-1',\n        tagIds: [],\n      });\n\n      expect(mockClient.updateWorkflowTags).toHaveBeenCalledWith('workflow-1', []);\n      expect(result).toBe('✅ Successfully updated workflow workflow-1 with 0 tag(s)');\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const getClientNull = jest.fn(() => null);\n      const nullClientServer = { addTool: jest.fn() };\n      createTagTools(getClientNull, nullClientServer);\n\n      const updateWorkflowTagsToolWithNullClient = nullClientServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-workflow-tags'\n      )?.[0];\n\n      expect(updateWorkflowTagsToolWithNullClient).toBeDefined();\n      await expect(\n        (updateWorkflowTagsToolWithNullClient as any).execute({\n          workflowId: 'workflow-1',\n          tagIds: ['tag-1'],\n        })\n      ).rejects.toThrow(new UserError('n8n client not initialized. Please run init-n8n first.'));\n    });\n\n    it('should handle API errors', async () => {\n      const apiError = new Error('Workflow not found');\n      mockClient.updateWorkflowTags.mockRejectedValue(apiError);\n\n      await expect(\n        updateWorkflowTagsTool.execute({ workflowId: 'invalid-id', tagIds: ['tag-1'] })\n      ).rejects.toThrow(new UserError('Failed to update workflow tags: Workflow not found'));\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.updateWorkflowTags.mockRejectedValue('Unknown error string');\n\n      await expect(\n        updateWorkflowTagsTool.execute({ workflowId: 'workflow-1', tagIds: ['tag-1'] })\n      ).rejects.toThrow(new UserError('Failed to update workflow tags with unknown error'));\n    });\n  });\n\n  describe('parameter validation', () => {\n    it('should validate tag ID parameters', () => {\n      const getTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-tag'\n      )[0];\n\n      expect(getTagTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate workflow ID parameters', () => {\n      const getWorkflowTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-workflow-tags'\n      )[0];\n\n      expect(getWorkflowTagsTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate create tag parameters', () => {\n      const createTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-tag'\n      )[0];\n\n      expect(createTagTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate update tag parameters', () => {\n      const updateTagTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-tag'\n      )[0];\n\n      expect(updateTagTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate update workflow tags parameters', () => {\n      const updateWorkflowTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'update-workflow-tags'\n      )[0];\n\n      expect(updateWorkflowTagsTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n\n    it('should validate list tags parameters', () => {\n      const listTagsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-tags'\n      )[0];\n\n      expect(listTagsTool.parameters).toBeDefined();\n      // Zod validation would be handled at runtime\n    });\n  });\n});\n"],"version":3}