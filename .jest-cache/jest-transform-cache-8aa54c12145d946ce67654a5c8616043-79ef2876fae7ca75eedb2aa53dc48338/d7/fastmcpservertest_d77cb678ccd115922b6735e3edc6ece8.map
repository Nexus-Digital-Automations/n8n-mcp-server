{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/integration/fastmcp-server.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/integration/fastmcp-server.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll, jest } from '@jest/globals';\nimport { FastMCP, type ToolOptions } from 'fastmcp';\n\n// Type assertion for Jest mock functions to avoid strict typing issues\ntype MockFn = jest.MockedFunction<any>;\n\ndescribe('FastMCP Server Integration', () => {\n  let server: FastMCP;\n\n  beforeAll(async () => {\n    // Using the mocked FastMCP from tests/__mocks__/fastmcp.js\n    server = new FastMCP({\n      name: 'test-n8n-mcp-server',\n      version: '1.0.0',\n      instructions: 'Test server for integration testing',\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up server resources if needed\n    if (server) {\n      // FastMCP doesn't have an explicit close method, but we can clean up\n    }\n  });\n\n  it('should create FastMCP server instance', () => {\n    expect(server).toBeInstanceOf(FastMCP);\n  });\n\n  it('should be able to add tools', () => {\n    const mockTool: ToolOptions = {\n      name: 'test-tool',\n      description: 'A test tool',\n      parameters: {},\n      execute: jest.fn(),\n    };\n\n    expect(() => {\n      server.addTool(mockTool);\n    }).not.toThrow();\n  });\n\n  it('should handle tool execution', async () => {\n    const mockExecute: MockFn = jest.fn(() => Promise.resolve('execution result'));\n    const mockTool: ToolOptions = {\n      name: 'test-execution-tool',\n      description: 'A test tool for execution',\n      parameters: {},\n      execute: mockExecute,\n    };\n\n    server.addTool(mockTool);\n\n    // Note: Direct tool execution testing may require more complex setup\n    // depending on FastMCP's internal architecture\n    expect(mockTool.execute).toBeDefined();\n\n    const result = await mockTool.execute({});\n    expect(result).toBe('execution result');\n  });\n\n  it('should handle tool with parameters', async () => {\n    const mockExecute: MockFn = jest.fn((args: any) =>\n      Promise.resolve(`Received: ${args.testParam}`)\n    );\n\n    const mockTool: ToolOptions = {\n      name: 'test-params-tool',\n      description: 'A test tool with parameters',\n      parameters: {\n        testParam: {\n          type: 'string' as const,\n          description: 'A test parameter',\n        },\n      },\n      execute: mockExecute,\n    };\n\n    server.addTool(mockTool);\n\n    const result = await mockTool.execute({ testParam: 'test-value' });\n    expect(result).toBe('Received: test-value');\n  });\n\n  it('should handle tool errors gracefully', async () => {\n    const mockExecute: MockFn = jest.fn(() => Promise.reject(new Error('Test error')));\n    const mockTool: ToolOptions = {\n      name: 'test-error-tool',\n      description: 'A test tool that throws errors',\n      parameters: {},\n      execute: mockExecute,\n    };\n\n    server.addTool(mockTool);\n\n    await expect(mockTool.execute({})).rejects.toThrow('Test error');\n  });\n\n  describe('Tool Registration Validation', () => {\n    it('should accept tools with basic properties', () => {\n      // Our mock FastMCP doesn't enforce validation, so we test basic acceptance\n      const mockTool: ToolOptions = {\n        name: 'test-tool-validation',\n        description: 'Tool for validation testing',\n        parameters: {},\n        execute: jest.fn(),\n      };\n\n      expect(() => {\n        server.addTool(mockTool);\n      }).not.toThrow();\n    });\n\n    it('should handle tool registration gracefully', () => {\n      // Mock implementation accepts all tools without validation\n      const mockTool: ToolOptions = {\n        name: 'another-test-tool',\n        description: 'Another test tool',\n        parameters: {},\n        execute: jest.fn(),\n      };\n\n      expect(() => {\n        server.addTool(mockTool);\n      }).not.toThrow();\n    });\n  });\n\n  describe('Tool Annotations', () => {\n    it('should accept tool annotations', () => {\n      const mockExecute: MockFn = jest.fn(() => Promise.resolve('annotated result'));\n      const mockTool: ToolOptions = {\n        name: 'annotated-tool',\n        description: 'A tool with annotations',\n        parameters: {},\n        annotations: {\n          title: 'Annotated Tool',\n          readOnlyHint: true,\n          destructiveHint: false,\n          idempotentHint: true,\n          openWorldHint: false,\n        },\n        execute: mockExecute,\n      };\n\n      expect(() => {\n        server.addTool(mockTool);\n      }).not.toThrow();\n    });\n  });\n});\n"],"version":3}