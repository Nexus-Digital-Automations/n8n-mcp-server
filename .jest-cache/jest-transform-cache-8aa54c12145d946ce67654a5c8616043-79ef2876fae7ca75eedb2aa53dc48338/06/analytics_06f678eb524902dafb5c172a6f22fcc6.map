{"version":3,"names":["cov_dshxx74ax","actualCoverage","z","UserError","WorkflowAnalysisSchema","s","object","workflowId","string","min","analysisType","enum","optional","default","includeRecommendations","boolean","historicalData","ComplexityMetricsSchema","threshold","sortBy","BottleneckAnalysisSchema","timeframe","number","max","OptimizationSuggestionsSchema","focusAreas","array","priority","WorkflowComparisonSchema","workflowIds","metrics","createAnalyticsTools","getClient","server","f","addTool","name","description","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","client","b","workflow","getWorkflow","nodes","length","nodeCount","uniqueNodeTypes","Set","map","node","type","connections","Object","keys","maxDepth","cyclomaticComplexity","maintainabilityIndex","cognitiveComplexity","calculateDepth","nodeId","visited","currentDepth","has","add","_connections","maxChildDepth","values","forEach","outputConnections","Array","isArray","conn","childDepth","Math","allTargetNodes","nodeConnections","outputs","startingNodes","filter","id","depth","reduce","complexity","nodeComplexity","nodeType","toLowerCase","includes","averageNodeComplexity","typeComplexity","getComplexityLevel","score","analysis","toFixed","nodeTypeDistribution","dist","entries","sort","a","count","percentage","executions","getExecutions","limit","workflowExecutions","data","exec","avgExecutionTime","stoppedAt","sum","duration","Date","getTime","startedAt","successRate","status","_error","recommendations","push","heavyNodeTypes","some","heavy","rec","index","error","message","workflows","response","getWorkflows","complexityData","_structuralComplexity","overallComplexity","active","complexityLevel","filteredData","item","report","toLocaleString","avgComplexity","avgNodes","distribution","level","indicator","charAt","toUpperCase","slice","statusIcon","complexityIcon","now","timeframeDuration","hour","day","week","month","startTime","w","bottleneckData","executionTimes","maxExecutionTime","minExecutionTime","sortedTimes","thresholdIndex","floor","thresholdTime","slowExecutions","failedExecutions","failureRate","structuralIssues","heavyNodes","problematicNodeTypes","types","nodeBottlenecks","lowercaseType","executionCount","issues","structural","heavyNodeCount","scoreA","scoreB","totalExecutions","avgFailureRate","overallAvgTime","topBottlenecks","severity","issue","bottleneck","suggestions","join","optimizations","nodeTypes","httpNodes","totalHttpNodes","category","impact","effort","implementation","codeNodes","errorHandlingNodes","JSON","stringify","ceil","monitoringNodes","documentedNodes","notes","trim","documentationRatio","defaultNamedNodes","startsWith","expensiveOperations","nodesWithCredentials","credentials","credentialTypes","flatMap","dataProcessingNodes","filteredOptimizations","opt","priorityOrder","critical","high","medium","low","categorizedSuggestions","groups","categoryOptimizations","priorityIcon","step","stepIndex","criticalAndHigh","workflowData","avgNodeComplexity","performanceMetrics","successfulExecutions","performance","comparison","complexityStats","avg","performanceData","avgExecutionTimes","successRates","perf","perfRating","errorHandling","reliabilityScore","reliabilityLevel","maintainabilityLevel","expensiveNodes","costRisk","costLevel","estimatedMonthlyCost","bestComplexity","best","current","bestMaintainability","bestPerformance","highComplexityWorkflows","d","lowMaintainabilityWorkflows","poorPerformanceWorkflows"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\n// Zod schemas for workflow analytics and intelligence\nconst WorkflowAnalysisSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  analysisType: z\n    .enum(['complexity', 'performance', 'optimization', 'comprehensive'])\n    .optional()\n    .default('comprehensive'),\n  includeRecommendations: z.boolean().optional().default(true),\n  historicalData: z.boolean().optional().default(true),\n});\n\nconst ComplexityMetricsSchema = z.object({\n  workflowId: z.string().optional(),\n  threshold: z.enum(['low', 'medium', 'high', 'all']).optional().default('all'),\n  sortBy: z.enum(['complexity', 'nodes', 'connections', 'depth']).optional().default('complexity'),\n});\n\nconst BottleneckAnalysisSchema = z.object({\n  workflowId: z.string().optional(),\n  timeframe: z.enum(['hour', 'day', 'week', 'month']).optional().default('week'),\n  threshold: z.number().min(0).max(100).optional().default(80),\n});\n\nconst OptimizationSuggestionsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  focusAreas: z\n    .array(z.enum(['performance', 'reliability', 'maintainability', 'cost', 'security']))\n    .optional()\n    .default(['performance', 'reliability']),\n  priority: z.enum(['critical', 'high', 'medium', 'low', 'all']).optional().default('all'),\n});\n\nconst WorkflowComparisonSchema = z.object({\n  workflowIds: z.array(z.string()).min(2, 'At least 2 workflows required for comparison'),\n  metrics: z\n    .array(z.enum(['complexity', 'performance', 'reliability', 'cost', 'maintainability']))\n    .optional()\n    .default(['complexity', 'performance', 'reliability']),\n});\n\n// Tool registration function for workflow analytics and intelligence tools\nexport function createAnalyticsTools(getClient: () => N8nClient | null, server: any) {\n  // Analyze workflow complexity and structure\n  server.addTool({\n    name: 'analyze-workflow-complexity',\n    description:\n      'Analyze workflow complexity, structure, and provide detailed metrics on maintainability and performance characteristics',\n    parameters: WorkflowAnalysisSchema,\n    annotations: {\n      title: 'Analyze Workflow Complexity',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        if (!workflow.nodes || workflow.nodes.length === 0) {\n          return `Workflow \"${workflow.name}\" has no nodes to analyze.`;\n        }\n\n        // Calculate complexity metrics\n        const metrics = {\n          nodeCount: workflow.nodes.length,\n          uniqueNodeTypes: [...new Set(workflow.nodes.map(node => node.type))].length,\n          connections: Object.keys(workflow.connections || {}).length,\n          maxDepth: 0,\n          cyclomaticComplexity: 0,\n          maintainabilityIndex: 0,\n          cognitiveComplexity: 0,\n        };\n\n        // Calculate workflow depth (longest path)\n        const calculateDepth = (\n          nodeId: string,\n          visited: Set<string>,\n          currentDepth: number\n        ): number => {\n          if (visited.has(nodeId)) return currentDepth; // Cycle detection\n          visited.add(nodeId);\n\n          const _connections = workflow.connections?.[nodeId];\n          if (!_connections || Object.keys(_connections).length === 0) {\n            return currentDepth;\n          }\n\n          let maxChildDepth = currentDepth;\n          Object.values(_connections).forEach((outputConnections: any) => {\n            if (Array.isArray(outputConnections)) {\n              outputConnections.forEach((conn: any) => {\n                if (conn.node) {\n                  const childDepth = calculateDepth(conn.node, new Set(visited), currentDepth + 1);\n                  maxChildDepth = Math.max(maxChildDepth, childDepth);\n                }\n              });\n            }\n          });\n\n          return maxChildDepth;\n        };\n\n        // Find starting nodes (nodes with no inputs)\n        const allTargetNodes = new Set<string>();\n        Object.values(workflow.connections || {}).forEach((nodeConnections: any) => {\n          Object.values(nodeConnections).forEach((outputs: any) => {\n            if (Array.isArray(outputs)) {\n              outputs.forEach((conn: any) => {\n                if (conn.node) allTargetNodes.add(conn.node);\n              });\n            }\n          });\n        });\n\n        const startingNodes = workflow.nodes.filter(node => !allTargetNodes.has(node.id));\n\n        // Calculate maximum depth\n        startingNodes.forEach(node => {\n          const depth = calculateDepth(node.id, new Set(), 1);\n          metrics.maxDepth = Math.max(metrics.maxDepth, depth);\n        });\n\n        // Calculate cyclomatic complexity (simplified)\n        metrics.cyclomaticComplexity = metrics.connections - metrics.nodeCount + 2;\n        if (metrics.cyclomaticComplexity < 1) metrics.cyclomaticComplexity = 1;\n\n        // Calculate cognitive complexity (based on node types and nesting)\n        metrics.cognitiveComplexity = workflow.nodes.reduce((complexity, node) => {\n          let nodeComplexity = 1; // Base complexity\n\n          // Add complexity for different node types\n          const nodeType = node.type.toLowerCase();\n          if (\n            nodeType.includes('if') ||\n            nodeType.includes('switch') ||\n            nodeType.includes('merge')\n          ) {\n            nodeComplexity += 2; // Conditional logic\n          } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n            nodeComplexity += 3; // Iteration/branching\n          } else if (nodeType.includes('code') || nodeType.includes('function')) {\n            nodeComplexity += 1; // Custom logic\n          }\n\n          return complexity + nodeComplexity;\n        }, 0);\n\n        // Calculate maintainability index (0-100 scale)\n        const averageNodeComplexity = metrics.cognitiveComplexity / metrics.nodeCount;\n        const typeComplexity = metrics.uniqueNodeTypes / metrics.nodeCount;\n        metrics.maintainabilityIndex = Math.max(\n          0,\n          Math.min(\n            100,\n            100 - averageNodeComplexity * 10 - typeComplexity * 20 - metrics.maxDepth * 5\n          )\n        );\n\n        // Complexity classification\n        const getComplexityLevel = (score: number): string => {\n          if (score <= 5) return '🟢 Low';\n          if (score <= 15) return '🟡 Medium';\n          if (score <= 25) return '🟠 High';\n          return '🔴 Very High';\n        };\n\n        let analysis = `# Workflow Complexity Analysis: \"${workflow.name}\"\\n\\n`;\n\n        // Basic metrics\n        analysis += `## 📊 Structure Metrics\\n`;\n        analysis += `- **Total Nodes**: ${metrics.nodeCount}\\n`;\n        analysis += `- **Unique Node Types**: ${metrics.uniqueNodeTypes}\\n`;\n        analysis += `- **Connections**: ${metrics.connections}\\n`;\n        analysis += `- **Maximum Depth**: ${metrics.maxDepth} levels\\n`;\n        analysis += `- **Starting Nodes**: ${startingNodes.length}\\n\\n`;\n\n        // Complexity metrics\n        analysis += `## 🧮 Complexity Metrics\\n`;\n        analysis += `- **Cyclomatic Complexity**: ${metrics.cyclomaticComplexity} ${getComplexityLevel(metrics.cyclomaticComplexity)}\\n`;\n        analysis += `- **Cognitive Complexity**: ${metrics.cognitiveComplexity} ${getComplexityLevel(metrics.cognitiveComplexity)}\\n`;\n        analysis += `- **Maintainability Index**: ${metrics.maintainabilityIndex.toFixed(1)}/100\\n\\n`;\n\n        // Node type breakdown\n        const nodeTypeDistribution = workflow.nodes.reduce(\n          (dist, node) => {\n            const type = node.type;\n            dist[type] = (dist[type] || 0) + 1;\n            return dist;\n          },\n          {} as Record<string, number>\n        );\n\n        analysis += `## 🔧 Node Type Distribution\\n`;\n        Object.entries(nodeTypeDistribution)\n          .sort((a, b) => b[1] - a[1])\n          .forEach(([type, count]) => {\n            const percentage = ((count / metrics.nodeCount) * 100).toFixed(1);\n            analysis += `- **${type}**: ${count} nodes (${percentage}%)\\n`;\n          });\n        analysis += '\\n';\n\n        // Performance analysis\n        if (args.historicalData) {\n          try {\n            const executions = await client.getExecutions({ limit: 50 });\n            const workflowExecutions = executions.data.filter(\n              exec => exec.workflowId === args.workflowId\n            );\n\n            if (workflowExecutions.length > 0) {\n              const avgExecutionTime =\n                workflowExecutions\n                  .filter(exec => exec.stoppedAt)\n                  .reduce((sum, exec) => {\n                    const duration =\n                      new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime();\n                    return sum + duration;\n                  }, 0) / workflowExecutions.length;\n\n              const successRate =\n                (workflowExecutions.filter(exec => exec.status === 'success').length /\n                  workflowExecutions.length) *\n                100;\n\n              analysis += `## ⚡ Performance Metrics\\n`;\n              analysis += `- **Average Execution Time**: ${(avgExecutionTime / 1000).toFixed(2)}s\\n`;\n              analysis += `- **Success Rate**: ${successRate.toFixed(1)}%\\n`;\n              analysis += `- **Recent Executions**: ${workflowExecutions.length}\\n\\n`;\n            }\n          } catch (_error) {\n            // Performance data not available\n          }\n        }\n\n        // Analysis and recommendations\n        if (args.includeRecommendations) {\n          analysis += `## 💡 Analysis & Recommendations\\n\\n`;\n\n          const recommendations = [];\n\n          if (metrics.nodeCount > 50) {\n            recommendations.push(\n              '**Workflow Size**: Consider breaking this workflow into smaller, more manageable sub-workflows'\n            );\n          }\n\n          if (metrics.maxDepth > 10) {\n            recommendations.push(\n              '**Workflow Depth**: High nesting level detected - consider flattening the workflow structure'\n            );\n          }\n\n          if (metrics.cyclomaticComplexity > 15) {\n            recommendations.push(\n              '**Cyclomatic Complexity**: High complexity - consider simplifying conditional logic and branching'\n            );\n          }\n\n          if (metrics.cognitiveComplexity > 25) {\n            recommendations.push(\n              '**Cognitive Complexity**: Workflow may be difficult to understand - consider adding documentation and simplifying logic'\n            );\n          }\n\n          if (metrics.maintainabilityIndex < 60) {\n            recommendations.push(\n              '**Maintainability**: Low maintainability score - consider refactoring for better code organization'\n            );\n          }\n\n          if (metrics.uniqueNodeTypes / metrics.nodeCount > 0.8) {\n            recommendations.push(\n              '**Node Diversity**: High variety of node types - ensure team familiarity with all node types used'\n            );\n          }\n\n          // Performance-based recommendations\n          const heavyNodeTypes = Object.entries(nodeTypeDistribution).filter(([type]) =>\n            ['code', 'function', 'python', 'http-request', 'webhook'].some(heavy =>\n              type.toLowerCase().includes(heavy)\n            )\n          );\n\n          if (heavyNodeTypes.length > 0) {\n            recommendations.push(\n              '**Performance**: Resource-intensive nodes detected - monitor execution times and consider optimization'\n            );\n          }\n\n          if (recommendations.length === 0) {\n            recommendations.push(\n              '**Overall**: Workflow structure appears well-organized with reasonable complexity levels'\n            );\n          }\n\n          recommendations.forEach((rec, index) => {\n            analysis += `${index + 1}. ${rec}\\n`;\n          });\n          analysis += '\\n';\n\n          // Complexity score interpretation\n          analysis += `## 📈 Complexity Score Interpretation\\n`;\n          analysis += `- **Low (1-5)**: Simple, easy to understand and maintain\\n`;\n          analysis += `- **Medium (6-15)**: Moderate complexity, requires some expertise\\n`;\n          analysis += `- **High (16-25)**: Complex, requires careful management and documentation\\n`;\n          analysis += `- **Very High (26+)**: Very complex, consider refactoring or breaking down\\n\\n`;\n\n          analysis += `**Overall Assessment**: This workflow has a **${getComplexityLevel(metrics.cognitiveComplexity)}** complexity level.`;\n        }\n\n        return analysis;\n      } catch (error: any) {\n        throw new UserError(`Failed to analyze workflow complexity: ${error.message}`);\n      }\n    },\n  });\n\n  // Get complexity metrics for multiple workflows\n  server.addTool({\n    name: 'get-complexity-metrics',\n    description:\n      'Get complexity metrics for workflows, sorted by complexity level to identify the most complex workflows requiring attention',\n    parameters: ComplexityMetricsSchema,\n    annotations: {\n      title: 'Get Complexity Metrics',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ComplexityMetricsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        let workflows: N8nWorkflow[] = [];\n\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 50 });\n          workflows = response.data;\n        }\n\n        const complexityData = workflows.map(workflow => {\n          const nodeCount = workflow.nodes?.length || 0;\n          const uniqueNodeTypes = workflow.nodes\n            ? [...new Set(workflow.nodes.map(node => node.type))].length\n            : 0;\n          const _connections = Object.keys(workflow.connections || {}).length;\n\n          // Calculate simplified complexity score\n          const typeComplexity = nodeCount > 0 ? uniqueNodeTypes / nodeCount : 0;\n          const _structuralComplexity = nodeCount + _connections;\n          const cognitiveComplexity = (workflow.nodes || []).reduce((complexity, node) => {\n            const nodeType = node.type.toLowerCase();\n            let nodeComplexity = 1;\n\n            if (\n              nodeType.includes('if') ||\n              nodeType.includes('switch') ||\n              nodeType.includes('merge')\n            ) {\n              nodeComplexity += 2;\n            } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n              nodeComplexity += 3;\n            } else if (nodeType.includes('code') || nodeType.includes('function')) {\n              nodeComplexity += 1;\n            }\n\n            return complexity + nodeComplexity;\n          }, 0);\n\n          const overallComplexity = cognitiveComplexity + typeComplexity * 10;\n\n          return {\n            id: workflow.id,\n            name: workflow.name,\n            active: workflow.active,\n            nodeCount,\n            uniqueNodeTypes,\n            _connections,\n            cognitiveComplexity,\n            overallComplexity,\n            complexityLevel:\n              overallComplexity <= 5\n                ? 'low'\n                : overallComplexity <= 15\n                  ? 'medium'\n                  : overallComplexity <= 25\n                    ? 'high'\n                    : 'very-high',\n          };\n        });\n\n        // Filter by threshold\n        const filteredData =\n          args.threshold === 'all'\n            ? complexityData\n            : complexityData.filter(item => {\n                switch (args.threshold) {\n                  case 'low':\n                    return item.complexityLevel === 'low';\n                  case 'medium':\n                    return item.complexityLevel === 'medium';\n                  case 'high':\n                    return item.complexityLevel === 'high' || item.complexityLevel === 'very-high';\n                  default:\n                    return true;\n                }\n              });\n\n        // Sort by selected criteria\n        filteredData.sort((a, b) => {\n          switch (args.sortBy) {\n            case 'complexity':\n              return b.overallComplexity - a.overallComplexity;\n            case 'nodes':\n              return b.nodeCount - a.nodeCount;\n            case 'connections':\n              return b._connections - a._connections;\n            case 'depth':\n              return b.cognitiveComplexity - a.cognitiveComplexity;\n            default:\n              return b.overallComplexity - a.overallComplexity;\n          }\n        });\n\n        if (filteredData.length === 0) {\n          return `No workflows found matching the complexity threshold: ${args.threshold}`;\n        }\n\n        let report = `# Workflow Complexity Metrics Report\\n\\n`;\n        report += `**Analysis Date**: ${new Date().toLocaleString()}\\n`;\n        report += `**Workflows Analyzed**: ${filteredData.length}\\n`;\n        report += `**Sorted By**: ${args.sortBy}\\n`;\n        report += `**Complexity Filter**: ${args.threshold}\\n\\n`;\n\n        // Summary statistics\n        const avgComplexity =\n          filteredData.reduce((sum, item) => sum + item.overallComplexity, 0) / filteredData.length;\n        const avgNodes =\n          filteredData.reduce((sum, item) => sum + item.nodeCount, 0) / filteredData.length;\n\n        report += `## 📊 Summary Statistics\\n`;\n        report += `- **Average Complexity**: ${avgComplexity.toFixed(1)}\\n`;\n        report += `- **Average Node Count**: ${avgNodes.toFixed(1)}\\n`;\n        report += `- **Most Complex**: ${filteredData[0]?.name} (${filteredData[0]?.overallComplexity.toFixed(1)})\\n`;\n        report += `- **Least Complex**: ${filteredData[filteredData.length - 1]?.name} (${filteredData[filteredData.length - 1]?.overallComplexity.toFixed(1)})\\n\\n`;\n\n        // Complexity distribution\n        const distribution = filteredData.reduce(\n          (dist, item) => {\n            dist[item.complexityLevel] = (dist[item.complexityLevel] || 0) + 1;\n            return dist;\n          },\n          {} as Record<string, number>\n        );\n\n        report += `## 📈 Complexity Distribution\\n`;\n        Object.entries(distribution).forEach(([level, count]) => {\n          const percentage = ((count / filteredData.length) * 100).toFixed(1);\n          const indicator =\n            level === 'low' ? '🟢' : level === 'medium' ? '🟡' : level === 'high' ? '🟠' : '🔴';\n          report += `- **${indicator} ${level.charAt(0).toUpperCase() + level.slice(1)}**: ${count} workflows (${percentage}%)\\n`;\n        });\n        report += '\\n';\n\n        // Detailed workflow metrics table\n        report += `## 📋 Detailed Metrics\\n\\n`;\n        report += `| Workflow | Status | Nodes | Types | Connections | Complexity | Level |\\n`;\n        report += `|----------|--------|-------|-------|-------------|------------|-------|\\n`;\n\n        filteredData.slice(0, 20).forEach(item => {\n          // Limit to top 20\n          const statusIcon = item.active ? '🟢' : '🔴';\n          const complexityIcon =\n            item.complexityLevel === 'low'\n              ? '🟢'\n              : item.complexityLevel === 'medium'\n                ? '🟡'\n                : item.complexityLevel === 'high'\n                  ? '🟠'\n                  : '🔴';\n\n          report += `| ${item.name} | ${statusIcon} | ${item.nodeCount} | ${item.uniqueNodeTypes} | ${item._connections} | ${item.overallComplexity.toFixed(1)} | ${complexityIcon} ${item.complexityLevel} |\\n`;\n        });\n\n        if (filteredData.length > 20) {\n          report += `\\n*Showing top 20 workflows. Total: ${filteredData.length} workflows.*\\n`;\n        }\n\n        report += '\\n## 💡 Quick Actions\\n';\n        report += `- Use \\`analyze-workflow-complexity\\` for detailed analysis of specific workflows\\n`;\n        report += `- Use \\`get-optimization-suggestions\\` for improvement recommendations\\n`;\n        report += `- Use \\`identify-bottlenecks\\` to find performance issues\\n`;\n\n        return report;\n      } catch (error: any) {\n        throw new UserError(`Failed to get complexity metrics: ${error.message}`);\n      }\n    },\n  });\n\n  // Identify performance bottlenecks\n  server.addTool({\n    name: 'identify-bottlenecks',\n    description:\n      'Identify performance bottlenecks in workflows by analyzing execution patterns, slow nodes, and resource usage',\n    parameters: BottleneckAnalysisSchema,\n    annotations: {\n      title: 'Identify Bottlenecks',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof BottleneckAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Calculate timeframe\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n          month: 30 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(now.getTime() - timeframeDuration[args.timeframe]);\n\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 30 });\n          workflows = response.data.filter(w => w.active); // Focus on active workflows\n        }\n\n        let report = `# Performance Bottleneck Analysis\\n\\n`;\n        report += `**Analysis Period**: ${startTime.toLocaleString()} to ${now.toLocaleString()}\\n`;\n        report += `**Timeframe**: ${args.timeframe}\\n`;\n        report += `**Performance Threshold**: ${args.threshold}th percentile\\n`;\n        report += `**Workflows Analyzed**: ${workflows.length}\\n\\n`;\n\n        const bottleneckData = [];\n\n        for (const workflow of workflows) {\n          try {\n            // Get execution data\n            const executions = await client.getExecutions({ limit: 100 });\n            const workflowExecutions = executions.data.filter(\n              exec => exec.workflowId === workflow.id && new Date(exec.startedAt) >= startTime\n            );\n\n            if (workflowExecutions.length === 0) continue;\n\n            // Calculate execution metrics\n            const executionTimes = workflowExecutions\n              .filter(exec => exec.stoppedAt && exec.status === 'success')\n              .map(\n                exec => new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime()\n              );\n\n            if (executionTimes.length === 0) continue;\n\n            const avgExecutionTime =\n              executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length;\n            const maxExecutionTime = Math.max(...executionTimes);\n            const minExecutionTime = Math.min(...executionTimes);\n\n            // Calculate percentile threshold\n            const sortedTimes = executionTimes.sort((a, b) => a - b);\n            const thresholdIndex = Math.floor((args.threshold / 100) * sortedTimes.length);\n            const thresholdTime =\n              sortedTimes[thresholdIndex] || sortedTimes[sortedTimes.length - 1];\n\n            // Identify slow executions\n            const slowExecutions = workflowExecutions.filter(exec => {\n              if (!exec.stoppedAt) return false;\n              const duration =\n                new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime();\n              return duration >= thresholdTime;\n            });\n\n            // Calculate failure rate\n            const failedExecutions = workflowExecutions.filter(exec => exec.status === 'error');\n            const failureRate = (failedExecutions.length / workflowExecutions.length) * 100;\n\n            // Analyze workflow structure for potential bottlenecks\n            const structuralIssues = [];\n            const nodeCount = workflow.nodes?.length || 0;\n\n            if (nodeCount > 50) {\n              structuralIssues.push('Large workflow size may impact performance');\n            }\n\n            const heavyNodes = (workflow.nodes || []).filter(node => {\n              const nodeType = node.type.toLowerCase();\n              return [\n                'http-request',\n                'webhook',\n                'code',\n                'function',\n                'python',\n                'mysql',\n                'postgres',\n              ].some(type => nodeType.includes(type));\n            });\n\n            if (heavyNodes.length > nodeCount * 0.3) {\n              structuralIssues.push('High percentage of resource-intensive nodes');\n            }\n\n            // Identify potential node bottlenecks\n            const problematicNodeTypes = (workflow.nodes || []).reduce(\n              (types, node) => {\n                const nodeType = node.type;\n                types[nodeType] = (types[nodeType] || 0) + 1;\n                return types;\n              },\n              {} as Record<string, number>\n            );\n\n            const nodeBottlenecks = Object.entries(problematicNodeTypes)\n              .filter(([type, count]) => {\n                const lowercaseType = type.toLowerCase();\n                return (\n                  (lowercaseType.includes('http') ||\n                    lowercaseType.includes('webhook') ||\n                    lowercaseType.includes('code') ||\n                    lowercaseType.includes('function')) &&\n                  count > 5\n                );\n              })\n              .map(([type, count]) => `${count}x ${type} nodes`);\n\n            bottleneckData.push({\n              workflow,\n              metrics: {\n                executionCount: workflowExecutions.length,\n                avgExecutionTime,\n                maxExecutionTime,\n                minExecutionTime,\n                slowExecutions: slowExecutions.length,\n                failureRate,\n                thresholdTime,\n              },\n              issues: {\n                structural: structuralIssues,\n                nodeBottlenecks,\n                heavyNodeCount: heavyNodes.length,\n              },\n            });\n          } catch (_error) {\n            // Skip workflows that can't be analyzed\n            continue;\n          }\n        }\n\n        // Sort by potential bottleneck severity\n        bottleneckData.sort((a, b) => {\n          const scoreA =\n            a.metrics.avgExecutionTime / 1000 +\n            a.metrics.failureRate * 100 +\n            a.issues.heavyNodeCount * 10;\n          const scoreB =\n            b.metrics.avgExecutionTime / 1000 +\n            b.metrics.failureRate * 100 +\n            b.issues.heavyNodeCount * 10;\n          return scoreB - scoreA;\n        });\n\n        if (bottleneckData.length === 0) {\n          report += `No performance data available for the selected timeframe and workflows.\\n`;\n          report += `This could mean:\\n`;\n          report += `- No executions occurred in the specified timeframe\\n`;\n          report += `- Selected workflows are not active\\n`;\n          report += `- Execution data is not accessible\\n`;\n          return report;\n        }\n\n        // Summary statistics\n        const totalExecutions = bottleneckData.reduce(\n          (sum, data) => sum + data.metrics.executionCount,\n          0\n        );\n        const avgFailureRate =\n          bottleneckData.reduce((sum, data) => sum + data.metrics.failureRate, 0) /\n          bottleneckData.length;\n        const overallAvgTime =\n          bottleneckData.reduce((sum, data) => sum + data.metrics.avgExecutionTime, 0) /\n          bottleneckData.length;\n\n        report += `## 📊 Performance Summary\\n`;\n        report += `- **Total Executions**: ${totalExecutions}\\n`;\n        report += `- **Average Execution Time**: ${(overallAvgTime / 1000).toFixed(2)}s\\n`;\n        report += `- **Average Failure Rate**: ${avgFailureRate.toFixed(2)}%\\n`;\n        report += `- **Workflows with Issues**: ${\n          bottleneckData.filter(\n            data =>\n              data.metrics.avgExecutionTime > 30000 ||\n              data.metrics.failureRate > 5 ||\n              data.issues.structural.length > 0\n          ).length\n        }\\n\\n`;\n\n        // Top bottlenecks\n        report += `## 🚨 Performance Bottlenecks\\n\\n`;\n\n        const topBottlenecks = bottleneckData.slice(0, 10);\n        topBottlenecks.forEach((data, index) => {\n          const severity =\n            data.metrics.avgExecutionTime > 60000 || data.metrics.failureRate > 10\n              ? '🔴 Critical'\n              : data.metrics.avgExecutionTime > 30000 || data.metrics.failureRate > 5\n                ? '🟠 High'\n                : data.metrics.avgExecutionTime > 15000 || data.metrics.failureRate > 2\n                  ? '🟡 Medium'\n                  : '🟢 Low';\n\n          report += `### ${index + 1}. ${data.workflow.name} (${severity})\\n`;\n          report += `**Performance Metrics:**\\n`;\n          report += `- Average Execution Time: ${(data.metrics.avgExecutionTime / 1000).toFixed(2)}s\\n`;\n          report += `- Max Execution Time: ${(data.metrics.maxExecutionTime / 1000).toFixed(2)}s\\n`;\n          report += `- Slow Executions (>${(data.metrics.thresholdTime / 1000).toFixed(1)}s): ${data.metrics.slowExecutions}/${data.metrics.executionCount}\\n`;\n          report += `- Failure Rate: ${data.metrics.failureRate.toFixed(2)}%\\n`;\n\n          if (data.issues.structural.length > 0 || data.issues.nodeBottlenecks.length > 0) {\n            report += `**Identified Issues:**\\n`;\n            data.issues.structural.forEach(issue => {\n              report += `- ⚠️ ${issue}\\n`;\n            });\n            data.issues.nodeBottlenecks.forEach(bottleneck => {\n              report += `- 🔧 ${bottleneck} may cause performance issues\\n`;\n            });\n          }\n\n          report += `**Recommendations:**\\n`;\n          const recommendations = [];\n\n          if (data.metrics.avgExecutionTime > 30000) {\n            recommendations.push(\n              'Optimize long-running operations and consider workflow splitting'\n            );\n          }\n          if (data.metrics.failureRate > 5) {\n            recommendations.push('Investigate and improve error handling for reliability');\n          }\n          if (data.issues.heavyNodeCount > 5) {\n            recommendations.push('Review resource-intensive nodes for optimization opportunities');\n          }\n          if (data.issues.structural.length > 0) {\n            recommendations.push('Consider workflow restructuring for better performance');\n          }\n          if (recommendations.length === 0) {\n            recommendations.push('Monitor performance trends for any degradation');\n          }\n\n          recommendations.forEach(rec => {\n            report += `- 💡 ${rec}\\n`;\n          });\n          report += '\\n';\n        });\n\n        // Performance optimization tips\n        report += `## 🔧 General Optimization Tips\\n`;\n        report += `1. **Node Optimization**: Minimize HTTP requests and external API calls\\n`;\n        report += `2. **Workflow Structure**: Break large workflows into smaller, manageable pieces\\n`;\n        report += `3. **Error Handling**: Implement proper error handling to reduce failure rates\\n`;\n        report += `4. **Resource Management**: Use efficient data processing patterns\\n`;\n        report += `5. **Monitoring**: Set up alerts for performance degradation\\n\\n`;\n\n        report += `## 📈 Performance Tracking\\n`;\n        report += `- Use \\`track-workflow-performance\\` for detailed performance monitoring\\n`;\n        report += `- Use \\`get-optimization-suggestions\\` for specific improvement recommendations\\n`;\n        report += `- Use \\`analyze-workflow-complexity\\` to understand structural complexity\\n`;\n\n        return report;\n      } catch (error: any) {\n        throw new UserError(`Failed to identify bottlenecks: ${error.message}`);\n      }\n    },\n  });\n\n  // Get optimization suggestions\n  server.addTool({\n    name: 'get-optimization-suggestions',\n    description:\n      'Get specific optimization suggestions for workflows based on structure analysis, performance data, and best practices',\n    parameters: OptimizationSuggestionsSchema,\n    annotations: {\n      title: 'Get Optimization Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OptimizationSuggestionsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        if (!workflow.nodes || workflow.nodes.length === 0) {\n          return `Workflow \"${workflow.name}\" has no nodes to optimize.`;\n        }\n\n        let suggestions = `# Optimization Suggestions: \"${workflow.name}\"\\n\\n`;\n        suggestions += `**Analysis Date**: ${new Date().toLocaleString()}\\n`;\n        suggestions += `**Focus Areas**: ${args.focusAreas.join(', ')}\\n`;\n        suggestions += `**Priority Filter**: ${args.priority}\\n\\n`;\n\n        const optimizations: Array<{\n          category: string;\n          priority: 'critical' | 'high' | 'medium' | 'low';\n          title: string;\n          description: string;\n          impact: string;\n          effort: string;\n          implementation: string[];\n        }> = [];\n\n        // Analyze workflow structure\n        const nodeCount = workflow.nodes.length;\n        const nodeTypes = workflow.nodes.reduce(\n          (types, node) => {\n            types[node.type] = (types[node.type] || 0) + 1;\n            return types;\n          },\n          {} as Record<string, number>\n        );\n\n        const _connections = Object.keys(workflow.connections || {}).length;\n\n        // Performance optimizations\n        if (args.focusAreas.includes('performance')) {\n          // Check for HTTP request optimization\n          const httpNodes = Object.entries(nodeTypes).filter(\n            ([type]) =>\n              type.toLowerCase().includes('http') || type.toLowerCase().includes('webhook')\n          );\n\n          if (httpNodes.length > 0) {\n            const totalHttpNodes = httpNodes.reduce((sum, [, count]) => sum + count, 0);\n            if (totalHttpNodes > 5) {\n              optimizations.push({\n                category: 'Performance',\n                priority: 'high',\n                title: 'Optimize HTTP Request Patterns',\n                description: `Found ${totalHttpNodes} HTTP/webhook nodes. Multiple sequential HTTP requests can significantly impact performance.`,\n                impact: 'High - Can reduce execution time by 30-70%',\n                effort: 'Medium - Requires workflow restructuring',\n                implementation: [\n                  'Batch HTTP requests where possible',\n                  'Implement parallel execution for independent requests',\n                  'Add request caching for frequently accessed data',\n                  'Use HTTP request node pooling settings',\n                  'Consider using bulk API endpoints',\n                ],\n              });\n            }\n          }\n\n          // Check for code node optimization\n          const codeNodes = Object.entries(nodeTypes).filter(\n            ([type]) =>\n              type.toLowerCase().includes('code') || type.toLowerCase().includes('function')\n          );\n\n          if (codeNodes.length > 0) {\n            optimizations.push({\n              category: 'Performance',\n              priority: 'medium',\n              title: 'Code Node Performance Review',\n              description:\n                'Custom code nodes can be performance bottlenecks if not optimized properly.',\n              impact: 'Medium - Can improve execution speed by 20-40%',\n              effort: 'Low - Code review and optimization',\n              implementation: [\n                'Review custom code for inefficient loops or operations',\n                'Minimize external library usage in code nodes',\n                'Use built-in n8n nodes instead of custom code where possible',\n                'Implement proper error handling in code nodes',\n                'Consider moving complex logic to external services',\n              ],\n            });\n          }\n\n          // Check workflow size\n          if (nodeCount > 30) {\n            optimizations.push({\n              category: 'Performance',\n              priority: nodeCount > 50 ? 'critical' : 'high',\n              title: 'Workflow Size Optimization',\n              description: `Large workflow with ${nodeCount} nodes may have performance and maintainability issues.`,\n              impact: 'High - Improves execution speed and reliability',\n              effort: 'High - Requires workflow restructuring',\n              implementation: [\n                'Break workflow into smaller, focused sub-workflows',\n                'Use workflow triggers to chain related processes',\n                'Implement modular design patterns',\n                'Consider using n8n sub-workflow nodes',\n                'Document workflow dependencies and data flow',\n              ],\n            });\n          }\n        }\n\n        // Reliability optimizations\n        if (args.focusAreas.includes('reliability')) {\n          // Check for error handling\n          const errorHandlingNodes = workflow.nodes.filter(\n            node =>\n              node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error')\n          );\n\n          if (errorHandlingNodes.length < Math.ceil(nodeCount * 0.1)) {\n            optimizations.push({\n              category: 'Reliability',\n              priority: 'high',\n              title: 'Implement Comprehensive Error Handling',\n              description:\n                'Insufficient error handling detected. Robust error handling is crucial for workflow reliability.',\n              impact: 'High - Significantly improves workflow reliability',\n              effort: 'Medium - Add error handling nodes and logic',\n              implementation: [\n                'Add error handling nodes after critical operations',\n                'Implement retry logic for transient failures',\n                'Set up error notification workflows',\n                'Use try-catch patterns in code nodes',\n                'Configure proper timeout values for external requests',\n              ],\n            });\n          }\n\n          // Check for monitoring and logging\n          const monitoringNodes = workflow.nodes.filter(\n            node =>\n              node.type.toLowerCase().includes('webhook') ||\n              node.type.toLowerCase().includes('slack') ||\n              node.type.toLowerCase().includes('email') ||\n              node.type.toLowerCase().includes('log')\n          );\n\n          if (monitoringNodes.length === 0) {\n            optimizations.push({\n              category: 'Reliability',\n              priority: 'medium',\n              title: 'Add Monitoring and Alerting',\n              description:\n                'No monitoring or alerting nodes detected. Proper monitoring is essential for production workflows.',\n              impact: 'Medium - Improves issue detection and resolution',\n              effort: 'Low - Add monitoring nodes',\n              implementation: [\n                'Add Slack or email notification nodes for critical failures',\n                'Implement health check endpoints',\n                'Set up workflow execution logging',\n                'Create dashboards for workflow performance monitoring',\n                'Configure alerting thresholds',\n              ],\n            });\n          }\n        }\n\n        // Maintainability optimizations\n        if (args.focusAreas.includes('maintainability')) {\n          // Check for documentation\n          const documentedNodes = workflow.nodes.filter(\n            node => node.notes && node.notes.trim().length > 0\n          );\n          const documentationRatio = documentedNodes.length / nodeCount;\n\n          if (documentationRatio < 0.3) {\n            optimizations.push({\n              category: 'Maintainability',\n              priority: 'medium',\n              title: 'Improve Workflow Documentation',\n              description: `Only ${(documentationRatio * 100).toFixed(1)}% of nodes have documentation. Good documentation is crucial for maintainability.`,\n              impact: 'Medium - Improves team collaboration and maintenance',\n              effort: 'Low - Add node descriptions and comments',\n              implementation: [\n                'Add descriptive notes to all complex nodes',\n                'Document input/output data structures',\n                'Create workflow overview documentation',\n                'Use descriptive node names',\n                'Document any special configuration requirements',\n              ],\n            });\n          }\n\n          // Check for node naming conventions\n          const defaultNamedNodes = workflow.nodes.filter(\n            node =>\n              node.name === node.type ||\n              (node.name.startsWith(node.type) && node.name.length < node.type.length + 5)\n          );\n\n          if (defaultNamedNodes.length > nodeCount * 0.5) {\n            optimizations.push({\n              category: 'Maintainability',\n              priority: 'low',\n              title: 'Improve Node Naming Conventions',\n              description:\n                'Many nodes are using default names, which makes the workflow harder to understand.',\n              impact: 'Low - Improves workflow readability',\n              effort: 'Low - Rename nodes with descriptive names',\n              implementation: [\n                'Use descriptive, business-focused node names',\n                'Follow consistent naming conventions',\n                'Include the purpose or data being processed in names',\n                'Avoid technical jargon in node names',\n                'Use action-oriented naming (e.g., \"Send Welcome Email\")',\n              ],\n            });\n          }\n        }\n\n        // Cost optimizations\n        if (args.focusAreas.includes('cost')) {\n          // Check for inefficient operations\n          const expensiveOperations = workflow.nodes.filter(node => {\n            const type = node.type.toLowerCase();\n            return (\n              type.includes('http') ||\n              type.includes('webhook') ||\n              type.includes('ai') ||\n              type.includes('openai') ||\n              type.includes('anthropic')\n            );\n          });\n\n          if (expensiveOperations.length > 0) {\n            optimizations.push({\n              category: 'Cost',\n              priority: 'medium',\n              title: 'Optimize External Service Usage',\n              description: `Found ${expensiveOperations.length} nodes that may incur external costs. Optimization can reduce operational expenses.`,\n              impact: 'Medium - Can reduce operational costs by 20-50%',\n              effort: 'Medium - Requires optimization of external calls',\n              implementation: [\n                'Implement caching for frequently requested data',\n                'Batch API requests to reduce call volume',\n                'Use webhook endpoints instead of polling where possible',\n                'Optimize AI prompts to reduce token usage',\n                'Consider using less expensive alternative services',\n              ],\n            });\n          }\n        }\n\n        // Security optimizations\n        if (args.focusAreas.includes('security')) {\n          // Check for credential usage\n          const nodesWithCredentials = workflow.nodes.filter(\n            node => node.credentials && Object.keys(node.credentials).length > 0\n          );\n\n          const credentialTypes = [\n            ...new Set(nodesWithCredentials.flatMap(node => Object.keys(node.credentials || {}))),\n          ];\n\n          if (credentialTypes.length > 3) {\n            optimizations.push({\n              category: 'Security',\n              priority: 'high',\n              title: 'Consolidate and Review Credentials',\n              description: `Workflow uses ${credentialTypes.length} different credential types. Review for security best practices.`,\n              impact: 'High - Improves security posture',\n              effort: 'Medium - Review and consolidate credentials',\n              implementation: [\n                'Audit all credential usage and permissions',\n                'Use least-privilege principle for API access',\n                'Regularly rotate credentials used in workflows',\n                'Consider using service accounts instead of user credentials',\n                'Implement credential usage monitoring',\n              ],\n            });\n          }\n\n          // Check for data handling\n          const dataProcessingNodes = workflow.nodes.filter(node => {\n            const type = node.type.toLowerCase();\n            return (\n              type.includes('set') ||\n              type.includes('code') ||\n              type.includes('function') ||\n              type.includes('merge')\n            );\n          });\n\n          if (dataProcessingNodes.length > 0) {\n            optimizations.push({\n              category: 'Security',\n              priority: 'medium',\n              title: 'Review Data Processing Security',\n              description:\n                'Workflow processes data through multiple nodes. Ensure sensitive data is handled securely.',\n              impact: 'Medium - Improves data security compliance',\n              effort: 'Medium - Review and secure data processing',\n              implementation: [\n                'Identify and classify sensitive data in the workflow',\n                'Implement data encryption for sensitive information',\n                'Add data validation and sanitization',\n                'Review data retention and deletion policies',\n                'Ensure compliance with data protection regulations',\n              ],\n            });\n          }\n        }\n\n        // Filter by priority\n        const filteredOptimizations =\n          args.priority === 'all'\n            ? optimizations\n            : optimizations.filter(opt => opt.priority === args.priority);\n\n        if (filteredOptimizations.length === 0) {\n          suggestions += `No optimization suggestions found for the specified criteria.\\n`;\n          suggestions += `Try adjusting the focus areas or priority level to see more suggestions.`;\n          return suggestions;\n        }\n\n        // Sort by priority\n        const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n        filteredOptimizations.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n\n        // Group by category\n        const categorizedSuggestions = filteredOptimizations.reduce(\n          (groups, opt) => {\n            if (!groups[opt.category]) groups[opt.category] = [];\n            groups[opt.category].push(opt);\n            return groups;\n          },\n          {} as Record<string, typeof optimizations>\n        );\n\n        // Generate suggestions by category\n        Object.entries(categorizedSuggestions).forEach(([category, categoryOptimizations]) => {\n          suggestions += `## ${category} Optimizations\\n\\n`;\n\n          categoryOptimizations.forEach((opt, index) => {\n            const priorityIcon =\n              opt.priority === 'critical'\n                ? '🔴'\n                : opt.priority === 'high'\n                  ? '🟠'\n                  : opt.priority === 'medium'\n                    ? '🟡'\n                    : '🟢';\n\n            suggestions += `### ${index + 1}. ${opt.title} ${priorityIcon}\\n`;\n            suggestions += `**Priority**: ${opt.priority.charAt(0).toUpperCase() + opt.priority.slice(1)}\\n`;\n            suggestions += `**Description**: ${opt.description}\\n`;\n            suggestions += `**Expected Impact**: ${opt.impact}\\n`;\n            suggestions += `**Implementation Effort**: ${opt.effort}\\n\\n`;\n            suggestions += `**Implementation Steps**:\\n`;\n            opt.implementation.forEach((step, stepIndex) => {\n              suggestions += `${stepIndex + 1}. ${step}\\n`;\n            });\n            suggestions += '\\n';\n          });\n        });\n\n        // Summary and next steps\n        suggestions += `## 📋 Summary\\n`;\n        suggestions += `- **Total Suggestions**: ${filteredOptimizations.length}\\n`;\n        suggestions += `- **Critical Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'critical').length}\\n`;\n        suggestions += `- **High Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'high').length}\\n`;\n        suggestions += `- **Medium Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'medium').length}\\n`;\n        suggestions += `- **Low Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'low').length}\\n\\n`;\n\n        suggestions += `## 🎯 Recommended Action Plan\\n`;\n        const criticalAndHigh = filteredOptimizations.filter(\n          opt => opt.priority === 'critical' || opt.priority === 'high'\n        );\n        if (criticalAndHigh.length > 0) {\n          suggestions += `1. **Immediate Action**: Address ${criticalAndHigh.length} critical/high priority optimization(s)\\n`;\n          suggestions += `2. **Short Term**: Plan implementation of medium priority optimizations\\n`;\n          suggestions += `3. **Long Term**: Consider low priority improvements during maintenance cycles\\n`;\n        } else {\n          suggestions += `1. **Maintenance**: Implement medium and low priority optimizations during regular maintenance\\n`;\n          suggestions += `2. **Monitoring**: Set up performance monitoring to track optimization effectiveness\\n`;\n        }\n\n        suggestions += `\\n## 🔧 Additional Tools\\n`;\n        suggestions += `- Use \\`identify-bottlenecks\\` to find specific performance issues\\n`;\n        suggestions += `- Use \\`analyze-workflow-complexity\\` for detailed structure analysis\\n`;\n        suggestions += `- Use \\`track-workflow-performance\\` to monitor optimization results\\n`;\n\n        return suggestions;\n      } catch (error: any) {\n        throw new UserError(`Failed to get optimization suggestions: ${error.message}`);\n      }\n    },\n  });\n\n  // Compare workflows\n  server.addTool({\n    name: 'compare-workflows',\n    description:\n      'Compare multiple workflows across various metrics to identify patterns, best practices, and optimization opportunities',\n    parameters: WorkflowComparisonSchema,\n    annotations: {\n      title: 'Compare Workflows',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowComparisonSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflows: N8nWorkflow[] = [];\n        const workflowData: Array<{\n          workflow: N8nWorkflow;\n          metrics: {\n            complexity: number;\n            nodeCount: number;\n            connections: number;\n            uniqueNodeTypes: number;\n            maintainabilityIndex: number;\n            performance?: {\n              avgExecutionTime: number;\n              successRate: number;\n              executionCount: number;\n            };\n          };\n        }> = [];\n\n        // Fetch all workflows\n        for (const workflowId of args.workflowIds) {\n          try {\n            const workflow = await client.getWorkflow(workflowId);\n            workflows.push(workflow);\n          } catch (_error) {\n            throw new UserError(`Workflow with ID \"${workflowId}\" not found`);\n          }\n        }\n\n        // Calculate metrics for each workflow\n        for (const workflow of workflows) {\n          const nodeCount = workflow.nodes?.length || 0;\n          const uniqueNodeTypes = workflow.nodes\n            ? [...new Set(workflow.nodes.map(node => node.type))].length\n            : 0;\n          const _connections = Object.keys(workflow.connections || {}).length;\n\n          // Calculate complexity\n          const cognitiveComplexity = (workflow.nodes || []).reduce((complexity, node) => {\n            const nodeType = node.type.toLowerCase();\n            let nodeComplexity = 1;\n\n            if (\n              nodeType.includes('if') ||\n              nodeType.includes('switch') ||\n              nodeType.includes('merge')\n            ) {\n              nodeComplexity += 2;\n            } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n              nodeComplexity += 3;\n            } else if (nodeType.includes('code') || nodeType.includes('function')) {\n              nodeComplexity += 1;\n            }\n\n            return complexity + nodeComplexity;\n          }, 0);\n\n          // Calculate maintainability index\n          const typeComplexity = nodeCount > 0 ? uniqueNodeTypes / nodeCount : 0;\n          const avgNodeComplexity = nodeCount > 0 ? cognitiveComplexity / nodeCount : 0;\n          const maintainabilityIndex = Math.max(\n            0,\n            Math.min(100, 100 - avgNodeComplexity * 10 - typeComplexity * 20 - _connections * 2)\n          );\n\n          let performanceMetrics;\n\n          // Try to get performance data\n          if (args.metrics.includes('performance')) {\n            try {\n              const executions = await client.getExecutions({ limit: 100 });\n              const workflowExecutions = executions.data.filter(\n                exec => exec.workflowId === workflow.id\n              );\n\n              if (workflowExecutions.length > 0) {\n                const successfulExecutions = workflowExecutions.filter(\n                  exec => exec.status === 'success' && exec.stoppedAt\n                );\n                const avgExecutionTime =\n                  successfulExecutions.length > 0\n                    ? successfulExecutions.reduce((sum, exec) => {\n                        const duration =\n                          new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime();\n                        return sum + duration;\n                      }, 0) / successfulExecutions.length\n                    : 0;\n\n                const successRate = (successfulExecutions.length / workflowExecutions.length) * 100;\n\n                performanceMetrics = {\n                  avgExecutionTime,\n                  successRate,\n                  executionCount: workflowExecutions.length,\n                };\n              }\n            } catch (_error) {\n              // Performance data not available\n            }\n          }\n\n          workflowData.push({\n            workflow,\n            metrics: {\n              complexity: cognitiveComplexity,\n              nodeCount,\n              connections: _connections,\n              uniqueNodeTypes,\n              maintainabilityIndex,\n              performance: performanceMetrics,\n            },\n          });\n        }\n\n        let comparison = `# Workflow Comparison Report\\n\\n`;\n        comparison += `**Comparison Date**: ${new Date().toLocaleString()}\\n`;\n        comparison += `**Workflows Compared**: ${workflows.length}\\n`;\n        comparison += `**Metrics Analyzed**: ${args.metrics.join(', ')}\\n\\n`;\n\n        // Overview table\n        comparison += `## 📊 Overview Comparison\\n\\n`;\n        comparison += `| Workflow | Status | Nodes | Types | Connections | Complexity |\\n`;\n        comparison += `|----------|--------|-------|-------|-------------|------------|\\n`;\n\n        workflowData.forEach(data => {\n          const statusIcon = data.workflow.active ? '🟢' : '🔴';\n          comparison += `| ${data.workflow.name} | ${statusIcon} | ${data.metrics.nodeCount} | ${data.metrics.uniqueNodeTypes} | ${data.metrics.connections} | ${data.metrics.complexity} |\\n`;\n        });\n        comparison += '\\n';\n\n        // Detailed metrics comparison\n        if (args.metrics.includes('complexity')) {\n          comparison += `## 🧮 Complexity Analysis\\n\\n`;\n\n          const complexityStats = {\n            avg:\n              workflowData.reduce((sum, data) => sum + data.metrics.complexity, 0) /\n              workflowData.length,\n            min: Math.min(...workflowData.map(data => data.metrics.complexity)),\n            max: Math.max(...workflowData.map(data => data.metrics.complexity)),\n          };\n\n          comparison += `**Complexity Statistics:**\\n`;\n          comparison += `- Average: ${complexityStats.avg.toFixed(1)}\\n`;\n          comparison += `- Range: ${complexityStats.min} - ${complexityStats.max}\\n\\n`;\n\n          workflowData.forEach(data => {\n            const complexityLevel =\n              data.metrics.complexity <= 5\n                ? '🟢 Low'\n                : data.metrics.complexity <= 15\n                  ? '🟡 Medium'\n                  : data.metrics.complexity <= 25\n                    ? '🟠 High'\n                    : '🔴 Very High';\n\n            comparison += `**${data.workflow.name}**: ${data.metrics.complexity} (${complexityLevel})\\n`;\n            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\\n`;\n            comparison += `- Node Type Diversity: ${((data.metrics.uniqueNodeTypes / data.metrics.nodeCount) * 100).toFixed(1)}%\\n\\n`;\n          });\n        }\n\n        if (\n          args.metrics.includes('performance') &&\n          workflowData.some(data => data.metrics.performance)\n        ) {\n          comparison += `## ⚡ Performance Comparison\\n\\n`;\n\n          const performanceData = workflowData.filter(data => data.metrics.performance);\n\n          if (performanceData.length > 0) {\n            const avgExecutionTimes = performanceData.map(\n              data => data.metrics.performance!.avgExecutionTime\n            );\n            const successRates = performanceData.map(data => data.metrics.performance!.successRate);\n\n            comparison += `**Performance Statistics:**\\n`;\n            comparison += `- Average Execution Time: ${(avgExecutionTimes.reduce((a, b) => a + b, 0) / avgExecutionTimes.length / 1000).toFixed(2)}s\\n`;\n            comparison += `- Average Success Rate: ${(successRates.reduce((a, b) => a + b, 0) / successRates.length).toFixed(1)}%\\n\\n`;\n\n            performanceData.forEach(data => {\n              const perf = data.metrics.performance!;\n              const perfRating =\n                perf.avgExecutionTime < 5000 && perf.successRate > 95\n                  ? '🟢 Excellent'\n                  : perf.avgExecutionTime < 15000 && perf.successRate > 90\n                    ? '🟡 Good'\n                    : perf.avgExecutionTime < 30000 && perf.successRate > 80\n                      ? '🟠 Fair'\n                      : '🔴 Poor';\n\n              comparison += `**${data.workflow.name}**: ${perfRating}\\n`;\n              comparison += `- Avg Execution Time: ${(perf.avgExecutionTime / 1000).toFixed(2)}s\\n`;\n              comparison += `- Success Rate: ${perf.successRate.toFixed(1)}%\\n`;\n              comparison += `- Executions Analyzed: ${perf.executionCount}\\n\\n`;\n            });\n          } else {\n            comparison += `No performance data available for the selected workflows.\\n\\n`;\n          }\n        }\n\n        if (args.metrics.includes('reliability')) {\n          comparison += `## 🛡️ Reliability Analysis\\n\\n`;\n\n          workflowData.forEach(data => {\n            const errorHandling = (data.workflow.nodes || []).filter(\n              node =>\n                node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error')\n            ).length;\n\n            const monitoringNodes = (data.workflow.nodes || []).filter(\n              node =>\n                node.type.toLowerCase().includes('webhook') ||\n                node.type.toLowerCase().includes('slack') ||\n                node.type.toLowerCase().includes('email')\n            ).length;\n\n            const reliabilityScore =\n              errorHandling * 20 +\n              monitoringNodes * 15 +\n              (data.metrics.performance?.successRate || 50);\n\n            const reliabilityLevel =\n              reliabilityScore >= 90\n                ? '🟢 High'\n                : reliabilityScore >= 70\n                  ? '🟡 Medium'\n                  : reliabilityScore >= 50\n                    ? '🟠 Low'\n                    : '🔴 Very Low';\n\n            comparison += `**${data.workflow.name}**: ${reliabilityLevel} (${reliabilityScore.toFixed(0)}/100)\\n`;\n            comparison += `- Error Handling Nodes: ${errorHandling}\\n`;\n            comparison += `- Monitoring/Alerting Nodes: ${monitoringNodes}\\n`;\n            if (data.metrics.performance) {\n              comparison += `- Success Rate: ${data.metrics.performance.successRate.toFixed(1)}%\\n`;\n            }\n            comparison += '\\n';\n          });\n        }\n\n        if (args.metrics.includes('maintainability')) {\n          comparison += `## 🔧 Maintainability Comparison\\n\\n`;\n\n          workflowData.forEach(data => {\n            const documentedNodes = (data.workflow.nodes || []).filter(\n              node => node.notes && node.notes.trim().length > 0\n            ).length;\n\n            const documentationRatio =\n              data.metrics.nodeCount > 0 ? (documentedNodes / data.metrics.nodeCount) * 100 : 0;\n\n            const maintainabilityLevel =\n              data.metrics.maintainabilityIndex >= 80\n                ? '🟢 High'\n                : data.metrics.maintainabilityIndex >= 60\n                  ? '🟡 Medium'\n                  : data.metrics.maintainabilityIndex >= 40\n                    ? '🟠 Low'\n                    : '🔴 Very Low';\n\n            comparison += `**${data.workflow.name}**: ${maintainabilityLevel}\\n`;\n            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\\n`;\n            comparison += `- Documentation Coverage: ${documentationRatio.toFixed(1)}%\\n`;\n            comparison += `- Node Type Diversity: ${data.metrics.uniqueNodeTypes}/${data.metrics.nodeCount}\\n\\n`;\n          });\n        }\n\n        if (args.metrics.includes('cost')) {\n          comparison += `## 💰 Cost Analysis\\n\\n`;\n\n          workflowData.forEach(data => {\n            const expensiveNodes = (data.workflow.nodes || []).filter(node => {\n              const type = node.type.toLowerCase();\n              return (\n                type.includes('http') ||\n                type.includes('webhook') ||\n                type.includes('ai') ||\n                type.includes('openai') ||\n                type.includes('anthropic') ||\n                type.includes('mysql') ||\n                type.includes('postgres')\n              );\n            }).length;\n\n            const costRisk = expensiveNodes / data.metrics.nodeCount;\n            const costLevel =\n              costRisk < 0.2\n                ? '🟢 Low'\n                : costRisk < 0.4\n                  ? '🟡 Medium'\n                  : costRisk < 0.6\n                    ? '🟠 High'\n                    : '🔴 Very High';\n\n            comparison += `**${data.workflow.name}**: ${costLevel} Cost Risk\\n`;\n            comparison += `- External Service Nodes: ${expensiveNodes}/${data.metrics.nodeCount}\\n`;\n            comparison += `- Cost Risk Ratio: ${(costRisk * 100).toFixed(1)}%\\n`;\n            if (data.metrics.performance) {\n              const estimatedMonthlyCost =\n                expensiveNodes * data.metrics.performance.executionCount * 0.01 * 30;\n              comparison += `- Estimated Monthly Cost: $${estimatedMonthlyCost.toFixed(2)}\\n`;\n            }\n            comparison += '\\n';\n          });\n        }\n\n        // Best practices identification\n        comparison += `## 🏆 Best Practices Identified\\n\\n`;\n\n        const bestComplexity = workflowData.reduce((best, current) =>\n          current.metrics.complexity < best.metrics.complexity ? current : best\n        );\n\n        const bestMaintainability = workflowData.reduce((best, current) =>\n          current.metrics.maintainabilityIndex > best.metrics.maintainabilityIndex ? current : best\n        );\n\n        comparison += `**Lowest Complexity**: ${bestComplexity.workflow.name} (${bestComplexity.metrics.complexity})\\n`;\n        comparison += `**Highest Maintainability**: ${bestMaintainability.workflow.name} (${bestMaintainability.metrics.maintainabilityIndex.toFixed(1)}/100)\\n`;\n\n        if (workflowData.some(data => data.metrics.performance)) {\n          const bestPerformance = workflowData\n            .filter(data => data.metrics.performance)\n            .reduce((best, current) =>\n              current.metrics.performance!.successRate >\n              (best.metrics.performance?.successRate || 0)\n                ? current\n                : best\n            );\n\n          comparison += `**Best Performance**: ${bestPerformance.workflow.name} (${bestPerformance.metrics.performance!.successRate.toFixed(1)}% success rate)\\n`;\n        }\n\n        // Recommendations\n        comparison += `\\n## 💡 Recommendations\\n\\n`;\n\n        const recommendations = [];\n\n        const highComplexityWorkflows = workflowData.filter(data => data.metrics.complexity > 20);\n        if (highComplexityWorkflows.length > 0) {\n          recommendations.push(\n            `**Complexity Reduction**: ${highComplexityWorkflows.map(d => d.workflow.name).join(', ')} have high complexity and should be reviewed for simplification`\n          );\n        }\n\n        const lowMaintainabilityWorkflows = workflowData.filter(\n          data => data.metrics.maintainabilityIndex < 60\n        );\n        if (lowMaintainabilityWorkflows.length > 0) {\n          recommendations.push(\n            `**Maintainability Improvement**: ${lowMaintainabilityWorkflows.map(d => d.workflow.name).join(', ')} need better documentation and structure`\n          );\n        }\n\n        const poorPerformanceWorkflows = workflowData.filter(\n          data =>\n            data.metrics.performance &&\n            (data.metrics.performance.successRate < 90 ||\n              data.metrics.performance.avgExecutionTime > 30000)\n        );\n        if (poorPerformanceWorkflows.length > 0) {\n          recommendations.push(\n            `**Performance Optimization**: ${poorPerformanceWorkflows.map(d => d.workflow.name).join(', ')} need performance improvements`\n          );\n        }\n\n        if (recommendations.length === 0) {\n          recommendations.push(\n            'All workflows appear to be well-structured and performing adequately'\n          );\n        }\n\n        recommendations.forEach((rec, index) => {\n          comparison += `${index + 1}. ${rec}\\n`;\n        });\n\n        comparison += `\\n## 🔧 Next Steps\\n`;\n        comparison += `- Use \\`get-optimization-suggestions\\` for specific improvement recommendations\\n`;\n        comparison += `- Use \\`analyze-workflow-complexity\\` for detailed analysis of individual workflows\\n`;\n        comparison += `- Use \\`identify-bottlenecks\\` to find specific performance issues\\n`;\n\n        return comparison;\n      } catch (error: any) {\n        throw new UserError(`Failed to compare workflows: ${error.message}`);\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}