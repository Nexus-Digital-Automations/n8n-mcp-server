1109a235decff9c36319b018b48d93e2
/* istanbul ignore next */
function cov_dshxx74ax() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics.ts";
  var hash = "9d964dd573c6193629695b4d8cb54de6f0d6705d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 31
        },
        end: {
          line: 12,
          column: 2
        }
      },
      "1": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "2": {
        start: {
          line: 18,
          column: 33
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "3": {
        start: {
          line: 23,
          column: 38
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "4": {
        start: {
          line: 31,
          column: 33
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "5": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 248,
          column: 7
        }
      },
      "6": {
        start: {
          line: 53,
          column: 27
        },
        end: {
          line: 53,
          column: 38
        }
      },
      "7": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "8": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 94
        }
      },
      "9": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 246,
          column: 13
        }
      },
      "10": {
        start: {
          line: 58,
          column: 33
        },
        end: {
          line: 58,
          column: 74
        }
      },
      "11": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 61,
          column: 17
        }
      },
      "12": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 82
        }
      },
      "13": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 71,
          column: 17
        }
      },
      "14": {
        start: {
          line: 65,
          column: 76
        },
        end: {
          line: 65,
          column: 85
        }
      },
      "15": {
        start: {
          line: 73,
          column: 39
        },
        end: {
          line: 93,
          column: 17
        }
      },
      "16": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 75,
          column: 44
        }
      },
      "17": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 75,
          column: 44
        }
      },
      "18": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 40
        }
      },
      "19": {
        start: {
          line: 77,
          column: 41
        },
        end: {
          line: 77,
          column: 71
        }
      },
      "20": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "21": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 44
        }
      },
      "22": {
        start: {
          line: 81,
          column: 40
        },
        end: {
          line: 81,
          column: 52
        }
      },
      "23": {
        start: {
          line: 82,
          column: 20
        },
        end: {
          line: 91,
          column: 23
        }
      },
      "24": {
        start: {
          line: 83,
          column: 24
        },
        end: {
          line: 90,
          column: 25
        }
      },
      "25": {
        start: {
          line: 84,
          column: 28
        },
        end: {
          line: 89,
          column: 31
        }
      },
      "26": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 88,
          column: 33
        }
      },
      "27": {
        start: {
          line: 86,
          column: 55
        },
        end: {
          line: 86,
          column: 116
        }
      },
      "28": {
        start: {
          line: 87,
          column: 36
        },
        end: {
          line: 87,
          column: 88
        }
      },
      "29": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "30": {
        start: {
          line: 95,
          column: 39
        },
        end: {
          line: 95,
          column: 48
        }
      },
      "31": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 105,
          column: 19
        }
      },
      "32": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 104,
          column: 23
        }
      },
      "33": {
        start: {
          line: 98,
          column: 24
        },
        end: {
          line: 103,
          column: 25
        }
      },
      "34": {
        start: {
          line: 99,
          column: 28
        },
        end: {
          line: 102,
          column: 31
        }
      },
      "35": {
        start: {
          line: 100,
          column: 32
        },
        end: {
          line: 101,
          column: 66
        }
      },
      "36": {
        start: {
          line: 101,
          column: 36
        },
        end: {
          line: 101,
          column: 66
        }
      },
      "37": {
        start: {
          line: 106,
          column: 38
        },
        end: {
          line: 106,
          column: 97
        }
      },
      "38": {
        start: {
          line: 106,
          column: 68
        },
        end: {
          line: 106,
          column: 96
        }
      },
      "39": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 111,
          column: 19
        }
      },
      "40": {
        start: {
          line: 109,
          column: 34
        },
        end: {
          line: 109,
          column: 71
        }
      },
      "41": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 73
        }
      },
      "42": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 91
        }
      },
      "43": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 115,
          column: 53
        }
      },
      "44": {
        start: {
          line: 115,
          column: 20
        },
        end: {
          line: 115,
          column: 53
        }
      },
      "45": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 133,
          column: 22
        }
      },
      "46": {
        start: {
          line: 118,
          column: 41
        },
        end: {
          line: 118,
          column: 42
        }
      },
      "47": {
        start: {
          line: 120,
          column: 37
        },
        end: {
          line: 120,
          column: 60
        }
      },
      "48": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "49": {
        start: {
          line: 124,
          column: 24
        },
        end: {
          line: 124,
          column: 44
        }
      },
      "50": {
        start: {
          line: 126,
          column: 25
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "51": {
        start: {
          line: 127,
          column: 24
        },
        end: {
          line: 127,
          column: 44
        }
      },
      "52": {
        start: {
          line: 129,
          column: 25
        },
        end: {
          line: 131,
          column: 21
        }
      },
      "53": {
        start: {
          line: 130,
          column: 24
        },
        end: {
          line: 130,
          column: 44
        }
      },
      "54": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 55
        }
      },
      "55": {
        start: {
          line: 135,
          column: 46
        },
        end: {
          line: 135,
          column: 93
        }
      },
      "56": {
        start: {
          line: 136,
          column: 39
        },
        end: {
          line: 136,
          column: 82
        }
      },
      "57": {
        start: {
          line: 137,
          column: 16
        },
        end: {
          line: 137,
          column: 153
        }
      },
      "58": {
        start: {
          line: 139,
          column: 43
        },
        end: {
          line: 147,
          column: 17
        }
      },
      "59": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 141,
          column: 40
        }
      },
      "60": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 141,
          column: 40
        }
      },
      "61": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 143,
          column: 43
        }
      },
      "62": {
        start: {
          line: 143,
          column: 24
        },
        end: {
          line: 143,
          column: 43
        }
      },
      "63": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 145,
          column: 41
        }
      },
      "64": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 41
        }
      },
      "65": {
        start: {
          line: 146,
          column: 20
        },
        end: {
          line: 146,
          column: 42
        }
      },
      "66": {
        start: {
          line: 148,
          column: 31
        },
        end: {
          line: 148,
          column: 87
        }
      },
      "67": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 56
        }
      },
      "68": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 72
        }
      },
      "69": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 84
        }
      },
      "70": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 74
        }
      },
      "71": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 80
        }
      },
      "72": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 80
        }
      },
      "73": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 57
        }
      },
      "74": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 158,
          column: 145
        }
      },
      "75": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 142
        }
      },
      "76": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 160,
          column: 110
        }
      },
      "77": {
        start: {
          line: 162,
          column: 45
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "78": {
        start: {
          line: 163,
          column: 33
        },
        end: {
          line: 163,
          column: 42
        }
      },
      "79": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 55
        }
      },
      "80": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 32
        }
      },
      "81": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 61
        }
      },
      "82": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 173,
          column: 19
        }
      },
      "83": {
        start: {
          line: 169,
          column: 36
        },
        end: {
          line: 169,
          column: 47
        }
      },
      "84": {
        start: {
          line: 171,
          column: 39
        },
        end: {
          line: 171,
          column: 85
        }
      },
      "85": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 172,
          column: 83
        }
      },
      "86": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 33
        }
      },
      "87": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "88": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 198,
          column: 21
        }
      },
      "89": {
        start: {
          line: 178,
          column: 43
        },
        end: {
          line: 178,
          column: 84
        }
      },
      "90": {
        start: {
          line: 179,
          column: 51
        },
        end: {
          line: 179,
          column: 118
        }
      },
      "91": {
        start: {
          line: 179,
          column: 82
        },
        end: {
          line: 179,
          column: 117
        }
      },
      "92": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 194,
          column: 25
        }
      },
      "93": {
        start: {
          line: 181,
          column: 53
        },
        end: {
          line: 186,
          column: 61
        }
      },
      "94": {
        start: {
          line: 182,
          column: 48
        },
        end: {
          line: 182,
          column: 62
        }
      },
      "95": {
        start: {
          line: 184,
          column: 49
        },
        end: {
          line: 184,
          column: 120
        }
      },
      "96": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 185,
          column: 54
        }
      },
      "97": {
        start: {
          line: 187,
          column: 48
        },
        end: {
          line: 189,
          column: 35
        }
      },
      "98": {
        start: {
          line: 187,
          column: 83
        },
        end: {
          line: 187,
          column: 108
        }
      },
      "99": {
        start: {
          line: 190,
          column: 28
        },
        end: {
          line: 190,
          column: 69
        }
      },
      "100": {
        start: {
          line: 191,
          column: 28
        },
        end: {
          line: 191,
          column: 115
        }
      },
      "101": {
        start: {
          line: 192,
          column: 28
        },
        end: {
          line: 192,
          column: 91
        }
      },
      "102": {
        start: {
          line: 193,
          column: 28
        },
        end: {
          line: 193,
          column: 100
        }
      },
      "103": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 241,
          column: 17
        }
      },
      "104": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 71
        }
      },
      "105": {
        start: {
          line: 203,
          column: 44
        },
        end: {
          line: 203,
          column: 46
        }
      },
      "106": {
        start: {
          line: 204,
          column: 20
        },
        end: {
          line: 206,
          column: 21
        }
      },
      "107": {
        start: {
          line: 205,
          column: 24
        },
        end: {
          line: 205,
          column: 143
        }
      },
      "108": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 209,
          column: 21
        }
      },
      "109": {
        start: {
          line: 208,
          column: 24
        },
        end: {
          line: 208,
          column: 141
        }
      },
      "110": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 212,
          column: 21
        }
      },
      "111": {
        start: {
          line: 211,
          column: 24
        },
        end: {
          line: 211,
          column: 146
        }
      },
      "112": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 215,
          column: 21
        }
      },
      "113": {
        start: {
          line: 214,
          column: 24
        },
        end: {
          line: 214,
          column: 168
        }
      },
      "114": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "115": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 147
        }
      },
      "116": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "117": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 146
        }
      },
      "118": {
        start: {
          line: 223,
          column: 43
        },
        end: {
          line: 223,
          column: 207
        }
      },
      "119": {
        start: {
          line: 223,
          column: 99
        },
        end: {
          line: 223,
          column: 206
        }
      },
      "120": {
        start: {
          line: 223,
          column: 171
        },
        end: {
          line: 223,
          column: 205
        }
      },
      "121": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 226,
          column: 21
        }
      },
      "122": {
        start: {
          line: 225,
          column: 24
        },
        end: {
          line: 225,
          column: 151
        }
      },
      "123": {
        start: {
          line: 227,
          column: 20
        },
        end: {
          line: 229,
          column: 21
        }
      },
      "124": {
        start: {
          line: 228,
          column: 24
        },
        end: {
          line: 228,
          column: 137
        }
      },
      "125": {
        start: {
          line: 230,
          column: 20
        },
        end: {
          line: 232,
          column: 23
        }
      },
      "126": {
        start: {
          line: 231,
          column: 24
        },
        end: {
          line: 231,
          column: 61
        }
      },
      "127": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 37
        }
      },
      "128": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 74
        }
      },
      "129": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 93
        }
      },
      "130": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 102
        }
      },
      "131": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 111
        }
      },
      "132": {
        start: {
          line: 239,
          column: 20
        },
        end: {
          line: 239,
          column: 113
        }
      },
      "133": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 151
        }
      },
      "134": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 32
        }
      },
      "135": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 245,
          column: 95
        }
      },
      "136": {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 407,
          column: 7
        }
      },
      "137": {
        start: {
          line: 262,
          column: 27
        },
        end: {
          line: 262,
          column: 38
        }
      },
      "138": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "139": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 94
        }
      },
      "140": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 405,
          column: 13
        }
      },
      "141": {
        start: {
          line: 267,
          column: 32
        },
        end: {
          line: 267,
          column: 34
        }
      },
      "142": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "143": {
        start: {
          line: 269,
          column: 37
        },
        end: {
          line: 269,
          column: 78
        }
      },
      "144": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 270,
          column: 43
        }
      },
      "145": {
        start: {
          line: 273,
          column: 37
        },
        end: {
          line: 273,
          column: 77
        }
      },
      "146": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 46
        }
      },
      "147": {
        start: {
          line: 276,
          column: 39
        },
        end: {
          line: 319,
          column: 18
        }
      },
      "148": {
        start: {
          line: 277,
          column: 38
        },
        end: {
          line: 277,
          column: 65
        }
      },
      "149": {
        start: {
          line: 278,
          column: 44
        },
        end: {
          line: 280,
          column: 27
        }
      },
      "150": {
        start: {
          line: 279,
          column: 65
        },
        end: {
          line: 279,
          column: 74
        }
      },
      "151": {
        start: {
          line: 281,
          column: 41
        },
        end: {
          line: 281,
          column: 87
        }
      },
      "152": {
        start: {
          line: 283,
          column: 43
        },
        end: {
          line: 283,
          column: 90
        }
      },
      "153": {
        start: {
          line: 284,
          column: 50
        },
        end: {
          line: 284,
          column: 74
        }
      },
      "154": {
        start: {
          line: 285,
          column: 48
        },
        end: {
          line: 300,
          column: 25
        }
      },
      "155": {
        start: {
          line: 286,
          column: 41
        },
        end: {
          line: 286,
          column: 64
        }
      },
      "156": {
        start: {
          line: 287,
          column: 45
        },
        end: {
          line: 287,
          column: 46
        }
      },
      "157": {
        start: {
          line: 288,
          column: 24
        },
        end: {
          line: 298,
          column: 25
        }
      },
      "158": {
        start: {
          line: 291,
          column: 28
        },
        end: {
          line: 291,
          column: 48
        }
      },
      "159": {
        start: {
          line: 293,
          column: 29
        },
        end: {
          line: 298,
          column: 25
        }
      },
      "160": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 48
        }
      },
      "161": {
        start: {
          line: 296,
          column: 29
        },
        end: {
          line: 298,
          column: 25
        }
      },
      "162": {
        start: {
          line: 297,
          column: 28
        },
        end: {
          line: 297,
          column: 48
        }
      },
      "163": {
        start: {
          line: 299,
          column: 24
        },
        end: {
          line: 299,
          column: 59
        }
      },
      "164": {
        start: {
          line: 301,
          column: 46
        },
        end: {
          line: 301,
          column: 87
        }
      },
      "165": {
        start: {
          line: 302,
          column: 20
        },
        end: {
          line: 318,
          column: 22
        }
      },
      "166": {
        start: {
          line: 321,
          column: 37
        },
        end: {
          line: 334,
          column: 22
        }
      },
      "167": {
        start: {
          line: 324,
          column: 24
        },
        end: {
          line: 333,
          column: 25
        }
      },
      "168": {
        start: {
          line: 326,
          column: 32
        },
        end: {
          line: 326,
          column: 70
        }
      },
      "169": {
        start: {
          line: 328,
          column: 32
        },
        end: {
          line: 328,
          column: 73
        }
      },
      "170": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 330,
          column: 111
        }
      },
      "171": {
        start: {
          line: 332,
          column: 32
        },
        end: {
          line: 332,
          column: 44
        }
      },
      "172": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 349,
          column: 19
        }
      },
      "173": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 348,
          column: 21
        }
      },
      "174": {
        start: {
          line: 339,
          column: 28
        },
        end: {
          line: 339,
          column: 77
        }
      },
      "175": {
        start: {
          line: 341,
          column: 28
        },
        end: {
          line: 341,
          column: 61
        }
      },
      "176": {
        start: {
          line: 343,
          column: 28
        },
        end: {
          line: 343,
          column: 67
        }
      },
      "177": {
        start: {
          line: 345,
          column: 28
        },
        end: {
          line: 345,
          column: 81
        }
      },
      "178": {
        start: {
          line: 347,
          column: 28
        },
        end: {
          line: 347,
          column: 77
        }
      },
      "179": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 352,
          column: 17
        }
      },
      "180": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 101
        }
      },
      "181": {
        start: {
          line: 353,
          column: 29
        },
        end: {
          line: 353,
          column: 71
        }
      },
      "182": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 80
        }
      },
      "183": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 355,
          column: 77
        }
      },
      "184": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 60
        }
      },
      "185": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 73
        }
      },
      "186": {
        start: {
          line: 359,
          column: 38
        },
        end: {
          line: 359,
          column: 127
        }
      },
      "187": {
        start: {
          line: 359,
          column: 73
        },
        end: {
          line: 359,
          column: 101
        }
      },
      "188": {
        start: {
          line: 360,
          column: 33
        },
        end: {
          line: 360,
          column: 114
        }
      },
      "189": {
        start: {
          line: 360,
          column: 68
        },
        end: {
          line: 360,
          column: 88
        }
      },
      "190": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 55
        }
      },
      "191": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 84
        }
      },
      "192": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 79
        }
      },
      "193": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 126
        }
      },
      "194": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 365,
          column: 173
        }
      },
      "195": {
        start: {
          line: 367,
          column: 37
        },
        end: {
          line: 370,
          column: 22
        }
      },
      "196": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 368,
          column: 87
        }
      },
      "197": {
        start: {
          line: 369,
          column: 20
        },
        end: {
          line: 369,
          column: 32
        }
      },
      "198": {
        start: {
          line: 371,
          column: 16
        },
        end: {
          line: 371,
          column: 60
        }
      },
      "199": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 376,
          column: 19
        }
      },
      "200": {
        start: {
          line: 373,
          column: 39
        },
        end: {
          line: 373,
          column: 87
        }
      },
      "201": {
        start: {
          line: 374,
          column: 38
        },
        end: {
          line: 374,
          column: 121
        }
      },
      "202": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 375,
          column: 140
        }
      },
      "203": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 31
        }
      },
      "204": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 55
        }
      },
      "205": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 103
        }
      },
      "206": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 381,
          column: 103
        }
      },
      "207": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 393,
          column: 19
        }
      },
      "208": {
        start: {
          line: 384,
          column: 39
        },
        end: {
          line: 384,
          column: 64
        }
      },
      "209": {
        start: {
          line: 385,
          column: 43
        },
        end: {
          line: 391,
          column: 38
        }
      },
      "210": {
        start: {
          line: 392,
          column: 20
        },
        end: {
          line: 392,
          column: 219
        }
      },
      "211": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 396,
          column: 17
        }
      },
      "212": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 105
        }
      },
      "213": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 52
        }
      },
      "214": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 398,
          column: 112
        }
      },
      "215": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 101
        }
      },
      "216": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 88
        }
      },
      "217": {
        start: {
          line: 401,
          column: 16
        },
        end: {
          line: 401,
          column: 30
        }
      },
      "218": {
        start: {
          line: 404,
          column: 16
        },
        end: {
          line: 404,
          column: 90
        }
      },
      "219": {
        start: {
          line: 409,
          column: 4
        },
        end: {
          line: 636,
          column: 7
        }
      },
      "220": {
        start: {
          line: 421,
          column: 27
        },
        end: {
          line: 421,
          column: 38
        }
      },
      "221": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "222": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 94
        }
      },
      "223": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 634,
          column: 13
        }
      },
      "224": {
        start: {
          line: 427,
          column: 28
        },
        end: {
          line: 427,
          column: 38
        }
      },
      "225": {
        start: {
          line: 428,
          column: 42
        },
        end: {
          line: 433,
          column: 17
        }
      },
      "226": {
        start: {
          line: 434,
          column: 34
        },
        end: {
          line: 434,
          column: 93
        }
      },
      "227": {
        start: {
          line: 435,
          column: 32
        },
        end: {
          line: 435,
          column: 34
        }
      },
      "228": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 443,
          column: 17
        }
      },
      "229": {
        start: {
          line: 437,
          column: 37
        },
        end: {
          line: 437,
          column: 78
        }
      },
      "230": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 438,
          column: 43
        }
      },
      "231": {
        start: {
          line: 441,
          column: 37
        },
        end: {
          line: 441,
          column: 77
        }
      },
      "232": {
        start: {
          line: 442,
          column: 20
        },
        end: {
          line: 442,
          column: 68
        }
      },
      "233": {
        start: {
          line: 442,
          column: 58
        },
        end: {
          line: 442,
          column: 66
        }
      },
      "234": {
        start: {
          line: 444,
          column: 29
        },
        end: {
          line: 444,
          column: 68
        }
      },
      "235": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 108
        }
      },
      "236": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 63
        }
      },
      "237": {
        start: {
          line: 447,
          column: 16
        },
        end: {
          line: 447,
          column: 88
        }
      },
      "238": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 76
        }
      },
      "239": {
        start: {
          line: 449,
          column: 39
        },
        end: {
          line: 449,
          column: 41
        }
      },
      "240": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 539,
          column: 17
        }
      },
      "241": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 538,
          column: 21
        }
      },
      "242": {
        start: {
          line: 453,
          column: 43
        },
        end: {
          line: 453,
          column: 85
        }
      },
      "243": {
        start: {
          line: 454,
          column: 51
        },
        end: {
          line: 454,
          column: 155
        }
      },
      "244": {
        start: {
          line: 454,
          column: 82
        },
        end: {
          line: 454,
          column: 154
        }
      },
      "245": {
        start: {
          line: 455,
          column: 24
        },
        end: {
          line: 456,
          column: 37
        }
      },
      "246": {
        start: {
          line: 456,
          column: 28
        },
        end: {
          line: 456,
          column: 37
        }
      },
      "247": {
        start: {
          line: 458,
          column: 47
        },
        end: {
          line: 460,
          column: 113
        }
      },
      "248": {
        start: {
          line: 459,
          column: 44
        },
        end: {
          line: 459,
          column: 87
        }
      },
      "249": {
        start: {
          line: 460,
          column: 41
        },
        end: {
          line: 460,
          column: 112
        }
      },
      "250": {
        start: {
          line: 461,
          column: 24
        },
        end: {
          line: 462,
          column: 37
        }
      },
      "251": {
        start: {
          line: 462,
          column: 28
        },
        end: {
          line: 462,
          column: 37
        }
      },
      "252": {
        start: {
          line: 463,
          column: 49
        },
        end: {
          line: 463,
          column: 114
        }
      },
      "253": {
        start: {
          line: 463,
          column: 81
        },
        end: {
          line: 463,
          column: 86
        }
      },
      "254": {
        start: {
          line: 464,
          column: 49
        },
        end: {
          line: 464,
          column: 76
        }
      },
      "255": {
        start: {
          line: 465,
          column: 49
        },
        end: {
          line: 465,
          column: 76
        }
      },
      "256": {
        start: {
          line: 467,
          column: 44
        },
        end: {
          line: 467,
          column: 80
        }
      },
      "257": {
        start: {
          line: 467,
          column: 74
        },
        end: {
          line: 467,
          column: 79
        }
      },
      "258": {
        start: {
          line: 468,
          column: 47
        },
        end: {
          line: 468,
          column: 102
        }
      },
      "259": {
        start: {
          line: 469,
          column: 46
        },
        end: {
          line: 469,
          column: 112
        }
      },
      "260": {
        start: {
          line: 471,
          column: 47
        },
        end: {
          line: 476,
          column: 26
        }
      },
      "261": {
        start: {
          line: 472,
          column: 28
        },
        end: {
          line: 473,
          column: 45
        }
      },
      "262": {
        start: {
          line: 473,
          column: 32
        },
        end: {
          line: 473,
          column: 45
        }
      },
      "263": {
        start: {
          line: 474,
          column: 45
        },
        end: {
          line: 474,
          column: 116
        }
      },
      "264": {
        start: {
          line: 475,
          column: 28
        },
        end: {
          line: 475,
          column: 61
        }
      },
      "265": {
        start: {
          line: 478,
          column: 49
        },
        end: {
          line: 478,
          column: 107
        }
      },
      "266": {
        start: {
          line: 478,
          column: 83
        },
        end: {
          line: 478,
          column: 106
        }
      },
      "267": {
        start: {
          line: 479,
          column: 44
        },
        end: {
          line: 479,
          column: 103
        }
      },
      "268": {
        start: {
          line: 481,
          column: 49
        },
        end: {
          line: 481,
          column: 51
        }
      },
      "269": {
        start: {
          line: 482,
          column: 42
        },
        end: {
          line: 482,
          column: 69
        }
      },
      "270": {
        start: {
          line: 483,
          column: 24
        },
        end: {
          line: 485,
          column: 25
        }
      },
      "271": {
        start: {
          line: 484,
          column: 28
        },
        end: {
          line: 484,
          column: 96
        }
      },
      "272": {
        start: {
          line: 486,
          column: 43
        },
        end: {
          line: 497,
          column: 26
        }
      },
      "273": {
        start: {
          line: 487,
          column: 45
        },
        end: {
          line: 487,
          column: 68
        }
      },
      "274": {
        start: {
          line: 488,
          column: 28
        },
        end: {
          line: 496,
          column: 68
        }
      },
      "275": {
        start: {
          line: 496,
          column: 43
        },
        end: {
          line: 496,
          column: 66
        }
      },
      "276": {
        start: {
          line: 498,
          column: 24
        },
        end: {
          line: 500,
          column: 25
        }
      },
      "277": {
        start: {
          line: 499,
          column: 28
        },
        end: {
          line: 499,
          column: 97
        }
      },
      "278": {
        start: {
          line: 502,
          column: 53
        },
        end: {
          line: 506,
          column: 30
        }
      },
      "279": {
        start: {
          line: 503,
          column: 45
        },
        end: {
          line: 503,
          column: 54
        }
      },
      "280": {
        start: {
          line: 504,
          column: 28
        },
        end: {
          line: 504,
          column: 73
        }
      },
      "281": {
        start: {
          line: 505,
          column: 28
        },
        end: {
          line: 505,
          column: 41
        }
      },
      "282": {
        start: {
          line: 507,
          column: 48
        },
        end: {
          line: 516,
          column: 78
        }
      },
      "283": {
        start: {
          line: 509,
          column: 50
        },
        end: {
          line: 509,
          column: 68
        }
      },
      "284": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 514,
          column: 43
        }
      },
      "285": {
        start: {
          line: 516,
          column: 52
        },
        end: {
          line: 516,
          column: 77
        }
      },
      "286": {
        start: {
          line: 517,
          column: 24
        },
        end: {
          line: 533,
          column: 27
        }
      },
      "287": {
        start: {
          line: 537,
          column: 24
        },
        end: {
          line: 537,
          column: 33
        }
      },
      "288": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 549,
          column: 19
        }
      },
      "289": {
        start: {
          line: 542,
          column: 35
        },
        end: {
          line: 544,
          column: 52
        }
      },
      "290": {
        start: {
          line: 545,
          column: 35
        },
        end: {
          line: 547,
          column: 52
        }
      },
      "291": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 548,
          column: 43
        }
      },
      "292": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 557,
          column: 17
        }
      },
      "293": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 106
        }
      },
      "294": {
        start: {
          line: 552,
          column: 20
        },
        end: {
          line: 552,
          column: 51
        }
      },
      "295": {
        start: {
          line: 553,
          column: 20
        },
        end: {
          line: 553,
          column: 86
        }
      },
      "296": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 70
        }
      },
      "297": {
        start: {
          line: 555,
          column: 20
        },
        end: {
          line: 555,
          column: 69
        }
      },
      "298": {
        start: {
          line: 556,
          column: 20
        },
        end: {
          line: 556,
          column: 34
        }
      },
      "299": {
        start: {
          line: 559,
          column: 40
        },
        end: {
          line: 559,
          column: 114
        }
      },
      "300": {
        start: {
          line: 559,
          column: 77
        },
        end: {
          line: 559,
          column: 110
        }
      },
      "301": {
        start: {
          line: 560,
          column: 39
        },
        end: {
          line: 561,
          column: 41
        }
      },
      "302": {
        start: {
          line: 560,
          column: 76
        },
        end: {
          line: 560,
          column: 106
        }
      },
      "303": {
        start: {
          line: 562,
          column: 39
        },
        end: {
          line: 563,
          column: 41
        }
      },
      "304": {
        start: {
          line: 562,
          column: 76
        },
        end: {
          line: 562,
          column: 111
        }
      },
      "305": {
        start: {
          line: 564,
          column: 16
        },
        end: {
          line: 564,
          column: 56
        }
      },
      "306": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 565,
          column: 73
        }
      },
      "307": {
        start: {
          line: 566,
          column: 16
        },
        end: {
          line: 566,
          column: 99
        }
      },
      "308": {
        start: {
          line: 567,
          column: 16
        },
        end: {
          line: 567,
          column: 88
        }
      },
      "309": {
        start: {
          line: 568,
          column: 16
        },
        end: {
          line: 570,
          column: 68
        }
      },
      "310": {
        start: {
          line: 568,
          column: 88
        },
        end: {
          line: 570,
          column: 53
        }
      },
      "311": {
        start: {
          line: 572,
          column: 16
        },
        end: {
          line: 572,
          column: 62
        }
      },
      "312": {
        start: {
          line: 573,
          column: 39
        },
        end: {
          line: 573,
          column: 66
        }
      },
      "313": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 618,
          column: 19
        }
      },
      "314": {
        start: {
          line: 575,
          column: 37
        },
        end: {
          line: 581,
          column: 42
        }
      },
      "315": {
        start: {
          line: 582,
          column: 20
        },
        end: {
          line: 582,
          column: 88
        }
      },
      "316": {
        start: {
          line: 583,
          column: 20
        },
        end: {
          line: 583,
          column: 59
        }
      },
      "317": {
        start: {
          line: 584,
          column: 20
        },
        end: {
          line: 584,
          column: 114
        }
      },
      "318": {
        start: {
          line: 585,
          column: 20
        },
        end: {
          line: 585,
          column: 110
        }
      },
      "319": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 586,
          column: 169
        }
      },
      "320": {
        start: {
          line: 587,
          column: 20
        },
        end: {
          line: 587,
          column: 90
        }
      },
      "321": {
        start: {
          line: 588,
          column: 20
        },
        end: {
          line: 596,
          column: 21
        }
      },
      "322": {
        start: {
          line: 589,
          column: 24
        },
        end: {
          line: 589,
          column: 61
        }
      },
      "323": {
        start: {
          line: 590,
          column: 24
        },
        end: {
          line: 592,
          column: 27
        }
      },
      "324": {
        start: {
          line: 591,
          column: 28
        },
        end: {
          line: 591,
          column: 56
        }
      },
      "325": {
        start: {
          line: 593,
          column: 24
        },
        end: {
          line: 595,
          column: 27
        }
      },
      "326": {
        start: {
          line: 594,
          column: 28
        },
        end: {
          line: 594,
          column: 90
        }
      },
      "327": {
        start: {
          line: 597,
          column: 20
        },
        end: {
          line: 597,
          column: 55
        }
      },
      "328": {
        start: {
          line: 598,
          column: 44
        },
        end: {
          line: 598,
          column: 46
        }
      },
      "329": {
        start: {
          line: 599,
          column: 20
        },
        end: {
          line: 601,
          column: 21
        }
      },
      "330": {
        start: {
          line: 600,
          column: 24
        },
        end: {
          line: 600,
          column: 113
        }
      },
      "331": {
        start: {
          line: 602,
          column: 20
        },
        end: {
          line: 604,
          column: 21
        }
      },
      "332": {
        start: {
          line: 603,
          column: 24
        },
        end: {
          line: 603,
          column: 103
        }
      },
      "333": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 607,
          column: 21
        }
      },
      "334": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 606,
          column: 111
        }
      },
      "335": {
        start: {
          line: 608,
          column: 20
        },
        end: {
          line: 610,
          column: 21
        }
      },
      "336": {
        start: {
          line: 609,
          column: 24
        },
        end: {
          line: 609,
          column: 103
        }
      },
      "337": {
        start: {
          line: 611,
          column: 20
        },
        end: {
          line: 613,
          column: 21
        }
      },
      "338": {
        start: {
          line: 612,
          column: 24
        },
        end: {
          line: 612,
          column: 95
        }
      },
      "339": {
        start: {
          line: 614,
          column: 20
        },
        end: {
          line: 616,
          column: 23
        }
      },
      "340": {
        start: {
          line: 615,
          column: 24
        },
        end: {
          line: 615,
          column: 50
        }
      },
      "341": {
        start: {
          line: 617,
          column: 20
        },
        end: {
          line: 617,
          column: 35
        }
      },
      "342": {
        start: {
          line: 620,
          column: 16
        },
        end: {
          line: 620,
          column: 62
        }
      },
      "343": {
        start: {
          line: 621,
          column: 16
        },
        end: {
          line: 621,
          column: 102
        }
      },
      "344": {
        start: {
          line: 622,
          column: 16
        },
        end: {
          line: 622,
          column: 111
        }
      },
      "345": {
        start: {
          line: 623,
          column: 16
        },
        end: {
          line: 623,
          column: 109
        }
      },
      "346": {
        start: {
          line: 624,
          column: 16
        },
        end: {
          line: 624,
          column: 97
        }
      },
      "347": {
        start: {
          line: 625,
          column: 16
        },
        end: {
          line: 625,
          column: 93
        }
      },
      "348": {
        start: {
          line: 626,
          column: 16
        },
        end: {
          line: 626,
          column: 57
        }
      },
      "349": {
        start: {
          line: 627,
          column: 16
        },
        end: {
          line: 627,
          column: 103
        }
      },
      "350": {
        start: {
          line: 628,
          column: 16
        },
        end: {
          line: 628,
          column: 110
        }
      },
      "351": {
        start: {
          line: 629,
          column: 16
        },
        end: {
          line: 629,
          column: 104
        }
      },
      "352": {
        start: {
          line: 630,
          column: 16
        },
        end: {
          line: 630,
          column: 30
        }
      },
      "353": {
        start: {
          line: 633,
          column: 16
        },
        end: {
          line: 633,
          column: 88
        }
      },
      "354": {
        start: {
          line: 638,
          column: 4
        },
        end: {
          line: 969,
          column: 7
        }
      },
      "355": {
        start: {
          line: 650,
          column: 27
        },
        end: {
          line: 650,
          column: 38
        }
      },
      "356": {
        start: {
          line: 651,
          column: 12
        },
        end: {
          line: 653,
          column: 13
        }
      },
      "357": {
        start: {
          line: 652,
          column: 16
        },
        end: {
          line: 652,
          column: 94
        }
      },
      "358": {
        start: {
          line: 654,
          column: 12
        },
        end: {
          line: 967,
          column: 13
        }
      },
      "359": {
        start: {
          line: 655,
          column: 33
        },
        end: {
          line: 655,
          column: 74
        }
      },
      "360": {
        start: {
          line: 656,
          column: 16
        },
        end: {
          line: 658,
          column: 17
        }
      },
      "361": {
        start: {
          line: 657,
          column: 20
        },
        end: {
          line: 657,
          column: 83
        }
      },
      "362": {
        start: {
          line: 659,
          column: 34
        },
        end: {
          line: 659,
          column: 86
        }
      },
      "363": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 660,
          column: 85
        }
      },
      "364": {
        start: {
          line: 661,
          column: 16
        },
        end: {
          line: 661,
          column: 82
        }
      },
      "365": {
        start: {
          line: 662,
          column: 16
        },
        end: {
          line: 662,
          column: 75
        }
      },
      "366": {
        start: {
          line: 663,
          column: 38
        },
        end: {
          line: 663,
          column: 40
        }
      },
      "367": {
        start: {
          line: 665,
          column: 34
        },
        end: {
          line: 665,
          column: 55
        }
      },
      "368": {
        start: {
          line: 666,
          column: 34
        },
        end: {
          line: 669,
          column: 22
        }
      },
      "369": {
        start: {
          line: 667,
          column: 20
        },
        end: {
          line: 667,
          column: 67
        }
      },
      "370": {
        start: {
          line: 668,
          column: 20
        },
        end: {
          line: 668,
          column: 33
        }
      },
      "371": {
        start: {
          line: 670,
          column: 37
        },
        end: {
          line: 670,
          column: 83
        }
      },
      "372": {
        start: {
          line: 672,
          column: 16
        },
        end: {
          line: 732,
          column: 17
        }
      },
      "373": {
        start: {
          line: 674,
          column: 38
        },
        end: {
          line: 674,
          column: 161
        }
      },
      "374": {
        start: {
          line: 674,
          column: 83
        },
        end: {
          line: 674,
          column: 160
        }
      },
      "375": {
        start: {
          line: 675,
          column: 20
        },
        end: {
          line: 694,
          column: 21
        }
      },
      "376": {
        start: {
          line: 676,
          column: 47
        },
        end: {
          line: 676,
          column: 99
        }
      },
      "377": {
        start: {
          line: 676,
          column: 84
        },
        end: {
          line: 676,
          column: 95
        }
      },
      "378": {
        start: {
          line: 677,
          column: 24
        },
        end: {
          line: 693,
          column: 25
        }
      },
      "379": {
        start: {
          line: 678,
          column: 28
        },
        end: {
          line: 692,
          column: 31
        }
      },
      "380": {
        start: {
          line: 696,
          column: 38
        },
        end: {
          line: 696,
          column: 162
        }
      },
      "381": {
        start: {
          line: 696,
          column: 83
        },
        end: {
          line: 696,
          column: 161
        }
      },
      "382": {
        start: {
          line: 697,
          column: 20
        },
        end: {
          line: 713,
          column: 21
        }
      },
      "383": {
        start: {
          line: 698,
          column: 24
        },
        end: {
          line: 712,
          column: 27
        }
      },
      "384": {
        start: {
          line: 715,
          column: 20
        },
        end: {
          line: 731,
          column: 21
        }
      },
      "385": {
        start: {
          line: 716,
          column: 24
        },
        end: {
          line: 730,
          column: 27
        }
      },
      "386": {
        start: {
          line: 734,
          column: 16
        },
        end: {
          line: 776,
          column: 17
        }
      },
      "387": {
        start: {
          line: 736,
          column: 47
        },
        end: {
          line: 736,
          column: 160
        }
      },
      "388": {
        start: {
          line: 736,
          column: 77
        },
        end: {
          line: 736,
          column: 159
        }
      },
      "389": {
        start: {
          line: 737,
          column: 20
        },
        end: {
          line: 753,
          column: 21
        }
      },
      "390": {
        start: {
          line: 738,
          column: 24
        },
        end: {
          line: 752,
          column: 27
        }
      },
      "391": {
        start: {
          line: 755,
          column: 44
        },
        end: {
          line: 758,
          column: 64
        }
      },
      "392": {
        start: {
          line: 755,
          column: 74
        },
        end: {
          line: 758,
          column: 63
        }
      },
      "393": {
        start: {
          line: 759,
          column: 20
        },
        end: {
          line: 775,
          column: 21
        }
      },
      "394": {
        start: {
          line: 760,
          column: 24
        },
        end: {
          line: 774,
          column: 27
        }
      },
      "395": {
        start: {
          line: 778,
          column: 16
        },
        end: {
          line: 819,
          column: 17
        }
      },
      "396": {
        start: {
          line: 780,
          column: 44
        },
        end: {
          line: 780,
          column: 117
        }
      },
      "397": {
        start: {
          line: 780,
          column: 74
        },
        end: {
          line: 780,
          column: 116
        }
      },
      "398": {
        start: {
          line: 781,
          column: 47
        },
        end: {
          line: 781,
          column: 81
        }
      },
      "399": {
        start: {
          line: 782,
          column: 20
        },
        end: {
          line: 798,
          column: 21
        }
      },
      "400": {
        start: {
          line: 783,
          column: 24
        },
        end: {
          line: 797,
          column: 27
        }
      },
      "401": {
        start: {
          line: 800,
          column: 46
        },
        end: {
          line: 801,
          column: 101
        }
      },
      "402": {
        start: {
          line: 800,
          column: 76
        },
        end: {
          line: 801,
          column: 100
        }
      },
      "403": {
        start: {
          line: 802,
          column: 20
        },
        end: {
          line: 818,
          column: 21
        }
      },
      "404": {
        start: {
          line: 803,
          column: 24
        },
        end: {
          line: 817,
          column: 27
        }
      },
      "405": {
        start: {
          line: 821,
          column: 16
        },
        end: {
          line: 848,
          column: 17
        }
      },
      "406": {
        start: {
          line: 823,
          column: 48
        },
        end: {
          line: 830,
          column: 22
        }
      },
      "407": {
        start: {
          line: 824,
          column: 37
        },
        end: {
          line: 824,
          column: 60
        }
      },
      "408": {
        start: {
          line: 825,
          column: 24
        },
        end: {
          line: 829,
          column: 56
        }
      },
      "409": {
        start: {
          line: 831,
          column: 20
        },
        end: {
          line: 847,
          column: 21
        }
      },
      "410": {
        start: {
          line: 832,
          column: 24
        },
        end: {
          line: 846,
          column: 27
        }
      },
      "411": {
        start: {
          line: 850,
          column: 16
        },
        end: {
          line: 898,
          column: 17
        }
      },
      "412": {
        start: {
          line: 852,
          column: 49
        },
        end: {
          line: 852,
          column: 140
        }
      },
      "413": {
        start: {
          line: 852,
          column: 79
        },
        end: {
          line: 852,
          column: 139
        }
      },
      "414": {
        start: {
          line: 853,
          column: 44
        },
        end: {
          line: 855,
          column: 21
        }
      },
      "415": {
        start: {
          line: 854,
          column: 72
        },
        end: {
          line: 854,
          column: 107
        }
      },
      "416": {
        start: {
          line: 856,
          column: 20
        },
        end: {
          line: 872,
          column: 21
        }
      },
      "417": {
        start: {
          line: 857,
          column: 24
        },
        end: {
          line: 871,
          column: 27
        }
      },
      "418": {
        start: {
          line: 874,
          column: 48
        },
        end: {
          line: 880,
          column: 22
        }
      },
      "419": {
        start: {
          line: 875,
          column: 37
        },
        end: {
          line: 875,
          column: 60
        }
      },
      "420": {
        start: {
          line: 876,
          column: 24
        },
        end: {
          line: 879,
          column: 52
        }
      },
      "421": {
        start: {
          line: 881,
          column: 20
        },
        end: {
          line: 897,
          column: 21
        }
      },
      "422": {
        start: {
          line: 882,
          column: 24
        },
        end: {
          line: 896,
          column: 27
        }
      },
      "423": {
        start: {
          line: 900,
          column: 46
        },
        end: {
          line: 902,
          column: 81
        }
      },
      "424": {
        start: {
          line: 902,
          column: 50
        },
        end: {
          line: 902,
          column: 80
        }
      },
      "425": {
        start: {
          line: 903,
          column: 16
        },
        end: {
          line: 907,
          column: 17
        }
      },
      "426": {
        start: {
          line: 904,
          column: 20
        },
        end: {
          line: 904,
          column: 101
        }
      },
      "427": {
        start: {
          line: 905,
          column: 20
        },
        end: {
          line: 905,
          column: 110
        }
      },
      "428": {
        start: {
          line: 906,
          column: 20
        },
        end: {
          line: 906,
          column: 39
        }
      },
      "429": {
        start: {
          line: 909,
          column: 38
        },
        end: {
          line: 909,
          column: 81
        }
      },
      "430": {
        start: {
          line: 910,
          column: 16
        },
        end: {
          line: 910,
          column: 108
        }
      },
      "431": {
        start: {
          line: 910,
          column: 53
        },
        end: {
          line: 910,
          column: 106
        }
      },
      "432": {
        start: {
          line: 912,
          column: 47
        },
        end: {
          line: 917,
          column: 22
        }
      },
      "433": {
        start: {
          line: 913,
          column: 20
        },
        end: {
          line: 914,
          column: 50
        }
      },
      "434": {
        start: {
          line: 914,
          column: 24
        },
        end: {
          line: 914,
          column: 50
        }
      },
      "435": {
        start: {
          line: 915,
          column: 20
        },
        end: {
          line: 915,
          column: 51
        }
      },
      "436": {
        start: {
          line: 916,
          column: 20
        },
        end: {
          line: 916,
          column: 34
        }
      },
      "437": {
        start: {
          line: 919,
          column: 16
        },
        end: {
          line: 940,
          column: 19
        }
      },
      "438": {
        start: {
          line: 920,
          column: 20
        },
        end: {
          line: 920,
          column: 70
        }
      },
      "439": {
        start: {
          line: 921,
          column: 20
        },
        end: {
          line: 939,
          column: 23
        }
      },
      "440": {
        start: {
          line: 922,
          column: 45
        },
        end: {
          line: 928,
          column: 42
        }
      },
      "441": {
        start: {
          line: 929,
          column: 24
        },
        end: {
          line: 929,
          column: 90
        }
      },
      "442": {
        start: {
          line: 930,
          column: 24
        },
        end: {
          line: 930,
          column: 121
        }
      },
      "443": {
        start: {
          line: 931,
          column: 24
        },
        end: {
          line: 931,
          column: 79
        }
      },
      "444": {
        start: {
          line: 932,
          column: 24
        },
        end: {
          line: 932,
          column: 78
        }
      },
      "445": {
        start: {
          line: 933,
          column: 24
        },
        end: {
          line: 933,
          column: 86
        }
      },
      "446": {
        start: {
          line: 934,
          column: 24
        },
        end: {
          line: 934,
          column: 69
        }
      },
      "447": {
        start: {
          line: 935,
          column: 24
        },
        end: {
          line: 937,
          column: 27
        }
      },
      "448": {
        start: {
          line: 936,
          column: 28
        },
        end: {
          line: 936,
          column: 73
        }
      },
      "449": {
        start: {
          line: 938,
          column: 24
        },
        end: {
          line: 938,
          column: 44
        }
      },
      "450": {
        start: {
          line: 942,
          column: 16
        },
        end: {
          line: 942,
          column: 49
        }
      },
      "451": {
        start: {
          line: 943,
          column: 16
        },
        end: {
          line: 943,
          column: 92
        }
      },
      "452": {
        start: {
          line: 944,
          column: 16
        },
        end: {
          line: 944,
          column: 135
        }
      },
      "453": {
        start: {
          line: 944,
          column: 95
        },
        end: {
          line: 944,
          column: 122
        }
      },
      "454": {
        start: {
          line: 945,
          column: 16
        },
        end: {
          line: 945,
          column: 127
        }
      },
      "455": {
        start: {
          line: 945,
          column: 91
        },
        end: {
          line: 945,
          column: 114
        }
      },
      "456": {
        start: {
          line: 946,
          column: 16
        },
        end: {
          line: 946,
          column: 131
        }
      },
      "457": {
        start: {
          line: 946,
          column: 93
        },
        end: {
          line: 946,
          column: 118
        }
      },
      "458": {
        start: {
          line: 947,
          column: 16
        },
        end: {
          line: 947,
          column: 127
        }
      },
      "459": {
        start: {
          line: 947,
          column: 90
        },
        end: {
          line: 947,
          column: 112
        }
      },
      "460": {
        start: {
          line: 948,
          column: 16
        },
        end: {
          line: 948,
          column: 65
        }
      },
      "461": {
        start: {
          line: 949,
          column: 40
        },
        end: {
          line: 949,
          column: 131
        }
      },
      "462": {
        start: {
          line: 949,
          column: 76
        },
        end: {
          line: 949,
          column: 130
        }
      },
      "463": {
        start: {
          line: 950,
          column: 16
        },
        end: {
          line: 958,
          column: 17
        }
      },
      "464": {
        start: {
          line: 951,
          column: 20
        },
        end: {
          line: 951,
          column: 137
        }
      },
      "465": {
        start: {
          line: 952,
          column: 20
        },
        end: {
          line: 952,
          column: 111
        }
      },
      "466": {
        start: {
          line: 953,
          column: 20
        },
        end: {
          line: 953,
          column: 118
        }
      },
      "467": {
        start: {
          line: 956,
          column: 20
        },
        end: {
          line: 956,
          column: 134
        }
      },
      "468": {
        start: {
          line: 957,
          column: 20
        },
        end: {
          line: 957,
          column: 124
        }
      },
      "469": {
        start: {
          line: 959,
          column: 16
        },
        end: {
          line: 959,
          column: 60
        }
      },
      "470": {
        start: {
          line: 960,
          column: 16
        },
        end: {
          line: 960,
          column: 102
        }
      },
      "471": {
        start: {
          line: 961,
          column: 16
        },
        end: {
          line: 961,
          column: 105
        }
      },
      "472": {
        start: {
          line: 962,
          column: 16
        },
        end: {
          line: 962,
          column: 104
        }
      },
      "473": {
        start: {
          line: 963,
          column: 16
        },
        end: {
          line: 963,
          column: 35
        }
      },
      "474": {
        start: {
          line: 966,
          column: 16
        },
        end: {
          line: 966,
          column: 96
        }
      },
      "475": {
        start: {
          line: 971,
          column: 4
        },
        end: {
          line: 1256,
          column: 7
        }
      },
      "476": {
        start: {
          line: 983,
          column: 27
        },
        end: {
          line: 983,
          column: 38
        }
      },
      "477": {
        start: {
          line: 984,
          column: 12
        },
        end: {
          line: 986,
          column: 13
        }
      },
      "478": {
        start: {
          line: 985,
          column: 16
        },
        end: {
          line: 985,
          column: 94
        }
      },
      "479": {
        start: {
          line: 987,
          column: 12
        },
        end: {
          line: 1254,
          column: 13
        }
      },
      "480": {
        start: {
          line: 988,
          column: 34
        },
        end: {
          line: 988,
          column: 36
        }
      },
      "481": {
        start: {
          line: 989,
          column: 37
        },
        end: {
          line: 989,
          column: 39
        }
      },
      "482": {
        start: {
          line: 991,
          column: 16
        },
        end: {
          line: 999,
          column: 17
        }
      },
      "483": {
        start: {
          line: 992,
          column: 20
        },
        end: {
          line: 998,
          column: 21
        }
      },
      "484": {
        start: {
          line: 993,
          column: 41
        },
        end: {
          line: 993,
          column: 77
        }
      },
      "485": {
        start: {
          line: 994,
          column: 24
        },
        end: {
          line: 994,
          column: 49
        }
      },
      "486": {
        start: {
          line: 997,
          column: 24
        },
        end: {
          line: 997,
          column: 90
        }
      },
      "487": {
        start: {
          line: 1001,
          column: 16
        },
        end: {
          line: 1065,
          column: 17
        }
      },
      "488": {
        start: {
          line: 1002,
          column: 38
        },
        end: {
          line: 1002,
          column: 65
        }
      },
      "489": {
        start: {
          line: 1003,
          column: 44
        },
        end: {
          line: 1005,
          column: 27
        }
      },
      "490": {
        start: {
          line: 1004,
          column: 65
        },
        end: {
          line: 1004,
          column: 74
        }
      },
      "491": {
        start: {
          line: 1006,
          column: 41
        },
        end: {
          line: 1006,
          column: 87
        }
      },
      "492": {
        start: {
          line: 1008,
          column: 48
        },
        end: {
          line: 1023,
          column: 25
        }
      },
      "493": {
        start: {
          line: 1009,
          column: 41
        },
        end: {
          line: 1009,
          column: 64
        }
      },
      "494": {
        start: {
          line: 1010,
          column: 45
        },
        end: {
          line: 1010,
          column: 46
        }
      },
      "495": {
        start: {
          line: 1011,
          column: 24
        },
        end: {
          line: 1021,
          column: 25
        }
      },
      "496": {
        start: {
          line: 1014,
          column: 28
        },
        end: {
          line: 1014,
          column: 48
        }
      },
      "497": {
        start: {
          line: 1016,
          column: 29
        },
        end: {
          line: 1021,
          column: 25
        }
      },
      "498": {
        start: {
          line: 1017,
          column: 28
        },
        end: {
          line: 1017,
          column: 48
        }
      },
      "499": {
        start: {
          line: 1019,
          column: 29
        },
        end: {
          line: 1021,
          column: 25
        }
      },
      "500": {
        start: {
          line: 1020,
          column: 28
        },
        end: {
          line: 1020,
          column: 48
        }
      },
      "501": {
        start: {
          line: 1022,
          column: 24
        },
        end: {
          line: 1022,
          column: 59
        }
      },
      "502": {
        start: {
          line: 1025,
          column: 43
        },
        end: {
          line: 1025,
          column: 90
        }
      },
      "503": {
        start: {
          line: 1026,
          column: 46
        },
        end: {
          line: 1026,
          column: 97
        }
      },
      "504": {
        start: {
          line: 1027,
          column: 49
        },
        end: {
          line: 1027,
          column: 146
        }
      },
      "505": {
        start: {
          line: 1030,
          column: 20
        },
        end: {
          line: 1053,
          column: 21
        }
      },
      "506": {
        start: {
          line: 1031,
          column: 24
        },
        end: {
          line: 1052,
          column: 25
        }
      },
      "507": {
        start: {
          line: 1032,
          column: 47
        },
        end: {
          line: 1032,
          column: 89
        }
      },
      "508": {
        start: {
          line: 1033,
          column: 55
        },
        end: {
          line: 1033,
          column: 118
        }
      },
      "509": {
        start: {
          line: 1033,
          column: 86
        },
        end: {
          line: 1033,
          column: 117
        }
      },
      "510": {
        start: {
          line: 1034,
          column: 28
        },
        end: {
          line: 1048,
          column: 29
        }
      },
      "511": {
        start: {
          line: 1035,
          column: 61
        },
        end: {
          line: 1035,
          column: 139
        }
      },
      "512": {
        start: {
          line: 1035,
          column: 95
        },
        end: {
          line: 1035,
          column: 138
        }
      },
      "513": {
        start: {
          line: 1036,
          column: 57
        },
        end: {
          line: 1041,
          column: 39
        }
      },
      "514": {
        start: {
          line: 1038,
          column: 57
        },
        end: {
          line: 1038,
          column: 128
        }
      },
      "515": {
        start: {
          line: 1039,
          column: 40
        },
        end: {
          line: 1039,
          column: 62
        }
      },
      "516": {
        start: {
          line: 1042,
          column: 52
        },
        end: {
          line: 1042,
          column: 115
        }
      },
      "517": {
        start: {
          line: 1043,
          column: 32
        },
        end: {
          line: 1047,
          column: 34
        }
      },
      "518": {
        start: {
          line: 1054,
          column: 20
        },
        end: {
          line: 1064,
          column: 23
        }
      },
      "519": {
        start: {
          line: 1066,
          column: 33
        },
        end: {
          line: 1066,
          column: 67
        }
      },
      "520": {
        start: {
          line: 1067,
          column: 16
        },
        end: {
          line: 1067,
          column: 86
        }
      },
      "521": {
        start: {
          line: 1068,
          column: 16
        },
        end: {
          line: 1068,
          column: 78
        }
      },
      "522": {
        start: {
          line: 1069,
          column: 16
        },
        end: {
          line: 1069,
          column: 85
        }
      },
      "523": {
        start: {
          line: 1071,
          column: 16
        },
        end: {
          line: 1071,
          column: 62
        }
      },
      "524": {
        start: {
          line: 1072,
          column: 16
        },
        end: {
          line: 1072,
          column: 99
        }
      },
      "525": {
        start: {
          line: 1073,
          column: 16
        },
        end: {
          line: 1073,
          column: 99
        }
      },
      "526": {
        start: {
          line: 1074,
          column: 16
        },
        end: {
          line: 1077,
          column: 19
        }
      },
      "527": {
        start: {
          line: 1075,
          column: 39
        },
        end: {
          line: 1075,
          column: 73
        }
      },
      "528": {
        start: {
          line: 1076,
          column: 20
        },
        end: {
          line: 1076,
          column: 201
        }
      },
      "529": {
        start: {
          line: 1078,
          column: 16
        },
        end: {
          line: 1078,
          column: 35
        }
      },
      "530": {
        start: {
          line: 1080,
          column: 16
        },
        end: {
          line: 1103,
          column: 17
        }
      },
      "531": {
        start: {
          line: 1081,
          column: 20
        },
        end: {
          line: 1081,
          column: 66
        }
      },
      "532": {
        start: {
          line: 1082,
          column: 44
        },
        end: {
          line: 1087,
          column: 21
        }
      },
      "533": {
        start: {
          line: 1083,
          column: 64
        },
        end: {
          line: 1083,
          column: 93
        }
      },
      "534": {
        start: {
          line: 1085,
          column: 66
        },
        end: {
          line: 1085,
          column: 89
        }
      },
      "535": {
        start: {
          line: 1086,
          column: 66
        },
        end: {
          line: 1086,
          column: 89
        }
      },
      "536": {
        start: {
          line: 1088,
          column: 20
        },
        end: {
          line: 1088,
          column: 65
        }
      },
      "537": {
        start: {
          line: 1089,
          column: 20
        },
        end: {
          line: 1089,
          column: 83
        }
      },
      "538": {
        start: {
          line: 1090,
          column: 20
        },
        end: {
          line: 1090,
          column: 97
        }
      },
      "539": {
        start: {
          line: 1091,
          column: 20
        },
        end: {
          line: 1102,
          column: 23
        }
      },
      "540": {
        start: {
          line: 1092,
          column: 48
        },
        end: {
          line: 1098,
          column: 52
        }
      },
      "541": {
        start: {
          line: 1099,
          column: 24
        },
        end: {
          line: 1099,
          column: 117
        }
      },
      "542": {
        start: {
          line: 1100,
          column: 24
        },
        end: {
          line: 1100,
          column: 119
        }
      },
      "543": {
        start: {
          line: 1101,
          column: 24
        },
        end: {
          line: 1101,
          column: 146
        }
      },
      "544": {
        start: {
          line: 1104,
          column: 16
        },
        end: {
          line: 1132,
          column: 17
        }
      },
      "545": {
        start: {
          line: 1105,
          column: 46
        },
        end: {
          line: 1105,
          column: 70
        }
      },
      "546": {
        start: {
          line: 1106,
          column: 20
        },
        end: {
          line: 1106,
          column: 68
        }
      },
      "547": {
        start: {
          line: 1107,
          column: 44
        },
        end: {
          line: 1107,
          column: 97
        }
      },
      "548": {
        start: {
          line: 1107,
          column: 72
        },
        end: {
          line: 1107,
          column: 96
        }
      },
      "549": {
        start: {
          line: 1108,
          column: 20
        },
        end: {
          line: 1131,
          column: 21
        }
      },
      "550": {
        start: {
          line: 1109,
          column: 50
        },
        end: {
          line: 1109,
          column: 120
        }
      },
      "551": {
        start: {
          line: 1109,
          column: 78
        },
        end: {
          line: 1109,
          column: 119
        }
      },
      "552": {
        start: {
          line: 1110,
          column: 45
        },
        end: {
          line: 1110,
          column: 110
        }
      },
      "553": {
        start: {
          line: 1110,
          column: 73
        },
        end: {
          line: 1110,
          column: 109
        }
      },
      "554": {
        start: {
          line: 1111,
          column: 24
        },
        end: {
          line: 1111,
          column: 70
        }
      },
      "555": {
        start: {
          line: 1112,
          column: 24
        },
        end: {
          line: 1112,
          column: 164
        }
      },
      "556": {
        start: {
          line: 1112,
          column: 103
        },
        end: {
          line: 1112,
          column: 108
        }
      },
      "557": {
        start: {
          line: 1113,
          column: 24
        },
        end: {
          line: 1113,
          column: 147
        }
      },
      "558": {
        start: {
          line: 1113,
          column: 96
        },
        end: {
          line: 1113,
          column: 101
        }
      },
      "559": {
        start: {
          line: 1114,
          column: 24
        },
        end: {
          line: 1127,
          column: 27
        }
      },
      "560": {
        start: {
          line: 1115,
          column: 41
        },
        end: {
          line: 1115,
          column: 65
        }
      },
      "561": {
        start: {
          line: 1116,
          column: 47
        },
        end: {
          line: 1122,
          column: 51
        }
      },
      "562": {
        start: {
          line: 1123,
          column: 28
        },
        end: {
          line: 1123,
          column: 87
        }
      },
      "563": {
        start: {
          line: 1124,
          column: 28
        },
        end: {
          line: 1124,
          column: 114
        }
      },
      "564": {
        start: {
          line: 1125,
          column: 28
        },
        end: {
          line: 1125,
          column: 94
        }
      },
      "565": {
        start: {
          line: 1126,
          column: 28
        },
        end: {
          line: 1126,
          column: 94
        }
      },
      "566": {
        start: {
          line: 1130,
          column: 24
        },
        end: {
          line: 1130,
          column: 102
        }
      },
      "567": {
        start: {
          line: 1133,
          column: 16
        },
        end: {
          line: 1158,
          column: 17
        }
      },
      "568": {
        start: {
          line: 1134,
          column: 20
        },
        end: {
          line: 1134,
          column: 68
        }
      },
      "569": {
        start: {
          line: 1135,
          column: 20
        },
        end: {
          line: 1157,
          column: 23
        }
      },
      "570": {
        start: {
          line: 1136,
          column: 46
        },
        end: {
          line: 1136,
          column: 179
        }
      },
      "571": {
        start: {
          line: 1136,
          column: 89
        },
        end: {
          line: 1136,
          column: 171
        }
      },
      "572": {
        start: {
          line: 1137,
          column: 48
        },
        end: {
          line: 1139,
          column: 77
        }
      },
      "573": {
        start: {
          line: 1137,
          column: 91
        },
        end: {
          line: 1139,
          column: 69
        }
      },
      "574": {
        start: {
          line: 1140,
          column: 49
        },
        end: {
          line: 1142,
          column: 73
        }
      },
      "575": {
        start: {
          line: 1143,
          column: 49
        },
        end: {
          line: 1149,
          column: 51
        }
      },
      "576": {
        start: {
          line: 1150,
          column: 24
        },
        end: {
          line: 1150,
          column: 126
        }
      },
      "577": {
        start: {
          line: 1151,
          column: 24
        },
        end: {
          line: 1151,
          column: 83
        }
      },
      "578": {
        start: {
          line: 1152,
          column: 24
        },
        end: {
          line: 1152,
          column: 90
        }
      },
      "579": {
        start: {
          line: 1153,
          column: 24
        },
        end: {
          line: 1155,
          column: 25
        }
      },
      "580": {
        start: {
          line: 1154,
          column: 28
        },
        end: {
          line: 1154,
          column: 114
        }
      },
      "581": {
        start: {
          line: 1156,
          column: 24
        },
        end: {
          line: 1156,
          column: 43
        }
      },
      "582": {
        start: {
          line: 1159,
          column: 16
        },
        end: {
          line: 1176,
          column: 17
        }
      },
      "583": {
        start: {
          line: 1160,
          column: 20
        },
        end: {
          line: 1160,
          column: 73
        }
      },
      "584": {
        start: {
          line: 1161,
          column: 20
        },
        end: {
          line: 1175,
          column: 23
        }
      },
      "585": {
        start: {
          line: 1162,
          column: 48
        },
        end: {
          line: 1162,
          column: 141
        }
      },
      "586": {
        start: {
          line: 1162,
          column: 91
        },
        end: {
          line: 1162,
          column: 133
        }
      },
      "587": {
        start: {
          line: 1163,
          column: 51
        },
        end: {
          line: 1163,
          column: 132
        }
      },
      "588": {
        start: {
          line: 1164,
          column: 53
        },
        end: {
          line: 1170,
          column: 51
        }
      },
      "589": {
        start: {
          line: 1171,
          column: 24
        },
        end: {
          line: 1171,
          column: 93
        }
      },
      "590": {
        start: {
          line: 1172,
          column: 24
        },
        end: {
          line: 1172,
          column: 119
        }
      },
      "591": {
        start: {
          line: 1173,
          column: 24
        },
        end: {
          line: 1173,
          column: 102
        }
      },
      "592": {
        start: {
          line: 1174,
          column: 24
        },
        end: {
          line: 1174,
          column: 125
        }
      },
      "593": {
        start: {
          line: 1177,
          column: 16
        },
        end: {
          line: 1207,
          column: 17
        }
      },
      "594": {
        start: {
          line: 1178,
          column: 20
        },
        end: {
          line: 1178,
          column: 60
        }
      },
      "595": {
        start: {
          line: 1179,
          column: 20
        },
        end: {
          line: 1206,
          column: 23
        }
      },
      "596": {
        start: {
          line: 1180,
          column: 47
        },
        end: {
          line: 1189,
          column: 33
        }
      },
      "597": {
        start: {
          line: 1181,
          column: 41
        },
        end: {
          line: 1181,
          column: 64
        }
      },
      "598": {
        start: {
          line: 1182,
          column: 28
        },
        end: {
          line: 1188,
          column: 59
        }
      },
      "599": {
        start: {
          line: 1190,
          column: 41
        },
        end: {
          line: 1190,
          column: 80
        }
      },
      "600": {
        start: {
          line: 1191,
          column: 42
        },
        end: {
          line: 1197,
          column: 52
        }
      },
      "601": {
        start: {
          line: 1198,
          column: 24
        },
        end: {
          line: 1198,
          column: 92
        }
      },
      "602": {
        start: {
          line: 1199,
          column: 24
        },
        end: {
          line: 1199,
          column: 112
        }
      },
      "603": {
        start: {
          line: 1200,
          column: 24
        },
        end: {
          line: 1200,
          column: 93
        }
      },
      "604": {
        start: {
          line: 1201,
          column: 24
        },
        end: {
          line: 1204,
          column: 25
        }
      },
      "605": {
        start: {
          line: 1202,
          column: 57
        },
        end: {
          line: 1202,
          column: 125
        }
      },
      "606": {
        start: {
          line: 1203,
          column: 28
        },
        end: {
          line: 1203,
          column: 108
        }
      },
      "607": {
        start: {
          line: 1205,
          column: 24
        },
        end: {
          line: 1205,
          column: 43
        }
      },
      "608": {
        start: {
          line: 1209,
          column: 16
        },
        end: {
          line: 1209,
          column: 68
        }
      },
      "609": {
        start: {
          line: 1210,
          column: 39
        },
        end: {
          line: 1210,
          column: 148
        }
      },
      "610": {
        start: {
          line: 1210,
          column: 78
        },
        end: {
          line: 1210,
          column: 147
        }
      },
      "611": {
        start: {
          line: 1211,
          column: 44
        },
        end: {
          line: 1211,
          column: 173
        }
      },
      "612": {
        start: {
          line: 1211,
          column: 83
        },
        end: {
          line: 1211,
          column: 172
        }
      },
      "613": {
        start: {
          line: 1212,
          column: 16
        },
        end: {
          line: 1212,
          column: 128
        }
      },
      "614": {
        start: {
          line: 1213,
          column: 16
        },
        end: {
          line: 1213,
          column: 169
        }
      },
      "615": {
        start: {
          line: 1214,
          column: 16
        },
        end: {
          line: 1222,
          column: 17
        }
      },
      "616": {
        start: {
          line: 1214,
          column: 46
        },
        end: {
          line: 1214,
          column: 70
        }
      },
      "617": {
        start: {
          line: 1215,
          column: 44
        },
        end: {
          line: 1220,
          column: 31
        }
      },
      "618": {
        start: {
          line: 1216,
          column: 40
        },
        end: {
          line: 1216,
          column: 64
        }
      },
      "619": {
        start: {
          line: 1217,
          column: 51
        },
        end: {
          line: 1220,
          column: 30
        }
      },
      "620": {
        start: {
          line: 1221,
          column: 20
        },
        end: {
          line: 1221,
          column: 171
        }
      },
      "621": {
        start: {
          line: 1224,
          column: 16
        },
        end: {
          line: 1224,
          column: 60
        }
      },
      "622": {
        start: {
          line: 1225,
          column: 40
        },
        end: {
          line: 1225,
          column: 42
        }
      },
      "623": {
        start: {
          line: 1226,
          column: 48
        },
        end: {
          line: 1226,
          column: 105
        }
      },
      "624": {
        start: {
          line: 1226,
          column: 76
        },
        end: {
          line: 1226,
          column: 104
        }
      },
      "625": {
        start: {
          line: 1227,
          column: 16
        },
        end: {
          line: 1229,
          column: 17
        }
      },
      "626": {
        start: {
          line: 1228,
          column: 20
        },
        end: {
          line: 1228,
          column: 197
        }
      },
      "627": {
        start: {
          line: 1228,
          column: 103
        },
        end: {
          line: 1228,
          column: 118
        }
      },
      "628": {
        start: {
          line: 1230,
          column: 52
        },
        end: {
          line: 1230,
          column: 119
        }
      },
      "629": {
        start: {
          line: 1230,
          column: 80
        },
        end: {
          line: 1230,
          column: 118
        }
      },
      "630": {
        start: {
          line: 1231,
          column: 16
        },
        end: {
          line: 1233,
          column: 17
        }
      },
      "631": {
        start: {
          line: 1232,
          column: 20
        },
        end: {
          line: 1232,
          column: 185
        }
      },
      "632": {
        start: {
          line: 1232,
          column: 114
        },
        end: {
          line: 1232,
          column: 129
        }
      },
      "633": {
        start: {
          line: 1234,
          column: 49
        },
        end: {
          line: 1236,
          column: 75
        }
      },
      "634": {
        start: {
          line: 1234,
          column: 77
        },
        end: {
          line: 1236,
          column: 74
        }
      },
      "635": {
        start: {
          line: 1237,
          column: 16
        },
        end: {
          line: 1239,
          column: 17
        }
      },
      "636": {
        start: {
          line: 1238,
          column: 20
        },
        end: {
          line: 1238,
          column: 169
        }
      },
      "637": {
        start: {
          line: 1238,
          column: 108
        },
        end: {
          line: 1238,
          column: 123
        }
      },
      "638": {
        start: {
          line: 1240,
          column: 16
        },
        end: {
          line: 1242,
          column: 17
        }
      },
      "639": {
        start: {
          line: 1241,
          column: 20
        },
        end: {
          line: 1241,
          column: 113
        }
      },
      "640": {
        start: {
          line: 1243,
          column: 16
        },
        end: {
          line: 1245,
          column: 19
        }
      },
      "641": {
        start: {
          line: 1244,
          column: 20
        },
        end: {
          line: 1244,
          column: 59
        }
      },
      "642": {
        start: {
          line: 1246,
          column: 16
        },
        end: {
          line: 1246,
          column: 53
        }
      },
      "643": {
        start: {
          line: 1247,
          column: 16
        },
        end: {
          line: 1247,
          column: 114
        }
      },
      "644": {
        start: {
          line: 1248,
          column: 16
        },
        end: {
          line: 1248,
          column: 118
        }
      },
      "645": {
        start: {
          line: 1249,
          column: 16
        },
        end: {
          line: 1249,
          column: 101
        }
      },
      "646": {
        start: {
          line: 1250,
          column: 16
        },
        end: {
          line: 1250,
          column: 34
        }
      },
      "647": {
        start: {
          line: 1253,
          column: 16
        },
        end: {
          line: 1253,
          column: 85
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAnalyticsTools",
        decl: {
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 39,
            column: 36
          }
        },
        loc: {
          start: {
            line: 39,
            column: 56
          },
          end: {
            line: 1257,
            column: 1
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 17
          },
          end: {
            line: 52,
            column: 18
          }
        },
        loc: {
          start: {
            line: 52,
            column: 33
          },
          end: {
            line: 247,
            column: 9
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 65,
            column: 68
          },
          end: {
            line: 65,
            column: 69
          }
        },
        loc: {
          start: {
            line: 65,
            column: 76
          },
          end: {
            line: 65,
            column: 85
          }
        },
        line: 65
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 40
          }
        },
        loc: {
          start: {
            line: 73,
            column: 74
          },
          end: {
            line: 93,
            column: 17
          }
        },
        line: 73
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 56
          },
          end: {
            line: 82,
            column: 57
          }
        },
        loc: {
          start: {
            line: 82,
            column: 79
          },
          end: {
            line: 91,
            column: 21
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 84,
            column: 54
          },
          end: {
            line: 84,
            column: 55
          }
        },
        loc: {
          start: {
            line: 84,
            column: 64
          },
          end: {
            line: 89,
            column: 29
          }
        },
        line: 84
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 96,
            column: 66
          },
          end: {
            line: 96,
            column: 67
          }
        },
        loc: {
          start: {
            line: 96,
            column: 87
          },
          end: {
            line: 105,
            column: 17
          }
        },
        line: 96
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 97,
            column: 59
          },
          end: {
            line: 97,
            column: 60
          }
        },
        loc: {
          start: {
            line: 97,
            column: 72
          },
          end: {
            line: 104,
            column: 21
          }
        },
        line: 97
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 44
          },
          end: {
            line: 99,
            column: 45
          }
        },
        loc: {
          start: {
            line: 99,
            column: 54
          },
          end: {
            line: 102,
            column: 29
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 106,
            column: 60
          },
          end: {
            line: 106,
            column: 61
          }
        },
        loc: {
          start: {
            line: 106,
            column: 68
          },
          end: {
            line: 106,
            column: 96
          }
        },
        line: 106
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 108,
            column: 38
          },
          end: {
            line: 108,
            column: 39
          }
        },
        loc: {
          start: {
            line: 108,
            column: 46
          },
          end: {
            line: 111,
            column: 17
          }
        },
        line: 108
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 117,
            column: 68
          },
          end: {
            line: 117,
            column: 69
          }
        },
        loc: {
          start: {
            line: 117,
            column: 90
          },
          end: {
            line: 133,
            column: 17
          }
        },
        line: 117
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 139,
            column: 43
          },
          end: {
            line: 139,
            column: 44
          }
        },
        loc: {
          start: {
            line: 139,
            column: 54
          },
          end: {
            line: 147,
            column: 17
          }
        },
        line: 139
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 162,
            column: 67
          },
          end: {
            line: 162,
            column: 68
          }
        },
        loc: {
          start: {
            line: 162,
            column: 83
          },
          end: {
            line: 166,
            column: 17
          }
        },
        line: 162
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 169,
            column: 26
          },
          end: {
            line: 169,
            column: 27
          }
        },
        loc: {
          start: {
            line: 169,
            column: 36
          },
          end: {
            line: 169,
            column: 47
          }
        },
        line: 169
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 170,
            column: 29
          },
          end: {
            line: 170,
            column: 30
          }
        },
        loc: {
          start: {
            line: 170,
            column: 48
          },
          end: {
            line: 173,
            column: 17
          }
        },
        line: 170
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 179,
            column: 74
          },
          end: {
            line: 179,
            column: 75
          }
        },
        loc: {
          start: {
            line: 179,
            column: 82
          },
          end: {
            line: 179,
            column: 117
          }
        },
        line: 179
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 182,
            column: 40
          },
          end: {
            line: 182,
            column: 41
          }
        },
        loc: {
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 182,
            column: 62
          }
        },
        line: 182
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 183,
            column: 40
          },
          end: {
            line: 183,
            column: 41
          }
        },
        loc: {
          start: {
            line: 183,
            column: 55
          },
          end: {
            line: 186,
            column: 29
          }
        },
        line: 183
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 187,
            column: 75
          },
          end: {
            line: 187,
            column: 76
          }
        },
        loc: {
          start: {
            line: 187,
            column: 83
          },
          end: {
            line: 187,
            column: 108
          }
        },
        line: 187
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 223,
            column: 87
          },
          end: {
            line: 223,
            column: 88
          }
        },
        loc: {
          start: {
            line: 223,
            column: 99
          },
          end: {
            line: 223,
            column: 206
          }
        },
        line: 223
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 223,
            column: 162
          },
          end: {
            line: 223,
            column: 163
          }
        },
        loc: {
          start: {
            line: 223,
            column: 171
          },
          end: {
            line: 223,
            column: 205
          }
        },
        line: 223
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 230,
            column: 44
          },
          end: {
            line: 230,
            column: 45
          }
        },
        loc: {
          start: {
            line: 230,
            column: 60
          },
          end: {
            line: 232,
            column: 21
          }
        },
        line: 230
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 261,
            column: 17
          },
          end: {
            line: 261,
            column: 18
          }
        },
        loc: {
          start: {
            line: 261,
            column: 33
          },
          end: {
            line: 406,
            column: 9
          }
        },
        line: 261
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 276,
            column: 53
          },
          end: {
            line: 276,
            column: 54
          }
        },
        loc: {
          start: {
            line: 276,
            column: 65
          },
          end: {
            line: 319,
            column: 17
          }
        },
        line: 276
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 279,
            column: 57
          },
          end: {
            line: 279,
            column: 58
          }
        },
        loc: {
          start: {
            line: 279,
            column: 65
          },
          end: {
            line: 279,
            column: 74
          }
        },
        line: 279
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 285,
            column: 78
          },
          end: {
            line: 285,
            column: 79
          }
        },
        loc: {
          start: {
            line: 285,
            column: 100
          },
          end: {
            line: 300,
            column: 21
          }
        },
        line: 285
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 323,
            column: 44
          },
          end: {
            line: 323,
            column: 45
          }
        },
        loc: {
          start: {
            line: 323,
            column: 52
          },
          end: {
            line: 334,
            column: 21
          }
        },
        line: 323
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 336,
            column: 34
          },
          end: {
            line: 336,
            column: 35
          }
        },
        loc: {
          start: {
            line: 336,
            column: 44
          },
          end: {
            line: 349,
            column: 17
          }
        },
        line: 336
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 359,
            column: 58
          },
          end: {
            line: 359,
            column: 59
          }
        },
        loc: {
          start: {
            line: 359,
            column: 73
          },
          end: {
            line: 359,
            column: 101
          }
        },
        line: 359
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 360,
            column: 53
          },
          end: {
            line: 360,
            column: 54
          }
        },
        loc: {
          start: {
            line: 360,
            column: 68
          },
          end: {
            line: 360,
            column: 88
          }
        },
        line: 360
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 367,
            column: 57
          },
          end: {
            line: 367,
            column: 58
          }
        },
        loc: {
          start: {
            line: 367,
            column: 73
          },
          end: {
            line: 370,
            column: 17
          }
        },
        line: 367
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 372,
            column: 53
          },
          end: {
            line: 372,
            column: 54
          }
        },
        loc: {
          start: {
            line: 372,
            column: 73
          },
          end: {
            line: 376,
            column: 17
          }
        },
        line: 372
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 382,
            column: 50
          },
          end: {
            line: 382,
            column: 51
          }
        },
        loc: {
          start: {
            line: 382,
            column: 58
          },
          end: {
            line: 393,
            column: 17
          }
        },
        line: 382
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 420,
            column: 17
          },
          end: {
            line: 420,
            column: 18
          }
        },
        loc: {
          start: {
            line: 420,
            column: 33
          },
          end: {
            line: 635,
            column: 9
          }
        },
        line: 420
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 442,
            column: 53
          },
          end: {
            line: 442,
            column: 54
          }
        },
        loc: {
          start: {
            line: 442,
            column: 58
          },
          end: {
            line: 442,
            column: 66
          }
        },
        line: 442
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 454,
            column: 74
          },
          end: {
            line: 454,
            column: 75
          }
        },
        loc: {
          start: {
            line: 454,
            column: 82
          },
          end: {
            line: 454,
            column: 154
          }
        },
        line: 454
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 459,
            column: 36
          },
          end: {
            line: 459,
            column: 37
          }
        },
        loc: {
          start: {
            line: 459,
            column: 44
          },
          end: {
            line: 459,
            column: 87
          }
        },
        line: 459
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 460,
            column: 33
          },
          end: {
            line: 460,
            column: 34
          }
        },
        loc: {
          start: {
            line: 460,
            column: 41
          },
          end: {
            line: 460,
            column: 112
          }
        },
        line: 460
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 463,
            column: 71
          },
          end: {
            line: 463,
            column: 72
          }
        },
        loc: {
          start: {
            line: 463,
            column: 81
          },
          end: {
            line: 463,
            column: 86
          }
        },
        line: 463
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 467,
            column: 64
          },
          end: {
            line: 467,
            column: 65
          }
        },
        loc: {
          start: {
            line: 467,
            column: 74
          },
          end: {
            line: 467,
            column: 79
          }
        },
        line: 467
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 471,
            column: 73
          },
          end: {
            line: 471,
            column: 74
          }
        },
        loc: {
          start: {
            line: 471,
            column: 81
          },
          end: {
            line: 476,
            column: 25
          }
        },
        line: 471
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 478,
            column: 75
          },
          end: {
            line: 478,
            column: 76
          }
        },
        loc: {
          start: {
            line: 478,
            column: 83
          },
          end: {
            line: 478,
            column: 106
          }
        },
        line: 478
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 486,
            column: 73
          },
          end: {
            line: 486,
            column: 74
          }
        },
        loc: {
          start: {
            line: 486,
            column: 81
          },
          end: {
            line: 497,
            column: 25
          }
        },
        line: 486
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 496,
            column: 35
          },
          end: {
            line: 496,
            column: 36
          }
        },
        loc: {
          start: {
            line: 496,
            column: 43
          },
          end: {
            line: 496,
            column: 66
          }
        },
        line: 496
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 502,
            column: 83
          },
          end: {
            line: 502,
            column: 84
          }
        },
        loc: {
          start: {
            line: 502,
            column: 100
          },
          end: {
            line: 506,
            column: 25
          }
        },
        line: 502
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 508,
            column: 36
          },
          end: {
            line: 508,
            column: 37
          }
        },
        loc: {
          start: {
            line: 508,
            column: 55
          },
          end: {
            line: 515,
            column: 25
          }
        },
        line: 508
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 516,
            column: 33
          },
          end: {
            line: 516,
            column: 34
          }
        },
        loc: {
          start: {
            line: 516,
            column: 52
          },
          end: {
            line: 516,
            column: 77
          }
        },
        line: 516
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 541,
            column: 36
          },
          end: {
            line: 541,
            column: 37
          }
        },
        loc: {
          start: {
            line: 541,
            column: 46
          },
          end: {
            line: 549,
            column: 17
          }
        },
        line: 541
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 559,
            column: 62
          },
          end: {
            line: 559,
            column: 63
          }
        },
        loc: {
          start: {
            line: 559,
            column: 77
          },
          end: {
            line: 559,
            column: 110
          }
        },
        line: 559
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 560,
            column: 61
          },
          end: {
            line: 560,
            column: 62
          }
        },
        loc: {
          start: {
            line: 560,
            column: 76
          },
          end: {
            line: 560,
            column: 106
          }
        },
        line: 560
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 562,
            column: 61
          },
          end: {
            line: 562,
            column: 62
          }
        },
        loc: {
          start: {
            line: 562,
            column: 76
          },
          end: {
            line: 562,
            column: 111
          }
        },
        line: 562
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 568,
            column: 80
          },
          end: {
            line: 568,
            column: 81
          }
        },
        loc: {
          start: {
            line: 568,
            column: 88
          },
          end: {
            line: 570,
            column: 53
          }
        },
        line: 568
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 574,
            column: 39
          },
          end: {
            line: 574,
            column: 40
          }
        },
        loc: {
          start: {
            line: 574,
            column: 56
          },
          end: {
            line: 618,
            column: 17
          }
        },
        line: 574
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 590,
            column: 55
          },
          end: {
            line: 590,
            column: 56
          }
        },
        loc: {
          start: {
            line: 590,
            column: 64
          },
          end: {
            line: 592,
            column: 25
          }
        },
        line: 590
      },
      "55": {
        name: "(anonymous_55)",
        decl: {
          start: {
            line: 593,
            column: 60
          },
          end: {
            line: 593,
            column: 61
          }
        },
        loc: {
          start: {
            line: 593,
            column: 74
          },
          end: {
            line: 595,
            column: 25
          }
        },
        line: 593
      },
      "56": {
        name: "(anonymous_56)",
        decl: {
          start: {
            line: 614,
            column: 44
          },
          end: {
            line: 614,
            column: 45
          }
        },
        loc: {
          start: {
            line: 614,
            column: 51
          },
          end: {
            line: 616,
            column: 21
          }
        },
        line: 614
      },
      "57": {
        name: "(anonymous_57)",
        decl: {
          start: {
            line: 649,
            column: 17
          },
          end: {
            line: 649,
            column: 18
          }
        },
        loc: {
          start: {
            line: 649,
            column: 33
          },
          end: {
            line: 968,
            column: 9
          }
        },
        line: 649
      },
      "58": {
        name: "(anonymous_58)",
        decl: {
          start: {
            line: 666,
            column: 56
          },
          end: {
            line: 666,
            column: 57
          }
        },
        loc: {
          start: {
            line: 666,
            column: 73
          },
          end: {
            line: 669,
            column: 17
          }
        },
        line: 666
      },
      "59": {
        name: "(anonymous_59)",
        decl: {
          start: {
            line: 674,
            column: 71
          },
          end: {
            line: 674,
            column: 72
          }
        },
        loc: {
          start: {
            line: 674,
            column: 83
          },
          end: {
            line: 674,
            column: 160
          }
        },
        line: 674
      },
      "60": {
        name: "(anonymous_60)",
        decl: {
          start: {
            line: 676,
            column: 64
          },
          end: {
            line: 676,
            column: 65
          }
        },
        loc: {
          start: {
            line: 676,
            column: 84
          },
          end: {
            line: 676,
            column: 95
          }
        },
        line: 676
      },
      "61": {
        name: "(anonymous_61)",
        decl: {
          start: {
            line: 696,
            column: 71
          },
          end: {
            line: 696,
            column: 72
          }
        },
        loc: {
          start: {
            line: 696,
            column: 83
          },
          end: {
            line: 696,
            column: 161
          }
        },
        line: 696
      },
      "62": {
        name: "(anonymous_62)",
        decl: {
          start: {
            line: 736,
            column: 69
          },
          end: {
            line: 736,
            column: 70
          }
        },
        loc: {
          start: {
            line: 736,
            column: 77
          },
          end: {
            line: 736,
            column: 159
          }
        },
        line: 736
      },
      "63": {
        name: "(anonymous_63)",
        decl: {
          start: {
            line: 755,
            column: 66
          },
          end: {
            line: 755,
            column: 67
          }
        },
        loc: {
          start: {
            line: 755,
            column: 74
          },
          end: {
            line: 758,
            column: 63
          }
        },
        line: 755
      },
      "64": {
        name: "(anonymous_64)",
        decl: {
          start: {
            line: 780,
            column: 66
          },
          end: {
            line: 780,
            column: 67
          }
        },
        loc: {
          start: {
            line: 780,
            column: 74
          },
          end: {
            line: 780,
            column: 116
          }
        },
        line: 780
      },
      "65": {
        name: "(anonymous_65)",
        decl: {
          start: {
            line: 800,
            column: 68
          },
          end: {
            line: 800,
            column: 69
          }
        },
        loc: {
          start: {
            line: 800,
            column: 76
          },
          end: {
            line: 801,
            column: 100
          }
        },
        line: 800
      },
      "66": {
        name: "(anonymous_66)",
        decl: {
          start: {
            line: 823,
            column: 70
          },
          end: {
            line: 823,
            column: 71
          }
        },
        loc: {
          start: {
            line: 823,
            column: 78
          },
          end: {
            line: 830,
            column: 21
          }
        },
        line: 823
      },
      "67": {
        name: "(anonymous_67)",
        decl: {
          start: {
            line: 852,
            column: 71
          },
          end: {
            line: 852,
            column: 72
          }
        },
        loc: {
          start: {
            line: 852,
            column: 79
          },
          end: {
            line: 852,
            column: 139
          }
        },
        line: 852
      },
      "68": {
        name: "(anonymous_68)",
        decl: {
          start: {
            line: 854,
            column: 64
          },
          end: {
            line: 854,
            column: 65
          }
        },
        loc: {
          start: {
            line: 854,
            column: 72
          },
          end: {
            line: 854,
            column: 107
          }
        },
        line: 854
      },
      "69": {
        name: "(anonymous_69)",
        decl: {
          start: {
            line: 874,
            column: 70
          },
          end: {
            line: 874,
            column: 71
          }
        },
        loc: {
          start: {
            line: 874,
            column: 78
          },
          end: {
            line: 880,
            column: 21
          }
        },
        line: 874
      },
      "70": {
        name: "(anonymous_70)",
        decl: {
          start: {
            line: 902,
            column: 43
          },
          end: {
            line: 902,
            column: 44
          }
        },
        loc: {
          start: {
            line: 902,
            column: 50
          },
          end: {
            line: 902,
            column: 80
          }
        },
        line: 902
      },
      "71": {
        name: "(anonymous_71)",
        decl: {
          start: {
            line: 910,
            column: 43
          },
          end: {
            line: 910,
            column: 44
          }
        },
        loc: {
          start: {
            line: 910,
            column: 53
          },
          end: {
            line: 910,
            column: 106
          }
        },
        line: 910
      },
      "72": {
        name: "(anonymous_72)",
        decl: {
          start: {
            line: 912,
            column: 76
          },
          end: {
            line: 912,
            column: 77
          }
        },
        loc: {
          start: {
            line: 912,
            column: 93
          },
          end: {
            line: 917,
            column: 17
          }
        },
        line: 912
      },
      "73": {
        name: "(anonymous_73)",
        decl: {
          start: {
            line: 919,
            column: 63
          },
          end: {
            line: 919,
            column: 64
          }
        },
        loc: {
          start: {
            line: 919,
            column: 102
          },
          end: {
            line: 940,
            column: 17
          }
        },
        line: 919
      },
      "74": {
        name: "(anonymous_74)",
        decl: {
          start: {
            line: 921,
            column: 50
          },
          end: {
            line: 921,
            column: 51
          }
        },
        loc: {
          start: {
            line: 921,
            column: 66
          },
          end: {
            line: 939,
            column: 21
          }
        },
        line: 921
      },
      "75": {
        name: "(anonymous_75)",
        decl: {
          start: {
            line: 935,
            column: 51
          },
          end: {
            line: 935,
            column: 52
          }
        },
        loc: {
          start: {
            line: 935,
            column: 72
          },
          end: {
            line: 937,
            column: 25
          }
        },
        line: 935
      },
      "76": {
        name: "(anonymous_76)",
        decl: {
          start: {
            line: 944,
            column: 88
          },
          end: {
            line: 944,
            column: 89
          }
        },
        loc: {
          start: {
            line: 944,
            column: 95
          },
          end: {
            line: 944,
            column: 122
          }
        },
        line: 944
      },
      "77": {
        name: "(anonymous_77)",
        decl: {
          start: {
            line: 945,
            column: 84
          },
          end: {
            line: 945,
            column: 85
          }
        },
        loc: {
          start: {
            line: 945,
            column: 91
          },
          end: {
            line: 945,
            column: 114
          }
        },
        line: 945
      },
      "78": {
        name: "(anonymous_78)",
        decl: {
          start: {
            line: 946,
            column: 86
          },
          end: {
            line: 946,
            column: 87
          }
        },
        loc: {
          start: {
            line: 946,
            column: 93
          },
          end: {
            line: 946,
            column: 118
          }
        },
        line: 946
      },
      "79": {
        name: "(anonymous_79)",
        decl: {
          start: {
            line: 947,
            column: 83
          },
          end: {
            line: 947,
            column: 84
          }
        },
        loc: {
          start: {
            line: 947,
            column: 90
          },
          end: {
            line: 947,
            column: 112
          }
        },
        line: 947
      },
      "80": {
        name: "(anonymous_80)",
        decl: {
          start: {
            line: 949,
            column: 69
          },
          end: {
            line: 949,
            column: 70
          }
        },
        loc: {
          start: {
            line: 949,
            column: 76
          },
          end: {
            line: 949,
            column: 130
          }
        },
        line: 949
      },
      "81": {
        name: "(anonymous_81)",
        decl: {
          start: {
            line: 982,
            column: 17
          },
          end: {
            line: 982,
            column: 18
          }
        },
        loc: {
          start: {
            line: 982,
            column: 33
          },
          end: {
            line: 1255,
            column: 9
          }
        },
        line: 982
      },
      "82": {
        name: "(anonymous_82)",
        decl: {
          start: {
            line: 1004,
            column: 57
          },
          end: {
            line: 1004,
            column: 58
          }
        },
        loc: {
          start: {
            line: 1004,
            column: 65
          },
          end: {
            line: 1004,
            column: 74
          }
        },
        line: 1004
      },
      "83": {
        name: "(anonymous_83)",
        decl: {
          start: {
            line: 1008,
            column: 78
          },
          end: {
            line: 1008,
            column: 79
          }
        },
        loc: {
          start: {
            line: 1008,
            column: 100
          },
          end: {
            line: 1023,
            column: 21
          }
        },
        line: 1008
      },
      "84": {
        name: "(anonymous_84)",
        decl: {
          start: {
            line: 1033,
            column: 78
          },
          end: {
            line: 1033,
            column: 79
          }
        },
        loc: {
          start: {
            line: 1033,
            column: 86
          },
          end: {
            line: 1033,
            column: 117
          }
        },
        line: 1033
      },
      "85": {
        name: "(anonymous_85)",
        decl: {
          start: {
            line: 1035,
            column: 87
          },
          end: {
            line: 1035,
            column: 88
          }
        },
        loc: {
          start: {
            line: 1035,
            column: 95
          },
          end: {
            line: 1035,
            column: 138
          }
        },
        line: 1035
      },
      "86": {
        name: "(anonymous_86)",
        decl: {
          start: {
            line: 1037,
            column: 66
          },
          end: {
            line: 1037,
            column: 67
          }
        },
        loc: {
          start: {
            line: 1037,
            column: 81
          },
          end: {
            line: 1040,
            column: 37
          }
        },
        line: 1037
      },
      "87": {
        name: "(anonymous_87)",
        decl: {
          start: {
            line: 1074,
            column: 37
          },
          end: {
            line: 1074,
            column: 38
          }
        },
        loc: {
          start: {
            line: 1074,
            column: 45
          },
          end: {
            line: 1077,
            column: 17
          }
        },
        line: 1074
      },
      "88": {
        name: "(anonymous_88)",
        decl: {
          start: {
            line: 1083,
            column: 49
          },
          end: {
            line: 1083,
            column: 50
          }
        },
        loc: {
          start: {
            line: 1083,
            column: 64
          },
          end: {
            line: 1083,
            column: 93
          }
        },
        line: 1083
      },
      "89": {
        name: "(anonymous_89)",
        decl: {
          start: {
            line: 1085,
            column: 58
          },
          end: {
            line: 1085,
            column: 59
          }
        },
        loc: {
          start: {
            line: 1085,
            column: 66
          },
          end: {
            line: 1085,
            column: 89
          }
        },
        line: 1085
      },
      "90": {
        name: "(anonymous_90)",
        decl: {
          start: {
            line: 1086,
            column: 58
          },
          end: {
            line: 1086,
            column: 59
          }
        },
        loc: {
          start: {
            line: 1086,
            column: 66
          },
          end: {
            line: 1086,
            column: 89
          }
        },
        line: 1086
      },
      "91": {
        name: "(anonymous_91)",
        decl: {
          start: {
            line: 1091,
            column: 41
          },
          end: {
            line: 1091,
            column: 42
          }
        },
        loc: {
          start: {
            line: 1091,
            column: 49
          },
          end: {
            line: 1102,
            column: 21
          }
        },
        line: 1091
      },
      "92": {
        name: "(anonymous_92)",
        decl: {
          start: {
            line: 1105,
            column: 38
          },
          end: {
            line: 1105,
            column: 39
          }
        },
        loc: {
          start: {
            line: 1105,
            column: 46
          },
          end: {
            line: 1105,
            column: 70
          }
        },
        line: 1105
      },
      "93": {
        name: "(anonymous_93)",
        decl: {
          start: {
            line: 1107,
            column: 64
          },
          end: {
            line: 1107,
            column: 65
          }
        },
        loc: {
          start: {
            line: 1107,
            column: 72
          },
          end: {
            line: 1107,
            column: 96
          }
        },
        line: 1107
      },
      "94": {
        name: "(anonymous_94)",
        decl: {
          start: {
            line: 1109,
            column: 70
          },
          end: {
            line: 1109,
            column: 71
          }
        },
        loc: {
          start: {
            line: 1109,
            column: 78
          },
          end: {
            line: 1109,
            column: 119
          }
        },
        line: 1109
      },
      "95": {
        name: "(anonymous_95)",
        decl: {
          start: {
            line: 1110,
            column: 65
          },
          end: {
            line: 1110,
            column: 66
          }
        },
        loc: {
          start: {
            line: 1110,
            column: 73
          },
          end: {
            line: 1110,
            column: 109
          }
        },
        line: 1110
      },
      "96": {
        name: "(anonymous_96)",
        decl: {
          start: {
            line: 1112,
            column: 93
          },
          end: {
            line: 1112,
            column: 94
          }
        },
        loc: {
          start: {
            line: 1112,
            column: 103
          },
          end: {
            line: 1112,
            column: 108
          }
        },
        line: 1112
      },
      "97": {
        name: "(anonymous_97)",
        decl: {
          start: {
            line: 1113,
            column: 86
          },
          end: {
            line: 1113,
            column: 87
          }
        },
        loc: {
          start: {
            line: 1113,
            column: 96
          },
          end: {
            line: 1113,
            column: 101
          }
        },
        line: 1113
      },
      "98": {
        name: "(anonymous_98)",
        decl: {
          start: {
            line: 1114,
            column: 48
          },
          end: {
            line: 1114,
            column: 49
          }
        },
        loc: {
          start: {
            line: 1114,
            column: 56
          },
          end: {
            line: 1127,
            column: 25
          }
        },
        line: 1114
      },
      "99": {
        name: "(anonymous_99)",
        decl: {
          start: {
            line: 1135,
            column: 41
          },
          end: {
            line: 1135,
            column: 42
          }
        },
        loc: {
          start: {
            line: 1135,
            column: 49
          },
          end: {
            line: 1157,
            column: 21
          }
        },
        line: 1135
      },
      "100": {
        name: "(anonymous_100)",
        decl: {
          start: {
            line: 1136,
            column: 81
          },
          end: {
            line: 1136,
            column: 82
          }
        },
        loc: {
          start: {
            line: 1136,
            column: 89
          },
          end: {
            line: 1136,
            column: 171
          }
        },
        line: 1136
      },
      "101": {
        name: "(anonymous_101)",
        decl: {
          start: {
            line: 1137,
            column: 83
          },
          end: {
            line: 1137,
            column: 84
          }
        },
        loc: {
          start: {
            line: 1137,
            column: 91
          },
          end: {
            line: 1139,
            column: 69
          }
        },
        line: 1137
      },
      "102": {
        name: "(anonymous_102)",
        decl: {
          start: {
            line: 1161,
            column: 41
          },
          end: {
            line: 1161,
            column: 42
          }
        },
        loc: {
          start: {
            line: 1161,
            column: 49
          },
          end: {
            line: 1175,
            column: 21
          }
        },
        line: 1161
      },
      "103": {
        name: "(anonymous_103)",
        decl: {
          start: {
            line: 1162,
            column: 83
          },
          end: {
            line: 1162,
            column: 84
          }
        },
        loc: {
          start: {
            line: 1162,
            column: 91
          },
          end: {
            line: 1162,
            column: 133
          }
        },
        line: 1162
      },
      "104": {
        name: "(anonymous_104)",
        decl: {
          start: {
            line: 1179,
            column: 41
          },
          end: {
            line: 1179,
            column: 42
          }
        },
        loc: {
          start: {
            line: 1179,
            column: 49
          },
          end: {
            line: 1206,
            column: 21
          }
        },
        line: 1179
      },
      "105": {
        name: "(anonymous_105)",
        decl: {
          start: {
            line: 1180,
            column: 82
          },
          end: {
            line: 1180,
            column: 83
          }
        },
        loc: {
          start: {
            line: 1180,
            column: 90
          },
          end: {
            line: 1189,
            column: 25
          }
        },
        line: 1180
      },
      "106": {
        name: "(anonymous_106)",
        decl: {
          start: {
            line: 1210,
            column: 59
          },
          end: {
            line: 1210,
            column: 60
          }
        },
        loc: {
          start: {
            line: 1210,
            column: 78
          },
          end: {
            line: 1210,
            column: 147
          }
        },
        line: 1210
      },
      "107": {
        name: "(anonymous_107)",
        decl: {
          start: {
            line: 1211,
            column: 64
          },
          end: {
            line: 1211,
            column: 65
          }
        },
        loc: {
          start: {
            line: 1211,
            column: 83
          },
          end: {
            line: 1211,
            column: 172
          }
        },
        line: 1211
      },
      "108": {
        name: "(anonymous_108)",
        decl: {
          start: {
            line: 1214,
            column: 38
          },
          end: {
            line: 1214,
            column: 39
          }
        },
        loc: {
          start: {
            line: 1214,
            column: 46
          },
          end: {
            line: 1214,
            column: 70
          }
        },
        line: 1214
      },
      "109": {
        name: "(anonymous_109)",
        decl: {
          start: {
            line: 1216,
            column: 32
          },
          end: {
            line: 1216,
            column: 33
          }
        },
        loc: {
          start: {
            line: 1216,
            column: 40
          },
          end: {
            line: 1216,
            column: 64
          }
        },
        line: 1216
      },
      "110": {
        name: "(anonymous_110)",
        decl: {
          start: {
            line: 1217,
            column: 32
          },
          end: {
            line: 1217,
            column: 33
          }
        },
        loc: {
          start: {
            line: 1217,
            column: 51
          },
          end: {
            line: 1220,
            column: 30
          }
        },
        line: 1217
      },
      "111": {
        name: "(anonymous_111)",
        decl: {
          start: {
            line: 1226,
            column: 68
          },
          end: {
            line: 1226,
            column: 69
          }
        },
        loc: {
          start: {
            line: 1226,
            column: 76
          },
          end: {
            line: 1226,
            column: 104
          }
        },
        line: 1226
      },
      "112": {
        name: "(anonymous_112)",
        decl: {
          start: {
            line: 1228,
            column: 98
          },
          end: {
            line: 1228,
            column: 99
          }
        },
        loc: {
          start: {
            line: 1228,
            column: 103
          },
          end: {
            line: 1228,
            column: 118
          }
        },
        line: 1228
      },
      "113": {
        name: "(anonymous_113)",
        decl: {
          start: {
            line: 1230,
            column: 72
          },
          end: {
            line: 1230,
            column: 73
          }
        },
        loc: {
          start: {
            line: 1230,
            column: 80
          },
          end: {
            line: 1230,
            column: 118
          }
        },
        line: 1230
      },
      "114": {
        name: "(anonymous_114)",
        decl: {
          start: {
            line: 1232,
            column: 109
          },
          end: {
            line: 1232,
            column: 110
          }
        },
        loc: {
          start: {
            line: 1232,
            column: 114
          },
          end: {
            line: 1232,
            column: 129
          }
        },
        line: 1232
      },
      "115": {
        name: "(anonymous_115)",
        decl: {
          start: {
            line: 1234,
            column: 69
          },
          end: {
            line: 1234,
            column: 70
          }
        },
        loc: {
          start: {
            line: 1234,
            column: 77
          },
          end: {
            line: 1236,
            column: 74
          }
        },
        line: 1234
      },
      "116": {
        name: "(anonymous_116)",
        decl: {
          start: {
            line: 1238,
            column: 103
          },
          end: {
            line: 1238,
            column: 104
          }
        },
        loc: {
          start: {
            line: 1238,
            column: 108
          },
          end: {
            line: 1238,
            column: 123
          }
        },
        line: 1238
      },
      "117": {
        name: "(anonymous_117)",
        decl: {
          start: {
            line: 1243,
            column: 40
          },
          end: {
            line: 1243,
            column: 41
          }
        },
        loc: {
          start: {
            line: 1243,
            column: 56
          },
          end: {
            line: 1245,
            column: 17
          }
        },
        line: 1243
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 12
          },
          end: {
            line: 56,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 61,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 61,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 59,
            column: 35
          }
        }, {
          start: {
            line: 59,
            column: 39
          },
          end: {
            line: 59,
            column: 66
          }
        }],
        line: 59
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 66,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 66,
            column: 45
          },
          end: {
            line: 66,
            column: 65
          }
        }, {
          start: {
            line: 66,
            column: 69
          },
          end: {
            line: 66,
            column: 71
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 75,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 74,
            column: 20
          },
          end: {
            line: 75,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 74
      },
      "5": {
        loc: {
          start: {
            line: 78,
            column: 20
          },
          end: {
            line: 80,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 20
          },
          end: {
            line: 80,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "6": {
        loc: {
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 78,
            column: 24
          },
          end: {
            line: 78,
            column: 37
          }
        }, {
          start: {
            line: 78,
            column: 41
          },
          end: {
            line: 78,
            column: 79
          }
        }],
        line: 78
      },
      "7": {
        loc: {
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 24
          },
          end: {
            line: 90,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "8": {
        loc: {
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 88,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 85,
            column: 32
          },
          end: {
            line: 88,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 85
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 96,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 30
          },
          end: {
            line: 96,
            column: 50
          }
        }, {
          start: {
            line: 96,
            column: 54
          },
          end: {
            line: 96,
            column: 56
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 103,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 24
          },
          end: {
            line: 103,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 101,
            column: 66
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 32
          },
          end: {
            line: 101,
            column: 66
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 115,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 16
          },
          end: {
            line: 115,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 121,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 20
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: 126,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        }],
        line: 121
      },
      "14": {
        loc: {
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 123,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 24
          },
          end: {
            line: 121,
            column: 47
          }
        }, {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 122,
            column: 51
          }
        }, {
          start: {
            line: 123,
            column: 24
          },
          end: {
            line: 123,
            column: 50
          }
        }],
        line: 121
      },
      "15": {
        loc: {
          start: {
            line: 126,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        }],
        line: 126
      },
      "16": {
        loc: {
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 126,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 29
          },
          end: {
            line: 126,
            column: 54
          }
        }, {
          start: {
            line: 126,
            column: 58
          },
          end: {
            line: 126,
            column: 84
          }
        }],
        line: 126
      },
      "17": {
        loc: {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 131,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "18": {
        loc: {
          start: {
            line: 129,
            column: 29
          },
          end: {
            line: 129,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 29
          },
          end: {
            line: 129,
            column: 54
          }
        }, {
          start: {
            line: 129,
            column: 58
          },
          end: {
            line: 129,
            column: 87
          }
        }],
        line: 129
      },
      "19": {
        loc: {
          start: {
            line: 140,
            column: 20
          },
          end: {
            line: 141,
            column: 40
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 20
          },
          end: {
            line: 141,
            column: 40
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "20": {
        loc: {
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 143,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 20
          },
          end: {
            line: 143,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "21": {
        loc: {
          start: {
            line: 144,
            column: 20
          },
          end: {
            line: 145,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 20
          },
          end: {
            line: 145,
            column: 41
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "22": {
        loc: {
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 164,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 164,
            column: 44
          }
        }, {
          start: {
            line: 164,
            column: 48
          },
          end: {
            line: 164,
            column: 49
          }
        }],
        line: 164
      },
      "23": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 199,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "24": {
        loc: {
          start: {
            line: 180,
            column: 24
          },
          end: {
            line: 194,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 24
          },
          end: {
            line: 194,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "25": {
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "26": {
        loc: {
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 206,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 20
          },
          end: {
            line: 206,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "27": {
        loc: {
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 209,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 20
          },
          end: {
            line: 209,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "28": {
        loc: {
          start: {
            line: 210,
            column: 20
          },
          end: {
            line: 212,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 20
          },
          end: {
            line: 212,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "29": {
        loc: {
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 215,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 20
          },
          end: {
            line: 215,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "30": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "31": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "32": {
        loc: {
          start: {
            line: 224,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 20
          },
          end: {
            line: 226,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "33": {
        loc: {
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 229,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 20
          },
          end: {
            line: 229,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "34": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 265,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "35": {
        loc: {
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: 272,
            column: 21
          },
          end: {
            line: 275,
            column: 17
          }
        }],
        line: 268
      },
      "36": {
        loc: {
          start: {
            line: 277,
            column: 38
          },
          end: {
            line: 277,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 38
          },
          end: {
            line: 277,
            column: 60
          }
        }, {
          start: {
            line: 277,
            column: 64
          },
          end: {
            line: 277,
            column: 65
          }
        }],
        line: 277
      },
      "37": {
        loc: {
          start: {
            line: 278,
            column: 44
          },
          end: {
            line: 280,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 26
          },
          end: {
            line: 279,
            column: 84
          }
        }, {
          start: {
            line: 280,
            column: 26
          },
          end: {
            line: 280,
            column: 27
          }
        }],
        line: 278
      },
      "38": {
        loc: {
          start: {
            line: 281,
            column: 53
          },
          end: {
            line: 281,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 281,
            column: 53
          },
          end: {
            line: 281,
            column: 73
          }
        }, {
          start: {
            line: 281,
            column: 77
          },
          end: {
            line: 281,
            column: 79
          }
        }],
        line: 281
      },
      "39": {
        loc: {
          start: {
            line: 283,
            column: 43
          },
          end: {
            line: 283,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 59
          },
          end: {
            line: 283,
            column: 86
          }
        }, {
          start: {
            line: 283,
            column: 89
          },
          end: {
            line: 283,
            column: 90
          }
        }],
        line: 283
      },
      "40": {
        loc: {
          start: {
            line: 285,
            column: 49
          },
          end: {
            line: 285,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 49
          },
          end: {
            line: 285,
            column: 63
          }
        }, {
          start: {
            line: 285,
            column: 67
          },
          end: {
            line: 285,
            column: 69
          }
        }],
        line: 285
      },
      "41": {
        loc: {
          start: {
            line: 288,
            column: 24
          },
          end: {
            line: 298,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 24
          },
          end: {
            line: 298,
            column: 25
          }
        }, {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        }],
        line: 288
      },
      "42": {
        loc: {
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 290,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 28
          },
          end: {
            line: 288,
            column: 51
          }
        }, {
          start: {
            line: 289,
            column: 28
          },
          end: {
            line: 289,
            column: 55
          }
        }, {
          start: {
            line: 290,
            column: 28
          },
          end: {
            line: 290,
            column: 54
          }
        }],
        line: 288
      },
      "43": {
        loc: {
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        }, {
          start: {
            line: 296,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        }],
        line: 293
      },
      "44": {
        loc: {
          start: {
            line: 293,
            column: 33
          },
          end: {
            line: 293,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 33
          },
          end: {
            line: 293,
            column: 58
          }
        }, {
          start: {
            line: 293,
            column: 62
          },
          end: {
            line: 293,
            column: 88
          }
        }],
        line: 293
      },
      "45": {
        loc: {
          start: {
            line: 296,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 296,
            column: 29
          },
          end: {
            line: 298,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 296
      },
      "46": {
        loc: {
          start: {
            line: 296,
            column: 33
          },
          end: {
            line: 296,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 296,
            column: 33
          },
          end: {
            line: 296,
            column: 58
          }
        }, {
          start: {
            line: 296,
            column: 62
          },
          end: {
            line: 296,
            column: 91
          }
        }],
        line: 296
      },
      "47": {
        loc: {
          start: {
            line: 311,
            column: 41
          },
          end: {
            line: 317,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 312,
            column: 30
          },
          end: {
            line: 312,
            column: 35
          }
        }, {
          start: {
            line: 313,
            column: 30
          },
          end: {
            line: 317,
            column: 49
          }
        }],
        line: 311
      },
      "48": {
        loc: {
          start: {
            line: 313,
            column: 30
          },
          end: {
            line: 317,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 34
          },
          end: {
            line: 314,
            column: 42
          }
        }, {
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 317,
            column: 49
          }
        }],
        line: 313
      },
      "49": {
        loc: {
          start: {
            line: 315,
            column: 34
          },
          end: {
            line: 317,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 316,
            column: 38
          },
          end: {
            line: 316,
            column: 44
          }
        }, {
          start: {
            line: 317,
            column: 38
          },
          end: {
            line: 317,
            column: 49
          }
        }],
        line: 315
      },
      "50": {
        loc: {
          start: {
            line: 321,
            column: 37
          },
          end: {
            line: 334,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 22
          },
          end: {
            line: 322,
            column: 36
          }
        }, {
          start: {
            line: 323,
            column: 22
          },
          end: {
            line: 334,
            column: 22
          }
        }],
        line: 321
      },
      "51": {
        loc: {
          start: {
            line: 324,
            column: 24
          },
          end: {
            line: 333,
            column: 25
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 325,
            column: 28
          },
          end: {
            line: 326,
            column: 70
          }
        }, {
          start: {
            line: 327,
            column: 28
          },
          end: {
            line: 328,
            column: 73
          }
        }, {
          start: {
            line: 329,
            column: 28
          },
          end: {
            line: 330,
            column: 111
          }
        }, {
          start: {
            line: 331,
            column: 28
          },
          end: {
            line: 332,
            column: 44
          }
        }],
        line: 324
      },
      "52": {
        loc: {
          start: {
            line: 330,
            column: 39
          },
          end: {
            line: 330,
            column: 110
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 330,
            column: 39
          },
          end: {
            line: 330,
            column: 70
          }
        }, {
          start: {
            line: 330,
            column: 74
          },
          end: {
            line: 330,
            column: 110
          }
        }],
        line: 330
      },
      "53": {
        loc: {
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 348,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 338,
            column: 24
          },
          end: {
            line: 339,
            column: 77
          }
        }, {
          start: {
            line: 340,
            column: 24
          },
          end: {
            line: 341,
            column: 61
          }
        }, {
          start: {
            line: 342,
            column: 24
          },
          end: {
            line: 343,
            column: 67
          }
        }, {
          start: {
            line: 344,
            column: 24
          },
          end: {
            line: 345,
            column: 81
          }
        }, {
          start: {
            line: 346,
            column: 24
          },
          end: {
            line: 347,
            column: 77
          }
        }],
        line: 337
      },
      "54": {
        loc: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "55": {
        loc: {
          start: {
            line: 368,
            column: 50
          },
          end: {
            line: 368,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 50
          },
          end: {
            line: 368,
            column: 76
          }
        }, {
          start: {
            line: 368,
            column: 80
          },
          end: {
            line: 368,
            column: 81
          }
        }],
        line: 368
      },
      "56": {
        loc: {
          start: {
            line: 374,
            column: 38
          },
          end: {
            line: 374,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 374,
            column: 56
          },
          end: {
            line: 374,
            column: 60
          }
        }, {
          start: {
            line: 374,
            column: 63
          },
          end: {
            line: 374,
            column: 121
          }
        }],
        line: 374
      },
      "57": {
        loc: {
          start: {
            line: 374,
            column: 63
          },
          end: {
            line: 374,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 374,
            column: 84
          },
          end: {
            line: 374,
            column: 88
          }
        }, {
          start: {
            line: 374,
            column: 91
          },
          end: {
            line: 374,
            column: 121
          }
        }],
        line: 374
      },
      "58": {
        loc: {
          start: {
            line: 374,
            column: 91
          },
          end: {
            line: 374,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 374,
            column: 110
          },
          end: {
            line: 374,
            column: 114
          }
        }, {
          start: {
            line: 374,
            column: 117
          },
          end: {
            line: 374,
            column: 121
          }
        }],
        line: 374
      },
      "59": {
        loc: {
          start: {
            line: 384,
            column: 39
          },
          end: {
            line: 384,
            column: 64
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 53
          },
          end: {
            line: 384,
            column: 57
          }
        }, {
          start: {
            line: 384,
            column: 60
          },
          end: {
            line: 384,
            column: 64
          }
        }],
        line: 384
      },
      "60": {
        loc: {
          start: {
            line: 385,
            column: 43
          },
          end: {
            line: 391,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 386,
            column: 26
          },
          end: {
            line: 386,
            column: 30
          }
        }, {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 391,
            column: 38
          }
        }],
        line: 385
      },
      "61": {
        loc: {
          start: {
            line: 387,
            column: 26
          },
          end: {
            line: 391,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 30
          },
          end: {
            line: 388,
            column: 34
          }
        }, {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 391,
            column: 38
          }
        }],
        line: 387
      },
      "62": {
        loc: {
          start: {
            line: 389,
            column: 30
          },
          end: {
            line: 391,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 34
          },
          end: {
            line: 390,
            column: 38
          }
        }, {
          start: {
            line: 391,
            column: 34
          },
          end: {
            line: 391,
            column: 38
          }
        }],
        line: 389
      },
      "63": {
        loc: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 396,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "64": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 424,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "65": {
        loc: {
          start: {
            line: 436,
            column: 16
          },
          end: {
            line: 443,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 16
          },
          end: {
            line: 443,
            column: 17
          }
        }, {
          start: {
            line: 440,
            column: 21
          },
          end: {
            line: 443,
            column: 17
          }
        }],
        line: 436
      },
      "66": {
        loc: {
          start: {
            line: 454,
            column: 82
          },
          end: {
            line: 454,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 82
          },
          end: {
            line: 454,
            column: 113
          }
        }, {
          start: {
            line: 454,
            column: 117
          },
          end: {
            line: 454,
            column: 154
          }
        }],
        line: 454
      },
      "67": {
        loc: {
          start: {
            line: 455,
            column: 24
          },
          end: {
            line: 456,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 24
          },
          end: {
            line: 456,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "68": {
        loc: {
          start: {
            line: 459,
            column: 44
          },
          end: {
            line: 459,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 459,
            column: 44
          },
          end: {
            line: 459,
            column: 58
          }
        }, {
          start: {
            line: 459,
            column: 62
          },
          end: {
            line: 459,
            column: 87
          }
        }],
        line: 459
      },
      "69": {
        loc: {
          start: {
            line: 461,
            column: 24
          },
          end: {
            line: 462,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 24
          },
          end: {
            line: 462,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "70": {
        loc: {
          start: {
            line: 469,
            column: 46
          },
          end: {
            line: 469,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 46
          },
          end: {
            line: 469,
            column: 73
          }
        }, {
          start: {
            line: 469,
            column: 77
          },
          end: {
            line: 469,
            column: 112
          }
        }],
        line: 469
      },
      "71": {
        loc: {
          start: {
            line: 472,
            column: 28
          },
          end: {
            line: 473,
            column: 45
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 28
          },
          end: {
            line: 473,
            column: 45
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "72": {
        loc: {
          start: {
            line: 482,
            column: 42
          },
          end: {
            line: 482,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 42
          },
          end: {
            line: 482,
            column: 64
          }
        }, {
          start: {
            line: 482,
            column: 68
          },
          end: {
            line: 482,
            column: 69
          }
        }],
        line: 482
      },
      "73": {
        loc: {
          start: {
            line: 483,
            column: 24
          },
          end: {
            line: 485,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 24
          },
          end: {
            line: 485,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 483
      },
      "74": {
        loc: {
          start: {
            line: 486,
            column: 44
          },
          end: {
            line: 486,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 44
          },
          end: {
            line: 486,
            column: 58
          }
        }, {
          start: {
            line: 486,
            column: 62
          },
          end: {
            line: 486,
            column: 64
          }
        }],
        line: 486
      },
      "75": {
        loc: {
          start: {
            line: 498,
            column: 24
          },
          end: {
            line: 500,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 498,
            column: 24
          },
          end: {
            line: 500,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 498
      },
      "76": {
        loc: {
          start: {
            line: 502,
            column: 54
          },
          end: {
            line: 502,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 502,
            column: 54
          },
          end: {
            line: 502,
            column: 68
          }
        }, {
          start: {
            line: 502,
            column: 72
          },
          end: {
            line: 502,
            column: 74
          }
        }],
        line: 502
      },
      "77": {
        loc: {
          start: {
            line: 504,
            column: 47
          },
          end: {
            line: 504,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 504,
            column: 47
          },
          end: {
            line: 504,
            column: 62
          }
        }, {
          start: {
            line: 504,
            column: 66
          },
          end: {
            line: 504,
            column: 67
          }
        }],
        line: 504
      },
      "78": {
        loc: {
          start: {
            line: 510,
            column: 36
          },
          end: {
            line: 514,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 510,
            column: 37
          },
          end: {
            line: 510,
            column: 67
          }
        }, {
          start: {
            line: 511,
            column: 32
          },
          end: {
            line: 511,
            column: 65
          }
        }, {
          start: {
            line: 512,
            column: 32
          },
          end: {
            line: 512,
            column: 62
          }
        }, {
          start: {
            line: 513,
            column: 32
          },
          end: {
            line: 513,
            column: 66
          }
        }, {
          start: {
            line: 514,
            column: 32
          },
          end: {
            line: 514,
            column: 41
          }
        }],
        line: 510
      },
      "79": {
        loc: {
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 557,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 557,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 550
      },
      "80": {
        loc: {
          start: {
            line: 568,
            column: 88
          },
          end: {
            line: 570,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 568,
            column: 88
          },
          end: {
            line: 568,
            column: 125
          }
        }, {
          start: {
            line: 569,
            column: 20
          },
          end: {
            line: 569,
            column: 48
          }
        }, {
          start: {
            line: 570,
            column: 20
          },
          end: {
            line: 570,
            column: 53
          }
        }],
        line: 568
      },
      "81": {
        loc: {
          start: {
            line: 575,
            column: 37
          },
          end: {
            line: 581,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 576,
            column: 26
          },
          end: {
            line: 576,
            column: 39
          }
        }, {
          start: {
            line: 577,
            column: 26
          },
          end: {
            line: 581,
            column: 42
          }
        }],
        line: 575
      },
      "82": {
        loc: {
          start: {
            line: 575,
            column: 37
          },
          end: {
            line: 575,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 575,
            column: 37
          },
          end: {
            line: 575,
            column: 74
          }
        }, {
          start: {
            line: 575,
            column: 78
          },
          end: {
            line: 575,
            column: 107
          }
        }],
        line: 575
      },
      "83": {
        loc: {
          start: {
            line: 577,
            column: 26
          },
          end: {
            line: 581,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 578,
            column: 30
          },
          end: {
            line: 578,
            column: 39
          }
        }, {
          start: {
            line: 579,
            column: 30
          },
          end: {
            line: 581,
            column: 42
          }
        }],
        line: 577
      },
      "84": {
        loc: {
          start: {
            line: 577,
            column: 26
          },
          end: {
            line: 577,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 577,
            column: 26
          },
          end: {
            line: 577,
            column: 63
          }
        }, {
          start: {
            line: 577,
            column: 67
          },
          end: {
            line: 577,
            column: 95
          }
        }],
        line: 577
      },
      "85": {
        loc: {
          start: {
            line: 579,
            column: 30
          },
          end: {
            line: 581,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 580,
            column: 34
          },
          end: {
            line: 580,
            column: 45
          }
        }, {
          start: {
            line: 581,
            column: 34
          },
          end: {
            line: 581,
            column: 42
          }
        }],
        line: 579
      },
      "86": {
        loc: {
          start: {
            line: 579,
            column: 30
          },
          end: {
            line: 579,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 579,
            column: 30
          },
          end: {
            line: 579,
            column: 67
          }
        }, {
          start: {
            line: 579,
            column: 71
          },
          end: {
            line: 579,
            column: 99
          }
        }],
        line: 579
      },
      "87": {
        loc: {
          start: {
            line: 588,
            column: 20
          },
          end: {
            line: 596,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 588,
            column: 20
          },
          end: {
            line: 596,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 588
      },
      "88": {
        loc: {
          start: {
            line: 588,
            column: 24
          },
          end: {
            line: 588,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 588,
            column: 24
          },
          end: {
            line: 588,
            column: 57
          }
        }, {
          start: {
            line: 588,
            column: 61
          },
          end: {
            line: 588,
            column: 99
          }
        }],
        line: 588
      },
      "89": {
        loc: {
          start: {
            line: 599,
            column: 20
          },
          end: {
            line: 601,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 599,
            column: 20
          },
          end: {
            line: 601,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 599
      },
      "90": {
        loc: {
          start: {
            line: 602,
            column: 20
          },
          end: {
            line: 604,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 602,
            column: 20
          },
          end: {
            line: 604,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 602
      },
      "91": {
        loc: {
          start: {
            line: 605,
            column: 20
          },
          end: {
            line: 607,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 605,
            column: 20
          },
          end: {
            line: 607,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 605
      },
      "92": {
        loc: {
          start: {
            line: 608,
            column: 20
          },
          end: {
            line: 610,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 608,
            column: 20
          },
          end: {
            line: 610,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 608
      },
      "93": {
        loc: {
          start: {
            line: 611,
            column: 20
          },
          end: {
            line: 613,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 611,
            column: 20
          },
          end: {
            line: 613,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 611
      },
      "94": {
        loc: {
          start: {
            line: 651,
            column: 12
          },
          end: {
            line: 653,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 651,
            column: 12
          },
          end: {
            line: 653,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 651
      },
      "95": {
        loc: {
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 658,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 656,
            column: 16
          },
          end: {
            line: 658,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 656
      },
      "96": {
        loc: {
          start: {
            line: 656,
            column: 20
          },
          end: {
            line: 656,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 656,
            column: 20
          },
          end: {
            line: 656,
            column: 35
          }
        }, {
          start: {
            line: 656,
            column: 39
          },
          end: {
            line: 656,
            column: 66
          }
        }],
        line: 656
      },
      "97": {
        loc: {
          start: {
            line: 667,
            column: 40
          },
          end: {
            line: 667,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 667,
            column: 40
          },
          end: {
            line: 667,
            column: 56
          }
        }, {
          start: {
            line: 667,
            column: 60
          },
          end: {
            line: 667,
            column: 61
          }
        }],
        line: 667
      },
      "98": {
        loc: {
          start: {
            line: 670,
            column: 49
          },
          end: {
            line: 670,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 670,
            column: 49
          },
          end: {
            line: 670,
            column: 69
          }
        }, {
          start: {
            line: 670,
            column: 73
          },
          end: {
            line: 670,
            column: 75
          }
        }],
        line: 670
      },
      "99": {
        loc: {
          start: {
            line: 672,
            column: 16
          },
          end: {
            line: 732,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 672,
            column: 16
          },
          end: {
            line: 732,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 672
      },
      "100": {
        loc: {
          start: {
            line: 674,
            column: 83
          },
          end: {
            line: 674,
            column: 160
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 674,
            column: 83
          },
          end: {
            line: 674,
            column: 118
          }
        }, {
          start: {
            line: 674,
            column: 122
          },
          end: {
            line: 674,
            column: 160
          }
        }],
        line: 674
      },
      "101": {
        loc: {
          start: {
            line: 675,
            column: 20
          },
          end: {
            line: 694,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 675,
            column: 20
          },
          end: {
            line: 694,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 675
      },
      "102": {
        loc: {
          start: {
            line: 677,
            column: 24
          },
          end: {
            line: 693,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 677,
            column: 24
          },
          end: {
            line: 693,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 677
      },
      "103": {
        loc: {
          start: {
            line: 696,
            column: 83
          },
          end: {
            line: 696,
            column: 161
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 696,
            column: 83
          },
          end: {
            line: 696,
            column: 118
          }
        }, {
          start: {
            line: 696,
            column: 122
          },
          end: {
            line: 696,
            column: 161
          }
        }],
        line: 696
      },
      "104": {
        loc: {
          start: {
            line: 697,
            column: 20
          },
          end: {
            line: 713,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 697,
            column: 20
          },
          end: {
            line: 713,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 697
      },
      "105": {
        loc: {
          start: {
            line: 715,
            column: 20
          },
          end: {
            line: 731,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 715,
            column: 20
          },
          end: {
            line: 731,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 715
      },
      "106": {
        loc: {
          start: {
            line: 718,
            column: 38
          },
          end: {
            line: 718,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 718,
            column: 55
          },
          end: {
            line: 718,
            column: 65
          }
        }, {
          start: {
            line: 718,
            column: 68
          },
          end: {
            line: 718,
            column: 74
          }
        }],
        line: 718
      },
      "107": {
        loc: {
          start: {
            line: 734,
            column: 16
          },
          end: {
            line: 776,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 734,
            column: 16
          },
          end: {
            line: 776,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 734
      },
      "108": {
        loc: {
          start: {
            line: 736,
            column: 77
          },
          end: {
            line: 736,
            column: 159
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 736,
            column: 77
          },
          end: {
            line: 736,
            column: 92
          }
        }, {
          start: {
            line: 736,
            column: 96
          },
          end: {
            line: 736,
            column: 159
          }
        }],
        line: 736
      },
      "109": {
        loc: {
          start: {
            line: 737,
            column: 20
          },
          end: {
            line: 753,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 737,
            column: 20
          },
          end: {
            line: 753,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 737
      },
      "110": {
        loc: {
          start: {
            line: 755,
            column: 74
          },
          end: {
            line: 758,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 755,
            column: 74
          },
          end: {
            line: 755,
            column: 117
          }
        }, {
          start: {
            line: 756,
            column: 24
          },
          end: {
            line: 756,
            column: 65
          }
        }, {
          start: {
            line: 757,
            column: 24
          },
          end: {
            line: 757,
            column: 65
          }
        }, {
          start: {
            line: 758,
            column: 24
          },
          end: {
            line: 758,
            column: 63
          }
        }],
        line: 755
      },
      "111": {
        loc: {
          start: {
            line: 759,
            column: 20
          },
          end: {
            line: 775,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 759,
            column: 20
          },
          end: {
            line: 775,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 759
      },
      "112": {
        loc: {
          start: {
            line: 778,
            column: 16
          },
          end: {
            line: 819,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 778,
            column: 16
          },
          end: {
            line: 819,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 778
      },
      "113": {
        loc: {
          start: {
            line: 780,
            column: 74
          },
          end: {
            line: 780,
            column: 116
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 780,
            column: 74
          },
          end: {
            line: 780,
            column: 84
          }
        }, {
          start: {
            line: 780,
            column: 88
          },
          end: {
            line: 780,
            column: 116
          }
        }],
        line: 780
      },
      "114": {
        loc: {
          start: {
            line: 782,
            column: 20
          },
          end: {
            line: 798,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 782,
            column: 20
          },
          end: {
            line: 798,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 782
      },
      "115": {
        loc: {
          start: {
            line: 800,
            column: 76
          },
          end: {
            line: 801,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 800,
            column: 76
          },
          end: {
            line: 800,
            column: 99
          }
        }, {
          start: {
            line: 801,
            column: 25
          },
          end: {
            line: 801,
            column: 56
          }
        }, {
          start: {
            line: 801,
            column: 60
          },
          end: {
            line: 801,
            column: 99
          }
        }],
        line: 800
      },
      "116": {
        loc: {
          start: {
            line: 802,
            column: 20
          },
          end: {
            line: 818,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 802,
            column: 20
          },
          end: {
            line: 818,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 802
      },
      "117": {
        loc: {
          start: {
            line: 821,
            column: 16
          },
          end: {
            line: 848,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 821,
            column: 16
          },
          end: {
            line: 848,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 821
      },
      "118": {
        loc: {
          start: {
            line: 825,
            column: 32
          },
          end: {
            line: 829,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 825,
            column: 32
          },
          end: {
            line: 825,
            column: 53
          }
        }, {
          start: {
            line: 826,
            column: 28
          },
          end: {
            line: 826,
            column: 52
          }
        }, {
          start: {
            line: 827,
            column: 28
          },
          end: {
            line: 827,
            column: 47
          }
        }, {
          start: {
            line: 828,
            column: 28
          },
          end: {
            line: 828,
            column: 51
          }
        }, {
          start: {
            line: 829,
            column: 28
          },
          end: {
            line: 829,
            column: 54
          }
        }],
        line: 825
      },
      "119": {
        loc: {
          start: {
            line: 831,
            column: 20
          },
          end: {
            line: 847,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 831,
            column: 20
          },
          end: {
            line: 847,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 831
      },
      "120": {
        loc: {
          start: {
            line: 850,
            column: 16
          },
          end: {
            line: 898,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 850,
            column: 16
          },
          end: {
            line: 898,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 850
      },
      "121": {
        loc: {
          start: {
            line: 852,
            column: 79
          },
          end: {
            line: 852,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 852,
            column: 79
          },
          end: {
            line: 852,
            column: 95
          }
        }, {
          start: {
            line: 852,
            column: 99
          },
          end: {
            line: 852,
            column: 139
          }
        }],
        line: 852
      },
      "122": {
        loc: {
          start: {
            line: 854,
            column: 84
          },
          end: {
            line: 854,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 854,
            column: 84
          },
          end: {
            line: 854,
            column: 100
          }
        }, {
          start: {
            line: 854,
            column: 104
          },
          end: {
            line: 854,
            column: 106
          }
        }],
        line: 854
      },
      "123": {
        loc: {
          start: {
            line: 856,
            column: 20
          },
          end: {
            line: 872,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 856,
            column: 20
          },
          end: {
            line: 872,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 856
      },
      "124": {
        loc: {
          start: {
            line: 876,
            column: 32
          },
          end: {
            line: 879,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 876,
            column: 32
          },
          end: {
            line: 876,
            column: 52
          }
        }, {
          start: {
            line: 877,
            column: 28
          },
          end: {
            line: 877,
            column: 49
          }
        }, {
          start: {
            line: 878,
            column: 28
          },
          end: {
            line: 878,
            column: 53
          }
        }, {
          start: {
            line: 879,
            column: 28
          },
          end: {
            line: 879,
            column: 50
          }
        }],
        line: 876
      },
      "125": {
        loc: {
          start: {
            line: 881,
            column: 20
          },
          end: {
            line: 897,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 881,
            column: 20
          },
          end: {
            line: 897,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 881
      },
      "126": {
        loc: {
          start: {
            line: 900,
            column: 46
          },
          end: {
            line: 902,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 901,
            column: 22
          },
          end: {
            line: 901,
            column: 35
          }
        }, {
          start: {
            line: 902,
            column: 22
          },
          end: {
            line: 902,
            column: 81
          }
        }],
        line: 900
      },
      "127": {
        loc: {
          start: {
            line: 903,
            column: 16
          },
          end: {
            line: 907,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 903,
            column: 16
          },
          end: {
            line: 907,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 903
      },
      "128": {
        loc: {
          start: {
            line: 913,
            column: 20
          },
          end: {
            line: 914,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 913,
            column: 20
          },
          end: {
            line: 914,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 913
      },
      "129": {
        loc: {
          start: {
            line: 922,
            column: 45
          },
          end: {
            line: 928,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 923,
            column: 30
          },
          end: {
            line: 923,
            column: 34
          }
        }, {
          start: {
            line: 924,
            column: 30
          },
          end: {
            line: 928,
            column: 42
          }
        }],
        line: 922
      },
      "130": {
        loc: {
          start: {
            line: 924,
            column: 30
          },
          end: {
            line: 928,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 925,
            column: 34
          },
          end: {
            line: 925,
            column: 38
          }
        }, {
          start: {
            line: 926,
            column: 34
          },
          end: {
            line: 928,
            column: 42
          }
        }],
        line: 924
      },
      "131": {
        loc: {
          start: {
            line: 926,
            column: 34
          },
          end: {
            line: 928,
            column: 42
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 927,
            column: 38
          },
          end: {
            line: 927,
            column: 42
          }
        }, {
          start: {
            line: 928,
            column: 38
          },
          end: {
            line: 928,
            column: 42
          }
        }],
        line: 926
      },
      "132": {
        loc: {
          start: {
            line: 949,
            column: 76
          },
          end: {
            line: 949,
            column: 130
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 949,
            column: 76
          },
          end: {
            line: 949,
            column: 103
          }
        }, {
          start: {
            line: 949,
            column: 107
          },
          end: {
            line: 949,
            column: 130
          }
        }],
        line: 949
      },
      "133": {
        loc: {
          start: {
            line: 950,
            column: 16
          },
          end: {
            line: 958,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 950,
            column: 16
          },
          end: {
            line: 958,
            column: 17
          }
        }, {
          start: {
            line: 955,
            column: 21
          },
          end: {
            line: 958,
            column: 17
          }
        }],
        line: 950
      },
      "134": {
        loc: {
          start: {
            line: 984,
            column: 12
          },
          end: {
            line: 986,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 984,
            column: 12
          },
          end: {
            line: 986,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 984
      },
      "135": {
        loc: {
          start: {
            line: 1002,
            column: 38
          },
          end: {
            line: 1002,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1002,
            column: 38
          },
          end: {
            line: 1002,
            column: 60
          }
        }, {
          start: {
            line: 1002,
            column: 64
          },
          end: {
            line: 1002,
            column: 65
          }
        }],
        line: 1002
      },
      "136": {
        loc: {
          start: {
            line: 1003,
            column: 44
          },
          end: {
            line: 1005,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1004,
            column: 26
          },
          end: {
            line: 1004,
            column: 84
          }
        }, {
          start: {
            line: 1005,
            column: 26
          },
          end: {
            line: 1005,
            column: 27
          }
        }],
        line: 1003
      },
      "137": {
        loc: {
          start: {
            line: 1006,
            column: 53
          },
          end: {
            line: 1006,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1006,
            column: 53
          },
          end: {
            line: 1006,
            column: 73
          }
        }, {
          start: {
            line: 1006,
            column: 77
          },
          end: {
            line: 1006,
            column: 79
          }
        }],
        line: 1006
      },
      "138": {
        loc: {
          start: {
            line: 1008,
            column: 49
          },
          end: {
            line: 1008,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1008,
            column: 49
          },
          end: {
            line: 1008,
            column: 63
          }
        }, {
          start: {
            line: 1008,
            column: 67
          },
          end: {
            line: 1008,
            column: 69
          }
        }],
        line: 1008
      },
      "139": {
        loc: {
          start: {
            line: 1011,
            column: 24
          },
          end: {
            line: 1021,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1011,
            column: 24
          },
          end: {
            line: 1021,
            column: 25
          }
        }, {
          start: {
            line: 1016,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        }],
        line: 1011
      },
      "140": {
        loc: {
          start: {
            line: 1011,
            column: 28
          },
          end: {
            line: 1013,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1011,
            column: 28
          },
          end: {
            line: 1011,
            column: 51
          }
        }, {
          start: {
            line: 1012,
            column: 28
          },
          end: {
            line: 1012,
            column: 55
          }
        }, {
          start: {
            line: 1013,
            column: 28
          },
          end: {
            line: 1013,
            column: 54
          }
        }],
        line: 1011
      },
      "141": {
        loc: {
          start: {
            line: 1016,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1016,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        }, {
          start: {
            line: 1019,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        }],
        line: 1016
      },
      "142": {
        loc: {
          start: {
            line: 1016,
            column: 33
          },
          end: {
            line: 1016,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1016,
            column: 33
          },
          end: {
            line: 1016,
            column: 58
          }
        }, {
          start: {
            line: 1016,
            column: 62
          },
          end: {
            line: 1016,
            column: 88
          }
        }],
        line: 1016
      },
      "143": {
        loc: {
          start: {
            line: 1019,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1019,
            column: 29
          },
          end: {
            line: 1021,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1019
      },
      "144": {
        loc: {
          start: {
            line: 1019,
            column: 33
          },
          end: {
            line: 1019,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1019,
            column: 33
          },
          end: {
            line: 1019,
            column: 58
          }
        }, {
          start: {
            line: 1019,
            column: 62
          },
          end: {
            line: 1019,
            column: 91
          }
        }],
        line: 1019
      },
      "145": {
        loc: {
          start: {
            line: 1025,
            column: 43
          },
          end: {
            line: 1025,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1025,
            column: 59
          },
          end: {
            line: 1025,
            column: 86
          }
        }, {
          start: {
            line: 1025,
            column: 89
          },
          end: {
            line: 1025,
            column: 90
          }
        }],
        line: 1025
      },
      "146": {
        loc: {
          start: {
            line: 1026,
            column: 46
          },
          end: {
            line: 1026,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1026,
            column: 62
          },
          end: {
            line: 1026,
            column: 93
          }
        }, {
          start: {
            line: 1026,
            column: 96
          },
          end: {
            line: 1026,
            column: 97
          }
        }],
        line: 1026
      },
      "147": {
        loc: {
          start: {
            line: 1030,
            column: 20
          },
          end: {
            line: 1053,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1030,
            column: 20
          },
          end: {
            line: 1053,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1030
      },
      "148": {
        loc: {
          start: {
            line: 1034,
            column: 28
          },
          end: {
            line: 1048,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1034,
            column: 28
          },
          end: {
            line: 1048,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1034
      },
      "149": {
        loc: {
          start: {
            line: 1035,
            column: 95
          },
          end: {
            line: 1035,
            column: 138
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1035,
            column: 95
          },
          end: {
            line: 1035,
            column: 120
          }
        }, {
          start: {
            line: 1035,
            column: 124
          },
          end: {
            line: 1035,
            column: 138
          }
        }],
        line: 1035
      },
      "150": {
        loc: {
          start: {
            line: 1036,
            column: 57
          },
          end: {
            line: 1041,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1037,
            column: 38
          },
          end: {
            line: 1040,
            column: 71
          }
        }, {
          start: {
            line: 1041,
            column: 38
          },
          end: {
            line: 1041,
            column: 39
          }
        }],
        line: 1036
      },
      "151": {
        loc: {
          start: {
            line: 1075,
            column: 39
          },
          end: {
            line: 1075,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1075,
            column: 62
          },
          end: {
            line: 1075,
            column: 66
          }
        }, {
          start: {
            line: 1075,
            column: 69
          },
          end: {
            line: 1075,
            column: 73
          }
        }],
        line: 1075
      },
      "152": {
        loc: {
          start: {
            line: 1080,
            column: 16
          },
          end: {
            line: 1103,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1080,
            column: 16
          },
          end: {
            line: 1103,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1080
      },
      "153": {
        loc: {
          start: {
            line: 1092,
            column: 48
          },
          end: {
            line: 1098,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1093,
            column: 30
          },
          end: {
            line: 1093,
            column: 38
          }
        }, {
          start: {
            line: 1094,
            column: 30
          },
          end: {
            line: 1098,
            column: 52
          }
        }],
        line: 1092
      },
      "154": {
        loc: {
          start: {
            line: 1094,
            column: 30
          },
          end: {
            line: 1098,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1095,
            column: 34
          },
          end: {
            line: 1095,
            column: 45
          }
        }, {
          start: {
            line: 1096,
            column: 34
          },
          end: {
            line: 1098,
            column: 52
          }
        }],
        line: 1094
      },
      "155": {
        loc: {
          start: {
            line: 1096,
            column: 34
          },
          end: {
            line: 1098,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1097,
            column: 38
          },
          end: {
            line: 1097,
            column: 47
          }
        }, {
          start: {
            line: 1098,
            column: 38
          },
          end: {
            line: 1098,
            column: 52
          }
        }],
        line: 1096
      },
      "156": {
        loc: {
          start: {
            line: 1104,
            column: 16
          },
          end: {
            line: 1132,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1104,
            column: 16
          },
          end: {
            line: 1132,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1104
      },
      "157": {
        loc: {
          start: {
            line: 1104,
            column: 20
          },
          end: {
            line: 1105,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1104,
            column: 20
          },
          end: {
            line: 1104,
            column: 56
          }
        }, {
          start: {
            line: 1105,
            column: 20
          },
          end: {
            line: 1105,
            column: 71
          }
        }],
        line: 1104
      },
      "158": {
        loc: {
          start: {
            line: 1108,
            column: 20
          },
          end: {
            line: 1131,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1108,
            column: 20
          },
          end: {
            line: 1131,
            column: 21
          }
        }, {
          start: {
            line: 1129,
            column: 25
          },
          end: {
            line: 1131,
            column: 21
          }
        }],
        line: 1108
      },
      "159": {
        loc: {
          start: {
            line: 1116,
            column: 47
          },
          end: {
            line: 1122,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1117,
            column: 34
          },
          end: {
            line: 1117,
            column: 48
          }
        }, {
          start: {
            line: 1118,
            column: 34
          },
          end: {
            line: 1122,
            column: 51
          }
        }],
        line: 1116
      },
      "160": {
        loc: {
          start: {
            line: 1116,
            column: 47
          },
          end: {
            line: 1116,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1116,
            column: 47
          },
          end: {
            line: 1116,
            column: 75
          }
        }, {
          start: {
            line: 1116,
            column: 79
          },
          end: {
            line: 1116,
            column: 100
          }
        }],
        line: 1116
      },
      "161": {
        loc: {
          start: {
            line: 1118,
            column: 34
          },
          end: {
            line: 1122,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1119,
            column: 38
          },
          end: {
            line: 1119,
            column: 47
          }
        }, {
          start: {
            line: 1120,
            column: 38
          },
          end: {
            line: 1122,
            column: 51
          }
        }],
        line: 1118
      },
      "162": {
        loc: {
          start: {
            line: 1118,
            column: 34
          },
          end: {
            line: 1118,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1118,
            column: 34
          },
          end: {
            line: 1118,
            column: 63
          }
        }, {
          start: {
            line: 1118,
            column: 67
          },
          end: {
            line: 1118,
            column: 88
          }
        }],
        line: 1118
      },
      "163": {
        loc: {
          start: {
            line: 1120,
            column: 38
          },
          end: {
            line: 1122,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1121,
            column: 42
          },
          end: {
            line: 1121,
            column: 51
          }
        }, {
          start: {
            line: 1122,
            column: 42
          },
          end: {
            line: 1122,
            column: 51
          }
        }],
        line: 1120
      },
      "164": {
        loc: {
          start: {
            line: 1120,
            column: 38
          },
          end: {
            line: 1120,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1120,
            column: 38
          },
          end: {
            line: 1120,
            column: 67
          }
        }, {
          start: {
            line: 1120,
            column: 71
          },
          end: {
            line: 1120,
            column: 92
          }
        }],
        line: 1120
      },
      "165": {
        loc: {
          start: {
            line: 1133,
            column: 16
          },
          end: {
            line: 1158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1133,
            column: 16
          },
          end: {
            line: 1158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1133
      },
      "166": {
        loc: {
          start: {
            line: 1136,
            column: 47
          },
          end: {
            line: 1136,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1136,
            column: 47
          },
          end: {
            line: 1136,
            column: 66
          }
        }, {
          start: {
            line: 1136,
            column: 70
          },
          end: {
            line: 1136,
            column: 72
          }
        }],
        line: 1136
      },
      "167": {
        loc: {
          start: {
            line: 1136,
            column: 89
          },
          end: {
            line: 1136,
            column: 171
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1136,
            column: 89
          },
          end: {
            line: 1136,
            column: 104
          }
        }, {
          start: {
            line: 1136,
            column: 108
          },
          end: {
            line: 1136,
            column: 171
          }
        }],
        line: 1136
      },
      "168": {
        loc: {
          start: {
            line: 1137,
            column: 49
          },
          end: {
            line: 1137,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1137,
            column: 49
          },
          end: {
            line: 1137,
            column: 68
          }
        }, {
          start: {
            line: 1137,
            column: 72
          },
          end: {
            line: 1137,
            column: 74
          }
        }],
        line: 1137
      },
      "169": {
        loc: {
          start: {
            line: 1137,
            column: 91
          },
          end: {
            line: 1139,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1137,
            column: 91
          },
          end: {
            line: 1137,
            column: 134
          }
        }, {
          start: {
            line: 1138,
            column: 28
          },
          end: {
            line: 1138,
            column: 69
          }
        }, {
          start: {
            line: 1139,
            column: 28
          },
          end: {
            line: 1139,
            column: 69
          }
        }],
        line: 1137
      },
      "170": {
        loc: {
          start: {
            line: 1142,
            column: 29
          },
          end: {
            line: 1142,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1142,
            column: 29
          },
          end: {
            line: 1142,
            column: 66
          }
        }, {
          start: {
            line: 1142,
            column: 70
          },
          end: {
            line: 1142,
            column: 72
          }
        }],
        line: 1142
      },
      "171": {
        loc: {
          start: {
            line: 1143,
            column: 49
          },
          end: {
            line: 1149,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1144,
            column: 30
          },
          end: {
            line: 1144,
            column: 39
          }
        }, {
          start: {
            line: 1145,
            column: 30
          },
          end: {
            line: 1149,
            column: 51
          }
        }],
        line: 1143
      },
      "172": {
        loc: {
          start: {
            line: 1145,
            column: 30
          },
          end: {
            line: 1149,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1146,
            column: 34
          },
          end: {
            line: 1146,
            column: 45
          }
        }, {
          start: {
            line: 1147,
            column: 34
          },
          end: {
            line: 1149,
            column: 51
          }
        }],
        line: 1145
      },
      "173": {
        loc: {
          start: {
            line: 1147,
            column: 34
          },
          end: {
            line: 1149,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1148,
            column: 38
          },
          end: {
            line: 1148,
            column: 46
          }
        }, {
          start: {
            line: 1149,
            column: 38
          },
          end: {
            line: 1149,
            column: 51
          }
        }],
        line: 1147
      },
      "174": {
        loc: {
          start: {
            line: 1153,
            column: 24
          },
          end: {
            line: 1155,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1153,
            column: 24
          },
          end: {
            line: 1155,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1153
      },
      "175": {
        loc: {
          start: {
            line: 1159,
            column: 16
          },
          end: {
            line: 1176,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1159,
            column: 16
          },
          end: {
            line: 1176,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1159
      },
      "176": {
        loc: {
          start: {
            line: 1162,
            column: 49
          },
          end: {
            line: 1162,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1162,
            column: 49
          },
          end: {
            line: 1162,
            column: 68
          }
        }, {
          start: {
            line: 1162,
            column: 72
          },
          end: {
            line: 1162,
            column: 74
          }
        }],
        line: 1162
      },
      "177": {
        loc: {
          start: {
            line: 1162,
            column: 91
          },
          end: {
            line: 1162,
            column: 133
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1162,
            column: 91
          },
          end: {
            line: 1162,
            column: 101
          }
        }, {
          start: {
            line: 1162,
            column: 105
          },
          end: {
            line: 1162,
            column: 133
          }
        }],
        line: 1162
      },
      "178": {
        loc: {
          start: {
            line: 1163,
            column: 51
          },
          end: {
            line: 1163,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1163,
            column: 80
          },
          end: {
            line: 1163,
            column: 128
          }
        }, {
          start: {
            line: 1163,
            column: 131
          },
          end: {
            line: 1163,
            column: 132
          }
        }],
        line: 1163
      },
      "179": {
        loc: {
          start: {
            line: 1164,
            column: 53
          },
          end: {
            line: 1170,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1165,
            column: 30
          },
          end: {
            line: 1165,
            column: 39
          }
        }, {
          start: {
            line: 1166,
            column: 30
          },
          end: {
            line: 1170,
            column: 51
          }
        }],
        line: 1164
      },
      "180": {
        loc: {
          start: {
            line: 1166,
            column: 30
          },
          end: {
            line: 1170,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1167,
            column: 34
          },
          end: {
            line: 1167,
            column: 45
          }
        }, {
          start: {
            line: 1168,
            column: 34
          },
          end: {
            line: 1170,
            column: 51
          }
        }],
        line: 1166
      },
      "181": {
        loc: {
          start: {
            line: 1168,
            column: 34
          },
          end: {
            line: 1170,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1169,
            column: 38
          },
          end: {
            line: 1169,
            column: 46
          }
        }, {
          start: {
            line: 1170,
            column: 38
          },
          end: {
            line: 1170,
            column: 51
          }
        }],
        line: 1168
      },
      "182": {
        loc: {
          start: {
            line: 1177,
            column: 16
          },
          end: {
            line: 1207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1177,
            column: 16
          },
          end: {
            line: 1207,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1177
      },
      "183": {
        loc: {
          start: {
            line: 1180,
            column: 48
          },
          end: {
            line: 1180,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1180,
            column: 48
          },
          end: {
            line: 1180,
            column: 67
          }
        }, {
          start: {
            line: 1180,
            column: 71
          },
          end: {
            line: 1180,
            column: 73
          }
        }],
        line: 1180
      },
      "184": {
        loc: {
          start: {
            line: 1182,
            column: 36
          },
          end: {
            line: 1188,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1182,
            column: 36
          },
          end: {
            line: 1182,
            column: 57
          }
        }, {
          start: {
            line: 1183,
            column: 32
          },
          end: {
            line: 1183,
            column: 56
          }
        }, {
          start: {
            line: 1184,
            column: 32
          },
          end: {
            line: 1184,
            column: 51
          }
        }, {
          start: {
            line: 1185,
            column: 32
          },
          end: {
            line: 1185,
            column: 55
          }
        }, {
          start: {
            line: 1186,
            column: 32
          },
          end: {
            line: 1186,
            column: 58
          }
        }, {
          start: {
            line: 1187,
            column: 32
          },
          end: {
            line: 1187,
            column: 54
          }
        }, {
          start: {
            line: 1188,
            column: 32
          },
          end: {
            line: 1188,
            column: 57
          }
        }],
        line: 1182
      },
      "185": {
        loc: {
          start: {
            line: 1191,
            column: 42
          },
          end: {
            line: 1197,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1192,
            column: 30
          },
          end: {
            line: 1192,
            column: 38
          }
        }, {
          start: {
            line: 1193,
            column: 30
          },
          end: {
            line: 1197,
            column: 52
          }
        }],
        line: 1191
      },
      "186": {
        loc: {
          start: {
            line: 1193,
            column: 30
          },
          end: {
            line: 1197,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1194,
            column: 34
          },
          end: {
            line: 1194,
            column: 45
          }
        }, {
          start: {
            line: 1195,
            column: 34
          },
          end: {
            line: 1197,
            column: 52
          }
        }],
        line: 1193
      },
      "187": {
        loc: {
          start: {
            line: 1195,
            column: 34
          },
          end: {
            line: 1197,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1196,
            column: 38
          },
          end: {
            line: 1196,
            column: 47
          }
        }, {
          start: {
            line: 1197,
            column: 38
          },
          end: {
            line: 1197,
            column: 52
          }
        }],
        line: 1195
      },
      "188": {
        loc: {
          start: {
            line: 1201,
            column: 24
          },
          end: {
            line: 1204,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1201,
            column: 24
          },
          end: {
            line: 1204,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1201
      },
      "189": {
        loc: {
          start: {
            line: 1210,
            column: 78
          },
          end: {
            line: 1210,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1210,
            column: 133
          },
          end: {
            line: 1210,
            column: 140
          }
        }, {
          start: {
            line: 1210,
            column: 143
          },
          end: {
            line: 1210,
            column: 147
          }
        }],
        line: 1210
      },
      "190": {
        loc: {
          start: {
            line: 1211,
            column: 83
          },
          end: {
            line: 1211,
            column: 172
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1211,
            column: 158
          },
          end: {
            line: 1211,
            column: 165
          }
        }, {
          start: {
            line: 1211,
            column: 168
          },
          end: {
            line: 1211,
            column: 172
          }
        }],
        line: 1211
      },
      "191": {
        loc: {
          start: {
            line: 1214,
            column: 16
          },
          end: {
            line: 1222,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1214,
            column: 16
          },
          end: {
            line: 1222,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1214
      },
      "192": {
        loc: {
          start: {
            line: 1217,
            column: 51
          },
          end: {
            line: 1220,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1219,
            column: 26
          },
          end: {
            line: 1219,
            column: 33
          }
        }, {
          start: {
            line: 1220,
            column: 26
          },
          end: {
            line: 1220,
            column: 30
          }
        }],
        line: 1217
      },
      "193": {
        loc: {
          start: {
            line: 1218,
            column: 25
          },
          end: {
            line: 1218,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1218,
            column: 25
          },
          end: {
            line: 1218,
            column: 62
          }
        }, {
          start: {
            line: 1218,
            column: 66
          },
          end: {
            line: 1218,
            column: 67
          }
        }],
        line: 1218
      },
      "194": {
        loc: {
          start: {
            line: 1227,
            column: 16
          },
          end: {
            line: 1229,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1227,
            column: 16
          },
          end: {
            line: 1229,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1227
      },
      "195": {
        loc: {
          start: {
            line: 1231,
            column: 16
          },
          end: {
            line: 1233,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1231,
            column: 16
          },
          end: {
            line: 1233,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1231
      },
      "196": {
        loc: {
          start: {
            line: 1234,
            column: 77
          },
          end: {
            line: 1236,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1234,
            column: 77
          },
          end: {
            line: 1234,
            column: 101
          }
        }, {
          start: {
            line: 1235,
            column: 21
          },
          end: {
            line: 1235,
            column: 62
          }
        }, {
          start: {
            line: 1236,
            column: 24
          },
          end: {
            line: 1236,
            column: 73
          }
        }],
        line: 1234
      },
      "197": {
        loc: {
          start: {
            line: 1237,
            column: 16
          },
          end: {
            line: 1239,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1237,
            column: 16
          },
          end: {
            line: 1239,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1237
      },
      "198": {
        loc: {
          start: {
            line: 1240,
            column: 16
          },
          end: {
            line: 1242,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1240,
            column: 16
          },
          end: {
            line: 1242,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1240
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0,
      "416": 0,
      "417": 0,
      "418": 0,
      "419": 0,
      "420": 0,
      "421": 0,
      "422": 0,
      "423": 0,
      "424": 0,
      "425": 0,
      "426": 0,
      "427": 0,
      "428": 0,
      "429": 0,
      "430": 0,
      "431": 0,
      "432": 0,
      "433": 0,
      "434": 0,
      "435": 0,
      "436": 0,
      "437": 0,
      "438": 0,
      "439": 0,
      "440": 0,
      "441": 0,
      "442": 0,
      "443": 0,
      "444": 0,
      "445": 0,
      "446": 0,
      "447": 0,
      "448": 0,
      "449": 0,
      "450": 0,
      "451": 0,
      "452": 0,
      "453": 0,
      "454": 0,
      "455": 0,
      "456": 0,
      "457": 0,
      "458": 0,
      "459": 0,
      "460": 0,
      "461": 0,
      "462": 0,
      "463": 0,
      "464": 0,
      "465": 0,
      "466": 0,
      "467": 0,
      "468": 0,
      "469": 0,
      "470": 0,
      "471": 0,
      "472": 0,
      "473": 0,
      "474": 0,
      "475": 0,
      "476": 0,
      "477": 0,
      "478": 0,
      "479": 0,
      "480": 0,
      "481": 0,
      "482": 0,
      "483": 0,
      "484": 0,
      "485": 0,
      "486": 0,
      "487": 0,
      "488": 0,
      "489": 0,
      "490": 0,
      "491": 0,
      "492": 0,
      "493": 0,
      "494": 0,
      "495": 0,
      "496": 0,
      "497": 0,
      "498": 0,
      "499": 0,
      "500": 0,
      "501": 0,
      "502": 0,
      "503": 0,
      "504": 0,
      "505": 0,
      "506": 0,
      "507": 0,
      "508": 0,
      "509": 0,
      "510": 0,
      "511": 0,
      "512": 0,
      "513": 0,
      "514": 0,
      "515": 0,
      "516": 0,
      "517": 0,
      "518": 0,
      "519": 0,
      "520": 0,
      "521": 0,
      "522": 0,
      "523": 0,
      "524": 0,
      "525": 0,
      "526": 0,
      "527": 0,
      "528": 0,
      "529": 0,
      "530": 0,
      "531": 0,
      "532": 0,
      "533": 0,
      "534": 0,
      "535": 0,
      "536": 0,
      "537": 0,
      "538": 0,
      "539": 0,
      "540": 0,
      "541": 0,
      "542": 0,
      "543": 0,
      "544": 0,
      "545": 0,
      "546": 0,
      "547": 0,
      "548": 0,
      "549": 0,
      "550": 0,
      "551": 0,
      "552": 0,
      "553": 0,
      "554": 0,
      "555": 0,
      "556": 0,
      "557": 0,
      "558": 0,
      "559": 0,
      "560": 0,
      "561": 0,
      "562": 0,
      "563": 0,
      "564": 0,
      "565": 0,
      "566": 0,
      "567": 0,
      "568": 0,
      "569": 0,
      "570": 0,
      "571": 0,
      "572": 0,
      "573": 0,
      "574": 0,
      "575": 0,
      "576": 0,
      "577": 0,
      "578": 0,
      "579": 0,
      "580": 0,
      "581": 0,
      "582": 0,
      "583": 0,
      "584": 0,
      "585": 0,
      "586": 0,
      "587": 0,
      "588": 0,
      "589": 0,
      "590": 0,
      "591": 0,
      "592": 0,
      "593": 0,
      "594": 0,
      "595": 0,
      "596": 0,
      "597": 0,
      "598": 0,
      "599": 0,
      "600": 0,
      "601": 0,
      "602": 0,
      "603": 0,
      "604": 0,
      "605": 0,
      "606": 0,
      "607": 0,
      "608": 0,
      "609": 0,
      "610": 0,
      "611": 0,
      "612": 0,
      "613": 0,
      "614": 0,
      "615": 0,
      "616": 0,
      "617": 0,
      "618": 0,
      "619": 0,
      "620": 0,
      "621": 0,
      "622": 0,
      "623": 0,
      "624": 0,
      "625": 0,
      "626": 0,
      "627": 0,
      "628": 0,
      "629": 0,
      "630": 0,
      "631": 0,
      "632": 0,
      "633": 0,
      "634": 0,
      "635": 0,
      "636": 0,
      "637": 0,
      "638": 0,
      "639": 0,
      "640": 0,
      "641": 0,
      "642": 0,
      "643": 0,
      "644": 0,
      "645": 0,
      "646": 0,
      "647": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0, 0, 0],
      "52": [0, 0],
      "53": [0, 0, 0, 0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0, 0, 0, 0],
      "79": [0, 0],
      "80": [0, 0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0],
      "92": [0, 0],
      "93": [0, 0],
      "94": [0, 0],
      "95": [0, 0],
      "96": [0, 0],
      "97": [0, 0],
      "98": [0, 0],
      "99": [0, 0],
      "100": [0, 0],
      "101": [0, 0],
      "102": [0, 0],
      "103": [0, 0],
      "104": [0, 0],
      "105": [0, 0],
      "106": [0, 0],
      "107": [0, 0],
      "108": [0, 0],
      "109": [0, 0],
      "110": [0, 0, 0, 0],
      "111": [0, 0],
      "112": [0, 0],
      "113": [0, 0],
      "114": [0, 0],
      "115": [0, 0, 0],
      "116": [0, 0],
      "117": [0, 0],
      "118": [0, 0, 0, 0, 0],
      "119": [0, 0],
      "120": [0, 0],
      "121": [0, 0],
      "122": [0, 0],
      "123": [0, 0],
      "124": [0, 0, 0, 0],
      "125": [0, 0],
      "126": [0, 0],
      "127": [0, 0],
      "128": [0, 0],
      "129": [0, 0],
      "130": [0, 0],
      "131": [0, 0],
      "132": [0, 0],
      "133": [0, 0],
      "134": [0, 0],
      "135": [0, 0],
      "136": [0, 0],
      "137": [0, 0],
      "138": [0, 0],
      "139": [0, 0],
      "140": [0, 0, 0],
      "141": [0, 0],
      "142": [0, 0],
      "143": [0, 0],
      "144": [0, 0],
      "145": [0, 0],
      "146": [0, 0],
      "147": [0, 0],
      "148": [0, 0],
      "149": [0, 0],
      "150": [0, 0],
      "151": [0, 0],
      "152": [0, 0],
      "153": [0, 0],
      "154": [0, 0],
      "155": [0, 0],
      "156": [0, 0],
      "157": [0, 0],
      "158": [0, 0],
      "159": [0, 0],
      "160": [0, 0],
      "161": [0, 0],
      "162": [0, 0],
      "163": [0, 0],
      "164": [0, 0],
      "165": [0, 0],
      "166": [0, 0],
      "167": [0, 0],
      "168": [0, 0],
      "169": [0, 0, 0],
      "170": [0, 0],
      "171": [0, 0],
      "172": [0, 0],
      "173": [0, 0],
      "174": [0, 0],
      "175": [0, 0],
      "176": [0, 0],
      "177": [0, 0],
      "178": [0, 0],
      "179": [0, 0],
      "180": [0, 0],
      "181": [0, 0],
      "182": [0, 0],
      "183": [0, 0],
      "184": [0, 0, 0, 0, 0, 0, 0],
      "185": [0, 0],
      "186": [0, 0],
      "187": [0, 0],
      "188": [0, 0],
      "189": [0, 0],
      "190": [0, 0],
      "191": [0, 0],
      "192": [0, 0],
      "193": [0, 0],
      "194": [0, 0],
      "195": [0, 0],
      "196": [0, 0, 0],
      "197": [0, 0],
      "198": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\n// Zod schemas for workflow analytics and intelligence\nconst WorkflowAnalysisSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  analysisType: z\n    .enum(['complexity', 'performance', 'optimization', 'comprehensive'])\n    .optional()\n    .default('comprehensive'),\n  includeRecommendations: z.boolean().optional().default(true),\n  historicalData: z.boolean().optional().default(true),\n});\n\nconst ComplexityMetricsSchema = z.object({\n  workflowId: z.string().optional(),\n  threshold: z.enum(['low', 'medium', 'high', 'all']).optional().default('all'),\n  sortBy: z.enum(['complexity', 'nodes', 'connections', 'depth']).optional().default('complexity'),\n});\n\nconst BottleneckAnalysisSchema = z.object({\n  workflowId: z.string().optional(),\n  timeframe: z.enum(['hour', 'day', 'week', 'month']).optional().default('week'),\n  threshold: z.number().min(0).max(100).optional().default(80),\n});\n\nconst OptimizationSuggestionsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  focusAreas: z\n    .array(z.enum(['performance', 'reliability', 'maintainability', 'cost', 'security']))\n    .optional()\n    .default(['performance', 'reliability']),\n  priority: z.enum(['critical', 'high', 'medium', 'low', 'all']).optional().default('all'),\n});\n\nconst WorkflowComparisonSchema = z.object({\n  workflowIds: z.array(z.string()).min(2, 'At least 2 workflows required for comparison'),\n  metrics: z\n    .array(z.enum(['complexity', 'performance', 'reliability', 'cost', 'maintainability']))\n    .optional()\n    .default(['complexity', 'performance', 'reliability']),\n});\n\n// Tool registration function for workflow analytics and intelligence tools\nexport function createAnalyticsTools(getClient: () => N8nClient | null, server: any) {\n  // Analyze workflow complexity and structure\n  server.addTool({\n    name: 'analyze-workflow-complexity',\n    description:\n      'Analyze workflow complexity, structure, and provide detailed metrics on maintainability and performance characteristics',\n    parameters: WorkflowAnalysisSchema,\n    annotations: {\n      title: 'Analyze Workflow Complexity',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        if (!workflow.nodes || workflow.nodes.length === 0) {\n          return `Workflow \"${workflow.name}\" has no nodes to analyze.`;\n        }\n\n        // Calculate complexity metrics\n        const metrics = {\n          nodeCount: workflow.nodes.length,\n          uniqueNodeTypes: [...new Set(workflow.nodes.map(node => node.type))].length,\n          connections: Object.keys(workflow.connections || {}).length,\n          maxDepth: 0,\n          cyclomaticComplexity: 0,\n          maintainabilityIndex: 0,\n          cognitiveComplexity: 0,\n        };\n\n        // Calculate workflow depth (longest path)\n        const calculateDepth = (\n          nodeId: string,\n          visited: Set<string>,\n          currentDepth: number\n        ): number => {\n          if (visited.has(nodeId)) return currentDepth; // Cycle detection\n          visited.add(nodeId);\n\n          const _connections = workflow.connections?.[nodeId];\n          if (!_connections || Object.keys(_connections).length === 0) {\n            return currentDepth;\n          }\n\n          let maxChildDepth = currentDepth;\n          Object.values(_connections).forEach((outputConnections: any) => {\n            if (Array.isArray(outputConnections)) {\n              outputConnections.forEach((conn: any) => {\n                if (conn.node) {\n                  const childDepth = calculateDepth(conn.node, new Set(visited), currentDepth + 1);\n                  maxChildDepth = Math.max(maxChildDepth, childDepth);\n                }\n              });\n            }\n          });\n\n          return maxChildDepth;\n        };\n\n        // Find starting nodes (nodes with no inputs)\n        const allTargetNodes = new Set<string>();\n        Object.values(workflow.connections || {}).forEach((nodeConnections: any) => {\n          Object.values(nodeConnections).forEach((outputs: any) => {\n            if (Array.isArray(outputs)) {\n              outputs.forEach((conn: any) => {\n                if (conn.node) allTargetNodes.add(conn.node);\n              });\n            }\n          });\n        });\n\n        const startingNodes = workflow.nodes.filter(node => !allTargetNodes.has(node.id));\n\n        // Calculate maximum depth\n        startingNodes.forEach(node => {\n          const depth = calculateDepth(node.id, new Set(), 1);\n          metrics.maxDepth = Math.max(metrics.maxDepth, depth);\n        });\n\n        // Calculate cyclomatic complexity (simplified)\n        metrics.cyclomaticComplexity = metrics.connections - metrics.nodeCount + 2;\n        if (metrics.cyclomaticComplexity < 1) metrics.cyclomaticComplexity = 1;\n\n        // Calculate cognitive complexity (based on node types and nesting)\n        metrics.cognitiveComplexity = workflow.nodes.reduce((complexity, node) => {\n          let nodeComplexity = 1; // Base complexity\n\n          // Add complexity for different node types\n          const nodeType = node.type.toLowerCase();\n          if (\n            nodeType.includes('if') ||\n            nodeType.includes('switch') ||\n            nodeType.includes('merge')\n          ) {\n            nodeComplexity += 2; // Conditional logic\n          } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n            nodeComplexity += 3; // Iteration/branching\n          } else if (nodeType.includes('code') || nodeType.includes('function')) {\n            nodeComplexity += 1; // Custom logic\n          }\n\n          return complexity + nodeComplexity;\n        }, 0);\n\n        // Calculate maintainability index (0-100 scale)\n        const averageNodeComplexity = metrics.cognitiveComplexity / metrics.nodeCount;\n        const typeComplexity = metrics.uniqueNodeTypes / metrics.nodeCount;\n        metrics.maintainabilityIndex = Math.max(\n          0,\n          Math.min(\n            100,\n            100 - averageNodeComplexity * 10 - typeComplexity * 20 - metrics.maxDepth * 5\n          )\n        );\n\n        // Complexity classification\n        const getComplexityLevel = (score: number): string => {\n          if (score <= 5) return '\uD83D\uDFE2 Low';\n          if (score <= 15) return '\uD83D\uDFE1 Medium';\n          if (score <= 25) return '\uD83D\uDFE0 High';\n          return '\uD83D\uDD34 Very High';\n        };\n\n        let analysis = `# Workflow Complexity Analysis: \"${workflow.name}\"\\n\\n`;\n\n        // Basic metrics\n        analysis += `## \uD83D\uDCCA Structure Metrics\\n`;\n        analysis += `- **Total Nodes**: ${metrics.nodeCount}\\n`;\n        analysis += `- **Unique Node Types**: ${metrics.uniqueNodeTypes}\\n`;\n        analysis += `- **Connections**: ${metrics.connections}\\n`;\n        analysis += `- **Maximum Depth**: ${metrics.maxDepth} levels\\n`;\n        analysis += `- **Starting Nodes**: ${startingNodes.length}\\n\\n`;\n\n        // Complexity metrics\n        analysis += `## \uD83E\uDDEE Complexity Metrics\\n`;\n        analysis += `- **Cyclomatic Complexity**: ${metrics.cyclomaticComplexity} ${getComplexityLevel(metrics.cyclomaticComplexity)}\\n`;\n        analysis += `- **Cognitive Complexity**: ${metrics.cognitiveComplexity} ${getComplexityLevel(metrics.cognitiveComplexity)}\\n`;\n        analysis += `- **Maintainability Index**: ${metrics.maintainabilityIndex.toFixed(1)}/100\\n\\n`;\n\n        // Node type breakdown\n        const nodeTypeDistribution = workflow.nodes.reduce(\n          (dist, node) => {\n            const type = node.type;\n            dist[type] = (dist[type] || 0) + 1;\n            return dist;\n          },\n          {} as Record<string, number>\n        );\n\n        analysis += `## \uD83D\uDD27 Node Type Distribution\\n`;\n        Object.entries(nodeTypeDistribution)\n          .sort((a, b) => b[1] - a[1])\n          .forEach(([type, count]) => {\n            const percentage = ((count / metrics.nodeCount) * 100).toFixed(1);\n            analysis += `- **${type}**: ${count} nodes (${percentage}%)\\n`;\n          });\n        analysis += '\\n';\n\n        // Performance analysis\n        if (args.historicalData) {\n          try {\n            const executions = await client.getExecutions({ limit: 50 });\n            const workflowExecutions = executions.data.filter(\n              exec => exec.workflowId === args.workflowId\n            );\n\n            if (workflowExecutions.length > 0) {\n              const avgExecutionTime =\n                workflowExecutions\n                  .filter(exec => exec.stoppedAt)\n                  .reduce((sum, exec) => {\n                    const duration =\n                      new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime();\n                    return sum + duration;\n                  }, 0) / workflowExecutions.length;\n\n              const successRate =\n                (workflowExecutions.filter(exec => exec.status === 'success').length /\n                  workflowExecutions.length) *\n                100;\n\n              analysis += `## \u26A1 Performance Metrics\\n`;\n              analysis += `- **Average Execution Time**: ${(avgExecutionTime / 1000).toFixed(2)}s\\n`;\n              analysis += `- **Success Rate**: ${successRate.toFixed(1)}%\\n`;\n              analysis += `- **Recent Executions**: ${workflowExecutions.length}\\n\\n`;\n            }\n          } catch (_error) {\n            // Performance data not available\n          }\n        }\n\n        // Analysis and recommendations\n        if (args.includeRecommendations) {\n          analysis += `## \uD83D\uDCA1 Analysis & Recommendations\\n\\n`;\n\n          const recommendations = [];\n\n          if (metrics.nodeCount > 50) {\n            recommendations.push(\n              '**Workflow Size**: Consider breaking this workflow into smaller, more manageable sub-workflows'\n            );\n          }\n\n          if (metrics.maxDepth > 10) {\n            recommendations.push(\n              '**Workflow Depth**: High nesting level detected - consider flattening the workflow structure'\n            );\n          }\n\n          if (metrics.cyclomaticComplexity > 15) {\n            recommendations.push(\n              '**Cyclomatic Complexity**: High complexity - consider simplifying conditional logic and branching'\n            );\n          }\n\n          if (metrics.cognitiveComplexity > 25) {\n            recommendations.push(\n              '**Cognitive Complexity**: Workflow may be difficult to understand - consider adding documentation and simplifying logic'\n            );\n          }\n\n          if (metrics.maintainabilityIndex < 60) {\n            recommendations.push(\n              '**Maintainability**: Low maintainability score - consider refactoring for better code organization'\n            );\n          }\n\n          if (metrics.uniqueNodeTypes / metrics.nodeCount > 0.8) {\n            recommendations.push(\n              '**Node Diversity**: High variety of node types - ensure team familiarity with all node types used'\n            );\n          }\n\n          // Performance-based recommendations\n          const heavyNodeTypes = Object.entries(nodeTypeDistribution).filter(([type]) =>\n            ['code', 'function', 'python', 'http-request', 'webhook'].some(heavy =>\n              type.toLowerCase().includes(heavy)\n            )\n          );\n\n          if (heavyNodeTypes.length > 0) {\n            recommendations.push(\n              '**Performance**: Resource-intensive nodes detected - monitor execution times and consider optimization'\n            );\n          }\n\n          if (recommendations.length === 0) {\n            recommendations.push(\n              '**Overall**: Workflow structure appears well-organized with reasonable complexity levels'\n            );\n          }\n\n          recommendations.forEach((rec, index) => {\n            analysis += `${index + 1}. ${rec}\\n`;\n          });\n          analysis += '\\n';\n\n          // Complexity score interpretation\n          analysis += `## \uD83D\uDCC8 Complexity Score Interpretation\\n`;\n          analysis += `- **Low (1-5)**: Simple, easy to understand and maintain\\n`;\n          analysis += `- **Medium (6-15)**: Moderate complexity, requires some expertise\\n`;\n          analysis += `- **High (16-25)**: Complex, requires careful management and documentation\\n`;\n          analysis += `- **Very High (26+)**: Very complex, consider refactoring or breaking down\\n\\n`;\n\n          analysis += `**Overall Assessment**: This workflow has a **${getComplexityLevel(metrics.cognitiveComplexity)}** complexity level.`;\n        }\n\n        return analysis;\n      } catch (error: any) {\n        throw new UserError(`Failed to analyze workflow complexity: ${error.message}`);\n      }\n    },\n  });\n\n  // Get complexity metrics for multiple workflows\n  server.addTool({\n    name: 'get-complexity-metrics',\n    description:\n      'Get complexity metrics for workflows, sorted by complexity level to identify the most complex workflows requiring attention',\n    parameters: ComplexityMetricsSchema,\n    annotations: {\n      title: 'Get Complexity Metrics',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ComplexityMetricsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        let workflows: N8nWorkflow[] = [];\n\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 50 });\n          workflows = response.data;\n        }\n\n        const complexityData = workflows.map(workflow => {\n          const nodeCount = workflow.nodes?.length || 0;\n          const uniqueNodeTypes = workflow.nodes\n            ? [...new Set(workflow.nodes.map(node => node.type))].length\n            : 0;\n          const _connections = Object.keys(workflow.connections || {}).length;\n\n          // Calculate simplified complexity score\n          const typeComplexity = nodeCount > 0 ? uniqueNodeTypes / nodeCount : 0;\n          const _structuralComplexity = nodeCount + _connections;\n          const cognitiveComplexity = (workflow.nodes || []).reduce((complexity, node) => {\n            const nodeType = node.type.toLowerCase();\n            let nodeComplexity = 1;\n\n            if (\n              nodeType.includes('if') ||\n              nodeType.includes('switch') ||\n              nodeType.includes('merge')\n            ) {\n              nodeComplexity += 2;\n            } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n              nodeComplexity += 3;\n            } else if (nodeType.includes('code') || nodeType.includes('function')) {\n              nodeComplexity += 1;\n            }\n\n            return complexity + nodeComplexity;\n          }, 0);\n\n          const overallComplexity = cognitiveComplexity + typeComplexity * 10;\n\n          return {\n            id: workflow.id,\n            name: workflow.name,\n            active: workflow.active,\n            nodeCount,\n            uniqueNodeTypes,\n            _connections,\n            cognitiveComplexity,\n            overallComplexity,\n            complexityLevel:\n              overallComplexity <= 5\n                ? 'low'\n                : overallComplexity <= 15\n                  ? 'medium'\n                  : overallComplexity <= 25\n                    ? 'high'\n                    : 'very-high',\n          };\n        });\n\n        // Filter by threshold\n        const filteredData =\n          args.threshold === 'all'\n            ? complexityData\n            : complexityData.filter(item => {\n                switch (args.threshold) {\n                  case 'low':\n                    return item.complexityLevel === 'low';\n                  case 'medium':\n                    return item.complexityLevel === 'medium';\n                  case 'high':\n                    return item.complexityLevel === 'high' || item.complexityLevel === 'very-high';\n                  default:\n                    return true;\n                }\n              });\n\n        // Sort by selected criteria\n        filteredData.sort((a, b) => {\n          switch (args.sortBy) {\n            case 'complexity':\n              return b.overallComplexity - a.overallComplexity;\n            case 'nodes':\n              return b.nodeCount - a.nodeCount;\n            case 'connections':\n              return b._connections - a._connections;\n            case 'depth':\n              return b.cognitiveComplexity - a.cognitiveComplexity;\n            default:\n              return b.overallComplexity - a.overallComplexity;\n          }\n        });\n\n        if (filteredData.length === 0) {\n          return `No workflows found matching the complexity threshold: ${args.threshold}`;\n        }\n\n        let report = `# Workflow Complexity Metrics Report\\n\\n`;\n        report += `**Analysis Date**: ${new Date().toLocaleString()}\\n`;\n        report += `**Workflows Analyzed**: ${filteredData.length}\\n`;\n        report += `**Sorted By**: ${args.sortBy}\\n`;\n        report += `**Complexity Filter**: ${args.threshold}\\n\\n`;\n\n        // Summary statistics\n        const avgComplexity =\n          filteredData.reduce((sum, item) => sum + item.overallComplexity, 0) / filteredData.length;\n        const avgNodes =\n          filteredData.reduce((sum, item) => sum + item.nodeCount, 0) / filteredData.length;\n\n        report += `## \uD83D\uDCCA Summary Statistics\\n`;\n        report += `- **Average Complexity**: ${avgComplexity.toFixed(1)}\\n`;\n        report += `- **Average Node Count**: ${avgNodes.toFixed(1)}\\n`;\n        report += `- **Most Complex**: ${filteredData[0]?.name} (${filteredData[0]?.overallComplexity.toFixed(1)})\\n`;\n        report += `- **Least Complex**: ${filteredData[filteredData.length - 1]?.name} (${filteredData[filteredData.length - 1]?.overallComplexity.toFixed(1)})\\n\\n`;\n\n        // Complexity distribution\n        const distribution = filteredData.reduce(\n          (dist, item) => {\n            dist[item.complexityLevel] = (dist[item.complexityLevel] || 0) + 1;\n            return dist;\n          },\n          {} as Record<string, number>\n        );\n\n        report += `## \uD83D\uDCC8 Complexity Distribution\\n`;\n        Object.entries(distribution).forEach(([level, count]) => {\n          const percentage = ((count / filteredData.length) * 100).toFixed(1);\n          const indicator =\n            level === 'low' ? '\uD83D\uDFE2' : level === 'medium' ? '\uD83D\uDFE1' : level === 'high' ? '\uD83D\uDFE0' : '\uD83D\uDD34';\n          report += `- **${indicator} ${level.charAt(0).toUpperCase() + level.slice(1)}**: ${count} workflows (${percentage}%)\\n`;\n        });\n        report += '\\n';\n\n        // Detailed workflow metrics table\n        report += `## \uD83D\uDCCB Detailed Metrics\\n\\n`;\n        report += `| Workflow | Status | Nodes | Types | Connections | Complexity | Level |\\n`;\n        report += `|----------|--------|-------|-------|-------------|------------|-------|\\n`;\n\n        filteredData.slice(0, 20).forEach(item => {\n          // Limit to top 20\n          const statusIcon = item.active ? '\uD83D\uDFE2' : '\uD83D\uDD34';\n          const complexityIcon =\n            item.complexityLevel === 'low'\n              ? '\uD83D\uDFE2'\n              : item.complexityLevel === 'medium'\n                ? '\uD83D\uDFE1'\n                : item.complexityLevel === 'high'\n                  ? '\uD83D\uDFE0'\n                  : '\uD83D\uDD34';\n\n          report += `| ${item.name} | ${statusIcon} | ${item.nodeCount} | ${item.uniqueNodeTypes} | ${item._connections} | ${item.overallComplexity.toFixed(1)} | ${complexityIcon} ${item.complexityLevel} |\\n`;\n        });\n\n        if (filteredData.length > 20) {\n          report += `\\n*Showing top 20 workflows. Total: ${filteredData.length} workflows.*\\n`;\n        }\n\n        report += '\\n## \uD83D\uDCA1 Quick Actions\\n';\n        report += `- Use \\`analyze-workflow-complexity\\` for detailed analysis of specific workflows\\n`;\n        report += `- Use \\`get-optimization-suggestions\\` for improvement recommendations\\n`;\n        report += `- Use \\`identify-bottlenecks\\` to find performance issues\\n`;\n\n        return report;\n      } catch (error: any) {\n        throw new UserError(`Failed to get complexity metrics: ${error.message}`);\n      }\n    },\n  });\n\n  // Identify performance bottlenecks\n  server.addTool({\n    name: 'identify-bottlenecks',\n    description:\n      'Identify performance bottlenecks in workflows by analyzing execution patterns, slow nodes, and resource usage',\n    parameters: BottleneckAnalysisSchema,\n    annotations: {\n      title: 'Identify Bottlenecks',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof BottleneckAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Calculate timeframe\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n          month: 30 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(now.getTime() - timeframeDuration[args.timeframe]);\n\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 30 });\n          workflows = response.data.filter(w => w.active); // Focus on active workflows\n        }\n\n        let report = `# Performance Bottleneck Analysis\\n\\n`;\n        report += `**Analysis Period**: ${startTime.toLocaleString()} to ${now.toLocaleString()}\\n`;\n        report += `**Timeframe**: ${args.timeframe}\\n`;\n        report += `**Performance Threshold**: ${args.threshold}th percentile\\n`;\n        report += `**Workflows Analyzed**: ${workflows.length}\\n\\n`;\n\n        const bottleneckData = [];\n\n        for (const workflow of workflows) {\n          try {\n            // Get execution data\n            const executions = await client.getExecutions({ limit: 100 });\n            const workflowExecutions = executions.data.filter(\n              exec => exec.workflowId === workflow.id && new Date(exec.startedAt) >= startTime\n            );\n\n            if (workflowExecutions.length === 0) continue;\n\n            // Calculate execution metrics\n            const executionTimes = workflowExecutions\n              .filter(exec => exec.stoppedAt && exec.status === 'success')\n              .map(\n                exec => new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime()\n              );\n\n            if (executionTimes.length === 0) continue;\n\n            const avgExecutionTime =\n              executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length;\n            const maxExecutionTime = Math.max(...executionTimes);\n            const minExecutionTime = Math.min(...executionTimes);\n\n            // Calculate percentile threshold\n            const sortedTimes = executionTimes.sort((a, b) => a - b);\n            const thresholdIndex = Math.floor((args.threshold / 100) * sortedTimes.length);\n            const thresholdTime =\n              sortedTimes[thresholdIndex] || sortedTimes[sortedTimes.length - 1];\n\n            // Identify slow executions\n            const slowExecutions = workflowExecutions.filter(exec => {\n              if (!exec.stoppedAt) return false;\n              const duration =\n                new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime();\n              return duration >= thresholdTime;\n            });\n\n            // Calculate failure rate\n            const failedExecutions = workflowExecutions.filter(exec => exec.status === 'error');\n            const failureRate = (failedExecutions.length / workflowExecutions.length) * 100;\n\n            // Analyze workflow structure for potential bottlenecks\n            const structuralIssues = [];\n            const nodeCount = workflow.nodes?.length || 0;\n\n            if (nodeCount > 50) {\n              structuralIssues.push('Large workflow size may impact performance');\n            }\n\n            const heavyNodes = (workflow.nodes || []).filter(node => {\n              const nodeType = node.type.toLowerCase();\n              return [\n                'http-request',\n                'webhook',\n                'code',\n                'function',\n                'python',\n                'mysql',\n                'postgres',\n              ].some(type => nodeType.includes(type));\n            });\n\n            if (heavyNodes.length > nodeCount * 0.3) {\n              structuralIssues.push('High percentage of resource-intensive nodes');\n            }\n\n            // Identify potential node bottlenecks\n            const problematicNodeTypes = (workflow.nodes || []).reduce(\n              (types, node) => {\n                const nodeType = node.type;\n                types[nodeType] = (types[nodeType] || 0) + 1;\n                return types;\n              },\n              {} as Record<string, number>\n            );\n\n            const nodeBottlenecks = Object.entries(problematicNodeTypes)\n              .filter(([type, count]) => {\n                const lowercaseType = type.toLowerCase();\n                return (\n                  (lowercaseType.includes('http') ||\n                    lowercaseType.includes('webhook') ||\n                    lowercaseType.includes('code') ||\n                    lowercaseType.includes('function')) &&\n                  count > 5\n                );\n              })\n              .map(([type, count]) => `${count}x ${type} nodes`);\n\n            bottleneckData.push({\n              workflow,\n              metrics: {\n                executionCount: workflowExecutions.length,\n                avgExecutionTime,\n                maxExecutionTime,\n                minExecutionTime,\n                slowExecutions: slowExecutions.length,\n                failureRate,\n                thresholdTime,\n              },\n              issues: {\n                structural: structuralIssues,\n                nodeBottlenecks,\n                heavyNodeCount: heavyNodes.length,\n              },\n            });\n          } catch (_error) {\n            // Skip workflows that can't be analyzed\n            continue;\n          }\n        }\n\n        // Sort by potential bottleneck severity\n        bottleneckData.sort((a, b) => {\n          const scoreA =\n            a.metrics.avgExecutionTime / 1000 +\n            a.metrics.failureRate * 100 +\n            a.issues.heavyNodeCount * 10;\n          const scoreB =\n            b.metrics.avgExecutionTime / 1000 +\n            b.metrics.failureRate * 100 +\n            b.issues.heavyNodeCount * 10;\n          return scoreB - scoreA;\n        });\n\n        if (bottleneckData.length === 0) {\n          report += `No performance data available for the selected timeframe and workflows.\\n`;\n          report += `This could mean:\\n`;\n          report += `- No executions occurred in the specified timeframe\\n`;\n          report += `- Selected workflows are not active\\n`;\n          report += `- Execution data is not accessible\\n`;\n          return report;\n        }\n\n        // Summary statistics\n        const totalExecutions = bottleneckData.reduce(\n          (sum, data) => sum + data.metrics.executionCount,\n          0\n        );\n        const avgFailureRate =\n          bottleneckData.reduce((sum, data) => sum + data.metrics.failureRate, 0) /\n          bottleneckData.length;\n        const overallAvgTime =\n          bottleneckData.reduce((sum, data) => sum + data.metrics.avgExecutionTime, 0) /\n          bottleneckData.length;\n\n        report += `## \uD83D\uDCCA Performance Summary\\n`;\n        report += `- **Total Executions**: ${totalExecutions}\\n`;\n        report += `- **Average Execution Time**: ${(overallAvgTime / 1000).toFixed(2)}s\\n`;\n        report += `- **Average Failure Rate**: ${avgFailureRate.toFixed(2)}%\\n`;\n        report += `- **Workflows with Issues**: ${\n          bottleneckData.filter(\n            data =>\n              data.metrics.avgExecutionTime > 30000 ||\n              data.metrics.failureRate > 5 ||\n              data.issues.structural.length > 0\n          ).length\n        }\\n\\n`;\n\n        // Top bottlenecks\n        report += `## \uD83D\uDEA8 Performance Bottlenecks\\n\\n`;\n\n        const topBottlenecks = bottleneckData.slice(0, 10);\n        topBottlenecks.forEach((data, index) => {\n          const severity =\n            data.metrics.avgExecutionTime > 60000 || data.metrics.failureRate > 10\n              ? '\uD83D\uDD34 Critical'\n              : data.metrics.avgExecutionTime > 30000 || data.metrics.failureRate > 5\n                ? '\uD83D\uDFE0 High'\n                : data.metrics.avgExecutionTime > 15000 || data.metrics.failureRate > 2\n                  ? '\uD83D\uDFE1 Medium'\n                  : '\uD83D\uDFE2 Low';\n\n          report += `### ${index + 1}. ${data.workflow.name} (${severity})\\n`;\n          report += `**Performance Metrics:**\\n`;\n          report += `- Average Execution Time: ${(data.metrics.avgExecutionTime / 1000).toFixed(2)}s\\n`;\n          report += `- Max Execution Time: ${(data.metrics.maxExecutionTime / 1000).toFixed(2)}s\\n`;\n          report += `- Slow Executions (>${(data.metrics.thresholdTime / 1000).toFixed(1)}s): ${data.metrics.slowExecutions}/${data.metrics.executionCount}\\n`;\n          report += `- Failure Rate: ${data.metrics.failureRate.toFixed(2)}%\\n`;\n\n          if (data.issues.structural.length > 0 || data.issues.nodeBottlenecks.length > 0) {\n            report += `**Identified Issues:**\\n`;\n            data.issues.structural.forEach(issue => {\n              report += `- \u26A0\uFE0F ${issue}\\n`;\n            });\n            data.issues.nodeBottlenecks.forEach(bottleneck => {\n              report += `- \uD83D\uDD27 ${bottleneck} may cause performance issues\\n`;\n            });\n          }\n\n          report += `**Recommendations:**\\n`;\n          const recommendations = [];\n\n          if (data.metrics.avgExecutionTime > 30000) {\n            recommendations.push(\n              'Optimize long-running operations and consider workflow splitting'\n            );\n          }\n          if (data.metrics.failureRate > 5) {\n            recommendations.push('Investigate and improve error handling for reliability');\n          }\n          if (data.issues.heavyNodeCount > 5) {\n            recommendations.push('Review resource-intensive nodes for optimization opportunities');\n          }\n          if (data.issues.structural.length > 0) {\n            recommendations.push('Consider workflow restructuring for better performance');\n          }\n          if (recommendations.length === 0) {\n            recommendations.push('Monitor performance trends for any degradation');\n          }\n\n          recommendations.forEach(rec => {\n            report += `- \uD83D\uDCA1 ${rec}\\n`;\n          });\n          report += '\\n';\n        });\n\n        // Performance optimization tips\n        report += `## \uD83D\uDD27 General Optimization Tips\\n`;\n        report += `1. **Node Optimization**: Minimize HTTP requests and external API calls\\n`;\n        report += `2. **Workflow Structure**: Break large workflows into smaller, manageable pieces\\n`;\n        report += `3. **Error Handling**: Implement proper error handling to reduce failure rates\\n`;\n        report += `4. **Resource Management**: Use efficient data processing patterns\\n`;\n        report += `5. **Monitoring**: Set up alerts for performance degradation\\n\\n`;\n\n        report += `## \uD83D\uDCC8 Performance Tracking\\n`;\n        report += `- Use \\`track-workflow-performance\\` for detailed performance monitoring\\n`;\n        report += `- Use \\`get-optimization-suggestions\\` for specific improvement recommendations\\n`;\n        report += `- Use \\`analyze-workflow-complexity\\` to understand structural complexity\\n`;\n\n        return report;\n      } catch (error: any) {\n        throw new UserError(`Failed to identify bottlenecks: ${error.message}`);\n      }\n    },\n  });\n\n  // Get optimization suggestions\n  server.addTool({\n    name: 'get-optimization-suggestions',\n    description:\n      'Get specific optimization suggestions for workflows based on structure analysis, performance data, and best practices',\n    parameters: OptimizationSuggestionsSchema,\n    annotations: {\n      title: 'Get Optimization Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OptimizationSuggestionsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        if (!workflow.nodes || workflow.nodes.length === 0) {\n          return `Workflow \"${workflow.name}\" has no nodes to optimize.`;\n        }\n\n        let suggestions = `# Optimization Suggestions: \"${workflow.name}\"\\n\\n`;\n        suggestions += `**Analysis Date**: ${new Date().toLocaleString()}\\n`;\n        suggestions += `**Focus Areas**: ${args.focusAreas.join(', ')}\\n`;\n        suggestions += `**Priority Filter**: ${args.priority}\\n\\n`;\n\n        const optimizations: Array<{\n          category: string;\n          priority: 'critical' | 'high' | 'medium' | 'low';\n          title: string;\n          description: string;\n          impact: string;\n          effort: string;\n          implementation: string[];\n        }> = [];\n\n        // Analyze workflow structure\n        const nodeCount = workflow.nodes.length;\n        const nodeTypes = workflow.nodes.reduce(\n          (types, node) => {\n            types[node.type] = (types[node.type] || 0) + 1;\n            return types;\n          },\n          {} as Record<string, number>\n        );\n\n        const _connections = Object.keys(workflow.connections || {}).length;\n\n        // Performance optimizations\n        if (args.focusAreas.includes('performance')) {\n          // Check for HTTP request optimization\n          const httpNodes = Object.entries(nodeTypes).filter(\n            ([type]) =>\n              type.toLowerCase().includes('http') || type.toLowerCase().includes('webhook')\n          );\n\n          if (httpNodes.length > 0) {\n            const totalHttpNodes = httpNodes.reduce((sum, [, count]) => sum + count, 0);\n            if (totalHttpNodes > 5) {\n              optimizations.push({\n                category: 'Performance',\n                priority: 'high',\n                title: 'Optimize HTTP Request Patterns',\n                description: `Found ${totalHttpNodes} HTTP/webhook nodes. Multiple sequential HTTP requests can significantly impact performance.`,\n                impact: 'High - Can reduce execution time by 30-70%',\n                effort: 'Medium - Requires workflow restructuring',\n                implementation: [\n                  'Batch HTTP requests where possible',\n                  'Implement parallel execution for independent requests',\n                  'Add request caching for frequently accessed data',\n                  'Use HTTP request node pooling settings',\n                  'Consider using bulk API endpoints',\n                ],\n              });\n            }\n          }\n\n          // Check for code node optimization\n          const codeNodes = Object.entries(nodeTypes).filter(\n            ([type]) =>\n              type.toLowerCase().includes('code') || type.toLowerCase().includes('function')\n          );\n\n          if (codeNodes.length > 0) {\n            optimizations.push({\n              category: 'Performance',\n              priority: 'medium',\n              title: 'Code Node Performance Review',\n              description:\n                'Custom code nodes can be performance bottlenecks if not optimized properly.',\n              impact: 'Medium - Can improve execution speed by 20-40%',\n              effort: 'Low - Code review and optimization',\n              implementation: [\n                'Review custom code for inefficient loops or operations',\n                'Minimize external library usage in code nodes',\n                'Use built-in n8n nodes instead of custom code where possible',\n                'Implement proper error handling in code nodes',\n                'Consider moving complex logic to external services',\n              ],\n            });\n          }\n\n          // Check workflow size\n          if (nodeCount > 30) {\n            optimizations.push({\n              category: 'Performance',\n              priority: nodeCount > 50 ? 'critical' : 'high',\n              title: 'Workflow Size Optimization',\n              description: `Large workflow with ${nodeCount} nodes may have performance and maintainability issues.`,\n              impact: 'High - Improves execution speed and reliability',\n              effort: 'High - Requires workflow restructuring',\n              implementation: [\n                'Break workflow into smaller, focused sub-workflows',\n                'Use workflow triggers to chain related processes',\n                'Implement modular design patterns',\n                'Consider using n8n sub-workflow nodes',\n                'Document workflow dependencies and data flow',\n              ],\n            });\n          }\n        }\n\n        // Reliability optimizations\n        if (args.focusAreas.includes('reliability')) {\n          // Check for error handling\n          const errorHandlingNodes = workflow.nodes.filter(\n            node =>\n              node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error')\n          );\n\n          if (errorHandlingNodes.length < Math.ceil(nodeCount * 0.1)) {\n            optimizations.push({\n              category: 'Reliability',\n              priority: 'high',\n              title: 'Implement Comprehensive Error Handling',\n              description:\n                'Insufficient error handling detected. Robust error handling is crucial for workflow reliability.',\n              impact: 'High - Significantly improves workflow reliability',\n              effort: 'Medium - Add error handling nodes and logic',\n              implementation: [\n                'Add error handling nodes after critical operations',\n                'Implement retry logic for transient failures',\n                'Set up error notification workflows',\n                'Use try-catch patterns in code nodes',\n                'Configure proper timeout values for external requests',\n              ],\n            });\n          }\n\n          // Check for monitoring and logging\n          const monitoringNodes = workflow.nodes.filter(\n            node =>\n              node.type.toLowerCase().includes('webhook') ||\n              node.type.toLowerCase().includes('slack') ||\n              node.type.toLowerCase().includes('email') ||\n              node.type.toLowerCase().includes('log')\n          );\n\n          if (monitoringNodes.length === 0) {\n            optimizations.push({\n              category: 'Reliability',\n              priority: 'medium',\n              title: 'Add Monitoring and Alerting',\n              description:\n                'No monitoring or alerting nodes detected. Proper monitoring is essential for production workflows.',\n              impact: 'Medium - Improves issue detection and resolution',\n              effort: 'Low - Add monitoring nodes',\n              implementation: [\n                'Add Slack or email notification nodes for critical failures',\n                'Implement health check endpoints',\n                'Set up workflow execution logging',\n                'Create dashboards for workflow performance monitoring',\n                'Configure alerting thresholds',\n              ],\n            });\n          }\n        }\n\n        // Maintainability optimizations\n        if (args.focusAreas.includes('maintainability')) {\n          // Check for documentation\n          const documentedNodes = workflow.nodes.filter(\n            node => node.notes && node.notes.trim().length > 0\n          );\n          const documentationRatio = documentedNodes.length / nodeCount;\n\n          if (documentationRatio < 0.3) {\n            optimizations.push({\n              category: 'Maintainability',\n              priority: 'medium',\n              title: 'Improve Workflow Documentation',\n              description: `Only ${(documentationRatio * 100).toFixed(1)}% of nodes have documentation. Good documentation is crucial for maintainability.`,\n              impact: 'Medium - Improves team collaboration and maintenance',\n              effort: 'Low - Add node descriptions and comments',\n              implementation: [\n                'Add descriptive notes to all complex nodes',\n                'Document input/output data structures',\n                'Create workflow overview documentation',\n                'Use descriptive node names',\n                'Document any special configuration requirements',\n              ],\n            });\n          }\n\n          // Check for node naming conventions\n          const defaultNamedNodes = workflow.nodes.filter(\n            node =>\n              node.name === node.type ||\n              (node.name.startsWith(node.type) && node.name.length < node.type.length + 5)\n          );\n\n          if (defaultNamedNodes.length > nodeCount * 0.5) {\n            optimizations.push({\n              category: 'Maintainability',\n              priority: 'low',\n              title: 'Improve Node Naming Conventions',\n              description:\n                'Many nodes are using default names, which makes the workflow harder to understand.',\n              impact: 'Low - Improves workflow readability',\n              effort: 'Low - Rename nodes with descriptive names',\n              implementation: [\n                'Use descriptive, business-focused node names',\n                'Follow consistent naming conventions',\n                'Include the purpose or data being processed in names',\n                'Avoid technical jargon in node names',\n                'Use action-oriented naming (e.g., \"Send Welcome Email\")',\n              ],\n            });\n          }\n        }\n\n        // Cost optimizations\n        if (args.focusAreas.includes('cost')) {\n          // Check for inefficient operations\n          const expensiveOperations = workflow.nodes.filter(node => {\n            const type = node.type.toLowerCase();\n            return (\n              type.includes('http') ||\n              type.includes('webhook') ||\n              type.includes('ai') ||\n              type.includes('openai') ||\n              type.includes('anthropic')\n            );\n          });\n\n          if (expensiveOperations.length > 0) {\n            optimizations.push({\n              category: 'Cost',\n              priority: 'medium',\n              title: 'Optimize External Service Usage',\n              description: `Found ${expensiveOperations.length} nodes that may incur external costs. Optimization can reduce operational expenses.`,\n              impact: 'Medium - Can reduce operational costs by 20-50%',\n              effort: 'Medium - Requires optimization of external calls',\n              implementation: [\n                'Implement caching for frequently requested data',\n                'Batch API requests to reduce call volume',\n                'Use webhook endpoints instead of polling where possible',\n                'Optimize AI prompts to reduce token usage',\n                'Consider using less expensive alternative services',\n              ],\n            });\n          }\n        }\n\n        // Security optimizations\n        if (args.focusAreas.includes('security')) {\n          // Check for credential usage\n          const nodesWithCredentials = workflow.nodes.filter(\n            node => node.credentials && Object.keys(node.credentials).length > 0\n          );\n\n          const credentialTypes = [\n            ...new Set(nodesWithCredentials.flatMap(node => Object.keys(node.credentials || {}))),\n          ];\n\n          if (credentialTypes.length > 3) {\n            optimizations.push({\n              category: 'Security',\n              priority: 'high',\n              title: 'Consolidate and Review Credentials',\n              description: `Workflow uses ${credentialTypes.length} different credential types. Review for security best practices.`,\n              impact: 'High - Improves security posture',\n              effort: 'Medium - Review and consolidate credentials',\n              implementation: [\n                'Audit all credential usage and permissions',\n                'Use least-privilege principle for API access',\n                'Regularly rotate credentials used in workflows',\n                'Consider using service accounts instead of user credentials',\n                'Implement credential usage monitoring',\n              ],\n            });\n          }\n\n          // Check for data handling\n          const dataProcessingNodes = workflow.nodes.filter(node => {\n            const type = node.type.toLowerCase();\n            return (\n              type.includes('set') ||\n              type.includes('code') ||\n              type.includes('function') ||\n              type.includes('merge')\n            );\n          });\n\n          if (dataProcessingNodes.length > 0) {\n            optimizations.push({\n              category: 'Security',\n              priority: 'medium',\n              title: 'Review Data Processing Security',\n              description:\n                'Workflow processes data through multiple nodes. Ensure sensitive data is handled securely.',\n              impact: 'Medium - Improves data security compliance',\n              effort: 'Medium - Review and secure data processing',\n              implementation: [\n                'Identify and classify sensitive data in the workflow',\n                'Implement data encryption for sensitive information',\n                'Add data validation and sanitization',\n                'Review data retention and deletion policies',\n                'Ensure compliance with data protection regulations',\n              ],\n            });\n          }\n        }\n\n        // Filter by priority\n        const filteredOptimizations =\n          args.priority === 'all'\n            ? optimizations\n            : optimizations.filter(opt => opt.priority === args.priority);\n\n        if (filteredOptimizations.length === 0) {\n          suggestions += `No optimization suggestions found for the specified criteria.\\n`;\n          suggestions += `Try adjusting the focus areas or priority level to see more suggestions.`;\n          return suggestions;\n        }\n\n        // Sort by priority\n        const priorityOrder = { critical: 0, high: 1, medium: 2, low: 3 };\n        filteredOptimizations.sort((a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]);\n\n        // Group by category\n        const categorizedSuggestions = filteredOptimizations.reduce(\n          (groups, opt) => {\n            if (!groups[opt.category]) groups[opt.category] = [];\n            groups[opt.category].push(opt);\n            return groups;\n          },\n          {} as Record<string, typeof optimizations>\n        );\n\n        // Generate suggestions by category\n        Object.entries(categorizedSuggestions).forEach(([category, categoryOptimizations]) => {\n          suggestions += `## ${category} Optimizations\\n\\n`;\n\n          categoryOptimizations.forEach((opt, index) => {\n            const priorityIcon =\n              opt.priority === 'critical'\n                ? '\uD83D\uDD34'\n                : opt.priority === 'high'\n                  ? '\uD83D\uDFE0'\n                  : opt.priority === 'medium'\n                    ? '\uD83D\uDFE1'\n                    : '\uD83D\uDFE2';\n\n            suggestions += `### ${index + 1}. ${opt.title} ${priorityIcon}\\n`;\n            suggestions += `**Priority**: ${opt.priority.charAt(0).toUpperCase() + opt.priority.slice(1)}\\n`;\n            suggestions += `**Description**: ${opt.description}\\n`;\n            suggestions += `**Expected Impact**: ${opt.impact}\\n`;\n            suggestions += `**Implementation Effort**: ${opt.effort}\\n\\n`;\n            suggestions += `**Implementation Steps**:\\n`;\n            opt.implementation.forEach((step, stepIndex) => {\n              suggestions += `${stepIndex + 1}. ${step}\\n`;\n            });\n            suggestions += '\\n';\n          });\n        });\n\n        // Summary and next steps\n        suggestions += `## \uD83D\uDCCB Summary\\n`;\n        suggestions += `- **Total Suggestions**: ${filteredOptimizations.length}\\n`;\n        suggestions += `- **Critical Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'critical').length}\\n`;\n        suggestions += `- **High Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'high').length}\\n`;\n        suggestions += `- **Medium Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'medium').length}\\n`;\n        suggestions += `- **Low Priority**: ${filteredOptimizations.filter(opt => opt.priority === 'low').length}\\n\\n`;\n\n        suggestions += `## \uD83C\uDFAF Recommended Action Plan\\n`;\n        const criticalAndHigh = filteredOptimizations.filter(\n          opt => opt.priority === 'critical' || opt.priority === 'high'\n        );\n        if (criticalAndHigh.length > 0) {\n          suggestions += `1. **Immediate Action**: Address ${criticalAndHigh.length} critical/high priority optimization(s)\\n`;\n          suggestions += `2. **Short Term**: Plan implementation of medium priority optimizations\\n`;\n          suggestions += `3. **Long Term**: Consider low priority improvements during maintenance cycles\\n`;\n        } else {\n          suggestions += `1. **Maintenance**: Implement medium and low priority optimizations during regular maintenance\\n`;\n          suggestions += `2. **Monitoring**: Set up performance monitoring to track optimization effectiveness\\n`;\n        }\n\n        suggestions += `\\n## \uD83D\uDD27 Additional Tools\\n`;\n        suggestions += `- Use \\`identify-bottlenecks\\` to find specific performance issues\\n`;\n        suggestions += `- Use \\`analyze-workflow-complexity\\` for detailed structure analysis\\n`;\n        suggestions += `- Use \\`track-workflow-performance\\` to monitor optimization results\\n`;\n\n        return suggestions;\n      } catch (error: any) {\n        throw new UserError(`Failed to get optimization suggestions: ${error.message}`);\n      }\n    },\n  });\n\n  // Compare workflows\n  server.addTool({\n    name: 'compare-workflows',\n    description:\n      'Compare multiple workflows across various metrics to identify patterns, best practices, and optimization opportunities',\n    parameters: WorkflowComparisonSchema,\n    annotations: {\n      title: 'Compare Workflows',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowComparisonSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflows: N8nWorkflow[] = [];\n        const workflowData: Array<{\n          workflow: N8nWorkflow;\n          metrics: {\n            complexity: number;\n            nodeCount: number;\n            connections: number;\n            uniqueNodeTypes: number;\n            maintainabilityIndex: number;\n            performance?: {\n              avgExecutionTime: number;\n              successRate: number;\n              executionCount: number;\n            };\n          };\n        }> = [];\n\n        // Fetch all workflows\n        for (const workflowId of args.workflowIds) {\n          try {\n            const workflow = await client.getWorkflow(workflowId);\n            workflows.push(workflow);\n          } catch (_error) {\n            throw new UserError(`Workflow with ID \"${workflowId}\" not found`);\n          }\n        }\n\n        // Calculate metrics for each workflow\n        for (const workflow of workflows) {\n          const nodeCount = workflow.nodes?.length || 0;\n          const uniqueNodeTypes = workflow.nodes\n            ? [...new Set(workflow.nodes.map(node => node.type))].length\n            : 0;\n          const _connections = Object.keys(workflow.connections || {}).length;\n\n          // Calculate complexity\n          const cognitiveComplexity = (workflow.nodes || []).reduce((complexity, node) => {\n            const nodeType = node.type.toLowerCase();\n            let nodeComplexity = 1;\n\n            if (\n              nodeType.includes('if') ||\n              nodeType.includes('switch') ||\n              nodeType.includes('merge')\n            ) {\n              nodeComplexity += 2;\n            } else if (nodeType.includes('loop') || nodeType.includes('split')) {\n              nodeComplexity += 3;\n            } else if (nodeType.includes('code') || nodeType.includes('function')) {\n              nodeComplexity += 1;\n            }\n\n            return complexity + nodeComplexity;\n          }, 0);\n\n          // Calculate maintainability index\n          const typeComplexity = nodeCount > 0 ? uniqueNodeTypes / nodeCount : 0;\n          const avgNodeComplexity = nodeCount > 0 ? cognitiveComplexity / nodeCount : 0;\n          const maintainabilityIndex = Math.max(\n            0,\n            Math.min(100, 100 - avgNodeComplexity * 10 - typeComplexity * 20 - _connections * 2)\n          );\n\n          let performanceMetrics;\n\n          // Try to get performance data\n          if (args.metrics.includes('performance')) {\n            try {\n              const executions = await client.getExecutions({ limit: 100 });\n              const workflowExecutions = executions.data.filter(\n                exec => exec.workflowId === workflow.id\n              );\n\n              if (workflowExecutions.length > 0) {\n                const successfulExecutions = workflowExecutions.filter(\n                  exec => exec.status === 'success' && exec.stoppedAt\n                );\n                const avgExecutionTime =\n                  successfulExecutions.length > 0\n                    ? successfulExecutions.reduce((sum, exec) => {\n                        const duration =\n                          new Date(exec.stoppedAt!).getTime() - new Date(exec.startedAt).getTime();\n                        return sum + duration;\n                      }, 0) / successfulExecutions.length\n                    : 0;\n\n                const successRate = (successfulExecutions.length / workflowExecutions.length) * 100;\n\n                performanceMetrics = {\n                  avgExecutionTime,\n                  successRate,\n                  executionCount: workflowExecutions.length,\n                };\n              }\n            } catch (_error) {\n              // Performance data not available\n            }\n          }\n\n          workflowData.push({\n            workflow,\n            metrics: {\n              complexity: cognitiveComplexity,\n              nodeCount,\n              connections: _connections,\n              uniqueNodeTypes,\n              maintainabilityIndex,\n              performance: performanceMetrics,\n            },\n          });\n        }\n\n        let comparison = `# Workflow Comparison Report\\n\\n`;\n        comparison += `**Comparison Date**: ${new Date().toLocaleString()}\\n`;\n        comparison += `**Workflows Compared**: ${workflows.length}\\n`;\n        comparison += `**Metrics Analyzed**: ${args.metrics.join(', ')}\\n\\n`;\n\n        // Overview table\n        comparison += `## \uD83D\uDCCA Overview Comparison\\n\\n`;\n        comparison += `| Workflow | Status | Nodes | Types | Connections | Complexity |\\n`;\n        comparison += `|----------|--------|-------|-------|-------------|------------|\\n`;\n\n        workflowData.forEach(data => {\n          const statusIcon = data.workflow.active ? '\uD83D\uDFE2' : '\uD83D\uDD34';\n          comparison += `| ${data.workflow.name} | ${statusIcon} | ${data.metrics.nodeCount} | ${data.metrics.uniqueNodeTypes} | ${data.metrics.connections} | ${data.metrics.complexity} |\\n`;\n        });\n        comparison += '\\n';\n\n        // Detailed metrics comparison\n        if (args.metrics.includes('complexity')) {\n          comparison += `## \uD83E\uDDEE Complexity Analysis\\n\\n`;\n\n          const complexityStats = {\n            avg:\n              workflowData.reduce((sum, data) => sum + data.metrics.complexity, 0) /\n              workflowData.length,\n            min: Math.min(...workflowData.map(data => data.metrics.complexity)),\n            max: Math.max(...workflowData.map(data => data.metrics.complexity)),\n          };\n\n          comparison += `**Complexity Statistics:**\\n`;\n          comparison += `- Average: ${complexityStats.avg.toFixed(1)}\\n`;\n          comparison += `- Range: ${complexityStats.min} - ${complexityStats.max}\\n\\n`;\n\n          workflowData.forEach(data => {\n            const complexityLevel =\n              data.metrics.complexity <= 5\n                ? '\uD83D\uDFE2 Low'\n                : data.metrics.complexity <= 15\n                  ? '\uD83D\uDFE1 Medium'\n                  : data.metrics.complexity <= 25\n                    ? '\uD83D\uDFE0 High'\n                    : '\uD83D\uDD34 Very High';\n\n            comparison += `**${data.workflow.name}**: ${data.metrics.complexity} (${complexityLevel})\\n`;\n            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\\n`;\n            comparison += `- Node Type Diversity: ${((data.metrics.uniqueNodeTypes / data.metrics.nodeCount) * 100).toFixed(1)}%\\n\\n`;\n          });\n        }\n\n        if (\n          args.metrics.includes('performance') &&\n          workflowData.some(data => data.metrics.performance)\n        ) {\n          comparison += `## \u26A1 Performance Comparison\\n\\n`;\n\n          const performanceData = workflowData.filter(data => data.metrics.performance);\n\n          if (performanceData.length > 0) {\n            const avgExecutionTimes = performanceData.map(\n              data => data.metrics.performance!.avgExecutionTime\n            );\n            const successRates = performanceData.map(data => data.metrics.performance!.successRate);\n\n            comparison += `**Performance Statistics:**\\n`;\n            comparison += `- Average Execution Time: ${(avgExecutionTimes.reduce((a, b) => a + b, 0) / avgExecutionTimes.length / 1000).toFixed(2)}s\\n`;\n            comparison += `- Average Success Rate: ${(successRates.reduce((a, b) => a + b, 0) / successRates.length).toFixed(1)}%\\n\\n`;\n\n            performanceData.forEach(data => {\n              const perf = data.metrics.performance!;\n              const perfRating =\n                perf.avgExecutionTime < 5000 && perf.successRate > 95\n                  ? '\uD83D\uDFE2 Excellent'\n                  : perf.avgExecutionTime < 15000 && perf.successRate > 90\n                    ? '\uD83D\uDFE1 Good'\n                    : perf.avgExecutionTime < 30000 && perf.successRate > 80\n                      ? '\uD83D\uDFE0 Fair'\n                      : '\uD83D\uDD34 Poor';\n\n              comparison += `**${data.workflow.name}**: ${perfRating}\\n`;\n              comparison += `- Avg Execution Time: ${(perf.avgExecutionTime / 1000).toFixed(2)}s\\n`;\n              comparison += `- Success Rate: ${perf.successRate.toFixed(1)}%\\n`;\n              comparison += `- Executions Analyzed: ${perf.executionCount}\\n\\n`;\n            });\n          } else {\n            comparison += `No performance data available for the selected workflows.\\n\\n`;\n          }\n        }\n\n        if (args.metrics.includes('reliability')) {\n          comparison += `## \uD83D\uDEE1\uFE0F Reliability Analysis\\n\\n`;\n\n          workflowData.forEach(data => {\n            const errorHandling = (data.workflow.nodes || []).filter(\n              node =>\n                node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error')\n            ).length;\n\n            const monitoringNodes = (data.workflow.nodes || []).filter(\n              node =>\n                node.type.toLowerCase().includes('webhook') ||\n                node.type.toLowerCase().includes('slack') ||\n                node.type.toLowerCase().includes('email')\n            ).length;\n\n            const reliabilityScore =\n              errorHandling * 20 +\n              monitoringNodes * 15 +\n              (data.metrics.performance?.successRate || 50);\n\n            const reliabilityLevel =\n              reliabilityScore >= 90\n                ? '\uD83D\uDFE2 High'\n                : reliabilityScore >= 70\n                  ? '\uD83D\uDFE1 Medium'\n                  : reliabilityScore >= 50\n                    ? '\uD83D\uDFE0 Low'\n                    : '\uD83D\uDD34 Very Low';\n\n            comparison += `**${data.workflow.name}**: ${reliabilityLevel} (${reliabilityScore.toFixed(0)}/100)\\n`;\n            comparison += `- Error Handling Nodes: ${errorHandling}\\n`;\n            comparison += `- Monitoring/Alerting Nodes: ${monitoringNodes}\\n`;\n            if (data.metrics.performance) {\n              comparison += `- Success Rate: ${data.metrics.performance.successRate.toFixed(1)}%\\n`;\n            }\n            comparison += '\\n';\n          });\n        }\n\n        if (args.metrics.includes('maintainability')) {\n          comparison += `## \uD83D\uDD27 Maintainability Comparison\\n\\n`;\n\n          workflowData.forEach(data => {\n            const documentedNodes = (data.workflow.nodes || []).filter(\n              node => node.notes && node.notes.trim().length > 0\n            ).length;\n\n            const documentationRatio =\n              data.metrics.nodeCount > 0 ? (documentedNodes / data.metrics.nodeCount) * 100 : 0;\n\n            const maintainabilityLevel =\n              data.metrics.maintainabilityIndex >= 80\n                ? '\uD83D\uDFE2 High'\n                : data.metrics.maintainabilityIndex >= 60\n                  ? '\uD83D\uDFE1 Medium'\n                  : data.metrics.maintainabilityIndex >= 40\n                    ? '\uD83D\uDFE0 Low'\n                    : '\uD83D\uDD34 Very Low';\n\n            comparison += `**${data.workflow.name}**: ${maintainabilityLevel}\\n`;\n            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\\n`;\n            comparison += `- Documentation Coverage: ${documentationRatio.toFixed(1)}%\\n`;\n            comparison += `- Node Type Diversity: ${data.metrics.uniqueNodeTypes}/${data.metrics.nodeCount}\\n\\n`;\n          });\n        }\n\n        if (args.metrics.includes('cost')) {\n          comparison += `## \uD83D\uDCB0 Cost Analysis\\n\\n`;\n\n          workflowData.forEach(data => {\n            const expensiveNodes = (data.workflow.nodes || []).filter(node => {\n              const type = node.type.toLowerCase();\n              return (\n                type.includes('http') ||\n                type.includes('webhook') ||\n                type.includes('ai') ||\n                type.includes('openai') ||\n                type.includes('anthropic') ||\n                type.includes('mysql') ||\n                type.includes('postgres')\n              );\n            }).length;\n\n            const costRisk = expensiveNodes / data.metrics.nodeCount;\n            const costLevel =\n              costRisk < 0.2\n                ? '\uD83D\uDFE2 Low'\n                : costRisk < 0.4\n                  ? '\uD83D\uDFE1 Medium'\n                  : costRisk < 0.6\n                    ? '\uD83D\uDFE0 High'\n                    : '\uD83D\uDD34 Very High';\n\n            comparison += `**${data.workflow.name}**: ${costLevel} Cost Risk\\n`;\n            comparison += `- External Service Nodes: ${expensiveNodes}/${data.metrics.nodeCount}\\n`;\n            comparison += `- Cost Risk Ratio: ${(costRisk * 100).toFixed(1)}%\\n`;\n            if (data.metrics.performance) {\n              const estimatedMonthlyCost =\n                expensiveNodes * data.metrics.performance.executionCount * 0.01 * 30;\n              comparison += `- Estimated Monthly Cost: $${estimatedMonthlyCost.toFixed(2)}\\n`;\n            }\n            comparison += '\\n';\n          });\n        }\n\n        // Best practices identification\n        comparison += `## \uD83C\uDFC6 Best Practices Identified\\n\\n`;\n\n        const bestComplexity = workflowData.reduce((best, current) =>\n          current.metrics.complexity < best.metrics.complexity ? current : best\n        );\n\n        const bestMaintainability = workflowData.reduce((best, current) =>\n          current.metrics.maintainabilityIndex > best.metrics.maintainabilityIndex ? current : best\n        );\n\n        comparison += `**Lowest Complexity**: ${bestComplexity.workflow.name} (${bestComplexity.metrics.complexity})\\n`;\n        comparison += `**Highest Maintainability**: ${bestMaintainability.workflow.name} (${bestMaintainability.metrics.maintainabilityIndex.toFixed(1)}/100)\\n`;\n\n        if (workflowData.some(data => data.metrics.performance)) {\n          const bestPerformance = workflowData\n            .filter(data => data.metrics.performance)\n            .reduce((best, current) =>\n              current.metrics.performance!.successRate >\n              (best.metrics.performance?.successRate || 0)\n                ? current\n                : best\n            );\n\n          comparison += `**Best Performance**: ${bestPerformance.workflow.name} (${bestPerformance.metrics.performance!.successRate.toFixed(1)}% success rate)\\n`;\n        }\n\n        // Recommendations\n        comparison += `\\n## \uD83D\uDCA1 Recommendations\\n\\n`;\n\n        const recommendations = [];\n\n        const highComplexityWorkflows = workflowData.filter(data => data.metrics.complexity > 20);\n        if (highComplexityWorkflows.length > 0) {\n          recommendations.push(\n            `**Complexity Reduction**: ${highComplexityWorkflows.map(d => d.workflow.name).join(', ')} have high complexity and should be reviewed for simplification`\n          );\n        }\n\n        const lowMaintainabilityWorkflows = workflowData.filter(\n          data => data.metrics.maintainabilityIndex < 60\n        );\n        if (lowMaintainabilityWorkflows.length > 0) {\n          recommendations.push(\n            `**Maintainability Improvement**: ${lowMaintainabilityWorkflows.map(d => d.workflow.name).join(', ')} need better documentation and structure`\n          );\n        }\n\n        const poorPerformanceWorkflows = workflowData.filter(\n          data =>\n            data.metrics.performance &&\n            (data.metrics.performance.successRate < 90 ||\n              data.metrics.performance.avgExecutionTime > 30000)\n        );\n        if (poorPerformanceWorkflows.length > 0) {\n          recommendations.push(\n            `**Performance Optimization**: ${poorPerformanceWorkflows.map(d => d.workflow.name).join(', ')} need performance improvements`\n          );\n        }\n\n        if (recommendations.length === 0) {\n          recommendations.push(\n            'All workflows appear to be well-structured and performing adequately'\n          );\n        }\n\n        recommendations.forEach((rec, index) => {\n          comparison += `${index + 1}. ${rec}\\n`;\n        });\n\n        comparison += `\\n## \uD83D\uDD27 Next Steps\\n`;\n        comparison += `- Use \\`get-optimization-suggestions\\` for specific improvement recommendations\\n`;\n        comparison += `- Use \\`analyze-workflow-complexity\\` for detailed analysis of individual workflows\\n`;\n        comparison += `- Use \\`identify-bottlenecks\\` to find specific performance issues\\n`;\n\n        return comparison;\n      } catch (error: any) {\n        throw new UserError(`Failed to compare workflows: ${error.message}`);\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9d964dd573c6193629695b4d8cb54de6f0d6705d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dshxx74ax = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dshxx74ax();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Zod schemas for workflow analytics and intelligence
const WorkflowAnalysisSchema =
/* istanbul ignore next */
(cov_dshxx74ax().s[0]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  analysisType: z.enum(['complexity', 'performance', 'optimization', 'comprehensive']).optional().default('comprehensive'),
  includeRecommendations: z.boolean().optional().default(true),
  historicalData: z.boolean().optional().default(true)
}));
const ComplexityMetricsSchema =
/* istanbul ignore next */
(cov_dshxx74ax().s[1]++, z.object({
  workflowId: z.string().optional(),
  threshold: z.enum(['low', 'medium', 'high', 'all']).optional().default('all'),
  sortBy: z.enum(['complexity', 'nodes', 'connections', 'depth']).optional().default('complexity')
}));
const BottleneckAnalysisSchema =
/* istanbul ignore next */
(cov_dshxx74ax().s[2]++, z.object({
  workflowId: z.string().optional(),
  timeframe: z.enum(['hour', 'day', 'week', 'month']).optional().default('week'),
  threshold: z.number().min(0).max(100).optional().default(80)
}));
const OptimizationSuggestionsSchema =
/* istanbul ignore next */
(cov_dshxx74ax().s[3]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  focusAreas: z.array(z.enum(['performance', 'reliability', 'maintainability', 'cost', 'security'])).optional().default(['performance', 'reliability']),
  priority: z.enum(['critical', 'high', 'medium', 'low', 'all']).optional().default('all')
}));
const WorkflowComparisonSchema =
/* istanbul ignore next */
(cov_dshxx74ax().s[4]++, z.object({
  workflowIds: z.array(z.string()).min(2, 'At least 2 workflows required for comparison'),
  metrics: z.array(z.enum(['complexity', 'performance', 'reliability', 'cost', 'maintainability'])).optional().default(['complexity', 'performance', 'reliability'])
}));
// Tool registration function for workflow analytics and intelligence tools
export function createAnalyticsTools(getClient, server) {
  /* istanbul ignore next */
  cov_dshxx74ax().f[0]++;
  cov_dshxx74ax().s[5]++;
  // Analyze workflow complexity and structure
  server.addTool({
    name: 'analyze-workflow-complexity',
    description: 'Analyze workflow complexity, structure, and provide detailed metrics on maintainability and performance characteristics',
    parameters: WorkflowAnalysisSchema,
    annotations: {
      title: 'Analyze Workflow Complexity',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_dshxx74ax().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_dshxx74ax().s[6]++, getClient());
      /* istanbul ignore next */
      cov_dshxx74ax().s[7]++;
      if (!client) {
        /* istanbul ignore next */
        cov_dshxx74ax().b[0][0]++;
        cov_dshxx74ax().s[8]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_dshxx74ax().b[0][1]++;
      }
      cov_dshxx74ax().s[9]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[10]++, await client.getWorkflow(args.workflowId));
        /* istanbul ignore next */
        cov_dshxx74ax().s[11]++;
        if (
        /* istanbul ignore next */
        (cov_dshxx74ax().b[2][0]++, !workflow.nodes) ||
        /* istanbul ignore next */
        (cov_dshxx74ax().b[2][1]++, workflow.nodes.length === 0)) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[1][0]++;
          cov_dshxx74ax().s[12]++;
          return `Workflow "${workflow.name}" has no nodes to analyze.`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[1][1]++;
        }
        // Calculate complexity metrics
        const metrics =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[13]++, {
          nodeCount: workflow.nodes.length,
          uniqueNodeTypes: [...new Set(workflow.nodes.map(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[2]++;
            cov_dshxx74ax().s[14]++;
            return node.type;
          }))].length,
          connections: Object.keys(
          /* istanbul ignore next */
          (cov_dshxx74ax().b[3][0]++, workflow.connections) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[3][1]++, {})).length,
          maxDepth: 0,
          cyclomaticComplexity: 0,
          maintainabilityIndex: 0,
          cognitiveComplexity: 0
        });
        // Calculate workflow depth (longest path)
        /* istanbul ignore next */
        cov_dshxx74ax().s[15]++;
        const calculateDepth = (nodeId, visited, currentDepth) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[3]++;
          cov_dshxx74ax().s[16]++;
          if (visited.has(nodeId)) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[4][0]++;
            cov_dshxx74ax().s[17]++;
            return currentDepth;
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[4][1]++;
          } // Cycle detection
          cov_dshxx74ax().s[18]++;
          visited.add(nodeId);
          const _connections =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[19]++, workflow.connections?.[nodeId]);
          /* istanbul ignore next */
          cov_dshxx74ax().s[20]++;
          if (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[6][0]++, !_connections) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[6][1]++, Object.keys(_connections).length === 0)) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[5][0]++;
            cov_dshxx74ax().s[21]++;
            return currentDepth;
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[5][1]++;
          }
          let maxChildDepth =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[22]++, currentDepth);
          /* istanbul ignore next */
          cov_dshxx74ax().s[23]++;
          Object.values(_connections).forEach(outputConnections => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[4]++;
            cov_dshxx74ax().s[24]++;
            if (Array.isArray(outputConnections)) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[7][0]++;
              cov_dshxx74ax().s[25]++;
              outputConnections.forEach(conn => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[5]++;
                cov_dshxx74ax().s[26]++;
                if (conn.node) {
                  /* istanbul ignore next */
                  cov_dshxx74ax().b[8][0]++;
                  const childDepth =
                  /* istanbul ignore next */
                  (cov_dshxx74ax().s[27]++, calculateDepth(conn.node, new Set(visited), currentDepth + 1));
                  /* istanbul ignore next */
                  cov_dshxx74ax().s[28]++;
                  maxChildDepth = Math.max(maxChildDepth, childDepth);
                } else
                /* istanbul ignore next */
                {
                  cov_dshxx74ax().b[8][1]++;
                }
              });
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[7][1]++;
            }
          });
          /* istanbul ignore next */
          cov_dshxx74ax().s[29]++;
          return maxChildDepth;
        };
        // Find starting nodes (nodes with no inputs)
        const allTargetNodes =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[30]++, new Set());
        /* istanbul ignore next */
        cov_dshxx74ax().s[31]++;
        Object.values(
        /* istanbul ignore next */
        (cov_dshxx74ax().b[9][0]++, workflow.connections) ||
        /* istanbul ignore next */
        (cov_dshxx74ax().b[9][1]++, {})).forEach(nodeConnections => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[6]++;
          cov_dshxx74ax().s[32]++;
          Object.values(nodeConnections).forEach(outputs => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[7]++;
            cov_dshxx74ax().s[33]++;
            if (Array.isArray(outputs)) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[10][0]++;
              cov_dshxx74ax().s[34]++;
              outputs.forEach(conn => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[8]++;
                cov_dshxx74ax().s[35]++;
                if (conn.node) {
                  /* istanbul ignore next */
                  cov_dshxx74ax().b[11][0]++;
                  cov_dshxx74ax().s[36]++;
                  allTargetNodes.add(conn.node);
                } else
                /* istanbul ignore next */
                {
                  cov_dshxx74ax().b[11][1]++;
                }
              });
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[10][1]++;
            }
          });
        });
        const startingNodes =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[37]++, workflow.nodes.filter(node => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[9]++;
          cov_dshxx74ax().s[38]++;
          return !allTargetNodes.has(node.id);
        }));
        // Calculate maximum depth
        /* istanbul ignore next */
        cov_dshxx74ax().s[39]++;
        startingNodes.forEach(node => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[10]++;
          const depth =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[40]++, calculateDepth(node.id, new Set(), 1));
          /* istanbul ignore next */
          cov_dshxx74ax().s[41]++;
          metrics.maxDepth = Math.max(metrics.maxDepth, depth);
        });
        // Calculate cyclomatic complexity (simplified)
        /* istanbul ignore next */
        cov_dshxx74ax().s[42]++;
        metrics.cyclomaticComplexity = metrics.connections - metrics.nodeCount + 2;
        /* istanbul ignore next */
        cov_dshxx74ax().s[43]++;
        if (metrics.cyclomaticComplexity < 1) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[12][0]++;
          cov_dshxx74ax().s[44]++;
          metrics.cyclomaticComplexity = 1;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[12][1]++;
        }
        // Calculate cognitive complexity (based on node types and nesting)
        cov_dshxx74ax().s[45]++;
        metrics.cognitiveComplexity = workflow.nodes.reduce((complexity, node) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[11]++;
          let nodeComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[46]++, 1); // Base complexity
          // Add complexity for different node types
          const nodeType =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[47]++, node.type.toLowerCase());
          /* istanbul ignore next */
          cov_dshxx74ax().s[48]++;
          if (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[14][0]++, nodeType.includes('if')) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[14][1]++, nodeType.includes('switch')) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[14][2]++, nodeType.includes('merge'))) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[13][0]++;
            cov_dshxx74ax().s[49]++;
            nodeComplexity += 2; // Conditional logic
          } else {
            /* istanbul ignore next */
            cov_dshxx74ax().b[13][1]++;
            cov_dshxx74ax().s[50]++;
            if (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[16][0]++, nodeType.includes('loop')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[16][1]++, nodeType.includes('split'))) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[15][0]++;
              cov_dshxx74ax().s[51]++;
              nodeComplexity += 3; // Iteration/branching
            } else {
              /* istanbul ignore next */
              cov_dshxx74ax().b[15][1]++;
              cov_dshxx74ax().s[52]++;
              if (
              /* istanbul ignore next */
              (cov_dshxx74ax().b[18][0]++, nodeType.includes('code')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[18][1]++, nodeType.includes('function'))) {
                /* istanbul ignore next */
                cov_dshxx74ax().b[17][0]++;
                cov_dshxx74ax().s[53]++;
                nodeComplexity += 1; // Custom logic
              } else
              /* istanbul ignore next */
              {
                cov_dshxx74ax().b[17][1]++;
              }
            }
          }
          /* istanbul ignore next */
          cov_dshxx74ax().s[54]++;
          return complexity + nodeComplexity;
        }, 0);
        // Calculate maintainability index (0-100 scale)
        const averageNodeComplexity =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[55]++, metrics.cognitiveComplexity / metrics.nodeCount);
        const typeComplexity =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[56]++, metrics.uniqueNodeTypes / metrics.nodeCount);
        /* istanbul ignore next */
        cov_dshxx74ax().s[57]++;
        metrics.maintainabilityIndex = Math.max(0, Math.min(100, 100 - averageNodeComplexity * 10 - typeComplexity * 20 - metrics.maxDepth * 5));
        // Complexity classification
        /* istanbul ignore next */
        cov_dshxx74ax().s[58]++;
        const getComplexityLevel = score => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[12]++;
          cov_dshxx74ax().s[59]++;
          if (score <= 5) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[19][0]++;
            cov_dshxx74ax().s[60]++;
            return '🟢 Low';
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[19][1]++;
          }
          cov_dshxx74ax().s[61]++;
          if (score <= 15) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[20][0]++;
            cov_dshxx74ax().s[62]++;
            return '🟡 Medium';
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[20][1]++;
          }
          cov_dshxx74ax().s[63]++;
          if (score <= 25) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[21][0]++;
            cov_dshxx74ax().s[64]++;
            return '🟠 High';
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[21][1]++;
          }
          cov_dshxx74ax().s[65]++;
          return '🔴 Very High';
        };
        let analysis =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[66]++, `# Workflow Complexity Analysis: "${workflow.name}"\n\n`);
        // Basic metrics
        /* istanbul ignore next */
        cov_dshxx74ax().s[67]++;
        analysis += `## 📊 Structure Metrics\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[68]++;
        analysis += `- **Total Nodes**: ${metrics.nodeCount}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[69]++;
        analysis += `- **Unique Node Types**: ${metrics.uniqueNodeTypes}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[70]++;
        analysis += `- **Connections**: ${metrics.connections}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[71]++;
        analysis += `- **Maximum Depth**: ${metrics.maxDepth} levels\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[72]++;
        analysis += `- **Starting Nodes**: ${startingNodes.length}\n\n`;
        // Complexity metrics
        /* istanbul ignore next */
        cov_dshxx74ax().s[73]++;
        analysis += `## 🧮 Complexity Metrics\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[74]++;
        analysis += `- **Cyclomatic Complexity**: ${metrics.cyclomaticComplexity} ${getComplexityLevel(metrics.cyclomaticComplexity)}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[75]++;
        analysis += `- **Cognitive Complexity**: ${metrics.cognitiveComplexity} ${getComplexityLevel(metrics.cognitiveComplexity)}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[76]++;
        analysis += `- **Maintainability Index**: ${metrics.maintainabilityIndex.toFixed(1)}/100\n\n`;
        // Node type breakdown
        const nodeTypeDistribution =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[77]++, workflow.nodes.reduce((dist, node) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[13]++;
          const type =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[78]++, node.type);
          /* istanbul ignore next */
          cov_dshxx74ax().s[79]++;
          dist[type] = (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[22][0]++, dist[type]) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[22][1]++, 0)) + 1;
          /* istanbul ignore next */
          cov_dshxx74ax().s[80]++;
          return dist;
        }, {}));
        /* istanbul ignore next */
        cov_dshxx74ax().s[81]++;
        analysis += `## 🔧 Node Type Distribution\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[82]++;
        Object.entries(nodeTypeDistribution).sort((a, b) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[14]++;
          cov_dshxx74ax().s[83]++;
          return b[1] - a[1];
        }).forEach(([type, count]) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[15]++;
          const percentage =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[84]++, (count / metrics.nodeCount * 100).toFixed(1));
          /* istanbul ignore next */
          cov_dshxx74ax().s[85]++;
          analysis += `- **${type}**: ${count} nodes (${percentage}%)\n`;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[86]++;
        analysis += '\n';
        // Performance analysis
        /* istanbul ignore next */
        cov_dshxx74ax().s[87]++;
        if (args.historicalData) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[23][0]++;
          cov_dshxx74ax().s[88]++;
          try {
            const executions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[89]++, await client.getExecutions({
              limit: 50
            }));
            const workflowExecutions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[90]++, executions.data.filter(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[16]++;
              cov_dshxx74ax().s[91]++;
              return exec.workflowId === args.workflowId;
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[92]++;
            if (workflowExecutions.length > 0) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[24][0]++;
              const avgExecutionTime =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[93]++, workflowExecutions.filter(exec => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[17]++;
                cov_dshxx74ax().s[94]++;
                return exec.stoppedAt;
              }).reduce((sum, exec) => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[18]++;
                const duration =
                /* istanbul ignore next */
                (cov_dshxx74ax().s[95]++, new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime());
                /* istanbul ignore next */
                cov_dshxx74ax().s[96]++;
                return sum + duration;
              }, 0) / workflowExecutions.length);
              const successRate =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[97]++, workflowExecutions.filter(exec => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[19]++;
                cov_dshxx74ax().s[98]++;
                return exec.status === 'success';
              }).length / workflowExecutions.length * 100);
              /* istanbul ignore next */
              cov_dshxx74ax().s[99]++;
              analysis += `## ⚡ Performance Metrics\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[100]++;
              analysis += `- **Average Execution Time**: ${(avgExecutionTime / 1000).toFixed(2)}s\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[101]++;
              analysis += `- **Success Rate**: ${successRate.toFixed(1)}%\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[102]++;
              analysis += `- **Recent Executions**: ${workflowExecutions.length}\n\n`;
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[24][1]++;
            }
          } catch (_error) {
            // Performance data not available
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[23][1]++;
        }
        // Analysis and recommendations
        cov_dshxx74ax().s[103]++;
        if (args.includeRecommendations) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[25][0]++;
          cov_dshxx74ax().s[104]++;
          analysis += `## 💡 Analysis & Recommendations\n\n`;
          const recommendations =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[105]++, []);
          /* istanbul ignore next */
          cov_dshxx74ax().s[106]++;
          if (metrics.nodeCount > 50) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[26][0]++;
            cov_dshxx74ax().s[107]++;
            recommendations.push('**Workflow Size**: Consider breaking this workflow into smaller, more manageable sub-workflows');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[26][1]++;
          }
          cov_dshxx74ax().s[108]++;
          if (metrics.maxDepth > 10) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[27][0]++;
            cov_dshxx74ax().s[109]++;
            recommendations.push('**Workflow Depth**: High nesting level detected - consider flattening the workflow structure');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[27][1]++;
          }
          cov_dshxx74ax().s[110]++;
          if (metrics.cyclomaticComplexity > 15) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[28][0]++;
            cov_dshxx74ax().s[111]++;
            recommendations.push('**Cyclomatic Complexity**: High complexity - consider simplifying conditional logic and branching');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[28][1]++;
          }
          cov_dshxx74ax().s[112]++;
          if (metrics.cognitiveComplexity > 25) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[29][0]++;
            cov_dshxx74ax().s[113]++;
            recommendations.push('**Cognitive Complexity**: Workflow may be difficult to understand - consider adding documentation and simplifying logic');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[29][1]++;
          }
          cov_dshxx74ax().s[114]++;
          if (metrics.maintainabilityIndex < 60) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[30][0]++;
            cov_dshxx74ax().s[115]++;
            recommendations.push('**Maintainability**: Low maintainability score - consider refactoring for better code organization');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[30][1]++;
          }
          cov_dshxx74ax().s[116]++;
          if (metrics.uniqueNodeTypes / metrics.nodeCount > 0.8) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[31][0]++;
            cov_dshxx74ax().s[117]++;
            recommendations.push('**Node Diversity**: High variety of node types - ensure team familiarity with all node types used');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[31][1]++;
          }
          // Performance-based recommendations
          const heavyNodeTypes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[118]++, Object.entries(nodeTypeDistribution).filter(([type]) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[20]++;
            cov_dshxx74ax().s[119]++;
            return ['code', 'function', 'python', 'http-request', 'webhook'].some(heavy => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[21]++;
              cov_dshxx74ax().s[120]++;
              return type.toLowerCase().includes(heavy);
            });
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[121]++;
          if (heavyNodeTypes.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[32][0]++;
            cov_dshxx74ax().s[122]++;
            recommendations.push('**Performance**: Resource-intensive nodes detected - monitor execution times and consider optimization');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[32][1]++;
          }
          cov_dshxx74ax().s[123]++;
          if (recommendations.length === 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[33][0]++;
            cov_dshxx74ax().s[124]++;
            recommendations.push('**Overall**: Workflow structure appears well-organized with reasonable complexity levels');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[33][1]++;
          }
          cov_dshxx74ax().s[125]++;
          recommendations.forEach((rec, index) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[22]++;
            cov_dshxx74ax().s[126]++;
            analysis += `${index + 1}. ${rec}\n`;
          });
          /* istanbul ignore next */
          cov_dshxx74ax().s[127]++;
          analysis += '\n';
          // Complexity score interpretation
          /* istanbul ignore next */
          cov_dshxx74ax().s[128]++;
          analysis += `## 📈 Complexity Score Interpretation\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[129]++;
          analysis += `- **Low (1-5)**: Simple, easy to understand and maintain\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[130]++;
          analysis += `- **Medium (6-15)**: Moderate complexity, requires some expertise\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[131]++;
          analysis += `- **High (16-25)**: Complex, requires careful management and documentation\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[132]++;
          analysis += `- **Very High (26+)**: Very complex, consider refactoring or breaking down\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[133]++;
          analysis += `**Overall Assessment**: This workflow has a **${getComplexityLevel(metrics.cognitiveComplexity)}** complexity level.`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[25][1]++;
        }
        cov_dshxx74ax().s[134]++;
        return analysis;
      } catch (error) {
        /* istanbul ignore next */
        cov_dshxx74ax().s[135]++;
        throw new UserError(`Failed to analyze workflow complexity: ${error.message}`);
      }
    }
  });
  // Get complexity metrics for multiple workflows
  /* istanbul ignore next */
  cov_dshxx74ax().s[136]++;
  server.addTool({
    name: 'get-complexity-metrics',
    description: 'Get complexity metrics for workflows, sorted by complexity level to identify the most complex workflows requiring attention',
    parameters: ComplexityMetricsSchema,
    annotations: {
      title: 'Get Complexity Metrics',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_dshxx74ax().f[23]++;
      const client =
      /* istanbul ignore next */
      (cov_dshxx74ax().s[137]++, getClient());
      /* istanbul ignore next */
      cov_dshxx74ax().s[138]++;
      if (!client) {
        /* istanbul ignore next */
        cov_dshxx74ax().b[34][0]++;
        cov_dshxx74ax().s[139]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_dshxx74ax().b[34][1]++;
      }
      cov_dshxx74ax().s[140]++;
      try {
        let workflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[141]++, []);
        /* istanbul ignore next */
        cov_dshxx74ax().s[142]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[35][0]++;
          const workflow =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[143]++, await client.getWorkflow(args.workflowId));
          /* istanbul ignore next */
          cov_dshxx74ax().s[144]++;
          workflows = [workflow];
        } else {
          /* istanbul ignore next */
          cov_dshxx74ax().b[35][1]++;
          const response =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[145]++, await client.getWorkflows({
            limit: 50
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[146]++;
          workflows = response.data;
        }
        const complexityData =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[147]++, workflows.map(workflow => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[24]++;
          const nodeCount =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[148]++,
          /* istanbul ignore next */
          (cov_dshxx74ax().b[36][0]++, workflow.nodes?.length) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[36][1]++, 0));
          const uniqueNodeTypes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[149]++, workflow.nodes ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[37][0]++, [...new Set(workflow.nodes.map(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[25]++;
            cov_dshxx74ax().s[150]++;
            return node.type;
          }))].length) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[37][1]++, 0));
          const _connections =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[151]++, Object.keys(
          /* istanbul ignore next */
          (cov_dshxx74ax().b[38][0]++, workflow.connections) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[38][1]++, {})).length);
          // Calculate simplified complexity score
          const typeComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[152]++, nodeCount > 0 ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[39][0]++, uniqueNodeTypes / nodeCount) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[39][1]++, 0));
          const _structuralComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[153]++, nodeCount + _connections);
          const cognitiveComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[154]++, (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[40][0]++, workflow.nodes) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[40][1]++, [])).reduce((complexity, node) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[26]++;
            const nodeType =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[155]++, node.type.toLowerCase());
            let nodeComplexity =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[156]++, 1);
            /* istanbul ignore next */
            cov_dshxx74ax().s[157]++;
            if (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[42][0]++, nodeType.includes('if')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[42][1]++, nodeType.includes('switch')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[42][2]++, nodeType.includes('merge'))) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[41][0]++;
              cov_dshxx74ax().s[158]++;
              nodeComplexity += 2;
            } else {
              /* istanbul ignore next */
              cov_dshxx74ax().b[41][1]++;
              cov_dshxx74ax().s[159]++;
              if (
              /* istanbul ignore next */
              (cov_dshxx74ax().b[44][0]++, nodeType.includes('loop')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[44][1]++, nodeType.includes('split'))) {
                /* istanbul ignore next */
                cov_dshxx74ax().b[43][0]++;
                cov_dshxx74ax().s[160]++;
                nodeComplexity += 3;
              } else {
                /* istanbul ignore next */
                cov_dshxx74ax().b[43][1]++;
                cov_dshxx74ax().s[161]++;
                if (
                /* istanbul ignore next */
                (cov_dshxx74ax().b[46][0]++, nodeType.includes('code')) ||
                /* istanbul ignore next */
                (cov_dshxx74ax().b[46][1]++, nodeType.includes('function'))) {
                  /* istanbul ignore next */
                  cov_dshxx74ax().b[45][0]++;
                  cov_dshxx74ax().s[162]++;
                  nodeComplexity += 1;
                } else
                /* istanbul ignore next */
                {
                  cov_dshxx74ax().b[45][1]++;
                }
              }
            }
            /* istanbul ignore next */
            cov_dshxx74ax().s[163]++;
            return complexity + nodeComplexity;
          }, 0));
          const overallComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[164]++, cognitiveComplexity + typeComplexity * 10);
          /* istanbul ignore next */
          cov_dshxx74ax().s[165]++;
          return {
            id: workflow.id,
            name: workflow.name,
            active: workflow.active,
            nodeCount,
            uniqueNodeTypes,
            _connections,
            cognitiveComplexity,
            overallComplexity,
            complexityLevel: overallComplexity <= 5 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[47][0]++, 'low') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[47][1]++, overallComplexity <= 15 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[48][0]++, 'medium') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[48][1]++, overallComplexity <= 25 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[49][0]++, 'high') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[49][1]++, 'very-high')))
          };
        }));
        // Filter by threshold
        const filteredData =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[166]++, args.threshold === 'all' ?
        /* istanbul ignore next */
        (cov_dshxx74ax().b[50][0]++, complexityData) :
        /* istanbul ignore next */
        (cov_dshxx74ax().b[50][1]++, complexityData.filter(item => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[27]++;
          cov_dshxx74ax().s[167]++;
          switch (args.threshold) {
            case 'low':
              /* istanbul ignore next */
              cov_dshxx74ax().b[51][0]++;
              cov_dshxx74ax().s[168]++;
              return item.complexityLevel === 'low';
            case 'medium':
              /* istanbul ignore next */
              cov_dshxx74ax().b[51][1]++;
              cov_dshxx74ax().s[169]++;
              return item.complexityLevel === 'medium';
            case 'high':
              /* istanbul ignore next */
              cov_dshxx74ax().b[51][2]++;
              cov_dshxx74ax().s[170]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[52][0]++, item.complexityLevel === 'high') ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[52][1]++, item.complexityLevel === 'very-high');
            default:
              /* istanbul ignore next */
              cov_dshxx74ax().b[51][3]++;
              cov_dshxx74ax().s[171]++;
              return true;
          }
        })));
        // Sort by selected criteria
        /* istanbul ignore next */
        cov_dshxx74ax().s[172]++;
        filteredData.sort((a, b) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[28]++;
          cov_dshxx74ax().s[173]++;
          switch (args.sortBy) {
            case 'complexity':
              /* istanbul ignore next */
              cov_dshxx74ax().b[53][0]++;
              cov_dshxx74ax().s[174]++;
              return b.overallComplexity - a.overallComplexity;
            case 'nodes':
              /* istanbul ignore next */
              cov_dshxx74ax().b[53][1]++;
              cov_dshxx74ax().s[175]++;
              return b.nodeCount - a.nodeCount;
            case 'connections':
              /* istanbul ignore next */
              cov_dshxx74ax().b[53][2]++;
              cov_dshxx74ax().s[176]++;
              return b._connections - a._connections;
            case 'depth':
              /* istanbul ignore next */
              cov_dshxx74ax().b[53][3]++;
              cov_dshxx74ax().s[177]++;
              return b.cognitiveComplexity - a.cognitiveComplexity;
            default:
              /* istanbul ignore next */
              cov_dshxx74ax().b[53][4]++;
              cov_dshxx74ax().s[178]++;
              return b.overallComplexity - a.overallComplexity;
          }
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[179]++;
        if (filteredData.length === 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[54][0]++;
          cov_dshxx74ax().s[180]++;
          return `No workflows found matching the complexity threshold: ${args.threshold}`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[54][1]++;
        }
        let report =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[181]++, `# Workflow Complexity Metrics Report\n\n`);
        /* istanbul ignore next */
        cov_dshxx74ax().s[182]++;
        report += `**Analysis Date**: ${new Date().toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[183]++;
        report += `**Workflows Analyzed**: ${filteredData.length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[184]++;
        report += `**Sorted By**: ${args.sortBy}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[185]++;
        report += `**Complexity Filter**: ${args.threshold}\n\n`;
        // Summary statistics
        const avgComplexity =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[186]++, filteredData.reduce((sum, item) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[29]++;
          cov_dshxx74ax().s[187]++;
          return sum + item.overallComplexity;
        }, 0) / filteredData.length);
        const avgNodes =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[188]++, filteredData.reduce((sum, item) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[30]++;
          cov_dshxx74ax().s[189]++;
          return sum + item.nodeCount;
        }, 0) / filteredData.length);
        /* istanbul ignore next */
        cov_dshxx74ax().s[190]++;
        report += `## 📊 Summary Statistics\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[191]++;
        report += `- **Average Complexity**: ${avgComplexity.toFixed(1)}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[192]++;
        report += `- **Average Node Count**: ${avgNodes.toFixed(1)}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[193]++;
        report += `- **Most Complex**: ${filteredData[0]?.name} (${filteredData[0]?.overallComplexity.toFixed(1)})\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[194]++;
        report += `- **Least Complex**: ${filteredData[filteredData.length - 1]?.name} (${filteredData[filteredData.length - 1]?.overallComplexity.toFixed(1)})\n\n`;
        // Complexity distribution
        const distribution =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[195]++, filteredData.reduce((dist, item) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[31]++;
          cov_dshxx74ax().s[196]++;
          dist[item.complexityLevel] = (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[55][0]++, dist[item.complexityLevel]) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[55][1]++, 0)) + 1;
          /* istanbul ignore next */
          cov_dshxx74ax().s[197]++;
          return dist;
        }, {}));
        /* istanbul ignore next */
        cov_dshxx74ax().s[198]++;
        report += `## 📈 Complexity Distribution\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[199]++;
        Object.entries(distribution).forEach(([level, count]) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[32]++;
          const percentage =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[200]++, (count / filteredData.length * 100).toFixed(1));
          const indicator =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[201]++, level === 'low' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[56][0]++, '🟢') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[56][1]++, level === 'medium' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[57][0]++, '🟡') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[57][1]++, level === 'high' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[58][0]++, '🟠') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[58][1]++, '🔴'))));
          /* istanbul ignore next */
          cov_dshxx74ax().s[202]++;
          report += `- **${indicator} ${level.charAt(0).toUpperCase() + level.slice(1)}**: ${count} workflows (${percentage}%)\n`;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[203]++;
        report += '\n';
        // Detailed workflow metrics table
        /* istanbul ignore next */
        cov_dshxx74ax().s[204]++;
        report += `## 📋 Detailed Metrics\n\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[205]++;
        report += `| Workflow | Status | Nodes | Types | Connections | Complexity | Level |\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[206]++;
        report += `|----------|--------|-------|-------|-------------|------------|-------|\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[207]++;
        filteredData.slice(0, 20).forEach(item => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[33]++;
          // Limit to top 20
          const statusIcon =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[208]++, item.active ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[59][0]++, '🟢') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[59][1]++, '🔴'));
          const complexityIcon =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[209]++, item.complexityLevel === 'low' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[60][0]++, '🟢') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[60][1]++, item.complexityLevel === 'medium' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[61][0]++, '🟡') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[61][1]++, item.complexityLevel === 'high' ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[62][0]++, '🟠') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[62][1]++, '🔴'))));
          /* istanbul ignore next */
          cov_dshxx74ax().s[210]++;
          report += `| ${item.name} | ${statusIcon} | ${item.nodeCount} | ${item.uniqueNodeTypes} | ${item._connections} | ${item.overallComplexity.toFixed(1)} | ${complexityIcon} ${item.complexityLevel} |\n`;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[211]++;
        if (filteredData.length > 20) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[63][0]++;
          cov_dshxx74ax().s[212]++;
          report += `\n*Showing top 20 workflows. Total: ${filteredData.length} workflows.*\n`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[63][1]++;
        }
        cov_dshxx74ax().s[213]++;
        report += '\n## 💡 Quick Actions\n';
        /* istanbul ignore next */
        cov_dshxx74ax().s[214]++;
        report += `- Use \`analyze-workflow-complexity\` for detailed analysis of specific workflows\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[215]++;
        report += `- Use \`get-optimization-suggestions\` for improvement recommendations\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[216]++;
        report += `- Use \`identify-bottlenecks\` to find performance issues\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[217]++;
        return report;
      } catch (error) {
        /* istanbul ignore next */
        cov_dshxx74ax().s[218]++;
        throw new UserError(`Failed to get complexity metrics: ${error.message}`);
      }
    }
  });
  // Identify performance bottlenecks
  /* istanbul ignore next */
  cov_dshxx74ax().s[219]++;
  server.addTool({
    name: 'identify-bottlenecks',
    description: 'Identify performance bottlenecks in workflows by analyzing execution patterns, slow nodes, and resource usage',
    parameters: BottleneckAnalysisSchema,
    annotations: {
      title: 'Identify Bottlenecks',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_dshxx74ax().f[34]++;
      const client =
      /* istanbul ignore next */
      (cov_dshxx74ax().s[220]++, getClient());
      /* istanbul ignore next */
      cov_dshxx74ax().s[221]++;
      if (!client) {
        /* istanbul ignore next */
        cov_dshxx74ax().b[64][0]++;
        cov_dshxx74ax().s[222]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_dshxx74ax().b[64][1]++;
      }
      cov_dshxx74ax().s[223]++;
      try {
        // Calculate timeframe
        const now =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[224]++, new Date());
        const timeframeDuration =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[225]++, {
          hour: 1 * 60 * 60 * 1000,
          day: 24 * 60 * 60 * 1000,
          week: 7 * 24 * 60 * 60 * 1000,
          month: 30 * 24 * 60 * 60 * 1000
        });
        const startTime =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[226]++, new Date(now.getTime() - timeframeDuration[args.timeframe]));
        let workflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[227]++, []);
        /* istanbul ignore next */
        cov_dshxx74ax().s[228]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[65][0]++;
          const workflow =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[229]++, await client.getWorkflow(args.workflowId));
          /* istanbul ignore next */
          cov_dshxx74ax().s[230]++;
          workflows = [workflow];
        } else {
          /* istanbul ignore next */
          cov_dshxx74ax().b[65][1]++;
          const response =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[231]++, await client.getWorkflows({
            limit: 30
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[232]++;
          workflows = response.data.filter(w => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[35]++;
            cov_dshxx74ax().s[233]++;
            return w.active;
          }); // Focus on active workflows
        }
        let report =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[234]++, `# Performance Bottleneck Analysis\n\n`);
        /* istanbul ignore next */
        cov_dshxx74ax().s[235]++;
        report += `**Analysis Period**: ${startTime.toLocaleString()} to ${now.toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[236]++;
        report += `**Timeframe**: ${args.timeframe}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[237]++;
        report += `**Performance Threshold**: ${args.threshold}th percentile\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[238]++;
        report += `**Workflows Analyzed**: ${workflows.length}\n\n`;
        const bottleneckData =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[239]++, []);
        /* istanbul ignore next */
        cov_dshxx74ax().s[240]++;
        for (const workflow of workflows) {
          /* istanbul ignore next */
          cov_dshxx74ax().s[241]++;
          try {
            // Get execution data
            const executions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[242]++, await client.getExecutions({
              limit: 100
            }));
            const workflowExecutions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[243]++, executions.data.filter(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[36]++;
              cov_dshxx74ax().s[244]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[66][0]++, exec.workflowId === workflow.id) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[66][1]++, new Date(exec.startedAt) >= startTime);
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[245]++;
            if (workflowExecutions.length === 0) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[67][0]++;
              cov_dshxx74ax().s[246]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[67][1]++;
            }
            // Calculate execution metrics
            const executionTimes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[247]++, workflowExecutions.filter(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[37]++;
              cov_dshxx74ax().s[248]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[68][0]++, exec.stoppedAt) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[68][1]++, exec.status === 'success');
            }).map(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[38]++;
              cov_dshxx74ax().s[249]++;
              return new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime();
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[250]++;
            if (executionTimes.length === 0) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[69][0]++;
              cov_dshxx74ax().s[251]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[69][1]++;
            }
            const avgExecutionTime =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[252]++, executionTimes.reduce((a, b) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[39]++;
              cov_dshxx74ax().s[253]++;
              return a + b;
            }, 0) / executionTimes.length);
            const maxExecutionTime =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[254]++, Math.max(...executionTimes));
            const minExecutionTime =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[255]++, Math.min(...executionTimes));
            // Calculate percentile threshold
            const sortedTimes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[256]++, executionTimes.sort((a, b) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[40]++;
              cov_dshxx74ax().s[257]++;
              return a - b;
            }));
            const thresholdIndex =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[258]++, Math.floor(args.threshold / 100 * sortedTimes.length));
            const thresholdTime =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[259]++,
            /* istanbul ignore next */
            (cov_dshxx74ax().b[70][0]++, sortedTimes[thresholdIndex]) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[70][1]++, sortedTimes[sortedTimes.length - 1]));
            // Identify slow executions
            const slowExecutions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[260]++, workflowExecutions.filter(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[41]++;
              cov_dshxx74ax().s[261]++;
              if (!exec.stoppedAt) {
                /* istanbul ignore next */
                cov_dshxx74ax().b[71][0]++;
                cov_dshxx74ax().s[262]++;
                return false;
              } else
              /* istanbul ignore next */
              {
                cov_dshxx74ax().b[71][1]++;
              }
              const duration =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[263]++, new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime());
              /* istanbul ignore next */
              cov_dshxx74ax().s[264]++;
              return duration >= thresholdTime;
            }));
            // Calculate failure rate
            const failedExecutions =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[265]++, workflowExecutions.filter(exec => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[42]++;
              cov_dshxx74ax().s[266]++;
              return exec.status === 'error';
            }));
            const failureRate =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[267]++, failedExecutions.length / workflowExecutions.length * 100);
            // Analyze workflow structure for potential bottlenecks
            const structuralIssues =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[268]++, []);
            const nodeCount =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[269]++,
            /* istanbul ignore next */
            (cov_dshxx74ax().b[72][0]++, workflow.nodes?.length) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[72][1]++, 0));
            /* istanbul ignore next */
            cov_dshxx74ax().s[270]++;
            if (nodeCount > 50) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[73][0]++;
              cov_dshxx74ax().s[271]++;
              structuralIssues.push('Large workflow size may impact performance');
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[73][1]++;
            }
            const heavyNodes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[272]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[74][0]++, workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[74][1]++, [])).filter(node => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[43]++;
              const nodeType =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[273]++, node.type.toLowerCase());
              /* istanbul ignore next */
              cov_dshxx74ax().s[274]++;
              return ['http-request', 'webhook', 'code', 'function', 'python', 'mysql', 'postgres'].some(type => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[44]++;
                cov_dshxx74ax().s[275]++;
                return nodeType.includes(type);
              });
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[276]++;
            if (heavyNodes.length > nodeCount * 0.3) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[75][0]++;
              cov_dshxx74ax().s[277]++;
              structuralIssues.push('High percentage of resource-intensive nodes');
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[75][1]++;
            }
            // Identify potential node bottlenecks
            const problematicNodeTypes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[278]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[76][0]++, workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[76][1]++, [])).reduce((types, node) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[45]++;
              const nodeType =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[279]++, node.type);
              /* istanbul ignore next */
              cov_dshxx74ax().s[280]++;
              types[nodeType] = (
              /* istanbul ignore next */
              (cov_dshxx74ax().b[77][0]++, types[nodeType]) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[77][1]++, 0)) + 1;
              /* istanbul ignore next */
              cov_dshxx74ax().s[281]++;
              return types;
            }, {}));
            const nodeBottlenecks =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[282]++, Object.entries(problematicNodeTypes).filter(([type, count]) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[46]++;
              const lowercaseType =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[283]++, type.toLowerCase());
              /* istanbul ignore next */
              cov_dshxx74ax().s[284]++;
              return (
              /* istanbul ignore next */
              (cov_dshxx74ax().b[78][0]++, lowercaseType.includes('http')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[78][1]++, lowercaseType.includes('webhook')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[78][2]++, lowercaseType.includes('code')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[78][3]++, lowercaseType.includes('function'))) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[78][4]++, count > 5);
            }).map(([type, count]) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[47]++;
              cov_dshxx74ax().s[285]++;
              return `${count}x ${type} nodes`;
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[286]++;
            bottleneckData.push({
              workflow,
              metrics: {
                executionCount: workflowExecutions.length,
                avgExecutionTime,
                maxExecutionTime,
                minExecutionTime,
                slowExecutions: slowExecutions.length,
                failureRate,
                thresholdTime
              },
              issues: {
                structural: structuralIssues,
                nodeBottlenecks,
                heavyNodeCount: heavyNodes.length
              }
            });
          } catch (_error) {
            /* istanbul ignore next */
            cov_dshxx74ax().s[287]++;
            // Skip workflows that can't be analyzed
            continue;
          }
        }
        // Sort by potential bottleneck severity
        /* istanbul ignore next */
        cov_dshxx74ax().s[288]++;
        bottleneckData.sort((a, b) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[48]++;
          const scoreA =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[289]++, a.metrics.avgExecutionTime / 1000 + a.metrics.failureRate * 100 + a.issues.heavyNodeCount * 10);
          const scoreB =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[290]++, b.metrics.avgExecutionTime / 1000 + b.metrics.failureRate * 100 + b.issues.heavyNodeCount * 10);
          /* istanbul ignore next */
          cov_dshxx74ax().s[291]++;
          return scoreB - scoreA;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[292]++;
        if (bottleneckData.length === 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[79][0]++;
          cov_dshxx74ax().s[293]++;
          report += `No performance data available for the selected timeframe and workflows.\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[294]++;
          report += `This could mean:\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[295]++;
          report += `- No executions occurred in the specified timeframe\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[296]++;
          report += `- Selected workflows are not active\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[297]++;
          report += `- Execution data is not accessible\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[298]++;
          return report;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[79][1]++;
        }
        // Summary statistics
        const totalExecutions =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[299]++, bottleneckData.reduce((sum, data) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[49]++;
          cov_dshxx74ax().s[300]++;
          return sum + data.metrics.executionCount;
        }, 0));
        const avgFailureRate =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[301]++, bottleneckData.reduce((sum, data) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[50]++;
          cov_dshxx74ax().s[302]++;
          return sum + data.metrics.failureRate;
        }, 0) / bottleneckData.length);
        const overallAvgTime =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[303]++, bottleneckData.reduce((sum, data) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[51]++;
          cov_dshxx74ax().s[304]++;
          return sum + data.metrics.avgExecutionTime;
        }, 0) / bottleneckData.length);
        /* istanbul ignore next */
        cov_dshxx74ax().s[305]++;
        report += `## 📊 Performance Summary\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[306]++;
        report += `- **Total Executions**: ${totalExecutions}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[307]++;
        report += `- **Average Execution Time**: ${(overallAvgTime / 1000).toFixed(2)}s\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[308]++;
        report += `- **Average Failure Rate**: ${avgFailureRate.toFixed(2)}%\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[309]++;
        report += `- **Workflows with Issues**: ${bottleneckData.filter(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[52]++;
          cov_dshxx74ax().s[310]++;
          return /* istanbul ignore next */(cov_dshxx74ax().b[80][0]++, data.metrics.avgExecutionTime > 30000) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[80][1]++, data.metrics.failureRate > 5) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[80][2]++, data.issues.structural.length > 0);
        }).length}\n\n`;
        // Top bottlenecks
        /* istanbul ignore next */
        cov_dshxx74ax().s[311]++;
        report += `## 🚨 Performance Bottlenecks\n\n`;
        const topBottlenecks =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[312]++, bottleneckData.slice(0, 10));
        /* istanbul ignore next */
        cov_dshxx74ax().s[313]++;
        topBottlenecks.forEach((data, index) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[53]++;
          const severity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[314]++,
          /* istanbul ignore next */
          (cov_dshxx74ax().b[82][0]++, data.metrics.avgExecutionTime > 60000) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[82][1]++, data.metrics.failureRate > 10) ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[81][0]++, '🔴 Critical') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[81][1]++,
          /* istanbul ignore next */
          (cov_dshxx74ax().b[84][0]++, data.metrics.avgExecutionTime > 30000) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[84][1]++, data.metrics.failureRate > 5) ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[83][0]++, '🟠 High') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[83][1]++,
          /* istanbul ignore next */
          (cov_dshxx74ax().b[86][0]++, data.metrics.avgExecutionTime > 15000) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[86][1]++, data.metrics.failureRate > 2) ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[85][0]++, '🟡 Medium') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[85][1]++, '🟢 Low'))));
          /* istanbul ignore next */
          cov_dshxx74ax().s[315]++;
          report += `### ${index + 1}. ${data.workflow.name} (${severity})\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[316]++;
          report += `**Performance Metrics:**\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[317]++;
          report += `- Average Execution Time: ${(data.metrics.avgExecutionTime / 1000).toFixed(2)}s\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[318]++;
          report += `- Max Execution Time: ${(data.metrics.maxExecutionTime / 1000).toFixed(2)}s\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[319]++;
          report += `- Slow Executions (>${(data.metrics.thresholdTime / 1000).toFixed(1)}s): ${data.metrics.slowExecutions}/${data.metrics.executionCount}\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[320]++;
          report += `- Failure Rate: ${data.metrics.failureRate.toFixed(2)}%\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[321]++;
          if (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[88][0]++, data.issues.structural.length > 0) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[88][1]++, data.issues.nodeBottlenecks.length > 0)) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[87][0]++;
            cov_dshxx74ax().s[322]++;
            report += `**Identified Issues:**\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[323]++;
            data.issues.structural.forEach(issue => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[54]++;
              cov_dshxx74ax().s[324]++;
              report += `- ⚠️ ${issue}\n`;
            });
            /* istanbul ignore next */
            cov_dshxx74ax().s[325]++;
            data.issues.nodeBottlenecks.forEach(bottleneck => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[55]++;
              cov_dshxx74ax().s[326]++;
              report += `- 🔧 ${bottleneck} may cause performance issues\n`;
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[87][1]++;
          }
          cov_dshxx74ax().s[327]++;
          report += `**Recommendations:**\n`;
          const recommendations =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[328]++, []);
          /* istanbul ignore next */
          cov_dshxx74ax().s[329]++;
          if (data.metrics.avgExecutionTime > 30000) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[89][0]++;
            cov_dshxx74ax().s[330]++;
            recommendations.push('Optimize long-running operations and consider workflow splitting');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[89][1]++;
          }
          cov_dshxx74ax().s[331]++;
          if (data.metrics.failureRate > 5) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[90][0]++;
            cov_dshxx74ax().s[332]++;
            recommendations.push('Investigate and improve error handling for reliability');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[90][1]++;
          }
          cov_dshxx74ax().s[333]++;
          if (data.issues.heavyNodeCount > 5) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[91][0]++;
            cov_dshxx74ax().s[334]++;
            recommendations.push('Review resource-intensive nodes for optimization opportunities');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[91][1]++;
          }
          cov_dshxx74ax().s[335]++;
          if (data.issues.structural.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[92][0]++;
            cov_dshxx74ax().s[336]++;
            recommendations.push('Consider workflow restructuring for better performance');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[92][1]++;
          }
          cov_dshxx74ax().s[337]++;
          if (recommendations.length === 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[93][0]++;
            cov_dshxx74ax().s[338]++;
            recommendations.push('Monitor performance trends for any degradation');
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[93][1]++;
          }
          cov_dshxx74ax().s[339]++;
          recommendations.forEach(rec => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[56]++;
            cov_dshxx74ax().s[340]++;
            report += `- 💡 ${rec}\n`;
          });
          /* istanbul ignore next */
          cov_dshxx74ax().s[341]++;
          report += '\n';
        });
        // Performance optimization tips
        /* istanbul ignore next */
        cov_dshxx74ax().s[342]++;
        report += `## 🔧 General Optimization Tips\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[343]++;
        report += `1. **Node Optimization**: Minimize HTTP requests and external API calls\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[344]++;
        report += `2. **Workflow Structure**: Break large workflows into smaller, manageable pieces\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[345]++;
        report += `3. **Error Handling**: Implement proper error handling to reduce failure rates\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[346]++;
        report += `4. **Resource Management**: Use efficient data processing patterns\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[347]++;
        report += `5. **Monitoring**: Set up alerts for performance degradation\n\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[348]++;
        report += `## 📈 Performance Tracking\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[349]++;
        report += `- Use \`track-workflow-performance\` for detailed performance monitoring\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[350]++;
        report += `- Use \`get-optimization-suggestions\` for specific improvement recommendations\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[351]++;
        report += `- Use \`analyze-workflow-complexity\` to understand structural complexity\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[352]++;
        return report;
      } catch (error) {
        /* istanbul ignore next */
        cov_dshxx74ax().s[353]++;
        throw new UserError(`Failed to identify bottlenecks: ${error.message}`);
      }
    }
  });
  // Get optimization suggestions
  /* istanbul ignore next */
  cov_dshxx74ax().s[354]++;
  server.addTool({
    name: 'get-optimization-suggestions',
    description: 'Get specific optimization suggestions for workflows based on structure analysis, performance data, and best practices',
    parameters: OptimizationSuggestionsSchema,
    annotations: {
      title: 'Get Optimization Suggestions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_dshxx74ax().f[57]++;
      const client =
      /* istanbul ignore next */
      (cov_dshxx74ax().s[355]++, getClient());
      /* istanbul ignore next */
      cov_dshxx74ax().s[356]++;
      if (!client) {
        /* istanbul ignore next */
        cov_dshxx74ax().b[94][0]++;
        cov_dshxx74ax().s[357]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_dshxx74ax().b[94][1]++;
      }
      cov_dshxx74ax().s[358]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[359]++, await client.getWorkflow(args.workflowId));
        /* istanbul ignore next */
        cov_dshxx74ax().s[360]++;
        if (
        /* istanbul ignore next */
        (cov_dshxx74ax().b[96][0]++, !workflow.nodes) ||
        /* istanbul ignore next */
        (cov_dshxx74ax().b[96][1]++, workflow.nodes.length === 0)) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[95][0]++;
          cov_dshxx74ax().s[361]++;
          return `Workflow "${workflow.name}" has no nodes to optimize.`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[95][1]++;
        }
        let suggestions =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[362]++, `# Optimization Suggestions: "${workflow.name}"\n\n`);
        /* istanbul ignore next */
        cov_dshxx74ax().s[363]++;
        suggestions += `**Analysis Date**: ${new Date().toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[364]++;
        suggestions += `**Focus Areas**: ${args.focusAreas.join(', ')}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[365]++;
        suggestions += `**Priority Filter**: ${args.priority}\n\n`;
        const optimizations =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[366]++, []);
        // Analyze workflow structure
        const nodeCount =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[367]++, workflow.nodes.length);
        const nodeTypes =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[368]++, workflow.nodes.reduce((types, node) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[58]++;
          cov_dshxx74ax().s[369]++;
          types[node.type] = (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[97][0]++, types[node.type]) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[97][1]++, 0)) + 1;
          /* istanbul ignore next */
          cov_dshxx74ax().s[370]++;
          return types;
        }, {}));
        const _connections =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[371]++, Object.keys(
        /* istanbul ignore next */
        (cov_dshxx74ax().b[98][0]++, workflow.connections) ||
        /* istanbul ignore next */
        (cov_dshxx74ax().b[98][1]++, {})).length);
        // Performance optimizations
        /* istanbul ignore next */
        cov_dshxx74ax().s[372]++;
        if (args.focusAreas.includes('performance')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[99][0]++;
          // Check for HTTP request optimization
          const httpNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[373]++, Object.entries(nodeTypes).filter(([type]) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[59]++;
            cov_dshxx74ax().s[374]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[100][0]++, type.toLowerCase().includes('http')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[100][1]++, type.toLowerCase().includes('webhook'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[375]++;
          if (httpNodes.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[101][0]++;
            const totalHttpNodes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[376]++, httpNodes.reduce((sum, [, count]) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[60]++;
              cov_dshxx74ax().s[377]++;
              return sum + count;
            }, 0));
            /* istanbul ignore next */
            cov_dshxx74ax().s[378]++;
            if (totalHttpNodes > 5) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[102][0]++;
              cov_dshxx74ax().s[379]++;
              optimizations.push({
                category: 'Performance',
                priority: 'high',
                title: 'Optimize HTTP Request Patterns',
                description: `Found ${totalHttpNodes} HTTP/webhook nodes. Multiple sequential HTTP requests can significantly impact performance.`,
                impact: 'High - Can reduce execution time by 30-70%',
                effort: 'Medium - Requires workflow restructuring',
                implementation: ['Batch HTTP requests where possible', 'Implement parallel execution for independent requests', 'Add request caching for frequently accessed data', 'Use HTTP request node pooling settings', 'Consider using bulk API endpoints']
              });
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[102][1]++;
            }
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[101][1]++;
          }
          // Check for code node optimization
          const codeNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[380]++, Object.entries(nodeTypes).filter(([type]) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[61]++;
            cov_dshxx74ax().s[381]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[103][0]++, type.toLowerCase().includes('code')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[103][1]++, type.toLowerCase().includes('function'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[382]++;
          if (codeNodes.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[104][0]++;
            cov_dshxx74ax().s[383]++;
            optimizations.push({
              category: 'Performance',
              priority: 'medium',
              title: 'Code Node Performance Review',
              description: 'Custom code nodes can be performance bottlenecks if not optimized properly.',
              impact: 'Medium - Can improve execution speed by 20-40%',
              effort: 'Low - Code review and optimization',
              implementation: ['Review custom code for inefficient loops or operations', 'Minimize external library usage in code nodes', 'Use built-in n8n nodes instead of custom code where possible', 'Implement proper error handling in code nodes', 'Consider moving complex logic to external services']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[104][1]++;
          }
          // Check workflow size
          cov_dshxx74ax().s[384]++;
          if (nodeCount > 30) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[105][0]++;
            cov_dshxx74ax().s[385]++;
            optimizations.push({
              category: 'Performance',
              priority: nodeCount > 50 ?
              /* istanbul ignore next */
              (cov_dshxx74ax().b[106][0]++, 'critical') :
              /* istanbul ignore next */
              (cov_dshxx74ax().b[106][1]++, 'high'),
              title: 'Workflow Size Optimization',
              description: `Large workflow with ${nodeCount} nodes may have performance and maintainability issues.`,
              impact: 'High - Improves execution speed and reliability',
              effort: 'High - Requires workflow restructuring',
              implementation: ['Break workflow into smaller, focused sub-workflows', 'Use workflow triggers to chain related processes', 'Implement modular design patterns', 'Consider using n8n sub-workflow nodes', 'Document workflow dependencies and data flow']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[105][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[99][1]++;
        }
        // Reliability optimizations
        cov_dshxx74ax().s[386]++;
        if (args.focusAreas.includes('reliability')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[107][0]++;
          // Check for error handling
          const errorHandlingNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[387]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[62]++;
            cov_dshxx74ax().s[388]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[108][0]++, node.parameters) &&
            /* istanbul ignore next */
            (cov_dshxx74ax().b[108][1]++, JSON.stringify(node.parameters).toLowerCase().includes('error'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[389]++;
          if (errorHandlingNodes.length < Math.ceil(nodeCount * 0.1)) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[109][0]++;
            cov_dshxx74ax().s[390]++;
            optimizations.push({
              category: 'Reliability',
              priority: 'high',
              title: 'Implement Comprehensive Error Handling',
              description: 'Insufficient error handling detected. Robust error handling is crucial for workflow reliability.',
              impact: 'High - Significantly improves workflow reliability',
              effort: 'Medium - Add error handling nodes and logic',
              implementation: ['Add error handling nodes after critical operations', 'Implement retry logic for transient failures', 'Set up error notification workflows', 'Use try-catch patterns in code nodes', 'Configure proper timeout values for external requests']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[109][1]++;
          }
          // Check for monitoring and logging
          const monitoringNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[391]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[63]++;
            cov_dshxx74ax().s[392]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[110][0]++, node.type.toLowerCase().includes('webhook')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[110][1]++, node.type.toLowerCase().includes('slack')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[110][2]++, node.type.toLowerCase().includes('email')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[110][3]++, node.type.toLowerCase().includes('log'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[393]++;
          if (monitoringNodes.length === 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[111][0]++;
            cov_dshxx74ax().s[394]++;
            optimizations.push({
              category: 'Reliability',
              priority: 'medium',
              title: 'Add Monitoring and Alerting',
              description: 'No monitoring or alerting nodes detected. Proper monitoring is essential for production workflows.',
              impact: 'Medium - Improves issue detection and resolution',
              effort: 'Low - Add monitoring nodes',
              implementation: ['Add Slack or email notification nodes for critical failures', 'Implement health check endpoints', 'Set up workflow execution logging', 'Create dashboards for workflow performance monitoring', 'Configure alerting thresholds']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[111][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[107][1]++;
        }
        // Maintainability optimizations
        cov_dshxx74ax().s[395]++;
        if (args.focusAreas.includes('maintainability')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[112][0]++;
          // Check for documentation
          const documentedNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[396]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[64]++;
            cov_dshxx74ax().s[397]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[113][0]++, node.notes) &&
            /* istanbul ignore next */
            (cov_dshxx74ax().b[113][1]++, node.notes.trim().length > 0);
          }));
          const documentationRatio =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[398]++, documentedNodes.length / nodeCount);
          /* istanbul ignore next */
          cov_dshxx74ax().s[399]++;
          if (documentationRatio < 0.3) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[114][0]++;
            cov_dshxx74ax().s[400]++;
            optimizations.push({
              category: 'Maintainability',
              priority: 'medium',
              title: 'Improve Workflow Documentation',
              description: `Only ${(documentationRatio * 100).toFixed(1)}% of nodes have documentation. Good documentation is crucial for maintainability.`,
              impact: 'Medium - Improves team collaboration and maintenance',
              effort: 'Low - Add node descriptions and comments',
              implementation: ['Add descriptive notes to all complex nodes', 'Document input/output data structures', 'Create workflow overview documentation', 'Use descriptive node names', 'Document any special configuration requirements']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[114][1]++;
          }
          // Check for node naming conventions
          const defaultNamedNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[401]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[65]++;
            cov_dshxx74ax().s[402]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[115][0]++, node.name === node.type) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[115][1]++, node.name.startsWith(node.type)) &&
            /* istanbul ignore next */
            (cov_dshxx74ax().b[115][2]++, node.name.length < node.type.length + 5);
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[403]++;
          if (defaultNamedNodes.length > nodeCount * 0.5) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[116][0]++;
            cov_dshxx74ax().s[404]++;
            optimizations.push({
              category: 'Maintainability',
              priority: 'low',
              title: 'Improve Node Naming Conventions',
              description: 'Many nodes are using default names, which makes the workflow harder to understand.',
              impact: 'Low - Improves workflow readability',
              effort: 'Low - Rename nodes with descriptive names',
              implementation: ['Use descriptive, business-focused node names', 'Follow consistent naming conventions', 'Include the purpose or data being processed in names', 'Avoid technical jargon in node names', 'Use action-oriented naming (e.g., "Send Welcome Email")']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[116][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[112][1]++;
        }
        // Cost optimizations
        cov_dshxx74ax().s[405]++;
        if (args.focusAreas.includes('cost')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[117][0]++;
          // Check for inefficient operations
          const expensiveOperations =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[406]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[66]++;
            const type =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[407]++, node.type.toLowerCase());
            /* istanbul ignore next */
            cov_dshxx74ax().s[408]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[118][0]++, type.includes('http')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[118][1]++, type.includes('webhook')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[118][2]++, type.includes('ai')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[118][3]++, type.includes('openai')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[118][4]++, type.includes('anthropic'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[409]++;
          if (expensiveOperations.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[119][0]++;
            cov_dshxx74ax().s[410]++;
            optimizations.push({
              category: 'Cost',
              priority: 'medium',
              title: 'Optimize External Service Usage',
              description: `Found ${expensiveOperations.length} nodes that may incur external costs. Optimization can reduce operational expenses.`,
              impact: 'Medium - Can reduce operational costs by 20-50%',
              effort: 'Medium - Requires optimization of external calls',
              implementation: ['Implement caching for frequently requested data', 'Batch API requests to reduce call volume', 'Use webhook endpoints instead of polling where possible', 'Optimize AI prompts to reduce token usage', 'Consider using less expensive alternative services']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[119][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[117][1]++;
        }
        // Security optimizations
        cov_dshxx74ax().s[411]++;
        if (args.focusAreas.includes('security')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[120][0]++;
          // Check for credential usage
          const nodesWithCredentials =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[412]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[67]++;
            cov_dshxx74ax().s[413]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[121][0]++, node.credentials) &&
            /* istanbul ignore next */
            (cov_dshxx74ax().b[121][1]++, Object.keys(node.credentials).length > 0);
          }));
          const credentialTypes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[414]++, [...new Set(nodesWithCredentials.flatMap(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[68]++;
            cov_dshxx74ax().s[415]++;
            return Object.keys(
            /* istanbul ignore next */
            (cov_dshxx74ax().b[122][0]++, node.credentials) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[122][1]++, {}));
          }))]);
          /* istanbul ignore next */
          cov_dshxx74ax().s[416]++;
          if (credentialTypes.length > 3) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[123][0]++;
            cov_dshxx74ax().s[417]++;
            optimizations.push({
              category: 'Security',
              priority: 'high',
              title: 'Consolidate and Review Credentials',
              description: `Workflow uses ${credentialTypes.length} different credential types. Review for security best practices.`,
              impact: 'High - Improves security posture',
              effort: 'Medium - Review and consolidate credentials',
              implementation: ['Audit all credential usage and permissions', 'Use least-privilege principle for API access', 'Regularly rotate credentials used in workflows', 'Consider using service accounts instead of user credentials', 'Implement credential usage monitoring']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[123][1]++;
          }
          // Check for data handling
          const dataProcessingNodes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[418]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[69]++;
            const type =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[419]++, node.type.toLowerCase());
            /* istanbul ignore next */
            cov_dshxx74ax().s[420]++;
            return /* istanbul ignore next */(cov_dshxx74ax().b[124][0]++, type.includes('set')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[124][1]++, type.includes('code')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[124][2]++, type.includes('function')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[124][3]++, type.includes('merge'));
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[421]++;
          if (dataProcessingNodes.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[125][0]++;
            cov_dshxx74ax().s[422]++;
            optimizations.push({
              category: 'Security',
              priority: 'medium',
              title: 'Review Data Processing Security',
              description: 'Workflow processes data through multiple nodes. Ensure sensitive data is handled securely.',
              impact: 'Medium - Improves data security compliance',
              effort: 'Medium - Review and secure data processing',
              implementation: ['Identify and classify sensitive data in the workflow', 'Implement data encryption for sensitive information', 'Add data validation and sanitization', 'Review data retention and deletion policies', 'Ensure compliance with data protection regulations']
            });
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[125][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[120][1]++;
        }
        // Filter by priority
        const filteredOptimizations =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[423]++, args.priority === 'all' ?
        /* istanbul ignore next */
        (cov_dshxx74ax().b[126][0]++, optimizations) :
        /* istanbul ignore next */
        (cov_dshxx74ax().b[126][1]++, optimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[70]++;
          cov_dshxx74ax().s[424]++;
          return opt.priority === args.priority;
        })));
        /* istanbul ignore next */
        cov_dshxx74ax().s[425]++;
        if (filteredOptimizations.length === 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[127][0]++;
          cov_dshxx74ax().s[426]++;
          suggestions += `No optimization suggestions found for the specified criteria.\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[427]++;
          suggestions += `Try adjusting the focus areas or priority level to see more suggestions.`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[428]++;
          return suggestions;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[127][1]++;
        }
        // Sort by priority
        const priorityOrder =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[429]++, {
          critical: 0,
          high: 1,
          medium: 2,
          low: 3
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[430]++;
        filteredOptimizations.sort((a, b) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[71]++;
          cov_dshxx74ax().s[431]++;
          return priorityOrder[a.priority] - priorityOrder[b.priority];
        });
        // Group by category
        const categorizedSuggestions =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[432]++, filteredOptimizations.reduce((groups, opt) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[72]++;
          cov_dshxx74ax().s[433]++;
          if (!groups[opt.category]) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[128][0]++;
            cov_dshxx74ax().s[434]++;
            groups[opt.category] = [];
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[128][1]++;
          }
          cov_dshxx74ax().s[435]++;
          groups[opt.category].push(opt);
          /* istanbul ignore next */
          cov_dshxx74ax().s[436]++;
          return groups;
        }, {}));
        // Generate suggestions by category
        /* istanbul ignore next */
        cov_dshxx74ax().s[437]++;
        Object.entries(categorizedSuggestions).forEach(([category, categoryOptimizations]) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[73]++;
          cov_dshxx74ax().s[438]++;
          suggestions += `## ${category} Optimizations\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[439]++;
          categoryOptimizations.forEach((opt, index) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[74]++;
            const priorityIcon =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[440]++, opt.priority === 'critical' ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[129][0]++, '🔴') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[129][1]++, opt.priority === 'high' ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[130][0]++, '🟠') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[130][1]++, opt.priority === 'medium' ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[131][0]++, '🟡') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[131][1]++, '🟢'))));
            /* istanbul ignore next */
            cov_dshxx74ax().s[441]++;
            suggestions += `### ${index + 1}. ${opt.title} ${priorityIcon}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[442]++;
            suggestions += `**Priority**: ${opt.priority.charAt(0).toUpperCase() + opt.priority.slice(1)}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[443]++;
            suggestions += `**Description**: ${opt.description}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[444]++;
            suggestions += `**Expected Impact**: ${opt.impact}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[445]++;
            suggestions += `**Implementation Effort**: ${opt.effort}\n\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[446]++;
            suggestions += `**Implementation Steps**:\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[447]++;
            opt.implementation.forEach((step, stepIndex) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[75]++;
              cov_dshxx74ax().s[448]++;
              suggestions += `${stepIndex + 1}. ${step}\n`;
            });
            /* istanbul ignore next */
            cov_dshxx74ax().s[449]++;
            suggestions += '\n';
          });
        });
        // Summary and next steps
        /* istanbul ignore next */
        cov_dshxx74ax().s[450]++;
        suggestions += `## 📋 Summary\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[451]++;
        suggestions += `- **Total Suggestions**: ${filteredOptimizations.length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[452]++;
        suggestions += `- **Critical Priority**: ${filteredOptimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[76]++;
          cov_dshxx74ax().s[453]++;
          return opt.priority === 'critical';
        }).length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[454]++;
        suggestions += `- **High Priority**: ${filteredOptimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[77]++;
          cov_dshxx74ax().s[455]++;
          return opt.priority === 'high';
        }).length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[456]++;
        suggestions += `- **Medium Priority**: ${filteredOptimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[78]++;
          cov_dshxx74ax().s[457]++;
          return opt.priority === 'medium';
        }).length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[458]++;
        suggestions += `- **Low Priority**: ${filteredOptimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[79]++;
          cov_dshxx74ax().s[459]++;
          return opt.priority === 'low';
        }).length}\n\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[460]++;
        suggestions += `## 🎯 Recommended Action Plan\n`;
        const criticalAndHigh =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[461]++, filteredOptimizations.filter(opt => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[80]++;
          cov_dshxx74ax().s[462]++;
          return /* istanbul ignore next */(cov_dshxx74ax().b[132][0]++, opt.priority === 'critical') ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[132][1]++, opt.priority === 'high');
        }));
        /* istanbul ignore next */
        cov_dshxx74ax().s[463]++;
        if (criticalAndHigh.length > 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[133][0]++;
          cov_dshxx74ax().s[464]++;
          suggestions += `1. **Immediate Action**: Address ${criticalAndHigh.length} critical/high priority optimization(s)\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[465]++;
          suggestions += `2. **Short Term**: Plan implementation of medium priority optimizations\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[466]++;
          suggestions += `3. **Long Term**: Consider low priority improvements during maintenance cycles\n`;
        } else {
          /* istanbul ignore next */
          cov_dshxx74ax().b[133][1]++;
          cov_dshxx74ax().s[467]++;
          suggestions += `1. **Maintenance**: Implement medium and low priority optimizations during regular maintenance\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[468]++;
          suggestions += `2. **Monitoring**: Set up performance monitoring to track optimization effectiveness\n`;
        }
        /* istanbul ignore next */
        cov_dshxx74ax().s[469]++;
        suggestions += `\n## 🔧 Additional Tools\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[470]++;
        suggestions += `- Use \`identify-bottlenecks\` to find specific performance issues\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[471]++;
        suggestions += `- Use \`analyze-workflow-complexity\` for detailed structure analysis\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[472]++;
        suggestions += `- Use \`track-workflow-performance\` to monitor optimization results\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[473]++;
        return suggestions;
      } catch (error) {
        /* istanbul ignore next */
        cov_dshxx74ax().s[474]++;
        throw new UserError(`Failed to get optimization suggestions: ${error.message}`);
      }
    }
  });
  // Compare workflows
  /* istanbul ignore next */
  cov_dshxx74ax().s[475]++;
  server.addTool({
    name: 'compare-workflows',
    description: 'Compare multiple workflows across various metrics to identify patterns, best practices, and optimization opportunities',
    parameters: WorkflowComparisonSchema,
    annotations: {
      title: 'Compare Workflows',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_dshxx74ax().f[81]++;
      const client =
      /* istanbul ignore next */
      (cov_dshxx74ax().s[476]++, getClient());
      /* istanbul ignore next */
      cov_dshxx74ax().s[477]++;
      if (!client) {
        /* istanbul ignore next */
        cov_dshxx74ax().b[134][0]++;
        cov_dshxx74ax().s[478]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_dshxx74ax().b[134][1]++;
      }
      cov_dshxx74ax().s[479]++;
      try {
        const workflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[480]++, []);
        const workflowData =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[481]++, []);
        // Fetch all workflows
        /* istanbul ignore next */
        cov_dshxx74ax().s[482]++;
        for (const workflowId of args.workflowIds) {
          /* istanbul ignore next */
          cov_dshxx74ax().s[483]++;
          try {
            const workflow =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[484]++, await client.getWorkflow(workflowId));
            /* istanbul ignore next */
            cov_dshxx74ax().s[485]++;
            workflows.push(workflow);
          } catch (_error) {
            /* istanbul ignore next */
            cov_dshxx74ax().s[486]++;
            throw new UserError(`Workflow with ID "${workflowId}" not found`);
          }
        }
        // Calculate metrics for each workflow
        /* istanbul ignore next */
        cov_dshxx74ax().s[487]++;
        for (const workflow of workflows) {
          const nodeCount =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[488]++,
          /* istanbul ignore next */
          (cov_dshxx74ax().b[135][0]++, workflow.nodes?.length) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[135][1]++, 0));
          const uniqueNodeTypes =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[489]++, workflow.nodes ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[136][0]++, [...new Set(workflow.nodes.map(node => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[82]++;
            cov_dshxx74ax().s[490]++;
            return node.type;
          }))].length) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[136][1]++, 0));
          const _connections =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[491]++, Object.keys(
          /* istanbul ignore next */
          (cov_dshxx74ax().b[137][0]++, workflow.connections) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[137][1]++, {})).length);
          // Calculate complexity
          const cognitiveComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[492]++, (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[138][0]++, workflow.nodes) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[138][1]++, [])).reduce((complexity, node) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[83]++;
            const nodeType =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[493]++, node.type.toLowerCase());
            let nodeComplexity =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[494]++, 1);
            /* istanbul ignore next */
            cov_dshxx74ax().s[495]++;
            if (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[140][0]++, nodeType.includes('if')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[140][1]++, nodeType.includes('switch')) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[140][2]++, nodeType.includes('merge'))) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[139][0]++;
              cov_dshxx74ax().s[496]++;
              nodeComplexity += 2;
            } else {
              /* istanbul ignore next */
              cov_dshxx74ax().b[139][1]++;
              cov_dshxx74ax().s[497]++;
              if (
              /* istanbul ignore next */
              (cov_dshxx74ax().b[142][0]++, nodeType.includes('loop')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[142][1]++, nodeType.includes('split'))) {
                /* istanbul ignore next */
                cov_dshxx74ax().b[141][0]++;
                cov_dshxx74ax().s[498]++;
                nodeComplexity += 3;
              } else {
                /* istanbul ignore next */
                cov_dshxx74ax().b[141][1]++;
                cov_dshxx74ax().s[499]++;
                if (
                /* istanbul ignore next */
                (cov_dshxx74ax().b[144][0]++, nodeType.includes('code')) ||
                /* istanbul ignore next */
                (cov_dshxx74ax().b[144][1]++, nodeType.includes('function'))) {
                  /* istanbul ignore next */
                  cov_dshxx74ax().b[143][0]++;
                  cov_dshxx74ax().s[500]++;
                  nodeComplexity += 1;
                } else
                /* istanbul ignore next */
                {
                  cov_dshxx74ax().b[143][1]++;
                }
              }
            }
            /* istanbul ignore next */
            cov_dshxx74ax().s[501]++;
            return complexity + nodeComplexity;
          }, 0));
          // Calculate maintainability index
          const typeComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[502]++, nodeCount > 0 ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[145][0]++, uniqueNodeTypes / nodeCount) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[145][1]++, 0));
          const avgNodeComplexity =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[503]++, nodeCount > 0 ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[146][0]++, cognitiveComplexity / nodeCount) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[146][1]++, 0));
          const maintainabilityIndex =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[504]++, Math.max(0, Math.min(100, 100 - avgNodeComplexity * 10 - typeComplexity * 20 - _connections * 2)));
          let performanceMetrics;
          // Try to get performance data
          /* istanbul ignore next */
          cov_dshxx74ax().s[505]++;
          if (args.metrics.includes('performance')) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[147][0]++;
            cov_dshxx74ax().s[506]++;
            try {
              const executions =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[507]++, await client.getExecutions({
                limit: 100
              }));
              const workflowExecutions =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[508]++, executions.data.filter(exec => {
                /* istanbul ignore next */
                cov_dshxx74ax().f[84]++;
                cov_dshxx74ax().s[509]++;
                return exec.workflowId === workflow.id;
              }));
              /* istanbul ignore next */
              cov_dshxx74ax().s[510]++;
              if (workflowExecutions.length > 0) {
                /* istanbul ignore next */
                cov_dshxx74ax().b[148][0]++;
                const successfulExecutions =
                /* istanbul ignore next */
                (cov_dshxx74ax().s[511]++, workflowExecutions.filter(exec => {
                  /* istanbul ignore next */
                  cov_dshxx74ax().f[85]++;
                  cov_dshxx74ax().s[512]++;
                  return /* istanbul ignore next */(cov_dshxx74ax().b[149][0]++, exec.status === 'success') &&
                  /* istanbul ignore next */
                  (cov_dshxx74ax().b[149][1]++, exec.stoppedAt);
                }));
                const avgExecutionTime =
                /* istanbul ignore next */
                (cov_dshxx74ax().s[513]++, successfulExecutions.length > 0 ?
                /* istanbul ignore next */
                (cov_dshxx74ax().b[150][0]++, successfulExecutions.reduce((sum, exec) => {
                  /* istanbul ignore next */
                  cov_dshxx74ax().f[86]++;
                  const duration =
                  /* istanbul ignore next */
                  (cov_dshxx74ax().s[514]++, new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime());
                  /* istanbul ignore next */
                  cov_dshxx74ax().s[515]++;
                  return sum + duration;
                }, 0) / successfulExecutions.length) :
                /* istanbul ignore next */
                (cov_dshxx74ax().b[150][1]++, 0));
                const successRate =
                /* istanbul ignore next */
                (cov_dshxx74ax().s[516]++, successfulExecutions.length / workflowExecutions.length * 100);
                /* istanbul ignore next */
                cov_dshxx74ax().s[517]++;
                performanceMetrics = {
                  avgExecutionTime,
                  successRate,
                  executionCount: workflowExecutions.length
                };
              } else
              /* istanbul ignore next */
              {
                cov_dshxx74ax().b[148][1]++;
              }
            } catch (_error) {
              // Performance data not available
            }
          } else
          /* istanbul ignore next */
          {
            cov_dshxx74ax().b[147][1]++;
          }
          cov_dshxx74ax().s[518]++;
          workflowData.push({
            workflow,
            metrics: {
              complexity: cognitiveComplexity,
              nodeCount,
              connections: _connections,
              uniqueNodeTypes,
              maintainabilityIndex,
              performance: performanceMetrics
            }
          });
        }
        let comparison =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[519]++, `# Workflow Comparison Report\n\n`);
        /* istanbul ignore next */
        cov_dshxx74ax().s[520]++;
        comparison += `**Comparison Date**: ${new Date().toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[521]++;
        comparison += `**Workflows Compared**: ${workflows.length}\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[522]++;
        comparison += `**Metrics Analyzed**: ${args.metrics.join(', ')}\n\n`;
        // Overview table
        /* istanbul ignore next */
        cov_dshxx74ax().s[523]++;
        comparison += `## 📊 Overview Comparison\n\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[524]++;
        comparison += `| Workflow | Status | Nodes | Types | Connections | Complexity |\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[525]++;
        comparison += `|----------|--------|-------|-------|-------------|------------|\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[526]++;
        workflowData.forEach(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[87]++;
          const statusIcon =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[527]++, data.workflow.active ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[151][0]++, '🟢') :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[151][1]++, '🔴'));
          /* istanbul ignore next */
          cov_dshxx74ax().s[528]++;
          comparison += `| ${data.workflow.name} | ${statusIcon} | ${data.metrics.nodeCount} | ${data.metrics.uniqueNodeTypes} | ${data.metrics.connections} | ${data.metrics.complexity} |\n`;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[529]++;
        comparison += '\n';
        // Detailed metrics comparison
        /* istanbul ignore next */
        cov_dshxx74ax().s[530]++;
        if (args.metrics.includes('complexity')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[152][0]++;
          cov_dshxx74ax().s[531]++;
          comparison += `## 🧮 Complexity Analysis\n\n`;
          const complexityStats =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[532]++, {
            avg: workflowData.reduce((sum, data) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[88]++;
              cov_dshxx74ax().s[533]++;
              return sum + data.metrics.complexity;
            }, 0) / workflowData.length,
            min: Math.min(...workflowData.map(data => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[89]++;
              cov_dshxx74ax().s[534]++;
              return data.metrics.complexity;
            })),
            max: Math.max(...workflowData.map(data => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[90]++;
              cov_dshxx74ax().s[535]++;
              return data.metrics.complexity;
            }))
          });
          /* istanbul ignore next */
          cov_dshxx74ax().s[536]++;
          comparison += `**Complexity Statistics:**\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[537]++;
          comparison += `- Average: ${complexityStats.avg.toFixed(1)}\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[538]++;
          comparison += `- Range: ${complexityStats.min} - ${complexityStats.max}\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[539]++;
          workflowData.forEach(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[91]++;
            const complexityLevel =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[540]++, data.metrics.complexity <= 5 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[153][0]++, '🟢 Low') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[153][1]++, data.metrics.complexity <= 15 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[154][0]++, '🟡 Medium') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[154][1]++, data.metrics.complexity <= 25 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[155][0]++, '🟠 High') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[155][1]++, '🔴 Very High'))));
            /* istanbul ignore next */
            cov_dshxx74ax().s[541]++;
            comparison += `**${data.workflow.name}**: ${data.metrics.complexity} (${complexityLevel})\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[542]++;
            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[543]++;
            comparison += `- Node Type Diversity: ${(data.metrics.uniqueNodeTypes / data.metrics.nodeCount * 100).toFixed(1)}%\n\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[152][1]++;
        }
        cov_dshxx74ax().s[544]++;
        if (
        /* istanbul ignore next */
        (cov_dshxx74ax().b[157][0]++, args.metrics.includes('performance')) &&
        /* istanbul ignore next */
        (cov_dshxx74ax().b[157][1]++, workflowData.some(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[92]++;
          cov_dshxx74ax().s[545]++;
          return data.metrics.performance;
        }))) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[156][0]++;
          cov_dshxx74ax().s[546]++;
          comparison += `## ⚡ Performance Comparison\n\n`;
          const performanceData =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[547]++, workflowData.filter(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[93]++;
            cov_dshxx74ax().s[548]++;
            return data.metrics.performance;
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[549]++;
          if (performanceData.length > 0) {
            /* istanbul ignore next */
            cov_dshxx74ax().b[158][0]++;
            const avgExecutionTimes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[550]++, performanceData.map(data => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[94]++;
              cov_dshxx74ax().s[551]++;
              return data.metrics.performance.avgExecutionTime;
            }));
            const successRates =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[552]++, performanceData.map(data => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[95]++;
              cov_dshxx74ax().s[553]++;
              return data.metrics.performance.successRate;
            }));
            /* istanbul ignore next */
            cov_dshxx74ax().s[554]++;
            comparison += `**Performance Statistics:**\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[555]++;
            comparison += `- Average Execution Time: ${(avgExecutionTimes.reduce((a, b) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[96]++;
              cov_dshxx74ax().s[556]++;
              return a + b;
            }, 0) / avgExecutionTimes.length / 1000).toFixed(2)}s\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[557]++;
            comparison += `- Average Success Rate: ${(successRates.reduce((a, b) => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[97]++;
              cov_dshxx74ax().s[558]++;
              return a + b;
            }, 0) / successRates.length).toFixed(1)}%\n\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[559]++;
            performanceData.forEach(data => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[98]++;
              const perf =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[560]++, data.metrics.performance);
              const perfRating =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[561]++,
              /* istanbul ignore next */
              (cov_dshxx74ax().b[160][0]++, perf.avgExecutionTime < 5000) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[160][1]++, perf.successRate > 95) ?
              /* istanbul ignore next */
              (cov_dshxx74ax().b[159][0]++, '🟢 Excellent') :
              /* istanbul ignore next */
              (cov_dshxx74ax().b[159][1]++,
              /* istanbul ignore next */
              (cov_dshxx74ax().b[162][0]++, perf.avgExecutionTime < 15000) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[162][1]++, perf.successRate > 90) ?
              /* istanbul ignore next */
              (cov_dshxx74ax().b[161][0]++, '🟡 Good') :
              /* istanbul ignore next */
              (cov_dshxx74ax().b[161][1]++,
              /* istanbul ignore next */
              (cov_dshxx74ax().b[164][0]++, perf.avgExecutionTime < 30000) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[164][1]++, perf.successRate > 80) ?
              /* istanbul ignore next */
              (cov_dshxx74ax().b[163][0]++, '🟠 Fair') :
              /* istanbul ignore next */
              (cov_dshxx74ax().b[163][1]++, '🔴 Poor'))));
              /* istanbul ignore next */
              cov_dshxx74ax().s[562]++;
              comparison += `**${data.workflow.name}**: ${perfRating}\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[563]++;
              comparison += `- Avg Execution Time: ${(perf.avgExecutionTime / 1000).toFixed(2)}s\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[564]++;
              comparison += `- Success Rate: ${perf.successRate.toFixed(1)}%\n`;
              /* istanbul ignore next */
              cov_dshxx74ax().s[565]++;
              comparison += `- Executions Analyzed: ${perf.executionCount}\n\n`;
            });
          } else {
            /* istanbul ignore next */
            cov_dshxx74ax().b[158][1]++;
            cov_dshxx74ax().s[566]++;
            comparison += `No performance data available for the selected workflows.\n\n`;
          }
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[156][1]++;
        }
        cov_dshxx74ax().s[567]++;
        if (args.metrics.includes('reliability')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[165][0]++;
          cov_dshxx74ax().s[568]++;
          comparison += `## 🛡️ Reliability Analysis\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[569]++;
          workflowData.forEach(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[99]++;
            const errorHandling =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[570]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[166][0]++, data.workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[166][1]++, [])).filter(node => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[100]++;
              cov_dshxx74ax().s[571]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[167][0]++, node.parameters) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[167][1]++, JSON.stringify(node.parameters).toLowerCase().includes('error'));
            }).length);
            const monitoringNodes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[572]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[168][0]++, data.workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[168][1]++, [])).filter(node => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[101]++;
              cov_dshxx74ax().s[573]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[169][0]++, node.type.toLowerCase().includes('webhook')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[169][1]++, node.type.toLowerCase().includes('slack')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[169][2]++, node.type.toLowerCase().includes('email'));
            }).length);
            const reliabilityScore =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[574]++, errorHandling * 20 + monitoringNodes * 15 + (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[170][0]++, data.metrics.performance?.successRate) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[170][1]++, 50)));
            const reliabilityLevel =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[575]++, reliabilityScore >= 90 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[171][0]++, '🟢 High') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[171][1]++, reliabilityScore >= 70 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[172][0]++, '🟡 Medium') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[172][1]++, reliabilityScore >= 50 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[173][0]++, '🟠 Low') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[173][1]++, '🔴 Very Low'))));
            /* istanbul ignore next */
            cov_dshxx74ax().s[576]++;
            comparison += `**${data.workflow.name}**: ${reliabilityLevel} (${reliabilityScore.toFixed(0)}/100)\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[577]++;
            comparison += `- Error Handling Nodes: ${errorHandling}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[578]++;
            comparison += `- Monitoring/Alerting Nodes: ${monitoringNodes}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[579]++;
            if (data.metrics.performance) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[174][0]++;
              cov_dshxx74ax().s[580]++;
              comparison += `- Success Rate: ${data.metrics.performance.successRate.toFixed(1)}%\n`;
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[174][1]++;
            }
            cov_dshxx74ax().s[581]++;
            comparison += '\n';
          });
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[165][1]++;
        }
        cov_dshxx74ax().s[582]++;
        if (args.metrics.includes('maintainability')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[175][0]++;
          cov_dshxx74ax().s[583]++;
          comparison += `## 🔧 Maintainability Comparison\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[584]++;
          workflowData.forEach(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[102]++;
            const documentedNodes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[585]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[176][0]++, data.workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[176][1]++, [])).filter(node => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[103]++;
              cov_dshxx74ax().s[586]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[177][0]++, node.notes) &&
              /* istanbul ignore next */
              (cov_dshxx74ax().b[177][1]++, node.notes.trim().length > 0);
            }).length);
            const documentationRatio =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[587]++, data.metrics.nodeCount > 0 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[178][0]++, documentedNodes / data.metrics.nodeCount * 100) :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[178][1]++, 0));
            const maintainabilityLevel =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[588]++, data.metrics.maintainabilityIndex >= 80 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[179][0]++, '🟢 High') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[179][1]++, data.metrics.maintainabilityIndex >= 60 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[180][0]++, '🟡 Medium') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[180][1]++, data.metrics.maintainabilityIndex >= 40 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[181][0]++, '🟠 Low') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[181][1]++, '🔴 Very Low'))));
            /* istanbul ignore next */
            cov_dshxx74ax().s[589]++;
            comparison += `**${data.workflow.name}**: ${maintainabilityLevel}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[590]++;
            comparison += `- Maintainability Index: ${data.metrics.maintainabilityIndex.toFixed(1)}/100\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[591]++;
            comparison += `- Documentation Coverage: ${documentationRatio.toFixed(1)}%\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[592]++;
            comparison += `- Node Type Diversity: ${data.metrics.uniqueNodeTypes}/${data.metrics.nodeCount}\n\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[175][1]++;
        }
        cov_dshxx74ax().s[593]++;
        if (args.metrics.includes('cost')) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[182][0]++;
          cov_dshxx74ax().s[594]++;
          comparison += `## 💰 Cost Analysis\n\n`;
          /* istanbul ignore next */
          cov_dshxx74ax().s[595]++;
          workflowData.forEach(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[104]++;
            const expensiveNodes =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[596]++, (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[183][0]++, data.workflow.nodes) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[183][1]++, [])).filter(node => {
              /* istanbul ignore next */
              cov_dshxx74ax().f[105]++;
              const type =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[597]++, node.type.toLowerCase());
              /* istanbul ignore next */
              cov_dshxx74ax().s[598]++;
              return /* istanbul ignore next */(cov_dshxx74ax().b[184][0]++, type.includes('http')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][1]++, type.includes('webhook')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][2]++, type.includes('ai')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][3]++, type.includes('openai')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][4]++, type.includes('anthropic')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][5]++, type.includes('mysql')) ||
              /* istanbul ignore next */
              (cov_dshxx74ax().b[184][6]++, type.includes('postgres'));
            }).length);
            const costRisk =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[599]++, expensiveNodes / data.metrics.nodeCount);
            const costLevel =
            /* istanbul ignore next */
            (cov_dshxx74ax().s[600]++, costRisk < 0.2 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[185][0]++, '🟢 Low') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[185][1]++, costRisk < 0.4 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[186][0]++, '🟡 Medium') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[186][1]++, costRisk < 0.6 ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[187][0]++, '🟠 High') :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[187][1]++, '🔴 Very High'))));
            /* istanbul ignore next */
            cov_dshxx74ax().s[601]++;
            comparison += `**${data.workflow.name}**: ${costLevel} Cost Risk\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[602]++;
            comparison += `- External Service Nodes: ${expensiveNodes}/${data.metrics.nodeCount}\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[603]++;
            comparison += `- Cost Risk Ratio: ${(costRisk * 100).toFixed(1)}%\n`;
            /* istanbul ignore next */
            cov_dshxx74ax().s[604]++;
            if (data.metrics.performance) {
              /* istanbul ignore next */
              cov_dshxx74ax().b[188][0]++;
              const estimatedMonthlyCost =
              /* istanbul ignore next */
              (cov_dshxx74ax().s[605]++, expensiveNodes * data.metrics.performance.executionCount * 0.01 * 30);
              /* istanbul ignore next */
              cov_dshxx74ax().s[606]++;
              comparison += `- Estimated Monthly Cost: $${estimatedMonthlyCost.toFixed(2)}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_dshxx74ax().b[188][1]++;
            }
            cov_dshxx74ax().s[607]++;
            comparison += '\n';
          });
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[182][1]++;
        }
        // Best practices identification
        cov_dshxx74ax().s[608]++;
        comparison += `## 🏆 Best Practices Identified\n\n`;
        const bestComplexity =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[609]++, workflowData.reduce((best, current) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[106]++;
          cov_dshxx74ax().s[610]++;
          return current.metrics.complexity < best.metrics.complexity ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[189][0]++, current) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[189][1]++, best);
        }));
        const bestMaintainability =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[611]++, workflowData.reduce((best, current) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[107]++;
          cov_dshxx74ax().s[612]++;
          return current.metrics.maintainabilityIndex > best.metrics.maintainabilityIndex ?
          /* istanbul ignore next */
          (cov_dshxx74ax().b[190][0]++, current) :
          /* istanbul ignore next */
          (cov_dshxx74ax().b[190][1]++, best);
        }));
        /* istanbul ignore next */
        cov_dshxx74ax().s[613]++;
        comparison += `**Lowest Complexity**: ${bestComplexity.workflow.name} (${bestComplexity.metrics.complexity})\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[614]++;
        comparison += `**Highest Maintainability**: ${bestMaintainability.workflow.name} (${bestMaintainability.metrics.maintainabilityIndex.toFixed(1)}/100)\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[615]++;
        if (workflowData.some(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[108]++;
          cov_dshxx74ax().s[616]++;
          return data.metrics.performance;
        })) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[191][0]++;
          const bestPerformance =
          /* istanbul ignore next */
          (cov_dshxx74ax().s[617]++, workflowData.filter(data => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[109]++;
            cov_dshxx74ax().s[618]++;
            return data.metrics.performance;
          }).reduce((best, current) => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[110]++;
            cov_dshxx74ax().s[619]++;
            return current.metrics.performance.successRate > (
            /* istanbul ignore next */
            (cov_dshxx74ax().b[193][0]++, best.metrics.performance?.successRate) ||
            /* istanbul ignore next */
            (cov_dshxx74ax().b[193][1]++, 0)) ?
            /* istanbul ignore next */
            (cov_dshxx74ax().b[192][0]++, current) :
            /* istanbul ignore next */
            (cov_dshxx74ax().b[192][1]++, best);
          }));
          /* istanbul ignore next */
          cov_dshxx74ax().s[620]++;
          comparison += `**Best Performance**: ${bestPerformance.workflow.name} (${bestPerformance.metrics.performance.successRate.toFixed(1)}% success rate)\n`;
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[191][1]++;
        }
        // Recommendations
        cov_dshxx74ax().s[621]++;
        comparison += `\n## 💡 Recommendations\n\n`;
        const recommendations =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[622]++, []);
        const highComplexityWorkflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[623]++, workflowData.filter(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[111]++;
          cov_dshxx74ax().s[624]++;
          return data.metrics.complexity > 20;
        }));
        /* istanbul ignore next */
        cov_dshxx74ax().s[625]++;
        if (highComplexityWorkflows.length > 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[194][0]++;
          cov_dshxx74ax().s[626]++;
          recommendations.push(`**Complexity Reduction**: ${highComplexityWorkflows.map(d => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[112]++;
            cov_dshxx74ax().s[627]++;
            return d.workflow.name;
          }).join(', ')} have high complexity and should be reviewed for simplification`);
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[194][1]++;
        }
        const lowMaintainabilityWorkflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[628]++, workflowData.filter(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[113]++;
          cov_dshxx74ax().s[629]++;
          return data.metrics.maintainabilityIndex < 60;
        }));
        /* istanbul ignore next */
        cov_dshxx74ax().s[630]++;
        if (lowMaintainabilityWorkflows.length > 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[195][0]++;
          cov_dshxx74ax().s[631]++;
          recommendations.push(`**Maintainability Improvement**: ${lowMaintainabilityWorkflows.map(d => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[114]++;
            cov_dshxx74ax().s[632]++;
            return d.workflow.name;
          }).join(', ')} need better documentation and structure`);
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[195][1]++;
        }
        const poorPerformanceWorkflows =
        /* istanbul ignore next */
        (cov_dshxx74ax().s[633]++, workflowData.filter(data => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[115]++;
          cov_dshxx74ax().s[634]++;
          return /* istanbul ignore next */(cov_dshxx74ax().b[196][0]++, data.metrics.performance) && (
          /* istanbul ignore next */
          (cov_dshxx74ax().b[196][1]++, data.metrics.performance.successRate < 90) ||
          /* istanbul ignore next */
          (cov_dshxx74ax().b[196][2]++, data.metrics.performance.avgExecutionTime > 30000));
        }));
        /* istanbul ignore next */
        cov_dshxx74ax().s[635]++;
        if (poorPerformanceWorkflows.length > 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[197][0]++;
          cov_dshxx74ax().s[636]++;
          recommendations.push(`**Performance Optimization**: ${poorPerformanceWorkflows.map(d => {
            /* istanbul ignore next */
            cov_dshxx74ax().f[116]++;
            cov_dshxx74ax().s[637]++;
            return d.workflow.name;
          }).join(', ')} need performance improvements`);
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[197][1]++;
        }
        cov_dshxx74ax().s[638]++;
        if (recommendations.length === 0) {
          /* istanbul ignore next */
          cov_dshxx74ax().b[198][0]++;
          cov_dshxx74ax().s[639]++;
          recommendations.push('All workflows appear to be well-structured and performing adequately');
        } else
        /* istanbul ignore next */
        {
          cov_dshxx74ax().b[198][1]++;
        }
        cov_dshxx74ax().s[640]++;
        recommendations.forEach((rec, index) => {
          /* istanbul ignore next */
          cov_dshxx74ax().f[117]++;
          cov_dshxx74ax().s[641]++;
          comparison += `${index + 1}. ${rec}\n`;
        });
        /* istanbul ignore next */
        cov_dshxx74ax().s[642]++;
        comparison += `\n## 🔧 Next Steps\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[643]++;
        comparison += `- Use \`get-optimization-suggestions\` for specific improvement recommendations\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[644]++;
        comparison += `- Use \`analyze-workflow-complexity\` for detailed analysis of individual workflows\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[645]++;
        comparison += `- Use \`identify-bottlenecks\` to find specific performance issues\n`;
        /* istanbul ignore next */
        cov_dshxx74ax().s[646]++;
        return comparison;
      } catch (error) {
        /* istanbul ignore next */
        cov_dshxx74ax().s[647]++;
        throw new UserError(`Failed to compare workflows: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,