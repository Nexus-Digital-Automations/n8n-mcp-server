f4ccb53ae1efc8122f0c2db959120b95
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock all dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('zod');
globals_1.jest.mock('../../src/client/n8nClient.js');
globals_1.jest.mock('../../src/tools/workflow.js');
globals_1.jest.mock('../../src/tools/projects.js');
globals_1.jest.mock('../../src/tools/users.js');
globals_1.jest.mock('../../src/tools/variables.js');
globals_1.jest.mock('../../src/tools/executions.js');
globals_1.jest.mock('../../src/tools/tags.js');
globals_1.jest.mock('../../src/tools/credentials.js');
globals_1.jest.mock('../../src/tools/audit.js');
globals_1.jest.mock('../../src/transport/transportConfig.js');
globals_1.jest.mock('../../src/transport/sseTransport.js');
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('src/index-fastmcp.ts - FastMCP Server Entry Point', () => {
    let mockFastMCP;
    let mockN8nClient;
    let mockConsoleLog;
    let mockConsoleError;
    let originalProcessExit;
    let originalProcessOn;
    // Mock tool creation functions
    const mockCreateWorkflowTools = globals_1.jest.fn();
    const mockCreateProjectTools = globals_1.jest.fn();
    const mockCreateUserTools = globals_1.jest.fn();
    const mockCreateVariableTools = globals_1.jest.fn();
    const mockCreateExecutionTools = globals_1.jest.fn();
    const mockCreateTagTools = globals_1.jest.fn();
    const mockCreateCredentialTools = globals_1.jest.fn();
    const mockCreateAuditTools = globals_1.jest.fn();
    // Mock transport functions
    const mockDetectTransportConfig = globals_1.jest.fn();
    const mockValidateTransportConfig = globals_1.jest.fn();
    const mockGetServerUrl = globals_1.jest.fn();
    const mockCreateSSETransport = globals_1.jest.fn();
    const mockSSEUtils = {
        validateConfig: globals_1.jest.fn(),
    };
    (0, globals_1.beforeEach)(() => {
        // Mock console methods
        mockConsoleLog = globals_1.jest.spyOn(console, 'log').mockImplementation(() => { });
        mockConsoleError = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
        // Mock process methods
        originalProcessExit = process.exit;
        originalProcessOn = process.on;
        process.exit = globals_1.jest.fn();
        process.on = globals_1.jest.fn();
        // Mock FastMCP instance
        mockFastMCP = {
            addTool: globals_1.jest.fn().mockReturnThis(),
            start: globals_1.jest.fn().mockResolvedValue(undefined),
            on: globals_1.jest.fn().mockReturnThis(),
        };
        fastmcp_1.FastMCP.mockImplementation(() => mockFastMCP);
        // Mock N8nClient
        mockN8nClient = {
            getWorkflows: globals_1.jest.fn().mockResolvedValue({ data: [] }),
        };
        // Setup mocks for imported functions
        const { createWorkflowTools } = globals_1.jest.requireMock('../../src/tools/workflow.js');
        const { createProjectTools } = globals_1.jest.requireMock('../../src/tools/projects.js');
        const { createUserTools } = globals_1.jest.requireMock('../../src/tools/users.js');
        const { createVariableTools } = globals_1.jest.requireMock('../../src/tools/variables.js');
        const { createExecutionTools } = globals_1.jest.requireMock('../../src/tools/executions.js');
        const { createTagTools } = globals_1.jest.requireMock('../../src/tools/tags.js');
        const { createCredentialTools } = globals_1.jest.requireMock('../../src/tools/credentials.js');
        const { createAuditTools } = globals_1.jest.requireMock('../../src/tools/audit.js');
        createWorkflowTools.mockImplementation(mockCreateWorkflowTools);
        createProjectTools.mockImplementation(mockCreateProjectTools);
        createUserTools.mockImplementation(mockCreateUserTools);
        createVariableTools.mockImplementation(mockCreateVariableTools);
        createExecutionTools.mockImplementation(mockCreateExecutionTools);
        createTagTools.mockImplementation(mockCreateTagTools);
        createCredentialTools.mockImplementation(mockCreateCredentialTools);
        createAuditTools.mockImplementation(mockCreateAuditTools);
        // Setup transport mocks
        const { detectTransportConfig, validateTransportConfig, getServerUrl } = globals_1.jest.requireMock('../../src/transport/transportConfig.js');
        const { createSSETransport, SSEUtils } = globals_1.jest.requireMock('../../src/transport/sseTransport.js');
        detectTransportConfig.mockImplementation(mockDetectTransportConfig);
        validateTransportConfig.mockImplementation(mockValidateTransportConfig);
        getServerUrl.mockImplementation(mockGetServerUrl);
        createSSETransport.mockImplementation(mockCreateSSETransport);
        SSEUtils.validateConfig = mockSSEUtils.validateConfig;
        // Clear all mocks
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // Restore original functions
        process.exit = originalProcessExit;
        process.on = originalProcessOn;
        mockConsoleLog.mockRestore();
        mockConsoleError.mockRestore();
    });
    (0, globals_1.describe)('FastMCP Server Initialization', () => {
        (0, globals_1.it)('should create FastMCP instance with correct configuration', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            (0, globals_1.expect)(fastmcp_1.FastMCP).toHaveBeenCalledWith({
                name: 'n8n-mcp-server',
                version: '2.0.0',
                instructions: globals_1.expect.stringContaining('This server provides comprehensive access to n8n workflows'),
            });
        });
        (0, globals_1.it)('should include comprehensive instructions in FastMCP config', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const config = fastmcp_1.FastMCP.mock.calls[0][0];
            (0, globals_1.expect)(config.instructions).toContain('Key Features:');
            (0, globals_1.expect)(config.instructions).toContain('Complete workflow management');
            (0, globals_1.expect)(config.instructions).toContain('User and project management');
            (0, globals_1.expect)(config.instructions).toContain('Execution monitoring');
            (0, globals_1.expect)(config.instructions).toContain('Getting Started:');
            (0, globals_1.expect)(config.instructions).toContain('init-n8n');
        });
    });
    (0, globals_1.describe)('Tool Registration', () => {
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
        });
        (0, globals_1.it)('should register all tool categories', () => {
            (0, globals_1.expect)(mockCreateWorkflowTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateProjectTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateUserTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateVariableTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateExecutionTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateTagTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateCredentialTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            (0, globals_1.expect)(mockCreateAuditTools).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
        });
        (0, globals_1.it)('should register tools with the same server instance', () => {
            const serverInstances = [
                mockCreateWorkflowTools.mock.calls[0][1],
                mockCreateProjectTools.mock.calls[0][1],
                mockCreateUserTools.mock.calls[0][1],
                mockCreateVariableTools.mock.calls[0][1],
                mockCreateExecutionTools.mock.calls[0][1],
                mockCreateTagTools.mock.calls[0][1],
                mockCreateCredentialTools.mock.calls[0][1],
                mockCreateAuditTools.mock.calls[0][1],
            ];
            // All should reference the same server instance
            serverInstances.forEach(instance => {
                (0, globals_1.expect)(instance).toBe(mockFastMCP);
            });
        });
        (0, globals_1.it)('should pass client getter function to all tool creators', () => {
            const clientGetters = [
                mockCreateWorkflowTools.mock.calls[0][0],
                mockCreateProjectTools.mock.calls[0][0],
                mockCreateUserTools.mock.calls[0][0],
                mockCreateVariableTools.mock.calls[0][0],
                mockCreateExecutionTools.mock.calls[0][0],
                mockCreateTagTools.mock.calls[0][0],
                mockCreateCredentialTools.mock.calls[0][0],
                mockCreateAuditTools.mock.calls[0][0],
            ];
            // All should be functions
            clientGetters.forEach(getter => {
                (0, globals_1.expect)(typeof getter).toBe('function');
            });
            // All should return null initially (no client set)
            clientGetters.forEach(getter => {
                (0, globals_1.expect)(getter()).toBeNull();
            });
        });
    });
    (0, globals_1.describe)('Custom Tools Registration', () => {
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
        });
        (0, globals_1.it)('should register init-n8n tool', () => {
            const initToolCalls = mockFastMCP.addTool.mock.calls.filter(call => call[0].name === 'init-n8n');
            (0, globals_1.expect)(initToolCalls).toHaveLength(1);
            const initTool = initToolCalls[0][0];
            (0, globals_1.expect)(initTool).toHaveProperty('name', 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('description');
            (0, globals_1.expect)(initTool).toHaveProperty('parameters');
            (0, globals_1.expect)(initTool).toHaveProperty('execute');
            (0, globals_1.expect)(initTool).toHaveProperty('annotations');
        });
        (0, globals_1.it)('should register status tool', () => {
            const statusToolCalls = mockFastMCP.addTool.mock.calls.filter(call => call[0].name === 'status');
            (0, globals_1.expect)(statusToolCalls).toHaveLength(1);
            const statusTool = statusToolCalls[0][0];
            (0, globals_1.expect)(statusTool).toHaveProperty('name', 'status');
            (0, globals_1.expect)(statusTool).toHaveProperty('description');
            (0, globals_1.expect)(statusTool).toHaveProperty('parameters');
            (0, globals_1.expect)(statusTool).toHaveProperty('execute');
            (0, globals_1.expect)(statusTool).toHaveProperty('annotations');
        });
        (0, globals_1.it)('should configure init-n8n tool with proper schema validation', () => {
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            (0, globals_1.expect)(initTool).toBeDefined();
            if (initTool) {
                (0, globals_1.expect)(initTool.annotations).toEqual({
                    title: 'Initialize n8n Connection',
                    readOnlyHint: false,
                    destructiveHint: false,
                    idempotentHint: true,
                    openWorldHint: true,
                });
            }
        });
        (0, globals_1.it)('should configure status tool with proper annotations', () => {
            const statusTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'status')?.[0];
            (0, globals_1.expect)(statusTool).toBeDefined();
            if (statusTool) {
                (0, globals_1.expect)(statusTool.annotations).toEqual({
                    title: 'Check n8n Connection Status',
                    readOnlyHint: true,
                    destructiveHint: false,
                    idempotentHint: true,
                    openWorldHint: true,
                });
            }
        });
    });
    (0, globals_1.describe)('init-n8n Tool Execution', () => {
        let initToolExecute;
        (0, globals_1.beforeEach)(async () => {
            // Mock N8nClient constructor
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                initToolExecute = initTool.execute;
            }
        });
        (0, globals_1.it)('should successfully initialize n8n connection', async () => {
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            const result = await initToolExecute(args);
            (0, globals_1.expect)(result).toBe('✅ Successfully connected to n8n instance at http://localhost:5678');
            (0, globals_1.expect)(mockN8nClient.getWorkflows).toHaveBeenCalledWith({ limit: 1 });
        });
        (0, globals_1.it)('should handle connection errors gracefully', async () => {
            mockN8nClient.getWorkflows.mockRejectedValueOnce(new Error('Connection failed'));
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            await (0, globals_1.expect)(initToolExecute(args)).rejects.toThrow('Failed to connect to n8n: Connection failed');
        });
        (0, globals_1.it)('should handle unknown connection errors', async () => {
            mockN8nClient.getWorkflows.mockRejectedValueOnce('Unknown error');
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            await (0, globals_1.expect)(initToolExecute(args)).rejects.toThrow('Failed to connect to n8n with unknown error');
        });
        (0, globals_1.it)('should set global client instance on successful connection', async () => {
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            await initToolExecute(args);
            // Test that client getter now returns the client
            const clientGetter = mockCreateWorkflowTools.mock.calls[0][0];
            (0, globals_1.expect)(clientGetter()).toBe(mockN8nClient);
        });
    });
    (0, globals_1.describe)('status Tool Execution', () => {
        let statusToolExecute;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const statusTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'status')?.[0];
            if (statusTool) {
                statusToolExecute = statusTool.execute;
            }
        });
        (0, globals_1.it)('should return not connected message when no client is set', async () => {
            const result = await statusToolExecute();
            (0, globals_1.expect)(result).toBe("❌ Not connected to n8n. Please run 'init-n8n' first.");
        });
        (0, globals_1.it)('should return connected status when client is working', async () => {
            // First initialize a client
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                await initTool.execute({
                    baseUrl: 'http://localhost:5678',
                    apiKey: 'test-api-key',
                });
            }
            // Now check status
            const result = await statusToolExecute();
            (0, globals_1.expect)(result).toBe('✅ Connected to n8n and ready to use.');
            (0, globals_1.expect)(mockN8nClient.getWorkflows).toHaveBeenCalledWith({ limit: 1 });
        });
        (0, globals_1.it)('should return connection error when client fails', async () => {
            // Initialize a client first
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                await initTool.execute({
                    baseUrl: 'http://localhost:5678',
                    apiKey: 'test-api-key',
                });
            }
            // Make subsequent calls fail
            mockN8nClient.getWorkflows.mockRejectedValueOnce(new Error('API Error'));
            const result = await statusToolExecute();
            (0, globals_1.expect)(result).toBe('⚠️ Connected but unable to communicate with n8n: API Error');
        });
        (0, globals_1.it)('should handle non-Error exceptions in status check', async () => {
            // Initialize a client first
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                await initTool.execute({
                    baseUrl: 'http://localhost:5678',
                    apiKey: 'test-api-key',
                });
            }
            // Make subsequent calls fail with non-Error
            mockN8nClient.getWorkflows.mockRejectedValueOnce('String error');
            const result = await statusToolExecute();
            (0, globals_1.expect)(result).toBe('⚠️ Connected but unable to communicate with n8n: String error');
        });
    });
    (0, globals_1.describe)('Server Startup with stdio Transport', () => {
        (0, globals_1.beforeEach)(() => {
            mockDetectTransportConfig.mockReturnValue({ type: 'stdio' });
            mockValidateTransportConfig.mockReturnValue({ type: 'stdio' });
        });
        (0, globals_1.it)('should start server with stdio transport', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // Wait for async operations to complete
            await Promise.resolve();
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🚀 Starting n8n MCP Server...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📡 Transport type: stdio');
            (0, globals_1.expect)(mockFastMCP.start).toHaveBeenCalledWith({ transportType: 'stdio' });
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📟 Server started with stdio transport');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ n8n MCP Server is ready!');
        });
        (0, globals_1.it)('should call transport detection and validation', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockDetectTransportConfig).toHaveBeenCalled();
            (0, globals_1.expect)(mockValidateTransportConfig).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Server Startup with SSE Transport', () => {
        const mockSSETransport = {
            start: globals_1.jest.fn().mockResolvedValue(undefined),
        };
        (0, globals_1.beforeEach)(() => {
            mockDetectTransportConfig.mockReturnValue({
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            mockValidateTransportConfig.mockReturnValue({
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            mockSSEUtils.validateConfig.mockReturnValue(true);
            mockCreateSSETransport.mockReturnValue(mockSSETransport);
            mockGetServerUrl.mockReturnValue('http://localhost:3000');
        });
        (0, globals_1.it)('should start server with SSE transport', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🚀 Starting n8n MCP Server...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📡 Transport type: sse');
            (0, globals_1.expect)(mockSSEUtils.validateConfig).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateSSETransport).toHaveBeenCalledWith(mockFastMCP, {
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            (0, globals_1.expect)(mockSSETransport.start).toHaveBeenCalled();
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🌐 Server URL: http://localhost:3000');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ n8n MCP Server is ready!');
        });
        (0, globals_1.it)('should handle invalid SSE configuration', async () => {
            mockSSEUtils.validateConfig.mockReturnValue(false);
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('❌ Invalid SSE configuration');
            (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(1);
        });
        (0, globals_1.it)('should handle missing server URL', async () => {
            mockGetServerUrl.mockReturnValue(null);
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockSSETransport.start).toHaveBeenCalled();
            (0, globals_1.expect)(mockConsoleLog).not.toHaveBeenCalledWith(globals_1.expect.stringContaining('🌐 Server URL:'));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ n8n MCP Server is ready!');
        });
    });
    (0, globals_1.describe)('Server Startup Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            mockDetectTransportConfig.mockReturnValue({ type: 'stdio' });
            mockValidateTransportConfig.mockReturnValue({ type: 'stdio' });
        });
        (0, globals_1.it)('should handle server startup errors', async () => {
            mockFastMCP.start.mockRejectedValueOnce(new Error('Server startup failed'));
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('❌ Failed to start server:', globals_1.expect.any(Error));
            (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(1);
        });
        (0, globals_1.it)('should handle SSE transport startup errors', async () => {
            mockDetectTransportConfig.mockReturnValue({ type: 'sse', port: 3000 });
            mockValidateTransportConfig.mockReturnValue({ type: 'sse', port: 3000 });
            mockSSEUtils.validateConfig.mockReturnValue(true);
            const mockSSETransport = {
                start: globals_1.jest
                    .fn()
                    .mockRejectedValueOnce(new Error('SSE startup failed')),
            };
            mockCreateSSETransport.mockReturnValue(mockSSETransport);
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await Promise.resolve();
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('❌ Failed to start server:', globals_1.expect.any(Error));
            (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(1);
        });
    });
    (0, globals_1.describe)('Process Signal Handling', () => {
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
        });
        (0, globals_1.it)('should register SIGINT handler', () => {
            (0, globals_1.expect)(process.on).toHaveBeenCalledWith('SIGINT', globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should register SIGTERM handler', () => {
            (0, globals_1.expect)(process.on).toHaveBeenCalledWith('SIGTERM', globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should handle SIGINT gracefully', () => {
            const sigintCall = process.on.mock.calls.find(call => call[0] === 'SIGINT');
            if (sigintCall) {
                const sigintHandler = sigintCall[1];
                sigintHandler();
                (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('Received SIGINT, shutting down gracefully...');
                (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(0);
            }
        });
        (0, globals_1.it)('should handle SIGTERM gracefully', () => {
            const sigtermCall = process.on.mock.calls.find(call => call[0] === 'SIGTERM');
            if (sigtermCall) {
                const sigtermHandler = sigtermCall[1];
                sigtermHandler();
                (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('Received SIGTERM, shutting down gracefully...');
                (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(0);
            }
        });
    });
    (0, globals_1.describe)('Global Client State Management', () => {
        let clientGetter;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            clientGetter = mockCreateWorkflowTools.mock.calls[0][0];
        });
        (0, globals_1.it)('should start with null client', () => {
            (0, globals_1.expect)(clientGetter()).toBeNull();
        });
        (0, globals_1.it)('should update global client after successful init', async () => {
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                await initTool.execute({
                    baseUrl: 'http://localhost:5678',
                    apiKey: 'test-api-key',
                });
            }
            (0, globals_1.expect)(clientGetter()).toBe(mockN8nClient);
        });
        (0, globals_1.it)('should maintain client state across multiple tool registrations', async () => {
            const { N8nClient } = globals_1.jest.requireMock('../../src/client/n8nClient.js');
            N8nClient.mockImplementation(() => mockN8nClient);
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            if (initTool) {
                await initTool.execute({
                    baseUrl: 'http://localhost:5678',
                    apiKey: 'test-api-key',
                });
            }
            // Check that all tool categories get the same client
            const allClientGetters = [
                mockCreateWorkflowTools.mock.calls[0][0],
                mockCreateProjectTools.mock.calls[0][0],
                mockCreateUserTools.mock.calls[0][0],
                mockCreateVariableTools.mock.calls[0][0],
                mockCreateExecutionTools.mock.calls[0][0],
                mockCreateTagTools.mock.calls[0][0],
                mockCreateCredentialTools.mock.calls[0][0],
                mockCreateAuditTools.mock.calls[0][0],
            ];
            allClientGetters.forEach(getter => {
                (0, globals_1.expect)(getter()).toBe(mockN8nClient);
            });
        });
    });
    (0, globals_1.describe)('Parameter Validation', () => {
        (0, globals_1.it)('should use Zod for init-n8n parameter validation', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'init-n8n')?.[0];
            (0, globals_1.expect)(initTool).toBeDefined();
            if (initTool) {
                // The parameters should be a z.object result
                (0, globals_1.expect)(initTool.parameters).toBeDefined();
                // We can't easily test the actual Zod schema structure in mocked environment,
                // but we can verify it was called to create the parameters
            }
        });
        (0, globals_1.it)('should use empty Zod object for status parameters', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const statusTool = mockFastMCP.addTool.mock.calls.find(call => call[0].name === 'status')?.[0];
            (0, globals_1.expect)(statusTool).toBeDefined();
            if (statusTool) {
                (0, globals_1.expect)(statusTool.parameters).toBeDefined();
            }
        });
    });
    (0, globals_1.describe)('Integration with Tool Modules', () => {
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
        });
        (0, globals_1.it)('should pass consistent server instance to all tools', () => {
            const serverInstances = [
                mockCreateWorkflowTools.mock.calls[0][1],
                mockCreateProjectTools.mock.calls[0][1],
                mockCreateUserTools.mock.calls[0][1],
                mockCreateVariableTools.mock.calls[0][1],
                mockCreateExecutionTools.mock.calls[0][1],
                mockCreateTagTools.mock.calls[0][1],
                mockCreateCredentialTools.mock.calls[0][1],
                mockCreateAuditTools.mock.calls[0][1],
            ];
            // All tools should receive the same FastMCP instance
            serverInstances.forEach(instance => {
                (0, globals_1.expect)(instance).toBe(mockFastMCP);
            });
        });
        (0, globals_1.it)('should ensure tool registration happens before server start', () => {
            // Verify all tool creation functions were called before server.start
            (0, globals_1.expect)(mockCreateWorkflowTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateProjectTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateUserTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateVariableTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateExecutionTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateTagTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateCredentialTools).toHaveBeenCalled();
            (0, globals_1.expect)(mockCreateAuditTools).toHaveBeenCalled();
            // The custom tools should also be registered
            (0, globals_1.expect)(mockFastMCP.addTool).toHaveBeenCalledWith(globals_1.expect.objectContaining({ name: 'init-n8n' }));
            (0, globals_1.expect)(mockFastMCP.addTool).toHaveBeenCalledWith(globals_1.expect.objectContaining({ name: 'status' }));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,