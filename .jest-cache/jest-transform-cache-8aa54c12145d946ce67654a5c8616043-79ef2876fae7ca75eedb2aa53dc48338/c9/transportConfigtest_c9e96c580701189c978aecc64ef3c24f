c2f93a917884f1239dd8fc8b4b6690fe
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const transportConfig_1 = require("../../../src/transport/transportConfig");
(0, globals_1.describe)('Transport Configuration', () => {
    let originalEnv;
    (0, globals_1.beforeEach)(() => {
        // Save original environment
        originalEnv = { ...process.env };
        // Clear environment variables
        Object.values(transportConfig_1.ENV_CONFIG).forEach(envVar => {
            delete process.env[envVar];
        });
        delete process.env.NODE_ENV;
        delete process.env.PORT;
        delete process.env.RAILWAY_ENVIRONMENT;
        delete process.env.VERCEL;
        delete process.env.RENDER;
    });
    (0, globals_1.afterEach)(() => {
        // Restore original environment
        process.env = originalEnv;
    });
    (0, globals_1.describe)('TransportConfigSchema', () => {
        (0, globals_1.it)('should validate minimal stdio configuration', () => {
            const config = { type: 'stdio' };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.type).toBe('stdio');
            (0, globals_1.expect)(result.sse).toBeUndefined();
        });
        (0, globals_1.it)('should validate complete SSE configuration', () => {
            const config = {
                type: 'sse',
                sse: {
                    port: 8080,
                    endpoint: '/sse',
                    host: 'localhost',
                    cors: {
                        enabled: true,
                        origins: ['*'],
                        credentials: false,
                    },
                    healthCheck: {
                        enabled: true,
                        endpoint: '/health',
                    },
                },
            };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result).toEqual(config);
        });
        (0, globals_1.it)('should apply default values for SSE configuration', () => {
            const config = { type: 'sse', sse: {} };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.sse?.port).toBe(8080);
            (0, globals_1.expect)(result.sse?.endpoint).toBe('/sse');
            (0, globals_1.expect)(result.sse?.host).toBe('localhost');
            (0, globals_1.expect)(result.sse?.cors.enabled).toBe(true);
            (0, globals_1.expect)(result.sse?.cors.origins).toEqual(['*']);
            (0, globals_1.expect)(result.sse?.cors.credentials).toBe(false);
            (0, globals_1.expect)(result.sse?.healthCheck.enabled).toBe(true);
            (0, globals_1.expect)(result.sse?.healthCheck.endpoint).toBe('/health');
        });
        (0, globals_1.it)('should default to stdio transport type', () => {
            const config = {};
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.type).toBe('stdio');
        });
        (0, globals_1.it)('should reject invalid transport type', () => {
            const config = { type: 'invalid' };
            (0, globals_1.expect)(() => transportConfig_1.TransportConfigSchema.parse(config)).toThrow();
        });
        (0, globals_1.it)('should reject invalid port numbers', () => {
            const config = {
                type: 'sse',
                sse: { port: 100 }, // Below minimum
            };
            (0, globals_1.expect)(() => transportConfig_1.TransportConfigSchema.parse(config)).toThrow();
            const config2 = {
                type: 'sse',
                sse: { port: 70000 }, // Above maximum
            };
            (0, globals_1.expect)(() => transportConfig_1.TransportConfigSchema.parse(config2)).toThrow();
        });
        (0, globals_1.it)('should validate custom CORS configuration', () => {
            const config = {
                type: 'sse',
                sse: {
                    cors: {
                        enabled: false,
                        origins: ['https://example.com', 'https://test.com'],
                        credentials: true,
                    },
                },
            };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.sse?.cors.enabled).toBe(false);
            (0, globals_1.expect)(result.sse?.cors.origins).toEqual(['https://example.com', 'https://test.com']);
            (0, globals_1.expect)(result.sse?.cors.credentials).toBe(true);
        });
        (0, globals_1.it)('should validate custom health check configuration', () => {
            const config = {
                type: 'sse',
                sse: {
                    healthCheck: {
                        enabled: false,
                        endpoint: '/custom-health',
                    },
                },
            };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.sse?.healthCheck.enabled).toBe(false);
            (0, globals_1.expect)(result.sse?.healthCheck.endpoint).toBe('/custom-health');
        });
        (0, globals_1.it)('should handle partial SSE configuration with defaults', () => {
            const config = {
                type: 'sse',
                sse: {
                    port: 3000,
                    host: '0.0.0.0',
                },
            };
            const result = transportConfig_1.TransportConfigSchema.parse(config);
            (0, globals_1.expect)(result.sse?.port).toBe(3000);
            (0, globals_1.expect)(result.sse?.host).toBe('0.0.0.0');
            (0, globals_1.expect)(result.sse?.endpoint).toBe('/sse'); // Default
            (0, globals_1.expect)(result.sse?.cors.enabled).toBe(true); // Default
        });
    });
    (0, globals_1.describe)('DEFAULT_CONFIGS', () => {
        (0, globals_1.it)('should provide correct development configuration', () => {
            const config = transportConfig_1.DEFAULT_CONFIGS.development;
            (0, globals_1.expect)(config.type).toBe('stdio');
            (0, globals_1.expect)('sse' in config ? config.sse : undefined).toBeUndefined();
        });
        (0, globals_1.it)('should provide correct production configuration', () => {
            const config = transportConfig_1.DEFAULT_CONFIGS.production;
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config.sse?.port).toBe(8080);
            (0, globals_1.expect)(config.sse?.endpoint).toBe('/sse');
            (0, globals_1.expect)(config.sse?.host).toBe('0.0.0.0');
            (0, globals_1.expect)(config.sse?.cors.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['*']);
            (0, globals_1.expect)(config.sse?.cors.credentials).toBe(false);
            (0, globals_1.expect)(config.sse?.healthCheck.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.healthCheck.endpoint).toBe('/health');
        });
        (0, globals_1.it)('should provide correct web configuration', () => {
            const config = transportConfig_1.DEFAULT_CONFIGS.web;
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config.sse?.port).toBe(3000); // Default from process.env.PORT fallback
            (0, globals_1.expect)(config.sse?.endpoint).toBe('/sse');
            (0, globals_1.expect)(config.sse?.host).toBe('0.0.0.0');
            (0, globals_1.expect)(config.sse?.cors.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['*']);
            (0, globals_1.expect)(config.sse?.cors.credentials).toBe(true);
            (0, globals_1.expect)(config.sse?.healthCheck.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.healthCheck.endpoint).toBe('/health');
        });
        (0, globals_1.it)('should use environment PORT variable in web configuration', async () => {
            process.env.PORT = '5000';
            // Need to re-import the module to pick up the new environment variable
            globals_1.jest.resetModules();
            const { DEFAULT_CONFIGS: newConfigs } = await Promise.resolve().then(() => __importStar(require('../../../src/transport/transportConfig')));
            (0, globals_1.expect)(newConfigs.web.sse.port).toBe(5000);
        });
        (0, globals_1.it)('should use environment CORS_ORIGINS in web configuration', async () => {
            process.env.CORS_ORIGINS = 'https://example.com,https://test.com';
            globals_1.jest.resetModules();
            const { DEFAULT_CONFIGS: newConfigs } = await Promise.resolve().then(() => __importStar(require('../../../src/transport/transportConfig')));
            (0, globals_1.expect)(newConfigs.web.sse.cors.origins).toEqual(['https://example.com', 'https://test.com']);
        });
    });
    (0, globals_1.describe)('detectTransportConfig', () => {
        (0, globals_1.it)('should return stdio config for explicit N8N_MCP_TRANSPORT=stdio', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'stdio';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('stdio');
        });
        (0, globals_1.it)('should return SSE config for explicit N8N_MCP_TRANSPORT=sse', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'sse';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
        });
        (0, globals_1.it)('should return web config for NODE_ENV=production', () => {
            process.env.NODE_ENV = 'production';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.web);
        });
        (0, globals_1.it)('should return web config when PORT is set', () => {
            process.env.PORT = '3000';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.web);
        });
        (0, globals_1.it)('should return web config for Railway environment', () => {
            process.env.RAILWAY_ENVIRONMENT = 'production';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.web);
        });
        (0, globals_1.it)('should return web config for Vercel environment', () => {
            process.env.VERCEL = '1';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.web);
        });
        (0, globals_1.it)('should return web config for Render environment', () => {
            process.env.RENDER = 'true';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.web);
        });
        (0, globals_1.it)('should default to development config for local environment', () => {
            // No environment variables set
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('stdio');
            (0, globals_1.expect)(config).toEqual(transportConfig_1.DEFAULT_CONFIGS.development);
        });
        (0, globals_1.it)('should prioritize explicit transport type over environment detection', () => {
            process.env.NODE_ENV = 'production';
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'stdio';
            const config = (0, transportConfig_1.detectTransportConfig)();
            (0, globals_1.expect)(config.type).toBe('stdio');
        });
    });
    (0, globals_1.describe)('validateTransportConfig', () => {
        (0, globals_1.it)('should validate and return correct stdio configuration', () => {
            const input = { type: 'stdio' };
            const result = (0, transportConfig_1.validateTransportConfig)(input);
            (0, globals_1.expect)(result.type).toBe('stdio');
            (0, globals_1.expect)(result.sse).toBeUndefined();
        });
        (0, globals_1.it)('should validate and return correct SSE configuration', () => {
            const input = {
                type: 'sse',
                sse: {
                    port: 8080,
                    endpoint: '/sse',
                    host: 'localhost',
                },
            };
            const result = (0, transportConfig_1.validateTransportConfig)(input);
            (0, globals_1.expect)(result.type).toBe('sse');
            (0, globals_1.expect)(result.sse?.port).toBe(8080);
            (0, globals_1.expect)(result.sse?.endpoint).toBe('/sse');
            (0, globals_1.expect)(result.sse?.host).toBe('localhost');
        });
        (0, globals_1.it)('should throw error for invalid configuration', () => {
            const input = { type: 'invalid' };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(input)).toThrow();
        });
        (0, globals_1.it)('should throw error for invalid port range', () => {
            const input = {
                type: 'sse',
                sse: { port: 100 },
            };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(input)).toThrow();
        });
        (0, globals_1.it)('should apply defaults to partial configuration', () => {
            const input = { type: 'sse', sse: { port: 3000 } };
            const result = (0, transportConfig_1.validateTransportConfig)(input);
            (0, globals_1.expect)(result.sse?.port).toBe(3000);
            (0, globals_1.expect)(result.sse?.endpoint).toBe('/sse'); // Default
            (0, globals_1.expect)(result.sse?.host).toBe('localhost'); // Default
        });
    });
    (0, globals_1.describe)('getServerUrl', () => {
        (0, globals_1.it)('should return null for stdio configuration', () => {
            const config = { type: 'stdio' };
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBeNull();
        });
        (0, globals_1.it)('should return correct HTTP URL for SSE configuration', () => {
            const config = {
                type: 'sse',
                sse: {
                    host: 'localhost',
                    port: 8080,
                    endpoint: '/sse',
                    cors: { enabled: true, origins: ['*'], credentials: false },
                    healthCheck: { enabled: true, endpoint: '/health' },
                },
            };
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBe('http://localhost:8080/sse');
        });
        (0, globals_1.it)('should return correct HTTPS URL for port 443', () => {
            const config = {
                type: 'sse',
                sse: {
                    host: 'example.com',
                    port: 443,
                    endpoint: '/sse',
                    cors: { enabled: true, origins: ['*'], credentials: false },
                    healthCheck: { enabled: true, endpoint: '/health' },
                },
            };
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBe('https://example.com:443/sse');
        });
        (0, globals_1.it)('should handle custom endpoints', () => {
            const config = {
                type: 'sse',
                sse: {
                    host: '0.0.0.0',
                    port: 3000,
                    endpoint: '/api/mcp',
                    cors: { enabled: true, origins: ['*'], credentials: false },
                    healthCheck: { enabled: true, endpoint: '/health' },
                },
            };
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBe('http://0.0.0.0:3000/api/mcp');
        });
        (0, globals_1.it)('should return null when SSE config is missing', () => {
            const config = { type: 'sse' };
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBeNull();
        });
    });
    (0, globals_1.describe)('parseConfigFromEnv', () => {
        (0, globals_1.it)('should return empty config when no environment variables are set', () => {
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config).toEqual({});
        });
        (0, globals_1.it)('should parse transport type from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'sse';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.type).toBe('sse');
        });
        (0, globals_1.it)('should parse SSE port from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.SSE_PORT] = '9000';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.port).toBe(9000);
        });
        (0, globals_1.it)('should parse SSE host from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.SSE_HOST] = '0.0.0.0';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.host).toBe('0.0.0.0');
        });
        (0, globals_1.it)('should parse SSE endpoint from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.SSE_ENDPOINT] = '/api/mcp';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.endpoint).toBe('/api/mcp');
        });
        (0, globals_1.it)('should parse CORS origins from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.CORS_ORIGINS] = 'https://example.com,https://test.com';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.cors.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['https://example.com', 'https://test.com']);
        });
        (0, globals_1.it)('should parse CORS credentials from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.CORS_CREDENTIALS] = 'true';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.cors.credentials).toBe(true);
        });
        (0, globals_1.it)('should parse health check enabled from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENABLED] = 'false';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.healthCheck.enabled).toBe(false);
        });
        (0, globals_1.it)('should parse health check endpoint from environment', () => {
            process.env[transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENDPOINT] = '/status';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.healthCheck.endpoint).toBe('/status');
        });
        (0, globals_1.it)('should create SSE config when SSE port is set', () => {
            process.env[transportConfig_1.ENV_CONFIG.SSE_PORT] = '3000';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse).toBeDefined();
            (0, globals_1.expect)(config.sse?.port).toBe(3000);
            (0, globals_1.expect)(config.sse?.host).toBe('localhost'); // Default
            (0, globals_1.expect)(config.sse?.endpoint).toBe('/sse'); // Default
        });
        (0, globals_1.it)('should handle complete environment configuration', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'sse';
            process.env[transportConfig_1.ENV_CONFIG.SSE_PORT] = '4000';
            process.env[transportConfig_1.ENV_CONFIG.SSE_HOST] = '0.0.0.0';
            process.env[transportConfig_1.ENV_CONFIG.SSE_ENDPOINT] = '/mcp';
            process.env[transportConfig_1.ENV_CONFIG.CORS_ORIGINS] = 'https://app.com';
            process.env[transportConfig_1.ENV_CONFIG.CORS_CREDENTIALS] = 'true';
            process.env[transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENABLED] = 'true';
            process.env[transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENDPOINT] = '/health-check';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.type).toBe('sse');
            (0, globals_1.expect)(config.sse?.port).toBe(4000);
            (0, globals_1.expect)(config.sse?.host).toBe('0.0.0.0');
            (0, globals_1.expect)(config.sse?.endpoint).toBe('/mcp');
            (0, globals_1.expect)(config.sse?.cors.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['https://app.com']);
            (0, globals_1.expect)(config.sse?.cors.credentials).toBe(true);
            (0, globals_1.expect)(config.sse?.healthCheck.enabled).toBe(true);
            (0, globals_1.expect)(config.sse?.healthCheck.endpoint).toBe('/health-check');
        });
        (0, globals_1.it)('should handle invalid port number gracefully', () => {
            process.env[transportConfig_1.ENV_CONFIG.SSE_PORT] = 'invalid';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.port).toBeNaN();
        });
        (0, globals_1.it)('should handle CORS credentials with non-true values', () => {
            process.env[transportConfig_1.ENV_CONFIG.CORS_CREDENTIALS] = 'false';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.cors.credentials).toBe(false);
            process.env[transportConfig_1.ENV_CONFIG.CORS_CREDENTIALS] = 'invalid';
            const config2 = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config2.sse?.cors.credentials).toBe(false);
        });
    });
    (0, globals_1.describe)('ENV_CONFIG constants', () => {
        (0, globals_1.it)('should have correct environment variable names', () => {
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE).toBe('N8N_MCP_TRANSPORT');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.SSE_PORT).toBe('N8N_MCP_SSE_PORT');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.SSE_HOST).toBe('N8N_MCP_SSE_HOST');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.SSE_ENDPOINT).toBe('N8N_MCP_SSE_ENDPOINT');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.CORS_ORIGINS).toBe('N8N_MCP_CORS_ORIGINS');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.CORS_CREDENTIALS).toBe('N8N_MCP_CORS_CREDENTIALS');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENABLED).toBe('N8N_MCP_HEALTH_CHECK_ENABLED');
            (0, globals_1.expect)(transportConfig_1.ENV_CONFIG.HEALTH_CHECK_ENDPOINT).toBe('N8N_MCP_HEALTH_CHECK_ENDPOINT');
        });
        (0, globals_1.it)('should have all required environment variables defined', () => {
            const expectedKeys = [
                'TRANSPORT_TYPE',
                'SSE_PORT',
                'SSE_HOST',
                'SSE_ENDPOINT',
                'CORS_ORIGINS',
                'CORS_CREDENTIALS',
                'HEALTH_CHECK_ENABLED',
                'HEALTH_CHECK_ENDPOINT',
            ];
            expectedKeys.forEach(key => {
                (0, globals_1.expect)(transportConfig_1.ENV_CONFIG).toHaveProperty(key);
                (0, globals_1.expect)(typeof transportConfig_1.ENV_CONFIG[key]).toBe('string');
            });
        });
    });
    (0, globals_1.describe)('Integration Tests', () => {
        (0, globals_1.it)('should create valid configuration from environment and validate it', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'sse';
            process.env[transportConfig_1.ENV_CONFIG.SSE_PORT] = '8080';
            process.env[transportConfig_1.ENV_CONFIG.SSE_HOST] = 'localhost';
            const envConfig = (0, transportConfig_1.parseConfigFromEnv)();
            const validatedConfig = (0, transportConfig_1.validateTransportConfig)(envConfig);
            (0, globals_1.expect)(validatedConfig.type).toBe('sse');
            (0, globals_1.expect)(validatedConfig.sse?.port).toBe(8080);
            (0, globals_1.expect)(validatedConfig.sse?.host).toBe('localhost');
        });
        (0, globals_1.it)('should detect configuration and get server URL', () => {
            process.env[transportConfig_1.ENV_CONFIG.TRANSPORT_TYPE] = 'sse';
            const config = (0, transportConfig_1.detectTransportConfig)();
            const url = (0, transportConfig_1.getServerUrl)(config);
            (0, globals_1.expect)(url).toBeTruthy();
            (0, globals_1.expect)(typeof url).toBe('string');
            (0, globals_1.expect)(url).toMatch(/^https?:\/\//);
        });
        (0, globals_1.it)('should handle full workflow from detection to URL generation', () => {
            process.env.NODE_ENV = 'production';
            const detectedConfig = (0, transportConfig_1.detectTransportConfig)();
            const validatedConfig = (0, transportConfig_1.validateTransportConfig)(detectedConfig);
            const serverUrl = (0, transportConfig_1.getServerUrl)(validatedConfig);
            (0, globals_1.expect)(validatedConfig.type).toBe('sse');
            (0, globals_1.expect)(serverUrl).toBe('http://0.0.0.0:3000/sse');
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.it)('should handle null/undefined input to validateTransportConfig', () => {
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(null)).toThrow();
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(undefined)).toThrow();
        });
        (0, globals_1.it)('should handle empty object to validateTransportConfig', () => {
            const result = (0, transportConfig_1.validateTransportConfig)({});
            (0, globals_1.expect)(result.type).toBe('stdio'); // Default
        });
        (0, globals_1.it)('should handle malformed SSE configuration', () => {
            const config = {
                type: 'sse',
                sse: {
                    port: 'invalid',
                    endpoint: 123,
                    host: null,
                },
            };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(config)).toThrow();
        });
        (0, globals_1.it)('should handle missing SSE configuration for SSE type', () => {
            const config = { type: 'sse' };
            const result = (0, transportConfig_1.validateTransportConfig)(config);
            (0, globals_1.expect)(result.type).toBe('sse');
            (0, globals_1.expect)(result.sse).toBeUndefined();
        });
        (0, globals_1.it)('should handle CORS origins parsing with empty string', () => {
            process.env[transportConfig_1.ENV_CONFIG.CORS_ORIGINS] = '';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['']);
        });
        (0, globals_1.it)('should handle CORS origins parsing with single origin', () => {
            process.env[transportConfig_1.ENV_CONFIG.CORS_ORIGINS] = 'https://example.com';
            const config = (0, transportConfig_1.parseConfigFromEnv)();
            (0, globals_1.expect)(config.sse?.cors.origins).toEqual(['https://example.com']);
        });
        (0, globals_1.it)('should handle edge case port numbers', () => {
            // Test minimum valid port
            const config1 = { type: 'sse', sse: { port: 1024 } };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(config1)).not.toThrow();
            // Test maximum valid port
            const config2 = { type: 'sse', sse: { port: 65535 } };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(config2)).not.toThrow();
            // Test below minimum
            const config3 = { type: 'sse', sse: { port: 1023 } };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(config3)).toThrow();
            // Test above maximum
            const config4 = { type: 'sse', sse: { port: 65536 } };
            (0, globals_1.expect)(() => (0, transportConfig_1.validateTransportConfig)(config4)).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,