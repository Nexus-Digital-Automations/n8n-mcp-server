{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/utils/nodeGenerator.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/utils/nodeGenerator.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach } from '@jest/globals';\nimport { N8nNodeGenerator } from '../../utils/nodeGenerator.js';\nimport {\n  mockSimpleTool,\n  mockComplexTool,\n  mockEnumTool,\n  mockStringConstraintsTool,\n  mockConversionContext,\n  mockMCPServer,\n} from '../testData.js';\nimport { MCPConversionConfig, ConversionContext } from '../../types/mcpTypes.js';\n\ndescribe('N8nNodeGenerator', () => {\n  let generator: N8nNodeGenerator;\n\n  beforeEach(() => {\n    generator = new N8nNodeGenerator();\n  });\n\n  describe('generateNodeDefinition', () => {\n    it('should generate node definition for simple tool', () => {\n      const result = generator.generateNodeDefinition(mockConversionContext);\n\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition).toBeDefined();\n      expect(result.nodeDefinition!.displayName).toBe('MCP Simple Test');\n      expect(result.nodeDefinition!.name).toBe('MCPSimpleTest');\n      expect(result.nodeDefinition!.description).toBe('A simple test tool for unit testing');\n      expect(result.nodeDefinition!.icon).toBe('fa:cog');\n      expect(result.nodeDefinition!.group).toEqual(['transform']);\n      expect(result.nodeDefinition!.version).toEqual([1]);\n    });\n\n    it('should generate node definition for complex tool', () => {\n      const complexContext: ConversionContext = {\n        ...mockConversionContext,\n        tool: mockComplexTool,\n      };\n\n      const result = generator.generateNodeDefinition(complexContext);\n\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition).toBeDefined();\n      expect(result.nodeDefinition!.displayName).toBe('MCP Complex Data Processor');\n      expect(result.nodeDefinition!.name).toBe('MCPComplexDataProcessor');\n    });\n\n    it('should generate node definition for enum tool', () => {\n      const enumContext: ConversionContext = {\n        ...mockConversionContext,\n        tool: mockEnumTool,\n      };\n\n      const result = generator.generateNodeDefinition(enumContext);\n\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition).toBeDefined();\n      \n      // Find the priority property\n      const properties = result.nodeDefinition!.properties;\n      const priorityProp = properties.find(p => p.name === 'priority');\n      \n      expect(priorityProp).toBeDefined();\n      expect(priorityProp!.type).toBe('options');\n      expect(priorityProp!.options).toEqual([\n        { name: 'Low', value: 'low' },\n        { name: 'Medium', value: 'medium' },\n        { name: 'High', value: 'high' },\n      ]);\n      expect(priorityProp!.default).toBe('medium');\n    });\n\n    it('should handle custom configuration', () => {\n      const customConfig: MCPConversionConfig = {\n        nodeNamePrefix: 'Custom',\n        defaultIcon: 'fa:star',\n        defaultGroup: ['custom'],\n        credentialName: 'customAuth',\n        enableBinaryData: false,\n        enableResourceAccess: false,\n      };\n\n      const customContext: ConversionContext = {\n        ...mockConversionContext,\n        config: customConfig,\n      };\n\n      const result = generator.generateNodeDefinition(customContext);\n\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition!.displayName).toBe('Custom Simple Test');\n      expect(result.nodeDefinition!.name).toBe('CustomSimpleTest');\n      expect(result.nodeDefinition!.icon).toBe('fa:star');\n      expect(result.nodeDefinition!.group).toEqual(['custom']);\n      expect(result.nodeDefinition!.credentials![0].name).toBe('customAuth');\n    });\n\n    it('should handle missing configuration gracefully', () => {\n      const minimalContext: ConversionContext = {\n        mcpServer: mockMCPServer,\n        tool: mockSimpleTool,\n        config: {},\n      };\n\n      const result = generator.generateNodeDefinition(minimalContext);\n\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition!.icon).toBe('fa:cog');\n      expect(result.nodeDefinition!.group).toEqual(['transform']);\n    });\n\n    it('should generate properties correctly', () => {\n      const result = generator.generateNodeDefinition(mockConversionContext);\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      \n      // Find message property\n      const messageProp = properties.find(p => p.name === 'message');\n      expect(messageProp).toBeDefined();\n      expect(messageProp!.type).toBe('string');\n      expect(messageProp!.required).toBe(true);\n      expect(messageProp!.default).toBe('Hello World');\n      expect(messageProp!.displayName).toBe('Message');\n\n      // Find count property\n      const countProp = properties.find(p => p.name === 'count');\n      expect(countProp).toBeDefined();\n      expect(countProp!.type).toBe('number');\n      expect(countProp!.required).toBe(false);\n    });\n\n    it('should add binary data property when enabled', () => {\n      const result = generator.generateNodeDefinition(mockConversionContext);\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const binaryDataProp = properties.find(p => p.name === 'binaryData');\n      \n      expect(binaryDataProp).toBeDefined();\n      expect(binaryDataProp!.type).toBe('boolean');\n      expect(binaryDataProp!.default).toBe(false);\n    });\n\n    it('should add resource access property when enabled', () => {\n      const result = generator.generateNodeDefinition(mockConversionContext);\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const resourceProp = properties.find(p => p.name === 'enableResources');\n      \n      expect(resourceProp).toBeDefined();\n      expect(resourceProp!.type).toBe('boolean');\n      expect(resourceProp!.default).toBe(false);\n    });\n\n    it('should handle error during generation', () => {\n      const invalidContext = {\n        ...mockConversionContext,\n        tool: null as any,\n      };\n\n      const result = generator.generateNodeDefinition(invalidContext);\n\n      expect(result.success).toBe(false);\n      expect(result.errors).toBeDefined();\n      expect(result.errors!.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe('property type mapping', () => {\n    it('should map MCP string to n8n string', () => {\n      const stringContext: ConversionContext = {\n        ...mockConversionContext,\n        tool: mockStringConstraintsTool,\n      };\n\n      const result = generator.generateNodeDefinition(stringContext);\n      expect(result.success).toBe(true);\n      \n      const emailProp = result.nodeDefinition!.properties.find(p => p.name === 'email');\n      expect(emailProp!.type).toBe('string');\n      expect(emailProp!.placeholder).toBe('user@example.com');\n\n      const passwordProp = result.nodeDefinition!.properties.find(p => p.name === 'password');\n      expect(passwordProp!.typeOptions).toMatchObject({ password: true });\n\n      const websiteProp = result.nodeDefinition!.properties.find(p => p.name === 'website');\n      expect(websiteProp!.placeholder).toBe('https://example.com');\n    });\n\n    it('should map MCP number to n8n number with constraints', () => {\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: mockComplexTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      \n      // The timeout property is nested in config object, so it becomes JSON\n      const configProp = properties.find(p => p.name === 'config');\n      expect(configProp!.type).toBe('json');\n    });\n\n    it('should map MCP array to n8n json', () => {\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: mockComplexTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const itemsProp = properties.find(p => p.name === 'items');\n      \n      expect(itemsProp!.type).toBe('json');\n      expect(itemsProp!.typeOptions).toMatchObject({ rows: 4 });\n    });\n\n    it('should map MCP object to n8n json', () => {\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: mockComplexTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const configProp = properties.find(p => p.name === 'config');\n      \n      expect(configProp!.type).toBe('json');\n      expect(configProp!.typeOptions).toMatchObject({ rows: 6 });\n    });\n\n    it('should use custom type mapping', () => {\n      const customConfig: MCPConversionConfig = {\n        typeMapping: {\n          string: 'string',\n          number: 'string', // Map numbers to strings\n          integer: 'string',\n          boolean: 'options',\n          array: 'collection',\n          object: 'fixedCollection',\n        },\n      };\n\n      const customContext: ConversionContext = {\n        ...mockConversionContext,\n        config: customConfig,\n      };\n\n      const result = generator.generateNodeDefinition(customContext);\n      expect(result.success).toBe(true);\n    });\n  });\n\n  describe('node name generation', () => {\n    it('should generate valid node names from tool names', () => {\n      const testCases = [\n        { input: 'simple_test', expected: 'MCPSimpleTest' },\n        { input: 'kebab-case-name', expected: 'MCPKebabCaseName' },\n        { input: 'UPPERCASE_TOOL', expected: 'MCPUPPERCASETOOL' },\n        { input: 'mixed_Case-Tool', expected: 'MCPMixedCaseTool' },\n        { input: '123numeric_start', expected: 'MCPn123numericStart' },\n        { input: 'special!@#chars', expected: 'MCPSpecialChars' },\n      ];\n\n      testCases.forEach(({ input, expected }) => {\n        const context: ConversionContext = {\n          ...mockConversionContext,\n          tool: { ...mockSimpleTool, name: input },\n        };\n\n        const result = generator.generateNodeDefinition(context);\n        expect(result.success).toBe(true);\n        expect(result.nodeDefinition!.name).toBe(expected);\n      });\n    });\n\n    it('should generate display names correctly', () => {\n      const testCases = [\n        { input: 'simple_test', expected: 'MCP Simple Test' },\n        { input: 'kebab-case-name', expected: 'MCP Kebab Case Name' },\n        { input: 'camelCaseName', expected: 'MCP CamelCaseName' },\n      ];\n\n      testCases.forEach(({ input, expected }) => {\n        const context: ConversionContext = {\n          ...mockConversionContext,\n          tool: { ...mockSimpleTool, name: input },\n        };\n\n        const result = generator.generateNodeDefinition(context);\n        expect(result.success).toBe(true);\n        expect(result.nodeDefinition!.displayName).toBe(expected);\n      });\n    });\n\n    it('should handle names without prefix', () => {\n      const configWithoutPrefix: MCPConversionConfig = {\n        nodeNamePrefix: undefined,\n      };\n\n      const context: ConversionContext = {\n        ...mockConversionContext,\n        config: configWithoutPrefix,\n      };\n\n      const result = generator.generateNodeDefinition(context);\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition!.name).toBe('simpleTest');\n      expect(result.nodeDefinition!.displayName).toBe('Simple Test');\n    });\n  });\n\n  describe('validation', () => {\n    it('should validate generated node definition', () => {\n      const result = generator.generateNodeDefinition(mockConversionContext);\n\n      expect(result.success).toBe(true);\n      expect(result.errors).toEqual([]);\n      expect(result.warnings).toBeDefined();\n    });\n\n    it('should detect invalid display names', () => {\n      // Create a tool that would generate invalid display name\n      const shortNameTool = {\n        ...mockSimpleTool,\n        name: 'ab',\n        description: 'Test',\n      };\n\n      const context: ConversionContext = {\n        ...mockConversionContext,\n        tool: shortNameTool,\n      };\n\n      const result = generator.generateNodeDefinition(context);\n      // Should still succeed but with warnings about short description\n      expect(result.success).toBe(true);\n    });\n\n    it('should detect duplicate property names', () => {\n      // This is more of an edge case since our property generation should prevent duplicates\n      const result = generator.generateNodeDefinition(mockConversionContext);\n      expect(result.success).toBe(true);\n      \n      const propertyNames = result.nodeDefinition!.properties.map(p => p.name);\n      const uniqueNames = new Set(propertyNames);\n      expect(propertyNames.length).toBe(uniqueNames.size);\n    });\n\n    it('should warn about many properties', () => {\n      // Create a tool with many properties\n      const manyPropsSchema = {\n        type: 'object' as const,\n        properties: {} as Record<string, any>,\n      };\n\n      // Add 25 properties to trigger warning\n      for (let i = 0; i < 25; i++) {\n        manyPropsSchema.properties[`prop${i}`] = {\n          type: 'string' as const,\n          description: `Property ${i}`,\n        };\n      }\n\n      const manyPropsTool = {\n        ...mockSimpleTool,\n        inputSchema: manyPropsSchema,\n      };\n\n      const context: ConversionContext = {\n        ...mockConversionContext,\n        tool: manyPropsTool,\n      };\n\n      const result = generator.generateNodeDefinition(context);\n      expect(result.success).toBe(true);\n      expect(result.warnings).toContain(expect.stringContaining('Consider grouping'));\n    });\n\n    it('should handle empty properties', () => {\n      const emptyPropsTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          type: 'object' as const,\n          properties: {},\n        },\n      };\n\n      const context: ConversionContext = {\n        ...mockConversionContext,\n        tool: emptyPropsTool,\n      };\n\n      const result = generator.generateNodeDefinition(context);\n      expect(result.success).toBe(true);\n      expect(result.warnings).toContain(expect.stringContaining('no configurable properties'));\n    });\n  });\n\n  describe('property generation details', () => {\n    it('should handle string format types correctly', () => {\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: mockStringConstraintsTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n\n      const passwordProp = properties.find(p => p.name === 'password');\n      expect(passwordProp!.typeOptions).toMatchObject({\n        password: true,\n        minLength: 8,\n        maxLength: 128,\n      });\n\n      const codeProp = properties.find(p => p.name === 'code');\n      expect(codeProp!.typeOptions).toMatchObject({\n        pattern: '^[A-Z]{3}[0-9]{3}$',\n      });\n    });\n\n    it('should handle integer constraints', () => {\n      const integerTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          type: 'object' as const,\n          properties: {\n            count: {\n              type: 'integer' as const,\n              minimum: 1,\n              maximum: 100,\n              description: 'Count value',\n            },\n          },\n        },\n      };\n\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: integerTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const countProp = properties.find(p => p.name === 'count');\n\n      expect(countProp!.type).toBe('number');\n      expect(countProp!.typeOptions).toMatchObject({\n        minValue: 1,\n        maxValue: 100,\n      });\n    });\n\n    it('should handle array items description', () => {\n      const arrayTool = {\n        ...mockSimpleTool,\n        inputSchema: {\n          type: 'object' as const,\n          properties: {\n            items: {\n              type: 'array' as const,\n              items: {\n                type: 'string' as const,\n              },\n              description: 'List of items',\n            },\n          },\n        },\n      };\n\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: arrayTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const itemsProp = properties.find(p => p.name === 'items');\n\n      expect(itemsProp!.description).toContain('Array of string');\n    });\n\n    it('should handle object properties description', () => {\n      const result = generator.generateNodeDefinition({\n        ...mockConversionContext,\n        tool: mockComplexTool,\n      });\n\n      expect(result.success).toBe(true);\n      const properties = result.nodeDefinition!.properties;\n      const configProp = properties.find(p => p.name === 'config');\n\n      expect(configProp!.description).toContain('Object with: enabled, timeout');\n    });\n\n    it('should handle credentials configuration', () => {\n      const noCredConfig: MCPConversionConfig = {\n        credentialName: undefined,\n      };\n\n      const context: ConversionContext = {\n        ...mockConversionContext,\n        config: noCredConfig,\n      };\n\n      const result = generator.generateNodeDefinition(context);\n      expect(result.success).toBe(true);\n      expect(result.nodeDefinition!.credentials).toBeUndefined();\n    });\n  });\n\n  describe('utility methods', () => {\n    it('should return supported MCP types', () => {\n      const supportedTypes = generator.getSupportedMCPTypes();\n      expect(supportedTypes).toEqual([\n        'string', 'number', 'integer', 'boolean', 'array', 'object'\n      ]);\n    });\n\n    it('should return available n8n types', () => {\n      const n8nTypes = generator.getAvailableN8nTypes();\n      expect(n8nTypes).toContain('string');\n      expect(n8nTypes).toContain('number');\n      expect(n8nTypes).toContain('boolean');\n      expect(n8nTypes).toContain('options');\n      expect(n8nTypes).toContain('json');\n    });\n\n    it('should generate multiple nodes for complex tools', () => {\n      const results = generator.generateMultipleNodes(mockConversionContext);\n      expect(results).toHaveLength(1);\n      expect(results[0].success).toBe(true);\n    });\n\n    it('should handle operation properties for multi-operation tools', () => {\n      // Currently returns false, but test the structure\n      const result = generator.generateNodeDefinition(mockConversionContext);\n      expect(result.success).toBe(true);\n      \n      // No operation property should be added for single operation tools\n      const properties = result.nodeDefinition!.properties;\n      const operationProp = properties.find(p => p.name === 'operation');\n      expect(operationProp).toBeUndefined();\n    });\n  });\n});"],"version":3}