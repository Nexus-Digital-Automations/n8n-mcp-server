1cd1531bbe01d50e6afc8f562687e0b8
/* istanbul ignore next */
function cov_gio26vf7m() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts";
  var hash = "e3729c11d18049e8e6b6ad02722e11ef9c4e04af";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 23
        },
        end: {
          line: 2,
          column: 32
        }
      },
      "1": {
        start: {
          line: 4,
          column: 8
        },
        end: {
          line: 6,
          column: 9
        }
      },
      "2": {
        start: {
          line: 5,
          column: 12
        },
        end: {
          line: 5,
          column: 42
        }
      },
      "3": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 38
        }
      },
      "4": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 12,
          column: 9
        }
      },
      "5": {
        start: {
          line: 11,
          column: 12
        },
        end: {
          line: 11,
          column: 63
        }
      },
      "6": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 42
        }
      },
      "7": {
        start: {
          line: 16,
          column: 28
        },
        end: {
          line: 16,
          column: 54
        }
      },
      "8": {
        start: {
          line: 17,
          column: 25
        },
        end: {
          line: 17,
          column: 27
        }
      },
      "9": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 21,
          column: 9
        }
      },
      "10": {
        start: {
          line: 19,
          column: 29
        },
        end: {
          line: 19,
          column: 82
        }
      },
      "11": {
        start: {
          line: 20,
          column: 12
        },
        end: {
          line: 20,
          column: 36
        }
      },
      "12": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 24
        }
      },
      "13": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 65
        }
      },
      "14": {
        start: {
          line: 26,
          column: 25
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "15": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 118
        }
      },
      "16": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 98
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 24
        }
      },
      "18": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 25
        }
      },
      "19": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 62,
          column: 9
        }
      },
      "20": {
        start: {
          line: 44,
          column: 36
        },
        end: {
          line: 44,
          column: 124
        }
      },
      "21": {
        start: {
          line: 44,
          column: 75
        },
        end: {
          line: 44,
          column: 123
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 51,
          column: 19
        }
      },
      "24": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 61,
          column: 15
        }
      },
      "25": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 22
        }
      },
      "26": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 26
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "28": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 73,
          column: 15
        }
      },
      "29": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 81,
          column: 15
        }
      },
      "30": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 23
        }
      },
      "31": {
        start: {
          line: 86,
          column: 28
        },
        end: {
          line: 86,
          column: 30
        }
      },
      "32": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 95,
          column: 9
        }
      },
      "33": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 89,
          column: 25
        }
      },
      "34": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 25
        }
      },
      "35": {
        start: {
          line: 90,
          column: 39
        },
        end: {
          line: 90,
          column: 81
        }
      },
      "36": {
        start: {
          line: 91,
          column: 31
        },
        end: {
          line: 91,
          column: 135
        }
      },
      "37": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "38": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 45
        }
      },
      "39": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 83
        }
      },
      "40": {
        start: {
          line: 96,
          column: 42
        },
        end: {
          line: 96,
          column: 69
        }
      },
      "41": {
        start: {
          line: 99,
          column: 25
        },
        end: {
          line: 99,
          column: 26
        }
      },
      "42": {
        start: {
          line: 100,
          column: 24
        },
        end: {
          line: 100,
          column: 26
        }
      },
      "43": {
        start: {
          line: 101,
          column: 30
        },
        end: {
          line: 101,
          column: 117
        }
      },
      "44": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 103,
          column: 83
        }
      },
      "45": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 83
        }
      },
      "46": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 105,
          column: 90
        }
      },
      "47": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 46
        }
      },
      "48": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 9
        }
      },
      "49": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 30
        }
      },
      "50": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 47
        }
      },
      "51": {
        start: {
          line: 113,
          column: 8
        },
        end: {
          line: 113,
          column: 110
        }
      },
      "52": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "53": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 24
        }
      },
      "54": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 126,
          column: 10
        }
      },
      "55": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 136,
          column: 9
        }
      },
      "56": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "57": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 141,
          column: 13
        }
      },
      "58": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 37
        }
      },
      "59": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 17
        }
      },
      "60": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "61": {
        start: {
          line: 148,
          column: 28
        },
        end: {
          line: 148,
          column: 65
        }
      },
      "62": {
        start: {
          line: 149,
          column: 26
        },
        end: {
          line: 149,
          column: 27
        }
      },
      "63": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "64": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 153,
          column: 13
        }
      },
      "65": {
        start: {
          line: 152,
          column: 16
        },
        end: {
          line: 152,
          column: 30
        }
      },
      "66": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 55
        }
      },
      "67": {
        start: {
          line: 158,
          column: 25
        },
        end: {
          line: 158,
          column: 119
        }
      },
      "68": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 50
        }
      },
      "69": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 20
        }
      },
      "70": {
        start: {
          line: 168,
          column: 24
        },
        end: {
          line: 168,
          column: 26
        }
      },
      "71": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "72": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 89
        }
      },
      "73": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "74": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 83
        }
      },
      "75": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 178,
          column: 9
        }
      },
      "76": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 75
        }
      },
      "77": {
        start: {
          line: 179,
          column: 25
        },
        end: {
          line: 180,
          column: 73
        }
      },
      "78": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "79": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 64
        }
      },
      "80": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 34
        }
      },
      "81": {
        start: {
          line: 187,
          column: 25
        },
        end: {
          line: 187,
          column: 27
        }
      },
      "82": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 189,
          column: 28
        }
      },
      "83": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 189,
          column: 28
        }
      },
      "84": {
        start: {
          line: 191,
          column: 30
        },
        end: {
          line: 191,
          column: 100
        }
      },
      "85": {
        start: {
          line: 191,
          column: 51
        },
        end: {
          line: 191,
          column: 99
        }
      },
      "86": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 199,
          column: 9
        }
      },
      "87": {
        start: {
          line: 193,
          column: 12
        },
        end: {
          line: 194,
          column: 25
        }
      },
      "88": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 25
        }
      },
      "89": {
        start: {
          line: 195,
          column: 28
        },
        end: {
          line: 195,
          column: 84
        }
      },
      "90": {
        start: {
          line: 196,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "91": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 39
        }
      },
      "92": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 68
        }
      },
      "93": {
        start: {
          line: 200,
          column: 39
        },
        end: {
          line: 200,
          column: 66
        }
      },
      "94": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      "95": {
        start: {
          line: 205,
          column: 31
        },
        end: {
          line: 205,
          column: 93
        }
      },
      "96": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "97": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 213,
          column: 18
        }
      },
      "98": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 20
        }
      },
      "99": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "100": {
        start: {
          line: 227,
          column: 27
        },
        end: {
          line: 227,
          column: 50
        }
      },
      "101": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 235,
          column: 9
        }
      },
      "102": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "103": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 233,
          column: 17
        }
      },
      "104": {
        start: {
          line: 231,
          column: 43
        },
        end: {
          line: 231,
          column: 89
        }
      },
      "105": {
        start: {
          line: 232,
          column: 20
        },
        end: {
          line: 232,
          column: 31
        }
      },
      "106": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 17
        }
      },
      "107": {
        start: {
          line: 240,
          column: 28
        },
        end: {
          line: 240,
          column: 53
        }
      },
      "108": {
        start: {
          line: 241,
          column: 30
        },
        end: {
          line: 247,
          column: 9
        }
      },
      "109": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "110": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "111": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 29
        }
      },
      "112": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 22
        }
      },
      "113": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "114": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 38
        }
      },
      "115": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "116": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 32
        }
      },
      "117": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 25
        }
      },
      "118": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 267,
          column: 61
        }
      },
      "119": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 271,
          column: 29
        }
      },
      "120": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 29
        }
      },
      "121": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 279,
          column: 9
        }
      },
      "122": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 278,
          column: 13
        }
      },
      "123": {
        start: {
          line: 277,
          column: 16
        },
        end: {
          line: 277,
          column: 38
        }
      },
      "124": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 25
        }
      },
      "125": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 284,
          column: 25
        }
      },
      "126": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 284,
          column: 25
        }
      },
      "127": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "128": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 290,
          column: 13
        }
      },
      "129": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 74
        }
      },
      "130": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 21
        }
      },
      "131": {
        start: {
          line: 296,
          column: 32
        },
        end: {
          line: 296,
          column: 34
        }
      },
      "132": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "133": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 38
        }
      },
      "134": {
        start: {
          line: 299,
          column: 12
        },
        end: {
          line: 299,
          column: 41
        }
      },
      "135": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 41
        }
      },
      "136": {
        start: {
          line: 302,
          column: 13
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "137": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 38
        }
      },
      "138": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 304,
          column: 38
        }
      },
      "139": {
        start: {
          line: 306,
          column: 13
        },
        end: {
          line: 313,
          column: 9
        }
      },
      "140": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 307,
          column: 42
        }
      },
      "141": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 308,
          column: 41
        }
      },
      "142": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 37
        }
      },
      "143": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 312,
          column: 38
        }
      },
      "144": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 31
        }
      },
      "145": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 318,
          column: 29
        }
      },
      "146": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 318,
          column: 29
        }
      },
      "147": {
        start: {
          line: 319,
          column: 28
        },
        end: {
          line: 319,
          column: 30
        }
      },
      "148": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "149": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 324,
          column: 25
        }
      },
      "150": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 324,
          column: 25
        }
      },
      "151": {
        start: {
          line: 325,
          column: 31
        },
        end: {
          line: 325,
          column: 100
        }
      },
      "152": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "153": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 56
        }
      },
      "154": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 330,
          column: 77
        }
      },
      "155": {
        start: {
          line: 333,
          column: 26
        },
        end: {
          line: 333,
          column: 53
        }
      },
      "156": {
        start: {
          line: 335,
          column: 8
        },
        end: {
          line: 337,
          column: 9
        }
      },
      "157": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 65
        }
      },
      "158": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "159": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 58
        }
      },
      "160": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 343,
          column: 9
        }
      },
      "161": {
        start: {
          line: 342,
          column: 12
        },
        end: {
          line: 342,
          column: 64
        }
      },
      "162": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 25
        }
      },
      "163": {
        start: {
          line: 347,
          column: 25
        },
        end: {
          line: 347,
          column: 66
        }
      },
      "164": {
        start: {
          line: 348,
          column: 35
        },
        end: {
          line: 348,
          column: 37
        }
      },
      "165": {
        start: {
          line: 349,
          column: 40
        },
        end: {
          line: 349,
          column: 42
        }
      },
      "166": {
        start: {
          line: 350,
          column: 46
        },
        end: {
          line: 350,
          column: 48
        }
      },
      "167": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "168": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 70
        }
      },
      "169": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 78
        }
      },
      "170": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 358,
          column: 9
        }
      },
      "171": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 115
        }
      },
      "172": {
        start: {
          line: 359,
          column: 29
        },
        end: {
          line: 359,
          column: 90
        }
      },
      "173": {
        start: {
          line: 359,
          column: 57
        },
        end: {
          line: 359,
          column: 83
        }
      },
      "174": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 362,
          column: 9
        }
      },
      "175": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 95
        }
      },
      "176": {
        start: {
          line: 363,
          column: 34
        },
        end: {
          line: 366,
          column: 16
        }
      },
      "177": {
        start: {
          line: 364,
          column: 35
        },
        end: {
          line: 364,
          column: 115
        }
      },
      "178": {
        start: {
          line: 364,
          column: 64
        },
        end: {
          line: 364,
          column: 114
        }
      },
      "179": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 365,
          column: 35
        }
      },
      "180": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "181": {
        start: {
          line: 368,
          column: 12
        },
        end: {
          line: 368,
          column: 122
        }
      },
      "182": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 374,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 5
          }
        },
        loc: {
          start: {
            line: 3,
            column: 27
          },
          end: {
            line: 7,
            column: 5
          }
        },
        line: 3
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 29
          },
          end: {
            line: 13,
            column: 5
          }
        },
        line: 8
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 14,
            column: 4
          },
          end: {
            line: 14,
            column: 5
          }
        },
        loc: {
          start: {
            line: 14,
            column: 41
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 14
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        loc: {
          start: {
            line: 24,
            column: 56
          },
          end: {
            line: 39,
            column: 5
          }
        },
        line: 24
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        loc: {
          start: {
            line: 40,
            column: 55
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 40
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 44,
            column: 67
          },
          end: {
            line: 44,
            column: 68
          }
        },
        loc: {
          start: {
            line: 44,
            column: 75
          },
          end: {
            line: 44,
            column: 123
          }
        },
        line: 44
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        loc: {
          start: {
            line: 65,
            column: 43
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 65
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        loc: {
          start: {
            line: 85,
            column: 89
          },
          end: {
            line: 97,
            column: 5
          }
        },
        line: 85
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 96,
            column: 32
          },
          end: {
            line: 96,
            column: 33
          }
        },
        loc: {
          start: {
            line: 96,
            column: 42
          },
          end: {
            line: 96,
            column: 69
          }
        },
        line: 96
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        loc: {
          start: {
            line: 98,
            column: 96
          },
          end: {
            line: 127,
            column: 5
          }
        },
        line: 98
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        loc: {
          start: {
            line: 128,
            column: 50
          },
          end: {
            line: 144,
            column: 5
          }
        },
        line: 128
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 145,
            column: 4
          },
          end: {
            line: 145,
            column: 5
          }
        },
        loc: {
          start: {
            line: 145,
            column: 50
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 145
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 47
          },
          end: {
            line: 161,
            column: 5
          }
        },
        line: 157
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 162,
            column: 4
          },
          end: {
            line: 162,
            column: 5
          }
        },
        loc: {
          start: {
            line: 162,
            column: 87
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 162
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 167,
            column: 5
          }
        },
        loc: {
          start: {
            line: 167,
            column: 88
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 167
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 60
          },
          end: {
            line: 201,
            column: 5
          }
        },
        line: 186
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 191,
            column: 46
          },
          end: {
            line: 191,
            column: 47
          }
        },
        loc: {
          start: {
            line: 191,
            column: 51
          },
          end: {
            line: 191,
            column: 99
          }
        },
        line: 191
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 200,
            column: 29
          },
          end: {
            line: 200,
            column: 30
          }
        },
        loc: {
          start: {
            line: 200,
            column: 39
          },
          end: {
            line: 200,
            column: 66
          }
        },
        line: 200
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 60
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 202
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 56
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 218
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 231,
            column: 33
          },
          end: {
            line: 231,
            column: 34
          }
        },
        loc: {
          start: {
            line: 231,
            column: 43
          },
          end: {
            line: 231,
            column: 89
          }
        },
        line: 231
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 53
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 238
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 255,
            column: 4
          },
          end: {
            line: 255,
            column: 5
          }
        },
        loc: {
          start: {
            line: 255,
            column: 48
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 255
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 264,
            column: 5
          }
        },
        loc: {
          start: {
            line: 264,
            column: 43
          },
          end: {
            line: 268,
            column: 5
          }
        },
        line: 264
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 269,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        loc: {
          start: {
            line: 269,
            column: 57
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 269
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 55
          },
          end: {
            line: 293,
            column: 5
          }
        },
        line: 282
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 294,
            column: 4
          },
          end: {
            line: 294,
            column: 5
          }
        },
        loc: {
          start: {
            line: 294,
            column: 47
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 294
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 88
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 316
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 332,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        loc: {
          start: {
            line: 332,
            column: 69
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 332
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 47
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 346
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 359,
            column: 52
          },
          end: {
            line: 359,
            column: 53
          }
        },
        loc: {
          start: {
            line: 359,
            column: 57
          },
          end: {
            line: 359,
            column: 83
          }
        },
        line: 359
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 363,
            column: 57
          },
          end: {
            line: 363,
            column: 58
          }
        },
        loc: {
          start: {
            line: 363,
            column: 62
          },
          end: {
            line: 366,
            column: 9
          }
        },
        line: 363
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 364,
            column: 59
          },
          end: {
            line: 364,
            column: 60
          }
        },
        loc: {
          start: {
            line: 364,
            column: 64
          },
          end: {
            line: 364,
            column: 114
          }
        },
        line: 364
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 6,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 4,
            column: 8
          },
          end: {
            line: 6,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 4
      },
      "1": {
        loc: {
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 22
          },
          end: {
            line: 15,
            column: 36
          }
        }, {
          start: {
            line: 15,
            column: 40
          },
          end: {
            line: 15,
            column: 42
          }
        }],
        line: 15
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 28
          },
          end: {
            line: 16,
            column: 48
          }
        }, {
          start: {
            line: 16,
            column: 52
          },
          end: {
            line: 16,
            column: 54
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 62,
            column: 9
          }
        }, {
          start: {
            line: 54,
            column: 13
          },
          end: {
            line: 62,
            column: 9
          }
        }],
        line: 42
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 75
          },
          end: {
            line: 44,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 75
          },
          end: {
            line: 44,
            column: 97
          }
        }, {
          start: {
            line: 44,
            column: 101
          },
          end: {
            line: 44,
            column: 123
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 30
          },
          end: {
            line: 49,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 30
          },
          end: {
            line: 49,
            column: 43
          }
        }, {
          start: {
            line: 49,
            column: 47
          },
          end: {
            line: 49,
            column: 52
          }
        }],
        line: 49
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 82,
            column: 9
          }
        }, {
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 82,
            column: 9
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 89,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 12
          },
          end: {
            line: 89,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "8": {
        loc: {
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 26
          }
        }, {
          start: {
            line: 92,
            column: 30
          },
          end: {
            line: 92,
            column: 57
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 106,
            column: 22
          },
          end: {
            line: 106,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 106,
            column: 41
          }
        }, {
          start: {
            line: 106,
            column: 44
          },
          end: {
            line: 106,
            column: 45
          }
        }],
        line: 106
      },
      "11": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 111,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "12": {
        loc: {
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 8
          },
          end: {
            line: 116,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 114
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 141,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 139,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 138,
            column: 65
          }
        }, {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 139,
            column: 65
          }
        }],
        line: 138
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 12
          },
          end: {
            line: 153,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 155,
            column: 15
          },
          end: {
            line: 155,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 33
          },
          end: {
            line: 155,
            column: 50
          }
        }, {
          start: {
            line: 155,
            column: 53
          },
          end: {
            line: 155,
            column: 54
          }
        }],
        line: 155
      },
      "17": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 171,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "18": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "19": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 178,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "20": {
        loc: {
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 176,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 12
          },
          end: {
            line: 175,
            column: 57
          }
        }, {
          start: {
            line: 176,
            column: 12
          },
          end: {
            line: 176,
            column: 57
          }
        }],
        line: 175
      },
      "21": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 189,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 8
          },
          end: {
            line: 189,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 191,
            column: 51
          },
          end: {
            line: 191,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 51
          },
          end: {
            line: 191,
            column: 67
          }
        }, {
          start: {
            line: 191,
            column: 71
          },
          end: {
            line: 191,
            column: 99
          }
        }],
        line: 191
      },
      "24": {
        loc: {
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 194,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 12
          },
          end: {
            line: 194,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "25": {
        loc: {
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 193,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 16
          },
          end: {
            line: 193,
            column: 38
          }
        }, {
          start: {
            line: 193,
            column: 42
          },
          end: {
            line: 193,
            column: 64
          }
        }],
        line: 193
      },
      "26": {
        loc: {
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 198,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "27": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 214,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "28": {
        loc: {
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 229,
            column: 12
          },
          end: {
            line: 234,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 229
      },
      "29": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 233,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "30": {
        loc: {
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 12
          },
          end: {
            line: 251,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "31": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "32": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 256,
            column: 38
          }
        }, {
          start: {
            line: 256,
            column: 42
          },
          end: {
            line: 256,
            column: 74
          }
        }],
        line: 256
      },
      "33": {
        loc: {
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 259,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 259
      },
      "34": {
        loc: {
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 12
          },
          end: {
            line: 259,
            column: 38
          }
        }, {
          start: {
            line: 259,
            column: 42
          },
          end: {
            line: 259,
            column: 90
          }
        }],
        line: 259
      },
      "35": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 267,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 266,
            column: 63
          }
        }, {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 267,
            column: 59
          }
        }],
        line: 266
      },
      "36": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 271,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 271,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "37": {
        loc: {
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 12
          },
          end: {
            line: 278,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "38": {
        loc: {
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 274,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 274,
            column: 16
          },
          end: {
            line: 274,
            column: 53
          }
        }, {
          start: {
            line: 274,
            column: 57
          },
          end: {
            line: 274,
            column: 83
          }
        }],
        line: 274
      },
      "39": {
        loc: {
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 8
          },
          end: {
            line: 284,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "40": {
        loc: {
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "41": {
        loc: {
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 287,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 287,
            column: 35
          }
        }, {
          start: {
            line: 287,
            column: 39
          },
          end: {
            line: 287,
            column: 74
          }
        }, {
          start: {
            line: 287,
            column: 78
          },
          end: {
            line: 287,
            column: 102
          }
        }],
        line: 287
      },
      "42": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        }],
        line: 297
      },
      "43": {
        loc: {
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: 306,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        }],
        line: 302
      },
      "44": {
        loc: {
          start: {
            line: 306,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        }, {
          start: {
            line: 311,
            column: 13
          },
          end: {
            line: 313,
            column: 9
          }
        }],
        line: 306
      },
      "45": {
        loc: {
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 318,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 8
          },
          end: {
            line: 318,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "46": {
        loc: {
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 324,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 323,
            column: 12
          },
          end: {
            line: 324,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 323
      },
      "47": {
        loc: {
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 323,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 16
          },
          end: {
            line: 323,
            column: 42
          }
        }, {
          start: {
            line: 323,
            column: 46
          },
          end: {
            line: 323,
            column: 72
          }
        }],
        line: 323
      },
      "48": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "49": {
        loc: {
          start: {
            line: 330,
            column: 15
          },
          end: {
            line: 330,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 330,
            column: 53
          },
          end: {
            line: 330,
            column: 64
          }
        }, {
          start: {
            line: 330,
            column: 67
          },
          end: {
            line: 330,
            column: 76
          }
        }],
        line: 330
      },
      "50": {
        loc: {
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 8
          },
          end: {
            line: 337,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 335
      },
      "51": {
        loc: {
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 12
          },
          end: {
            line: 335,
            column: 37
          }
        }, {
          start: {
            line: 335,
            column: 41
          },
          end: {
            line: 335,
            column: 73
          }
        }],
        line: 335
      },
      "52": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 340,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "53": {
        loc: {
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 338,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 338,
            column: 38
          }
        }, {
          start: {
            line: 338,
            column: 42
          },
          end: {
            line: 338,
            column: 68
          }
        }],
        line: 338
      },
      "54": {
        loc: {
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 8
          },
          end: {
            line: 343,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "55": {
        loc: {
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 341,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 12
          },
          end: {
            line: 341,
            column: 36
          }
        }, {
          start: {
            line: 341,
            column: 40
          },
          end: {
            line: 341,
            column: 65
          }
        }],
        line: 341
      },
      "56": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 358,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "57": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 356,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 356,
            column: 26
          }
        }, {
          start: {
            line: 356,
            column: 30
          },
          end: {
            line: 356,
            column: 56
          }
        }],
        line: 356
      },
      "58": {
        loc: {
          start: {
            line: 359,
            column: 29
          },
          end: {
            line: 359,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 359,
            column: 29
          },
          end: {
            line: 359,
            column: 84
          }
        }, {
          start: {
            line: 359,
            column: 88
          },
          end: {
            line: 359,
            column: 90
          }
        }],
        line: 359
      },
      "59": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 362,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "60": {
        loc: {
          start: {
            line: 363,
            column: 34
          },
          end: {
            line: 366,
            column: 16
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 34
          },
          end: {
            line: 366,
            column: 10
          }
        }, {
          start: {
            line: 366,
            column: 14
          },
          end: {
            line: 366,
            column: 16
          }
        }],
        line: 363
      },
      "61": {
        loc: {
          start: {
            line: 364,
            column: 64
          },
          end: {
            line: 364,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 64
          },
          end: {
            line: 364,
            column: 87
          }
        }, {
          start: {
            line: 364,
            column: 91
          },
          end: {
            line: 364,
            column: 114
          }
        }],
        line: 364
      },
      "62": {
        loc: {
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 367,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 367
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts"],
      sourcesContent: ["import { N8nNode, N8nWorkflow, N8nNodeTypeDescription } from '../types/n8n.js';\n\nexport interface NodeConnectionSuggestion {\n  sourceNodeId: string;\n  targetNodeId: string;\n  sourceOutput: string;\n  targetInput: string;\n  confidence: number;\n  reasoning: string;\n  dataTypeMatch: boolean;\n  suggestedParameters?: Record<string, unknown>;\n}\n\nexport interface ParameterMapping {\n  sourceParameter: string;\n  targetParameter: string;\n  transformation?: string;\n  confidence: number;\n  dataType: string;\n}\n\nexport interface NodeFlowAnalysis {\n  nodeId: string;\n  nodeType: string;\n  inputs: Array<{\n    name: string;\n    type: string;\n    required: boolean;\n    connectedFrom?: string;\n  }>;\n  outputs: Array<{\n    name: string;\n    type: string;\n    dataStructure?: Record<string, unknown>;\n  }>;\n  suggestedConnections: NodeConnectionSuggestion[];\n  parameterMappings: ParameterMapping[];\n}\n\nexport class SuggestionEngine {\n  private nodeTypeRegistry: Map<string, N8nNodeTypeDescription> = new Map();\n\n  constructor(nodeTypes?: N8nNodeTypeDescription[]) {\n    if (nodeTypes) {\n      this.loadNodeTypes(nodeTypes);\n    }\n  }\n\n  loadNodeTypes(nodeTypes: N8nNodeTypeDescription[]): void {\n    this.nodeTypeRegistry.clear();\n    for (const nodeType of nodeTypes) {\n      this.nodeTypeRegistry.set(nodeType.name, nodeType);\n    }\n  }\n\n  analyzeWorkflowConnections(workflow: N8nWorkflow): NodeFlowAnalysis[] {\n    const nodes = workflow.nodes || [];\n    const connections = workflow.connections || {};\n    const analyses: NodeFlowAnalysis[] = [];\n\n    for (const node of nodes) {\n      const analysis = this.analyzeNodeConnections(node, nodes, connections);\n      analyses.push(analysis);\n    }\n\n    return analyses;\n  }\n\n  private analyzeNodeConnections(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    connections: Record<string, unknown>\n  ): NodeFlowAnalysis {\n    const nodeTypeInfo = this.nodeTypeRegistry.get(node.type);\n\n    const analysis: NodeFlowAnalysis = {\n      nodeId: node.id,\n      nodeType: node.type,\n      inputs: this.analyzeNodeInputs(node, nodeTypeInfo, connections),\n      outputs: this.analyzeNodeOutputs(node, nodeTypeInfo),\n      suggestedConnections: [],\n      parameterMappings: [],\n    };\n\n    // Generate connection suggestions\n    analysis.suggestedConnections = this.generateConnectionSuggestions(\n      node,\n      allNodes,\n      nodeTypeInfo,\n      connections\n    );\n\n    // Generate parameter mappings\n    analysis.parameterMappings = this.generateParameterMappings(node, allNodes, nodeTypeInfo);\n\n    return analysis;\n  }\n\n  private analyzeNodeInputs(\n    node: N8nNode,\n    nodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ) {\n    const inputs = [];\n\n    if (nodeTypeInfo) {\n      // Use node type information to determine expected inputs\n      const inputProperties = nodeTypeInfo.properties.filter(\n        prop => prop.type !== 'hidden' && prop.type !== 'notice'\n      );\n\n      for (const prop of inputProperties) {\n        inputs.push({\n          name: prop.name,\n          type: prop.type,\n          required: prop.required || false,\n          connectedFrom: this.findConnectionSource(node.id, prop.name, connections),\n        });\n      }\n    } else {\n      // Fallback: analyze based on common input patterns\n      inputs.push({\n        name: 'main',\n        type: 'object',\n        required: true,\n        connectedFrom: this.findConnectionSource(node.id, 'main', connections),\n      });\n    }\n\n    return inputs;\n  }\n\n  private analyzeNodeOutputs(node: N8nNode, nodeTypeInfo?: N8nNodeTypeDescription) {\n    const outputs = [];\n\n    if (nodeTypeInfo) {\n      // Most n8n nodes have a 'main' output\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: this.predictOutputStructure(node, nodeTypeInfo),\n      });\n    } else {\n      // Default output structure\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: {},\n      });\n    }\n\n    return outputs;\n  }\n\n  private generateConnectionSuggestions(\n    targetNode: N8nNode,\n    allNodes: N8nNode[],\n    targetNodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion[] {\n    const suggestions: NodeConnectionSuggestion[] = [];\n\n    for (const sourceNode of allNodes) {\n      if (sourceNode.id === targetNode.id) continue;\n\n      const sourceNodeTypeInfo = this.nodeTypeRegistry.get(sourceNode.type);\n      const suggestion = this.evaluateNodeConnection(\n        sourceNode,\n        targetNode,\n        sourceNodeTypeInfo,\n        targetNodeTypeInfo,\n        connections\n      );\n\n      if (suggestion && suggestion.confidence > 0.3) {\n        suggestions.push(suggestion);\n      }\n    }\n\n    return suggestions.sort((a, b) => b.confidence - a.confidence).slice(0, 5);\n  }\n\n  private evaluateNodeConnection(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion | null {\n    let confidence = 0;\n    let reasoning = '';\n    const dataTypeMatch = this.checkDataTypeCompatibility(\n      sourceNode,\n      targetNode,\n      sourceTypeInfo,\n      targetTypeInfo\n    );\n\n    // Rule-based scoring\n    confidence += this.scoreBasedOnNodeTypes(sourceNode.type, targetNode.type);\n    confidence += this.scoreBasedOnNodeNames(sourceNode.name, targetNode.name);\n    confidence += this.scoreBasedOnPosition(sourceNode.position, targetNode.position);\n    confidence += dataTypeMatch ? 0.3 : 0;\n\n    // Check if already connected\n    if (this.areNodesConnected(sourceNode.id, targetNode.id, connections)) {\n      confidence -= 0.5; // Reduce score for already connected nodes\n      reasoning += 'Already connected. ';\n    }\n\n    // Generate reasoning\n    reasoning += this.generateConnectionReasoning(\n      sourceNode,\n      targetNode,\n      sourceTypeInfo,\n      targetTypeInfo\n    );\n\n    if (confidence <= 0) {\n      return null;\n    }\n\n    return {\n      sourceNodeId: sourceNode.id,\n      targetNodeId: targetNode.id,\n      sourceOutput: 'main',\n      targetInput: 'main',\n      confidence: Math.min(confidence, 1),\n      reasoning: reasoning.trim(),\n      dataTypeMatch,\n      suggestedParameters: this.generateSuggestedParameters(\n        sourceNode,\n        targetNode,\n        sourceTypeInfo,\n        targetTypeInfo\n      ),\n    };\n  }\n\n  private scoreBasedOnNodeTypes(sourceType: string, targetType: string): number {\n    // Define common node type connection patterns\n    const connectionPatterns = [\n      { source: 'trigger', target: 'action', score: 0.4 },\n      { source: 'webhook', target: 'set', score: 0.3 },\n      { source: 'http', target: 'json', score: 0.3 },\n      { source: 'database', target: 'set', score: 0.2 },\n      { source: 'if', target: 'action', score: 0.2 },\n    ];\n\n    for (const pattern of connectionPatterns) {\n      if (\n        sourceType.toLowerCase().includes(pattern.source) &&\n        targetType.toLowerCase().includes(pattern.target)\n      ) {\n        return pattern.score;\n      }\n    }\n\n    return 0;\n  }\n\n  private scoreBasedOnNodeNames(sourceName: string, targetName: string): number {\n    // Score based on semantic similarity of node names\n    const sourceWords = sourceName.toLowerCase().split(/\\s+/);\n    const targetWords = targetName.toLowerCase().split(/\\s+/);\n\n    let commonWords = 0;\n    for (const sourceWord of sourceWords) {\n      if (targetWords.includes(sourceWord)) {\n        commonWords++;\n      }\n    }\n\n    return commonWords > 0 ? 0.1 * commonWords : 0;\n  }\n\n  private scoreBasedOnPosition(sourcePos: [number, number], targetPos: [number, number]): number {\n    const distance = Math.sqrt(\n      Math.pow(targetPos[0] - sourcePos[0], 2) + Math.pow(targetPos[1] - sourcePos[1], 2)\n    );\n\n    // Closer nodes are more likely to be connected\n    return Math.max(0, 0.2 - distance / 1000);\n  }\n\n  private checkDataTypeCompatibility(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): boolean {\n    // Basic data type compatibility check\n    // Most n8n nodes work with JSON objects, so we'll be optimistic\n    return true;\n  }\n\n  private generateConnectionReasoning(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): string {\n    const reasons = [];\n\n    if (sourceNode.type.includes('trigger')) {\n      reasons.push('Source is a trigger node, typically connects to action nodes');\n    }\n\n    if (targetNode.type.includes('http')) {\n      reasons.push('Target accepts HTTP data, compatible with most outputs');\n    }\n\n    if (\n      sourceNode.name.toLowerCase().includes('get') &&\n      targetNode.name.toLowerCase().includes('set')\n    ) {\n      reasons.push('Data flow pattern: retrieve then process/store');\n    }\n\n    const distance = Math.sqrt(\n      Math.pow(targetNode.position[0] - sourceNode.position[0], 2) +\n        Math.pow(targetNode.position[1] - sourceNode.position[1], 2)\n    );\n\n    if (distance < 300) {\n      reasons.push('Nodes are positioned close together');\n    }\n\n    return reasons.join('. ');\n  }\n\n  private generateParameterMappings(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    nodeTypeInfo?: N8nNodeTypeDescription\n  ): ParameterMapping[] {\n    const mappings: ParameterMapping[] = [];\n\n    if (!nodeTypeInfo) return mappings;\n\n    // Find upstream nodes that could provide data\n    const upstreamNodes = allNodes.filter(n => n.id !== node.id && this.isUpstreamNode(n, node));\n\n    for (const prop of nodeTypeInfo.properties) {\n      if (prop.type === 'hidden' || prop.type === 'notice') continue;\n\n      const mapping = this.generateParameterMapping(node, prop, upstreamNodes);\n      if (mapping) {\n        mappings.push(mapping);\n      }\n    }\n\n    return mappings.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  private generateParameterMapping(\n    node: N8nNode,\n    property: any,\n    upstreamNodes: N8nNode[]\n  ): ParameterMapping | null {\n    // Generate mappings based on parameter names and types\n    for (const upstreamNode of upstreamNodes) {\n      const similarity = this.calculateParameterSimilarity(property.name, upstreamNode);\n\n      if (similarity > 0.5) {\n        return {\n          sourceParameter: `{{$node[\"${upstreamNode.name}\"].json[\"${this.findBestSourceParameter(property.name, upstreamNode)}\"]}}`,\n          targetParameter: property.name,\n          transformation: this.suggestTransformation(property, upstreamNode),\n          confidence: similarity,\n          dataType: property.type,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  private calculateParameterSimilarity(paramName: string, sourceNode: N8nNode): number {\n    // Simple similarity based on common parameter names\n    const commonMappings = {\n      email: ['email', 'mail', 'emailAddress'],\n      name: ['name', 'title', 'displayName'],\n      url: ['url', 'link', 'href'],\n      id: ['id', 'identifier', 'key'],\n      data: ['data', 'payload', 'content'],\n    };\n\n    const paramLower = paramName.toLowerCase();\n\n    for (const [target, sources] of Object.entries(commonMappings)) {\n      if (paramLower.includes(target)) {\n        // Check if source node likely produces this type of data\n        if (sources.some(source => sourceNode.name.toLowerCase().includes(source))) {\n          return 0.8;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  private findBestSourceParameter(targetParam: string, sourceNode: N8nNode): string {\n    // Try to match parameter names\n    const targetLower = targetParam.toLowerCase();\n\n    const commonMatches = {\n      email: 'email',\n      name: 'name',\n      url: 'url',\n      id: 'id',\n      data: 'data',\n    };\n\n    for (const [pattern, param] of Object.entries(commonMatches)) {\n      if (targetLower.includes(pattern)) {\n        return param;\n      }\n    }\n\n    return 'data'; // Default fallback\n  }\n\n  private suggestTransformation(property: any, sourceNode: N8nNode): string | undefined {\n    if (property.type === 'string' && sourceNode.type.includes('json')) {\n      return 'JSON.stringify()';\n    }\n\n    if (property.type === 'number' && sourceNode.name.toLowerCase().includes('string')) {\n      return 'parseInt()';\n    }\n\n    return undefined;\n  }\n\n  private isUpstreamNode(sourceNode: N8nNode, targetNode: N8nNode): boolean {\n    // Simple position-based heuristic\n    return (\n      sourceNode.position[0] < targetNode.position[0] ||\n      sourceNode.position[1] < targetNode.position[1]\n    );\n  }\n\n  private findConnectionSource(\n    nodeId: string,\n    inputName: string,\n    connections?: Record<string, unknown>\n  ): string | undefined {\n    if (!connections) return undefined;\n\n    // Parse n8n connections format to find source\n    for (const [sourceNodeName, sourceConnections] of Object.entries(connections)) {\n      if (typeof sourceConnections === 'object' && sourceConnections !== null) {\n        // Check if this source connects to our target node\n        // This is a simplified check - actual n8n connection format is more complex\n        return sourceNodeName;\n      }\n    }\n\n    return undefined;\n  }\n\n  private areNodesConnected(\n    sourceId: string,\n    targetId: string,\n    connections?: Record<string, unknown>\n  ): boolean {\n    if (!connections) return false;\n\n    // Simplified connection check\n    for (const [nodeId, nodeConnections] of Object.entries(connections)) {\n      if (nodeId === sourceId && typeof nodeConnections === 'object' && nodeConnections !== null) {\n        // Check if target is in the connections\n        return JSON.stringify(nodeConnections).includes(targetId);\n      }\n    }\n\n    return false;\n  }\n\n  private predictOutputStructure(\n    node: N8nNode,\n    nodeTypeInfo: N8nNodeTypeDescription\n  ): Record<string, unknown> {\n    // Predict the likely output structure based on node type\n    const outputStructure: Record<string, unknown> = {};\n\n    if (node.type.includes('http')) {\n      outputStructure.data = {};\n      outputStructure.headers = {};\n      outputStructure.status = 200;\n    } else if (node.type.includes('database')) {\n      outputStructure.rows = [];\n      outputStructure.count = 0;\n    } else if (node.type.includes('file')) {\n      outputStructure.filename = '';\n      outputStructure.content = '';\n      outputStructure.size = 0;\n    } else {\n      outputStructure.data = {};\n    }\n\n    return outputStructure;\n  }\n\n  private generateSuggestedParameters(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): Record<string, unknown> | undefined {\n    if (!targetTypeInfo) return undefined;\n\n    const suggestions: Record<string, unknown> = {};\n\n    // Generate parameter suggestions based on source node data\n    for (const property of targetTypeInfo.properties.slice(0, 3)) {\n      // Limit to prevent large responses\n      if (property.type === 'hidden' || property.type === 'notice') continue;\n\n      const suggestion = this.suggestParameterFromSource(property, sourceNode, sourceTypeInfo);\n      if (suggestion !== undefined) {\n        suggestions[property.name] = suggestion;\n      }\n    }\n\n    return Object.keys(suggestions).length > 0 ? suggestions : undefined;\n  }\n\n  private suggestParameterFromSource(\n    property: any,\n    sourceNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription\n  ): unknown {\n    const paramName = property.name.toLowerCase();\n\n    // Common parameter mapping patterns\n    if (paramName.includes('url') && sourceNode.type.includes('http')) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"url\"]}}`;\n    }\n\n    if (paramName.includes('data') || paramName.includes('body')) {\n      return `{{$node[\"${sourceNode.name}\"].json}}`;\n    }\n\n    if (paramName.includes('id') && sourceNode.parameters?.id) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"id\"]}}`;\n    }\n\n    return undefined;\n  }\n\n  generateSmartWorkflowSuggestions(workflow: N8nWorkflow): {\n    missingConnections: NodeConnectionSuggestion[];\n    optimizationSuggestions: string[];\n    parameterMappingOpportunities: ParameterMapping[];\n  } {\n    const analyses = this.analyzeWorkflowConnections(workflow);\n    const missingConnections: NodeConnectionSuggestion[] = [];\n    const optimizationSuggestions: string[] = [];\n    const parameterMappingOpportunities: ParameterMapping[] = [];\n\n    for (const analysis of analyses) {\n      missingConnections.push(...analysis.suggestedConnections);\n      parameterMappingOpportunities.push(...analysis.parameterMappings);\n    }\n\n    // Generate optimization suggestions\n    if (workflow.nodes && workflow.nodes.length > 10) {\n      optimizationSuggestions.push(\n        'Consider breaking this large workflow into smaller, reusable workflows'\n      );\n    }\n\n    const triggerNodes = workflow.nodes?.filter(n => n.type.includes('trigger')) || [];\n    if (triggerNodes.length === 0) {\n      optimizationSuggestions.push('This workflow appears to be missing a trigger node');\n    }\n\n    const disconnectedNodes =\n      workflow.nodes?.filter(n => {\n        const hasConnections = missingConnections.some(\n          c => c.sourceNodeId === n.id || c.targetNodeId === n.id\n        );\n        return !hasConnections;\n      }) || [];\n\n    if (disconnectedNodes.length > 0) {\n      optimizationSuggestions.push(\n        `${disconnectedNodes.length} nodes appear to be disconnected from the workflow`\n      );\n    }\n\n    return {\n      missingConnections: missingConnections.slice(0, 10), // Top 10 suggestions\n      optimizationSuggestions,\n      parameterMappingOpportunities: parameterMappingOpportunities.slice(0, 15), // Top 15 mappings\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e3729c11d18049e8e6b6ad02722e11ef9c4e04af"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gio26vf7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gio26vf7m();
export class SuggestionEngine {
  nodeTypeRegistry =
  /* istanbul ignore next */
  (cov_gio26vf7m().s[0]++, new Map());
  constructor(nodeTypes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[0]++;
    cov_gio26vf7m().s[1]++;
    if (nodeTypes) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[0][0]++;
      cov_gio26vf7m().s[2]++;
      this.loadNodeTypes(nodeTypes);
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[0][1]++;
    }
  }
  loadNodeTypes(nodeTypes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[1]++;
    cov_gio26vf7m().s[3]++;
    this.nodeTypeRegistry.clear();
    /* istanbul ignore next */
    cov_gio26vf7m().s[4]++;
    for (const nodeType of nodeTypes) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[5]++;
      this.nodeTypeRegistry.set(nodeType.name, nodeType);
    }
  }
  analyzeWorkflowConnections(workflow) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[2]++;
    const nodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[6]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[1][0]++, workflow.nodes) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[1][1]++, []));
    const connections =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[7]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[2][0]++, workflow.connections) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[2][1]++, {}));
    const analyses =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[8]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[9]++;
    for (const node of nodes) {
      const analysis =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[10]++, this.analyzeNodeConnections(node, nodes, connections));
      /* istanbul ignore next */
      cov_gio26vf7m().s[11]++;
      analyses.push(analysis);
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[12]++;
    return analyses;
  }
  analyzeNodeConnections(node, allNodes, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[3]++;
    const nodeTypeInfo =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[13]++, this.nodeTypeRegistry.get(node.type));
    const analysis =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[14]++, {
      nodeId: node.id,
      nodeType: node.type,
      inputs: this.analyzeNodeInputs(node, nodeTypeInfo, connections),
      outputs: this.analyzeNodeOutputs(node, nodeTypeInfo),
      suggestedConnections: [],
      parameterMappings: []
    });
    // Generate connection suggestions
    /* istanbul ignore next */
    cov_gio26vf7m().s[15]++;
    analysis.suggestedConnections = this.generateConnectionSuggestions(node, allNodes, nodeTypeInfo, connections);
    // Generate parameter mappings
    /* istanbul ignore next */
    cov_gio26vf7m().s[16]++;
    analysis.parameterMappings = this.generateParameterMappings(node, allNodes, nodeTypeInfo);
    /* istanbul ignore next */
    cov_gio26vf7m().s[17]++;
    return analysis;
  }
  analyzeNodeInputs(node, nodeTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[4]++;
    const inputs =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[18]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[19]++;
    if (nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[3][0]++;
      // Use node type information to determine expected inputs
      const inputProperties =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[20]++, nodeTypeInfo.properties.filter(prop => {
        /* istanbul ignore next */
        cov_gio26vf7m().f[5]++;
        cov_gio26vf7m().s[21]++;
        return /* istanbul ignore next */(cov_gio26vf7m().b[4][0]++, prop.type !== 'hidden') &&
        /* istanbul ignore next */
        (cov_gio26vf7m().b[4][1]++, prop.type !== 'notice');
      }));
      /* istanbul ignore next */
      cov_gio26vf7m().s[22]++;
      for (const prop of inputProperties) {
        /* istanbul ignore next */
        cov_gio26vf7m().s[23]++;
        inputs.push({
          name: prop.name,
          type: prop.type,
          required:
          /* istanbul ignore next */
          (cov_gio26vf7m().b[5][0]++, prop.required) ||
          /* istanbul ignore next */
          (cov_gio26vf7m().b[5][1]++, false),
          connectedFrom: this.findConnectionSource(node.id, prop.name, connections)
        });
      }
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[3][1]++;
      cov_gio26vf7m().s[24]++;
      // Fallback: analyze based on common input patterns
      inputs.push({
        name: 'main',
        type: 'object',
        required: true,
        connectedFrom: this.findConnectionSource(node.id, 'main', connections)
      });
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[25]++;
    return inputs;
  }
  analyzeNodeOutputs(node, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[6]++;
    const outputs =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[26]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[27]++;
    if (nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[6][0]++;
      cov_gio26vf7m().s[28]++;
      // Most n8n nodes have a 'main' output
      outputs.push({
        name: 'main',
        type: 'object',
        dataStructure: this.predictOutputStructure(node, nodeTypeInfo)
      });
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[6][1]++;
      cov_gio26vf7m().s[29]++;
      // Default output structure
      outputs.push({
        name: 'main',
        type: 'object',
        dataStructure: {}
      });
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[30]++;
    return outputs;
  }
  generateConnectionSuggestions(targetNode, allNodes, targetNodeTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[7]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[31]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[32]++;
    for (const sourceNode of allNodes) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[33]++;
      if (sourceNode.id === targetNode.id) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[7][0]++;
        cov_gio26vf7m().s[34]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[7][1]++;
      }
      const sourceNodeTypeInfo =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[35]++, this.nodeTypeRegistry.get(sourceNode.type));
      const suggestion =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[36]++, this.evaluateNodeConnection(sourceNode, targetNode, sourceNodeTypeInfo, targetNodeTypeInfo, connections));
      /* istanbul ignore next */
      cov_gio26vf7m().s[37]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[9][0]++, suggestion) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[9][1]++, suggestion.confidence > 0.3)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[8][0]++;
        cov_gio26vf7m().s[38]++;
        suggestions.push(suggestion);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[8][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[39]++;
    return suggestions.sort((a, b) => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[8]++;
      cov_gio26vf7m().s[40]++;
      return b.confidence - a.confidence;
    }).slice(0, 5);
  }
  evaluateNodeConnection(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[9]++;
    let confidence =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[41]++, 0);
    let reasoning =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[42]++, '');
    const dataTypeMatch =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[43]++, this.checkDataTypeCompatibility(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo));
    // Rule-based scoring
    /* istanbul ignore next */
    cov_gio26vf7m().s[44]++;
    confidence += this.scoreBasedOnNodeTypes(sourceNode.type, targetNode.type);
    /* istanbul ignore next */
    cov_gio26vf7m().s[45]++;
    confidence += this.scoreBasedOnNodeNames(sourceNode.name, targetNode.name);
    /* istanbul ignore next */
    cov_gio26vf7m().s[46]++;
    confidence += this.scoreBasedOnPosition(sourceNode.position, targetNode.position);
    /* istanbul ignore next */
    cov_gio26vf7m().s[47]++;
    confidence += dataTypeMatch ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[10][0]++, 0.3) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[10][1]++, 0);
    // Check if already connected
    /* istanbul ignore next */
    cov_gio26vf7m().s[48]++;
    if (this.areNodesConnected(sourceNode.id, targetNode.id, connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[11][0]++;
      cov_gio26vf7m().s[49]++;
      confidence -= 0.5; // Reduce score for already connected nodes
      /* istanbul ignore next */
      cov_gio26vf7m().s[50]++;
      reasoning += 'Already connected. ';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[11][1]++;
    }
    // Generate reasoning
    cov_gio26vf7m().s[51]++;
    reasoning += this.generateConnectionReasoning(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo);
    /* istanbul ignore next */
    cov_gio26vf7m().s[52]++;
    if (confidence <= 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[12][0]++;
      cov_gio26vf7m().s[53]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[12][1]++;
    }
    cov_gio26vf7m().s[54]++;
    return {
      sourceNodeId: sourceNode.id,
      targetNodeId: targetNode.id,
      sourceOutput: 'main',
      targetInput: 'main',
      confidence: Math.min(confidence, 1),
      reasoning: reasoning.trim(),
      dataTypeMatch,
      suggestedParameters: this.generateSuggestedParameters(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo)
    };
  }
  scoreBasedOnNodeTypes(sourceType, targetType) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[10]++;
    // Define common node type connection patterns
    const connectionPatterns =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[55]++, [{
      source: 'trigger',
      target: 'action',
      score: 0.4
    }, {
      source: 'webhook',
      target: 'set',
      score: 0.3
    }, {
      source: 'http',
      target: 'json',
      score: 0.3
    }, {
      source: 'database',
      target: 'set',
      score: 0.2
    }, {
      source: 'if',
      target: 'action',
      score: 0.2
    }]);
    /* istanbul ignore next */
    cov_gio26vf7m().s[56]++;
    for (const pattern of connectionPatterns) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[57]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[14][0]++, sourceType.toLowerCase().includes(pattern.source)) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[14][1]++, targetType.toLowerCase().includes(pattern.target))) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[13][0]++;
        cov_gio26vf7m().s[58]++;
        return pattern.score;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[59]++;
    return 0;
  }
  scoreBasedOnNodeNames(sourceName, targetName) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[11]++;
    // Score based on semantic similarity of node names
    const sourceWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[60]++, sourceName.toLowerCase().split(/\s+/));
    const targetWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[61]++, targetName.toLowerCase().split(/\s+/));
    let commonWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[62]++, 0);
    /* istanbul ignore next */
    cov_gio26vf7m().s[63]++;
    for (const sourceWord of sourceWords) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[64]++;
      if (targetWords.includes(sourceWord)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[15][0]++;
        cov_gio26vf7m().s[65]++;
        commonWords++;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[15][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[66]++;
    return commonWords > 0 ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[16][0]++, 0.1 * commonWords) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[16][1]++, 0);
  }
  scoreBasedOnPosition(sourcePos, targetPos) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[12]++;
    const distance =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[67]++, Math.sqrt(Math.pow(targetPos[0] - sourcePos[0], 2) + Math.pow(targetPos[1] - sourcePos[1], 2)));
    // Closer nodes are more likely to be connected
    /* istanbul ignore next */
    cov_gio26vf7m().s[68]++;
    return Math.max(0, 0.2 - distance / 1000);
  }
  checkDataTypeCompatibility(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[13]++;
    cov_gio26vf7m().s[69]++;
    // Basic data type compatibility check
    // Most n8n nodes work with JSON objects, so we'll be optimistic
    return true;
  }
  generateConnectionReasoning(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[14]++;
    const reasons =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[70]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[71]++;
    if (sourceNode.type.includes('trigger')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[17][0]++;
      cov_gio26vf7m().s[72]++;
      reasons.push('Source is a trigger node, typically connects to action nodes');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[17][1]++;
    }
    cov_gio26vf7m().s[73]++;
    if (targetNode.type.includes('http')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[18][0]++;
      cov_gio26vf7m().s[74]++;
      reasons.push('Target accepts HTTP data, compatible with most outputs');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[18][1]++;
    }
    cov_gio26vf7m().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[20][0]++, sourceNode.name.toLowerCase().includes('get')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[20][1]++, targetNode.name.toLowerCase().includes('set'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[19][0]++;
      cov_gio26vf7m().s[76]++;
      reasons.push('Data flow pattern: retrieve then process/store');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[19][1]++;
    }
    const distance =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[77]++, Math.sqrt(Math.pow(targetNode.position[0] - sourceNode.position[0], 2) + Math.pow(targetNode.position[1] - sourceNode.position[1], 2)));
    /* istanbul ignore next */
    cov_gio26vf7m().s[78]++;
    if (distance < 300) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[21][0]++;
      cov_gio26vf7m().s[79]++;
      reasons.push('Nodes are positioned close together');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[21][1]++;
    }
    cov_gio26vf7m().s[80]++;
    return reasons.join('. ');
  }
  generateParameterMappings(node, allNodes, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[15]++;
    const mappings =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[81]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[82]++;
    if (!nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[22][0]++;
      cov_gio26vf7m().s[83]++;
      return mappings;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[22][1]++;
    }
    // Find upstream nodes that could provide data
    const upstreamNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[84]++, allNodes.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[16]++;
      cov_gio26vf7m().s[85]++;
      return /* istanbul ignore next */(cov_gio26vf7m().b[23][0]++, n.id !== node.id) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[23][1]++, this.isUpstreamNode(n, node));
    }));
    /* istanbul ignore next */
    cov_gio26vf7m().s[86]++;
    for (const prop of nodeTypeInfo.properties) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[87]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[25][0]++, prop.type === 'hidden') ||
      /* istanbul ignore next */
      (cov_gio26vf7m().b[25][1]++, prop.type === 'notice')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[24][0]++;
        cov_gio26vf7m().s[88]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[24][1]++;
      }
      const mapping =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[89]++, this.generateParameterMapping(node, prop, upstreamNodes));
      /* istanbul ignore next */
      cov_gio26vf7m().s[90]++;
      if (mapping) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[26][0]++;
        cov_gio26vf7m().s[91]++;
        mappings.push(mapping);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[26][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[92]++;
    return mappings.sort((a, b) => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[17]++;
      cov_gio26vf7m().s[93]++;
      return b.confidence - a.confidence;
    });
  }
  generateParameterMapping(node, property, upstreamNodes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[18]++;
    cov_gio26vf7m().s[94]++;
    // Generate mappings based on parameter names and types
    for (const upstreamNode of upstreamNodes) {
      const similarity =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[95]++, this.calculateParameterSimilarity(property.name, upstreamNode));
      /* istanbul ignore next */
      cov_gio26vf7m().s[96]++;
      if (similarity > 0.5) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[27][0]++;
        cov_gio26vf7m().s[97]++;
        return {
          sourceParameter: `{{$node["${upstreamNode.name}"].json["${this.findBestSourceParameter(property.name, upstreamNode)}"]}}`,
          targetParameter: property.name,
          transformation: this.suggestTransformation(property, upstreamNode),
          confidence: similarity,
          dataType: property.type
        };
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[27][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[98]++;
    return null;
  }
  calculateParameterSimilarity(paramName, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[19]++;
    // Simple similarity based on common parameter names
    const commonMappings =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[99]++, {
      email: ['email', 'mail', 'emailAddress'],
      name: ['name', 'title', 'displayName'],
      url: ['url', 'link', 'href'],
      id: ['id', 'identifier', 'key'],
      data: ['data', 'payload', 'content']
    });
    const paramLower =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[100]++, paramName.toLowerCase());
    /* istanbul ignore next */
    cov_gio26vf7m().s[101]++;
    for (const [target, sources] of Object.entries(commonMappings)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[102]++;
      if (paramLower.includes(target)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[28][0]++;
        cov_gio26vf7m().s[103]++;
        // Check if source node likely produces this type of data
        if (sources.some(source => {
          /* istanbul ignore next */
          cov_gio26vf7m().f[20]++;
          cov_gio26vf7m().s[104]++;
          return sourceNode.name.toLowerCase().includes(source);
        })) {
          /* istanbul ignore next */
          cov_gio26vf7m().b[29][0]++;
          cov_gio26vf7m().s[105]++;
          return 0.8;
        } else
        /* istanbul ignore next */
        {
          cov_gio26vf7m().b[29][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[106]++;
    return 0;
  }
  findBestSourceParameter(targetParam, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[21]++;
    // Try to match parameter names
    const targetLower =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[107]++, targetParam.toLowerCase());
    const commonMatches =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[108]++, {
      email: 'email',
      name: 'name',
      url: 'url',
      id: 'id',
      data: 'data'
    });
    /* istanbul ignore next */
    cov_gio26vf7m().s[109]++;
    for (const [pattern, param] of Object.entries(commonMatches)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[110]++;
      if (targetLower.includes(pattern)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[30][0]++;
        cov_gio26vf7m().s[111]++;
        return param;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[112]++;
    return 'data'; // Default fallback
  }
  suggestTransformation(property, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[22]++;
    cov_gio26vf7m().s[113]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[32][0]++, property.type === 'string') &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[32][1]++, sourceNode.type.includes('json'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[31][0]++;
      cov_gio26vf7m().s[114]++;
      return 'JSON.stringify()';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[31][1]++;
    }
    cov_gio26vf7m().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[34][0]++, property.type === 'number') &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[34][1]++, sourceNode.name.toLowerCase().includes('string'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[33][0]++;
      cov_gio26vf7m().s[116]++;
      return 'parseInt()';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[33][1]++;
    }
    cov_gio26vf7m().s[117]++;
    return undefined;
  }
  isUpstreamNode(sourceNode, targetNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[23]++;
    cov_gio26vf7m().s[118]++;
    // Simple position-based heuristic
    return /* istanbul ignore next */(cov_gio26vf7m().b[35][0]++, sourceNode.position[0] < targetNode.position[0]) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[35][1]++, sourceNode.position[1] < targetNode.position[1]);
  }
  findConnectionSource(nodeId, inputName, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[24]++;
    cov_gio26vf7m().s[119]++;
    if (!connections) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[36][0]++;
      cov_gio26vf7m().s[120]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[36][1]++;
    }
    // Parse n8n connections format to find source
    cov_gio26vf7m().s[121]++;
    for (const [sourceNodeName, sourceConnections] of Object.entries(connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[122]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[38][0]++, typeof sourceConnections === 'object') &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[38][1]++, sourceConnections !== null)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[37][0]++;
        cov_gio26vf7m().s[123]++;
        // Check if this source connects to our target node
        // This is a simplified check - actual n8n connection format is more complex
        return sourceNodeName;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[37][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[124]++;
    return undefined;
  }
  areNodesConnected(sourceId, targetId, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[25]++;
    cov_gio26vf7m().s[125]++;
    if (!connections) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[39][0]++;
      cov_gio26vf7m().s[126]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[39][1]++;
    }
    // Simplified connection check
    cov_gio26vf7m().s[127]++;
    for (const [nodeId, nodeConnections] of Object.entries(connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[128]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][0]++, nodeId === sourceId) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][1]++, typeof nodeConnections === 'object') &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][2]++, nodeConnections !== null)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[40][0]++;
        cov_gio26vf7m().s[129]++;
        // Check if target is in the connections
        return JSON.stringify(nodeConnections).includes(targetId);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[40][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[130]++;
    return false;
  }
  predictOutputStructure(node, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[26]++;
    // Predict the likely output structure based on node type
    const outputStructure =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[131]++, {});
    /* istanbul ignore next */
    cov_gio26vf7m().s[132]++;
    if (node.type.includes('http')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[42][0]++;
      cov_gio26vf7m().s[133]++;
      outputStructure.data = {};
      /* istanbul ignore next */
      cov_gio26vf7m().s[134]++;
      outputStructure.headers = {};
      /* istanbul ignore next */
      cov_gio26vf7m().s[135]++;
      outputStructure.status = 200;
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[42][1]++;
      cov_gio26vf7m().s[136]++;
      if (node.type.includes('database')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[43][0]++;
        cov_gio26vf7m().s[137]++;
        outputStructure.rows = [];
        /* istanbul ignore next */
        cov_gio26vf7m().s[138]++;
        outputStructure.count = 0;
      } else {
        /* istanbul ignore next */
        cov_gio26vf7m().b[43][1]++;
        cov_gio26vf7m().s[139]++;
        if (node.type.includes('file')) {
          /* istanbul ignore next */
          cov_gio26vf7m().b[44][0]++;
          cov_gio26vf7m().s[140]++;
          outputStructure.filename = '';
          /* istanbul ignore next */
          cov_gio26vf7m().s[141]++;
          outputStructure.content = '';
          /* istanbul ignore next */
          cov_gio26vf7m().s[142]++;
          outputStructure.size = 0;
        } else {
          /* istanbul ignore next */
          cov_gio26vf7m().b[44][1]++;
          cov_gio26vf7m().s[143]++;
          outputStructure.data = {};
        }
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[144]++;
    return outputStructure;
  }
  generateSuggestedParameters(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[27]++;
    cov_gio26vf7m().s[145]++;
    if (!targetTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[45][0]++;
      cov_gio26vf7m().s[146]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[45][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[147]++, {});
    // Generate parameter suggestions based on source node data
    /* istanbul ignore next */
    cov_gio26vf7m().s[148]++;
    for (const property of targetTypeInfo.properties.slice(0, 3)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[149]++;
      // Limit to prevent large responses
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[47][0]++, property.type === 'hidden') ||
      /* istanbul ignore next */
      (cov_gio26vf7m().b[47][1]++, property.type === 'notice')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[46][0]++;
        cov_gio26vf7m().s[150]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[46][1]++;
      }
      const suggestion =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[151]++, this.suggestParameterFromSource(property, sourceNode, sourceTypeInfo));
      /* istanbul ignore next */
      cov_gio26vf7m().s[152]++;
      if (suggestion !== undefined) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[48][0]++;
        cov_gio26vf7m().s[153]++;
        suggestions[property.name] = suggestion;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[48][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[154]++;
    return Object.keys(suggestions).length > 0 ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[49][0]++, suggestions) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[49][1]++, undefined);
  }
  suggestParameterFromSource(property, sourceNode, sourceTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[28]++;
    const paramName =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[155]++, property.name.toLowerCase());
    // Common parameter mapping patterns
    /* istanbul ignore next */
    cov_gio26vf7m().s[156]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[51][0]++, paramName.includes('url')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[51][1]++, sourceNode.type.includes('http'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[50][0]++;
      cov_gio26vf7m().s[157]++;
      return `{{$node["${sourceNode.name}"].json["url"]}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[50][1]++;
    }
    cov_gio26vf7m().s[158]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[53][0]++, paramName.includes('data')) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[53][1]++, paramName.includes('body'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[52][0]++;
      cov_gio26vf7m().s[159]++;
      return `{{$node["${sourceNode.name}"].json}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[52][1]++;
    }
    cov_gio26vf7m().s[160]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[55][0]++, paramName.includes('id')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[55][1]++, sourceNode.parameters?.id)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[54][0]++;
      cov_gio26vf7m().s[161]++;
      return `{{$node["${sourceNode.name}"].json["id"]}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[54][1]++;
    }
    cov_gio26vf7m().s[162]++;
    return undefined;
  }
  generateSmartWorkflowSuggestions(workflow) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[29]++;
    const analyses =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[163]++, this.analyzeWorkflowConnections(workflow));
    const missingConnections =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[164]++, []);
    const optimizationSuggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[165]++, []);
    const parameterMappingOpportunities =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[166]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[167]++;
    for (const analysis of analyses) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[168]++;
      missingConnections.push(...analysis.suggestedConnections);
      /* istanbul ignore next */
      cov_gio26vf7m().s[169]++;
      parameterMappingOpportunities.push(...analysis.parameterMappings);
    }
    // Generate optimization suggestions
    /* istanbul ignore next */
    cov_gio26vf7m().s[170]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[57][0]++, workflow.nodes) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[57][1]++, workflow.nodes.length > 10)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[56][0]++;
      cov_gio26vf7m().s[171]++;
      optimizationSuggestions.push('Consider breaking this large workflow into smaller, reusable workflows');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[56][1]++;
    }
    const triggerNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[172]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[58][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[30]++;
      cov_gio26vf7m().s[173]++;
      return n.type.includes('trigger');
    })) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[58][1]++, []));
    /* istanbul ignore next */
    cov_gio26vf7m().s[174]++;
    if (triggerNodes.length === 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[59][0]++;
      cov_gio26vf7m().s[175]++;
      optimizationSuggestions.push('This workflow appears to be missing a trigger node');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[59][1]++;
    }
    const disconnectedNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[176]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[60][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[31]++;
      const hasConnections =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[177]++, missingConnections.some(c => {
        /* istanbul ignore next */
        cov_gio26vf7m().f[32]++;
        cov_gio26vf7m().s[178]++;
        return /* istanbul ignore next */(cov_gio26vf7m().b[61][0]++, c.sourceNodeId === n.id) ||
        /* istanbul ignore next */
        (cov_gio26vf7m().b[61][1]++, c.targetNodeId === n.id);
      }));
      /* istanbul ignore next */
      cov_gio26vf7m().s[179]++;
      return !hasConnections;
    })) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[60][1]++, []));
    /* istanbul ignore next */
    cov_gio26vf7m().s[180]++;
    if (disconnectedNodes.length > 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[62][0]++;
      cov_gio26vf7m().s[181]++;
      optimizationSuggestions.push(`${disconnectedNodes.length} nodes appear to be disconnected from the workflow`);
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[62][1]++;
    }
    cov_gio26vf7m().s[182]++;
    return {
      missingConnections: missingConnections.slice(0, 10),
      // Top 10 suggestions
      optimizationSuggestions,
      parameterMappingOpportunities: parameterMappingOpportunities.slice(0, 15) // Top 15 mappings
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,