52f5ce25afc73315bd41ab6d28511aec
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const credentials_1 = require("../../../src/tools/credentials");
(0, globals_1.describe)('Credential Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register credential tools
        (0, credentials_1.createCredentialTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all credential tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(5);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-credentials');
        (0, globals_1.expect)(toolNames).toContain('get-credential');
        (0, globals_1.expect)(toolNames).toContain('create-credential');
        (0, globals_1.expect)(toolNames).toContain('delete-credential');
        (0, globals_1.expect)(toolNames).toContain('get-credential-schema');
    });
    (0, globals_1.describe)('list-credentials tool', () => {
        let listCredentialsTool;
        (0, globals_1.beforeEach)(() => {
            listCredentialsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-credentials')[0];
        });
        (0, globals_1.it)('should list credentials successfully with full data', async () => {
            const mockCredentials = [
                {
                    id: 'cred-1',
                    name: 'Test Credential 1',
                    type: 'httpBasicAuth',
                    homeProject: {
                        id: 'proj-1',
                        name: 'Test Project',
                        type: 'Personal',
                    },
                    sharedWith: [
                        {
                            id: 'share-1',
                            user: {
                                id: 'user-1',
                                email: 'test@example.com',
                                firstName: 'John',
                                lastName: 'Doe',
                            },
                            role: 'owner',
                        },
                    ],
                    scopes: ['workflow', 'credential'],
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-02T00:00:00.000Z',
                },
                {
                    id: 'cred-2',
                    name: 'Test Credential 2',
                    type: 'oauth2Api',
                    createdAt: '2024-01-03T00:00:00.000Z',
                },
            ];
            mockClient.getCredentials.mockResolvedValue({
                data: mockCredentials,
                nextCursor: 'next-cursor-123',
            });
            const result = await listCredentialsTool.execute({});
            (0, globals_1.expect)(mockClient.getCredentials).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 2 credential(s):');
            (0, globals_1.expect)(result).toContain('**Test Credential 1**');
            (0, globals_1.expect)(result).toContain('ID: cred-1');
            (0, globals_1.expect)(result).toContain('Type: httpBasicAuth');
            (0, globals_1.expect)(result).toContain('Project: Test Project (Personal)');
            (0, globals_1.expect)(result).toContain('Shared with: 1 user(s)');
            (0, globals_1.expect)(result).toContain('Scopes: workflow, credential');
            (0, globals_1.expect)(result).toContain('Created: 12/31/2023');
            (0, globals_1.expect)(result).toContain('Updated: 1/1/2024');
            (0, globals_1.expect)(result).toContain('**Test Credential 2**');
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor-123" to get the next page');
        });
        (0, globals_1.it)('should list credentials with pagination options', async () => {
            const mockCredentials = [
                {
                    id: 'cred-1',
                    name: 'Test Credential',
                    type: 'httpBasicAuth',
                },
            ];
            mockClient.getCredentials.mockResolvedValue({
                data: mockCredentials,
            });
            await listCredentialsTool.execute({ limit: 10, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getCredentials).toHaveBeenCalledWith({
                limit: 10,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should handle empty credentials list', async () => {
            mockClient.getCredentials.mockResolvedValue({
                data: [],
            });
            const result = await listCredentialsTool.execute({});
            (0, globals_1.expect)(result).toBe('No credentials found in the n8n instance.');
        });
        (0, globals_1.it)('should handle credentials without optional fields', async () => {
            const mockCredentials = [
                {
                    id: 'cred-minimal',
                    name: 'Minimal Credential',
                    type: 'basic',
                },
            ];
            mockClient.getCredentials.mockResolvedValue({
                data: mockCredentials,
            });
            const result = await listCredentialsTool.execute({});
            (0, globals_1.expect)(result).toContain('**Minimal Credential**');
            (0, globals_1.expect)(result).toContain('ID: cred-minimal');
            (0, globals_1.expect)(result).toContain('Type: basic');
            (0, globals_1.expect)(result).not.toContain('Project:');
            (0, globals_1.expect)(result).not.toContain('Shared with:');
            (0, globals_1.expect)(result).not.toContain('Scopes:');
            (0, globals_1.expect)(result).not.toContain('Created:');
            (0, globals_1.expect)(result).not.toContain('Updated:');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getCredentials.mockRejectedValue(new Error('API connection failed'));
            await (0, globals_1.expect)(listCredentialsTool.execute({})).rejects.toThrow('Failed to list credentials: API connection failed');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getCredentials.mockRejectedValue('Unknown error');
            await (0, globals_1.expect)(listCredentialsTool.execute({})).rejects.toThrow('Failed to list credentials with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, credentials_1.createCredentialTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'list-credentials')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(listCredentialsTool.annotations).toEqual({
                title: 'List n8n Credentials',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({})).not.toThrow();
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ limit: 50 })).not.toThrow();
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ cursor: 'test' })).not.toThrow();
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ limit: 25, cursor: 'test' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ limit: 0 })).toThrow();
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ limit: 101 })).toThrow();
            (0, globals_1.expect)(() => listCredentialsTool.parameters.parse({ limit: 'invalid' })).toThrow();
        });
    });
    (0, globals_1.describe)('get-credential tool', () => {
        let getCredentialTool;
        (0, globals_1.beforeEach)(() => {
            getCredentialTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-credential')[0];
        });
        (0, globals_1.it)('should get credential successfully with full data', async () => {
            const mockCredential = {
                id: 'cred-1',
                name: 'Test Credential',
                type: 'httpBasicAuth',
                homeProject: {
                    id: 'proj-1',
                    name: 'Test Project',
                    type: 'Personal',
                },
                sharedWith: [
                    {
                        id: 'share-1',
                        user: {
                            id: 'user-1',
                            email: 'test@example.com',
                            firstName: 'John',
                            lastName: 'Doe',
                        },
                        role: 'owner',
                    },
                ],
                nodesAccess: [
                    {
                        nodeType: 'HttpRequest',
                        user: 'john.doe',
                        date: new Date('2024-01-01T00:00:00.000Z'),
                    },
                ],
                scopes: ['workflow', 'credential'],
                createdAt: '2024-01-01T00:00:00.000Z',
                updatedAt: '2024-01-02T00:00:00.000Z',
            };
            mockClient.getCredential.mockResolvedValue(mockCredential);
            const result = await getCredentialTool.execute({ credentialId: 'cred-1' });
            (0, globals_1.expect)(mockClient.getCredential).toHaveBeenCalledWith('cred-1');
            (0, globals_1.expect)(result).toContain('# Credential: Test Credential');
            (0, globals_1.expect)(result).toContain('**ID:** cred-1');
            (0, globals_1.expect)(result).toContain('**Name:** Test Credential');
            (0, globals_1.expect)(result).toContain('**Type:** httpBasicAuth');
            (0, globals_1.expect)(result).toContain('**Project:** Test Project (Personal)');
            (0, globals_1.expect)(result).toContain('## Shared With:');
            (0, globals_1.expect)(result).toContain('1. John Doe (test@example.com) - Role: owner');
            (0, globals_1.expect)(result).toContain('## Node Access:');
            (0, globals_1.expect)(result).toContain('1. Node Type: HttpRequest');
            (0, globals_1.expect)(result).toContain('- User: john.doe');
            (0, globals_1.expect)(result).toContain('- Date: 12/31/2023, 6:00:00 PM');
            (0, globals_1.expect)(result).toContain('**Scopes:** workflow, credential');
            (0, globals_1.expect)(result).toContain('**Created:** 12/31/2023, 6:00:00 PM');
            (0, globals_1.expect)(result).toContain('**Updated:** 1/1/2024, 6:00:00 PM');
            (0, globals_1.expect)(result).toContain('Sensitive credential data is not displayed for security purposes');
        });
        (0, globals_1.it)('should get credential with minimal data', async () => {
            const mockCredential = {
                id: 'cred-minimal',
                name: 'Minimal Credential',
                type: 'basic',
            };
            mockClient.getCredential.mockResolvedValue(mockCredential);
            const result = await getCredentialTool.execute({ credentialId: 'cred-minimal' });
            (0, globals_1.expect)(result).toContain('# Credential: Minimal Credential');
            (0, globals_1.expect)(result).toContain('**ID:** cred-minimal');
            (0, globals_1.expect)(result).toContain('**Type:** basic');
            (0, globals_1.expect)(result).not.toContain('**Project:**');
            (0, globals_1.expect)(result).not.toContain('## Shared With:');
            (0, globals_1.expect)(result).not.toContain('## Node Access:');
            (0, globals_1.expect)(result).not.toContain('**Scopes:**');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getCredential.mockRejectedValue(new Error('Credential not found'));
            await (0, globals_1.expect)(getCredentialTool.execute({ credentialId: 'invalid' })).rejects.toThrow('Failed to get credential: Credential not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getCredential.mockRejectedValue({ error: 'Unknown' });
            await (0, globals_1.expect)(getCredentialTool.execute({ credentialId: 'test' })).rejects.toThrow('Failed to get credential with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, credentials_1.createCredentialTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'get-credential')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({ credentialId: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(getCredentialTool.annotations).toEqual({
                title: 'Get Credential Details',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => getCredentialTool.parameters.parse({ credentialId: 'test-id' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => getCredentialTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => getCredentialTool.parameters.parse({ credentialId: '' })).toThrow();
            (0, globals_1.expect)(() => getCredentialTool.parameters.parse({ credentialId: 123 })).toThrow();
        });
    });
    (0, globals_1.describe)('create-credential tool', () => {
        let createCredentialTool;
        (0, globals_1.beforeEach)(() => {
            createCredentialTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-credential')[0];
        });
        (0, globals_1.it)('should create credential successfully with full data', async () => {
            const mockCredential = {
                id: 'new-cred-1',
                name: 'New Test Credential',
                type: 'httpBasicAuth',
                homeProject: {
                    id: 'proj-1',
                    name: 'Test Project',
                    type: 'Personal',
                },
            };
            mockClient.createCredential.mockResolvedValue(mockCredential);
            const credentialData = {
                name: 'New Test Credential',
                type: 'httpBasicAuth',
                data: { username: 'test', password: 'secret' },
                projectId: 'proj-1',
            };
            const result = await createCredentialTool.execute(credentialData);
            const expectedRequest = {
                name: 'New Test Credential',
                type: 'httpBasicAuth',
                data: { username: 'test', password: 'secret' },
                projectId: 'proj-1',
            };
            (0, globals_1.expect)(mockClient.createCredential).toHaveBeenCalledWith(expectedRequest);
            (0, globals_1.expect)(result).toContain('✅ Successfully created credential "New Test Credential" with ID: new-cred-1');
            (0, globals_1.expect)(result).toContain('Type: httpBasicAuth');
            (0, globals_1.expect)(result).toContain('Project: Test Project');
        });
        (0, globals_1.it)('should create credential without optional fields', async () => {
            const mockCredential = {
                id: 'new-cred-2',
                name: 'Simple Credential',
                type: 'basic',
            };
            mockClient.createCredential.mockResolvedValue(mockCredential);
            const credentialData = {
                name: 'Simple Credential',
                type: 'basic',
                data: { token: 'abc123' },
            };
            const result = await createCredentialTool.execute(credentialData);
            const expectedRequest = {
                name: 'Simple Credential',
                type: 'basic',
                data: { token: 'abc123' },
                projectId: undefined,
            };
            (0, globals_1.expect)(mockClient.createCredential).toHaveBeenCalledWith(expectedRequest);
            (0, globals_1.expect)(result).toContain('✅ Successfully created credential "Simple Credential" with ID: new-cred-2');
            (0, globals_1.expect)(result).toContain('Type: basic');
            (0, globals_1.expect)(result).not.toContain('Project:');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.createCredential.mockRejectedValue(new Error('Invalid credential type'));
            const credentialData = {
                name: 'Test',
                type: 'invalid',
                data: { test: 'value' },
            };
            await (0, globals_1.expect)(createCredentialTool.execute(credentialData)).rejects.toThrow('Failed to create credential: Invalid credential type');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.createCredential.mockRejectedValue({ code: 500 });
            const credentialData = {
                name: 'Test',
                type: 'basic',
                data: { test: 'value' },
            };
            await (0, globals_1.expect)(createCredentialTool.execute(credentialData)).rejects.toThrow('Failed to create credential with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, credentials_1.createCredentialTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'create-credential')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({
                name: 'Test',
                type: 'basic',
                data: { test: 'value' },
            })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(createCredentialTool.annotations).toEqual({
                title: 'Create New Credential',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({
                name: 'Test Credential',
                type: 'httpBasicAuth',
                data: { username: 'test', password: 'secret' },
            })).not.toThrow();
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({
                name: 'Test Credential',
                type: 'httpBasicAuth',
                data: { username: 'test', password: 'secret' },
                projectId: 'proj-1',
            })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({ name: '' })).toThrow();
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({ name: 'Test', type: '' })).toThrow();
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({ name: 'Test', type: 'basic' })).toThrow(); // missing data
            (0, globals_1.expect)(() => createCredentialTool.parameters.parse({ name: 'Test', type: 'basic', data: {} })).toThrow(); // empty data
        });
    });
    (0, globals_1.describe)('delete-credential tool', () => {
        let deleteCredentialTool;
        (0, globals_1.beforeEach)(() => {
            deleteCredentialTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-credential')[0];
        });
        (0, globals_1.it)('should delete credential successfully', async () => {
            mockClient.deleteCredential.mockResolvedValue(undefined);
            const result = await deleteCredentialTool.execute({ credentialId: 'cred-to-delete' });
            (0, globals_1.expect)(mockClient.deleteCredential).toHaveBeenCalledWith('cred-to-delete');
            (0, globals_1.expect)(result).toBe('✅ Successfully deleted credential with ID: cred-to-delete');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.deleteCredential.mockRejectedValue(new Error('Credential not found'));
            await (0, globals_1.expect)(deleteCredentialTool.execute({ credentialId: 'invalid' })).rejects.toThrow('Failed to delete credential: Credential not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteCredential.mockRejectedValue('Network error');
            await (0, globals_1.expect)(deleteCredentialTool.execute({ credentialId: 'test' })).rejects.toThrow('Failed to delete credential with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, credentials_1.createCredentialTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'delete-credential')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({ credentialId: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(deleteCredentialTool.annotations).toEqual({
                title: 'Delete Credential',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => deleteCredentialTool.parameters.parse({ credentialId: 'test-id' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => deleteCredentialTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => deleteCredentialTool.parameters.parse({ credentialId: '' })).toThrow();
            (0, globals_1.expect)(() => deleteCredentialTool.parameters.parse({ credentialId: 123 })).toThrow();
        });
    });
    (0, globals_1.describe)('get-credential-schema tool', () => {
        let getCredentialSchemaTool;
        (0, globals_1.beforeEach)(() => {
            getCredentialSchemaTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-credential-schema')[0];
        });
        (0, globals_1.it)('should get credential schema successfully', async () => {
            const mockSchema = {
                type: 'object',
                properties: {
                    username: {
                        type: 'string',
                        description: 'Username for authentication',
                    },
                    password: {
                        type: 'string',
                        description: 'Password for authentication',
                        format: 'password',
                    },
                },
                required: ['username', 'password'],
            };
            mockClient.getCredentialSchema.mockResolvedValue(mockSchema);
            const result = await getCredentialSchemaTool.execute({ credentialType: 'httpBasicAuth' });
            (0, globals_1.expect)(mockClient.getCredentialSchema).toHaveBeenCalledWith('httpBasicAuth');
            (0, globals_1.expect)(result).toContain('# Credential Schema: httpBasicAuth');
            (0, globals_1.expect)(result).toContain('Schema definition for credential type "httpBasicAuth"');
            (0, globals_1.expect)(result).toContain('```json');
            (0, globals_1.expect)(result).toContain(JSON.stringify(mockSchema, null, 2));
            (0, globals_1.expect)(result).toContain('```');
            (0, globals_1.expect)(result).toContain('Use this schema to understand the required fields when creating credentials');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getCredentialSchema.mockRejectedValue(new Error('Schema not found'));
            await (0, globals_1.expect)(getCredentialSchemaTool.execute({ credentialType: 'invalid' })).rejects.toThrow('Failed to get credential schema: Schema not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getCredentialSchema.mockRejectedValue(null);
            await (0, globals_1.expect)(getCredentialSchemaTool.execute({ credentialType: 'test' })).rejects.toThrow('Failed to get credential schema with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, credentials_1.createCredentialTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'get-credential-schema')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({ credentialType: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(getCredentialSchemaTool.annotations).toEqual({
                title: 'Get Credential Schema',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => getCredentialSchemaTool.parameters.parse({ credentialType: 'httpBasicAuth' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => getCredentialSchemaTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => getCredentialSchemaTool.parameters.parse({ credentialType: '' })).toThrow();
            (0, globals_1.expect)(() => getCredentialSchemaTool.parameters.parse({ credentialType: 123 })).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,