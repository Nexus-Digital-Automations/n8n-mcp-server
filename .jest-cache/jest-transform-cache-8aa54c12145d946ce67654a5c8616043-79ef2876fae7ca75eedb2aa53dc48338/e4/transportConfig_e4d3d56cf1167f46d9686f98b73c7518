1821109356338b16aaee68a2d6455e64
/* istanbul ignore next */
function cov_r9sl8ujhn() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts";
  var hash = "1ed2565ad4d5d05d842dc472e038deda23965488";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts",
    statementMap: {
      "0": {
        start: {
          line: 9,
          column: 37
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "1": {
        start: {
          line: 35,
          column: 31
        },
        end: {
          line: 73,
          column: 1
        }
      },
      "2": {
        start: {
          line: 79,
          column: 26
        },
        end: {
          line: 79,
          column: 55
        }
      },
      "3": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "4": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 35
        }
      },
      "5": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "6": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 43
        }
      },
      "7": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "8": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 35
        }
      },
      "9": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 93,
          column: 5
        }
      },
      "10": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 35
        }
      },
      "11": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 39
        }
      },
      "12": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 47
        }
      },
      "13": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "14": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 20
        }
      },
      "15": {
        start: {
          line: 110,
          column: 37
        },
        end: {
          line: 110,
          column: 47
        }
      },
      "16": {
        start: {
          line: 111,
          column: 21
        },
        end: {
          line: 111,
          column: 52
        }
      },
      "17": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 112,
          column: 54
        }
      },
      "18": {
        start: {
          line: 117,
          column: 26
        },
        end: {
          line: 130,
          column: 1
        }
      },
      "19": {
        start: {
          line: 135,
          column: 19
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "20": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 139,
          column: 5
        }
      },
      "21": {
        start: {
          line: 138,
          column: 8
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "22": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 147,
          column: 55
        }
      },
      "23": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "24": {
        start: {
          line: 149,
          column: 27
        },
        end: {
          line: 149,
          column: 59
        }
      },
      "25": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "26": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 165,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "detectTransportConfig",
        decl: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 77,
            column: 37
          }
        },
        loc: {
          start: {
            line: 77,
            column: 40
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 77
      },
      "1": {
        name: "validateTransportConfig",
        decl: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 100,
            column: 39
          }
        },
        loc: {
          start: {
            line: 100,
            column: 48
          },
          end: {
            line: 102,
            column: 1
          }
        },
        line: 100
      },
      "2": {
        name: "getServerUrl",
        decl: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 28
          }
        },
        loc: {
          start: {
            line: 106,
            column: 37
          },
          end: {
            line: 113,
            column: 1
          }
        },
        line: 106
      },
      "3": {
        name: "parseConfigFromEnv",
        decl: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 134,
            column: 34
          }
        },
        loc: {
          start: {
            line: 134,
            column: 37
          },
          end: {
            line: 166,
            column: 1
          }
        },
        line: 134
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 18
          },
          end: {
            line: 59,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 59,
            column: 37
          },
          end: {
            line: 59,
            column: 63
          }
        }, {
          start: {
            line: 59,
            column: 66
          },
          end: {
            line: 59,
            column: 70
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 61
          }
        }, {
          start: {
            line: 64,
            column: 65
          },
          end: {
            line: 64,
            column: 70
          }
        }],
        line: 64
      },
      "2": {
        loc: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "3": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "4": {
        loc: {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "5": {
        loc: {
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 87,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 8
          },
          end: {
            line: 87,
            column: 45
          }
        }, {
          start: {
            line: 87,
            column: 49
          },
          end: {
            line: 87,
            column: 65
          }
        }],
        line: 87
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 4
          },
          end: {
            line: 93,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 91,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 91,
            column: 39
          }
        }, {
          start: {
            line: 91,
            column: 43
          },
          end: {
            line: 91,
            column: 61
          }
        }, {
          start: {
            line: 91,
            column: 65
          },
          end: {
            line: 91,
            column: 83
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 8
          },
          end: {
            line: 107,
            column: 29
          }
        }, {
          start: {
            line: 107,
            column: 33
          },
          end: {
            line: 107,
            column: 44
          }
        }],
        line: 107
      },
      "10": {
        loc: {
          start: {
            line: 111,
            column: 21
          },
          end: {
            line: 111,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 111,
            column: 36
          },
          end: {
            line: 111,
            column: 43
          }
        }, {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 111,
            column: 52
          }
        }],
        line: 111
      },
      "11": {
        loc: {
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 4
          },
          end: {
            line: 139,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "12": {
        loc: {
          start: {
            line: 141,
            column: 28
          },
          end: {
            line: 147,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 28
          },
          end: {
            line: 141,
            column: 62
          }
        }, {
          start: {
            line: 142,
            column: 8
          },
          end: {
            line: 142,
            column: 42
          }
        }, {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 46
          }
        }, {
          start: {
            line: 144,
            column: 8
          },
          end: {
            line: 144,
            column: 46
          }
        }, {
          start: {
            line: 145,
            column: 8
          },
          end: {
            line: 145,
            column: 50
          }
        }, {
          start: {
            line: 146,
            column: 8
          },
          end: {
            line: 146,
            column: 54
          }
        }, {
          start: {
            line: 147,
            column: 8
          },
          end: {
            line: 147,
            column: 55
          }
        }],
        line: 141
      },
      "13": {
        loc: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 148,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 8
          },
          end: {
            line: 148,
            column: 29
          }
        }, {
          start: {
            line: 148,
            column: 33
          },
          end: {
            line: 148,
            column: 48
          }
        }],
        line: 148
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 18
          },
          end: {
            line: 151,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 31
          },
          end: {
            line: 151,
            column: 51
          }
        }, {
          start: {
            line: 151,
            column: 54
          },
          end: {
            line: 151,
            column: 58
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 18
          },
          end: {
            line: 152,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 18
          },
          end: {
            line: 152,
            column: 50
          }
        }, {
          start: {
            line: 152,
            column: 54
          },
          end: {
            line: 152,
            column: 65
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 153,
            column: 22
          },
          end: {
            line: 153,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 22
          },
          end: {
            line: 153,
            column: 58
          }
        }, {
          start: {
            line: 153,
            column: 62
          },
          end: {
            line: 153,
            column: 68
          }
        }],
        line: 153
      },
      "18": {
        loc: {
          start: {
            line: 156,
            column: 25
          },
          end: {
            line: 156,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 25
          },
          end: {
            line: 156,
            column: 73
          }
        }, {
          start: {
            line: 156,
            column: 77
          },
          end: {
            line: 156,
            column: 82
          }
        }],
        line: 156
      },
      "19": {
        loc: {
          start: {
            line: 161,
            column: 26
          },
          end: {
            line: 161,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 161,
            column: 26
          },
          end: {
            line: 161,
            column: 71
          }
        }, {
          start: {
            line: 161,
            column: 75
          },
          end: {
            line: 161,
            column: 84
          }
        }],
        line: 161
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts"],
      sourcesContent: ["/**\n * Transport Configuration for n8n MCP Server\n *\n * Provides transport type detection and configuration for different deployment scenarios.\n * Supports both stdio (local development) and SSE (remote/web access) transports.\n */\n\nimport { z } from 'zod';\n\n// Transport configuration schema\nexport const TransportConfigSchema = z.object({\n  type: z.enum(['stdio', 'sse']).default('stdio'),\n  sse: z\n    .object({\n      port: z.number().min(1024).max(65535).default(8080),\n      endpoint: z.string().default('/sse'),\n      host: z.string().default('localhost'),\n      cors: z\n        .object({\n          enabled: z.boolean().default(true),\n          origins: z.array(z.string()).default(['*']),\n          credentials: z.boolean().default(false),\n        })\n        .default({}),\n      healthCheck: z\n        .object({\n          enabled: z.boolean().default(true),\n          endpoint: z.string().default('/health'),\n        })\n        .default({}),\n    })\n    .optional(),\n});\n\nexport type TransportConfig = z.infer<typeof TransportConfigSchema>;\n\n/**\n * Default transport configurations for different environments\n */\nexport const DEFAULT_CONFIGS = {\n  development: {\n    type: 'stdio' as const,\n  },\n  production: {\n    type: 'sse' as const,\n    sse: {\n      port: 8080,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: ['*'],\n        credentials: false,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n  web: {\n    type: 'sse' as const,\n    sse: {\n      port: process.env.PORT ? parseInt(process.env.PORT) : 3000,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: process.env.CORS_ORIGINS?.split(',') || ['*'],\n        credentials: true,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n} as const;\n\n/**\n * Detect appropriate transport configuration based on environment\n */\nexport function detectTransportConfig(): TransportConfig {\n  // Check environment variables for explicit transport type\n  const transportType = process.env.N8N_MCP_TRANSPORT as 'stdio' | 'sse' | undefined;\n\n  if (transportType === 'sse') {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  if (transportType === 'stdio') {\n    return DEFAULT_CONFIGS.development;\n  }\n\n  // Auto-detect based on environment\n  if (process.env.NODE_ENV === 'production' || process.env.PORT) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Check if running in a web environment (Railway, Vercel, etc.)\n  if (process.env.RAILWAY_ENVIRONMENT || process.env.VERCEL || process.env.RENDER) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Default to stdio for local development\n  return DEFAULT_CONFIGS.development;\n}\n\n/**\n * Validate and normalize transport configuration\n */\nexport function validateTransportConfig(config: unknown): TransportConfig {\n  return TransportConfigSchema.parse(config);\n}\n\n/**\n * Get SSE server URL from configuration\n */\nexport function getServerUrl(config: TransportConfig): string | null {\n  if (config.type !== 'sse' || !config.sse) {\n    return null;\n  }\n\n  const { host, port, endpoint } = config.sse;\n  const protocol = port === 443 ? 'https' : 'http';\n  return `${protocol}://${host}:${port}${endpoint}`;\n}\n\n/**\n * Environment variable configuration helpers\n */\nexport const ENV_CONFIG = {\n  // Transport type selection\n  TRANSPORT_TYPE: 'N8N_MCP_TRANSPORT', // 'stdio' | 'sse'\n\n  // SSE configuration\n  SSE_PORT: 'N8N_MCP_SSE_PORT',\n  SSE_HOST: 'N8N_MCP_SSE_HOST',\n  SSE_ENDPOINT: 'N8N_MCP_SSE_ENDPOINT',\n\n  // CORS configuration\n  CORS_ORIGINS: 'N8N_MCP_CORS_ORIGINS', // comma-separated list\n  CORS_CREDENTIALS: 'N8N_MCP_CORS_CREDENTIALS', // 'true' | 'false'\n\n  // Health check configuration\n  HEALTH_CHECK_ENABLED: 'N8N_MCP_HEALTH_CHECK_ENABLED',\n  HEALTH_CHECK_ENDPOINT: 'N8N_MCP_HEALTH_CHECK_ENDPOINT',\n} as const;\n\n/**\n * Parse transport configuration from environment variables\n */\nexport function parseConfigFromEnv(): Partial<TransportConfig> {\n  const config: Partial<TransportConfig> = {};\n\n  // Transport type\n  if (process.env[ENV_CONFIG.TRANSPORT_TYPE]) {\n    config.type = process.env[ENV_CONFIG.TRANSPORT_TYPE] as 'stdio' | 'sse';\n  }\n\n  // SSE configuration - create if any SSE-related environment variables are set\n  const hasAnySSEConfig =\n    ENV_CONFIG.SSE_PORT in process.env ||\n    ENV_CONFIG.SSE_HOST in process.env ||\n    ENV_CONFIG.SSE_ENDPOINT in process.env ||\n    ENV_CONFIG.CORS_ORIGINS in process.env ||\n    ENV_CONFIG.CORS_CREDENTIALS in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENABLED in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENDPOINT in process.env;\n\n  if (config.type === 'sse' || hasAnySSEConfig) {\n    const ssePortEnv = process.env[ENV_CONFIG.SSE_PORT];\n    config.sse = {\n      port: ssePortEnv ? parseInt(ssePortEnv) : 8080,\n      host: process.env[ENV_CONFIG.SSE_HOST] || 'localhost',\n      endpoint: process.env[ENV_CONFIG.SSE_ENDPOINT] || '/sse',\n      cors: {\n        enabled: process.env[ENV_CONFIG.CORS_ORIGINS] !== undefined,\n        origins: process.env[ENV_CONFIG.CORS_ORIGINS]?.split(',') ?? ['*'],\n        credentials: process.env[ENV_CONFIG.CORS_CREDENTIALS] === 'true',\n      },\n      healthCheck: {\n        enabled: process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] !== 'false',\n        endpoint: process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT] || '/health',\n      },\n    };\n  }\n\n  return config;\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1ed2565ad4d5d05d842dc472e038deda23965488"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r9sl8ujhn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r9sl8ujhn();
/**
 * Transport Configuration for n8n MCP Server
 *
 * Provides transport type detection and configuration for different deployment scenarios.
 * Supports both stdio (local development) and SSE (remote/web access) transports.
 */
import { z } from 'zod';
// Transport configuration schema
export const TransportConfigSchema =
/* istanbul ignore next */
(cov_r9sl8ujhn().s[0]++, z.object({
  type: z.enum(['stdio', 'sse']).default('stdio'),
  sse: z.object({
    port: z.number().min(1024).max(65535).default(8080),
    endpoint: z.string().default('/sse'),
    host: z.string().default('localhost'),
    cors: z.object({
      enabled: z.boolean().default(true),
      origins: z.array(z.string()).default(['*']),
      credentials: z.boolean().default(false)
    }).default({}),
    healthCheck: z.object({
      enabled: z.boolean().default(true),
      endpoint: z.string().default('/health')
    }).default({})
  }).optional()
}));
/**
 * Default transport configurations for different environments
 */
export const DEFAULT_CONFIGS =
/* istanbul ignore next */
(cov_r9sl8ujhn().s[1]++, {
  development: {
    type: 'stdio'
  },
  production: {
    type: 'sse',
    sse: {
      port: 8080,
      endpoint: '/sse',
      host: '0.0.0.0',
      cors: {
        enabled: true,
        origins: ['*'],
        credentials: false
      },
      healthCheck: {
        enabled: true,
        endpoint: '/health'
      }
    }
  },
  web: {
    type: 'sse',
    sse: {
      port: process.env.PORT ?
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[0][0]++, parseInt(process.env.PORT)) :
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[0][1]++, 3000),
      endpoint: '/sse',
      host: '0.0.0.0',
      cors: {
        enabled: true,
        origins:
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[1][0]++, process.env.CORS_ORIGINS?.split(',')) ||
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[1][1]++, ['*']),
        credentials: true
      },
      healthCheck: {
        enabled: true,
        endpoint: '/health'
      }
    }
  }
});
/**
 * Detect appropriate transport configuration based on environment
 */
export function detectTransportConfig() {
  /* istanbul ignore next */
  cov_r9sl8ujhn().f[0]++;
  // Check environment variables for explicit transport type
  const transportType =
  /* istanbul ignore next */
  (cov_r9sl8ujhn().s[2]++, process.env.N8N_MCP_TRANSPORT);
  /* istanbul ignore next */
  cov_r9sl8ujhn().s[3]++;
  if (transportType === 'sse') {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[2][0]++;
    cov_r9sl8ujhn().s[4]++;
    return DEFAULT_CONFIGS.web;
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[2][1]++;
  }
  cov_r9sl8ujhn().s[5]++;
  if (transportType === 'stdio') {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[3][0]++;
    cov_r9sl8ujhn().s[6]++;
    return DEFAULT_CONFIGS.development;
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[3][1]++;
  }
  // Auto-detect based on environment
  cov_r9sl8ujhn().s[7]++;
  if (
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[5][0]++, process.env.NODE_ENV === 'production') ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[5][1]++, process.env.PORT)) {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[4][0]++;
    cov_r9sl8ujhn().s[8]++;
    return DEFAULT_CONFIGS.web;
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[4][1]++;
  }
  // Check if running in a web environment (Railway, Vercel, etc.)
  cov_r9sl8ujhn().s[9]++;
  if (
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[7][0]++, process.env.RAILWAY_ENVIRONMENT) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[7][1]++, process.env.VERCEL) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[7][2]++, process.env.RENDER)) {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[6][0]++;
    cov_r9sl8ujhn().s[10]++;
    return DEFAULT_CONFIGS.web;
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[6][1]++;
  }
  // Default to stdio for local development
  cov_r9sl8ujhn().s[11]++;
  return DEFAULT_CONFIGS.development;
}
/**
 * Validate and normalize transport configuration
 */
export function validateTransportConfig(config) {
  /* istanbul ignore next */
  cov_r9sl8ujhn().f[1]++;
  cov_r9sl8ujhn().s[12]++;
  return TransportConfigSchema.parse(config);
}
/**
 * Get SSE server URL from configuration
 */
export function getServerUrl(config) {
  /* istanbul ignore next */
  cov_r9sl8ujhn().f[2]++;
  cov_r9sl8ujhn().s[13]++;
  if (
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[9][0]++, config.type !== 'sse') ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[9][1]++, !config.sse)) {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[8][0]++;
    cov_r9sl8ujhn().s[14]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[8][1]++;
  }
  const {
    host,
    port,
    endpoint
  } =
  /* istanbul ignore next */
  (cov_r9sl8ujhn().s[15]++, config.sse);
  const protocol =
  /* istanbul ignore next */
  (cov_r9sl8ujhn().s[16]++, port === 443 ?
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[10][0]++, 'https') :
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[10][1]++, 'http'));
  /* istanbul ignore next */
  cov_r9sl8ujhn().s[17]++;
  return `${protocol}://${host}:${port}${endpoint}`;
}
/**
 * Environment variable configuration helpers
 */
export const ENV_CONFIG =
/* istanbul ignore next */
(cov_r9sl8ujhn().s[18]++, {
  // Transport type selection
  TRANSPORT_TYPE: 'N8N_MCP_TRANSPORT',
  // 'stdio' | 'sse'
  // SSE configuration
  SSE_PORT: 'N8N_MCP_SSE_PORT',
  SSE_HOST: 'N8N_MCP_SSE_HOST',
  SSE_ENDPOINT: 'N8N_MCP_SSE_ENDPOINT',
  // CORS configuration
  CORS_ORIGINS: 'N8N_MCP_CORS_ORIGINS',
  // comma-separated list
  CORS_CREDENTIALS: 'N8N_MCP_CORS_CREDENTIALS',
  // 'true' | 'false'
  // Health check configuration
  HEALTH_CHECK_ENABLED: 'N8N_MCP_HEALTH_CHECK_ENABLED',
  HEALTH_CHECK_ENDPOINT: 'N8N_MCP_HEALTH_CHECK_ENDPOINT'
});
/**
 * Parse transport configuration from environment variables
 */
export function parseConfigFromEnv() {
  /* istanbul ignore next */
  cov_r9sl8ujhn().f[3]++;
  const config =
  /* istanbul ignore next */
  (cov_r9sl8ujhn().s[19]++, {});
  // Transport type
  /* istanbul ignore next */
  cov_r9sl8ujhn().s[20]++;
  if (process.env[ENV_CONFIG.TRANSPORT_TYPE]) {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[11][0]++;
    cov_r9sl8ujhn().s[21]++;
    config.type = process.env[ENV_CONFIG.TRANSPORT_TYPE];
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[11][1]++;
  }
  // SSE configuration - create if any SSE-related environment variables are set
  const hasAnySSEConfig =
  /* istanbul ignore next */
  (cov_r9sl8ujhn().s[22]++,
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][0]++, ENV_CONFIG.SSE_PORT in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][1]++, ENV_CONFIG.SSE_HOST in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][2]++, ENV_CONFIG.SSE_ENDPOINT in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][3]++, ENV_CONFIG.CORS_ORIGINS in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][4]++, ENV_CONFIG.CORS_CREDENTIALS in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][5]++, ENV_CONFIG.HEALTH_CHECK_ENABLED in process.env) ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[12][6]++, ENV_CONFIG.HEALTH_CHECK_ENDPOINT in process.env));
  /* istanbul ignore next */
  cov_r9sl8ujhn().s[23]++;
  if (
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[14][0]++, config.type === 'sse') ||
  /* istanbul ignore next */
  (cov_r9sl8ujhn().b[14][1]++, hasAnySSEConfig)) {
    /* istanbul ignore next */
    cov_r9sl8ujhn().b[13][0]++;
    const ssePortEnv =
    /* istanbul ignore next */
    (cov_r9sl8ujhn().s[24]++, process.env[ENV_CONFIG.SSE_PORT]);
    /* istanbul ignore next */
    cov_r9sl8ujhn().s[25]++;
    config.sse = {
      port: ssePortEnv ?
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[15][0]++, parseInt(ssePortEnv)) :
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[15][1]++, 8080),
      host:
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[16][0]++, process.env[ENV_CONFIG.SSE_HOST]) ||
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[16][1]++, 'localhost'),
      endpoint:
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[17][0]++, process.env[ENV_CONFIG.SSE_ENDPOINT]) ||
      /* istanbul ignore next */
      (cov_r9sl8ujhn().b[17][1]++, '/sse'),
      cors: {
        enabled: process.env[ENV_CONFIG.CORS_ORIGINS] !== undefined,
        origins:
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[18][0]++, process.env[ENV_CONFIG.CORS_ORIGINS]?.split(',')) ??
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[18][1]++, ['*']),
        credentials: process.env[ENV_CONFIG.CORS_CREDENTIALS] === 'true'
      },
      healthCheck: {
        enabled: process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] !== 'false',
        endpoint:
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[19][0]++, process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT]) ||
        /* istanbul ignore next */
        (cov_r9sl8ujhn().b[19][1]++, '/health')
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_r9sl8ujhn().b[13][1]++;
  }
  cov_r9sl8ujhn().s[26]++;
  return config;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,