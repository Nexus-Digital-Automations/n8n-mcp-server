{"version":3,"names":["cov_r9sl8ujhn","actualCoverage","z","TransportConfigSchema","s","object","type","enum","default","sse","port","number","min","max","endpoint","string","host","cors","enabled","boolean","origins","array","credentials","healthCheck","optional","DEFAULT_CONFIGS","development","production","web","process","env","PORT","b","parseInt","CORS_ORIGINS","split","detectTransportConfig","f","transportType","N8N_MCP_TRANSPORT","NODE_ENV","RAILWAY_ENVIRONMENT","VERCEL","RENDER","validateTransportConfig","config","parse","getServerUrl","protocol","ENV_CONFIG","TRANSPORT_TYPE","SSE_PORT","SSE_HOST","SSE_ENDPOINT","CORS_CREDENTIALS","HEALTH_CHECK_ENABLED","HEALTH_CHECK_ENDPOINT","parseConfigFromEnv","hasAnySSEConfig","ssePortEnv","undefined"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/transportConfig.ts"],"sourcesContent":["/**\n * Transport Configuration for n8n MCP Server\n *\n * Provides transport type detection and configuration for different deployment scenarios.\n * Supports both stdio (local development) and SSE (remote/web access) transports.\n */\n\nimport { z } from 'zod';\n\n// Transport configuration schema\nexport const TransportConfigSchema = z.object({\n  type: z.enum(['stdio', 'sse']).default('stdio'),\n  sse: z\n    .object({\n      port: z.number().min(1024).max(65535).default(8080),\n      endpoint: z.string().default('/sse'),\n      host: z.string().default('localhost'),\n      cors: z\n        .object({\n          enabled: z.boolean().default(true),\n          origins: z.array(z.string()).default(['*']),\n          credentials: z.boolean().default(false),\n        })\n        .default({}),\n      healthCheck: z\n        .object({\n          enabled: z.boolean().default(true),\n          endpoint: z.string().default('/health'),\n        })\n        .default({}),\n    })\n    .optional(),\n});\n\nexport type TransportConfig = z.infer<typeof TransportConfigSchema>;\n\n/**\n * Default transport configurations for different environments\n */\nexport const DEFAULT_CONFIGS = {\n  development: {\n    type: 'stdio' as const,\n  },\n  production: {\n    type: 'sse' as const,\n    sse: {\n      port: 8080,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: ['*'],\n        credentials: false,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n  web: {\n    type: 'sse' as const,\n    sse: {\n      port: process.env.PORT ? parseInt(process.env.PORT) : 3000,\n      endpoint: '/sse',\n      host: '0.0.0.0',\n      cors: {\n        enabled: true,\n        origins: process.env.CORS_ORIGINS?.split(',') || ['*'],\n        credentials: true,\n      },\n      healthCheck: {\n        enabled: true,\n        endpoint: '/health',\n      },\n    },\n  },\n} as const;\n\n/**\n * Detect appropriate transport configuration based on environment\n */\nexport function detectTransportConfig(): TransportConfig {\n  // Check environment variables for explicit transport type\n  const transportType = process.env.N8N_MCP_TRANSPORT as 'stdio' | 'sse' | undefined;\n\n  if (transportType === 'sse') {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  if (transportType === 'stdio') {\n    return DEFAULT_CONFIGS.development;\n  }\n\n  // Auto-detect based on environment\n  if (process.env.NODE_ENV === 'production' || process.env.PORT) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Check if running in a web environment (Railway, Vercel, etc.)\n  if (process.env.RAILWAY_ENVIRONMENT || process.env.VERCEL || process.env.RENDER) {\n    return DEFAULT_CONFIGS.web;\n  }\n\n  // Default to stdio for local development\n  return DEFAULT_CONFIGS.development;\n}\n\n/**\n * Validate and normalize transport configuration\n */\nexport function validateTransportConfig(config: unknown): TransportConfig {\n  return TransportConfigSchema.parse(config);\n}\n\n/**\n * Get SSE server URL from configuration\n */\nexport function getServerUrl(config: TransportConfig): string | null {\n  if (config.type !== 'sse' || !config.sse) {\n    return null;\n  }\n\n  const { host, port, endpoint } = config.sse;\n  const protocol = port === 443 ? 'https' : 'http';\n  return `${protocol}://${host}:${port}${endpoint}`;\n}\n\n/**\n * Environment variable configuration helpers\n */\nexport const ENV_CONFIG = {\n  // Transport type selection\n  TRANSPORT_TYPE: 'N8N_MCP_TRANSPORT', // 'stdio' | 'sse'\n\n  // SSE configuration\n  SSE_PORT: 'N8N_MCP_SSE_PORT',\n  SSE_HOST: 'N8N_MCP_SSE_HOST',\n  SSE_ENDPOINT: 'N8N_MCP_SSE_ENDPOINT',\n\n  // CORS configuration\n  CORS_ORIGINS: 'N8N_MCP_CORS_ORIGINS', // comma-separated list\n  CORS_CREDENTIALS: 'N8N_MCP_CORS_CREDENTIALS', // 'true' | 'false'\n\n  // Health check configuration\n  HEALTH_CHECK_ENABLED: 'N8N_MCP_HEALTH_CHECK_ENABLED',\n  HEALTH_CHECK_ENDPOINT: 'N8N_MCP_HEALTH_CHECK_ENDPOINT',\n} as const;\n\n/**\n * Parse transport configuration from environment variables\n */\nexport function parseConfigFromEnv(): Partial<TransportConfig> {\n  const config: Partial<TransportConfig> = {};\n\n  // Transport type\n  if (process.env[ENV_CONFIG.TRANSPORT_TYPE]) {\n    config.type = process.env[ENV_CONFIG.TRANSPORT_TYPE] as 'stdio' | 'sse';\n  }\n\n  // SSE configuration - create if any SSE-related environment variables are set\n  const hasAnySSEConfig =\n    ENV_CONFIG.SSE_PORT in process.env ||\n    ENV_CONFIG.SSE_HOST in process.env ||\n    ENV_CONFIG.SSE_ENDPOINT in process.env ||\n    ENV_CONFIG.CORS_ORIGINS in process.env ||\n    ENV_CONFIG.CORS_CREDENTIALS in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENABLED in process.env ||\n    ENV_CONFIG.HEALTH_CHECK_ENDPOINT in process.env;\n\n  if (config.type === 'sse' || hasAnySSEConfig) {\n    const ssePortEnv = process.env[ENV_CONFIG.SSE_PORT];\n    config.sse = {\n      port: ssePortEnv ? parseInt(ssePortEnv) : 8080,\n      host: process.env[ENV_CONFIG.SSE_HOST] || 'localhost',\n      endpoint: process.env[ENV_CONFIG.SSE_ENDPOINT] || '/sse',\n      cors: {\n        enabled: process.env[ENV_CONFIG.CORS_ORIGINS] !== undefined,\n        origins: process.env[ENV_CONFIG.CORS_ORIGINS]?.split(',') ?? ['*'],\n        credentials: process.env[ENV_CONFIG.CORS_CREDENTIALS] === 'true',\n      },\n      healthCheck: {\n        enabled: process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] !== 'false',\n        endpoint: process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT] || '/health',\n      },\n    };\n  }\n\n  return config;\n}\n"],"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","ignoreList":[]}