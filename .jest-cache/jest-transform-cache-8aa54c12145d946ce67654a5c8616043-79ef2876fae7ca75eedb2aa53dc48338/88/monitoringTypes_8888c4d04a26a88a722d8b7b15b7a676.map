{"version":3,"names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/monitoringTypes.ts"],"sourcesContent":["// Monitoring and resource tracking type definitions\n\nexport interface SystemResourceUsage {\n  cpu: {\n    totalUsage: number; // Percentage 0-100\n    processUsage: number; // n8n process CPU usage\n    loadAverage: number[]; // 1, 5, 15 minute load averages\n    coreCount: number;\n  };\n  memory: {\n    totalMemory: number; // Total system memory in bytes\n    freeMemory: number; // Free memory in bytes\n    usedMemory: number; // Used memory in bytes\n    processMemory: {\n      heapUsed: number; // Node.js heap used\n      heapTotal: number; // Node.js heap total\n      external: number; // External memory usage\n      rss: number; // Resident set size\n    };\n    utilization: number; // Memory utilization percentage\n  };\n  disk: {\n    totalSpace: number; // Total disk space in bytes\n    freeSpace: number; // Free disk space in bytes\n    usedSpace: number; // Used disk space in bytes\n    utilization: number; // Disk utilization percentage\n  };\n  network: {\n    bytesReceived: number;\n    bytesSent: number;\n    packetsReceived: number;\n    packetsSent: number;\n  };\n  uptime: number; // Process uptime in seconds\n  timestamp: string; // ISO timestamp\n}\n\nexport interface WorkflowResourceUsage {\n  workflowId: string;\n  workflowName: string;\n  isActive: boolean;\n  executionCount: number;\n  resourceMetrics: {\n    averageExecutionTime: number; // Average execution time in milliseconds\n    lastExecutionTime: number; // Last execution time in milliseconds\n    totalExecutionTime: number; // Total execution time across all runs\n    memoryUsage: {\n      average: number; // Average memory usage during executions\n      peak: number; // Peak memory usage observed\n      current: number; // Current memory usage if running\n    };\n    cpuUsage: {\n      average: number; // Average CPU usage during executions\n      peak: number; // Peak CPU usage observed\n      current: number; // Current CPU usage if running\n    };\n  };\n  executionStats: {\n    successfulRuns: number;\n    failedRuns: number;\n    totalRuns: number;\n    successRate: number; // Percentage\n    lastExecution: string; // ISO timestamp\n    averageRunsPerHour: number;\n  };\n  nodePerformance: Array<{\n    nodeId: string;\n    nodeName: string;\n    nodeType: string;\n    averageExecutionTime: number;\n    executionCount: number;\n    errorRate: number;\n  }>;\n}\n\nexport interface InstanceHealthMetrics {\n  overall: {\n    status: 'healthy' | 'warning' | 'critical' | 'degraded';\n    score: number; // 0-100 health score\n    issues: string[];\n    recommendations: string[];\n  };\n  performance: {\n    responseTime: number; // API response time in milliseconds\n    throughput: number; // Executions per minute\n    errorRate: number; // Error percentage\n    availabilityUptime: number; // Uptime percentage\n  };\n  resources: {\n    memoryPressure: boolean;\n    cpuThrottling: boolean;\n    diskSpaceWarning: boolean;\n    networkLatency: number;\n  };\n  dependencies: Array<{\n    name: string;\n    type: 'database' | 'external_api' | 'file_system' | 'network';\n    status: 'online' | 'offline' | 'degraded';\n    responseTime: number;\n    errorCount: number;\n  }>;\n  alerts: Array<{\n    id: string;\n    severity: 'info' | 'warning' | 'error' | 'critical';\n    message: string;\n    timestamp: string;\n    resolved: boolean;\n  }>;\n}\n\nexport interface ResourceMonitoringConfig {\n  monitoring: {\n    enabled: boolean;\n    intervalMs: number; // Monitoring interval in milliseconds\n    retentionDays: number; // Data retention period\n    alertThresholds: {\n      cpuUsage: number; // CPU usage threshold percentage\n      memoryUsage: number; // Memory usage threshold percentage\n      diskUsage: number; // Disk usage threshold percentage\n      executionTime: number; // Execution time threshold in milliseconds\n      errorRate: number; // Error rate threshold percentage\n    };\n  };\n  collection: {\n    systemMetrics: boolean;\n    workflowMetrics: boolean;\n    nodeMetrics: boolean;\n    healthChecks: boolean;\n  };\n  storage: {\n    inMemory: boolean;\n    persistToDisk: boolean;\n    maxDataPoints: number;\n    compressionEnabled: boolean;\n  };\n}\n\nexport interface MonitoringDataPoint {\n  timestamp: string;\n  metricType: 'system' | 'workflow' | 'health' | 'performance';\n  data: Record<string, unknown>;\n  tags: Record<string, string>;\n}\n\nexport interface PerformanceAlert {\n  id: string;\n  type: 'resource_threshold' | 'execution_failure' | 'response_time' | 'health_check';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  title: string;\n  description: string;\n  triggeredAt: string;\n  resolvedAt?: string;\n  metadata: {\n    workflowId?: string;\n    executionId?: string;\n    nodeId?: string;\n    threshold?: number;\n    actualValue?: number;\n    duration?: number;\n  };\n  actions: Array<{\n    type: 'auto_scaling' | 'notification' | 'restart' | 'throttle';\n    description: string;\n    executed: boolean;\n    result?: string;\n  }>;\n}\n\nexport interface MonitoringReport {\n  reportId: string;\n  generatedAt: string;\n  timeRange: {\n    start: string;\n    end: string;\n    duration: string;\n  };\n  summary: {\n    totalWorkflows: number;\n    activeWorkflows: number;\n    totalExecutions: number;\n    successfulExecutions: number;\n    averageExecutionTime: number;\n    systemUptimePercentage: number;\n    alertsGenerated: number;\n  };\n  resourceTrends: {\n    cpuTrend: 'increasing' | 'decreasing' | 'stable';\n    memoryTrend: 'increasing' | 'decreasing' | 'stable';\n    executionTrend: 'increasing' | 'decreasing' | 'stable';\n  };\n  topPerformers: {\n    fastestWorkflows: WorkflowResourceUsage[];\n    slowestWorkflows: WorkflowResourceUsage[];\n    mostActiveWorkflows: WorkflowResourceUsage[];\n    leastReliableWorkflows: WorkflowResourceUsage[];\n  };\n  recommendations: Array<{\n    category: 'performance' | 'reliability' | 'cost' | 'security';\n    priority: 'low' | 'medium' | 'high';\n    title: string;\n    description: string;\n    estimatedImpact: string;\n    implementationEffort: 'low' | 'medium' | 'high';\n  }>;\n}\n\nexport interface ResourceThresholds {\n  cpu: {\n    warning: number; // CPU usage warning threshold (percentage)\n    critical: number; // CPU usage critical threshold (percentage)\n  };\n  memory: {\n    warning: number; // Memory usage warning threshold (percentage)\n    critical: number; // Memory usage critical threshold (percentage)\n  };\n  disk: {\n    warning: number; // Disk usage warning threshold (percentage)\n    critical: number; // Disk usage critical threshold (percentage)\n  };\n  executionTime: {\n    warning: number; // Execution time warning threshold (milliseconds)\n    critical: number; // Execution time critical threshold (milliseconds)\n  };\n  errorRate: {\n    warning: number; // Error rate warning threshold (percentage)\n    critical: number; // Error rate critical threshold (percentage)\n  };\n  responseTime: {\n    warning: number; // API response time warning threshold (milliseconds)\n    critical: number; // API response time critical threshold (milliseconds)\n  };\n}\n\nexport interface MonitoringMetrics {\n  system: SystemResourceUsage;\n  workflows: WorkflowResourceUsage[];\n  health: InstanceHealthMetrics;\n  alerts: PerformanceAlert[];\n  dataPoints: MonitoringDataPoint[];\n}\n\nexport interface SystemDiagnostics {\n  timestamp: string;\n  overall: {\n    status: 'healthy' | 'warning' | 'critical' | 'degraded';\n    issues: string[];\n    recommendations: string[];\n  };\n  connectivity: {\n    apiConnectivity: boolean;\n    responseTime: number;\n    error?: string;\n  };\n  resources: SystemResourceUsage;\n  environment: {\n    nodeVersion: string;\n    platform: string;\n    architecture: string;\n    uptime: number;\n  };\n}\n\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'warning' | 'critical' | 'degraded';\n  version: string;\n  uptime: number;\n  database: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  redis?: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  filesystem: {\n    status: 'accessible' | 'error';\n    permissions: 'read-write' | 'read-only' | 'no-access';\n  };\n}\n\nexport interface MetricsResponse {\n  timestamp: string;\n  executions: {\n    total: number;\n    successful: number;\n    failed: number;\n    running: number;\n    waiting: number;\n  };\n  workflows: {\n    total: number;\n    active: number;\n    inactive: number;\n    withIssues: number;\n  };\n  performance: {\n    averageExecutionTime: number;\n    throughput: number;\n    errorRate: number;\n  };\n  system: SystemResourceUsage;\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}