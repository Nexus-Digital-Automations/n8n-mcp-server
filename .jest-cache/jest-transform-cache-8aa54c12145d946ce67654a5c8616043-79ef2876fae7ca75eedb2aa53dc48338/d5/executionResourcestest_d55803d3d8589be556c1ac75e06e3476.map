{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/resources/executionResources.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/resources/executionResources.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest, afterEach } from '@jest/globals';\nimport { FastMCP } from 'fastmcp';\nimport {\n  ExecutionResourceManager,\n  createExecutionResources,\n} from '../../../src/resources/executionResources';\nimport { N8nClient } from '../../../src/client/n8nClient';\n\n// Mock dependencies\njest.mock('fastmcp');\njest.mock('../../../src/client/n8nClient');\n\n// Mock console methods to avoid test output pollution\nconst mockConsoleLog = jest.fn();\njest.spyOn(console, 'log').mockImplementation(mockConsoleLog);\n\ndescribe('ExecutionResourceManager', () => {\n  let executionManager: ExecutionResourceManager;\n  let mockServer: jest.Mocked<FastMCP>;\n  let mockClient: jest.Mocked<N8nClient>;\n  let getClientFn: () => N8nClient | null;\n\n  // Mock execution data\n  const mockExecution = {\n    id: 'exec-123',\n    workflowId: 'workflow-456',\n    finished: true,\n    startedAt: '2023-01-01T10:00:00Z',\n    stoppedAt: '2023-01-01T10:05:00Z',\n    mode: 'manual',\n    status: 'success' as const,\n    retryOf: undefined,\n    retrySuccessId: undefined,\n    data: {\n      resultData: {\n        runData: {\n          'HTTP Request': [\n            {\n              data: {\n                main: [\n                  {\n                    json: { status: 'success' },\n                  },\n                ],\n              },\n            },\n          ],\n        },\n      },\n    },\n    workflowData: {\n      id: 'workflow-456',\n      name: 'Test Workflow',\n      active: true,\n      nodes: [],\n      connections: {},\n    },\n  };\n\n  const mockFailedExecution = {\n    id: 'exec-456',\n    workflowId: 'workflow-789',\n    finished: false,\n    startedAt: '2023-01-01T11:00:00Z',\n    stoppedAt: '2023-01-01T11:02:00Z',\n    mode: 'trigger',\n    status: 'error' as const,\n    retryOf: undefined,\n    retrySuccessId: undefined,\n    data: {\n      resultData: {\n        error: {\n          message: 'Test error',\n          stack: 'Error stack trace',\n        },\n      },\n    },\n    workflowData: {\n      id: 'workflow-789',\n      name: 'Failed Workflow',\n      active: false,\n      nodes: [],\n      connections: {},\n    },\n  };\n\n  beforeEach(() => {\n    // Create mock instances\n    mockServer = {\n      addResource: jest.fn(),\n      addResourceTemplate: jest.fn(),\n    } as unknown as jest.Mocked<FastMCP>;\n\n    mockClient = {\n      getExecution: jest.fn(),\n      getExecutions: jest.fn(),\n    } as unknown as jest.Mocked<N8nClient>;\n\n    getClientFn = jest.fn().mockReturnValue(mockClient) as () => N8nClient | null;\n\n    // Clear all mocks\n    jest.clearAllMocks();\n    mockConsoleLog.mockClear();\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Constructor and Configuration', () => {\n    it('should initialize with default configuration', () => {\n      executionManager = new ExecutionResourceManager();\n      expect(executionManager).toBeInstanceOf(ExecutionResourceManager);\n    });\n\n    it('should initialize with custom configuration', () => {\n      const config = {\n        baseUri: 'custom://executions',\n        maxExecutions: 10,\n        includeData: true,\n        includeFailures: false,\n        cacheDuration: 5000,\n        maxDataSize: 512 * 1024,\n      };\n\n      executionManager = new ExecutionResourceManager(config);\n      expect(executionManager).toBeInstanceOf(ExecutionResourceManager);\n    });\n\n    it('should merge custom config with defaults', () => {\n      const config = {\n        maxExecutions: 25,\n        includeData: true,\n      };\n\n      executionManager = new ExecutionResourceManager(config);\n      expect(executionManager).toBeInstanceOf(ExecutionResourceManager);\n    });\n  });\n\n  describe('Resource Registration', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n    });\n\n    it('should register all execution resources', () => {\n      executionManager.register(mockServer, getClientFn);\n\n      expect(mockServer.addResourceTemplate).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uriTemplate: 'n8n://executions/{id}',\n          name: 'n8n Execution',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResourceTemplate).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uriTemplate: 'n8n://executions/{id}/logs',\n          name: 'n8n Execution Logs',\n          mimeType: 'text/plain',\n        })\n      );\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://executions/recent',\n          name: 'n8n Recent Executions',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://executions/failures',\n          name: 'n8n Failed Executions',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockServer.addResource).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uri: 'n8n://executions/stats',\n          name: 'n8n Execution Statistics',\n          mimeType: 'application/json',\n        })\n      );\n\n      expect(mockConsoleLog).toHaveBeenCalledWith('⚡ Execution resources registered');\n    });\n\n    it('should register execution template with correct arguments', () => {\n      executionManager.register(mockServer, getClientFn);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      expect(templateCall).toBeDefined();\n      if (!templateCall) throw new Error('Template call not found');\n\n      const template = templateCall[0];\n      expect(template.arguments).toHaveLength(1);\n      expect(template.arguments[0]).toEqual({\n        name: 'id',\n        description: 'The ID of the n8n execution',\n        required: true,\n      });\n    });\n\n    it('should register logs template with correct arguments', () => {\n      executionManager.register(mockServer, getClientFn);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      expect(templateCall).toBeDefined();\n      if (!templateCall) throw new Error('Template call not found');\n\n      const template = templateCall[0];\n      expect(template.arguments).toHaveLength(1);\n      expect(template.arguments[0]).toEqual({\n        name: 'id',\n        description: 'The ID of the n8n execution',\n        required: true,\n      });\n    });\n\n    it('should register workflow executions template', () => {\n      executionManager.register(mockServer, getClientFn);\n\n      expect(mockServer.addResourceTemplate).toHaveBeenCalledWith(\n        expect.objectContaining({\n          uriTemplate: 'n8n://executions/workflow/{workflowId}',\n          name: 'n8n Workflow Executions',\n          mimeType: 'application/json',\n        })\n      );\n    });\n  });\n\n  describe('Individual Execution Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load execution resource successfully', async () => {\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      expect(templateCall).toBeDefined();\n      if (!templateCall) throw new Error('Template call not found');\n\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.id).toBe('exec-123');\n      expect(data.workflowId).toBe('workflow-456');\n      expect(data.status).toBe('success');\n      expect(data.duration).toBe(300000); // 5 minutes\n      expect(data.resourceInfo).toBeDefined();\n      expect(data.resourceInfo.type).toBe('n8n-execution');\n    });\n\n    it('should handle execution with error status', async () => {\n      mockClient.getExecution.mockResolvedValue(mockFailedExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-456' });\n\n      const data = JSON.parse(result.text);\n      expect(data.status).toBe('stopped');\n      expect(data.metadata.error).toEqual({\n        message: 'Test error',\n        stack: 'Error stack trace',\n      });\n    });\n\n    it('should handle running execution', async () => {\n      const runningExecution = {\n        ...mockExecution,\n        finished: false,\n        stoppedAt: undefined,\n        status: 'running' as const,\n      };\n      mockClient.getExecution.mockResolvedValue(runningExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.status).toBe('running');\n      expect(data.duration).toBeNull();\n    });\n\n    it('should throw error when client not initialized', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ id: 'exec-123' })).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getExecution.mockRejectedValue(new Error('API Error'));\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ id: 'exec-123' })).rejects.toThrow(\n        'Failed to load execution exec-123: API Error'\n      );\n    });\n\n    it('should include data when configured', async () => {\n      // Clear previous mocks first\n      jest.clearAllMocks();\n      mockConsoleLog.mockClear();\n\n      executionManager = new ExecutionResourceManager({ includeData: true });\n      executionManager.register(mockServer, getClientFn);\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.data).toBeDefined();\n    });\n\n    it('should exclude data by default', async () => {\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.data).toBeUndefined();\n    });\n  });\n\n  describe('Execution Logs Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load execution logs successfully', async () => {\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      expect(templateCall).toBeDefined();\n      if (!templateCall) throw new Error('Template call not found');\n\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      expect(result.text).toBeDefined();\n      expect(result.text).toContain('Execution ID: exec-123');\n      expect(result.text).toContain('Workflow ID: workflow-456');\n      expect(result.text).toContain('Status: Finished');\n      expect(result.text).toContain('NODE EXECUTION DATA:');\n      expect(result.text).toContain('Node: HTTP Request');\n    });\n\n    it('should include error information in logs', async () => {\n      mockClient.getExecution.mockResolvedValue(mockFailedExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-456' });\n\n      expect(result.text).toContain('ERROR:');\n      expect(result.text).toContain('Test error');\n    });\n\n    it('should handle logs API errors', async () => {\n      mockClient.getExecution.mockRejectedValue(new Error('Logs API Error'));\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ id: 'exec-123' })).rejects.toThrow(\n        'Failed to load execution logs exec-123: Logs API Error'\n      );\n    });\n  });\n\n  describe('Recent Executions Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load recent executions successfully', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockExecution, mockFailedExecution],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      expect(resourceCall).toBeDefined();\n      if (!resourceCall) throw new Error('Resource call not found');\n\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.executions).toHaveLength(2);\n      expect(data.executions[0].id).toBe('exec-123');\n      expect(data.executions[0].status).toBe('success');\n      expect(data.executions[1].id).toBe('exec-456');\n      expect(data.executions[1].status).toBe('stopped');\n      expect(data.metadata.total).toBe(2);\n      expect(data.resourceInfo.type).toBe('n8n-recent-executions');\n    });\n\n    it('should handle empty executions list', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [] });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.executions).toHaveLength(0);\n      expect(data.metadata.total).toBe(0);\n    });\n\n    it('should handle recent executions API errors', async () => {\n      mockClient.getExecutions.mockRejectedValue(new Error('Recent API Error'));\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'Failed to load recent executions: Recent API Error'\n      );\n    });\n  });\n\n  describe('Failed Executions Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load failed executions successfully', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockExecution, mockFailedExecution],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/failures'\n      );\n      expect(resourceCall).toBeDefined();\n      if (!resourceCall) throw new Error('Resource call not found');\n\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.failures).toHaveLength(1); // Only failed execution\n      expect(data.failures[0].id).toBe('exec-456');\n      expect(data.failures[0].error).toBe('Test error');\n      expect(data.failures[0].errorDetails).toEqual({\n        message: 'Test error',\n        stack: 'Error stack trace',\n      });\n      expect(data.resourceInfo.type).toBe('n8n-failed-executions');\n    });\n\n    it('should handle no failed executions', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockExecution], // Only successful execution\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/failures'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.failures).toHaveLength(0);\n      expect(data.metadata.total).toBe(0);\n    });\n\n    it('should handle failures API errors', async () => {\n      mockClient.getExecutions.mockRejectedValue(new Error('Failures API Error'));\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/failures'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'Failed to load failed executions: Failures API Error'\n      );\n    });\n  });\n\n  describe('Execution Statistics Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load execution statistics successfully', async () => {\n      const runningExecution = {\n        ...mockExecution,\n        id: 'exec-789',\n        finished: false,\n        stoppedAt: undefined,\n        status: 'running' as const,\n      };\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockExecution, mockFailedExecution, runningExecution],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      expect(resourceCall).toBeDefined();\n      if (!resourceCall) throw new Error('Resource call not found');\n\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.totalExecutions).toBe(3);\n      expect(data.successfulExecutions).toBe(1);\n      expect(data.failedExecutions).toBe(1);\n      expect(data.runningExecutions).toBe(1);\n      expect(data.averageDuration).toBeGreaterThan(0);\n      expect(data.executionsByStatus).toBeDefined();\n      expect(data.executionsByStatus.success).toBe(1);\n      expect(data.executionsByStatus.error).toBe(1);\n      expect(data.executionsByStatus.running).toBe(1);\n      expect(data.resourceInfo.type).toBe('n8n-execution-stats');\n    });\n\n    it('should handle zero average duration', async () => {\n      const executionWithoutTiming = {\n        ...mockExecution,\n        startedAt: '2023-01-01T10:00:00Z',\n        stoppedAt: undefined,\n      };\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: [executionWithoutTiming],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.averageDuration).toBe(0);\n    });\n\n    it('should handle stats API errors', async () => {\n      mockClient.getExecutions.mockRejectedValue(new Error('Stats API Error'));\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'Failed to load execution statistics: Stats API Error'\n      );\n    });\n  });\n\n  describe('Workflow Executions Resource', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should load workflow executions successfully', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockExecution, mockFailedExecution],\n      });\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      expect(templateCall).toBeDefined();\n      if (!templateCall) throw new Error('Template call not found');\n\n      const template = templateCall[0];\n      const result = await template.load({ workflowId: 'workflow-456' });\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.workflowId).toBe('workflow-456');\n      expect(data.executions).toHaveLength(1); // Only executions for this workflow\n      expect(data.executions[0].id).toBe('exec-123');\n      expect(data.metadata.workflowId).toBe('workflow-456');\n      expect(data.resourceInfo.type).toBe('n8n-workflow-executions');\n    });\n\n    it('should handle no executions for workflow', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [mockFailedExecution], // Different workflow\n      });\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ workflowId: 'workflow-999' });\n\n      const data = JSON.parse(result.text);\n      expect(data.executions).toHaveLength(0);\n      expect(data.metadata.total).toBe(0);\n    });\n\n    it('should validate workflow executions template arguments', () => {\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      expect(template.arguments).toHaveLength(1);\n      expect(template.arguments[0]).toEqual({\n        name: 'workflowId',\n        description: 'The ID of the workflow',\n        required: true,\n      });\n    });\n  });\n\n  describe('Data Sanitization', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager({ includeData: true });\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should sanitize sensitive data', async () => {\n      const executionWithSensitiveData = {\n        ...mockExecution,\n        data: {\n          resultData: {\n            runData: {\n              'HTTP Request': [\n                {\n                  data: {\n                    main: [\n                      {\n                        json: {\n                          password: 'secret123',\n                          apiKey: 'key456',\n                          token: 'token789',\n                          secretKey: 'secret',\n                          normalData: 'safe',\n                        },\n                      },\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(executionWithSensitiveData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      const sanitizedData = data.data;\n      const jsonData = sanitizedData.resultData.runData['HTTP Request'][0].data.main[0].json;\n\n      expect(jsonData.password).toBe('[REDACTED]');\n      expect(jsonData.apiKey).toBe('[REDACTED]');\n      expect(jsonData.token).toBe('[REDACTED]');\n      expect(jsonData.secretKey).toBe('[REDACTED]');\n      expect(jsonData.normalData).toBe('safe');\n    });\n\n    it('should truncate large data', async () => {\n      // Clear all previous mock calls first\n      jest.clearAllMocks();\n      mockConsoleLog.mockClear();\n\n      executionManager = new ExecutionResourceManager({\n        includeData: true,\n        maxDataSize: 100, // Very small limit\n      });\n      executionManager.register(mockServer, getClientFn);\n\n      const executionWithLargeData = {\n        ...mockExecution,\n        data: {\n          resultData: {\n            runData: {\n              'HTTP Request': [\n                {\n                  data: {\n                    main: Array(1000).fill({ json: { largeData: 'x'.repeat(1000) } }),\n                  },\n                },\n              ],\n            },\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(executionWithLargeData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.data._truncated).toBe(true);\n      expect(data.data.summary).toContain('truncated due to size limits');\n    });\n  });\n\n  describe('Cache Management', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager({ cacheDuration: 1000 });\n    });\n\n    it('should cache execution data', async () => {\n      executionManager.register(mockServer, getClientFn);\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      // First call\n      await template.load({ id: 'exec-123' });\n      expect(mockClient.getExecution).toHaveBeenCalledTimes(1);\n\n      // Second call should use cache\n      await template.load({ id: 'exec-123' });\n      expect(mockClient.getExecution).toHaveBeenCalledTimes(1);\n    });\n\n    it('should clear cache', () => {\n      executionManager.clearCache();\n      // Should not throw\n    });\n\n    it('should get cache statistics', () => {\n      const stats = executionManager.getCacheStats();\n      expect(stats).toBeDefined();\n      expect(typeof stats.size).toBe('number');\n      expect(Array.isArray(stats.keys)).toBe(true);\n    });\n\n    it('should not cache when duration is 0', () => {\n      executionManager = new ExecutionResourceManager({ cacheDuration: 0 });\n      executionManager.register(mockServer, getClientFn);\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      return template\n        .load({ id: 'exec-123' })\n        .then(() => {\n          return template.load({ id: 'exec-123' });\n        })\n        .then(() => {\n          expect(mockClient.getExecution).toHaveBeenCalledTimes(2);\n        });\n    });\n  });\n\n  describe('Factory Function', () => {\n    it('should create execution resource manager with factory function', () => {\n      const manager = createExecutionResources();\n      expect(manager).toBeInstanceOf(ExecutionResourceManager);\n    });\n\n    it('should create execution resource manager with config via factory', () => {\n      const config = { maxExecutions: 25, includeData: true };\n      const manager = createExecutionResources(config);\n      expect(manager).toBeInstanceOf(ExecutionResourceManager);\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should handle null execution data', async () => {\n      const executionWithNullData = {\n        ...mockExecution,\n        data: undefined,\n      };\n      mockClient.getExecution.mockResolvedValue(executionWithNullData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.metadata.error).toBeUndefined();\n    });\n\n    it('should handle malformed execution data', async () => {\n      const malformedExecution = {\n        id: 'exec-123',\n        finished: false,\n        mode: 'manual',\n        startedAt: '2023-01-01T10:00:00Z',\n        workflowId: 'workflow-456',\n        status: 'running' as const,\n      };\n      mockClient.getExecution.mockResolvedValue(malformedExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.id).toBe('exec-123');\n      expect(data.status).toBe('running'); // Default when no finished/stoppedAt\n    });\n\n    it('should handle non-Error exceptions', async () => {\n      mockClient.getExecution.mockRejectedValue('String error');\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ id: 'exec-123' })).rejects.toThrow(\n        'Failed to load execution exec-123: String error'\n      );\n    });\n\n    it('should handle empty execution lists gracefully', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [] });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.totalExecutions).toBe(0);\n      expect(data.averageDuration).toBe(0);\n    });\n\n    it('should handle missing workflow data in executions', async () => {\n      const executionWithoutWorkflowData = {\n        ...mockExecution,\n        workflowData: undefined,\n      };\n      mockClient.getExecutions.mockResolvedValue({\n        data: [executionWithoutWorkflowData],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.executions[0].workflowName).toBeUndefined();\n    });\n\n    it('should handle client not initialized for logs resource', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ id: 'exec-123' })).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle client not initialized for recent executions', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle client not initialized for failed executions', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/failures'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle client not initialized for execution stats', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      await expect(resource.load()).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle client not initialized for workflow executions', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ workflowId: 'workflow-123' })).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should handle workflow executions API errors', async () => {\n      mockClient.getExecutions.mockRejectedValue(new Error('Workflow API Error'));\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ workflowId: 'workflow-123' })).rejects.toThrow(\n        'Failed to load workflow executions workflow-123: Workflow API Error'\n      );\n    });\n\n    it('should handle primitive data types in sanitization', async () => {\n      // Clear previous mocks first\n      jest.clearAllMocks();\n      mockConsoleLog.mockClear();\n\n      executionManager = new ExecutionResourceManager({ includeData: true });\n      executionManager.register(mockServer, getClientFn);\n\n      const executionWithPrimitiveData = {\n        ...mockExecution,\n        data: { primitiveString: 'primitive string data' },\n      };\n      mockClient.getExecution.mockResolvedValue(executionWithPrimitiveData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.data.primitiveString).toBe('primitive string data');\n    });\n\n    it('should handle array data in sanitization', async () => {\n      // Clear previous mocks first\n      jest.clearAllMocks();\n      mockConsoleLog.mockClear();\n\n      executionManager = new ExecutionResourceManager({ includeData: true });\n      executionManager.register(mockServer, getClientFn);\n\n      const executionWithArrayData = {\n        ...mockExecution,\n        data: {\n          resultData: {\n            arrayData: [\n              { password: 'secret123', normalData: 'safe' },\n              { token: 'token456', publicInfo: 'visible' },\n            ],\n          },\n        },\n      };\n      mockClient.getExecution.mockResolvedValue(executionWithArrayData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ id: 'exec-123' });\n\n      const data = JSON.parse(result.text);\n      expect(data.data.resultData.arrayData[0].password).toBe('[REDACTED]');\n      expect(data.data.resultData.arrayData[0].normalData).toBe('safe');\n      expect(data.data.resultData.arrayData[1].token).toBe('[REDACTED]');\n      expect(data.data.resultData.arrayData[1].publicInfo).toBe('visible');\n    });\n\n    it('should handle executions with only stoppedAt status in status calculation', async () => {\n      const stoppedExecution = {\n        ...mockExecution,\n        finished: false,\n        stoppedAt: '2023-01-01T10:05:00Z',\n        data: {\n          resultData: {\n            // No error, just stopped\n          },\n        },\n      };\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: [stoppedExecution],\n      });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n      const result = await resource.load();\n\n      const data = JSON.parse(result.text);\n      expect(data.executionsByStatus.stopped).toBe(1);\n      expect(data.executionsByStatus.success).toBe(0);\n      expect(data.executionsByStatus.error).toBe(0);\n      expect(data.executionsByStatus.running).toBe(0);\n    });\n  });\n\n  describe('Duplicate Resource Template Coverage', () => {\n    beforeEach(() => {\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should handle client not initialized for executionId template', async () => {\n      (getClientFn as jest.Mock).mockReturnValue(null);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      await expect(template.load({ executionId: 'exec-123' })).rejects.toThrow(\n        'n8n client not initialized. Run init-n8n first.'\n      );\n    });\n\n    it('should load execution by executionId template successfully', async () => {\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ executionId: 'exec-123' });\n\n      expect(result.text).toBeDefined();\n      const data = JSON.parse(result.text);\n      expect(data.id).toBe('exec-123');\n      expect(data.resourceInfo.type).toBe('n8n-execution');\n    });\n  });\n\n  describe('Cache Expiration Edge Cases', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n      executionManager = new ExecutionResourceManager({ cacheDuration: 50 }); // Very short cache\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    it('should handle cache expiration for logs', async () => {\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{id}/logs'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      // First call\n      await template.load({ id: 'exec-123' });\n      expect(mockClient.getExecution).toHaveBeenCalledTimes(1);\n\n      // Fast-forward time to expire cache\n      jest.advanceTimersByTime(60);\n\n      // Second call should fetch again\n      await template.load({ id: 'exec-123' });\n      expect(mockClient.getExecution).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle cache expiration for recent executions', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/recent'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      // First call\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(1);\n\n      // Fast-forward time to expire cache\n      jest.advanceTimersByTime(60);\n\n      // Second call should fetch again\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle cache expiration for failed executions', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [mockFailedExecution] });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/failures'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      // First call\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(1);\n\n      // Fast-forward time to expire cache\n      jest.advanceTimersByTime(60);\n\n      // Second call should fetch again\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle cache expiration for execution stats', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });\n\n      const resourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!resourceCall) throw new Error('Resource call not found');\n      const resource = resourceCall[0];\n\n      // First call\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(1);\n\n      // Fast-forward time to expire cache\n      jest.advanceTimersByTime(60);\n\n      // Second call should fetch again\n      await resource.load();\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(2);\n    });\n\n    it('should handle cache expiration for workflow executions', async () => {\n      mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n\n      // First call\n      await template.load({ workflowId: 'workflow-456' });\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(1);\n\n      // Fast-forward time to expire cache\n      jest.advanceTimersByTime(60);\n\n      // Second call should fetch again\n      await template.load({ workflowId: 'workflow-456' });\n      expect(mockClient.getExecutions).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Branch Coverage Edge Cases', () => {\n    beforeEach(() => {\n      jest.clearAllMocks();\n      executionManager = new ExecutionResourceManager();\n      executionManager.register(mockServer, getClientFn);\n    });\n\n    it('should handle executions with conflicting status indicators', async () => {\n      const conflictingExecution = {\n        ...mockExecution,\n        finished: false,\n        stoppedAt: undefined,\n        data: {\n          resultData: {\n            error: {\n              message: 'Test error',\n              stack: 'Error stack trace',\n            },\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(conflictingExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ executionId: 'execution-123' });\n\n      const data = JSON.parse((result as any).text);\n      // Should handle conflicting status gracefully\n      expect(data.execution.finished).toBe(false);\n      expect(data.analysis.status).toBeDefined();\n    });\n\n    it('should handle non-serializable data types in sanitization', async () => {\n      const executionWithComplexData = {\n        ...mockExecution,\n        data: {\n          function: () => 'test',\n          symbol: Symbol('test'),\n          bigint: BigInt(123),\n          password: 'secret123',\n          undefined: undefined,\n          null: null,\n          nested: {\n            password: 'nested-secret',\n            apiKey: 'api-123',\n            token: 'token-456',\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(executionWithComplexData);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ executionId: 'execution-123' });\n\n      const data = JSON.parse((result as any).text);\n      // Should sanitize sensitive data and handle complex types\n      expect(data.execution.data).toBeDefined();\n      expect(JSON.stringify(data)).not.toContain('secret123');\n      expect(JSON.stringify(data)).not.toContain('api-123');\n      expect(JSON.stringify(data)).not.toContain('token-456');\n    });\n\n    it('should handle circular references in execution data logs', async () => {\n      const circularData: any = { message: 'test message' };\n      circularData.self = circularData;\n      circularData.parent = { child: circularData };\n\n      const executionWithCircularData = {\n        ...mockExecution,\n        data: {\n          resultData: {\n            runData: {\n              Node1: [{ data: { main: [[circularData]] } }],\n              Node2: [{ data: { main: [[{ nested: circularData }]] } }],\n            },\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(executionWithCircularData);\n\n      const logsTemplateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}/logs'\n      );\n      if (!logsTemplateCall) throw new Error('Logs template call not found');\n      const logsTemplate = logsTemplateCall[0];\n      const result = await logsTemplate.load({ executionId: 'execution-123' });\n\n      // Should handle circular references without crashing\n      const data = JSON.parse((result as any).text);\n      expect(data.logs).toBeDefined();\n      expect(Array.isArray(data.logs)).toBe(true);\n    });\n\n    it('should handle executions with missing or malformed data properties', async () => {\n      const malformedExecution = {\n        ...mockExecution,\n        id: 'execution-malformed',\n        workflowId: 'workflow-123',\n        finished: false,\n        mode: 'unknown',\n        startedAt: '2023-01-01T10:00:00Z',\n        status: 'unknown' as any,\n        data: undefined,\n      };\n\n      mockClient.getExecutions.mockResolvedValue({ data: [malformedExecution] });\n\n      const statsResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!statsResourceCall) throw new Error('Stats resource call not found');\n      const statsResource = statsResourceCall[0];\n      const result = await statsResource.load();\n\n      const data = JSON.parse((result as any).text);\n      // Should handle missing properties gracefully\n      expect(data.totalExecutions).toBe(1);\n      expect(data.statusDistribution).toBeDefined();\n    });\n\n    it('should handle execution status determination with edge cases', async () => {\n      const edgeCaseExecutions = [\n        {\n          ...mockExecution,\n          id: 'exec-1',\n          finished: true,\n          stoppedAt: '2023-01-01T12:00:00Z',\n          data: { resultData: { error: null } },\n        },\n        {\n          ...mockExecution,\n          id: 'exec-2',\n          finished: false,\n          stoppedAt: '2023-01-01T12:00:00Z', // Stopped but not finished\n          data: undefined,\n        },\n        {\n          ...mockExecution,\n          id: 'exec-3',\n          finished: true,\n          stoppedAt: undefined, // Finished but no stop time\n          data: { resultData: { lastNodeExecuted: 'FinalNode' } },\n        },\n      ];\n\n      mockClient.getExecutions.mockResolvedValue({ data: edgeCaseExecutions });\n\n      const statsResourceCall = mockServer.addResource.mock.calls.find(\n        call => call[0].uri === 'n8n://executions/stats'\n      );\n      if (!statsResourceCall) throw new Error('Stats resource call not found');\n      const statsResource = statsResourceCall[0];\n      const result = await statsResource.load();\n\n      const data = JSON.parse((result as any).text);\n      // Should handle various status combinations\n      expect(data.totalExecutions).toBe(3);\n      expect(data.statusDistribution).toBeDefined();\n      expect(typeof data.averageDuration).toBe('number');\n    });\n\n    it('should handle data truncation for very large execution data', async () => {\n      const largeDataExecution = {\n        ...mockExecution,\n        data: {\n          resultData: {\n            runData: {\n              LargeDataNode: [\n                {\n                  data: {\n                    main: [\n                      [\n                        {\n                          json: {\n                            largeField: 'x'.repeat(10000), // Very large string\n                            normalField: 'normal value',\n                          },\n                        },\n                      ],\n                    ],\n                  },\n                },\n              ],\n            },\n          },\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(largeDataExecution);\n\n      const templateCall = mockServer.addResourceTemplate.mock.calls.find(\n        call => call[0].uriTemplate === 'n8n://executions/{executionId}'\n      );\n      if (!templateCall) throw new Error('Template call not found');\n      const template = templateCall[0];\n      const result = await template.load({ executionId: 'execution-123' });\n\n      const data = JSON.parse((result as any).text);\n      // Should truncate very large data appropriately\n      expect(data.execution.data).toBeDefined();\n\n      // The result should be serializable as JSON (no circular refs or functions)\n      expect(() => JSON.stringify(data)).not.toThrow();\n    });\n  });\n});\n"],"version":3}