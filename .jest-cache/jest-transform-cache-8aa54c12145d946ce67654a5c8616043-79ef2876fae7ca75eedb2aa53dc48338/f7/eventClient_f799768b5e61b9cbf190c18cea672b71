f14d00ee4bd6dca7fe0609e867936196
"use strict";

/* istanbul ignore next */
function cov_k2mhoo43u() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/eventClient.ts";
  var hash = "1b479ea054cef4345c4dad5c7586304e0259a5dd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/eventClient.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 29
        }
      },
      "4": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 17
        },
        end: {
          line: 8,
          column: 34
        }
      },
      "6": {
        start: {
          line: 9,
          column: 21
        },
        end: {
          line: 9,
          column: 59
        }
      },
      "7": {
        start: {
          line: 13,
          column: 20
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "8": {
        start: {
          line: 14,
          column: 18
        },
        end: {
          line: 14,
          column: 23
        }
      },
      "9": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 25
        }
      },
      "10": {
        start: {
          line: 17,
          column: 18
        },
        end: {
          line: 17,
          column: 20
        }
      },
      "11": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 24
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 16
        }
      },
      "13": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "14": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "15": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "16": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 57
        }
      },
      "17": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 36
        }
      },
      "18": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "19": {
        start: {
          line: 39,
          column: 12
        },
        end: {
          line: 39,
          column: 35
        }
      },
      "20": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "21": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 38
        }
      },
      "22": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 45,
          column: 40
        }
      },
      "23": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 37
        }
      },
      "24": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "25": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 53,
          column: 13
        }
      },
      "26": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 52,
          column: 96
        }
      },
      "27": {
        start: {
          line: 52,
          column: 47
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "28": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 33
        }
      },
      "29": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 63,
          column: 9
        }
      },
      "30": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 61
        }
      },
      "31": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 34
        }
      },
      "32": {
        start: {
          line: 70,
          column: 31
        },
        end: {
          line: 70,
          column: 93
        }
      },
      "33": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "34": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 61
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 46
        }
      },
      "36": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 30
        }
      },
      "37": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 89,
          column: 67
        }
      },
      "38": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "39": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 54
        }
      },
      "40": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 52
        }
      },
      "41": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 24
        }
      },
      "42": {
        start: {
          line: 95,
          column: 8
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "43": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 55
        }
      },
      "44": {
        start: {
          line: 107,
          column: 22
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "45": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 37
        }
      },
      "46": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 33
        }
      },
      "47": {
        start: {
          line: 121,
          column: 22
        },
        end: {
          line: 128,
          column: 9
        }
      },
      "48": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 41
        }
      },
      "49": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 38
        }
      },
      "50": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "51": {
        start: {
          line: 137,
          column: 44
        },
        end: {
          line: 140,
          column: 14
        }
      },
      "52": {
        start: {
          line: 141,
          column: 34
        },
        end: {
          line: 141,
          column: 48
        }
      },
      "53": {
        start: {
          line: 142,
          column: 35
        },
        end: {
          line: 142,
          column: 50
        }
      },
      "54": {
        start: {
          line: 144,
          column: 26
        },
        end: {
          line: 144,
          column: 36
        }
      },
      "55": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 145,
          column: 39
        }
      },
      "56": {
        start: {
          line: 146,
          column: 37
        },
        end: {
          line: 146,
          column: 95
        }
      },
      "57": {
        start: {
          line: 146,
          column: 64
        },
        end: {
          line: 146,
          column: 94
        }
      },
      "58": {
        start: {
          line: 147,
          column: 37
        },
        end: {
          line: 147,
          column: 83
        }
      },
      "59": {
        start: {
          line: 147,
          column: 64
        },
        end: {
          line: 147,
          column: 75
        }
      },
      "60": {
        start: {
          line: 148,
          column: 41
        },
        end: {
          line: 148,
          column: 95
        }
      },
      "61": {
        start: {
          line: 148,
          column: 68
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "62": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "63": {
        start: {
          line: 153,
          column: 40
        },
        end: {
          line: 153,
          column: 108
        }
      },
      "64": {
        start: {
          line: 153,
          column: 67
        },
        end: {
          line: 153,
          column: 107
        }
      },
      "65": {
        start: {
          line: 154,
          column: 28
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "66": {
        start: {
          line: 156,
          column: 37
        },
        end: {
          line: 156,
          column: 102
        }
      },
      "67": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 42
        }
      },
      "68": {
        start: {
          line: 161,
          column: 34
        },
        end: {
          line: 161,
          column: 43
        }
      },
      "69": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "70": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 175,
          column: 17
        }
      },
      "71": {
        start: {
          line: 164,
          column: 34
        },
        end: {
          line: 168,
          column: 21
        }
      },
      "72": {
        start: {
          line: 165,
          column: 54
        },
        end: {
          line: 165,
          column: 78
        }
      },
      "73": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 39
        }
      },
      "74": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 173,
          column: 21
        }
      },
      "75": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 172,
          column: 100
        }
      },
      "76": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 62
        }
      },
      "77": {
        start: {
          line: 177,
          column: 33
        },
        end: {
          line: 185,
          column: 29
        }
      },
      "78": {
        start: {
          line: 178,
          column: 39
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "79": {
        start: {
          line: 184,
          column: 32
        },
        end: {
          line: 184,
          column: 59
        }
      },
      "80": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 199,
          column: 14
        }
      },
      "81": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 121
        }
      },
      "82": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 37
        }
      },
      "83": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 41
        }
      },
      "84": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 30
        }
      },
      "85": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 34
        }
      },
      "86": {
        start: {
          line: 228,
          column: 26
        },
        end: {
          line: 228,
          column: 36
        }
      },
      "87": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "88": {
        start: {
          line: 230,
          column: 32
        },
        end: {
          line: 234,
          column: 13
        }
      },
      "89": {
        start: {
          line: 235,
          column: 29
        },
        end: {
          line: 243,
          column: 14
        }
      },
      "90": {
        start: {
          line: 244,
          column: 12
        },
        end: {
          line: 248,
          column: 14
        }
      },
      "91": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 255,
          column: 14
        }
      },
      "92": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 33
        }
      },
      "93": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 71
        }
      },
      "94": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "95": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 33
        }
      },
      "96": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "97": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 96
        }
      },
      "98": {
        start: {
          line: 267,
          column: 47
        },
        end: {
          line: 267,
          column: 63
        }
      },
      "99": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 57
        }
      },
      "100": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "101": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 61
        }
      },
      "102": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 289,
          column: 42
        }
      },
      "103": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 288,
          column: 13
        }
      },
      "104": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 281,
          column: 61
        }
      },
      "105": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 81
        }
      },
      "106": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 89
        }
      },
      "107": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 41
        }
      },
      "108": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 287,
          column: 33
        }
      },
      "109": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 295,
          column: 17
        }
      },
      "110": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 41
        }
      },
      "111": {
        start: {
          line: 298,
          column: 23
        },
        end: {
          line: 298,
          column: 44
        }
      },
      "112": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 30
        }
      },
      "113": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "114": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 37
        }
      },
      "115": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 310,
          column: 9
        }
      },
      "116": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "117": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 61
        }
      },
      "118": {
        start: {
          line: 311,
          column: 8
        },
        end: {
          line: 311,
          column: 34
        }
      },
      "119": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "120": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 316,
          column: 25
        }
      },
      "121": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 325,
          column: 9
        }
      },
      "122": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 324,
          column: 13
        }
      },
      "123": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 323,
          column: 17
        }
      },
      "124": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 322,
          column: 33
        }
      },
      "125": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 20
        }
      },
      "126": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 329,
          column: 48
        }
      },
      "127": {
        start: {
          line: 330,
          column: 8
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "128": {
        start: {
          line: 331,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "129": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 332,
          column: 68
        }
      },
      "130": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 333,
          column: 44
        }
      },
      "131": {
        start: {
          line: 336,
          column: 16
        },
        end: {
          line: 336,
          column: 42
        }
      },
      "132": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 74
        }
      },
      "133": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 340,
          column: 68
        }
      },
      "134": {
        start: {
          line: 343,
          column: 24
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "135": {
        start: {
          line: 347,
          column: 27
        },
        end: {
          line: 347,
          column: 63
        }
      },
      "136": {
        start: {
          line: 348,
          column: 22
        },
        end: {
          line: 348,
          column: 23
        }
      },
      "137": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 379,
          column: 9
        }
      },
      "138": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 378,
          column: 13
        }
      },
      "139": {
        start: {
          line: 351,
          column: 33
        },
        end: {
          line: 359,
          column: 18
        }
      },
      "140": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 362,
          column: 17
        }
      },
      "141": {
        start: {
          line: 361,
          column: 20
        },
        end: {
          line: 361,
          column: 27
        }
      },
      "142": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 369,
          column: 17
        }
      },
      "143": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "144": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 367,
          column: 78
        }
      },
      "145": {
        start: {
          line: 368,
          column: 20
        },
        end: {
          line: 368,
          column: 29
        }
      },
      "146": {
        start: {
          line: 370,
          column: 16
        },
        end: {
          line: 370,
          column: 75
        }
      },
      "147": {
        start: {
          line: 373,
          column: 16
        },
        end: {
          line: 375,
          column: 17
        }
      },
      "148": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 374,
          column: 32
        }
      },
      "149": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 26
        }
      },
      "150": {
        start: {
          line: 377,
          column: 16
        },
        end: {
          line: 377,
          column: 73
        }
      },
      "151": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 383,
          column: 22
        }
      },
      "152": {
        start: {
          line: 383,
          column: 12
        },
        end: {
          line: 383,
          column: 22
        }
      },
      "153": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 395,
          column: 9
        }
      },
      "154": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 65
        }
      },
      "155": {
        start: {
          line: 388,
          column: 36
        },
        end: {
          line: 388,
          column: 103
        }
      },
      "156": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 65
        }
      },
      "157": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 86
        }
      },
      "158": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 26
        }
      },
      "159": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 398,
          column: 77
        }
      },
      "160": {
        start: {
          line: 398,
          column: 38
        },
        end: {
          line: 398,
          column: 75
        }
      },
      "161": {
        start: {
          line: 401,
          column: 0
        },
        end: {
          line: 401,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 19
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 20
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 33
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 41
          },
          end: {
            line: 52,
            column: 42
          }
        },
        loc: {
          start: {
            line: 52,
            column: 47
          },
          end: {
            line: 52,
            column: 63
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 17
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 59
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 44
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 69
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 32
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 88
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 100
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 25
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 106
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 31
          },
          end: {
            line: 131,
            column: 5
          }
        },
        line: 120
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 204,
            column: 5
          }
        },
        line: 135
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 146,
            column: 59
          },
          end: {
            line: 146,
            column: 60
          }
        },
        loc: {
          start: {
            line: 146,
            column: 64
          },
          end: {
            line: 146,
            column: 94
          }
        },
        line: 146
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 147,
            column: 59
          },
          end: {
            line: 147,
            column: 60
          }
        },
        loc: {
          start: {
            line: 147,
            column: 64
          },
          end: {
            line: 147,
            column: 75
          }
        },
        line: 147
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 148,
            column: 63
          },
          end: {
            line: 148,
            column: 64
          }
        },
        loc: {
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 94
          }
        },
        line: 148
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 153,
            column: 62
          },
          end: {
            line: 153,
            column: 63
          }
        },
        loc: {
          start: {
            line: 153,
            column: 67
          },
          end: {
            line: 153,
            column: 107
          }
        },
        line: 153
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 155,
            column: 45
          },
          end: {
            line: 155,
            column: 46
          }
        },
        loc: {
          start: {
            line: 155,
            column: 57
          },
          end: {
            line: 158,
            column: 17
          }
        },
        line: 155
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 162,
            column: 35
          },
          end: {
            line: 162,
            column: 36
          }
        },
        loc: {
          start: {
            line: 162,
            column: 43
          },
          end: {
            line: 176,
            column: 13
          }
        },
        line: 162
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 165,
            column: 49
          },
          end: {
            line: 165,
            column: 50
          }
        },
        loc: {
          start: {
            line: 165,
            column: 54
          },
          end: {
            line: 165,
            column: 78
          }
        },
        line: 165
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 178,
            column: 21
          },
          end: {
            line: 178,
            column: 22
          }
        },
        loc: {
          start: {
            line: 178,
            column: 39
          },
          end: {
            line: 183,
            column: 13
          }
        },
        line: 178
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 184,
            column: 22
          },
          end: {
            line: 184,
            column: 23
          }
        },
        loc: {
          start: {
            line: 184,
            column: 32
          },
          end: {
            line: 184,
            column: 59
          }
        },
        line: 184
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 208,
            column: 5
          }
        },
        loc: {
          start: {
            line: 208,
            column: 21
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 208
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 214,
            column: 5
          }
        },
        loc: {
          start: {
            line: 214,
            column: 25
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 214
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 19
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 220
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 227,
            column: 5
          }
        },
        loc: {
          start: {
            line: 227,
            column: 31
          },
          end: {
            line: 257,
            column: 5
          }
        },
        line: 227
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 22
          },
          end: {
            line: 273,
            column: 5
          }
        },
        line: 259
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 267,
            column: 41
          },
          end: {
            line: 267,
            column: 42
          }
        },
        loc: {
          start: {
            line: 267,
            column: 47
          },
          end: {
            line: 267,
            column: 63
          }
        },
        line: 267
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 274,
            column: 4
          },
          end: {
            line: 274,
            column: 5
          }
        },
        loc: {
          start: {
            line: 274,
            column: 21
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 274
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 278,
            column: 56
          },
          end: {
            line: 278,
            column: 57
          }
        },
        loc: {
          start: {
            line: 278,
            column: 68
          },
          end: {
            line: 289,
            column: 9
          }
        },
        line: 278
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 27
          },
          end: {
            line: 296,
            column: 5
          }
        },
        line: 291
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 293,
            column: 34
          },
          end: {
            line: 293,
            column: 35
          }
        },
        loc: {
          start: {
            line: 293,
            column: 40
          },
          end: {
            line: 295,
            column: 9
          }
        },
        line: 293
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        loc: {
          start: {
            line: 297,
            column: 28
          },
          end: {
            line: 303,
            column: 5
          }
        },
        line: 297
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 300,
            column: 23
          },
          end: {
            line: 300,
            column: 24
          }
        },
        loc: {
          start: {
            line: 300,
            column: 32
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 300
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 304,
            column: 4
          },
          end: {
            line: 304,
            column: 5
          }
        },
        loc: {
          start: {
            line: 304,
            column: 24
          },
          end: {
            line: 312,
            column: 5
          }
        },
        line: 304
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 313,
            column: 4
          },
          end: {
            line: 313,
            column: 5
          }
        },
        loc: {
          start: {
            line: 313,
            column: 38
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 313
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 50
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 328
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 38
          },
          end: {
            line: 380,
            column: 5
          }
        },
        line: 342
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 381,
            column: 4
          },
          end: {
            line: 381,
            column: 5
          }
        },
        loc: {
          start: {
            line: 381,
            column: 27
          },
          end: {
            line: 396,
            column: 5
          }
        },
        line: 381
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 397,
            column: 4
          },
          end: {
            line: 397,
            column: 5
          }
        },
        loc: {
          start: {
            line: 397,
            column: 14
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 397
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 398,
            column: 27
          },
          end: {
            line: 398,
            column: 28
          }
        },
        loc: {
          start: {
            line: 398,
            column: 38
          },
          end: {
            line: 398,
            column: 75
          }
        },
        line: 398
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 12
          },
          end: {
            line: 53,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 51,
            column: 42
          },
          end: {
            line: 51,
            column: 74
          }
        }, {
          start: {
            line: 51,
            column: 78
          },
          end: {
            line: 51,
            column: 80
          }
        }],
        line: 51
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 8
          },
          end: {
            line: 63,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "8": {
        loc: {
          start: {
            line: 112,
            column: 18
          },
          end: {
            line: 112,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 18
          },
          end: {
            line: 112,
            column: 32
          }
        }, {
          start: {
            line: 112,
            column: 36
          },
          end: {
            line: 112,
            column: 44
          }
        }],
        line: 112
      },
      "9": {
        loc: {
          start: {
            line: 125,
            column: 18
          },
          end: {
            line: 125,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 18
          },
          end: {
            line: 125,
            column: 37
          }
        }, {
          start: {
            line: 125,
            column: 41
          },
          end: {
            line: 125,
            column: 55
          }
        }],
        line: 125
      },
      "10": {
        loc: {
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 126,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 22
          },
          end: {
            line: 126,
            column: 45
          }
        }, {
          start: {
            line: 126,
            column: 49
          },
          end: {
            line: 126,
            column: 58
          }
        }],
        line: 126
      },
      "11": {
        loc: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 41
          }
        }, {
          start: {
            line: 127,
            column: 45
          },
          end: {
            line: 127,
            column: 54
          }
        }],
        line: 127
      },
      "12": {
        loc: {
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 68
          },
          end: {
            line: 148,
            column: 78
          }
        }, {
          start: {
            line: 148,
            column: 82
          },
          end: {
            line: 148,
            column: 94
          }
        }],
        line: 148
      },
      "13": {
        loc: {
          start: {
            line: 149,
            column: 32
          },
          end: {
            line: 151,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 150,
            column: 18
          },
          end: {
            line: 150,
            column: 77
          }
        }, {
          start: {
            line: 151,
            column: 18
          },
          end: {
            line: 151,
            column: 21
          }
        }],
        line: 149
      },
      "14": {
        loc: {
          start: {
            line: 153,
            column: 67
          },
          end: {
            line: 153,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 67
          },
          end: {
            line: 153,
            column: 77
          }
        }, {
          start: {
            line: 153,
            column: 81
          },
          end: {
            line: 153,
            column: 92
          }
        }, {
          start: {
            line: 153,
            column: 96
          },
          end: {
            line: 153,
            column: 107
          }
        }],
        line: 153
      },
      "15": {
        loc: {
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 159,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 18
          },
          end: {
            line: 158,
            column: 50
          }
        }, {
          start: {
            line: 159,
            column: 18
          },
          end: {
            line: 159,
            column: 19
          }
        }],
        line: 154
      },
      "16": {
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 175,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 163
      },
      "17": {
        loc: {
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 168,
            column: 21
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 164,
            column: 34
          },
          end: {
            line: 164,
            column: 68
          }
        }, {
          start: {
            line: 164,
            column: 72
          },
          end: {
            line: 168,
            column: 21
          }
        }],
        line: 164
      },
      "18": {
        loc: {
          start: {
            line: 165,
            column: 30
          },
          end: {
            line: 165,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 165,
            column: 30
          },
          end: {
            line: 165,
            column: 85
          }
        }, {
          start: {
            line: 165,
            column: 89
          },
          end: {
            line: 165,
            column: 98
          }
        }],
        line: 165
      },
      "19": {
        loc: {
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 20
          },
          end: {
            line: 173,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "20": {
        loc: {
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 24
          },
          end: {
            line: 170,
            column: 37
          }
        }, {
          start: {
            line: 170,
            column: 41
          },
          end: {
            line: 170,
            column: 55
          }
        }, {
          start: {
            line: 170,
            column: 59
          },
          end: {
            line: 170,
            column: 73
          }
        }],
        line: 170
      },
      "21": {
        loc: {
          start: {
            line: 182,
            column: 25
          },
          end: {
            line: 182,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 182,
            column: 48
          },
          end: {
            line: 182,
            column: 82
          }
        }, {
          start: {
            line: 182,
            column: 85
          },
          end: {
            line: 182,
            column: 86
          }
        }],
        line: 182
      },
      "22": {
        loc: {
          start: {
            line: 202,
            column: 61
          },
          end: {
            line: 202,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 86
          },
          end: {
            line: 202,
            column: 99
          }
        }, {
          start: {
            line: 202,
            column: 102
          },
          end: {
            line: 202,
            column: 117
          }
        }],
        line: 202
      },
      "23": {
        loc: {
          start: {
            line: 242,
            column: 22
          },
          end: {
            line: 242,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 49
          },
          end: {
            line: 242,
            column: 92
          }
        }, {
          start: {
            line: 242,
            column: 95
          },
          end: {
            line: 242,
            column: 104
          }
        }],
        line: 242
      },
      "24": {
        loc: {
          start: {
            line: 242,
            column: 64
          },
          end: {
            line: 242,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 242,
            column: 64
          },
          end: {
            line: 242,
            column: 76
          }
        }, {
          start: {
            line: 242,
            column: 80
          },
          end: {
            line: 242,
            column: 91
          }
        }],
        line: 242
      },
      "25": {
        loc: {
          start: {
            line: 247,
            column: 23
          },
          end: {
            line: 247,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 247,
            column: 46
          }
        }, {
          start: {
            line: 247,
            column: 49
          },
          end: {
            line: 247,
            column: 98
          }
        }],
        line: 247
      },
      "26": {
        loc: {
          start: {
            line: 254,
            column: 23
          },
          end: {
            line: 254,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 254,
            column: 48
          },
          end: {
            line: 254,
            column: 61
          }
        }, {
          start: {
            line: 254,
            column: 64
          },
          end: {
            line: 254,
            column: 79
          }
        }],
        line: 254
      },
      "27": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 271,
            column: 13
          }
        }, {
          start: {
            line: 269,
            column: 17
          },
          end: {
            line: 271,
            column: 13
          }
        }],
        line: 266
      },
      "28": {
        loc: {
          start: {
            line: 266,
            column: 42
          },
          end: {
            line: 266,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 266,
            column: 42
          },
          end: {
            line: 266,
            column: 74
          }
        }, {
          start: {
            line: 266,
            column: 78
          },
          end: {
            line: 266,
            column: 80
          }
        }],
        line: 266
      },
      "29": {
        loc: {
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "30": {
        loc: {
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 12
          },
          end: {
            line: 309,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "31": {
        loc: {
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 307,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 16
          },
          end: {
            line: 307,
            column: 35
          }
        }, {
          start: {
            line: 307,
            column: 39
          },
          end: {
            line: 307,
            column: 77
          }
        }],
        line: 307
      },
      "32": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "33": {
        loc: {
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 12
          },
          end: {
            line: 315,
            column: 57
          }
        }, {
          start: {
            line: 315,
            column: 61
          },
          end: {
            line: 315,
            column: 99
          }
        }],
        line: 315
      },
      "34": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 325,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "35": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 323,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "36": {
        loc: {
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 321,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 321,
            column: 45
          }
        }, {
          start: {
            line: 321,
            column: 49
          },
          end: {
            line: 321,
            column: 80
          }
        }],
        line: 321
      },
      "37": {
        loc: {
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 8
          },
          end: {
            line: 339,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "38": {
        loc: {
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 347,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 347,
            column: 27
          },
          end: {
            line: 347,
            column: 58
          }
        }, {
          start: {
            line: 347,
            column: 62
          },
          end: {
            line: 347,
            column: 63
          }
        }],
        line: 347
      },
      "39": {
        loc: {
          start: {
            line: 358,
            column: 26
          },
          end: {
            line: 358,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 358,
            column: 53
          },
          end: {
            line: 358,
            column: 92
          }
        }, {
          start: {
            line: 358,
            column: 95
          },
          end: {
            line: 358,
            column: 104
          }
        }],
        line: 358
      },
      "40": {
        loc: {
          start: {
            line: 358,
            column: 68
          },
          end: {
            line: 358,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 358,
            column: 68
          },
          end: {
            line: 358,
            column: 80
          }
        }, {
          start: {
            line: 358,
            column: 84
          },
          end: {
            line: 358,
            column: 91
          }
        }],
        line: 358
      },
      "41": {
        loc: {
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 16
          },
          end: {
            line: 362,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "42": {
        loc: {
          start: {
            line: 364,
            column: 16
          },
          end: {
            line: 369,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 16
          },
          end: {
            line: 369,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "43": {
        loc: {
          start: {
            line: 364,
            column: 20
          },
          end: {
            line: 365,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 20
          },
          end: {
            line: 364,
            column: 86
          }
        }, {
          start: {
            line: 365,
            column: 20
          },
          end: {
            line: 365,
            column: 40
          }
        }],
        line: 364
      },
      "44": {
        loc: {
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 16
          },
          end: {
            line: 375,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 373
      },
      "45": {
        loc: {
          start: {
            line: 377,
            column: 33
          },
          end: {
            line: 377,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 377,
            column: 33
          },
          end: {
            line: 377,
            column: 63
          }
        }, {
          start: {
            line: 377,
            column: 67
          },
          end: {
            line: 377,
            column: 71
          }
        }],
        line: 377
      },
      "46": {
        loc: {
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 8
          },
          end: {
            line: 383,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "47": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 395,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 386,
            column: 65
          }
        }, {
          start: {
            line: 387,
            column: 12
          },
          end: {
            line: 390,
            column: 13
          }
        }, {
          start: {
            line: 391,
            column: 12
          },
          end: {
            line: 392,
            column: 86
          }
        }, {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 394,
            column: 26
          }
        }],
        line: 384
      },
      "48": {
        loc: {
          start: {
            line: 392,
            column: 26
          },
          end: {
            line: 392,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 26
          },
          end: {
            line: 392,
            column: 43
          }
        }, {
          start: {
            line: 392,
            column: 47
          },
          end: {
            line: 392,
            column: 58
          }
        }],
        line: 392
      },
      "49": {
        loc: {
          start: {
            line: 392,
            column: 61
          },
          end: {
            line: 392,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 61
          },
          end: {
            line: 392,
            column: 77
          }
        }, {
          start: {
            line: 392,
            column: 81
          },
          end: {
            line: 392,
            column: 83
          }
        }],
        line: 392
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0, 0, 0],
      "48": [0, 0],
      "49": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/eventClient.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/eventClient.ts"],
      sourcesContent: ["import { EventEmitter } from 'events';\nimport { setTimeout, setInterval, clearInterval } from 'timers';\nimport fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\n\nexport interface EventStreamConfig {\n  baseUrl: string;\n  apiKey: string;\n  reconnectInterval?: number;\n  maxReconnectAttempts?: number;\n  enableHeartbeat?: boolean;\n  heartbeatInterval?: number;\n}\n\nexport interface WebhookConfig {\n  url: string;\n  method: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: Record<string, unknown>;\n  authentication?: {\n    type: 'bearer' | 'basic' | 'apikey';\n    token?: string;\n    username?: string;\n    password?: string;\n    apiKeyHeader?: string;\n    apiKeyValue?: string;\n  };\n  retryConfig?: {\n    maxRetries: number;\n    backoffMs: number;\n    retryOnStatusCodes?: number[];\n  };\n}\n\nexport interface EventSubscription {\n  id: string;\n  eventTypes: string[];\n  webhook?: WebhookConfig;\n  filters?: Record<string, unknown>;\n  active: boolean;\n  createdAt: Date;\n  lastTriggered?: Date;\n  successCount: number;\n  errorCount: number;\n}\n\nexport interface EventData {\n  id: string;\n  type: string;\n  timestamp: Date;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n  data: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface AnalyticsEvent {\n  type: 'workflow_execution' | 'user_action' | 'system_event' | 'performance_metric';\n  category: string;\n  action: string;\n  label?: string;\n  value?: number;\n  dimensions?: Record<string, string>;\n  timestamp: Date;\n  sessionId?: string;\n  userId?: string;\n}\n\nexport interface DashboardMetric {\n  id: string;\n  name: string;\n  value: number | string;\n  type: 'counter' | 'gauge' | 'histogram' | 'percentage';\n  unit?: string;\n  description?: string;\n  timestamp: Date;\n  tags?: Record<string, string>;\n  trend?: {\n    direction: 'up' | 'down' | 'stable';\n    percentage: number;\n    period: string;\n  };\n}\n\nexport interface RealtimeStats {\n  activeExecutions: number;\n  totalExecutionsToday: number;\n  successRate: number;\n  averageExecutionTime: number;\n  errorRate: number;\n  activeUsers: number;\n  systemLoad: {\n    cpu: number;\n    memory: number;\n    disk: number;\n  };\n  topWorkflows: Array<{\n    id: string;\n    name: string;\n    executions: number;\n    avgTime: number;\n  }>;\n}\n\nexport class EventClient extends EventEmitter {\n  private client: N8nClient;\n  private config: EventStreamConfig;\n  private subscriptions: Map<string, EventSubscription> = new Map();\n  private isConnected: boolean = false;\n  private reconnectAttempts: number = 0;\n  private heartbeatTimer?: ReturnType<typeof setInterval>;\n  private eventBuffer: EventData[] = [];\n  private analyticsBuffer: AnalyticsEvent[] = [];\n\n  constructor(client: N8nClient, config: EventStreamConfig) {\n    super();\n    this.client = client;\n    this.config = {\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 10,\n      enableHeartbeat: true,\n      heartbeatInterval: 30000,\n      ...config,\n    };\n  }\n\n  /**\n   * Initialize the event streaming connection\n   */\n  async connect(): Promise<void> {\n    try {\n      // Test the connection with a simple API call\n      await this.client.getWorkflows({ limit: 1 });\n      this.isConnected = true;\n      this.reconnectAttempts = 0;\n      this.emit('connected');\n\n      // Start heartbeat if enabled\n      if (this.config.enableHeartbeat) {\n        this.startHeartbeat();\n      }\n\n      // Start processing event buffers\n      this.startEventProcessing();\n    } catch (error) {\n      this.isConnected = false;\n      this.emit('error', error);\n\n      // Attempt reconnection if configured\n      if (this.reconnectAttempts < (this.config.maxReconnectAttempts || 10)) {\n        setTimeout(() => this.reconnect(), this.config.reconnectInterval);\n      }\n    }\n  }\n\n  /**\n   * Disconnect from event streaming\n   */\n  disconnect(): void {\n    this.isConnected = false;\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n    }\n    this.emit('disconnected');\n  }\n\n  /**\n   * Subscribe to specific event types\n   */\n  subscribe(\n    eventTypes: string[],\n    webhook?: WebhookConfig,\n    filters?: Record<string, unknown>\n  ): string {\n    const subscriptionId = `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    const subscription: EventSubscription = {\n      id: subscriptionId,\n      eventTypes,\n      webhook,\n      filters,\n      active: true,\n      createdAt: new Date(),\n      successCount: 0,\n      errorCount: 0,\n    };\n\n    this.subscriptions.set(subscriptionId, subscription);\n    this.emit('subscribed', subscription);\n\n    return subscriptionId;\n  }\n\n  /**\n   * Unsubscribe from events\n   */\n  unsubscribe(subscriptionId: string): boolean {\n    const subscription = this.subscriptions.get(subscriptionId);\n    if (subscription) {\n      this.subscriptions.delete(subscriptionId);\n      this.emit('unsubscribed', subscription);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get all active subscriptions\n   */\n  getSubscriptions(): EventSubscription[] {\n    return Array.from(this.subscriptions.values());\n  }\n\n  /**\n   * Emit a custom event\n   */\n  emitEvent(eventData: Partial<EventData>): void {\n    const event: EventData = {\n      id: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: new Date(),\n      data: {},\n      ...eventData,\n      type: eventData.type || 'custom',\n    };\n\n    this.eventBuffer.push(event);\n    this.processEvent(event);\n  }\n\n  /**\n   * Track analytics event\n   */\n  trackEvent(analyticsEvent: Partial<AnalyticsEvent>): void {\n    const event: AnalyticsEvent = {\n      timestamp: new Date(),\n      dimensions: {},\n      ...analyticsEvent,\n      type: analyticsEvent.type || 'system_event',\n      category: analyticsEvent.category || 'general',\n      action: analyticsEvent.action || 'unknown',\n    };\n\n    this.analyticsBuffer.push(event);\n    this.emit('analytics', event);\n  }\n\n  /**\n   * Get real-time system statistics\n   */\n  async getRealtimeStats(): Promise<RealtimeStats> {\n    try {\n      const [workflows, executions] = await Promise.all([\n        this.client.getWorkflows({ limit: 100 }),\n        this.client.getExecutions({ limit: 100 }),\n      ]);\n\n      const workflowsData = workflows.data;\n      const executionsData = executions.data;\n\n      // Calculate basic metrics\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const todaysExecutions = executionsData.filter(e => new Date(e.startedAt) >= today);\n\n      const activeExecutions = executionsData.filter(e => !e.finished).length;\n      const successfulExecutions = executionsData.filter(e => e.finished && !e.stoppedAt);\n\n      const successRate =\n        executionsData.length > 0\n          ? (successfulExecutions.length / executionsData.length) * 100\n          : 100;\n\n      // Calculate average execution time\n      const completedExecutions = executionsData.filter(\n        e => e.finished && e.startedAt && e.stoppedAt\n      );\n\n      const avgTime =\n        completedExecutions.length > 0\n          ? completedExecutions.reduce((sum, e) => {\n              const duration = new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime();\n              return sum + duration;\n            }, 0) / completedExecutions.length\n          : 0;\n\n      // Get top workflows by execution count\n      const workflowStats = new Map<\n        string,\n        { name: string; executions: number; totalTime: number }\n      >();\n\n      executionsData.forEach(exec => {\n        if (exec.workflowId) {\n          const stats = workflowStats.get(exec.workflowId) || {\n            name: workflowsData.find(w => w.id === exec.workflowId)?.name || 'Unknown',\n            executions: 0,\n            totalTime: 0,\n          };\n\n          stats.executions++;\n          if (exec.finished && exec.startedAt && exec.stoppedAt) {\n            stats.totalTime +=\n              new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime();\n          }\n\n          workflowStats.set(exec.workflowId, stats);\n        }\n      });\n\n      const topWorkflows = Array.from(workflowStats.entries())\n        .map(([id, stats]) => ({\n          id,\n          name: stats.name,\n          executions: stats.executions,\n          avgTime: stats.executions > 0 ? stats.totalTime / stats.executions : 0,\n        }))\n        .sort((a, b) => b.executions - a.executions)\n        .slice(0, 10);\n\n      return {\n        activeExecutions,\n        totalExecutionsToday: todaysExecutions.length,\n        successRate,\n        averageExecutionTime: avgTime,\n        errorRate: 100 - successRate,\n        activeUsers: 1, // This would need actual user session tracking\n        systemLoad: {\n          cpu: Math.random() * 100, // Would be actual system metrics\n          memory: Math.random() * 100,\n          disk: Math.random() * 100,\n        },\n        topWorkflows,\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get realtime stats: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get buffered events\n   */\n  getEventBuffer(): EventData[] {\n    return [...this.eventBuffer];\n  }\n\n  /**\n   * Get analytics buffer\n   */\n  getAnalyticsBuffer(): AnalyticsEvent[] {\n    return [...this.analyticsBuffer];\n  }\n\n  /**\n   * Clear event buffers\n   */\n  clearBuffers(): void {\n    this.eventBuffer = [];\n    this.analyticsBuffer = [];\n  }\n\n  /**\n   * Test webhook configuration\n   */\n  async testWebhook(\n    webhook: WebhookConfig\n  ): Promise<{ success: boolean; responseTime: number; error?: string }> {\n    const startTime = Date.now();\n\n    try {\n      const testPayload = {\n        type: 'webhook_test',\n        timestamp: new Date().toISOString(),\n        data: { test: true },\n      };\n\n      const response = await fetch(webhook.url, {\n        method: webhook.method,\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.buildAuthHeaders(webhook.authentication),\n          ...webhook.headers,\n        },\n        body: webhook.method !== 'GET' ? JSON.stringify(webhook.body || testPayload) : undefined,\n      });\n\n      return {\n        success: response.ok,\n        responseTime: Date.now() - startTime,\n        error: response.ok ? undefined : `HTTP ${response.status}: ${response.statusText}`,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        responseTime: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // Private methods\n\n  private async reconnect(): Promise<void> {\n    this.reconnectAttempts++;\n    this.emit('reconnecting', { attempt: this.reconnectAttempts });\n\n    try {\n      await this.connect();\n    } catch {\n      if (this.reconnectAttempts < (this.config.maxReconnectAttempts || 10)) {\n        setTimeout(() => this.reconnect(), this.config.reconnectInterval);\n      } else {\n        this.emit('maxReconnectAttemptsReached');\n      }\n    }\n  }\n\n  private startHeartbeat(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer);\n    }\n\n    this.heartbeatTimer = setInterval(async () => {\n      try {\n        // Simple heartbeat check\n        await this.client.getWorkflows({ limit: 1 });\n        this.emit('heartbeat', { timestamp: new Date(), healthy: true });\n      } catch (error) {\n        this.emit('heartbeat', { timestamp: new Date(), healthy: false, error });\n        this.isConnected = false;\n        this.reconnect();\n      }\n    }, this.config.heartbeatInterval);\n  }\n\n  private startEventProcessing(): void {\n    // Process events every 1 second\n    setInterval(() => {\n      this.processBufferedEvents();\n    }, 1000);\n  }\n\n  private processBufferedEvents(): void {\n    const events = [...this.eventBuffer];\n    this.eventBuffer = [];\n\n    events.forEach(event => {\n      this.processEvent(event);\n    });\n  }\n\n  private processEvent(event: EventData): void {\n    // Check all subscriptions for matching event types\n    for (const subscription of this.subscriptions.values()) {\n      if (subscription.active && this.eventMatches(event, subscription)) {\n        this.handleSubscription(event, subscription);\n      }\n    }\n\n    this.emit('event', event);\n  }\n\n  private eventMatches(event: EventData, subscription: EventSubscription): boolean {\n    // Check if event type matches\n    if (!subscription.eventTypes.includes(event.type) && !subscription.eventTypes.includes('*')) {\n      return false;\n    }\n\n    // Apply filters if any\n    if (subscription.filters) {\n      for (const [key, value] of Object.entries(subscription.filters)) {\n        if (event.data[key] !== value && event.metadata?.[key] !== value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private async handleSubscription(\n    event: EventData,\n    subscription: EventSubscription\n  ): Promise<void> {\n    subscription.lastTriggered = new Date();\n\n    if (subscription.webhook) {\n      try {\n        await this.sendWebhook(event, subscription.webhook);\n        subscription.successCount++;\n      } catch (error) {\n        subscription.errorCount++;\n        this.emit('webhookError', { subscription, event, error });\n      }\n    }\n\n    this.emit('subscriptionTriggered', { subscription, event });\n  }\n\n  private async sendWebhook(event: EventData, webhook: WebhookConfig): Promise<void> {\n    const payload = {\n      event,\n      timestamp: new Date().toISOString(),\n    };\n\n    const maxRetries = webhook.retryConfig?.maxRetries || 0;\n    let attempt = 0;\n\n    while (attempt <= maxRetries) {\n      try {\n        const response = await fetch(webhook.url, {\n          method: webhook.method,\n          headers: {\n            'Content-Type': 'application/json',\n            ...this.buildAuthHeaders(webhook.authentication),\n            ...webhook.headers,\n          },\n          body: webhook.method !== 'GET' ? JSON.stringify(webhook.body || payload) : undefined,\n        });\n\n        if (response.ok) {\n          return; // Success\n        }\n\n        // Check if we should retry on this status code\n        if (\n          webhook.retryConfig?.retryOnStatusCodes?.includes(response.status) &&\n          attempt < maxRetries\n        ) {\n          attempt++;\n          await this.delay(webhook.retryConfig.backoffMs * attempt);\n          continue;\n        }\n\n        throw new Error(`Webhook failed: HTTP ${response.status}`);\n      } catch (error) {\n        if (attempt === maxRetries) {\n          throw error;\n        }\n        attempt++;\n        await this.delay(webhook.retryConfig?.backoffMs || 1000);\n      }\n    }\n  }\n\n  private buildAuthHeaders(auth?: WebhookConfig['authentication']): Record<string, string> {\n    if (!auth) return {};\n\n    switch (auth.type) {\n      case 'bearer':\n        return { Authorization: `Bearer ${auth.token}` };\n      case 'basic': {\n        const credentials = Buffer.from(`${auth.username}:${auth.password}`).toString('base64');\n        return { Authorization: `Basic ${credentials}` };\n      }\n      case 'apikey':\n        return { [auth.apiKeyHeader || 'X-API-Key']: auth.apiKeyValue || '' };\n      default:\n        return {};\n    }\n  }\n\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1b479ea054cef4345c4dad5c7586304e0259a5dd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_k2mhoo43u = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_k2mhoo43u();
var __importDefault =
/* istanbul ignore next */
(cov_k2mhoo43u().s[0]++,
/* istanbul ignore next */
(cov_k2mhoo43u().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_k2mhoo43u().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_k2mhoo43u().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_k2mhoo43u().f[0]++;
  cov_k2mhoo43u().s[1]++;
  return /* istanbul ignore next */(cov_k2mhoo43u().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_k2mhoo43u().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_k2mhoo43u().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_k2mhoo43u().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_k2mhoo43u().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_k2mhoo43u().s[3]++;
exports.EventClient = void 0;
const events_1 =
/* istanbul ignore next */
(cov_k2mhoo43u().s[4]++, require("events"));
const timers_1 =
/* istanbul ignore next */
(cov_k2mhoo43u().s[5]++, require("timers"));
const node_fetch_1 =
/* istanbul ignore next */
(cov_k2mhoo43u().s[6]++, __importDefault(require("node-fetch")));
class EventClient extends
/* istanbul ignore next */
(events_1.EventEmitter) {
  client;
  config;
  subscriptions =
  /* istanbul ignore next */
  (cov_k2mhoo43u().s[7]++, new Map());
  isConnected =
  /* istanbul ignore next */
  (cov_k2mhoo43u().s[8]++, false);
  reconnectAttempts =
  /* istanbul ignore next */
  (cov_k2mhoo43u().s[9]++, 0);
  heartbeatTimer;
  eventBuffer =
  /* istanbul ignore next */
  (cov_k2mhoo43u().s[10]++, []);
  analyticsBuffer =
  /* istanbul ignore next */
  (cov_k2mhoo43u().s[11]++, []);
  constructor(client, config) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[1]++;
    cov_k2mhoo43u().s[12]++;
    super();
    /* istanbul ignore next */
    cov_k2mhoo43u().s[13]++;
    this.client = client;
    /* istanbul ignore next */
    cov_k2mhoo43u().s[14]++;
    this.config = {
      reconnectInterval: 5000,
      maxReconnectAttempts: 10,
      enableHeartbeat: true,
      heartbeatInterval: 30000,
      ...config
    };
  }
  /**
   * Initialize the event streaming connection
   */
  async connect() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[2]++;
    cov_k2mhoo43u().s[15]++;
    try {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[16]++;
      // Test the connection with a simple API call
      await this.client.getWorkflows({
        limit: 1
      });
      /* istanbul ignore next */
      cov_k2mhoo43u().s[17]++;
      this.isConnected = true;
      /* istanbul ignore next */
      cov_k2mhoo43u().s[18]++;
      this.reconnectAttempts = 0;
      /* istanbul ignore next */
      cov_k2mhoo43u().s[19]++;
      this.emit('connected');
      // Start heartbeat if enabled
      /* istanbul ignore next */
      cov_k2mhoo43u().s[20]++;
      if (this.config.enableHeartbeat) {
        /* istanbul ignore next */
        cov_k2mhoo43u().b[3][0]++;
        cov_k2mhoo43u().s[21]++;
        this.startHeartbeat();
      } else
      /* istanbul ignore next */
      {
        cov_k2mhoo43u().b[3][1]++;
      }
      // Start processing event buffers
      cov_k2mhoo43u().s[22]++;
      this.startEventProcessing();
    } catch (error) {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[23]++;
      this.isConnected = false;
      /* istanbul ignore next */
      cov_k2mhoo43u().s[24]++;
      this.emit('error', error);
      // Attempt reconnection if configured
      /* istanbul ignore next */
      cov_k2mhoo43u().s[25]++;
      if (this.reconnectAttempts < (
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[5][0]++, this.config.maxReconnectAttempts) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[5][1]++, 10))) {
        /* istanbul ignore next */
        cov_k2mhoo43u().b[4][0]++;
        cov_k2mhoo43u().s[26]++;
        (0, timers_1.setTimeout)(() => {
          /* istanbul ignore next */
          cov_k2mhoo43u().f[3]++;
          cov_k2mhoo43u().s[27]++;
          return this.reconnect();
        }, this.config.reconnectInterval);
      } else
      /* istanbul ignore next */
      {
        cov_k2mhoo43u().b[4][1]++;
      }
    }
  }
  /**
   * Disconnect from event streaming
   */
  disconnect() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[4]++;
    cov_k2mhoo43u().s[28]++;
    this.isConnected = false;
    /* istanbul ignore next */
    cov_k2mhoo43u().s[29]++;
    if (this.heartbeatTimer) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[6][0]++;
      cov_k2mhoo43u().s[30]++;
      (0, timers_1.clearInterval)(this.heartbeatTimer);
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[6][1]++;
    }
    cov_k2mhoo43u().s[31]++;
    this.emit('disconnected');
  }
  /**
   * Subscribe to specific event types
   */
  subscribe(eventTypes, webhook, filters) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[5]++;
    const subscriptionId =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[32]++, `sub_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    const subscription =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[33]++, {
      id: subscriptionId,
      eventTypes,
      webhook,
      filters,
      active: true,
      createdAt: new Date(),
      successCount: 0,
      errorCount: 0
    });
    /* istanbul ignore next */
    cov_k2mhoo43u().s[34]++;
    this.subscriptions.set(subscriptionId, subscription);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[35]++;
    this.emit('subscribed', subscription);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[36]++;
    return subscriptionId;
  }
  /**
   * Unsubscribe from events
   */
  unsubscribe(subscriptionId) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[6]++;
    const subscription =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[37]++, this.subscriptions.get(subscriptionId));
    /* istanbul ignore next */
    cov_k2mhoo43u().s[38]++;
    if (subscription) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[7][0]++;
      cov_k2mhoo43u().s[39]++;
      this.subscriptions.delete(subscriptionId);
      /* istanbul ignore next */
      cov_k2mhoo43u().s[40]++;
      this.emit('unsubscribed', subscription);
      /* istanbul ignore next */
      cov_k2mhoo43u().s[41]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[7][1]++;
    }
    cov_k2mhoo43u().s[42]++;
    return false;
  }
  /**
   * Get all active subscriptions
   */
  getSubscriptions() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[7]++;
    cov_k2mhoo43u().s[43]++;
    return Array.from(this.subscriptions.values());
  }
  /**
   * Emit a custom event
   */
  emitEvent(eventData) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[8]++;
    const event =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[44]++, {
      id: `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      timestamp: new Date(),
      data: {},
      ...eventData,
      type:
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[8][0]++, eventData.type) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[8][1]++, 'custom')
    });
    /* istanbul ignore next */
    cov_k2mhoo43u().s[45]++;
    this.eventBuffer.push(event);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[46]++;
    this.processEvent(event);
  }
  /**
   * Track analytics event
   */
  trackEvent(analyticsEvent) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[9]++;
    const event =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[47]++, {
      timestamp: new Date(),
      dimensions: {},
      ...analyticsEvent,
      type:
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[9][0]++, analyticsEvent.type) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[9][1]++, 'system_event'),
      category:
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[10][0]++, analyticsEvent.category) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[10][1]++, 'general'),
      action:
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[11][0]++, analyticsEvent.action) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[11][1]++, 'unknown')
    });
    /* istanbul ignore next */
    cov_k2mhoo43u().s[48]++;
    this.analyticsBuffer.push(event);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[49]++;
    this.emit('analytics', event);
  }
  /**
   * Get real-time system statistics
   */
  async getRealtimeStats() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[10]++;
    cov_k2mhoo43u().s[50]++;
    try {
      const [workflows, executions] =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[51]++, await Promise.all([this.client.getWorkflows({
        limit: 100
      }), this.client.getExecutions({
        limit: 100
      })]));
      const workflowsData =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[52]++, workflows.data);
      const executionsData =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[53]++, executions.data);
      // Calculate basic metrics
      const today =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[54]++, new Date());
      /* istanbul ignore next */
      cov_k2mhoo43u().s[55]++;
      today.setHours(0, 0, 0, 0);
      const todaysExecutions =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[56]++, executionsData.filter(e => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[11]++;
        cov_k2mhoo43u().s[57]++;
        return new Date(e.startedAt) >= today;
      }));
      const activeExecutions =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[58]++, executionsData.filter(e => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[12]++;
        cov_k2mhoo43u().s[59]++;
        return !e.finished;
      }).length);
      const successfulExecutions =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[60]++, executionsData.filter(e => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[13]++;
        cov_k2mhoo43u().s[61]++;
        return /* istanbul ignore next */(cov_k2mhoo43u().b[12][0]++, e.finished) &&
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[12][1]++, !e.stoppedAt);
      }));
      const successRate =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[62]++, executionsData.length > 0 ?
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[13][0]++, successfulExecutions.length / executionsData.length * 100) :
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[13][1]++, 100));
      // Calculate average execution time
      const completedExecutions =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[63]++, executionsData.filter(e => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[14]++;
        cov_k2mhoo43u().s[64]++;
        return /* istanbul ignore next */(cov_k2mhoo43u().b[14][0]++, e.finished) &&
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[14][1]++, e.startedAt) &&
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[14][2]++, e.stoppedAt);
      }));
      const avgTime =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[65]++, completedExecutions.length > 0 ?
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[15][0]++, completedExecutions.reduce((sum, e) => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[15]++;
        const duration =
        /* istanbul ignore next */
        (cov_k2mhoo43u().s[66]++, new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime());
        /* istanbul ignore next */
        cov_k2mhoo43u().s[67]++;
        return sum + duration;
      }, 0) / completedExecutions.length) :
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[15][1]++, 0));
      // Get top workflows by execution count
      const workflowStats =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[68]++, new Map());
      /* istanbul ignore next */
      cov_k2mhoo43u().s[69]++;
      executionsData.forEach(exec => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[16]++;
        cov_k2mhoo43u().s[70]++;
        if (exec.workflowId) {
          /* istanbul ignore next */
          cov_k2mhoo43u().b[16][0]++;
          const stats =
          /* istanbul ignore next */
          (cov_k2mhoo43u().s[71]++,
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[17][0]++, workflowStats.get(exec.workflowId)) ||
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[17][1]++, {
            name:
            /* istanbul ignore next */
            (cov_k2mhoo43u().b[18][0]++, workflowsData.find(w => {
              /* istanbul ignore next */
              cov_k2mhoo43u().f[17]++;
              cov_k2mhoo43u().s[72]++;
              return w.id === exec.workflowId;
            })?.name) ||
            /* istanbul ignore next */
            (cov_k2mhoo43u().b[18][1]++, 'Unknown'),
            executions: 0,
            totalTime: 0
          }));
          /* istanbul ignore next */
          cov_k2mhoo43u().s[73]++;
          stats.executions++;
          /* istanbul ignore next */
          cov_k2mhoo43u().s[74]++;
          if (
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[20][0]++, exec.finished) &&
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[20][1]++, exec.startedAt) &&
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[20][2]++, exec.stoppedAt)) {
            /* istanbul ignore next */
            cov_k2mhoo43u().b[19][0]++;
            cov_k2mhoo43u().s[75]++;
            stats.totalTime += new Date(exec.stoppedAt).getTime() - new Date(exec.startedAt).getTime();
          } else
          /* istanbul ignore next */
          {
            cov_k2mhoo43u().b[19][1]++;
          }
          cov_k2mhoo43u().s[76]++;
          workflowStats.set(exec.workflowId, stats);
        } else
        /* istanbul ignore next */
        {
          cov_k2mhoo43u().b[16][1]++;
        }
      });
      const topWorkflows =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[77]++, Array.from(workflowStats.entries()).map(([id, stats]) => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[18]++;
        cov_k2mhoo43u().s[78]++;
        return {
          id,
          name: stats.name,
          executions: stats.executions,
          avgTime: stats.executions > 0 ?
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[21][0]++, stats.totalTime / stats.executions) :
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[21][1]++, 0)
        };
      }).sort((a, b) => {
        /* istanbul ignore next */
        cov_k2mhoo43u().f[19]++;
        cov_k2mhoo43u().s[79]++;
        return b.executions - a.executions;
      }).slice(0, 10));
      /* istanbul ignore next */
      cov_k2mhoo43u().s[80]++;
      return {
        activeExecutions,
        totalExecutionsToday: todaysExecutions.length,
        successRate,
        averageExecutionTime: avgTime,
        errorRate: 100 - successRate,
        activeUsers: 1,
        // This would need actual user session tracking
        systemLoad: {
          cpu: Math.random() * 100,
          // Would be actual system metrics
          memory: Math.random() * 100,
          disk: Math.random() * 100
        },
        topWorkflows
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[81]++;
      throw new Error(`Failed to get realtime stats: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[22][0]++, error.message) :
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[22][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get buffered events
   */
  getEventBuffer() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[20]++;
    cov_k2mhoo43u().s[82]++;
    return [...this.eventBuffer];
  }
  /**
   * Get analytics buffer
   */
  getAnalyticsBuffer() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[21]++;
    cov_k2mhoo43u().s[83]++;
    return [...this.analyticsBuffer];
  }
  /**
   * Clear event buffers
   */
  clearBuffers() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[22]++;
    cov_k2mhoo43u().s[84]++;
    this.eventBuffer = [];
    /* istanbul ignore next */
    cov_k2mhoo43u().s[85]++;
    this.analyticsBuffer = [];
  }
  /**
   * Test webhook configuration
   */
  async testWebhook(webhook) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[23]++;
    const startTime =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[86]++, Date.now());
    /* istanbul ignore next */
    cov_k2mhoo43u().s[87]++;
    try {
      const testPayload =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[88]++, {
        type: 'webhook_test',
        timestamp: new Date().toISOString(),
        data: {
          test: true
        }
      });
      const response =
      /* istanbul ignore next */
      (cov_k2mhoo43u().s[89]++, await (0, node_fetch_1.default)(webhook.url, {
        method: webhook.method,
        headers: {
          'Content-Type': 'application/json',
          ...this.buildAuthHeaders(webhook.authentication),
          ...webhook.headers
        },
        body: webhook.method !== 'GET' ?
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[23][0]++, JSON.stringify(
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[24][0]++, webhook.body) ||
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[24][1]++, testPayload))) :
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[23][1]++, undefined)
      }));
      /* istanbul ignore next */
      cov_k2mhoo43u().s[90]++;
      return {
        success: response.ok,
        responseTime: Date.now() - startTime,
        error: response.ok ?
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[25][0]++, undefined) :
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[25][1]++, `HTTP ${response.status}: ${response.statusText}`)
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[91]++;
      return {
        success: false,
        responseTime: Date.now() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[26][1]++, 'Unknown error')
      };
    }
  }
  // Private methods
  async reconnect() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[24]++;
    cov_k2mhoo43u().s[92]++;
    this.reconnectAttempts++;
    /* istanbul ignore next */
    cov_k2mhoo43u().s[93]++;
    this.emit('reconnecting', {
      attempt: this.reconnectAttempts
    });
    /* istanbul ignore next */
    cov_k2mhoo43u().s[94]++;
    try {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[95]++;
      await this.connect();
    } catch {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[96]++;
      if (this.reconnectAttempts < (
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[28][0]++, this.config.maxReconnectAttempts) ||
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[28][1]++, 10))) {
        /* istanbul ignore next */
        cov_k2mhoo43u().b[27][0]++;
        cov_k2mhoo43u().s[97]++;
        (0, timers_1.setTimeout)(() => {
          /* istanbul ignore next */
          cov_k2mhoo43u().f[25]++;
          cov_k2mhoo43u().s[98]++;
          return this.reconnect();
        }, this.config.reconnectInterval);
      } else {
        /* istanbul ignore next */
        cov_k2mhoo43u().b[27][1]++;
        cov_k2mhoo43u().s[99]++;
        this.emit('maxReconnectAttemptsReached');
      }
    }
  }
  startHeartbeat() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[26]++;
    cov_k2mhoo43u().s[100]++;
    if (this.heartbeatTimer) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[29][0]++;
      cov_k2mhoo43u().s[101]++;
      (0, timers_1.clearInterval)(this.heartbeatTimer);
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[29][1]++;
    }
    cov_k2mhoo43u().s[102]++;
    this.heartbeatTimer = (0, timers_1.setInterval)(async () => {
      /* istanbul ignore next */
      cov_k2mhoo43u().f[27]++;
      cov_k2mhoo43u().s[103]++;
      try {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[104]++;
        // Simple heartbeat check
        await this.client.getWorkflows({
          limit: 1
        });
        /* istanbul ignore next */
        cov_k2mhoo43u().s[105]++;
        this.emit('heartbeat', {
          timestamp: new Date(),
          healthy: true
        });
      } catch (error) {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[106]++;
        this.emit('heartbeat', {
          timestamp: new Date(),
          healthy: false,
          error
        });
        /* istanbul ignore next */
        cov_k2mhoo43u().s[107]++;
        this.isConnected = false;
        /* istanbul ignore next */
        cov_k2mhoo43u().s[108]++;
        this.reconnect();
      }
    }, this.config.heartbeatInterval);
  }
  startEventProcessing() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[28]++;
    cov_k2mhoo43u().s[109]++;
    // Process events every 1 second
    (0, timers_1.setInterval)(() => {
      /* istanbul ignore next */
      cov_k2mhoo43u().f[29]++;
      cov_k2mhoo43u().s[110]++;
      this.processBufferedEvents();
    }, 1000);
  }
  processBufferedEvents() {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[30]++;
    const events =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[111]++, [...this.eventBuffer]);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[112]++;
    this.eventBuffer = [];
    /* istanbul ignore next */
    cov_k2mhoo43u().s[113]++;
    events.forEach(event => {
      /* istanbul ignore next */
      cov_k2mhoo43u().f[31]++;
      cov_k2mhoo43u().s[114]++;
      this.processEvent(event);
    });
  }
  processEvent(event) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[32]++;
    cov_k2mhoo43u().s[115]++;
    // Check all subscriptions for matching event types
    for (const subscription of this.subscriptions.values()) {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[31][0]++, subscription.active) &&
      /* istanbul ignore next */
      (cov_k2mhoo43u().b[31][1]++, this.eventMatches(event, subscription))) {
        /* istanbul ignore next */
        cov_k2mhoo43u().b[30][0]++;
        cov_k2mhoo43u().s[117]++;
        this.handleSubscription(event, subscription);
      } else
      /* istanbul ignore next */
      {
        cov_k2mhoo43u().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_k2mhoo43u().s[118]++;
    this.emit('event', event);
  }
  eventMatches(event, subscription) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[33]++;
    cov_k2mhoo43u().s[119]++;
    // Check if event type matches
    if (
    /* istanbul ignore next */
    (cov_k2mhoo43u().b[33][0]++, !subscription.eventTypes.includes(event.type)) &&
    /* istanbul ignore next */
    (cov_k2mhoo43u().b[33][1]++, !subscription.eventTypes.includes('*'))) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[32][0]++;
      cov_k2mhoo43u().s[120]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[32][1]++;
    }
    // Apply filters if any
    cov_k2mhoo43u().s[121]++;
    if (subscription.filters) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[34][0]++;
      cov_k2mhoo43u().s[122]++;
      for (const [key, value] of Object.entries(subscription.filters)) {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[123]++;
        if (
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[36][0]++, event.data[key] !== value) &&
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[36][1]++, event.metadata?.[key] !== value)) {
          /* istanbul ignore next */
          cov_k2mhoo43u().b[35][0]++;
          cov_k2mhoo43u().s[124]++;
          return false;
        } else
        /* istanbul ignore next */
        {
          cov_k2mhoo43u().b[35][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[34][1]++;
    }
    cov_k2mhoo43u().s[125]++;
    return true;
  }
  async handleSubscription(event, subscription) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[34]++;
    cov_k2mhoo43u().s[126]++;
    subscription.lastTriggered = new Date();
    /* istanbul ignore next */
    cov_k2mhoo43u().s[127]++;
    if (subscription.webhook) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[37][0]++;
      cov_k2mhoo43u().s[128]++;
      try {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[129]++;
        await this.sendWebhook(event, subscription.webhook);
        /* istanbul ignore next */
        cov_k2mhoo43u().s[130]++;
        subscription.successCount++;
      } catch (error) {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[131]++;
        subscription.errorCount++;
        /* istanbul ignore next */
        cov_k2mhoo43u().s[132]++;
        this.emit('webhookError', {
          subscription,
          event,
          error
        });
      }
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[37][1]++;
    }
    cov_k2mhoo43u().s[133]++;
    this.emit('subscriptionTriggered', {
      subscription,
      event
    });
  }
  async sendWebhook(event, webhook) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[35]++;
    const payload =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[134]++, {
      event,
      timestamp: new Date().toISOString()
    });
    const maxRetries =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[135]++,
    /* istanbul ignore next */
    (cov_k2mhoo43u().b[38][0]++, webhook.retryConfig?.maxRetries) ||
    /* istanbul ignore next */
    (cov_k2mhoo43u().b[38][1]++, 0));
    let attempt =
    /* istanbul ignore next */
    (cov_k2mhoo43u().s[136]++, 0);
    /* istanbul ignore next */
    cov_k2mhoo43u().s[137]++;
    while (attempt <= maxRetries) {
      /* istanbul ignore next */
      cov_k2mhoo43u().s[138]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_k2mhoo43u().s[139]++, await (0, node_fetch_1.default)(webhook.url, {
          method: webhook.method,
          headers: {
            'Content-Type': 'application/json',
            ...this.buildAuthHeaders(webhook.authentication),
            ...webhook.headers
          },
          body: webhook.method !== 'GET' ?
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[39][0]++, JSON.stringify(
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[40][0]++, webhook.body) ||
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[40][1]++, payload))) :
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[39][1]++, undefined)
        }));
        /* istanbul ignore next */
        cov_k2mhoo43u().s[140]++;
        if (response.ok) {
          /* istanbul ignore next */
          cov_k2mhoo43u().b[41][0]++;
          cov_k2mhoo43u().s[141]++;
          return; // Success
        } else
        /* istanbul ignore next */
        {
          cov_k2mhoo43u().b[41][1]++;
        }
        // Check if we should retry on this status code
        cov_k2mhoo43u().s[142]++;
        if (
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[43][0]++, webhook.retryConfig?.retryOnStatusCodes?.includes(response.status)) &&
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[43][1]++, attempt < maxRetries)) {
          /* istanbul ignore next */
          cov_k2mhoo43u().b[42][0]++;
          cov_k2mhoo43u().s[143]++;
          attempt++;
          /* istanbul ignore next */
          cov_k2mhoo43u().s[144]++;
          await this.delay(webhook.retryConfig.backoffMs * attempt);
          /* istanbul ignore next */
          cov_k2mhoo43u().s[145]++;
          continue;
        } else
        /* istanbul ignore next */
        {
          cov_k2mhoo43u().b[42][1]++;
        }
        cov_k2mhoo43u().s[146]++;
        throw new Error(`Webhook failed: HTTP ${response.status}`);
      } catch (error) {
        /* istanbul ignore next */
        cov_k2mhoo43u().s[147]++;
        if (attempt === maxRetries) {
          /* istanbul ignore next */
          cov_k2mhoo43u().b[44][0]++;
          cov_k2mhoo43u().s[148]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_k2mhoo43u().b[44][1]++;
        }
        cov_k2mhoo43u().s[149]++;
        attempt++;
        /* istanbul ignore next */
        cov_k2mhoo43u().s[150]++;
        await this.delay(
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[45][0]++, webhook.retryConfig?.backoffMs) ||
        /* istanbul ignore next */
        (cov_k2mhoo43u().b[45][1]++, 1000));
      }
    }
  }
  buildAuthHeaders(auth) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[36]++;
    cov_k2mhoo43u().s[151]++;
    if (!auth) {
      /* istanbul ignore next */
      cov_k2mhoo43u().b[46][0]++;
      cov_k2mhoo43u().s[152]++;
      return {};
    } else
    /* istanbul ignore next */
    {
      cov_k2mhoo43u().b[46][1]++;
    }
    cov_k2mhoo43u().s[153]++;
    switch (auth.type) {
      case 'bearer':
        /* istanbul ignore next */
        cov_k2mhoo43u().b[47][0]++;
        cov_k2mhoo43u().s[154]++;
        return {
          Authorization: `Bearer ${auth.token}`
        };
      case 'basic':
        /* istanbul ignore next */
        cov_k2mhoo43u().b[47][1]++;
        {
          const credentials =
          /* istanbul ignore next */
          (cov_k2mhoo43u().s[155]++, Buffer.from(`${auth.username}:${auth.password}`).toString('base64'));
          /* istanbul ignore next */
          cov_k2mhoo43u().s[156]++;
          return {
            Authorization: `Basic ${credentials}`
          };
        }
      case 'apikey':
        /* istanbul ignore next */
        cov_k2mhoo43u().b[47][2]++;
        cov_k2mhoo43u().s[157]++;
        return {
          [
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[48][0]++, auth.apiKeyHeader) ||
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[48][1]++, 'X-API-Key')]:
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[49][0]++, auth.apiKeyValue) ||
          /* istanbul ignore next */
          (cov_k2mhoo43u().b[49][1]++, '')
        };
      default:
        /* istanbul ignore next */
        cov_k2mhoo43u().b[47][3]++;
        cov_k2mhoo43u().s[158]++;
        return {};
    }
  }
  delay(ms) {
    /* istanbul ignore next */
    cov_k2mhoo43u().f[37]++;
    cov_k2mhoo43u().s[159]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_k2mhoo43u().f[38]++;
      cov_k2mhoo43u().s[160]++;
      return (0, timers_1.setTimeout)(resolve, ms);
    });
  }
}
/* istanbul ignore next */
cov_k2mhoo43u().s[161]++;
exports.EventClient = EventClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,