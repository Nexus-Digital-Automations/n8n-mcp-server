77451aa4dba876db7f87a5026ee43f35
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock FastMCP
globals_1.jest.mock('fastmcp');
const middleware_1 = require("../../../src/auth/middleware");
// Mock AuthProvider for testing
class MockAuthProvider {
    shouldAuthenticate;
    mockUser;
    allowedTools;
    allowedResources;
    constructor(shouldAuthenticate = true, mockUser = null, allowedTools = [], allowedResources = []) {
        this.shouldAuthenticate = shouldAuthenticate;
        this.mockUser = mockUser || {
            id: 'test-user',
            name: 'Test User',
            email: 'test@example.com',
            roles: ['member'],
            permissions: {
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            },
        };
        this.allowedTools = new Set(allowedTools);
        this.allowedResources = new Set(allowedResources);
    }
    async authenticate(context) {
        if (!this.shouldAuthenticate) {
            return {
                success: false,
                error: 'Authentication failed',
            };
        }
        return {
            success: true,
            user: this.mockUser || undefined,
            context: {
                authType: 'mock',
            },
        };
    }
    async canAccessTool(toolName, context) {
        return this.allowedTools.has(toolName) || this.allowedTools.has('*');
    }
    async canAccessResource(resourceUri, context) {
        return this.allowedResources.has(resourceUri) || this.allowedResources.has('*');
    }
    async refresh(context) {
        return this.authenticate(context);
    }
}
(0, globals_1.describe)('FastMCPAuthMiddleware', () => {
    let mockAuthProvider;
    let mockServer;
    let middleware;
    (0, globals_1.beforeEach)(() => {
        mockAuthProvider = new MockAuthProvider(true, null, ['*'], ['*']);
        mockServer = {
            addTool: globals_1.jest.fn(),
            // Add other FastMCP methods as needed
        };
        middleware = new middleware_1.FastMCPAuthMiddleware({
            authProvider: mockAuthProvider,
        });
    });
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
            });
            (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                requireAuth: true,
                publicTools: ['custom-tool'],
                publicResources: ['custom://resource'],
                authHeader: 'x-custom-auth',
                authErrorMessage: 'Custom auth error',
                authzErrorMessage: 'Custom authz error',
            });
            (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
        });
    });
    (0, globals_1.describe)('apply', () => {
        (0, globals_1.it)('should apply middleware to FastMCP server', () => {
            const consoleSpy = globals_1.jest.spyOn(console, 'log').mockImplementation(() => { });
            middleware.apply(mockServer);
            (0, globals_1.expect)(consoleSpy).toHaveBeenCalledWith('🔐 Authentication middleware configured (tool-level implementation)');
            (0, globals_1.expect)(mockServer._authMiddleware).toBe(middleware);
            consoleSpy.mockRestore();
        });
    });
    (0, globals_1.describe)('checkToolAccess', () => {
        (0, globals_1.it)('should allow access to public tools without authentication', async () => {
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('init-n8n', context)).resolves.not.toThrow();
            await (0, globals_1.expect)(middleware.checkToolAccess('status', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should authenticate and check tool access for non-public tools', async () => {
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should throw error when authentication fails for protected tools', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).rejects.toThrow('Authentication required');
        });
        (0, globals_1.it)('should throw error when tool access is denied', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, []); // No tools allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).rejects.toThrow('Access denied: list-workflows');
        });
        (0, globals_1.it)('should allow anonymous access when auth not required', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: false,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should use existing authenticated user if available', async () => {
            const mockUser = {
                id: 'existing-user',
                roles: ['member'],
                permissions: {
                    community: true,
                    enterprise: false,
                    workflows: true,
                    executions: true,
                    credentials: false,
                    users: false,
                    audit: false,
                },
            };
            const context = {
                clientId: 'test-client',
                headers: {},
                user: mockUser,
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('checkResourceAccess', () => {
        (0, globals_1.it)('should allow access to public resources without authentication', async () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                publicResources: ['public://resource'],
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('public://resource', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should authenticate and check resource access for non-public resources', async () => {
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should throw error when authentication fails for protected resources', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).rejects.toThrow('Authentication required');
        });
        (0, globals_1.it)('should throw error when resource access is denied', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, ['*'], []); // No resources allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).rejects.toThrow('Access denied: n8n://workflows/123');
        });
        (0, globals_1.it)('should handle resource pattern matching', async () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                publicResources: ['n8n://public'],
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://public/resource', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should use existing authenticated user if available', async () => {
            const mockUser = {
                id: 'existing-user',
                roles: ['member'],
                permissions: {
                    community: true,
                    enterprise: false,
                    workflows: true,
                    executions: true,
                    credentials: false,
                    users: false,
                    audit: false,
                },
            };
            const context = {
                clientId: 'test-client',
                headers: {},
                user: mockUser,
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('wrapTool', () => {
        (0, globals_1.it)('should wrap tool function with authentication', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [{ data: 'test' }, { session: { id: 'session-123' }, headers: {} }];
            const result = await wrappedTool(...args);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...args);
            (0, globals_1.expect)(result).toBe('tool result');
        });
        (0, globals_1.it)('should extract context from function arguments', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [
                { data: 'test' },
                {
                    session: { id: 'session-123' },
                    headers: { authorization: 'Bearer token' },
                    metadata: { userAgent: 'test' },
                },
            ];
            await wrappedTool(...args);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...args);
        });
        (0, globals_1.it)('should handle authentication errors in wrapped tool', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('protected-tool', mockToolFunction);
            const args = [{ data: 'test' }];
            await (0, globals_1.expect)(wrappedTool(...args)).rejects.toThrow('Authentication required');
            (0, globals_1.expect)(mockToolFunction).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('wrapResource', () => {
        (0, globals_1.it)('should wrap resource function with authentication', async () => {
            const mockResourceFunction = globals_1.jest
                .fn()
                .mockResolvedValue('resource result');
            const wrappedResource = middleware.wrapResource('n8n://test-resource', mockResourceFunction);
            const args = [{ data: 'test' }, { session: { id: 'session-123' }, headers: {} }];
            const result = await wrappedResource(...args);
            (0, globals_1.expect)(mockResourceFunction).toHaveBeenCalledWith(...args);
            (0, globals_1.expect)(result).toBe('resource result');
        });
        (0, globals_1.it)('should handle authentication errors in wrapped resource', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const mockResourceFunction = globals_1.jest
                .fn()
                .mockResolvedValue('resource result');
            const wrappedResource = middleware.wrapResource('n8n://protected-resource', mockResourceFunction);
            const args = [{ data: 'test' }];
            await (0, globals_1.expect)(wrappedResource(...args)).rejects.toThrow('Authentication required');
            (0, globals_1.expect)(mockResourceFunction).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('context extraction', () => {
        (0, globals_1.it)('should extract context from arguments with session', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [
                { data: 'test' },
                {
                    session: { id: 'session-123' },
                    headers: { authorization: 'Bearer token' },
                    metadata: { userAgent: 'test-client' },
                },
            ];
            // This will internally call extractContextFromArgs
            await wrappedTool(...args).catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle arguments without session', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [{ data: 'test' }, { notASession: true }];
            // This will internally call extractContextFromArgs
            await wrappedTool(...args).catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle empty arguments', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            // This will internally call extractContextFromArgs
            await wrappedTool().catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('error handling and edge cases', () => {
        (0, globals_1.it)('should handle custom error messages', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
                authErrorMessage: 'Custom authentication error',
                authzErrorMessage: 'Custom authorization error',
            });
            const context = { headers: {} };
            await (0, globals_1.expect)(middleware.checkToolAccess('protected-tool', context)).rejects.toThrow('Custom authentication error');
        });
        (0, globals_1.it)('should handle authorization errors with custom messages', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, []); // No tools allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
                authzErrorMessage: 'Custom authorization error',
            });
            const context = {
                headers: { authorization: 'Bearer token' },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('restricted-tool', context)).rejects.toThrow('Custom authorization error: restricted-tool');
        });
        (0, globals_1.it)('should handle null/undefined context gracefully', async () => {
            const mockToolFunction = globals_1.jest.fn().mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            // Should not throw an error even with no proper context
            await (0, globals_1.expect)(wrappedTool()).resolves.toBe('result');
        });
        (0, globals_1.it)('should handle complex argument structures', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const complexArgs = [
                { param1: 'value1' },
                { param2: 'value2' },
                {
                    session: { id: 'session-123', data: { nested: 'value' } },
                    headers: { 'custom-header': 'value' },
                    metadata: { timestamp: Date.now() },
                },
            ];
            await wrappedTool(...complexArgs);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...complexArgs);
        });
        (0, globals_1.it)('should allow anonymous resource access when auth fails and not required', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: false, // Auth not required
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            // Should not throw error for anonymous access to protected resource
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://protected-resource', context)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('private method coverage', () => {
        (0, globals_1.describe)('createAuthenticateFunction', () => {
            (0, globals_1.it)('should create authentication function that handles successful auth', async () => {
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: mockAuthProvider,
                });
                // Access the private method via type assertion
                const authFunction = middleware.createAuthenticateFunction();
                const mockRequest = {
                    clientId: 'test-client',
                    headers: { authorization: 'Bearer token' },
                    metadata: { userAgent: 'test' },
                };
                const result = await authFunction(mockRequest);
                (0, globals_1.expect)(result).toBeDefined();
            });
            (0, globals_1.it)('should create authentication function that handles auth failure with requireAuth=true', async () => {
                const failingAuthProvider = new MockAuthProvider(false);
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: failingAuthProvider,
                    requireAuth: true,
                    authErrorMessage: 'Authentication required',
                });
                const authFunction = middleware.createAuthenticateFunction();
                const mockRequest = {
                    clientId: 'test-client',
                    headers: {},
                };
                await (0, globals_1.expect)(authFunction(mockRequest)).rejects.toThrow('Authentication required');
            });
            (0, globals_1.it)('should create authentication function that allows anonymous access when requireAuth=false', async () => {
                const failingAuthProvider = new MockAuthProvider(false);
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: failingAuthProvider,
                    requireAuth: false,
                });
                const authFunction = middleware.createAuthenticateFunction();
                const mockRequest = {
                    clientId: 'test-client',
                    headers: {},
                };
                const result = await authFunction(mockRequest);
                (0, globals_1.expect)(result).toBeNull();
            });
            (0, globals_1.it)('should create authentication function that handles exceptions with requireAuth=true', async () => {
                const throwingAuthProvider = {
                    authenticate: globals_1.jest.fn().mockRejectedValue(new Error('Network error')),
                    canAccessTool: globals_1.jest.fn().mockResolvedValue(false),
                    canAccessResource: globals_1.jest.fn().mockResolvedValue(false),
                    refresh: globals_1.jest.fn().mockRejectedValue(new Error('Network error')),
                };
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: throwingAuthProvider,
                    requireAuth: true,
                });
                const authFunction = middleware.createAuthenticateFunction();
                const mockRequest = {
                    clientId: 'test-client',
                    headers: {},
                };
                await (0, globals_1.expect)(authFunction(mockRequest)).rejects.toThrow('Network error');
            });
            (0, globals_1.it)('should create authentication function that handles exceptions with requireAuth=false', async () => {
                const throwingAuthProvider = {
                    authenticate: globals_1.jest.fn().mockRejectedValue(new Error('Network error')),
                    canAccessTool: globals_1.jest.fn().mockResolvedValue(false),
                    canAccessResource: globals_1.jest.fn().mockResolvedValue(false),
                    refresh: globals_1.jest.fn().mockRejectedValue(new Error('Network error')),
                };
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: throwingAuthProvider,
                    requireAuth: false,
                });
                const authFunction = middleware.createAuthenticateFunction();
                const mockRequest = {
                    clientId: 'test-client',
                    headers: {},
                };
                const result = await authFunction(mockRequest);
                (0, globals_1.expect)(result).toBeNull();
            });
        });
        (0, globals_1.describe)('createRequestContext', () => {
            (0, globals_1.it)('should create request context with all fields', () => {
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: mockAuthProvider,
                });
                const mockRequest = {
                    clientId: 'test-client-123',
                    id: 'fallback-id',
                    headers: {
                        authorization: 'Bearer token',
                        'user-agent': 'test-client',
                    },
                    metadata: {
                        timestamp: Date.now(),
                        version: '1.0.0',
                    },
                };
                const context = middleware.createRequestContext(mockRequest);
                (0, globals_1.expect)(context).toEqual({
                    clientId: 'test-client-123',
                    headers: {
                        authorization: 'Bearer token',
                        'user-agent': 'test-client',
                    },
                    metadata: {
                        timestamp: globals_1.expect.any(Number),
                        version: '1.0.0',
                    },
                });
            });
            (0, globals_1.it)('should create request context with fallback clientId', () => {
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: mockAuthProvider,
                });
                const mockRequest = {
                    id: 'fallback-id-456',
                    headers: { authorization: 'Bearer token' },
                    metadata: { test: 'data' },
                };
                const context = middleware.createRequestContext(mockRequest);
                (0, globals_1.expect)(context.clientId).toBe('fallback-id-456');
            });
            (0, globals_1.it)('should create request context with default empty objects', () => {
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: mockAuthProvider,
                });
                const mockRequest = {
                    clientId: 'test-client',
                };
                const context = middleware.createRequestContext(mockRequest);
                (0, globals_1.expect)(context).toEqual({
                    clientId: 'test-client',
                    headers: {},
                    metadata: {},
                });
            });
            (0, globals_1.it)('should handle completely empty request', () => {
                const middleware = new middleware_1.FastMCPAuthMiddleware({
                    authProvider: mockAuthProvider,
                });
                const mockRequest = {};
                const context = middleware.createRequestContext(mockRequest);
                (0, globals_1.expect)(context).toEqual({
                    clientId: undefined,
                    headers: {},
                    metadata: {},
                });
            });
        });
    });
});
(0, globals_1.describe)('createAuthMiddleware', () => {
    (0, globals_1.it)('should create FastMCPAuthMiddleware instance', () => {
        const mockAuthProvider = new MockAuthProvider();
        const middleware = (0, middleware_1.createAuthMiddleware)({
            authProvider: mockAuthProvider,
        });
        (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
    });
    (0, globals_1.it)('should pass configuration to middleware', () => {
        const mockAuthProvider = new MockAuthProvider();
        const config = {
            authProvider: mockAuthProvider,
            requireAuth: true,
            publicTools: ['public-tool'],
        };
        const middleware = (0, middleware_1.createAuthMiddleware)(config);
        (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
    });
});
(0, globals_1.describe)('decorators', () => {
    (0, globals_1.describe)('requireAuth', () => {
        (0, globals_1.it)('should create authentication decorator', () => {
            const decorator = (0, middleware_1.requireAuth)('test-tool');
            (0, globals_1.expect)(typeof decorator).toBe('function');
        });
        (0, globals_1.it)('should apply decorator to methods', async () => {
            const originalMethod = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const mockDescriptor = {
                value: originalMethod,
            };
            const decorator = (0, middleware_1.requireAuth)('test-tool');
            const decoratedDescriptor = decorator({}, 'testMethod', mockDescriptor);
            (0, globals_1.expect)(decoratedDescriptor).toBe(mockDescriptor);
            (0, globals_1.expect)(typeof mockDescriptor.value).toBe('function');
            // Test the decorated method
            const result = await mockDescriptor.value('arg1', 'arg2');
            (0, globals_1.expect)(result).toBe('result');
            (0, globals_1.expect)(originalMethod).toHaveBeenCalledWith('arg1', 'arg2');
        });
    });
    (0, globals_1.describe)('requirePermission', () => {
        (0, globals_1.it)('should create permission decorator', () => {
            const decorator = (0, middleware_1.requirePermission)('workflows');
            (0, globals_1.expect)(typeof decorator).toBe('function');
        });
        (0, globals_1.it)('should apply decorator to methods', async () => {
            const originalMethod = globals_1.jest
                .fn()
                .mockResolvedValue('permission-result');
            const mockDescriptor = {
                value: originalMethod,
            };
            const decorator = (0, middleware_1.requirePermission)('workflows');
            const decoratedDescriptor = decorator({}, 'testMethod', mockDescriptor);
            (0, globals_1.expect)(decoratedDescriptor).toBe(mockDescriptor);
            (0, globals_1.expect)(typeof mockDescriptor.value).toBe('function');
            // Test the decorated method
            const result = await mockDescriptor.value('arg1', 'arg2');
            (0, globals_1.expect)(result).toBe('permission-result');
            (0, globals_1.expect)(originalMethod).toHaveBeenCalledWith('arg1', 'arg2');
        });
    });
});
(0, globals_1.describe)('environment configuration', () => {
    (0, globals_1.describe)('AUTH_ENV_CONFIG', () => {
        (0, globals_1.it)('should define all required environment variable names', () => {
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH).toBe('N8N_MCP_REQUIRE_AUTH');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS).toBe('N8N_MCP_PUBLIC_TOOLS');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.PUBLIC_RESOURCES).toBe('N8N_MCP_PUBLIC_RESOURCES');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTH_HEADER).toBe('N8N_MCP_AUTH_HEADER');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE).toBe('N8N_MCP_AUTH_ERROR_MESSAGE');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE).toBe('N8N_MCP_AUTHZ_ERROR_MESSAGE');
        });
    });
    (0, globals_1.describe)('parseAuthConfigFromEnv', () => {
        let originalEnv;
        (0, globals_1.beforeEach)(() => {
            originalEnv = { ...process.env };
        });
        afterEach(() => {
            process.env = originalEnv;
        });
        (0, globals_1.it)('should parse configuration from environment variables', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = 'true';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS] = 'tool1,tool2,tool3';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_RESOURCES] = 'resource1,resource2';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTH_HEADER] = 'x-custom-auth';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE] = 'Custom auth error';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE] = 'Custom authz error';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.authProvider).toBe(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(true);
            (0, globals_1.expect)(config.publicTools).toEqual(['tool1', 'tool2', 'tool3']);
            (0, globals_1.expect)(config.publicResources).toEqual(['resource1', 'resource2']);
            (0, globals_1.expect)(config.authHeader).toBe('x-custom-auth');
            (0, globals_1.expect)(config.authErrorMessage).toBe('Custom auth error');
            (0, globals_1.expect)(config.authzErrorMessage).toBe('Custom authz error');
        });
        (0, globals_1.it)('should use defaults when environment variables are not set', () => {
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.authProvider).toBe(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
            (0, globals_1.expect)(config.publicTools).toBeUndefined();
            (0, globals_1.expect)(config.publicResources).toBeUndefined();
            (0, globals_1.expect)(config.authHeader).toBeUndefined();
            (0, globals_1.expect)(config.authErrorMessage).toBeUndefined();
            (0, globals_1.expect)(config.authzErrorMessage).toBeUndefined();
        });
        (0, globals_1.it)('should handle empty string environment variables', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = '';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS] = '';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
            (0, globals_1.expect)(config.publicTools).toEqual(['']);
        });
        (0, globals_1.it)('should parse boolean values correctly', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = 'false';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvdGVzdHMvdW5pdC9hdXRoL21pZGRsZXdhcmUudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQUFBLDJDQUF1RTtBQWdCdkUsZUFBZTtBQUNmLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFoQnJCLDZEQU9zQztBQVl0QyxnQ0FBZ0M7QUFDaEMsTUFBTSxnQkFBZ0I7SUFDWixrQkFBa0IsQ0FBVTtJQUM1QixRQUFRLENBQTJCO0lBQ25DLFlBQVksQ0FBYztJQUMxQixnQkFBZ0IsQ0FBYztJQUV0QyxZQUNFLGtCQUFrQixHQUFHLElBQUksRUFDekIsV0FBcUMsSUFBSSxFQUN6QyxlQUF5QixFQUFFLEVBQzNCLG1CQUE2QixFQUFFO1FBRS9CLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztRQUM3QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsSUFBSTtZQUMxQixFQUFFLEVBQUUsV0FBVztZQUNmLElBQUksRUFBRSxXQUFXO1lBQ2pCLEtBQUssRUFBRSxrQkFBa0I7WUFDekIsS0FBSyxFQUFFLENBQUMsUUFBUSxDQUFDO1lBQ2pCLFdBQVcsRUFBRTtnQkFDWCxTQUFTLEVBQUUsSUFBSTtnQkFDZixVQUFVLEVBQUUsS0FBSztnQkFDakIsU0FBUyxFQUFFLElBQUk7Z0JBQ2YsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCLFdBQVcsRUFBRSxLQUFLO2dCQUNsQixLQUFLLEVBQUUsS0FBSztnQkFDWixLQUFLLEVBQUUsS0FBSzthQUNiO1NBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBdUI7UUFDeEMsSUFB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QztZQUN2QyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyx1Q0FBdUMsRUFBRSxHQUFHLEVBQUU7WUFDL0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBZSxDQUFDLFlBQVksQ0FBQyxHQUFHLE9BQU8sQ0FBQztZQUVwRCxNQUFNLGdCQUFnQixHQUFHLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztZQUNoRCxNQUFNLE1BQU0sR0FBRyxJQUFBLG1DQUFzQixFQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFeEQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbXlwYXJrZXIvRGVza3RvcC9DbGF1ZGUgQ29kaW5nIFByb2plY3RzL244bi1tY3Atc2VydmVyL3Rlc3RzL3VuaXQvYXV0aC9taWRkbGV3YXJlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGVzY3JpYmUsIGl0LCBleHBlY3QsIGJlZm9yZUVhY2gsIGplc3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7XG4gIEZhc3RNQ1BBdXRoTWlkZGxld2FyZSxcbiAgY3JlYXRlQXV0aE1pZGRsZXdhcmUsXG4gIHJlcXVpcmVBdXRoLFxuICByZXF1aXJlUGVybWlzc2lvbixcbiAgcGFyc2VBdXRoQ29uZmlnRnJvbUVudixcbiAgQVVUSF9FTlZfQ09ORklHLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvYXV0aC9taWRkbGV3YXJlJztcbmltcG9ydCB7XG4gIEF1dGhQcm92aWRlcixcbiAgUmVxdWVzdENvbnRleHQsXG4gIEF1dGhSZXN1bHQsXG4gIEF1dGhlbnRpY2F0ZWRVc2VyLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvYXV0aC9hdXRoUHJvdmlkZXInO1xuXG4vLyBNb2NrIEZhc3RNQ1Bcbmplc3QubW9jaygnZmFzdG1jcCcpO1xuaW1wb3J0IHsgRmFzdE1DUCB9IGZyb20gJ2Zhc3RtY3AnO1xuXG4vLyBNb2NrIEF1dGhQcm92aWRlciBmb3IgdGVzdGluZ1xuY2xhc3MgTW9ja0F1dGhQcm92aWRlciBpbXBsZW1lbnRzIEF1dGhQcm92aWRlciB7XG4gIHByaXZhdGUgc2hvdWxkQXV0aGVudGljYXRlOiBib29sZWFuO1xuICBwcml2YXRlIG1vY2tVc2VyOiBBdXRoZW50aWNhdGVkVXNlciB8IG51bGw7XG4gIHByaXZhdGUgYWxsb3dlZFRvb2xzOiBTZXQ8c3RyaW5nPjtcbiAgcHJpdmF0ZSBhbGxvd2VkUmVzb3VyY2VzOiBTZXQ8c3RyaW5nPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzaG91bGRBdXRoZW50aWNhdGUgPSB0cnVlLFxuICAgIG1vY2tVc2VyOiBBdXRoZW50aWNhdGVkVXNlciB8IG51bGwgPSBudWxsLFxuICAgIGFsbG93ZWRUb29sczogc3RyaW5nW10gPSBbXSxcbiAgICBhbGxvd2VkUmVzb3VyY2VzOiBzdHJpbmdbXSA9IFtdXG4gICkge1xuICAgIHRoaXMuc2hvdWxkQXV0aGVudGljYXRlID0gc2hvdWxkQXV0aGVudGljYXRlO1xuICAgIHRoaXMubW9ja1VzZXIgPSBtb2NrVXNlciB8fCB7XG4gICAgICBpZDogJ3Rlc3QtdXNlcicsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICByb2xlczogWydtZW1iZXInXSxcbiAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgIGNvbW11bml0eTogdHJ1ZSxcbiAgICAgICAgZW50ZXJwcmlzZTogZmFsc2UsXG4gICAgICAgIHdvcmtmbG93czogdHJ1ZSxcbiAgICAgICAgZXhlY3V0aW9uczogdHJ1ZSxcbiAgICAgICAgY3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICB1c2VyczogZmFsc2UsXG4gICAgICAgIGF1ZGl0OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfTtcbiAgICB0aGlzLmFsbG93ZWRUb29scyA9IG5ldyBTZXQoYWxsb3dlZFRvb2xzKTtcbiAgICB0aGlzLmFsbG93ZWRSZXNvdXJjZXMgPSBuZXcgU2V0KGFsbG93ZWRSZXNvdXJjZXMpO1xuICB9XG5cbiAgYXN5bmMgYXV0aGVudGljYXRlKGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KTogUHJvbWlzZTxBdXRoUmVzdWx0PiB7XG4gICAgaWYgKCF0aGlzLnNob3VsZEF1dGhlbnRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiAnQXV0aGVudGljYXRpb24gZmFpbGVkJyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICB1c2VyOiB0aGlzLm1vY2tVc2VyIHx8IHVuZGVmaW5lZCxcbiAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgYXV0aFR5cGU6ICdtb2NrJyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIGFzeW5jIGNhbkFjY2Vzc1Rvb2wodG9vbE5hbWU6IHN0cmluZywgY29udGV4dDogUmVxdWVzdENvbnRleHQpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5hbGxvd2VkVG9vbHMuaGFzKHRvb2xOYW1lKSB8fCB0aGlzLmFsbG93ZWRUb29scy5oYXMoJyonKTtcbiAgfVxuXG4gIGFzeW5jIGNhbkFjY2Vzc1Jlc291cmNlKHJlc291cmNlVXJpOiBzdHJpbmcsIGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuYWxsb3dlZFJlc291cmNlcy5oYXMocmVzb3VyY2VVcmkpIHx8IHRoaXMuYWxsb3dlZFJlc291cmNlcy5oYXMoJyonKTtcbiAgfVxuXG4gIGFzeW5jIHJlZnJlc2goY29udGV4dDogUmVxdWVzdENvbnRleHQpOiBQcm9taXNlPEF1dGhSZXN1bHQ+IHtcbiAgICByZXR1cm4gdGhpcy5hdXRoZW50aWNhdGUoY29udGV4dCk7XG4gIH1cbn1cblxuZGVzY3JpYmUoJ0Zhc3RNQ1BBdXRoTWlkZGxld2FyZScsICgpID0+IHtcbiAgbGV0IG1vY2tBdXRoUHJvdmlkZXI6IE1vY2tBdXRoUHJvdmlkZXI7XG4gIGxldCBtb2NrU2VydmVyOiBqZXN0Lk1vY2tlZDxGYXN0TUNQPjtcbiAgbGV0IG1pZGRsZXdhcmU6IEZhc3RNQ1BBdXRoTWlkZGxld2FyZTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrQXV0aFByb3ZpZGVyID0gbmV3IE1vY2tBdXRoUHJvdmlkZXIodHJ1ZSwgbnVsbCwgWycqJ10sIFsnKiddKTtcbiAgICBtb2NrU2VydmVyID0ge1xuICAgICAgYWRkVG9vbDogamVzdC5mbigpLFxuICAgICAgLy8gQWRkIG90aGVyIEZhc3RNQ1AgbWV0aG9kcyBhcyBuZWVkZWRcbiAgICB9IGFzIGFueTtcblxuICAgIG1pZGRsZXdhcmUgPSBuZXcgRmFzdE1DUEF1dGhNaWRkbGV3YXJlKHtcbiAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnN0cnVjdG9yJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB3aXRoIGRlZmF1bHQgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBuZXcgRmFzdE1DUEF1dGhNaWRkbGV3YXJlKHtcbiAgICAgICAgYXV0aFByb3ZpZGVyOiBtb2NrQXV0aFByb3ZpZGVyLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtaWRkbGV3YXJlKS50b0JlSW5zdGFuY2VPZihGYXN0TUNQQXV0aE1pZGRsZXdhcmUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHdpdGggY3VzdG9tIGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICAgIHB1YmxpY1Rvb2xzOiBbJ2N1c3RvbS10b29sJ10sXG4gICAgICAgIHB1YmxpY1Jlc291cmNlczogWydjdXN0b206Ly9yZXNvdXJjZSddLFxuICAgICAgICBhdXRoSGVhZGVyOiAneC1jdXN0b20tYXV0aCcsXG4gICAgICAgIGF1dGhFcnJvck1lc3NhZ2U6ICdDdXN0b20gYXV0aCBlcnJvcicsXG4gICAgICAgIGF1dGh6RXJyb3JNZXNzYWdlOiAnQ3VzdG9tIGF1dGh6IGVycm9yJyxcbiAgICAgIH0pO1xuXG4gICAgICBleHBlY3QobWlkZGxld2FyZSkudG9CZUluc3RhbmNlT2YoRmFzdE1DUEF1dGhNaWRkbGV3YXJlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2FwcGx5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgYXBwbHkgbWlkZGxld2FyZSB0byBGYXN0TUNQIHNlcnZlcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuXG4gICAgICBtaWRkbGV3YXJlLmFwcGx5KG1vY2tTZXJ2ZXIpO1xuXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICfwn5SQIEF1dGhlbnRpY2F0aW9uIG1pZGRsZXdhcmUgY29uZmlndXJlZCAodG9vbC1sZXZlbCBpbXBsZW1lbnRhdGlvbiknXG4gICAgICApO1xuICAgICAgZXhwZWN0KChtb2NrU2VydmVyIGFzIGFueSkuX2F1dGhNaWRkbGV3YXJlKS50b0JlKG1pZGRsZXdhcmUpO1xuXG4gICAgICBjb25zb2xlU3B5Lm1vY2tSZXN0b3JlKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjaGVja1Rvb2xBY2Nlc3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBhY2Nlc3MgdG8gcHVibGljIHRvb2xzIHdpdGhvdXQgYXV0aGVudGljYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KG1pZGRsZXdhcmUuY2hlY2tUb29sQWNjZXNzKCdpbml0LW44bicsIGNvbnRleHQpKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgICAgYXdhaXQgZXhwZWN0KG1pZGRsZXdhcmUuY2hlY2tUb29sQWNjZXNzKCdzdGF0dXMnLCBjb250ZXh0KSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgYXV0aGVudGljYXRlIGFuZCBjaGVjayB0b29sIGFjY2VzcyBmb3Igbm9uLXB1YmxpYyB0b29scycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIGF1dGhvcml6YXRpb246ICdCZWFyZXIgdmFsaWQtdG9rZW4nLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KG1pZGRsZXdhcmUuY2hlY2tUb29sQWNjZXNzKCdsaXN0LXdvcmtmbG93cycsIGNvbnRleHQpKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIGF1dGhlbnRpY2F0aW9uIGZhaWxzIGZvciBwcm90ZWN0ZWQgdG9vbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWlsaW5nQXV0aFByb3ZpZGVyID0gbmV3IE1vY2tBdXRoUHJvdmlkZXIoZmFsc2UpO1xuICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICBhdXRoUHJvdmlkZXI6IGZhaWxpbmdBdXRoUHJvdmlkZXIsXG4gICAgICAgIHJlcXVpcmVBdXRoOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QobWlkZGxld2FyZS5jaGVja1Rvb2xBY2Nlc3MoJ2xpc3Qtd29ya2Zsb3dzJywgY29udGV4dCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0F1dGhlbnRpY2F0aW9uIHJlcXVpcmVkJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiB0b29sIGFjY2VzcyBpcyBkZW5pZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN0cmljdGl2ZUF1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKHRydWUsIG51bGwsIFtdKTsgLy8gTm8gdG9vbHMgYWxsb3dlZFxuICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICBhdXRoUHJvdmlkZXI6IHJlc3RyaWN0aXZlQXV0aFByb3ZpZGVyLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIGF1dGhvcml6YXRpb246ICdCZWFyZXIgdmFsaWQtdG9rZW4nLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgYXdhaXQgZXhwZWN0KG1pZGRsZXdhcmUuY2hlY2tUb29sQWNjZXNzKCdsaXN0LXdvcmtmbG93cycsIGNvbnRleHQpKS5yZWplY3RzLnRvVGhyb3coXG4gICAgICAgICdBY2Nlc3MgZGVuaWVkOiBsaXN0LXdvcmtmbG93cydcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IGFub255bW91cyBhY2Nlc3Mgd2hlbiBhdXRoIG5vdCByZXF1aXJlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZhaWxpbmdBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcihmYWxzZSk7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgcmVxdWlyZUF1dGg6IGZhbHNlLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QobWlkZGxld2FyZS5jaGVja1Rvb2xBY2Nlc3MoJ2xpc3Qtd29ya2Zsb3dzJywgY29udGV4dCkpLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHVzZSBleGlzdGluZyBhdXRoZW50aWNhdGVkIHVzZXIgaWYgYXZhaWxhYmxlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1VzZXI6IEF1dGhlbnRpY2F0ZWRVc2VyID0ge1xuICAgICAgICBpZDogJ2V4aXN0aW5nLXVzZXInLFxuICAgICAgICByb2xlczogWydtZW1iZXInXSxcbiAgICAgICAgcGVybWlzc2lvbnM6IHtcbiAgICAgICAgICBjb21tdW5pdHk6IHRydWUsXG4gICAgICAgICAgZW50ZXJwcmlzZTogZmFsc2UsXG4gICAgICAgICAgd29ya2Zsb3dzOiB0cnVlLFxuICAgICAgICAgIGV4ZWN1dGlvbnM6IHRydWUsXG4gICAgICAgICAgY3JlZGVudGlhbHM6IGZhbHNlLFxuICAgICAgICAgIHVzZXJzOiBmYWxzZSxcbiAgICAgICAgICBhdWRpdDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICB1c2VyOiBtb2NrVXNlcixcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChtaWRkbGV3YXJlLmNoZWNrVG9vbEFjY2VzcygnbGlzdC13b3JrZmxvd3MnLCBjb250ZXh0KSkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NoZWNrUmVzb3VyY2VBY2Nlc3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhbGxvdyBhY2Nlc3MgdG8gcHVibGljIHJlc291cmNlcyB3aXRob3V0IGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICBhdXRoUHJvdmlkZXI6IG1vY2tBdXRoUHJvdmlkZXIsXG4gICAgICAgIHB1YmxpY1Jlc291cmNlczogWydwdWJsaWM6Ly9yZXNvdXJjZSddLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0ID0ge1xuICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgaGVhZGVyczoge30sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIG1pZGRsZXdhcmUuY2hlY2tSZXNvdXJjZUFjY2VzcygncHVibGljOi8vcmVzb3VyY2UnLCBjb250ZXh0KVxuICAgICAgKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhdXRoZW50aWNhdGUgYW5kIGNoZWNrIHJlc291cmNlIGFjY2VzcyBmb3Igbm9uLXB1YmxpYyByZXNvdXJjZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBhdXRob3JpemF0aW9uOiAnQmVhcmVyIHZhbGlkLXRva2VuJyxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgbWlkZGxld2FyZS5jaGVja1Jlc291cmNlQWNjZXNzKCduOG46Ly93b3JrZmxvd3MvMTIzJywgY29udGV4dClcbiAgICAgICkucmVzb2x2ZXMubm90LnRvVGhyb3coKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdGhyb3cgZXJyb3Igd2hlbiBhdXRoZW50aWNhdGlvbiBmYWlscyBmb3IgcHJvdGVjdGVkIHJlc291cmNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZhaWxpbmdBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcihmYWxzZSk7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7XG4gICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChtaWRkbGV3YXJlLmNoZWNrUmVzb3VyY2VBY2Nlc3MoJ244bjovL3dvcmtmbG93cy8xMjMnLCBjb250ZXh0KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIHJlc291cmNlIGFjY2VzcyBpcyBkZW5pZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCByZXN0cmljdGl2ZUF1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKHRydWUsIG51bGwsIFsnKiddLCBbXSk7IC8vIE5vIHJlc291cmNlcyBhbGxvd2VkXG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogcmVzdHJpY3RpdmVBdXRoUHJvdmlkZXIsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7XG4gICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgYXV0aG9yaXphdGlvbjogJ0JlYXJlciB2YWxpZC10b2tlbicsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QobWlkZGxld2FyZS5jaGVja1Jlc291cmNlQWNjZXNzKCduOG46Ly93b3JrZmxvd3MvMTIzJywgY29udGV4dCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0FjY2VzcyBkZW5pZWQ6IG44bjovL3dvcmtmbG93cy8xMjMnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcmVzb3VyY2UgcGF0dGVybiBtYXRjaGluZycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBuZXcgRmFzdE1DUEF1dGhNaWRkbGV3YXJlKHtcbiAgICAgICAgYXV0aFByb3ZpZGVyOiBtb2NrQXV0aFByb3ZpZGVyLFxuICAgICAgICBwdWJsaWNSZXNvdXJjZXM6IFsnbjhuOi8vcHVibGljJ10sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7XG4gICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgbWlkZGxld2FyZS5jaGVja1Jlc291cmNlQWNjZXNzKCduOG46Ly9wdWJsaWMvcmVzb3VyY2UnLCBjb250ZXh0KVxuICAgICAgKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB1c2UgZXhpc3RpbmcgYXV0aGVudGljYXRlZCB1c2VyIGlmIGF2YWlsYWJsZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tVc2VyOiBBdXRoZW50aWNhdGVkVXNlciA9IHtcbiAgICAgICAgaWQ6ICdleGlzdGluZy11c2VyJyxcbiAgICAgICAgcm9sZXM6IFsnbWVtYmVyJ10sXG4gICAgICAgIHBlcm1pc3Npb25zOiB7XG4gICAgICAgICAgY29tbXVuaXR5OiB0cnVlLFxuICAgICAgICAgIGVudGVycHJpc2U6IGZhbHNlLFxuICAgICAgICAgIHdvcmtmbG93czogdHJ1ZSxcbiAgICAgICAgICBleGVjdXRpb25zOiB0cnVlLFxuICAgICAgICAgIGNyZWRlbnRpYWxzOiBmYWxzZSxcbiAgICAgICAgICB1c2VyczogZmFsc2UsXG4gICAgICAgICAgYXVkaXQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7XG4gICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgdXNlcjogbW9ja1VzZXIsXG4gICAgICB9O1xuXG4gICAgICBhd2FpdCBleHBlY3QoXG4gICAgICAgIG1pZGRsZXdhcmUuY2hlY2tSZXNvdXJjZUFjY2VzcygnbjhuOi8vd29ya2Zsb3dzLzEyMycsIGNvbnRleHQpXG4gICAgICApLnJlc29sdmVzLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3cmFwVG9vbCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdyYXAgdG9vbCBmdW5jdGlvbiB3aXRoIGF1dGhlbnRpY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Rvb2xGdW5jdGlvbiA9IGplc3RcbiAgICAgICAgLmZuPCguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxzdHJpbmc+PigpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSgndG9vbCByZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgndGVzdC10b29sJywgbW9ja1Rvb2xGdW5jdGlvbik7XG5cbiAgICAgIGNvbnN0IGFyZ3M6IGFueVtdID0gW3sgZGF0YTogJ3Rlc3QnIH0sIHsgc2Vzc2lvbjogeyBpZDogJ3Nlc3Npb24tMTIzJyB9LCBoZWFkZXJzOiB7fSB9XTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHdyYXBwZWRUb29sKC4uLmFyZ3MpO1xuXG4gICAgICBleHBlY3QobW9ja1Rvb2xGdW5jdGlvbikudG9IYXZlQmVlbkNhbGxlZFdpdGgoLi4uYXJncyk7XG4gICAgICBleHBlY3QocmVzdWx0KS50b0JlKCd0b29sIHJlc3VsdCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBleHRyYWN0IGNvbnRleHQgZnJvbSBmdW5jdGlvbiBhcmd1bWVudHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG9vbEZ1bmN0aW9uID0gamVzdFxuICAgICAgICAuZm48KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHN0cmluZz4+KClcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKCd0b29sIHJlc3VsdCcpO1xuICAgICAgY29uc3Qgd3JhcHBlZFRvb2wgPSBtaWRkbGV3YXJlLndyYXBUb29sKCd0ZXN0LXRvb2wnLCBtb2NrVG9vbEZ1bmN0aW9uKTtcblxuICAgICAgY29uc3QgYXJnczogYW55W10gPSBbXG4gICAgICAgIHsgZGF0YTogJ3Rlc3QnIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzZXNzaW9uOiB7IGlkOiAnc2Vzc2lvbi0xMjMnIH0sXG4gICAgICAgICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiAnQmVhcmVyIHRva2VuJyB9LFxuICAgICAgICAgIG1ldGFkYXRhOiB7IHVzZXJBZ2VudDogJ3Rlc3QnIH0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBhd2FpdCB3cmFwcGVkVG9vbCguLi5hcmdzKTtcblxuICAgICAgZXhwZWN0KG1vY2tUb29sRnVuY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKC4uLmFyZ3MpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXV0aGVudGljYXRpb24gZXJyb3JzIGluIHdyYXBwZWQgdG9vbCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZhaWxpbmdBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcihmYWxzZSk7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbW9ja1Rvb2xGdW5jdGlvbiA9IGplc3RcbiAgICAgICAgLmZuPCguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxzdHJpbmc+PigpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSgndG9vbCByZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgncHJvdGVjdGVkLXRvb2wnLCBtb2NrVG9vbEZ1bmN0aW9uKTtcblxuICAgICAgY29uc3QgYXJnczogYW55W10gPSBbeyBkYXRhOiAndGVzdCcgfV07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh3cmFwcGVkVG9vbCguLi5hcmdzKSkucmVqZWN0cy50b1Rocm93KCdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcpO1xuICAgICAgZXhwZWN0KG1vY2tUb29sRnVuY3Rpb24pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCd3cmFwUmVzb3VyY2UnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3cmFwIHJlc291cmNlIGZ1bmN0aW9uIHdpdGggYXV0aGVudGljYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzb3VyY2VGdW5jdGlvbiA9IGplc3RcbiAgICAgICAgLmZuPCguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxzdHJpbmc+PigpXG4gICAgICAgIC5tb2NrUmVzb2x2ZWRWYWx1ZSgncmVzb3VyY2UgcmVzdWx0Jyk7XG4gICAgICBjb25zdCB3cmFwcGVkUmVzb3VyY2UgPSBtaWRkbGV3YXJlLndyYXBSZXNvdXJjZSgnbjhuOi8vdGVzdC1yZXNvdXJjZScsIG1vY2tSZXNvdXJjZUZ1bmN0aW9uKTtcblxuICAgICAgY29uc3QgYXJnczogYW55W10gPSBbeyBkYXRhOiAndGVzdCcgfSwgeyBzZXNzaW9uOiB7IGlkOiAnc2Vzc2lvbi0xMjMnIH0sIGhlYWRlcnM6IHt9IH1dO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgd3JhcHBlZFJlc291cmNlKC4uLmFyZ3MpO1xuXG4gICAgICBleHBlY3QobW9ja1Jlc291cmNlRnVuY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKC4uLmFyZ3MpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncmVzb3VyY2UgcmVzdWx0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBhdXRoZW50aWNhdGlvbiBlcnJvcnMgaW4gd3JhcHBlZCByZXNvdXJjZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGZhaWxpbmdBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcihmYWxzZSk7XG4gICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgbW9ja1Jlc291cmNlRnVuY3Rpb24gPSBqZXN0XG4gICAgICAgIC5mbjwoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8c3RyaW5nPj4oKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUoJ3Jlc291cmNlIHJlc3VsdCcpO1xuICAgICAgY29uc3Qgd3JhcHBlZFJlc291cmNlID0gbWlkZGxld2FyZS53cmFwUmVzb3VyY2UoXG4gICAgICAgICduOG46Ly9wcm90ZWN0ZWQtcmVzb3VyY2UnLFxuICAgICAgICBtb2NrUmVzb3VyY2VGdW5jdGlvblxuICAgICAgKTtcblxuICAgICAgY29uc3QgYXJnczogYW55W10gPSBbeyBkYXRhOiAndGVzdCcgfV07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh3cmFwcGVkUmVzb3VyY2UoLi4uYXJncykpLnJlamVjdHMudG9UaHJvdygnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnKTtcbiAgICAgIGV4cGVjdChtb2NrUmVzb3VyY2VGdW5jdGlvbikubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbnRleHQgZXh0cmFjdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGV4dHJhY3QgY29udGV4dCBmcm9tIGFyZ3VtZW50cyB3aXRoIHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG9vbEZ1bmN0aW9uID0gamVzdFxuICAgICAgICAuZm48KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHN0cmluZz4+KClcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKCdyZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgndGVzdC10b29sJywgbW9ja1Rvb2xGdW5jdGlvbik7XG5cbiAgICAgIGNvbnN0IGFyZ3M6IGFueVtdID0gW1xuICAgICAgICB7IGRhdGE6ICd0ZXN0JyB9LFxuICAgICAgICB7XG4gICAgICAgICAgc2Vzc2lvbjogeyBpZDogJ3Nlc3Npb24tMTIzJyB9LFxuICAgICAgICAgIGhlYWRlcnM6IHsgYXV0aG9yaXphdGlvbjogJ0JlYXJlciB0b2tlbicgfSxcbiAgICAgICAgICBtZXRhZGF0YTogeyB1c2VyQWdlbnQ6ICd0ZXN0LWNsaWVudCcgfSxcbiAgICAgICAgfSxcbiAgICAgIF07XG5cbiAgICAgIC8vIFRoaXMgd2lsbCBpbnRlcm5hbGx5IGNhbGwgZXh0cmFjdENvbnRleHRGcm9tQXJnc1xuICAgICAgYXdhaXQgd3JhcHBlZFRvb2woLi4uYXJncykuY2F0Y2goKCkgPT4ge30pOyAvLyBJZ25vcmUgZXJyb3JzIGZvciB0aGlzIHRlc3RcblxuICAgICAgZXhwZWN0KG1vY2tUb29sRnVuY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGFyZ3VtZW50cyB3aXRob3V0IHNlc3Npb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG9vbEZ1bmN0aW9uID0gamVzdFxuICAgICAgICAuZm48KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHN0cmluZz4+KClcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKCdyZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgndGVzdC10b29sJywgbW9ja1Rvb2xGdW5jdGlvbik7XG5cbiAgICAgIGNvbnN0IGFyZ3M6IGFueVtdID0gW3sgZGF0YTogJ3Rlc3QnIH0sIHsgbm90QVNlc3Npb246IHRydWUgfV07XG5cbiAgICAgIC8vIFRoaXMgd2lsbCBpbnRlcm5hbGx5IGNhbGwgZXh0cmFjdENvbnRleHRGcm9tQXJnc1xuICAgICAgYXdhaXQgd3JhcHBlZFRvb2woLi4uYXJncykuY2F0Y2goKCkgPT4ge30pOyAvLyBJZ25vcmUgZXJyb3JzIGZvciB0aGlzIHRlc3RcblxuICAgICAgZXhwZWN0KG1vY2tUb29sRnVuY3Rpb24pLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGFyZ3VtZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tUb29sRnVuY3Rpb24gPSBqZXN0XG4gICAgICAgIC5mbjwoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8c3RyaW5nPj4oKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUoJ3Jlc3VsdCcpO1xuICAgICAgY29uc3Qgd3JhcHBlZFRvb2wgPSBtaWRkbGV3YXJlLndyYXBUb29sKCd0ZXN0LXRvb2wnLCBtb2NrVG9vbEZ1bmN0aW9uKTtcblxuICAgICAgLy8gVGhpcyB3aWxsIGludGVybmFsbHkgY2FsbCBleHRyYWN0Q29udGV4dEZyb21BcmdzXG4gICAgICBhd2FpdCB3cmFwcGVkVG9vbCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gSWdub3JlIGVycm9ycyBmb3IgdGhpcyB0ZXN0XG5cbiAgICAgIGV4cGVjdChtb2NrVG9vbEZ1bmN0aW9uKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdlcnJvciBoYW5kbGluZyBhbmQgZWRnZSBjYXNlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjdXN0b20gZXJyb3IgbWVzc2FnZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWlsaW5nQXV0aFByb3ZpZGVyID0gbmV3IE1vY2tBdXRoUHJvdmlkZXIoZmFsc2UpO1xuICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICBhdXRoUHJvdmlkZXI6IGZhaWxpbmdBdXRoUHJvdmlkZXIsXG4gICAgICAgIHJlcXVpcmVBdXRoOiB0cnVlLFxuICAgICAgICBhdXRoRXJyb3JNZXNzYWdlOiAnQ3VzdG9tIGF1dGhlbnRpY2F0aW9uIGVycm9yJyxcbiAgICAgICAgYXV0aHpFcnJvck1lc3NhZ2U6ICdDdXN0b20gYXV0aG9yaXphdGlvbiBlcnJvcicsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7IGhlYWRlcnM6IHt9IH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChtaWRkbGV3YXJlLmNoZWNrVG9vbEFjY2VzcygncHJvdGVjdGVkLXRvb2wnLCBjb250ZXh0KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnQ3VzdG9tIGF1dGhlbnRpY2F0aW9uIGVycm9yJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGF1dGhvcml6YXRpb24gZXJyb3JzIHdpdGggY3VzdG9tIG1lc3NhZ2VzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdHJpY3RpdmVBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcih0cnVlLCBudWxsLCBbXSk7IC8vIE5vIHRvb2xzIGFsbG93ZWRcbiAgICAgIGNvbnN0IG1pZGRsZXdhcmUgPSBuZXcgRmFzdE1DUEF1dGhNaWRkbGV3YXJlKHtcbiAgICAgICAgYXV0aFByb3ZpZGVyOiByZXN0cmljdGl2ZUF1dGhQcm92aWRlcixcbiAgICAgICAgYXV0aHpFcnJvck1lc3NhZ2U6ICdDdXN0b20gYXV0aG9yaXphdGlvbiBlcnJvcicsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udGV4dDogUmVxdWVzdENvbnRleHQgPSB7XG4gICAgICAgIGhlYWRlcnM6IHsgYXV0aG9yaXphdGlvbjogJ0JlYXJlciB0b2tlbicgfSxcbiAgICAgIH07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChtaWRkbGV3YXJlLmNoZWNrVG9vbEFjY2VzcygncmVzdHJpY3RlZC10b29sJywgY29udGV4dCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0N1c3RvbSBhdXRob3JpemF0aW9uIGVycm9yOiByZXN0cmljdGVkLXRvb2wnXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbnVsbC91bmRlZmluZWQgY29udGV4dCBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Rvb2xGdW5jdGlvbiA9IGplc3QuZm48KCkgPT4gUHJvbWlzZTxzdHJpbmc+PigpLm1vY2tSZXNvbHZlZFZhbHVlKCdyZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgndGVzdC10b29sJywgbW9ja1Rvb2xGdW5jdGlvbik7XG5cbiAgICAgIC8vIFNob3VsZCBub3QgdGhyb3cgYW4gZXJyb3IgZXZlbiB3aXRoIG5vIHByb3BlciBjb250ZXh0XG4gICAgICBhd2FpdCBleHBlY3Qod3JhcHBlZFRvb2woKSkucmVzb2x2ZXMudG9CZSgncmVzdWx0Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb21wbGV4IGFyZ3VtZW50IHN0cnVjdHVyZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrVG9vbEZ1bmN0aW9uID0gamVzdFxuICAgICAgICAuZm48KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHN0cmluZz4+KClcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKCdyZXN1bHQnKTtcbiAgICAgIGNvbnN0IHdyYXBwZWRUb29sID0gbWlkZGxld2FyZS53cmFwVG9vbCgndGVzdC10b29sJywgbW9ja1Rvb2xGdW5jdGlvbik7XG5cbiAgICAgIGNvbnN0IGNvbXBsZXhBcmdzOiBhbnlbXSA9IFtcbiAgICAgICAgeyBwYXJhbTE6ICd2YWx1ZTEnIH0sXG4gICAgICAgIHsgcGFyYW0yOiAndmFsdWUyJyB9LFxuICAgICAgICB7XG4gICAgICAgICAgc2Vzc2lvbjogeyBpZDogJ3Nlc3Npb24tMTIzJywgZGF0YTogeyBuZXN0ZWQ6ICd2YWx1ZScgfSB9LFxuICAgICAgICAgIGhlYWRlcnM6IHsgJ2N1c3RvbS1oZWFkZXInOiAndmFsdWUnIH0sXG4gICAgICAgICAgbWV0YWRhdGE6IHsgdGltZXN0YW1wOiBEYXRlLm5vdygpIH0sXG4gICAgICAgIH0sXG4gICAgICBdO1xuXG4gICAgICBhd2FpdCB3cmFwcGVkVG9vbCguLi5jb21wbGV4QXJncyk7XG5cbiAgICAgIGV4cGVjdChtb2NrVG9vbEZ1bmN0aW9uKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCguLi5jb21wbGV4QXJncyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFsbG93IGFub255bW91cyByZXNvdXJjZSBhY2Nlc3Mgd2hlbiBhdXRoIGZhaWxzIGFuZCBub3QgcmVxdWlyZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmYWlsaW5nQXV0aFByb3ZpZGVyID0gbmV3IE1vY2tBdXRoUHJvdmlkZXIoZmFsc2UpO1xuICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICBhdXRoUHJvdmlkZXI6IGZhaWxpbmdBdXRoUHJvdmlkZXIsXG4gICAgICAgIHJlcXVpcmVBdXRoOiBmYWxzZSwgLy8gQXV0aCBub3QgcmVxdWlyZWRcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCA9IHtcbiAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgfTtcblxuICAgICAgLy8gU2hvdWxkIG5vdCB0aHJvdyBlcnJvciBmb3IgYW5vbnltb3VzIGFjY2VzcyB0byBwcm90ZWN0ZWQgcmVzb3VyY2VcbiAgICAgIGF3YWl0IGV4cGVjdChcbiAgICAgICAgbWlkZGxld2FyZS5jaGVja1Jlc291cmNlQWNjZXNzKCduOG46Ly9wcm90ZWN0ZWQtcmVzb3VyY2UnLCBjb250ZXh0KVxuICAgICAgKS5yZXNvbHZlcy5ub3QudG9UaHJvdygpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncHJpdmF0ZSBtZXRob2QgY292ZXJhZ2UnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2NyZWF0ZUF1dGhlbnRpY2F0ZUZ1bmN0aW9uJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYXV0aGVudGljYXRpb24gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIHN1Y2Nlc3NmdWwgYXV0aCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gQWNjZXNzIHRoZSBwcml2YXRlIG1ldGhvZCB2aWEgdHlwZSBhc3NlcnRpb25cbiAgICAgICAgY29uc3QgYXV0aEZ1bmN0aW9uID0gKG1pZGRsZXdhcmUgYXMgYW55KS5jcmVhdGVBdXRoZW50aWNhdGVGdW5jdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiAnQmVhcmVyIHRva2VuJyB9LFxuICAgICAgICAgIG1ldGFkYXRhOiB7IHVzZXJBZ2VudDogJ3Rlc3QnIH0sXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXV0aEZ1bmN0aW9uKG1vY2tSZXF1ZXN0KTtcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZURlZmluZWQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhdXRoZW50aWNhdGlvbiBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgYXV0aCBmYWlsdXJlIHdpdGggcmVxdWlyZUF1dGg9dHJ1ZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZmFpbGluZ0F1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgICByZXF1aXJlQXV0aDogdHJ1ZSxcbiAgICAgICAgICBhdXRoRXJyb3JNZXNzYWdlOiAnQXV0aGVudGljYXRpb24gcmVxdWlyZWQnLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhdXRoRnVuY3Rpb24gPSAobWlkZGxld2FyZSBhcyBhbnkpLmNyZWF0ZUF1dGhlbnRpY2F0ZUZ1bmN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgfTtcblxuICAgICAgICBhd2FpdCBleHBlY3QoYXV0aEZ1bmN0aW9uKG1vY2tSZXF1ZXN0KSkucmVqZWN0cy50b1Rocm93KCdBdXRoZW50aWNhdGlvbiByZXF1aXJlZCcpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY3JlYXRlIGF1dGhlbnRpY2F0aW9uIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIGFub255bW91cyBhY2Nlc3Mgd2hlbiByZXF1aXJlQXV0aD1mYWxzZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZmFpbGluZ0F1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKGZhbHNlKTtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogZmFpbGluZ0F1dGhQcm92aWRlcixcbiAgICAgICAgICByZXF1aXJlQXV0aDogZmFsc2UsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGF1dGhGdW5jdGlvbiA9IChtaWRkbGV3YXJlIGFzIGFueSkuY3JlYXRlQXV0aGVudGljYXRlRnVuY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF1dGhGdW5jdGlvbihtb2NrUmVxdWVzdCk7XG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmVOdWxsKCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjcmVhdGUgYXV0aGVudGljYXRpb24gZnVuY3Rpb24gdGhhdCBoYW5kbGVzIGV4Y2VwdGlvbnMgd2l0aCByZXF1aXJlQXV0aD10cnVlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aHJvd2luZ0F1dGhQcm92aWRlciA9IHtcbiAgICAgICAgICBhdXRoZW50aWNhdGU6IGplc3QuZm48KGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KSA9PiBQcm9taXNlPEF1dGhSZXN1bHQ+PigpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKSxcbiAgICAgICAgICBjYW5BY2Nlc3NUb29sOiBqZXN0LmZuPCh0b29sTmFtZTogc3RyaW5nLCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCkgPT4gUHJvbWlzZTxib29sZWFuPj4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSksXG4gICAgICAgICAgY2FuQWNjZXNzUmVzb3VyY2U6IGplc3QuZm48KHJlc291cmNlVXJpOiBzdHJpbmcsIGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KSA9PiBQcm9taXNlPGJvb2xlYW4+PigpLm1vY2tSZXNvbHZlZFZhbHVlKGZhbHNlKSxcbiAgICAgICAgICByZWZyZXNoOiBqZXN0LmZuPChjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCkgPT4gUHJvbWlzZTxBdXRoUmVzdWx0Pj4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogdGhyb3dpbmdBdXRoUHJvdmlkZXIsXG4gICAgICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGF1dGhGdW5jdGlvbiA9IChtaWRkbGV3YXJlIGFzIGFueSkuY3JlYXRlQXV0aGVudGljYXRlRnVuY3Rpb24oKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1vY2tSZXF1ZXN0ID0ge1xuICAgICAgICAgIGNsaWVudElkOiAndGVzdC1jbGllbnQnLFxuICAgICAgICAgIGhlYWRlcnM6IHt9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGF3YWl0IGV4cGVjdChhdXRoRnVuY3Rpb24obW9ja1JlcXVlc3QpKS5yZWplY3RzLnRvVGhyb3coJ05ldHdvcmsgZXJyb3InKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhdXRoZW50aWNhdGlvbiBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgZXhjZXB0aW9ucyB3aXRoIHJlcXVpcmVBdXRoPWZhbHNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCB0aHJvd2luZ0F1dGhQcm92aWRlciA9IHtcbiAgICAgICAgICBhdXRoZW50aWNhdGU6IGplc3QuZm48KGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KSA9PiBQcm9taXNlPEF1dGhSZXN1bHQ+PigpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpKSxcbiAgICAgICAgICBjYW5BY2Nlc3NUb29sOiBqZXN0LmZuPCh0b29sTmFtZTogc3RyaW5nLCBjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCkgPT4gUHJvbWlzZTxib29sZWFuPj4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmYWxzZSksXG4gICAgICAgICAgY2FuQWNjZXNzUmVzb3VyY2U6IGplc3QuZm48KHJlc291cmNlVXJpOiBzdHJpbmcsIGNvbnRleHQ6IFJlcXVlc3RDb250ZXh0KSA9PiBQcm9taXNlPGJvb2xlYW4+PigpLm1vY2tSZXNvbHZlZFZhbHVlKGZhbHNlKSxcbiAgICAgICAgICByZWZyZXNoOiBqZXN0LmZuPChjb250ZXh0OiBSZXF1ZXN0Q29udGV4dCkgPT4gUHJvbWlzZTxBdXRoUmVzdWx0Pj4oKS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKSksXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogdGhyb3dpbmdBdXRoUHJvdmlkZXIsXG4gICAgICAgICAgcmVxdWlyZUF1dGg6IGZhbHNlLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhdXRoRnVuY3Rpb24gPSAobWlkZGxld2FyZSBhcyBhbnkpLmNyZWF0ZUF1dGhlbnRpY2F0ZUZ1bmN0aW9uKCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoRnVuY3Rpb24obW9ja1JlcXVlc3QpO1xuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnY3JlYXRlUmVxdWVzdENvbnRleHQnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSByZXF1ZXN0IGNvbnRleHQgd2l0aCBhbGwgZmllbGRzJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBtaWRkbGV3YXJlID0gbmV3IEZhc3RNQ1BBdXRoTWlkZGxld2FyZSh7XG4gICAgICAgICAgYXV0aFByb3ZpZGVyOiBtb2NrQXV0aFByb3ZpZGVyLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBtb2NrUmVxdWVzdCA9IHtcbiAgICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50LTEyMycsXG4gICAgICAgICAgaWQ6ICdmYWxsYmFjay1pZCcsXG4gICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgYXV0aG9yaXphdGlvbjogJ0JlYXJlciB0b2tlbicsXG4gICAgICAgICAgICAndXNlci1hZ2VudCc6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSAobWlkZGxld2FyZSBhcyBhbnkpLmNyZWF0ZVJlcXVlc3RDb250ZXh0KG1vY2tSZXF1ZXN0KTtcblxuICAgICAgICBleHBlY3QoY29udGV4dCkudG9FcXVhbCh7XG4gICAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudC0xMjMnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIGF1dGhvcml6YXRpb246ICdCZWFyZXIgdG9rZW4nLFxuICAgICAgICAgICAgJ3VzZXItYWdlbnQnOiAndGVzdC1jbGllbnQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMC4wJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSByZXF1ZXN0IGNvbnRleHQgd2l0aCBmYWxsYmFjayBjbGllbnRJZCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgICAgaWQ6ICdmYWxsYmFjay1pZC00NTYnLFxuICAgICAgICAgIGhlYWRlcnM6IHsgYXV0aG9yaXphdGlvbjogJ0JlYXJlciB0b2tlbicgfSxcbiAgICAgICAgICBtZXRhZGF0YTogeyB0ZXN0OiAnZGF0YScgfSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gKG1pZGRsZXdhcmUgYXMgYW55KS5jcmVhdGVSZXF1ZXN0Q29udGV4dChtb2NrUmVxdWVzdCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbnRleHQuY2xpZW50SWQpLnRvQmUoJ2ZhbGxiYWNrLWlkLTQ1NicpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgY3JlYXRlIHJlcXVlc3QgY29udGV4dCB3aXRoIGRlZmF1bHQgZW1wdHkgb2JqZWN0cycsICgpID0+IHtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7XG4gICAgICAgICAgY2xpZW50SWQ6ICd0ZXN0LWNsaWVudCcsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgY29udGV4dCA9IChtaWRkbGV3YXJlIGFzIGFueSkuY3JlYXRlUmVxdWVzdENvbnRleHQobW9ja1JlcXVlc3QpO1xuXG4gICAgICAgIGV4cGVjdChjb250ZXh0KS50b0VxdWFsKHtcbiAgICAgICAgICBjbGllbnRJZDogJ3Rlc3QtY2xpZW50JyxcbiAgICAgICAgICBoZWFkZXJzOiB7fSxcbiAgICAgICAgICBtZXRhZGF0YToge30sXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIGNvbXBsZXRlbHkgZW1wdHkgcmVxdWVzdCcsICgpID0+IHtcbiAgICAgICAgY29uc3QgbWlkZGxld2FyZSA9IG5ldyBGYXN0TUNQQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgICAgIGF1dGhQcm92aWRlcjogbW9ja0F1dGhQcm92aWRlcixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgbW9ja1JlcXVlc3QgPSB7fTtcblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gKG1pZGRsZXdhcmUgYXMgYW55KS5jcmVhdGVSZXF1ZXN0Q29udGV4dChtb2NrUmVxdWVzdCk7XG5cbiAgICAgICAgZXhwZWN0KGNvbnRleHQpLnRvRXF1YWwoe1xuICAgICAgICAgIGNsaWVudElkOiB1bmRlZmluZWQsXG4gICAgICAgICAgaGVhZGVyczoge30sXG4gICAgICAgICAgbWV0YWRhdGE6IHt9LFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnY3JlYXRlQXV0aE1pZGRsZXdhcmUnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgY3JlYXRlIEZhc3RNQ1BBdXRoTWlkZGxld2FyZSBpbnN0YW5jZScsICgpID0+IHtcbiAgICBjb25zdCBtb2NrQXV0aFByb3ZpZGVyID0gbmV3IE1vY2tBdXRoUHJvdmlkZXIoKTtcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gY3JlYXRlQXV0aE1pZGRsZXdhcmUoe1xuICAgICAgYXV0aFByb3ZpZGVyOiBtb2NrQXV0aFByb3ZpZGVyLFxuICAgIH0pO1xuXG4gICAgZXhwZWN0KG1pZGRsZXdhcmUpLnRvQmVJbnN0YW5jZU9mKEZhc3RNQ1BBdXRoTWlkZGxld2FyZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcGFzcyBjb25maWd1cmF0aW9uIHRvIG1pZGRsZXdhcmUnLCAoKSA9PiB7XG4gICAgY29uc3QgbW9ja0F1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKCk7XG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgYXV0aFByb3ZpZGVyOiBtb2NrQXV0aFByb3ZpZGVyLFxuICAgICAgcmVxdWlyZUF1dGg6IHRydWUsXG4gICAgICBwdWJsaWNUb29sczogWydwdWJsaWMtdG9vbCddLFxuICAgIH07XG5cbiAgICBjb25zdCBtaWRkbGV3YXJlID0gY3JlYXRlQXV0aE1pZGRsZXdhcmUoY29uZmlnKTtcblxuICAgIGV4cGVjdChtaWRkbGV3YXJlKS50b0JlSW5zdGFuY2VPZihGYXN0TUNQQXV0aE1pZGRsZXdhcmUpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnZGVjb3JhdG9ycycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3JlcXVpcmVBdXRoJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGF1dGhlbnRpY2F0aW9uIGRlY29yYXRvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGRlY29yYXRvciA9IHJlcXVpcmVBdXRoKCd0ZXN0LXRvb2wnKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgZGVjb3JhdG9yKS50b0JlKCdmdW5jdGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBhcHBseSBkZWNvcmF0b3IgdG8gbWV0aG9kcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG9yaWdpbmFsTWV0aG9kID0gamVzdFxuICAgICAgICAuZm48KC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPHN0cmluZz4+KClcbiAgICAgICAgLm1vY2tSZXNvbHZlZFZhbHVlKCdyZXN1bHQnKTtcbiAgICAgIGNvbnN0IG1vY2tEZXNjcmlwdG9yID0ge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxNZXRob2QsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCBkZWNvcmF0b3IgPSByZXF1aXJlQXV0aCgndGVzdC10b29sJyk7XG4gICAgICBjb25zdCBkZWNvcmF0ZWREZXNjcmlwdG9yID0gZGVjb3JhdG9yKHt9LCAndGVzdE1ldGhvZCcsIG1vY2tEZXNjcmlwdG9yKTtcblxuICAgICAgZXhwZWN0KGRlY29yYXRlZERlc2NyaXB0b3IpLnRvQmUobW9ja0Rlc2NyaXB0b3IpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBtb2NrRGVzY3JpcHRvci52YWx1ZSkudG9CZSgnZnVuY3Rpb24nKTtcblxuICAgICAgLy8gVGVzdCB0aGUgZGVjb3JhdGVkIG1ldGhvZFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9ja0Rlc2NyaXB0b3IudmFsdWUoJ2FyZzEnLCAnYXJnMicpO1xuICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZSgncmVzdWx0Jyk7XG4gICAgICBleHBlY3Qob3JpZ2luYWxNZXRob2QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcmcxJywgJ2FyZzInKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlcXVpcmVQZXJtaXNzaW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIHBlcm1pc3Npb24gZGVjb3JhdG9yJywgKCkgPT4ge1xuICAgICAgY29uc3QgZGVjb3JhdG9yID0gcmVxdWlyZVBlcm1pc3Npb24oJ3dvcmtmbG93cycpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBkZWNvcmF0b3IpLnRvQmUoJ2Z1bmN0aW9uJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFwcGx5IGRlY29yYXRvciB0byBtZXRob2RzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBqZXN0XG4gICAgICAgIC5mbjwoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8c3RyaW5nPj4oKVxuICAgICAgICAubW9ja1Jlc29sdmVkVmFsdWUoJ3Blcm1pc3Npb24tcmVzdWx0Jyk7XG4gICAgICBjb25zdCBtb2NrRGVzY3JpcHRvciA9IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsTWV0aG9kLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgZGVjb3JhdG9yID0gcmVxdWlyZVBlcm1pc3Npb24oJ3dvcmtmbG93cycpO1xuICAgICAgY29uc3QgZGVjb3JhdGVkRGVzY3JpcHRvciA9IGRlY29yYXRvcih7fSwgJ3Rlc3RNZXRob2QnLCBtb2NrRGVzY3JpcHRvcik7XG5cbiAgICAgIGV4cGVjdChkZWNvcmF0ZWREZXNjcmlwdG9yKS50b0JlKG1vY2tEZXNjcmlwdG9yKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgbW9ja0Rlc2NyaXB0b3IudmFsdWUpLnRvQmUoJ2Z1bmN0aW9uJyk7XG5cbiAgICAgIC8vIFRlc3QgdGhlIGRlY29yYXRlZCBtZXRob2RcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG1vY2tEZXNjcmlwdG9yLnZhbHVlKCdhcmcxJywgJ2FyZzInKTtcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUoJ3Blcm1pc3Npb24tcmVzdWx0Jyk7XG4gICAgICBleHBlY3Qob3JpZ2luYWxNZXRob2QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhcmcxJywgJ2FyZzInKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxuZGVzY3JpYmUoJ2Vudmlyb25tZW50IGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdBVVRIX0VOVl9DT05GSUcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBkZWZpbmUgYWxsIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlIG5hbWVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KEFVVEhfRU5WX0NPTkZJRy5SRVFVSVJFX0FVVEgpLnRvQmUoJ044Tl9NQ1BfUkVRVUlSRV9BVVRIJyk7XG4gICAgICBleHBlY3QoQVVUSF9FTlZfQ09ORklHLlBVQkxJQ19UT09MUykudG9CZSgnTjhOX01DUF9QVUJMSUNfVE9PTFMnKTtcbiAgICAgIGV4cGVjdChBVVRIX0VOVl9DT05GSUcuUFVCTElDX1JFU09VUkNFUykudG9CZSgnTjhOX01DUF9QVUJMSUNfUkVTT1VSQ0VTJyk7XG4gICAgICBleHBlY3QoQVVUSF9FTlZfQ09ORklHLkFVVEhfSEVBREVSKS50b0JlKCdOOE5fTUNQX0FVVEhfSEVBREVSJyk7XG4gICAgICBleHBlY3QoQVVUSF9FTlZfQ09ORklHLkFVVEhfRVJST1JfTUVTU0FHRSkudG9CZSgnTjhOX01DUF9BVVRIX0VSUk9SX01FU1NBR0UnKTtcbiAgICAgIGV4cGVjdChBVVRIX0VOVl9DT05GSUcuQVVUSFpfRVJST1JfTUVTU0FHRSkudG9CZSgnTjhOX01DUF9BVVRIWl9FUlJPUl9NRVNTQUdFJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYXJzZUF1dGhDb25maWdGcm9tRW52JywgKCkgPT4ge1xuICAgIGxldCBvcmlnaW5hbEVudjogdHlwZW9mIHByb2Nlc3MuZW52O1xuXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBvcmlnaW5hbEVudiA9IHsgLi4ucHJvY2Vzcy5lbnYgfTtcbiAgICB9KTtcblxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICBwcm9jZXNzLmVudiA9IG9yaWdpbmFsRW52O1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwYXJzZSBjb25maWd1cmF0aW9uIGZyb20gZW52aXJvbm1lbnQgdmFyaWFibGVzJywgKCkgPT4ge1xuICAgICAgcHJvY2Vzcy5lbnZbQVVUSF9FTlZfQ09ORklHLlJFUVVJUkVfQVVUSF0gPSAndHJ1ZSc7XG4gICAgICBwcm9jZXNzLmVudltBVVRIX0VOVl9DT05GSUcuUFVCTElDX1RPT0xTXSA9ICd0b29sMSx0b29sMix0b29sMyc7XG4gICAgICBwcm9jZXNzLmVudltBVVRIX0VOVl9DT05GSUcuUFVCTElDX1JFU09VUkNFU10gPSAncmVzb3VyY2UxLHJlc291cmNlMic7XG4gICAgICBwcm9jZXNzLmVudltBVVRIX0VOVl9DT05GSUcuQVVUSF9IRUFERVJdID0gJ3gtY3VzdG9tLWF1dGgnO1xuICAgICAgcHJvY2Vzcy5lbnZbQVVUSF9FTlZfQ09ORklHLkFVVEhfRVJST1JfTUVTU0FHRV0gPSAnQ3VzdG9tIGF1dGggZXJyb3InO1xuICAgICAgcHJvY2Vzcy5lbnZbQVVUSF9FTlZfQ09ORklHLkFVVEhaX0VSUk9SX01FU1NBR0VdID0gJ0N1c3RvbSBhdXRoeiBlcnJvcic7XG5cbiAgICAgIGNvbnN0IG1vY2tBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcigpO1xuICAgICAgY29uc3QgY29uZmlnID0gcGFyc2VBdXRoQ29uZmlnRnJvbUVudihtb2NrQXV0aFByb3ZpZGVyKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZy5hdXRoUHJvdmlkZXIpLnRvQmUobW9ja0F1dGhQcm92aWRlcik7XG4gICAgICBleHBlY3QoY29uZmlnLnJlcXVpcmVBdXRoKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5wdWJsaWNUb29scykudG9FcXVhbChbJ3Rvb2wxJywgJ3Rvb2wyJywgJ3Rvb2wzJ10pO1xuICAgICAgZXhwZWN0KGNvbmZpZy5wdWJsaWNSZXNvdXJjZXMpLnRvRXF1YWwoWydyZXNvdXJjZTEnLCAncmVzb3VyY2UyJ10pO1xuICAgICAgZXhwZWN0KGNvbmZpZy5hdXRoSGVhZGVyKS50b0JlKCd4LWN1c3RvbS1hdXRoJyk7XG4gICAgICBleHBlY3QoY29uZmlnLmF1dGhFcnJvck1lc3NhZ2UpLnRvQmUoJ0N1c3RvbSBhdXRoIGVycm9yJyk7XG4gICAgICBleHBlY3QoY29uZmlnLmF1dGh6RXJyb3JNZXNzYWdlKS50b0JlKCdDdXN0b20gYXV0aHogZXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXNlIGRlZmF1bHRzIHdoZW4gZW52aXJvbm1lbnQgdmFyaWFibGVzIGFyZSBub3Qgc2V0JywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0F1dGhQcm92aWRlciA9IG5ldyBNb2NrQXV0aFByb3ZpZGVyKCk7XG4gICAgICBjb25zdCBjb25maWcgPSBwYXJzZUF1dGhDb25maWdGcm9tRW52KG1vY2tBdXRoUHJvdmlkZXIpO1xuXG4gICAgICBleHBlY3QoY29uZmlnLmF1dGhQcm92aWRlcikudG9CZShtb2NrQXV0aFByb3ZpZGVyKTtcbiAgICAgIGV4cGVjdChjb25maWcucmVxdWlyZUF1dGgpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5wdWJsaWNUb29scykudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5wdWJsaWNSZXNvdXJjZXMpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgIGV4cGVjdChjb25maWcuYXV0aEhlYWRlcikudG9CZVVuZGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5hdXRoRXJyb3JNZXNzYWdlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgICBleHBlY3QoY29uZmlnLmF1dGh6RXJyb3JNZXNzYWdlKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBlbXB0eSBzdHJpbmcgZW52aXJvbm1lbnQgdmFyaWFibGVzJywgKCkgPT4ge1xuICAgICAgcHJvY2Vzcy5lbnZbQVVUSF9FTlZfQ09ORklHLlJFUVVJUkVfQVVUSF0gPSAnJztcbiAgICAgIHByb2Nlc3MuZW52W0FVVEhfRU5WX0NPTkZJRy5QVUJMSUNfVE9PTFNdID0gJyc7XG5cbiAgICAgIGNvbnN0IG1vY2tBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcigpO1xuICAgICAgY29uc3QgY29uZmlnID0gcGFyc2VBdXRoQ29uZmlnRnJvbUVudihtb2NrQXV0aFByb3ZpZGVyKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZy5yZXF1aXJlQXV0aCkudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoY29uZmlnLnB1YmxpY1Rvb2xzKS50b0VxdWFsKFsnJ10pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBwYXJzZSBib29sZWFuIHZhbHVlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICBwcm9jZXNzLmVudltBVVRIX0VOVl9DT05GSUcuUkVRVUlSRV9BVVRIXSA9ICdmYWxzZSc7XG5cbiAgICAgIGNvbnN0IG1vY2tBdXRoUHJvdmlkZXIgPSBuZXcgTW9ja0F1dGhQcm92aWRlcigpO1xuICAgICAgY29uc3QgY29uZmlnID0gcGFyc2VBdXRoQ29uZmlnRnJvbUVudihtb2NrQXV0aFByb3ZpZGVyKTtcblxuICAgICAgZXhwZWN0KGNvbmZpZy5yZXF1aXJlQXV0aCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=