{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/credentials.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/credentials.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createCredentialTools } from '../../../src/tools/credentials';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nCredential, CreateCredentialRequest } from '../../../src/types/n8n';\n\ndescribe('Credential Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register credential tools\n    createCredentialTools(getClient, mockServer);\n  });\n\n  it('should register all credential tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(5);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-credentials');\n    expect(toolNames).toContain('get-credential');\n    expect(toolNames).toContain('create-credential');\n    expect(toolNames).toContain('delete-credential');\n    expect(toolNames).toContain('get-credential-schema');\n  });\n\n  describe('list-credentials tool', () => {\n    let listCredentialsTool: any;\n\n    beforeEach(() => {\n      listCredentialsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-credentials'\n      )[0];\n    });\n\n    it('should list credentials successfully with full data', async () => {\n      const mockCredentials: N8nCredential[] = [\n        {\n          id: 'cred-1',\n          name: 'Test Credential 1',\n          type: 'httpBasicAuth',\n          homeProject: {\n            id: 'proj-1',\n            name: 'Test Project',\n            type: 'Personal',\n          },\n          sharedWith: [\n            {\n              id: 'share-1',\n              user: {\n                id: 'user-1',\n                email: 'test@example.com',\n                firstName: 'John',\n                lastName: 'Doe',\n              },\n              role: 'owner',\n            },\n          ],\n          scopes: ['workflow', 'credential'],\n          createdAt: '2024-01-01T00:00:00.000Z',\n          updatedAt: '2024-01-02T00:00:00.000Z',\n        },\n        {\n          id: 'cred-2',\n          name: 'Test Credential 2',\n          type: 'oauth2Api',\n          createdAt: '2024-01-03T00:00:00.000Z',\n        },\n      ];\n\n      mockClient.getCredentials.mockResolvedValue({\n        data: mockCredentials,\n        nextCursor: 'next-cursor-123',\n      });\n\n      const result = await listCredentialsTool.execute({});\n\n      expect(mockClient.getCredentials).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 2 credential(s):');\n      expect(result).toContain('**Test Credential 1**');\n      expect(result).toContain('ID: cred-1');\n      expect(result).toContain('Type: httpBasicAuth');\n      expect(result).toContain('Project: Test Project (Personal)');\n      expect(result).toContain('Shared with: 1 user(s)');\n      expect(result).toContain('Scopes: workflow, credential');\n      expect(result).toContain('Created: 12/31/2023');\n      expect(result).toContain('Updated: 1/1/2024');\n      expect(result).toContain('**Test Credential 2**');\n      expect(result).toContain('Use cursor \"next-cursor-123\" to get the next page');\n    });\n\n    it('should list credentials with pagination options', async () => {\n      const mockCredentials: N8nCredential[] = [\n        {\n          id: 'cred-1',\n          name: 'Test Credential',\n          type: 'httpBasicAuth',\n        },\n      ];\n\n      mockClient.getCredentials.mockResolvedValue({\n        data: mockCredentials,\n      });\n\n      await listCredentialsTool.execute({ limit: 10, cursor: 'test-cursor' });\n\n      expect(mockClient.getCredentials).toHaveBeenCalledWith({\n        limit: 10,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should handle empty credentials list', async () => {\n      mockClient.getCredentials.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listCredentialsTool.execute({});\n\n      expect(result).toBe('No credentials found in the n8n instance.');\n    });\n\n    it('should handle credentials without optional fields', async () => {\n      const mockCredentials: N8nCredential[] = [\n        {\n          id: 'cred-minimal',\n          name: 'Minimal Credential',\n          type: 'basic',\n        },\n      ];\n\n      mockClient.getCredentials.mockResolvedValue({\n        data: mockCredentials,\n      });\n\n      const result = await listCredentialsTool.execute({});\n\n      expect(result).toContain('**Minimal Credential**');\n      expect(result).toContain('ID: cred-minimal');\n      expect(result).toContain('Type: basic');\n      expect(result).not.toContain('Project:');\n      expect(result).not.toContain('Shared with:');\n      expect(result).not.toContain('Scopes:');\n      expect(result).not.toContain('Created:');\n      expect(result).not.toContain('Updated:');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getCredentials.mockRejectedValue(new Error('API connection failed'));\n\n      await expect(listCredentialsTool.execute({})).rejects.toThrow(\n        'Failed to list credentials: API connection failed'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getCredentials.mockRejectedValue('Unknown error');\n\n      await expect(listCredentialsTool.execute({})).rejects.toThrow(\n        'Failed to list credentials with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createCredentialTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-credentials'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({})).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(listCredentialsTool.annotations).toEqual({\n        title: 'List n8n Credentials',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() => listCredentialsTool.parameters.parse({})).not.toThrow();\n      expect(() => listCredentialsTool.parameters.parse({ limit: 50 })).not.toThrow();\n      expect(() => listCredentialsTool.parameters.parse({ cursor: 'test' })).not.toThrow();\n      expect(() =>\n        listCredentialsTool.parameters.parse({ limit: 25, cursor: 'test' })\n      ).not.toThrow();\n\n      // Invalid parameters\n      expect(() => listCredentialsTool.parameters.parse({ limit: 0 })).toThrow();\n      expect(() => listCredentialsTool.parameters.parse({ limit: 101 })).toThrow();\n      expect(() => listCredentialsTool.parameters.parse({ limit: 'invalid' })).toThrow();\n    });\n  });\n\n  describe('get-credential tool', () => {\n    let getCredentialTool: any;\n\n    beforeEach(() => {\n      getCredentialTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-credential'\n      )[0];\n    });\n\n    it('should get credential successfully with full data', async () => {\n      const mockCredential: N8nCredential = {\n        id: 'cred-1',\n        name: 'Test Credential',\n        type: 'httpBasicAuth',\n        homeProject: {\n          id: 'proj-1',\n          name: 'Test Project',\n          type: 'Personal',\n        },\n        sharedWith: [\n          {\n            id: 'share-1',\n            user: {\n              id: 'user-1',\n              email: 'test@example.com',\n              firstName: 'John',\n              lastName: 'Doe',\n            },\n            role: 'owner',\n          },\n        ],\n        nodesAccess: [\n          {\n            nodeType: 'HttpRequest',\n            user: 'john.doe',\n            date: new Date('2024-01-01T00:00:00.000Z'),\n          },\n        ],\n        scopes: ['workflow', 'credential'],\n        createdAt: '2024-01-01T00:00:00.000Z',\n        updatedAt: '2024-01-02T00:00:00.000Z',\n      };\n\n      mockClient.getCredential.mockResolvedValue(mockCredential);\n\n      const result = await getCredentialTool.execute({ credentialId: 'cred-1' });\n\n      expect(mockClient.getCredential).toHaveBeenCalledWith('cred-1');\n      expect(result).toContain('# Credential: Test Credential');\n      expect(result).toContain('**ID:** cred-1');\n      expect(result).toContain('**Name:** Test Credential');\n      expect(result).toContain('**Type:** httpBasicAuth');\n      expect(result).toContain('**Project:** Test Project (Personal)');\n      expect(result).toContain('## Shared With:');\n      expect(result).toContain('1. John Doe (test@example.com) - Role: owner');\n      expect(result).toContain('## Node Access:');\n      expect(result).toContain('1. Node Type: HttpRequest');\n      expect(result).toContain('- User: john.doe');\n      expect(result).toContain('- Date: 12/31/2023, 6:00:00 PM');\n      expect(result).toContain('**Scopes:** workflow, credential');\n      expect(result).toContain('**Created:** 12/31/2023, 6:00:00 PM');\n      expect(result).toContain('**Updated:** 1/1/2024, 6:00:00 PM');\n      expect(result).toContain('Sensitive credential data is not displayed for security purposes');\n    });\n\n    it('should get credential with minimal data', async () => {\n      const mockCredential: N8nCredential = {\n        id: 'cred-minimal',\n        name: 'Minimal Credential',\n        type: 'basic',\n      };\n\n      mockClient.getCredential.mockResolvedValue(mockCredential);\n\n      const result = await getCredentialTool.execute({ credentialId: 'cred-minimal' });\n\n      expect(result).toContain('# Credential: Minimal Credential');\n      expect(result).toContain('**ID:** cred-minimal');\n      expect(result).toContain('**Type:** basic');\n      expect(result).not.toContain('**Project:**');\n      expect(result).not.toContain('## Shared With:');\n      expect(result).not.toContain('## Node Access:');\n      expect(result).not.toContain('**Scopes:**');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getCredential.mockRejectedValue(new Error('Credential not found'));\n\n      await expect(getCredentialTool.execute({ credentialId: 'invalid' })).rejects.toThrow(\n        'Failed to get credential: Credential not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getCredential.mockRejectedValue({ error: 'Unknown' });\n\n      await expect(getCredentialTool.execute({ credentialId: 'test' })).rejects.toThrow(\n        'Failed to get credential with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createCredentialTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-credential'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({ credentialId: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(getCredentialTool.annotations).toEqual({\n        title: 'Get Credential Details',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() => getCredentialTool.parameters.parse({ credentialId: 'test-id' })).not.toThrow();\n\n      // Invalid parameters\n      expect(() => getCredentialTool.parameters.parse({})).toThrow();\n      expect(() => getCredentialTool.parameters.parse({ credentialId: '' })).toThrow();\n      expect(() => getCredentialTool.parameters.parse({ credentialId: 123 })).toThrow();\n    });\n  });\n\n  describe('create-credential tool', () => {\n    let createCredentialTool: any;\n\n    beforeEach(() => {\n      createCredentialTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-credential'\n      )[0];\n    });\n\n    it('should create credential successfully with full data', async () => {\n      const mockCredential: N8nCredential = {\n        id: 'new-cred-1',\n        name: 'New Test Credential',\n        type: 'httpBasicAuth',\n        homeProject: {\n          id: 'proj-1',\n          name: 'Test Project',\n          type: 'Personal',\n        },\n      };\n\n      mockClient.createCredential.mockResolvedValue(mockCredential);\n\n      const credentialData = {\n        name: 'New Test Credential',\n        type: 'httpBasicAuth',\n        data: { username: 'test', password: 'secret' },\n        projectId: 'proj-1',\n      };\n\n      const result = await createCredentialTool.execute(credentialData);\n\n      const expectedRequest: CreateCredentialRequest = {\n        name: 'New Test Credential',\n        type: 'httpBasicAuth',\n        data: { username: 'test', password: 'secret' },\n        projectId: 'proj-1',\n      };\n\n      expect(mockClient.createCredential).toHaveBeenCalledWith(expectedRequest);\n      expect(result).toContain(\n        '✅ Successfully created credential \"New Test Credential\" with ID: new-cred-1'\n      );\n      expect(result).toContain('Type: httpBasicAuth');\n      expect(result).toContain('Project: Test Project');\n    });\n\n    it('should create credential without optional fields', async () => {\n      const mockCredential: N8nCredential = {\n        id: 'new-cred-2',\n        name: 'Simple Credential',\n        type: 'basic',\n      };\n\n      mockClient.createCredential.mockResolvedValue(mockCredential);\n\n      const credentialData = {\n        name: 'Simple Credential',\n        type: 'basic',\n        data: { token: 'abc123' },\n      };\n\n      const result = await createCredentialTool.execute(credentialData);\n\n      const expectedRequest: CreateCredentialRequest = {\n        name: 'Simple Credential',\n        type: 'basic',\n        data: { token: 'abc123' },\n        projectId: undefined,\n      };\n\n      expect(mockClient.createCredential).toHaveBeenCalledWith(expectedRequest);\n      expect(result).toContain(\n        '✅ Successfully created credential \"Simple Credential\" with ID: new-cred-2'\n      );\n      expect(result).toContain('Type: basic');\n      expect(result).not.toContain('Project:');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.createCredential.mockRejectedValue(new Error('Invalid credential type'));\n\n      const credentialData = {\n        name: 'Test',\n        type: 'invalid',\n        data: { test: 'value' },\n      };\n\n      await expect(createCredentialTool.execute(credentialData)).rejects.toThrow(\n        'Failed to create credential: Invalid credential type'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.createCredential.mockRejectedValue({ code: 500 });\n\n      const credentialData = {\n        name: 'Test',\n        type: 'basic',\n        data: { test: 'value' },\n      };\n\n      await expect(createCredentialTool.execute(credentialData)).rejects.toThrow(\n        'Failed to create credential with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createCredentialTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'create-credential'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect(\n        (tool as any).execute({\n          name: 'Test',\n          type: 'basic',\n          data: { test: 'value' },\n        })\n      ).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(createCredentialTool.annotations).toEqual({\n        title: 'Create New Credential',\n        readOnlyHint: false,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() =>\n        createCredentialTool.parameters.parse({\n          name: 'Test Credential',\n          type: 'httpBasicAuth',\n          data: { username: 'test', password: 'secret' },\n        })\n      ).not.toThrow();\n\n      expect(() =>\n        createCredentialTool.parameters.parse({\n          name: 'Test Credential',\n          type: 'httpBasicAuth',\n          data: { username: 'test', password: 'secret' },\n          projectId: 'proj-1',\n        })\n      ).not.toThrow();\n\n      // Invalid parameters\n      expect(() => createCredentialTool.parameters.parse({})).toThrow();\n      expect(() => createCredentialTool.parameters.parse({ name: '' })).toThrow();\n      expect(() => createCredentialTool.parameters.parse({ name: 'Test', type: '' })).toThrow();\n      expect(() =>\n        createCredentialTool.parameters.parse({ name: 'Test', type: 'basic' })\n      ).toThrow(); // missing data\n      expect(() =>\n        createCredentialTool.parameters.parse({ name: 'Test', type: 'basic', data: {} })\n      ).toThrow(); // empty data\n    });\n  });\n\n  describe('delete-credential tool', () => {\n    let deleteCredentialTool: any;\n\n    beforeEach(() => {\n      deleteCredentialTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-credential'\n      )[0];\n    });\n\n    it('should delete credential successfully', async () => {\n      mockClient.deleteCredential.mockResolvedValue(undefined);\n\n      const result = await deleteCredentialTool.execute({ credentialId: 'cred-to-delete' });\n\n      expect(mockClient.deleteCredential).toHaveBeenCalledWith('cred-to-delete');\n      expect(result).toBe('✅ Successfully deleted credential with ID: cred-to-delete');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.deleteCredential.mockRejectedValue(new Error('Credential not found'));\n\n      await expect(deleteCredentialTool.execute({ credentialId: 'invalid' })).rejects.toThrow(\n        'Failed to delete credential: Credential not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteCredential.mockRejectedValue('Network error');\n\n      await expect(deleteCredentialTool.execute({ credentialId: 'test' })).rejects.toThrow(\n        'Failed to delete credential with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createCredentialTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-credential'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({ credentialId: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(deleteCredentialTool.annotations).toEqual({\n        title: 'Delete Credential',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() =>\n        deleteCredentialTool.parameters.parse({ credentialId: 'test-id' })\n      ).not.toThrow();\n\n      // Invalid parameters\n      expect(() => deleteCredentialTool.parameters.parse({})).toThrow();\n      expect(() => deleteCredentialTool.parameters.parse({ credentialId: '' })).toThrow();\n      expect(() => deleteCredentialTool.parameters.parse({ credentialId: 123 })).toThrow();\n    });\n  });\n\n  describe('get-credential-schema tool', () => {\n    let getCredentialSchemaTool: any;\n\n    beforeEach(() => {\n      getCredentialSchemaTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-credential-schema'\n      )[0];\n    });\n\n    it('should get credential schema successfully', async () => {\n      const mockSchema = {\n        type: 'object',\n        properties: {\n          username: {\n            type: 'string',\n            description: 'Username for authentication',\n          },\n          password: {\n            type: 'string',\n            description: 'Password for authentication',\n            format: 'password',\n          },\n        },\n        required: ['username', 'password'],\n      };\n\n      mockClient.getCredentialSchema.mockResolvedValue(mockSchema);\n\n      const result = await getCredentialSchemaTool.execute({ credentialType: 'httpBasicAuth' });\n\n      expect(mockClient.getCredentialSchema).toHaveBeenCalledWith('httpBasicAuth');\n      expect(result).toContain('# Credential Schema: httpBasicAuth');\n      expect(result).toContain('Schema definition for credential type \"httpBasicAuth\"');\n      expect(result).toContain('```json');\n      expect(result).toContain(JSON.stringify(mockSchema, null, 2));\n      expect(result).toContain('```');\n      expect(result).toContain(\n        'Use this schema to understand the required fields when creating credentials'\n      );\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getCredentialSchema.mockRejectedValue(new Error('Schema not found'));\n\n      await expect(getCredentialSchemaTool.execute({ credentialType: 'invalid' })).rejects.toThrow(\n        'Failed to get credential schema: Schema not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getCredentialSchema.mockRejectedValue(null);\n\n      await expect(getCredentialSchemaTool.execute({ credentialType: 'test' })).rejects.toThrow(\n        'Failed to get credential schema with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createCredentialTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-credential-schema'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({ credentialType: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(getCredentialSchemaTool.annotations).toEqual({\n        title: 'Get Credential Schema',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() =>\n        getCredentialSchemaTool.parameters.parse({ credentialType: 'httpBasicAuth' })\n      ).not.toThrow();\n\n      // Invalid parameters\n      expect(() => getCredentialSchemaTool.parameters.parse({})).toThrow();\n      expect(() => getCredentialSchemaTool.parameters.parse({ credentialType: '' })).toThrow();\n      expect(() => getCredentialSchemaTool.parameters.parse({ credentialType: 123 })).toThrow();\n    });\n  });\n});\n"],"version":3}