3772bcc2c91971be3c1232ae7293d115
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock the ResourceMonitor
globals_1.jest.mock('../../../src/utils/resourceMonitor');
const fastmcp_1 = require("fastmcp");
const instance_monitoring_1 = require("../../../src/tools/instance-monitoring");
const resourceMonitor_1 = require("../../../src/utils/resourceMonitor");
const MockedResourceMonitor = resourceMonitor_1.ResourceMonitor;
(0, globals_1.describe)('Instance Monitoring Tools', () => {
    let server;
    let mockClient;
    let mockResourceMonitor;
    let getClient;
    // Mock data
    const mockSystemResourceUsage = {
        cpu: {
            totalUsage: 45.2,
            processUsage: 12.8,
            loadAverage: [1.2, 1.5, 1.8],
            coreCount: 8,
        },
        memory: {
            totalMemory: 16777216000, // 16GB
            freeMemory: 8388608000, // 8GB
            usedMemory: 8388608000, // 8GB
            processMemory: {
                heapUsed: 67108864, // 64MB
                heapTotal: 134217728, // 128MB
                external: 16777216, // 16MB
                rss: 201326592, // 192MB
            },
            utilization: 50.0,
        },
        disk: {
            totalSpace: 1073741824000, // 1TB
            freeSpace: 536870912000, // 500GB
            usedSpace: 536870912000, // 500GB
            utilization: 50.0,
        },
        network: {
            bytesReceived: 1048576000, // 1GB
            bytesSent: 524288000, // 500MB
            packetsReceived: 1000000,
            packetsSent: 800000,
        },
        uptime: 86400, // 24 hours
        timestamp: '2023-01-01T12:00:00Z',
    };
    const mockWorkflowResourceUsage = {
        workflowId: 'workflow_123',
        workflowName: 'Test Workflow',
        isActive: true,
        executionCount: 150,
        resourceMetrics: {
            averageExecutionTime: 2500,
            lastExecutionTime: 2800,
            totalExecutionTime: 375000,
            memoryUsage: {
                average: 52428800, // 50MB
                peak: 104857600, // 100MB
                current: 41943040, // 40MB
            },
            cpuUsage: {
                average: 25.5,
                peak: 80.0,
                current: 15.2,
            },
        },
        executionStats: {
            successfulRuns: 138,
            failedRuns: 12,
            totalRuns: 150,
            successRate: 92.0,
            lastExecution: '2023-01-01T11:30:00Z',
            averageRunsPerHour: 6.25,
        },
        nodePerformance: [
            {
                nodeId: 'node_1',
                nodeName: 'HTTP Request',
                nodeType: 'n8n-nodes-base.httpRequest',
                averageExecutionTime: 800,
                executionCount: 150,
                errorRate: 2.0,
            },
            {
                nodeId: 'node_2',
                nodeName: 'Code',
                nodeType: 'n8n-nodes-base.code',
                averageExecutionTime: 200,
                executionCount: 150,
                errorRate: 0.5,
            },
        ],
    };
    const mockInstanceHealthMetrics = {
        overall: {
            status: 'healthy',
            score: 95,
            issues: [],
            recommendations: ['Consider upgrading to the latest version'],
        },
        performance: {
            responseTime: 150,
            throughput: 25.5,
            errorRate: 2.1,
            availabilityUptime: 99.8,
        },
        resources: {
            memoryPressure: false,
            cpuThrottling: false,
            diskSpaceWarning: false,
            networkLatency: 45,
        },
        dependencies: [
            {
                name: 'Database',
                type: 'database',
                status: 'online',
                responseTime: 25,
                errorCount: 0,
            },
            {
                name: 'Redis',
                type: 'database',
                status: 'online',
                responseTime: 8,
                errorCount: 0,
            },
        ],
        alerts: [
            {
                id: 'alert_1',
                severity: 'warning',
                message: 'CPU usage approaching threshold',
                timestamp: '2023-01-01T11:45:00Z',
                resolved: false,
            },
        ],
    };
    const mockPerformanceAlert = {
        id: 'alert_123',
        type: 'resource_threshold',
        severity: 'high',
        title: 'High Memory Usage',
        description: 'Memory usage has exceeded 80% threshold',
        triggeredAt: '2023-01-01T10:30:00Z',
        metadata: {
            workflowId: 'workflow_123',
            threshold: 80,
            actualValue: 85.5,
        },
        actions: [
            {
                type: 'notification',
                description: 'Alert sent to administrators',
                executed: true,
                result: 'Email notification sent successfully',
            },
        ],
    };
    const mockMonitoringConfig = {
        monitoring: {
            enabled: true,
            intervalMs: 30000,
            retentionDays: 7,
            alertThresholds: {
                cpuUsage: 80,
                memoryUsage: 80,
                diskUsage: 85,
                executionTime: 30000,
                errorRate: 10,
            },
        },
        collection: {
            systemMetrics: true,
            workflowMetrics: true,
            nodeMetrics: true,
            healthChecks: true,
        },
        storage: {
            inMemory: true,
            persistToDisk: false,
            maxDataPoints: 1000,
            compressionEnabled: false,
        },
    };
    (0, globals_1.beforeEach)(() => {
        // Clear all mocks first
        globals_1.jest.clearAllMocks();
        // Create mock FastMCP server
        server = {
            addTool: globals_1.jest.fn(),
        };
        // Create mock N8nClient
        mockClient = {
            getWorkflow: globals_1.jest.fn(),
            getWorkflows: globals_1.jest.fn(),
        };
        // Create mock ResourceMonitor
        mockResourceMonitor = {
            getSystemResourceUsage: globals_1.jest.fn(),
            getWorkflowResourceUsage: globals_1.jest.fn(),
            getInstanceHealthMetrics: globals_1.jest.fn(),
            getAlerts: globals_1.jest.fn(),
            resolveAlert: globals_1.jest.fn(),
            startMonitoring: globals_1.jest.fn(),
            stopMonitoring: globals_1.jest.fn(),
            getConfig: globals_1.jest.fn(),
            updateConfig: globals_1.jest.fn(),
            getDataPoints: globals_1.jest.fn(),
            recordWorkflowExecution: globals_1.jest.fn(),
        };
        // Set up getClient function
        let clientInstance = mockClient;
        getClient = globals_1.jest.fn(() => clientInstance);
        // Set up mock implementations
        MockedResourceMonitor.mockClear();
        MockedResourceMonitor.mockImplementation(() => mockResourceMonitor);
        // Don't reset modules as it breaks the tool creation
        // Reset all mocks with default values
        mockResourceMonitor.getSystemResourceUsage.mockReset().mockResolvedValue(mockSystemResourceUsage);
        mockResourceMonitor.getWorkflowResourceUsage.mockReset().mockResolvedValue(mockWorkflowResourceUsage);
        mockResourceMonitor.getInstanceHealthMetrics.mockReset().mockResolvedValue(mockInstanceHealthMetrics);
        mockResourceMonitor.getAlerts.mockReset().mockReturnValue([mockPerformanceAlert]);
        mockResourceMonitor.resolveAlert.mockReset().mockReturnValue(true);
        mockResourceMonitor.startMonitoring.mockReset().mockResolvedValue(undefined);
        mockResourceMonitor.getConfig.mockReset().mockReturnValue(mockMonitoringConfig);
        mockResourceMonitor.getDataPoints.mockReset().mockReturnValue([]);
        mockResourceMonitor.stopMonitoring.mockReset().mockImplementation(() => { });
        mockResourceMonitor.updateConfig.mockReset().mockImplementation(() => { });
        mockResourceMonitor.recordWorkflowExecution.mockReset().mockImplementation(() => { });
        mockClient.getWorkflow.mockReset().mockResolvedValue({
            id: 'workflow_123',
            name: 'Test Workflow',
            active: true,
            nodes: [],
            connections: {},
        });
        mockClient.getWorkflows.mockReset().mockResolvedValue({
            data: [
                {
                    id: 'workflow_123',
                    name: 'Test Workflow',
                    active: true,
                    nodes: [],
                    connections: {},
                },
                {
                    id: 'workflow_456',
                    name: 'Another Workflow',
                    active: false,
                    nodes: [],
                    connections: {},
                },
            ],
        });
        // Create the tools
        (0, instance_monitoring_1.createInstanceMonitoringTools)(getClient, server);
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    // Helper function to get tool by name
    const getTool = (toolName) => {
        const addToolCalls = server.addTool.mock.calls;
        const toolCall = addToolCalls.find((call) => call[0].name === toolName);
        return toolCall?.[0];
    };
    (0, globals_1.describe)('Tool Registration', () => {
        (0, globals_1.it)('should register all 7 instance monitoring tools', () => {
            (0, globals_1.expect)(server.addTool).toHaveBeenCalledTimes(7);
            const toolNames = server.addTool.mock.calls.map((call) => call[0].name);
            (0, globals_1.expect)(toolNames).toEqual([
                'get-system-resources',
                'get-workflow-resources',
                'check-instance-health',
                'get-performance-alerts',
                'resolve-performance-alert',
                'control-monitoring',
                'record-execution-metrics',
            ]);
        });
        (0, globals_1.it)('should register tools with correct annotations', () => {
            const addToolCalls = server.addTool.mock.calls;
            // Check get-system-resources tool
            const systemResourcesTool = getTool('get-system-resources');
            (0, globals_1.expect)(systemResourcesTool.annotations).toEqual({
                title: 'System Resource Usage',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: false,
            });
            // Check control-monitoring tool
            const controlMonitoringTool = getTool('control-monitoring');
            (0, globals_1.expect)(controlMonitoringTool.annotations).toEqual({
                title: 'Control Resource Monitoring',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: false,
            });
        });
    });
    (0, globals_1.describe)('get-system-resources Tool', () => {
        (0, globals_1.it)('should return formatted system resource usage', async () => {
            const tool = getTool('get-system-resources');
            const result = await tool.execute({});
            (0, globals_1.expect)(mockResourceMonitor.getSystemResourceUsage).toHaveBeenCalled();
            (0, globals_1.expect)(typeof result).toBe('string');
            (0, globals_1.expect)(result).toContain('System Resource Usage');
            (0, globals_1.expect)(result).toContain('45.2%'); // CPU usage
            (0, globals_1.expect)(result).toContain('15.63 GB'); // Total memory (16777216000 bytes = 15.63 GB)
            (0, globals_1.expect)(result).toContain('1000 GB'); // Total disk (1073741824000 bytes = 1000 GB)
            (0, globals_1.expect)(result).toContain('24h 0m 0s'); // Uptime formatted
        });
        // TODO: Fix error handling tests - singleton pattern makes mocking difficult
        globals_1.it.skip('should handle system resource usage errors', async () => {
            mockResourceMonitor.getSystemResourceUsage.mockRejectedValueOnce(new Error('System error'));
            const tool = getTool('get-system-resources');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow(fastmcp_1.UserError);
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get system resources: System error');
        });
        globals_1.it.skip('should handle unknown errors', async () => {
            mockResourceMonitor.getSystemResourceUsage.mockRejectedValueOnce('Unknown error');
            const tool = getTool('get-system-resources');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get system resources with unknown error');
        });
    });
    (0, globals_1.describe)('get-workflow-resources Tool', () => {
        (0, globals_1.it)('should return formatted workflow resource usage for all workflows', async () => {
            const tool = getTool('get-workflow-resources');
            const result = await tool.execute({});
            (0, globals_1.expect)(mockClient.getWorkflows).toHaveBeenCalledWith({ limit: 50 });
            // Should be called once for each workflow in the mock data
            (0, globals_1.expect)(mockResourceMonitor.getWorkflowResourceUsage).toHaveBeenCalledTimes(2);
            (0, globals_1.expect)(result).toContain('Workflow Resource Usage (2 workflows)');
            (0, globals_1.expect)(result).toContain('Test Workflow');
            (0, globals_1.expect)(result).toContain('✅ Active');
            (0, globals_1.expect)(result).toContain('92.0% success rate');
        });
        (0, globals_1.it)('should return workflow resource usage for specific workflow', async () => {
            const tool = getTool('get-workflow-resources');
            const result = await tool.execute({ workflowId: 'workflow_123' });
            (0, globals_1.expect)(mockClient.getWorkflow).toHaveBeenCalledWith('workflow_123');
            (0, globals_1.expect)(mockResourceMonitor.getWorkflowResourceUsage).toHaveBeenCalledWith('workflow_123', 'Test Workflow', true);
            (0, globals_1.expect)(result).toContain('Test Workflow');
        });
        (0, globals_1.it)('should throw error when client is not initialized', async () => {
            // Reset client to null
            getClient = globals_1.jest.fn(() => null);
            (0, instance_monitoring_1.createInstanceMonitoringTools)(getClient, server);
            const newTool = getTool('get-workflow-resources');
            await (0, globals_1.expect)(newTool.execute({})).rejects.toThrow(fastmcp_1.UserError);
            await (0, globals_1.expect)(newTool.execute({})).rejects.toThrow('n8n client not initialized');
        });
        (0, globals_1.it)('should handle workflow resource errors', async () => {
            mockClient.getWorkflows.mockRejectedValueOnce(new Error('API error'));
            const tool = getTool('get-workflow-resources');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get workflow resources: API error');
        });
        (0, globals_1.it)('should handle empty workflow list', async () => {
            mockClient.getWorkflows.mockResolvedValueOnce({ data: [] });
            const tool = getTool('get-workflow-resources');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toBe('No workflow usage data available.');
        });
    });
    (0, globals_1.describe)('check-instance-health Tool', () => {
        (0, globals_1.it)('should return formatted instance health metrics', async () => {
            const tool = getTool('check-instance-health');
            const result = await tool.execute({});
            (0, globals_1.expect)(mockResourceMonitor.getInstanceHealthMetrics).toHaveBeenCalled();
            (0, globals_1.expect)(result).toContain('Instance Health Report');
            (0, globals_1.expect)(result).toContain('✅ HEALTHY');
            (0, globals_1.expect)(result).toContain('95/100'); // Health score
            (0, globals_1.expect)(result).toContain('150ms'); // Response time
            (0, globals_1.expect)(result).toContain('Dependencies');
            (0, globals_1.expect)(result).toContain('Database');
            (0, globals_1.expect)(result).toContain('Active Alerts');
        });
        (0, globals_1.it)('should handle instance health check errors', async () => {
            mockResourceMonitor.getInstanceHealthMetrics.mockRejectedValueOnce(new Error('Health check failed'));
            const tool = getTool('check-instance-health');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to check instance health: Health check failed');
        });
        (0, globals_1.it)('should format different health statuses correctly', async () => {
            const criticalHealthMetrics = {
                ...mockInstanceHealthMetrics,
                overall: {
                    status: 'critical',
                    score: 25,
                    issues: ['High memory usage', 'Database connectivity issues'],
                    recommendations: ['Scale up server', 'Check database connection'],
                },
                resources: {
                    memoryPressure: true,
                    cpuThrottling: true,
                    diskSpaceWarning: false,
                    networkLatency: 200,
                },
            };
            mockResourceMonitor.getInstanceHealthMetrics.mockResolvedValueOnce(criticalHealthMetrics);
            const tool = getTool('check-instance-health');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toContain('🚨 CRITICAL');
            (0, globals_1.expect)(result).toContain('25/100');
            (0, globals_1.expect)(result).toContain('🚨 Issues:');
            (0, globals_1.expect)(result).toContain('High memory usage');
            (0, globals_1.expect)(result).toContain('💡 Recommendations:');
            (0, globals_1.expect)(result).toContain('Scale up server');
            (0, globals_1.expect)(result).toContain('Memory Pressure: ⚠️ Yes');
            (0, globals_1.expect)(result).toContain('CPU Throttling: ⚠️ Yes');
        });
    });
    (0, globals_1.describe)('get-performance-alerts Tool', () => {
        (0, globals_1.it)('should return formatted performance alerts', async () => {
            const tool = getTool('get-performance-alerts');
            const result = await tool.execute({});
            (0, globals_1.expect)(mockResourceMonitor.getAlerts).toHaveBeenCalledWith(undefined, undefined);
            (0, globals_1.expect)(result).toContain('Performance Alerts (1)');
            (0, globals_1.expect)(result).toContain('High Memory Usage');
            (0, globals_1.expect)(result).toContain('🚨 HIGH');
            (0, globals_1.expect)(result).toContain('Threshold: 80, Actual: 85.5');
        });
        (0, globals_1.it)('should filter alerts by severity', async () => {
            const tool = getTool('get-performance-alerts');
            await tool.execute({ severity: 'critical', resolved: false, limit: 25 });
            (0, globals_1.expect)(mockResourceMonitor.getAlerts).toHaveBeenCalledWith('critical', false);
        });
        (0, globals_1.it)('should limit alerts results', async () => {
            const multipleAlerts = Array.from({ length: 10 }, (_, i) => ({
                ...mockPerformanceAlert,
                id: `alert_${i}`,
                title: `Alert ${i}`,
            }));
            mockResourceMonitor.getAlerts.mockReturnValueOnce(multipleAlerts);
            const tool = getTool('get-performance-alerts');
            const result = await tool.execute({ limit: 5 });
            (0, globals_1.expect)(result).toContain('Performance Alerts (5)');
        });
        (0, globals_1.it)('should handle no alerts found', async () => {
            mockResourceMonitor.getAlerts.mockReturnValueOnce([]);
            const tool = getTool('get-performance-alerts');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toBe('No alerts found.');
        });
        (0, globals_1.it)('should handle performance alerts errors', async () => {
            mockResourceMonitor.getAlerts.mockImplementationOnce(() => {
                throw new Error('Alert retrieval failed');
            });
            const tool = getTool('get-performance-alerts');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get performance alerts: Alert retrieval failed');
        });
    });
    (0, globals_1.describe)('resolve-performance-alert Tool', () => {
        (0, globals_1.it)('should resolve an alert successfully', async () => {
            const tool = getTool('resolve-performance-alert');
            const result = await tool.execute({ alertId: 'alert_123' });
            (0, globals_1.expect)(mockResourceMonitor.resolveAlert).toHaveBeenCalledWith('alert_123');
            (0, globals_1.expect)(result).toContain('✅ Alert alert_123 has been marked as resolved');
        });
        (0, globals_1.it)('should handle alert not found', async () => {
            mockResourceMonitor.resolveAlert.mockReturnValueOnce(false);
            const tool = getTool('resolve-performance-alert');
            const result = await tool.execute({ alertId: 'nonexistent_alert' });
            (0, globals_1.expect)(result).toContain('❌ Alert nonexistent_alert not found or already resolved');
        });
        (0, globals_1.it)('should handle resolve alert errors', async () => {
            mockResourceMonitor.resolveAlert.mockImplementationOnce(() => {
                throw new Error('Resolution failed');
            });
            const tool = getTool('resolve-performance-alert');
            await (0, globals_1.expect)(tool.execute({ alertId: 'alert_123' })).rejects.toThrow('Failed to resolve alert: Resolution failed');
        });
    });
    (0, globals_1.describe)('control-monitoring Tool', () => {
        (0, globals_1.it)('should start monitoring successfully', async () => {
            const tool = getTool('control-monitoring');
            const result = await tool.execute({ action: 'start' });
            (0, globals_1.expect)(mockResourceMonitor.startMonitoring).toHaveBeenCalled();
            (0, globals_1.expect)(result).toContain('✅ Resource monitoring started successfully');
        });
        (0, globals_1.it)('should stop monitoring successfully', async () => {
            const tool = getTool('control-monitoring');
            const result = await tool.execute({ action: 'stop' });
            (0, globals_1.expect)(mockResourceMonitor.stopMonitoring).toHaveBeenCalled();
            (0, globals_1.expect)(result).toContain('⏹️ Resource monitoring stopped');
        });
        (0, globals_1.it)('should restart monitoring with new interval', async () => {
            const tool = getTool('control-monitoring');
            const result = await tool.execute({ action: 'restart', intervalMs: 60000 });
            (0, globals_1.expect)(mockResourceMonitor.stopMonitoring).toHaveBeenCalled();
            (0, globals_1.expect)(mockResourceMonitor.updateConfig).toHaveBeenCalledWith({
                monitoring: { ...mockMonitoringConfig.monitoring, intervalMs: 60000 }
            });
            (0, globals_1.expect)(mockResourceMonitor.startMonitoring).toHaveBeenCalled();
            (0, globals_1.expect)(result).toContain('🔄 Resource monitoring restarted successfully');
        });
        (0, globals_1.it)('should show monitoring status', async () => {
            const tool = getTool('control-monitoring');
            const result = await tool.execute({ action: 'status' });
            (0, globals_1.expect)(mockResourceMonitor.getConfig).toHaveBeenCalled();
            (0, globals_1.expect)(mockResourceMonitor.getDataPoints).toHaveBeenCalled();
            (0, globals_1.expect)(mockResourceMonitor.getAlerts).toHaveBeenCalledWith(undefined, false);
            (0, globals_1.expect)(result).toContain('📊 Monitoring Status');
            (0, globals_1.expect)(result).toContain('Enabled: ✅ Yes');
            (0, globals_1.expect)(result).toContain('Interval: 30000ms');
            (0, globals_1.expect)(result).toContain('Retention: 7 days');
        });
        (0, globals_1.it)('should handle unknown action', async () => {
            const tool = getTool('control-monitoring');
            await (0, globals_1.expect)(tool.execute({ action: 'invalid' })).rejects.toThrow('Unknown action: invalid');
        });
        (0, globals_1.it)('should handle control monitoring errors', async () => {
            mockResourceMonitor.startMonitoring.mockRejectedValueOnce(new Error('Start failed'));
            const tool = getTool('control-monitoring');
            await (0, globals_1.expect)(tool.execute({ action: 'start' })).rejects.toThrow('Failed to control monitoring: Start failed');
        });
    });
    (0, globals_1.describe)('record-execution-metrics Tool', () => {
        (0, globals_1.it)('should record execution metrics successfully', async () => {
            const tool = getTool('record-execution-metrics');
            const result = await tool.execute({
                workflowId: 'workflow_123',
                duration: 2500,
                success: true,
            });
            (0, globals_1.expect)(mockResourceMonitor.recordWorkflowExecution).toHaveBeenCalledWith('workflow_123', 2500, true);
            (0, globals_1.expect)(result).toContain('📊 Execution metrics recorded for workflow workflow_123');
            (0, globals_1.expect)(result).toContain('2500ms (success)');
        });
        (0, globals_1.it)('should record failed execution metrics', async () => {
            const tool = getTool('record-execution-metrics');
            const result = await tool.execute({
                workflowId: 'workflow_456',
                duration: 1800,
                success: false,
            });
            (0, globals_1.expect)(mockResourceMonitor.recordWorkflowExecution).toHaveBeenCalledWith('workflow_456', 1800, false);
            (0, globals_1.expect)(result).toContain('workflow_456');
            (0, globals_1.expect)(result).toContain('1800ms (failure)');
        });
        (0, globals_1.it)('should handle record execution metrics errors', async () => {
            mockResourceMonitor.recordWorkflowExecution.mockImplementationOnce(() => {
                throw new Error('Recording failed');
            });
            const tool = getTool('record-execution-metrics');
            await (0, globals_1.expect)(tool.execute({
                workflowId: 'workflow_123',
                duration: 2500,
                success: true,
            })).rejects.toThrow('Failed to record execution metrics: Recording failed');
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle ResourceMonitor creation errors gracefully', async () => {
            MockedResourceMonitor.mockImplementationOnce(() => {
                throw new Error('Monitor creation failed');
            });
            const addToolCalls = server.addTool.mock.calls;
            const tool = getTool('get-system-resources');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get system resources: Monitor creation failed');
        });
        (0, globals_1.it)('should handle all unknown error types consistently', async () => {
            mockResourceMonitor.getSystemResourceUsage.mockRejectedValueOnce({ message: 'Not an Error instance' });
            const addToolCalls = server.addTool.mock.calls;
            const tool = getTool('get-system-resources');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('Failed to get system resources with unknown error');
        });
    });
    (0, globals_1.describe)('Data Formatting', () => {
        (0, globals_1.it)('should format bytes correctly', async () => {
            const largeSystemUsage = {
                ...mockSystemResourceUsage,
                memory: {
                    ...mockSystemResourceUsage.memory,
                    totalMemory: 1099511627776, // 1TB
                    usedMemory: 549755813888, // 512GB
                },
            };
            mockResourceMonitor.getSystemResourceUsage.mockResolvedValueOnce(largeSystemUsage);
            const addToolCalls = server.addTool.mock.calls;
            const tool = getTool('get-system-resources');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toContain('1.00 TB'); // Total memory
            (0, globals_1.expect)(result).toContain('512.00 GB'); // Used memory
        });
        (0, globals_1.it)('should format duration correctly', async () => {
            const longUptimeUsage = {
                ...mockSystemResourceUsage,
                uptime: 90061, // 25h 1m 1s
            };
            mockResourceMonitor.getSystemResourceUsage.mockResolvedValueOnce(longUptimeUsage);
            const addToolCalls = server.addTool.mock.calls;
            const tool = getTool('get-system-resources');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toContain('25h 1m 1s');
        });
        (0, globals_1.it)('should handle resolved alerts in formatting', async () => {
            const resolvedAlert = {
                ...mockPerformanceAlert,
                resolvedAt: '2023-01-01T12:00:00Z',
            };
            mockResourceMonitor.getAlerts.mockReturnValueOnce([resolvedAlert]);
            const tool = getTool('get-performance-alerts');
            const result = await tool.execute({});
            (0, globals_1.expect)(result).toContain('✅ Resolved');
            (0, globals_1.expect)(result).toContain('Resolved: 1/1/2023, 12:00:00 PM');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,