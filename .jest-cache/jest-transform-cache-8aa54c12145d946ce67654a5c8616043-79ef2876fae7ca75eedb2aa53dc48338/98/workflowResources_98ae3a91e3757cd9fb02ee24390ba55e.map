{"version":3,"names":["cov_1cj318xcke","actualCoverage","WorkflowResourceManager","config","cache","s","Map","constructor","b","f","baseUri","maxWorkflows","includeInactive","includeExecutions","cacheDuration","register","server","getClient","addResourceTemplate","uriTemplate","name","mimeType","arguments","description","required","load","id","client","Error","workflow","getWorkflowResource","text","JSON","stringify","addResource","uri","workflows","getWorkflowListResource","activeWorkflows","getActiveWorkflowsResource","stats","getWorkflowStatsResource","workflowId","console","log","cacheKey","cached","getCachedData","getWorkflow","enhancedWorkflow","metadata","active","tags","createdAt","updatedAt","nodeCount","nodes","length","connectionCount","connections","Object","keys","resourceInfo","type","version","lastAccessed","Date","toISOString","setCachedData","error","message","String","getWorkflows","limit","workflowList","data","map","total","returned","activeWorkflowsData","filter","w","lastExecution","activeOnly","totalWorkflows","inactiveWorkflows","tagUsage","calculateTagUsage","creationStats","calculateCreationStats","forEach","Array","isArray","tag","tagName","now","oneWeekAgo","getTime","oneMonthAgo","createdLastWeek","createdLastMonth","updatedLastWeek","updatedLastMonth","key","get","expires","set","clearCache","clear","getCacheStats","size","from","createWorkflowResources"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/workflowResources.ts"],"sourcesContent":["/**\n * Workflow Resources for n8n MCP Server\n *\n * Provides MCP resources for accessing n8n workflow data including definitions,\n * metadata, and configuration. Supports both static workflow access and dynamic\n * workflow discovery.\n */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n/**\n * Workflow resource configuration\n */\nexport interface WorkflowResourceConfig {\n  /** Base URI prefix for workflow resources */\n  baseUri?: string;\n\n  /** Maximum number of workflows to include in listings */\n  maxWorkflows?: number;\n\n  /** Whether to include inactive workflows */\n  includeInactive?: boolean;\n\n  /** Whether to include workflow execution history */\n  includeExecutions?: boolean;\n\n  /** Cache duration for workflow data (ms) */\n  cacheDuration?: number;\n}\n\n/**\n * Workflow resource manager\n *\n * Manages workflow-related MCP resources including individual workflow access,\n * workflow listings, and workflow metadata.\n */\nexport class WorkflowResourceManager {\n  private config: Required<WorkflowResourceConfig>;\n  private cache = new Map<string, { data: any; expires: number }>();\n\n  constructor(config: WorkflowResourceConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://workflows',\n      maxWorkflows: 100,\n      includeInactive: true,\n      includeExecutions: false,\n      cacheDuration: 5 * 60 * 1000, // 5 minutes\n      ...config,\n    };\n  }\n\n  /**\n   * Register workflow resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Individual workflow resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}`,\n      name: 'n8n Workflow',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n workflow',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflow = await this.getWorkflowResource(client, id);\n        return {\n          text: JSON.stringify(workflow, null, 2),\n        };\n      },\n    });\n\n    // Workflow listing resource\n    server.addResource({\n      uri: `${this.config.baseUri}/list`,\n      name: 'n8n Workflow List',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflows = await this.getWorkflowListResource(client);\n        return {\n          text: JSON.stringify(workflows, null, 2),\n        };\n      },\n    });\n\n    // Active workflows resource\n    server.addResource({\n      uri: `${this.config.baseUri}/active`,\n      name: 'n8n Active Workflows',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const activeWorkflows = await this.getActiveWorkflowsResource(client);\n        return {\n          text: JSON.stringify(activeWorkflows, null, 2),\n        };\n      },\n    });\n\n    // Workflow statistics resource\n    server.addResource({\n      uri: `${this.config.baseUri}/stats`,\n      name: 'n8n Workflow Statistics',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const stats = await this.getWorkflowStatsResource(client);\n        return {\n          text: JSON.stringify(stats, null, 2),\n        };\n      },\n    });\n\n    // Workflow resource template for pattern matching\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{workflowId}`,\n      name: 'n8n Workflow by ID',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'workflowId',\n          description: 'The ID of the n8n workflow',\n          required: true,\n        },\n      ],\n      load: async ({ workflowId }: { workflowId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const workflow = await this.getWorkflowResource(client, workflowId);\n        return {\n          text: JSON.stringify(workflow, null, 2),\n        };\n      },\n    });\n\n    console.log('ðŸ“„ Workflow resources registered');\n  }\n\n  /**\n   * Get individual workflow resource\n   */\n  private async getWorkflowResource(client: N8nClient, workflowId: string): Promise<any> {\n    const cacheKey = `workflow:${workflowId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflow = await client.getWorkflow(workflowId);\n\n      // Enhance workflow data with metadata\n      const enhancedWorkflow = {\n        ...workflow,\n        metadata: {\n          id: workflow.id,\n          name: workflow.name,\n          active: workflow.active,\n          tags: workflow.tags || [],\n          createdAt: workflow.createdAt,\n          updatedAt: workflow.updatedAt,\n          nodeCount: workflow.nodes?.length || 0,\n          connectionCount: workflow.connections ? Object.keys(workflow.connections).length : 0,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/${workflowId}`,\n          type: 'n8n-workflow',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, enhancedWorkflow);\n      return enhancedWorkflow;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow ${workflowId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow list resource\n   */\n  private async getWorkflowListResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:list';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      const workflowList = {\n        workflows: workflows.data.map(workflow => ({\n          id: workflow.id,\n          name: workflow.name,\n          active: workflow.active,\n          tags: workflow.tags || [],\n          createdAt: workflow.createdAt,\n          updatedAt: workflow.updatedAt,\n          uri: `${this.config.baseUri}/${workflow.id}`,\n        })),\n        metadata: {\n          total: workflows.data.length, // API doesn't provide total count\n          returned: workflows.data.length,\n          includeInactive: this.config.includeInactive,\n          maxWorkflows: this.config.maxWorkflows,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/list`,\n          type: 'n8n-workflow-list',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, workflowList);\n      return workflowList;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow list: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get active workflows resource\n   */\n  private async getActiveWorkflowsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:active';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      // Filter for active workflows client-side\n      const activeWorkflowsData = workflows.data.filter(w => w.active);\n\n      const activeWorkflows = {\n        activeWorkflows: activeWorkflowsData.map(workflow => ({\n          id: workflow.id,\n          name: workflow.name,\n          tags: workflow.tags || [],\n          lastExecution: workflow.updatedAt,\n          uri: `${this.config.baseUri}/${workflow.id}`,\n        })),\n        metadata: {\n          total: activeWorkflowsData.length,\n          returned: activeWorkflowsData.length,\n          activeOnly: true,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/active`,\n          type: 'n8n-active-workflows',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, activeWorkflows);\n      return activeWorkflows;\n    } catch (error) {\n      throw new Error(\n        `Failed to load active workflows: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow statistics resource\n   */\n  private async getWorkflowStatsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'workflows:stats';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const workflows = await client.getWorkflows({\n        limit: this.config.maxWorkflows,\n      });\n\n      const stats = {\n        totalWorkflows: workflows.data.length,\n        activeWorkflows: workflows.data.filter(w => w.active).length,\n        inactiveWorkflows: workflows.data.filter(w => !w.active).length,\n        tagUsage: this.calculateTagUsage(workflows.data),\n        creationStats: this.calculateCreationStats(workflows.data),\n        resourceInfo: {\n          uri: `${this.config.baseUri}/stats`,\n          type: 'n8n-workflow-stats',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, stats);\n      return stats;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow statistics: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Calculate tag usage statistics\n   */\n  private calculateTagUsage(workflows: any[]): Record<string, number> {\n    const tagUsage: Record<string, number> = {};\n\n    workflows.forEach(workflow => {\n      if (workflow.tags && Array.isArray(workflow.tags)) {\n        workflow.tags.forEach((tag: any) => {\n          const tagName = typeof tag === 'string' ? tag : tag.name;\n          tagUsage[tagName] = (tagUsage[tagName] || 0) + 1;\n        });\n      }\n    });\n\n    return tagUsage;\n  }\n\n  /**\n   * Calculate creation statistics\n   */\n  private calculateCreationStats(workflows: any[]): any {\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const oneMonthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n\n    return {\n      createdLastWeek: workflows.filter(w => new Date(w.createdAt) > oneWeekAgo).length,\n      createdLastMonth: workflows.filter(w => new Date(w.createdAt) > oneMonthAgo).length,\n      updatedLastWeek: workflows.filter(w => new Date(w.updatedAt) > oneWeekAgo).length,\n      updatedLastMonth: workflows.filter(w => new Date(w.updatedAt) > oneMonthAgo).length,\n    };\n  }\n\n  /**\n   * Get cached data if not expired\n   */\n  private getCachedData(key: string): any | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expires > Date.now()) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  /**\n   * Set cached data with expiration\n   */\n  private setCachedData(key: string, data: any): void {\n    if (this.config.cacheDuration > 0) {\n      this.cache.set(key, {\n        data,\n        expires: Date.now() + this.config.cacheDuration,\n      });\n    }\n  }\n\n  /**\n   * Clear resource cache\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n/**\n * Create workflow resource manager\n */\nexport function createWorkflowResources(config?: WorkflowResourceConfig): WorkflowResourceManager {\n  return new WorkflowResourceManager(config);\n}\n"],"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","ignoreList":[]}