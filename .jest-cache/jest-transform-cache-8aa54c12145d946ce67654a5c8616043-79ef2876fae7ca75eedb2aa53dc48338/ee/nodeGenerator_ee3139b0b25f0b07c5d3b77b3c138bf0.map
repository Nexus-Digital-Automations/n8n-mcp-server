{"version":3,"names":["cov_16n10e6e1o","actualCoverage","s","N8nNodeGenerator","defaultConfig","nodeNamePrefix","defaultIcon","defaultGroup","credentialName","enableBinaryData","enableResourceAccess","typeMapping","string","number","integer","boolean","array","object","generateNodeDefinition","context","f","tool","config","mergedConfig","nodeDefinition","createNodeDefinition","validation","validateNodeDefinition","success","b","undefined","errors","warnings","error","Error","message","nodeName","generateNodeName","name","displayName","generateDisplayName","icon","group","version","description","defaults","inputs","outputs","credentials","required","properties","generateNodeProperties","hasMultipleOperations","push","createOperationProperty","paramName","paramDef","Object","entries","inputSchema","property","convertParameterToProperty","createBinaryDataProperty","createResourceAccessProperty","param","isRequired","includes","formatDisplayName","enum","length","type","options","map","value","formatOptionName","default","n8nType","mapMCPTypeToN8N","addTypeSpecificOptions","mcpType","mapping","format","typeOptions","password","placeholder","minLength","maxLength","pattern","minimum","maximum","minValue","maxValue","rows","items","trim","propNames","keys","join","toolName","prefix","replace","_","char","toUpperCase","charAt","slice","String","displayOptions","show","operation","test","propertyNames","Set","prop","has","add","propertyCount","generateMultipleNodes","getSupportedMCPTypes","getAvailableN8nTypes","exports"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/nodeGenerator.ts"],"sourcesContent":["import {\n  MCPTool,\n  MCPToolProperty,\n  N8nNodeTypeDescription,\n  N8nNodeProperty,\n  N8nPropertyType,\n  MCPConversionConfig,\n  ConversionResult,\n  ConversionContext,\n} from '../types/mcpTypes.js';\n\nexport class N8nNodeGenerator {\n  private readonly defaultConfig: MCPConversionConfig = {\n    nodeNamePrefix: 'MCP',\n    defaultIcon: 'fa:cog',\n    defaultGroup: ['transform'],\n    credentialName: 'mcpServerApi',\n    enableBinaryData: true,\n    enableResourceAccess: true,\n    typeMapping: {\n      string: 'string',\n      number: 'number',\n      integer: 'number',\n      boolean: 'boolean',\n      array: 'json',\n      object: 'json',\n    },\n  };\n\n  /**\n   * Generate n8n node definition from MCP tool\n   */\n  generateNodeDefinition(context: ConversionContext): ConversionResult {\n    const { tool, config } = context;\n    const mergedConfig = { ...this.defaultConfig, ...config };\n\n    try {\n      const nodeDefinition = this.createNodeDefinition(tool, mergedConfig);\n      const validation = this.validateNodeDefinition(nodeDefinition);\n\n      return {\n        success: validation.success,\n        nodeDefinition: validation.success ? nodeDefinition : undefined,\n        errors: validation.errors,\n        warnings: validation.warnings,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        errors: [error instanceof Error ? error.message : 'Unknown error during node generation'],\n      };\n    }\n  }\n\n  /**\n   * Create the complete n8n node definition\n   */\n  private createNodeDefinition(tool: MCPTool, config: MCPConversionConfig): N8nNodeTypeDescription {\n    const nodeName = this.generateNodeName(tool.name, config.nodeNamePrefix);\n    const displayName = this.generateDisplayName(tool.name, config.nodeNamePrefix);\n\n    return {\n      displayName,\n      name: nodeName,\n      icon: config.defaultIcon || this.defaultConfig.defaultIcon!,\n      group: config.defaultGroup || this.defaultConfig.defaultGroup!,\n      version: [1],\n      description: tool.description,\n      defaults: {\n        name: displayName,\n      },\n      inputs: ['main'],\n      outputs: ['main'],\n      credentials: config.credentialName\n        ? [\n            {\n              name: config.credentialName,\n              required: true,\n            },\n          ]\n        : undefined,\n      properties: this.generateNodeProperties(tool, config),\n    };\n  }\n\n  /**\n   * Generate node properties from MCP tool schema\n   */\n  private generateNodeProperties(tool: MCPTool, config: MCPConversionConfig): N8nNodeProperty[] {\n    const properties: N8nNodeProperty[] = [];\n\n    // Add operation selector if there are multiple operations\n    if (this.hasMultipleOperations(tool)) {\n      properties.push(this.createOperationProperty());\n    }\n\n    // Convert MCP tool parameters to n8n properties\n    for (const [paramName, paramDef] of Object.entries(tool.inputSchema.properties)) {\n      const property = this.convertParameterToProperty(\n        paramName,\n        paramDef,\n        tool.inputSchema.required || [],\n        config\n      );\n      if (property) {\n        properties.push(property);\n      }\n    }\n\n    // Add additional options\n    if (config.enableBinaryData) {\n      properties.push(this.createBinaryDataProperty());\n    }\n\n    if (config.enableResourceAccess) {\n      properties.push(this.createResourceAccessProperty());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Convert MCP parameter to n8n property\n   */\n  private convertParameterToProperty(\n    name: string,\n    param: MCPToolProperty,\n    required: string[],\n    config: MCPConversionConfig\n  ): N8nNodeProperty | null {\n    const isRequired = required.includes(name);\n    const displayName = this.formatDisplayName(name);\n\n    // Handle enum types as options\n    if (param.enum && param.enum.length > 0) {\n      return {\n        displayName,\n        name,\n        type: 'options',\n        options: param.enum.map(value => ({\n          name: this.formatOptionName(value),\n          value,\n        })),\n        default: param.default !== undefined ? param.default : param.enum[0],\n        description: param.description,\n        required: isRequired,\n      };\n    }\n\n    // Map MCP types to n8n types\n    const n8nType = this.mapMCPTypeToN8N(param.type, config);\n\n    const property: N8nNodeProperty = {\n      displayName,\n      name,\n      type: n8nType,\n      description: param.description,\n      required: isRequired,\n    };\n\n    // Add default value if provided\n    if (param.default !== undefined) {\n      property.default = param.default;\n    }\n\n    // Add type-specific options\n    this.addTypeSpecificOptions(property, param);\n\n    return property;\n  }\n\n  /**\n   * Map MCP property type to n8n property type\n   */\n  private mapMCPTypeToN8N(\n    mcpType: MCPToolProperty['type'],\n    config: MCPConversionConfig\n  ): N8nPropertyType {\n    const mapping = config.typeMapping || this.defaultConfig.typeMapping!;\n    return (mapping[mcpType] as N8nPropertyType) || 'string';\n  }\n\n  /**\n   * Add type-specific options to n8n property\n   */\n  private addTypeSpecificOptions(property: N8nNodeProperty, param: MCPToolProperty): void {\n    switch (param.type) {\n      case 'string':\n        if (param.format === 'password') {\n          property.typeOptions = { password: true };\n        }\n        if (param.format === 'email') {\n          property.placeholder = 'user@example.com';\n        }\n        if (param.format === 'uri') {\n          property.placeholder = 'https://example.com';\n        }\n        if (param.minLength || param.maxLength) {\n          property.typeOptions = {\n            ...property.typeOptions,\n            minLength: param.minLength,\n            maxLength: param.maxLength,\n          };\n        }\n        if (param.pattern) {\n          property.typeOptions = {\n            ...property.typeOptions,\n            pattern: param.pattern,\n          };\n        }\n        break;\n\n      case 'number':\n      case 'integer':\n        if (param.minimum !== undefined || param.maximum !== undefined) {\n          property.typeOptions = {\n            minValue: param.minimum,\n            maxValue: param.maximum,\n          };\n        }\n        break;\n\n      case 'array':\n        property.type = 'json';\n        property.typeOptions = {\n          rows: 4,\n        };\n        if (param.items) {\n          property.description =\n            `${property.description || ''} (Array of ${param.items.type})`.trim();\n        }\n        break;\n\n      case 'object':\n        property.type = 'json';\n        property.typeOptions = {\n          rows: 6,\n        };\n        if (param.properties) {\n          const propNames = Object.keys(param.properties);\n          if (propNames.length <= 3) {\n            property.description =\n              `${property.description || ''} (Object with: ${propNames.join(', ')})`.trim();\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * Generate valid n8n node name\n   */\n  private generateNodeName(toolName: string, prefix?: string): string {\n    // Convert to camelCase and ensure valid identifier\n    let name = toolName\n      .replace(/[^a-zA-Z0-9_-]/g, '_')\n      .replace(/^[0-9]/, 'n$&')\n      .replace(/_+/g, '_')\n      .replace(/^_|_$/g, '');\n\n    // Convert to camelCase\n    name = name.replace(/_(.)/g, (_, char) => char.toUpperCase());\n\n    // Add prefix if provided\n    if (prefix) {\n      name = `${prefix}${name.charAt(0).toUpperCase()}${name.slice(1)}`;\n    }\n\n    return name;\n  }\n\n  /**\n   * Generate display name for node\n   */\n  private generateDisplayName(toolName: string, prefix?: string): string {\n    let displayName = toolName.replace(/[_-]/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase());\n\n    if (prefix) {\n      displayName = `${prefix} ${displayName}`;\n    }\n\n    return displayName;\n  }\n\n  /**\n   * Format parameter name for display\n   */\n  private formatDisplayName(paramName: string): string {\n    return paramName.replace(/[_-]/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase());\n  }\n\n  /**\n   * Format option name for display\n   */\n  private formatOptionName(value: unknown): string {\n    if (typeof value === 'string') {\n      return value.replace(/[_-]/g, ' ').replace(/\\b\\w/g, char => char.toUpperCase());\n    }\n    return String(value);\n  }\n\n  /**\n   * Check if tool has multiple operations (placeholder for future enhancement)\n   */\n  private hasMultipleOperations(tool: MCPTool): boolean {\n    // For now, assume single operation per tool\n    // In future versions, this could be enhanced to detect operation patterns\n    return false;\n  }\n\n  /**\n   * Create operation selection property\n   */\n  private createOperationProperty(): N8nNodeProperty {\n    return {\n      displayName: 'Operation',\n      name: 'operation',\n      type: 'options',\n      options: [\n        {\n          name: 'Execute',\n          value: 'execute',\n        },\n      ],\n      default: 'execute',\n      description: 'The operation to perform',\n      required: true,\n    };\n  }\n\n  /**\n   * Create binary data handling property\n   */\n  private createBinaryDataProperty(): N8nNodeProperty {\n    return {\n      displayName: 'Binary Data',\n      name: 'binaryData',\n      type: 'boolean',\n      default: false,\n      description: 'Whether to handle binary data in the response',\n      displayOptions: {\n        show: {\n          operation: ['execute'],\n        },\n      },\n    };\n  }\n\n  /**\n   * Create resource access property\n   */\n  private createResourceAccessProperty(): N8nNodeProperty {\n    return {\n      displayName: 'Enable Resource Access',\n      name: 'enableResources',\n      type: 'boolean',\n      default: false,\n      description: 'Allow the tool to access MCP server resources',\n      displayOptions: {\n        show: {\n          operation: ['execute'],\n        },\n      },\n    };\n  }\n\n  /**\n   * Validate generated node definition\n   */\n  private validateNodeDefinition(nodeDefinition: N8nNodeTypeDescription): ConversionResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate required fields\n    if (!nodeDefinition.displayName || nodeDefinition.displayName.length < 3) {\n      errors.push('Node display name must be at least 3 characters long');\n    }\n\n    if (!nodeDefinition.name || !/^[a-zA-Z][a-zA-Z0-9]*$/.test(nodeDefinition.name)) {\n      errors.push('Node name must be a valid identifier starting with a letter');\n    }\n\n    if (!nodeDefinition.description || nodeDefinition.description.length < 10) {\n      warnings.push(\n        'Node description should be at least 10 characters long for better user experience'\n      );\n    }\n\n    // Validate properties\n    if (!nodeDefinition.properties || nodeDefinition.properties.length === 0) {\n      warnings.push('Node has no configurable properties');\n    }\n\n    // Check for property name conflicts\n    const propertyNames = new Set<string>();\n    for (const prop of nodeDefinition.properties || []) {\n      if (propertyNames.has(prop.name)) {\n        errors.push(`Duplicate property name: ${prop.name}`);\n      }\n      propertyNames.add(prop.name);\n\n      // Validate property names\n      if (!/^[a-zA-Z][a-zA-Z0-9_]*$/.test(prop.name)) {\n        errors.push(`Invalid property name: ${prop.name}`);\n      }\n    }\n\n    // Check complexity\n    const propertyCount = nodeDefinition.properties?.length || 0;\n    if (propertyCount > 20) {\n      warnings.push(\n        `Node has ${propertyCount} properties. Consider grouping related properties for better UX.`\n      );\n    }\n\n    return {\n      success: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Generate multiple node definitions for complex tools\n   */\n  generateMultipleNodes(context: ConversionContext): ConversionResult[] {\n    // For complex tools, this could split operations into multiple nodes\n    // For now, return single node generation\n    return [this.generateNodeDefinition(context)];\n  }\n\n  /**\n   * Get supported MCP types\n   */\n  getSupportedMCPTypes(): MCPToolProperty['type'][] {\n    return ['string', 'number', 'integer', 'boolean', 'array', 'object'];\n  }\n\n  /**\n   * Get available n8n property types\n   */\n  getAvailableN8nTypes(): N8nPropertyType[] {\n    return [\n      'string',\n      'number',\n      'boolean',\n      'options',\n      'multiOptions',\n      'json',\n      'dateTime',\n      'collection',\n      'fixedCollection',\n      'resourceLocator',\n    ];\n  }\n}\n"],"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","ignoreList":[]}