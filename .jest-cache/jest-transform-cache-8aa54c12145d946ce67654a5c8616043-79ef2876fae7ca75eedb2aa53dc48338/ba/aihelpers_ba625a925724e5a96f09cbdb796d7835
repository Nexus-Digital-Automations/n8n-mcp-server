5b2e3ebe35434a9d7c343e71146c32bc
"use strict";

/* istanbul ignore next */
function cov_1mdh9u53o7() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-helpers.ts";
  var hash = "21c759e2c135fc8e08f129e1cc58ec4d3d45ba6b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-helpers.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 50
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 61
        }
      },
      "5": {
        start: {
          line: 7,
          column: 30
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "6": {
        start: {
          line: 9,
          column: 31
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "7": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "8": {
        start: {
          line: 19,
          column: 31
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "9": {
        start: {
          line: 24,
          column: 35
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "10": {
        start: {
          line: 30,
          column: 40
        },
        end: {
          line: 37,
          column: 2
        }
      },
      "11": {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 23
        }
      },
      "12": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 74
        }
      },
      "13": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 35
        }
      },
      "14": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 52
        }
      },
      "15": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 64
        }
      },
      "16": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 85
        }
      },
      "17": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "18": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 97
        }
      },
      "19": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 52,
          column: 11
        }
      },
      "20": {
        start: {
          line: 49,
          column: 31
        },
        end: {
          line: 49,
          column: 64
        }
      },
      "21": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 123
        }
      },
      "22": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 61
        }
      },
      "23": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 53,
          column: 26
        }
      },
      "24": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "25": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 56,
          column: 104
        }
      },
      "26": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 63,
          column: 11
        }
      },
      "27": {
        start: {
          line: 58,
          column: 31
        },
        end: {
          line: 58,
          column: 67
        }
      },
      "28": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 123
        }
      },
      "29": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 62,
          column: 13
        }
      },
      "30": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "31": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 26
        }
      },
      "32": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "33": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 58
        }
      },
      "34": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 11
        }
      },
      "35": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 53
        }
      },
      "36": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 26
        }
      },
      "37": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "38": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 50
        }
      },
      "39": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 81,
          column: 11
        }
      },
      "40": {
        start: {
          line: 76,
          column: 26
        },
        end: {
          line: 76,
          column: 104
        }
      },
      "41": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 65
        }
      },
      "42": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "43": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 68
        }
      },
      "44": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 31
        }
      },
      "45": {
        start: {
          line: 86,
          column: 26
        },
        end: {
          line: 86,
          column: 79
        }
      },
      "46": {
        start: {
          line: 87,
          column: 18
        },
        end: {
          line: 87,
          column: 61
        }
      },
      "47": {
        start: {
          line: 88,
          column: 21
        },
        end: {
          line: 91,
          column: 5
        }
      },
      "48": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 98,
          column: 5
        }
      },
      "49": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 37
        }
      },
      "50": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 96,
          column: 11
        }
      },
      "51": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 95,
          column: 48
        }
      },
      "52": {
        start: {
          line: 97,
          column: 8
        },
        end: {
          line: 97,
          column: 26
        }
      },
      "53": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 105,
          column: 5
        }
      },
      "54": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 42
        }
      },
      "55": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "56": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 102,
          column: 53
        }
      },
      "57": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 26
        }
      },
      "58": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 112,
          column: 5
        }
      },
      "59": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 55
        }
      },
      "60": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 111,
          column: 11
        }
      },
      "61": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 83
        }
      },
      "62": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 110,
          column: 56
        }
      },
      "63": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 113,
          column: 31
        }
      },
      "64": {
        start: {
          line: 116,
          column: 21
        },
        end: {
          line: 116,
          column: 81
        }
      },
      "65": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 123,
          column: 5
        }
      },
      "66": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 118,
          column: 60
        }
      },
      "67": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 11
        }
      },
      "68": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 48
        }
      },
      "69": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 26
        }
      },
      "70": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "71": {
        start: {
          line: 125,
          column: 8
        },
        end: {
          line: 125,
          column: 55
        }
      },
      "72": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "73": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 57
        }
      },
      "74": {
        start: {
          line: 130,
          column: 31
        },
        end: {
          line: 130,
          column: 65
        }
      },
      "75": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 57
        }
      },
      "76": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "77": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 133,
          column: 111
        }
      },
      "78": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 62
        }
      },
      "79": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "80": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 71
        }
      },
      "81": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 30
        }
      },
      "82": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      "83": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 51
        }
      },
      "84": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 11
        }
      },
      "85": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 81
        }
      },
      "86": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 31
        }
      },
      "87": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 151,
          column: 61
        }
      },
      "88": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 186,
          column: 7
        }
      },
      "89": {
        start: {
          line: 165,
          column: 27
        },
        end: {
          line: 165,
          column: 38
        }
      },
      "90": {
        start: {
          line: 166,
          column: 12
        },
        end: {
          line: 168,
          column: 13
        }
      },
      "91": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 167,
          column: 104
        }
      },
      "92": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 184,
          column: 13
        }
      },
      "93": {
        start: {
          line: 171,
          column: 33
        },
        end: {
          line: 171,
          column: 74
        }
      },
      "94": {
        start: {
          line: 173,
          column: 34
        },
        end: {
          line: 173,
          column: 61
        }
      },
      "95": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 54
        }
      },
      "96": {
        start: {
          line: 176,
          column: 33
        },
        end: {
          line: 176,
          column: 71
        }
      },
      "97": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 56
        }
      },
      "98": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "99": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 98
        }
      },
      "100": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 95
        }
      },
      "101": {
        start: {
          line: 188,
          column: 4
        },
        end: {
          line: 230,
          column: 7
        }
      },
      "102": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 200,
          column: 38
        }
      },
      "103": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 203,
          column: 13
        }
      },
      "104": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 104
        }
      },
      "105": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 228,
          column: 13
        }
      },
      "106": {
        start: {
          line: 205,
          column: 33
        },
        end: {
          line: 205,
          column: 74
        }
      },
      "107": {
        start: {
          line: 206,
          column: 30
        },
        end: {
          line: 206,
          column: 50
        }
      },
      "108": {
        start: {
          line: 207,
          column: 35
        },
        end: {
          line: 207,
          column: 78
        }
      },
      "109": {
        start: {
          line: 207,
          column: 51
        },
        end: {
          line: 207,
          column: 77
        }
      },
      "110": {
        start: {
          line: 208,
          column: 35
        },
        end: {
          line: 208,
          column: 78
        }
      },
      "111": {
        start: {
          line: 208,
          column: 51
        },
        end: {
          line: 208,
          column: 77
        }
      },
      "112": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 211,
          column: 17
        }
      },
      "113": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 106
        }
      },
      "114": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 214,
          column: 17
        }
      },
      "115": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 106
        }
      },
      "116": {
        start: {
          line: 216,
          column: 34
        },
        end: {
          line: 216,
          column: 61
        }
      },
      "117": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 54
        }
      },
      "118": {
        start: {
          line: 218,
          column: 39
        },
        end: {
          line: 218,
          column: 88
        }
      },
      "119": {
        start: {
          line: 218,
          column: 60
        },
        end: {
          line: 218,
          column: 87
        }
      },
      "120": {
        start: {
          line: 219,
          column: 39
        },
        end: {
          line: 219,
          column: 88
        }
      },
      "121": {
        start: {
          line: 219,
          column: 60
        },
        end: {
          line: 219,
          column: 87
        }
      },
      "122": {
        start: {
          line: 220,
          column: 31
        },
        end: {
          line: 220,
          column: 124
        }
      },
      "123": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 57
        }
      },
      "124": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 226,
          column: 17
        }
      },
      "125": {
        start: {
          line: 225,
          column: 20
        },
        end: {
          line: 225,
          column: 108
        }
      },
      "126": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 105
        }
      },
      "127": {
        start: {
          line: 232,
          column: 4
        },
        end: {
          line: 287,
          column: 7
        }
      },
      "128": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 38
        }
      },
      "129": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "130": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 104
        }
      },
      "131": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "132": {
        start: {
          line: 249,
          column: 33
        },
        end: {
          line: 249,
          column: 74
        }
      },
      "133": {
        start: {
          line: 250,
          column: 30
        },
        end: {
          line: 250,
          column: 50
        }
      },
      "134": {
        start: {
          line: 251,
          column: 35
        },
        end: {
          line: 251,
          column: 72
        }
      },
      "135": {
        start: {
          line: 251,
          column: 51
        },
        end: {
          line: 251,
          column: 71
        }
      },
      "136": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 254,
          column: 17
        }
      },
      "137": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 93
        }
      },
      "138": {
        start: {
          line: 256,
          column: 34
        },
        end: {
          line: 256,
          column: 61
        }
      },
      "139": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 54
        }
      },
      "140": {
        start: {
          line: 258,
          column: 37
        },
        end: {
          line: 258,
          column: 86
        }
      },
      "141": {
        start: {
          line: 258,
          column: 58
        },
        end: {
          line: 258,
          column: 85
        }
      },
      "142": {
        start: {
          line: 259,
          column: 33
        },
        end: {
          line: 259,
          column: 93
        }
      },
      "143": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 277,
          column: 17
        }
      },
      "144": {
        start: {
          line: 261,
          column: 68
        },
        end: {
          line: 261,
          column: 98
        }
      },
      "145": {
        start: {
          line: 262,
          column: 46
        },
        end: {
          line: 262,
          column: 74
        }
      },
      "146": {
        start: {
          line: 263,
          column: 39
        },
        end: {
          line: 263,
          column: 40
        }
      },
      "147": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 269,
          column: 21
        }
      },
      "148": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "149": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 266,
          column: 81
        }
      },
      "150": {
        start: {
          line: 267,
          column: 28
        },
        end: {
          line: 267,
          column: 43
        }
      },
      "151": {
        start: {
          line: 270,
          column: 20
        },
        end: {
          line: 276,
          column: 21
        }
      },
      "152": {
        start: {
          line: 271,
          column: 24
        },
        end: {
          line: 273,
          column: 27
        }
      },
      "153": {
        start: {
          line: 272,
          column: 50
        },
        end: {
          line: 272,
          column: 116
        }
      },
      "154": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 275,
          column: 125
        }
      },
      "155": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 278,
          column: 57
        }
      },
      "156": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 283,
          column: 17
        }
      },
      "157": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 100
        }
      },
      "158": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 97
        }
      },
      "159": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 347,
          column: 7
        }
      },
      "160": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 38
        }
      },
      "161": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "162": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 104
        }
      },
      "163": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 345,
          column: 13
        }
      },
      "164": {
        start: {
          line: 306,
          column: 33
        },
        end: {
          line: 306,
          column: 74
        }
      },
      "165": {
        start: {
          line: 308,
          column: 34
        },
        end: {
          line: 308,
          column: 61
        }
      },
      "166": {
        start: {
          line: 309,
          column: 41
        },
        end: {
          line: 309,
          column: 94
        }
      },
      "167": {
        start: {
          line: 310,
          column: 41
        },
        end: {
          line: 310,
          column: 100
        }
      },
      "168": {
        start: {
          line: 311,
          column: 34
        },
        end: {
          line: 311,
          column: 69
        }
      },
      "169": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 96
        }
      },
      "170": {
        start: {
          line: 313,
          column: 57
        },
        end: {
          line: 313,
          column: 94
        }
      },
      "171": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 316,
          column: 17
        }
      },
      "172": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 315,
          column: 133
        }
      },
      "173": {
        start: {
          line: 315,
          column: 61
        },
        end: {
          line: 315,
          column: 131
        }
      },
      "174": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 319,
          column: 17
        }
      },
      "175": {
        start: {
          line: 318,
          column: 20
        },
        end: {
          line: 318,
          column: 138
        }
      },
      "176": {
        start: {
          line: 320,
          column: 33
        },
        end: {
          line: 323,
          column: 17
        }
      },
      "177": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 337,
          column: 19
        }
      },
      "178": {
        start: {
          line: 325,
          column: 39
        },
        end: {
          line: 325,
          column: 72
        }
      },
      "179": {
        start: {
          line: 326,
          column: 39
        },
        end: {
          line: 326,
          column: 92
        }
      },
      "180": {
        start: {
          line: 326,
          column: 65
        },
        end: {
          line: 326,
          column: 91
        }
      },
      "181": {
        start: {
          line: 327,
          column: 39
        },
        end: {
          line: 327,
          column: 92
        }
      },
      "182": {
        start: {
          line: 327,
          column: 65
        },
        end: {
          line: 327,
          column: 91
        }
      },
      "183": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 135
        }
      },
      "184": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 67
        }
      },
      "185": {
        start: {
          line: 330,
          column: 20
        },
        end: {
          line: 330,
          column: 95
        }
      },
      "186": {
        start: {
          line: 331,
          column: 20
        },
        end: {
          line: 331,
          column: 69
        }
      },
      "187": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 332,
          column: 98
        }
      },
      "188": {
        start: {
          line: 333,
          column: 20
        },
        end: {
          line: 335,
          column: 21
        }
      },
      "189": {
        start: {
          line: 334,
          column: 24
        },
        end: {
          line: 334,
          column: 119
        }
      },
      "190": {
        start: {
          line: 336,
          column: 20
        },
        end: {
          line: 336,
          column: 38
        }
      },
      "191": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 43
        }
      },
      "192": {
        start: {
          line: 341,
          column: 16
        },
        end: {
          line: 343,
          column: 17
        }
      },
      "193": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 342,
          column: 113
        }
      },
      "194": {
        start: {
          line: 344,
          column: 16
        },
        end: {
          line: 344,
          column: 110
        }
      },
      "195": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 443,
          column: 7
        }
      },
      "196": {
        start: {
          line: 361,
          column: 27
        },
        end: {
          line: 361,
          column: 38
        }
      },
      "197": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "198": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 104
        }
      },
      "199": {
        start: {
          line: 365,
          column: 12
        },
        end: {
          line: 441,
          column: 13
        }
      },
      "200": {
        start: {
          line: 366,
          column: 33
        },
        end: {
          line: 366,
          column: 74
        }
      },
      "201": {
        start: {
          line: 368,
          column: 34
        },
        end: {
          line: 368,
          column: 61
        }
      },
      "202": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 54
        }
      },
      "203": {
        start: {
          line: 371,
          column: 33
        },
        end: {
          line: 371,
          column: 71
        }
      },
      "204": {
        start: {
          line: 373,
          column: 33
        },
        end: {
          line: 373,
          column: 71
        }
      },
      "205": {
        start: {
          line: 374,
          column: 33
        },
        end: {
          line: 380,
          column: 17
        }
      },
      "206": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 392,
          column: 17
        }
      },
      "207": {
        start: {
          line: 383,
          column: 20
        },
        end: {
          line: 383,
          column: 70
        }
      },
      "208": {
        start: {
          line: 384,
          column: 20
        },
        end: {
          line: 387,
          column: 23
        }
      },
      "209": {
        start: {
          line: 385,
          column: 24
        },
        end: {
          line: 385,
          column: 102
        }
      },
      "210": {
        start: {
          line: 386,
          column: 24
        },
        end: {
          line: 386,
          column: 81
        }
      },
      "211": {
        start: {
          line: 388,
          column: 20
        },
        end: {
          line: 390,
          column: 21
        }
      },
      "212": {
        start: {
          line: 389,
          column: 24
        },
        end: {
          line: 389,
          column: 142
        }
      },
      "213": {
        start: {
          line: 391,
          column: 20
        },
        end: {
          line: 391,
          column: 38
        }
      },
      "214": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 407,
          column: 17
        }
      },
      "215": {
        start: {
          line: 395,
          column: 20
        },
        end: {
          line: 395,
          column: 71
        }
      },
      "216": {
        start: {
          line: 396,
          column: 47
        },
        end: {
          line: 396,
          column: 147
        }
      },
      "217": {
        start: {
          line: 396,
          column: 88
        },
        end: {
          line: 396,
          column: 146
        }
      },
      "218": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 402,
          column: 23
        }
      },
      "219": {
        start: {
          line: 398,
          column: 24
        },
        end: {
          line: 398,
          column: 68
        }
      },
      "220": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 401,
          column: 25
        }
      },
      "221": {
        start: {
          line: 400,
          column: 28
        },
        end: {
          line: 400,
          column: 78
        }
      },
      "222": {
        start: {
          line: 403,
          column: 20
        },
        end: {
          line: 405,
          column: 21
        }
      },
      "223": {
        start: {
          line: 404,
          column: 24
        },
        end: {
          line: 404,
          column: 80
        }
      },
      "224": {
        start: {
          line: 406,
          column: 20
        },
        end: {
          line: 406,
          column: 38
        }
      },
      "225": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 417,
          column: 17
        }
      },
      "226": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 410,
          column: 74
        }
      },
      "227": {
        start: {
          line: 411,
          column: 20
        },
        end: {
          line: 413,
          column: 23
        }
      },
      "228": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 412,
          column: 65
        }
      },
      "229": {
        start: {
          line: 414,
          column: 20
        },
        end: {
          line: 416,
          column: 21
        }
      },
      "230": {
        start: {
          line: 415,
          column: 24
        },
        end: {
          line: 415,
          column: 182
        }
      },
      "231": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 433,
          column: 17
        }
      },
      "232": {
        start: {
          line: 420,
          column: 47
        },
        end: {
          line: 420,
          column: 48
        }
      },
      "233": {
        start: {
          line: 422,
          column: 20
        },
        end: {
          line: 426,
          column: 21
        }
      },
      "234": {
        start: {
          line: 423,
          column: 24
        },
        end: {
          line: 425,
          column: 25
        }
      },
      "235": {
        start: {
          line: 424,
          column: 28
        },
        end: {
          line: 424,
          column: 51
        }
      },
      "236": {
        start: {
          line: 427,
          column: 20
        },
        end: {
          line: 432,
          column: 21
        }
      },
      "237": {
        start: {
          line: 428,
          column: 24
        },
        end: {
          line: 428,
          column: 130
        }
      },
      "238": {
        start: {
          line: 431,
          column: 24
        },
        end: {
          line: 431,
          column: 127
        }
      },
      "239": {
        start: {
          line: 434,
          column: 16
        },
        end: {
          line: 434,
          column: 43
        }
      },
      "240": {
        start: {
          line: 437,
          column: 16
        },
        end: {
          line: 439,
          column: 17
        }
      },
      "241": {
        start: {
          line: 438,
          column: 20
        },
        end: {
          line: 438,
          column: 99
        }
      },
      "242": {
        start: {
          line: 440,
          column: 16
        },
        end: {
          line: 440,
          column: 96
        }
      },
      "243": {
        start: {
          line: 445,
          column: 4
        },
        end: {
          line: 511,
          column: 7
        }
      },
      "244": {
        start: {
          line: 460,
          column: 27
        },
        end: {
          line: 460,
          column: 38
        }
      },
      "245": {
        start: {
          line: 461,
          column: 12
        },
        end: {
          line: 463,
          column: 13
        }
      },
      "246": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 104
        }
      },
      "247": {
        start: {
          line: 464,
          column: 12
        },
        end: {
          line: 509,
          column: 13
        }
      },
      "248": {
        start: {
          line: 465,
          column: 33
        },
        end: {
          line: 465,
          column: 74
        }
      },
      "249": {
        start: {
          line: 466,
          column: 34
        },
        end: {
          line: 466,
          column: 61
        }
      },
      "250": {
        start: {
          line: 467,
          column: 16
        },
        end: {
          line: 467,
          column: 54
        }
      },
      "251": {
        start: {
          line: 468,
          column: 33
        },
        end: {
          line: 468,
          column: 89
        }
      },
      "252": {
        start: {
          line: 469,
          column: 33
        },
        end: {
          line: 472,
          column: 17
        }
      },
      "253": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 476,
          column: 19
        }
      },
      "254": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 474,
          column: 87
        }
      },
      "255": {
        start: {
          line: 475,
          column: 20
        },
        end: {
          line: 475,
          column: 83
        }
      },
      "256": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 477,
          column: 34
        }
      },
      "257": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 487,
          column: 17
        }
      },
      "258": {
        start: {
          line: 479,
          column: 20
        },
        end: {
          line: 479,
          column: 61
        }
      },
      "259": {
        start: {
          line: 480,
          column: 20
        },
        end: {
          line: 485,
          column: 23
        }
      },
      "260": {
        start: {
          line: 481,
          column: 24
        },
        end: {
          line: 481,
          column: 93
        }
      },
      "261": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 484,
          column: 25
        }
      },
      "262": {
        start: {
          line: 483,
          column: 28
        },
        end: {
          line: 483,
          column: 100
        }
      },
      "263": {
        start: {
          line: 486,
          column: 20
        },
        end: {
          line: 486,
          column: 38
        }
      },
      "264": {
        start: {
          line: 488,
          column: 16
        },
        end: {
          line: 501,
          column: 17
        }
      },
      "265": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 489,
          column: 68
        }
      },
      "266": {
        start: {
          line: 490,
          column: 20
        },
        end: {
          line: 497,
          column: 23
        }
      },
      "267": {
        start: {
          line: 491,
          column: 44
        },
        end: {
          line: 491,
          column: 126
        }
      },
      "268": {
        start: {
          line: 492,
          column: 24
        },
        end: {
          line: 492,
          column: 87
        }
      },
      "269": {
        start: {
          line: 493,
          column: 24
        },
        end: {
          line: 493,
          column: 71
        }
      },
      "270": {
        start: {
          line: 494,
          column: 24
        },
        end: {
          line: 494,
          column: 73
        }
      },
      "271": {
        start: {
          line: 495,
          column: 24
        },
        end: {
          line: 495,
          column: 81
        }
      },
      "272": {
        start: {
          line: 496,
          column: 24
        },
        end: {
          line: 496,
          column: 42
        }
      },
      "273": {
        start: {
          line: 500,
          column: 20
        },
        end: {
          line: 500,
          column: 97
        }
      },
      "274": {
        start: {
          line: 502,
          column: 16
        },
        end: {
          line: 502,
          column: 43
        }
      },
      "275": {
        start: {
          line: 505,
          column: 16
        },
        end: {
          line: 507,
          column: 17
        }
      },
      "276": {
        start: {
          line: 506,
          column: 20
        },
        end: {
          line: 506,
          column: 99
        }
      },
      "277": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 508,
          column: 96
        }
      }
    },
    fnMap: {
      "0": {
        name: "formatWorkflowAnalysis",
        decl: {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 39,
            column: 31
          }
        },
        loc: {
          start: {
            line: 39,
            column: 42
          },
          end: {
            line: 84,
            column: 1
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 48,
            column: 46
          },
          end: {
            line: 48,
            column: 47
          }
        },
        loc: {
          start: {
            line: 48,
            column: 59
          },
          end: {
            line: 52,
            column: 9
          }
        },
        line: 48
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 57,
            column: 55
          },
          end: {
            line: 57,
            column: 56
          }
        },
        loc: {
          start: {
            line: 57,
            column: 71
          },
          end: {
            line: 63,
            column: 9
          }
        },
        line: 57
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 68,
            column: 49
          },
          end: {
            line: 68,
            column: 50
          }
        },
        loc: {
          start: {
            line: 68,
            column: 68
          },
          end: {
            line: 70,
            column: 9
          }
        },
        line: 68
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 75,
            column: 41
          },
          end: {
            line: 75,
            column: 42
          }
        },
        loc: {
          start: {
            line: 75,
            column: 55
          },
          end: {
            line: 81,
            column: 9
          }
        },
        line: 75
      },
      "5": {
        name: "formatCompatibilityResult",
        decl: {
          start: {
            line: 85,
            column: 9
          },
          end: {
            line: 85,
            column: 34
          }
        },
        loc: {
          start: {
            line: 85,
            column: 43
          },
          end: {
            line: 114,
            column: 1
          }
        },
        line: 85
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 94,
            column: 30
          },
          end: {
            line: 94,
            column: 31
          }
        },
        loc: {
          start: {
            line: 94,
            column: 44
          },
          end: {
            line: 96,
            column: 9
          }
        },
        line: 94
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 101,
            column: 35
          },
          end: {
            line: 101,
            column: 36
          }
        },
        loc: {
          start: {
            line: 101,
            column: 54
          },
          end: {
            line: 103,
            column: 9
          }
        },
        line: 101
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 108,
            column: 47
          },
          end: {
            line: 108,
            column: 48
          }
        },
        loc: {
          start: {
            line: 108,
            column: 61
          },
          end: {
            line: 111,
            column: 9
          }
        },
        line: 108
      },
      "9": {
        name: "formatParameterAnalysis",
        decl: {
          start: {
            line: 115,
            column: 9
          },
          end: {
            line: 115,
            column: 32
          }
        },
        loc: {
          start: {
            line: 115,
            column: 43
          },
          end: {
            line: 148,
            column: 1
          }
        },
        line: 115
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 119,
            column: 51
          },
          end: {
            line: 119,
            column: 52
          }
        },
        loc: {
          start: {
            line: 119,
            column: 65
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 119
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 127,
            column: 20
          },
          end: {
            line: 127,
            column: 21
          }
        },
        loc: {
          start: {
            line: 127,
            column: 27
          },
          end: {
            line: 127,
            column: 57
          }
        },
        line: 127
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 129,
            column: 22
          }
        },
        loc: {
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 139,
            column: 9
          }
        },
        line: 129
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 143,
            column: 50
          },
          end: {
            line: 143,
            column: 51
          }
        },
        loc: {
          start: {
            line: 143,
            column: 64
          },
          end: {
            line: 145,
            column: 9
          }
        },
        line: 143
      },
      "14": {
        name: "createAIHelperTools",
        decl: {
          start: {
            line: 149,
            column: 9
          },
          end: {
            line: 149,
            column: 28
          }
        },
        loc: {
          start: {
            line: 149,
            column: 48
          },
          end: {
            line: 512,
            column: 1
          }
        },
        line: 149
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 164,
            column: 17
          },
          end: {
            line: 164,
            column: 18
          }
        },
        loc: {
          start: {
            line: 164,
            column: 33
          },
          end: {
            line: 185,
            column: 9
          }
        },
        line: 164
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 199,
            column: 17
          },
          end: {
            line: 199,
            column: 18
          }
        },
        loc: {
          start: {
            line: 199,
            column: 33
          },
          end: {
            line: 229,
            column: 9
          }
        },
        line: 199
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 207,
            column: 47
          }
        },
        loc: {
          start: {
            line: 207,
            column: 51
          },
          end: {
            line: 207,
            column: 77
          }
        },
        line: 207
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 208,
            column: 46
          },
          end: {
            line: 208,
            column: 47
          }
        },
        loc: {
          start: {
            line: 208,
            column: 51
          },
          end: {
            line: 208,
            column: 77
          }
        },
        line: 208
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 218,
            column: 54
          },
          end: {
            line: 218,
            column: 55
          }
        },
        loc: {
          start: {
            line: 218,
            column: 60
          },
          end: {
            line: 218,
            column: 87
          }
        },
        line: 218
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 219,
            column: 54
          },
          end: {
            line: 219,
            column: 55
          }
        },
        loc: {
          start: {
            line: 219,
            column: 60
          },
          end: {
            line: 219,
            column: 87
          }
        },
        line: 219
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 243,
            column: 17
          },
          end: {
            line: 243,
            column: 18
          }
        },
        loc: {
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 286,
            column: 9
          }
        },
        line: 243
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 251,
            column: 46
          },
          end: {
            line: 251,
            column: 47
          }
        },
        loc: {
          start: {
            line: 251,
            column: 51
          },
          end: {
            line: 251,
            column: 71
          }
        },
        line: 251
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 258,
            column: 52
          },
          end: {
            line: 258,
            column: 53
          }
        },
        loc: {
          start: {
            line: 258,
            column: 58
          },
          end: {
            line: 258,
            column: 85
          }
        },
        line: 258
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 261,
            column: 63
          },
          end: {
            line: 261,
            column: 64
          }
        },
        loc: {
          start: {
            line: 261,
            column: 68
          },
          end: {
            line: 261,
            column: 98
          }
        },
        line: 261
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 272,
            column: 45
          },
          end: {
            line: 272,
            column: 46
          }
        },
        loc: {
          start: {
            line: 272,
            column: 50
          },
          end: {
            line: 272,
            column: 116
          }
        },
        line: 272
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 300,
            column: 17
          },
          end: {
            line: 300,
            column: 18
          }
        },
        loc: {
          start: {
            line: 300,
            column: 33
          },
          end: {
            line: 346,
            column: 9
          }
        },
        line: 300
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 313,
            column: 49
          },
          end: {
            line: 313,
            column: 50
          }
        },
        loc: {
          start: {
            line: 313,
            column: 57
          },
          end: {
            line: 313,
            column: 94
          }
        },
        line: 313
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 315,
            column: 53
          },
          end: {
            line: 315,
            column: 54
          }
        },
        loc: {
          start: {
            line: 315,
            column: 61
          },
          end: {
            line: 315,
            column: 131
          }
        },
        line: 315
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 324,
            column: 36
          },
          end: {
            line: 324,
            column: 37
          }
        },
        loc: {
          start: {
            line: 324,
            column: 49
          },
          end: {
            line: 337,
            column: 17
          }
        },
        line: 324
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 326,
            column: 60
          },
          end: {
            line: 326,
            column: 61
          }
        },
        loc: {
          start: {
            line: 326,
            column: 65
          },
          end: {
            line: 326,
            column: 91
          }
        },
        line: 326
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 327,
            column: 60
          },
          end: {
            line: 327,
            column: 61
          }
        },
        loc: {
          start: {
            line: 327,
            column: 65
          },
          end: {
            line: 327,
            column: 91
          }
        },
        line: 327
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 360,
            column: 17
          },
          end: {
            line: 360,
            column: 18
          }
        },
        loc: {
          start: {
            line: 360,
            column: 33
          },
          end: {
            line: 442,
            column: 9
          }
        },
        line: 360
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 384,
            column: 49
          },
          end: {
            line: 384,
            column: 50
          }
        },
        loc: {
          start: {
            line: 384,
            column: 68
          },
          end: {
            line: 387,
            column: 21
          }
        },
        line: 384
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 396,
            column: 79
          },
          end: {
            line: 396,
            column: 80
          }
        },
        loc: {
          start: {
            line: 396,
            column: 88
          },
          end: {
            line: 396,
            column: 146
          }
        },
        line: 396
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 397,
            column: 47
          },
          end: {
            line: 397,
            column: 48
          }
        },
        loc: {
          start: {
            line: 397,
            column: 61
          },
          end: {
            line: 402,
            column: 21
          }
        },
        line: 397
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 411,
            column: 61
          },
          end: {
            line: 411,
            column: 62
          }
        },
        loc: {
          start: {
            line: 411,
            column: 80
          },
          end: {
            line: 413,
            column: 21
          }
        },
        line: 411
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 459,
            column: 17
          },
          end: {
            line: 459,
            column: 18
          }
        },
        loc: {
          start: {
            line: 459,
            column: 33
          },
          end: {
            line: 510,
            column: 9
          }
        },
        line: 459
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 473,
            column: 38
          },
          end: {
            line: 473,
            column: 39
          }
        },
        loc: {
          start: {
            line: 473,
            column: 51
          },
          end: {
            line: 476,
            column: 17
          }
        },
        line: 473
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 480,
            column: 47
          },
          end: {
            line: 480,
            column: 48
          }
        },
        loc: {
          start: {
            line: 480,
            column: 59
          },
          end: {
            line: 485,
            column: 21
          }
        },
        line: 480
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 490,
            column: 49
          },
          end: {
            line: 490,
            column: 50
          }
        },
        loc: {
          start: {
            line: 490,
            column: 68
          },
          end: {
            line: 497,
            column: 21
          }
        },
        line: 490
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 12
          },
          end: {
            line: 62,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "4": {
        loc: {
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "5": {
        loc: {
          start: {
            line: 76,
            column: 26
          },
          end: {
            line: 76,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 58
          },
          end: {
            line: 76,
            column: 62
          }
        }, {
          start: {
            line: 76,
            column: 65
          },
          end: {
            line: 76,
            column: 104
          }
        }],
        line: 76
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 65
          },
          end: {
            line: 76,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 93
          },
          end: {
            line: 76,
            column: 97
          }
        }, {
          start: {
            line: 76,
            column: 100
          },
          end: {
            line: 76,
            column: 104
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "8": {
        loc: {
          start: {
            line: 86,
            column: 26
          },
          end: {
            line: 86,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 46
          },
          end: {
            line: 86,
            column: 60
          }
        }, {
          start: {
            line: 86,
            column: 63
          },
          end: {
            line: 86,
            column: 79
          }
        }],
        line: 86
      },
      "9": {
        loc: {
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "11": {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 112,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "12": {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 123,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "13": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "14": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "15": {
        loc: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "16": {
        loc: {
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 12
          },
          end: {
            line: 168,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "17": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "18": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 203,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "19": {
        loc: {
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 206,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 30
          },
          end: {
            line: 206,
            column: 44
          }
        }, {
          start: {
            line: 206,
            column: 48
          },
          end: {
            line: 206,
            column: 50
          }
        }],
        line: 206
      },
      "20": {
        loc: {
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 16
          },
          end: {
            line: 211,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "21": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "22": {
        loc: {
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 226,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 16
          },
          end: {
            line: 226,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "23": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "24": {
        loc: {
          start: {
            line: 250,
            column: 30
          },
          end: {
            line: 250,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 30
          },
          end: {
            line: 250,
            column: 44
          }
        }, {
          start: {
            line: 250,
            column: 48
          },
          end: {
            line: 250,
            column: 50
          }
        }],
        line: 250
      },
      "25": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "26": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 277,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 277,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "27": {
        loc: {
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 20
          },
          end: {
            line: 261,
            column: 34
          }
        }, {
          start: {
            line: 261,
            column: 38
          },
          end: {
            line: 261,
            column: 99
          }
        }],
        line: 261
      },
      "28": {
        loc: {
          start: {
            line: 265,
            column: 24
          },
          end: {
            line: 268,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 24
          },
          end: {
            line: 268,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "29": {
        loc: {
          start: {
            line: 265,
            column: 28
          },
          end: {
            line: 265,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 265,
            column: 28
          },
          end: {
            line: 265,
            column: 62
          }
        }, {
          start: {
            line: 265,
            column: 66
          },
          end: {
            line: 265,
            column: 88
          }
        }],
        line: 265
      },
      "30": {
        loc: {
          start: {
            line: 270,
            column: 20
          },
          end: {
            line: 276,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 20
          },
          end: {
            line: 276,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "31": {
        loc: {
          start: {
            line: 272,
            column: 50
          },
          end: {
            line: 272,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 272,
            column: 73
          },
          end: {
            line: 272,
            column: 112
          }
        }, {
          start: {
            line: 272,
            column: 115
          },
          end: {
            line: 272,
            column: 116
          }
        }],
        line: 272
      },
      "32": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 283,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 283,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "33": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "34": {
        loc: {
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 314,
            column: 16
          },
          end: {
            line: 316,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 314
      },
      "35": {
        loc: {
          start: {
            line: 315,
            column: 61
          },
          end: {
            line: 315,
            column: 131
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 61
          },
          end: {
            line: 315,
            column: 94
          }
        }, {
          start: {
            line: 315,
            column: 98
          },
          end: {
            line: 315,
            column: 131
          }
        }],
        line: 315
      },
      "36": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 319,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "37": {
        loc: {
          start: {
            line: 328,
            column: 49
          },
          end: {
            line: 328,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 49
          },
          end: {
            line: 328,
            column: 65
          }
        }, {
          start: {
            line: 328,
            column: 69
          },
          end: {
            line: 328,
            column: 86
          }
        }],
        line: 328
      },
      "38": {
        loc: {
          start: {
            line: 328,
            column: 92
          },
          end: {
            line: 328,
            column: 129
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 92
          },
          end: {
            line: 328,
            column: 108
          }
        }, {
          start: {
            line: 328,
            column: 112
          },
          end: {
            line: 328,
            column: 129
          }
        }],
        line: 328
      },
      "39": {
        loc: {
          start: {
            line: 332,
            column: 63
          },
          end: {
            line: 332,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 84
          },
          end: {
            line: 332,
            column: 87
          }
        }, {
          start: {
            line: 332,
            column: 90
          },
          end: {
            line: 332,
            column: 94
          }
        }],
        line: 332
      },
      "40": {
        loc: {
          start: {
            line: 333,
            column: 20
          },
          end: {
            line: 335,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 20
          },
          end: {
            line: 335,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "41": {
        loc: {
          start: {
            line: 333,
            column: 24
          },
          end: {
            line: 333,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 24
          },
          end: {
            line: 333,
            column: 48
          }
        }, {
          start: {
            line: 333,
            column: 52
          },
          end: {
            line: 333,
            column: 100
          }
        }],
        line: 333
      },
      "42": {
        loc: {
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 341,
            column: 16
          },
          end: {
            line: 343,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 341
      },
      "43": {
        loc: {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "44": {
        loc: {
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 382,
            column: 16
          },
          end: {
            line: 392,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 382
      },
      "45": {
        loc: {
          start: {
            line: 382,
            column: 20
          },
          end: {
            line: 382,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 382,
            column: 20
          },
          end: {
            line: 382,
            column: 59
          }
        }, {
          start: {
            line: 382,
            column: 63
          },
          end: {
            line: 382,
            column: 94
          }
        }],
        line: 382
      },
      "46": {
        loc: {
          start: {
            line: 388,
            column: 20
          },
          end: {
            line: 390,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 20
          },
          end: {
            line: 390,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "47": {
        loc: {
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 407,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 16
          },
          end: {
            line: 407,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "48": {
        loc: {
          start: {
            line: 394,
            column: 20
          },
          end: {
            line: 394,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 20
          },
          end: {
            line: 394,
            column: 59
          }
        }, {
          start: {
            line: 394,
            column: 63
          },
          end: {
            line: 394,
            column: 94
          }
        }],
        line: 394
      },
      "49": {
        loc: {
          start: {
            line: 396,
            column: 88
          },
          end: {
            line: 396,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 396,
            column: 88
          },
          end: {
            line: 396,
            column: 113
          }
        }, {
          start: {
            line: 396,
            column: 117
          },
          end: {
            line: 396,
            column: 146
          }
        }],
        line: 396
      },
      "50": {
        loc: {
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 401,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 401,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "51": {
        loc: {
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 405,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 403,
            column: 20
          },
          end: {
            line: 405,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 403
      },
      "52": {
        loc: {
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 417,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 417,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "53": {
        loc: {
          start: {
            line: 409,
            column: 20
          },
          end: {
            line: 409,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 409,
            column: 20
          },
          end: {
            line: 409,
            column: 63
          }
        }, {
          start: {
            line: 409,
            column: 67
          },
          end: {
            line: 409,
            column: 98
          }
        }],
        line: 409
      },
      "54": {
        loc: {
          start: {
            line: 414,
            column: 20
          },
          end: {
            line: 416,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 414,
            column: 20
          },
          end: {
            line: 416,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 414
      },
      "55": {
        loc: {
          start: {
            line: 419,
            column: 16
          },
          end: {
            line: 433,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 16
          },
          end: {
            line: 433,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "56": {
        loc: {
          start: {
            line: 423,
            column: 24
          },
          end: {
            line: 425,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 24
          },
          end: {
            line: 425,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "57": {
        loc: {
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 432,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 20
          },
          end: {
            line: 432,
            column: 21
          }
        }, {
          start: {
            line: 430,
            column: 25
          },
          end: {
            line: 432,
            column: 21
          }
        }],
        line: 427
      },
      "58": {
        loc: {
          start: {
            line: 437,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 437,
            column: 16
          },
          end: {
            line: 439,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 437
      },
      "59": {
        loc: {
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 12
          },
          end: {
            line: 463,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "60": {
        loc: {
          start: {
            line: 478,
            column: 16
          },
          end: {
            line: 487,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 16
          },
          end: {
            line: 487,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "61": {
        loc: {
          start: {
            line: 482,
            column: 24
          },
          end: {
            line: 484,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 24
          },
          end: {
            line: 484,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "62": {
        loc: {
          start: {
            line: 488,
            column: 16
          },
          end: {
            line: 501,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 16
          },
          end: {
            line: 501,
            column: 17
          }
        }, {
          start: {
            line: 499,
            column: 21
          },
          end: {
            line: 501,
            column: 17
          }
        }],
        line: 488
      },
      "63": {
        loc: {
          start: {
            line: 491,
            column: 44
          },
          end: {
            line: 491,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 75
          },
          end: {
            line: 491,
            column: 79
          }
        }, {
          start: {
            line: 491,
            column: 82
          },
          end: {
            line: 491,
            column: 126
          }
        }],
        line: 491
      },
      "64": {
        loc: {
          start: {
            line: 491,
            column: 82
          },
          end: {
            line: 491,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 115
          },
          end: {
            line: 491,
            column: 119
          }
        }, {
          start: {
            line: 491,
            column: 122
          },
          end: {
            line: 491,
            column: 126
          }
        }],
        line: 491
      },
      "65": {
        loc: {
          start: {
            line: 505,
            column: 16
          },
          end: {
            line: 507,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 16
          },
          end: {
            line: 507,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 505
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-helpers.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-helpers.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { NodeAnalyzer } from '../utils/nodeAnalysis.js';\nimport { SuggestionEngine } from '../ai/suggestionEngine.js';\n\n// Validation Schemas\nconst WorkflowAnalysisSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  includeOptimizations: z.boolean().optional().default(true),\n  maxSuggestions: z.number().min(1).max(50).optional().default(10),\n});\n\nconst NodeCompatibilitySchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  sourceNodeId: z.string().min(1, 'Source node ID is required'),\n  targetNodeId: z.string().min(1, 'Target node ID is required'),\n});\n\nconst ParameterMappingSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  autoApply: z.boolean().optional().default(false),\n});\n\nconst ConnectionSuggestionSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().optional(),\n  suggestionType: z.enum(['all', 'missing', 'optimization']).optional().default('all'),\n  minConfidence: z.number().min(0).max(1).optional().default(0.3),\n});\n\nconst SmartWorkflowOptimizationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  optimizationType: z\n    .enum(['performance', 'reliability', 'maintainability', 'all'])\n    .optional()\n    .default('all'),\n  applyRecommendations: z.boolean().optional().default(false),\n});\n\n// Helper Functions\nfunction formatWorkflowAnalysis(analysis: any): string {\n  const sections = [];\n\n  sections.push(`\uD83D\uDCCA **Workflow Analysis: ${analysis.workflowName}**\\n`);\n  sections.push(`**Overview:**`);\n  sections.push(`\u2022 Nodes: ${analysis.nodeCount}`);\n  sections.push(`\u2022 Connections: ${analysis.connectionCount}`);\n  sections.push(`\u2022 Complexity Score: ${analysis.complexityScore.toFixed(1)}/10\\n`);\n\n  if (analysis.suggestedConnections.length > 0) {\n    sections.push(`**\uD83D\uDD17 Suggested Connections (${analysis.suggestedConnections.length}):**`);\n    analysis.suggestedConnections.forEach((conn: any, i: number) => {\n      const confidence = Math.round(conn.confidence * 100);\n      sections.push(\n        `${i + 1}. Connect \"${conn.sourceNodeId}\" \u2192 \"${conn.targetNodeId}\" (${confidence}% confidence)`\n      );\n      sections.push(`   Reasoning: ${conn.reasoning}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.parameterMappings.length > 0) {\n    sections.push(`**\u2699\uFE0F Parameter Mapping Opportunities (${analysis.parameterMappings.length}):**`);\n    analysis.parameterMappings.slice(0, 5).forEach((mapping: any, i: number) => {\n      const confidence = Math.round(mapping.confidence * 100);\n      sections.push(\n        `${i + 1}. ${mapping.targetParameter} = ${mapping.sourceParameter} (${confidence}% confidence)`\n      );\n      if (mapping.transformation) {\n        sections.push(`   Transformation: ${mapping.transformation}`);\n      }\n    });\n    sections.push('');\n  }\n\n  if (analysis.optimizationSuggestions.length > 0) {\n    sections.push(`**\uD83D\uDCA1 Optimization Suggestions:**`);\n    analysis.optimizationSuggestions.forEach((suggestion: string, i: number) => {\n      sections.push(`${i + 1}. ${suggestion}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.potentialIssues.length > 0) {\n    sections.push(`**\u26A0\uFE0F Potential Issues:**`);\n    analysis.potentialIssues.forEach((issue: any, i: number) => {\n      const emoji = issue.severity === 'critical' ? '\uD83D\uDEA8' : issue.severity === 'high' ? '\u26A0\uFE0F' : '\uD83D\uDCA1';\n      sections.push(`${i + 1}. ${emoji} ${issue.message}`);\n      if (issue.suggestion) {\n        sections.push(`   Suggestion: ${issue.suggestion}`);\n      }\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatCompatibilityResult(result: any): string {\n  const compatibility = result.compatible ? '\u2705 Compatible' : '\u274C Incompatible';\n  const score = Math.round(result.compatibilityScore * 100);\n\n  const sections = [\n    `\uD83D\uDD17 **Node Compatibility Analysis**\\n`,\n    `**Result:** ${compatibility} (${score}% score)\\n`,\n  ];\n\n  if (result.issues.length > 0) {\n    sections.push(`**Issues:**`);\n    result.issues.forEach((issue: string, i: number) => {\n      sections.push(`${i + 1}. ${issue}`);\n    });\n    sections.push('');\n  }\n\n  if (result.suggestions.length > 0) {\n    sections.push(`**Suggestions:**`);\n    result.suggestions.forEach((suggestion: string, i: number) => {\n      sections.push(`${i + 1}. ${suggestion}`);\n    });\n    sections.push('');\n  }\n\n  if (result.requiredTransformations.length > 0) {\n    sections.push(`**Required Transformations:**`);\n    result.requiredTransformations.forEach((trans: any, i: number) => {\n      sections.push(`${i + 1}. ${trans.parameter}: ${trans.transformation}`);\n      sections.push(`   Reason: ${trans.reason}`);\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatParameterAnalysis(analysis: any): string {\n  const sections = [`\u2699\uFE0F **Parameter Analysis for Node: ${analysis.nodeId}**\\n`];\n\n  if (analysis.missingRequiredParameters.length > 0) {\n    sections.push(`**\u274C Missing Required Parameters:**`);\n    analysis.missingRequiredParameters.forEach((param: string, i: number) => {\n      sections.push(`${i + 1}. ${param}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.parameters.length > 0) {\n    sections.push(`**\uD83D\uDCCB Parameter Suggestions:**`);\n    analysis.parameters\n      .filter((p: any) => p.suggestedValue !== undefined)\n      .slice(0, 10)\n      .forEach((param: any, i: number) => {\n        const confidence = Math.round(param.confidence * 100);\n        sections.push(`${i + 1}. **${param.name}**`);\n        sections.push(`   Current: ${JSON.stringify(param.currentValue)}`);\n        sections.push(\n          `   Suggested: ${JSON.stringify(param.suggestedValue)} (${confidence}% confidence)`\n        );\n        sections.push(`   Reasoning: ${param.reasoning}`);\n\n        if (param.issues.length > 0) {\n          sections.push(`   Issues: ${param.issues.join(', ')}`);\n        }\n        sections.push('');\n      });\n  }\n\n  if (analysis.unusedOptionalParameters.length > 0) {\n    sections.push(`**\u2139\uFE0F Unused Parameters:**`);\n    analysis.unusedOptionalParameters.forEach((param: string, i: number) => {\n      sections.push(`${i + 1}. ${param} (may be legacy or misconfigured)`);\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nexport function createAIHelperTools(getClient: () => N8nClient | null, server: any) {\n  // Initialize analyzer\n  const nodeAnalyzer = new NodeAnalyzer();\n\n  // AI-Powered Workflow Analysis\n  server.addTool({\n    name: 'analyze-workflow-ai',\n    description:\n      'AI-powered comprehensive workflow analysis with connection suggestions and optimization recommendations',\n    parameters: WorkflowAnalysisSchema,\n    annotations: {\n      title: 'AI Workflow Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof WorkflowAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Get workflow data\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Load node types for better analysis\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n\n        // Perform comprehensive analysis\n        const analysis = nodeAnalyzer.analyzeWorkflow(workflow);\n\n        return formatWorkflowAnalysis(analysis);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze workflow with unknown error');\n      }\n    },\n  });\n\n  // Node Compatibility Analysis\n  server.addTool({\n    name: 'analyze-node-compatibility',\n    description: 'Analyze compatibility between two nodes and suggest required transformations',\n    parameters: NodeCompatibilitySchema,\n    annotations: {\n      title: 'Node Compatibility Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeCompatibilitySchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n\n        const sourceNode = nodes.find(n => n.id === args.sourceNodeId);\n        const targetNode = nodes.find(n => n.id === args.targetNodeId);\n\n        if (!sourceNode) {\n          throw new UserError(`Source node with ID '${args.sourceNodeId}' not found`);\n        }\n        if (!targetNode) {\n          throw new UserError(`Target node with ID '${args.targetNodeId}' not found`);\n        }\n\n        // Get node type information\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n\n        const sourceNodeType = nodeTypes.find(nt => nt.name === sourceNode.type);\n        const targetNodeType = nodeTypes.find(nt => nt.name === targetNode.type);\n\n        const result = nodeAnalyzer.analyzeNodeCompatibility(\n          sourceNode,\n          targetNode,\n          sourceNodeType,\n          targetNodeType\n        );\n\n        return formatCompatibilityResult(result);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node compatibility: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node compatibility with unknown error');\n      }\n    },\n  });\n\n  // Smart Parameter Mapping\n  server.addTool({\n    name: 'suggest-parameter-mappings',\n    description: 'AI-powered parameter mapping suggestions with auto-configuration options',\n    parameters: ParameterMappingSchema,\n    annotations: {\n      title: 'Smart Parameter Mapping',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ParameterMappingSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n\n        const targetNode = nodes.find(n => n.id === args.nodeId);\n        if (!targetNode) {\n          throw new UserError(`Node with ID '${args.nodeId}' not found`);\n        }\n\n        // Get node type information\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n\n        const nodeTypeInfo = nodeTypes.find(nt => nt.name === targetNode.type);\n        const analysis = nodeAnalyzer.analyzeNodeParameters(targetNode, nodeTypeInfo);\n\n        // Auto-apply suggestions if requested\n        if (args.autoApply && analysis.parameters.some(p => p.suggestedValue !== undefined)) {\n          const updatedParameters = { ...targetNode.parameters };\n          let appliedCount = 0;\n\n          for (const param of analysis.parameters) {\n            if (param.suggestedValue !== undefined && param.confidence > 0.7) {\n              updatedParameters[param.name] = param.suggestedValue;\n              appliedCount++;\n            }\n          }\n\n          if (appliedCount > 0) {\n            await client.updateWorkflow(args.workflowId, {\n              nodes: nodes.map(n =>\n                n.id === args.nodeId ? { ...n, parameters: updatedParameters } : n\n              ) as Array<Record<string, unknown>>,\n            });\n\n            return (\n              formatParameterAnalysis(analysis) +\n              `\\n\\n\u2705 **Auto-Applied ${appliedCount} high-confidence parameter suggestions to the workflow.**`\n            );\n          }\n        }\n\n        return formatParameterAnalysis(analysis);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze parameters with unknown error');\n      }\n    },\n  });\n\n  // AI Connection Suggestions\n  server.addTool({\n    name: 'suggest-node-connections',\n    description: 'Generate intelligent node connection suggestions based on workflow analysis',\n    parameters: ConnectionSuggestionSchema,\n    annotations: {\n      title: 'AI Connection Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ConnectionSuggestionSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Load node types\n        const nodeTypes = await client.getNodeTypes();\n        const suggestionEngine = new SuggestionEngine(nodeTypes);\n\n        const smartSuggestions = suggestionEngine.generateSmartWorkflowSuggestions(workflow);\n        let connections = smartSuggestions.missingConnections;\n\n        // Filter by confidence and type\n        connections = connections.filter(conn => conn.confidence >= args.minConfidence);\n\n        if (args.nodeId) {\n          connections = connections.filter(\n            conn => conn.sourceNodeId === args.nodeId || conn.targetNodeId === args.nodeId\n          );\n        }\n\n        if (connections.length === 0) {\n          return `No connection suggestions found matching criteria (min confidence: ${Math.round(args.minConfidence * 100)}%)`;\n        }\n\n        const sections = [\n          `\uD83D\uDD17 **AI Connection Suggestions for Workflow: ${workflow.name}**\\n`,\n          `Found ${connections.length} potential connections:\\n`,\n        ];\n\n        connections.forEach((conn, i) => {\n          const confidence = Math.round(conn.confidence * 100);\n          const sourceNode = workflow.nodes?.find(n => n.id === conn.sourceNodeId);\n          const targetNode = workflow.nodes?.find(n => n.id === conn.targetNodeId);\n\n          sections.push(\n            `**${i + 1}. ${sourceNode?.name || conn.sourceNodeId} \u2192 ${targetNode?.name || conn.targetNodeId}**`\n          );\n          sections.push(`   Confidence: ${confidence}%`);\n          sections.push(`   Connection: ${conn.sourceOutput} \u2192 ${conn.targetInput}`);\n          sections.push(`   Reasoning: ${conn.reasoning}`);\n          sections.push(`   Data Types Compatible: ${conn.dataTypeMatch ? '\u2705' : '\u26A0\uFE0F'}`);\n\n          if (conn.suggestedParameters && Object.keys(conn.suggestedParameters).length > 0) {\n            sections.push(\n              `   Suggested Parameters: ${JSON.stringify(conn.suggestedParameters, null, 2)}`\n            );\n          }\n          sections.push('');\n        });\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to generate connection suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to generate connection suggestions with unknown error');\n      }\n    },\n  });\n\n  // Smart Workflow Optimization\n  server.addTool({\n    name: 'optimize-workflow-ai',\n    description:\n      'AI-powered workflow optimization with performance, reliability, and maintainability recommendations',\n    parameters: SmartWorkflowOptimizationSchema,\n    annotations: {\n      title: 'AI Workflow Optimization',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SmartWorkflowOptimizationSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Load node types for analysis\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n\n        // Perform comprehensive analysis\n        const analysis = nodeAnalyzer.analyzeWorkflow(workflow);\n\n        // Analyze data flow\n        const dataFlow = nodeAnalyzer.analyzeDataFlow(workflow);\n\n        const sections = [\n          `\uD83D\uDE80 **AI Workflow Optimization: ${workflow.name}**\\n`,\n          `**Current State:**`,\n          `\u2022 Complexity Score: ${analysis.complexityScore.toFixed(1)}/10`,\n          `\u2022 Nodes: ${analysis.nodeCount}`,\n          `\u2022 Connections: ${analysis.connectionCount}\\n`,\n        ];\n\n        // Performance Optimizations\n        if (args.optimizationType === 'performance' || args.optimizationType === 'all') {\n          sections.push(`**\u26A1 Performance Optimizations:**`);\n\n          dataFlow.bottlenecks.forEach((bottleneck, i) => {\n            sections.push(`${i + 1}. ${bottleneck.reason} (${bottleneck.impact} impact)`);\n            sections.push(`   Suggestion: ${bottleneck.suggestion}`);\n          });\n\n          if (analysis.nodeCount > 15) {\n            sections.push(\n              `${dataFlow.bottlenecks.length + 1}. Consider breaking large workflow into smaller, focused workflows`\n            );\n          }\n          sections.push('');\n        }\n\n        // Reliability Improvements\n        if (args.optimizationType === 'reliability' || args.optimizationType === 'all') {\n          sections.push(`**\uD83D\uDEE1\uFE0F Reliability Improvements:**`);\n\n          const highSeverityIssues = analysis.potentialIssues.filter(\n            issue => issue.severity === 'high' || issue.severity === 'critical'\n          );\n\n          highSeverityIssues.forEach((issue, i) => {\n            sections.push(`${i + 1}. ${issue.message}`);\n            if (issue.suggestion) {\n              sections.push(`   Solution: ${issue.suggestion}`);\n            }\n          });\n\n          if (highSeverityIssues.length === 0) {\n            sections.push('\u2705 No major reliability issues detected');\n          }\n          sections.push('');\n        }\n\n        // Maintainability Enhancements\n        if (args.optimizationType === 'maintainability' || args.optimizationType === 'all') {\n          sections.push(`**\uD83D\uDD27 Maintainability Enhancements:**`);\n\n          analysis.optimizationSuggestions.forEach((suggestion, i) => {\n            sections.push(`${i + 1}. ${suggestion}`);\n          });\n\n          if (analysis.suggestedConnections.length > 0) {\n            sections.push(\n              `${analysis.optimizationSuggestions.length + 1}. ${analysis.suggestedConnections.length} potential connections could improve workflow clarity`\n            );\n          }\n        }\n\n        // Auto-apply optimizations if requested (limited to safe changes)\n        if (args.applyRecommendations) {\n          let appliedOptimizations = 0;\n\n          // Apply high-confidence parameter mappings\n          for (const mapping of analysis.parameterMappings.slice(0, 5)) {\n            if (mapping.confidence > 0.8) {\n              appliedOptimizations++;\n            }\n          }\n\n          if (appliedOptimizations > 0) {\n            sections.push(\n              `\\n\u2705 **Applied ${appliedOptimizations} safe optimization recommendations automatically.**`\n            );\n          } else {\n            sections.push(\n              `\\n\uD83D\uDCA1 **No safe automatic optimizations could be applied. Manual review recommended.**`\n            );\n          }\n        }\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to optimize workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to optimize workflow with unknown error');\n      }\n    },\n  });\n\n  // Data Flow Analysis\n  server.addTool({\n    name: 'analyze-data-flow',\n    description:\n      'Analyze data flow through workflow nodes with bottleneck identification and optimization suggestions',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      startNodeId: z.string().optional(),\n    }),\n    annotations: {\n      title: 'Data Flow Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { workflowId: string; startNodeId?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n\n        const dataFlow = nodeAnalyzer.analyzeDataFlow(workflow, args.startNodeId);\n\n        const sections = [\n          `\uD83D\uDCCA **Data Flow Analysis: ${workflow.name}**\\n`,\n          `**Execution Path (${dataFlow.path.length} steps):**`,\n        ];\n\n        dataFlow.path.forEach((step, i) => {\n          sections.push(`${i + 1}. **${step.nodeName}** (${step.nodeType})`);\n          sections.push(`   Transformation: ${step.dataTransformation}`);\n        });\n        sections.push('');\n\n        if (dataFlow.dataTypes.length > 0) {\n          sections.push(`**Data Types by Step:**`);\n          dataFlow.dataTypes.forEach(dataType => {\n            sections.push(`Step ${dataType.step + 1}: ${dataType.expectedType}`);\n            if (dataType.schema) {\n              sections.push(`   Schema: ${JSON.stringify(dataType.schema, null, 2)}`);\n            }\n          });\n          sections.push('');\n        }\n\n        if (dataFlow.bottlenecks.length > 0) {\n          sections.push(`**\u26A0\uFE0F Identified Bottlenecks:**`);\n          dataFlow.bottlenecks.forEach((bottleneck, i) => {\n            const impactEmoji =\n              bottleneck.impact === 'high' ? '\uD83D\uDEA8' : bottleneck.impact === 'medium' ? '\u26A0\uFE0F' : '\uD83D\uDCA1';\n            sections.push(`${i + 1}. ${impactEmoji} ${bottleneck.reason}`);\n            sections.push(`   Node: ${bottleneck.nodeId}`);\n            sections.push(`   Impact: ${bottleneck.impact}`);\n            sections.push(`   Suggestion: ${bottleneck.suggestion}`);\n            sections.push('');\n          });\n        } else {\n          sections.push(`\u2705 **No significant bottlenecks detected in the data flow.**`);\n        }\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze data flow: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze data flow with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "21c759e2c135fc8e08f129e1cc58ec4d3d45ba6b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1mdh9u53o7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1mdh9u53o7();
cov_1mdh9u53o7().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1mdh9u53o7().s[1]++;
exports.createAIHelperTools = createAIHelperTools;
const zod_1 =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[3]++, require("fastmcp"));
const nodeAnalysis_js_1 =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[4]++, require("../utils/nodeAnalysis.js"));
const suggestionEngine_js_1 =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[5]++, require("../ai/suggestionEngine.js"));
// Validation Schemas
const WorkflowAnalysisSchema =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[6]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  includeOptimizations: zod_1.z.boolean().optional().default(true),
  maxSuggestions: zod_1.z.number().min(1).max(50).optional().default(10)
}));
const NodeCompatibilitySchema =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[7]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  sourceNodeId: zod_1.z.string().min(1, 'Source node ID is required'),
  targetNodeId: zod_1.z.string().min(1, 'Target node ID is required')
}));
const ParameterMappingSchema =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[8]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  autoApply: zod_1.z.boolean().optional().default(false)
}));
const ConnectionSuggestionSchema =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[9]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().optional(),
  suggestionType: zod_1.z.enum(['all', 'missing', 'optimization']).optional().default('all'),
  minConfidence: zod_1.z.number().min(0).max(1).optional().default(0.3)
}));
const SmartWorkflowOptimizationSchema =
/* istanbul ignore next */
(cov_1mdh9u53o7().s[10]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  optimizationType: zod_1.z.enum(['performance', 'reliability', 'maintainability', 'all']).optional().default('all'),
  applyRecommendations: zod_1.z.boolean().optional().default(false)
}));
// Helper Functions
function formatWorkflowAnalysis(analysis) {
  /* istanbul ignore next */
  cov_1mdh9u53o7().f[0]++;
  const sections =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[11]++, []);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[12]++;
  sections.push(`📊 **Workflow Analysis: ${analysis.workflowName}**\n`);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[13]++;
  sections.push(`**Overview:**`);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[14]++;
  sections.push(`• Nodes: ${analysis.nodeCount}`);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[15]++;
  sections.push(`• Connections: ${analysis.connectionCount}`);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[16]++;
  sections.push(`• Complexity Score: ${analysis.complexityScore.toFixed(1)}/10\n`);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[17]++;
  if (analysis.suggestedConnections.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[0][0]++;
    cov_1mdh9u53o7().s[18]++;
    sections.push(`**🔗 Suggested Connections (${analysis.suggestedConnections.length}):**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[19]++;
    analysis.suggestedConnections.forEach((conn, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[1]++;
      const confidence =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[20]++, Math.round(conn.confidence * 100));
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[21]++;
      sections.push(`${i + 1}. Connect "${conn.sourceNodeId}" → "${conn.targetNodeId}" (${confidence}% confidence)`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[22]++;
      sections.push(`   Reasoning: ${conn.reasoning}`);
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[23]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[0][1]++;
  }
  cov_1mdh9u53o7().s[24]++;
  if (analysis.parameterMappings.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[1][0]++;
    cov_1mdh9u53o7().s[25]++;
    sections.push(`**⚙️ Parameter Mapping Opportunities (${analysis.parameterMappings.length}):**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[26]++;
    analysis.parameterMappings.slice(0, 5).forEach((mapping, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[2]++;
      const confidence =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[27]++, Math.round(mapping.confidence * 100));
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[28]++;
      sections.push(`${i + 1}. ${mapping.targetParameter} = ${mapping.sourceParameter} (${confidence}% confidence)`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[29]++;
      if (mapping.transformation) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[2][0]++;
        cov_1mdh9u53o7().s[30]++;
        sections.push(`   Transformation: ${mapping.transformation}`);
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[2][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[31]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[1][1]++;
  }
  cov_1mdh9u53o7().s[32]++;
  if (analysis.optimizationSuggestions.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[3][0]++;
    cov_1mdh9u53o7().s[33]++;
    sections.push(`**💡 Optimization Suggestions:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[34]++;
    analysis.optimizationSuggestions.forEach((suggestion, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[3]++;
      cov_1mdh9u53o7().s[35]++;
      sections.push(`${i + 1}. ${suggestion}`);
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[36]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[3][1]++;
  }
  cov_1mdh9u53o7().s[37]++;
  if (analysis.potentialIssues.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[4][0]++;
    cov_1mdh9u53o7().s[38]++;
    sections.push(`**⚠️ Potential Issues:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[39]++;
    analysis.potentialIssues.forEach((issue, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[4]++;
      const emoji =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[40]++, issue.severity === 'critical' ?
      /* istanbul ignore next */
      (cov_1mdh9u53o7().b[5][0]++, '🚨') :
      /* istanbul ignore next */
      (cov_1mdh9u53o7().b[5][1]++, issue.severity === 'high' ?
      /* istanbul ignore next */
      (cov_1mdh9u53o7().b[6][0]++, '⚠️') :
      /* istanbul ignore next */
      (cov_1mdh9u53o7().b[6][1]++, '💡')));
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[41]++;
      sections.push(`${i + 1}. ${emoji} ${issue.message}`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[42]++;
      if (issue.suggestion) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[7][0]++;
        cov_1mdh9u53o7().s[43]++;
        sections.push(`   Suggestion: ${issue.suggestion}`);
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[7][1]++;
      }
    });
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[4][1]++;
  }
  cov_1mdh9u53o7().s[44]++;
  return sections.join('\n');
}
function formatCompatibilityResult(result) {
  /* istanbul ignore next */
  cov_1mdh9u53o7().f[5]++;
  const compatibility =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[45]++, result.compatible ?
  /* istanbul ignore next */
  (cov_1mdh9u53o7().b[8][0]++, '✅ Compatible') :
  /* istanbul ignore next */
  (cov_1mdh9u53o7().b[8][1]++, '❌ Incompatible'));
  const score =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[46]++, Math.round(result.compatibilityScore * 100));
  const sections =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[47]++, [`🔗 **Node Compatibility Analysis**\n`, `**Result:** ${compatibility} (${score}% score)\n`]);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[48]++;
  if (result.issues.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[9][0]++;
    cov_1mdh9u53o7().s[49]++;
    sections.push(`**Issues:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[50]++;
    result.issues.forEach((issue, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[6]++;
      cov_1mdh9u53o7().s[51]++;
      sections.push(`${i + 1}. ${issue}`);
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[52]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[9][1]++;
  }
  cov_1mdh9u53o7().s[53]++;
  if (result.suggestions.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[10][0]++;
    cov_1mdh9u53o7().s[54]++;
    sections.push(`**Suggestions:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[55]++;
    result.suggestions.forEach((suggestion, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[7]++;
      cov_1mdh9u53o7().s[56]++;
      sections.push(`${i + 1}. ${suggestion}`);
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[57]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[10][1]++;
  }
  cov_1mdh9u53o7().s[58]++;
  if (result.requiredTransformations.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[11][0]++;
    cov_1mdh9u53o7().s[59]++;
    sections.push(`**Required Transformations:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[60]++;
    result.requiredTransformations.forEach((trans, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[8]++;
      cov_1mdh9u53o7().s[61]++;
      sections.push(`${i + 1}. ${trans.parameter}: ${trans.transformation}`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[62]++;
      sections.push(`   Reason: ${trans.reason}`);
    });
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[11][1]++;
  }
  cov_1mdh9u53o7().s[63]++;
  return sections.join('\n');
}
function formatParameterAnalysis(analysis) {
  /* istanbul ignore next */
  cov_1mdh9u53o7().f[9]++;
  const sections =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[64]++, [`⚙️ **Parameter Analysis for Node: ${analysis.nodeId}**\n`]);
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[65]++;
  if (analysis.missingRequiredParameters.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[12][0]++;
    cov_1mdh9u53o7().s[66]++;
    sections.push(`**❌ Missing Required Parameters:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[67]++;
    analysis.missingRequiredParameters.forEach((param, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[10]++;
      cov_1mdh9u53o7().s[68]++;
      sections.push(`${i + 1}. ${param}`);
    });
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[69]++;
    sections.push('');
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[12][1]++;
  }
  cov_1mdh9u53o7().s[70]++;
  if (analysis.parameters.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[13][0]++;
    cov_1mdh9u53o7().s[71]++;
    sections.push(`**📋 Parameter Suggestions:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[72]++;
    analysis.parameters.filter(p => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[11]++;
      cov_1mdh9u53o7().s[73]++;
      return p.suggestedValue !== undefined;
    }).slice(0, 10).forEach((param, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[12]++;
      const confidence =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[74]++, Math.round(param.confidence * 100));
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[75]++;
      sections.push(`${i + 1}. **${param.name}**`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[76]++;
      sections.push(`   Current: ${JSON.stringify(param.currentValue)}`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[77]++;
      sections.push(`   Suggested: ${JSON.stringify(param.suggestedValue)} (${confidence}% confidence)`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[78]++;
      sections.push(`   Reasoning: ${param.reasoning}`);
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[79]++;
      if (param.issues.length > 0) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[14][0]++;
        cov_1mdh9u53o7().s[80]++;
        sections.push(`   Issues: ${param.issues.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[14][1]++;
      }
      cov_1mdh9u53o7().s[81]++;
      sections.push('');
    });
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[13][1]++;
  }
  cov_1mdh9u53o7().s[82]++;
  if (analysis.unusedOptionalParameters.length > 0) {
    /* istanbul ignore next */
    cov_1mdh9u53o7().b[15][0]++;
    cov_1mdh9u53o7().s[83]++;
    sections.push(`**ℹ️ Unused Parameters:**`);
    /* istanbul ignore next */
    cov_1mdh9u53o7().s[84]++;
    analysis.unusedOptionalParameters.forEach((param, i) => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[13]++;
      cov_1mdh9u53o7().s[85]++;
      sections.push(`${i + 1}. ${param} (may be legacy or misconfigured)`);
    });
  } else
  /* istanbul ignore next */
  {
    cov_1mdh9u53o7().b[15][1]++;
  }
  cov_1mdh9u53o7().s[86]++;
  return sections.join('\n');
}
function createAIHelperTools(getClient, server) {
  /* istanbul ignore next */
  cov_1mdh9u53o7().f[14]++;
  // Initialize analyzer
  const nodeAnalyzer =
  /* istanbul ignore next */
  (cov_1mdh9u53o7().s[87]++, new nodeAnalysis_js_1.NodeAnalyzer());
  // AI-Powered Workflow Analysis
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[88]++;
  server.addTool({
    name: 'analyze-workflow-ai',
    description: 'AI-powered comprehensive workflow analysis with connection suggestions and optimization recommendations',
    parameters: WorkflowAnalysisSchema,
    annotations: {
      title: 'AI Workflow Analysis',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[15]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[89]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[90]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[16][0]++;
        cov_1mdh9u53o7().s[91]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[16][1]++;
      }
      cov_1mdh9u53o7().s[92]++;
      try {
        // Get workflow data
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[93]++, await client.getWorkflow(args.workflowId));
        // Load node types for better analysis
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[94]++, await client.getNodeTypes());
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[95]++;
        nodeAnalyzer.loadNodeTypes(nodeTypes);
        // Perform comprehensive analysis
        const analysis =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[96]++, nodeAnalyzer.analyzeWorkflow(workflow));
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[97]++;
        return formatWorkflowAnalysis(analysis);
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[98]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[17][0]++;
          cov_1mdh9u53o7().s[99]++;
          throw new fastmcp_1.UserError(`Failed to analyze workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[17][1]++;
        }
        cov_1mdh9u53o7().s[100]++;
        throw new fastmcp_1.UserError('Failed to analyze workflow with unknown error');
      }
    }
  });
  // Node Compatibility Analysis
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[101]++;
  server.addTool({
    name: 'analyze-node-compatibility',
    description: 'Analyze compatibility between two nodes and suggest required transformations',
    parameters: NodeCompatibilitySchema,
    annotations: {
      title: 'Node Compatibility Analysis',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[16]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[102]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[103]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[18][0]++;
        cov_1mdh9u53o7().s[104]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[18][1]++;
      }
      cov_1mdh9u53o7().s[105]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[106]++, await client.getWorkflow(args.workflowId));
        const nodes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[107]++,
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[19][0]++, workflow.nodes) ||
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[19][1]++, []));
        const sourceNode =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[108]++, nodes.find(n => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[17]++;
          cov_1mdh9u53o7().s[109]++;
          return n.id === args.sourceNodeId;
        }));
        const targetNode =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[110]++, nodes.find(n => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[18]++;
          cov_1mdh9u53o7().s[111]++;
          return n.id === args.targetNodeId;
        }));
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[112]++;
        if (!sourceNode) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[20][0]++;
          cov_1mdh9u53o7().s[113]++;
          throw new fastmcp_1.UserError(`Source node with ID '${args.sourceNodeId}' not found`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[20][1]++;
        }
        cov_1mdh9u53o7().s[114]++;
        if (!targetNode) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[21][0]++;
          cov_1mdh9u53o7().s[115]++;
          throw new fastmcp_1.UserError(`Target node with ID '${args.targetNodeId}' not found`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[21][1]++;
        }
        // Get node type information
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[116]++, await client.getNodeTypes());
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[117]++;
        nodeAnalyzer.loadNodeTypes(nodeTypes);
        const sourceNodeType =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[118]++, nodeTypes.find(nt => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[19]++;
          cov_1mdh9u53o7().s[119]++;
          return nt.name === sourceNode.type;
        }));
        const targetNodeType =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[120]++, nodeTypes.find(nt => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[20]++;
          cov_1mdh9u53o7().s[121]++;
          return nt.name === targetNode.type;
        }));
        const result =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[122]++, nodeAnalyzer.analyzeNodeCompatibility(sourceNode, targetNode, sourceNodeType, targetNodeType));
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[123]++;
        return formatCompatibilityResult(result);
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[124]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[22][0]++;
          cov_1mdh9u53o7().s[125]++;
          throw new fastmcp_1.UserError(`Failed to analyze node compatibility: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[22][1]++;
        }
        cov_1mdh9u53o7().s[126]++;
        throw new fastmcp_1.UserError('Failed to analyze node compatibility with unknown error');
      }
    }
  });
  // Smart Parameter Mapping
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[127]++;
  server.addTool({
    name: 'suggest-parameter-mappings',
    description: 'AI-powered parameter mapping suggestions with auto-configuration options',
    parameters: ParameterMappingSchema,
    annotations: {
      title: 'Smart Parameter Mapping',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[21]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[128]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[129]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[23][0]++;
        cov_1mdh9u53o7().s[130]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[23][1]++;
      }
      cov_1mdh9u53o7().s[131]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[132]++, await client.getWorkflow(args.workflowId));
        const nodes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[133]++,
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[24][0]++, workflow.nodes) ||
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[24][1]++, []));
        const targetNode =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[134]++, nodes.find(n => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[22]++;
          cov_1mdh9u53o7().s[135]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[136]++;
        if (!targetNode) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[25][0]++;
          cov_1mdh9u53o7().s[137]++;
          throw new fastmcp_1.UserError(`Node with ID '${args.nodeId}' not found`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[25][1]++;
        }
        // Get node type information
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[138]++, await client.getNodeTypes());
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[139]++;
        nodeAnalyzer.loadNodeTypes(nodeTypes);
        const nodeTypeInfo =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[140]++, nodeTypes.find(nt => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[23]++;
          cov_1mdh9u53o7().s[141]++;
          return nt.name === targetNode.type;
        }));
        const analysis =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[142]++, nodeAnalyzer.analyzeNodeParameters(targetNode, nodeTypeInfo));
        // Auto-apply suggestions if requested
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[143]++;
        if (
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[27][0]++, args.autoApply) &&
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[27][1]++, analysis.parameters.some(p => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[24]++;
          cov_1mdh9u53o7().s[144]++;
          return p.suggestedValue !== undefined;
        }))) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[26][0]++;
          const updatedParameters =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[145]++, {
            ...targetNode.parameters
          });
          let appliedCount =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[146]++, 0);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[147]++;
          for (const param of analysis.parameters) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[148]++;
            if (
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[29][0]++, param.suggestedValue !== undefined) &&
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[29][1]++, param.confidence > 0.7)) {
              /* istanbul ignore next */
              cov_1mdh9u53o7().b[28][0]++;
              cov_1mdh9u53o7().s[149]++;
              updatedParameters[param.name] = param.suggestedValue;
              /* istanbul ignore next */
              cov_1mdh9u53o7().s[150]++;
              appliedCount++;
            } else
            /* istanbul ignore next */
            {
              cov_1mdh9u53o7().b[28][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[151]++;
          if (appliedCount > 0) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[30][0]++;
            cov_1mdh9u53o7().s[152]++;
            await client.updateWorkflow(args.workflowId, {
              nodes: nodes.map(n => {
                /* istanbul ignore next */
                cov_1mdh9u53o7().f[25]++;
                cov_1mdh9u53o7().s[153]++;
                return n.id === args.nodeId ?
                /* istanbul ignore next */
                (cov_1mdh9u53o7().b[31][0]++, {
                  ...n,
                  parameters: updatedParameters
                }) :
                /* istanbul ignore next */
                (cov_1mdh9u53o7().b[31][1]++, n);
              })
            });
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[154]++;
            return formatParameterAnalysis(analysis) + `\n\n✅ **Auto-Applied ${appliedCount} high-confidence parameter suggestions to the workflow.**`;
          } else
          /* istanbul ignore next */
          {
            cov_1mdh9u53o7().b[30][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[26][1]++;
        }
        cov_1mdh9u53o7().s[155]++;
        return formatParameterAnalysis(analysis);
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[156]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[32][0]++;
          cov_1mdh9u53o7().s[157]++;
          throw new fastmcp_1.UserError(`Failed to analyze parameters: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[32][1]++;
        }
        cov_1mdh9u53o7().s[158]++;
        throw new fastmcp_1.UserError('Failed to analyze parameters with unknown error');
      }
    }
  });
  // AI Connection Suggestions
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[159]++;
  server.addTool({
    name: 'suggest-node-connections',
    description: 'Generate intelligent node connection suggestions based on workflow analysis',
    parameters: ConnectionSuggestionSchema,
    annotations: {
      title: 'AI Connection Suggestions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[26]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[160]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[161]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[33][0]++;
        cov_1mdh9u53o7().s[162]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[33][1]++;
      }
      cov_1mdh9u53o7().s[163]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[164]++, await client.getWorkflow(args.workflowId));
        // Load node types
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[165]++, await client.getNodeTypes());
        const suggestionEngine =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[166]++, new suggestionEngine_js_1.SuggestionEngine(nodeTypes));
        const smartSuggestions =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[167]++, suggestionEngine.generateSmartWorkflowSuggestions(workflow));
        let connections =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[168]++, smartSuggestions.missingConnections);
        // Filter by confidence and type
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[169]++;
        connections = connections.filter(conn => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[27]++;
          cov_1mdh9u53o7().s[170]++;
          return conn.confidence >= args.minConfidence;
        });
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[171]++;
        if (args.nodeId) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[34][0]++;
          cov_1mdh9u53o7().s[172]++;
          connections = connections.filter(conn => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[28]++;
            cov_1mdh9u53o7().s[173]++;
            return /* istanbul ignore next */(cov_1mdh9u53o7().b[35][0]++, conn.sourceNodeId === args.nodeId) ||
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[35][1]++, conn.targetNodeId === args.nodeId);
          });
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[34][1]++;
        }
        cov_1mdh9u53o7().s[174]++;
        if (connections.length === 0) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[36][0]++;
          cov_1mdh9u53o7().s[175]++;
          return `No connection suggestions found matching criteria (min confidence: ${Math.round(args.minConfidence * 100)}%)`;
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[36][1]++;
        }
        const sections =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[176]++, [`🔗 **AI Connection Suggestions for Workflow: ${workflow.name}**\n`, `Found ${connections.length} potential connections:\n`]);
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[177]++;
        connections.forEach((conn, i) => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[29]++;
          const confidence =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[178]++, Math.round(conn.confidence * 100));
          const sourceNode =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[179]++, workflow.nodes?.find(n => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[30]++;
            cov_1mdh9u53o7().s[180]++;
            return n.id === conn.sourceNodeId;
          }));
          const targetNode =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[181]++, workflow.nodes?.find(n => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[31]++;
            cov_1mdh9u53o7().s[182]++;
            return n.id === conn.targetNodeId;
          }));
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[183]++;
          sections.push(`**${i + 1}. ${
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[37][0]++, sourceNode?.name) ||
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[37][1]++, conn.sourceNodeId)} → ${
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[38][0]++, targetNode?.name) ||
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[38][1]++, conn.targetNodeId)}**`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[184]++;
          sections.push(`   Confidence: ${confidence}%`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[185]++;
          sections.push(`   Connection: ${conn.sourceOutput} → ${conn.targetInput}`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[186]++;
          sections.push(`   Reasoning: ${conn.reasoning}`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[187]++;
          sections.push(`   Data Types Compatible: ${conn.dataTypeMatch ?
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[39][0]++, '✅') :
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[39][1]++, '⚠️')}`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[188]++;
          if (
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[41][0]++, conn.suggestedParameters) &&
          /* istanbul ignore next */
          (cov_1mdh9u53o7().b[41][1]++, Object.keys(conn.suggestedParameters).length > 0)) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[40][0]++;
            cov_1mdh9u53o7().s[189]++;
            sections.push(`   Suggested Parameters: ${JSON.stringify(conn.suggestedParameters, null, 2)}`);
          } else
          /* istanbul ignore next */
          {
            cov_1mdh9u53o7().b[40][1]++;
          }
          cov_1mdh9u53o7().s[190]++;
          sections.push('');
        });
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[191]++;
        return sections.join('\n');
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[192]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[42][0]++;
          cov_1mdh9u53o7().s[193]++;
          throw new fastmcp_1.UserError(`Failed to generate connection suggestions: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[42][1]++;
        }
        cov_1mdh9u53o7().s[194]++;
        throw new fastmcp_1.UserError('Failed to generate connection suggestions with unknown error');
      }
    }
  });
  // Smart Workflow Optimization
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[195]++;
  server.addTool({
    name: 'optimize-workflow-ai',
    description: 'AI-powered workflow optimization with performance, reliability, and maintainability recommendations',
    parameters: SmartWorkflowOptimizationSchema,
    annotations: {
      title: 'AI Workflow Optimization',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[32]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[196]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[197]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[43][0]++;
        cov_1mdh9u53o7().s[198]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[43][1]++;
      }
      cov_1mdh9u53o7().s[199]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[200]++, await client.getWorkflow(args.workflowId));
        // Load node types for analysis
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[201]++, await client.getNodeTypes());
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[202]++;
        nodeAnalyzer.loadNodeTypes(nodeTypes);
        // Perform comprehensive analysis
        const analysis =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[203]++, nodeAnalyzer.analyzeWorkflow(workflow));
        // Analyze data flow
        const dataFlow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[204]++, nodeAnalyzer.analyzeDataFlow(workflow));
        const sections =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[205]++, [`🚀 **AI Workflow Optimization: ${workflow.name}**\n`, `**Current State:**`, `• Complexity Score: ${analysis.complexityScore.toFixed(1)}/10`, `• Nodes: ${analysis.nodeCount}`, `• Connections: ${analysis.connectionCount}\n`]);
        // Performance Optimizations
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[206]++;
        if (
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[45][0]++, args.optimizationType === 'performance') ||
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[45][1]++, args.optimizationType === 'all')) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[44][0]++;
          cov_1mdh9u53o7().s[207]++;
          sections.push(`**⚡ Performance Optimizations:**`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[208]++;
          dataFlow.bottlenecks.forEach((bottleneck, i) => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[33]++;
            cov_1mdh9u53o7().s[209]++;
            sections.push(`${i + 1}. ${bottleneck.reason} (${bottleneck.impact} impact)`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[210]++;
            sections.push(`   Suggestion: ${bottleneck.suggestion}`);
          });
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[211]++;
          if (analysis.nodeCount > 15) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[46][0]++;
            cov_1mdh9u53o7().s[212]++;
            sections.push(`${dataFlow.bottlenecks.length + 1}. Consider breaking large workflow into smaller, focused workflows`);
          } else
          /* istanbul ignore next */
          {
            cov_1mdh9u53o7().b[46][1]++;
          }
          cov_1mdh9u53o7().s[213]++;
          sections.push('');
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[44][1]++;
        }
        // Reliability Improvements
        cov_1mdh9u53o7().s[214]++;
        if (
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[48][0]++, args.optimizationType === 'reliability') ||
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[48][1]++, args.optimizationType === 'all')) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[47][0]++;
          cov_1mdh9u53o7().s[215]++;
          sections.push(`**🛡️ Reliability Improvements:**`);
          const highSeverityIssues =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[216]++, analysis.potentialIssues.filter(issue => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[34]++;
            cov_1mdh9u53o7().s[217]++;
            return /* istanbul ignore next */(cov_1mdh9u53o7().b[49][0]++, issue.severity === 'high') ||
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[49][1]++, issue.severity === 'critical');
          }));
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[218]++;
          highSeverityIssues.forEach((issue, i) => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[35]++;
            cov_1mdh9u53o7().s[219]++;
            sections.push(`${i + 1}. ${issue.message}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[220]++;
            if (issue.suggestion) {
              /* istanbul ignore next */
              cov_1mdh9u53o7().b[50][0]++;
              cov_1mdh9u53o7().s[221]++;
              sections.push(`   Solution: ${issue.suggestion}`);
            } else
            /* istanbul ignore next */
            {
              cov_1mdh9u53o7().b[50][1]++;
            }
          });
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[222]++;
          if (highSeverityIssues.length === 0) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[51][0]++;
            cov_1mdh9u53o7().s[223]++;
            sections.push('✅ No major reliability issues detected');
          } else
          /* istanbul ignore next */
          {
            cov_1mdh9u53o7().b[51][1]++;
          }
          cov_1mdh9u53o7().s[224]++;
          sections.push('');
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[47][1]++;
        }
        // Maintainability Enhancements
        cov_1mdh9u53o7().s[225]++;
        if (
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[53][0]++, args.optimizationType === 'maintainability') ||
        /* istanbul ignore next */
        (cov_1mdh9u53o7().b[53][1]++, args.optimizationType === 'all')) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[52][0]++;
          cov_1mdh9u53o7().s[226]++;
          sections.push(`**🔧 Maintainability Enhancements:**`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[227]++;
          analysis.optimizationSuggestions.forEach((suggestion, i) => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[36]++;
            cov_1mdh9u53o7().s[228]++;
            sections.push(`${i + 1}. ${suggestion}`);
          });
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[229]++;
          if (analysis.suggestedConnections.length > 0) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[54][0]++;
            cov_1mdh9u53o7().s[230]++;
            sections.push(`${analysis.optimizationSuggestions.length + 1}. ${analysis.suggestedConnections.length} potential connections could improve workflow clarity`);
          } else
          /* istanbul ignore next */
          {
            cov_1mdh9u53o7().b[54][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[52][1]++;
        }
        // Auto-apply optimizations if requested (limited to safe changes)
        cov_1mdh9u53o7().s[231]++;
        if (args.applyRecommendations) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[55][0]++;
          let appliedOptimizations =
          /* istanbul ignore next */
          (cov_1mdh9u53o7().s[232]++, 0);
          // Apply high-confidence parameter mappings
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[233]++;
          for (const mapping of analysis.parameterMappings.slice(0, 5)) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[234]++;
            if (mapping.confidence > 0.8) {
              /* istanbul ignore next */
              cov_1mdh9u53o7().b[56][0]++;
              cov_1mdh9u53o7().s[235]++;
              appliedOptimizations++;
            } else
            /* istanbul ignore next */
            {
              cov_1mdh9u53o7().b[56][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[236]++;
          if (appliedOptimizations > 0) {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[57][0]++;
            cov_1mdh9u53o7().s[237]++;
            sections.push(`\n✅ **Applied ${appliedOptimizations} safe optimization recommendations automatically.**`);
          } else {
            /* istanbul ignore next */
            cov_1mdh9u53o7().b[57][1]++;
            cov_1mdh9u53o7().s[238]++;
            sections.push(`\n💡 **No safe automatic optimizations could be applied. Manual review recommended.**`);
          }
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[55][1]++;
        }
        cov_1mdh9u53o7().s[239]++;
        return sections.join('\n');
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[240]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[58][0]++;
          cov_1mdh9u53o7().s[241]++;
          throw new fastmcp_1.UserError(`Failed to optimize workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[58][1]++;
        }
        cov_1mdh9u53o7().s[242]++;
        throw new fastmcp_1.UserError('Failed to optimize workflow with unknown error');
      }
    }
  });
  // Data Flow Analysis
  /* istanbul ignore next */
  cov_1mdh9u53o7().s[243]++;
  server.addTool({
    name: 'analyze-data-flow',
    description: 'Analyze data flow through workflow nodes with bottleneck identification and optimization suggestions',
    parameters: zod_1.z.object({
      workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
      startNodeId: zod_1.z.string().optional()
    }),
    annotations: {
      title: 'Data Flow Analysis',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1mdh9u53o7().f[37]++;
      const client =
      /* istanbul ignore next */
      (cov_1mdh9u53o7().s[244]++, getClient());
      /* istanbul ignore next */
      cov_1mdh9u53o7().s[245]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().b[59][0]++;
        cov_1mdh9u53o7().s[246]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1mdh9u53o7().b[59][1]++;
      }
      cov_1mdh9u53o7().s[247]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[248]++, await client.getWorkflow(args.workflowId));
        const nodeTypes =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[249]++, await client.getNodeTypes());
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[250]++;
        nodeAnalyzer.loadNodeTypes(nodeTypes);
        const dataFlow =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[251]++, nodeAnalyzer.analyzeDataFlow(workflow, args.startNodeId));
        const sections =
        /* istanbul ignore next */
        (cov_1mdh9u53o7().s[252]++, [`📊 **Data Flow Analysis: ${workflow.name}**\n`, `**Execution Path (${dataFlow.path.length} steps):**`]);
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[253]++;
        dataFlow.path.forEach((step, i) => {
          /* istanbul ignore next */
          cov_1mdh9u53o7().f[38]++;
          cov_1mdh9u53o7().s[254]++;
          sections.push(`${i + 1}. **${step.nodeName}** (${step.nodeType})`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[255]++;
          sections.push(`   Transformation: ${step.dataTransformation}`);
        });
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[256]++;
        sections.push('');
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[257]++;
        if (dataFlow.dataTypes.length > 0) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[60][0]++;
          cov_1mdh9u53o7().s[258]++;
          sections.push(`**Data Types by Step:**`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[259]++;
          dataFlow.dataTypes.forEach(dataType => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[39]++;
            cov_1mdh9u53o7().s[260]++;
            sections.push(`Step ${dataType.step + 1}: ${dataType.expectedType}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[261]++;
            if (dataType.schema) {
              /* istanbul ignore next */
              cov_1mdh9u53o7().b[61][0]++;
              cov_1mdh9u53o7().s[262]++;
              sections.push(`   Schema: ${JSON.stringify(dataType.schema, null, 2)}`);
            } else
            /* istanbul ignore next */
            {
              cov_1mdh9u53o7().b[61][1]++;
            }
          });
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[263]++;
          sections.push('');
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[60][1]++;
        }
        cov_1mdh9u53o7().s[264]++;
        if (dataFlow.bottlenecks.length > 0) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[62][0]++;
          cov_1mdh9u53o7().s[265]++;
          sections.push(`**⚠️ Identified Bottlenecks:**`);
          /* istanbul ignore next */
          cov_1mdh9u53o7().s[266]++;
          dataFlow.bottlenecks.forEach((bottleneck, i) => {
            /* istanbul ignore next */
            cov_1mdh9u53o7().f[40]++;
            const impactEmoji =
            /* istanbul ignore next */
            (cov_1mdh9u53o7().s[267]++, bottleneck.impact === 'high' ?
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[63][0]++, '🚨') :
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[63][1]++, bottleneck.impact === 'medium' ?
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[64][0]++, '⚠️') :
            /* istanbul ignore next */
            (cov_1mdh9u53o7().b[64][1]++, '💡')));
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[268]++;
            sections.push(`${i + 1}. ${impactEmoji} ${bottleneck.reason}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[269]++;
            sections.push(`   Node: ${bottleneck.nodeId}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[270]++;
            sections.push(`   Impact: ${bottleneck.impact}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[271]++;
            sections.push(`   Suggestion: ${bottleneck.suggestion}`);
            /* istanbul ignore next */
            cov_1mdh9u53o7().s[272]++;
            sections.push('');
          });
        } else {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[62][1]++;
          cov_1mdh9u53o7().s[273]++;
          sections.push(`✅ **No significant bottlenecks detected in the data flow.**`);
        }
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[274]++;
        return sections.join('\n');
      } catch (error) {
        /* istanbul ignore next */
        cov_1mdh9u53o7().s[275]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1mdh9u53o7().b[65][0]++;
          cov_1mdh9u53o7().s[276]++;
          throw new fastmcp_1.UserError(`Failed to analyze data flow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1mdh9u53o7().b[65][1]++;
        }
        cov_1mdh9u53o7().s[277]++;
        throw new fastmcp_1.UserError('Failed to analyze data flow with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,