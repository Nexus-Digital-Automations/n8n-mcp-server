8c370811ff1cd0d32d894797d4890430
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('@modelcontextprotocol/sdk/server/index.js');
globals_1.jest.mock('@modelcontextprotocol/sdk/server/stdio.js');
globals_1.jest.mock('node-fetch');
const index_js_1 = require("@modelcontextprotocol/sdk/server/index.js");
const stdio_js_1 = require("@modelcontextprotocol/sdk/server/stdio.js");
(0, globals_1.describe)('src/index.ts - Main MCP Server Entry Point', () => {
    let mockServer;
    let mockTransport;
    let mockConsoleError;
    let originalProcessExit;
    (0, globals_1.beforeEach)(() => {
        // Mock console.error to capture log messages
        mockConsoleError = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
        // Mock Server class
        mockServer = {
            setRequestHandler: globals_1.jest.fn(),
            connect: globals_1.jest.fn().mockResolvedValue(undefined),
        };
        index_js_1.Server.mockImplementation(() => mockServer);
        // Mock StdioServerTransport
        mockTransport = {};
        stdio_js_1.StdioServerTransport.mockImplementation(() => mockTransport);
        // Mock process.exit to prevent actual exit during tests
        originalProcessExit = process.exit;
        process.exit = globals_1.jest.fn();
        // Clear all mocks
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.afterEach)(() => {
        // Restore process.exit
        process.exit = originalProcessExit;
        mockConsoleError.mockRestore();
    });
    (0, globals_1.describe)('Server Initialization', () => {
        (0, globals_1.it)('should create Server with correct configuration', async () => {
            // Import the module to trigger initialization
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(index_js_1.Server).toHaveBeenCalledWith({
                name: 'n8n-integration',
                version: '1.0.0',
            }, {
                capabilities: {
                    tools: {},
                },
            });
        });
        (0, globals_1.it)('should create StdioServerTransport', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(stdio_js_1.StdioServerTransport).toHaveBeenCalledWith();
        });
        (0, globals_1.it)('should connect server to transport', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.connect).toHaveBeenCalledWith(mockTransport);
        });
        (0, globals_1.it)('should log startup message', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('N8N MCP Server running on stdio');
        });
    });
    (0, globals_1.describe)('Request Handlers Registration', () => {
        (0, globals_1.it)('should register ListToolsRequestSchema handler', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledWith(globals_1.expect.anything(), // ListToolsRequestSchema
            globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should register CallToolRequestSchema handler', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledWith(globals_1.expect.anything(), // CallToolRequestSchema
            globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should register exactly 2 request handlers', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            (0, globals_1.expect)(mockServer.setRequestHandler).toHaveBeenCalledTimes(2);
        });
    });
    (0, globals_1.describe)('Tools Registration', () => {
        let listToolsHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            // Extract the ListTools handler
            const listToolsCall = mockServer.setRequestHandler.mock.calls.find(call => call[0].toString().includes('list_tools'));
            listToolsHandler = listToolsCall?.[1];
        });
        (0, globals_1.it)('should return comprehensive list of tools', async () => {
            const result = await listToolsHandler();
            (0, globals_1.expect)(result).toHaveProperty('tools');
            (0, globals_1.expect)(result.tools).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.tools.length).toBeGreaterThan(20); // Should have many tools
        });
        (0, globals_1.it)('should include essential workflow tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('init-n8n');
            (0, globals_1.expect)(toolNames).toContain('list-workflows');
            (0, globals_1.expect)(toolNames).toContain('get-workflow');
            (0, globals_1.expect)(toolNames).toContain('create-workflow');
            (0, globals_1.expect)(toolNames).toContain('update-workflow');
            (0, globals_1.expect)(toolNames).toContain('delete-workflow');
            (0, globals_1.expect)(toolNames).toContain('activate-workflow');
            (0, globals_1.expect)(toolNames).toContain('deactivate-workflow');
        });
        (0, globals_1.it)('should include user management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-users');
            (0, globals_1.expect)(toolNames).toContain('create-users');
            (0, globals_1.expect)(toolNames).toContain('get-user');
            (0, globals_1.expect)(toolNames).toContain('delete-user');
        });
        (0, globals_1.it)('should include project management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-projects');
            (0, globals_1.expect)(toolNames).toContain('create-project');
            (0, globals_1.expect)(toolNames).toContain('delete-project');
            (0, globals_1.expect)(toolNames).toContain('update-project');
        });
        (0, globals_1.it)('should include execution management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-executions');
            (0, globals_1.expect)(toolNames).toContain('get-execution');
            (0, globals_1.expect)(toolNames).toContain('delete-execution');
        });
        (0, globals_1.it)('should include variable management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('list-variables');
            (0, globals_1.expect)(toolNames).toContain('create-variable');
            (0, globals_1.expect)(toolNames).toContain('delete-variable');
        });
        (0, globals_1.it)('should include credential management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('create-credential');
            (0, globals_1.expect)(toolNames).toContain('delete-credential');
            (0, globals_1.expect)(toolNames).toContain('get-credential-schema');
        });
        (0, globals_1.it)('should include tag management tools', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('create-tag');
            (0, globals_1.expect)(toolNames).toContain('list-tags');
            (0, globals_1.expect)(toolNames).toContain('get-tag');
            (0, globals_1.expect)(toolNames).toContain('update-tag');
            (0, globals_1.expect)(toolNames).toContain('delete-tag');
            (0, globals_1.expect)(toolNames).toContain('get-workflow-tags');
            (0, globals_1.expect)(toolNames).toContain('update-workflow-tags');
        });
        (0, globals_1.it)('should include audit tool', async () => {
            const result = await listToolsHandler();
            const toolNames = result.tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('generate-audit');
        });
        (0, globals_1.it)('should have proper tool schema structure', async () => {
            const result = await listToolsHandler();
            const initTool = result.tools.find((tool) => tool.name === 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('name', 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('description');
            (0, globals_1.expect)(initTool).toHaveProperty('inputSchema');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('type', 'object');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('properties');
            (0, globals_1.expect)(initTool.inputSchema).toHaveProperty('required');
        });
    });
    (0, globals_1.describe)('N8nClient Class', () => {
        let N8nClient;
        (0, globals_1.beforeEach)(async () => {
            // Import the module to get access to the N8nClient class
            const indexModule = await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            // N8nClient is not exported but we can access it through the tools
            N8nClient = indexModule.N8nClient;
        });
        (0, globals_1.it)('should construct with baseUrl and apiKey', () => {
            // We can't directly test the class as it's not exported
            // Instead, we'll test through the tool handlers
            (0, globals_1.expect)(true).toBe(true); // Placeholder - actual testing happens through tool execution
        });
        (0, globals_1.it)('should normalize baseUrl by removing trailing slash', () => {
            // This will be tested through the init-n8n tool execution
            (0, globals_1.expect)(true).toBe(true); // Placeholder
        });
    });
    (0, globals_1.describe)('Global State Management', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            // Extract the CallTool handler
            const callToolCall = mockServer.setRequestHandler.mock.calls.find(call => call[0].toString().includes('call_tool'));
            callToolHandler = callToolCall?.[1];
        });
        (0, globals_1.it)('should maintain client instances map', async () => {
            // Test that the clients map is used by trying to use an uninitialized client
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId: 'non-existent' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Client not initialized');
        });
        (0, globals_1.it)('should handle invalid tool names', async () => {
            const result = await callToolHandler({
                params: {
                    name: 'invalid-tool',
                    arguments: {},
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Unknown tool: invalid-tool');
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCall = mockServer.setRequestHandler.mock.calls.find(call => call[0].toString().includes('call_tool'));
            callToolHandler = callToolCall?.[1];
        });
        (0, globals_1.it)('should handle connection errors gracefully', async () => {
            // Mock fetch to throw an error
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            nodeFetch.default.mockRejectedValueOnce(new Error('Connection failed'));
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('Failed to connect to n8n');
        });
        (0, globals_1.it)('should handle API errors with proper error messages', async () => {
            // Mock fetch to return an error response
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            const mockResponse = {
                ok: false,
                status: 401,
                text: globals_1.jest
                    .fn()
                    .mockResolvedValue(JSON.stringify({ message: 'Unauthorized' })),
            };
            nodeFetch.default.mockResolvedValueOnce(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'invalid-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('N8N API error');
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            // Mock fetch to throw a non-Error object
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            nodeFetch.default.mockRejectedValueOnce('String error');
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toBeTruthy();
        });
        (0, globals_1.it)('should handle license-related errors specially', async () => {
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            const mockResponse = {
                ok: false,
                status: 403,
                text: globals_1.jest.fn().mockResolvedValue(JSON.stringify({
                    message: 'This operation requires an enterprise license',
                })),
            };
            nodeFetch.default.mockResolvedValueOnce(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result.isError).toBe(true);
            (0, globals_1.expect)(result.content[0].text).toContain('enterprise license');
        });
        (0, globals_1.it)('should handle 204 No Content responses', async () => {
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            // First call for init-n8n (mock successful connection test)
            const mockSuccessResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
            };
            // Second call that returns 204
            const mock204Response = {
                ok: true,
                status: 204,
                json: globals_1.jest.fn(),
            };
            nodeFetch.default
                .mockResolvedValueOnce(mockSuccessResponse)
                .mockResolvedValueOnce(mock204Response);
            // First initialize a client
            const initResult = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(initResult.isError).toBeFalsy();
            // Get the clientId from the response
            const clientId = initResult.content[0].text.match(/client ID for future operations: (.+)/)?.[1];
            (0, globals_1.expect)(clientId).toBeTruthy();
            // Now test a call that returns 204
            const result = await callToolHandler({
                params: {
                    name: 'create-project',
                    arguments: { clientId, name: 'Test Project' },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
        });
    });
    (0, globals_1.describe)('Tool Execution Integration', () => {
        let callToolHandler;
        let clientId;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCall = mockServer.setRequestHandler.mock.calls.find(call => call[0].toString().includes('call_tool'));
            callToolHandler = callToolCall?.[1];
            // Mock successful n8n connection
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
            };
            nodeFetch.default.mockResolvedValue(mockResponse);
            // Initialize a client
            const initResult = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            clientId = initResult.content[0].text.match(/client ID for future operations: (.+)/)?.[1];
        });
        (0, globals_1.it)('should successfully initialize n8n connection', async () => {
            (0, globals_1.expect)(clientId).toBeTruthy();
        });
        (0, globals_1.it)('should execute list-workflows tool', async () => {
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content[0].text).toBeTruthy();
        });
        (0, globals_1.it)('should execute workflow creation with proper parameters', async () => {
            const result = await callToolHandler({
                params: {
                    name: 'create-workflow',
                    arguments: {
                        clientId,
                        name: 'Test Workflow',
                        nodes: [],
                        connections: {},
                    },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content[0].text).toContain('Successfully created workflow');
        });
        (0, globals_1.it)('should handle workflow activation/deactivation', async () => {
            const activateResult = await callToolHandler({
                params: {
                    name: 'activate-workflow',
                    arguments: { clientId, id: 'test-workflow-id' },
                },
            });
            (0, globals_1.expect)(activateResult.isError).toBeFalsy();
            (0, globals_1.expect)(activateResult.content[0].text).toContain('Successfully activated workflow');
            const deactivateResult = await callToolHandler({
                params: {
                    name: 'deactivate-workflow',
                    arguments: { clientId, id: 'test-workflow-id' },
                },
            });
            (0, globals_1.expect)(deactivateResult.isError).toBeFalsy();
            (0, globals_1.expect)(deactivateResult.content[0].text).toContain('Successfully deactivated workflow');
        });
        (0, globals_1.it)('should execute user management operations', async () => {
            const listResult = await callToolHandler({
                params: {
                    name: 'list-users',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-users',
                    arguments: {
                        clientId,
                        users: [{ email: 'test@example.com', role: 'global:member' }],
                    },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute variable management operations', async () => {
            const listResult = await callToolHandler({
                params: {
                    name: 'list-variables',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-variable',
                    arguments: { clientId, key: 'TEST_VAR', value: 'test-value' },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute execution management operations', async () => {
            const listResult = await callToolHandler({
                params: {
                    name: 'list-executions',
                    arguments: { clientId, limit: 10 },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
            const getResult = await callToolHandler({
                params: {
                    name: 'get-execution',
                    arguments: { clientId, id: 123, includeData: true },
                },
            });
            (0, globals_1.expect)(getResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute tag management operations', async () => {
            const createResult = await callToolHandler({
                params: {
                    name: 'create-tag',
                    arguments: { clientId, name: 'Test Tag' },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
            const listResult = await callToolHandler({
                params: {
                    name: 'list-tags',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(listResult.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute audit generation', async () => {
            const result = await callToolHandler({
                params: {
                    name: 'generate-audit',
                    arguments: {
                        clientId,
                        categories: ['credentials', 'database'],
                        daysAbandonedWorkflow: 30,
                    },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
        });
        (0, globals_1.it)('should execute credential management operations', async () => {
            const schemaResult = await callToolHandler({
                params: {
                    name: 'get-credential-schema',
                    arguments: { clientId, credentialTypeName: 'httpBasicAuth' },
                },
            });
            (0, globals_1.expect)(schemaResult.isError).toBeFalsy();
            const createResult = await callToolHandler({
                params: {
                    name: 'create-credential',
                    arguments: {
                        clientId,
                        name: 'Test Credential',
                        type: 'httpBasicAuth',
                        data: { username: 'test', password: 'pass' },
                    },
                },
            });
            (0, globals_1.expect)(createResult.isError).toBeFalsy();
        });
    });
    (0, globals_1.describe)('Response Format Validation', () => {
        let callToolHandler;
        (0, globals_1.beforeEach)(async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index.js')));
            const callToolCall = mockServer.setRequestHandler.mock.calls.find(call => call[0].toString().includes('call_tool'));
            callToolHandler = callToolCall?.[1];
        });
        (0, globals_1.it)('should return proper error response structure', async () => {
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId: 'invalid' },
                },
            });
            (0, globals_1.expect)(result).toHaveProperty('content');
            (0, globals_1.expect)(result).toHaveProperty('isError', true);
            (0, globals_1.expect)(result.content).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.content[0]).toHaveProperty('type', 'text');
            (0, globals_1.expect)(result.content[0]).toHaveProperty('text');
        });
        (0, globals_1.it)('should return proper success response structure', async () => {
            // Mock successful response
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: [] }),
            };
            nodeFetch.default.mockResolvedValue(mockResponse);
            const result = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            (0, globals_1.expect)(result).toHaveProperty('content');
            (0, globals_1.expect)(result.isError).toBeFalsy();
            (0, globals_1.expect)(result.content).toBeInstanceOf(Array);
            (0, globals_1.expect)(result.content[0]).toHaveProperty('type', 'text');
            (0, globals_1.expect)(result.content[0]).toHaveProperty('text');
        });
        (0, globals_1.it)('should format JSON responses properly', async () => {
            const nodeFetch = await Promise.resolve().then(() => __importStar(require('node-fetch')));
            const mockWorkflows = [
                {
                    id: 1,
                    name: 'Test Workflow',
                    active: true,
                    createdAt: '2024-01-01',
                    updatedAt: '2024-01-01',
                    tags: [],
                },
            ];
            const mockResponse = {
                ok: true,
                status: 200,
                json: globals_1.jest.fn().mockResolvedValue({ data: mockWorkflows }),
            };
            nodeFetch.default.mockResolvedValue(mockResponse);
            // First initialize client
            const initResult = await callToolHandler({
                params: {
                    name: 'init-n8n',
                    arguments: { url: 'http://localhost:5678', apiKey: 'test-key' },
                },
            });
            const clientId = initResult.content[0].text.match(/client ID for future operations: (.+)/)?.[1];
            // Then list workflows
            const result = await callToolHandler({
                params: {
                    name: 'list-workflows',
                    arguments: { clientId },
                },
            });
            (0, globals_1.expect)(result.isError).toBeFalsy();
            const responseText = result.content[0].text;
            (0, globals_1.expect)(() => JSON.parse(responseText)).not.toThrow();
            const parsedResponse = JSON.parse(responseText);
            (0, globals_1.expect)(parsedResponse).toBeInstanceOf(Array);
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('id');
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('name');
            (0, globals_1.expect)(parsedResponse[0]).toHaveProperty('active');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,