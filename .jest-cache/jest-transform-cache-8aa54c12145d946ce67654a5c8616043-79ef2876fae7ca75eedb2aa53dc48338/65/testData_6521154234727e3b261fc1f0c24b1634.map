{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/testData.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/__tests__/testData.ts"],"sourcesContent":["// Test data fixtures for MCP conversion utilities\nimport {\n  MCPTool,\n  MCPServer,\n  MCPConnection,\n  MCPExecutionContext,\n  N8nExecutionData,\n  MCPConversionConfig,\n  ConversionContext,\n} from '../types/mcpTypes.js';\n\n// Mock MCP Tool definitions\nexport const mockSimpleTool: MCPTool = {\n  name: 'simple_test',\n  description: 'A simple test tool for unit testing',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      message: {\n        type: 'string',\n        description: 'A simple message parameter',\n        default: 'Hello World',\n      },\n      count: {\n        type: 'integer',\n        description: 'Number of iterations',\n        minimum: 1,\n        maximum: 100,\n      },\n    },\n    required: ['message'],\n  },\n};\n\nexport const mockComplexTool: MCPTool = {\n  name: 'complex_data_processor',\n  description: 'A complex tool with nested objects and arrays',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      config: {\n        type: 'object',\n        description: 'Configuration object',\n        properties: {\n          enabled: {\n            type: 'boolean',\n            default: true,\n          },\n          timeout: {\n            type: 'number',\n            minimum: 0.1,\n            maximum: 30.0,\n            default: 5.0,\n          },\n        },\n      },\n      items: {\n        type: 'array',\n        description: 'Array of items to process',\n        items: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            value: { type: 'number' },\n          },\n        },\n      },\n      operation: {\n        type: 'string',\n        enum: ['create', 'update', 'delete'],\n        description: 'Operation to perform',\n      },\n    },\n    required: ['operation'],\n  },\n};\n\nexport const mockEnumTool: MCPTool = {\n  name: 'enum_tool',\n  description: 'Tool with enum parameters',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      priority: {\n        type: 'string',\n        enum: ['low', 'medium', 'high'],\n        default: 'medium',\n        description: 'Priority level',\n      },\n      status: {\n        type: 'integer',\n        enum: [1, 2, 3, 4, 5],\n        description: 'Status code',\n      },\n    },\n    required: ['priority'],\n  },\n};\n\nexport const mockStringConstraintsTool: MCPTool = {\n  name: 'string_constraints',\n  description: 'Tool with string format constraints',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      email: {\n        type: 'string',\n        format: 'email',\n        description: 'User email address',\n      },\n      password: {\n        type: 'string',\n        format: 'password',\n        minLength: 8,\n        maxLength: 128,\n        description: 'User password',\n      },\n      website: {\n        type: 'string',\n        format: 'uri',\n        pattern: '^https?://',\n        description: 'Website URL',\n      },\n      code: {\n        type: 'string',\n        pattern: '^[A-Z]{3}[0-9]{3}$',\n        description: 'Product code (ABC123 format)',\n      },\n    },\n    required: ['email'],\n  },\n};\n\n// Mock MCP Server\nexport const mockMCPServer: MCPServer = {\n  id: 'test-server-1',\n  name: 'Test MCP Server',\n  url: 'https://api.example.com',\n  version: '1.0.0',\n  authentication: {\n    type: 'bearer',\n    credentials: { token: 'test-token-123' },\n  },\n  capabilities: {\n    tools: [mockSimpleTool, mockComplexTool],\n    resources: [\n      {\n        uri: 'file://test.txt',\n        name: 'Test File',\n        description: 'A test resource file',\n        mimeType: 'text/plain',\n      },\n    ],\n  },\n};\n\n// Mock MCP Connection\nexport const mockConnection: MCPConnection = {\n  serverId: 'test-server-1',\n  url: 'https://api.example.com',\n  authentication: {\n    type: 'bearer',\n    credentials: { token: 'test-token-123' },\n  },\n  isConnected: true,\n  lastHeartbeat: new Date('2024-01-01T12:00:00Z'),\n};\n\n// Mock n8n Execution Data\nexport const mockN8nExecutionData: N8nExecutionData[] = [\n  {\n    json: {\n      id: 'test-item-1',\n      name: 'Test Item',\n      value: 42,\n      nested: {\n        field: 'nested-value',\n        array: [1, 2, 3],\n      },\n    },\n    pairedItem: { item: 0 },\n  },\n  {\n    json: {\n      id: 'test-item-2',\n      name: 'Another Test Item',\n      value: 84,\n    },\n    pairedItem: { item: 1 },\n  },\n];\n\n// Mock MCP Execution Context\nexport const mockExecutionContext: MCPExecutionContext = {\n  connection: mockConnection,\n  tool: mockSimpleTool,\n  nodeParameters: {\n    message: 'Test message from n8n',\n    count: 5,\n  },\n  inputData: mockN8nExecutionData,\n};\n\n// Mock MCP Conversion Config\nexport const mockConversionConfig: MCPConversionConfig = {\n  nodeNamePrefix: 'MCP',\n  defaultIcon: 'fa:cog',\n  defaultGroup: ['transform'],\n  credentialName: 'mcpServerApi',\n  enableBinaryData: true,\n  enableResourceAccess: true,\n  typeMapping: {\n    string: 'string',\n    number: 'number',\n    integer: 'number',\n    boolean: 'boolean',\n    array: 'json',\n    object: 'json',\n  },\n};\n\n// Mock Conversion Context\nexport const mockConversionContext: ConversionContext = {\n  mcpServer: mockMCPServer,\n  tool: mockSimpleTool,\n  config: mockConversionConfig,\n};\n\n// Mock MCP Tool Response\nexport const mockMCPToolResponse = {\n  content: [\n    {\n      type: 'text',\n      text: 'Operation completed successfully',\n    },\n    {\n      type: 'image',\n      data: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAHAfXqOmAAAAElQTkSuQmCC',\n      mimeType: 'image/png',\n    },\n  ],\n};\n\n// Invalid test data for error cases\nexport const invalidMCPTool = {\n  // Missing required fields\n  description: 'Invalid tool',\n};\n\nexport const invalidSchema = {\n  type: 'array', // Should be 'object'\n  properties: {},\n};\n\nexport const circularSchema = {\n  type: 'object',\n  properties: {\n    self: {\n      type: 'object',\n      properties: {\n        nested: {\n          type: 'object',\n          properties: {}, // Would create circular reference in real scenario\n        },\n      },\n    },\n  },\n};\n\n// HTTP Response mocks\nexport const mockHttpResponse = {\n  ok: true,\n  status: 200,\n  statusText: 'OK',\n  json: jest.fn(),\n};\n\nexport const mockHttpErrorResponse = {\n  ok: false,\n  status: 500,\n  statusText: 'Internal Server Error',\n  json: jest.fn(),\n};\n\nexport const mockMCPCapabilities = {\n  tools: [mockSimpleTool, mockComplexTool, mockEnumTool],\n  resources: [\n    {\n      uri: 'file://test1.txt',\n      name: 'Test Resource 1',\n    },\n    {\n      uri: 'file://test2.json',\n      name: 'Test Resource 2',\n      mimeType: 'application/json',\n    },\n  ],\n  sampling: {\n    models: ['gpt-4', 'claude-3'],\n  },\n};\n\n// Expression test data\nexport const expressionTestCases = [\n  {\n    input: '{{ $json.name }}',\n    expected: 'Test Item',\n    description: 'Simple field reference',\n  },\n  {\n    input: 'Hello {{ $json.name }}, your value is {{ $json.value }}',\n    expected: 'Hello Test Item, your value is 42',\n    description: 'Multiple expressions',\n  },\n  {\n    input: '{{ $json.nested.field }}',\n    expected: 'nested-value',\n    description: 'Nested field reference',\n  },\n  {\n    input: '{{ $json.nonexistent }}',\n    expected: '{{ $json.nonexistent }}',\n    description: 'Non-existent field (should remain unchanged)',\n  },\n];\n\n// Type conversion test cases\nexport const typeConversionTestCases = [\n  // String conversions\n  { input: 'test string', type: 'string', expected: 'test string' },\n  { input: 123, type: 'string', expected: '123' },\n  { input: true, type: 'string', expected: 'true' },\n  { input: { key: 'value' }, type: 'string', expected: '{\"key\":\"value\"}' },\n  \n  // Number conversions\n  { input: '42.5', type: 'number', expected: 42.5 },\n  { input: 42, type: 'number', expected: 42 },\n  { input: true, type: 'number', expected: 1 },\n  { input: false, type: 'number', expected: 0 },\n  \n  // Integer conversions\n  { input: '42', type: 'integer', expected: 42 },\n  { input: 42.7, type: 'integer', expectedError: 'Value must be an integer' },\n  \n  // Boolean conversions\n  { input: true, type: 'boolean', expected: true },\n  { input: 'true', type: 'boolean', expected: true },\n  { input: '1', type: 'boolean', expected: true },\n  { input: 'yes', type: 'boolean', expected: true },\n  { input: false, type: 'boolean', expected: false },\n  { input: 'false', type: 'boolean', expected: false },\n  { input: '0', type: 'boolean', expected: false },\n  { input: '', type: 'boolean', expected: false },\n  \n  // Array conversions\n  { input: [1, 2, 3], type: 'array', expected: [1, 2, 3] },\n  { input: '[1,2,3]', type: 'array', expected: [1, 2, 3] },\n  { input: 'single item', type: 'array', expected: ['single item'] },\n  \n  // Object conversions\n  { input: { key: 'value' }, type: 'object', expected: { key: 'value' } },\n  { input: '{\"key\":\"value\"}', type: 'object', expected: { key: 'value' } },\n];\n\n// Error test scenarios\nexport const errorTestScenarios = [\n  {\n    name: 'Invalid MCP tool data',\n    data: null,\n    expectedError: 'Invalid MCP tool data',\n  },\n  {\n    name: 'Missing tool name',\n    data: { description: 'Test' },\n    expectedError: 'MCP tool must have a name',\n  },\n  {\n    name: 'Missing tool description',\n    data: { name: 'test' },\n    expectedError: 'MCP tool must have a description',\n  },\n  {\n    name: 'Missing input schema',\n    data: { name: 'test', description: 'Test tool' },\n    expectedError: 'MCP tool must have inputSchema',\n  },\n  {\n    name: 'Invalid schema type',\n    data: {\n      name: 'test',\n      description: 'Test tool',\n      inputSchema: { type: 'string', properties: {} },\n    },\n    expectedError: 'MCP tool schema must be of type \"object\"',\n  },\n];"],"version":3}