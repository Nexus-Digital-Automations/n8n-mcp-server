a69fd3c1fc84f7886faee835cb8cae0d
/* istanbul ignore next */
function cov_1giyc2czfi() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts";
  var hash = "5e1f49e1ed152bb317667fe98a2049f5fe6d8a3a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 20
        },
        end: {
          line: 6,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "2": {
        start: {
          line: 10,
          column: 23
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "3": {
        start: {
          line: 14,
          column: 24
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "4": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "5": {
        start: {
          line: 21,
          column: 33
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "6": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 81,
          column: 7
        }
      },
      "7": {
        start: {
          line: 40,
          column: 27
        },
        end: {
          line: 40,
          column: 38
        }
      },
      "8": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 43,
          column: 13
        }
      },
      "9": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 94
        }
      },
      "10": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 79,
          column: 13
        }
      },
      "11": {
        start: {
          line: 45,
          column: 32
        },
        end: {
          line: 45,
          column: 34
        }
      },
      "12": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "13": {
        start: {
          line: 47,
          column: 20
        },
        end: {
          line: 47,
          column: 47
        }
      },
      "14": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 49,
          column: 49
        }
      },
      "15": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 49
        }
      },
      "16": {
        start: {
          line: 50,
          column: 33
        },
        end: {
          line: 50,
          column: 62
        }
      },
      "17": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "18": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 64
        }
      },
      "19": {
        start: {
          line: 54,
          column: 29
        },
        end: {
          line: 54,
          column: 72
        }
      },
      "20": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 68,
          column: 19
        }
      },
      "21": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 64
        }
      },
      "22": {
        start: {
          line: 57,
          column: 20
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "23": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "24": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 74
        }
      },
      "25": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "26": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 100
        }
      },
      "27": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 66,
          column: 21
        }
      },
      "28": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 100
        }
      },
      "29": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 67,
          column: 35
        }
      },
      "30": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 71,
          column: 17
        }
      },
      "31": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 95
        }
      },
      "32": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 72,
          column: 30
        }
      },
      "33": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 77,
          column: 17
        }
      },
      "34": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 81
        }
      },
      "35": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 78,
          column: 78
        }
      },
      "36": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 122,
          column: 7
        }
      },
      "37": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 38
        }
      },
      "38": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 98,
          column: 13
        }
      },
      "39": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 97,
          column: 94
        }
      },
      "40": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 120,
          column: 13
        }
      },
      "41": {
        start: {
          line: 100,
          column: 28
        },
        end: {
          line: 100,
          column: 59
        }
      },
      "42": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 101,
          column: 53
        }
      },
      "43": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 48
        }
      },
      "44": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 103,
          column: 52
        }
      },
      "45": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 106,
          column: 17
        }
      },
      "46": {
        start: {
          line: 105,
          column: 20
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "47": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "48": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 91
        }
      },
      "49": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "50": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 91
        }
      },
      "51": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 30
        }
      },
      "52": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "53": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 79
        }
      },
      "54": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 76
        }
      },
      "55": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 154,
          column: 7
        }
      },
      "56": {
        start: {
          line: 136,
          column: 27
        },
        end: {
          line: 136,
          column: 38
        }
      },
      "57": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 139,
          column: 13
        }
      },
      "58": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 94
        }
      },
      "59": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 152,
          column: 13
        }
      },
      "60": {
        start: {
          line: 141,
          column: 32
        },
        end: {
          line: 143,
          column: 17
        }
      },
      "61": {
        start: {
          line: 144,
          column: 28
        },
        end: {
          line: 144,
          column: 59
        }
      },
      "62": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 85
        }
      },
      "63": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 150,
          column: 17
        }
      },
      "64": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 149,
          column: 82
        }
      },
      "65": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 151,
          column: 79
        }
      },
      "66": {
        start: {
          line: 156,
          column: 4
        },
        end: {
          line: 187,
          column: 7
        }
      },
      "67": {
        start: {
          line: 168,
          column: 27
        },
        end: {
          line: 168,
          column: 38
        }
      },
      "68": {
        start: {
          line: 169,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "69": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 94
        }
      },
      "70": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 185,
          column: 13
        }
      },
      "71": {
        start: {
          line: 173,
          column: 49
        },
        end: {
          line: 173,
          column: 53
        }
      },
      "72": {
        start: {
          line: 174,
          column: 32
        },
        end: {
          line: 176,
          column: 17
        }
      },
      "73": {
        start: {
          line: 177,
          column: 28
        },
        end: {
          line: 177,
          column: 66
        }
      },
      "74": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 85
        }
      },
      "75": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 183,
          column: 17
        }
      },
      "76": {
        start: {
          line: 182,
          column: 20
        },
        end: {
          line: 182,
          column: 82
        }
      },
      "77": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 79
        }
      },
      "78": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 216,
          column: 7
        }
      },
      "79": {
        start: {
          line: 201,
          column: 27
        },
        end: {
          line: 201,
          column: 38
        }
      },
      "80": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 204,
          column: 13
        }
      },
      "81": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 94
        }
      },
      "82": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 214,
          column: 13
        }
      },
      "83": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 51
        }
      },
      "84": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 75
        }
      },
      "85": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 212,
          column: 17
        }
      },
      "86": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 82
        }
      },
      "87": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 79
        }
      },
      "88": {
        start: {
          line: 218,
          column: 4
        },
        end: {
          line: 252,
          column: 7
        }
      },
      "89": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 38
        }
      },
      "90": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 233,
          column: 13
        }
      },
      "91": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 94
        }
      },
      "92": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "93": {
        start: {
          line: 235,
          column: 29
        },
        end: {
          line: 235,
          column: 74
        }
      },
      "94": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "95": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 79
        }
      },
      "96": {
        start: {
          line: 239,
          column: 29
        },
        end: {
          line: 239,
          column: 95
        }
      },
      "97": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 242,
          column: 19
        }
      },
      "98": {
        start: {
          line: 241,
          column: 20
        },
        end: {
          line: 241,
          column: 80
        }
      },
      "99": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 30
        }
      },
      "100": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 248,
          column: 17
        }
      },
      "101": {
        start: {
          line: 247,
          column: 20
        },
        end: {
          line: 247,
          column: 89
        }
      },
      "102": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 86
        }
      },
      "103": {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 282,
          column: 7
        }
      },
      "104": {
        start: {
          line: 266,
          column: 27
        },
        end: {
          line: 266,
          column: 38
        }
      },
      "105": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "106": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 94
        }
      },
      "107": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "108": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 78
        }
      },
      "109": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 272,
          column: 51
        }
      },
      "110": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 100
        }
      },
      "111": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 278,
          column: 17
        }
      },
      "112": {
        start: {
          line: 277,
          column: 20
        },
        end: {
          line: 277,
          column: 92
        }
      },
      "113": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 89
        }
      }
    },
    fnMap: {
      "0": {
        name: "createTagTools",
        decl: {
          start: {
            line: 26,
            column: 16
          },
          end: {
            line: 26,
            column: 30
          }
        },
        loc: {
          start: {
            line: 26,
            column: 50
          },
          end: {
            line: 283,
            column: 1
          }
        },
        line: 26
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 39,
            column: 18
          }
        },
        loc: {
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 80,
            column: 9
          }
        },
        line: 39
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 38
          },
          end: {
            line: 55,
            column: 39
          }
        },
        loc: {
          start: {
            line: 55,
            column: 54
          },
          end: {
            line: 68,
            column: 17
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 17
          },
          end: {
            line: 94,
            column: 18
          }
        },
        loc: {
          start: {
            line: 94,
            column: 33
          },
          end: {
            line: 121,
            column: 9
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 135,
            column: 17
          },
          end: {
            line: 135,
            column: 18
          }
        },
        loc: {
          start: {
            line: 135,
            column: 33
          },
          end: {
            line: 153,
            column: 9
          }
        },
        line: 135
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 18
          }
        },
        loc: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 167
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 200,
            column: 17
          },
          end: {
            line: 200,
            column: 18
          }
        },
        loc: {
          start: {
            line: 200,
            column: 33
          },
          end: {
            line: 215,
            column: 9
          }
        },
        line: 200
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 229,
            column: 17
          },
          end: {
            line: 229,
            column: 18
          }
        },
        loc: {
          start: {
            line: 229,
            column: 33
          },
          end: {
            line: 251,
            column: 9
          }
        },
        line: 229
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 240,
            column: 29
          },
          end: {
            line: 240,
            column: 30
          }
        },
        loc: {
          start: {
            line: 240,
            column: 45
          },
          end: {
            line: 242,
            column: 17
          }
        },
        line: 240
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 265,
            column: 17
          },
          end: {
            line: 265,
            column: 18
          }
        },
        loc: {
          start: {
            line: 265,
            column: 33
          },
          end: {
            line: 281,
            column: 9
          }
        },
        line: 265
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 43,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 47,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 47,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 49,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 49,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 53,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 60,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 60,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 66,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 66,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 71,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 71,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 16
          },
          end: {
            line: 77,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 16
          },
          end: {
            line: 106,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "15": {
        loc: {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 150,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 150,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "16": {
        loc: {
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 12
          },
          end: {
            line: 171,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "17": {
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 183,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "18": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 204,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "19": {
        loc: {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 212,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 212,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "20": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 233,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "21": {
        loc: {
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "22": {
        loc: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 248,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 246
      },
      "23": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "24": {
        loc: {
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 278,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nTag, CreateTagRequest, UpdateTagRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst TagIdSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n});\n\nconst WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst ListTagsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateTagSchema = z.object({\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateTagSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateWorkflowTagsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  tagIds: z.array(z.string()).min(0, 'Tag IDs must be an array'),\n});\n\n// Tool registration function\nexport function createTagTools(getClient: () => N8nClient | null, server: any) {\n  // List tags tool\n  server.addTool({\n    name: 'list-tags',\n    description: 'List all tags in the n8n instance with pagination support and usage statistics',\n    parameters: ListTagsSchema,\n    annotations: {\n      title: 'List n8n Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getTags(options);\n\n        if (response.data.length === 0) {\n          return 'No tags found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} tag(s):\\n\\n`;\n\n        response.data.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}**\\n`;\n          result += `   - ID: ${tag.id}\\n`;\n\n          if (tag.usageCount !== undefined) {\n            result += `   - Usage Count: ${tag.usageCount}\\n`;\n          }\n\n          if (tag.createdAt) {\n            result += `   - Created: ${new Date(tag.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (tag.updatedAt) {\n            result += `   - Updated: ${new Date(tag.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list tags: ${error.message}`);\n        }\n        throw new UserError('Failed to list tags with unknown error');\n      }\n    },\n  });\n\n  // Get tag tool\n  server.addTool({\n    name: 'get-tag',\n    description: 'Get detailed information about a specific tag by ID',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Get Tag Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tag = await client.getTag(args.tagId);\n\n        let result = `# Tag: ${tag.name}\\n\\n`;\n        result += `**ID:** ${tag.id}\\n`;\n        result += `**Name:** ${tag.name}\\n`;\n\n        if (tag.usageCount !== undefined) {\n          result += `**Usage Count:** ${tag.usageCount}\\n`;\n        }\n\n        if (tag.createdAt) {\n          result += `**Created:** ${new Date(tag.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (tag.updatedAt) {\n          result += `**Updated:** ${new Date(tag.updatedAt).toLocaleString()}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get tag: ${error.message}`);\n        }\n        throw new UserError('Failed to get tag with unknown error');\n      }\n    },\n  });\n\n  // Create tag tool\n  server.addTool({\n    name: 'create-tag',\n    description: 'Create a new tag in n8n for organizing workflows',\n    parameters: CreateTagSchema,\n    annotations: {\n      title: 'Create New Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tagData: CreateTagRequest = {\n          name: args.name,\n        };\n\n        const tag = await client.createTag(tagData);\n\n        return `\u2705 Successfully created tag \"${tag.name}\" with ID: ${tag.id}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create tag: ${error.message}`);\n        }\n        throw new UserError('Failed to create tag with unknown error');\n      }\n    },\n  });\n\n  // Update tag tool\n  server.addTool({\n    name: 'update-tag',\n    description: \"Update a tag's name in n8n\",\n    parameters: UpdateTagSchema,\n    annotations: {\n      title: 'Update Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { tagId, ...updateData } = args;\n        const tagData: UpdateTagRequest = {\n          name: updateData.name,\n        };\n\n        const tag = await client.updateTag(tagId, tagData);\n\n        return `\u2705 Successfully updated tag to \"${tag.name}\" (ID: ${tag.id})`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update tag: ${error.message}`);\n        }\n        throw new UserError('Failed to update tag with unknown error');\n      }\n    },\n  });\n\n  // Delete tag tool\n  server.addTool({\n    name: 'delete-tag',\n    description:\n      'Delete a tag from n8n permanently. This will remove the tag from all workflows using it',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Delete Tag',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteTag(args.tagId);\n        return `\u2705 Successfully deleted tag with ID: ${args.tagId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete tag: ${error.message}`);\n        }\n        throw new UserError('Failed to delete tag with unknown error');\n      }\n    },\n  });\n\n  // Get workflow tags tool\n  server.addTool({\n    name: 'get-workflow-tags',\n    description: 'Get all tags assigned to a specific workflow',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Get Workflow Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(args.workflowId);\n\n        if (tags.length === 0) {\n          return `No tags found for workflow ID: ${args.workflowId}`;\n        }\n\n        let result = `Found ${tags.length} tag(s) for workflow ${args.workflowId}:\\n\\n`;\n\n        tags.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}** (ID: ${tag.id})\\n`;\n        });\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow tags with unknown error');\n      }\n    },\n  });\n\n  // Update workflow tags tool\n  server.addTool({\n    name: 'update-workflow-tags',\n    description:\n      'Update the tags assigned to a workflow. This replaces all existing tags with the provided list',\n    parameters: UpdateWorkflowTagsSchema,\n    annotations: {\n      title: 'Update Workflow Tags',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateWorkflowTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.updateWorkflowTags(args.workflowId, args.tagIds);\n\n        const tagCount = args.tagIds.length;\n        return `\u2705 Successfully updated workflow ${args.workflowId} with ${tagCount} tag(s)`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to update workflow tags with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5e1f49e1ed152bb317667fe98a2049f5fe6d8a3a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1giyc2czfi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1giyc2czfi();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Zod schemas for validation
const TagIdSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[0]++, z.object({
  tagId: z.string().min(1, 'Tag ID is required')
}));
const WorkflowIdSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[1]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required')
}));
const ListTagsSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[2]++, z.object({
  limit: z.number().min(1).max(100).optional(),
  cursor: z.string().optional()
}));
const CreateTagSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[3]++, z.object({
  name: z.string().min(1, 'Tag name is required')
}));
const UpdateTagSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[4]++, z.object({
  tagId: z.string().min(1, 'Tag ID is required'),
  name: z.string().min(1, 'Tag name is required')
}));
const UpdateWorkflowTagsSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[5]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  tagIds: z.array(z.string()).min(0, 'Tag IDs must be an array')
}));
// Tool registration function
export function createTagTools(getClient, server) {
  /* istanbul ignore next */
  cov_1giyc2czfi().f[0]++;
  cov_1giyc2czfi().s[6]++;
  // List tags tool
  server.addTool({
    name: 'list-tags',
    description: 'List all tags in the n8n instance with pagination support and usage statistics',
    parameters: ListTagsSchema,
    annotations: {
      title: 'List n8n Tags',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[7]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[8]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[0][0]++;
        cov_1giyc2czfi().s[9]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[0][1]++;
      }
      cov_1giyc2czfi().s[10]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[11]++, {});
        /* istanbul ignore next */
        cov_1giyc2czfi().s[12]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[1][0]++;
          cov_1giyc2czfi().s[13]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[1][1]++;
        }
        cov_1giyc2czfi().s[14]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[2][0]++;
          cov_1giyc2czfi().s[15]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[16]++, await client.getTags(options));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[17]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[3][0]++;
          cov_1giyc2czfi().s[18]++;
          return 'No tags found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[19]++, `Found ${response.data.length} tag(s):\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[20]++;
        response.data.forEach((tag, index) => {
          /* istanbul ignore next */
          cov_1giyc2czfi().f[2]++;
          cov_1giyc2czfi().s[21]++;
          result += `${index + 1}. **${tag.name}**\n`;
          /* istanbul ignore next */
          cov_1giyc2czfi().s[22]++;
          result += `   - ID: ${tag.id}\n`;
          /* istanbul ignore next */
          cov_1giyc2czfi().s[23]++;
          if (tag.usageCount !== undefined) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[4][0]++;
            cov_1giyc2czfi().s[24]++;
            result += `   - Usage Count: ${tag.usageCount}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[4][1]++;
          }
          cov_1giyc2czfi().s[25]++;
          if (tag.createdAt) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[5][0]++;
            cov_1giyc2czfi().s[26]++;
            result += `   - Created: ${new Date(tag.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[5][1]++;
          }
          cov_1giyc2czfi().s[27]++;
          if (tag.updatedAt) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[6][0]++;
            cov_1giyc2czfi().s[28]++;
            result += `   - Updated: ${new Date(tag.updatedAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[6][1]++;
          }
          cov_1giyc2czfi().s[29]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1giyc2czfi().s[30]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[7][0]++;
          cov_1giyc2czfi().s[31]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[7][1]++;
        }
        cov_1giyc2czfi().s[32]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[33]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[8][0]++;
          cov_1giyc2czfi().s[34]++;
          throw new UserError(`Failed to list tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[8][1]++;
        }
        cov_1giyc2czfi().s[35]++;
        throw new UserError('Failed to list tags with unknown error');
      }
    }
  });
  // Get tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[36]++;
  server.addTool({
    name: 'get-tag',
    description: 'Get detailed information about a specific tag by ID',
    parameters: TagIdSchema,
    annotations: {
      title: 'Get Tag Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[37]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[38]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[9][0]++;
        cov_1giyc2czfi().s[39]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[9][1]++;
      }
      cov_1giyc2czfi().s[40]++;
      try {
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[41]++, await client.getTag(args.tagId));
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[42]++, `# Tag: ${tag.name}\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[43]++;
        result += `**ID:** ${tag.id}\n`;
        /* istanbul ignore next */
        cov_1giyc2czfi().s[44]++;
        result += `**Name:** ${tag.name}\n`;
        /* istanbul ignore next */
        cov_1giyc2czfi().s[45]++;
        if (tag.usageCount !== undefined) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[10][0]++;
          cov_1giyc2czfi().s[46]++;
          result += `**Usage Count:** ${tag.usageCount}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[10][1]++;
        }
        cov_1giyc2czfi().s[47]++;
        if (tag.createdAt) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[11][0]++;
          cov_1giyc2czfi().s[48]++;
          result += `**Created:** ${new Date(tag.createdAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[11][1]++;
        }
        cov_1giyc2czfi().s[49]++;
        if (tag.updatedAt) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[12][0]++;
          cov_1giyc2czfi().s[50]++;
          result += `**Updated:** ${new Date(tag.updatedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[12][1]++;
        }
        cov_1giyc2czfi().s[51]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[52]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[13][0]++;
          cov_1giyc2czfi().s[53]++;
          throw new UserError(`Failed to get tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[13][1]++;
        }
        cov_1giyc2czfi().s[54]++;
        throw new UserError('Failed to get tag with unknown error');
      }
    }
  });
  // Create tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[55]++;
  server.addTool({
    name: 'create-tag',
    description: 'Create a new tag in n8n for organizing workflows',
    parameters: CreateTagSchema,
    annotations: {
      title: 'Create New Tag',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[56]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[57]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[14][0]++;
        cov_1giyc2czfi().s[58]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[14][1]++;
      }
      cov_1giyc2czfi().s[59]++;
      try {
        const tagData =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[60]++, {
          name: args.name
        });
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[61]++, await client.createTag(tagData));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[62]++;
        return `✅ Successfully created tag "${tag.name}" with ID: ${tag.id}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[63]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[15][0]++;
          cov_1giyc2czfi().s[64]++;
          throw new UserError(`Failed to create tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[15][1]++;
        }
        cov_1giyc2czfi().s[65]++;
        throw new UserError('Failed to create tag with unknown error');
      }
    }
  });
  // Update tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[66]++;
  server.addTool({
    name: 'update-tag',
    description: "Update a tag's name in n8n",
    parameters: UpdateTagSchema,
    annotations: {
      title: 'Update Tag',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[67]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[68]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[16][0]++;
        cov_1giyc2czfi().s[69]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[16][1]++;
      }
      cov_1giyc2czfi().s[70]++;
      try {
        const {
          tagId,
          ...updateData
        } =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[71]++, args);
        const tagData =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[72]++, {
          name: updateData.name
        });
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[73]++, await client.updateTag(tagId, tagData));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[74]++;
        return `✅ Successfully updated tag to "${tag.name}" (ID: ${tag.id})`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[75]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[17][0]++;
          cov_1giyc2czfi().s[76]++;
          throw new UserError(`Failed to update tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[17][1]++;
        }
        cov_1giyc2czfi().s[77]++;
        throw new UserError('Failed to update tag with unknown error');
      }
    }
  });
  // Delete tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[78]++;
  server.addTool({
    name: 'delete-tag',
    description: 'Delete a tag from n8n permanently. This will remove the tag from all workflows using it',
    parameters: TagIdSchema,
    annotations: {
      title: 'Delete Tag',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[6]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[79]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[80]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[18][0]++;
        cov_1giyc2czfi().s[81]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[18][1]++;
      }
      cov_1giyc2czfi().s[82]++;
      try {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[83]++;
        await client.deleteTag(args.tagId);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[84]++;
        return `✅ Successfully deleted tag with ID: ${args.tagId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[85]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[19][0]++;
          cov_1giyc2czfi().s[86]++;
          throw new UserError(`Failed to delete tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[19][1]++;
        }
        cov_1giyc2czfi().s[87]++;
        throw new UserError('Failed to delete tag with unknown error');
      }
    }
  });
  // Get workflow tags tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[88]++;
  server.addTool({
    name: 'get-workflow-tags',
    description: 'Get all tags assigned to a specific workflow',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Get Workflow Tags',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[7]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[89]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[90]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[20][0]++;
        cov_1giyc2czfi().s[91]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[20][1]++;
      }
      cov_1giyc2czfi().s[92]++;
      try {
        const tags =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[93]++, await client.getWorkflowTags(args.workflowId));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[94]++;
        if (tags.length === 0) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[21][0]++;
          cov_1giyc2czfi().s[95]++;
          return `No tags found for workflow ID: ${args.workflowId}`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[21][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[96]++, `Found ${tags.length} tag(s) for workflow ${args.workflowId}:\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[97]++;
        tags.forEach((tag, index) => {
          /* istanbul ignore next */
          cov_1giyc2czfi().f[8]++;
          cov_1giyc2czfi().s[98]++;
          result += `${index + 1}. **${tag.name}** (ID: ${tag.id})\n`;
        });
        /* istanbul ignore next */
        cov_1giyc2czfi().s[99]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[100]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[22][0]++;
          cov_1giyc2czfi().s[101]++;
          throw new UserError(`Failed to get workflow tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[22][1]++;
        }
        cov_1giyc2czfi().s[102]++;
        throw new UserError('Failed to get workflow tags with unknown error');
      }
    }
  });
  // Update workflow tags tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[103]++;
  server.addTool({
    name: 'update-workflow-tags',
    description: 'Update the tags assigned to a workflow. This replaces all existing tags with the provided list',
    parameters: UpdateWorkflowTagsSchema,
    annotations: {
      title: 'Update Workflow Tags',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[9]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[104]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[105]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[23][0]++;
        cov_1giyc2czfi().s[106]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[23][1]++;
      }
      cov_1giyc2czfi().s[107]++;
      try {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[108]++;
        await client.updateWorkflowTags(args.workflowId, args.tagIds);
        const tagCount =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[109]++, args.tagIds.length);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[110]++;
        return `✅ Successfully updated workflow ${args.workflowId} with ${tagCount} tag(s)`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[111]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[24][0]++;
          cov_1giyc2czfi().s[112]++;
          throw new UserError(`Failed to update workflow tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[24][1]++;
        }
        cov_1giyc2czfi().s[113]++;
        throw new UserError('Failed to update workflow tags with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMWdpeWMyY3pmaSIsImFjdHVhbENvdmVyYWdlIiwieiIsIlVzZXJFcnJvciIsIlRhZ0lkU2NoZW1hIiwicyIsIm9iamVjdCIsInRhZ0lkIiwic3RyaW5nIiwibWluIiwiV29ya2Zsb3dJZFNjaGVtYSIsIndvcmtmbG93SWQiLCJMaXN0VGFnc1NjaGVtYSIsImxpbWl0IiwibnVtYmVyIiwibWF4Iiwib3B0aW9uYWwiLCJjdXJzb3IiLCJDcmVhdGVUYWdTY2hlbWEiLCJuYW1lIiwiVXBkYXRlVGFnU2NoZW1hIiwiVXBkYXRlV29ya2Zsb3dUYWdzU2NoZW1hIiwidGFnSWRzIiwiYXJyYXkiLCJjcmVhdGVUYWdUb29scyIsImdldENsaWVudCIsInNlcnZlciIsImYiLCJhZGRUb29sIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwiYW5ub3RhdGlvbnMiLCJ0aXRsZSIsInJlYWRPbmx5SGludCIsImRlc3RydWN0aXZlSGludCIsImlkZW1wb3RlbnRIaW50Iiwib3BlbldvcmxkSGludCIsImV4ZWN1dGUiLCJhcmdzIiwiY2xpZW50IiwiYiIsIm9wdGlvbnMiLCJyZXNwb25zZSIsImdldFRhZ3MiLCJkYXRhIiwibGVuZ3RoIiwicmVzdWx0IiwiZm9yRWFjaCIsInRhZyIsImluZGV4IiwiaWQiLCJ1c2FnZUNvdW50IiwidW5kZWZpbmVkIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyIsInVwZGF0ZWRBdCIsIm5leHRDdXJzb3IiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsImdldFRhZyIsInRvTG9jYWxlU3RyaW5nIiwidGFnRGF0YSIsImNyZWF0ZVRhZyIsInVwZGF0ZURhdGEiLCJ1cGRhdGVUYWciLCJkZWxldGVUYWciLCJ0YWdzIiwiZ2V0V29ya2Zsb3dUYWdzIiwidXBkYXRlV29ya2Zsb3dUYWdzIiwidGFnQ291bnQiXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci9zcmMvdG9vbHMvdGFncy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJztcbmltcG9ydCB7IFVzZXJFcnJvciB9IGZyb20gJ2Zhc3RtY3AnO1xuaW1wb3J0IHsgTjhuQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L244bkNsaWVudC5qcyc7XG5pbXBvcnQgeyBOOG5UYWcsIENyZWF0ZVRhZ1JlcXVlc3QsIFVwZGF0ZVRhZ1JlcXVlc3QsIFBhZ2luYXRpb25PcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMvbjhuLmpzJztcblxuLy8gWm9kIHNjaGVtYXMgZm9yIHZhbGlkYXRpb25cbmNvbnN0IFRhZ0lkU2NoZW1hID0gei5vYmplY3Qoe1xuICB0YWdJZDogei5zdHJpbmcoKS5taW4oMSwgJ1RhZyBJRCBpcyByZXF1aXJlZCcpLFxufSk7XG5cbmNvbnN0IFdvcmtmbG93SWRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHdvcmtmbG93SWQ6IHouc3RyaW5nKCkubWluKDEsICdXb3JrZmxvdyBJRCBpcyByZXF1aXJlZCcpLFxufSk7XG5cbmNvbnN0IExpc3RUYWdzU2NoZW1hID0gei5vYmplY3Qoe1xuICBsaW1pdDogei5udW1iZXIoKS5taW4oMSkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgY3Vyc29yOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuY29uc3QgQ3JlYXRlVGFnU2NoZW1hID0gei5vYmplY3Qoe1xuICBuYW1lOiB6LnN0cmluZygpLm1pbigxLCAnVGFnIG5hbWUgaXMgcmVxdWlyZWQnKSxcbn0pO1xuXG5jb25zdCBVcGRhdGVUYWdTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHRhZ0lkOiB6LnN0cmluZygpLm1pbigxLCAnVGFnIElEIGlzIHJlcXVpcmVkJyksXG4gIG5hbWU6IHouc3RyaW5nKCkubWluKDEsICdUYWcgbmFtZSBpcyByZXF1aXJlZCcpLFxufSk7XG5cbmNvbnN0IFVwZGF0ZVdvcmtmbG93VGFnc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5taW4oMSwgJ1dvcmtmbG93IElEIGlzIHJlcXVpcmVkJyksXG4gIHRhZ0lkczogei5hcnJheSh6LnN0cmluZygpKS5taW4oMCwgJ1RhZyBJRHMgbXVzdCBiZSBhbiBhcnJheScpLFxufSk7XG5cbi8vIFRvb2wgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnVG9vbHMoZ2V0Q2xpZW50OiAoKSA9PiBOOG5DbGllbnQgfCBudWxsLCBzZXJ2ZXI6IGFueSkge1xuICAvLyBMaXN0IHRhZ3MgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2xpc3QtdGFncycsXG4gICAgZGVzY3JpcHRpb246ICdMaXN0IGFsbCB0YWdzIGluIHRoZSBuOG4gaW5zdGFuY2Ugd2l0aCBwYWdpbmF0aW9uIHN1cHBvcnQgYW5kIHVzYWdlIHN0YXRpc3RpY3MnLFxuICAgIHBhcmFtZXRlcnM6IExpc3RUYWdzU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0xpc3QgbjhuIFRhZ3MnLFxuICAgICAgcmVhZE9ubHlIaW50OiB0cnVlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBMaXN0VGFnc1NjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IFBhZ2luYXRpb25PcHRpb25zID0ge307XG4gICAgICAgIGlmIChhcmdzLmxpbWl0KSBvcHRpb25zLmxpbWl0ID0gYXJncy5saW1pdDtcbiAgICAgICAgaWYgKGFyZ3MuY3Vyc29yKSBvcHRpb25zLmN1cnNvciA9IGFyZ3MuY3Vyc29yO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2xpZW50LmdldFRhZ3Mob3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuICdObyB0YWdzIGZvdW5kIGluIHRoZSBuOG4gaW5zdGFuY2UuJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCByZXN1bHQgPSBgRm91bmQgJHtyZXNwb25zZS5kYXRhLmxlbmd0aH0gdGFnKHMpOlxcblxcbmA7XG5cbiAgICAgICAgcmVzcG9uc2UuZGF0YS5mb3JFYWNoKCh0YWc6IE44blRhZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIHJlc3VsdCArPSBgJHtpbmRleCArIDF9LiAqKiR7dGFnLm5hbWV9KipcXG5gO1xuICAgICAgICAgIHJlc3VsdCArPSBgICAgLSBJRDogJHt0YWcuaWR9XFxuYDtcblxuICAgICAgICAgIGlmICh0YWcudXNhZ2VDb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gYCAgIC0gVXNhZ2UgQ291bnQ6ICR7dGFnLnVzYWdlQ291bnR9XFxuYDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFnLmNyZWF0ZWRBdCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGAgICAtIENyZWF0ZWQ6ICR7bmV3IERhdGUodGFnLmNyZWF0ZWRBdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGFnLnVwZGF0ZWRBdCkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IGAgICAtIFVwZGF0ZWQ6ICR7bmV3IERhdGUodGFnLnVwZGF0ZWRBdCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XFxuYDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXNwb25zZS5uZXh0Q3Vyc29yKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGBcXG7wn5OEIFVzZSBjdXJzb3IgXCIke3Jlc3BvbnNlLm5leHRDdXJzb3J9XCIgdG8gZ2V0IHRoZSBuZXh0IHBhZ2UuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBsaXN0IHRhZ3M6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gbGlzdCB0YWdzIHdpdGggdW5rbm93biBlcnJvcicpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIEdldCB0YWcgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2dldC10YWcnLFxuICAgIGRlc2NyaXB0aW9uOiAnR2V0IGRldGFpbGVkIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgdGFnIGJ5IElEJyxcbiAgICBwYXJhbWV0ZXJzOiBUYWdJZFNjaGVtYSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgdGl0bGU6ICdHZXQgVGFnIERldGFpbHMnLFxuICAgICAgcmVhZE9ubHlIaW50OiB0cnVlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBUYWdJZFNjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHRhZyA9IGF3YWl0IGNsaWVudC5nZXRUYWcoYXJncy50YWdJZCk7XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IGAjIFRhZzogJHt0YWcubmFtZX1cXG5cXG5gO1xuICAgICAgICByZXN1bHQgKz0gYCoqSUQ6KiogJHt0YWcuaWR9XFxuYDtcbiAgICAgICAgcmVzdWx0ICs9IGAqKk5hbWU6KiogJHt0YWcubmFtZX1cXG5gO1xuXG4gICAgICAgIGlmICh0YWcudXNhZ2VDb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGAqKlVzYWdlIENvdW50OioqICR7dGFnLnVzYWdlQ291bnR9XFxuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YWcuY3JlYXRlZEF0KSB7XG4gICAgICAgICAgcmVzdWx0ICs9IGAqKkNyZWF0ZWQ6KiogJHtuZXcgRGF0ZSh0YWcuY3JlYXRlZEF0KS50b0xvY2FsZVN0cmluZygpfVxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFnLnVwZGF0ZWRBdCkge1xuICAgICAgICAgIHJlc3VsdCArPSBgKipVcGRhdGVkOioqICR7bmV3IERhdGUodGFnLnVwZGF0ZWRBdCkudG9Mb2NhbGVTdHJpbmcoKX1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGdldCB0YWc6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gZ2V0IHRhZyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBDcmVhdGUgdGFnIHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdjcmVhdGUtdGFnJyxcbiAgICBkZXNjcmlwdGlvbjogJ0NyZWF0ZSBhIG5ldyB0YWcgaW4gbjhuIGZvciBvcmdhbml6aW5nIHdvcmtmbG93cycsXG4gICAgcGFyYW1ldGVyczogQ3JlYXRlVGFnU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0NyZWF0ZSBOZXcgVGFnJyxcbiAgICAgIHJlYWRPbmx5SGludDogZmFsc2UsXG4gICAgICBkZXN0cnVjdGl2ZUhpbnQ6IGZhbHNlLFxuICAgICAgaWRlbXBvdGVudEhpbnQ6IGZhbHNlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBDcmVhdGVUYWdTY2hlbWE+KSA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBQbGVhc2UgcnVuIGluaXQtbjhuIGZpcnN0LicpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB0YWdEYXRhOiBDcmVhdGVUYWdSZXF1ZXN0ID0ge1xuICAgICAgICAgIG5hbWU6IGFyZ3MubmFtZSxcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB0YWcgPSBhd2FpdCBjbGllbnQuY3JlYXRlVGFnKHRhZ0RhdGEpO1xuXG4gICAgICAgIHJldHVybiBg4pyFIFN1Y2Nlc3NmdWxseSBjcmVhdGVkIHRhZyBcIiR7dGFnLm5hbWV9XCIgd2l0aCBJRDogJHt0YWcuaWR9YDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSB0YWc6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gY3JlYXRlIHRhZyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBVcGRhdGUgdGFnIHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICd1cGRhdGUtdGFnJyxcbiAgICBkZXNjcmlwdGlvbjogXCJVcGRhdGUgYSB0YWcncyBuYW1lIGluIG44blwiLFxuICAgIHBhcmFtZXRlcnM6IFVwZGF0ZVRhZ1NjaGVtYSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgdGl0bGU6ICdVcGRhdGUgVGFnJyxcbiAgICAgIHJlYWRPbmx5SGludDogZmFsc2UsXG4gICAgICBkZXN0cnVjdGl2ZUhpbnQ6IGZhbHNlLFxuICAgICAgaWRlbXBvdGVudEhpbnQ6IHRydWUsXG4gICAgICBvcGVuV29ybGRIaW50OiB0cnVlLFxuICAgIH0sXG4gICAgZXhlY3V0ZTogYXN5bmMgKGFyZ3M6IHouaW5mZXI8dHlwZW9mIFVwZGF0ZVRhZ1NjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHsgdGFnSWQsIC4uLnVwZGF0ZURhdGEgfSA9IGFyZ3M7XG4gICAgICAgIGNvbnN0IHRhZ0RhdGE6IFVwZGF0ZVRhZ1JlcXVlc3QgPSB7XG4gICAgICAgICAgbmFtZTogdXBkYXRlRGF0YS5uYW1lLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHRhZyA9IGF3YWl0IGNsaWVudC51cGRhdGVUYWcodGFnSWQsIHRhZ0RhdGEpO1xuXG4gICAgICAgIHJldHVybiBg4pyFIFN1Y2Nlc3NmdWxseSB1cGRhdGVkIHRhZyB0byBcIiR7dGFnLm5hbWV9XCIgKElEOiAke3RhZy5pZH0pYDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIHVwZGF0ZSB0YWc6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIHRhZyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBEZWxldGUgdGFnIHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdkZWxldGUtdGFnJyxcbiAgICBkZXNjcmlwdGlvbjpcbiAgICAgICdEZWxldGUgYSB0YWcgZnJvbSBuOG4gcGVybWFuZW50bHkuIFRoaXMgd2lsbCByZW1vdmUgdGhlIHRhZyBmcm9tIGFsbCB3b3JrZmxvd3MgdXNpbmcgaXQnLFxuICAgIHBhcmFtZXRlcnM6IFRhZ0lkU2NoZW1hLFxuICAgIGFubm90YXRpb25zOiB7XG4gICAgICB0aXRsZTogJ0RlbGV0ZSBUYWcnLFxuICAgICAgcmVhZE9ubHlIaW50OiBmYWxzZSxcbiAgICAgIGRlc3RydWN0aXZlSGludDogdHJ1ZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBUYWdJZFNjaGVtYT4pID0+IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xuICAgICAgaWYgKCFjbGllbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFBsZWFzZSBydW4gaW5pdC1uOG4gZmlyc3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGNsaWVudC5kZWxldGVUYWcoYXJncy50YWdJZCk7XG4gICAgICAgIHJldHVybiBg4pyFIFN1Y2Nlc3NmdWxseSBkZWxldGVkIHRhZyB3aXRoIElEOiAke2FyZ3MudGFnSWR9YDtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGRlbGV0ZSB0YWc6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIHRhZyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBHZXQgd29ya2Zsb3cgdGFncyB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnZ2V0LXdvcmtmbG93LXRhZ3MnLFxuICAgIGRlc2NyaXB0aW9uOiAnR2V0IGFsbCB0YWdzIGFzc2lnbmVkIHRvIGEgc3BlY2lmaWMgd29ya2Zsb3cnLFxuICAgIHBhcmFtZXRlcnM6IFdvcmtmbG93SWRTY2hlbWEsXG4gICAgYW5ub3RhdGlvbnM6IHtcbiAgICAgIHRpdGxlOiAnR2V0IFdvcmtmbG93IFRhZ3MnLFxuICAgICAgcmVhZE9ubHlIaW50OiB0cnVlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBXb3JrZmxvd0lkU2NoZW1hPikgPT4ge1xuICAgICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgICBpZiAoIWNsaWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUGxlYXNlIHJ1biBpbml0LW44biBmaXJzdC4nKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGFncyA9IGF3YWl0IGNsaWVudC5nZXRXb3JrZmxvd1RhZ3MoYXJncy53b3JrZmxvd0lkKTtcblxuICAgICAgICBpZiAodGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gYE5vIHRhZ3MgZm91bmQgZm9yIHdvcmtmbG93IElEOiAke2FyZ3Mud29ya2Zsb3dJZH1gO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlc3VsdCA9IGBGb3VuZCAke3RhZ3MubGVuZ3RofSB0YWcocykgZm9yIHdvcmtmbG93ICR7YXJncy53b3JrZmxvd0lkfTpcXG5cXG5gO1xuXG4gICAgICAgIHRhZ3MuZm9yRWFjaCgodGFnOiBOOG5UYWcsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICByZXN1bHQgKz0gYCR7aW5kZXggKyAxfS4gKioke3RhZy5uYW1lfSoqIChJRDogJHt0YWcuaWR9KVxcbmA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBnZXQgd29ya2Zsb3cgdGFnczogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ0ZhaWxlZCB0byBnZXQgd29ya2Zsb3cgdGFncyB3aXRoIHVua25vd24gZXJyb3InKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcblxuICAvLyBVcGRhdGUgd29ya2Zsb3cgdGFncyB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAndXBkYXRlLXdvcmtmbG93LXRhZ3MnLFxuICAgIGRlc2NyaXB0aW9uOlxuICAgICAgJ1VwZGF0ZSB0aGUgdGFncyBhc3NpZ25lZCB0byBhIHdvcmtmbG93LiBUaGlzIHJlcGxhY2VzIGFsbCBleGlzdGluZyB0YWdzIHdpdGggdGhlIHByb3ZpZGVkIGxpc3QnLFxuICAgIHBhcmFtZXRlcnM6IFVwZGF0ZVdvcmtmbG93VGFnc1NjaGVtYSxcbiAgICBhbm5vdGF0aW9uczoge1xuICAgICAgdGl0bGU6ICdVcGRhdGUgV29ya2Zsb3cgVGFncycsXG4gICAgICByZWFkT25seUhpbnQ6IGZhbHNlLFxuICAgICAgZGVzdHJ1Y3RpdmVIaW50OiBmYWxzZSxcbiAgICAgIGlkZW1wb3RlbnRIaW50OiB0cnVlLFxuICAgICAgb3BlbldvcmxkSGludDogdHJ1ZSxcbiAgICB9LFxuICAgIGV4ZWN1dGU6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBVcGRhdGVXb3JrZmxvd1RhZ3NTY2hlbWE+KSA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICAgIGlmICghY2xpZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBQbGVhc2UgcnVuIGluaXQtbjhuIGZpcnN0LicpO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCBjbGllbnQudXBkYXRlV29ya2Zsb3dUYWdzKGFyZ3Mud29ya2Zsb3dJZCwgYXJncy50YWdJZHMpO1xuXG4gICAgICAgIGNvbnN0IHRhZ0NvdW50ID0gYXJncy50YWdJZHMubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYOKchSBTdWNjZXNzZnVsbHkgdXBkYXRlZCB3b3JrZmxvdyAke2FyZ3Mud29ya2Zsb3dJZH0gd2l0aCAke3RhZ0NvdW50fSB0YWcocylgO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gdXBkYXRlIHdvcmtmbG93IHRhZ3M6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIHdvcmtmbG93IHRhZ3Mgd2l0aCB1bmtub3duIGVycm9yJyk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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