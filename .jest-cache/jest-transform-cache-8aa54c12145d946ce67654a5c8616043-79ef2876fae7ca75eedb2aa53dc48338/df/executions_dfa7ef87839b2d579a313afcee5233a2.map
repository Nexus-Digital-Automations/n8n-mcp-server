{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/executions.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/executions.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nExecution, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst ExecutionIdSchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n});\n\nconst ListExecutionsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\n// Tool registration function\nexport function createExecutionTools(getClient: () => N8nClient | null, server: any) {\n  // List executions tool\n  server.addTool({\n    name: 'list-executions',\n    description: 'List all workflow executions in the n8n instance with pagination support',\n    parameters: ListExecutionsSchema,\n    annotations: {\n      title: 'List n8n Executions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListExecutionsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getExecutions(options);\n\n        if (response.data.length === 0) {\n          return 'No executions found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} execution(s):\\n\\n`;\n\n        response.data.forEach((execution: N8nExecution, index: number) => {\n          const statusIcon =\n            execution.status === 'success'\n              ? '‚úÖ'\n              : execution.status === 'error'\n                ? '‚ùå'\n                : execution.status === 'running'\n                  ? 'üîÑ'\n                  : '‚è≥';\n\n          result += `${index + 1}. **Execution ${execution.id}**\\n`;\n          result += `   - Status: ${statusIcon} ${execution.status}\\n`;\n          result += `   - Workflow ID: ${execution.workflowId}\\n`;\n          result += `   - Mode: ${execution.mode}\\n`;\n          result += `   - Started: ${new Date(execution.startedAt).toLocaleString()}\\n`;\n\n          if (execution.stoppedAt) {\n            result += `   - Stopped: ${new Date(execution.stoppedAt).toLocaleString()}\\n`;\n          }\n\n          if (execution.finished !== undefined) {\n            result += `   - Finished: ${execution.finished ? 'Yes' : 'No'}\\n`;\n          }\n\n          if (execution.retryOf) {\n            result += `   - Retry Of: ${execution.retryOf}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\nüìÑ Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list executions: ${error.message}`);\n        }\n        throw new UserError('Failed to list executions with unknown error');\n      }\n    },\n  });\n\n  // Get execution tool\n  server.addTool({\n    name: 'get-execution',\n    description: 'Get detailed information about a specific execution by ID',\n    parameters: ExecutionIdSchema,\n    annotations: {\n      title: 'Get Execution Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const execution = await client.getExecution(args.executionId);\n\n        const statusIcon =\n          execution.status === 'success'\n            ? '‚úÖ'\n            : execution.status === 'error'\n              ? '‚ùå'\n              : execution.status === 'running'\n                ? 'üîÑ'\n                : '‚è≥';\n\n        let result = `# Execution: ${execution.id}\\n\\n`;\n        result += `**Status:** ${statusIcon} ${execution.status}\\n`;\n        result += `**Workflow ID:** ${execution.workflowId}\\n`;\n        result += `**Mode:** ${execution.mode}\\n`;\n        result += `**Started At:** ${new Date(execution.startedAt).toLocaleString()}\\n`;\n\n        if (execution.stoppedAt) {\n          result += `**Stopped At:** ${new Date(execution.stoppedAt).toLocaleString()}\\n`;\n        }\n\n        result += `**Finished:** ${execution.finished ? 'Yes' : 'No'}\\n`;\n\n        if (execution.retryOf) {\n          result += `**Retry Of:** ${execution.retryOf}\\n`;\n        }\n\n        if (execution.retrySuccessId) {\n          result += `**Retry Success ID:** ${execution.retrySuccessId}\\n`;\n        }\n\n        if (execution.waitTill) {\n          result += `**Wait Until:** ${new Date(execution.waitTill).toLocaleString()}\\n`;\n        }\n\n        // Include workflow information if available\n        if (execution.workflowData) {\n          result += `\\n## Workflow Information:\\n`;\n          result += `**Name:** ${execution.workflowData.name}\\n`;\n          result += `**Active:** ${execution.workflowData.active ? 'Yes' : 'No'}\\n`;\n          result += `**Nodes:** ${execution.workflowData.nodes.length}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get execution: ${error.message}`);\n        }\n        throw new UserError('Failed to get execution with unknown error');\n      }\n    },\n  });\n\n  // Delete execution tool\n  server.addTool({\n    name: 'delete-execution',\n    description: 'Delete an execution from n8n permanently. WARNING: This action cannot be undone',\n    parameters: ExecutionIdSchema,\n    annotations: {\n      title: 'Delete Execution',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExecutionIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteExecution(args.executionId);\n        return `‚úÖ Successfully deleted execution with ID: ${args.executionId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete execution: ${error.message}`);\n        }\n        throw new UserError('Failed to delete execution with unknown error');\n      }\n    },\n  });\n}\n"],"version":3}