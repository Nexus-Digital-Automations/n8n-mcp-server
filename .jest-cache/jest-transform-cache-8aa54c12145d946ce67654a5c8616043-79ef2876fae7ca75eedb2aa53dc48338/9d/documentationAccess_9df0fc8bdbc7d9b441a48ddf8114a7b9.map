{"version":3,"names":["cov_1u6y71utsd","actualCoverage","s","exports","getNodeDocumentation","getFunctionDocumentation","nodeType","options","b","f","includeExamples","includeFunctions","includeAdvanced","nodeDocumentations","getNodeDocumentationDatabase","baseDoc","displayName","getDisplayNameFromType","description","version","category","parameters","examples","undefined","functions","documentation","properties","webhooks","polling","functionName","functionDocs","getFunctionDocumentationDatabase","functionDoc","find","name","toLowerCase","includes","syntax","returnType","parts","split","length","replace","str","toUpperCase","trim","type","required","default","value","placeholder","expression","title","configuration","method","url","expectedOutput","userId","id","body","useCase","sendBody","contentType","jsonBody","keepOnlySet","values","string","number","inputData","status","age","score","functionCode","firstName","lastName","fullName","timestamp","code","result","context","conditions","boolean","value1","operation","value2"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/documentationAccess.ts"],"sourcesContent":["export interface NodeDocumentation {\n  nodeType: string;\n  displayName: string;\n  description: string;\n  version: number;\n  category: string;\n  parameters?: ParameterDocumentation[];\n  examples?: NodeExample[];\n  functions?: FunctionDocumentation[];\n  credentials?: CredentialInfo[];\n  webhooks?: WebhookInfo[];\n  polling?: PollingInfo;\n  properties?: NodeProperty[];\n}\n\nexport interface ParameterDocumentation {\n  name: string;\n  type: string;\n  required: boolean;\n  description: string;\n  default?: any;\n  options?: ParameterOption[];\n  placeholder?: string;\n  hint?: string;\n  expression?: boolean;\n}\n\nexport interface ParameterOption {\n  name: string;\n  value: any;\n  description?: string;\n}\n\nexport interface NodeExample {\n  title: string;\n  description: string;\n  configuration: Record<string, any>;\n  inputData?: any;\n  expectedOutput?: any;\n  useCase: string;\n}\n\nexport interface FunctionDocumentation {\n  name: string;\n  category: 'date' | 'string' | 'number' | 'array' | 'object' | 'workflow' | 'utility';\n  description: string;\n  syntax: string;\n  parameters?: FunctionParameter[];\n  returnType: string;\n  examples: FunctionExample[];\n  relatedFunctions?: string[];\n}\n\nexport interface FunctionParameter {\n  name: string;\n  type: string;\n  required: boolean;\n  description: string;\n  default?: any;\n}\n\nexport interface FunctionExample {\n  description: string;\n  code: string;\n  result: string;\n  context?: string;\n}\n\nexport interface CredentialInfo {\n  name: string;\n  displayName: string;\n  required: boolean;\n  description: string;\n}\n\nexport interface WebhookInfo {\n  httpMethod: string;\n  path: string;\n  description: string;\n  responseMode: string;\n}\n\nexport interface PollingInfo {\n  enabled: boolean;\n  interval: number;\n  description: string;\n}\n\nexport interface NodeProperty {\n  name: string;\n  value: any;\n  description: string;\n}\n\nexport interface DocumentationOptions {\n  includeExamples?: boolean;\n  includeFunctions?: boolean;\n  includeAdvanced?: boolean;\n}\n\n/**\n * Get comprehensive documentation for a specific node type\n */\nexport async function getNodeDocumentation(\n  nodeType: string,\n  options: DocumentationOptions = {}\n): Promise<NodeDocumentation> {\n  const {\n    includeExamples = true,\n    includeFunctions = true,\n    includeAdvanced = false,\n  } = options;\n\n  // This is a comprehensive documentation database for common n8n nodes\n  const nodeDocumentations = getNodeDocumentationDatabase();\n  \n  const baseDoc = nodeDocumentations[nodeType];\n  if (!baseDoc) {\n    // Return a generic template for unknown nodes\n    return {\n      nodeType,\n      displayName: getDisplayNameFromType(nodeType),\n      description: `Documentation for ${nodeType} node type`,\n      version: 1,\n      category: 'unknown',\n      parameters: [],\n      examples: includeExamples ? [] : undefined,\n      functions: includeFunctions ? [] : undefined,\n    };\n  }\n\n  // Filter documentation based on options\n  const documentation: NodeDocumentation = {\n    ...baseDoc,\n    examples: includeExamples ? baseDoc.examples : undefined,\n    functions: includeFunctions ? baseDoc.functions : undefined,\n  };\n\n  // Add advanced properties if requested\n  if (includeAdvanced) {\n    documentation.properties = baseDoc.properties || [];\n    documentation.webhooks = baseDoc.webhooks;\n    documentation.polling = baseDoc.polling;\n  }\n\n  return documentation;\n}\n\n/**\n * Get documentation for built-in n8n expression functions\n */\nexport async function getFunctionDocumentation(\n  functionName: string,\n  category?: 'date' | 'string' | 'number' | 'array' | 'object' | 'workflow' | 'utility'\n): Promise<FunctionDocumentation> {\n  const functionDocs = getFunctionDocumentationDatabase();\n  \n  // Try exact match first\n  let functionDoc = functionDocs.find(f => f.name === functionName);\n  \n  // Try partial match if exact not found\n  if (!functionDoc) {\n    functionDoc = functionDocs.find(f => \n      f.name.toLowerCase().includes(functionName.toLowerCase()) ||\n      functionName.toLowerCase().includes(f.name.toLowerCase())\n    );\n  }\n\n  // Try category-based search if still not found and category provided\n  if (!functionDoc && category) {\n    functionDoc = functionDocs.find(f => \n      f.category === category && \n      f.name.toLowerCase().includes(functionName.toLowerCase())\n    );\n  }\n\n  if (!functionDoc) {\n    // Return a generic template for unknown functions\n    return {\n      name: functionName,\n      category: category || 'utility',\n      description: `Documentation for ${functionName} function`,\n      syntax: `${functionName}()`,\n      returnType: 'unknown',\n      examples: [],\n    };\n  }\n\n  return functionDoc;\n}\n\n/**\n * Get display name from node type\n */\nfunction getDisplayNameFromType(nodeType: string): string {\n  // Convert node type to display name\n  const parts = nodeType.split('.');\n  const name = parts[parts.length - 1];\n  \n  // Convert camelCase to Title Case\n  return name.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()).trim();\n}\n\n/**\n * Database of node documentation\n */\nfunction getNodeDocumentationDatabase(): Record<string, NodeDocumentation> {\n  return {\n    'n8n-nodes-base.httpRequest': {\n      nodeType: 'n8n-nodes-base.httpRequest',\n      displayName: 'HTTP Request',\n      description: 'Makes HTTP requests to any URL. Supports all HTTP methods and authentication.',\n      version: 4,\n      category: 'core',\n      parameters: [\n        {\n          name: 'method',\n          type: 'options',\n          required: true,\n          description: 'The HTTP method to use',\n          default: 'GET',\n          options: [\n            { name: 'DELETE', value: 'DELETE' },\n            { name: 'GET', value: 'GET' },\n            { name: 'HEAD', value: 'HEAD' },\n            { name: 'OPTIONS', value: 'OPTIONS' },\n            { name: 'PATCH', value: 'PATCH' },\n            { name: 'POST', value: 'POST' },\n            { name: 'PUT', value: 'PUT' },\n          ],\n        },\n        {\n          name: 'url',\n          type: 'string',\n          required: true,\n          description: 'The URL to make the request to',\n          placeholder: 'https://httpbin.org/get',\n          expression: true,\n        },\n        {\n          name: 'authentication',\n          type: 'options',\n          required: false,\n          description: 'Authentication method to use',\n          default: 'none',\n          options: [\n            { name: 'None', value: 'none' },\n            { name: 'Basic Auth', value: 'basicAuth' },\n            { name: 'Header Auth', value: 'headerAuth' },\n            { name: 'OAuth1', value: 'oAuth1' },\n            { name: 'OAuth2', value: 'oAuth2' },\n          ],\n        },\n      ],\n      examples: [\n        {\n          title: 'Simple GET Request',\n          description: 'Make a simple GET request to fetch data',\n          configuration: {\n            method: 'GET',\n            url: 'https://jsonplaceholder.typicode.com/posts/1',\n          },\n          expectedOutput: {\n            userId: 1,\n            id: 1,\n            title: 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n            body: 'quia et suscipit\\nsuscipit...',\n          },\n          useCase: 'Fetching data from REST APIs',\n        },\n        {\n          title: 'POST Request with JSON Body',\n          description: 'Send JSON data to an API endpoint',\n          configuration: {\n            method: 'POST',\n            url: 'https://jsonplaceholder.typicode.com/posts',\n            sendBody: true,\n            contentType: 'json',\n            jsonBody: '{\"title\": \"New Post\", \"body\": \"This is a new post\", \"userId\": 1}',\n          },\n          expectedOutput: {\n            id: 101,\n            title: 'New Post',\n            body: 'This is a new post',\n            userId: 1,\n          },\n          useCase: 'Creating new resources via API',\n        },\n      ],\n    },\n\n    'n8n-nodes-base.set': {\n      nodeType: 'n8n-nodes-base.set',\n      displayName: 'Set',\n      description: 'Sets values on items and optionally remove other values',\n      version: 3,\n      category: 'core',\n      parameters: [\n        {\n          name: 'keepOnlySet',\n          type: 'boolean',\n          required: false,\n          description: 'Keep only the values set on this node and remove all others',\n          default: false,\n        },\n        {\n          name: 'values',\n          type: 'fixedCollection',\n          required: true,\n          description: 'The values to set',\n          default: {},\n        },\n      ],\n      examples: [\n        {\n          title: 'Set Simple Values',\n          description: 'Set string and number values on items',\n          configuration: {\n            keepOnlySet: false,\n            values: {\n              string: [\n                { name: 'name', value: 'John Doe' },\n                { name: 'status', value: 'active' },\n              ],\n              number: [\n                { name: 'age', value: 30 },\n                { name: 'score', value: 85.5 },\n              ],\n            },\n          },\n          inputData: { id: 1 },\n          expectedOutput: { id: 1, name: 'John Doe', status: 'active', age: 30, score: 85.5 },\n          useCase: 'Adding computed values to data items',\n        },\n      ],\n    },\n\n    'n8n-nodes-base.function': {\n      nodeType: 'n8n-nodes-base.function',\n      displayName: 'Function',\n      description: 'Run custom JavaScript code to transform data',\n      version: 1,\n      category: 'core',\n      parameters: [\n        {\n          name: 'functionCode',\n          type: 'string',\n          required: true,\n          description: 'The JavaScript code to execute',\n          default: 'return items;',\n          expression: false,\n        },\n      ],\n      examples: [\n        {\n          title: 'Transform Data',\n          description: 'Transform incoming data using JavaScript',\n          configuration: {\n            functionCode: `\n// Transform each item\nfor (const item of items) {\n  item.json.fullName = \\`\\${item.json.firstName} \\${item.json.lastName}\\`;\n  item.json.timestamp = new Date().toISOString();\n}\n\nreturn items;`,\n          },\n          inputData: [{ firstName: 'John', lastName: 'Doe' }],\n          expectedOutput: [{ \n            firstName: 'John', \n            lastName: 'Doe',\n            fullName: 'John Doe',\n            timestamp: '2023-12-01T10:30:00.000Z'\n          }],\n          useCase: 'Custom data transformation logic',\n        },\n      ],\n      functions: [\n        {\n          name: 'console.log',\n          category: 'utility',\n          description: 'Log messages for debugging',\n          syntax: 'console.log(message)',\n          returnType: 'void',\n          examples: [\n            {\n              description: 'Log debug information',\n              code: 'console.log(\"Processing item:\", item.json);',\n              result: 'Outputs to n8n logs',\n              context: 'Function node',\n            },\n          ],\n        },\n      ],\n    },\n\n    'n8n-nodes-base.if': {\n      nodeType: 'n8n-nodes-base.if',\n      displayName: 'IF',\n      description: 'Routes items to different outputs based on conditions',\n      version: 2,\n      category: 'core',\n      parameters: [\n        {\n          name: 'conditions',\n          type: 'fixedCollection',\n          required: true,\n          description: 'The conditions to check',\n          default: {},\n        },\n      ],\n      examples: [\n        {\n          title: 'Route Based on Value',\n          description: 'Route items based on a field value',\n          configuration: {\n            conditions: {\n              boolean: [\n                {\n                  value1: '{{ $json.age }}',\n                  operation: 'largerEqual',\n                  value2: 18,\n                },\n              ],\n            },\n          },\n          inputData: { name: 'John', age: 25 },\n          useCase: 'Conditional workflow routing',\n        },\n      ],\n    },\n  };\n}\n\n/**\n * Database of function documentation\n */\nfunction getFunctionDocumentationDatabase(): FunctionDocumentation[] {\n  return [\n    // Date functions\n    {\n      name: 'DateTime.now',\n      category: 'date',\n      description: 'Gets the current date and time',\n      syntax: 'DateTime.now()',\n      returnType: 'DateTime',\n      examples: [\n        {\n          description: 'Get current timestamp',\n          code: '{{ DateTime.now() }}',\n          result: '2023-12-01T10:30:00.000Z',\n          context: 'Any expression field',\n        },\n      ],\n    },\n    {\n      name: 'DateTime.format',\n      category: 'date',\n      description: 'Formats a date according to the specified format string',\n      syntax: 'DateTime.format(formatString)',\n      parameters: [\n        {\n          name: 'formatString',\n          type: 'string',\n          required: true,\n          description: 'The format pattern (e.g., \"yyyy-MM-dd\")',\n        },\n      ],\n      returnType: 'string',\n      examples: [\n        {\n          description: 'Format current date as YYYY-MM-DD',\n          code: '{{ DateTime.now().format(\"yyyy-MM-dd\") }}',\n          result: '2023-12-01',\n          context: 'Date formatting',\n        },\n        {\n          description: 'Format with time',\n          code: '{{ DateTime.now().format(\"yyyy-MM-dd HH:mm:ss\") }}',\n          result: '2023-12-01 10:30:00',\n          context: 'DateTime formatting',\n        },\n      ],\n    },\n\n    // String functions\n    {\n      name: 'String.toLowerCase',\n      category: 'string',\n      description: 'Converts a string to lowercase',\n      syntax: 'string.toLowerCase()',\n      returnType: 'string',\n      examples: [\n        {\n          description: 'Convert to lowercase',\n          code: '{{ \"HELLO WORLD\".toLowerCase() }}',\n          result: 'hello world',\n          context: 'String manipulation',\n        },\n        {\n          description: 'Convert field value',\n          code: '{{ $json.name.toLowerCase() }}',\n          result: 'john doe',\n          context: 'Field transformation',\n        },\n      ],\n    },\n    {\n      name: 'String.toUpperCase',\n      category: 'string',\n      description: 'Converts a string to uppercase',\n      syntax: 'string.toUpperCase()',\n      returnType: 'string',\n      examples: [\n        {\n          description: 'Convert to uppercase',\n          code: '{{ \"hello world\".toUpperCase() }}',\n          result: 'HELLO WORLD',\n          context: 'String manipulation',\n        },\n      ],\n    },\n    {\n      name: 'String.trim',\n      category: 'string',\n      description: 'Removes whitespace from both ends of a string',\n      syntax: 'string.trim()',\n      returnType: 'string',\n      examples: [\n        {\n          description: 'Remove whitespace',\n          code: '{{ \"  hello world  \".trim() }}',\n          result: 'hello world',\n          context: 'String cleaning',\n        },\n      ],\n    },\n\n    // Number functions\n    {\n      name: 'Math.floor',\n      category: 'number',\n      description: 'Rounds a number down to the nearest integer',\n      syntax: 'Math.floor(number)',\n      parameters: [\n        {\n          name: 'number',\n          type: 'number',\n          required: true,\n          description: 'The number to round down',\n        },\n      ],\n      returnType: 'number',\n      examples: [\n        {\n          description: 'Round down decimal',\n          code: '{{ Math.floor(4.7) }}',\n          result: '4',\n          context: 'Number rounding',\n        },\n      ],\n    },\n    {\n      name: 'Math.round',\n      category: 'number',\n      description: 'Rounds a number to the nearest integer',\n      syntax: 'Math.round(number)',\n      returnType: 'number',\n      examples: [\n        {\n          description: 'Round to nearest integer',\n          code: '{{ Math.round(4.7) }}',\n          result: '5',\n          context: 'Number rounding',\n        },\n      ],\n    },\n\n    // Array functions\n    {\n      name: 'Array.length',\n      category: 'array',\n      description: 'Gets the length of an array',\n      syntax: 'array.length',\n      returnType: 'number',\n      examples: [\n        {\n          description: 'Get array length',\n          code: '{{ $json.items.length }}',\n          result: '3',\n          context: 'Array size checking',\n        },\n      ],\n    },\n    {\n      name: 'Array.map',\n      category: 'array',\n      description: 'Creates a new array with the results of calling a function for every array element',\n      syntax: 'array.map(callback)',\n      returnType: 'Array',\n      examples: [\n        {\n          description: 'Transform array elements',\n          code: '{{ $json.numbers.map(x => x * 2) }}',\n          result: '[2, 4, 6]',\n          context: 'Array transformation',\n        },\n      ],\n    },\n\n    // Object functions\n    {\n      name: 'Object.keys',\n      category: 'object',\n      description: 'Returns an array of object property names',\n      syntax: 'Object.keys(object)',\n      parameters: [\n        {\n          name: 'object',\n          type: 'Object',\n          required: true,\n          description: 'The object to get keys from',\n        },\n      ],\n      returnType: 'Array<string>',\n      examples: [\n        {\n          description: 'Get object keys',\n          code: '{{ Object.keys($json) }}',\n          result: '[\"name\", \"age\", \"email\"]',\n          context: 'Object inspection',\n        },\n      ],\n    },\n    {\n      name: 'Object.values',\n      category: 'object',\n      description: 'Returns an array of object property values',\n      syntax: 'Object.values(object)',\n      returnType: 'Array',\n      examples: [\n        {\n          description: 'Get object values',\n          code: '{{ Object.values($json) }}',\n          result: '[\"John\", 30, \"john@example.com\"]',\n          context: 'Object inspection',\n        },\n      ],\n    },\n\n    // Workflow functions\n    {\n      name: '$input.all',\n      category: 'workflow',\n      description: 'Gets all input items',\n      syntax: '$input.all()',\n      returnType: 'Array',\n      examples: [\n        {\n          description: 'Get all input items',\n          code: '{{ $input.all() }}',\n          result: '[{...}, {...}]',\n          context: 'Input data access',\n        },\n      ],\n    },\n    {\n      name: '$input.first',\n      category: 'workflow',\n      description: 'Gets the first input item',\n      syntax: '$input.first()',\n      returnType: 'Object',\n      examples: [\n        {\n          description: 'Get first input item',\n          code: '{{ $input.first() }}',\n          result: '{...}',\n          context: 'Input data access',\n        },\n      ],\n    },\n  ];\n}"],"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","ignoreList":[]}