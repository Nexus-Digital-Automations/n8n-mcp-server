e745788f51c39e0819f4966f75b36683
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-undef */
const globals_1 = require("@jest/globals");
// Mock all dependencies before any imports
globals_1.jest.mock('fastmcp', () => ({
    FastMCP: globals_1.jest.fn().mockImplementation(() => ({
        addTool: globals_1.jest.fn().mockReturnThis(),
        start: globals_1.jest.fn().mockResolvedValue(undefined),
        on: globals_1.jest.fn().mockReturnThis(),
    })),
}));
globals_1.jest.mock('zod', () => ({
    z: {
        object: globals_1.jest.fn(() => ({ min: globals_1.jest.fn(() => 'mocked-object') })),
        string: globals_1.jest.fn(() => ({
            min: globals_1.jest.fn(() => 'mocked-string'),
            url: globals_1.jest.fn(() => 'mocked-url-string'),
        })),
        number: globals_1.jest.fn(() => ({ optional: globals_1.jest.fn(() => 'mocked-number') })),
        boolean: globals_1.jest.fn(() => ({ optional: globals_1.jest.fn(() => 'mocked-boolean') })),
        array: globals_1.jest.fn(() => ({ optional: globals_1.jest.fn(() => 'mocked-array') })),
        enum: globals_1.jest.fn(() => ({ optional: globals_1.jest.fn(() => 'mocked-enum') })),
    },
}));
globals_1.jest.mock('../../src/client/n8nClient.js', () => ({
    N8nClient: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/workflow.js', () => ({
    createWorkflowTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/projects.js', () => ({
    createProjectTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/users.js', () => ({
    createUserTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/variables.js', () => ({
    createVariableTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/executions.js', () => ({
    createExecutionTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/tags.js', () => ({
    createTagTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/credentials.js', () => ({
    createCredentialTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/tools/audit.js', () => ({
    createAuditTools: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/transport/transportConfig.js', () => ({
    detectTransportConfig: globals_1.jest.fn(),
    validateTransportConfig: globals_1.jest.fn(),
    getServerUrl: globals_1.jest.fn(),
}));
globals_1.jest.mock('../../src/transport/sseTransport.js', () => ({
    createSSETransport: globals_1.jest.fn(),
    SSEUtils: {
        validateConfig: globals_1.jest.fn(),
    },
}));
// Mock process methods
const originalProcessExit = process.exit;
const originalProcessOn = process.on;
(0, globals_1.describe)('src/index-fastmcp.ts - FastMCP Server Entry Point', () => {
    let mockFastMCP;
    let mockN8nClient;
    let mockConsoleLog;
    let mockConsoleError;
    (0, globals_1.beforeEach)(() => {
        // Mock console methods
        mockConsoleLog = globals_1.jest.spyOn(console, 'log').mockImplementation(() => { });
        mockConsoleError = globals_1.jest.spyOn(console, 'error').mockImplementation(() => { });
        // Mock process methods
        process.exit = globals_1.jest.fn();
        process.on = globals_1.jest.fn();
        // Reset all mocks
        globals_1.jest.clearAllMocks();
        // Get mock instances
        const { FastMCP } = require('fastmcp');
        const { N8nClient } = require('../../src/client/n8nClient.js');
        mockFastMCP = {
            addTool: globals_1.jest.fn().mockReturnThis(),
            start: globals_1.jest.fn().mockResolvedValue(undefined),
            on: globals_1.jest.fn().mockReturnThis(),
        };
        FastMCP.mockImplementation(() => mockFastMCP);
        mockN8nClient = {
            getWorkflows: globals_1.jest.fn().mockResolvedValue({ data: [] }),
        };
        N8nClient.mockImplementation(() => mockN8nClient);
        // Set up default mock behaviors
        const transportConfig = require('../../src/transport/transportConfig.js');
        const sseTransport = require('../../src/transport/sseTransport.js');
        transportConfig.detectTransportConfig.mockReturnValue({ type: 'stdio' });
        transportConfig.validateTransportConfig.mockReturnValue({ type: 'stdio' });
        transportConfig.getServerUrl.mockReturnValue(null);
        sseTransport.createSSETransport.mockReturnValue({
            start: globals_1.jest.fn().mockResolvedValue(undefined),
            stop: globals_1.jest.fn(),
        });
        sseTransport.SSEUtils.validateConfig.mockReturnValue(true);
    });
    (0, globals_1.afterEach)(() => {
        // Restore original functions
        process.exit = originalProcessExit;
        process.on = originalProcessOn;
        mockConsoleLog.mockRestore();
        mockConsoleError.mockRestore();
        // Clear module cache to ensure fresh imports
        globals_1.jest.resetModules();
    });
    (0, globals_1.describe)('FastMCP Server Initialization', () => {
        (0, globals_1.it)('should create FastMCP instance with correct configuration', async () => {
            const { FastMCP } = require('fastmcp');
            // Import the module to trigger initialization
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            (0, globals_1.expect)(FastMCP).toHaveBeenCalledWith({
                name: 'n8n-mcp-server',
                version: '2.0.0',
                instructions: globals_1.expect.stringContaining('This server provides comprehensive access to n8n workflows'),
            });
        });
        (0, globals_1.it)('should include comprehensive instructions in FastMCP config', async () => {
            const { FastMCP } = require('fastmcp');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const config = FastMCP.mock.calls[0][0];
            (0, globals_1.expect)(config.instructions).toContain('Key Features:');
            (0, globals_1.expect)(config.instructions).toContain('Complete workflow management');
            (0, globals_1.expect)(config.instructions).toContain('User and project management');
            (0, globals_1.expect)(config.instructions).toContain('Execution monitoring');
            (0, globals_1.expect)(config.instructions).toContain('Getting Started:');
            (0, globals_1.expect)(config.instructions).toContain('init-n8n');
        });
    });
    (0, globals_1.describe)('Tool Registration', () => {
        (0, globals_1.it)('should register all tool categories', async () => {
            const toolMocks = {
                createWorkflowTools: require('../../src/tools/workflow.js').createWorkflowTools,
                createProjectTools: require('../../src/tools/projects.js').createProjectTools,
                createUserTools: require('../../src/tools/users.js').createUserTools,
                createVariableTools: require('../../src/tools/variables.js').createVariableTools,
                createExecutionTools: require('../../src/tools/executions.js').createExecutionTools,
                createTagTools: require('../../src/tools/tags.js').createTagTools,
                createCredentialTools: require('../../src/tools/credentials.js').createCredentialTools,
                createAuditTools: require('../../src/tools/audit.js').createAuditTools,
            };
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            Object.values(toolMocks).forEach(mock => {
                (0, globals_1.expect)(mock).toHaveBeenCalledWith(globals_1.expect.any(Function), mockFastMCP);
            });
        });
        (0, globals_1.it)('should pass client getter function to all tool creators', async () => {
            const { createWorkflowTools } = require('../../src/tools/workflow.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // Get the client getter function that was passed
            const clientGetter = createWorkflowTools.mock.calls[0][0];
            (0, globals_1.expect)(typeof clientGetter).toBe('function');
            // Initially should return null (no client set)
            (0, globals_1.expect)(clientGetter()).toBeNull();
        });
    });
    (0, globals_1.describe)('Custom Tools Registration', () => {
        (0, globals_1.it)('should register init-n8n tool', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initToolCalls = mockFastMCP.addTool.mock.calls.filter((call) => call[0].name === 'init-n8n');
            (0, globals_1.expect)(initToolCalls).toHaveLength(1);
            const initTool = initToolCalls[0][0];
            (0, globals_1.expect)(initTool).toHaveProperty('name', 'init-n8n');
            (0, globals_1.expect)(initTool).toHaveProperty('description');
            (0, globals_1.expect)(initTool).toHaveProperty('parameters');
            (0, globals_1.expect)(initTool).toHaveProperty('execute');
            (0, globals_1.expect)(initTool).toHaveProperty('annotations');
        });
        (0, globals_1.it)('should register status tool', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const statusToolCalls = mockFastMCP.addTool.mock.calls.filter((call) => call[0].name === 'status');
            (0, globals_1.expect)(statusToolCalls).toHaveLength(1);
            const statusTool = statusToolCalls[0][0];
            (0, globals_1.expect)(statusTool).toHaveProperty('name', 'status');
            (0, globals_1.expect)(statusTool).toHaveProperty('description');
            (0, globals_1.expect)(statusTool).toHaveProperty('parameters');
            (0, globals_1.expect)(statusTool).toHaveProperty('execute');
            (0, globals_1.expect)(statusTool).toHaveProperty('annotations');
        });
        (0, globals_1.it)('should configure init-n8n tool with proper annotations', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            (0, globals_1.expect)(initTool).toBeDefined();
            if (initTool) {
                (0, globals_1.expect)(initTool.annotations).toEqual({
                    title: 'Initialize n8n Connection',
                    readOnlyHint: false,
                    destructiveHint: false,
                    idempotentHint: true,
                    openWorldHint: true,
                });
            }
        });
        (0, globals_1.it)('should configure status tool with proper annotations', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const statusTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'status')?.[0];
            (0, globals_1.expect)(statusTool).toBeDefined();
            if (statusTool) {
                (0, globals_1.expect)(statusTool.annotations).toEqual({
                    title: 'Check n8n Connection Status',
                    readOnlyHint: true,
                    destructiveHint: false,
                    idempotentHint: true,
                    openWorldHint: true,
                });
            }
        });
    });
    (0, globals_1.describe)('init-n8n Tool Execution', () => {
        (0, globals_1.it)('should successfully initialize n8n connection', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            const result = await initTool.execute(args);
            (0, globals_1.expect)(result).toBe('✅ Successfully connected to n8n instance at http://localhost:5678');
            (0, globals_1.expect)(mockN8nClient.getWorkflows).toHaveBeenCalledWith({ limit: 1 });
        });
        (0, globals_1.it)('should handle connection errors gracefully', async () => {
            mockN8nClient.getWorkflows.mockRejectedValueOnce(new Error('Connection failed'));
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            await (0, globals_1.expect)(initTool.execute(args)).rejects.toThrow('Failed to connect to n8n: Connection failed');
        });
        (0, globals_1.it)('should handle unknown connection errors', async () => {
            mockN8nClient.getWorkflows.mockRejectedValueOnce('Unknown error');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            const args = {
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            };
            await (0, globals_1.expect)(initTool.execute(args)).rejects.toThrow('Failed to connect to n8n with unknown error');
        });
    });
    (0, globals_1.describe)('status Tool Execution', () => {
        (0, globals_1.it)('should return not connected message when no client is set', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const statusTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'status')?.[0];
            const result = await statusTool.execute();
            (0, globals_1.expect)(result).toBe("❌ Not connected to n8n. Please run 'init-n8n' first.");
        });
        (0, globals_1.it)('should return connected status when client is working', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // First initialize a client
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            await initTool.execute({
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            });
            // Now check status
            const statusTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'status')?.[0];
            const result = await statusTool.execute();
            (0, globals_1.expect)(result).toBe('✅ Connected to n8n and ready to use.');
        });
        (0, globals_1.it)('should return connection error when client fails', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // Initialize a client first
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            await initTool.execute({
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            });
            // Make subsequent calls fail
            mockN8nClient.getWorkflows.mockRejectedValueOnce(new Error('API Error'));
            const statusTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'status')?.[0];
            const result = await statusTool.execute();
            (0, globals_1.expect)(result).toBe('⚠️ Connected but unable to communicate with n8n: API Error');
        });
    });
    (0, globals_1.describe)('Server Startup with stdio Transport', () => {
        (0, globals_1.it)('should start server with stdio transport', async () => {
            const { detectTransportConfig, validateTransportConfig, } = require('../../src/transport/transportConfig.js');
            detectTransportConfig.mockReturnValue({ type: 'stdio' });
            validateTransportConfig.mockReturnValue({ type: 'stdio' });
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // Wait for async operations to complete
            await new Promise(resolve => setImmediate(resolve));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🚀 Starting n8n MCP Server...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📡 Transport type: stdio');
            (0, globals_1.expect)(mockFastMCP.start).toHaveBeenCalledWith({ transportType: 'stdio' });
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📟 Server started with stdio transport');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ n8n MCP Server is ready!');
        });
        (0, globals_1.it)('should call transport detection and validation', async () => {
            const { detectTransportConfig, validateTransportConfig, } = require('../../src/transport/transportConfig.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await new Promise(resolve => setImmediate(resolve));
            (0, globals_1.expect)(detectTransportConfig).toHaveBeenCalled();
            (0, globals_1.expect)(validateTransportConfig).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('Server Startup with SSE Transport', () => {
        (0, globals_1.it)('should start server with SSE transport', async () => {
            const { detectTransportConfig, validateTransportConfig, getServerUrl, } = require('../../src/transport/transportConfig.js');
            const { createSSETransport, SSEUtils } = require('../../src/transport/sseTransport.js');
            const mockSSETransport = {
                start: globals_1.jest.fn().mockResolvedValue(undefined),
            };
            detectTransportConfig.mockReturnValue({
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            validateTransportConfig.mockReturnValue({
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            SSEUtils.validateConfig.mockReturnValue(true);
            createSSETransport.mockReturnValue(mockSSETransport);
            getServerUrl.mockReturnValue('http://localhost:3000');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await new Promise(resolve => setImmediate(resolve));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🚀 Starting n8n MCP Server...');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('📡 Transport type: sse');
            (0, globals_1.expect)(SSEUtils.validateConfig).toHaveBeenCalled();
            (0, globals_1.expect)(createSSETransport).toHaveBeenCalledWith(mockFastMCP, {
                type: 'sse',
                port: 3000,
                host: 'localhost',
            });
            (0, globals_1.expect)(mockSSETransport.start).toHaveBeenCalled();
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('🌐 Server URL: http://localhost:3000');
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('✅ n8n MCP Server is ready!');
        });
        (0, globals_1.it)('should handle invalid SSE configuration', async () => {
            const { detectTransportConfig, validateTransportConfig, } = require('../../src/transport/transportConfig.js');
            const { SSEUtils } = require('../../src/transport/sseTransport.js');
            detectTransportConfig.mockReturnValue({ type: 'sse', port: 3000 });
            validateTransportConfig.mockReturnValue({ type: 'sse', port: 3000 });
            SSEUtils.validateConfig.mockReturnValue(false);
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await new Promise(resolve => setImmediate(resolve));
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('❌ Invalid SSE configuration');
            (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(1);
        });
    });
    (0, globals_1.describe)('Server Startup Error Handling', () => {
        (0, globals_1.it)('should handle server startup errors', async () => {
            mockFastMCP.start.mockRejectedValueOnce(new Error('Server startup failed'));
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            await new Promise(resolve => setImmediate(resolve));
            (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('❌ Failed to start server:', globals_1.expect.any(Error));
            (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(1);
        });
    });
    (0, globals_1.describe)('Process Signal Handling', () => {
        (0, globals_1.it)('should register SIGINT and SIGTERM handlers', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            (0, globals_1.expect)(process.on).toHaveBeenCalledWith('SIGINT', globals_1.expect.any(Function));
            (0, globals_1.expect)(process.on).toHaveBeenCalledWith('SIGTERM', globals_1.expect.any(Function));
        });
        (0, globals_1.it)('should handle SIGINT gracefully', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const sigintCall = process.on.mock.calls.find(call => call[0] === 'SIGINT');
            if (sigintCall) {
                const sigintHandler = sigintCall[1];
                sigintHandler();
                (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('Received SIGINT, shutting down gracefully...');
                (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(0);
            }
        });
        (0, globals_1.it)('should handle SIGTERM gracefully', async () => {
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const sigtermCall = process.on.mock.calls.find(call => call[0] === 'SIGTERM');
            if (sigtermCall) {
                const sigtermHandler = sigtermCall[1];
                sigtermHandler();
                (0, globals_1.expect)(mockConsoleError).toHaveBeenCalledWith('Received SIGTERM, shutting down gracefully...');
                (0, globals_1.expect)(process.exit).toHaveBeenCalledWith(0);
            }
        });
    });
    (0, globals_1.describe)('Global Client State Management', () => {
        (0, globals_1.it)('should start with null client', async () => {
            const { createWorkflowTools } = require('../../src/tools/workflow.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const clientGetter = createWorkflowTools.mock.calls[0][0];
            (0, globals_1.expect)(clientGetter()).toBeNull();
        });
        (0, globals_1.it)('should update global client after successful init', async () => {
            const { createWorkflowTools } = require('../../src/tools/workflow.js');
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            const initTool = mockFastMCP.addTool.mock.calls.find((call) => call[0].name === 'init-n8n')?.[0];
            await initTool.execute({
                baseUrl: 'http://localhost:5678',
                apiKey: 'test-api-key',
            });
            const clientGetter = createWorkflowTools.mock.calls[0][0];
            (0, globals_1.expect)(clientGetter()).toBe(mockN8nClient);
        });
    });
    (0, globals_1.describe)('Parameter Validation', () => {
        (0, globals_1.it)('should use Zod for tool parameter validation', async () => {
            const z = require('zod').z;
            await Promise.resolve().then(() => __importStar(require('../../src/index-fastmcp.js')));
            // Verify that z.object was called for parameter validation
            (0, globals_1.expect)(z.object).toHaveBeenCalled();
            (0, globals_1.expect)(z.string).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,