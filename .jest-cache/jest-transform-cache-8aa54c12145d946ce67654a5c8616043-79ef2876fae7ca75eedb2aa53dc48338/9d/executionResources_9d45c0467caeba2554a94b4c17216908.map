{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts"],"sourcesContent":["/**\n * Execution Resources for n8n MCP Server\n *\n * Provides MCP resources for accessing n8n execution data including logs,\n * results, timing information, and execution history.\n */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n/**\n * Execution resource configuration\n */\nexport interface ExecutionResourceConfig {\n  /** Base URI prefix for execution resources */\n  baseUri?: string;\n\n  /** Maximum number of executions to include in listings */\n  maxExecutions?: number;\n\n  /** Whether to include execution data in listings */\n  includeData?: boolean;\n\n  /** Whether to include failed executions */\n  includeFailures?: boolean;\n\n  /** Cache duration for execution data (ms) */\n  cacheDuration?: number;\n\n  /** Maximum execution data size to return (bytes) */\n  maxDataSize?: number;\n}\n\n/**\n * Execution resource manager\n *\n * Manages execution-related MCP resources including individual execution access,\n * execution logs, and execution statistics.\n */\nexport class ExecutionResourceManager {\n  private config: Required<ExecutionResourceConfig>;\n  private cache = new Map<string, { data: any; expires: number }>();\n\n  constructor(config: ExecutionResourceConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://executions',\n      maxExecutions: 50,\n      includeData: false, // Data can be large, exclude by default\n      includeFailures: true,\n      cacheDuration: 2 * 60 * 1000, // 2 minutes (executions change frequently)\n      maxDataSize: 1024 * 1024, // 1MB max\n      ...config,\n    };\n  }\n\n  /**\n   * Register execution resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Individual execution resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}`,\n      name: 'n8n Execution',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const execution = await this.getExecutionResource(client, id);\n        return {\n          text: JSON.stringify(execution, null, 2),\n        };\n      },\n    });\n\n    // Execution logs resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}/logs`,\n      name: 'n8n Execution Logs',\n      mimeType: 'text/plain',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const logs = await this.getExecutionLogsResource(client, id);\n        return {\n          text: logs,\n        };\n      },\n    });\n\n    // Recent executions resource\n    server.addResource({\n      uri: `${this.config.baseUri}/recent`,\n      name: 'n8n Recent Executions',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const executions = await this.getRecentExecutionsResource(client);\n        return {\n          text: JSON.stringify(executions, null, 2),\n        };\n      },\n    });\n\n    // Failed executions resource\n    server.addResource({\n      uri: `${this.config.baseUri}/failures`,\n      name: 'n8n Failed Executions',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const failures = await this.getFailedExecutionsResource(client);\n        return {\n          text: JSON.stringify(failures, null, 2),\n        };\n      },\n    });\n\n    // Execution statistics resource\n    server.addResource({\n      uri: `${this.config.baseUri}/stats`,\n      name: 'n8n Execution Statistics',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const stats = await this.getExecutionStatsResource(client);\n        return {\n          text: JSON.stringify(stats, null, 2),\n        };\n      },\n    });\n\n    // Execution resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{executionId}`,\n      name: 'n8n Execution by ID',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'executionId',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ executionId }: { executionId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const execution = await this.getExecutionResource(client, executionId);\n        return {\n          text: JSON.stringify(execution, null, 2),\n        };\n      },\n    });\n\n    // Workflow executions resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/workflow/{workflowId}`,\n      name: 'n8n Workflow Executions',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'workflowId',\n          description: 'The ID of the workflow',\n          required: true,\n        },\n      ],\n      load: async ({ workflowId }: { workflowId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const executions = await this.getWorkflowExecutionsResource(client, workflowId);\n        return {\n          text: JSON.stringify(executions, null, 2),\n        };\n      },\n    });\n\n    console.log('⚡ Execution resources registered');\n  }\n\n  /**\n   * Get individual execution resource\n   */\n  private async getExecutionResource(client: N8nClient, executionId: string): Promise<any> {\n    const cacheKey = `execution:${executionId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const execution = await client.getExecution(executionId);\n\n      // Enhance execution data with metadata\n      const enhancedExecution = {\n        id: execution.id,\n        workflowId: execution.workflowId,\n        status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n        startedAt: execution.startedAt,\n        stoppedAt: execution.stoppedAt,\n        duration:\n          execution.stoppedAt && execution.startedAt\n            ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n            : null,\n        metadata: {\n          mode: execution.mode,\n          retryOf: execution.retryOf,\n          retrySuccessId: execution.retrySuccessId,\n          error: (execution.data as any)?.resultData?.error,\n        },\n        // Include data only if specifically requested and within size limits\n        data: this.config.includeData\n          ? this.sanitizeExecutionData(execution.data || {})\n          : undefined,\n        resourceInfo: {\n          uri: `${this.config.baseUri}/${executionId}`,\n          type: 'n8n-execution',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, enhancedExecution);\n      return enhancedExecution;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution ${executionId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get execution logs resource\n   */\n  private async getExecutionLogsResource(client: N8nClient, executionId: string): Promise<string> {\n    const cacheKey = `execution:${executionId}:logs`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const execution = await client.getExecution(executionId);\n\n      // Extract logs from execution data\n      const logs = this.extractLogsFromExecution(execution);\n\n      this.setCachedData(cacheKey, logs);\n      return logs;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution logs ${executionId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get recent executions resource\n   */\n  private async getRecentExecutionsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:recent';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      const recentExecutions = {\n        executions: executions.data.map((execution: any) => ({\n          id: execution.id,\n          workflowId: execution.workflowId,\n          workflowName: execution.workflowData?.name,\n          status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          duration:\n            execution.stoppedAt && execution.startedAt\n              ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n              : null,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          total: executions.data.length,\n          returned: executions.data.length,\n          maxExecutions: this.config.maxExecutions,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/recent`,\n          type: 'n8n-recent-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, recentExecutions);\n      return recentExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load recent executions: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get failed executions resource\n   */\n  private async getFailedExecutionsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:failures';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      // Filter for failed executions client-side\n      const failedExecutionsData = executions.data.filter((e: any) => e.data?.resultData?.error);\n\n      const failedExecutions = {\n        failures: failedExecutionsData.map((execution: any) => ({\n          id: execution.id,\n          workflowId: execution.workflowId,\n          workflowName: execution.workflowData?.name,\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          error: execution.data?.resultData?.error?.message || 'Unknown error',\n          errorDetails: execution.data?.resultData?.error,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          total: failedExecutionsData.length,\n          returned: failedExecutionsData.length,\n          maxExecutions: this.config.maxExecutions,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/failures`,\n          type: 'n8n-failed-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, failedExecutions);\n      return failedExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load failed executions: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get execution statistics resource\n   */\n  private async getExecutionStatsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:stats';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      const stats = {\n        totalExecutions: executions.data.length,\n        successfulExecutions: executions.data.filter(\n          (e: any) => e.finished && !e.data?.resultData?.error\n        ).length,\n        failedExecutions: executions.data.filter((e: any) => e.data?.resultData?.error).length,\n        runningExecutions: executions.data.filter((e: any) => !e.finished && !e.stoppedAt).length,\n        averageDuration: this.calculateAverageDuration(executions.data),\n        executionsByStatus: this.calculateExecutionsByStatus(executions.data),\n        resourceInfo: {\n          uri: `${this.config.baseUri}/stats`,\n          type: 'n8n-execution-stats',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, stats);\n      return stats;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution statistics: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow executions resource\n   */\n  private async getWorkflowExecutionsResource(client: N8nClient, workflowId: string): Promise<any> {\n    const cacheKey = `executions:workflow:${workflowId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      // Filter for specific workflow client-side\n      const workflowExecutionsData = executions.data.filter(\n        (e: any) => e.workflowId === workflowId\n      );\n\n      const workflowExecutions = {\n        workflowId,\n        executions: workflowExecutionsData.map((execution: any) => ({\n          id: execution.id,\n          status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          duration:\n            execution.stoppedAt && execution.startedAt\n              ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n              : null,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          workflowId,\n          total: workflowExecutionsData.length,\n          returned: workflowExecutionsData.length,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/workflow/${workflowId}`,\n          type: 'n8n-workflow-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, workflowExecutions);\n      return workflowExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow executions ${workflowId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Sanitize execution data to remove sensitive information and limit size\n   */\n  private sanitizeExecutionData(data: any): any {\n    if (!data || typeof data !== 'object') {\n      return data;\n    }\n\n    const serialized = JSON.stringify(data);\n    if (serialized.length > this.config.maxDataSize) {\n      return {\n        _truncated: true,\n        _size: serialized.length,\n        _maxSize: this.config.maxDataSize,\n        summary: 'Data truncated due to size limits',\n      };\n    }\n\n    // Remove sensitive data patterns\n    return this.removeSensitiveData(data);\n  }\n\n  /**\n   * Remove sensitive data from execution data\n   */\n  private removeSensitiveData(obj: any): any {\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.removeSensitiveData(item));\n    }\n\n    if (obj && typeof obj === 'object') {\n      const result: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        // Skip sensitive keys\n        const lowerKey = key.toLowerCase();\n        if (\n          lowerKey.includes('password') ||\n          lowerKey.includes('token') ||\n          lowerKey.includes('secret') ||\n          lowerKey.includes('key')\n        ) {\n          result[key] = '[REDACTED]';\n        } else {\n          result[key] = this.removeSensitiveData(value);\n        }\n      }\n      return result;\n    }\n\n    return obj;\n  }\n\n  /**\n   * Extract logs from execution data\n   */\n  private extractLogsFromExecution(execution: any): string {\n    const logs: string[] = [];\n\n    logs.push(`Execution ID: ${execution.id}`);\n    logs.push(`Workflow ID: ${execution.workflowId}`);\n    logs.push(`Started: ${execution.startedAt}`);\n    logs.push(`Stopped: ${execution.stoppedAt || 'Still running'}`);\n    logs.push(`Status: ${execution.finished ? 'Finished' : 'Running'}`);\n    logs.push('');\n\n    if (execution.data?.resultData?.error) {\n      logs.push('ERROR:');\n      logs.push(JSON.stringify(execution.data.resultData.error, null, 2));\n      logs.push('');\n    }\n\n    // Add node execution logs if available\n    if (execution.data?.resultData?.runData) {\n      logs.push('NODE EXECUTION DATA:');\n      for (const [nodeName, nodeData] of Object.entries(execution.data.resultData.runData)) {\n        logs.push(`Node: ${nodeName}`);\n        logs.push(JSON.stringify(nodeData, null, 2));\n        logs.push('');\n      }\n    }\n\n    return logs.join('\\n');\n  }\n\n  /**\n   * Calculate average execution duration\n   */\n  private calculateAverageDuration(executions: any[]): number {\n    const durations = executions\n      .filter(e => e.startedAt && e.stoppedAt)\n      .map(e => new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime());\n\n    if (durations.length === 0) return 0;\n\n    return durations.reduce((sum, duration) => sum + duration, 0) / durations.length;\n  }\n\n  /**\n   * Calculate executions by status\n   */\n  private calculateExecutionsByStatus(executions: any[]): Record<string, number> {\n    const statusCounts: Record<string, number> = {\n      success: 0,\n      error: 0,\n      running: 0,\n      stopped: 0,\n    };\n\n    executions.forEach(execution => {\n      if (execution.finished && !execution.data?.resultData?.error) {\n        statusCounts.success++;\n      } else if (execution.data?.resultData?.error) {\n        statusCounts.error++;\n      } else if (!execution.finished && !execution.stoppedAt) {\n        statusCounts.running++;\n      } else {\n        statusCounts.stopped++;\n      }\n    });\n\n    return statusCounts;\n  }\n\n  /**\n   * Get cached data if not expired\n   */\n  private getCachedData(key: string): any | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expires > Date.now()) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  /**\n   * Set cached data with expiration\n   */\n  private setCachedData(key: string, data: any): void {\n    if (this.config.cacheDuration > 0) {\n      this.cache.set(key, {\n        data,\n        expires: Date.now() + this.config.cacheDuration,\n      });\n    }\n  }\n\n  /**\n   * Clear resource cache\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n/**\n * Create execution resource manager\n */\nexport function createExecutionResources(\n  config?: ExecutionResourceConfig\n): ExecutionResourceManager {\n  return new ExecutionResourceManager(config);\n}\n"],"version":3}