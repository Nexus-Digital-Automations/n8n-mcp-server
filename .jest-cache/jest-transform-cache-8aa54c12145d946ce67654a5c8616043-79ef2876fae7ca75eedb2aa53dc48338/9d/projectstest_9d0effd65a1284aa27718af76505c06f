f0dfa3a2d6fc14491c53726351533717
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const projects_1 = require("../../../src/tools/projects");
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('Project Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register project tools
        (0, projects_1.createProjectTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all project tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(4);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-projects');
        (0, globals_1.expect)(toolNames).toContain('create-project');
        (0, globals_1.expect)(toolNames).toContain('update-project');
        (0, globals_1.expect)(toolNames).toContain('delete-project');
    });
    (0, globals_1.describe)('list-projects tool', () => {
        let listProjectsTool;
        (0, globals_1.beforeEach)(() => {
            listProjectsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-projects')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(listProjectsTool.name).toBe('list-projects');
            (0, globals_1.expect)(listProjectsTool.description).toContain('List all projects from n8n');
            (0, globals_1.expect)(listProjectsTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(listProjectsTool.annotations).toEqual({
                title: 'List n8n Projects',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should list projects successfully with full data', async () => {
            const mockProjects = [
                {
                    id: 'proj-1',
                    name: 'Test Project 1',
                    type: 'Team',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-01T00:00:00.000Z',
                },
                {
                    id: 'proj-2',
                    name: 'Test Project 2',
                    type: 'Personal',
                    createdAt: '2023-01-02T00:00:00.000Z',
                    updatedAt: '2023-01-02T00:00:00.000Z',
                },
            ];
            mockClient.getProjects.mockResolvedValue({
                data: mockProjects,
                nextCursor: 'next-cursor',
            });
            const result = await listProjectsTool.execute({ limit: 10 });
            (0, globals_1.expect)(mockClient.getProjects).toHaveBeenCalledWith({ limit: 10 });
            (0, globals_1.expect)(result).toContain('Found 2 project(s)');
            (0, globals_1.expect)(result).toContain('**Test Project 1**');
            (0, globals_1.expect)(result).toContain('ID: proj-1');
            (0, globals_1.expect)(result).toContain('Type: Team');
            (0, globals_1.expect)(result).toContain('Created: 1/1/2023');
            (0, globals_1.expect)(result).toContain('**Test Project 2**');
            (0, globals_1.expect)(result).toContain('ID: proj-2');
            (0, globals_1.expect)(result).toContain('Type: Personal');
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor" to get the next page');
        });
        (0, globals_1.it)('should list projects with minimal data', async () => {
            const mockProjects = [
                {
                    id: 'proj-1',
                    name: 'Minimal Project',
                    type: 'Personal',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-01T00:00:00.000Z',
                },
            ];
            mockClient.getProjects.mockResolvedValue({
                data: mockProjects,
            });
            const result = await listProjectsTool.execute({});
            (0, globals_1.expect)(mockClient.getProjects).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 1 project(s)');
            (0, globals_1.expect)(result).toContain('**Minimal Project**');
            (0, globals_1.expect)(result).toContain('ID: proj-1');
            (0, globals_1.expect)(result).toContain('Type: Personal');
            (0, globals_1.expect)(result).toContain('Created: 12/31/2022');
            (0, globals_1.expect)(result).not.toContain('cursor');
        });
        (0, globals_1.it)('should handle empty project list', async () => {
            mockClient.getProjects.mockResolvedValue({
                data: [],
            });
            const result = await listProjectsTool.execute({});
            (0, globals_1.expect)(result).toBe('No projects found in the n8n instance.');
        });
        (0, globals_1.it)('should handle pagination parameters', async () => {
            mockClient.getProjects.mockResolvedValue({ data: [] });
            await listProjectsTool.execute({ limit: 50, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getProjects).toHaveBeenCalledWith({
                limit: 50,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const mockServerNull = { addTool: globals_1.jest.fn() };
            (0, projects_1.createProjectTools)(getClientNull, mockServerNull);
            const toolCall = mockServerNull.addTool.mock.calls.find((call) => call[0].name === 'list-projects');
            (0, globals_1.expect)(toolCall).toBeDefined();
            const toolWithNullClient = toolCall[0];
            await (0, globals_1.expect)(toolWithNullClient.execute({})).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.getProjects.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(listProjectsTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with project management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('API request failed');
            mockClient.getProjects.mockRejectedValue(apiError);
            await (0, globals_1.expect)(listProjectsTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list projects: API request failed'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getProjects.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(listProjectsTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list projects with unknown error'));
        });
        (0, globals_1.it)('should validate parameters', async () => {
            // Mock successful responses for parameter validation tests
            mockClient.getProjects.mockResolvedValue({ data: [] });
            // Should not throw for valid parameters
            await (0, globals_1.expect)(listProjectsTool.execute({ limit: 50 })).resolves.toBeDefined();
            await (0, globals_1.expect)(listProjectsTool.execute({ cursor: 'valid-cursor' })).resolves.toBeDefined();
            await (0, globals_1.expect)(listProjectsTool.execute({})).resolves.toBeDefined();
        });
    });
    (0, globals_1.describe)('create-project tool', () => {
        let createProjectTool;
        (0, globals_1.beforeEach)(() => {
            createProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-project')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(createProjectTool.name).toBe('create-project');
            (0, globals_1.expect)(createProjectTool.description).toContain('Create a new project in n8n');
            (0, globals_1.expect)(createProjectTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(createProjectTool.annotations).toEqual({
                title: 'Create New Project',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should create project successfully with type', async () => {
            const mockProject = {
                id: 'proj-new',
                name: 'New Project',
                type: 'Team',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-01T00:00:00.000Z',
            };
            mockClient.createProject.mockResolvedValue(mockProject);
            const result = await createProjectTool.execute({
                name: 'New Project',
                type: 'Team',
            });
            (0, globals_1.expect)(mockClient.createProject).toHaveBeenCalledWith({
                name: 'New Project',
                type: 'Team',
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully created project "New Project" with ID: proj-new');
            (0, globals_1.expect)(result).toContain('Type: Team');
        });
        (0, globals_1.it)('should create project successfully without type', async () => {
            const mockProject = {
                id: 'proj-new',
                name: 'Simple Project',
                type: 'Personal',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-01T00:00:00.000Z',
            };
            mockClient.createProject.mockResolvedValue(mockProject);
            const result = await createProjectTool.execute({
                name: 'Simple Project',
            });
            (0, globals_1.expect)(mockClient.createProject).toHaveBeenCalledWith({
                name: 'Simple Project',
                type: undefined,
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully created project "Simple Project" with ID: proj-new');
            (0, globals_1.expect)(result).toContain('Type: Personal');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const mockServerNull = { addTool: globals_1.jest.fn() };
            (0, projects_1.createProjectTools)(getClientNull, mockServerNull);
            const createToolCall = mockServerNull.addTool.mock.calls.find((call) => call[0].name === 'create-project');
            (0, globals_1.expect)(createToolCall).toBeDefined();
            const toolWithNullClient = createToolCall[0];
            await (0, globals_1.expect)(toolWithNullClient.execute({ name: 'Test Project' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.createProject.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(createProjectTool.execute({ name: 'Test Project' })).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with project management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('Project name already exists');
            mockClient.createProject.mockRejectedValue(apiError);
            await (0, globals_1.expect)(createProjectTool.execute({ name: 'Duplicate Project' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create project: Project name already exists'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.createProject.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(createProjectTool.execute({ name: 'Test Project' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create project with unknown error'));
        });
    });
    (0, globals_1.describe)('update-project tool', () => {
        let updateProjectTool;
        (0, globals_1.beforeEach)(() => {
            updateProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-project')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(updateProjectTool.name).toBe('update-project');
            (0, globals_1.expect)(updateProjectTool.description).toContain("Update a project's name and properties");
            (0, globals_1.expect)(updateProjectTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(updateProjectTool.annotations).toEqual({
                title: 'Update Project',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should update project successfully with type', async () => {
            const mockProject = {
                id: 'proj-1',
                name: 'Updated Project',
                type: 'Team',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-02T00:00:00.000Z',
            };
            mockClient.updateProject.mockResolvedValue(mockProject);
            const result = await updateProjectTool.execute({
                projectId: 'proj-1',
                name: 'Updated Project',
            });
            (0, globals_1.expect)(mockClient.updateProject).toHaveBeenCalledWith('proj-1', {
                name: 'Updated Project',
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated project "Updated Project" (ID: proj-1)');
            (0, globals_1.expect)(result).toContain('Type: Team');
        });
        (0, globals_1.it)('should update project successfully without type', async () => {
            const mockProject = {
                id: 'proj-1',
                name: 'Updated Project',
                type: 'Personal',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-02T00:00:00.000Z',
            };
            mockClient.updateProject.mockResolvedValue(mockProject);
            const result = await updateProjectTool.execute({
                projectId: 'proj-1',
                name: 'Updated Project',
            });
            (0, globals_1.expect)(result).toContain('âœ… Successfully updated project "Updated Project" (ID: proj-1)');
            (0, globals_1.expect)(result).toContain('Type: Personal');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const mockServerNull = { addTool: globals_1.jest.fn() };
            (0, projects_1.createProjectTools)(getClientNull, mockServerNull);
            const updateToolCall = mockServerNull.addTool.mock.calls.find((call) => call[0].name === 'update-project');
            (0, globals_1.expect)(updateToolCall).toBeDefined();
            const toolWithNullClient = updateToolCall[0];
            await (0, globals_1.expect)(toolWithNullClient.execute({ projectId: 'proj-1', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.updateProject.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(updateProjectTool.execute({ projectId: 'proj-1', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with project management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('Project not found');
            mockClient.updateProject.mockRejectedValue(apiError);
            await (0, globals_1.expect)(updateProjectTool.execute({ projectId: 'invalid-id', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update project: Project not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.updateProject.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(updateProjectTool.execute({ projectId: 'proj-1', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update project with unknown error'));
        });
    });
    (0, globals_1.describe)('delete-project tool', () => {
        let deleteProjectTool;
        (0, globals_1.beforeEach)(() => {
            deleteProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-project')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(deleteProjectTool.name).toBe('delete-project');
            (0, globals_1.expect)(deleteProjectTool.description).toContain('Delete a project from n8n permanently');
            (0, globals_1.expect)(deleteProjectTool.description).toContain('n8n Enterprise license');
            (0, globals_1.expect)(deleteProjectTool.annotations).toEqual({
                title: 'Delete Project',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should delete project successfully', async () => {
            mockClient.deleteProject.mockResolvedValue(undefined);
            const result = await deleteProjectTool.execute({
                projectId: 'proj-1',
            });
            (0, globals_1.expect)(mockClient.deleteProject).toHaveBeenCalledWith('proj-1');
            (0, globals_1.expect)(result).toBe('âœ… Successfully deleted project with ID: proj-1');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const mockServerNull = { addTool: globals_1.jest.fn() };
            (0, projects_1.createProjectTools)(getClientNull, mockServerNull);
            const deleteToolCall = mockServerNull.addTool.mock.calls.find((call) => call[0].name === 'delete-project');
            (0, globals_1.expect)(deleteToolCall).toBeDefined();
            const toolWithNullClient = deleteToolCall[0];
            await (0, globals_1.expect)(toolWithNullClient.execute({ projectId: 'proj-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            const licenseError = new Error('license required');
            mockClient.deleteProject.mockRejectedValue(licenseError);
            await (0, globals_1.expect)(deleteProjectTool.execute({ projectId: 'proj-1' })).rejects.toThrow(new fastmcp_1.UserError('This operation requires an n8n Enterprise license with project management features enabled. Error: license required'));
        });
        (0, globals_1.it)('should handle general API errors', async () => {
            const apiError = new Error('Project not found');
            mockClient.deleteProject.mockRejectedValue(apiError);
            await (0, globals_1.expect)(deleteProjectTool.execute({ projectId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete project: Project not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteProject.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(deleteProjectTool.execute({ projectId: 'proj-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete project with unknown error'));
        });
    });
    (0, globals_1.describe)('parameter validation', () => {
        (0, globals_1.it)('should validate project ID parameters', () => {
            const deleteProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-project')[0];
            (0, globals_1.expect)(deleteProjectTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate create project parameters', () => {
            const createProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-project')[0];
            (0, globals_1.expect)(createProjectTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate update project parameters', () => {
            const updateProjectTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-project')[0];
            (0, globals_1.expect)(updateProjectTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate list projects parameters', () => {
            const listProjectsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-projects')[0];
            (0, globals_1.expect)(listProjectsTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,