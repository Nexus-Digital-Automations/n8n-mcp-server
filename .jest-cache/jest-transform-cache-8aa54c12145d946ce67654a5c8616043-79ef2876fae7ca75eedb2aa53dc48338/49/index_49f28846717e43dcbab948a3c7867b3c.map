{"version":3,"names":["cov_1nezf8h6vx","actualCoverage","Server","StdioServerTransport","ListToolsRequestSchema","CallToolRequestSchema","fetch","N8nClient","baseUrl","apiKey","constructor","f","s","replace","makeRequest","endpoint","options","b","url","headers","Accept","response","ok","errorText","text","errorMessage","errorJson","JSON","parse","message","includes","Error","status","json","error","listWorkflows","getWorkflow","id","createWorkflow","name","nodes","connections","method","body","stringify","settings","saveManualExecutions","saveExecutionProgress","updateWorkflow","workflow","deleteWorkflow","activateWorkflow","deactivateWorkflow","listProjects","createProject","deleteProject","projectId","updateProject","listUsers","createUsers","users","getUser","idOrEmail","deleteUser","listVariables","createVariable","key","value","deleteVariable","getExecutions","params","URLSearchParams","includeData","undefined","append","String","workflowId","limit","toString","getExecution","deleteExecution","createTag","getTags","getTag","updateTag","deleteTag","getWorkflowTags","updateWorkflowTags","tagIds","generateAudit","additionalOptions","daysAbandonedWorkflow","categories","createCredential","type","data","deleteCredential","getCredentialSchema","credentialTypeName","server","version","capabilities","tools","clients","Map","setRequestHandler","description","inputSchema","properties","required","clientId","active","items","email","role","enum","request","arguments","args","client","Buffer","from","set","content","isError","get","workflows","formattedWorkflows","map","wf","created","createdAt","updated","updatedAt","tags","updatedWorkflow","projects","result","user","variables","credential","schema","executions","execution","tag","audit","startServer","transport","connect","console","import","meta","process","argv","catch","exit"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { ListToolsRequestSchema, CallToolRequestSchema } from '@modelcontextprotocol/sdk/types.js';\nimport fetch from 'node-fetch';\n\n// Type definitions for n8n API responses\ninterface N8nUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isPending: boolean;\n  role?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface N8nUserList {\n  data: N8nUser[];\n  nextCursor?: string;\n}\n\ninterface N8nWorkflow {\n  id: number;\n  name: string;\n  active: boolean;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n}\n\ninterface N8nWorkflowList {\n  data: N8nWorkflow[];\n  nextCursor?: string;\n}\n\ninterface N8nProject {\n  id: string;\n  name: string;\n  type?: string;\n}\n\ninterface N8nProjectList {\n  data: N8nProject[];\n  nextCursor?: string;\n}\n\ninterface N8nVariable {\n  id: string;\n  key: string;\n  value: string;\n  type?: string;\n}\n\ninterface N8nVariableList {\n  data: N8nVariable[];\n  nextCursor?: string;\n}\n\ninterface N8nExecution {\n  id: number;\n  data?: any;\n  finished: boolean;\n  mode: string;\n  retryOf?: number;\n  retrySuccessId?: number;\n  startedAt: string;\n  stoppedAt?: string;\n  workflowId: number;\n  waitTill?: string;\n}\n\ninterface N8nExecutionList {\n  data: N8nExecution[];\n  nextCursor?: string;\n}\n\ninterface N8nTag {\n  id: string;\n  name: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface N8nTagList {\n  data: N8nTag[];\n  nextCursor?: string;\n}\n\ninterface N8nAuditResult {\n  'Credentials Risk Report'?: any;\n  'Database Risk Report'?: any;\n  'Filesystem Risk Report'?: any;\n  'Nodes Risk Report'?: any;\n  'Instance Risk Report'?: any;\n}\n\nclass N8nClient {\n  constructor(\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n    // Ensure apiKey is properly assigned for ESLint\n    this.apiKey = apiKey;\n  }\n\n  private async makeRequest<T>(endpoint: string, options: any = {}): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...headers,\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        try {\n          const errorJson = JSON.parse(errorText);\n          // Check for license-related errors\n          if (errorJson.message && errorJson.message.includes('license')) {\n            errorMessage = `This operation requires an n8n Enterprise license with project management features enabled. Error: ${errorJson.message}`;\n          } else {\n            errorMessage = errorJson.message || errorText;\n          }\n        } catch {\n          errorMessage = errorText;\n        }\n        throw new Error(`N8N API error: ${errorMessage}`);\n      }\n\n      // Handle 204 No Content responses\n      if (response.status === 204) {\n        return {} as T;\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to connect to n8n: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  async listWorkflows(): Promise<N8nWorkflowList> {\n    return this.makeRequest<N8nWorkflowList>('/workflows');\n  }\n\n  async getWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`);\n  }\n\n  async createWorkflow(\n    name: string,\n    nodes: any[] = [],\n    connections: any = {}\n  ): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>('/workflows', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        nodes,\n        connections,\n        settings: {\n          saveManualExecutions: true,\n          saveExecutionProgress: true,\n        },\n      }),\n    });\n  }\n\n  async updateWorkflow(id: string, workflow: Partial<N8nWorkflow>): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(workflow),\n    });\n  }\n\n  async deleteWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async activateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/activate`, {\n      method: 'POST',\n    });\n  }\n\n  async deactivateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/deactivate`, {\n      method: 'POST',\n    });\n  }\n\n  // Project management methods (requires n8n Enterprise license)\n  async listProjects(): Promise<N8nProjectList> {\n    return this.makeRequest<N8nProjectList>('/projects');\n  }\n\n  async createProject(name: string): Promise<void> {\n    return this.makeRequest<void>('/projects', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteProject(projectId: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async updateProject(projectId: string, name: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  // User management methods\n  async listUsers(): Promise<N8nUserList> {\n    return this.makeRequest<N8nUserList>('/users');\n  }\n\n  async createUsers(\n    users: Array<{ email: string; role?: 'global:admin' | 'global:member' }>\n  ): Promise<any> {\n    return this.makeRequest('/users', {\n      method: 'POST',\n      body: JSON.stringify(users),\n    });\n  }\n\n  async getUser(idOrEmail: string): Promise<N8nUser> {\n    return this.makeRequest<N8nUser>(`/users/${idOrEmail}`);\n  }\n\n  async deleteUser(idOrEmail: string): Promise<void> {\n    return this.makeRequest<void>(`/users/${idOrEmail}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Variable management methods\n  async listVariables(): Promise<N8nVariableList> {\n    return this.makeRequest<N8nVariableList>('/variables');\n  }\n\n  async createVariable(key: string, value: string): Promise<void> {\n    return this.makeRequest<void>('/variables', {\n      method: 'POST',\n      body: JSON.stringify({ key, value }),\n    });\n  }\n\n  async deleteVariable(id: string): Promise<void> {\n    return this.makeRequest<void>(`/variables/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Execution management methods\n  async getExecutions(\n    options: {\n      includeData?: boolean;\n      status?: 'error' | 'success' | 'waiting';\n      workflowId?: string;\n      limit?: number;\n    } = {}\n  ): Promise<N8nExecutionList> {\n    const params = new URLSearchParams();\n    if (options.includeData !== undefined)\n      params.append('includeData', String(options.includeData));\n    if (options.status) params.append('status', options.status);\n    if (options.workflowId) params.append('workflowId', options.workflowId);\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nExecutionList>(`/executions?${params.toString()}`);\n  }\n\n  async getExecution(id: number, includeData: boolean = false): Promise<N8nExecution> {\n    const params = new URLSearchParams();\n    if (includeData) params.append('includeData', 'true');\n\n    return this.makeRequest<N8nExecution>(`/executions/${id}?${params.toString()}`);\n  }\n\n  async deleteExecution(id: number): Promise<N8nExecution> {\n    return this.makeRequest<N8nExecution>(`/executions/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Tag management methods\n  async createTag(name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>('/tags', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async getTags(options: { limit?: number } = {}): Promise<N8nTagList> {\n    const params = new URLSearchParams();\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nTagList>(`/tags?${params.toString()}`);\n  }\n\n  async getTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`);\n  }\n\n  async updateTag(id: string, name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getWorkflowTags(workflowId: string): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`);\n  }\n\n  async updateWorkflowTags(workflowId: string, tagIds: { id: string }[]): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`, {\n      method: 'PUT',\n      body: JSON.stringify(tagIds),\n    });\n  }\n\n  // Security audit method\n  async generateAudit(\n    options: {\n      daysAbandonedWorkflow?: number;\n      categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n    } = {}\n  ): Promise<N8nAuditResult> {\n    return this.makeRequest<N8nAuditResult>('/audit', {\n      method: 'POST',\n      body: JSON.stringify({\n        additionalOptions: {\n          daysAbandonedWorkflow: options.daysAbandonedWorkflow,\n          categories: options.categories,\n        },\n      }),\n    });\n  }\n\n  // Credential management methods\n  async createCredential(name: string, type: string, data: Record<string, any>): Promise<any> {\n    return this.makeRequest('/credentials', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        type,\n        data,\n      }),\n    });\n  }\n\n  async deleteCredential(id: string): Promise<any> {\n    return this.makeRequest(`/credentials/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCredentialSchema(credentialTypeName: string): Promise<any> {\n    return this.makeRequest(`/credentials/schema/${credentialTypeName}`);\n  }\n}\n\n// Create an MCP server\nconst server = new Server(\n  {\n    name: 'n8n-integration',\n    version: '1.0.0',\n  },\n  {\n    capabilities: {\n      tools: {},\n    },\n  }\n);\n\n// Store client instances\nconst clients = new Map<string, N8nClient>();\n\n// List tools handler\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [\n      {\n        name: 'init-n8n',\n        description:\n          'Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            url: { type: 'string' },\n            apiKey: { type: 'string' },\n          },\n          required: ['url', 'apiKey'],\n        },\n      },\n      {\n        name: 'list-workflows',\n        description:\n          'List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-workflow',\n        description:\n          'Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-workflow',\n        description:\n          \"Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            nodes: { type: 'array' },\n            connections: { type: 'object' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'update-workflow',\n        description:\n          \"Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            workflow: {\n              type: 'object',\n              properties: {\n                name: { type: 'string' },\n                active: { type: 'boolean' },\n                nodes: { type: 'array' },\n                connections: { type: 'object' },\n                settings: { type: 'object' },\n              },\n            },\n          },\n          required: ['clientId', 'id', 'workflow'],\n        },\n      },\n      {\n        name: 'delete-workflow',\n        description:\n          'Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'activate-workflow',\n        description:\n          'Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'deactivate-workflow',\n        description:\n          'Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'list-projects',\n        description:\n          'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-project',\n        description:\n          'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'delete-project',\n        description:\n          'Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n          },\n          required: ['clientId', 'projectId'],\n        },\n      },\n      {\n        name: 'update-project',\n        description:\n          \"Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'projectId', 'name'],\n        },\n      },\n      {\n        name: 'list-users',\n        description:\n          'Retrieve all users from your instance. Only available for the instance owner.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-users',\n        description: 'Create one or more users in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            users: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  email: { type: 'string' },\n                  role: {\n                    type: 'string',\n                    enum: ['global:admin', 'global:member'],\n                  },\n                },\n                required: ['email'],\n              },\n            },\n          },\n          required: ['clientId', 'users'],\n        },\n      },\n      {\n        name: 'get-user',\n        description: 'Get user by ID or email address.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'delete-user',\n        description: 'Delete a user from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'list-variables',\n        description:\n          'List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-variable',\n        description:\n          'Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            key: { type: 'string' },\n            value: { type: 'string' },\n          },\n          required: ['clientId', 'key', 'value'],\n        },\n      },\n      {\n        name: 'delete-variable',\n        description:\n          'Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-credential',\n        description:\n          \"Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            type: { type: 'string' },\n            data: { type: 'object' },\n          },\n          required: ['clientId', 'name', 'type', 'data'],\n        },\n      },\n      {\n        name: 'delete-credential',\n        description: 'Delete a credential by ID. You must be the owner of the credentials.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-credential-schema',\n        description:\n          \"Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            credentialTypeName: { type: 'string' },\n          },\n          required: ['clientId', 'credentialTypeName'],\n        },\n      },\n      // Execution Management Tools\n      {\n        name: 'list-executions',\n        description: 'Retrieve all executions from your instance with optional filtering.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            includeData: { type: 'boolean' },\n            status: {\n              type: 'string',\n              enum: ['error', 'success', 'waiting'],\n            },\n            workflowId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-execution',\n        description: 'Retrieve a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n            includeData: { type: 'boolean' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'delete-execution',\n        description: 'Delete a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      // Tag Management Tools\n      {\n        name: 'create-tag',\n        description: 'Create a new tag in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'list-tags',\n        description: 'Retrieve all tags from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-tag',\n        description: 'Retrieve a specific tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'update-tag',\n        description: \"Update a tag's name.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'id', 'name'],\n        },\n      },\n      {\n        name: 'delete-tag',\n        description: 'Delete a tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-workflow-tags',\n        description: 'Get tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n          },\n          required: ['clientId', 'workflowId'],\n        },\n      },\n      {\n        name: 'update-workflow-tags',\n        description: 'Update tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n            tagIds: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                },\n                required: ['id'],\n              },\n            },\n          },\n          required: ['clientId', 'workflowId', 'tagIds'],\n        },\n      },\n      // Security Audit Tool\n      {\n        name: 'generate-audit',\n        description: 'Generate a security audit for your n8n instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            daysAbandonedWorkflow: { type: 'number' },\n            categories: {\n              type: 'array',\n              items: {\n                type: 'string',\n                enum: ['credentials', 'database', 'nodes', 'filesystem', 'instance'],\n              },\n            },\n          },\n          required: ['clientId'],\n        },\n      },\n    ],\n  };\n});\n\n// Tool execution handler\nserver.setRequestHandler(CallToolRequestSchema, async request => {\n  const { name, arguments: args } = request.params;\n\n  switch (name) {\n    case 'init-n8n': {\n      const { url, apiKey } = args as { url: string; apiKey: string };\n      try {\n        const client = new N8nClient(url, apiKey);\n\n        // Test connection by listing workflows\n        await client.listWorkflows();\n\n        // Generate a unique client ID\n        const clientId = Buffer.from(url).toString('base64');\n        clients.set(clientId, client);\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully connected to n8n at ${url}. Use this client ID for future operations: ${clientId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-workflows': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflows = await client.listWorkflows();\n        const formattedWorkflows = workflows.data.map(wf => ({\n          id: wf.id,\n          name: wf.name,\n          active: wf.active,\n          created: wf.createdAt,\n          updated: wf.updatedAt,\n          tags: wf.tags,\n        }));\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(formattedWorkflows, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.getWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(workflow, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow': {\n      const { clientId, id, workflow } = args as {\n        clientId: string;\n        id: string;\n        workflow: Partial<N8nWorkflow>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const updatedWorkflow = await client.updateWorkflow(id, workflow);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow:\\n${JSON.stringify(updatedWorkflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-workflow': {\n      const {\n        clientId,\n        name,\n        nodes = [],\n        connections = {},\n      } = args as {\n        clientId: string;\n        name: string;\n        nodes?: any[];\n        connections?: Record<string, any>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.createWorkflow(name, nodes, connections);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deleteWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'activate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.activateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully activated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'deactivate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deactivateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deactivated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-projects': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const projects = await client.listProjects();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(projects.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-project': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createProject(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created project: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-project': {\n      const { clientId, projectId } = args as { clientId: string; projectId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteProject(projectId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted project with ID: ${projectId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-project': {\n      const { clientId, projectId, name } = args as {\n        clientId: string;\n        projectId: string;\n        name: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.updateProject(projectId, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated project ${projectId} with new name: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-users': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const users = await client.listUsers();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(users.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-users': {\n      const { clientId, users } = args as {\n        clientId: string;\n        users: Array<{\n          email: string;\n          role?: 'global:admin' | 'global:member';\n        }>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.createUsers(users);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const user = await client.getUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(user, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted user: ${idOrEmail}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-variables': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const variables = await client.listVariables();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(variables.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-variable': {\n      const { clientId, key, value } = args as { clientId: string; key: string; value: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createVariable(key, value);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created variable with key: ${key}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-variable': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteVariable(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted variable with ID: ${id}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-credential': {\n      const { clientId, name, type, data } = args as {\n        clientId: string;\n        name: string;\n        type: string;\n        data: Record<string, any>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const credential = await client.createCredential(name, type, data);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created credential:\\n${JSON.stringify(credential, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-credential': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.deleteCredential(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted credential:\\n${JSON.stringify(result, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-credential-schema': {\n      const { clientId, credentialTypeName } = args as {\n        clientId: string;\n        credentialTypeName: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(credentialTypeName);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(schema, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Execution Management Handlers\n    case 'list-executions': {\n      const { clientId, includeData, status, workflowId, limit } = args as {\n        clientId: string;\n        includeData?: boolean;\n        status?: 'error' | 'success' | 'waiting';\n        workflowId?: string;\n        limit?: number;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const executions = await client.getExecutions({ includeData, status, workflowId, limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(executions.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-execution': {\n      const { clientId, id, includeData } = args as {\n        clientId: string;\n        id: number;\n        includeData?: boolean;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.getExecution(id, includeData);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(execution, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-execution': {\n      const { clientId, id } = args as { clientId: string; id: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.deleteExecution(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted execution:\\n${JSON.stringify(execution, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Tag Management Handlers\n    case 'create-tag': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.createTag(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-tags': {\n      const { clientId, limit } = args as { clientId: string; limit?: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getTags({ limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.getTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tag, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-tag': {\n      const { clientId, id, name } = args as { clientId: string; id: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.updateTag(id, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.deleteTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow-tags': {\n      const { clientId, workflowId } = args as { clientId: string; workflowId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(workflowId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow-tags': {\n      const { clientId, workflowId, tagIds } = args as {\n        clientId: string;\n        workflowId: string;\n        tagIds: { id: string }[];\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.updateWorkflowTags(workflowId, tagIds);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow tags:\\n${JSON.stringify(tags, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'generate-audit': {\n      const { clientId, daysAbandonedWorkflow, categories } = args as {\n        clientId: string;\n        daysAbandonedWorkflow?: number;\n        categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const audit = await client.generateAudit({ daysAbandonedWorkflow, categories });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(audit, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    default:\n      return {\n        content: [\n          {\n            type: 'text',\n            text: `Unknown tool: ${name}`,\n          },\n        ],\n        isError: true,\n      };\n  }\n});\n\n// Export the server and initialization function for testing\nexport { server, clients, N8nClient };\n\n// Main function to start the server\nexport async function startServer() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error('N8N MCP Server running on stdio');\n}\n\n// Start the server only if this module is run directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  startServer().catch((error) => {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  });\n}\n"],"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","ignoreList":[]}