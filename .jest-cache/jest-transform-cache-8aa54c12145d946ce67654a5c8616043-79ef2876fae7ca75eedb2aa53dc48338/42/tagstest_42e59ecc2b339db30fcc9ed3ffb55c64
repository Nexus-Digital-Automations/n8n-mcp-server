ad49f0f993f83d0a3c9acb6e2034ab3a
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const tags_1 = require("../../../src/tools/tags");
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('Tag Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register tag tools
        (0, tags_1.createTagTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all tag tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(7);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-tags');
        (0, globals_1.expect)(toolNames).toContain('get-tag');
        (0, globals_1.expect)(toolNames).toContain('create-tag');
        (0, globals_1.expect)(toolNames).toContain('update-tag');
        (0, globals_1.expect)(toolNames).toContain('delete-tag');
        (0, globals_1.expect)(toolNames).toContain('get-workflow-tags');
        (0, globals_1.expect)(toolNames).toContain('update-workflow-tags');
    });
    (0, globals_1.describe)('list-tags tool', () => {
        let listTagsTool;
        (0, globals_1.beforeEach)(() => {
            listTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-tags')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(listTagsTool.name).toBe('list-tags');
            (0, globals_1.expect)(listTagsTool.description).toContain('List all tags in the n8n instance');
            (0, globals_1.expect)(listTagsTool.annotations).toEqual({
                title: 'List n8n Tags',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should list tags successfully with full data', async () => {
            const mockTags = [
                {
                    id: 'tag-1',
                    name: 'Production',
                    usageCount: 15,
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-02T00:00:00.000Z',
                },
                {
                    id: 'tag-2',
                    name: 'Development',
                    usageCount: 8,
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-03T00:00:00.000Z',
                },
            ];
            mockClient.getTags.mockResolvedValue({
                data: mockTags,
                nextCursor: 'next-cursor',
            });
            const result = await listTagsTool.execute({ limit: 10 });
            (0, globals_1.expect)(mockClient.getTags).toHaveBeenCalledWith({ limit: 10 });
            (0, globals_1.expect)(result).toContain('Found 2 tag(s)');
            (0, globals_1.expect)(result).toContain('**Production**');
            (0, globals_1.expect)(result).toContain('ID: tag-1');
            (0, globals_1.expect)(result).toContain('Usage Count: 15');
            (0, globals_1.expect)(result).toContain('Created: 12/31/2022');
            (0, globals_1.expect)(result).toContain('Updated: 1/2/2023');
            (0, globals_1.expect)(result).toContain('**Development**');
            (0, globals_1.expect)(result).toContain('ID: tag-2');
            (0, globals_1.expect)(result).toContain('Usage Count: 8');
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor" to get the next page');
        });
        (0, globals_1.it)('should list tags with minimal data', async () => {
            const mockTags = [
                {
                    id: 'tag-1',
                    name: 'Simple Tag',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-01T00:00:00.000Z',
                },
            ];
            mockClient.getTags.mockResolvedValue({
                data: mockTags,
            });
            const result = await listTagsTool.execute({});
            (0, globals_1.expect)(mockClient.getTags).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 1 tag(s)');
            (0, globals_1.expect)(result).toContain('**Simple Tag**');
            (0, globals_1.expect)(result).toContain('ID: tag-1');
            (0, globals_1.expect)(result).toContain('Created: 12/31/2022');
            (0, globals_1.expect)(result).toContain('Updated: 12/31/2022');
            (0, globals_1.expect)(result).not.toContain('Usage Count:');
            (0, globals_1.expect)(result).not.toContain('cursor');
        });
        (0, globals_1.it)('should handle empty tag list', async () => {
            mockClient.getTags.mockResolvedValue({
                data: [],
            });
            const result = await listTagsTool.execute({});
            (0, globals_1.expect)(result).toBe('No tags found in the n8n instance.');
        });
        (0, globals_1.it)('should handle pagination parameters', async () => {
            mockClient.getTags.mockResolvedValue({ data: [] });
            await listTagsTool.execute({ limit: 50, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getTags).toHaveBeenCalledWith({
                limit: 50,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const mockServerNull = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, mockServerNull);
            const toolCall = mockServerNull.addTool.mock.calls.find((call) => call[0].name === 'list-tags');
            (0, globals_1.expect)(toolCall).toBeDefined();
            const toolWithNullClient = toolCall[0];
            await (0, globals_1.expect)(toolWithNullClient.execute({})).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('API request failed');
            mockClient.getTags.mockRejectedValue(apiError);
            await (0, globals_1.expect)(listTagsTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list tags: API request failed'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getTags.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(listTagsTool.execute({})).rejects.toThrow(new fastmcp_1.UserError('Failed to list tags with unknown error'));
        });
    });
    (0, globals_1.describe)('get-tag tool', () => {
        let getTagTool;
        (0, globals_1.beforeEach)(() => {
            getTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-tag')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(getTagTool.name).toBe('get-tag');
            (0, globals_1.expect)(getTagTool.description).toContain('Get detailed information about a specific tag');
            (0, globals_1.expect)(getTagTool.annotations).toEqual({
                title: 'Get Tag Details',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should get tag successfully with full data', async () => {
            const mockTag = {
                id: 'tag-1',
                name: 'Production',
                usageCount: 15,
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-02T00:00:00.000Z',
            };
            mockClient.getTag.mockResolvedValue(mockTag);
            const result = await getTagTool.execute({ tagId: 'tag-1' });
            (0, globals_1.expect)(mockClient.getTag).toHaveBeenCalledWith('tag-1');
            (0, globals_1.expect)(result).toContain('# Tag: Production');
            (0, globals_1.expect)(result).toContain('**ID:** tag-1');
            (0, globals_1.expect)(result).toContain('**Name:** Production');
            (0, globals_1.expect)(result).toContain('**Usage Count:** 15');
            (0, globals_1.expect)(result).toContain('**Created:**');
            (0, globals_1.expect)(result).toContain('**Updated:**');
        });
        (0, globals_1.it)('should get tag with minimal data', async () => {
            const mockTag = {
                id: 'tag-1',
                name: 'Simple Tag',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-01T00:00:00.000Z',
            };
            mockClient.getTag.mockResolvedValue(mockTag);
            const result = await getTagTool.execute({ tagId: 'tag-1' });
            (0, globals_1.expect)(result).toContain('# Tag: Simple Tag');
            (0, globals_1.expect)(result).toContain('**ID:** tag-1');
            (0, globals_1.expect)(result).toContain('**Name:** Simple Tag');
            (0, globals_1.expect)(result).toContain('**Created:**');
            (0, globals_1.expect)(result).toContain('**Updated:**');
            (0, globals_1.expect)(result).not.toContain('**Usage Count:**');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const getTagToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'get-tag')?.[0];
            (0, globals_1.expect)(getTagToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(getTagToolWithNullClient.execute({ tagId: 'tag-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Tag not found');
            mockClient.getTag.mockRejectedValue(apiError);
            await (0, globals_1.expect)(getTagTool.execute({ tagId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get tag: Tag not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getTag.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(getTagTool.execute({ tagId: 'tag-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get tag with unknown error'));
        });
    });
    (0, globals_1.describe)('create-tag tool', () => {
        let createTagTool;
        (0, globals_1.beforeEach)(() => {
            createTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-tag')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(createTagTool.name).toBe('create-tag');
            (0, globals_1.expect)(createTagTool.description).toContain('Create a new tag in n8n');
            (0, globals_1.expect)(createTagTool.annotations).toEqual({
                title: 'Create New Tag',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should create tag successfully', async () => {
            const mockTag = {
                id: 'tag-new',
                name: 'New Tag',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-01T00:00:00.000Z',
                usageCount: 0,
            };
            mockClient.createTag.mockResolvedValue(mockTag);
            const result = await createTagTool.execute({
                name: 'New Tag',
            });
            (0, globals_1.expect)(mockClient.createTag).toHaveBeenCalledWith({
                name: 'New Tag',
            });
            (0, globals_1.expect)(result).toBe('✅ Successfully created tag "New Tag" with ID: tag-new');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const createTagToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'create-tag')?.[0];
            (0, globals_1.expect)(createTagToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(createTagToolWithNullClient.execute({ name: 'Test Tag' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Tag name already exists');
            mockClient.createTag.mockRejectedValue(apiError);
            await (0, globals_1.expect)(createTagTool.execute({ name: 'Duplicate Tag' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create tag: Tag name already exists'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.createTag.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(createTagTool.execute({ name: 'Test Tag' })).rejects.toThrow(new fastmcp_1.UserError('Failed to create tag with unknown error'));
        });
    });
    (0, globals_1.describe)('update-tag tool', () => {
        let updateTagTool;
        (0, globals_1.beforeEach)(() => {
            updateTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-tag')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(updateTagTool.name).toBe('update-tag');
            (0, globals_1.expect)(updateTagTool.description).toContain("Update a tag's name in n8n");
            (0, globals_1.expect)(updateTagTool.annotations).toEqual({
                title: 'Update Tag',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should update tag successfully', async () => {
            const mockTag = {
                id: 'tag-1',
                name: 'Updated Tag',
                createdAt: '2023-01-01T00:00:00.000Z',
                updatedAt: '2023-01-02T00:00:00.000Z',
                usageCount: 5,
            };
            mockClient.updateTag.mockResolvedValue(mockTag);
            const result = await updateTagTool.execute({
                tagId: 'tag-1',
                name: 'Updated Tag',
            });
            (0, globals_1.expect)(mockClient.updateTag).toHaveBeenCalledWith('tag-1', {
                name: 'Updated Tag',
            });
            (0, globals_1.expect)(result).toBe('✅ Successfully updated tag to "Updated Tag" (ID: tag-1)');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const updateTagToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'update-tag')?.[0];
            (0, globals_1.expect)(updateTagToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(updateTagToolWithNullClient.execute({ tagId: 'tag-1', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Tag not found');
            mockClient.updateTag.mockRejectedValue(apiError);
            await (0, globals_1.expect)(updateTagTool.execute({ tagId: 'invalid-id', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update tag: Tag not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.updateTag.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(updateTagTool.execute({ tagId: 'tag-1', name: 'Updated' })).rejects.toThrow(new fastmcp_1.UserError('Failed to update tag with unknown error'));
        });
    });
    (0, globals_1.describe)('delete-tag tool', () => {
        let deleteTagTool;
        (0, globals_1.beforeEach)(() => {
            deleteTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-tag')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(deleteTagTool.name).toBe('delete-tag');
            (0, globals_1.expect)(deleteTagTool.description).toContain('Delete a tag from n8n permanently');
            (0, globals_1.expect)(deleteTagTool.annotations).toEqual({
                title: 'Delete Tag',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should delete tag successfully', async () => {
            mockClient.deleteTag.mockResolvedValue(undefined);
            const result = await deleteTagTool.execute({
                tagId: 'tag-1',
            });
            (0, globals_1.expect)(mockClient.deleteTag).toHaveBeenCalledWith('tag-1');
            (0, globals_1.expect)(result).toBe('✅ Successfully deleted tag with ID: tag-1');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const deleteTagToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'delete-tag')?.[0];
            (0, globals_1.expect)(deleteTagToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(deleteTagToolWithNullClient.execute({ tagId: 'tag-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Tag not found');
            mockClient.deleteTag.mockRejectedValue(apiError);
            await (0, globals_1.expect)(deleteTagTool.execute({ tagId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete tag: Tag not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteTag.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(deleteTagTool.execute({ tagId: 'tag-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to delete tag with unknown error'));
        });
    });
    (0, globals_1.describe)('get-workflow-tags tool', () => {
        let getWorkflowTagsTool;
        (0, globals_1.beforeEach)(() => {
            getWorkflowTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-workflow-tags')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(getWorkflowTagsTool.name).toBe('get-workflow-tags');
            (0, globals_1.expect)(getWorkflowTagsTool.description).toContain('Get all tags assigned to a specific workflow');
            (0, globals_1.expect)(getWorkflowTagsTool.annotations).toEqual({
                title: 'Get Workflow Tags',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should get workflow tags successfully', async () => {
            const mockTags = [
                {
                    id: 'tag-1',
                    name: 'Production',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-01T00:00:00.000Z',
                },
                {
                    id: 'tag-2',
                    name: 'API',
                    createdAt: '2023-01-01T00:00:00.000Z',
                    updatedAt: '2023-01-01T00:00:00.000Z',
                },
            ];
            mockClient.getWorkflowTags.mockResolvedValue(mockTags);
            const result = await getWorkflowTagsTool.execute({ workflowId: 'workflow-1' });
            (0, globals_1.expect)(mockClient.getWorkflowTags).toHaveBeenCalledWith('workflow-1');
            (0, globals_1.expect)(result).toContain('Found 2 tag(s) for workflow workflow-1');
            (0, globals_1.expect)(result).toContain('**Production** (ID: tag-1)');
            (0, globals_1.expect)(result).toContain('**API** (ID: tag-2)');
        });
        (0, globals_1.it)('should handle workflow with no tags', async () => {
            mockClient.getWorkflowTags.mockResolvedValue([]);
            const result = await getWorkflowTagsTool.execute({ workflowId: 'workflow-1' });
            (0, globals_1.expect)(result).toBe('No tags found for workflow ID: workflow-1');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const getWorkflowTagsToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'get-workflow-tags')?.[0];
            (0, globals_1.expect)(getWorkflowTagsToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(getWorkflowTagsToolWithNullClient.execute({ workflowId: 'workflow-1' })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Workflow not found');
            mockClient.getWorkflowTags.mockRejectedValue(apiError);
            await (0, globals_1.expect)(getWorkflowTagsTool.execute({ workflowId: 'invalid-id' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get workflow tags: Workflow not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getWorkflowTags.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(getWorkflowTagsTool.execute({ workflowId: 'workflow-1' })).rejects.toThrow(new fastmcp_1.UserError('Failed to get workflow tags with unknown error'));
        });
    });
    (0, globals_1.describe)('update-workflow-tags tool', () => {
        let updateWorkflowTagsTool;
        (0, globals_1.beforeEach)(() => {
            updateWorkflowTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-workflow-tags')[0];
        });
        (0, globals_1.it)('should have correct tool configuration', () => {
            (0, globals_1.expect)(updateWorkflowTagsTool.name).toBe('update-workflow-tags');
            (0, globals_1.expect)(updateWorkflowTagsTool.description).toContain('Update the tags assigned to a workflow');
            (0, globals_1.expect)(updateWorkflowTagsTool.annotations).toEqual({
                title: 'Update Workflow Tags',
                readOnlyHint: false,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should update workflow tags successfully with multiple tags', async () => {
            mockClient.updateWorkflowTags.mockResolvedValue(undefined);
            const result = await updateWorkflowTagsTool.execute({
                workflowId: 'workflow-1',
                tagIds: ['tag-1', 'tag-2', 'tag-3'],
            });
            (0, globals_1.expect)(mockClient.updateWorkflowTags).toHaveBeenCalledWith('workflow-1', [
                'tag-1',
                'tag-2',
                'tag-3',
            ]);
            (0, globals_1.expect)(result).toBe('✅ Successfully updated workflow workflow-1 with 3 tag(s)');
        });
        (0, globals_1.it)('should update workflow tags successfully with no tags', async () => {
            mockClient.updateWorkflowTags.mockResolvedValue(undefined);
            const result = await updateWorkflowTagsTool.execute({
                workflowId: 'workflow-1',
                tagIds: [],
            });
            (0, globals_1.expect)(mockClient.updateWorkflowTags).toHaveBeenCalledWith('workflow-1', []);
            (0, globals_1.expect)(result).toBe('✅ Successfully updated workflow workflow-1 with 0 tag(s)');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const getClientNull = globals_1.jest.fn(() => null);
            const nullClientServer = { addTool: globals_1.jest.fn() };
            (0, tags_1.createTagTools)(getClientNull, nullClientServer);
            const updateWorkflowTagsToolWithNullClient = nullClientServer.addTool.mock.calls.find((call) => call[0].name === 'update-workflow-tags')?.[0];
            (0, globals_1.expect)(updateWorkflowTagsToolWithNullClient).toBeDefined();
            await (0, globals_1.expect)(updateWorkflowTagsToolWithNullClient.execute({
                workflowId: 'workflow-1',
                tagIds: ['tag-1'],
            })).rejects.toThrow(new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.'));
        });
        (0, globals_1.it)('should handle API errors', async () => {
            const apiError = new Error('Workflow not found');
            mockClient.updateWorkflowTags.mockRejectedValue(apiError);
            await (0, globals_1.expect)(updateWorkflowTagsTool.execute({ workflowId: 'invalid-id', tagIds: ['tag-1'] })).rejects.toThrow(new fastmcp_1.UserError('Failed to update workflow tags: Workflow not found'));
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.updateWorkflowTags.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(updateWorkflowTagsTool.execute({ workflowId: 'workflow-1', tagIds: ['tag-1'] })).rejects.toThrow(new fastmcp_1.UserError('Failed to update workflow tags with unknown error'));
        });
    });
    (0, globals_1.describe)('parameter validation', () => {
        (0, globals_1.it)('should validate tag ID parameters', () => {
            const getTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-tag')[0];
            (0, globals_1.expect)(getTagTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate workflow ID parameters', () => {
            const getWorkflowTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-workflow-tags')[0];
            (0, globals_1.expect)(getWorkflowTagsTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate create tag parameters', () => {
            const createTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'create-tag')[0];
            (0, globals_1.expect)(createTagTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate update tag parameters', () => {
            const updateTagTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-tag')[0];
            (0, globals_1.expect)(updateTagTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate update workflow tags parameters', () => {
            const updateWorkflowTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'update-workflow-tags')[0];
            (0, globals_1.expect)(updateWorkflowTagsTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
        (0, globals_1.it)('should validate list tags parameters', () => {
            const listTagsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-tags')[0];
            (0, globals_1.expect)(listTagsTool.parameters).toBeDefined();
            // Zod validation would be handled at runtime
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,