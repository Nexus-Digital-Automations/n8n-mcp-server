6d37188bf1f9ea9ffe96624f27eebf54
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVariableTools = createVariableTools;
const zod_1 = require("zod");
const fastmcp_1 = require("fastmcp");
// Zod schemas for validation
const VariableIdSchema = zod_1.z.object({
    variableId: zod_1.z.string().min(1, 'Variable ID is required'),
});
const ListVariablesSchema = zod_1.z.object({
    limit: zod_1.z.number().min(1).max(100).optional(),
    cursor: zod_1.z.string().optional(),
});
const CreateVariableSchema = zod_1.z.object({
    key: zod_1.z.string().min(1, 'Variable key is required'),
    value: zod_1.z.string().min(1, 'Variable value is required'),
    type: zod_1.z.enum(['string', 'number', 'boolean', 'json']).optional().default('string'),
});
// Tool registration function
function createVariableTools(getClient, server) {
    // List variables tool
    server.addTool({
        name: 'list-variables',
        description: 'List all environment variables in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',
        parameters: ListVariablesSchema,
        annotations: {
            title: 'List n8n Variables',
            readOnlyHint: true,
            destructiveHint: false,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const options = {};
                if (args.limit)
                    options.limit = args.limit;
                if (args.cursor)
                    options.cursor = args.cursor;
                const response = await client.getVariables(options);
                if (response.data.length === 0) {
                    return 'No variables found in the n8n instance.';
                }
                let result = `Found ${response.data.length} variable(s):\n\n`;
                response.data.forEach((variable, index) => {
                    result += `${index + 1}. **${variable.key}**\n`;
                    result += `   - ID: ${variable.id}\n`;
                    result += `   - Type: ${variable.type || 'string'}\n`;
                    // Don't show actual values for security reasons
                    result += `   - Value: [HIDDEN]\n`;
                    if (variable.createdAt) {
                        result += `   - Created: ${new Date(variable.createdAt).toLocaleDateString()}\n`;
                    }
                    if (variable.updatedAt) {
                        result += `   - Updated: ${new Date(variable.updatedAt).toLocaleDateString()}\n`;
                    }
                    result += '\n';
                });
                if (response.nextCursor) {
                    result += `\nðŸ“„ Use cursor "${response.nextCursor}" to get the next page.`;
                }
                return result;
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to list variables: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to list variables with unknown error');
            }
        },
    });
    // Create variable tool
    server.addTool({
        name: 'create-variable',
        description: 'Create a new environment variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',
        parameters: CreateVariableSchema,
        annotations: {
            title: 'Create New Variable',
            readOnlyHint: false,
            destructiveHint: false,
            idempotentHint: false,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                const variableData = {
                    key: args.key,
                    value: args.value,
                    type: args.type,
                };
                const variable = await client.createVariable(variableData);
                return (`âœ… Successfully created variable "${variable.key}" with ID: ${variable.id}\n` +
                    `Type: ${variable.type || 'string'}\n` +
                    `Value: [HIDDEN for security]`);
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to create variable: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to create variable with unknown error');
            }
        },
    });
    // Delete variable tool
    server.addTool({
        name: 'delete-variable',
        description: 'Delete an environment variable from n8n permanently. NOTE: Requires n8n Enterprise license with variable management features enabled',
        parameters: VariableIdSchema,
        annotations: {
            title: 'Delete Variable',
            readOnlyHint: false,
            destructiveHint: true,
            idempotentHint: true,
            openWorldHint: true,
        },
        execute: async (args) => {
            const client = getClient();
            if (!client) {
                throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
            }
            try {
                await client.deleteVariable(args.variableId);
                return `âœ… Successfully deleted variable with ID: ${args.variableId}`;
            }
            catch (error) {
                if (error instanceof Error) {
                    // Check for license-related errors
                    if (error.message.includes('license')) {
                        throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
                    }
                    throw new fastmcp_1.UserError(`Failed to delete variable: ${error.message}`);
                }
                throw new fastmcp_1.UserError('Failed to delete variable with unknown error');
            }
        },
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,