{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nVariable, CreateVariableRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst VariableIdSchema = z.object({\n  variableId: z.string().min(1, 'Variable ID is required'),\n});\n\nconst ListVariablesSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateVariableSchema = z.object({\n  key: z.string().min(1, 'Variable key is required'),\n  value: z.string().min(1, 'Variable value is required'),\n  type: z.enum(['string', 'number', 'boolean', 'json']).optional().default('string'),\n});\n\n// Tool registration function\nexport function createVariableTools(getClient: () => N8nClient | null, server: any) {\n  // List variables tool\n  server.addTool({\n    name: 'list-variables',\n    description:\n      'List all environment variables in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: ListVariablesSchema,\n    annotations: {\n      title: 'List n8n Variables',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListVariablesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getVariables(options);\n\n        if (response.data.length === 0) {\n          return 'No variables found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} variable(s):\\n\\n`;\n\n        response.data.forEach((variable: N8nVariable, index: number) => {\n          result += `${index + 1}. **${variable.key}**\\n`;\n          result += `   - ID: ${variable.id}\\n`;\n          result += `   - Type: ${variable.type || 'string'}\\n`;\n          // Don't show actual values for security reasons\n          result += `   - Value: [HIDDEN]\\n`;\n          if (variable.createdAt) {\n            result += `   - Created: ${new Date(variable.createdAt).toLocaleDateString()}\\n`;\n          }\n          if (variable.updatedAt) {\n            result += `   - Updated: ${new Date(variable.updatedAt).toLocaleDateString()}\\n`;\n          }\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\nðŸ“„ Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to list variables: ${error.message}`);\n        }\n        throw new UserError('Failed to list variables with unknown error');\n      }\n    },\n  });\n\n  // Create variable tool\n  server.addTool({\n    name: 'create-variable',\n    description:\n      'Create a new environment variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: CreateVariableSchema,\n    annotations: {\n      title: 'Create New Variable',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateVariableSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const variableData: CreateVariableRequest = {\n          key: args.key,\n          value: args.value,\n          type: args.type,\n        };\n\n        const variable = await client.createVariable(variableData);\n\n        return (\n          `âœ… Successfully created variable \"${variable.key}\" with ID: ${variable.id}\\n` +\n          `Type: ${variable.type || 'string'}\\n` +\n          `Value: [HIDDEN for security]`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to create variable: ${error.message}`);\n        }\n        throw new UserError('Failed to create variable with unknown error');\n      }\n    },\n  });\n\n  // Delete variable tool\n  server.addTool({\n    name: 'delete-variable',\n    description:\n      'Delete an environment variable from n8n permanently. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: VariableIdSchema,\n    annotations: {\n      title: 'Delete Variable',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof VariableIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteVariable(args.variableId);\n        return `âœ… Successfully deleted variable with ID: ${args.variableId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to delete variable: ${error.message}`);\n        }\n        throw new UserError('Failed to delete variable with unknown error');\n      }\n    },\n  });\n}\n"],"version":3}