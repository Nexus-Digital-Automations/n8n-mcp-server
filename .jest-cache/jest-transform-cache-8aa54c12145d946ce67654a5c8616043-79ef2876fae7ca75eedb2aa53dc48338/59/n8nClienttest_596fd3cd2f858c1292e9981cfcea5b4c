25952a48c2e8ff0eeb45b98df31dd5c4
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock node-fetch before importing
globals_1.jest.mock('node-fetch');
const n8nClient_1 = require("../../../src/client/n8nClient");
const node_fetch_1 = __importDefault(require("node-fetch"));
const mockFetch = node_fetch_1.default;
(0, globals_1.describe)('N8nClient', () => {
    let client;
    const baseUrl = 'https://test.n8n.io';
    const apiKey = 'test-api-key';
    (0, globals_1.beforeEach)(() => {
        client = new n8nClient_1.N8nClient(baseUrl, apiKey);
        mockFetch.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should initialize with correct base URL and API key', () => {
            (0, globals_1.expect)(client).toBeInstanceOf(n8nClient_1.N8nClient);
        });
        (0, globals_1.it)('should remove trailing slash from base URL', () => {
            const clientWithSlash = new n8nClient_1.N8nClient('https://test.n8n.io/', apiKey);
            (0, globals_1.expect)(clientWithSlash).toBeInstanceOf(n8nClient_1.N8nClient);
        });
    });
    (0, globals_1.describe)('makeRequest', () => {
        (0, globals_1.it)('should make successful API request', async () => {
            const mockResponse = {
                ok: true,
                headers: {
                    get: globals_1.jest.fn().mockReturnValue('application/json'),
                },
                json: globals_1.jest.fn(() => Promise.resolve({ success: true })),
            };
            mockFetch.mockResolvedValue(mockResponse);
            const result = await client.getWorkflows();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows', globals_1.expect.objectContaining({
                headers: globals_1.expect.objectContaining({
                    'X-N8N-API-KEY': 'test-api-key',
                    Accept: 'application/json',
                    'Content-Type': 'application/json',
                }),
            }));
            (0, globals_1.expect)(result).toEqual({ success: true });
        });
        (0, globals_1.it)('should handle API error responses', async () => {
            const mockResponse = {
                ok: false,
                status: 404,
                text: globals_1.jest.fn(() => Promise.resolve('Not Found')),
            };
            mockFetch.mockResolvedValue(mockResponse);
            await (0, globals_1.expect)(client.getWorkflows()).rejects.toThrow('n8n API request failed: HTTP 404: Not Found');
        });
        (0, globals_1.it)('should handle network errors', async () => {
            mockFetch.mockRejectedValue(new Error('Network error'));
            await (0, globals_1.expect)(client.getWorkflows()).rejects.toThrow('n8n API request failed: Network error');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockFetch.mockRejectedValue('Unknown error string');
            await (0, globals_1.expect)(client.getWorkflows()).rejects.toThrow('n8n API request failed with unknown error');
        });
        (0, globals_1.it)('should handle non-JSON responses', async () => {
            const mockResponse = {
                ok: true,
                headers: {
                    get: globals_1.jest.fn().mockReturnValue('text/plain'),
                },
                text: globals_1.jest.fn(() => Promise.resolve('Plain text response')),
            };
            mockFetch.mockResolvedValue(mockResponse);
            const result = await client.getWorkflows();
            (0, globals_1.expect)(result).toBe('Plain text response');
        });
    });
    (0, globals_1.describe)('workflow methods', () => {
        (0, globals_1.beforeEach)(() => {
            const mockResponse = {
                ok: true,
                headers: {
                    get: globals_1.jest.fn().mockReturnValue('application/json'),
                },
                json: globals_1.jest.fn(),
            };
            mockFetch.mockResolvedValue(mockResponse);
        });
        (0, globals_1.it)('should get workflows with pagination', async () => {
            const mockWorkflows = [
                global.testUtils.createMockWorkflow({ id: '1' }),
                global.testUtils.createMockWorkflow({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockWorkflows }),
            }));
            const result = await client.getWorkflows({ limit: 10, cursor: 'abc123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows?limit=10&cursor=abc123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockWorkflows);
        });
        (0, globals_1.it)('should get single workflow', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockWorkflow),
            }));
            const result = await client.getWorkflow('workflow-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockWorkflow);
        });
        (0, globals_1.it)('should create workflow', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow();
            const workflowData = {
                name: 'Test Workflow',
                nodes: [],
                connections: {},
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockWorkflow),
            }));
            const result = await client.createWorkflow(workflowData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(workflowData),
            }));
            (0, globals_1.expect)(result).toEqual(mockWorkflow);
        });
        (0, globals_1.it)('should update workflow', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow();
            const workflowData = {
                name: 'Updated Workflow',
                nodes: [],
                connections: {},
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockWorkflow),
            }));
            const result = await client.updateWorkflow('workflow-123', workflowData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123', globals_1.expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify(workflowData),
            }));
            (0, globals_1.expect)(result).toEqual(mockWorkflow);
        });
        (0, globals_1.it)('should activate workflow', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockWorkflow),
            }));
            const result = await client.activateWorkflow('workflow-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123/activate', globals_1.expect.objectContaining({
                method: 'POST',
            }));
            (0, globals_1.expect)(result).toEqual(mockWorkflow);
        });
        (0, globals_1.it)('should deactivate workflow', async () => {
            const mockWorkflow = global.testUtils.createMockWorkflow();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockWorkflow),
            }));
            const result = await client.deactivateWorkflow('workflow-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123/deactivate', globals_1.expect.objectContaining({
                method: 'POST',
            }));
            (0, globals_1.expect)(result).toEqual(mockWorkflow);
        });
        (0, globals_1.it)('should delete workflow', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteWorkflow('workflow-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
    });
    (0, globals_1.describe)('user methods', () => {
        (0, globals_1.it)('should get users', async () => {
            const mockUsers = [
                global.testUtils.createMockUser({ id: '1' }),
                global.testUtils.createMockUser({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockUsers }),
            }));
            const result = await client.getUsers();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockUsers);
        });
        (0, globals_1.it)('should get users with pagination', async () => {
            const mockUsers = [global.testUtils.createMockUser({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockUsers }),
            }));
            const result = await client.getUsers({ limit: 10, cursor: 'user123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users?limit=10&cursor=user123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockUsers);
        });
        (0, globals_1.it)('should get single user', async () => {
            const mockUser = global.testUtils.createMockUser();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockUser),
            }));
            const result = await client.getUser('user-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users/user-123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockUser);
        });
        (0, globals_1.it)('should create user', async () => {
            const mockUser = global.testUtils.createMockUser();
            const userData = {
                email: 'test@example.com',
                firstName: 'Test',
                lastName: 'User',
                password: 'password123',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockUser),
            }));
            const result = await client.createUser(userData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(userData),
            }));
            (0, globals_1.expect)(result).toEqual(mockUser);
        });
        (0, globals_1.it)('should update user', async () => {
            const mockUser = global.testUtils.createMockUser();
            const userData = {
                firstName: 'Updated',
                lastName: 'User',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockUser),
            }));
            const result = await client.updateUser('user-123', userData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users/user-123', globals_1.expect.objectContaining({
                method: 'PATCH',
                body: JSON.stringify(userData),
            }));
            (0, globals_1.expect)(result).toEqual(mockUser);
        });
        (0, globals_1.it)('should delete user', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteUser('user-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/users/user-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
    });
    (0, globals_1.describe)('execution methods', () => {
        (0, globals_1.it)('should get executions', async () => {
            const mockExecutions = [
                global.testUtils.createMockExecution({ id: '1' }),
                global.testUtils.createMockExecution({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockExecutions }),
            }));
            const result = await client.getExecutions();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/executions', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockExecutions);
        });
        (0, globals_1.it)('should get executions with pagination', async () => {
            const mockExecutions = [global.testUtils.createMockExecution({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockExecutions }),
            }));
            const result = await client.getExecutions({ limit: 5, cursor: 'exec123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/executions?limit=5&cursor=exec123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockExecutions);
        });
        (0, globals_1.it)('should get single execution', async () => {
            const mockExecution = global.testUtils.createMockExecution();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockExecution),
            }));
            const result = await client.getExecution('execution-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/executions/execution-123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockExecution);
        });
        (0, globals_1.it)('should delete execution', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteExecution('execution-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/executions/execution-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
    });
    (0, globals_1.describe)('credential methods', () => {
        (0, globals_1.it)('should get credentials', async () => {
            const mockCredentials = [
                global.testUtils.createMockCredential({ id: '1' }),
                global.testUtils.createMockCredential({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockCredentials }),
            }));
            const result = await client.getCredentials();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockCredentials);
        });
        (0, globals_1.it)('should get credentials with pagination', async () => {
            const mockCredentials = [global.testUtils.createMockCredential({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockCredentials }),
            }));
            const result = await client.getCredentials({ limit: 10, cursor: 'cred123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials?limit=10&cursor=cred123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockCredentials);
        });
        (0, globals_1.it)('should get single credential', async () => {
            const mockCredential = global.testUtils.createMockCredential();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockCredential),
            }));
            const result = await client.getCredential('credential-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials/credential-123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockCredential);
        });
        (0, globals_1.it)('should create credential', async () => {
            const mockCredential = global.testUtils.createMockCredential();
            const credentialData = {
                name: 'Test Credential',
                type: 'httpBasicAuth',
                data: { username: 'test', password: 'pass' },
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockCredential),
            }));
            const result = await client.createCredential(credentialData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(credentialData),
            }));
            (0, globals_1.expect)(result).toEqual(mockCredential);
        });
        (0, globals_1.it)('should delete credential', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteCredential('credential-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials/credential-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
        (0, globals_1.it)('should get credential schema', async () => {
            const mockSchema = { properties: { username: { type: 'string' } } };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockSchema),
            }));
            const result = await client.getCredentialSchema('httpBasicAuth');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/credentials/schema/httpBasicAuth', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockSchema);
        });
    });
    (0, globals_1.describe)('project methods', () => {
        (0, globals_1.it)('should get projects', async () => {
            const mockProjects = [
                global.testUtils.createMockProject({ id: '1' }),
                global.testUtils.createMockProject({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockProjects }),
            }));
            const result = await client.getProjects();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/projects', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockProjects);
        });
        (0, globals_1.it)('should get projects with pagination', async () => {
            const mockProjects = [global.testUtils.createMockProject({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockProjects }),
            }));
            const result = await client.getProjects({ limit: 5, cursor: 'proj123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/projects?limit=5&cursor=proj123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockProjects);
        });
        (0, globals_1.it)('should create project', async () => {
            const mockProject = global.testUtils.createMockProject();
            const projectData = {
                name: 'Test Project',
                type: 'team',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockProject),
            }));
            const result = await client.createProject(projectData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/projects', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(projectData),
            }));
            (0, globals_1.expect)(result).toEqual(mockProject);
        });
        (0, globals_1.it)('should update project', async () => {
            const mockProject = global.testUtils.createMockProject();
            const projectData = {
                name: 'Updated Project',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockProject),
            }));
            const result = await client.updateProject('project-123', projectData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/projects/project-123', globals_1.expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify(projectData),
            }));
            (0, globals_1.expect)(result).toEqual(mockProject);
        });
        (0, globals_1.it)('should delete project', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteProject('project-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/projects/project-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
    });
    (0, globals_1.describe)('variable methods', () => {
        (0, globals_1.it)('should get variables', async () => {
            const mockVariables = [
                global.testUtils.createMockVariable({ id: '1' }),
                global.testUtils.createMockVariable({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockVariables }),
            }));
            const result = await client.getVariables();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/variables', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockVariables);
        });
        (0, globals_1.it)('should get variables with pagination', async () => {
            const mockVariables = [global.testUtils.createMockVariable({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockVariables }),
            }));
            const result = await client.getVariables({ limit: 20, cursor: 'var123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/variables?limit=20&cursor=var123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockVariables);
        });
        (0, globals_1.it)('should create variable', async () => {
            const mockVariable = global.testUtils.createMockVariable();
            const variableData = {
                key: 'TEST_VAR',
                value: 'test-value',
                type: 'string',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockVariable),
            }));
            const result = await client.createVariable(variableData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/variables', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(variableData),
            }));
            (0, globals_1.expect)(result).toEqual(mockVariable);
        });
        (0, globals_1.it)('should delete variable', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteVariable('variable-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/variables/variable-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
    });
    (0, globals_1.describe)('tag methods', () => {
        (0, globals_1.it)('should get tags', async () => {
            const mockTags = [
                global.testUtils.createMockTag({ id: '1' }),
                global.testUtils.createMockTag({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockTags }),
            }));
            const result = await client.getTags();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockTags);
        });
        (0, globals_1.it)('should get tags with pagination', async () => {
            const mockTags = [global.testUtils.createMockTag({ id: '1' })];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({ data: mockTags }),
            }));
            const result = await client.getTags({ limit: 15, cursor: 'tag123' });
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags?limit=15&cursor=tag123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result.data).toEqual(mockTags);
        });
        (0, globals_1.it)('should get single tag', async () => {
            const mockTag = global.testUtils.createMockTag();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockTag),
            }));
            const result = await client.getTag('tag-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags/tag-123', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockTag);
        });
        (0, globals_1.it)('should create tag', async () => {
            const mockTag = global.testUtils.createMockTag();
            const tagData = {
                name: 'Test Tag',
                color: '#ff0000',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockTag),
            }));
            const result = await client.createTag(tagData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags', globals_1.expect.objectContaining({
                method: 'POST',
                body: JSON.stringify(tagData),
            }));
            (0, globals_1.expect)(result).toEqual(mockTag);
        });
        (0, globals_1.it)('should update tag', async () => {
            const mockTag = global.testUtils.createMockTag();
            const tagData = {
                name: 'Updated Tag',
                color: '#00ff00',
            };
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockTag),
            }));
            const result = await client.updateTag('tag-123', tagData);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags/tag-123', globals_1.expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify(tagData),
            }));
            (0, globals_1.expect)(result).toEqual(mockTag);
        });
        (0, globals_1.it)('should delete tag', async () => {
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.deleteTag('tag-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/tags/tag-123', globals_1.expect.objectContaining({
                method: 'DELETE',
            }));
        });
        (0, globals_1.it)('should get workflow tags', async () => {
            const mockTags = [
                global.testUtils.createMockTag({ id: '1' }),
                global.testUtils.createMockTag({ id: '2' }),
            ];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockTags),
            }));
            const result = await client.getWorkflowTags('workflow-123');
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123/tags', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockTags);
        });
        (0, globals_1.it)('should update workflow tags', async () => {
            const tagIds = ['tag-1', 'tag-2'];
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve({}),
                text: () => Promise.resolve(''),
            }));
            await client.updateWorkflowTags('workflow-123', tagIds);
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/workflows/workflow-123/tags', globals_1.expect.objectContaining({
                method: 'PUT',
                body: JSON.stringify({ tagIds }),
            }));
        });
    });
    (0, globals_1.describe)('audit methods', () => {
        (0, globals_1.it)('should generate audit report', async () => {
            const mockAuditReport = global.testUtils.createMockAuditReport();
            mockFetch.mockImplementation(() => Promise.resolve({
                ok: true,
                headers: { get: () => 'application/json' },
                json: () => Promise.resolve(mockAuditReport),
            }));
            const result = await client.generateAuditReport();
            (0, globals_1.expect)(mockFetch).toHaveBeenCalledWith('https://test.n8n.io/api/v1/audit', globals_1.expect.any(Object));
            (0, globals_1.expect)(result).toEqual(mockAuditReport);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,