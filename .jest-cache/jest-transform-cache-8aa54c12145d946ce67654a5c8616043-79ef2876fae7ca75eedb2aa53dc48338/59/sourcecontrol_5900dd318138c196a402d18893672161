c5402a5bf30dd591dbb8b25988e0c9b8
"use strict";

/* istanbul ignore next */
function cov_o7lkfwp7x() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/source-control.ts";
  var hash = "b4ac5890ed96d2a9e2f9216134efba7e94d6f81b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/source-control.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 60
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 6,
          column: 28
        },
        end: {
          line: 12,
          column: 2
        }
      },
      "5": {
        start: {
          line: 13,
          column: 36
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "6": {
        start: {
          line: 22,
          column: 34
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "7": {
        start: {
          line: 32,
          column: 33
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "8": {
        start: {
          line: 41,
          column: 37
        },
        end: {
          line: 48,
          column: 2
        }
      },
      "9": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 116,
          column: 7
        }
      },
      "10": {
        start: {
          line: 62,
          column: 27
        },
        end: {
          line: 62,
          column: 38
        }
      },
      "11": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "12": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 104
        }
      },
      "13": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "14": {
        start: {
          line: 68,
          column: 40
        },
        end: {
          line: 72,
          column: 18
        }
      },
      "15": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "16": {
        start: {
          line: 76,
          column: 20
        },
        end: {
          line: 76,
          column: 63
        }
      },
      "17": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 161
        }
      },
      "18": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "19": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 83,
          column: 119
        }
      },
      "20": {
        start: {
          line: 86,
          column: 35
        },
        end: {
          line: 93,
          column: 17
        }
      },
      "21": {
        start: {
          line: 94,
          column: 31
        },
        end: {
          line: 94,
          column: 70
        }
      },
      "22": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 98,
          column: 17
        }
      },
      "23": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 61
        }
      },
      "24": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 104,
          column: 73
        }
      },
      "25": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "26": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 32
        }
      },
      "27": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "28": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 106
        }
      },
      "29": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 103
        }
      },
      "30": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 173,
          column: 7
        }
      },
      "31": {
        start: {
          line: 129,
          column: 27
        },
        end: {
          line: 129,
          column: 38
        }
      },
      "32": {
        start: {
          line: 130,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "33": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 104
        }
      },
      "34": {
        start: {
          line: 133,
          column: 12
        },
        end: {
          line: 171,
          column: 13
        }
      },
      "35": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 135,
          column: 74
        }
      },
      "36": {
        start: {
          line: 137,
          column: 35
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "37": {
        start: {
          line: 149,
          column: 37
        },
        end: {
          line: 149,
          column: 72
        }
      },
      "38": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "39": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 161,
          column: 55
        }
      },
      "40": {
        start: {
          line: 164,
          column: 16
        },
        end: {
          line: 166,
          column: 17
        }
      },
      "41": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 32
        }
      },
      "42": {
        start: {
          line: 167,
          column: 16
        },
        end: {
          line: 169,
          column: 17
        }
      },
      "43": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 104
        }
      },
      "44": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 170,
          column: 101
        }
      },
      "45": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 279,
          column: 7
        }
      },
      "46": {
        start: {
          line: 186,
          column: 27
        },
        end: {
          line: 186,
          column: 38
        }
      },
      "47": {
        start: {
          line: 187,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "48": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 104
        }
      },
      "49": {
        start: {
          line: 190,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "50": {
        start: {
          line: 192,
          column: 38
        },
        end: {
          line: 196,
          column: 18
        }
      },
      "51": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 203,
          column: 17
        }
      },
      "52": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 199,
          column: 55
        }
      },
      "53": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 166
        }
      },
      "54": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "55": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 218,
          column: 17
        }
      },
      "56": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 217,
          column: 70
        }
      },
      "57": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 247,
          column: 17
        }
      },
      "58": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 246,
          column: 21
        }
      },
      "59": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 245,
          column: 25
        }
      },
      "60": {
        start: {
          line: 223,
          column: 52
        },
        end: {
          line: 227,
          column: 30
        }
      },
      "61": {
        start: {
          line: 228,
          column: 49
        },
        end: {
          line: 228,
          column: 76
        }
      },
      "62": {
        start: {
          line: 230,
          column: 54
        },
        end: {
          line: 230,
          column: 95
        }
      },
      "63": {
        start: {
          line: 231,
          column: 53
        },
        end: {
          line: 231,
          column: 117
        }
      },
      "64": {
        start: {
          line: 231,
          column: 88
        },
        end: {
          line: 231,
          column: 116
        }
      },
      "65": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 241,
          column: 29
        }
      },
      "66": {
        start: {
          line: 234,
          column: 32
        },
        end: {
          line: 234,
          column: 95
        }
      },
      "67": {
        start: {
          line: 235,
          column: 32
        },
        end: {
          line: 235,
          column: 58
        }
      },
      "68": {
        start: {
          line: 239,
          column: 32
        },
        end: {
          line: 239,
          column: 74
        }
      },
      "69": {
        start: {
          line: 240,
          column: 32
        },
        end: {
          line: 240,
          column: 59
        }
      },
      "70": {
        start: {
          line: 244,
          column: 28
        },
        end: {
          line: 244,
          column: 136
        }
      },
      "71": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "72": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 259,
          column: 21
        }
      },
      "73": {
        start: {
          line: 251,
          column: 24
        },
        end: {
          line: 258,
          column: 25
        }
      },
      "74": {
        start: {
          line: 254,
          column: 28
        },
        end: {
          line: 254,
          column: 57
        }
      },
      "75": {
        start: {
          line: 257,
          column: 28
        },
        end: {
          line: 257,
          column: 147
        }
      },
      "76": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 267,
          column: 114
        }
      },
      "77": {
        start: {
          line: 267,
          column: 85
        },
        end: {
          line: 267,
          column: 93
        }
      },
      "78": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 272,
          column: 17
        }
      },
      "79": {
        start: {
          line: 271,
          column: 20
        },
        end: {
          line: 271,
          column: 32
        }
      },
      "80": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "81": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 102
        }
      },
      "82": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 99
        }
      },
      "83": {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 331,
          column: 7
        }
      },
      "84": {
        start: {
          line: 292,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "85": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 297,
          column: 18
        }
      },
      "86": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "87": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 301,
          column: 52
        }
      },
      "88": {
        start: {
          line: 303,
          column: 36
        },
        end: {
          line: 303,
          column: 86
        }
      },
      "89": {
        start: {
          line: 303,
          column: 60
        },
        end: {
          line: 303,
          column: 85
        }
      },
      "90": {
        start: {
          line: 304,
          column: 30
        },
        end: {
          line: 304,
          column: 75
        }
      },
      "91": {
        start: {
          line: 304,
          column: 54
        },
        end: {
          line: 304,
          column: 74
        }
      },
      "92": {
        start: {
          line: 305,
          column: 29
        },
        end: {
          line: 307,
          column: 51
        }
      },
      "93": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 314,
          column: 17
        }
      },
      "94": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 74
        }
      },
      "95": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 312,
          column: 23
        }
      },
      "96": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 311,
          column: 55
        }
      },
      "97": {
        start: {
          line: 313,
          column: 20
        },
        end: {
          line: 313,
          column: 35
        }
      },
      "98": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 321,
          column: 17
        }
      },
      "99": {
        start: {
          line: 316,
          column: 20
        },
        end: {
          line: 316,
          column: 62
        }
      },
      "100": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 320,
          column: 23
        }
      },
      "101": {
        start: {
          line: 318,
          column: 37
        },
        end: {
          line: 318,
          column: 84
        }
      },
      "102": {
        start: {
          line: 319,
          column: 24
        },
        end: {
          line: 319,
          column: 62
        }
      },
      "103": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 30
        }
      },
      "104": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 327,
          column: 17
        }
      },
      "105": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 326,
          column: 106
        }
      },
      "106": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 103
        }
      },
      "107": {
        start: {
          line: 332,
          column: 4
        },
        end: {
          line: 385,
          column: 7
        }
      },
      "108": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 383,
          column: 13
        }
      },
      "109": {
        start: {
          line: 346,
          column: 33
        },
        end: {
          line: 350,
          column: 18
        }
      },
      "110": {
        start: {
          line: 352,
          column: 36
        },
        end: {
          line: 353,
          column: 109
        }
      },
      "111": {
        start: {
          line: 352,
          column: 60
        },
        end: {
          line: 353,
          column: 108
        }
      },
      "112": {
        start: {
          line: 354,
          column: 38
        },
        end: {
          line: 356,
          column: 65
        }
      },
      "113": {
        start: {
          line: 354,
          column: 62
        },
        end: {
          line: 356,
          column: 64
        }
      },
      "114": {
        start: {
          line: 357,
          column: 29
        },
        end: {
          line: 360,
          column: 60
        }
      },
      "115": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 367,
          column: 17
        }
      },
      "116": {
        start: {
          line: 362,
          column: 20
        },
        end: {
          line: 362,
          column: 88
        }
      },
      "117": {
        start: {
          line: 363,
          column: 20
        },
        end: {
          line: 365,
          column: 23
        }
      },
      "118": {
        start: {
          line: 364,
          column: 24
        },
        end: {
          line: 364,
          column: 55
        }
      },
      "119": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 366,
          column: 35
        }
      },
      "120": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 374,
          column: 17
        }
      },
      "121": {
        start: {
          line: 369,
          column: 20
        },
        end: {
          line: 369,
          column: 89
        }
      },
      "122": {
        start: {
          line: 370,
          column: 20
        },
        end: {
          line: 372,
          column: 23
        }
      },
      "123": {
        start: {
          line: 371,
          column: 24
        },
        end: {
          line: 371,
          column: 55
        }
      },
      "124": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 373,
          column: 35
        }
      },
      "125": {
        start: {
          line: 375,
          column: 16
        },
        end: {
          line: 375,
          column: 86
        }
      },
      "126": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 376,
          column: 30
        }
      },
      "127": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 381,
          column: 17
        }
      },
      "128": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 100
        }
      },
      "129": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 97
        }
      },
      "130": {
        start: {
          line: 391,
          column: 4
        },
        end: {
          line: 391,
          column: 133
        }
      },
      "131": {
        start: {
          line: 396,
          column: 4
        },
        end: {
          line: 396,
          column: 132
        }
      },
      "132": {
        start: {
          line: 401,
          column: 4
        },
        end: {
          line: 401,
          column: 138
        }
      },
      "133": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 405,
          column: 21
        }
      },
      "134": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 21
        }
      },
      "135": {
        start: {
          line: 406,
          column: 14
        },
        end: {
          line: 406,
          column: 18
        }
      },
      "136": {
        start: {
          line: 407,
          column: 18
        },
        end: {
          line: 407,
          column: 41
        }
      },
      "137": {
        start: {
          line: 408,
          column: 14
        },
        end: {
          line: 408,
          column: 55
        }
      },
      "138": {
        start: {
          line: 409,
          column: 4
        },
        end: {
          line: 409,
          column: 76
        }
      }
    },
    fnMap: {
      "0": {
        name: "createSourceControlTools",
        decl: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 33
          }
        },
        loc: {
          start: {
            line: 49,
            column: 53
          },
          end: {
            line: 386,
            column: 1
          }
        },
        line: 49
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 61,
            column: 17
          },
          end: {
            line: 61,
            column: 18
          }
        },
        loc: {
          start: {
            line: 61,
            column: 33
          },
          end: {
            line: 115,
            column: 9
          }
        },
        line: 61
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 128,
            column: 17
          },
          end: {
            line: 128,
            column: 18
          }
        },
        loc: {
          start: {
            line: 128,
            column: 33
          },
          end: {
            line: 172,
            column: 9
          }
        },
        line: 128
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 185,
            column: 17
          },
          end: {
            line: 185,
            column: 18
          }
        },
        loc: {
          start: {
            line: 185,
            column: 33
          },
          end: {
            line: 278,
            column: 9
          }
        },
        line: 185
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 231,
            column: 81
          },
          end: {
            line: 231,
            column: 82
          }
        },
        loc: {
          start: {
            line: 231,
            column: 88
          },
          end: {
            line: 231,
            column: 116
          }
        },
        line: 231
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 267,
            column: 80
          },
          end: {
            line: 267,
            column: 81
          }
        },
        loc: {
          start: {
            line: 267,
            column: 85
          },
          end: {
            line: 267,
            column: 93
          }
        },
        line: 267
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 291,
            column: 17
          },
          end: {
            line: 291,
            column: 18
          }
        },
        loc: {
          start: {
            line: 291,
            column: 33
          },
          end: {
            line: 330,
            column: 9
          }
        },
        line: 291
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 303,
            column: 52
          },
          end: {
            line: 303,
            column: 53
          }
        },
        loc: {
          start: {
            line: 303,
            column: 60
          },
          end: {
            line: 303,
            column: 85
          }
        },
        line: 303
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 304,
            column: 46
          },
          end: {
            line: 304,
            column: 47
          }
        },
        loc: {
          start: {
            line: 304,
            column: 54
          },
          end: {
            line: 304,
            column: 74
          }
        },
        line: 304
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 310,
            column: 40
          },
          end: {
            line: 310,
            column: 41
          }
        },
        loc: {
          start: {
            line: 310,
            column: 47
          },
          end: {
            line: 312,
            column: 21
          }
        },
        line: 310
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 317,
            column: 34
          },
          end: {
            line: 317,
            column: 35
          }
        },
        loc: {
          start: {
            line: 317,
            column: 42
          },
          end: {
            line: 320,
            column: 21
          }
        },
        line: 317
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 343,
            column: 17
          },
          end: {
            line: 343,
            column: 18
          }
        },
        loc: {
          start: {
            line: 343,
            column: 33
          },
          end: {
            line: 384,
            column: 9
          }
        },
        line: 343
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 352,
            column: 52
          },
          end: {
            line: 352,
            column: 53
          }
        },
        loc: {
          start: {
            line: 352,
            column: 60
          },
          end: {
            line: 353,
            column: 108
          }
        },
        line: 352
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 354,
            column: 54
          },
          end: {
            line: 354,
            column: 55
          }
        },
        loc: {
          start: {
            line: 354,
            column: 62
          },
          end: {
            line: 356,
            column: 64
          }
        },
        line: 354
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 363,
            column: 40
          },
          end: {
            line: 363,
            column: 41
          }
        },
        loc: {
          start: {
            line: 363,
            column: 48
          },
          end: {
            line: 365,
            column: 21
          }
        },
        line: 363
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 370,
            column: 42
          },
          end: {
            line: 370,
            column: 43
          }
        },
        loc: {
          start: {
            line: 370,
            column: 50
          },
          end: {
            line: 372,
            column: 21
          }
        },
        line: 370
      },
      "16": {
        name: "fetchFileFromRepository",
        decl: {
          start: {
            line: 388,
            column: 15
          },
          end: {
            line: 388,
            column: 38
          }
        },
        loc: {
          start: {
            line: 388,
            column: 82
          },
          end: {
            line: 392,
            column: 1
          }
        },
        line: 388
      },
      "17": {
        name: "pushFileToRepository",
        decl: {
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 393,
            column: 35
          }
        },
        loc: {
          start: {
            line: 393,
            column: 105
          },
          end: {
            line: 397,
            column: 1
          }
        },
        line: 393
      },
      "18": {
        name: "listRepositoryContents",
        decl: {
          start: {
            line: 398,
            column: 15
          },
          end: {
            line: 398,
            column: 37
          }
        },
        loc: {
          start: {
            line: 398,
            column: 77
          },
          end: {
            line: 402,
            column: 1
          }
        },
        line: 398
      },
      "19": {
        name: "formatBytes",
        decl: {
          start: {
            line: 403,
            column: 9
          },
          end: {
            line: 403,
            column: 20
          }
        },
        loc: {
          start: {
            line: 403,
            column: 28
          },
          end: {
            line: 410,
            column: 1
          }
        },
        line: 403
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "1": {
        loc: {
          start: {
            line: 79,
            column: 83
          },
          end: {
            line: 79,
            column: 157
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 79,
            column: 113
          },
          end: {
            line: 79,
            column: 131
          }
        }, {
          start: {
            line: 79,
            column: 134
          },
          end: {
            line: 79,
            column: 157
          }
        }],
        line: 79
      },
      "2": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 84,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "3": {
        loc: {
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 82,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 82,
            column: 38
          }
        }, {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 82,
            column: 61
          }
        }],
        line: 82
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 88,
            column: 27
          },
          end: {
            line: 88,
            column: 45
          }
        }, {
          start: {
            line: 88,
            column: 49
          },
          end: {
            line: 88,
            column: 51
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 89,
            column: 33
          },
          end: {
            line: 89,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 33
          },
          end: {
            line: 89,
            column: 57
          }
        }, {
          start: {
            line: 89,
            column: 61
          },
          end: {
            line: 89,
            column: 63
          }
        }],
        line: 89
      },
      "6": {
        loc: {
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 43
          }
        }, {
          start: {
            line: 91,
            column: 47
          },
          end: {
            line: 91,
            column: 49
          }
        }],
        line: 91
      },
      "7": {
        loc: {
          start: {
            line: 92,
            column: 30
          },
          end: {
            line: 92,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 30
          },
          end: {
            line: 92,
            column: 51
          }
        }, {
          start: {
            line: 92,
            column: 55
          },
          end: {
            line: 92,
            column: 57
          }
        }],
        line: 92
      },
      "8": {
        loc: {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 98,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "9": {
        loc: {
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 96,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 96,
            column: 20
          },
          end: {
            line: 96,
            column: 33
          }
        }, {
          start: {
            line: 96,
            column: 37
          },
          end: {
            line: 96,
            column: 46
          }
        }],
        line: 96
      },
      "10": {
        loc: {
          start: {
            line: 104,
            column: 33
          },
          end: {
            line: 104,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 49
          },
          end: {
            line: 104,
            column: 57
          }
        }, {
          start: {
            line: 104,
            column: 60
          },
          end: {
            line: 104,
            column: 70
          }
        }],
        line: 104
      },
      "11": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "12": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "13": {
        loc: {
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "14": {
        loc: {
          start: {
            line: 139,
            column: 27
          },
          end: {
            line: 139,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 27
          },
          end: {
            line: 139,
            column: 41
          }
        }, {
          start: {
            line: 139,
            column: 45
          },
          end: {
            line: 139,
            column: 47
          }
        }],
        line: 139
      },
      "15": {
        loc: {
          start: {
            line: 140,
            column: 33
          },
          end: {
            line: 140,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 33
          },
          end: {
            line: 140,
            column: 53
          }
        }, {
          start: {
            line: 140,
            column: 57
          },
          end: {
            line: 140,
            column: 59
          }
        }],
        line: 140
      },
      "16": {
        loc: {
          start: {
            line: 141,
            column: 26
          },
          end: {
            line: 141,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 26
          },
          end: {
            line: 141,
            column: 39
          }
        }, {
          start: {
            line: 141,
            column: 43
          },
          end: {
            line: 141,
            column: 45
          }
        }],
        line: 141
      },
      "17": {
        loc: {
          start: {
            line: 142,
            column: 30
          },
          end: {
            line: 142,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 142,
            column: 30
          },
          end: {
            line: 142,
            column: 47
          }
        }, {
          start: {
            line: 142,
            column: 51
          },
          end: {
            line: 142,
            column: 53
          }
        }],
        line: 142
      },
      "18": {
        loc: {
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 16
          },
          end: {
            line: 166,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "19": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 169,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "20": {
        loc: {
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 12
          },
          end: {
            line: 189,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 88
          },
          end: {
            line: 202,
            column: 162
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 118
          },
          end: {
            line: 202,
            column: 136
          }
        }, {
          start: {
            line: 202,
            column: 139
          },
          end: {
            line: 202,
            column: 162
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 16
          },
          end: {
            line: 218,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "23": {
        loc: {
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 49
          },
          end: {
            line: 214,
            column: 73
          }
        }, {
          start: {
            line: 214,
            column: 77
          },
          end: {
            line: 214,
            column: 78
          }
        }],
        line: 214
      },
      "24": {
        loc: {
          start: {
            line: 215,
            column: 51
          },
          end: {
            line: 215,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 215,
            column: 51
          },
          end: {
            line: 215,
            column: 77
          }
        }, {
          start: {
            line: 215,
            column: 81
          },
          end: {
            line: 215,
            column: 82
          }
        }],
        line: 215
      },
      "25": {
        loc: {
          start: {
            line: 216,
            column: 49
          },
          end: {
            line: 216,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 49
          },
          end: {
            line: 216,
            column: 73
          }
        }, {
          start: {
            line: 216,
            column: 77
          },
          end: {
            line: 216,
            column: 78
          }
        }],
        line: 216
      },
      "26": {
        loc: {
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 220,
            column: 16
          },
          end: {
            line: 247,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 220
      },
      "27": {
        loc: {
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 220,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 220,
            column: 20
          },
          end: {
            line: 220,
            column: 36
          }
        }, {
          start: {
            line: 220,
            column: 40
          },
          end: {
            line: 220,
            column: 71
          }
        }],
        line: 220
      },
      "28": {
        loc: {
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 241,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 241,
            column: 29
          }
        }, {
          start: {
            line: 237,
            column: 33
          },
          end: {
            line: 241,
            column: 29
          }
        }],
        line: 232
      },
      "29": {
        loc: {
          start: {
            line: 244,
            column: 76
          },
          end: {
            line: 244,
            column: 132
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 101
          },
          end: {
            line: 244,
            column: 114
          }
        }, {
          start: {
            line: 244,
            column: 117
          },
          end: {
            line: 244,
            column: 132
          }
        }],
        line: 244
      },
      "30": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "31": {
        loc: {
          start: {
            line: 249,
            column: 20
          },
          end: {
            line: 249,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 249,
            column: 20
          },
          end: {
            line: 249,
            column: 38
          }
        }, {
          start: {
            line: 249,
            column: 42
          },
          end: {
            line: 249,
            column: 75
          }
        }],
        line: 249
      },
      "32": {
        loc: {
          start: {
            line: 257,
            column: 87
          },
          end: {
            line: 257,
            column: 143
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 112
          },
          end: {
            line: 257,
            column: 125
          }
        }, {
          start: {
            line: 257,
            column: 128
          },
          end: {
            line: 257,
            column: 143
          }
        }],
        line: 257
      },
      "33": {
        loc: {
          start: {
            line: 267,
            column: 21
          },
          end: {
            line: 267,
            column: 112
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 48
          },
          end: {
            line: 267,
            column: 107
          }
        }, {
          start: {
            line: 267,
            column: 110
          },
          end: {
            line: 267,
            column: 112
          }
        }],
        line: 267
      },
      "34": {
        loc: {
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 16
          },
          end: {
            line: 272,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "35": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "36": {
        loc: {
          start: {
            line: 298,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "37": {
        loc: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 314,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 314,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 308
      },
      "38": {
        loc: {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 321,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 321,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "39": {
        loc: {
          start: {
            line: 318,
            column: 37
          },
          end: {
            line: 318,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 49
          },
          end: {
            line: 318,
            column: 79
          }
        }, {
          start: {
            line: 318,
            column: 82
          },
          end: {
            line: 318,
            column: 84
          }
        }],
        line: 318
      },
      "40": {
        loc: {
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "41": {
        loc: {
          start: {
            line: 352,
            column: 60
          },
          end: {
            line: 353,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 60
          },
          end: {
            line: 352,
            column: 80
          }
        }, {
          start: {
            line: 353,
            column: 21
          },
          end: {
            line: 353,
            column: 46
          }
        }, {
          start: {
            line: 353,
            column: 50
          },
          end: {
            line: 353,
            column: 77
          }
        }, {
          start: {
            line: 353,
            column: 81
          },
          end: {
            line: 353,
            column: 107
          }
        }],
        line: 352
      },
      "42": {
        loc: {
          start: {
            line: 354,
            column: 62
          },
          end: {
            line: 356,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 354,
            column: 62
          },
          end: {
            line: 354,
            column: 82
          }
        }, {
          start: {
            line: 355,
            column: 20
          },
          end: {
            line: 355,
            column: 47
          }
        }, {
          start: {
            line: 356,
            column: 20
          },
          end: {
            line: 356,
            column: 64
          }
        }],
        line: 354
      },
      "43": {
        loc: {
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 367,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 16
          },
          end: {
            line: 367,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "44": {
        loc: {
          start: {
            line: 368,
            column: 16
          },
          end: {
            line: 374,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 16
          },
          end: {
            line: 374,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "45": {
        loc: {
          start: {
            line: 379,
            column: 16
          },
          end: {
            line: 381,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 379,
            column: 16
          },
          end: {
            line: 381,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 379
      },
      "46": {
        loc: {
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 405,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 4
          },
          end: {
            line: 405,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0, 0],
      "42": [0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/source-control.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/source-control.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\nconst GitRepositorySchema = z.object({\n  url: z.string().url('Valid Git repository URL is required'),\n  branch: z.string().min(1, 'Branch name is required').default('main'),\n  token: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n});\n\nconst ImportWorkflowFromGitSchema = z.object({\n  repositoryUrl: z.string().url('Valid Git repository URL is required'),\n  workflowPath: z.string().min(1, 'Workflow file path is required'),\n  branch: z.string().default('main'),\n  token: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n  activate: z.boolean().default(false),\n});\n\nconst ExportWorkflowToGitSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  repositoryUrl: z.string().url('Valid Git repository URL is required'),\n  filePath: z.string().min(1, 'File path in repository is required'),\n  branch: z.string().default('main'),\n  commitMessage: z.string().min(1, 'Commit message is required'),\n  token: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n});\n\nconst SyncFromRepositorySchema = z.object({\n  repositoryUrl: z.string().url('Valid Git repository URL is required'),\n  configPath: z.string().default('n8n-config.json'),\n  branch: z.string().default('main'),\n  token: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n  dryRun: z.boolean().default(false),\n});\n\nconst ListRepositoryContentsSchema = z.object({\n  repositoryUrl: z.string().url('Valid Git repository URL is required'),\n  path: z.string().default(''),\n  branch: z.string().default('main'),\n  token: z.string().optional(),\n  username: z.string().optional(),\n  password: z.string().optional(),\n});\n\ninterface GitAuthOptions {\n  token?: string;\n  username?: string;\n  password?: string;\n}\n\ninterface RepositoryContent {\n  name: string;\n  path: string;\n  type: 'file' | 'directory';\n  size?: number;\n  content?: string;\n}\n\ninterface SyncResult {\n  workflowsImported: number;\n  workflowsUpdated: number;\n  credentialsImported: number;\n  variablesImported: number;\n  errors: string[];\n}\n\nexport function createSourceControlTools(getClient: () => N8nClient | null, server: any) {\n  server.addTool({\n    name: 'import-workflow-from-git',\n    description: 'Import a workflow from a Git repository into n8n',\n    parameters: ImportWorkflowFromGitSchema,\n    annotations: {\n      title: 'Import Workflow from Git Repository',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ImportWorkflowFromGitSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Fetch workflow file from Git repository\n        const workflowContent = await fetchFileFromRepository(\n          args.repositoryUrl,\n          args.workflowPath,\n          args.branch,\n          {\n            token: args.token,\n            username: args.username,\n            password: args.password,\n          }\n        );\n\n        // Parse workflow JSON\n        let workflowData: N8nWorkflow;\n        try {\n          workflowData = JSON.parse(workflowContent);\n        } catch (parseError) {\n          throw new UserError(`Invalid workflow JSON format: ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`);\n        }\n\n        // Validate workflow structure\n        if (!workflowData.name || !workflowData.nodes) {\n          throw new UserError('Invalid workflow structure: missing required fields (name, nodes)');\n        }\n\n        // Create workflow in n8n\n        const createData = {\n          name: workflowData.name,\n          nodes: workflowData.nodes || [],\n          connections: workflowData.connections || {},\n          active: args.activate,\n          tags: workflowData.tags || [],\n          settings: workflowData.settings || {},\n        };\n\n        const result = await client.createWorkflow(createData);\n\n        // Activate if requested\n        if (args.activate && result.id) {\n          await client.activateWorkflow(result.id);\n        }\n\n        return `\u2705 Successfully imported workflow \"${workflowData.name}\" from Git repository\\n` +\n               `\uD83D\uDCCB Workflow ID: ${result.id}\\n` +\n               `\uD83C\uDF10 Repository: ${args.repositoryUrl}\\n` +\n               `\uD83D\uDCC1 Path: ${args.workflowPath}\\n` +\n               `\uD83C\uDF3F Branch: ${args.branch}\\n` +\n               `\u26A1 Status: ${args.activate ? 'Active' : 'Inactive'}`;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        if (error instanceof Error) {\n          throw new UserError(`Failed to import workflow from Git: ${error.message}`);\n        }\n        throw new UserError('Failed to import workflow from Git with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'export-workflow-to-git',\n    description: 'Export a workflow from n8n to a Git repository',\n    parameters: ExportWorkflowToGitSchema,\n    annotations: {\n      title: 'Export Workflow to Git Repository',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportWorkflowToGitSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Get workflow from n8n\n        const workflow = await client.getWorkflow(args.workflowId);\n        \n        // Prepare export data (remove runtime fields)\n        const exportData = {\n          name: workflow.name,\n          nodes: workflow.nodes || [],\n          connections: workflow.connections || {},\n          tags: workflow.tags || [],\n          settings: workflow.settings || {},\n          meta: {\n            exportedAt: new Date().toISOString(),\n            exportedBy: 'n8n-mcp-server',\n            version: '1.0',\n          },\n        };\n\n        const workflowJson = JSON.stringify(exportData, null, 2);\n\n        // Push to Git repository\n        await pushFileToRepository(\n          args.repositoryUrl,\n          args.filePath,\n          workflowJson,\n          args.commitMessage,\n          args.branch,\n          {\n            token: args.token,\n            username: args.username,\n            password: args.password,\n          }\n        );\n\n        return `\u2705 Successfully exported workflow \"${workflow.name}\" to Git repository\\n` +\n               `\uD83D\uDCCB Workflow ID: ${args.workflowId}\\n` +\n               `\uD83C\uDF10 Repository: ${args.repositoryUrl}\\n` +\n               `\uD83D\uDCC1 File Path: ${args.filePath}\\n` +\n               `\uD83C\uDF3F Branch: ${args.branch}\\n` +\n               `\uD83D\uDCAC Commit: ${args.commitMessage}`;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export workflow to Git: ${error.message}`);\n        }\n        throw new UserError('Failed to export workflow to Git with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'sync-from-repository',\n    description: 'Sync workflows and configurations from a Git repository to n8n',\n    parameters: SyncFromRepositorySchema,\n    annotations: {\n      title: 'Sync from Git Repository',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof SyncFromRepositorySchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Fetch configuration file from repository\n        const configContent = await fetchFileFromRepository(\n          args.repositoryUrl,\n          args.configPath,\n          args.branch,\n          {\n            token: args.token,\n            username: args.username,\n            password: args.password,\n          }\n        );\n\n        let config: any;\n        try {\n          config = JSON.parse(configContent);\n        } catch (parseError) {\n          throw new UserError(`Invalid configuration JSON format: ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`);\n        }\n\n        const result: SyncResult = {\n          workflowsImported: 0,\n          workflowsUpdated: 0,\n          credentialsImported: 0,\n          variablesImported: 0,\n          errors: [],\n        };\n\n        if (args.dryRun) {\n          return `\uD83D\uDD0D Dry run completed for repository sync\\n` +\n                 `\uD83D\uDCC2 Config found: ${args.configPath}\\n` +\n                 `\uD83D\uDCCB Workflows to sync: ${config.workflows?.length || 0}\\n` +\n                 `\uD83D\uDD11 Credentials to sync: ${config.credentials?.length || 0}\\n` +\n                 `\uD83D\uDCDD Variables to sync: ${config.variables?.length || 0}\\n` +\n                 `\u26A0\uFE0F Use dryRun: false to perform actual sync`;\n        }\n\n        // Sync workflows\n        if (config.workflows && Array.isArray(config.workflows)) {\n          for (const workflowPath of config.workflows) {\n            try {\n              const workflowContent = await fetchFileFromRepository(\n                args.repositoryUrl,\n                workflowPath,\n                args.branch,\n                {\n                  token: args.token,\n                  username: args.username,\n                  password: args.password,\n                }\n              );\n\n              const workflowData = JSON.parse(workflowContent);\n              \n              // Check if workflow exists\n              const existingWorkflows = await client.getWorkflows({ limit: 100 });\n              const existingWorkflow = existingWorkflows.data.find((w: N8nWorkflow) => w.name === workflowData.name);\n\n              if (existingWorkflow) {\n                // Update existing workflow\n                await client.updateWorkflow(existingWorkflow.id, workflowData);\n                result.workflowsUpdated++;\n              } else {\n                // Create new workflow\n                await client.createWorkflow(workflowData);\n                result.workflowsImported++;\n              }\n            } catch (error) {\n              result.errors.push(`Workflow ${workflowPath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n          }\n        }\n\n        // Sync credentials (if supported)\n        if (config.credentials && Array.isArray(config.credentials)) {\n          for (const credentialConfig of config.credentials) {\n            try {\n              // Note: Credential sync would require secure handling\n              // This is a placeholder for the implementation\n              result.credentialsImported++;\n            } catch (error) {\n              result.errors.push(`Credential ${credentialConfig.name}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n          }\n        }\n\n        return `\u2705 Repository sync completed\\n` +\n               `\uD83D\uDCCB Workflows imported: ${result.workflowsImported}\\n` +\n               `\uD83D\uDCDD Workflows updated: ${result.workflowsUpdated}\\n` +\n               `\uD83D\uDD11 Credentials imported: ${result.credentialsImported}\\n` +\n               `\uD83D\uDCCA Variables imported: ${result.variablesImported}\\n` +\n               `\u274C Errors: ${result.errors.length}\\n` +\n               (result.errors.length > 0 ? `\\nErrors:\\n${result.errors.map(e => `\u2022 ${e}`).join('\\n')}` : '');\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        if (error instanceof Error) {\n          throw new UserError(`Failed to sync from repository: ${error.message}`);\n        }\n        throw new UserError('Failed to sync from repository with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'list-repository-contents',\n    description: 'List contents of a Git repository directory',\n    parameters: ListRepositoryContentsSchema,\n    annotations: {\n      title: 'List Git Repository Contents',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListRepositoryContentsSchema>) => {\n      try {\n        const contents = await listRepositoryContents(\n          args.repositoryUrl,\n          args.path,\n          args.branch,\n          {\n            token: args.token,\n            username: args.username,\n            password: args.password,\n          }\n        );\n\n        if (contents.length === 0) {\n          return `\uD83D\uDCC2 Repository directory \"${args.path}\" is empty\\n` +\n                 `\uD83C\uDF10 Repository: ${args.repositoryUrl}\\n` +\n                 `\uD83C\uDF3F Branch: ${args.branch}`;\n        }\n\n        const directories = contents.filter(item => item.type === 'directory');\n        const files = contents.filter(item => item.type === 'file');\n\n        let result = `\uD83D\uDCC2 Repository contents for \"${args.path}\"\\n` +\n                    `\uD83C\uDF10 Repository: ${args.repositoryUrl}\\n` +\n                    `\uD83C\uDF3F Branch: ${args.branch}\\n\\n`;\n\n        if (directories.length > 0) {\n          result += `\uD83D\uDCC1 Directories (${directories.length}):\\n`;\n          directories.forEach(dir => {\n            result += `  \u2022 ${dir.name}/\\n`;\n          });\n          result += '\\n';\n        }\n\n        if (files.length > 0) {\n          result += `\uD83D\uDCC4 Files (${files.length}):\\n`;\n          files.forEach(file => {\n            const size = file.size ? ` (${formatBytes(file.size)})` : '';\n            result += `  \u2022 ${file.name}${size}\\n`;\n          });\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list repository contents: ${error.message}`);\n        }\n        throw new UserError('Failed to list repository contents with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'validate-git-repository',\n    description: 'Validate access to a Git repository and check for n8n configuration',\n    parameters: GitRepositorySchema,\n    annotations: {\n      title: 'Validate Git Repository',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof GitRepositorySchema>) => {\n      try {\n        // Test repository access\n        const contents = await listRepositoryContents(\n          args.url,\n          '',\n          args.branch,\n          {\n            token: args.token,\n            username: args.username,\n            password: args.password,\n          }\n        );\n\n        // Check for n8n configuration files\n        const configFiles = contents.filter(item => \n          item.type === 'file' && \n          (item.name.includes('n8n') || item.name.endsWith('.json') || item.name.endsWith('.yml'))\n        );\n\n        const workflowFiles = contents.filter(item =>\n          item.type === 'file' &&\n          item.name.endsWith('.json') &&\n          item.name.toLowerCase().includes('workflow')\n        );\n\n        let result = `\u2705 Git repository validation successful\\n` +\n                    `\uD83C\uDF10 Repository: ${args.url}\\n` +\n                    `\uD83C\uDF3F Branch: ${args.branch}\\n` +\n                    `\uD83D\uDCC1 Total items: ${contents.length}\\n\\n`;\n\n        if (configFiles.length > 0) {\n          result += `\u2699\uFE0F Configuration files found (${configFiles.length}):\\n`;\n          configFiles.forEach(file => {\n            result += `  \u2022 ${file.name}\\n`;\n          });\n          result += '\\n';\n        }\n\n        if (workflowFiles.length > 0) {\n          result += `\uD83D\uDCCB Potential workflow files (${workflowFiles.length}):\\n`;\n          workflowFiles.forEach(file => {\n            result += `  \u2022 ${file.name}\\n`;\n          });\n          result += '\\n';\n        }\n\n        result += `\uD83D\uDD17 Repository is accessible and ready for n8n integration`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Repository validation failed: ${error.message}`);\n        }\n        throw new UserError('Repository validation failed with unknown error');\n      }\n    },\n  });\n}\n\n// Helper functions for Git operations\n \nasync function fetchFileFromRepository(\n  _repositoryUrl: string,\n  _filePath: string,\n  _branch: string,\n  _auth: GitAuthOptions\n): Promise<string> {\n  // This is a simplified implementation\n  // In a real implementation, you would use the GitHub API or similar\n  throw new UserError('Git file fetching not yet implemented. This requires integration with Git hosting service APIs.');\n}\n\n \nasync function pushFileToRepository(\n  _repositoryUrl: string,\n  _filePath: string,\n  _content: string,\n  _commitMessage: string,\n  _branch: string,\n  _auth: GitAuthOptions\n): Promise<void> {\n  // This is a simplified implementation\n  // In a real implementation, you would use the GitHub API or similar\n  throw new UserError('Git file pushing not yet implemented. This requires integration with Git hosting service APIs.');\n}\n\n \nasync function listRepositoryContents(\n  _repositoryUrl: string,\n  _path: string,\n  _branch: string,\n  _auth: GitAuthOptions\n): Promise<RepositoryContent[]> {\n  // This is a simplified implementation\n  // In a real implementation, you would use the GitHub API or similar\n  throw new UserError('Git repository listing not yet implemented. This requires integration with Git hosting service APIs.');\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b4ac5890ed96d2a9e2f9216134efba7e94d6f81b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_o7lkfwp7x = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_o7lkfwp7x();
cov_o7lkfwp7x().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_o7lkfwp7x().s[1]++;
exports.createSourceControlTools = createSourceControlTools;
const zod_1 =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[3]++, require("fastmcp"));
const GitRepositorySchema =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[4]++, zod_1.z.object({
  url: zod_1.z.string().url('Valid Git repository URL is required'),
  branch: zod_1.z.string().min(1, 'Branch name is required').default('main'),
  token: zod_1.z.string().optional(),
  username: zod_1.z.string().optional(),
  password: zod_1.z.string().optional()
}));
const ImportWorkflowFromGitSchema =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[5]++, zod_1.z.object({
  repositoryUrl: zod_1.z.string().url('Valid Git repository URL is required'),
  workflowPath: zod_1.z.string().min(1, 'Workflow file path is required'),
  branch: zod_1.z.string().default('main'),
  token: zod_1.z.string().optional(),
  username: zod_1.z.string().optional(),
  password: zod_1.z.string().optional(),
  activate: zod_1.z.boolean().default(false)
}));
const ExportWorkflowToGitSchema =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[6]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  repositoryUrl: zod_1.z.string().url('Valid Git repository URL is required'),
  filePath: zod_1.z.string().min(1, 'File path in repository is required'),
  branch: zod_1.z.string().default('main'),
  commitMessage: zod_1.z.string().min(1, 'Commit message is required'),
  token: zod_1.z.string().optional(),
  username: zod_1.z.string().optional(),
  password: zod_1.z.string().optional()
}));
const SyncFromRepositorySchema =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[7]++, zod_1.z.object({
  repositoryUrl: zod_1.z.string().url('Valid Git repository URL is required'),
  configPath: zod_1.z.string().default('n8n-config.json'),
  branch: zod_1.z.string().default('main'),
  token: zod_1.z.string().optional(),
  username: zod_1.z.string().optional(),
  password: zod_1.z.string().optional(),
  dryRun: zod_1.z.boolean().default(false)
}));
const ListRepositoryContentsSchema =
/* istanbul ignore next */
(cov_o7lkfwp7x().s[8]++, zod_1.z.object({
  repositoryUrl: zod_1.z.string().url('Valid Git repository URL is required'),
  path: zod_1.z.string().default(''),
  branch: zod_1.z.string().default('main'),
  token: zod_1.z.string().optional(),
  username: zod_1.z.string().optional(),
  password: zod_1.z.string().optional()
}));
function createSourceControlTools(getClient, server) {
  /* istanbul ignore next */
  cov_o7lkfwp7x().f[0]++;
  cov_o7lkfwp7x().s[9]++;
  server.addTool({
    name: 'import-workflow-from-git',
    description: 'Import a workflow from a Git repository into n8n',
    parameters: ImportWorkflowFromGitSchema,
    annotations: {
      title: 'Import Workflow from Git Repository',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_o7lkfwp7x().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_o7lkfwp7x().s[10]++, getClient());
      /* istanbul ignore next */
      cov_o7lkfwp7x().s[11]++;
      if (!client) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().b[0][0]++;
        cov_o7lkfwp7x().s[12]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_o7lkfwp7x().b[0][1]++;
      }
      cov_o7lkfwp7x().s[13]++;
      try {
        // Fetch workflow file from Git repository
        const workflowContent =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[14]++, await fetchFileFromRepository(args.repositoryUrl, args.workflowPath, args.branch, {
          token: args.token,
          username: args.username,
          password: args.password
        }));
        // Parse workflow JSON
        let workflowData;
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[15]++;
        try {
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[16]++;
          workflowData = JSON.parse(workflowContent);
        } catch (parseError) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[17]++;
          throw new fastmcp_1.UserError(`Invalid workflow JSON format: ${parseError instanceof Error ?
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[1][0]++, parseError.message) :
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[1][1]++, 'Unknown parsing error')}`);
        }
        // Validate workflow structure
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[18]++;
        if (
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[3][0]++, !workflowData.name) ||
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[3][1]++, !workflowData.nodes)) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[2][0]++;
          cov_o7lkfwp7x().s[19]++;
          throw new fastmcp_1.UserError('Invalid workflow structure: missing required fields (name, nodes)');
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[2][1]++;
        }
        // Create workflow in n8n
        const createData =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[20]++, {
          name: workflowData.name,
          nodes:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[4][0]++, workflowData.nodes) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[4][1]++, []),
          connections:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[5][0]++, workflowData.connections) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[5][1]++, {}),
          active: args.activate,
          tags:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[6][0]++, workflowData.tags) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[6][1]++, []),
          settings:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[7][0]++, workflowData.settings) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[7][1]++, {})
        });
        const result =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[21]++, await client.createWorkflow(createData));
        // Activate if requested
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[22]++;
        if (
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[9][0]++, args.activate) &&
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[9][1]++, result.id)) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[8][0]++;
          cov_o7lkfwp7x().s[23]++;
          await client.activateWorkflow(result.id);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[8][1]++;
        }
        cov_o7lkfwp7x().s[24]++;
        return `✅ Successfully imported workflow "${workflowData.name}" from Git repository\n` + `📋 Workflow ID: ${result.id}\n` + `🌐 Repository: ${args.repositoryUrl}\n` + `📁 Path: ${args.workflowPath}\n` + `🌿 Branch: ${args.branch}\n` + `⚡ Status: ${args.activate ?
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[10][0]++, 'Active') :
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[10][1]++, 'Inactive')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[25]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[11][0]++;
          cov_o7lkfwp7x().s[26]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[11][1]++;
        }
        cov_o7lkfwp7x().s[27]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[12][0]++;
          cov_o7lkfwp7x().s[28]++;
          throw new fastmcp_1.UserError(`Failed to import workflow from Git: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[12][1]++;
        }
        cov_o7lkfwp7x().s[29]++;
        throw new fastmcp_1.UserError('Failed to import workflow from Git with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_o7lkfwp7x().s[30]++;
  server.addTool({
    name: 'export-workflow-to-git',
    description: 'Export a workflow from n8n to a Git repository',
    parameters: ExportWorkflowToGitSchema,
    annotations: {
      title: 'Export Workflow to Git Repository',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_o7lkfwp7x().f[2]++;
      const client =
      /* istanbul ignore next */
      (cov_o7lkfwp7x().s[31]++, getClient());
      /* istanbul ignore next */
      cov_o7lkfwp7x().s[32]++;
      if (!client) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().b[13][0]++;
        cov_o7lkfwp7x().s[33]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_o7lkfwp7x().b[13][1]++;
      }
      cov_o7lkfwp7x().s[34]++;
      try {
        // Get workflow from n8n
        const workflow =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[35]++, await client.getWorkflow(args.workflowId));
        // Prepare export data (remove runtime fields)
        const exportData =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[36]++, {
          name: workflow.name,
          nodes:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[14][0]++, workflow.nodes) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[14][1]++, []),
          connections:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[15][0]++, workflow.connections) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[15][1]++, {}),
          tags:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[16][0]++, workflow.tags) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[16][1]++, []),
          settings:
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[17][0]++, workflow.settings) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[17][1]++, {}),
          meta: {
            exportedAt: new Date().toISOString(),
            exportedBy: 'n8n-mcp-server',
            version: '1.0'
          }
        });
        const workflowJson =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[37]++, JSON.stringify(exportData, null, 2));
        // Push to Git repository
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[38]++;
        await pushFileToRepository(args.repositoryUrl, args.filePath, workflowJson, args.commitMessage, args.branch, {
          token: args.token,
          username: args.username,
          password: args.password
        });
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[39]++;
        return `✅ Successfully exported workflow "${workflow.name}" to Git repository\n` + `📋 Workflow ID: ${args.workflowId}\n` + `🌐 Repository: ${args.repositoryUrl}\n` + `📁 File Path: ${args.filePath}\n` + `🌿 Branch: ${args.branch}\n` + `💬 Commit: ${args.commitMessage}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[40]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[18][0]++;
          cov_o7lkfwp7x().s[41]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[18][1]++;
        }
        cov_o7lkfwp7x().s[42]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[19][0]++;
          cov_o7lkfwp7x().s[43]++;
          throw new fastmcp_1.UserError(`Failed to export workflow to Git: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[19][1]++;
        }
        cov_o7lkfwp7x().s[44]++;
        throw new fastmcp_1.UserError('Failed to export workflow to Git with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_o7lkfwp7x().s[45]++;
  server.addTool({
    name: 'sync-from-repository',
    description: 'Sync workflows and configurations from a Git repository to n8n',
    parameters: SyncFromRepositorySchema,
    annotations: {
      title: 'Sync from Git Repository',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_o7lkfwp7x().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_o7lkfwp7x().s[46]++, getClient());
      /* istanbul ignore next */
      cov_o7lkfwp7x().s[47]++;
      if (!client) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().b[20][0]++;
        cov_o7lkfwp7x().s[48]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_o7lkfwp7x().b[20][1]++;
      }
      cov_o7lkfwp7x().s[49]++;
      try {
        // Fetch configuration file from repository
        const configContent =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[50]++, await fetchFileFromRepository(args.repositoryUrl, args.configPath, args.branch, {
          token: args.token,
          username: args.username,
          password: args.password
        }));
        let config;
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[51]++;
        try {
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[52]++;
          config = JSON.parse(configContent);
        } catch (parseError) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[53]++;
          throw new fastmcp_1.UserError(`Invalid configuration JSON format: ${parseError instanceof Error ?
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[21][0]++, parseError.message) :
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[21][1]++, 'Unknown parsing error')}`);
        }
        const result =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[54]++, {
          workflowsImported: 0,
          workflowsUpdated: 0,
          credentialsImported: 0,
          variablesImported: 0,
          errors: []
        });
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[55]++;
        if (args.dryRun) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[22][0]++;
          cov_o7lkfwp7x().s[56]++;
          return `🔍 Dry run completed for repository sync\n` + `📂 Config found: ${args.configPath}\n` + `📋 Workflows to sync: ${
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[23][0]++, config.workflows?.length) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[23][1]++, 0)}\n` + `🔑 Credentials to sync: ${
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[24][0]++, config.credentials?.length) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[24][1]++, 0)}\n` + `📝 Variables to sync: ${
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[25][0]++, config.variables?.length) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[25][1]++, 0)}\n` + `⚠️ Use dryRun: false to perform actual sync`;
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[22][1]++;
        }
        // Sync workflows
        cov_o7lkfwp7x().s[57]++;
        if (
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[27][0]++, config.workflows) &&
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[27][1]++, Array.isArray(config.workflows))) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[26][0]++;
          cov_o7lkfwp7x().s[58]++;
          for (const workflowPath of config.workflows) {
            /* istanbul ignore next */
            cov_o7lkfwp7x().s[59]++;
            try {
              const workflowContent =
              /* istanbul ignore next */
              (cov_o7lkfwp7x().s[60]++, await fetchFileFromRepository(args.repositoryUrl, workflowPath, args.branch, {
                token: args.token,
                username: args.username,
                password: args.password
              }));
              const workflowData =
              /* istanbul ignore next */
              (cov_o7lkfwp7x().s[61]++, JSON.parse(workflowContent));
              // Check if workflow exists
              const existingWorkflows =
              /* istanbul ignore next */
              (cov_o7lkfwp7x().s[62]++, await client.getWorkflows({
                limit: 100
              }));
              const existingWorkflow =
              /* istanbul ignore next */
              (cov_o7lkfwp7x().s[63]++, existingWorkflows.data.find(w => {
                /* istanbul ignore next */
                cov_o7lkfwp7x().f[4]++;
                cov_o7lkfwp7x().s[64]++;
                return w.name === workflowData.name;
              }));
              /* istanbul ignore next */
              cov_o7lkfwp7x().s[65]++;
              if (existingWorkflow) {
                /* istanbul ignore next */
                cov_o7lkfwp7x().b[28][0]++;
                cov_o7lkfwp7x().s[66]++;
                // Update existing workflow
                await client.updateWorkflow(existingWorkflow.id, workflowData);
                /* istanbul ignore next */
                cov_o7lkfwp7x().s[67]++;
                result.workflowsUpdated++;
              } else {
                /* istanbul ignore next */
                cov_o7lkfwp7x().b[28][1]++;
                cov_o7lkfwp7x().s[68]++;
                // Create new workflow
                await client.createWorkflow(workflowData);
                /* istanbul ignore next */
                cov_o7lkfwp7x().s[69]++;
                result.workflowsImported++;
              }
            } catch (error) {
              /* istanbul ignore next */
              cov_o7lkfwp7x().s[70]++;
              result.errors.push(`Workflow ${workflowPath}: ${error instanceof Error ?
              /* istanbul ignore next */
              (cov_o7lkfwp7x().b[29][0]++, error.message) :
              /* istanbul ignore next */
              (cov_o7lkfwp7x().b[29][1]++, 'Unknown error')}`);
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[26][1]++;
        }
        // Sync credentials (if supported)
        cov_o7lkfwp7x().s[71]++;
        if (
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[31][0]++, config.credentials) &&
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[31][1]++, Array.isArray(config.credentials))) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[30][0]++;
          cov_o7lkfwp7x().s[72]++;
          for (const credentialConfig of config.credentials) {
            /* istanbul ignore next */
            cov_o7lkfwp7x().s[73]++;
            try {
              /* istanbul ignore next */
              cov_o7lkfwp7x().s[74]++;
              // Note: Credential sync would require secure handling
              // This is a placeholder for the implementation
              result.credentialsImported++;
            } catch (error) {
              /* istanbul ignore next */
              cov_o7lkfwp7x().s[75]++;
              result.errors.push(`Credential ${credentialConfig.name}: ${error instanceof Error ?
              /* istanbul ignore next */
              (cov_o7lkfwp7x().b[32][0]++, error.message) :
              /* istanbul ignore next */
              (cov_o7lkfwp7x().b[32][1]++, 'Unknown error')}`);
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[30][1]++;
        }
        cov_o7lkfwp7x().s[76]++;
        return `✅ Repository sync completed\n` + `📋 Workflows imported: ${result.workflowsImported}\n` + `📝 Workflows updated: ${result.workflowsUpdated}\n` + `🔑 Credentials imported: ${result.credentialsImported}\n` + `📊 Variables imported: ${result.variablesImported}\n` + `❌ Errors: ${result.errors.length}\n` + (result.errors.length > 0 ?
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[33][0]++, `\nErrors:\n${result.errors.map(e => {
          /* istanbul ignore next */
          cov_o7lkfwp7x().f[5]++;
          cov_o7lkfwp7x().s[77]++;
          return `• ${e}`;
        }).join('\n')}`) :
        /* istanbul ignore next */
        (cov_o7lkfwp7x().b[33][1]++, ''));
      } catch (error) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[78]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[34][0]++;
          cov_o7lkfwp7x().s[79]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[34][1]++;
        }
        cov_o7lkfwp7x().s[80]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[35][0]++;
          cov_o7lkfwp7x().s[81]++;
          throw new fastmcp_1.UserError(`Failed to sync from repository: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[35][1]++;
        }
        cov_o7lkfwp7x().s[82]++;
        throw new fastmcp_1.UserError('Failed to sync from repository with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_o7lkfwp7x().s[83]++;
  server.addTool({
    name: 'list-repository-contents',
    description: 'List contents of a Git repository directory',
    parameters: ListRepositoryContentsSchema,
    annotations: {
      title: 'List Git Repository Contents',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_o7lkfwp7x().f[6]++;
      cov_o7lkfwp7x().s[84]++;
      try {
        const contents =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[85]++, await listRepositoryContents(args.repositoryUrl, args.path, args.branch, {
          token: args.token,
          username: args.username,
          password: args.password
        }));
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[86]++;
        if (contents.length === 0) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[36][0]++;
          cov_o7lkfwp7x().s[87]++;
          return `📂 Repository directory "${args.path}" is empty\n` + `🌐 Repository: ${args.repositoryUrl}\n` + `🌿 Branch: ${args.branch}`;
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[36][1]++;
        }
        const directories =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[88]++, contents.filter(item => {
          /* istanbul ignore next */
          cov_o7lkfwp7x().f[7]++;
          cov_o7lkfwp7x().s[89]++;
          return item.type === 'directory';
        }));
        const files =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[90]++, contents.filter(item => {
          /* istanbul ignore next */
          cov_o7lkfwp7x().f[8]++;
          cov_o7lkfwp7x().s[91]++;
          return item.type === 'file';
        }));
        let result =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[92]++, `📂 Repository contents for "${args.path}"\n` + `🌐 Repository: ${args.repositoryUrl}\n` + `🌿 Branch: ${args.branch}\n\n`);
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[93]++;
        if (directories.length > 0) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[37][0]++;
          cov_o7lkfwp7x().s[94]++;
          result += `📁 Directories (${directories.length}):\n`;
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[95]++;
          directories.forEach(dir => {
            /* istanbul ignore next */
            cov_o7lkfwp7x().f[9]++;
            cov_o7lkfwp7x().s[96]++;
            result += `  • ${dir.name}/\n`;
          });
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[97]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[37][1]++;
        }
        cov_o7lkfwp7x().s[98]++;
        if (files.length > 0) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[38][0]++;
          cov_o7lkfwp7x().s[99]++;
          result += `📄 Files (${files.length}):\n`;
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[100]++;
          files.forEach(file => {
            /* istanbul ignore next */
            cov_o7lkfwp7x().f[10]++;
            const size =
            /* istanbul ignore next */
            (cov_o7lkfwp7x().s[101]++, file.size ?
            /* istanbul ignore next */
            (cov_o7lkfwp7x().b[39][0]++, ` (${formatBytes(file.size)})`) :
            /* istanbul ignore next */
            (cov_o7lkfwp7x().b[39][1]++, ''));
            /* istanbul ignore next */
            cov_o7lkfwp7x().s[102]++;
            result += `  • ${file.name}${size}\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[38][1]++;
        }
        cov_o7lkfwp7x().s[103]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[104]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[40][0]++;
          cov_o7lkfwp7x().s[105]++;
          throw new fastmcp_1.UserError(`Failed to list repository contents: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[40][1]++;
        }
        cov_o7lkfwp7x().s[106]++;
        throw new fastmcp_1.UserError('Failed to list repository contents with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_o7lkfwp7x().s[107]++;
  server.addTool({
    name: 'validate-git-repository',
    description: 'Validate access to a Git repository and check for n8n configuration',
    parameters: GitRepositorySchema,
    annotations: {
      title: 'Validate Git Repository',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_o7lkfwp7x().f[11]++;
      cov_o7lkfwp7x().s[108]++;
      try {
        // Test repository access
        const contents =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[109]++, await listRepositoryContents(args.url, '', args.branch, {
          token: args.token,
          username: args.username,
          password: args.password
        }));
        // Check for n8n configuration files
        const configFiles =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[110]++, contents.filter(item => {
          /* istanbul ignore next */
          cov_o7lkfwp7x().f[12]++;
          cov_o7lkfwp7x().s[111]++;
          return /* istanbul ignore next */(cov_o7lkfwp7x().b[41][0]++, item.type === 'file') && (
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[41][1]++, item.name.includes('n8n')) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[41][2]++, item.name.endsWith('.json')) ||
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[41][3]++, item.name.endsWith('.yml')));
        }));
        const workflowFiles =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[112]++, contents.filter(item => {
          /* istanbul ignore next */
          cov_o7lkfwp7x().f[13]++;
          cov_o7lkfwp7x().s[113]++;
          return /* istanbul ignore next */(cov_o7lkfwp7x().b[42][0]++, item.type === 'file') &&
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[42][1]++, item.name.endsWith('.json')) &&
          /* istanbul ignore next */
          (cov_o7lkfwp7x().b[42][2]++, item.name.toLowerCase().includes('workflow'));
        }));
        let result =
        /* istanbul ignore next */
        (cov_o7lkfwp7x().s[114]++, `✅ Git repository validation successful\n` + `🌐 Repository: ${args.url}\n` + `🌿 Branch: ${args.branch}\n` + `📁 Total items: ${contents.length}\n\n`);
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[115]++;
        if (configFiles.length > 0) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[43][0]++;
          cov_o7lkfwp7x().s[116]++;
          result += `⚙️ Configuration files found (${configFiles.length}):\n`;
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[117]++;
          configFiles.forEach(file => {
            /* istanbul ignore next */
            cov_o7lkfwp7x().f[14]++;
            cov_o7lkfwp7x().s[118]++;
            result += `  • ${file.name}\n`;
          });
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[119]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[43][1]++;
        }
        cov_o7lkfwp7x().s[120]++;
        if (workflowFiles.length > 0) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[44][0]++;
          cov_o7lkfwp7x().s[121]++;
          result += `📋 Potential workflow files (${workflowFiles.length}):\n`;
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[122]++;
          workflowFiles.forEach(file => {
            /* istanbul ignore next */
            cov_o7lkfwp7x().f[15]++;
            cov_o7lkfwp7x().s[123]++;
            result += `  • ${file.name}\n`;
          });
          /* istanbul ignore next */
          cov_o7lkfwp7x().s[124]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[44][1]++;
        }
        cov_o7lkfwp7x().s[125]++;
        result += `🔗 Repository is accessible and ready for n8n integration`;
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[126]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_o7lkfwp7x().s[127]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_o7lkfwp7x().b[45][0]++;
          cov_o7lkfwp7x().s[128]++;
          throw new fastmcp_1.UserError(`Repository validation failed: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_o7lkfwp7x().b[45][1]++;
        }
        cov_o7lkfwp7x().s[129]++;
        throw new fastmcp_1.UserError('Repository validation failed with unknown error');
      }
    }
  });
}
// Helper functions for Git operations
async function fetchFileFromRepository(_repositoryUrl, _filePath, _branch, _auth) {
  /* istanbul ignore next */
  cov_o7lkfwp7x().f[16]++;
  cov_o7lkfwp7x().s[130]++;
  // This is a simplified implementation
  // In a real implementation, you would use the GitHub API or similar
  throw new fastmcp_1.UserError('Git file fetching not yet implemented. This requires integration with Git hosting service APIs.');
}
async function pushFileToRepository(_repositoryUrl, _filePath, _content, _commitMessage, _branch, _auth) {
  /* istanbul ignore next */
  cov_o7lkfwp7x().f[17]++;
  cov_o7lkfwp7x().s[131]++;
  // This is a simplified implementation
  // In a real implementation, you would use the GitHub API or similar
  throw new fastmcp_1.UserError('Git file pushing not yet implemented. This requires integration with Git hosting service APIs.');
}
async function listRepositoryContents(_repositoryUrl, _path, _branch, _auth) {
  /* istanbul ignore next */
  cov_o7lkfwp7x().f[18]++;
  cov_o7lkfwp7x().s[132]++;
  // This is a simplified implementation
  // In a real implementation, you would use the GitHub API or similar
  throw new fastmcp_1.UserError('Git repository listing not yet implemented. This requires integration with Git hosting service APIs.');
}
function formatBytes(bytes) {
  /* istanbul ignore next */
  cov_o7lkfwp7x().f[19]++;
  cov_o7lkfwp7x().s[133]++;
  if (bytes === 0) {
    /* istanbul ignore next */
    cov_o7lkfwp7x().b[46][0]++;
    cov_o7lkfwp7x().s[134]++;
    return '0 B';
  } else
  /* istanbul ignore next */
  {
    cov_o7lkfwp7x().b[46][1]++;
  }
  const k =
  /* istanbul ignore next */
  (cov_o7lkfwp7x().s[135]++, 1024);
  const sizes =
  /* istanbul ignore next */
  (cov_o7lkfwp7x().s[136]++, ['B', 'KB', 'MB', 'GB']);
  const i =
  /* istanbul ignore next */
  (cov_o7lkfwp7x().s[137]++, Math.floor(Math.log(bytes) / Math.log(k)));
  /* istanbul ignore next */
  cov_o7lkfwp7x().s[138]++;
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,