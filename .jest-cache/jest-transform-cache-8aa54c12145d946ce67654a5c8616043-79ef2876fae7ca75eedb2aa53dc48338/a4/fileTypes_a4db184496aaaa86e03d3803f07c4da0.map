{"version":3,"names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/fileTypes.ts"],"sourcesContent":["// File and binary data type definitions for n8n MCP server\n\nexport interface BinaryData {\n  data: string; // Base64 encoded data\n  mimeType: string;\n  fileName?: string;\n  fileSize?: number;\n  directory?: string;\n  fileExtension?: string;\n}\n\nexport interface N8nBinaryDataResponse {\n  data: string; // Base64 encoded\n  mimeType: string;\n  fileName: string;\n  fileSize: number;\n}\n\nexport interface FileUploadRequest {\n  fileName: string;\n  mimeType: string;\n  data: string; // Base64 encoded data\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n}\n\nexport interface FileDownloadRequest {\n  fileId: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n}\n\nexport interface StaticFileInfo {\n  id: string;\n  fileName: string;\n  mimeType: string;\n  fileSize: number;\n  uploadedAt: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n  filePath?: string;\n}\n\nexport interface FileStorageConfig {\n  baseDirectory: string;\n  maxFileSize: number; // in bytes\n  allowedMimeTypes: string[];\n  cleanupOlderThan?: number; // days\n}\n\nexport interface FileTransferProgress {\n  transferId: string;\n  fileName: string;\n  totalBytes: number;\n  transferredBytes: number;\n  percentComplete: number;\n  status: 'pending' | 'in-progress' | 'completed' | 'failed' | 'cancelled';\n  startedAt: string;\n  completedAt?: string;\n  error?: string;\n}\n\nexport interface FileSearchOptions {\n  fileName?: string;\n  mimeType?: string;\n  workflowId?: string;\n  executionId?: string;\n  nodeId?: string;\n  uploadedAfter?: string;\n  uploadedBefore?: string;\n  minFileSize?: number;\n  maxFileSize?: number;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface FileOperationResult {\n  success: boolean;\n  fileId?: string;\n  fileName?: string;\n  message: string;\n  fileSize?: number;\n  transferId?: string;\n}\n\nexport interface BinaryDataPayload {\n  propertyName: string;\n  data: BinaryData;\n}\n\nexport interface WorkflowFileManifest {\n  workflowId: string;\n  workflowName: string;\n  files: StaticFileInfo[];\n  totalSize: number;\n  fileCount: number;\n  lastUpdated: string;\n}\n\nexport interface FileCleanupResult {\n  deletedFiles: number;\n  freedSpace: number; // bytes\n  errors: string[];\n}\n\nexport interface FileValidationOptions {\n  maxFileSize?: number;\n  allowedMimeTypes?: string[];\n  allowedExtensions?: string[];\n  virusScan?: boolean;\n}\n\nexport interface FileValidationResult {\n  isValid: boolean;\n  errors: string[];\n  warnings: string[];\n  detectedMimeType?: string;\n  detectedExtension?: string;\n  actualFileSize?: number;\n}\n\n// Helper types for different file operations\nexport type FileOperationType = 'upload' | 'download' | 'delete' | 'list' | 'cleanup';\n\nexport interface FileOperationLog {\n  id: string;\n  operation: FileOperationType;\n  fileName: string;\n  fileId?: string;\n  workflowId?: string;\n  executionId?: string;\n  timestamp: string;\n  success: boolean;\n  error?: string;\n  fileSize?: number;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","ignoreList":[]}