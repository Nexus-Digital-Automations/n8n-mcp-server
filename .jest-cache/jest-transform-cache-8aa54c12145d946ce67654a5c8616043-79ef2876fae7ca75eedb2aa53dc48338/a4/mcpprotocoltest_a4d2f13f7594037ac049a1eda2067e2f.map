{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/e2e/mcp-protocol.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/e2e/mcp-protocol.test.ts"],"sourcesContent":["import { describe, beforeAll, afterAll, beforeEach, afterEach, it, expect } from '@jest/globals';\nimport { spawn, ChildProcess } from 'child_process';\nimport { setTimeout, clearTimeout } from 'timers';\nimport { MockN8nServer } from '../mocks/mockN8nServer';\nimport * as path from 'path';\n\n// Use process.cwd() + relative path for Jest compatibility\nconst testDir = path.join(process.cwd(), 'tests', 'e2e');\n\n/**\n * End-to-End tests for MCP protocol compliance\n * Tests the FastMCP server implementation against the MCP specification\n */\ndescribe('MCP Protocol E2E Tests', () => {\n  let mockN8nServer: MockN8nServer;\n  let mcpServerProcess: ChildProcess;\n  const mockServerPort = 3001;\n  const mcpServerTimeout = 10000;\n\n  beforeAll(async () => {\n    // Start mock n8n server\n    mockN8nServer = new MockN8nServer(mockServerPort);\n    await mockN8nServer.start();\n\n    console.log('Mock n8n server started for E2E tests');\n  }, 15000);\n\n  afterAll(async () => {\n    // Stop mock n8n server\n    if (mockN8nServer) {\n      await mockN8nServer.stop();\n    }\n\n    console.log('Mock n8n server stopped');\n  }, 10000);\n\n  beforeEach(() => {\n    // Clean up any existing MCP server process\n    if (mcpServerProcess) {\n      mcpServerProcess.kill('SIGTERM');\n      mcpServerProcess = null as any;\n    }\n  });\n\n  afterEach(() => {\n    // Ensure MCP server process is terminated\n    if (mcpServerProcess) {\n      mcpServerProcess.kill('SIGTERM');\n      mcpServerProcess = null as any;\n    }\n  });\n\n  describe('MCP Server Initialization', () => {\n    it(\n      'should start MCP server successfully with stdio transport',\n      async () => {\n        const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n        const startServer = (): Promise<void> => {\n          return new Promise((resolve, reject) => {\n            mcpServerProcess = spawn('node', [serverPath], {\n              env: {\n                ...process.env,\n                N8N_BASE_URL: mockN8nServer.getUrl(),\n                N8N_API_KEY: 'test-api-key',\n                N8N_MCP_TRANSPORT: 'stdio',\n              },\n              stdio: ['pipe', 'pipe', 'pipe'],\n            });\n\n            let hasResolved = false;\n            let initTimeout: ReturnType<typeof setTimeout> | undefined = undefined;\n\n            const cleanup = () => {\n              if (initTimeout) {\n                clearTimeout(initTimeout);\n              }\n            };\n\n            mcpServerProcess.stdout?.on('data', data => {\n              const output = data.toString();\n              console.log('MCP Server stdout:', output);\n\n              // Look for initialization success indicators\n              if (output.includes('Server ready') || output.includes('listening') || !hasResolved) {\n                hasResolved = true;\n                cleanup();\n                resolve();\n              }\n            });\n\n            mcpServerProcess.stderr?.on('data', data => {\n              const error = data.toString();\n              console.error('MCP Server stderr:', error);\n\n              if (error.includes('Error') || error.includes('EADDRINUSE')) {\n                cleanup();\n                reject(new Error(`MCP server failed to start: ${error}`));\n              }\n            });\n\n            mcpServerProcess.on('error', error => {\n              cleanup();\n              reject(new Error(`Failed to spawn MCP server: ${error.message}`));\n            });\n\n            mcpServerProcess.on('exit', (code, signal) => {\n              if (code !== 0 && code !== null && !hasResolved) {\n                cleanup();\n                reject(new Error(`MCP server exited with code ${code}, signal ${signal}`));\n              }\n            });\n\n            // Set timeout for server initialization\n            initTimeout = setTimeout(() => {\n              if (!hasResolved) {\n                hasResolved = true;\n                cleanup();\n                resolve(); // Assume success if no explicit errors\n              }\n            }, 5000);\n          });\n        };\n\n        await expect(startServer()).resolves.not.toThrow();\n        expect(mcpServerProcess).toBeDefined();\n        expect(mcpServerProcess.pid).toBeGreaterThan(0);\n      },\n      mcpServerTimeout\n    );\n\n    it(\n      'should handle MCP initialization protocol',\n      async () => {\n        const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n        const testInitialization = (): Promise<any> => {\n          return new Promise((resolve, reject) => {\n            mcpServerProcess = spawn('node', [serverPath], {\n              env: {\n                ...process.env,\n                N8N_BASE_URL: mockN8nServer.getUrl(),\n                N8N_API_KEY: 'test-api-key',\n                N8N_MCP_TRANSPORT: 'stdio',\n              },\n              stdio: ['pipe', 'pipe', 'pipe'],\n            });\n\n            let responseData = '';\n            let hasResolved = false;\n\n            const cleanup = () => {\n              if (!hasResolved) {\n                hasResolved = true;\n              }\n            };\n\n            mcpServerProcess.stdout?.on('data', data => {\n              responseData += data.toString();\n\n              // Look for JSON-RPC response\n              try {\n                const lines = responseData.split('\\n').filter(line => line.trim());\n                for (const line of lines) {\n                  if (line.startsWith('{')) {\n                    const response = JSON.parse(line);\n                    if (response.result && response.result.capabilities) {\n                      cleanup();\n                      resolve(response);\n                      return;\n                    }\n                  }\n                }\n              } catch (e) {\n                // Continue processing\n              }\n            });\n\n            mcpServerProcess.stderr?.on('data', data => {\n              console.error('MCP Server stderr:', data.toString());\n            });\n\n            mcpServerProcess.on('error', error => {\n              cleanup();\n              reject(error);\n            });\n\n            // Send MCP initialization request\n            const initRequest = {\n              jsonrpc: '2.0',\n              id: 1,\n              method: 'initialize',\n              params: {\n                protocolVersion: '2024-11-05',\n                capabilities: {\n                  tools: {},\n                  resources: {},\n                },\n                clientInfo: {\n                  name: 'e2e-test-client',\n                  version: '1.0.0',\n                },\n              },\n            };\n\n            setTimeout(() => {\n              if (mcpServerProcess && mcpServerProcess.stdin) {\n                mcpServerProcess.stdin.write(JSON.stringify(initRequest) + '\\n');\n              }\n            }, 1000);\n\n            // Timeout for initialization\n            setTimeout(() => {\n              if (!hasResolved) {\n                cleanup();\n                reject(new Error('MCP initialization timeout'));\n              }\n            }, 8000);\n          });\n        };\n\n        const response = await testInitialization();\n\n        // Verify MCP protocol compliance\n        expect(response).toBeDefined();\n        expect(response.jsonrpc).toBe('2.0');\n        expect(response.id).toBe(1);\n        expect(response.result).toBeDefined();\n        expect(response.result.capabilities).toBeDefined();\n        expect(response.result.capabilities.tools).toBeDefined();\n        expect(response.result.serverInfo).toBeDefined();\n        expect(response.result.serverInfo.name).toBe('n8n-mcp-server');\n      },\n      mcpServerTimeout\n    );\n  });\n\n  describe('MCP Tools Protocol', () => {\n    let initializedServer: any;\n\n    beforeEach(async () => {\n      // Initialize server for tools testing\n      const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n      initializedServer = await new Promise((resolve, reject) => {\n        mcpServerProcess = spawn('node', [serverPath], {\n          env: {\n            ...process.env,\n            N8N_BASE_URL: mockN8nServer.getUrl(),\n            N8N_API_KEY: 'test-api-key',\n            N8N_MCP_TRANSPORT: 'stdio',\n          },\n          stdio: ['pipe', 'pipe', 'pipe'],\n        });\n\n        let responseData = '';\n        let isInitialized = false;\n\n        mcpServerProcess.stdout?.on('data', data => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.result && response.result.capabilities && !isInitialized) {\n                  isInitialized = true;\n                  resolve(mcpServerProcess);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        });\n\n        mcpServerProcess.on('error', reject);\n\n        // Send initialization\n        setTimeout(() => {\n          const initRequest = {\n            jsonrpc: '2.0',\n            id: 1,\n            method: 'initialize',\n            params: {\n              protocolVersion: '2024-11-05',\n              capabilities: { tools: {}, resources: {} },\n              clientInfo: { name: 'e2e-test-client', version: '1.0.0' },\n            },\n          };\n          mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n        }, 1000);\n\n        setTimeout(() => {\n          if (!isInitialized) {\n            reject(new Error('Server initialization timeout'));\n          }\n        }, 8000);\n      });\n    }, mcpServerTimeout);\n\n    it('should list available tools', async () => {\n      const listToolsRequest = {\n        jsonrpc: '2.0',\n        id: 2,\n        method: 'tools/list',\n        params: {},\n      };\n\n      const response = await new Promise((resolve, reject) => {\n        let responseData = '';\n\n        const dataHandler = (data: Buffer) => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.id === 2) {\n                  mcpServerProcess.stdout?.off('data', dataHandler);\n                  resolve(response);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        };\n\n        mcpServerProcess.stdout?.on('data', dataHandler);\n        mcpServerProcess.stdin?.write(JSON.stringify(listToolsRequest) + '\\n');\n\n        setTimeout(() => {\n          mcpServerProcess.stdout?.off('data', dataHandler);\n          reject(new Error('Tools list timeout'));\n        }, 5000);\n      });\n\n      expect(response).toBeDefined();\n      expect((response as any).jsonrpc).toBe('2.0');\n      expect((response as any).id).toBe(2);\n      expect((response as any).result).toBeDefined();\n      expect((response as any).result.tools).toBeDefined();\n      expect(Array.isArray((response as any).result.tools)).toBe(true);\n\n      // Verify essential n8n tools are present\n      const tools = (response as any).result.tools;\n      const toolNames = tools.map((tool: any) => tool.name);\n\n      expect(toolNames).toContain('init-n8n');\n      expect(toolNames).toContain('list-workflows');\n      expect(toolNames).toContain('get-workflow');\n      expect(toolNames).toContain('create-workflow');\n    });\n\n    it('should execute init-n8n tool successfully', async () => {\n      const toolCallRequest = {\n        jsonrpc: '2.0',\n        id: 3,\n        method: 'tools/call',\n        params: {\n          name: 'init-n8n',\n          arguments: {\n            baseUrl: mockN8nServer.getUrl(),\n            apiKey: 'test-api-key',\n          },\n        },\n      };\n\n      const response = await new Promise((resolve, reject) => {\n        let responseData = '';\n\n        const dataHandler = (data: Buffer) => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.id === 3) {\n                  mcpServerProcess.stdout?.off('data', dataHandler);\n                  resolve(response);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        };\n\n        mcpServerProcess.stdout?.on('data', dataHandler);\n        mcpServerProcess.stdin?.write(JSON.stringify(toolCallRequest) + '\\n');\n\n        setTimeout(() => {\n          mcpServerProcess.stdout?.off('data', dataHandler);\n          reject(new Error('Tool call timeout'));\n        }, 8000);\n      });\n\n      expect(response).toBeDefined();\n      expect((response as any).jsonrpc).toBe('2.0');\n      expect((response as any).id).toBe(3);\n      expect((response as any).result).toBeDefined();\n      expect((response as any).result.content).toBeDefined();\n      expect(Array.isArray((response as any).result.content)).toBe(true);\n      expect((response as any).result.content[0].type).toBe('text');\n      expect((response as any).result.content[0].text).toContain('initialized');\n    });\n\n    it('should execute list-workflows tool successfully', async () => {\n      // First initialize n8n\n      const initRequest = {\n        jsonrpc: '2.0',\n        id: 4,\n        method: 'tools/call',\n        params: {\n          name: 'init-n8n',\n          arguments: {\n            baseUrl: mockN8nServer.getUrl(),\n            apiKey: 'test-api-key',\n          },\n        },\n      };\n\n      await new Promise(resolve => {\n        let responseData = '';\n\n        const dataHandler = (data: Buffer) => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.id === 4) {\n                  mcpServerProcess.stdout?.off('data', dataHandler);\n                  resolve(response);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        };\n\n        mcpServerProcess.stdout?.on('data', dataHandler);\n        mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n\n        setTimeout(() => {\n          mcpServerProcess.stdout?.off('data', dataHandler);\n          resolve(null);\n        }, 5000);\n      });\n\n      // Now test list-workflows\n      const listWorkflowsRequest = {\n        jsonrpc: '2.0',\n        id: 5,\n        method: 'tools/call',\n        params: {\n          name: 'list-workflows',\n          arguments: {\n            limit: 10,\n          },\n        },\n      };\n\n      const response = await new Promise((resolve, reject) => {\n        let responseData = '';\n\n        const dataHandler = (data: Buffer) => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.id === 5) {\n                  mcpServerProcess.stdout?.off('data', dataHandler);\n                  resolve(response);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        };\n\n        mcpServerProcess.stdout?.on('data', dataHandler);\n        mcpServerProcess.stdin?.write(JSON.stringify(listWorkflowsRequest) + '\\n');\n\n        setTimeout(() => {\n          mcpServerProcess.stdout?.off('data', dataHandler);\n          reject(new Error('List workflows timeout'));\n        }, 8000);\n      });\n\n      expect(response).toBeDefined();\n      expect((response as any).jsonrpc).toBe('2.0');\n      expect((response as any).id).toBe(5);\n      expect((response as any).result).toBeDefined();\n      expect((response as any).result.content).toBeDefined();\n      expect(Array.isArray((response as any).result.content)).toBe(true);\n      expect((response as any).result.content[0].type).toBe('text');\n\n      // Verify response contains workflow data\n      const responseText = (response as any).result.content[0].text;\n      expect(responseText).toContain('workflows');\n      expect(responseText).toContain('Test Workflow');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid tool names gracefully', async () => {\n      // Initialize server first\n      const serverPath = path.join(testDir, '../../build/index-fastmcp.js');\n\n      mcpServerProcess = spawn('node', [serverPath], {\n        env: {\n          ...process.env,\n          N8N_BASE_URL: mockN8nServer.getUrl(),\n          N8N_API_KEY: 'test-api-key',\n          N8N_MCP_TRANSPORT: 'stdio',\n        },\n        stdio: ['pipe', 'pipe', 'pipe'],\n      });\n\n      // Wait for initialization\n      await new Promise(resolve => {\n        setTimeout(() => {\n          const initRequest = {\n            jsonrpc: '2.0',\n            id: 1,\n            method: 'initialize',\n            params: {\n              protocolVersion: '2024-11-05',\n              capabilities: { tools: {}, resources: {} },\n              clientInfo: { name: 'e2e-test-client', version: '1.0.0' },\n            },\n          };\n          mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\\n');\n          setTimeout(resolve, 2000);\n        }, 1000);\n      });\n\n      // Test invalid tool call\n      const invalidToolRequest = {\n        jsonrpc: '2.0',\n        id: 2,\n        method: 'tools/call',\n        params: {\n          name: 'nonexistent-tool',\n          arguments: {},\n        },\n      };\n\n      const response = await new Promise((resolve, reject) => {\n        let responseData = '';\n\n        const dataHandler = (data: Buffer) => {\n          responseData += data.toString();\n\n          try {\n            const lines = responseData.split('\\n').filter(line => line.trim());\n            for (const line of lines) {\n              if (line.startsWith('{')) {\n                const response = JSON.parse(line);\n                if (response.id === 2) {\n                  mcpServerProcess.stdout?.off('data', dataHandler);\n                  resolve(response);\n                  return;\n                }\n              }\n            }\n          } catch (e) {\n            // Continue processing\n          }\n        };\n\n        mcpServerProcess.stdout?.on('data', dataHandler);\n        mcpServerProcess.stdin?.write(JSON.stringify(invalidToolRequest) + '\\n');\n\n        setTimeout(() => {\n          mcpServerProcess.stdout?.off('data', dataHandler);\n          reject(new Error('Invalid tool call timeout'));\n        }, 5000);\n      });\n\n      expect(response).toBeDefined();\n      expect((response as any).jsonrpc).toBe('2.0');\n      expect((response as any).id).toBe(2);\n      expect((response as any).error).toBeDefined();\n      expect((response as any).error.code).toBeDefined();\n      expect((response as any).error.message).toContain('not found');\n    });\n  });\n});\n"],"version":3}