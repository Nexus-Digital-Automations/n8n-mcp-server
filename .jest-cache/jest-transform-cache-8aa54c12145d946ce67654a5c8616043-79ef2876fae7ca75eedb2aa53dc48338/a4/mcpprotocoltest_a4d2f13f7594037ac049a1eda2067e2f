be2203d064e94df9ef739de6014456a9
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const child_process_1 = require("child_process");
const timers_1 = require("timers");
const mockN8nServer_1 = require("../mocks/mockN8nServer");
const path = __importStar(require("path"));
// Use process.cwd() + relative path for Jest compatibility
const testDir = path.join(process.cwd(), 'tests', 'e2e');
/**
 * End-to-End tests for MCP protocol compliance
 * Tests the FastMCP server implementation against the MCP specification
 */
(0, globals_1.describe)('MCP Protocol E2E Tests', () => {
    let mockN8nServer;
    let mcpServerProcess;
    const mockServerPort = 3001;
    const mcpServerTimeout = 10000;
    (0, globals_1.beforeAll)(async () => {
        // Start mock n8n server
        mockN8nServer = new mockN8nServer_1.MockN8nServer(mockServerPort);
        await mockN8nServer.start();
        console.log('Mock n8n server started for E2E tests');
    }, 15000);
    (0, globals_1.afterAll)(async () => {
        // Stop mock n8n server
        if (mockN8nServer) {
            await mockN8nServer.stop();
        }
        console.log('Mock n8n server stopped');
    }, 10000);
    (0, globals_1.beforeEach)(() => {
        // Clean up any existing MCP server process
        if (mcpServerProcess) {
            mcpServerProcess.kill('SIGTERM');
            mcpServerProcess = null;
        }
    });
    (0, globals_1.afterEach)(() => {
        // Ensure MCP server process is terminated
        if (mcpServerProcess) {
            mcpServerProcess.kill('SIGTERM');
            mcpServerProcess = null;
        }
    });
    (0, globals_1.describe)('MCP Server Initialization', () => {
        (0, globals_1.it)('should start MCP server successfully with stdio transport', async () => {
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            const startServer = () => {
                return new Promise((resolve, reject) => {
                    mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                        env: {
                            ...process.env,
                            N8N_BASE_URL: mockN8nServer.getUrl(),
                            N8N_API_KEY: 'test-api-key',
                            N8N_MCP_TRANSPORT: 'stdio',
                        },
                        stdio: ['pipe', 'pipe', 'pipe'],
                    });
                    let hasResolved = false;
                    let initTimeout = undefined;
                    const cleanup = () => {
                        if (initTimeout) {
                            (0, timers_1.clearTimeout)(initTimeout);
                        }
                    };
                    mcpServerProcess.stdout?.on('data', data => {
                        const output = data.toString();
                        console.log('MCP Server stdout:', output);
                        // Look for initialization success indicators
                        if (output.includes('Server ready') || output.includes('listening') || !hasResolved) {
                            hasResolved = true;
                            cleanup();
                            resolve();
                        }
                    });
                    mcpServerProcess.stderr?.on('data', data => {
                        const error = data.toString();
                        console.error('MCP Server stderr:', error);
                        if (error.includes('Error') || error.includes('EADDRINUSE')) {
                            cleanup();
                            reject(new Error(`MCP server failed to start: ${error}`));
                        }
                    });
                    mcpServerProcess.on('error', error => {
                        cleanup();
                        reject(new Error(`Failed to spawn MCP server: ${error.message}`));
                    });
                    mcpServerProcess.on('exit', (code, signal) => {
                        if (code !== 0 && code !== null && !hasResolved) {
                            cleanup();
                            reject(new Error(`MCP server exited with code ${code}, signal ${signal}`));
                        }
                    });
                    // Set timeout for server initialization
                    initTimeout = (0, timers_1.setTimeout)(() => {
                        if (!hasResolved) {
                            hasResolved = true;
                            cleanup();
                            resolve(); // Assume success if no explicit errors
                        }
                    }, 5000);
                });
            };
            await (0, globals_1.expect)(startServer()).resolves.not.toThrow();
            (0, globals_1.expect)(mcpServerProcess).toBeDefined();
            (0, globals_1.expect)(mcpServerProcess.pid).toBeGreaterThan(0);
        }, mcpServerTimeout);
        (0, globals_1.it)('should handle MCP initialization protocol', async () => {
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            const testInitialization = () => {
                return new Promise((resolve, reject) => {
                    mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                        env: {
                            ...process.env,
                            N8N_BASE_URL: mockN8nServer.getUrl(),
                            N8N_API_KEY: 'test-api-key',
                            N8N_MCP_TRANSPORT: 'stdio',
                        },
                        stdio: ['pipe', 'pipe', 'pipe'],
                    });
                    let responseData = '';
                    let hasResolved = false;
                    const cleanup = () => {
                        if (!hasResolved) {
                            hasResolved = true;
                        }
                    };
                    mcpServerProcess.stdout?.on('data', data => {
                        responseData += data.toString();
                        // Look for JSON-RPC response
                        try {
                            const lines = responseData.split('\n').filter(line => line.trim());
                            for (const line of lines) {
                                if (line.startsWith('{')) {
                                    const response = JSON.parse(line);
                                    if (response.result && response.result.capabilities) {
                                        cleanup();
                                        resolve(response);
                                        return;
                                    }
                                }
                            }
                        }
                        catch (e) {
                            // Continue processing
                        }
                    });
                    mcpServerProcess.stderr?.on('data', data => {
                        console.error('MCP Server stderr:', data.toString());
                    });
                    mcpServerProcess.on('error', error => {
                        cleanup();
                        reject(error);
                    });
                    // Send MCP initialization request
                    const initRequest = {
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'initialize',
                        params: {
                            protocolVersion: '2024-11-05',
                            capabilities: {
                                tools: {},
                                resources: {},
                            },
                            clientInfo: {
                                name: 'e2e-test-client',
                                version: '1.0.0',
                            },
                        },
                    };
                    (0, timers_1.setTimeout)(() => {
                        if (mcpServerProcess && mcpServerProcess.stdin) {
                            mcpServerProcess.stdin.write(JSON.stringify(initRequest) + '\n');
                        }
                    }, 1000);
                    // Timeout for initialization
                    (0, timers_1.setTimeout)(() => {
                        if (!hasResolved) {
                            cleanup();
                            reject(new Error('MCP initialization timeout'));
                        }
                    }, 8000);
                });
            };
            const response = await testInitialization();
            // Verify MCP protocol compliance
            (0, globals_1.expect)(response).toBeDefined();
            (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
            (0, globals_1.expect)(response.id).toBe(1);
            (0, globals_1.expect)(response.result).toBeDefined();
            (0, globals_1.expect)(response.result.capabilities).toBeDefined();
            (0, globals_1.expect)(response.result.capabilities.tools).toBeDefined();
            (0, globals_1.expect)(response.result.serverInfo).toBeDefined();
            (0, globals_1.expect)(response.result.serverInfo.name).toBe('n8n-mcp-server');
        }, mcpServerTimeout);
    });
    (0, globals_1.describe)('MCP Tools Protocol', () => {
        let initializedServer;
        (0, globals_1.beforeEach)(async () => {
            // Initialize server for tools testing
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            initializedServer = await new Promise((resolve, reject) => {
                mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                    env: {
                        ...process.env,
                        N8N_BASE_URL: mockN8nServer.getUrl(),
                        N8N_API_KEY: 'test-api-key',
                        N8N_MCP_TRANSPORT: 'stdio',
                    },
                    stdio: ['pipe', 'pipe', 'pipe'],
                });
                let responseData = '';
                let isInitialized = false;
                mcpServerProcess.stdout?.on('data', data => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.result && response.result.capabilities && !isInitialized) {
                                    isInitialized = true;
                                    resolve(mcpServerProcess);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                });
                mcpServerProcess.on('error', reject);
                // Send initialization
                (0, timers_1.setTimeout)(() => {
                    const initRequest = {
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'initialize',
                        params: {
                            protocolVersion: '2024-11-05',
                            capabilities: { tools: {}, resources: {} },
                            clientInfo: { name: 'e2e-test-client', version: '1.0.0' },
                        },
                    };
                    mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                }, 1000);
                (0, timers_1.setTimeout)(() => {
                    if (!isInitialized) {
                        reject(new Error('Server initialization timeout'));
                    }
                }, 8000);
            });
        }, mcpServerTimeout);
        (0, globals_1.it)('should list available tools', async () => {
            const listToolsRequest = {
                jsonrpc: '2.0',
                id: 2,
                method: 'tools/list',
                params: {},
            };
            const response = await new Promise((resolve, reject) => {
                let responseData = '';
                const dataHandler = (data) => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.id === 2) {
                                    mcpServerProcess.stdout?.off('data', dataHandler);
                                    resolve(response);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                };
                mcpServerProcess.stdout?.on('data', dataHandler);
                mcpServerProcess.stdin?.write(JSON.stringify(listToolsRequest) + '\n');
                (0, timers_1.setTimeout)(() => {
                    mcpServerProcess.stdout?.off('data', dataHandler);
                    reject(new Error('Tools list timeout'));
                }, 5000);
            });
            (0, globals_1.expect)(response).toBeDefined();
            (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
            (0, globals_1.expect)(response.id).toBe(2);
            (0, globals_1.expect)(response.result).toBeDefined();
            (0, globals_1.expect)(response.result.tools).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.result.tools)).toBe(true);
            // Verify essential n8n tools are present
            const tools = response.result.tools;
            const toolNames = tools.map((tool) => tool.name);
            (0, globals_1.expect)(toolNames).toContain('init-n8n');
            (0, globals_1.expect)(toolNames).toContain('list-workflows');
            (0, globals_1.expect)(toolNames).toContain('get-workflow');
            (0, globals_1.expect)(toolNames).toContain('create-workflow');
        });
        (0, globals_1.it)('should execute init-n8n tool successfully', async () => {
            const toolCallRequest = {
                jsonrpc: '2.0',
                id: 3,
                method: 'tools/call',
                params: {
                    name: 'init-n8n',
                    arguments: {
                        baseUrl: mockN8nServer.getUrl(),
                        apiKey: 'test-api-key',
                    },
                },
            };
            const response = await new Promise((resolve, reject) => {
                let responseData = '';
                const dataHandler = (data) => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.id === 3) {
                                    mcpServerProcess.stdout?.off('data', dataHandler);
                                    resolve(response);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                };
                mcpServerProcess.stdout?.on('data', dataHandler);
                mcpServerProcess.stdin?.write(JSON.stringify(toolCallRequest) + '\n');
                (0, timers_1.setTimeout)(() => {
                    mcpServerProcess.stdout?.off('data', dataHandler);
                    reject(new Error('Tool call timeout'));
                }, 8000);
            });
            (0, globals_1.expect)(response).toBeDefined();
            (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
            (0, globals_1.expect)(response.id).toBe(3);
            (0, globals_1.expect)(response.result).toBeDefined();
            (0, globals_1.expect)(response.result.content).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.result.content)).toBe(true);
            (0, globals_1.expect)(response.result.content[0].type).toBe('text');
            (0, globals_1.expect)(response.result.content[0].text).toContain('initialized');
        });
        (0, globals_1.it)('should execute list-workflows tool successfully', async () => {
            // First initialize n8n
            const initRequest = {
                jsonrpc: '2.0',
                id: 4,
                method: 'tools/call',
                params: {
                    name: 'init-n8n',
                    arguments: {
                        baseUrl: mockN8nServer.getUrl(),
                        apiKey: 'test-api-key',
                    },
                },
            };
            await new Promise(resolve => {
                let responseData = '';
                const dataHandler = (data) => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.id === 4) {
                                    mcpServerProcess.stdout?.off('data', dataHandler);
                                    resolve(response);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                };
                mcpServerProcess.stdout?.on('data', dataHandler);
                mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                (0, timers_1.setTimeout)(() => {
                    mcpServerProcess.stdout?.off('data', dataHandler);
                    resolve(null);
                }, 5000);
            });
            // Now test list-workflows
            const listWorkflowsRequest = {
                jsonrpc: '2.0',
                id: 5,
                method: 'tools/call',
                params: {
                    name: 'list-workflows',
                    arguments: {
                        limit: 10,
                    },
                },
            };
            const response = await new Promise((resolve, reject) => {
                let responseData = '';
                const dataHandler = (data) => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.id === 5) {
                                    mcpServerProcess.stdout?.off('data', dataHandler);
                                    resolve(response);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                };
                mcpServerProcess.stdout?.on('data', dataHandler);
                mcpServerProcess.stdin?.write(JSON.stringify(listWorkflowsRequest) + '\n');
                (0, timers_1.setTimeout)(() => {
                    mcpServerProcess.stdout?.off('data', dataHandler);
                    reject(new Error('List workflows timeout'));
                }, 8000);
            });
            (0, globals_1.expect)(response).toBeDefined();
            (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
            (0, globals_1.expect)(response.id).toBe(5);
            (0, globals_1.expect)(response.result).toBeDefined();
            (0, globals_1.expect)(response.result.content).toBeDefined();
            (0, globals_1.expect)(Array.isArray(response.result.content)).toBe(true);
            (0, globals_1.expect)(response.result.content[0].type).toBe('text');
            // Verify response contains workflow data
            const responseText = response.result.content[0].text;
            (0, globals_1.expect)(responseText).toContain('workflows');
            (0, globals_1.expect)(responseText).toContain('Test Workflow');
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle invalid tool names gracefully', async () => {
            // Initialize server first
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                env: {
                    ...process.env,
                    N8N_BASE_URL: mockN8nServer.getUrl(),
                    N8N_API_KEY: 'test-api-key',
                    N8N_MCP_TRANSPORT: 'stdio',
                },
                stdio: ['pipe', 'pipe', 'pipe'],
            });
            // Wait for initialization
            await new Promise(resolve => {
                (0, timers_1.setTimeout)(() => {
                    const initRequest = {
                        jsonrpc: '2.0',
                        id: 1,
                        method: 'initialize',
                        params: {
                            protocolVersion: '2024-11-05',
                            capabilities: { tools: {}, resources: {} },
                            clientInfo: { name: 'e2e-test-client', version: '1.0.0' },
                        },
                    };
                    mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                    (0, timers_1.setTimeout)(resolve, 2000);
                }, 1000);
            });
            // Test invalid tool call
            const invalidToolRequest = {
                jsonrpc: '2.0',
                id: 2,
                method: 'tools/call',
                params: {
                    name: 'nonexistent-tool',
                    arguments: {},
                },
            };
            const response = await new Promise((resolve, reject) => {
                let responseData = '';
                const dataHandler = (data) => {
                    responseData += data.toString();
                    try {
                        const lines = responseData.split('\n').filter(line => line.trim());
                        for (const line of lines) {
                            if (line.startsWith('{')) {
                                const response = JSON.parse(line);
                                if (response.id === 2) {
                                    mcpServerProcess.stdout?.off('data', dataHandler);
                                    resolve(response);
                                    return;
                                }
                            }
                        }
                    }
                    catch (e) {
                        // Continue processing
                    }
                };
                mcpServerProcess.stdout?.on('data', dataHandler);
                mcpServerProcess.stdin?.write(JSON.stringify(invalidToolRequest) + '\n');
                (0, timers_1.setTimeout)(() => {
                    mcpServerProcess.stdout?.off('data', dataHandler);
                    reject(new Error('Invalid tool call timeout'));
                }, 5000);
            });
            (0, globals_1.expect)(response).toBeDefined();
            (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
            (0, globals_1.expect)(response.id).toBe(2);
            (0, globals_1.expect)(response.error).toBeDefined();
            (0, globals_1.expect)(response.error.code).toBeDefined();
            (0, globals_1.expect)(response.error.message).toContain('not found');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,