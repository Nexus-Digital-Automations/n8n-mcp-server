{"version":3,"names":["cov_2dbxy2tc76","actualCoverage","createWorkflowResources","createExecutionResources","ResourceManager","config","workflowResources","executionResources","constructor","b","f","s","baseUri","enableWorkflows","enableExecutions","enableCredentials","enableNodes","globalCacheDuration","maxItems","register","server","getClient","console","log","maxWorkflows","cacheDuration","maxExecutions","registerNodeResources","registerCredentialResources","registerGeneralResources","addResource","uri","name","mimeType","load","nodes","getAvailableNodes","text","JSON","stringify","addResourceTemplate","uriTemplate","arguments","description","required","nodeType","nodeDoc","getNodeDocumentation","credTypes","getCredentialTypes","credType","template","getCredentialTemplate","client","Error","info","getInstanceInfo","directory","getResourceDirectory","type","category","version","metadata","totalNodes","categories","lastUpdated","Date","toISOString","resourceInfo","lastAccessed","split","pop","parameters","examples","credentialTypes","displayName","properties","totalTypes","credentialType","data","fields","workflows","getWorkflows","limit","executions","getExecutions","status","features","projects","testFeature","getProjects","users","getUsers","variables","getVariables","statistics","totalWorkflows","length","totalExecutions","error","message","String","testFn","resources","push","endpoints","totalResources","clearAllCaches","clearCache","getAllCacheStats","getCacheStats","size","keys","createResourceManager","RESOURCE_ENV_CONFIG","BASE_URI","ENABLE_WORKFLOWS","ENABLE_EXECUTIONS","ENABLE_CREDENTIALS","ENABLE_NODES","CACHE_DURATION","MAX_ITEMS","parseResourceConfigFromEnv","process","env","undefined","value","parseInt"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts"],"sourcesContent":["/**\n * Resource Manager for n8n MCP Server\n *\n * Central coordinator for all MCP resources, managing registration,\n * configuration, and lifecycle of resource providers.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { WorkflowResourceManager, createWorkflowResources } from './workflowResources.js';\nimport { ExecutionResourceManager, createExecutionResources } from './executionResources.js';\n\n/**\n * Resource manager configuration\n */\nexport interface ResourceManagerConfig {\n  /** Base URI prefix for all n8n resources */\n  baseUri?: string;\n\n  /** Whether to enable workflow resources */\n  enableWorkflows?: boolean;\n\n  /** Whether to enable execution resources */\n  enableExecutions?: boolean;\n\n  /** Whether to enable credential resources */\n  enableCredentials?: boolean;\n\n  /** Whether to enable node documentation resources */\n  enableNodes?: boolean;\n\n  /** Global cache duration for all resources (ms) */\n  globalCacheDuration?: number;\n\n  /** Maximum number of items in resource listings */\n  maxItems?: number;\n}\n\n/**\n * Central resource manager\n *\n * Coordinates all resource providers and handles global resource configuration.\n */\nexport class ResourceManager {\n  private config: Required<ResourceManagerConfig>;\n  private workflowResources?: WorkflowResourceManager;\n  private executionResources?: ExecutionResourceManager;\n\n  constructor(config: ResourceManagerConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://',\n      enableWorkflows: true,\n      enableExecutions: true,\n      enableCredentials: false, // Disabled by default for security\n      enableNodes: true,\n      globalCacheDuration: 5 * 60 * 1000, // 5 minutes\n      maxItems: 100,\n      ...config,\n    };\n  }\n\n  /**\n   * Register all enabled resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    console.log('üìö Registering n8n MCP resources...');\n\n    // Register workflow resources\n    if (this.config.enableWorkflows) {\n      this.workflowResources = createWorkflowResources({\n        baseUri: `${this.config.baseUri}workflows`,\n        maxWorkflows: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.workflowResources.register(server, getClient);\n    }\n\n    // Register execution resources\n    if (this.config.enableExecutions) {\n      this.executionResources = createExecutionResources({\n        baseUri: `${this.config.baseUri}executions`,\n        maxExecutions: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.executionResources.register(server, getClient);\n    }\n\n    // Register node documentation resources\n    if (this.config.enableNodes) {\n      this.registerNodeResources(server, getClient);\n    }\n\n    // Register credential template resources (if enabled)\n    if (this.config.enableCredentials) {\n      this.registerCredentialResources(server, getClient);\n    }\n\n    // Register general n8n information resources\n    this.registerGeneralResources(server, getClient);\n\n    console.log('‚úÖ All n8n MCP resources registered');\n  }\n\n  /**\n   * Register node documentation resources\n   */\n  private registerNodeResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Available nodes resource\n    server.addResource({\n      uri: `${this.config.baseUri}nodes/available`,\n      name: 'n8n Available Nodes',\n      mimeType: 'application/json',\n      load: async () => {\n        const nodes = await this.getAvailableNodes();\n        return {\n          text: JSON.stringify(nodes, null, 2),\n        };\n      },\n    });\n\n    // Node documentation template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}nodes/{nodeType}`,\n      name: 'n8n Node Documentation',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'nodeType',\n          description: 'The type of n8n node (e.g., \"n8n-nodes-base.httpRequest\")',\n          required: true,\n        },\n      ],\n      load: async ({ nodeType }: { nodeType: string }) => {\n        const nodeDoc = await this.getNodeDocumentation(nodeType);\n        return {\n          text: JSON.stringify(nodeDoc, null, 2),\n        };\n      },\n    });\n\n    console.log('üì¶ Node resources registered');\n  }\n\n  /**\n   * Register credential template resources\n   */\n  private registerCredentialResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Credential types resource\n    server.addResource({\n      uri: `${this.config.baseUri}credentials/types`,\n      name: 'n8n Credential Types',\n      mimeType: 'application/json',\n      load: async () => {\n        const credTypes = await this.getCredentialTypes();\n        return {\n          text: JSON.stringify(credTypes, null, 2),\n        };\n      },\n    });\n\n    // Credential template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}credentials/template/{credType}`,\n      name: 'n8n Credential Template',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'credType',\n          description: 'The credential type name',\n          required: true,\n        },\n      ],\n      load: async ({ credType }: { credType: string }) => {\n        const template = await this.getCredentialTemplate(credType);\n        return {\n          text: JSON.stringify(template, null, 2),\n        };\n      },\n    });\n\n    console.log('üîê Credential resources registered');\n  }\n\n  /**\n   * Register general n8n information resources\n   */\n  private registerGeneralResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // n8n instance information\n    server.addResource({\n      uri: `${this.config.baseUri}info`,\n      name: 'n8n Instance Information',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const info = await this.getInstanceInfo(client);\n        return {\n          text: JSON.stringify(info, null, 2),\n        };\n      },\n    });\n\n    // Resource directory/index\n    server.addResource({\n      uri: `${this.config.baseUri}index`,\n      name: 'n8n Resource Directory',\n      mimeType: 'application/json',\n      load: async () => {\n        const directory = this.getResourceDirectory();\n        return {\n          text: JSON.stringify(directory, null, 2),\n        };\n      },\n    });\n\n    console.log('‚ÑπÔ∏è  General resources registered');\n  }\n\n  /**\n   * Get available n8n nodes (mock data - would need to be retrieved from n8n API)\n   */\n  private async getAvailableNodes(): Promise<any> {\n    // This would typically fetch from n8n API or node registry\n    return {\n      nodes: [\n        {\n          name: 'HTTP Request',\n          type: 'n8n-nodes-base.httpRequest',\n          description: 'Makes HTTP requests and returns the response data',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'Code',\n          type: 'n8n-nodes-base.code',\n          description: 'Run custom JavaScript code',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'If',\n          type: 'n8n-nodes-base.if',\n          description: 'Conditional routing based on comparison operations',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        // More nodes would be listed here\n      ],\n      metadata: {\n        totalNodes: 500, // Example count\n        categories: ['Core Nodes', 'Trigger Nodes', 'Regular Nodes'],\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/available`,\n        type: 'n8n-available-nodes',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get node documentation\n   */\n  private async getNodeDocumentation(nodeType: string): Promise<any> {\n    // This would fetch actual node documentation from n8n\n    return {\n      nodeType,\n      name: nodeType.split('.').pop(),\n      description: `Documentation for ${nodeType}`,\n      parameters: [],\n      examples: [],\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/${nodeType}`,\n        type: 'n8n-node-documentation',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential types\n   */\n  private async getCredentialTypes(): Promise<any> {\n    return {\n      credentialTypes: [\n        {\n          name: 'httpBasicAuth',\n          displayName: 'Basic Auth',\n          properties: ['user', 'password'],\n        },\n        {\n          name: 'httpHeaderAuth',\n          displayName: 'Header Auth',\n          properties: ['name', 'value'],\n        },\n        // More credential types\n      ],\n      metadata: {\n        totalTypes: 50, // Example count\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/types`,\n        type: 'n8n-credential-types',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential template (without sensitive data)\n   */\n  private async getCredentialTemplate(credType: string): Promise<any> {\n    return {\n      credentialType: credType,\n      template: {\n        name: `${credType} Template`,\n        type: credType,\n        data: {\n          // Template structure without actual values\n          fields: ['user', 'password'], // Example fields\n        },\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/template/${credType}`,\n        type: 'n8n-credential-template',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get n8n instance information\n   */\n  private async getInstanceInfo(client: N8nClient): Promise<any> {\n    try {\n      // Attempt to gather instance information\n      const workflows = await client.getWorkflows({ limit: 1 });\n      const executions = await client.getExecutions({ limit: 1 });\n\n      return {\n        status: 'connected',\n        features: {\n          workflows: true,\n          executions: true,\n          // Test for Enterprise features\n          projects: await this.testFeature(() => client.getProjects({ limit: 1 })),\n          users: await this.testFeature(() => client.getUsers({ limit: 1 })),\n          variables: await this.testFeature(() => client.getVariables({ limit: 1 })),\n        },\n        statistics: {\n          totalWorkflows: workflows.data.length,\n          totalExecutions: executions.data.length,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        error: error instanceof Error ? error.message : String(error),\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    }\n  }\n\n  /**\n   * Test if a feature is available\n   */\n  private async testFeature(testFn: () => Promise<any>): Promise<boolean> {\n    try {\n      await testFn();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get resource directory\n   */\n  private getResourceDirectory(): any {\n    const resources: any[] = [];\n\n    if (this.config.enableWorkflows) {\n      resources.push({\n        name: 'Workflows',\n        baseUri: `${this.config.baseUri}workflows`,\n        description: 'Access n8n workflow definitions and metadata',\n        endpoints: [\n          `${this.config.baseUri}workflows/list`,\n          `${this.config.baseUri}workflows/active`,\n          `${this.config.baseUri}workflows/stats`,\n          `${this.config.baseUri}workflows/{id}`,\n        ],\n      });\n    }\n\n    if (this.config.enableExecutions) {\n      resources.push({\n        name: 'Executions',\n        baseUri: `${this.config.baseUri}executions`,\n        description: 'Access n8n execution data, logs, and statistics',\n        endpoints: [\n          `${this.config.baseUri}executions/recent`,\n          `${this.config.baseUri}executions/failures`,\n          `${this.config.baseUri}executions/stats`,\n          `${this.config.baseUri}executions/{id}`,\n          `${this.config.baseUri}executions/{id}/logs`,\n        ],\n      });\n    }\n\n    if (this.config.enableNodes) {\n      resources.push({\n        name: 'Nodes',\n        baseUri: `${this.config.baseUri}nodes`,\n        description: 'Access n8n node documentation and information',\n        endpoints: [\n          `${this.config.baseUri}nodes/available`,\n          `${this.config.baseUri}nodes/{nodeType}`,\n        ],\n      });\n    }\n\n    return {\n      resources,\n      metadata: {\n        totalResources: resources.length,\n        baseUri: this.config.baseUri,\n        version: '1.0',\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}index`,\n        type: 'n8n-resource-directory',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Clear all resource caches\n   */\n  public clearAllCaches(): void {\n    this.workflowResources?.clearCache();\n    this.executionResources?.clearCache();\n    console.log('üßπ All resource caches cleared');\n  }\n\n  /**\n   * Get cache statistics for all resources\n   */\n  public getAllCacheStats(): any {\n    return {\n      workflows: this.workflowResources?.getCacheStats() || { size: 0, keys: [] },\n      executions: this.executionResources?.getCacheStats() || { size: 0, keys: [] },\n    };\n  }\n}\n\n/**\n * Create resource manager\n */\nexport function createResourceManager(config?: ResourceManagerConfig): ResourceManager {\n  return new ResourceManager(config);\n}\n\n/**\n * Environment variable configuration for resources\n */\nexport const RESOURCE_ENV_CONFIG = {\n  /** Base URI for resources */\n  BASE_URI: 'N8N_MCP_RESOURCE_BASE_URI',\n\n  /** Enable/disable specific resource types */\n  ENABLE_WORKFLOWS: 'N8N_MCP_ENABLE_WORKFLOW_RESOURCES',\n  ENABLE_EXECUTIONS: 'N8N_MCP_ENABLE_EXECUTION_RESOURCES',\n  ENABLE_CREDENTIALS: 'N8N_MCP_ENABLE_CREDENTIAL_RESOURCES',\n  ENABLE_NODES: 'N8N_MCP_ENABLE_NODE_RESOURCES',\n\n  /** Global configuration */\n  CACHE_DURATION: 'N8N_MCP_RESOURCE_CACHE_DURATION',\n  MAX_ITEMS: 'N8N_MCP_RESOURCE_MAX_ITEMS',\n} as const;\n\n/**\n * Parse resource configuration from environment variables\n */\nexport function parseResourceConfigFromEnv(): ResourceManagerConfig {\n  return {\n    baseUri: process.env[RESOURCE_ENV_CONFIG.BASE_URI] || undefined,\n    enableWorkflows: process.env[RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] !== 'false',\n    enableExecutions: process.env[RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS] !== 'false',\n    enableCredentials: process.env[RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] === 'true',\n    enableNodes: process.env[RESOURCE_ENV_CONFIG.ENABLE_NODES] !== 'false',\n    globalCacheDuration: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION];\n      return value ? parseInt(value) : undefined;\n    })(),\n    maxItems: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS];\n      return value ? parseInt(value) : undefined;\n    })(),\n  };\n}\n"],"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","ignoreList":[]}