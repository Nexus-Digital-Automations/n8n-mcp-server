{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/sseTransport.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/sseTransport.ts"],"sourcesContent":["/**\n * SSE Transport Implementation for n8n MCP Server\n *\n * Provides Server-Sent Events (SSE) transport capability for remote access to the n8n MCP server.\n * Enables web-based clients to connect and use n8n tools through HTTP/SSE protocol.\n */\n\nimport { FastMCP } from 'fastmcp';\nimport type { TransportConfig } from './transportConfig.js';\n\n/**\n * SSE Transport Manager\n *\n * Handles SSE server configuration, health checks, and connection management\n * for the n8n MCP server.\n */\nexport class SSETransportManager {\n  private server: FastMCP;\n  private config: TransportConfig;\n\n  constructor(server: FastMCP, config: TransportConfig) {\n    this.server = server;\n    this.config = config;\n  }\n\n  /**\n   * Start the SSE transport server\n   */\n  public async start(): Promise<void> {\n    if (this.config.type !== 'sse' || !this.config.sse) {\n      throw new Error('SSE transport not configured');\n    }\n\n    const { port, endpoint, host, healthCheck } = this.config.sse;\n\n    console.log(`üöÄ Starting n8n MCP Server with SSE transport`);\n    console.log(`üì° Server will be available at: http://${host}:${port}${endpoint}`);\n\n    // Configure FastMCP server for SSE transport\n    await this.server.start({\n      transportType: 'httpStream',\n      httpStream: {\n        port,\n        endpoint: endpoint as `/${string}`,\n      },\n    });\n\n    // Add health check endpoint if enabled\n    if (healthCheck.enabled) {\n      this.setupHealthCheck();\n    }\n\n    this.logServerInfo();\n  }\n\n  /**\n   * Setup health check endpoint\n   */\n  private setupHealthCheck(): void {\n    if (!this.config.sse?.healthCheck) return;\n\n    const healthEndpoint = this.config.sse.healthCheck.endpoint;\n\n    // Note: FastMCP automatically handles health checks\n    // This is a placeholder for custom health check logic if needed\n    console.log(`üíö Health check endpoint: ${healthEndpoint}`);\n  }\n\n  /**\n   * Log server information and connection details\n   */\n  private logServerInfo(): void {\n    if (!this.config.sse) return;\n\n    const { port, endpoint, host, cors } = this.config.sse;\n\n    console.log('\\nüìã Server Configuration:');\n    console.log(`   Transport: SSE (Server-Sent Events)`);\n    console.log(`   Host: ${host}`);\n    console.log(`   Port: ${port}`);\n    console.log(`   Endpoint: ${endpoint}`);\n    console.log(`   CORS: ${cors.enabled ? 'Enabled' : 'Disabled'}`);\n\n    if (cors.enabled) {\n      console.log(`   Allowed Origins: ${cors.origins.join(', ')}`);\n      console.log(`   Credentials: ${cors.credentials ? 'Allowed' : 'Not allowed'}`);\n    }\n\n    console.log('\\nüîå Connection Instructions:');\n    console.log('   For MCP Inspector:');\n    console.log(`   npx @modelcontextprotocol/inspector http://${host}:${port}${endpoint}`);\n    console.log('');\n    console.log('   For Claude Desktop (claude_desktop_config.json):');\n    console.log('   {');\n    console.log('     \"mcpServers\": {');\n    console.log('       \"n8n\": {');\n    console.log(`         \"command\": \"npx\",`);\n    console.log(`         \"args\": [\"@illuminaresolutions/n8n-mcp-server\"],`);\n    console.log(`         \"env\": {`);\n    console.log(`           \"N8N_MCP_TRANSPORT\": \"sse\",`);\n    console.log(`           \"N8N_MCP_SSE_PORT\": \"${port}\",`);\n    console.log(`           \"N8N_MCP_SSE_HOST\": \"${host}\"`);\n    console.log(`         }`);\n    console.log('       }');\n    console.log('     }');\n    console.log('   }');\n    console.log('');\n  }\n\n  /**\n   * Stop the server (cleanup)\n   */\n  public async stop(): Promise<void> {\n    console.log('üõë Stopping SSE transport server...');\n    // FastMCP handles cleanup automatically\n  }\n}\n\n/**\n * Create and configure SSE transport for FastMCP server\n */\nexport function createSSETransport(server: FastMCP, config: TransportConfig): SSETransportManager {\n  return new SSETransportManager(server, config);\n}\n\n/**\n * SSE-specific utilities and helpers\n */\nexport const SSEUtils = {\n  /**\n   * Validate SSE configuration\n   */\n  validateConfig(config: TransportConfig): boolean {\n    if (config.type !== 'sse') return false;\n    if (!config.sse) return false;\n\n    const { port, endpoint } = config.sse;\n\n    // Port validation\n    if (port < 1024 || port > 65535) {\n      console.error(`‚ùå Invalid port: ${port}. Must be between 1024-65535`);\n      return false;\n    }\n\n    // Endpoint validation\n    if (!endpoint.startsWith('/')) {\n      console.error(`‚ùå Invalid endpoint: ${endpoint}. Must start with '/'`);\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * Get connection URL for the SSE server\n   */\n  getConnectionUrl(config: TransportConfig): string | null {\n    if (config.type !== 'sse' || !config.sse) return null;\n\n    const { host, port, endpoint } = config.sse;\n    const protocol = port === 443 ? 'https' : 'http';\n    return `${protocol}://${host}:${port}${endpoint}`;\n  },\n\n  /**\n   * Format connection instructions for different clients\n   */\n  formatConnectionInstructions(config: TransportConfig): {\n    inspector: string;\n    claudeDesktop: object;\n    curl: string;\n  } | null {\n    const url = this.getConnectionUrl(config);\n    if (!url) return null;\n\n    return {\n      inspector: `npx @modelcontextprotocol/inspector ${url}`,\n      claudeDesktop: {\n        mcpServers: {\n          n8n: {\n            command: 'npx',\n            args: ['@illuminaresolutions/n8n-mcp-server'],\n            env: {\n              N8N_MCP_TRANSPORT: 'sse',\n              N8N_MCP_SSE_PORT: config.sse?.port.toString(),\n              N8N_MCP_SSE_HOST: config.sse?.host,\n            },\n          },\n        },\n      },\n      curl: `curl -N -H \"Accept: text/event-stream\" ${url}`,\n    };\n  },\n};\n\n/**\n * Default SSE server configuration\n */\nexport const DEFAULT_SSE_CONFIG = {\n  port: 8080,\n  endpoint: '/sse',\n  host: 'localhost',\n  cors: {\n    enabled: true,\n    origins: ['*'],\n    credentials: false,\n  },\n  healthCheck: {\n    enabled: true,\n    endpoint: '/health',\n  },\n} as const;\n"],"version":3}