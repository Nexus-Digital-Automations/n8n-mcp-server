4382ff4186c55aac2e46be1739c54b1c
"use strict";
/**
 * SSE Transport Implementation for n8n MCP Server
 *
 * Provides Server-Sent Events (SSE) transport capability for remote access to the n8n MCP server.
 * Enables web-based clients to connect and use n8n tools through HTTP/SSE protocol.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SSE_CONFIG = exports.SSEUtils = exports.SSETransportManager = void 0;
exports.createSSETransport = createSSETransport;
/**
 * SSE Transport Manager
 *
 * Handles SSE server configuration, health checks, and connection management
 * for the n8n MCP server.
 */
class SSETransportManager {
    server;
    config;
    constructor(server, config) {
        this.server = server;
        this.config = config;
    }
    /**
     * Start the SSE transport server
     */
    async start() {
        if (this.config.type !== 'sse' || !this.config.sse) {
            throw new Error('SSE transport not configured');
        }
        const { port, endpoint, host, healthCheck } = this.config.sse;
        console.log(`üöÄ Starting n8n MCP Server with SSE transport`);
        console.log(`üì° Server will be available at: http://${host}:${port}${endpoint}`);
        // Configure FastMCP server for SSE transport
        await this.server.start({
            transportType: 'httpStream',
            httpStream: {
                port,
                endpoint: endpoint,
            },
        });
        // Add health check endpoint if enabled
        if (healthCheck.enabled) {
            this.setupHealthCheck();
        }
        this.logServerInfo();
    }
    /**
     * Setup health check endpoint
     */
    setupHealthCheck() {
        if (!this.config.sse?.healthCheck)
            return;
        const healthEndpoint = this.config.sse.healthCheck.endpoint;
        // Note: FastMCP automatically handles health checks
        // This is a placeholder for custom health check logic if needed
        console.log(`üíö Health check endpoint: ${healthEndpoint}`);
    }
    /**
     * Log server information and connection details
     */
    logServerInfo() {
        if (!this.config.sse)
            return;
        const { port, endpoint, host, cors } = this.config.sse;
        console.log('\nüìã Server Configuration:');
        console.log(`   Transport: SSE (Server-Sent Events)`);
        console.log(`   Host: ${host}`);
        console.log(`   Port: ${port}`);
        console.log(`   Endpoint: ${endpoint}`);
        console.log(`   CORS: ${cors.enabled ? 'Enabled' : 'Disabled'}`);
        if (cors.enabled) {
            console.log(`   Allowed Origins: ${cors.origins.join(', ')}`);
            console.log(`   Credentials: ${cors.credentials ? 'Allowed' : 'Not allowed'}`);
        }
        console.log('\nüîå Connection Instructions:');
        console.log('   For MCP Inspector:');
        console.log(`   npx @modelcontextprotocol/inspector http://${host}:${port}${endpoint}`);
        console.log('');
        console.log('   For Claude Desktop (claude_desktop_config.json):');
        console.log('   {');
        console.log('     "mcpServers": {');
        console.log('       "n8n": {');
        console.log(`         "command": "npx",`);
        console.log(`         "args": ["@illuminaresolutions/n8n-mcp-server"],`);
        console.log(`         "env": {`);
        console.log(`           "N8N_MCP_TRANSPORT": "sse",`);
        console.log(`           "N8N_MCP_SSE_PORT": "${port}",`);
        console.log(`           "N8N_MCP_SSE_HOST": "${host}"`);
        console.log(`         }`);
        console.log('       }');
        console.log('     }');
        console.log('   }');
        console.log('');
    }
    /**
     * Stop the server (cleanup)
     */
    async stop() {
        console.log('üõë Stopping SSE transport server...');
        // FastMCP handles cleanup automatically
    }
}
exports.SSETransportManager = SSETransportManager;
/**
 * Create and configure SSE transport for FastMCP server
 */
function createSSETransport(server, config) {
    return new SSETransportManager(server, config);
}
/**
 * SSE-specific utilities and helpers
 */
exports.SSEUtils = {
    /**
     * Validate SSE configuration
     */
    validateConfig(config) {
        if (config.type !== 'sse')
            return false;
        if (!config.sse)
            return false;
        const { port, endpoint } = config.sse;
        // Port validation
        if (port < 1024 || port > 65535) {
            console.error(`‚ùå Invalid port: ${port}. Must be between 1024-65535`);
            return false;
        }
        // Endpoint validation
        if (!endpoint.startsWith('/')) {
            console.error(`‚ùå Invalid endpoint: ${endpoint}. Must start with '/'`);
            return false;
        }
        return true;
    },
    /**
     * Get connection URL for the SSE server
     */
    getConnectionUrl(config) {
        if (config.type !== 'sse' || !config.sse)
            return null;
        const { host, port, endpoint } = config.sse;
        const protocol = port === 443 ? 'https' : 'http';
        return `${protocol}://${host}:${port}${endpoint}`;
    },
    /**
     * Format connection instructions for different clients
     */
    formatConnectionInstructions(config) {
        const url = this.getConnectionUrl(config);
        if (!url)
            return null;
        return {
            inspector: `npx @modelcontextprotocol/inspector ${url}`,
            claudeDesktop: {
                mcpServers: {
                    n8n: {
                        command: 'npx',
                        args: ['@illuminaresolutions/n8n-mcp-server'],
                        env: {
                            N8N_MCP_TRANSPORT: 'sse',
                            N8N_MCP_SSE_PORT: config.sse?.port.toString(),
                            N8N_MCP_SSE_HOST: config.sse?.host,
                        },
                    },
                },
            },
            curl: `curl -N -H "Accept: text/event-stream" ${url}`,
        };
    },
};
/**
 * Default SSE server configuration
 */
exports.DEFAULT_SSE_CONFIG = {
    port: 8080,
    endpoint: '/sse',
    host: 'localhost',
    cors: {
        enabled: true,
        origins: ['*'],
        credentials: false,
    },
    healthCheck: {
        enabled: true,
        endpoint: '/health',
    },
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,