{"version":3,"names":["cov_1mp0bgbitd","actualCoverage","z","UserError","WorkflowSettingsSchema","s","object","workflowId","string","min","settings","record","any","ErrorNotificationSchema","enableNotifications","boolean","notificationSettings","email","optional","webhook","url","slack","retryAttempts","number","max","default","notifyOnFailure","notifyOnSuccess","PerformanceTrackingSchema","timeframe","enum","includeMetrics","array","WorkflowHealthSchema","checkType","includeRecommendations","AlertRuleSchema","ruleName","condition","threshold","action","actionConfig","createMonitoringTools","getClient","server","f","addTool","name","description","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","client","b","workflow","getWorkflow","updatedSettings","updateWorkflow","JSON","stringify","error","message","notificationConfig","errorNotifications","configuredAt","Date","toISOString","notifications","now","timeframeDuration","hour","day","week","month","startTime","getTime","workflows","response","getWorkflows","limit","data","performanceReport","toLocaleString","executions","getExecutions","recentExecutions","filter","execution","id","startedAt","length","metrics","totalExecutions","successfulExecutions","e","status","failedExecutions","runningExecutions","averageExecutionTime","minExecutionTime","maxExecutionTime","successRate","errorRate","completedExecutions","executionTimes","stoppedAt","map","reduce","a","Math","active","includes","toFixed","performanceRating","recommendations","push","forEach","rec","split","healthReport","healthScore","configuration","security","performance","reliability","maintainability","overall","issues","warnings","nodes","nodeTypes","node","type","uniqueNodeTypes","Set","nodesWithCredentials","credentials","Object","keys","some","cred","toLowerCase","heavyNodes","heavy","errorHandlingNodes","debugNodes","round","healthRating","issue","warning","tags","join","updatedAt","alertRule","enabled","createdAt","currentSettings","existingAlerts","Array","isArray","alertRules","updatedAlerts","thresholdDescription","actionDescription","includeInactive","workflowsResponse","allWorkflows","w","dashboard","totalSuccessful","totalFailed","totalRunning","workflowStatuses","slice","successful","failed","running","_error","systemSuccessRate","ws","workflowsWithAlerts","alertCount"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/monitoring.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\n// Zod schemas for monitoring and configuration\nconst WorkflowSettingsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  settings: z.record(z.any()),\n});\n\nconst ErrorNotificationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  enableNotifications: z.boolean(),\n  notificationSettings: z\n    .object({\n      email: z.string().email().optional(),\n      webhook: z.string().url().optional(),\n      slack: z.string().optional(),\n      retryAttempts: z.number().min(0).max(10).optional().default(3),\n      notifyOnFailure: z.boolean().optional().default(true),\n      notifyOnSuccess: z.boolean().optional().default(false),\n    })\n    .optional(),\n});\n\nconst PerformanceTrackingSchema = z.object({\n  workflowId: z.string().optional(),\n  timeframe: z.enum(['hour', 'day', 'week', 'month']).optional().default('day'),\n  includeMetrics: z\n    .array(\n      z.enum(['execution-time', 'success-rate', 'error-rate', 'node-performance', 'resource-usage'])\n    )\n    .optional()\n    .default(['execution-time', 'success-rate', 'error-rate']),\n});\n\nconst WorkflowHealthSchema = z.object({\n  workflowId: z.string().optional(),\n  checkType: z.enum(['basic', 'detailed', 'comprehensive']).optional().default('basic'),\n  includeRecommendations: z.boolean().optional().default(true),\n});\n\nconst AlertRuleSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  ruleName: z.string().min(1, 'Rule name is required'),\n  condition: z.enum([\n    'execution-time-exceeds',\n    'error-rate-exceeds',\n    'success-rate-below',\n    'consecutive-failures',\n  ]),\n  threshold: z.number().min(0),\n  action: z.enum(['email', 'webhook', 'disable-workflow', 'log-only']),\n  actionConfig: z.record(z.any()).optional(),\n});\n\n// Tool registration function for advanced monitoring tools\nexport function createMonitoringTools(getClient: () => N8nClient | null, server: any) {\n  // Configure workflow settings\n  server.addTool({\n    name: 'configure-workflow-settings',\n    description:\n      'Configure advanced workflow settings including timeouts, retries, error handling, and execution policies',\n    parameters: WorkflowSettingsSchema,\n    annotations: {\n      title: 'Configure Workflow Settings',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowSettingsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Merge new settings with existing settings\n        const updatedSettings = {\n          ...workflow.settings,\n          ...args.settings,\n        };\n\n        // Update the workflow with new settings\n        await client.updateWorkflow(args.workflowId, {\n          settings: updatedSettings,\n        });\n\n        return (\n          `Successfully updated workflow settings for \"${workflow.name}\":\\n\\n` +\n          `**Applied Settings:**\\n\\`\\`\\`json\\n${JSON.stringify(args.settings, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Current Complete Settings:**\\n\\`\\`\\`json\\n${JSON.stringify(updatedSettings, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Common Setting Options:**\\n` +\n          `- \\`timeout\\`: Execution timeout in seconds\\n` +\n          `- \\`retryOnFail\\`: Number of retry attempts on failure\\n` +\n          `- \\`maxExecutionTime\\`: Maximum execution time limit\\n` +\n          `- \\`saveExecutionProgress\\`: Save intermediate execution data\\n` +\n          `- \\`saveDataErrorExecution\\`: Save data on error executions\\n` +\n          `- \\`saveDataSuccessExecution\\`: Save data on successful executions\\n` +\n          `- \\`saveManualExecutions\\`: Save manually triggered executions\\n` +\n          `- \\`callerPolicy\\`: Execution caller policy restrictions\\n` +\n          `- \\`errorWorkflow\\`: Workflow to run on error\\n` +\n          `- \\`timezone\\`: Timezone for scheduled executions`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure workflow settings: ${error.message}`);\n      }\n    },\n  });\n\n  // Setup error notifications\n  server.addTool({\n    name: 'setup-error-notifications',\n    description:\n      'Configure error notifications and alerting for workflow failures and performance issues',\n    parameters: ErrorNotificationSchema,\n    annotations: {\n      title: 'Setup Error Notifications',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ErrorNotificationSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Configure notification settings\n        const notificationConfig = {\n          errorNotifications: args.enableNotifications,\n          notificationSettings: args.notificationSettings || {},\n          configuredAt: new Date().toISOString(),\n        };\n\n        // Update workflow settings with notification configuration\n        const updatedSettings = {\n          ...workflow.settings,\n          notifications: notificationConfig,\n        };\n\n        await client.updateWorkflow(args.workflowId, {\n          settings: updatedSettings,\n        });\n\n        return (\n          `${args.enableNotifications ? '✅ Enabled' : '❌ Disabled'} error notifications for workflow \"${workflow.name}\":\\n\\n` +\n          `**Notification Configuration:**\\n` +\n          `- Notifications Enabled: ${args.enableNotifications ? 'Yes' : 'No'}\\n` +\n          `- Retry Attempts: ${args.notificationSettings?.retryAttempts || 3}\\n` +\n          `- Notify on Failure: ${args.notificationSettings?.notifyOnFailure ? 'Yes' : 'No'}\\n` +\n          `- Notify on Success: ${args.notificationSettings?.notifyOnSuccess ? 'Yes' : 'No'}\\n\\n` +\n          `**Notification Channels:**\\n` +\n          `- Email: ${args.notificationSettings?.email || 'Not configured'}\\n` +\n          `- Webhook: ${args.notificationSettings?.webhook || 'Not configured'}\\n` +\n          `- Slack: ${args.notificationSettings?.slack || 'Not configured'}\\n\\n` +\n          `**Full Configuration:**\\n\\`\\`\\`json\\n${JSON.stringify(notificationConfig, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Note:** In a production environment, you would also need to configure the actual notification channels (email server, webhook endpoints, Slack integration) in your n8n instance settings.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to setup error notifications: ${error.message}`);\n      }\n    },\n  });\n\n  // Performance tracking and metrics\n  server.addTool({\n    name: 'track-workflow-performance',\n    description:\n      'Track and analyze workflow performance metrics including execution times, success rates, and resource usage',\n    parameters: PerformanceTrackingSchema,\n    annotations: {\n      title: 'Track Workflow Performance',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof PerformanceTrackingSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Calculate timeframe for analysis\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n          month: 30 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(now.getTime() - timeframeDuration[args.timeframe]);\n\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 50 });\n          workflows = response.data;\n        }\n\n        let performanceReport = `**Workflow Performance Report** (${args.timeframe})\\n`;\n        performanceReport += `**Analysis Period:** ${startTime.toLocaleString()} to ${now.toLocaleString()}\\n\\n`;\n\n        for (const workflow of workflows) {\n          // Get recent executions for the workflow\n          const executions = await client.getExecutions({\n            limit: 100,\n          });\n\n          // Filter executions by timeframe and workflow ID\n          const recentExecutions = executions.data.filter(\n            execution =>\n              execution.workflowId === workflow.id && new Date(execution.startedAt) >= startTime\n          );\n\n          if (recentExecutions.length === 0 && args.workflowId) {\n            return `No executions found for workflow \"${workflow.name}\" in the specified timeframe (${args.timeframe}).`;\n          }\n\n          if (recentExecutions.length === 0) {\n            continue; // Skip workflows with no recent executions\n          }\n\n          const metrics = {\n            totalExecutions: recentExecutions.length,\n            successfulExecutions: recentExecutions.filter(e => e.status === 'success').length,\n            failedExecutions: recentExecutions.filter(e => e.status === 'error').length,\n            runningExecutions: recentExecutions.filter(e => e.status === 'running').length,\n            averageExecutionTime: 0,\n            minExecutionTime: 0,\n            maxExecutionTime: 0,\n            successRate: 0,\n            errorRate: 0,\n          };\n\n          // Calculate execution times for completed executions\n          const completedExecutions = recentExecutions.filter(\n            e => e.status === 'success' || e.status === 'error'\n          );\n\n          if (completedExecutions.length > 0) {\n            const executionTimes = completedExecutions\n              .filter(e => e.stoppedAt)\n              .map(e => new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime());\n\n            if (executionTimes.length > 0) {\n              metrics.averageExecutionTime =\n                executionTimes.reduce((a, b) => a + b, 0) / executionTimes.length;\n              metrics.minExecutionTime = Math.min(...executionTimes);\n              metrics.maxExecutionTime = Math.max(...executionTimes);\n            }\n          }\n\n          metrics.successRate = (metrics.successfulExecutions / metrics.totalExecutions) * 100;\n          metrics.errorRate = (metrics.failedExecutions / metrics.totalExecutions) * 100;\n\n          performanceReport += `### ${workflow.name} (${workflow.id})\\n`;\n          performanceReport += `**Status:** ${workflow.active ? '🟢 Active' : '🔴 Inactive'}\\n\\n`;\n\n          // Execution metrics\n          if (args.includeMetrics.includes('execution-time')) {\n            performanceReport += `**Execution Time Metrics:**\\n`;\n            performanceReport += `- Average: ${(metrics.averageExecutionTime / 1000).toFixed(2)}s\\n`;\n            performanceReport += `- Minimum: ${(metrics.minExecutionTime / 1000).toFixed(2)}s\\n`;\n            performanceReport += `- Maximum: ${(metrics.maxExecutionTime / 1000).toFixed(2)}s\\n\\n`;\n          }\n\n          // Success/Error rates\n          if (\n            args.includeMetrics.includes('success-rate') ||\n            args.includeMetrics.includes('error-rate')\n          ) {\n            performanceReport += `**Execution Statistics:**\\n`;\n            performanceReport += `- Total Executions: ${metrics.totalExecutions}\\n`;\n            performanceReport += `- Successful: ${metrics.successfulExecutions} (${metrics.successRate.toFixed(1)}%)\\n`;\n            performanceReport += `- Failed: ${metrics.failedExecutions} (${metrics.errorRate.toFixed(1)}%)\\n`;\n            performanceReport += `- Running: ${metrics.runningExecutions}\\n\\n`;\n          }\n\n          // Performance assessment\n          const performanceRating =\n            metrics.successRate >= 95 && metrics.averageExecutionTime < 10000\n              ? '🟢 Excellent'\n              : metrics.successRate >= 90 && metrics.averageExecutionTime < 30000\n                ? '🟡 Good'\n                : metrics.successRate >= 80\n                  ? '🟠 Fair'\n                  : '🔴 Poor';\n\n          performanceReport += `**Performance Rating:** ${performanceRating}\\n`;\n\n          // Recommendations\n          const recommendations = [];\n          if (metrics.errorRate > 10) {\n            recommendations.push(\n              'High error rate detected - review workflow logic and error handling'\n            );\n          }\n          if (metrics.averageExecutionTime > 30000) {\n            recommendations.push(\n              'Long execution times - consider optimizing slow nodes or breaking into smaller workflows'\n            );\n          }\n          if (metrics.successRate < 90) {\n            recommendations.push('Low success rate - investigate common failure patterns');\n          }\n          if (recommendations.length === 0) {\n            recommendations.push('Workflow is performing well - no immediate optimizations needed');\n          }\n\n          performanceReport += `**Recommendations:**\\n`;\n          recommendations.forEach(rec => {\n            performanceReport += `- ${rec}\\n`;\n          });\n          performanceReport += '\\n';\n        }\n\n        if (workflows.length === 0 || performanceReport.split('###').length <= 1) {\n          return `No workflows with recent executions found in the specified timeframe (${args.timeframe}).`;\n        }\n\n        return performanceReport;\n      } catch (error: any) {\n        throw new UserError(`Failed to track workflow performance: ${error.message}`);\n      }\n    },\n  });\n\n  // Workflow health check\n  server.addTool({\n    name: 'check-workflow-health',\n    description:\n      'Perform comprehensive health checks on workflows including configuration validation, dependency analysis, and optimization recommendations',\n    parameters: WorkflowHealthSchema,\n    annotations: {\n      title: 'Check Workflow Health',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowHealthSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        let workflows: N8nWorkflow[] = [];\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 20 });\n          workflows = response.data;\n        }\n\n        let healthReport = `**Workflow Health Check Report**\\n`;\n        healthReport += `**Check Type:** ${args.checkType}\\n`;\n        healthReport += `**Generated:** ${new Date().toLocaleString()}\\n\\n`;\n\n        for (const workflow of workflows) {\n          const healthScore = {\n            configuration: 100,\n            security: 100,\n            performance: 100,\n            reliability: 100,\n            maintainability: 100,\n            overall: 100,\n          };\n\n          const issues = [];\n          const warnings = [];\n          const recommendations = [];\n\n          // Basic health checks\n          if (!workflow.nodes || workflow.nodes.length === 0) {\n            issues.push('Workflow has no nodes');\n            healthScore.configuration -= 50;\n          }\n\n          if (!workflow.active) {\n            warnings.push('Workflow is inactive');\n            healthScore.reliability -= 10;\n          }\n\n          // Node analysis\n          if (workflow.nodes && workflow.nodes.length > 0) {\n            const nodeTypes = workflow.nodes.map(node => node.type);\n            const uniqueNodeTypes = [...new Set(nodeTypes)];\n\n            // Check for common issues\n            if (workflow.nodes.length > 50) {\n              warnings.push(\n                'Workflow has many nodes (>50) - consider breaking into smaller workflows'\n              );\n              healthScore.maintainability -= 20;\n            }\n\n            // Check for missing credentials\n            const nodesWithCredentials = workflow.nodes.filter(\n              node => node.credentials && Object.keys(node.credentials).length > 0\n            );\n\n            if (\n              nodesWithCredentials.length === 0 &&\n              uniqueNodeTypes.some(type =>\n                ['http-request', 'gmail', 'slack', 'webhook'].some(cred =>\n                  type.toLowerCase().includes(cred)\n                )\n              )\n            ) {\n              issues.push(\n                'Nodes that typically require credentials found without credential configuration'\n              );\n              healthScore.security -= 30;\n            }\n\n            // Performance analysis\n            if (args.checkType === 'detailed' || args.checkType === 'comprehensive') {\n              const heavyNodes = workflow.nodes.filter(node =>\n                ['code', 'function', 'python', 'loop', 'merge'].some(heavy =>\n                  node.type.toLowerCase().includes(heavy)\n                )\n              );\n\n              if (heavyNodes.length > workflow.nodes.length * 0.3) {\n                warnings.push('High percentage of resource-intensive nodes detected');\n                healthScore.performance -= 15;\n              }\n            }\n\n            // Comprehensive analysis\n            if (args.checkType === 'comprehensive') {\n              // Check for error handling\n              const errorHandlingNodes = workflow.nodes.filter(\n                node => node.parameters && JSON.stringify(node.parameters).includes('error')\n              );\n\n              if (errorHandlingNodes.length === 0) {\n                recommendations.push('Consider adding error handling nodes for better reliability');\n                healthScore.reliability -= 10;\n              }\n\n              // Check for testing/debugging features\n              const debugNodes = workflow.nodes.filter(node =>\n                ['sticky-note', 'no-op', 'set'].includes(node.type.toLowerCase())\n              );\n\n              if (debugNodes.length === 0 && workflow.nodes.length > 5) {\n                recommendations.push(\n                  'Consider adding debugging/documentation nodes for better maintainability'\n                );\n                healthScore.maintainability -= 5;\n              }\n            }\n          }\n\n          // Calculate overall health score\n          healthScore.overall = Math.round(\n            (healthScore.configuration +\n              healthScore.security +\n              healthScore.performance +\n              healthScore.reliability +\n              healthScore.maintainability) /\n              5\n          );\n\n          // Health rating\n          const healthRating =\n            healthScore.overall >= 90\n              ? '🟢 Excellent'\n              : healthScore.overall >= 80\n                ? '🟡 Good'\n                : healthScore.overall >= 70\n                  ? '🟠 Fair'\n                  : healthScore.overall >= 60\n                    ? '🔴 Poor'\n                    : '🚨 Critical';\n\n          healthReport += `### ${workflow.name} (${workflow.id})\\n`;\n          healthReport += `**Overall Health:** ${healthRating} (${healthScore.overall}/100)\\n\\n`;\n\n          if (args.checkType === 'detailed' || args.checkType === 'comprehensive') {\n            healthReport += `**Detailed Scores:**\\n`;\n            healthReport += `- Configuration: ${healthScore.configuration}/100\\n`;\n            healthReport += `- Security: ${healthScore.security}/100\\n`;\n            healthReport += `- Performance: ${healthScore.performance}/100\\n`;\n            healthReport += `- Reliability: ${healthScore.reliability}/100\\n`;\n            healthReport += `- Maintainability: ${healthScore.maintainability}/100\\n\\n`;\n          }\n\n          if (issues.length > 0) {\n            healthReport += `**❌ Issues (${issues.length}):**\\n`;\n            issues.forEach(issue => {\n              healthReport += `- ${issue}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          if (warnings.length > 0) {\n            healthReport += `**⚠️ Warnings (${warnings.length}):**\\n`;\n            warnings.forEach(warning => {\n              healthReport += `- ${warning}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          if (args.includeRecommendations && recommendations.length > 0) {\n            healthReport += `**💡 Recommendations (${recommendations.length}):**\\n`;\n            recommendations.forEach(rec => {\n              healthReport += `- ${rec}\\n`;\n            });\n            healthReport += '\\n';\n          }\n\n          // Basic workflow info\n          healthReport += `**Workflow Details:**\\n`;\n          healthReport += `- Status: ${workflow.active ? '🟢 Active' : '🔴 Inactive'}\\n`;\n          healthReport += `- Nodes: ${workflow.nodes?.length || 0}\\n`;\n          healthReport += `- Tags: ${workflow.tags?.join(', ') || 'None'}\\n`;\n          if (workflow.updatedAt) {\n            healthReport += `- Last Modified: ${new Date(workflow.updatedAt).toLocaleString()}\\n`;\n          }\n          healthReport += '\\n';\n        }\n\n        return healthReport;\n      } catch (error: any) {\n        throw new UserError(`Failed to check workflow health: ${error.message}`);\n      }\n    },\n  });\n\n  // Create alert rules\n  server.addTool({\n    name: 'create-alert-rule',\n    description:\n      'Create custom alert rules for workflow monitoring based on performance thresholds and conditions',\n    parameters: AlertRuleSchema,\n    annotations: {\n      title: 'Create Alert Rule',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AlertRuleSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Create alert rule configuration\n        const alertRule = {\n          id: `alert_${Date.now()}`,\n          name: args.ruleName,\n          condition: args.condition,\n          threshold: args.threshold,\n          action: args.action,\n          actionConfig: args.actionConfig || {},\n          enabled: true,\n          createdAt: new Date().toISOString(),\n        };\n\n        // Get existing alert rules or initialize empty array\n        const currentSettings = workflow.settings || {};\n        const existingAlerts = Array.isArray(currentSettings.alertRules)\n          ? currentSettings.alertRules\n          : [];\n\n        // Add new alert rule\n        const updatedAlerts = [...existingAlerts, alertRule];\n\n        // Update workflow settings with new alert rules\n        await client.updateWorkflow(args.workflowId, {\n          settings: {\n            ...currentSettings,\n            alertRules: updatedAlerts,\n          },\n        });\n\n        // Generate threshold description\n        const thresholdDescription = {\n          'execution-time-exceeds': `execution time exceeds ${args.threshold} seconds`,\n          'error-rate-exceeds': `error rate exceeds ${args.threshold}%`,\n          'success-rate-below': `success rate falls below ${args.threshold}%`,\n          'consecutive-failures': `${args.threshold} consecutive failures occur`,\n        };\n\n        const actionDescription = {\n          email: 'send email notification',\n          webhook: 'trigger webhook',\n          'disable-workflow': 'automatically disable workflow',\n          'log-only': 'log to system logs only',\n        };\n\n        return (\n          `✅ Successfully created alert rule \"${args.ruleName}\" for workflow \"${workflow.name}\":\\n\\n` +\n          `**Alert Rule Configuration:**\\n` +\n          `- Rule ID: ${alertRule.id}\\n` +\n          `- Condition: When ${thresholdDescription[args.condition]}\\n` +\n          `- Action: ${actionDescription[args.action]}\\n` +\n          `- Status: ✅ Enabled\\n\\n` +\n          `**Action Configuration:**\\n\\`\\`\\`json\\n${JSON.stringify(args.actionConfig || {}, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Total Alert Rules:** ${updatedAlerts.length}\\n\\n` +\n          `**Note:** Alert rules are stored in workflow settings. In a production environment, you would implement monitoring services to actively check these conditions and trigger the specified actions.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to create alert rule: ${error.message}`);\n      }\n    },\n  });\n\n  // Get monitoring dashboard\n  server.addTool({\n    name: 'get-monitoring-dashboard',\n    description:\n      'Get a comprehensive monitoring dashboard with real-time status of workflows, alerts, and system health',\n    parameters: z.object({\n      includeInactive: z.boolean().optional().default(false),\n      timeframe: z.enum(['hour', 'day', 'week']).optional().default('day'),\n    }),\n    annotations: {\n      title: 'Get Monitoring Dashboard',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { includeInactive?: boolean; timeframe?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Get all workflows\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const allWorkflows = workflowsResponse.data;\n\n        const workflows = args.includeInactive ? allWorkflows : allWorkflows.filter(w => w.active);\n\n        // Get recent executions for all workflows\n        const now = new Date();\n        const timeframeDuration = {\n          hour: 1 * 60 * 60 * 1000,\n          day: 24 * 60 * 60 * 1000,\n          week: 7 * 24 * 60 * 60 * 1000,\n        };\n\n        const startTime = new Date(\n          now.getTime() - timeframeDuration[args.timeframe as keyof typeof timeframeDuration]\n        );\n\n        let dashboard = `# 📊 n8n Monitoring Dashboard\\n\\n`;\n        dashboard += `**Generated:** ${now.toLocaleString()}\\n`;\n        dashboard += `**Timeframe:** Last ${args.timeframe}\\n`;\n        dashboard += `**Update Frequency:** Real-time\\n\\n`;\n\n        // System overview\n        dashboard += `## 🖥️ System Overview\\n\\n`;\n        dashboard += `| Metric | Value |\\n`;\n        dashboard += `|--------|-------|\\n`;\n        dashboard += `| Total Workflows | ${allWorkflows.length} |\\n`;\n        dashboard += `| Active Workflows | ${allWorkflows.filter(w => w.active).length} |\\n`;\n        dashboard += `| Inactive Workflows | ${allWorkflows.filter(w => !w.active).length} |\\n`;\n\n        // Workflow status summary\n        let totalExecutions = 0;\n        let totalSuccessful = 0;\n        let totalFailed = 0;\n        let totalRunning = 0;\n        const workflowStatuses = [];\n\n        for (const workflow of workflows.slice(0, 10)) {\n          // Limit to 10 workflows for dashboard\n          try {\n            const executions = await client.getExecutions({\n              limit: 50,\n            });\n\n            const recentExecutions = executions.data.filter(\n              execution =>\n                execution.workflowId === workflow.id && new Date(execution.startedAt) >= startTime\n            );\n\n            const successful = recentExecutions.filter(e => e.status === 'success').length;\n            const failed = recentExecutions.filter(e => e.status === 'error').length;\n            const running = recentExecutions.filter(e => e.status === 'running').length;\n\n            totalExecutions += recentExecutions.length;\n            totalSuccessful += successful;\n            totalFailed += failed;\n            totalRunning += running;\n\n            const successRate =\n              recentExecutions.length > 0 ? (successful / recentExecutions.length) * 100 : 0;\n\n            const status =\n              successRate >= 95 ? '🟢' : successRate >= 90 ? '🟡' : successRate >= 70 ? '🟠' : '🔴';\n\n            workflowStatuses.push({\n              name: workflow.name,\n              status,\n              executions: recentExecutions.length,\n              successRate: successRate.toFixed(1),\n              running,\n            });\n          } catch (_error) {\n            // Skip workflows that can't be analyzed\n            continue;\n          }\n        }\n\n        // Add execution summary to system overview\n        const systemSuccessRate =\n          totalExecutions > 0 ? (totalSuccessful / totalExecutions) * 100 : 0;\n\n        dashboard += `| Total Executions (${args.timeframe}) | ${totalExecutions} |\\n`;\n        dashboard += `| Successful Executions | ${totalSuccessful} (${systemSuccessRate.toFixed(1)}%) |\\n`;\n        dashboard += `| Failed Executions | ${totalFailed} |\\n`;\n        dashboard += `| Running Executions | ${totalRunning} |\\n`;\n        dashboard += `| System Health | ${systemSuccessRate >= 95 ? '🟢 Excellent' : systemSuccessRate >= 90 ? '🟡 Good' : systemSuccessRate >= 70 ? '🟠 Fair' : '🔴 Poor'} |\\n\\n`;\n\n        // Workflow status table\n        if (workflowStatuses.length > 0) {\n          dashboard += `## 📋 Workflow Status\\n\\n`;\n          dashboard += `| Workflow | Status | Executions | Success Rate | Running |\\n`;\n          dashboard += `|----------|--------|------------|--------------|----------|\\n`;\n\n          workflowStatuses.forEach(ws => {\n            dashboard += `| ${ws.name} | ${ws.status} | ${ws.executions} | ${ws.successRate}% | ${ws.running} |\\n`;\n          });\n          dashboard += '\\n';\n        }\n\n        // Active alerts summary\n        dashboard += `## 🚨 Active Alerts\\n\\n`;\n        const workflowsWithAlerts = workflows.filter(w => {\n          const alertRules = w.settings?.alertRules;\n          return Array.isArray(alertRules) && alertRules.length > 0;\n        });\n\n        if (workflowsWithAlerts.length > 0) {\n          dashboard += `**Workflows with Alert Rules:** ${workflowsWithAlerts.length}\\n\\n`;\n          workflowsWithAlerts.forEach(workflow => {\n            const alertRules = workflow.settings?.alertRules;\n            const alertCount = Array.isArray(alertRules) ? alertRules.length : 0;\n            dashboard += `- **${workflow.name}**: ${alertCount} alert rule(s) configured\\n`;\n          });\n        } else {\n          dashboard += `No alert rules configured.\\n`;\n        }\n        dashboard += '\\n';\n\n        // Quick actions\n        dashboard += `## ⚡ Quick Actions\\n\\n`;\n        dashboard += `**Common Monitoring Tasks:**\\n`;\n        dashboard += `- Use \\`track-workflow-performance\\` to analyze specific workflow metrics\\n`;\n        dashboard += `- Use \\`check-workflow-health\\` to perform comprehensive health checks\\n`;\n        dashboard += `- Use \\`create-alert-rule\\` to set up automated monitoring alerts\\n`;\n        dashboard += `- Use \\`setup-error-notifications\\` to configure failure notifications\\n\\n`;\n\n        dashboard += `**System Recommendations:**\\n`;\n        if (systemSuccessRate < 90) {\n          dashboard += `- 🔴 System success rate is below 90% - investigate failing workflows\\n`;\n        }\n        if (totalRunning > 10) {\n          dashboard += `- ⚠️ High number of running executions - monitor for potential performance issues\\n`;\n        }\n        if (workflowsWithAlerts.length === 0) {\n          dashboard += `- 💡 No alert rules configured - consider setting up monitoring alerts\\n`;\n        }\n        if (totalExecutions === 0) {\n          dashboard += `- 📊 No recent executions - workflows may be inactive or not triggered\\n`;\n        }\n\n        return dashboard;\n      } catch (error: any) {\n        throw new UserError(`Failed to generate monitoring dashboard: ${error.message}`);\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}