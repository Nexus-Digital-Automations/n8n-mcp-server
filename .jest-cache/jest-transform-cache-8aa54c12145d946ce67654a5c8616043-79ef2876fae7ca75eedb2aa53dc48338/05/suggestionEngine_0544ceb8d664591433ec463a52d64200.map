{"version":3,"names":["cov_gio26vf7m","actualCoverage","s","SuggestionEngine","nodeTypeRegistry","Map","constructor","nodeTypes","f","b","loadNodeTypes","clear","nodeType","set","name","analyzeWorkflowConnections","workflow","nodes","connections","analyses","node","analysis","analyzeNodeConnections","push","allNodes","nodeTypeInfo","get","type","nodeId","id","inputs","analyzeNodeInputs","outputs","analyzeNodeOutputs","suggestedConnections","parameterMappings","generateConnectionSuggestions","generateParameterMappings","inputProperties","properties","filter","prop","required","connectedFrom","findConnectionSource","dataStructure","predictOutputStructure","targetNode","targetNodeTypeInfo","suggestions","sourceNode","sourceNodeTypeInfo","suggestion","evaluateNodeConnection","confidence","sort","a","slice","sourceTypeInfo","targetTypeInfo","reasoning","dataTypeMatch","checkDataTypeCompatibility","scoreBasedOnNodeTypes","scoreBasedOnNodeNames","scoreBasedOnPosition","position","areNodesConnected","generateConnectionReasoning","sourceNodeId","targetNodeId","sourceOutput","targetInput","Math","min","trim","suggestedParameters","generateSuggestedParameters","sourceType","targetType","connectionPatterns","source","target","score","pattern","toLowerCase","includes","sourceName","targetName","sourceWords","split","targetWords","commonWords","sourceWord","sourcePos","targetPos","distance","sqrt","pow","max","reasons","join","mappings","upstreamNodes","n","isUpstreamNode","mapping","generateParameterMapping","property","upstreamNode","similarity","calculateParameterSimilarity","sourceParameter","findBestSourceParameter","targetParameter","transformation","suggestTransformation","dataType","paramName","commonMappings","email","url","data","paramLower","sources","Object","entries","some","targetParam","targetLower","commonMatches","param","undefined","inputName","sourceNodeName","sourceConnections","sourceId","targetId","nodeConnections","JSON","stringify","outputStructure","headers","status","rows","count","filename","content","size","suggestParameterFromSource","keys","length","parameters","generateSmartWorkflowSuggestions","missingConnections","optimizationSuggestions","parameterMappingOpportunities","triggerNodes","disconnectedNodes","hasConnections","c","exports"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts"],"sourcesContent":["import { N8nNode, N8nWorkflow, N8nNodeTypeDescription } from '../types/n8n.js';\n\nexport interface NodeConnectionSuggestion {\n  sourceNodeId: string;\n  targetNodeId: string;\n  sourceOutput: string;\n  targetInput: string;\n  confidence: number;\n  reasoning: string;\n  dataTypeMatch: boolean;\n  suggestedParameters?: Record<string, unknown>;\n}\n\nexport interface ParameterMapping {\n  sourceParameter: string;\n  targetParameter: string;\n  transformation?: string;\n  confidence: number;\n  dataType: string;\n}\n\nexport interface NodeFlowAnalysis {\n  nodeId: string;\n  nodeType: string;\n  inputs: Array<{\n    name: string;\n    type: string;\n    required: boolean;\n    connectedFrom?: string;\n  }>;\n  outputs: Array<{\n    name: string;\n    type: string;\n    dataStructure?: Record<string, unknown>;\n  }>;\n  suggestedConnections: NodeConnectionSuggestion[];\n  parameterMappings: ParameterMapping[];\n}\n\nexport class SuggestionEngine {\n  private nodeTypeRegistry: Map<string, N8nNodeTypeDescription> = new Map();\n\n  constructor(nodeTypes?: N8nNodeTypeDescription[]) {\n    if (nodeTypes) {\n      this.loadNodeTypes(nodeTypes);\n    }\n  }\n\n  loadNodeTypes(nodeTypes: N8nNodeTypeDescription[]): void {\n    this.nodeTypeRegistry.clear();\n    for (const nodeType of nodeTypes) {\n      this.nodeTypeRegistry.set(nodeType.name, nodeType);\n    }\n  }\n\n  analyzeWorkflowConnections(workflow: N8nWorkflow): NodeFlowAnalysis[] {\n    const nodes = workflow.nodes || [];\n    const connections = workflow.connections || {};\n    const analyses: NodeFlowAnalysis[] = [];\n\n    for (const node of nodes) {\n      const analysis = this.analyzeNodeConnections(node, nodes, connections);\n      analyses.push(analysis);\n    }\n\n    return analyses;\n  }\n\n  private analyzeNodeConnections(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    connections: Record<string, unknown>\n  ): NodeFlowAnalysis {\n    const nodeTypeInfo = this.nodeTypeRegistry.get(node.type);\n\n    const analysis: NodeFlowAnalysis = {\n      nodeId: node.id,\n      nodeType: node.type,\n      inputs: this.analyzeNodeInputs(node, nodeTypeInfo, connections),\n      outputs: this.analyzeNodeOutputs(node, nodeTypeInfo),\n      suggestedConnections: [],\n      parameterMappings: [],\n    };\n\n    // Generate connection suggestions\n    analysis.suggestedConnections = this.generateConnectionSuggestions(\n      node,\n      allNodes,\n      nodeTypeInfo,\n      connections\n    );\n\n    // Generate parameter mappings\n    analysis.parameterMappings = this.generateParameterMappings(node, allNodes, nodeTypeInfo);\n\n    return analysis;\n  }\n\n  private analyzeNodeInputs(\n    node: N8nNode,\n    nodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ) {\n    const inputs = [];\n\n    if (nodeTypeInfo) {\n      // Use node type information to determine expected inputs\n      const inputProperties = nodeTypeInfo.properties.filter(\n        prop => prop.type !== 'hidden' && prop.type !== 'notice'\n      );\n\n      for (const prop of inputProperties) {\n        inputs.push({\n          name: prop.name,\n          type: prop.type,\n          required: prop.required || false,\n          connectedFrom: this.findConnectionSource(node.id, prop.name, connections),\n        });\n      }\n    } else {\n      // Fallback: analyze based on common input patterns\n      inputs.push({\n        name: 'main',\n        type: 'object',\n        required: true,\n        connectedFrom: this.findConnectionSource(node.id, 'main', connections),\n      });\n    }\n\n    return inputs;\n  }\n\n  private analyzeNodeOutputs(node: N8nNode, nodeTypeInfo?: N8nNodeTypeDescription) {\n    const outputs = [];\n\n    if (nodeTypeInfo) {\n      // Most n8n nodes have a 'main' output\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: this.predictOutputStructure(node, nodeTypeInfo),\n      });\n    } else {\n      // Default output structure\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: {},\n      });\n    }\n\n    return outputs;\n  }\n\n  private generateConnectionSuggestions(\n    targetNode: N8nNode,\n    allNodes: N8nNode[],\n    targetNodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion[] {\n    const suggestions: NodeConnectionSuggestion[] = [];\n\n    for (const sourceNode of allNodes) {\n      if (sourceNode.id === targetNode.id) continue;\n\n      const sourceNodeTypeInfo = this.nodeTypeRegistry.get(sourceNode.type);\n      const suggestion = this.evaluateNodeConnection(\n        sourceNode,\n        targetNode,\n        sourceNodeTypeInfo,\n        targetNodeTypeInfo,\n        connections\n      );\n\n      if (suggestion && suggestion.confidence > 0.3) {\n        suggestions.push(suggestion);\n      }\n    }\n\n    return suggestions.sort((a, b) => b.confidence - a.confidence).slice(0, 5);\n  }\n\n  private evaluateNodeConnection(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion | null {\n    let confidence = 0;\n    let reasoning = '';\n    const dataTypeMatch = this.checkDataTypeCompatibility(\n      sourceNode,\n      targetNode,\n      sourceTypeInfo,\n      targetTypeInfo\n    );\n\n    // Rule-based scoring\n    confidence += this.scoreBasedOnNodeTypes(sourceNode.type, targetNode.type);\n    confidence += this.scoreBasedOnNodeNames(sourceNode.name, targetNode.name);\n    confidence += this.scoreBasedOnPosition(sourceNode.position, targetNode.position);\n    confidence += dataTypeMatch ? 0.3 : 0;\n\n    // Check if already connected\n    if (this.areNodesConnected(sourceNode.id, targetNode.id, connections)) {\n      confidence -= 0.5; // Reduce score for already connected nodes\n      reasoning += 'Already connected. ';\n    }\n\n    // Generate reasoning\n    reasoning += this.generateConnectionReasoning(\n      sourceNode,\n      targetNode,\n      sourceTypeInfo,\n      targetTypeInfo\n    );\n\n    if (confidence <= 0) {\n      return null;\n    }\n\n    return {\n      sourceNodeId: sourceNode.id,\n      targetNodeId: targetNode.id,\n      sourceOutput: 'main',\n      targetInput: 'main',\n      confidence: Math.min(confidence, 1),\n      reasoning: reasoning.trim(),\n      dataTypeMatch,\n      suggestedParameters: this.generateSuggestedParameters(\n        sourceNode,\n        targetNode,\n        sourceTypeInfo,\n        targetTypeInfo\n      ),\n    };\n  }\n\n  private scoreBasedOnNodeTypes(sourceType: string, targetType: string): number {\n    // Define common node type connection patterns\n    const connectionPatterns = [\n      { source: 'trigger', target: 'action', score: 0.4 },\n      { source: 'webhook', target: 'set', score: 0.3 },\n      { source: 'http', target: 'json', score: 0.3 },\n      { source: 'database', target: 'set', score: 0.2 },\n      { source: 'if', target: 'action', score: 0.2 },\n    ];\n\n    for (const pattern of connectionPatterns) {\n      if (\n        sourceType.toLowerCase().includes(pattern.source) &&\n        targetType.toLowerCase().includes(pattern.target)\n      ) {\n        return pattern.score;\n      }\n    }\n\n    return 0;\n  }\n\n  private scoreBasedOnNodeNames(sourceName: string, targetName: string): number {\n    // Score based on semantic similarity of node names\n    const sourceWords = sourceName.toLowerCase().split(/\\s+/);\n    const targetWords = targetName.toLowerCase().split(/\\s+/);\n\n    let commonWords = 0;\n    for (const sourceWord of sourceWords) {\n      if (targetWords.includes(sourceWord)) {\n        commonWords++;\n      }\n    }\n\n    return commonWords > 0 ? 0.1 * commonWords : 0;\n  }\n\n  private scoreBasedOnPosition(sourcePos: [number, number], targetPos: [number, number]): number {\n    const distance = Math.sqrt(\n      Math.pow(targetPos[0] - sourcePos[0], 2) + Math.pow(targetPos[1] - sourcePos[1], 2)\n    );\n\n    // Closer nodes are more likely to be connected\n    return Math.max(0, 0.2 - distance / 1000);\n  }\n\n  private checkDataTypeCompatibility(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): boolean {\n    // Basic data type compatibility check\n    // Most n8n nodes work with JSON objects, so we'll be optimistic\n    return true;\n  }\n\n  private generateConnectionReasoning(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): string {\n    const reasons = [];\n\n    if (sourceNode.type.includes('trigger')) {\n      reasons.push('Source is a trigger node, typically connects to action nodes');\n    }\n\n    if (targetNode.type.includes('http')) {\n      reasons.push('Target accepts HTTP data, compatible with most outputs');\n    }\n\n    if (\n      sourceNode.name.toLowerCase().includes('get') &&\n      targetNode.name.toLowerCase().includes('set')\n    ) {\n      reasons.push('Data flow pattern: retrieve then process/store');\n    }\n\n    const distance = Math.sqrt(\n      Math.pow(targetNode.position[0] - sourceNode.position[0], 2) +\n        Math.pow(targetNode.position[1] - sourceNode.position[1], 2)\n    );\n\n    if (distance < 300) {\n      reasons.push('Nodes are positioned close together');\n    }\n\n    return reasons.join('. ');\n  }\n\n  private generateParameterMappings(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    nodeTypeInfo?: N8nNodeTypeDescription\n  ): ParameterMapping[] {\n    const mappings: ParameterMapping[] = [];\n\n    if (!nodeTypeInfo) return mappings;\n\n    // Find upstream nodes that could provide data\n    const upstreamNodes = allNodes.filter(n => n.id !== node.id && this.isUpstreamNode(n, node));\n\n    for (const prop of nodeTypeInfo.properties) {\n      if (prop.type === 'hidden' || prop.type === 'notice') continue;\n\n      const mapping = this.generateParameterMapping(node, prop, upstreamNodes);\n      if (mapping) {\n        mappings.push(mapping);\n      }\n    }\n\n    return mappings.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  private generateParameterMapping(\n    node: N8nNode,\n    property: any,\n    upstreamNodes: N8nNode[]\n  ): ParameterMapping | null {\n    // Generate mappings based on parameter names and types\n    for (const upstreamNode of upstreamNodes) {\n      const similarity = this.calculateParameterSimilarity(property.name, upstreamNode);\n\n      if (similarity > 0.5) {\n        return {\n          sourceParameter: `{{$node[\"${upstreamNode.name}\"].json[\"${this.findBestSourceParameter(property.name, upstreamNode)}\"]}}`,\n          targetParameter: property.name,\n          transformation: this.suggestTransformation(property, upstreamNode),\n          confidence: similarity,\n          dataType: property.type,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  private calculateParameterSimilarity(paramName: string, sourceNode: N8nNode): number {\n    // Simple similarity based on common parameter names\n    const commonMappings = {\n      email: ['email', 'mail', 'emailAddress'],\n      name: ['name', 'title', 'displayName'],\n      url: ['url', 'link', 'href'],\n      id: ['id', 'identifier', 'key'],\n      data: ['data', 'payload', 'content'],\n    };\n\n    const paramLower = paramName.toLowerCase();\n\n    for (const [target, sources] of Object.entries(commonMappings)) {\n      if (paramLower.includes(target)) {\n        // Check if source node likely produces this type of data\n        if (sources.some(source => sourceNode.name.toLowerCase().includes(source))) {\n          return 0.8;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  private findBestSourceParameter(targetParam: string, sourceNode: N8nNode): string {\n    // Try to match parameter names\n    const targetLower = targetParam.toLowerCase();\n\n    const commonMatches = {\n      email: 'email',\n      name: 'name',\n      url: 'url',\n      id: 'id',\n      data: 'data',\n    };\n\n    for (const [pattern, param] of Object.entries(commonMatches)) {\n      if (targetLower.includes(pattern)) {\n        return param;\n      }\n    }\n\n    return 'data'; // Default fallback\n  }\n\n  private suggestTransformation(property: any, sourceNode: N8nNode): string | undefined {\n    if (property.type === 'string' && sourceNode.type.includes('json')) {\n      return 'JSON.stringify()';\n    }\n\n    if (property.type === 'number' && sourceNode.name.toLowerCase().includes('string')) {\n      return 'parseInt()';\n    }\n\n    return undefined;\n  }\n\n  private isUpstreamNode(sourceNode: N8nNode, targetNode: N8nNode): boolean {\n    // Simple position-based heuristic\n    return (\n      sourceNode.position[0] < targetNode.position[0] ||\n      sourceNode.position[1] < targetNode.position[1]\n    );\n  }\n\n  private findConnectionSource(\n    nodeId: string,\n    inputName: string,\n    connections?: Record<string, unknown>\n  ): string | undefined {\n    if (!connections) return undefined;\n\n    // Parse n8n connections format to find source\n    for (const [sourceNodeName, sourceConnections] of Object.entries(connections)) {\n      if (typeof sourceConnections === 'object' && sourceConnections !== null) {\n        // Check if this source connects to our target node\n        // This is a simplified check - actual n8n connection format is more complex\n        return sourceNodeName;\n      }\n    }\n\n    return undefined;\n  }\n\n  private areNodesConnected(\n    sourceId: string,\n    targetId: string,\n    connections?: Record<string, unknown>\n  ): boolean {\n    if (!connections) return false;\n\n    // Simplified connection check\n    for (const [nodeId, nodeConnections] of Object.entries(connections)) {\n      if (nodeId === sourceId && typeof nodeConnections === 'object' && nodeConnections !== null) {\n        // Check if target is in the connections\n        return JSON.stringify(nodeConnections).includes(targetId);\n      }\n    }\n\n    return false;\n  }\n\n  private predictOutputStructure(\n    node: N8nNode,\n    nodeTypeInfo: N8nNodeTypeDescription\n  ): Record<string, unknown> {\n    // Predict the likely output structure based on node type\n    const outputStructure: Record<string, unknown> = {};\n\n    if (node.type.includes('http')) {\n      outputStructure.data = {};\n      outputStructure.headers = {};\n      outputStructure.status = 200;\n    } else if (node.type.includes('database')) {\n      outputStructure.rows = [];\n      outputStructure.count = 0;\n    } else if (node.type.includes('file')) {\n      outputStructure.filename = '';\n      outputStructure.content = '';\n      outputStructure.size = 0;\n    } else {\n      outputStructure.data = {};\n    }\n\n    return outputStructure;\n  }\n\n  private generateSuggestedParameters(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): Record<string, unknown> | undefined {\n    if (!targetTypeInfo) return undefined;\n\n    const suggestions: Record<string, unknown> = {};\n\n    // Generate parameter suggestions based on source node data\n    for (const property of targetTypeInfo.properties.slice(0, 3)) {\n      // Limit to prevent large responses\n      if (property.type === 'hidden' || property.type === 'notice') continue;\n\n      const suggestion = this.suggestParameterFromSource(property, sourceNode, sourceTypeInfo);\n      if (suggestion !== undefined) {\n        suggestions[property.name] = suggestion;\n      }\n    }\n\n    return Object.keys(suggestions).length > 0 ? suggestions : undefined;\n  }\n\n  private suggestParameterFromSource(\n    property: any,\n    sourceNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription\n  ): unknown {\n    const paramName = property.name.toLowerCase();\n\n    // Common parameter mapping patterns\n    if (paramName.includes('url') && sourceNode.type.includes('http')) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"url\"]}}`;\n    }\n\n    if (paramName.includes('data') || paramName.includes('body')) {\n      return `{{$node[\"${sourceNode.name}\"].json}}`;\n    }\n\n    if (paramName.includes('id') && sourceNode.parameters?.id) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"id\"]}}`;\n    }\n\n    return undefined;\n  }\n\n  generateSmartWorkflowSuggestions(workflow: N8nWorkflow): {\n    missingConnections: NodeConnectionSuggestion[];\n    optimizationSuggestions: string[];\n    parameterMappingOpportunities: ParameterMapping[];\n  } {\n    const analyses = this.analyzeWorkflowConnections(workflow);\n    const missingConnections: NodeConnectionSuggestion[] = [];\n    const optimizationSuggestions: string[] = [];\n    const parameterMappingOpportunities: ParameterMapping[] = [];\n\n    for (const analysis of analyses) {\n      missingConnections.push(...analysis.suggestedConnections);\n      parameterMappingOpportunities.push(...analysis.parameterMappings);\n    }\n\n    // Generate optimization suggestions\n    if (workflow.nodes && workflow.nodes.length > 10) {\n      optimizationSuggestions.push(\n        'Consider breaking this large workflow into smaller, reusable workflows'\n      );\n    }\n\n    const triggerNodes = workflow.nodes?.filter(n => n.type.includes('trigger')) || [];\n    if (triggerNodes.length === 0) {\n      optimizationSuggestions.push('This workflow appears to be missing a trigger node');\n    }\n\n    const disconnectedNodes =\n      workflow.nodes?.filter(n => {\n        const hasConnections = missingConnections.some(\n          c => c.sourceNodeId === n.id || c.targetNodeId === n.id\n        );\n        return !hasConnections;\n      }) || [];\n\n    if (disconnectedNodes.length > 0) {\n      optimizationSuggestions.push(\n        `${disconnectedNodes.length} nodes appear to be disconnected from the workflow`\n      );\n    }\n\n    return {\n      missingConnections: missingConnections.slice(0, 10), // Top 10 suggestions\n      optimizationSuggestions,\n      parameterMappingOpportunities: parameterMappingOpportunities.slice(0, 15), // Top 15 mappings\n    };\n  }\n}\n"],"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","ignoreList":[]}