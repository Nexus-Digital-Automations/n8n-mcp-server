{"version":3,"names":["cov_12tiuhqsm7","actualCoverage","crypto","EventEmitter","EnhancedAuthProvider","config","sessions","s","Map","mfaChallenges","securityEvents","failedAttempts","rateLimits","baseAuthProvider","oauth2Handler","constructor","b","f","mfaEnabled","session","timeout","sliding","maxConcurrent","storage","tokenRotation","enabled","interval","gracePeriod","security","trackFailedAttempts","maxFailedAttempts","lockoutDuration","rateLimiting","rateLimitWindow","maxRequestsPerWindow","audit","logSuccess","logFailures","logSessions","logSecurity","setupCleanupTimer","setOAuth2Handler","handler","authenticate","context","clientId","getClientIdentifier","rateLimit","checkRateLimit","exceeded","logSecurityEvent","type","details","reason","identifier","severity","suspicious","success","error","lockout","checkLockout","lockedUntil","Date","toLocaleString","existingSessionId","extractSessionId","get","isSessionValid","lastActivity","now","expiresAt","user","getUserFromSession","sessionId","authType","requiresMfa","mfaCompleted","delete","baseResult","trackFailedAttempt","createSession","userId","id","mfaChallengeRequired","Error","message","refresh","canAccessTool","toolName","canAccessResource","resourceUri","createMfaChallenge","challengeId","generateChallengeId","challenge","createdAt","attempts","maxAttempts","data","code","generateMfaCode","set","action","verifyMfaChallenge","response","isValid","verifyTotpCode","verifyBackupCode","logout","getActiveSessions","values","push","terminateAllSessions","terminated","entries","count","getSecurityEvents","options","events","filter","e","since","timestamp","sort","a","limit","slice","getLockoutStatus","failedAttempt","locked","clearLockout","generateSessionId","activeSessions","length","oldestSession","client","ip","headers","userAgent","fingerprint","generateClientFingerprint","metadata","elevated","lastSecurityCheck","name","roles","permissions","community","enterprise","workflows","executions","credentials","users","includes","attempt","lastAttempt","existing","windowEnd","requests","windowStart","event","shouldLog","securityEvent","generateEventId","emit","replace","components","Boolean","createHash","update","join","digest","randomBytes","toString","Math","floor","random","setInterval","cleanup","createEnhancedAuth","ENHANCED_AUTH_ENV_CONFIG","MFA_ENABLED","SESSION_TIMEOUT","SESSION_SLIDING","MAX_CONCURRENT_SESSIONS","TOKEN_ROTATION_ENABLED","TOKEN_ROTATION_INTERVAL","MAX_FAILED_ATTEMPTS","LOCKOUT_DURATION","RATE_LIMITING_ENABLED","RATE_LIMIT_WINDOW","MAX_REQUESTS_PER_WINDOW","parseEnhancedAuthConfigFromEnv","process","env","parseInt"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/enhancedAuth.ts"],"sourcesContent":["/**\n * Enhanced Authentication Flows for n8n MCP Server\n *\n * Provides advanced authentication capabilities including multi-factor authentication,\n * session management, token rotation, and security monitoring.\n */\n\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  AuthProvider,\n  BaseAuthProvider,\n  RequestContext,\n  AuthResult,\n  AuthenticatedUser,\n} from './authProvider.js';\nimport { OAuth2Handler, OAuth2Token } from './oauth2Handler.js';\n\n/**\n * Enhanced authentication configuration\n */\nexport interface EnhancedAuthConfig {\n  /** Enable multi-factor authentication */\n  mfaEnabled?: boolean;\n\n  /** Session configuration */\n  session?: {\n    /** Session timeout in milliseconds */\n    timeout: number;\n\n    /** Enable session sliding (extend on activity) */\n    sliding: boolean;\n\n    /** Maximum concurrent sessions per user */\n    maxConcurrent: number;\n\n    /** Session storage type */\n    storage: 'memory' | 'redis' | 'database';\n  };\n\n  /** Token rotation configuration */\n  tokenRotation?: {\n    /** Enable automatic token rotation */\n    enabled: boolean;\n\n    /** Rotation interval in milliseconds */\n    interval: number;\n\n    /** Grace period for old tokens */\n    gracePeriod: number;\n  };\n\n  /** Security monitoring */\n  security?: {\n    /** Enable failed login attempt tracking */\n    trackFailedAttempts: boolean;\n\n    /** Maximum failed attempts before lockout */\n    maxFailedAttempts: number;\n\n    /** Lockout duration in milliseconds */\n    lockoutDuration: number;\n\n    /** Enable IP-based rate limiting */\n    rateLimiting: boolean;\n\n    /** Rate limit window in milliseconds */\n    rateLimitWindow: number;\n\n    /** Maximum requests per window */\n    maxRequestsPerWindow: number;\n  };\n\n  /** Audit configuration */\n  audit?: {\n    /** Enable authentication event logging */\n    enabled: boolean;\n\n    /** Log successful authentications */\n    logSuccess: boolean;\n\n    /** Log failed authentications */\n    logFailures: boolean;\n\n    /** Log session events */\n    logSessions: boolean;\n\n    /** Log security events */\n    logSecurity: boolean;\n  };\n}\n\n/**\n * Authentication session information\n */\nexport interface AuthSession {\n  /** Session ID */\n  sessionId: string;\n\n  /** User ID */\n  userId: string;\n\n  /** Session creation timestamp */\n  createdAt: number;\n\n  /** Last activity timestamp */\n  lastActivity: number;\n\n  /** Session expiry timestamp */\n  expiresAt: number;\n\n  /** Client information */\n  client: {\n    /** IP address */\n    ip?: string;\n\n    /** User agent */\n    userAgent?: string;\n\n    /** Device fingerprint */\n    fingerprint?: string;\n  };\n\n  /** Session metadata */\n  metadata?: Record<string, unknown>;\n\n  /** Security flags */\n  security: {\n    /** Requires MFA */\n    requiresMfa: boolean;\n\n    /** MFA completed */\n    mfaCompleted: boolean;\n\n    /** Is elevated session */\n    elevated: boolean;\n\n    /** Last security check */\n    lastSecurityCheck: number;\n  };\n}\n\n/**\n * MFA challenge information\n */\nexport interface MfaChallenge {\n  /** Challenge ID */\n  challengeId: string;\n\n  /** User ID */\n  userId: string;\n\n  /** Challenge type */\n  type: 'totp' | 'sms' | 'email' | 'backup-code';\n\n  /** Challenge creation timestamp */\n  createdAt: number;\n\n  /** Challenge expiry timestamp */\n  expiresAt: number;\n\n  /** Challenge-specific data */\n  data?: Record<string, unknown>;\n\n  /** Number of attempts */\n  attempts: number;\n\n  /** Maximum allowed attempts */\n  maxAttempts: number;\n}\n\n/**\n * Security event information\n */\nexport interface SecurityEvent {\n  /** Event ID */\n  id: string;\n\n  /** Event type */\n  type: 'login' | 'logout' | 'mfa' | 'token-rotation' | 'suspicious-activity' | 'lockout';\n\n  /** User ID (if applicable) */\n  userId?: string;\n\n  /** Session ID (if applicable) */\n  sessionId?: string;\n\n  /** Event timestamp */\n  timestamp: number;\n\n  /** Client information */\n  client?: {\n    ip?: string;\n    userAgent?: string;\n    fingerprint?: string;\n  };\n\n  /** Event details */\n  details: Record<string, unknown>;\n\n  /** Severity level */\n  severity: 'low' | 'medium' | 'high' | 'critical';\n\n  /** Whether event was suspicious */\n  suspicious: boolean;\n}\n\n/**\n * Rate limiting information\n */\nexport interface RateLimit {\n  /** Client identifier (IP, user ID, etc.) */\n  identifier: string;\n\n  /** Request count in current window */\n  requests: number;\n\n  /** Window start timestamp */\n  windowStart: number;\n\n  /** Window end timestamp */\n  windowEnd: number;\n\n  /** Whether rate limit is exceeded */\n  exceeded: boolean;\n}\n\n/**\n * Enhanced Authentication Provider\n *\n * Provides advanced authentication features with security monitoring,\n * session management, and multi-factor authentication.\n */\nexport class EnhancedAuthProvider extends EventEmitter implements AuthProvider {\n  private config: Required<EnhancedAuthConfig>;\n  private sessions = new Map<string, AuthSession>();\n  private mfaChallenges = new Map<string, MfaChallenge>();\n  private securityEvents: SecurityEvent[] = [];\n  private failedAttempts = new Map<string, { count: number; lastAttempt: number; lockedUntil?: number }>();\n  private rateLimits = new Map<string, RateLimit>();\n  private baseAuthProvider: AuthProvider;\n  private oauth2Handler?: OAuth2Handler;\n\n  constructor(baseAuthProvider: AuthProvider, config: Partial<EnhancedAuthConfig> = {}) {\n    super();\n    this.baseAuthProvider = baseAuthProvider;\n\n    // Set defaults\n    this.config = {\n      mfaEnabled: false,\n      session: {\n        timeout: 24 * 60 * 60 * 1000, // 24 hours\n        sliding: true,\n        maxConcurrent: 5,\n        storage: 'memory',\n      },\n      tokenRotation: {\n        enabled: false,\n        interval: 60 * 60 * 1000, // 1 hour\n        gracePeriod: 5 * 60 * 1000, // 5 minutes\n      },\n      security: {\n        trackFailedAttempts: true,\n        maxFailedAttempts: 5,\n        lockoutDuration: 15 * 60 * 1000, // 15 minutes\n        rateLimiting: true,\n        rateLimitWindow: 60 * 1000, // 1 minute\n        maxRequestsPerWindow: 60,\n      },\n      audit: {\n        enabled: true,\n        logSuccess: true,\n        logFailures: true,\n        logSessions: true,\n        logSecurity: true,\n      },\n      ...config,\n    } as Required<EnhancedAuthConfig>;\n\n    this.setupCleanupTimer();\n  }\n\n  /**\n   * Set OAuth2 handler for enhanced OAuth2 support\n   */\n  setOAuth2Handler(handler: OAuth2Handler): void {\n    this.oauth2Handler = handler;\n  }\n\n  /**\n   * Authenticate client request with enhanced security\n   */\n  async authenticate(context: RequestContext): Promise<AuthResult> {\n    const clientId = this.getClientIdentifier(context);\n\n    try {\n      // Check rate limiting\n      if (this.config.security.rateLimiting) {\n        const rateLimit = this.checkRateLimit(clientId);\n        if (rateLimit.exceeded) {\n          this.logSecurityEvent({\n            type: 'suspicious-activity',\n            details: { reason: 'rate-limit-exceeded', identifier: clientId },\n            severity: 'medium',\n            suspicious: true,\n          });\n          return {\n            success: false,\n            error: 'Rate limit exceeded. Please try again later.',\n          };\n        }\n      }\n\n      // Check for account lockout\n      if (this.config.security.trackFailedAttempts) {\n        const lockout = this.checkLockout(clientId);\n        if (lockout) {\n          this.logSecurityEvent({\n            type: 'lockout',\n            details: { reason: 'account-locked', identifier: clientId, lockedUntil: lockout },\n            severity: 'high',\n            suspicious: true,\n          });\n          return {\n            success: false,\n            error: `Account locked due to too many failed attempts. Try again after ${new Date(lockout).toLocaleString()}.`,\n          };\n        }\n      }\n\n      // Check for existing session\n      const existingSessionId = this.extractSessionId(context);\n      if (existingSessionId) {\n        const session = this.sessions.get(existingSessionId);\n        if (session && this.isSessionValid(session)) {\n          // Update session activity\n          if (this.config.session.sliding) {\n            session.lastActivity = Date.now();\n            session.expiresAt = Date.now() + this.config.session.timeout;\n          }\n\n          const user = await this.getUserFromSession(session);\n          if (user) {\n            return {\n              success: true,\n              user,\n              context: {\n                sessionId: session.sessionId,\n                authType: 'session',\n                requiresMfa: session.security.requiresMfa && !session.security.mfaCompleted,\n              },\n            };\n          }\n        } else if (session) {\n          // Remove invalid session\n          this.sessions.delete(existingSessionId);\n        }\n      }\n\n      // Perform base authentication\n      const baseResult = await this.baseAuthProvider.authenticate(context);\n      if (!baseResult.success) {\n        // Track failed attempt\n        if (this.config.security.trackFailedAttempts) {\n          this.trackFailedAttempt(clientId);\n        }\n\n        this.logSecurityEvent({\n          type: 'login',\n          details: { success: false, error: baseResult.error, identifier: clientId },\n          severity: 'low',\n          suspicious: false,\n        });\n\n        return baseResult;\n      }\n\n      // Create new session\n      const session = await this.createSession(baseResult.user!, context);\n\n      // Check if MFA is required\n      if (this.config.mfaEnabled && this.requiresMfa(baseResult.user!)) {\n        session.security.requiresMfa = true;\n        session.security.mfaCompleted = false;\n\n        this.logSecurityEvent({\n          type: 'login',\n          userId: baseResult.user!.id,\n          sessionId: session.sessionId,\n          details: { success: true, requiresMfa: true },\n          severity: 'low',\n          suspicious: false,\n        });\n\n        return {\n          success: true,\n          user: baseResult.user,\n          context: {\n            sessionId: session.sessionId,\n            authType: 'partial',\n            requiresMfa: true,\n            mfaChallengeRequired: true,\n          },\n        };\n      }\n\n      // Clear failed attempts on successful login\n      if (this.config.security.trackFailedAttempts) {\n        this.failedAttempts.delete(clientId);\n      }\n\n      this.logSecurityEvent({\n        type: 'login',\n        userId: baseResult.user!.id,\n        sessionId: session.sessionId,\n        details: { success: true, requiresMfa: false },\n        severity: 'low',\n        suspicious: false,\n      });\n\n      return {\n        success: true,\n        user: baseResult.user,\n        context: {\n          sessionId: session.sessionId,\n          authType: 'enhanced',\n          requiresMfa: false,\n        },\n      };\n    } catch (error) {\n      // Track failed attempt\n      if (this.config.security.trackFailedAttempts) {\n        this.trackFailedAttempt(clientId);\n      }\n\n      this.logSecurityEvent({\n        type: 'login',\n        details: { success: false, error: error instanceof Error ? error.message : 'Unknown error' },\n        severity: 'medium',\n        suspicious: true,\n      });\n\n      return {\n        success: false,\n        error: `Authentication failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * Refresh authentication\n   */\n  async refresh(context: RequestContext): Promise<AuthResult> {\n    const sessionId = this.extractSessionId(context);\n    if (!sessionId) {\n      return {\n        success: false,\n        error: 'No session found for refresh',\n      };\n    }\n\n    const session = this.sessions.get(sessionId);\n    if (!session || !this.isSessionValid(session)) {\n      return {\n        success: false,\n        error: 'Invalid or expired session',\n      };\n    }\n\n    // Update session activity\n    session.lastActivity = Date.now();\n    if (this.config.session.sliding) {\n      session.expiresAt = Date.now() + this.config.session.timeout;\n    }\n\n    const user = await this.getUserFromSession(session);\n    if (!user) {\n      return {\n        success: false,\n        error: 'Unable to refresh user information',\n      };\n    }\n\n    return {\n      success: true,\n      user,\n      context: {\n        sessionId: session.sessionId,\n        authType: 'session-refresh',\n        requiresMfa: session.security.requiresMfa && !session.security.mfaCompleted,\n      },\n    };\n  }\n\n  /**\n   * Check tool access permissions\n   */\n  async canAccessTool(toolName: string, context: RequestContext): Promise<boolean> {\n    return this.baseAuthProvider.canAccessTool(toolName, context);\n  }\n\n  /**\n   * Check resource access permissions\n   */\n  async canAccessResource(resourceUri: string, context: RequestContext): Promise<boolean> {\n    return this.baseAuthProvider.canAccessResource(resourceUri, context);\n  }\n\n  /**\n   * Create MFA challenge\n   */\n  async createMfaChallenge(\n    userId: string,\n    type: MfaChallenge['type'],\n    sessionId?: string\n  ): Promise<MfaChallenge> {\n    const challengeId = this.generateChallengeId();\n    const challenge: MfaChallenge = {\n      challengeId,\n      userId,\n      type,\n      createdAt: Date.now(),\n      expiresAt: Date.now() + (5 * 60 * 1000), // 5 minutes\n      attempts: 0,\n      maxAttempts: 3,\n    };\n\n    // Generate challenge-specific data\n    switch (type) {\n      case 'totp':\n        // TOTP challenges don't need additional data\n        break;\n      case 'sms':\n      case 'email':\n        challenge.data = {\n          code: this.generateMfaCode(),\n        };\n        break;\n      case 'backup-code':\n        // Backup codes are pre-generated\n        break;\n    }\n\n    this.mfaChallenges.set(challengeId, challenge);\n\n    this.logSecurityEvent({\n      type: 'mfa',\n      userId,\n      sessionId,\n      details: { action: 'challenge-created', type, challengeId },\n      severity: 'low',\n      suspicious: false,\n    });\n\n    return challenge;\n  }\n\n  /**\n   * Verify MFA challenge\n   */\n  async verifyMfaChallenge(\n    challengeId: string,\n    response: string,\n    sessionId?: string\n  ): Promise<{ success: boolean; error?: string }> {\n    const challenge = this.mfaChallenges.get(challengeId);\n    if (!challenge) {\n      return {\n        success: false,\n        error: 'Invalid or expired MFA challenge',\n      };\n    }\n\n    if (challenge.expiresAt < Date.now()) {\n      this.mfaChallenges.delete(challengeId);\n      return {\n        success: false,\n        error: 'MFA challenge has expired',\n      };\n    }\n\n    if (challenge.attempts >= challenge.maxAttempts) {\n      this.mfaChallenges.delete(challengeId);\n      this.logSecurityEvent({\n        type: 'mfa',\n        userId: challenge.userId,\n        sessionId,\n        details: { action: 'max-attempts-exceeded', challengeId },\n        severity: 'medium',\n        suspicious: true,\n      });\n      return {\n        success: false,\n        error: 'Maximum MFA attempts exceeded',\n      };\n    }\n\n    challenge.attempts++;\n\n    // Verify response based on challenge type\n    let isValid = false;\n    switch (challenge.type) {\n      case 'totp':\n        isValid = await this.verifyTotpCode(challenge.userId, response);\n        break;\n      case 'sms':\n      case 'email':\n        isValid = challenge.data?.code === response;\n        break;\n      case 'backup-code':\n        isValid = await this.verifyBackupCode(challenge.userId, response);\n        break;\n    }\n\n    if (isValid) {\n      this.mfaChallenges.delete(challengeId);\n\n      // Update session if provided\n      if (sessionId) {\n        const session = this.sessions.get(sessionId);\n        if (session) {\n          session.security.mfaCompleted = true;\n        }\n      }\n\n      this.logSecurityEvent({\n        type: 'mfa',\n        userId: challenge.userId,\n        sessionId,\n        details: { action: 'challenge-verified', type: challenge.type, challengeId },\n        severity: 'low',\n        suspicious: false,\n      });\n\n      return { success: true };\n    }\n\n    this.logSecurityEvent({\n      type: 'mfa',\n      userId: challenge.userId,\n      sessionId,\n      details: { action: 'challenge-failed', type: challenge.type, challengeId, attempts: challenge.attempts },\n      severity: 'low',\n      suspicious: challenge.attempts > 1,\n    });\n\n    return {\n      success: false,\n      error: 'Invalid MFA code',\n    };\n  }\n\n  /**\n   * Logout user and invalidate session\n   */\n  async logout(sessionId: string): Promise<boolean> {\n    const session = this.sessions.get(sessionId);\n    if (!session) {\n      return false;\n    }\n\n    this.sessions.delete(sessionId);\n\n    this.logSecurityEvent({\n      type: 'logout',\n      userId: session.userId,\n      sessionId,\n      details: { action: 'explicit-logout' },\n      severity: 'low',\n      suspicious: false,\n    });\n\n    return true;\n  }\n\n  /**\n   * Get active sessions for user\n   */\n  getActiveSessions(userId: string): AuthSession[] {\n    const sessions: AuthSession[] = [];\n    for (const session of this.sessions.values()) {\n      if (session.userId === userId && this.isSessionValid(session)) {\n        sessions.push(session);\n      }\n    }\n    return sessions;\n  }\n\n  /**\n   * Terminate all sessions for user\n   */\n  terminateAllSessions(userId: string): number {\n    let terminated = 0;\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (session.userId === userId) {\n        this.sessions.delete(sessionId);\n        terminated++;\n      }\n    }\n\n    if (terminated > 0) {\n      this.logSecurityEvent({\n        type: 'logout',\n        userId,\n        details: { action: 'terminate-all-sessions', count: terminated },\n        severity: 'medium',\n        suspicious: false,\n      });\n    }\n\n    return terminated;\n  }\n\n  /**\n   * Get security events\n   */\n  getSecurityEvents(\n    options: {\n      userId?: string;\n      type?: SecurityEvent['type'];\n      severity?: SecurityEvent['severity'];\n      limit?: number;\n      since?: number;\n    } = {}\n  ): SecurityEvent[] {\n    let events = [...this.securityEvents];\n\n    if (options.userId) {\n      events = events.filter(e => e.userId === options.userId);\n    }\n\n    if (options.type) {\n      events = events.filter(e => e.type === options.type);\n    }\n\n    if (options.severity) {\n      events = events.filter(e => e.severity === options.severity);\n    }\n\n    if (options.since) {\n      events = events.filter(e => e.timestamp >= options.since!);\n    }\n\n    // Sort by timestamp (newest first)\n    events.sort((a, b) => b.timestamp - a.timestamp);\n\n    if (options.limit) {\n      events = events.slice(0, options.limit);\n    }\n\n    return events;\n  }\n\n  /**\n   * Get account lockout status\n   */\n  getLockoutStatus(identifier: string): { locked: boolean; lockedUntil?: number; attempts: number } {\n    const failedAttempt = this.failedAttempts.get(identifier);\n    if (!failedAttempt) {\n      return { locked: false, attempts: 0 };\n    }\n\n    const now = Date.now();\n    const locked = failedAttempt.lockedUntil ? failedAttempt.lockedUntil > now : false;\n\n    return {\n      locked,\n      lockedUntil: failedAttempt.lockedUntil,\n      attempts: failedAttempt.count,\n    };\n  }\n\n  /**\n   * Clear account lockout\n   */\n  clearLockout(identifier: string): boolean {\n    return this.failedAttempts.delete(identifier);\n  }\n\n  /**\n   * Create authentication session\n   */\n  private async createSession(user: AuthenticatedUser, context: RequestContext): Promise<AuthSession> {\n    const sessionId = this.generateSessionId();\n    const now = Date.now();\n\n    // Check concurrent session limit\n    const activeSessions = this.getActiveSessions(user.id);\n    if (activeSessions.length >= this.config.session.maxConcurrent) {\n      // Remove oldest session\n      const oldestSession = activeSessions.sort((a, b) => a.createdAt - b.createdAt)[0];\n      this.sessions.delete(oldestSession.sessionId);\n    }\n\n    const session: AuthSession = {\n      sessionId,\n      userId: user.id,\n      createdAt: now,\n      lastActivity: now,\n      expiresAt: now + this.config.session.timeout,\n      client: {\n        ip: context.headers?.['x-forwarded-for'] || context.headers?.['x-real-ip'],\n        userAgent: context.headers?.['user-agent'],\n        fingerprint: this.generateClientFingerprint(context),\n      },\n      metadata: context.metadata,\n      security: {\n        requiresMfa: false,\n        mfaCompleted: false,\n        elevated: false,\n        lastSecurityCheck: now,\n      },\n    };\n\n    this.sessions.set(sessionId, session);\n\n    if (this.config.audit.logSessions) {\n      this.logSecurityEvent({\n        type: 'login',\n        userId: user.id,\n        sessionId,\n        details: { action: 'session-created' },\n        severity: 'low',\n        suspicious: false,\n      });\n    }\n\n    return session;\n  }\n\n  /**\n   * Check if session is valid\n   */\n  private isSessionValid(session: AuthSession): boolean {\n    const now = Date.now();\n    return session.expiresAt > now;\n  }\n\n  /**\n   * Get user from session\n   */\n  private async getUserFromSession(session: AuthSession): Promise<AuthenticatedUser | null> {\n    // This would typically fetch user data from the base auth provider\n    // For now, we'll create a basic user object\n    return {\n      id: session.userId,\n      name: 'Session User',\n      roles: ['user'],\n      permissions: {\n        community: true,\n        enterprise: false,\n        workflows: true,\n        executions: true,\n        credentials: false,\n        users: false,\n        audit: false,\n      },\n    };\n  }\n\n  /**\n   * Check if user requires MFA\n   */\n  private requiresMfa(user: AuthenticatedUser): boolean {\n    // Check if user has elevated permissions that require MFA\n    return user.permissions.users || user.permissions.audit || user.roles.includes('admin');\n  }\n\n  /**\n   * Track failed authentication attempt\n   */\n  private trackFailedAttempt(identifier: string): void {\n    const now = Date.now();\n    const attempt = this.failedAttempts.get(identifier) || { count: 0, lastAttempt: 0 };\n\n    attempt.count++;\n    attempt.lastAttempt = now;\n\n    if (attempt.count >= this.config.security.maxFailedAttempts) {\n      attempt.lockedUntil = now + this.config.security.lockoutDuration;\n    }\n\n    this.failedAttempts.set(identifier, attempt);\n  }\n\n  /**\n   * Check for account lockout\n   */\n  private checkLockout(identifier: string): number | null {\n    const attempt = this.failedAttempts.get(identifier);\n    if (!attempt || !attempt.lockedUntil) {\n      return null;\n    }\n\n    const now = Date.now();\n    if (attempt.lockedUntil > now) {\n      return attempt.lockedUntil;\n    }\n\n    // Lockout period has expired, clear it\n    this.failedAttempts.delete(identifier);\n    return null;\n  }\n\n  /**\n   * Check rate limit\n   */\n  private checkRateLimit(identifier: string): RateLimit {\n    const now = Date.now();\n    const existing = this.rateLimits.get(identifier);\n\n    if (!existing || existing.windowEnd <= now) {\n      // Create new rate limit window\n      const rateLimit: RateLimit = {\n        identifier,\n        requests: 1,\n        windowStart: now,\n        windowEnd: now + this.config.security.rateLimitWindow,\n        exceeded: false,\n      };\n      this.rateLimits.set(identifier, rateLimit);\n      return rateLimit;\n    }\n\n    // Increment request count\n    existing.requests++;\n    existing.exceeded = existing.requests > this.config.security.maxRequestsPerWindow;\n\n    return existing;\n  }\n\n  /**\n   * Log security event\n   */\n  private logSecurityEvent(event: Omit<SecurityEvent, 'id' | 'timestamp' | 'client'>): void {\n    if (!this.config.audit.enabled) {\n      return;\n    }\n\n    const shouldLog = \n      (event.type === 'login' && (this.config.audit.logSuccess || this.config.audit.logFailures)) ||\n      (event.type === 'logout' && this.config.audit.logSessions) ||\n      (event.type === 'mfa' && this.config.audit.logSecurity) ||\n      (event.severity === 'high' || event.severity === 'critical');\n\n    if (!shouldLog) {\n      return;\n    }\n\n    const securityEvent: SecurityEvent = {\n      ...event,\n      id: this.generateEventId(),\n      timestamp: Date.now(),\n      client: event.details?.client as SecurityEvent['client'],\n    };\n\n    this.securityEvents.push(securityEvent);\n\n    // Emit event for external listeners\n    this.emit('securityEvent', securityEvent);\n\n    // Keep only last 1000 events in memory\n    if (this.securityEvents.length > 1000) {\n      this.securityEvents = this.securityEvents.slice(-1000);\n    }\n  }\n\n  /**\n   * Extract session ID from context\n   */\n  private extractSessionId(context: RequestContext): string | null {\n    return context.headers?.['x-session-id'] || \n           context.headers?.['authorization']?.replace(/^Session\\s+/, '') ||\n           null;\n  }\n\n  /**\n   * Get client identifier for rate limiting\n   */\n  private getClientIdentifier(context: RequestContext): string {\n    return context.headers?.['x-forwarded-for'] || \n           context.headers?.['x-real-ip'] || \n           context.clientId || \n           'unknown';\n  }\n\n  /**\n   * Generate client fingerprint\n   */\n  private generateClientFingerprint(context: RequestContext): string {\n    const components = [\n      context.headers?.['user-agent'],\n      context.headers?.['accept-language'],\n      context.headers?.['accept-encoding'],\n    ].filter(Boolean);\n\n    return crypto.createHash('sha256').update(components.join('|')).digest('hex');\n  }\n\n  /**\n   * Generate session ID\n   */\n  private generateSessionId(): string {\n    return `sess_${Date.now()}_${crypto.randomBytes(16).toString('hex')}`;\n  }\n\n  /**\n   * Generate MFA challenge ID\n   */\n  private generateChallengeId(): string {\n    return `mfa_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate security event ID\n   */\n  private generateEventId(): string {\n    return `evt_${Date.now()}_${crypto.randomBytes(8).toString('hex')}`;\n  }\n\n  /**\n   * Generate MFA code\n   */\n  private generateMfaCode(): string {\n    return Math.floor(100000 + Math.random() * 900000).toString();\n  }\n\n  /**\n   * Verify TOTP code (placeholder implementation)\n   */\n  private async verifyTotpCode(userId: string, code: string): Promise<boolean> {\n    // This would integrate with a TOTP library like speakeasy\n    // For now, return false as we don't have TOTP secrets stored\n    return false;\n  }\n\n  /**\n   * Verify backup code (placeholder implementation)\n   */\n  private async verifyBackupCode(userId: string, code: string): Promise<boolean> {\n    // This would check against stored backup codes\n    // For now, return false as we don't have backup codes stored\n    return false;\n  }\n\n  /**\n   * Setup cleanup timer for expired sessions and challenges\n   */\n  private setupCleanupTimer(): void {\n    setInterval(() => {\n      this.cleanup();\n    }, 60000); // Run every minute\n  }\n\n  /**\n   * Clean up expired sessions, challenges, and rate limits\n   */\n  private cleanup(): void {\n    const now = Date.now();\n\n    // Clean up expired sessions\n    for (const [sessionId, session] of this.sessions.entries()) {\n      if (!this.isSessionValid(session)) {\n        this.sessions.delete(sessionId);\n      }\n    }\n\n    // Clean up expired MFA challenges\n    for (const [challengeId, challenge] of this.mfaChallenges.entries()) {\n      if (challenge.expiresAt <= now) {\n        this.mfaChallenges.delete(challengeId);\n      }\n    }\n\n    // Clean up expired rate limits\n    for (const [identifier, rateLimit] of this.rateLimits.entries()) {\n      if (rateLimit.windowEnd <= now) {\n        this.rateLimits.delete(identifier);\n      }\n    }\n\n    // Clean up old failed attempts\n    for (const [identifier, attempt] of this.failedAttempts.entries()) {\n      if (attempt.lockedUntil && attempt.lockedUntil <= now) {\n        this.failedAttempts.delete(identifier);\n      }\n    }\n  }\n}\n\n/**\n * Create enhanced authentication provider\n */\nexport function createEnhancedAuth(\n  baseAuthProvider: AuthProvider,\n  config?: Partial<EnhancedAuthConfig>\n): EnhancedAuthProvider {\n  return new EnhancedAuthProvider(baseAuthProvider, config);\n}\n\n/**\n * Environment variable configuration for enhanced authentication\n */\nexport const ENHANCED_AUTH_ENV_CONFIG = {\n  /** Enable MFA */\n  MFA_ENABLED: 'N8N_MCP_MFA_ENABLED',\n\n  /** Session timeout in seconds */\n  SESSION_TIMEOUT: 'N8N_MCP_SESSION_TIMEOUT',\n\n  /** Enable session sliding */\n  SESSION_SLIDING: 'N8N_MCP_SESSION_SLIDING',\n\n  /** Maximum concurrent sessions */\n  MAX_CONCURRENT_SESSIONS: 'N8N_MCP_MAX_CONCURRENT_SESSIONS',\n\n  /** Enable token rotation */\n  TOKEN_ROTATION_ENABLED: 'N8N_MCP_TOKEN_ROTATION_ENABLED',\n\n  /** Token rotation interval in seconds */\n  TOKEN_ROTATION_INTERVAL: 'N8N_MCP_TOKEN_ROTATION_INTERVAL',\n\n  /** Maximum failed attempts */\n  MAX_FAILED_ATTEMPTS: 'N8N_MCP_MAX_FAILED_ATTEMPTS',\n\n  /** Lockout duration in seconds */\n  LOCKOUT_DURATION: 'N8N_MCP_LOCKOUT_DURATION',\n\n  /** Enable rate limiting */\n  RATE_LIMITING_ENABLED: 'N8N_MCP_RATE_LIMITING_ENABLED',\n\n  /** Rate limit window in seconds */\n  RATE_LIMIT_WINDOW: 'N8N_MCP_RATE_LIMIT_WINDOW',\n\n  /** Max requests per window */\n  MAX_REQUESTS_PER_WINDOW: 'N8N_MCP_MAX_REQUESTS_PER_WINDOW',\n} as const;\n\n/**\n * Parse enhanced authentication configuration from environment\n */\nexport function parseEnhancedAuthConfigFromEnv(): Partial<EnhancedAuthConfig> {\n  return {\n    mfaEnabled: process.env[ENHANCED_AUTH_ENV_CONFIG.MFA_ENABLED] === 'true',\n    session: {\n      timeout: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT] \n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_TIMEOUT]!) * 1000 \n        : 24 * 60 * 60 * 1000,\n      sliding: process.env[ENHANCED_AUTH_ENV_CONFIG.SESSION_SLIDING] !== 'false',\n      maxConcurrent: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_CONCURRENT_SESSIONS]!)\n        : 5,\n      storage: 'memory' as const,\n    },\n    tokenRotation: {\n      enabled: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_ENABLED] === 'true',\n      interval: process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.TOKEN_ROTATION_INTERVAL]!) * 1000\n        : 60 * 60 * 1000,\n      gracePeriod: 5 * 60 * 1000,\n    },\n    security: {\n      trackFailedAttempts: true,\n      maxFailedAttempts: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_FAILED_ATTEMPTS]!)\n        : 5,\n      lockoutDuration: process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.LOCKOUT_DURATION]!) * 1000\n        : 15 * 60 * 1000,\n      rateLimiting: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMITING_ENABLED] !== 'false',\n      rateLimitWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.RATE_LIMIT_WINDOW]!) * 1000\n        : 60 * 1000,\n      maxRequestsPerWindow: process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW]\n        ? parseInt(process.env[ENHANCED_AUTH_ENV_CONFIG.MAX_REQUESTS_PER_WINDOW]!)\n        : 60,\n    },\n    audit: {\n      enabled: true,\n      logSuccess: true,\n      logFailures: true,\n      logSessions: true,\n      logSecurity: true,\n    },\n  };\n}"],"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","ignoreList":[]}