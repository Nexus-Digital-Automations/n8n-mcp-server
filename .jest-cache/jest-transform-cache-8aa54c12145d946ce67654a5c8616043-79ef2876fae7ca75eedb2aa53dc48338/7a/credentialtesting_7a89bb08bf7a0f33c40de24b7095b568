322ce639a84e78e3c4fc228a03e9dd3a
/* istanbul ignore next */
function cov_1941b9thp2() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credential-testing.ts";
  var hash = "0a78a49d8ca034b8794ee017a0df1e2dadc7138a";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credential-testing.ts",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 29
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "1": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "2": {
        start: {
          line: 25,
          column: 25
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "3": {
        start: {
          line: 37,
          column: 30
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "4": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "5": {
        start: {
          line: 51,
          column: 28
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "6": {
        start: {
          line: 55,
          column: 36
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "7": {
        start: {
          line: 60,
          column: 27
        },
        end: {
          line: 63,
          column: 2
        }
      },
      "8": {
        start: {
          line: 64,
          column: 34
        },
        end: {
          line: 76,
          column: 2
        }
      },
      "9": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 24
        }
      },
      "10": {
        start: {
          line: 92,
          column: 25
        },
        end: {
          line: 97,
          column: 1
        }
      },
      "11": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "12": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 44
        }
      },
      "13": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 96,
          column: 25
        }
      },
      "14": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "15": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 103,
          column: 7
        }
      },
      "16": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "17": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "18": {
        start: {
          line: 121,
          column: 37
        },
        end: {
          line: 121,
          column: 57
        }
      },
      "19": {
        start: {
          line: 123,
          column: 32
        },
        end: {
          line: 128,
          column: 17
        }
      },
      "20": {
        start: {
          line: 130,
          column: 35
        },
        end: {
          line: 130,
          column: 75
        }
      },
      "21": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 136,
          column: 17
        }
      },
      "22": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 135,
          column: 89
        }
      },
      "23": {
        start: {
          line: 138,
          column: 35
        },
        end: {
          line: 138,
          column: 75
        }
      },
      "24": {
        start: {
          line: 139,
          column: 32
        },
        end: {
          line: 139,
          column: 34
        }
      },
      "25": {
        start: {
          line: 140,
          column: 36
        },
        end: {
          line: 140,
          column: 38
        }
      },
      "26": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "27": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 177,
          column: 21
        }
      },
      "28": {
        start: {
          line: 144,
          column: 24
        },
        end: {
          line: 172,
          column: 25
        }
      },
      "29": {
        start: {
          line: 146,
          column: 32
        },
        end: {
          line: 146,
          column: 76
        }
      },
      "30": {
        start: {
          line: 147,
          column: 32
        },
        end: {
          line: 147,
          column: 61
        }
      },
      "31": {
        start: {
          line: 148,
          column: 32
        },
        end: {
          line: 148,
          column: 71
        }
      },
      "32": {
        start: {
          line: 149,
          column: 32
        },
        end: {
          line: 149,
          column: 38
        }
      },
      "33": {
        start: {
          line: 151,
          column: 32
        },
        end: {
          line: 151,
          column: 77
        }
      },
      "34": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 62
        }
      },
      "35": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 72
        }
      },
      "36": {
        start: {
          line: 154,
          column: 32
        },
        end: {
          line: 154,
          column: 38
        }
      },
      "37": {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 156,
          column: 78
        }
      },
      "38": {
        start: {
          line: 157,
          column: 32
        },
        end: {
          line: 157,
          column: 63
        }
      },
      "39": {
        start: {
          line: 158,
          column: 32
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "40": {
        start: {
          line: 159,
          column: 32
        },
        end: {
          line: 159,
          column: 38
        }
      },
      "41": {
        start: {
          line: 161,
          column: 32
        },
        end: {
          line: 161,
          column: 72
        }
      },
      "42": {
        start: {
          line: 162,
          column: 32
        },
        end: {
          line: 162,
          column: 57
        }
      },
      "43": {
        start: {
          line: 163,
          column: 32
        },
        end: {
          line: 163,
          column: 80
        }
      },
      "44": {
        start: {
          line: 164,
          column: 32
        },
        end: {
          line: 164,
          column: 38
        }
      },
      "45": {
        start: {
          line: 166,
          column: 32
        },
        end: {
          line: 166,
          column: 75
        }
      },
      "46": {
        start: {
          line: 167,
          column: 32
        },
        end: {
          line: 167,
          column: 60
        }
      },
      "47": {
        start: {
          line: 168,
          column: 32
        },
        end: {
          line: 168,
          column: 83
        }
      },
      "48": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 38
        }
      },
      "49": {
        start: {
          line: 171,
          column: 32
        },
        end: {
          line: 171,
          column: 83
        }
      },
      "50": {
        start: {
          line: 175,
          column: 24
        },
        end: {
          line: 175,
          column: 55
        }
      },
      "51": {
        start: {
          line: 176,
          column: 24
        },
        end: {
          line: 176,
          column: 130
        }
      },
      "52": {
        start: {
          line: 179,
          column: 29
        },
        end: {
          line: 179,
          column: 44
        }
      },
      "53": {
        start: {
          line: 180,
          column: 46
        },
        end: {
          line: 180,
          column: 87
        }
      },
      "54": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 197,
          column: 77
        }
      },
      "55": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 124
        }
      },
      "56": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 251,
          column: 7
        }
      },
      "57": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 249,
          column: 13
        }
      },
      "58": {
        start: {
          line: 218,
          column: 32
        },
        end: {
          line: 218,
          column: 50
        }
      },
      "59": {
        start: {
          line: 219,
          column: 31
        },
        end: {
          line: 234,
          column: 17
        }
      },
      "60": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 49
        }
      },
      "61": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 245,
          column: 82
        }
      },
      "62": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 137
        }
      },
      "63": {
        start: {
          line: 253,
          column: 4
        },
        end: {
          line: 287,
          column: 7
        }
      },
      "64": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 285,
          column: 13
        }
      },
      "65": {
        start: {
          line: 266,
          column: 32
        },
        end: {
          line: 266,
          column: 50
        }
      },
      "66": {
        start: {
          line: 267,
          column: 41
        },
        end: {
          line: 271,
          column: 18
        }
      },
      "67": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 281,
          column: 62
        }
      },
      "68": {
        start: {
          line: 284,
          column: 16
        },
        end: {
          line: 284,
          column: 144
        }
      },
      "69": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 340,
          column: 7
        }
      },
      "70": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 338,
          column: 13
        }
      },
      "71": {
        start: {
          line: 302,
          column: 32
        },
        end: {
          line: 302,
          column: 50
        }
      },
      "72": {
        start: {
          line: 303,
          column: 31
        },
        end: {
          line: 309,
          column: 18
        }
      },
      "73": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 320,
          column: 17
        }
      },
      "74": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 319,
          column: 92
        }
      },
      "75": {
        start: {
          line: 321,
          column: 31
        },
        end: {
          line: 321,
          column: 44
        }
      },
      "76": {
        start: {
          line: 322,
          column: 33
        },
        end: {
          line: 322,
          column: 48
        }
      },
      "77": {
        start: {
          line: 323,
          column: 16
        },
        end: {
          line: 334,
          column: 112
        }
      },
      "78": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 337,
          column: 133
        }
      },
      "79": {
        start: {
          line: 342,
          column: 4
        },
        end: {
          line: 381,
          column: 7
        }
      },
      "80": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 379,
          column: 13
        }
      },
      "81": {
        start: {
          line: 355,
          column: 32
        },
        end: {
          line: 355,
          column: 50
        }
      },
      "82": {
        start: {
          line: 356,
          column: 34
        },
        end: {
          line: 356,
          column: 89
        }
      },
      "83": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 366,
          column: 17
        }
      },
      "84": {
        start: {
          line: 358,
          column: 20
        },
        end: {
          line: 365,
          column: 57
        }
      },
      "85": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 375,
          column: 77
        }
      },
      "86": {
        start: {
          line: 378,
          column: 16
        },
        end: {
          line: 378,
          column: 132
        }
      },
      "87": {
        start: {
          line: 383,
          column: 4
        },
        end: {
          line: 427,
          column: 7
        }
      },
      "88": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 425,
          column: 13
        }
      },
      "89": {
        start: {
          line: 396,
          column: 32
        },
        end: {
          line: 396,
          column: 50
        }
      },
      "90": {
        start: {
          line: 397,
          column: 31
        },
        end: {
          line: 397,
          column: 76
        }
      },
      "91": {
        start: {
          line: 398,
          column: 16
        },
        end: {
          line: 403,
          column: 17
        }
      },
      "92": {
        start: {
          line: 399,
          column: 20
        },
        end: {
          line: 402,
          column: 90
        }
      },
      "93": {
        start: {
          line: 404,
          column: 32
        },
        end: {
          line: 404,
          column: 82
        }
      },
      "94": {
        start: {
          line: 405,
          column: 28
        },
        end: {
          line: 405,
          column: 38
        }
      },
      "95": {
        start: {
          line: 406,
          column: 37
        },
        end: {
          line: 406,
          column: 85
        }
      },
      "96": {
        start: {
          line: 407,
          column: 16
        },
        end: {
          line: 421,
          column: 150
        }
      },
      "97": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 424,
          column: 133
        }
      },
      "98": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 456,
          column: 7
        }
      },
      "99": {
        start: {
          line: 441,
          column: 12
        },
        end: {
          line: 454,
          column: 13
        }
      },
      "100": {
        start: {
          line: 442,
          column: 32
        },
        end: {
          line: 442,
          column: 50
        }
      },
      "101": {
        start: {
          line: 443,
          column: 32
        },
        end: {
          line: 443,
          column: 86
        }
      },
      "102": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 450,
          column: 102
        }
      },
      "103": {
        start: {
          line: 453,
          column: 16
        },
        end: {
          line: 453,
          column: 131
        }
      },
      "104": {
        start: {
          line: 458,
          column: 4
        },
        end: {
          line: 497,
          column: 7
        }
      },
      "105": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 495,
          column: 13
        }
      },
      "106": {
        start: {
          line: 471,
          column: 32
        },
        end: {
          line: 471,
          column: 50
        }
      },
      "107": {
        start: {
          line: 472,
          column: 33
        },
        end: {
          line: 472,
          column: 60
        }
      },
      "108": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 475,
          column: 17
        }
      },
      "109": {
        start: {
          line: 474,
          column: 20
        },
        end: {
          line: 474,
          column: 65
        }
      },
      "110": {
        start: {
          line: 476,
          column: 29
        },
        end: {
          line: 476,
          column: 85
        }
      },
      "111": {
        start: {
          line: 477,
          column: 16
        },
        end: {
          line: 490,
          column: 19
        }
      },
      "112": {
        start: {
          line: 478,
          column: 37
        },
        end: {
          line: 478,
          column: 67
        }
      },
      "113": {
        start: {
          line: 479,
          column: 20
        },
        end: {
          line: 479,
          column: 72
        }
      },
      "114": {
        start: {
          line: 480,
          column: 20
        },
        end: {
          line: 480,
          column: 72
        }
      },
      "115": {
        start: {
          line: 481,
          column: 20
        },
        end: {
          line: 481,
          column: 63
        }
      },
      "116": {
        start: {
          line: 482,
          column: 20
        },
        end: {
          line: 482,
          column: 96
        }
      },
      "117": {
        start: {
          line: 483,
          column: 20
        },
        end: {
          line: 483,
          column: 96
        }
      },
      "118": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 484,
          column: 89
        }
      },
      "119": {
        start: {
          line: 485,
          column: 20
        },
        end: {
          line: 485,
          column: 95
        }
      },
      "120": {
        start: {
          line: 486,
          column: 20
        },
        end: {
          line: 488,
          column: 21
        }
      },
      "121": {
        start: {
          line: 487,
          column: 24
        },
        end: {
          line: 487,
          column: 89
        }
      },
      "122": {
        start: {
          line: 489,
          column: 20
        },
        end: {
          line: 489,
          column: 35
        }
      },
      "123": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 491,
          column: 30
        }
      },
      "124": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 494,
          column: 131
        }
      },
      "125": {
        start: {
          line: 499,
          column: 4
        },
        end: {
          line: 587,
          column: 7
        }
      },
      "126": {
        start: {
          line: 511,
          column: 12
        },
        end: {
          line: 585,
          column: 13
        }
      },
      "127": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 517,
          column: 17
        }
      },
      "128": {
        start: {
          line: 513,
          column: 20
        },
        end: {
          line: 516,
          column: 91
        }
      },
      "129": {
        start: {
          line: 519,
          column: 32
        },
        end: {
          line: 522,
          column: 17
        }
      },
      "130": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 540,
          column: 17
        }
      },
      "131": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 530,
          column: 21
        }
      },
      "132": {
        start: {
          line: 526,
          column: 24
        },
        end: {
          line: 526,
          column: 90
        }
      },
      "133": {
        start: {
          line: 528,
          column: 25
        },
        end: {
          line: 530,
          column: 21
        }
      },
      "134": {
        start: {
          line: 529,
          column: 24
        },
        end: {
          line: 529,
          column: 71
        }
      },
      "135": {
        start: {
          line: 532,
          column: 21
        },
        end: {
          line: 540,
          column: 17
        }
      },
      "136": {
        start: {
          line: 533,
          column: 40
        },
        end: {
          line: 533,
          column: 137
        }
      },
      "137": {
        start: {
          line: 534,
          column: 20
        },
        end: {
          line: 534,
          column: 70
        }
      },
      "138": {
        start: {
          line: 536,
          column: 21
        },
        end: {
          line: 540,
          column: 17
        }
      },
      "139": {
        start: {
          line: 537,
          column: 20
        },
        end: {
          line: 539,
          column: 21
        }
      },
      "140": {
        start: {
          line: 538,
          column: 24
        },
        end: {
          line: 538,
          column: 95
        }
      },
      "141": {
        start: {
          line: 542,
          column: 35
        },
        end: {
          line: 542,
          column: 56
        }
      },
      "142": {
        start: {
          line: 543,
          column: 34
        },
        end: {
          line: 543,
          column: 84
        }
      },
      "143": {
        start: {
          line: 543,
          column: 51
        },
        end: {
          line: 543,
          column: 69
        }
      },
      "144": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 571,
          column: 17
        }
      },
      "145": {
        start: {
          line: 545,
          column: 37
        },
        end: {
          line: 549,
          column: 22
        }
      },
      "146": {
        start: {
          line: 550,
          column: 20
        },
        end: {
          line: 550,
          column: 44
        }
      },
      "147": {
        start: {
          line: 551,
          column: 38
        },
        end: {
          line: 551,
          column: 85
        }
      },
      "148": {
        start: {
          line: 552,
          column: 41
        },
        end: {
          line: 552,
          column: 101
        }
      },
      "149": {
        start: {
          line: 552,
          column: 75
        },
        end: {
          line: 552,
          column: 100
        }
      },
      "150": {
        start: {
          line: 553,
          column: 20
        },
        end: {
          line: 566,
          column: 125
        }
      },
      "151": {
        start: {
          line: 569,
          column: 20
        },
        end: {
          line: 569,
          column: 44
        }
      },
      "152": {
        start: {
          line: 570,
          column: 20
        },
        end: {
          line: 570,
          column: 32
        }
      },
      "153": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 583,
          column: 17
        }
      },
      "154": {
        start: {
          line: 575,
          column: 20
        },
        end: {
          line: 582,
          column: 50
        }
      },
      "155": {
        start: {
          line: 584,
          column: 16
        },
        end: {
          line: 584,
          column: 123
        }
      },
      "156": {
        start: {
          line: 589,
          column: 4
        },
        end: {
          line: 693,
          column: 7
        }
      },
      "157": {
        start: {
          line: 601,
          column: 12
        },
        end: {
          line: 691,
          column: 13
        }
      },
      "158": {
        start: {
          line: 602,
          column: 32
        },
        end: {
          line: 602,
          column: 34
        }
      },
      "159": {
        start: {
          line: 603,
          column: 39
        },
        end: {
          line: 648,
          column: 17
        }
      },
      "160": {
        start: {
          line: 604,
          column: 38
        },
        end: {
          line: 604,
          column: 48
        }
      },
      "161": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 647,
          column: 21
        }
      },
      "162": {
        start: {
          line: 606,
          column: 24
        },
        end: {
          line: 613,
          column: 25
        }
      },
      "163": {
        start: {
          line: 607,
          column: 28
        },
        end: {
          line: 612,
          column: 30
        }
      },
      "164": {
        start: {
          line: 615,
          column: 40
        },
        end: {
          line: 618,
          column: 25
        }
      },
      "165": {
        start: {
          line: 619,
          column: 24
        },
        end: {
          line: 625,
          column: 25
        }
      },
      "166": {
        start: {
          line: 620,
          column: 28
        },
        end: {
          line: 620,
          column: 84
        }
      },
      "167": {
        start: {
          line: 622,
          column: 29
        },
        end: {
          line: 625,
          column: 25
        }
      },
      "168": {
        start: {
          line: 623,
          column: 48
        },
        end: {
          line: 623,
          column: 125
        }
      },
      "169": {
        start: {
          line: 624,
          column: 28
        },
        end: {
          line: 624,
          column: 78
        }
      },
      "170": {
        start: {
          line: 626,
          column: 41
        },
        end: {
          line: 630,
          column: 26
        }
      },
      "171": {
        start: {
          line: 631,
          column: 24
        },
        end: {
          line: 637,
          column: 26
        }
      },
      "172": {
        start: {
          line: 640,
          column: 24
        },
        end: {
          line: 646,
          column: 26
        }
      },
      "173": {
        start: {
          line: 650,
          column: 16
        },
        end: {
          line: 659,
          column: 17
        }
      },
      "174": {
        start: {
          line: 651,
          column: 37
        },
        end: {
          line: 651,
          column: 73
        }
      },
      "175": {
        start: {
          line: 652,
          column: 20
        },
        end: {
          line: 652,
          column: 67
        }
      },
      "176": {
        start: {
          line: 655,
          column: 20
        },
        end: {
          line: 658,
          column: 21
        }
      },
      "177": {
        start: {
          line: 656,
          column: 39
        },
        end: {
          line: 656,
          column: 65
        }
      },
      "178": {
        start: {
          line: 657,
          column: 24
        },
        end: {
          line: 657,
          column: 45
        }
      },
      "179": {
        start: {
          line: 661,
          column: 35
        },
        end: {
          line: 661,
          column: 72
        }
      },
      "180": {
        start: {
          line: 661,
          column: 55
        },
        end: {
          line: 661,
          column: 64
        }
      },
      "181": {
        start: {
          line: 662,
          column: 31
        },
        end: {
          line: 662,
          column: 58
        }
      },
      "182": {
        start: {
          line: 663,
          column: 40
        },
        end: {
          line: 664,
          column: 34
        }
      },
      "183": {
        start: {
          line: 663,
          column: 60
        },
        end: {
          line: 663,
          column: 74
        }
      },
      "184": {
        start: {
          line: 663,
          column: 95
        },
        end: {
          line: 663,
          column: 122
        }
      },
      "185": {
        start: {
          line: 665,
          column: 29
        },
        end: {
          line: 665,
          column: 71
        }
      },
      "186": {
        start: {
          line: 666,
          column: 16
        },
        end: {
          line: 666,
          column: 68
        }
      },
      "187": {
        start: {
          line: 667,
          column: 16
        },
        end: {
          line: 667,
          column: 62
        }
      },
      "188": {
        start: {
          line: 668,
          column: 16
        },
        end: {
          line: 668,
          column: 54
        }
      },
      "189": {
        start: {
          line: 669,
          column: 16
        },
        end: {
          line: 669,
          column: 102
        }
      },
      "190": {
        start: {
          line: 670,
          column: 16
        },
        end: {
          line: 670,
          column: 97
        }
      },
      "191": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 671,
          column: 94
        }
      },
      "192": {
        start: {
          line: 672,
          column: 16
        },
        end: {
          line: 672,
          column: 52
        }
      },
      "193": {
        start: {
          line: 673,
          column: 16
        },
        end: {
          line: 686,
          column: 19
        }
      },
      "194": {
        start: {
          line: 674,
          column: 20
        },
        end: {
          line: 674,
          column: 82
        }
      },
      "195": {
        start: {
          line: 675,
          column: 20
        },
        end: {
          line: 675,
          column: 92
        }
      },
      "196": {
        start: {
          line: 676,
          column: 20
        },
        end: {
          line: 678,
          column: 21
        }
      },
      "197": {
        start: {
          line: 677,
          column: 24
        },
        end: {
          line: 677,
          column: 73
        }
      },
      "198": {
        start: {
          line: 679,
          column: 20
        },
        end: {
          line: 681,
          column: 21
        }
      },
      "199": {
        start: {
          line: 680,
          column: 24
        },
        end: {
          line: 680,
          column: 83
        }
      },
      "200": {
        start: {
          line: 682,
          column: 20
        },
        end: {
          line: 684,
          column: 21
        }
      },
      "201": {
        start: {
          line: 683,
          column: 24
        },
        end: {
          line: 683,
          column: 66
        }
      },
      "202": {
        start: {
          line: 685,
          column: 20
        },
        end: {
          line: 685,
          column: 35
        }
      },
      "203": {
        start: {
          line: 687,
          column: 16
        },
        end: {
          line: 687,
          column: 30
        }
      },
      "204": {
        start: {
          line: 690,
          column: 16
        },
        end: {
          line: 690,
          column: 129
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 92,
            column: 25
          },
          end: {
            line: 92,
            column: 26
          }
        },
        loc: {
          start: {
            line: 92,
            column: 31
          },
          end: {
            line: 97,
            column: 1
          }
        },
        line: 92
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 99,
            column: 27
          },
          end: {
            line: 99,
            column: 28
          }
        },
        loc: {
          start: {
            line: 99,
            column: 33
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 99
      },
      "2": {
        name: "createCredentialTestingTools",
        decl: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 44
          }
        },
        loc: {
          start: {
            line: 106,
            column: 64
          },
          end: {
            line: 694,
            column: 1
          }
        },
        line: 106
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 119,
            column: 17
          },
          end: {
            line: 119,
            column: 18
          }
        },
        loc: {
          start: {
            line: 119,
            column: 33
          },
          end: {
            line: 202,
            column: 9
          }
        },
        line: 119
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 216,
            column: 17
          },
          end: {
            line: 216,
            column: 18
          }
        },
        loc: {
          start: {
            line: 216,
            column: 33
          },
          end: {
            line: 250,
            column: 9
          }
        },
        line: 216
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 264,
            column: 17
          },
          end: {
            line: 264,
            column: 18
          }
        },
        loc: {
          start: {
            line: 264,
            column: 33
          },
          end: {
            line: 286,
            column: 9
          }
        },
        line: 264
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 300,
            column: 17
          },
          end: {
            line: 300,
            column: 18
          }
        },
        loc: {
          start: {
            line: 300,
            column: 33
          },
          end: {
            line: 339,
            column: 9
          }
        },
        line: 300
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 353,
            column: 17
          },
          end: {
            line: 353,
            column: 18
          }
        },
        loc: {
          start: {
            line: 353,
            column: 33
          },
          end: {
            line: 380,
            column: 9
          }
        },
        line: 353
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 394,
            column: 17
          },
          end: {
            line: 394,
            column: 18
          }
        },
        loc: {
          start: {
            line: 394,
            column: 33
          },
          end: {
            line: 426,
            column: 9
          }
        },
        line: 394
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 440,
            column: 17
          },
          end: {
            line: 440,
            column: 18
          }
        },
        loc: {
          start: {
            line: 440,
            column: 33
          },
          end: {
            line: 455,
            column: 9
          }
        },
        line: 440
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 469,
            column: 17
          },
          end: {
            line: 469,
            column: 18
          }
        },
        loc: {
          start: {
            line: 469,
            column: 29
          },
          end: {
            line: 496,
            column: 9
          }
        },
        line: 469
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 477,
            column: 33
          },
          end: {
            line: 477,
            column: 34
          }
        },
        loc: {
          start: {
            line: 477,
            column: 53
          },
          end: {
            line: 490,
            column: 17
          }
        },
        line: 477
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 510,
            column: 17
          },
          end: {
            line: 510,
            column: 18
          }
        },
        loc: {
          start: {
            line: 510,
            column: 33
          },
          end: {
            line: 586,
            column: 9
          }
        },
        line: 510
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 543,
            column: 45
          },
          end: {
            line: 543,
            column: 46
          }
        },
        loc: {
          start: {
            line: 543,
            column: 51
          },
          end: {
            line: 543,
            column: 69
          }
        },
        line: 543
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 552,
            column: 69
          },
          end: {
            line: 552,
            column: 70
          }
        },
        loc: {
          start: {
            line: 552,
            column: 75
          },
          end: {
            line: 552,
            column: 100
          }
        },
        line: 552
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 600,
            column: 17
          },
          end: {
            line: 600,
            column: 18
          }
        },
        loc: {
          start: {
            line: 600,
            column: 33
          },
          end: {
            line: 692,
            column: 9
          }
        },
        line: 600
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 603,
            column: 39
          },
          end: {
            line: 603,
            column: 40
          }
        },
        loc: {
          start: {
            line: 603,
            column: 55
          },
          end: {
            line: 648,
            column: 17
          }
        },
        line: 603
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 661,
            column: 50
          },
          end: {
            line: 661,
            column: 51
          }
        },
        loc: {
          start: {
            line: 661,
            column: 55
          },
          end: {
            line: 661,
            column: 64
          }
        },
        line: 661
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 663,
            column: 55
          },
          end: {
            line: 663,
            column: 56
          }
        },
        loc: {
          start: {
            line: 663,
            column: 60
          },
          end: {
            line: 663,
            column: 74
          }
        },
        line: 663
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 663,
            column: 83
          },
          end: {
            line: 663,
            column: 84
          }
        },
        loc: {
          start: {
            line: 663,
            column: 95
          },
          end: {
            line: 663,
            column: 122
          }
        },
        line: 663
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 673,
            column: 32
          },
          end: {
            line: 673,
            column: 33
          }
        },
        loc: {
          start: {
            line: 673,
            column: 51
          },
          end: {
            line: 686,
            column: 17
          }
        },
        line: 673
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "1": {
        loc: {
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 16
          },
          end: {
            line: 136,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "2": {
        loc: {
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 172,
            column: 25
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 145,
            column: 28
          },
          end: {
            line: 149,
            column: 38
          }
        }, {
          start: {
            line: 150,
            column: 28
          },
          end: {
            line: 154,
            column: 38
          }
        }, {
          start: {
            line: 155,
            column: 28
          },
          end: {
            line: 159,
            column: 38
          }
        }, {
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 164,
            column: 38
          }
        }, {
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 169,
            column: 38
          }
        }, {
          start: {
            line: 170,
            column: 28
          },
          end: {
            line: 171,
            column: 83
          }
        }],
        line: 144
      },
      "3": {
        loc: {
          start: {
            line: 176,
            column: 70
          },
          end: {
            line: 176,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 95
          },
          end: {
            line: 176,
            column: 108
          }
        }, {
          start: {
            line: 176,
            column: 111
          },
          end: {
            line: 176,
            column: 126
          }
        }],
        line: 176
      },
      "4": {
        loc: {
          start: {
            line: 180,
            column: 46
          },
          end: {
            line: 180,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 46
          },
          end: {
            line: 180,
            column: 63
          }
        }, {
          start: {
            line: 180,
            column: 67
          },
          end: {
            line: 180,
            column: 87
          }
        }],
        line: 180
      },
      "5": {
        loc: {
          start: {
            line: 185,
            column: 40
          },
          end: {
            line: 185,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 64
          },
          end: {
            line: 185,
            column: 76
          }
        }, {
          start: {
            line: 185,
            column: 79
          },
          end: {
            line: 185,
            column: 90
          }
        }],
        line: 185
      },
      "6": {
        loc: {
          start: {
            line: 191,
            column: 45
          },
          end: {
            line: 191,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 74
          },
          end: {
            line: 191,
            column: 77
          }
        }, {
          start: {
            line: 191,
            column: 80
          },
          end: {
            line: 191,
            column: 83
          }
        }],
        line: 191
      },
      "7": {
        loc: {
          start: {
            line: 192,
            column: 46
          },
          end: {
            line: 192,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 76
          },
          end: {
            line: 192,
            column: 79
          }
        }, {
          start: {
            line: 192,
            column: 82
          },
          end: {
            line: 192,
            column: 85
          }
        }],
        line: 192
      },
      "8": {
        loc: {
          start: {
            line: 193,
            column: 46
          },
          end: {
            line: 193,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 75
          },
          end: {
            line: 193,
            column: 78
          }
        }, {
          start: {
            line: 193,
            column: 81
          },
          end: {
            line: 193,
            column: 84
          }
        }],
        line: 193
      },
      "9": {
        loc: {
          start: {
            line: 194,
            column: 43
          },
          end: {
            line: 194,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 73
          },
          end: {
            line: 194,
            column: 76
          }
        }, {
          start: {
            line: 194,
            column: 79
          },
          end: {
            line: 194,
            column: 82
          }
        }],
        line: 194
      },
      "10": {
        loc: {
          start: {
            line: 195,
            column: 48
          },
          end: {
            line: 195,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 79
          },
          end: {
            line: 195,
            column: 82
          }
        }, {
          start: {
            line: 195,
            column: 85
          },
          end: {
            line: 195,
            column: 88
          }
        }],
        line: 195
      },
      "11": {
        loc: {
          start: {
            line: 196,
            column: 42
          },
          end: {
            line: 196,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 67
          },
          end: {
            line: 196,
            column: 70
          }
        }, {
          start: {
            line: 196,
            column: 73
          },
          end: {
            line: 196,
            column: 76
          }
        }],
        line: 196
      },
      "12": {
        loc: {
          start: {
            line: 197,
            column: 39
          },
          end: {
            line: 197,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 197,
            column: 64
          },
          end: {
            line: 197,
            column: 67
          }
        }, {
          start: {
            line: 197,
            column: 70
          },
          end: {
            line: 197,
            column: 73
          }
        }],
        line: 197
      },
      "13": {
        loc: {
          start: {
            line: 200,
            column: 64
          },
          end: {
            line: 200,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 200,
            column: 89
          },
          end: {
            line: 200,
            column: 102
          }
        }, {
          start: {
            line: 200,
            column: 105
          },
          end: {
            line: 200,
            column: 120
          }
        }],
        line: 200
      },
      "14": {
        loc: {
          start: {
            line: 229,
            column: 26
          },
          end: {
            line: 229,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 229,
            column: 44
          },
          end: {
            line: 229,
            column: 86
          }
        }, {
          start: {
            line: 229,
            column: 89
          },
          end: {
            line: 229,
            column: 98
          }
        }],
        line: 229
      },
      "15": {
        loc: {
          start: {
            line: 241,
            column: 44
          },
          end: {
            line: 241,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 241,
            column: 44
          },
          end: {
            line: 241,
            column: 60
          }
        }, {
          start: {
            line: 241,
            column: 64
          },
          end: {
            line: 241,
            column: 80
          }
        }],
        line: 241
      },
      "16": {
        loc: {
          start: {
            line: 244,
            column: 43
          },
          end: {
            line: 244,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 244,
            column: 61
          },
          end: {
            line: 244,
            column: 66
          }
        }, {
          start: {
            line: 244,
            column: 69
          },
          end: {
            line: 244,
            column: 73
          }
        }],
        line: 244
      },
      "17": {
        loc: {
          start: {
            line: 248,
            column: 77
          },
          end: {
            line: 248,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 102
          },
          end: {
            line: 248,
            column: 115
          }
        }, {
          start: {
            line: 248,
            column: 118
          },
          end: {
            line: 248,
            column: 133
          }
        }],
        line: 248
      },
      "18": {
        loc: {
          start: {
            line: 277,
            column: 35
          },
          end: {
            line: 277,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 277,
            column: 59
          },
          end: {
            line: 277,
            column: 68
          }
        }, {
          start: {
            line: 277,
            column: 71
          },
          end: {
            line: 277,
            column: 81
          }
        }],
        line: 277
      },
      "19": {
        loc: {
          start: {
            line: 284,
            column: 84
          },
          end: {
            line: 284,
            column: 140
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 109
          },
          end: {
            line: 284,
            column: 122
          }
        }, {
          start: {
            line: 284,
            column: 125
          },
          end: {
            line: 284,
            column: 140
          }
        }],
        line: 284
      },
      "20": {
        loc: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 320,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "21": {
        loc: {
          start: {
            line: 314,
            column: 25
          },
          end: {
            line: 318,
            column: 32
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 315,
            column: 30
          },
          end: {
            line: 317,
            column: 112
          }
        }, {
          start: {
            line: 318,
            column: 30
          },
          end: {
            line: 318,
            column: 32
          }
        }],
        line: 314
      },
      "22": {
        loc: {
          start: {
            line: 317,
            column: 33
          },
          end: {
            line: 317,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 317,
            column: 59
          },
          end: {
            line: 317,
            column: 106
          }
        }, {
          start: {
            line: 317,
            column: 109
          },
          end: {
            line: 317,
            column: 111
          }
        }],
        line: 317
      },
      "23": {
        loc: {
          start: {
            line: 326,
            column: 40
          },
          end: {
            line: 326,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 326,
            column: 40
          },
          end: {
            line: 326,
            column: 53
          }
        }, {
          start: {
            line: 326,
            column: 57
          },
          end: {
            line: 326,
            column: 66
          }
        }],
        line: 326
      },
      "24": {
        loc: {
          start: {
            line: 327,
            column: 41
          },
          end: {
            line: 327,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 41
          },
          end: {
            line: 327,
            column: 55
          }
        }, {
          start: {
            line: 327,
            column: 59
          },
          end: {
            line: 327,
            column: 73
          }
        }],
        line: 327
      },
      "25": {
        loc: {
          start: {
            line: 331,
            column: 48
          },
          end: {
            line: 331,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 70
          },
          end: {
            line: 331,
            column: 75
          }
        }, {
          start: {
            line: 331,
            column: 78
          },
          end: {
            line: 331,
            column: 82
          }
        }],
        line: 331
      },
      "26": {
        loc: {
          start: {
            line: 332,
            column: 38
          },
          end: {
            line: 332,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 332,
            column: 57
          },
          end: {
            line: 332,
            column: 100
          }
        }, {
          start: {
            line: 332,
            column: 103
          },
          end: {
            line: 332,
            column: 110
          }
        }],
        line: 332
      },
      "27": {
        loc: {
          start: {
            line: 337,
            column: 73
          },
          end: {
            line: 337,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 337,
            column: 98
          },
          end: {
            line: 337,
            column: 111
          }
        }, {
          start: {
            line: 337,
            column: 114
          },
          end: {
            line: 337,
            column: 129
          }
        }],
        line: 337
      },
      "28": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 366,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 366,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "29": {
        loc: {
          start: {
            line: 372,
            column: 38
          },
          end: {
            line: 372,
            column: 116
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 372,
            column: 60
          },
          end: {
            line: 372,
            column: 106
          }
        }, {
          start: {
            line: 372,
            column: 109
          },
          end: {
            line: 372,
            column: 116
          }
        }],
        line: 372
      },
      "30": {
        loc: {
          start: {
            line: 378,
            column: 72
          },
          end: {
            line: 378,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 378,
            column: 97
          },
          end: {
            line: 378,
            column: 110
          }
        }, {
          start: {
            line: 378,
            column: 113
          },
          end: {
            line: 378,
            column: 128
          }
        }],
        line: 378
      },
      "31": {
        loc: {
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 403,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 16
          },
          end: {
            line: 403,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "32": {
        loc: {
          start: {
            line: 406,
            column: 37
          },
          end: {
            line: 406,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 406,
            column: 56
          },
          end: {
            line: 406,
            column: 78
          }
        }, {
          start: {
            line: 406,
            column: 81
          },
          end: {
            line: 406,
            column: 85
          }
        }],
        line: 406
      },
      "33": {
        loc: {
          start: {
            line: 407,
            column: 27
          },
          end: {
            line: 407,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 407,
            column: 37
          },
          end: {
            line: 407,
            column: 40
          }
        }, {
          start: {
            line: 407,
            column: 43
          },
          end: {
            line: 407,
            column: 46
          }
        }],
        line: 407
      },
      "34": {
        loc: {
          start: {
            line: 412,
            column: 48
          },
          end: {
            line: 412,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 412,
            column: 70
          },
          end: {
            line: 412,
            column: 75
          }
        }, {
          start: {
            line: 412,
            column: 78
          },
          end: {
            line: 412,
            column: 82
          }
        }],
        line: 412
      },
      "35": {
        loc: {
          start: {
            line: 413,
            column: 36
          },
          end: {
            line: 413,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 413,
            column: 46
          },
          end: {
            line: 413,
            column: 51
          }
        }, {
          start: {
            line: 413,
            column: 54
          },
          end: {
            line: 413,
            column: 58
          }
        }],
        line: 413
      },
      "36": {
        loc: {
          start: {
            line: 414,
            column: 21
          },
          end: {
            line: 417,
            column: 50
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 415,
            column: 26
          },
          end: {
            line: 416,
            column: 128
          }
        }, {
          start: {
            line: 417,
            column: 26
          },
          end: {
            line: 417,
            column: 50
          }
        }],
        line: 414
      },
      "37": {
        loc: {
          start: {
            line: 416,
            column: 53
          },
          end: {
            line: 416,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 416,
            column: 68
          },
          end: {
            line: 416,
            column: 112
          }
        }, {
          start: {
            line: 416,
            column: 115
          },
          end: {
            line: 416,
            column: 124
          }
        }],
        line: 416
      },
      "38": {
        loc: {
          start: {
            line: 419,
            column: 21
          },
          end: {
            line: 421,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 26
          },
          end: {
            line: 420,
            column: 82
          }
        }, {
          start: {
            line: 421,
            column: 26
          },
          end: {
            line: 421,
            column: 147
          }
        }],
        line: 419
      },
      "39": {
        loc: {
          start: {
            line: 421,
            column: 62
          },
          end: {
            line: 421,
            column: 145
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 421,
            column: 84
          },
          end: {
            line: 421,
            column: 113
          }
        }, {
          start: {
            line: 421,
            column: 116
          },
          end: {
            line: 421,
            column: 145
          }
        }],
        line: 421
      },
      "40": {
        loc: {
          start: {
            line: 424,
            column: 73
          },
          end: {
            line: 424,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 424,
            column: 98
          },
          end: {
            line: 424,
            column: 111
          }
        }, {
          start: {
            line: 424,
            column: 114
          },
          end: {
            line: 424,
            column: 129
          }
        }],
        line: 424
      },
      "41": {
        loc: {
          start: {
            line: 444,
            column: 27
          },
          end: {
            line: 444,
            column: 47
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 444,
            column: 37
          },
          end: {
            line: 444,
            column: 40
          }
        }, {
          start: {
            line: 444,
            column: 43
          },
          end: {
            line: 444,
            column: 47
          }
        }],
        line: 444
      },
      "42": {
        loc: {
          start: {
            line: 444,
            column: 70
          },
          end: {
            line: 444,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 444,
            column: 80
          },
          end: {
            line: 444,
            column: 92
          }
        }, {
          start: {
            line: 444,
            column: 95
          },
          end: {
            line: 444,
            column: 106
          }
        }],
        line: 444
      },
      "43": {
        loc: {
          start: {
            line: 447,
            column: 21
          },
          end: {
            line: 449,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 26
          },
          end: {
            line: 448,
            column: 102
          }
        }, {
          start: {
            line: 449,
            column: 26
          },
          end: {
            line: 449,
            column: 109
          }
        }],
        line: 447
      },
      "44": {
        loc: {
          start: {
            line: 453,
            column: 71
          },
          end: {
            line: 453,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 453,
            column: 96
          },
          end: {
            line: 453,
            column: 109
          }
        }, {
          start: {
            line: 453,
            column: 112
          },
          end: {
            line: 453,
            column: 127
          }
        }],
        line: 453
      },
      "45": {
        loc: {
          start: {
            line: 473,
            column: 16
          },
          end: {
            line: 475,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 16
          },
          end: {
            line: 475,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "46": {
        loc: {
          start: {
            line: 485,
            column: 44
          },
          end: {
            line: 485,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 485,
            column: 68
          },
          end: {
            line: 485,
            column: 77
          }
        }, {
          start: {
            line: 485,
            column: 80
          },
          end: {
            line: 485,
            column: 90
          }
        }],
        line: 485
      },
      "47": {
        loc: {
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 486,
            column: 20
          },
          end: {
            line: 488,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 486
      },
      "48": {
        loc: {
          start: {
            line: 486,
            column: 24
          },
          end: {
            line: 486,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 486,
            column: 24
          },
          end: {
            line: 486,
            column: 40
          }
        }, {
          start: {
            line: 486,
            column: 44
          },
          end: {
            line: 486,
            column: 84
          }
        }],
        line: 486
      },
      "49": {
        loc: {
          start: {
            line: 494,
            column: 71
          },
          end: {
            line: 494,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 494,
            column: 96
          },
          end: {
            line: 494,
            column: 109
          }
        }, {
          start: {
            line: 494,
            column: 112
          },
          end: {
            line: 494,
            column: 127
          }
        }],
        line: 494
      },
      "50": {
        loc: {
          start: {
            line: 512,
            column: 16
          },
          end: {
            line: 517,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 512,
            column: 16
          },
          end: {
            line: 517,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 512
      },
      "51": {
        loc: {
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 540,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 540,
            column: 17
          }
        }, {
          start: {
            line: 532,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        }],
        line: 524
      },
      "52": {
        loc: {
          start: {
            line: 525,
            column: 20
          },
          end: {
            line: 530,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 525,
            column: 20
          },
          end: {
            line: 530,
            column: 21
          }
        }, {
          start: {
            line: 528,
            column: 25
          },
          end: {
            line: 530,
            column: 21
          }
        }],
        line: 525
      },
      "53": {
        loc: {
          start: {
            line: 528,
            column: 25
          },
          end: {
            line: 530,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 528,
            column: 25
          },
          end: {
            line: 530,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 528
      },
      "54": {
        loc: {
          start: {
            line: 532,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 532,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        }, {
          start: {
            line: 536,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        }],
        line: 532
      },
      "55": {
        loc: {
          start: {
            line: 536,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 536,
            column: 21
          },
          end: {
            line: 540,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 536
      },
      "56": {
        loc: {
          start: {
            line: 537,
            column: 20
          },
          end: {
            line: 539,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 20
          },
          end: {
            line: 539,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "57": {
        loc: {
          start: {
            line: 551,
            column: 38
          },
          end: {
            line: 551,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 551,
            column: 38
          },
          end: {
            line: 551,
            column: 60
          }
        }, {
          start: {
            line: 551,
            column: 64
          },
          end: {
            line: 551,
            column: 85
          }
        }],
        line: 551
      },
      "58": {
        loc: {
          start: {
            line: 553,
            column: 31
          },
          end: {
            line: 553,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 553,
            column: 43
          },
          end: {
            line: 553,
            column: 46
          }
        }, {
          start: {
            line: 553,
            column: 49
          },
          end: {
            line: 553,
            column: 52
          }
        }],
        line: 553
      },
      "59": {
        loc: {
          start: {
            line: 553,
            column: 74
          },
          end: {
            line: 553,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 553,
            column: 86
          },
          end: {
            line: 553,
            column: 98
          }
        }, {
          start: {
            line: 553,
            column: 101
          },
          end: {
            line: 553,
            column: 109
          }
        }],
        line: 553
      },
      "60": {
        loc: {
          start: {
            line: 558,
            column: 47
          },
          end: {
            line: 558,
            column: 96
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 558,
            column: 47
          },
          end: {
            line: 558,
            column: 83
          }
        }, {
          start: {
            line: 558,
            column: 87
          },
          end: {
            line: 558,
            column: 96
          }
        }],
        line: 558
      },
      "61": {
        loc: {
          start: {
            line: 559,
            column: 25
          },
          end: {
            line: 566,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 560,
            column: 30
          },
          end: {
            line: 560,
            column: 80
          }
        }, {
          start: {
            line: 561,
            column: 30
          },
          end: {
            line: 566,
            column: 122
          }
        }],
        line: 559
      },
      "62": {
        loc: {
          start: {
            line: 566,
            column: 82
          },
          end: {
            line: 566,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 566,
            column: 110
          },
          end: {
            line: 566,
            column: 115
          }
        }, {
          start: {
            line: 566,
            column: 118
          },
          end: {
            line: 566,
            column: 120
          }
        }],
        line: 566
      },
      "63": {
        loc: {
          start: {
            line: 574,
            column: 16
          },
          end: {
            line: 583,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 574,
            column: 16
          },
          end: {
            line: 583,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 574
      },
      "64": {
        loc: {
          start: {
            line: 574,
            column: 20
          },
          end: {
            line: 574,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 574,
            column: 20
          },
          end: {
            line: 574,
            column: 42
          }
        }, {
          start: {
            line: 574,
            column: 46
          },
          end: {
            line: 574,
            column: 73
          }
        }],
        line: 574
      },
      "65": {
        loc: {
          start: {
            line: 584,
            column: 63
          },
          end: {
            line: 584,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 584,
            column: 88
          },
          end: {
            line: 584,
            column: 101
          }
        }, {
          start: {
            line: 584,
            column: 104
          },
          end: {
            line: 584,
            column: 119
          }
        }],
        line: 584
      },
      "66": {
        loc: {
          start: {
            line: 606,
            column: 24
          },
          end: {
            line: 613,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 606,
            column: 24
          },
          end: {
            line: 613,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 606
      },
      "67": {
        loc: {
          start: {
            line: 619,
            column: 24
          },
          end: {
            line: 625,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 619,
            column: 24
          },
          end: {
            line: 625,
            column: 25
          }
        }, {
          start: {
            line: 622,
            column: 29
          },
          end: {
            line: 625,
            column: 25
          }
        }],
        line: 619
      },
      "68": {
        loc: {
          start: {
            line: 619,
            column: 28
          },
          end: {
            line: 619,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 619,
            column: 28
          },
          end: {
            line: 619,
            column: 51
          }
        }, {
          start: {
            line: 619,
            column: 55
          },
          end: {
            line: 619,
            column: 71
          }
        }],
        line: 619
      },
      "69": {
        loc: {
          start: {
            line: 622,
            column: 29
          },
          end: {
            line: 625,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 622,
            column: 29
          },
          end: {
            line: 625,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 622
      },
      "70": {
        loc: {
          start: {
            line: 634,
            column: 37
          },
          end: {
            line: 634,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 634,
            column: 37
          },
          end: {
            line: 634,
            column: 59
          }
        }, {
          start: {
            line: 634,
            column: 63
          },
          end: {
            line: 634,
            column: 84
          }
        }],
        line: 634
      },
      "71": {
        loc: {
          start: {
            line: 644,
            column: 35
          },
          end: {
            line: 644,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 644,
            column: 60
          },
          end: {
            line: 644,
            column: 73
          }
        }, {
          start: {
            line: 644,
            column: 76
          },
          end: {
            line: 644,
            column: 91
          }
        }],
        line: 644
      },
      "72": {
        loc: {
          start: {
            line: 650,
            column: 16
          },
          end: {
            line: 659,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 650,
            column: 16
          },
          end: {
            line: 659,
            column: 17
          }
        }, {
          start: {
            line: 654,
            column: 21
          },
          end: {
            line: 659,
            column: 17
          }
        }],
        line: 650
      },
      "73": {
        loc: {
          start: {
            line: 663,
            column: 102
          },
          end: {
            line: 663,
            column: 121
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 663,
            column: 102
          },
          end: {
            line: 663,
            column: 116
          }
        }, {
          start: {
            line: 663,
            column: 120
          },
          end: {
            line: 663,
            column: 121
          }
        }],
        line: 663
      },
      "74": {
        loc: {
          start: {
            line: 670,
            column: 51
          },
          end: {
            line: 670,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 670,
            column: 67
          },
          end: {
            line: 670,
            column: 77
          }
        }, {
          start: {
            line: 670,
            column: 80
          },
          end: {
            line: 670,
            column: 92
          }
        }],
        line: 670
      },
      "75": {
        loc: {
          start: {
            line: 675,
            column: 46
          },
          end: {
            line: 675,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 675,
            column: 63
          },
          end: {
            line: 675,
            column: 74
          }
        }, {
          start: {
            line: 675,
            column: 77
          },
          end: {
            line: 675,
            column: 87
          }
        }],
        line: 675
      },
      "76": {
        loc: {
          start: {
            line: 676,
            column: 20
          },
          end: {
            line: 678,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 676,
            column: 20
          },
          end: {
            line: 678,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 676
      },
      "77": {
        loc: {
          start: {
            line: 679,
            column: 20
          },
          end: {
            line: 681,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 679,
            column: 20
          },
          end: {
            line: 681,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 679
      },
      "78": {
        loc: {
          start: {
            line: 682,
            column: 20
          },
          end: {
            line: 684,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 682,
            column: 20
          },
          end: {
            line: 684,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 682
      },
      "79": {
        loc: {
          start: {
            line: 690,
            column: 69
          },
          end: {
            line: 690,
            column: 125
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 690,
            column: 94
          },
          end: {
            line: 690,
            column: 107
          }
        }, {
          start: {
            line: 690,
            column: 110
          },
          end: {
            line: 690,
            column: 125
          }
        }],
        line: 690
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credential-testing.ts",
      mappings: "AAAA;;;;;GAKG;AAOH,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,aAAa,EAAsC,MAAM,0BAA0B,CAAC;AAC7F,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD,6BAA6B;AAC7B,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,cAAc,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,6BAA6B,CAAC;IAChE,cAAc,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;IAC7C,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IACzC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CACnE,CAAC,CAAC;AAEH,MAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IACnC,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,qBAAqB,CAAC;IAC9C,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;IAChD,cAAc,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;CACpF,CAAC,CAAC;AAEH,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC;IAChC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,uBAAuB,CAAC;IACpD,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,2BAA2B,CAAC;IAC5D,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,wBAAwB,CAAC;IACjD,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,yBAAyB,CAAC;IACnD,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;IACxC,WAAW,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,4BAA4B,CAAC;IACzD,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,gCAAgC,CAAC;IACpE,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;IACxD,UAAU,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC;CACjD,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAG,CAAC,CAAC,MAAM,CAAC;IACrC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAChC,WAAW,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE;IACxD,QAAQ,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE;CACnD,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC;IACpC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC3B,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC5B,iBAAiB,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACxC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACjC,CAAC,CAAC;AAEH,MAAM,mBAAmB,GAAG,CAAC,CAAC,MAAM,CAAC;IACnC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;CACjD,CAAC,CAAC;AAEH,MAAM,2BAA2B,GAAG,CAAC,CAAC,MAAM,CAAC;IAC3C,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;IAChD,aAAa,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC;CACnE,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,CAAC,CAAC,MAAM,CAAC;IAClC,QAAQ,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,sBAAsB,CAAC;IACnD,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,qBAAqB,CAAC;CACjD,CAAC,CAAC;AAEH,MAAM,yBAAyB,GAAG,CAAC,CAAC,MAAM,CAAC;IACzC,WAAW,EAAE,CAAC;SACX,KAAK,CACJ,CAAC,CAAC,MAAM,CAAC;QACP,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE;QACd,IAAI,EAAE,CAAC,CAAC,MAAM,EAAE;QAChB,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QACnC,YAAY,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE;KAC1C,CAAC,CACH;SACA,GAAG,CAAC,CAAC,CAAC;SACN,GAAG,CAAC,EAAE,CAAC,EAAE,mBAAmB;IAC/B,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;IAClE,QAAQ,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC;CAChD,CAAC,CAAC;AAEH,iEAAiE;AACjE,mDAAmD;AACnD,kEAAkE;AAClE,6BAA6B;AAC7B,oBAAoB;AACpB,gBAAgB;AAChB,qBAAqB;AACrB,eAAe;AACf,iBAAiB;AACjB,iBAAiB;AACjB,qEAAqE;AACrE,MAAM;AAEN,iCAAiC;AACjC,IAAI,aAAa,GAAyB,IAAI,CAAC;AAE/C,8CAA8C;AAC9C,MAAM,gBAAgB,GAAG,GAAG,EAAE;IAC5B,IAAI,CAAC,aAAa,EAAE,CAAC;QACnB,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;IACtC,CAAC;IACD,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,wCAAwC;AACxC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IAC9B,OAAO,IAAI,eAAe,CAAC;QACzB,QAAQ,EAAE,KAAK;QACf,kBAAkB,EAAE,IAAI;KACzB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,6BAA6B;AAC7B,MAAM,UAAU,4BAA4B,CAAC,SAAiC,EAAE,MAAW;IACzF,wBAAwB;IACxB,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,kBAAkB;QACxB,WAAW,EAAE,6EAA6E;QAC1F,UAAU,EAAE,mBAAmB;QAC/B,WAAW,EAAE;YACX,KAAK,EAAE,kBAAkB;YACzB,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAAyC,EAAE,EAAE;YAC3D,IAAI,CAAC;gBACH,MAAM,YAAY,GAAG,kBAAkB,EAAE,CAAC;gBAE1C,sBAAsB;gBACtB,MAAM,OAAO,GAAG;oBACd,OAAO,EAAE;wBACP,gBAAgB,EAAE,IAAI,CAAC,OAAO;wBAC9B,eAAe,EAAE,IAAI,CAAC,MAAM;qBAC7B;iBACF,CAAC;gBAEF,sBAAsB;gBACtB,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAE5D,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;oBACxB,OAAO,CACL,mCAAmC;wBACnC,mBAAmB,IAAI,CAAC,OAAO,IAAI;wBACnC,gBAAgB,UAAU,CAAC,KAAK,MAAM;wBACtC,+DAA+D,CAChE,CAAC;gBACJ,CAAC;gBAED,sCAAsC;gBACtC,MAAM,UAAU,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAC5D,MAAM,OAAO,GAAa,EAAE,CAAC;gBAC7B,MAAM,WAAW,GAA4B,EAAE,CAAC;gBAEhD,2BAA2B;gBAC3B,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;oBAC5C,IAAI,CAAC;wBACH,QAAQ,SAAS,EAAE,CAAC;4BAClB,KAAK,WAAW;gCACd,MAAM,UAAU,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gCAC5C,WAAW,CAAC,SAAS,GAAG,IAAI,CAAC;gCAC7B,OAAO,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;gCACvC,MAAM;4BAER,KAAK,YAAY;gCACf,MAAM,UAAU,CAAC,aAAa,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gCAC7C,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC;gCAC9B,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;gCACxC,MAAM;4BAER,KAAK,aAAa;gCAChB,MAAM,UAAU,CAAC,cAAc,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gCAC9C,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;gCAC/B,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gCACzC,MAAM;4BAER,KAAK,OAAO;gCACV,MAAM,UAAU,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gCACxC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC;gCACzB,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gCAChD,MAAM;4BAER,KAAK,UAAU;gCACb,MAAM,UAAU,CAAC,WAAW,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;gCAC3C,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;gCAC5B,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;gCACnD,MAAM;4BAER;gCACE,OAAO,CAAC,IAAI,CAAC,yBAAyB,SAAS,EAAE,CAAC,CAAC;wBACvD,CAAC;oBACH,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,WAAW,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC;wBAC/B,OAAO,CAAC,IAAI,CACV,mBAAmB,SAAS,KAAK,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC5F,CAAC;oBACJ,CAAC;gBACH,CAAC;gBAED,MAAM,IAAI,GAAG,UAAU,CAAC,IAAK,CAAC;gBAC9B,MAAM,qBAAqB,GAAG,WAAW,CAAC,KAAK,IAAI,WAAW,CAAC,QAAQ,CAAC;gBAExE,OAAO,CACL,uCAAuC;oBACvC,2BAA2B;oBAC3B,mBAAmB,IAAI,CAAC,OAAO,IAAI;oBACnC,kBAAkB,IAAI,CAAC,EAAE,IAAI;oBAC7B,oBAAoB,qBAAqB,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,IAAI;oBAC1E,gBAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM;oBAC3C,gCAAgC;oBAChC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;oBAClB,MAAM;oBACN,2BAA2B;oBAC3B,yBAAyB,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBACnE,0BAA0B,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBACrE,0BAA0B,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBACpE,uBAAuB,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBAClE,4BAA4B,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBACxE,sBAAsB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI;oBAC5D,mBAAmB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CACxD,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,4BAA4B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CACvF,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,kCAAkC;IAClC,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,sBAAsB;QAC5B,WAAW,EAAE,sEAAsE;QACnF,UAAU,EAAE,gBAAgB;QAC5B,WAAW,EAAE;YACX,KAAK,EAAE,4BAA4B;YACnC,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAAsC,EAAE,EAAE;YACxD,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,MAAM,GAAiB;oBAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,YAAY,EAAE,IAAI,CAAC,YAAY;oBAC/B,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;oBACvB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;oBACnB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS;oBAC9E,eAAe,EAAE;wBACf,WAAW,EAAE,IAAI;wBACjB,aAAa,EAAE,GAAG;qBACnB;iBACF,CAAC;gBAEF,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBAEjC,OAAO,CACL,uCAAuC;oBACvC,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,oBAAoB,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO;oBACxD,mBAAmB,IAAI,CAAC,OAAO,IAAI;oBACnC,oBAAoB,IAAI,CAAC,QAAQ,IAAI;oBACrC,wBAAwB,IAAI,CAAC,WAAW,IAAI,gBAAgB,IAAI;oBAChE,uBAAuB,IAAI,CAAC,WAAW,IAAI;oBAC3C,iBAAiB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;oBAC3C,uBAAuB,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,MAAM;oBAC3D,4DAA4D,CAC7D,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,yCAAyC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CACpG,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,yCAAyC;IACzC,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,kBAAkB;QACxB,WAAW,EAAE,iEAAiE;QAC9E,UAAU,EAAE,qBAAqB;QACjC,WAAW,EAAE;YACX,KAAK,EAAE,mCAAmC;YAC1C,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,KAAK;YACrB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAA2C,EAAE,EAAE;YAC7D,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE;oBAC9D,SAAS,EAAE,IAAI,CAAC,SAAS;oBACzB,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBACxB,CAAC,CAAC;gBAEH,OAAO,CACL,+CAA+C;oBAC/C,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,qBAAqB,OAAO,CAAC,SAAS,IAAI;oBAC1C,gBAAgB,OAAO,CAAC,KAAK,IAAI;oBACjC,kBAAkB,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,IAAI;oBAClE,eAAe,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,MAAM;oBACnE,0BAA0B;oBAC1B,WAAW,GAAG,cAAc;oBAC5B,6DAA6D;oBAC7D,wCAAwC,CACzC,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,gDAAgD,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC3G,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,8BAA8B;IAC9B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,iBAAiB;QACvB,WAAW,EAAE,oEAAoE;QACjF,UAAU,EAAE,oBAAoB;QAChC,WAAW,EAAE;YACX,KAAK,EAAE,wBAAwB;YAC/B,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,KAAK;YACrB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAA0C,EAAE,EAAE;YAC5D,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,MAAM,GAAyB,MAAM,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE;oBAC/E,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;oBACzC,SAAS,EAAE,IAAI,CAAC,SAAS;iBAC1B,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;oBACpB,OAAO,CACL,kCAAkC;wBAClC,mBAAmB,IAAI,CAAC,QAAQ,IAAI;wBACpC,gBAAgB,MAAM,CAAC,KAAK,IAAI;wBAChC,CAAC,MAAM,CAAC,YAAY;4BAClB,CAAC,CAAC,qBAAqB,MAAM,CAAC,YAAY,CAAC,IAAI,IAAI;gCACjD,sBAAsB,MAAM,CAAC,YAAY,CAAC,WAAW,IAAI;gCACzD,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAoB,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;4BAClF,CAAC,CAAC,EAAE,CAAC;wBACP,kEAAkE,CACnE,CAAC;gBACJ,CAAC;gBAED,MAAM,MAAM,GAAG,MAAM,CAAC,MAAO,CAAC;gBAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAS,CAAC;gBAElC,OAAO,CACL,sCAAsC;oBACtC,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,kBAAkB,QAAQ,CAAC,EAAE,IAAI;oBACjC,oBAAoB,QAAQ,CAAC,IAAI,IAAI,SAAS,IAAI;oBAClD,qBAAqB,QAAQ,CAAC,KAAK,IAAI,cAAc,MAAM;oBAC3D,0BAA0B;oBAC1B,qBAAqB,MAAM,CAAC,SAAS,IAAI;oBACzC,iBAAiB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;oBAC7C,4BAA4B,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;oBAClE,kBAAkB,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,OAAO,MAAM;oBAChG,wCAAwC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW;oBACtF,0FAA0F,CAC3F,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,qCAAqC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAChG,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,6BAA6B;IAC7B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,uBAAuB;QAC7B,WAAW,EAAE,mDAAmD;QAChE,UAAU,EAAE,mBAAmB;QAC/B,WAAW,EAAE;YACX,KAAK,EAAE,uBAAuB;YAC9B,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,KAAK;YACrB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAAyC,EAAE,EAAE;YAC3D,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAE1E,IAAI,CAAC,SAAS,EAAE,CAAC;oBACf,OAAO,CACL,gCAAgC;wBAChC,mBAAmB,IAAI,CAAC,QAAQ,IAAI;wBACpC,kBAAkB,IAAI,CAAC,MAAM,MAAM;wBACnC,mDAAmD;wBACnD,gCAAgC;wBAChC,+BAA+B;wBAC/B,kDAAkD;wBAClD,+BAA+B,CAChC,CAAC;gBACJ,CAAC;gBAED,OAAO,CACL,yCAAyC;oBACzC,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,kBAAkB,IAAI,CAAC,MAAM,IAAI;oBACjC,qBAAqB,SAAS,CAAC,SAAS,IAAI;oBAC5C,iBAAiB,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;oBAChD,kBAAkB,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI;oBACpG,uBAAuB,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,MAAM;oBACxD,4CAA4C,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,WAAW;oBAC7F,uDAAuD,CACxD,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,oCAAoC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC/F,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,8BAA8B;IAC9B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,wBAAwB;QAC9B,WAAW,EAAE,mDAAmD;QAChE,UAAU,EAAE,2BAA2B;QACvC,WAAW,EAAE;YACX,KAAK,EAAE,wBAAwB;YAC/B,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAAiD,EAAE,EAAE;YACnE,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAE7D,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,OAAO,CACL,2BAA2B;wBAC3B,mBAAmB,IAAI,CAAC,QAAQ,IAAI;wBACpC,kBAAkB,IAAI,CAAC,MAAM,MAAM;wBACnC,gEAAgE,CACjE,CAAC;gBACJ,CAAC;gBAED,MAAM,OAAO,GAAG,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBACnE,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvB,MAAM,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;gBAEtE,OAAO,CACL,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,kCAAkC;oBACxD,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,kBAAkB,IAAI,CAAC,MAAM,IAAI;oBACjC,qBAAqB,MAAM,CAAC,SAAS,IAAI;oBACzC,iBAAiB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI;oBAC7C,4BAA4B,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;oBAClE,gBAAgB,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;oBAC1C,CAAC,MAAM,CAAC,SAAS;wBACf,CAAC,CAAC,kBAAkB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,IAAI;4BACjE,yBAAyB,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,SAAS,IAAI;wBACtG,CAAC,CAAC,wBAAwB,CAAC;oBAC7B,sBAAsB,IAAI,CAAC,aAAa,cAAc;oBACtD,CAAC,OAAO;wBACN,CAAC,CAAC,wDAAwD;wBAC1D,CAAC,CAAC,oCAAoC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,6BAA6B,CAAC,CAAC,CAAC,6BAA6B,EAAE,CAAC,CAC/H,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,qCAAqC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAChG,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,4BAA4B;IAC5B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,sBAAsB;QAC5B,WAAW,EAAE,oDAAoD;QACjE,UAAU,EAAE,kBAAkB;QAC9B,WAAW,EAAE;YACX,KAAK,EAAE,sBAAsB;YAC7B,YAAY,EAAE,KAAK;YACnB,eAAe,EAAE,IAAI;YACrB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAAwC,EAAE,EAAE;YAC1D,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBAEnC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEvE,OAAO,CACL,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,uBAAuB,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,QAAQ;oBAC1F,mBAAmB,IAAI,CAAC,QAAQ,IAAI;oBACpC,kBAAkB,IAAI,CAAC,MAAM,MAAM;oBACnC,CAAC,OAAO;wBACN,CAAC,CAAC,4EAA4E;wBAC9E,CAAC,CAAC,mFAAmF,CAAC;oBACxF,gFAAgF,CACjF,CAAC;YACJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,mCAAmC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC9F,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,4BAA4B;IAC5B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,sBAAsB;QAC5B,WAAW,EAAE,iDAAiD;QAC9D,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;QACxB,WAAW,EAAE;YACX,KAAK,EAAE,sBAAsB;YAC7B,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,IAAI,EAAE;YAClB,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,gBAAgB,EAAE,CAAC;gBACnC,MAAM,QAAQ,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBAE7C,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;oBAC1B,OAAO,qCAAqC,CAAC;gBAC/C,CAAC;gBAED,IAAI,MAAM,GAAG,gCAAgC,QAAQ,CAAC,MAAM,SAAS,CAAC;gBAEtE,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;oBAClC,MAAM,QAAQ,GAAG,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAChD,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,OAAO,OAAO,CAAC,QAAQ,MAAM,CAAC;oBACpD,MAAM,IAAI,oBAAoB,OAAO,CAAC,SAAS,IAAI,CAAC;oBACpD,MAAM,IAAI,eAAe,OAAO,CAAC,KAAK,IAAI,CAAC;oBAC3C,MAAM,IAAI,iBAAiB,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,IAAI,CAAC;oBAC5E,MAAM,IAAI,iBAAiB,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,cAAc,EAAE,IAAI,CAAC;oBAC5E,MAAM,IAAI,mBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC;oBACrE,MAAM,IAAI,cAAc,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC;oBAC3E,IAAI,OAAO,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;wBACjE,MAAM,IAAI,kBAAkB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;oBACnE,CAAC;oBACD,MAAM,IAAI,IAAI,CAAC;gBACjB,CAAC,CAAC,CAAC;gBAEH,OAAO,MAAM,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,mCAAmC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC9F,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,+BAA+B;IAC/B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,iBAAiB;QACvB,WAAW,EAAE,kFAAkF;QAC/F,UAAU,EAAE,oBAAoB;QAChC,WAAW,EAAE;YACX,KAAK,EAAE,yBAAyB;YAChC,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAA0C,EAAE,EAAE;YAC5D,IAAI,CAAC;gBACH,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;oBACvB,OAAO,CACL,oCAAoC;wBACpC,eAAe,IAAI,CAAC,cAAc,IAAI;wBACtC,6CAA6C;wBAC7C,iEAAiE,CAClE,CAAC;gBACJ,CAAC;gBAED,2CAA2C;gBAC3C,MAAM,OAAO,GAA2B;oBACtC,YAAY,EAAE,sBAAsB;oBACpC,MAAM,EAAE,kBAAkB;iBAC3B,CAAC;gBAEF,8CAA8C;gBAC9C,IAAI,IAAI,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;oBACtC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;wBAC/B,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC;oBACpE,CAAC;yBAAM,IAAI,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,CAAC;wBACnC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC;oBACjD,CAAC;gBACH,CAAC;qBAAM,IAAI,IAAI,CAAC,cAAc,KAAK,YAAY,EAAE,CAAC;oBAChD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAC7B,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAClE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;oBACrB,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,WAAW,EAAE,CAAC;gBACpD,CAAC;qBAAM,IAAI,IAAI,CAAC,cAAc,KAAK,QAAQ,EAAE,CAAC;oBAC5C,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;wBACpC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;oBACzE,CAAC;gBACH,CAAC;gBAED,oBAAoB;gBACpB,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;gBACzC,MAAM,SAAS,GAAG,UAAU,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAErE,IAAI,CAAC;oBACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE;wBAC9C,MAAM,EAAE,KAAK;wBACb,OAAO;wBACP,MAAM,EAAE,UAAU,CAAC,MAAM;qBAC1B,CAAC,CAAC;oBAEH,YAAY,CAAC,SAAS,CAAC,CAAC;oBAExB,MAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,CAAC;oBAClE,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,CAAC;oBAElF,OAAO,CACL,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,sBAAsB,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,QAAQ,QAAQ;wBACzF,eAAe,IAAI,CAAC,cAAc,IAAI;wBACtC,wBAAwB,IAAI,CAAC,YAAY,IAAI;wBAC7C,sBAAsB,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,UAAU,IAAI;wBAChE,wBAAwB,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,OAAO;wBACtD,uBAAuB,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,SAAS,MAAM;wBAC9E,CAAC,SAAS;4BACR,CAAC,CAAC,kDAAkD;4BACpD,CAAC,CAAC,sDAAsD;gCACtD,yBAAyB;gCACzB,oBAAoB;gCACpB,8BAA8B;gCAC9B,2BAA2B;gCAC3B,iBAAiB,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAChG,CAAC;gBACJ,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,YAAY,CAAC,SAAS,CAAC,CAAC;oBACxB,MAAM,KAAK,CAAC;gBACd,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,KAAK,YAAY,KAAK,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;oBAC1D,OAAO,CACL,oCAAoC;wBACpC,eAAe,IAAI,CAAC,cAAc,IAAI;wBACtC,wBAAwB,IAAI,CAAC,YAAY,IAAI;wBAC7C,kBAAkB,IAAI,CAAC,OAAO,QAAQ;wBACtC,oDAAoD;wBACpD,iCAAiC;wBACjC,2BAA2B;wBAC3B,wBAAwB,CACzB,CAAC;gBACJ,CAAC;gBAED,MAAM,IAAI,SAAS,CACjB,2BAA2B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CACtF,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;IAEH,6BAA6B;IAC7B,MAAM,CAAC,OAAO,CAAC;QACb,IAAI,EAAE,wBAAwB;QAC9B,WAAW,EAAE,8DAA8D;QAC3E,UAAU,EAAE,yBAAyB;QACrC,WAAW,EAAE;YACX,KAAK,EAAE,wBAAwB;YAC/B,YAAY,EAAE,IAAI;YAClB,eAAe,EAAE,KAAK;YACtB,cAAc,EAAE,IAAI;YACpB,aAAa,EAAE,IAAI;SACpB;QACD,OAAO,EAAE,KAAK,EAAE,IAA+C,EAAE,EAAE;YACjE,IAAI,CAAC;gBACH,MAAM,OAAO,GAOR,EAAE,CAAC;gBAER,MAAM,cAAc,GAAG,KAAK,EAAE,IAAkC,EAAE,EAAE;oBAClE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC7B,IAAI,CAAC;wBACH,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;4BACvB,OAAO;gCACL,EAAE,EAAE,IAAI,CAAC,EAAE;gCACX,IAAI,EAAE,IAAI,CAAC,IAAI;gCACf,OAAO,EAAE,KAAK;gCACd,KAAK,EAAE,2BAA2B;6BACnC,CAAC;wBACJ,CAAC;wBAED,0DAA0D;wBAC1D,MAAM,OAAO,GAA2B;4BACtC,YAAY,EAAE,sBAAsB;4BACpC,MAAM,EAAE,kBAAkB;yBAC3B,CAAC;wBAEF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;4BAChD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;wBAC1D,CAAC;6BAAM,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC;4BACtC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAC7B,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAC9C,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;4BACrB,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,WAAW,EAAE,CAAC;wBACpD,CAAC;wBAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE;4BAC9C,MAAM,EAAE,KAAK;4BACb,OAAO;4BACP,MAAM,EAAE,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC;yBAC1C,CAAC,CAAC;wBAEH,OAAO;4BACL,EAAE,EAAE,IAAI,CAAC,EAAE;4BACX,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,OAAO,EAAE,QAAQ,CAAC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG;4BACxD,MAAM,EAAE,QAAQ,CAAC,MAAM;4BACvB,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;yBACrC,CAAC;oBACJ,CAAC;oBAAC,OAAO,KAAK,EAAE,CAAC;wBACf,OAAO;4BACL,EAAE,EAAE,IAAI,CAAC,EAAE;4BACX,IAAI,EAAE,IAAI,CAAC,IAAI;4BACf,OAAO,EAAE,KAAK;4BACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;4BAC/D,YAAY,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS;yBACrC,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC;gBAEF,gBAAgB;gBAChB,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;oBAClB,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;oBACtD,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACjD,CAAC;qBAAM,CAAC;oBACN,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;wBACpC,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,IAAI,CAAC,CAAC;wBAC1C,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACvB,CAAC;gBACH,CAAC;gBAED,mBAAmB;gBACnB,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;gBACzD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,GAAG,UAAU,CAAC;gBAC3C,MAAM,eAAe,GACnB,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;oBACtF,OAAO,CAAC,MAAM,CAAC;gBAEjB,IAAI,MAAM,GAAG,0CAA0C,CAAC;gBACxD,MAAM,IAAI,uBAAuB,OAAO,CAAC,MAAM,IAAI,CAAC;gBACpD,MAAM,IAAI,qBAAqB,UAAU,IAAI,CAAC;gBAC9C,MAAM,IAAI,iBAAiB,MAAM,IAAI,CAAC;gBACtC,MAAM,IAAI,uBAAuB,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;gBACtF,MAAM,IAAI,yBAAyB,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC;gBACjF,MAAM,IAAI,gCAAgC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC;gBAE9E,MAAM,IAAI,yBAAyB,CAAC;gBACpC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;oBAChC,MAAM,IAAI,GAAG,KAAK,GAAG,CAAC,OAAO,MAAM,CAAC,EAAE,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC;oBAC9D,MAAM,IAAI,gBAAgB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,UAAU,IAAI,CAAC;oBACxE,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;wBAClB,MAAM,IAAI,qBAAqB,MAAM,CAAC,MAAM,IAAI,CAAC;oBACnD,CAAC;oBACD,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;wBACxB,MAAM,IAAI,uBAAuB,MAAM,CAAC,YAAY,MAAM,CAAC;oBAC7D,CAAC;oBACD,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;wBACjB,MAAM,IAAI,eAAe,MAAM,CAAC,KAAK,IAAI,CAAC;oBAC5C,CAAC;oBACD,MAAM,IAAI,IAAI,CAAC;gBACjB,CAAC,CAAC,CAAC;gBAEH,OAAO,MAAM,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,IAAI,SAAS,CACjB,iCAAiC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE,CAC5F,CAAC;YACJ,CAAC;QACH,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,2DAA2D;AAC3D,oDAAoD;AACpD,qBAAqB;AACrB,wBAAwB;AACxB,MAAM;AACN,yCAAyC;AACzC,IAAI",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credential-testing.ts"],
      sourcesContent: ["/**\n * Credential Testing Tools for n8n MCP Server\n *\n * Provides comprehensive tools for testing credential validity, OAuth2 token management,\n * and authentication flow validation.\n */\n\n/* eslint-disable no-undef */\ndeclare const fetch: typeof globalThis.fetch;\ndeclare const AbortController: typeof globalThis.AbortController;\ndeclare const AbortSignal: typeof globalThis.AbortSignal;\n\nimport { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { setTimeout, clearTimeout } from 'timers';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { OAuth2Handler, OAuth2Config, OAuth2CallbackResult } from '../auth/oauth2Handler.js';\nimport { N8nAuthProvider } from '../auth/n8nAuth.js';\n\n// Zod schemas for validation\nconst TestCredentialSchema = z.object({\n  credentialType: z.string().min(1, 'Credential type is required'),\n  credentialData: z.record(z.string(), z.any()),\n  testEndpoint: z.string().url().optional(),\n  timeout: z.number().min(1000).max(30000).optional().default(10000),\n});\n\nconst TestN8nApiKeySchema = z.object({\n  baseUrl: z.string().url('Must be a valid URL'),\n  apiKey: z.string().min(1, 'API key is required'),\n  testOperations: z.array(z.string()).optional().default(['workflows', 'executions']),\n});\n\nconst OAuth2InitSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  clientId: z.string().min(1, 'Client ID is required'),\n  clientSecret: z.string().min(1, 'Client secret is required'),\n  authUrl: z.string().url('Auth URL must be valid'),\n  tokenUrl: z.string().url('Token URL must be valid'),\n  userInfoUrl: z.string().url().optional(),\n  redirectUri: z.string().url('Redirect URI must be valid'),\n  scopes: z.array(z.string()).min(1, 'At least one scope is required'),\n  extraParams: z.record(z.string(), z.string()).optional(),\n  enablePKCE: z.boolean().optional().default(true),\n});\n\nconst OAuth2AuthorizeSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  sessionId: z.string().optional(),\n  extraParams: z.record(z.string(), z.string()).optional(),\n  metadata: z.record(z.string(), z.any()).optional(),\n});\n\nconst OAuth2CallbackSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  code: z.string().optional(),\n  state: z.string().optional(),\n  error: z.string().optional(),\n  error_description: z.string().optional(),\n  error_uri: z.string().optional(),\n});\n\nconst OAuth2RefreshSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  userId: z.string().min(1, 'User ID is required'),\n});\n\nconst OAuth2TokenValidationSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  userId: z.string().min(1, 'User ID is required'),\n  bufferSeconds: z.number().min(0).max(3600).optional().default(300),\n});\n\nconst OAuth2RevokeSchema = z.object({\n  provider: z.string().min(1, 'Provider is required'),\n  userId: z.string().min(1, 'User ID is required'),\n});\n\nconst BatchCredentialTestSchema = z.object({\n  credentials: z\n    .array(\n      z.object({\n        id: z.string(),\n        type: z.string(),\n        data: z.record(z.string(), z.any()),\n        testEndpoint: z.string().url().optional(),\n      })\n    )\n    .min(1)\n    .max(10), // Limit batch size\n  timeout: z.number().min(1000).max(30000).optional().default(10000),\n  parallel: z.boolean().optional().default(false),\n});\n\n// Note: Security audit schema reserved for future implementation\n// const CredentialSecurityAuditSchema = z.object({\n//   credentialId: z.string().min(1, 'Credential ID is required'),\n//   checks: z.array(z.enum([\n//     'encryption',\n//     'expiry',\n//     'permissions',\n//     'usage',\n//     'sharing',\n//     'rotation'\n//   ])).optional().default(['encryption', 'expiry', 'permissions']),\n// });\n\n// Global OAuth2 handler instance\nlet oauth2Handler: OAuth2Handler | null = null;\n\n// Function to get the OAuth2 handler instance\nconst getOAuth2Handler = () => {\n  if (!oauth2Handler) {\n    oauth2Handler = new OAuth2Handler();\n  }\n  return oauth2Handler;\n};\n\n// Function to get the n8n auth provider\nconst getN8nAuthProvider = () => {\n  return new N8nAuthProvider({\n    required: false,\n    validateConnection: true,\n  });\n};\n\n// Tool registration function\nexport function createCredentialTestingTools(getClient: () => N8nClient | null, server: any) {\n  // Test n8n API key tool\n  server.addTool({\n    name: 'test-n8n-api-key',\n    description: 'Test n8n API key validity and permissions by performing various operations.',\n    parameters: TestN8nApiKeySchema,\n    annotations: {\n      title: 'Test n8n API Key',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TestN8nApiKeySchema>) => {\n      try {\n        const authProvider = getN8nAuthProvider();\n\n        // Create test context\n        const context = {\n          headers: {\n            'x-n8n-base-url': args.baseUrl,\n            'x-n8n-api-key': args.apiKey,\n          },\n        };\n\n        // Test authentication\n        const authResult = await authProvider.authenticate(context);\n\n        if (!authResult.success) {\n          return (\n            `\u274C **n8n API Key Test Failed**\\n\\n` +\n            `- **Base URL:** ${args.baseUrl}\\n` +\n            `- **Error:** ${authResult.error}\\n\\n` +\n            `The API key is invalid or the n8n instance is not accessible.`\n          );\n        }\n\n        // Create temporary client for testing\n        const testClient = new N8nClient(args.baseUrl, args.apiKey);\n        const results: string[] = [];\n        const permissions: Record<string, boolean> = {};\n\n        // Test specific operations\n        for (const operation of args.testOperations) {\n          try {\n            switch (operation) {\n              case 'workflows':\n                await testClient.getWorkflows({ limit: 1 });\n                permissions.workflows = true;\n                results.push('\u2705 Can access workflows');\n                break;\n\n              case 'executions':\n                await testClient.getExecutions({ limit: 1 });\n                permissions.executions = true;\n                results.push('\u2705 Can access executions');\n                break;\n\n              case 'credentials':\n                await testClient.getCredentials({ limit: 1 });\n                permissions.credentials = true;\n                results.push('\u2705 Can access credentials');\n                break;\n\n              case 'users':\n                await testClient.getUsers({ limit: 1 });\n                permissions.users = true;\n                results.push('\u2705 Can access users (Enterprise)');\n                break;\n\n              case 'projects':\n                await testClient.getProjects({ limit: 1 });\n                permissions.projects = true;\n                results.push('\u2705 Can access projects (Enterprise)');\n                break;\n\n              default:\n                results.push(`\u26A0\uFE0F Unknown operation: ${operation}`);\n            }\n          } catch (error) {\n            permissions[operation] = false;\n            results.push(\n              `\u274C Cannot access ${operation}: ${error instanceof Error ? error.message : 'Unknown error'}`\n            );\n          }\n        }\n\n        const user = authResult.user!;\n        const hasEnterpriseFeatures = permissions.users || permissions.projects;\n\n        return (\n          `\u2705 **n8n API Key Test Successful**\\n\\n` +\n          `**Connection Details:**\\n` +\n          `- **Base URL:** ${args.baseUrl}\\n` +\n          `- **User ID:** ${user.id}\\n` +\n          `- **User Type:** ${hasEnterpriseFeatures ? 'Enterprise' : 'Community'}\\n` +\n          `- **Roles:** ${user.roles.join(', ')}\\n\\n` +\n          `**Permission Test Results:**\\n` +\n          results.join('\\n') +\n          '\\n\\n' +\n          `**Available Features:**\\n` +\n          `- Community Features: ${user.permissions.community ? '\u2705' : '\u274C'}\\n` +\n          `- Enterprise Features: ${user.permissions.enterprise ? '\u2705' : '\u274C'}\\n` +\n          `- Workflow Management: ${user.permissions.workflows ? '\u2705' : '\u274C'}\\n` +\n          `- Execution Access: ${user.permissions.executions ? '\u2705' : '\u274C'}\\n` +\n          `- Credential Management: ${user.permissions.credentials ? '\u2705' : '\u274C'}\\n` +\n          `- User Management: ${user.permissions.users ? '\u2705' : '\u274C'}\\n` +\n          `- Audit Access: ${user.permissions.audit ? '\u2705' : '\u274C'}`\n        );\n      } catch (error) {\n        throw new UserError(\n          `n8n API key test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Initialize OAuth2 provider tool\n  server.addTool({\n    name: 'init-oauth2-provider',\n    description: 'Initialize OAuth2 provider configuration for authentication testing.',\n    parameters: OAuth2InitSchema,\n    annotations: {\n      title: 'Initialize OAuth2 Provider',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2InitSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const config: OAuth2Config = {\n          provider: args.provider,\n          clientId: args.clientId,\n          clientSecret: args.clientSecret,\n          authUrl: args.authUrl,\n          tokenUrl: args.tokenUrl,\n          userInfoUrl: args.userInfoUrl,\n          redirectUri: args.redirectUri,\n          scopes: args.scopes,\n          extraParams: args.extraParams,\n          pkce: args.enablePKCE ? { enabled: true, challengeMethod: 'S256' } : undefined,\n          refreshSettings: {\n            autoRefresh: true,\n            refreshBuffer: 300,\n          },\n        };\n\n        handler.registerProvider(config);\n\n        return (\n          `\u2705 **OAuth2 Provider Initialized**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **Client ID:** ${args.clientId.substring(0, 8)}...\\n` +\n          `- **Auth URL:** ${args.authUrl}\\n` +\n          `- **Token URL:** ${args.tokenUrl}\\n` +\n          `- **User Info URL:** ${args.userInfoUrl || 'Not configured'}\\n` +\n          `- **Redirect URI:** ${args.redirectUri}\\n` +\n          `- **Scopes:** ${args.scopes.join(', ')}\\n` +\n          `- **PKCE Enabled:** ${args.enablePKCE ? 'Yes' : 'No'}\\n\\n` +\n          `The OAuth2 provider is now ready for authentication flows.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to initialize OAuth2 provider: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Generate OAuth2 authorization URL tool\n  server.addTool({\n    name: 'oauth2-authorize',\n    description: 'Generate OAuth2 authorization URL to start authentication flow.',\n    parameters: OAuth2AuthorizeSchema,\n    annotations: {\n      title: 'Generate OAuth2 Authorization URL',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2AuthorizeSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const { url, session } = handler.generateAuthUrl(args.provider, {\n          sessionId: args.sessionId,\n          extraParams: args.extraParams,\n          metadata: args.metadata,\n        });\n\n        return (\n          `\uD83D\uDD17 **OAuth2 Authorization URL Generated**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **Session ID:** ${session.sessionId}\\n` +\n          `- **State:** ${session.state}\\n` +\n          `- **Expires:** ${new Date(session.expiresAt).toLocaleString()}\\n` +\n          `- **PKCE:** ${session.codeChallenge ? 'Enabled' : 'Disabled'}\\n\\n` +\n          `**Authorization URL:**\\n` +\n          `\\`\\`\\`\\n${url}\\n\\`\\`\\`\\n\\n` +\n          `\uD83C\uDF10 Visit this URL to start the OAuth2 authentication flow. ` +\n          `The session will expire in 15 minutes.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to generate OAuth2 authorization URL: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Handle OAuth2 callback tool\n  server.addTool({\n    name: 'oauth2-callback',\n    description: 'Handle OAuth2 callback and exchange authorization code for tokens.',\n    parameters: OAuth2CallbackSchema,\n    annotations: {\n      title: 'Handle OAuth2 Callback',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2CallbackSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const result: OAuth2CallbackResult = await handler.handleCallback(args.provider, {\n          code: args.code,\n          state: args.state,\n          error: args.error,\n          error_description: args.error_description,\n          error_uri: args.error_uri,\n        });\n\n        if (!result.success) {\n          return (\n            `\u274C **OAuth2 Callback Failed**\\n\\n` +\n            `- **Provider:** ${args.provider}\\n` +\n            `- **Error:** ${result.error}\\n` +\n            (result.errorDetails\n              ? `- **Error Code:** ${result.errorDetails.code}\\n` +\n                `- **Description:** ${result.errorDetails.description}\\n` +\n                (result.errorDetails.uri ? `- **More Info:** ${result.errorDetails.uri}\\n` : '')\n              : '') +\n            `\\nThe OAuth2 authentication flow was not completed successfully.`\n          );\n        }\n\n        const tokens = result.tokens!;\n        const userInfo = result.userInfo!;\n\n        return (\n          `\u2705 **OAuth2 Callback Successful**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **User ID:** ${userInfo.id}\\n` +\n          `- **User Name:** ${userInfo.name || 'Unknown'}\\n` +\n          `- **User Email:** ${userInfo.email || 'Not provided'}\\n\\n` +\n          `**Token Information:**\\n` +\n          `- **Token Type:** ${tokens.tokenType}\\n` +\n          `- **Scopes:** ${tokens.scopes.join(', ')}\\n` +\n          `- **Has Refresh Token:** ${tokens.refreshToken ? 'Yes' : 'No'}\\n` +\n          `- **Expires:** ${tokens.expiresAt ? new Date(tokens.expiresAt).toLocaleString() : 'Never'}\\n\\n` +\n          `**Access Token (first 20 chars):** \\`${tokens.accessToken.substring(0, 20)}...\\`\\n\\n` +\n          `\uD83C\uDF89 OAuth2 authentication completed successfully! Tokens have been stored for future use.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to handle OAuth2 callback: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Refresh OAuth2 tokens tool\n  server.addTool({\n    name: 'oauth2-refresh-tokens',\n    description: 'Refresh OAuth2 access tokens using refresh token.',\n    parameters: OAuth2RefreshSchema,\n    annotations: {\n      title: 'Refresh OAuth2 Tokens',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2RefreshSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const newTokens = await handler.refreshTokens(args.provider, args.userId);\n\n        if (!newTokens) {\n          return (\n            `\u274C **Token Refresh Failed**\\n\\n` +\n            `- **Provider:** ${args.provider}\\n` +\n            `- **User ID:** ${args.userId}\\n\\n` +\n            `Unable to refresh tokens. This could be due to:\\n` +\n            `- No refresh token available\\n` +\n            `- Refresh token has expired\\n` +\n            `- OAuth2 provider rejected the refresh request\\n` +\n            `- Network connectivity issues`\n          );\n        }\n\n        return (\n          `\u2705 **Tokens Refreshed Successfully**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **User ID:** ${args.userId}\\n` +\n          `- **Token Type:** ${newTokens.tokenType}\\n` +\n          `- **Scopes:** ${newTokens.scopes.join(', ')}\\n` +\n          `- **Expires:** ${newTokens.expiresAt ? new Date(newTokens.expiresAt).toLocaleString() : 'Never'}\\n` +\n          `- **Refreshed At:** ${new Date().toLocaleString()}\\n\\n` +\n          `**New Access Token (first 20 chars):** \\`${newTokens.accessToken.substring(0, 20)}...\\`\\n\\n` +\n          `\uD83D\uDD04 Tokens have been refreshed and updated in storage.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to refresh OAuth2 tokens: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Validate OAuth2 tokens tool\n  server.addTool({\n    name: 'oauth2-validate-tokens',\n    description: 'Check if OAuth2 tokens are valid and not expired.',\n    parameters: OAuth2TokenValidationSchema,\n    annotations: {\n      title: 'Validate OAuth2 Tokens',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2TokenValidationSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const tokens = handler.getTokens(args.provider, args.userId);\n\n        if (!tokens) {\n          return (\n            `\u274C **No Tokens Found**\\n\\n` +\n            `- **Provider:** ${args.provider}\\n` +\n            `- **User ID:** ${args.userId}\\n\\n` +\n            `No OAuth2 tokens found for this user and provider combination.`\n          );\n        }\n\n        const isValid = handler.areTokensValid(tokens, args.bufferSeconds);\n        const now = Date.now();\n        const timeToExpiry = tokens.expiresAt ? tokens.expiresAt - now : null;\n\n        return (\n          `${isValid ? '\u2705' : '\u274C'} **Token Validation Result**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **User ID:** ${args.userId}\\n` +\n          `- **Token Type:** ${tokens.tokenType}\\n` +\n          `- **Scopes:** ${tokens.scopes.join(', ')}\\n` +\n          `- **Has Refresh Token:** ${tokens.refreshToken ? 'Yes' : 'No'}\\n` +\n          `- **Valid:** ${isValid ? 'Yes' : 'No'}\\n` +\n          (tokens.expiresAt\n            ? `- **Expires:** ${new Date(tokens.expiresAt).toLocaleString()}\\n` +\n              `- **Time to Expiry:** ${timeToExpiry ? Math.floor(timeToExpiry / 1000) + ' seconds' : 'Expired'}\\n`\n            : `- **Expires:** Never\\n`) +\n          `- **Buffer Time:** ${args.bufferSeconds} seconds\\n\\n` +\n          (isValid\n            ? `\u2705 Tokens are valid and can be used for authentication.`\n            : `\u274C Tokens are invalid or expired. ${tokens.refreshToken ? 'Consider refreshing tokens.' : 'Re-authentication required.'}`)\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to validate OAuth2 tokens: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Revoke OAuth2 tokens tool\n  server.addTool({\n    name: 'oauth2-revoke-tokens',\n    description: 'Revoke OAuth2 tokens and remove them from storage.',\n    parameters: OAuth2RevokeSchema,\n    annotations: {\n      title: 'Revoke OAuth2 Tokens',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof OAuth2RevokeSchema>) => {\n      try {\n        const handler = getOAuth2Handler();\n\n        const success = await handler.revokeTokens(args.provider, args.userId);\n\n        return (\n          `${success ? '\u2705' : '\u26A0\uFE0F'} **Token Revocation ${success ? 'Successful' : 'Completed'}**\\n\\n` +\n          `- **Provider:** ${args.provider}\\n` +\n          `- **User ID:** ${args.userId}\\n\\n` +\n          (success\n            ? `Tokens have been revoked with the provider and removed from local storage.`\n            : `Tokens have been removed from local storage. Provider revocation may have failed.`) +\n          `\\n\\n\uD83D\uDD12 User will need to re-authenticate to access OAuth2-protected resources.`\n        );\n      } catch (error) {\n        throw new UserError(\n          `Failed to revoke OAuth2 tokens: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // List OAuth2 sessions tool\n  server.addTool({\n    name: 'list-oauth2-sessions',\n    description: 'List all active OAuth2 authentication sessions.',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List OAuth2 Sessions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async () => {\n      try {\n        const handler = getOAuth2Handler();\n        const sessions = handler.getActiveSessions();\n\n        if (sessions.length === 0) {\n          return '\uD83D\uDCED No active OAuth2 sessions found.';\n        }\n\n        let result = `\uD83D\uDCCB **Active OAuth2 Sessions (${sessions.length})**\\n\\n`;\n\n        sessions.forEach((session, index) => {\n          const timeLeft = session.expiresAt - Date.now();\n          result += `${index + 1}. **${session.provider}**\\n`;\n          result += `   - Session ID: ${session.sessionId}\\n`;\n          result += `   - State: ${session.state}\\n`;\n          result += `   - Created: ${new Date(session.createdAt).toLocaleString()}\\n`;\n          result += `   - Expires: ${new Date(session.expiresAt).toLocaleString()}\\n`;\n          result += `   - Time Left: ${Math.floor(timeLeft / 1000)} seconds\\n`;\n          result += `   - PKCE: ${session.codeChallenge ? 'Enabled' : 'Disabled'}\\n`;\n          if (session.metadata && Object.keys(session.metadata).length > 0) {\n            result += `   - Metadata: ${JSON.stringify(session.metadata)}\\n`;\n          }\n          result += '\\n';\n        });\n\n        return result;\n      } catch (error) {\n        throw new UserError(\n          `Failed to list OAuth2 sessions: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Generic credential test tool\n  server.addTool({\n    name: 'test-credential',\n    description: 'Test generic credential validity by making a test request to specified endpoint.',\n    parameters: TestCredentialSchema,\n    annotations: {\n      title: 'Test Generic Credential',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TestCredentialSchema>) => {\n      try {\n        if (!args.testEndpoint) {\n          return (\n            `\u26A0\uFE0F **Credential Test Skipped**\\n\\n` +\n            `- **Type:** ${args.credentialType}\\n` +\n            `- **Reason:** No test endpoint provided\\n\\n` +\n            `To test this credential, please provide a \\`testEndpoint\\` URL.`\n          );\n        }\n\n        // Prepare request based on credential type\n        const headers: Record<string, string> = {\n          'User-Agent': 'n8n-mcp-server/2.0.0',\n          Accept: 'application/json',\n        };\n\n        // Add authentication based on credential type\n        if (args.credentialType === 'api-key') {\n          if (args.credentialData.apiKey) {\n            headers['Authorization'] = `Bearer ${args.credentialData.apiKey}`;\n          } else if (args.credentialData.key) {\n            headers['X-API-Key'] = args.credentialData.key;\n          }\n        } else if (args.credentialType === 'basic-auth') {\n          const credentials = Buffer.from(\n            `${args.credentialData.username}:${args.credentialData.password}`\n          ).toString('base64');\n          headers['Authorization'] = `Basic ${credentials}`;\n        } else if (args.credentialType === 'oauth2') {\n          if (args.credentialData.accessToken) {\n            headers['Authorization'] = `Bearer ${args.credentialData.accessToken}`;\n          }\n        }\n\n        // Make test request\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), args.timeout);\n\n        try {\n          const response = await fetch(args.testEndpoint, {\n            method: 'GET',\n            headers,\n            signal: controller.signal,\n          });\n\n          clearTimeout(timeoutId);\n\n          const isSuccess = response.status >= 200 && response.status < 300;\n          const responseText = await response.text().catch(() => 'Unable to read response');\n\n          return (\n            `${isSuccess ? '\u2705' : '\u274C'} **Credential Test ${isSuccess ? 'Successful' : 'Failed'}**\\n\\n` +\n            `- **Type:** ${args.credentialType}\\n` +\n            `- **Test Endpoint:** ${args.testEndpoint}\\n` +\n            `- **Status Code:** ${response.status} ${response.statusText}\\n` +\n            `- **Response Time:** ${Date.now() - Date.now()} ms\\n` +\n            `- **Content Type:** ${response.headers.get('content-type') || 'Unknown'}\\n\\n` +\n            (isSuccess\n              ? `\u2705 The credential is valid and working correctly.`\n              : `\u274C The credential test failed. This could indicate:\\n` +\n                `- Invalid credentials\\n` +\n                `- Expired tokens\\n` +\n                `- Insufficient permissions\\n` +\n                `- Service unavailable\\n\\n` +\n                `**Response:** ${responseText.substring(0, 500)}${responseText.length > 500 ? '...' : ''}`)\n          );\n        } catch (error) {\n          clearTimeout(timeoutId);\n          throw error;\n        }\n      } catch (error) {\n        if (error instanceof Error && error.name === 'AbortError') {\n          return (\n            `\u23F1\uFE0F **Credential Test Timeout**\\n\\n` +\n            `- **Type:** ${args.credentialType}\\n` +\n            `- **Test Endpoint:** ${args.testEndpoint}\\n` +\n            `- **Timeout:** ${args.timeout}ms\\n\\n` +\n            `The test request timed out. This could indicate:\\n` +\n            `- Network connectivity issues\\n` +\n            `- Slow service response\\n` +\n            `- Invalid endpoint URL`\n          );\n        }\n\n        throw new UserError(\n          `Credential test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Batch credential test tool\n  server.addTool({\n    name: 'batch-test-credentials',\n    description: 'Test multiple credentials in batch (sequential or parallel).',\n    parameters: BatchCredentialTestSchema,\n    annotations: {\n      title: 'Batch Test Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof BatchCredentialTestSchema>) => {\n      try {\n        const results: Array<{\n          id: string;\n          type: string;\n          success: boolean;\n          status?: number;\n          error?: string;\n          responseTime?: number;\n        }> = [];\n\n        const testCredential = async (cred: (typeof args.credentials)[0]) => {\n          const startTime = Date.now();\n          try {\n            if (!cred.testEndpoint) {\n              return {\n                id: cred.id,\n                type: cred.type,\n                success: false,\n                error: 'No test endpoint provided',\n              };\n            }\n\n            // Prepare headers (simplified version of individual test)\n            const headers: Record<string, string> = {\n              'User-Agent': 'n8n-mcp-server/2.0.0',\n              Accept: 'application/json',\n            };\n\n            if (cred.type === 'api-key' && cred.data.apiKey) {\n              headers['Authorization'] = `Bearer ${cred.data.apiKey}`;\n            } else if (cred.type === 'basic-auth') {\n              const credentials = Buffer.from(\n                `${cred.data.username}:${cred.data.password}`\n              ).toString('base64');\n              headers['Authorization'] = `Basic ${credentials}`;\n            }\n\n            const response = await fetch(cred.testEndpoint, {\n              method: 'GET',\n              headers,\n              signal: AbortSignal.timeout(args.timeout),\n            });\n\n            return {\n              id: cred.id,\n              type: cred.type,\n              success: response.status >= 200 && response.status < 300,\n              status: response.status,\n              responseTime: Date.now() - startTime,\n            };\n          } catch (error) {\n            return {\n              id: cred.id,\n              type: cred.type,\n              success: false,\n              error: error instanceof Error ? error.message : 'Unknown error',\n              responseTime: Date.now() - startTime,\n            };\n          }\n        };\n\n        // Execute tests\n        if (args.parallel) {\n          const promises = args.credentials.map(testCredential);\n          results.push(...(await Promise.all(promises)));\n        } else {\n          for (const cred of args.credentials) {\n            const result = await testCredential(cred);\n            results.push(result);\n          }\n        }\n\n        // Generate summary\n        const successful = results.filter(r => r.success).length;\n        const failed = results.length - successful;\n        const avgResponseTime =\n          results.filter(r => r.responseTime).reduce((sum, r) => sum + (r.responseTime || 0), 0) /\n          results.length;\n\n        let output = `\uD83D\uDCCA **Batch Credential Test Results**\\n\\n`;\n        output += `- **Total Tested:** ${results.length}\\n`;\n        output += `- **Successful:** ${successful}\\n`;\n        output += `- **Failed:** ${failed}\\n`;\n        output += `- **Success Rate:** ${Math.round((successful / results.length) * 100)}%\\n`;\n        output += `- **Execution Mode:** ${args.parallel ? 'Parallel' : 'Sequential'}\\n`;\n        output += `- **Average Response Time:** ${Math.round(avgResponseTime)}ms\\n\\n`;\n\n        output += `**Detailed Results:**\\n`;\n        results.forEach((result, index) => {\n          output += `${index + 1}. **${result.id}** (${result.type})\\n`;\n          output += `   - Status: ${result.success ? '\u2705 Success' : '\u274C Failed'}\\n`;\n          if (result.status) {\n            output += `   - HTTP Status: ${result.status}\\n`;\n          }\n          if (result.responseTime) {\n            output += `   - Response Time: ${result.responseTime}ms\\n`;\n          }\n          if (result.error) {\n            output += `   - Error: ${result.error}\\n`;\n          }\n          output += '\\n';\n        });\n\n        return output;\n      } catch (error) {\n        throw new UserError(\n          `Batch credential test failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n\n// Helper function to format response time (for future use)\n// function formatResponseTime(ms: number): string {\n//   if (ms < 1000) {\n//     return `${ms}ms`;\n//   }\n//   return `${(ms / 1000).toFixed(2)}s`;\n// }\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "0a78a49d8ca034b8794ee017a0df1e2dadc7138a"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1941b9thp2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1941b9thp2();
/**
 * Credential Testing Tools for n8n MCP Server
 *
 * Provides comprehensive tools for testing credential validity, OAuth2 token management,
 * and authentication flow validation.
 */
import { z } from 'zod';
import { UserError } from 'fastmcp';
import { setTimeout, clearTimeout } from 'timers';
import { N8nClient } from '../client/n8nClient.js';
import { OAuth2Handler } from '../auth/oauth2Handler.js';
import { N8nAuthProvider } from '../auth/n8nAuth.js';
// Zod schemas for validation
const TestCredentialSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[0]++, z.object({
  credentialType: z.string().min(1, 'Credential type is required'),
  credentialData: z.record(z.string(), z.any()),
  testEndpoint: z.string().url().optional(),
  timeout: z.number().min(1000).max(30000).optional().default(10000)
}));
const TestN8nApiKeySchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[1]++, z.object({
  baseUrl: z.string().url('Must be a valid URL'),
  apiKey: z.string().min(1, 'API key is required'),
  testOperations: z.array(z.string()).optional().default(['workflows', 'executions'])
}));
const OAuth2InitSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[2]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  clientId: z.string().min(1, 'Client ID is required'),
  clientSecret: z.string().min(1, 'Client secret is required'),
  authUrl: z.string().url('Auth URL must be valid'),
  tokenUrl: z.string().url('Token URL must be valid'),
  userInfoUrl: z.string().url().optional(),
  redirectUri: z.string().url('Redirect URI must be valid'),
  scopes: z.array(z.string()).min(1, 'At least one scope is required'),
  extraParams: z.record(z.string(), z.string()).optional(),
  enablePKCE: z.boolean().optional().default(true)
}));
const OAuth2AuthorizeSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[3]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  sessionId: z.string().optional(),
  extraParams: z.record(z.string(), z.string()).optional(),
  metadata: z.record(z.string(), z.any()).optional()
}));
const OAuth2CallbackSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[4]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  code: z.string().optional(),
  state: z.string().optional(),
  error: z.string().optional(),
  error_description: z.string().optional(),
  error_uri: z.string().optional()
}));
const OAuth2RefreshSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[5]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  userId: z.string().min(1, 'User ID is required')
}));
const OAuth2TokenValidationSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[6]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  userId: z.string().min(1, 'User ID is required'),
  bufferSeconds: z.number().min(0).max(3600).optional().default(300)
}));
const OAuth2RevokeSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[7]++, z.object({
  provider: z.string().min(1, 'Provider is required'),
  userId: z.string().min(1, 'User ID is required')
}));
const BatchCredentialTestSchema =
/* istanbul ignore next */
(cov_1941b9thp2().s[8]++, z.object({
  credentials: z.array(z.object({
    id: z.string(),
    type: z.string(),
    data: z.record(z.string(), z.any()),
    testEndpoint: z.string().url().optional()
  })).min(1).max(10),
  // Limit batch size
  timeout: z.number().min(1000).max(30000).optional().default(10000),
  parallel: z.boolean().optional().default(false)
}));
// Note: Security audit schema reserved for future implementation
// const CredentialSecurityAuditSchema = z.object({
//   credentialId: z.string().min(1, 'Credential ID is required'),
//   checks: z.array(z.enum([
//     'encryption',
//     'expiry',
//     'permissions',
//     'usage',
//     'sharing',
//     'rotation'
//   ])).optional().default(['encryption', 'expiry', 'permissions']),
// });
// Global OAuth2 handler instance
let oauth2Handler =
/* istanbul ignore next */
(cov_1941b9thp2().s[9]++, null);
// Function to get the OAuth2 handler instance
/* istanbul ignore next */
cov_1941b9thp2().s[10]++;
const getOAuth2Handler = () => {
  /* istanbul ignore next */
  cov_1941b9thp2().f[0]++;
  cov_1941b9thp2().s[11]++;
  if (!oauth2Handler) {
    /* istanbul ignore next */
    cov_1941b9thp2().b[0][0]++;
    cov_1941b9thp2().s[12]++;
    oauth2Handler = new OAuth2Handler();
  } else
  /* istanbul ignore next */
  {
    cov_1941b9thp2().b[0][1]++;
  }
  cov_1941b9thp2().s[13]++;
  return oauth2Handler;
};
// Function to get the n8n auth provider
/* istanbul ignore next */
cov_1941b9thp2().s[14]++;
const getN8nAuthProvider = () => {
  /* istanbul ignore next */
  cov_1941b9thp2().f[1]++;
  cov_1941b9thp2().s[15]++;
  return new N8nAuthProvider({
    required: false,
    validateConnection: true
  });
};
// Tool registration function
export function createCredentialTestingTools(getClient, server) {
  /* istanbul ignore next */
  cov_1941b9thp2().f[2]++;
  cov_1941b9thp2().s[16]++;
  // Test n8n API key tool
  server.addTool({
    name: 'test-n8n-api-key',
    description: 'Test n8n API key validity and permissions by performing various operations.',
    parameters: TestN8nApiKeySchema,
    annotations: {
      title: 'Test n8n API Key',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[3]++;
      cov_1941b9thp2().s[17]++;
      try {
        const authProvider =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[18]++, getN8nAuthProvider());
        // Create test context
        const context =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[19]++, {
          headers: {
            'x-n8n-base-url': args.baseUrl,
            'x-n8n-api-key': args.apiKey
          }
        });
        // Test authentication
        const authResult =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[20]++, await authProvider.authenticate(context));
        /* istanbul ignore next */
        cov_1941b9thp2().s[21]++;
        if (!authResult.success) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[1][0]++;
          cov_1941b9thp2().s[22]++;
          return `❌ **n8n API Key Test Failed**\n\n` + `- **Base URL:** ${args.baseUrl}\n` + `- **Error:** ${authResult.error}\n\n` + `The API key is invalid or the n8n instance is not accessible.`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[1][1]++;
        }
        // Create temporary client for testing
        const testClient =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[23]++, new N8nClient(args.baseUrl, args.apiKey));
        const results =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[24]++, []);
        const permissions =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[25]++, {});
        // Test specific operations
        /* istanbul ignore next */
        cov_1941b9thp2().s[26]++;
        for (const operation of args.testOperations) {
          /* istanbul ignore next */
          cov_1941b9thp2().s[27]++;
          try {
            /* istanbul ignore next */
            cov_1941b9thp2().s[28]++;
            switch (operation) {
              case 'workflows':
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][0]++;
                cov_1941b9thp2().s[29]++;
                await testClient.getWorkflows({
                  limit: 1
                });
                /* istanbul ignore next */
                cov_1941b9thp2().s[30]++;
                permissions.workflows = true;
                /* istanbul ignore next */
                cov_1941b9thp2().s[31]++;
                results.push('✅ Can access workflows');
                /* istanbul ignore next */
                cov_1941b9thp2().s[32]++;
                break;
              case 'executions':
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][1]++;
                cov_1941b9thp2().s[33]++;
                await testClient.getExecutions({
                  limit: 1
                });
                /* istanbul ignore next */
                cov_1941b9thp2().s[34]++;
                permissions.executions = true;
                /* istanbul ignore next */
                cov_1941b9thp2().s[35]++;
                results.push('✅ Can access executions');
                /* istanbul ignore next */
                cov_1941b9thp2().s[36]++;
                break;
              case 'credentials':
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][2]++;
                cov_1941b9thp2().s[37]++;
                await testClient.getCredentials({
                  limit: 1
                });
                /* istanbul ignore next */
                cov_1941b9thp2().s[38]++;
                permissions.credentials = true;
                /* istanbul ignore next */
                cov_1941b9thp2().s[39]++;
                results.push('✅ Can access credentials');
                /* istanbul ignore next */
                cov_1941b9thp2().s[40]++;
                break;
              case 'users':
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][3]++;
                cov_1941b9thp2().s[41]++;
                await testClient.getUsers({
                  limit: 1
                });
                /* istanbul ignore next */
                cov_1941b9thp2().s[42]++;
                permissions.users = true;
                /* istanbul ignore next */
                cov_1941b9thp2().s[43]++;
                results.push('✅ Can access users (Enterprise)');
                /* istanbul ignore next */
                cov_1941b9thp2().s[44]++;
                break;
              case 'projects':
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][4]++;
                cov_1941b9thp2().s[45]++;
                await testClient.getProjects({
                  limit: 1
                });
                /* istanbul ignore next */
                cov_1941b9thp2().s[46]++;
                permissions.projects = true;
                /* istanbul ignore next */
                cov_1941b9thp2().s[47]++;
                results.push('✅ Can access projects (Enterprise)');
                /* istanbul ignore next */
                cov_1941b9thp2().s[48]++;
                break;
              default:
                /* istanbul ignore next */
                cov_1941b9thp2().b[2][5]++;
                cov_1941b9thp2().s[49]++;
                results.push(`⚠️ Unknown operation: ${operation}`);
            }
          } catch (error) {
            /* istanbul ignore next */
            cov_1941b9thp2().s[50]++;
            permissions[operation] = false;
            /* istanbul ignore next */
            cov_1941b9thp2().s[51]++;
            results.push(`❌ Cannot access ${operation}: ${error instanceof Error ?
            /* istanbul ignore next */
            (cov_1941b9thp2().b[3][0]++, error.message) :
            /* istanbul ignore next */
            (cov_1941b9thp2().b[3][1]++, 'Unknown error')}`);
          }
        }
        const user =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[52]++, authResult.user);
        const hasEnterpriseFeatures =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[53]++,
        /* istanbul ignore next */
        (cov_1941b9thp2().b[4][0]++, permissions.users) ||
        /* istanbul ignore next */
        (cov_1941b9thp2().b[4][1]++, permissions.projects));
        /* istanbul ignore next */
        cov_1941b9thp2().s[54]++;
        return `✅ **n8n API Key Test Successful**\n\n` + `**Connection Details:**\n` + `- **Base URL:** ${args.baseUrl}\n` + `- **User ID:** ${user.id}\n` + `- **User Type:** ${hasEnterpriseFeatures ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[5][0]++, 'Enterprise') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[5][1]++, 'Community')}\n` + `- **Roles:** ${user.roles.join(', ')}\n\n` + `**Permission Test Results:**\n` + results.join('\n') + '\n\n' + `**Available Features:**\n` + `- Community Features: ${user.permissions.community ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[6][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[6][1]++, '❌')}\n` + `- Enterprise Features: ${user.permissions.enterprise ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[7][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[7][1]++, '❌')}\n` + `- Workflow Management: ${user.permissions.workflows ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[8][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[8][1]++, '❌')}\n` + `- Execution Access: ${user.permissions.executions ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[9][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[9][1]++, '❌')}\n` + `- Credential Management: ${user.permissions.credentials ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[10][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[10][1]++, '❌')}\n` + `- User Management: ${user.permissions.users ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[11][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[11][1]++, '❌')}\n` + `- Audit Access: ${user.permissions.audit ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[12][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[12][1]++, '❌')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[55]++;
        throw new UserError(`n8n API key test failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[13][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[13][1]++, 'Unknown error')}`);
      }
    }
  });
  // Initialize OAuth2 provider tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[56]++;
  server.addTool({
    name: 'init-oauth2-provider',
    description: 'Initialize OAuth2 provider configuration for authentication testing.',
    parameters: OAuth2InitSchema,
    annotations: {
      title: 'Initialize OAuth2 Provider',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[4]++;
      cov_1941b9thp2().s[57]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[58]++, getOAuth2Handler());
        const config =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[59]++, {
          provider: args.provider,
          clientId: args.clientId,
          clientSecret: args.clientSecret,
          authUrl: args.authUrl,
          tokenUrl: args.tokenUrl,
          userInfoUrl: args.userInfoUrl,
          redirectUri: args.redirectUri,
          scopes: args.scopes,
          extraParams: args.extraParams,
          pkce: args.enablePKCE ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[14][0]++, {
            enabled: true,
            challengeMethod: 'S256'
          }) :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[14][1]++, undefined),
          refreshSettings: {
            autoRefresh: true,
            refreshBuffer: 300
          }
        });
        /* istanbul ignore next */
        cov_1941b9thp2().s[60]++;
        handler.registerProvider(config);
        /* istanbul ignore next */
        cov_1941b9thp2().s[61]++;
        return `✅ **OAuth2 Provider Initialized**\n\n` + `- **Provider:** ${args.provider}\n` + `- **Client ID:** ${args.clientId.substring(0, 8)}...\n` + `- **Auth URL:** ${args.authUrl}\n` + `- **Token URL:** ${args.tokenUrl}\n` + `- **User Info URL:** ${
        /* istanbul ignore next */
        (cov_1941b9thp2().b[15][0]++, args.userInfoUrl) ||
        /* istanbul ignore next */
        (cov_1941b9thp2().b[15][1]++, 'Not configured')}\n` + `- **Redirect URI:** ${args.redirectUri}\n` + `- **Scopes:** ${args.scopes.join(', ')}\n` + `- **PKCE Enabled:** ${args.enablePKCE ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[16][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[16][1]++, 'No')}\n\n` + `The OAuth2 provider is now ready for authentication flows.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[62]++;
        throw new UserError(`Failed to initialize OAuth2 provider: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[17][1]++, 'Unknown error')}`);
      }
    }
  });
  // Generate OAuth2 authorization URL tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[63]++;
  server.addTool({
    name: 'oauth2-authorize',
    description: 'Generate OAuth2 authorization URL to start authentication flow.',
    parameters: OAuth2AuthorizeSchema,
    annotations: {
      title: 'Generate OAuth2 Authorization URL',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[5]++;
      cov_1941b9thp2().s[64]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[65]++, getOAuth2Handler());
        const {
          url,
          session
        } =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[66]++, handler.generateAuthUrl(args.provider, {
          sessionId: args.sessionId,
          extraParams: args.extraParams,
          metadata: args.metadata
        }));
        /* istanbul ignore next */
        cov_1941b9thp2().s[67]++;
        return `🔗 **OAuth2 Authorization URL Generated**\n\n` + `- **Provider:** ${args.provider}\n` + `- **Session ID:** ${session.sessionId}\n` + `- **State:** ${session.state}\n` + `- **Expires:** ${new Date(session.expiresAt).toLocaleString()}\n` + `- **PKCE:** ${session.codeChallenge ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[18][0]++, 'Enabled') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[18][1]++, 'Disabled')}\n\n` + `**Authorization URL:**\n` + `\`\`\`\n${url}\n\`\`\`\n\n` + `🌐 Visit this URL to start the OAuth2 authentication flow. ` + `The session will expire in 15 minutes.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[68]++;
        throw new UserError(`Failed to generate OAuth2 authorization URL: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[19][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[19][1]++, 'Unknown error')}`);
      }
    }
  });
  // Handle OAuth2 callback tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[69]++;
  server.addTool({
    name: 'oauth2-callback',
    description: 'Handle OAuth2 callback and exchange authorization code for tokens.',
    parameters: OAuth2CallbackSchema,
    annotations: {
      title: 'Handle OAuth2 Callback',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[6]++;
      cov_1941b9thp2().s[70]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[71]++, getOAuth2Handler());
        const result =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[72]++, await handler.handleCallback(args.provider, {
          code: args.code,
          state: args.state,
          error: args.error,
          error_description: args.error_description,
          error_uri: args.error_uri
        }));
        /* istanbul ignore next */
        cov_1941b9thp2().s[73]++;
        if (!result.success) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[20][0]++;
          cov_1941b9thp2().s[74]++;
          return `❌ **OAuth2 Callback Failed**\n\n` + `- **Provider:** ${args.provider}\n` + `- **Error:** ${result.error}\n` + (result.errorDetails ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[21][0]++, `- **Error Code:** ${result.errorDetails.code}\n` + `- **Description:** ${result.errorDetails.description}\n` + (result.errorDetails.uri ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[22][0]++, `- **More Info:** ${result.errorDetails.uri}\n`) :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[22][1]++, ''))) :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[21][1]++, '')) + `\nThe OAuth2 authentication flow was not completed successfully.`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[20][1]++;
        }
        const tokens =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[75]++, result.tokens);
        const userInfo =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[76]++, result.userInfo);
        /* istanbul ignore next */
        cov_1941b9thp2().s[77]++;
        return `✅ **OAuth2 Callback Successful**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${userInfo.id}\n` + `- **User Name:** ${
        /* istanbul ignore next */
        (cov_1941b9thp2().b[23][0]++, userInfo.name) ||
        /* istanbul ignore next */
        (cov_1941b9thp2().b[23][1]++, 'Unknown')}\n` + `- **User Email:** ${
        /* istanbul ignore next */
        (cov_1941b9thp2().b[24][0]++, userInfo.email) ||
        /* istanbul ignore next */
        (cov_1941b9thp2().b[24][1]++, 'Not provided')}\n\n` + `**Token Information:**\n` + `- **Token Type:** ${tokens.tokenType}\n` + `- **Scopes:** ${tokens.scopes.join(', ')}\n` + `- **Has Refresh Token:** ${tokens.refreshToken ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[25][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[25][1]++, 'No')}\n` + `- **Expires:** ${tokens.expiresAt ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[26][0]++, new Date(tokens.expiresAt).toLocaleString()) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[26][1]++, 'Never')}\n\n` + `**Access Token (first 20 chars):** \`${tokens.accessToken.substring(0, 20)}...\`\n\n` + `🎉 OAuth2 authentication completed successfully! Tokens have been stored for future use.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[78]++;
        throw new UserError(`Failed to handle OAuth2 callback: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[27][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[27][1]++, 'Unknown error')}`);
      }
    }
  });
  // Refresh OAuth2 tokens tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[79]++;
  server.addTool({
    name: 'oauth2-refresh-tokens',
    description: 'Refresh OAuth2 access tokens using refresh token.',
    parameters: OAuth2RefreshSchema,
    annotations: {
      title: 'Refresh OAuth2 Tokens',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[7]++;
      cov_1941b9thp2().s[80]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[81]++, getOAuth2Handler());
        const newTokens =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[82]++, await handler.refreshTokens(args.provider, args.userId));
        /* istanbul ignore next */
        cov_1941b9thp2().s[83]++;
        if (!newTokens) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[28][0]++;
          cov_1941b9thp2().s[84]++;
          return `❌ **Token Refresh Failed**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${args.userId}\n\n` + `Unable to refresh tokens. This could be due to:\n` + `- No refresh token available\n` + `- Refresh token has expired\n` + `- OAuth2 provider rejected the refresh request\n` + `- Network connectivity issues`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[28][1]++;
        }
        cov_1941b9thp2().s[85]++;
        return `✅ **Tokens Refreshed Successfully**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${args.userId}\n` + `- **Token Type:** ${newTokens.tokenType}\n` + `- **Scopes:** ${newTokens.scopes.join(', ')}\n` + `- **Expires:** ${newTokens.expiresAt ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[29][0]++, new Date(newTokens.expiresAt).toLocaleString()) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[29][1]++, 'Never')}\n` + `- **Refreshed At:** ${new Date().toLocaleString()}\n\n` + `**New Access Token (first 20 chars):** \`${newTokens.accessToken.substring(0, 20)}...\`\n\n` + `🔄 Tokens have been refreshed and updated in storage.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[86]++;
        throw new UserError(`Failed to refresh OAuth2 tokens: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[30][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[30][1]++, 'Unknown error')}`);
      }
    }
  });
  // Validate OAuth2 tokens tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[87]++;
  server.addTool({
    name: 'oauth2-validate-tokens',
    description: 'Check if OAuth2 tokens are valid and not expired.',
    parameters: OAuth2TokenValidationSchema,
    annotations: {
      title: 'Validate OAuth2 Tokens',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[8]++;
      cov_1941b9thp2().s[88]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[89]++, getOAuth2Handler());
        const tokens =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[90]++, handler.getTokens(args.provider, args.userId));
        /* istanbul ignore next */
        cov_1941b9thp2().s[91]++;
        if (!tokens) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[31][0]++;
          cov_1941b9thp2().s[92]++;
          return `❌ **No Tokens Found**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${args.userId}\n\n` + `No OAuth2 tokens found for this user and provider combination.`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[31][1]++;
        }
        const isValid =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[93]++, handler.areTokensValid(tokens, args.bufferSeconds));
        const now =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[94]++, Date.now());
        const timeToExpiry =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[95]++, tokens.expiresAt ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[32][0]++, tokens.expiresAt - now) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[32][1]++, null));
        /* istanbul ignore next */
        cov_1941b9thp2().s[96]++;
        return `${isValid ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[33][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[33][1]++, '❌')} **Token Validation Result**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${args.userId}\n` + `- **Token Type:** ${tokens.tokenType}\n` + `- **Scopes:** ${tokens.scopes.join(', ')}\n` + `- **Has Refresh Token:** ${tokens.refreshToken ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[34][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[34][1]++, 'No')}\n` + `- **Valid:** ${isValid ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[35][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[35][1]++, 'No')}\n` + (tokens.expiresAt ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[36][0]++, `- **Expires:** ${new Date(tokens.expiresAt).toLocaleString()}\n` + `- **Time to Expiry:** ${timeToExpiry ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[37][0]++, Math.floor(timeToExpiry / 1000) + ' seconds') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[37][1]++, 'Expired')}\n`) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[36][1]++, `- **Expires:** Never\n`)) + `- **Buffer Time:** ${args.bufferSeconds} seconds\n\n` + (isValid ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[38][0]++, `✅ Tokens are valid and can be used for authentication.`) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[38][1]++, `❌ Tokens are invalid or expired. ${tokens.refreshToken ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[39][0]++, 'Consider refreshing tokens.') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[39][1]++, 'Re-authentication required.')}`));
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[97]++;
        throw new UserError(`Failed to validate OAuth2 tokens: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[40][1]++, 'Unknown error')}`);
      }
    }
  });
  // Revoke OAuth2 tokens tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[98]++;
  server.addTool({
    name: 'oauth2-revoke-tokens',
    description: 'Revoke OAuth2 tokens and remove them from storage.',
    parameters: OAuth2RevokeSchema,
    annotations: {
      title: 'Revoke OAuth2 Tokens',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[9]++;
      cov_1941b9thp2().s[99]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[100]++, getOAuth2Handler());
        const success =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[101]++, await handler.revokeTokens(args.provider, args.userId));
        /* istanbul ignore next */
        cov_1941b9thp2().s[102]++;
        return `${success ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[41][0]++, '✅') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[41][1]++, '⚠️')} **Token Revocation ${success ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[42][0]++, 'Successful') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[42][1]++, 'Completed')}**\n\n` + `- **Provider:** ${args.provider}\n` + `- **User ID:** ${args.userId}\n\n` + (success ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[43][0]++, `Tokens have been revoked with the provider and removed from local storage.`) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[43][1]++, `Tokens have been removed from local storage. Provider revocation may have failed.`)) + `\n\n🔒 User will need to re-authenticate to access OAuth2-protected resources.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[103]++;
        throw new UserError(`Failed to revoke OAuth2 tokens: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[44][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[44][1]++, 'Unknown error')}`);
      }
    }
  });
  // List OAuth2 sessions tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[104]++;
  server.addTool({
    name: 'list-oauth2-sessions',
    description: 'List all active OAuth2 authentication sessions.',
    parameters: z.object({}),
    annotations: {
      title: 'List OAuth2 Sessions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async () => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[10]++;
      cov_1941b9thp2().s[105]++;
      try {
        const handler =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[106]++, getOAuth2Handler());
        const sessions =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[107]++, handler.getActiveSessions());
        /* istanbul ignore next */
        cov_1941b9thp2().s[108]++;
        if (sessions.length === 0) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[45][0]++;
          cov_1941b9thp2().s[109]++;
          return '📭 No active OAuth2 sessions found.';
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[45][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[110]++, `📋 **Active OAuth2 Sessions (${sessions.length})**\n\n`);
        /* istanbul ignore next */
        cov_1941b9thp2().s[111]++;
        sessions.forEach((session, index) => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[11]++;
          const timeLeft =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[112]++, session.expiresAt - Date.now());
          /* istanbul ignore next */
          cov_1941b9thp2().s[113]++;
          result += `${index + 1}. **${session.provider}**\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[114]++;
          result += `   - Session ID: ${session.sessionId}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[115]++;
          result += `   - State: ${session.state}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[116]++;
          result += `   - Created: ${new Date(session.createdAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[117]++;
          result += `   - Expires: ${new Date(session.expiresAt).toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[118]++;
          result += `   - Time Left: ${Math.floor(timeLeft / 1000)} seconds\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[119]++;
          result += `   - PKCE: ${session.codeChallenge ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[46][0]++, 'Enabled') :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[46][1]++, 'Disabled')}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[120]++;
          if (
          /* istanbul ignore next */
          (cov_1941b9thp2().b[48][0]++, session.metadata) &&
          /* istanbul ignore next */
          (cov_1941b9thp2().b[48][1]++, Object.keys(session.metadata).length > 0)) {
            /* istanbul ignore next */
            cov_1941b9thp2().b[47][0]++;
            cov_1941b9thp2().s[121]++;
            result += `   - Metadata: ${JSON.stringify(session.metadata)}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1941b9thp2().b[47][1]++;
          }
          cov_1941b9thp2().s[122]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1941b9thp2().s[123]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[124]++;
        throw new UserError(`Failed to list OAuth2 sessions: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[49][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[49][1]++, 'Unknown error')}`);
      }
    }
  });
  // Generic credential test tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[125]++;
  server.addTool({
    name: 'test-credential',
    description: 'Test generic credential validity by making a test request to specified endpoint.',
    parameters: TestCredentialSchema,
    annotations: {
      title: 'Test Generic Credential',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[12]++;
      cov_1941b9thp2().s[126]++;
      try {
        /* istanbul ignore next */
        cov_1941b9thp2().s[127]++;
        if (!args.testEndpoint) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[50][0]++;
          cov_1941b9thp2().s[128]++;
          return `⚠️ **Credential Test Skipped**\n\n` + `- **Type:** ${args.credentialType}\n` + `- **Reason:** No test endpoint provided\n\n` + `To test this credential, please provide a \`testEndpoint\` URL.`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[50][1]++;
        }
        // Prepare request based on credential type
        const headers =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[129]++, {
          'User-Agent': 'n8n-mcp-server/2.0.0',
          Accept: 'application/json'
        });
        // Add authentication based on credential type
        /* istanbul ignore next */
        cov_1941b9thp2().s[130]++;
        if (args.credentialType === 'api-key') {
          /* istanbul ignore next */
          cov_1941b9thp2().b[51][0]++;
          cov_1941b9thp2().s[131]++;
          if (args.credentialData.apiKey) {
            /* istanbul ignore next */
            cov_1941b9thp2().b[52][0]++;
            cov_1941b9thp2().s[132]++;
            headers['Authorization'] = `Bearer ${args.credentialData.apiKey}`;
          } else {
            /* istanbul ignore next */
            cov_1941b9thp2().b[52][1]++;
            cov_1941b9thp2().s[133]++;
            if (args.credentialData.key) {
              /* istanbul ignore next */
              cov_1941b9thp2().b[53][0]++;
              cov_1941b9thp2().s[134]++;
              headers['X-API-Key'] = args.credentialData.key;
            } else
            /* istanbul ignore next */
            {
              cov_1941b9thp2().b[53][1]++;
            }
          }
        } else {
          /* istanbul ignore next */
          cov_1941b9thp2().b[51][1]++;
          cov_1941b9thp2().s[135]++;
          if (args.credentialType === 'basic-auth') {
            /* istanbul ignore next */
            cov_1941b9thp2().b[54][0]++;
            const credentials =
            /* istanbul ignore next */
            (cov_1941b9thp2().s[136]++, Buffer.from(`${args.credentialData.username}:${args.credentialData.password}`).toString('base64'));
            /* istanbul ignore next */
            cov_1941b9thp2().s[137]++;
            headers['Authorization'] = `Basic ${credentials}`;
          } else {
            /* istanbul ignore next */
            cov_1941b9thp2().b[54][1]++;
            cov_1941b9thp2().s[138]++;
            if (args.credentialType === 'oauth2') {
              /* istanbul ignore next */
              cov_1941b9thp2().b[55][0]++;
              cov_1941b9thp2().s[139]++;
              if (args.credentialData.accessToken) {
                /* istanbul ignore next */
                cov_1941b9thp2().b[56][0]++;
                cov_1941b9thp2().s[140]++;
                headers['Authorization'] = `Bearer ${args.credentialData.accessToken}`;
              } else
              /* istanbul ignore next */
              {
                cov_1941b9thp2().b[56][1]++;
              }
            } else
            /* istanbul ignore next */
            {
              cov_1941b9thp2().b[55][1]++;
            }
          }
        }
        // Make test request
        const controller =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[141]++, new AbortController());
        const timeoutId =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[142]++, setTimeout(() => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[13]++;
          cov_1941b9thp2().s[143]++;
          return controller.abort();
        }, args.timeout));
        /* istanbul ignore next */
        cov_1941b9thp2().s[144]++;
        try {
          const response =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[145]++, await fetch(args.testEndpoint, {
            method: 'GET',
            headers,
            signal: controller.signal
          }));
          /* istanbul ignore next */
          cov_1941b9thp2().s[146]++;
          clearTimeout(timeoutId);
          const isSuccess =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[147]++,
          /* istanbul ignore next */
          (cov_1941b9thp2().b[57][0]++, response.status >= 200) &&
          /* istanbul ignore next */
          (cov_1941b9thp2().b[57][1]++, response.status < 300));
          const responseText =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[148]++, await response.text().catch(() => {
            /* istanbul ignore next */
            cov_1941b9thp2().f[14]++;
            cov_1941b9thp2().s[149]++;
            return 'Unable to read response';
          }));
          /* istanbul ignore next */
          cov_1941b9thp2().s[150]++;
          return `${isSuccess ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[58][0]++, '✅') :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[58][1]++, '❌')} **Credential Test ${isSuccess ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[59][0]++, 'Successful') :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[59][1]++, 'Failed')}**\n\n` + `- **Type:** ${args.credentialType}\n` + `- **Test Endpoint:** ${args.testEndpoint}\n` + `- **Status Code:** ${response.status} ${response.statusText}\n` + `- **Response Time:** ${Date.now() - Date.now()} ms\n` + `- **Content Type:** ${
          /* istanbul ignore next */
          (cov_1941b9thp2().b[60][0]++, response.headers.get('content-type')) ||
          /* istanbul ignore next */
          (cov_1941b9thp2().b[60][1]++, 'Unknown')}\n\n` + (isSuccess ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[61][0]++, `✅ The credential is valid and working correctly.`) :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[61][1]++, `❌ The credential test failed. This could indicate:\n` + `- Invalid credentials\n` + `- Expired tokens\n` + `- Insufficient permissions\n` + `- Service unavailable\n\n` + `**Response:** ${responseText.substring(0, 500)}${responseText.length > 500 ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[62][0]++, '...') :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[62][1]++, '')}`));
        } catch (error) {
          /* istanbul ignore next */
          cov_1941b9thp2().s[151]++;
          clearTimeout(timeoutId);
          /* istanbul ignore next */
          cov_1941b9thp2().s[152]++;
          throw error;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[153]++;
        if (
        /* istanbul ignore next */
        (cov_1941b9thp2().b[64][0]++, error instanceof Error) &&
        /* istanbul ignore next */
        (cov_1941b9thp2().b[64][1]++, error.name === 'AbortError')) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[63][0]++;
          cov_1941b9thp2().s[154]++;
          return `⏱️ **Credential Test Timeout**\n\n` + `- **Type:** ${args.credentialType}\n` + `- **Test Endpoint:** ${args.testEndpoint}\n` + `- **Timeout:** ${args.timeout}ms\n\n` + `The test request timed out. This could indicate:\n` + `- Network connectivity issues\n` + `- Slow service response\n` + `- Invalid endpoint URL`;
        } else
        /* istanbul ignore next */
        {
          cov_1941b9thp2().b[63][1]++;
        }
        cov_1941b9thp2().s[155]++;
        throw new UserError(`Credential test failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[65][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[65][1]++, 'Unknown error')}`);
      }
    }
  });
  // Batch credential test tool
  /* istanbul ignore next */
  cov_1941b9thp2().s[156]++;
  server.addTool({
    name: 'batch-test-credentials',
    description: 'Test multiple credentials in batch (sequential or parallel).',
    parameters: BatchCredentialTestSchema,
    annotations: {
      title: 'Batch Test Credentials',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1941b9thp2().f[15]++;
      cov_1941b9thp2().s[157]++;
      try {
        const results =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[158]++, []);
        /* istanbul ignore next */
        cov_1941b9thp2().s[159]++;
        const testCredential = async cred => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[16]++;
          const startTime =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[160]++, Date.now());
          /* istanbul ignore next */
          cov_1941b9thp2().s[161]++;
          try {
            /* istanbul ignore next */
            cov_1941b9thp2().s[162]++;
            if (!cred.testEndpoint) {
              /* istanbul ignore next */
              cov_1941b9thp2().b[66][0]++;
              cov_1941b9thp2().s[163]++;
              return {
                id: cred.id,
                type: cred.type,
                success: false,
                error: 'No test endpoint provided'
              };
            } else
            /* istanbul ignore next */
            {
              cov_1941b9thp2().b[66][1]++;
            }
            // Prepare headers (simplified version of individual test)
            const headers =
            /* istanbul ignore next */
            (cov_1941b9thp2().s[164]++, {
              'User-Agent': 'n8n-mcp-server/2.0.0',
              Accept: 'application/json'
            });
            /* istanbul ignore next */
            cov_1941b9thp2().s[165]++;
            if (
            /* istanbul ignore next */
            (cov_1941b9thp2().b[68][0]++, cred.type === 'api-key') &&
            /* istanbul ignore next */
            (cov_1941b9thp2().b[68][1]++, cred.data.apiKey)) {
              /* istanbul ignore next */
              cov_1941b9thp2().b[67][0]++;
              cov_1941b9thp2().s[166]++;
              headers['Authorization'] = `Bearer ${cred.data.apiKey}`;
            } else {
              /* istanbul ignore next */
              cov_1941b9thp2().b[67][1]++;
              cov_1941b9thp2().s[167]++;
              if (cred.type === 'basic-auth') {
                /* istanbul ignore next */
                cov_1941b9thp2().b[69][0]++;
                const credentials =
                /* istanbul ignore next */
                (cov_1941b9thp2().s[168]++, Buffer.from(`${cred.data.username}:${cred.data.password}`).toString('base64'));
                /* istanbul ignore next */
                cov_1941b9thp2().s[169]++;
                headers['Authorization'] = `Basic ${credentials}`;
              } else
              /* istanbul ignore next */
              {
                cov_1941b9thp2().b[69][1]++;
              }
            }
            const response =
            /* istanbul ignore next */
            (cov_1941b9thp2().s[170]++, await fetch(cred.testEndpoint, {
              method: 'GET',
              headers,
              signal: AbortSignal.timeout(args.timeout)
            }));
            /* istanbul ignore next */
            cov_1941b9thp2().s[171]++;
            return {
              id: cred.id,
              type: cred.type,
              success:
              /* istanbul ignore next */
              (cov_1941b9thp2().b[70][0]++, response.status >= 200) &&
              /* istanbul ignore next */
              (cov_1941b9thp2().b[70][1]++, response.status < 300),
              status: response.status,
              responseTime: Date.now() - startTime
            };
          } catch (error) {
            /* istanbul ignore next */
            cov_1941b9thp2().s[172]++;
            return {
              id: cred.id,
              type: cred.type,
              success: false,
              error: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1941b9thp2().b[71][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1941b9thp2().b[71][1]++, 'Unknown error'),
              responseTime: Date.now() - startTime
            };
          }
        };
        // Execute tests
        /* istanbul ignore next */
        cov_1941b9thp2().s[173]++;
        if (args.parallel) {
          /* istanbul ignore next */
          cov_1941b9thp2().b[72][0]++;
          const promises =
          /* istanbul ignore next */
          (cov_1941b9thp2().s[174]++, args.credentials.map(testCredential));
          /* istanbul ignore next */
          cov_1941b9thp2().s[175]++;
          results.push(...(await Promise.all(promises)));
        } else {
          /* istanbul ignore next */
          cov_1941b9thp2().b[72][1]++;
          cov_1941b9thp2().s[176]++;
          for (const cred of args.credentials) {
            const result =
            /* istanbul ignore next */
            (cov_1941b9thp2().s[177]++, await testCredential(cred));
            /* istanbul ignore next */
            cov_1941b9thp2().s[178]++;
            results.push(result);
          }
        }
        // Generate summary
        const successful =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[179]++, results.filter(r => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[17]++;
          cov_1941b9thp2().s[180]++;
          return r.success;
        }).length);
        const failed =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[181]++, results.length - successful);
        const avgResponseTime =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[182]++, results.filter(r => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[18]++;
          cov_1941b9thp2().s[183]++;
          return r.responseTime;
        }).reduce((sum, r) => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[19]++;
          cov_1941b9thp2().s[184]++;
          return sum + (
          /* istanbul ignore next */
          (cov_1941b9thp2().b[73][0]++, r.responseTime) ||
          /* istanbul ignore next */
          (cov_1941b9thp2().b[73][1]++, 0));
        }, 0) / results.length);
        let output =
        /* istanbul ignore next */
        (cov_1941b9thp2().s[185]++, `📊 **Batch Credential Test Results**\n\n`);
        /* istanbul ignore next */
        cov_1941b9thp2().s[186]++;
        output += `- **Total Tested:** ${results.length}\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[187]++;
        output += `- **Successful:** ${successful}\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[188]++;
        output += `- **Failed:** ${failed}\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[189]++;
        output += `- **Success Rate:** ${Math.round(successful / results.length * 100)}%\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[190]++;
        output += `- **Execution Mode:** ${args.parallel ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[74][0]++, 'Parallel') :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[74][1]++, 'Sequential')}\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[191]++;
        output += `- **Average Response Time:** ${Math.round(avgResponseTime)}ms\n\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[192]++;
        output += `**Detailed Results:**\n`;
        /* istanbul ignore next */
        cov_1941b9thp2().s[193]++;
        results.forEach((result, index) => {
          /* istanbul ignore next */
          cov_1941b9thp2().f[20]++;
          cov_1941b9thp2().s[194]++;
          output += `${index + 1}. **${result.id}** (${result.type})\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[195]++;
          output += `   - Status: ${result.success ?
          /* istanbul ignore next */
          (cov_1941b9thp2().b[75][0]++, '✅ Success') :
          /* istanbul ignore next */
          (cov_1941b9thp2().b[75][1]++, '❌ Failed')}\n`;
          /* istanbul ignore next */
          cov_1941b9thp2().s[196]++;
          if (result.status) {
            /* istanbul ignore next */
            cov_1941b9thp2().b[76][0]++;
            cov_1941b9thp2().s[197]++;
            output += `   - HTTP Status: ${result.status}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1941b9thp2().b[76][1]++;
          }
          cov_1941b9thp2().s[198]++;
          if (result.responseTime) {
            /* istanbul ignore next */
            cov_1941b9thp2().b[77][0]++;
            cov_1941b9thp2().s[199]++;
            output += `   - Response Time: ${result.responseTime}ms\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1941b9thp2().b[77][1]++;
          }
          cov_1941b9thp2().s[200]++;
          if (result.error) {
            /* istanbul ignore next */
            cov_1941b9thp2().b[78][0]++;
            cov_1941b9thp2().s[201]++;
            output += `   - Error: ${result.error}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1941b9thp2().b[78][1]++;
          }
          cov_1941b9thp2().s[202]++;
          output += '\n';
        });
        /* istanbul ignore next */
        cov_1941b9thp2().s[203]++;
        return output;
      } catch (error) {
        /* istanbul ignore next */
        cov_1941b9thp2().s[204]++;
        throw new UserError(`Batch credential test failed: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1941b9thp2().b[79][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1941b9thp2().b[79][1]++, 'Unknown error')}`);
      }
    }
  });
}
// Helper function to format response time (for future use)
// function formatResponseTime(ms: number): string {
//   if (ms < 1000) {
//     return `${ms}ms`;
//   }
//   return `${(ms / 1000).toFixed(2)}s`;
// }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,