ea23684f8f1beed690a4a0f705822269
"use strict";

/* istanbul ignore next */
function cov_1nezf8h6vx() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts";
  var hash = "262282449e022f173ff591f64267b4344d7bf96f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 62
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 34
        }
      },
      "5": {
        start: {
          line: 8,
          column: 19
        },
        end: {
          line: 8,
          column: 71
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 71
        }
      },
      "7": {
        start: {
          line: 10,
          column: 19
        },
        end: {
          line: 10,
          column: 64
        }
      },
      "8": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 11,
          column: 59
        }
      },
      "9": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 31
        }
      },
      "10": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 29
        }
      },
      "11": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 19,
          column: 50
        }
      },
      "12": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "13": {
        start: {
          line: 24,
          column: 20
        },
        end: {
          line: 24,
          column: 55
        }
      },
      "14": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "15": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 67,
          column: 9
        }
      },
      "16": {
        start: {
          line: 31,
          column: 29
        },
        end: {
          line: 37,
          column: 14
        }
      },
      "17": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "18": {
        start: {
          line: 39,
          column: 34
        },
        end: {
          line: 39,
          column: 55
        }
      },
      "19": {
        start: {
          line: 41,
          column: 16
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "20": {
        start: {
          line: 42,
          column: 38
        },
        end: {
          line: 42,
          column: 59
        }
      },
      "21": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 49,
          column: 21
        }
      },
      "22": {
        start: {
          line: 45,
          column: 24
        },
        end: {
          line: 45,
          column: 161
        }
      },
      "23": {
        start: {
          line: 48,
          column: 24
        },
        end: {
          line: 48,
          column: 70
        }
      },
      "24": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "25": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "26": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 59,
          column: 13
        }
      },
      "27": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 58,
          column: 26
        }
      },
      "28": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 43
        }
      },
      "29": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 65,
          column: 13
        }
      },
      "30": {
        start: {
          line: 64,
          column: 16
        },
        end: {
          line: 64,
          column: 78
        }
      },
      "31": {
        start: {
          line: 66,
          column: 12
        },
        end: {
          line: 66,
          column: 24
        }
      },
      "32": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "33": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 52
        }
      },
      "34": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 87,
          column: 11
        }
      },
      "35": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 93,
          column: 11
        }
      },
      "36": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "37": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "38": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "39": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 45
        }
      },
      "40": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 118,
          column: 11
        }
      },
      "41": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 123,
          column: 11
        }
      },
      "42": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 129,
          column: 11
        }
      },
      "43": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 42
        }
      },
      "44": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "45": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 55
        }
      },
      "46": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "47": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 46
        }
      },
      "48": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 157,
          column: 11
        }
      },
      "49": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "50": {
        start: {
          line: 166,
          column: 23
        },
        end: {
          line: 166,
          column: 44
        }
      },
      "51": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 168,
          column: 70
        }
      },
      "52": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 168,
          column: 70
        }
      },
      "53": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "54": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 52
        }
      },
      "55": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 172,
          column: 60
        }
      },
      "56": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 172,
          column: 60
        }
      },
      "57": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "58": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 174,
          column: 58
        }
      },
      "59": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 175,
          column: 68
        }
      },
      "60": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 44
        }
      },
      "61": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 180,
          column: 49
        }
      },
      "62": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 49
        }
      },
      "63": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 181,
          column: 74
        }
      },
      "64": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "65": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 193,
          column: 11
        }
      },
      "66": {
        start: {
          line: 196,
          column: 23
        },
        end: {
          line: 196,
          column: 44
        }
      },
      "67": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 198,
          column: 58
        }
      },
      "68": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 198,
          column: 58
        }
      },
      "69": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "70": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 47
        }
      },
      "71": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 11
        }
      },
      "72": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 11
        }
      },
      "73": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 65
        }
      },
      "74": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "75": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 234,
          column: 11
        }
      },
      "76": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "77": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 250,
          column: 11
        }
      },
      "78": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 77
        }
      },
      "79": {
        start: {
          line: 256,
          column: 0
        },
        end: {
          line: 256,
          column: 30
        }
      },
      "80": {
        start: {
          line: 258,
          column: 15
        },
        end: {
          line: 265,
          column: 2
        }
      },
      "81": {
        start: {
          line: 266,
          column: 0
        },
        end: {
          line: 266,
          column: 24
        }
      },
      "82": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 25
        }
      },
      "83": {
        start: {
          line: 269,
          column: 0
        },
        end: {
          line: 269,
          column: 26
        }
      },
      "84": {
        start: {
          line: 271,
          column: 0
        },
        end: {
          line: 725,
          column: 3
        }
      },
      "85": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 724,
          column: 6
        }
      },
      "86": {
        start: {
          line: 727,
          column: 0
        },
        end: {
          line: 1965,
          column: 3
        }
      },
      "87": {
        start: {
          line: 728,
          column: 38
        },
        end: {
          line: 728,
          column: 52
        }
      },
      "88": {
        start: {
          line: 729,
          column: 4
        },
        end: {
          line: 1964,
          column: 5
        }
      },
      "89": {
        start: {
          line: 731,
          column: 36
        },
        end: {
          line: 731,
          column: 40
        }
      },
      "90": {
        start: {
          line: 732,
          column: 12
        },
        end: {
          line: 758,
          column: 13
        }
      },
      "91": {
        start: {
          line: 733,
          column: 31
        },
        end: {
          line: 733,
          column: 57
        }
      },
      "92": {
        start: {
          line: 735,
          column: 16
        },
        end: {
          line: 735,
          column: 45
        }
      },
      "93": {
        start: {
          line: 737,
          column: 33
        },
        end: {
          line: 737,
          column: 68
        }
      },
      "94": {
        start: {
          line: 738,
          column: 16
        },
        end: {
          line: 738,
          column: 46
        }
      },
      "95": {
        start: {
          line: 739,
          column: 16
        },
        end: {
          line: 746,
          column: 18
        }
      },
      "96": {
        start: {
          line: 749,
          column: 16
        },
        end: {
          line: 757,
          column: 18
        }
      },
      "97": {
        start: {
          line: 761,
          column: 33
        },
        end: {
          line: 761,
          column: 37
        }
      },
      "98": {
        start: {
          line: 762,
          column: 27
        },
        end: {
          line: 762,
          column: 48
        }
      },
      "99": {
        start: {
          line: 763,
          column: 12
        },
        end: {
          line: 773,
          column: 13
        }
      },
      "100": {
        start: {
          line: 764,
          column: 16
        },
        end: {
          line: 772,
          column: 18
        }
      },
      "101": {
        start: {
          line: 774,
          column: 12
        },
        end: {
          line: 803,
          column: 13
        }
      },
      "102": {
        start: {
          line: 775,
          column: 34
        },
        end: {
          line: 775,
          column: 62
        }
      },
      "103": {
        start: {
          line: 776,
          column: 43
        },
        end: {
          line: 783,
          column: 19
        }
      },
      "104": {
        start: {
          line: 776,
          column: 69
        },
        end: {
          line: 783,
          column: 17
        }
      },
      "105": {
        start: {
          line: 784,
          column: 16
        },
        end: {
          line: 791,
          column: 18
        }
      },
      "106": {
        start: {
          line: 794,
          column: 16
        },
        end: {
          line: 802,
          column: 18
        }
      },
      "107": {
        start: {
          line: 806,
          column: 37
        },
        end: {
          line: 806,
          column: 41
        }
      },
      "108": {
        start: {
          line: 807,
          column: 27
        },
        end: {
          line: 807,
          column: 48
        }
      },
      "109": {
        start: {
          line: 808,
          column: 12
        },
        end: {
          line: 818,
          column: 13
        }
      },
      "110": {
        start: {
          line: 809,
          column: 16
        },
        end: {
          line: 817,
          column: 18
        }
      },
      "111": {
        start: {
          line: 819,
          column: 12
        },
        end: {
          line: 840,
          column: 13
        }
      },
      "112": {
        start: {
          line: 820,
          column: 33
        },
        end: {
          line: 820,
          column: 61
        }
      },
      "113": {
        start: {
          line: 821,
          column: 16
        },
        end: {
          line: 828,
          column: 18
        }
      },
      "114": {
        start: {
          line: 831,
          column: 16
        },
        end: {
          line: 839,
          column: 18
        }
      },
      "115": {
        start: {
          line: 843,
          column: 47
        },
        end: {
          line: 843,
          column: 51
        }
      },
      "116": {
        start: {
          line: 844,
          column: 27
        },
        end: {
          line: 844,
          column: 48
        }
      },
      "117": {
        start: {
          line: 845,
          column: 12
        },
        end: {
          line: 855,
          column: 13
        }
      },
      "118": {
        start: {
          line: 846,
          column: 16
        },
        end: {
          line: 854,
          column: 18
        }
      },
      "119": {
        start: {
          line: 856,
          column: 12
        },
        end: {
          line: 877,
          column: 13
        }
      },
      "120": {
        start: {
          line: 857,
          column: 40
        },
        end: {
          line: 857,
          column: 81
        }
      },
      "121": {
        start: {
          line: 858,
          column: 16
        },
        end: {
          line: 865,
          column: 18
        }
      },
      "122": {
        start: {
          line: 868,
          column: 16
        },
        end: {
          line: 876,
          column: 18
        }
      },
      "123": {
        start: {
          line: 880,
          column: 70
        },
        end: {
          line: 880,
          column: 74
        }
      },
      "124": {
        start: {
          line: 881,
          column: 27
        },
        end: {
          line: 881,
          column: 48
        }
      },
      "125": {
        start: {
          line: 882,
          column: 12
        },
        end: {
          line: 892,
          column: 13
        }
      },
      "126": {
        start: {
          line: 883,
          column: 16
        },
        end: {
          line: 891,
          column: 18
        }
      },
      "127": {
        start: {
          line: 893,
          column: 12
        },
        end: {
          line: 914,
          column: 13
        }
      },
      "128": {
        start: {
          line: 894,
          column: 33
        },
        end: {
          line: 894,
          column: 86
        }
      },
      "129": {
        start: {
          line: 895,
          column: 16
        },
        end: {
          line: 902,
          column: 18
        }
      },
      "130": {
        start: {
          line: 905,
          column: 16
        },
        end: {
          line: 913,
          column: 18
        }
      },
      "131": {
        start: {
          line: 917,
          column: 37
        },
        end: {
          line: 917,
          column: 41
        }
      },
      "132": {
        start: {
          line: 918,
          column: 27
        },
        end: {
          line: 918,
          column: 48
        }
      },
      "133": {
        start: {
          line: 919,
          column: 12
        },
        end: {
          line: 929,
          column: 13
        }
      },
      "134": {
        start: {
          line: 920,
          column: 16
        },
        end: {
          line: 928,
          column: 18
        }
      },
      "135": {
        start: {
          line: 930,
          column: 12
        },
        end: {
          line: 951,
          column: 13
        }
      },
      "136": {
        start: {
          line: 931,
          column: 33
        },
        end: {
          line: 931,
          column: 64
        }
      },
      "137": {
        start: {
          line: 932,
          column: 16
        },
        end: {
          line: 939,
          column: 18
        }
      },
      "138": {
        start: {
          line: 942,
          column: 16
        },
        end: {
          line: 950,
          column: 18
        }
      },
      "139": {
        start: {
          line: 954,
          column: 37
        },
        end: {
          line: 954,
          column: 41
        }
      },
      "140": {
        start: {
          line: 955,
          column: 27
        },
        end: {
          line: 955,
          column: 48
        }
      },
      "141": {
        start: {
          line: 956,
          column: 12
        },
        end: {
          line: 966,
          column: 13
        }
      },
      "142": {
        start: {
          line: 957,
          column: 16
        },
        end: {
          line: 965,
          column: 18
        }
      },
      "143": {
        start: {
          line: 967,
          column: 12
        },
        end: {
          line: 988,
          column: 13
        }
      },
      "144": {
        start: {
          line: 968,
          column: 33
        },
        end: {
          line: 968,
          column: 66
        }
      },
      "145": {
        start: {
          line: 969,
          column: 16
        },
        end: {
          line: 976,
          column: 18
        }
      },
      "146": {
        start: {
          line: 979,
          column: 16
        },
        end: {
          line: 987,
          column: 18
        }
      },
      "147": {
        start: {
          line: 991,
          column: 37
        },
        end: {
          line: 991,
          column: 41
        }
      },
      "148": {
        start: {
          line: 992,
          column: 27
        },
        end: {
          line: 992,
          column: 48
        }
      },
      "149": {
        start: {
          line: 993,
          column: 12
        },
        end: {
          line: 1003,
          column: 13
        }
      },
      "150": {
        start: {
          line: 994,
          column: 16
        },
        end: {
          line: 1002,
          column: 18
        }
      },
      "151": {
        start: {
          line: 1004,
          column: 12
        },
        end: {
          line: 1025,
          column: 13
        }
      },
      "152": {
        start: {
          line: 1005,
          column: 33
        },
        end: {
          line: 1005,
          column: 68
        }
      },
      "153": {
        start: {
          line: 1006,
          column: 16
        },
        end: {
          line: 1013,
          column: 18
        }
      },
      "154": {
        start: {
          line: 1016,
          column: 16
        },
        end: {
          line: 1024,
          column: 18
        }
      },
      "155": {
        start: {
          line: 1028,
          column: 33
        },
        end: {
          line: 1028,
          column: 37
        }
      },
      "156": {
        start: {
          line: 1029,
          column: 27
        },
        end: {
          line: 1029,
          column: 48
        }
      },
      "157": {
        start: {
          line: 1030,
          column: 12
        },
        end: {
          line: 1040,
          column: 13
        }
      },
      "158": {
        start: {
          line: 1031,
          column: 16
        },
        end: {
          line: 1039,
          column: 18
        }
      },
      "159": {
        start: {
          line: 1041,
          column: 12
        },
        end: {
          line: 1062,
          column: 13
        }
      },
      "160": {
        start: {
          line: 1042,
          column: 33
        },
        end: {
          line: 1042,
          column: 60
        }
      },
      "161": {
        start: {
          line: 1043,
          column: 16
        },
        end: {
          line: 1050,
          column: 18
        }
      },
      "162": {
        start: {
          line: 1053,
          column: 16
        },
        end: {
          line: 1061,
          column: 18
        }
      },
      "163": {
        start: {
          line: 1065,
          column: 39
        },
        end: {
          line: 1065,
          column: 43
        }
      },
      "164": {
        start: {
          line: 1066,
          column: 27
        },
        end: {
          line: 1066,
          column: 48
        }
      },
      "165": {
        start: {
          line: 1067,
          column: 12
        },
        end: {
          line: 1077,
          column: 13
        }
      },
      "166": {
        start: {
          line: 1068,
          column: 16
        },
        end: {
          line: 1076,
          column: 18
        }
      },
      "167": {
        start: {
          line: 1078,
          column: 12
        },
        end: {
          line: 1099,
          column: 13
        }
      },
      "168": {
        start: {
          line: 1079,
          column: 16
        },
        end: {
          line: 1079,
          column: 49
        }
      },
      "169": {
        start: {
          line: 1080,
          column: 16
        },
        end: {
          line: 1087,
          column: 18
        }
      },
      "170": {
        start: {
          line: 1090,
          column: 16
        },
        end: {
          line: 1098,
          column: 18
        }
      },
      "171": {
        start: {
          line: 1102,
          column: 44
        },
        end: {
          line: 1102,
          column: 48
        }
      },
      "172": {
        start: {
          line: 1103,
          column: 27
        },
        end: {
          line: 1103,
          column: 48
        }
      },
      "173": {
        start: {
          line: 1104,
          column: 12
        },
        end: {
          line: 1114,
          column: 13
        }
      },
      "174": {
        start: {
          line: 1105,
          column: 16
        },
        end: {
          line: 1113,
          column: 18
        }
      },
      "175": {
        start: {
          line: 1115,
          column: 12
        },
        end: {
          line: 1136,
          column: 13
        }
      },
      "176": {
        start: {
          line: 1116,
          column: 16
        },
        end: {
          line: 1116,
          column: 54
        }
      },
      "177": {
        start: {
          line: 1117,
          column: 16
        },
        end: {
          line: 1124,
          column: 18
        }
      },
      "178": {
        start: {
          line: 1127,
          column: 16
        },
        end: {
          line: 1135,
          column: 18
        }
      },
      "179": {
        start: {
          line: 1139,
          column: 50
        },
        end: {
          line: 1139,
          column: 54
        }
      },
      "180": {
        start: {
          line: 1140,
          column: 27
        },
        end: {
          line: 1140,
          column: 48
        }
      },
      "181": {
        start: {
          line: 1141,
          column: 12
        },
        end: {
          line: 1151,
          column: 13
        }
      },
      "182": {
        start: {
          line: 1142,
          column: 16
        },
        end: {
          line: 1150,
          column: 18
        }
      },
      "183": {
        start: {
          line: 1152,
          column: 12
        },
        end: {
          line: 1173,
          column: 13
        }
      },
      "184": {
        start: {
          line: 1153,
          column: 16
        },
        end: {
          line: 1153,
          column: 60
        }
      },
      "185": {
        start: {
          line: 1154,
          column: 16
        },
        end: {
          line: 1161,
          column: 18
        }
      },
      "186": {
        start: {
          line: 1164,
          column: 16
        },
        end: {
          line: 1172,
          column: 18
        }
      },
      "187": {
        start: {
          line: 1176,
          column: 33
        },
        end: {
          line: 1176,
          column: 37
        }
      },
      "188": {
        start: {
          line: 1177,
          column: 27
        },
        end: {
          line: 1177,
          column: 48
        }
      },
      "189": {
        start: {
          line: 1178,
          column: 12
        },
        end: {
          line: 1188,
          column: 13
        }
      },
      "190": {
        start: {
          line: 1179,
          column: 16
        },
        end: {
          line: 1187,
          column: 18
        }
      },
      "191": {
        start: {
          line: 1189,
          column: 12
        },
        end: {
          line: 1210,
          column: 13
        }
      },
      "192": {
        start: {
          line: 1190,
          column: 30
        },
        end: {
          line: 1190,
          column: 54
        }
      },
      "193": {
        start: {
          line: 1191,
          column: 16
        },
        end: {
          line: 1198,
          column: 18
        }
      },
      "194": {
        start: {
          line: 1201,
          column: 16
        },
        end: {
          line: 1209,
          column: 18
        }
      },
      "195": {
        start: {
          line: 1213,
          column: 40
        },
        end: {
          line: 1213,
          column: 44
        }
      },
      "196": {
        start: {
          line: 1214,
          column: 27
        },
        end: {
          line: 1214,
          column: 48
        }
      },
      "197": {
        start: {
          line: 1215,
          column: 12
        },
        end: {
          line: 1225,
          column: 13
        }
      },
      "198": {
        start: {
          line: 1216,
          column: 16
        },
        end: {
          line: 1224,
          column: 18
        }
      },
      "199": {
        start: {
          line: 1226,
          column: 12
        },
        end: {
          line: 1247,
          column: 13
        }
      },
      "200": {
        start: {
          line: 1227,
          column: 31
        },
        end: {
          line: 1227,
          column: 62
        }
      },
      "201": {
        start: {
          line: 1228,
          column: 16
        },
        end: {
          line: 1235,
          column: 18
        }
      },
      "202": {
        start: {
          line: 1238,
          column: 16
        },
        end: {
          line: 1246,
          column: 18
        }
      },
      "203": {
        start: {
          line: 1250,
          column: 44
        },
        end: {
          line: 1250,
          column: 48
        }
      },
      "204": {
        start: {
          line: 1251,
          column: 27
        },
        end: {
          line: 1251,
          column: 48
        }
      },
      "205": {
        start: {
          line: 1252,
          column: 12
        },
        end: {
          line: 1262,
          column: 13
        }
      },
      "206": {
        start: {
          line: 1253,
          column: 16
        },
        end: {
          line: 1261,
          column: 18
        }
      },
      "207": {
        start: {
          line: 1263,
          column: 12
        },
        end: {
          line: 1284,
          column: 13
        }
      },
      "208": {
        start: {
          line: 1264,
          column: 29
        },
        end: {
          line: 1264,
          column: 60
        }
      },
      "209": {
        start: {
          line: 1265,
          column: 16
        },
        end: {
          line: 1272,
          column: 18
        }
      },
      "210": {
        start: {
          line: 1275,
          column: 16
        },
        end: {
          line: 1283,
          column: 18
        }
      },
      "211": {
        start: {
          line: 1287,
          column: 44
        },
        end: {
          line: 1287,
          column: 48
        }
      },
      "212": {
        start: {
          line: 1288,
          column: 27
        },
        end: {
          line: 1288,
          column: 48
        }
      },
      "213": {
        start: {
          line: 1289,
          column: 12
        },
        end: {
          line: 1299,
          column: 13
        }
      },
      "214": {
        start: {
          line: 1290,
          column: 16
        },
        end: {
          line: 1298,
          column: 18
        }
      },
      "215": {
        start: {
          line: 1300,
          column: 12
        },
        end: {
          line: 1321,
          column: 13
        }
      },
      "216": {
        start: {
          line: 1301,
          column: 16
        },
        end: {
          line: 1301,
          column: 51
        }
      },
      "217": {
        start: {
          line: 1302,
          column: 16
        },
        end: {
          line: 1309,
          column: 18
        }
      },
      "218": {
        start: {
          line: 1312,
          column: 16
        },
        end: {
          line: 1320,
          column: 18
        }
      },
      "219": {
        start: {
          line: 1324,
          column: 33
        },
        end: {
          line: 1324,
          column: 37
        }
      },
      "220": {
        start: {
          line: 1325,
          column: 27
        },
        end: {
          line: 1325,
          column: 48
        }
      },
      "221": {
        start: {
          line: 1326,
          column: 12
        },
        end: {
          line: 1336,
          column: 13
        }
      },
      "222": {
        start: {
          line: 1327,
          column: 16
        },
        end: {
          line: 1335,
          column: 18
        }
      },
      "223": {
        start: {
          line: 1337,
          column: 12
        },
        end: {
          line: 1358,
          column: 13
        }
      },
      "224": {
        start: {
          line: 1338,
          column: 34
        },
        end: {
          line: 1338,
          column: 62
        }
      },
      "225": {
        start: {
          line: 1339,
          column: 16
        },
        end: {
          line: 1346,
          column: 18
        }
      },
      "226": {
        start: {
          line: 1349,
          column: 16
        },
        end: {
          line: 1357,
          column: 18
        }
      },
      "227": {
        start: {
          line: 1361,
          column: 45
        },
        end: {
          line: 1361,
          column: 49
        }
      },
      "228": {
        start: {
          line: 1362,
          column: 27
        },
        end: {
          line: 1362,
          column: 48
        }
      },
      "229": {
        start: {
          line: 1363,
          column: 12
        },
        end: {
          line: 1373,
          column: 13
        }
      },
      "230": {
        start: {
          line: 1364,
          column: 16
        },
        end: {
          line: 1372,
          column: 18
        }
      },
      "231": {
        start: {
          line: 1374,
          column: 12
        },
        end: {
          line: 1395,
          column: 13
        }
      },
      "232": {
        start: {
          line: 1375,
          column: 16
        },
        end: {
          line: 1375,
          column: 56
        }
      },
      "233": {
        start: {
          line: 1376,
          column: 16
        },
        end: {
          line: 1383,
          column: 18
        }
      },
      "234": {
        start: {
          line: 1386,
          column: 16
        },
        end: {
          line: 1394,
          column: 18
        }
      },
      "235": {
        start: {
          line: 1398,
          column: 37
        },
        end: {
          line: 1398,
          column: 41
        }
      },
      "236": {
        start: {
          line: 1399,
          column: 27
        },
        end: {
          line: 1399,
          column: 48
        }
      },
      "237": {
        start: {
          line: 1400,
          column: 12
        },
        end: {
          line: 1410,
          column: 13
        }
      },
      "238": {
        start: {
          line: 1401,
          column: 16
        },
        end: {
          line: 1409,
          column: 18
        }
      },
      "239": {
        start: {
          line: 1411,
          column: 12
        },
        end: {
          line: 1432,
          column: 13
        }
      },
      "240": {
        start: {
          line: 1412,
          column: 16
        },
        end: {
          line: 1412,
          column: 48
        }
      },
      "241": {
        start: {
          line: 1413,
          column: 16
        },
        end: {
          line: 1420,
          column: 18
        }
      },
      "242": {
        start: {
          line: 1423,
          column: 16
        },
        end: {
          line: 1431,
          column: 18
        }
      },
      "243": {
        start: {
          line: 1435,
          column: 51
        },
        end: {
          line: 1435,
          column: 55
        }
      },
      "244": {
        start: {
          line: 1436,
          column: 27
        },
        end: {
          line: 1436,
          column: 48
        }
      },
      "245": {
        start: {
          line: 1437,
          column: 12
        },
        end: {
          line: 1447,
          column: 13
        }
      },
      "246": {
        start: {
          line: 1438,
          column: 16
        },
        end: {
          line: 1446,
          column: 18
        }
      },
      "247": {
        start: {
          line: 1448,
          column: 12
        },
        end: {
          line: 1469,
          column: 13
        }
      },
      "248": {
        start: {
          line: 1449,
          column: 35
        },
        end: {
          line: 1449,
          column: 82
        }
      },
      "249": {
        start: {
          line: 1450,
          column: 16
        },
        end: {
          line: 1457,
          column: 18
        }
      },
      "250": {
        start: {
          line: 1460,
          column: 16
        },
        end: {
          line: 1468,
          column: 18
        }
      },
      "251": {
        start: {
          line: 1472,
          column: 37
        },
        end: {
          line: 1472,
          column: 41
        }
      },
      "252": {
        start: {
          line: 1473,
          column: 27
        },
        end: {
          line: 1473,
          column: 48
        }
      },
      "253": {
        start: {
          line: 1474,
          column: 12
        },
        end: {
          line: 1484,
          column: 13
        }
      },
      "254": {
        start: {
          line: 1475,
          column: 16
        },
        end: {
          line: 1483,
          column: 18
        }
      },
      "255": {
        start: {
          line: 1485,
          column: 12
        },
        end: {
          line: 1506,
          column: 13
        }
      },
      "256": {
        start: {
          line: 1486,
          column: 31
        },
        end: {
          line: 1486,
          column: 64
        }
      },
      "257": {
        start: {
          line: 1487,
          column: 16
        },
        end: {
          line: 1494,
          column: 18
        }
      },
      "258": {
        start: {
          line: 1497,
          column: 16
        },
        end: {
          line: 1505,
          column: 18
        }
      },
      "259": {
        start: {
          line: 1509,
          column: 53
        },
        end: {
          line: 1509,
          column: 57
        }
      },
      "260": {
        start: {
          line: 1510,
          column: 27
        },
        end: {
          line: 1510,
          column: 48
        }
      },
      "261": {
        start: {
          line: 1511,
          column: 12
        },
        end: {
          line: 1521,
          column: 13
        }
      },
      "262": {
        start: {
          line: 1512,
          column: 16
        },
        end: {
          line: 1520,
          column: 18
        }
      },
      "263": {
        start: {
          line: 1522,
          column: 12
        },
        end: {
          line: 1543,
          column: 13
        }
      },
      "264": {
        start: {
          line: 1523,
          column: 31
        },
        end: {
          line: 1523,
          column: 83
        }
      },
      "265": {
        start: {
          line: 1524,
          column: 16
        },
        end: {
          line: 1531,
          column: 18
        }
      },
      "266": {
        start: {
          line: 1534,
          column: 16
        },
        end: {
          line: 1542,
          column: 18
        }
      },
      "267": {
        start: {
          line: 1547,
          column: 73
        },
        end: {
          line: 1547,
          column: 77
        }
      },
      "268": {
        start: {
          line: 1548,
          column: 27
        },
        end: {
          line: 1548,
          column: 48
        }
      },
      "269": {
        start: {
          line: 1549,
          column: 12
        },
        end: {
          line: 1559,
          column: 13
        }
      },
      "270": {
        start: {
          line: 1550,
          column: 16
        },
        end: {
          line: 1558,
          column: 18
        }
      },
      "271": {
        start: {
          line: 1560,
          column: 12
        },
        end: {
          line: 1581,
          column: 13
        }
      },
      "272": {
        start: {
          line: 1561,
          column: 35
        },
        end: {
          line: 1561,
          column: 105
        }
      },
      "273": {
        start: {
          line: 1562,
          column: 16
        },
        end: {
          line: 1569,
          column: 18
        }
      },
      "274": {
        start: {
          line: 1572,
          column: 16
        },
        end: {
          line: 1580,
          column: 18
        }
      },
      "275": {
        start: {
          line: 1584,
          column: 50
        },
        end: {
          line: 1584,
          column: 54
        }
      },
      "276": {
        start: {
          line: 1585,
          column: 27
        },
        end: {
          line: 1585,
          column: 48
        }
      },
      "277": {
        start: {
          line: 1586,
          column: 12
        },
        end: {
          line: 1596,
          column: 13
        }
      },
      "278": {
        start: {
          line: 1587,
          column: 16
        },
        end: {
          line: 1595,
          column: 18
        }
      },
      "279": {
        start: {
          line: 1597,
          column: 12
        },
        end: {
          line: 1618,
          column: 13
        }
      },
      "280": {
        start: {
          line: 1598,
          column: 34
        },
        end: {
          line: 1598,
          column: 76
        }
      },
      "281": {
        start: {
          line: 1599,
          column: 16
        },
        end: {
          line: 1606,
          column: 18
        }
      },
      "282": {
        start: {
          line: 1609,
          column: 16
        },
        end: {
          line: 1617,
          column: 18
        }
      },
      "283": {
        start: {
          line: 1621,
          column: 37
        },
        end: {
          line: 1621,
          column: 41
        }
      },
      "284": {
        start: {
          line: 1622,
          column: 27
        },
        end: {
          line: 1622,
          column: 48
        }
      },
      "285": {
        start: {
          line: 1623,
          column: 12
        },
        end: {
          line: 1633,
          column: 13
        }
      },
      "286": {
        start: {
          line: 1624,
          column: 16
        },
        end: {
          line: 1632,
          column: 18
        }
      },
      "287": {
        start: {
          line: 1634,
          column: 12
        },
        end: {
          line: 1655,
          column: 13
        }
      },
      "288": {
        start: {
          line: 1635,
          column: 34
        },
        end: {
          line: 1635,
          column: 66
        }
      },
      "289": {
        start: {
          line: 1636,
          column: 16
        },
        end: {
          line: 1643,
          column: 18
        }
      },
      "290": {
        start: {
          line: 1646,
          column: 16
        },
        end: {
          line: 1654,
          column: 18
        }
      },
      "291": {
        start: {
          line: 1659,
          column: 39
        },
        end: {
          line: 1659,
          column: 43
        }
      },
      "292": {
        start: {
          line: 1660,
          column: 27
        },
        end: {
          line: 1660,
          column: 48
        }
      },
      "293": {
        start: {
          line: 1661,
          column: 12
        },
        end: {
          line: 1671,
          column: 13
        }
      },
      "294": {
        start: {
          line: 1662,
          column: 16
        },
        end: {
          line: 1670,
          column: 18
        }
      },
      "295": {
        start: {
          line: 1672,
          column: 12
        },
        end: {
          line: 1693,
          column: 13
        }
      },
      "296": {
        start: {
          line: 1673,
          column: 28
        },
        end: {
          line: 1673,
          column: 56
        }
      },
      "297": {
        start: {
          line: 1674,
          column: 16
        },
        end: {
          line: 1681,
          column: 18
        }
      },
      "298": {
        start: {
          line: 1684,
          column: 16
        },
        end: {
          line: 1692,
          column: 18
        }
      },
      "299": {
        start: {
          line: 1696,
          column: 40
        },
        end: {
          line: 1696,
          column: 44
        }
      },
      "300": {
        start: {
          line: 1697,
          column: 27
        },
        end: {
          line: 1697,
          column: 48
        }
      },
      "301": {
        start: {
          line: 1698,
          column: 12
        },
        end: {
          line: 1708,
          column: 13
        }
      },
      "302": {
        start: {
          line: 1699,
          column: 16
        },
        end: {
          line: 1707,
          column: 18
        }
      },
      "303": {
        start: {
          line: 1709,
          column: 12
        },
        end: {
          line: 1730,
          column: 13
        }
      },
      "304": {
        start: {
          line: 1710,
          column: 29
        },
        end: {
          line: 1710,
          column: 60
        }
      },
      "305": {
        start: {
          line: 1711,
          column: 16
        },
        end: {
          line: 1718,
          column: 18
        }
      },
      "306": {
        start: {
          line: 1721,
          column: 16
        },
        end: {
          line: 1729,
          column: 18
        }
      },
      "307": {
        start: {
          line: 1733,
          column: 37
        },
        end: {
          line: 1733,
          column: 41
        }
      },
      "308": {
        start: {
          line: 1734,
          column: 27
        },
        end: {
          line: 1734,
          column: 48
        }
      },
      "309": {
        start: {
          line: 1735,
          column: 12
        },
        end: {
          line: 1745,
          column: 13
        }
      },
      "310": {
        start: {
          line: 1736,
          column: 16
        },
        end: {
          line: 1744,
          column: 18
        }
      },
      "311": {
        start: {
          line: 1746,
          column: 12
        },
        end: {
          line: 1767,
          column: 13
        }
      },
      "312": {
        start: {
          line: 1747,
          column: 28
        },
        end: {
          line: 1747,
          column: 51
        }
      },
      "313": {
        start: {
          line: 1748,
          column: 16
        },
        end: {
          line: 1755,
          column: 18
        }
      },
      "314": {
        start: {
          line: 1758,
          column: 16
        },
        end: {
          line: 1766,
          column: 18
        }
      },
      "315": {
        start: {
          line: 1770,
          column: 43
        },
        end: {
          line: 1770,
          column: 47
        }
      },
      "316": {
        start: {
          line: 1771,
          column: 27
        },
        end: {
          line: 1771,
          column: 48
        }
      },
      "317": {
        start: {
          line: 1772,
          column: 12
        },
        end: {
          line: 1782,
          column: 13
        }
      },
      "318": {
        start: {
          line: 1773,
          column: 16
        },
        end: {
          line: 1781,
          column: 18
        }
      },
      "319": {
        start: {
          line: 1783,
          column: 12
        },
        end: {
          line: 1804,
          column: 13
        }
      },
      "320": {
        start: {
          line: 1784,
          column: 28
        },
        end: {
          line: 1784,
          column: 60
        }
      },
      "321": {
        start: {
          line: 1785,
          column: 16
        },
        end: {
          line: 1792,
          column: 18
        }
      },
      "322": {
        start: {
          line: 1795,
          column: 16
        },
        end: {
          line: 1803,
          column: 18
        }
      },
      "323": {
        start: {
          line: 1807,
          column: 37
        },
        end: {
          line: 1807,
          column: 41
        }
      },
      "324": {
        start: {
          line: 1808,
          column: 27
        },
        end: {
          line: 1808,
          column: 48
        }
      },
      "325": {
        start: {
          line: 1809,
          column: 12
        },
        end: {
          line: 1819,
          column: 13
        }
      },
      "326": {
        start: {
          line: 1810,
          column: 16
        },
        end: {
          line: 1818,
          column: 18
        }
      },
      "327": {
        start: {
          line: 1820,
          column: 12
        },
        end: {
          line: 1841,
          column: 13
        }
      },
      "328": {
        start: {
          line: 1821,
          column: 28
        },
        end: {
          line: 1821,
          column: 54
        }
      },
      "329": {
        start: {
          line: 1822,
          column: 16
        },
        end: {
          line: 1829,
          column: 18
        }
      },
      "330": {
        start: {
          line: 1832,
          column: 16
        },
        end: {
          line: 1840,
          column: 18
        }
      },
      "331": {
        start: {
          line: 1844,
          column: 45
        },
        end: {
          line: 1844,
          column: 49
        }
      },
      "332": {
        start: {
          line: 1845,
          column: 27
        },
        end: {
          line: 1845,
          column: 48
        }
      },
      "333": {
        start: {
          line: 1846,
          column: 12
        },
        end: {
          line: 1856,
          column: 13
        }
      },
      "334": {
        start: {
          line: 1847,
          column: 16
        },
        end: {
          line: 1855,
          column: 18
        }
      },
      "335": {
        start: {
          line: 1857,
          column: 12
        },
        end: {
          line: 1878,
          column: 13
        }
      },
      "336": {
        start: {
          line: 1858,
          column: 29
        },
        end: {
          line: 1858,
          column: 69
        }
      },
      "337": {
        start: {
          line: 1859,
          column: 16
        },
        end: {
          line: 1866,
          column: 18
        }
      },
      "338": {
        start: {
          line: 1869,
          column: 16
        },
        end: {
          line: 1877,
          column: 18
        }
      },
      "339": {
        start: {
          line: 1881,
          column: 53
        },
        end: {
          line: 1881,
          column: 57
        }
      },
      "340": {
        start: {
          line: 1882,
          column: 27
        },
        end: {
          line: 1882,
          column: 48
        }
      },
      "341": {
        start: {
          line: 1883,
          column: 12
        },
        end: {
          line: 1893,
          column: 13
        }
      },
      "342": {
        start: {
          line: 1884,
          column: 16
        },
        end: {
          line: 1892,
          column: 18
        }
      },
      "343": {
        start: {
          line: 1894,
          column: 12
        },
        end: {
          line: 1915,
          column: 13
        }
      },
      "344": {
        start: {
          line: 1895,
          column: 29
        },
        end: {
          line: 1895,
          column: 80
        }
      },
      "345": {
        start: {
          line: 1896,
          column: 16
        },
        end: {
          line: 1903,
          column: 18
        }
      },
      "346": {
        start: {
          line: 1906,
          column: 16
        },
        end: {
          line: 1914,
          column: 18
        }
      },
      "347": {
        start: {
          line: 1918,
          column: 68
        },
        end: {
          line: 1918,
          column: 72
        }
      },
      "348": {
        start: {
          line: 1919,
          column: 27
        },
        end: {
          line: 1919,
          column: 48
        }
      },
      "349": {
        start: {
          line: 1920,
          column: 12
        },
        end: {
          line: 1930,
          column: 13
        }
      },
      "350": {
        start: {
          line: 1921,
          column: 16
        },
        end: {
          line: 1929,
          column: 18
        }
      },
      "351": {
        start: {
          line: 1931,
          column: 12
        },
        end: {
          line: 1952,
          column: 13
        }
      },
      "352": {
        start: {
          line: 1932,
          column: 30
        },
        end: {
          line: 1932,
          column: 95
        }
      },
      "353": {
        start: {
          line: 1933,
          column: 16
        },
        end: {
          line: 1940,
          column: 18
        }
      },
      "354": {
        start: {
          line: 1943,
          column: 16
        },
        end: {
          line: 1951,
          column: 18
        }
      },
      "355": {
        start: {
          line: 1955,
          column: 12
        },
        end: {
          line: 1963,
          column: 14
        }
      },
      "356": {
        start: {
          line: 1968,
          column: 22
        },
        end: {
          line: 1968,
          column: 59
        }
      },
      "357": {
        start: {
          line: 1969,
          column: 4
        },
        end: {
          line: 1969,
          column: 36
        }
      },
      "358": {
        start: {
          line: 1970,
          column: 4
        },
        end: {
          line: 1970,
          column: 53
        }
      },
      "359": {
        start: {
          line: 1974,
          column: 0
        },
        end: {
          line: 1979,
          column: 1
        }
      },
      "360": {
        start: {
          line: 1975,
          column: 4
        },
        end: {
          line: 1978,
          column: 7
        }
      },
      "361": {
        start: {
          line: 1976,
          column: 8
        },
        end: {
          line: 1976,
          column: 56
        }
      },
      "362": {
        start: {
          line: 1977,
          column: 8
        },
        end: {
          line: 1977,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 22,
            column: 5
          }
        },
        line: 15
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        loc: {
          start: {
            line: 23,
            column: 46
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 23
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 26
          },
          end: {
            line: 71,
            column: 5
          }
        },
        line: 69
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 72
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 61
          },
          end: {
            line: 88,
            column: 5
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 39
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 29
          },
          end: {
            line: 99,
            column: 5
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 31
          },
          end: {
            line: 104,
            column: 5
          }
        },
        line: 100
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 33
          },
          end: {
            line: 109,
            column: 5
          }
        },
        line: 105
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 25
          },
          end: {
            line: 113,
            column: 5
          }
        },
        line: 111
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        loc: {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 119,
            column: 5
          }
        },
        line: 114
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 35
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 120
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 41
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 125
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 22
          },
          end: {
            line: 134,
            column: 5
          }
        },
        line: 132
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 135,
            column: 5
          }
        },
        loc: {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 140,
            column: 5
          }
        },
        line: 135
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 29
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 32
          },
          end: {
            line: 148,
            column: 5
          }
        },
        line: 144
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 26
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 150
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 158,
            column: 5
          }
        },
        line: 153
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 159,
            column: 5
          }
        },
        loc: {
          start: {
            line: 159,
            column: 29
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 159
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 38
          },
          end: {
            line: 176,
            column: 5
          }
        },
        line: 165
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 177,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        loc: {
          start: {
            line: 177,
            column: 48
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 177
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 183,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        loc: {
          start: {
            line: 183,
            column: 30
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 183
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 26
          },
          end: {
            line: 194,
            column: 5
          }
        },
        line: 189
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 32
          },
          end: {
            line: 200,
            column: 5
          }
        },
        line: 195
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 201,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        loc: {
          start: {
            line: 201,
            column: 21
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 201
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 30
          },
          end: {
            line: 209,
            column: 5
          }
        },
        line: 204
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 210,
            column: 4
          },
          end: {
            line: 210,
            column: 5
          }
        },
        loc: {
          start: {
            line: 210,
            column: 24
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 210
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 215,
            column: 4
          },
          end: {
            line: 215,
            column: 5
          }
        },
        loc: {
          start: {
            line: 215,
            column: 38
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 215
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 49
          },
          end: {
            line: 223,
            column: 5
          }
        },
        line: 218
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 38
          },
          end: {
            line: 235,
            column: 5
          }
        },
        line: 225
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 237,
            column: 4
          },
          end: {
            line: 237,
            column: 5
          }
        },
        loc: {
          start: {
            line: 237,
            column: 45
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 237
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 31
          },
          end: {
            line: 251,
            column: 5
          }
        },
        line: 247
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 252,
            column: 4
          },
          end: {
            line: 252,
            column: 5
          }
        },
        loc: {
          start: {
            line: 252,
            column: 50
          },
          end: {
            line: 254,
            column: 5
          }
        },
        line: 252
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 271,
            column: 60
          },
          end: {
            line: 271,
            column: 61
          }
        },
        loc: {
          start: {
            line: 271,
            column: 72
          },
          end: {
            line: 725,
            column: 1
          }
        },
        line: 271
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 727,
            column: 59
          },
          end: {
            line: 727,
            column: 60
          }
        },
        loc: {
          start: {
            line: 727,
            column: 78
          },
          end: {
            line: 1965,
            column: 1
          }
        },
        line: 727
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 776,
            column: 62
          },
          end: {
            line: 776,
            column: 63
          }
        },
        loc: {
          start: {
            line: 776,
            column: 69
          },
          end: {
            line: 783,
            column: 17
          }
        },
        line: 776
      },
      "38": {
        name: "startServer",
        decl: {
          start: {
            line: 1967,
            column: 15
          },
          end: {
            line: 1967,
            column: 26
          }
        },
        loc: {
          start: {
            line: 1967,
            column: 29
          },
          end: {
            line: 1971,
            column: 1
          }
        },
        line: 1967
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 1975,
            column: 24
          },
          end: {
            line: 1975,
            column: 25
          }
        },
        loc: {
          start: {
            line: 1975,
            column: 35
          },
          end: {
            line: 1978,
            column: 5
          }
        },
        line: 1975
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 32
          },
          end: {
            line: 23,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 23,
            column: 42
          },
          end: {
            line: 23,
            column: 44
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 55,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 49,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 49,
            column: 21
          }
        }, {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 49,
            column: 21
          }
        }],
        line: 44
      },
      "6": {
        loc: {
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 24
          },
          end: {
            line: 44,
            column: 41
          }
        }, {
          start: {
            line: 44,
            column: 45
          },
          end: {
            line: 44,
            column: 82
          }
        }],
        line: 44
      },
      "7": {
        loc: {
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 48,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 48,
            column: 39
          },
          end: {
            line: 48,
            column: 56
          }
        }, {
          start: {
            line: 48,
            column: 60
          },
          end: {
            line: 48,
            column: 69
          }
        }],
        line: 48
      },
      "8": {
        loc: {
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 12
          },
          end: {
            line: 59,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "9": {
        loc: {
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 12
          },
          end: {
            line: 65,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "10": {
        loc: {
          start: {
            line: 75,
            column: 31
          },
          end: {
            line: 75,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 75,
            column: 39
          },
          end: {
            line: 75,
            column: 41
          }
        }],
        line: 75
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 43
          },
          end: {
            line: 75,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 75,
            column: 57
          },
          end: {
            line: 75,
            column: 59
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 165,
            column: 24
          },
          end: {
            line: 165,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 165,
            column: 34
          },
          end: {
            line: 165,
            column: 36
          }
        }],
        line: 165
      },
      "13": {
        loc: {
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 70
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 8
          },
          end: {
            line: 168,
            column: 70
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "14": {
        loc: {
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 52
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 169,
            column: 8
          },
          end: {
            line: 170,
            column: 52
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 169
      },
      "15": {
        loc: {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 172,
            column: 60
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 172,
            column: 60
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "16": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 174,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 174,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "17": {
        loc: {
          start: {
            line: 177,
            column: 27
          },
          end: {
            line: 177,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 177,
            column: 41
          },
          end: {
            line: 177,
            column: 46
          }
        }],
        line: 177
      },
      "18": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 180,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 180,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "19": {
        loc: {
          start: {
            line: 195,
            column: 18
          },
          end: {
            line: 195,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 195,
            column: 28
          },
          end: {
            line: 195,
            column: 30
          }
        }],
        line: 195
      },
      "20": {
        loc: {
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 198,
            column: 58
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 8
          },
          end: {
            line: 198,
            column: 58
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 197
      },
      "21": {
        loc: {
          start: {
            line: 225,
            column: 24
          },
          end: {
            line: 225,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 225,
            column: 34
          },
          end: {
            line: 225,
            column: 36
          }
        }],
        line: 225
      },
      "22": {
        loc: {
          start: {
            line: 729,
            column: 4
          },
          end: {
            line: 1964,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 730,
            column: 8
          },
          end: {
            line: 759,
            column: 9
          }
        }, {
          start: {
            line: 760,
            column: 8
          },
          end: {
            line: 804,
            column: 9
          }
        }, {
          start: {
            line: 805,
            column: 8
          },
          end: {
            line: 841,
            column: 9
          }
        }, {
          start: {
            line: 842,
            column: 8
          },
          end: {
            line: 878,
            column: 9
          }
        }, {
          start: {
            line: 879,
            column: 8
          },
          end: {
            line: 915,
            column: 9
          }
        }, {
          start: {
            line: 916,
            column: 8
          },
          end: {
            line: 952,
            column: 9
          }
        }, {
          start: {
            line: 953,
            column: 8
          },
          end: {
            line: 989,
            column: 9
          }
        }, {
          start: {
            line: 990,
            column: 8
          },
          end: {
            line: 1026,
            column: 9
          }
        }, {
          start: {
            line: 1027,
            column: 8
          },
          end: {
            line: 1063,
            column: 9
          }
        }, {
          start: {
            line: 1064,
            column: 8
          },
          end: {
            line: 1100,
            column: 9
          }
        }, {
          start: {
            line: 1101,
            column: 8
          },
          end: {
            line: 1137,
            column: 9
          }
        }, {
          start: {
            line: 1138,
            column: 8
          },
          end: {
            line: 1174,
            column: 9
          }
        }, {
          start: {
            line: 1175,
            column: 8
          },
          end: {
            line: 1211,
            column: 9
          }
        }, {
          start: {
            line: 1212,
            column: 8
          },
          end: {
            line: 1248,
            column: 9
          }
        }, {
          start: {
            line: 1249,
            column: 8
          },
          end: {
            line: 1285,
            column: 9
          }
        }, {
          start: {
            line: 1286,
            column: 8
          },
          end: {
            line: 1322,
            column: 9
          }
        }, {
          start: {
            line: 1323,
            column: 8
          },
          end: {
            line: 1359,
            column: 9
          }
        }, {
          start: {
            line: 1360,
            column: 8
          },
          end: {
            line: 1396,
            column: 9
          }
        }, {
          start: {
            line: 1397,
            column: 8
          },
          end: {
            line: 1433,
            column: 9
          }
        }, {
          start: {
            line: 1434,
            column: 8
          },
          end: {
            line: 1470,
            column: 9
          }
        }, {
          start: {
            line: 1471,
            column: 8
          },
          end: {
            line: 1507,
            column: 9
          }
        }, {
          start: {
            line: 1508,
            column: 8
          },
          end: {
            line: 1544,
            column: 9
          }
        }, {
          start: {
            line: 1546,
            column: 8
          },
          end: {
            line: 1582,
            column: 9
          }
        }, {
          start: {
            line: 1583,
            column: 8
          },
          end: {
            line: 1619,
            column: 9
          }
        }, {
          start: {
            line: 1620,
            column: 8
          },
          end: {
            line: 1656,
            column: 9
          }
        }, {
          start: {
            line: 1658,
            column: 8
          },
          end: {
            line: 1694,
            column: 9
          }
        }, {
          start: {
            line: 1695,
            column: 8
          },
          end: {
            line: 1731,
            column: 9
          }
        }, {
          start: {
            line: 1732,
            column: 8
          },
          end: {
            line: 1768,
            column: 9
          }
        }, {
          start: {
            line: 1769,
            column: 8
          },
          end: {
            line: 1805,
            column: 9
          }
        }, {
          start: {
            line: 1806,
            column: 8
          },
          end: {
            line: 1842,
            column: 9
          }
        }, {
          start: {
            line: 1843,
            column: 8
          },
          end: {
            line: 1879,
            column: 9
          }
        }, {
          start: {
            line: 1880,
            column: 8
          },
          end: {
            line: 1916,
            column: 9
          }
        }, {
          start: {
            line: 1917,
            column: 8
          },
          end: {
            line: 1953,
            column: 9
          }
        }, {
          start: {
            line: 1954,
            column: 8
          },
          end: {
            line: 1963,
            column: 14
          }
        }],
        line: 729
      },
      "23": {
        loc: {
          start: {
            line: 753,
            column: 34
          },
          end: {
            line: 753,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 753,
            column: 59
          },
          end: {
            line: 753,
            column: 72
          }
        }, {
          start: {
            line: 753,
            column: 75
          },
          end: {
            line: 753,
            column: 99
          }
        }],
        line: 753
      },
      "24": {
        loc: {
          start: {
            line: 763,
            column: 12
          },
          end: {
            line: 773,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 763,
            column: 12
          },
          end: {
            line: 773,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 763
      },
      "25": {
        loc: {
          start: {
            line: 798,
            column: 34
          },
          end: {
            line: 798,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 798,
            column: 59
          },
          end: {
            line: 798,
            column: 72
          }
        }, {
          start: {
            line: 798,
            column: 75
          },
          end: {
            line: 798,
            column: 99
          }
        }],
        line: 798
      },
      "26": {
        loc: {
          start: {
            line: 808,
            column: 12
          },
          end: {
            line: 818,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 808,
            column: 12
          },
          end: {
            line: 818,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 808
      },
      "27": {
        loc: {
          start: {
            line: 835,
            column: 34
          },
          end: {
            line: 835,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 835,
            column: 59
          },
          end: {
            line: 835,
            column: 72
          }
        }, {
          start: {
            line: 835,
            column: 75
          },
          end: {
            line: 835,
            column: 99
          }
        }],
        line: 835
      },
      "28": {
        loc: {
          start: {
            line: 845,
            column: 12
          },
          end: {
            line: 855,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 845,
            column: 12
          },
          end: {
            line: 855,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 845
      },
      "29": {
        loc: {
          start: {
            line: 872,
            column: 34
          },
          end: {
            line: 872,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 872,
            column: 59
          },
          end: {
            line: 872,
            column: 72
          }
        }, {
          start: {
            line: 872,
            column: 75
          },
          end: {
            line: 872,
            column: 99
          }
        }],
        line: 872
      },
      "30": {
        loc: {
          start: {
            line: 880,
            column: 36
          },
          end: {
            line: 880,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 880,
            column: 44
          },
          end: {
            line: 880,
            column: 46
          }
        }],
        line: 880
      },
      "31": {
        loc: {
          start: {
            line: 880,
            column: 48
          },
          end: {
            line: 880,
            column: 64
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 880,
            column: 62
          },
          end: {
            line: 880,
            column: 64
          }
        }],
        line: 880
      },
      "32": {
        loc: {
          start: {
            line: 882,
            column: 12
          },
          end: {
            line: 892,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 882,
            column: 12
          },
          end: {
            line: 892,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 882
      },
      "33": {
        loc: {
          start: {
            line: 909,
            column: 34
          },
          end: {
            line: 909,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 909,
            column: 59
          },
          end: {
            line: 909,
            column: 72
          }
        }, {
          start: {
            line: 909,
            column: 75
          },
          end: {
            line: 909,
            column: 99
          }
        }],
        line: 909
      },
      "34": {
        loc: {
          start: {
            line: 919,
            column: 12
          },
          end: {
            line: 929,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 919,
            column: 12
          },
          end: {
            line: 929,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 919
      },
      "35": {
        loc: {
          start: {
            line: 946,
            column: 34
          },
          end: {
            line: 946,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 946,
            column: 59
          },
          end: {
            line: 946,
            column: 72
          }
        }, {
          start: {
            line: 946,
            column: 75
          },
          end: {
            line: 946,
            column: 99
          }
        }],
        line: 946
      },
      "36": {
        loc: {
          start: {
            line: 956,
            column: 12
          },
          end: {
            line: 966,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 956,
            column: 12
          },
          end: {
            line: 966,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 956
      },
      "37": {
        loc: {
          start: {
            line: 983,
            column: 34
          },
          end: {
            line: 983,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 983,
            column: 59
          },
          end: {
            line: 983,
            column: 72
          }
        }, {
          start: {
            line: 983,
            column: 75
          },
          end: {
            line: 983,
            column: 99
          }
        }],
        line: 983
      },
      "38": {
        loc: {
          start: {
            line: 993,
            column: 12
          },
          end: {
            line: 1003,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 993,
            column: 12
          },
          end: {
            line: 1003,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 993
      },
      "39": {
        loc: {
          start: {
            line: 1020,
            column: 34
          },
          end: {
            line: 1020,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1020,
            column: 59
          },
          end: {
            line: 1020,
            column: 72
          }
        }, {
          start: {
            line: 1020,
            column: 75
          },
          end: {
            line: 1020,
            column: 99
          }
        }],
        line: 1020
      },
      "40": {
        loc: {
          start: {
            line: 1030,
            column: 12
          },
          end: {
            line: 1040,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1030,
            column: 12
          },
          end: {
            line: 1040,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1030
      },
      "41": {
        loc: {
          start: {
            line: 1057,
            column: 34
          },
          end: {
            line: 1057,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1057,
            column: 59
          },
          end: {
            line: 1057,
            column: 72
          }
        }, {
          start: {
            line: 1057,
            column: 75
          },
          end: {
            line: 1057,
            column: 99
          }
        }],
        line: 1057
      },
      "42": {
        loc: {
          start: {
            line: 1067,
            column: 12
          },
          end: {
            line: 1077,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1067,
            column: 12
          },
          end: {
            line: 1077,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1067
      },
      "43": {
        loc: {
          start: {
            line: 1094,
            column: 34
          },
          end: {
            line: 1094,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1094,
            column: 59
          },
          end: {
            line: 1094,
            column: 72
          }
        }, {
          start: {
            line: 1094,
            column: 75
          },
          end: {
            line: 1094,
            column: 99
          }
        }],
        line: 1094
      },
      "44": {
        loc: {
          start: {
            line: 1104,
            column: 12
          },
          end: {
            line: 1114,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1104,
            column: 12
          },
          end: {
            line: 1114,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1104
      },
      "45": {
        loc: {
          start: {
            line: 1131,
            column: 34
          },
          end: {
            line: 1131,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1131,
            column: 59
          },
          end: {
            line: 1131,
            column: 72
          }
        }, {
          start: {
            line: 1131,
            column: 75
          },
          end: {
            line: 1131,
            column: 99
          }
        }],
        line: 1131
      },
      "46": {
        loc: {
          start: {
            line: 1141,
            column: 12
          },
          end: {
            line: 1151,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1141,
            column: 12
          },
          end: {
            line: 1151,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1141
      },
      "47": {
        loc: {
          start: {
            line: 1168,
            column: 34
          },
          end: {
            line: 1168,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1168,
            column: 59
          },
          end: {
            line: 1168,
            column: 72
          }
        }, {
          start: {
            line: 1168,
            column: 75
          },
          end: {
            line: 1168,
            column: 99
          }
        }],
        line: 1168
      },
      "48": {
        loc: {
          start: {
            line: 1178,
            column: 12
          },
          end: {
            line: 1188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1178,
            column: 12
          },
          end: {
            line: 1188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1178
      },
      "49": {
        loc: {
          start: {
            line: 1205,
            column: 34
          },
          end: {
            line: 1205,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1205,
            column: 59
          },
          end: {
            line: 1205,
            column: 72
          }
        }, {
          start: {
            line: 1205,
            column: 75
          },
          end: {
            line: 1205,
            column: 99
          }
        }],
        line: 1205
      },
      "50": {
        loc: {
          start: {
            line: 1215,
            column: 12
          },
          end: {
            line: 1225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1215,
            column: 12
          },
          end: {
            line: 1225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1215
      },
      "51": {
        loc: {
          start: {
            line: 1242,
            column: 34
          },
          end: {
            line: 1242,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1242,
            column: 59
          },
          end: {
            line: 1242,
            column: 72
          }
        }, {
          start: {
            line: 1242,
            column: 75
          },
          end: {
            line: 1242,
            column: 99
          }
        }],
        line: 1242
      },
      "52": {
        loc: {
          start: {
            line: 1252,
            column: 12
          },
          end: {
            line: 1262,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1252,
            column: 12
          },
          end: {
            line: 1262,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1252
      },
      "53": {
        loc: {
          start: {
            line: 1279,
            column: 34
          },
          end: {
            line: 1279,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1279,
            column: 59
          },
          end: {
            line: 1279,
            column: 72
          }
        }, {
          start: {
            line: 1279,
            column: 75
          },
          end: {
            line: 1279,
            column: 99
          }
        }],
        line: 1279
      },
      "54": {
        loc: {
          start: {
            line: 1289,
            column: 12
          },
          end: {
            line: 1299,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1289,
            column: 12
          },
          end: {
            line: 1299,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1289
      },
      "55": {
        loc: {
          start: {
            line: 1316,
            column: 34
          },
          end: {
            line: 1316,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1316,
            column: 59
          },
          end: {
            line: 1316,
            column: 72
          }
        }, {
          start: {
            line: 1316,
            column: 75
          },
          end: {
            line: 1316,
            column: 99
          }
        }],
        line: 1316
      },
      "56": {
        loc: {
          start: {
            line: 1326,
            column: 12
          },
          end: {
            line: 1336,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1326,
            column: 12
          },
          end: {
            line: 1336,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1326
      },
      "57": {
        loc: {
          start: {
            line: 1353,
            column: 34
          },
          end: {
            line: 1353,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1353,
            column: 59
          },
          end: {
            line: 1353,
            column: 72
          }
        }, {
          start: {
            line: 1353,
            column: 75
          },
          end: {
            line: 1353,
            column: 99
          }
        }],
        line: 1353
      },
      "58": {
        loc: {
          start: {
            line: 1363,
            column: 12
          },
          end: {
            line: 1373,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1363,
            column: 12
          },
          end: {
            line: 1373,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1363
      },
      "59": {
        loc: {
          start: {
            line: 1390,
            column: 34
          },
          end: {
            line: 1390,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1390,
            column: 59
          },
          end: {
            line: 1390,
            column: 72
          }
        }, {
          start: {
            line: 1390,
            column: 75
          },
          end: {
            line: 1390,
            column: 99
          }
        }],
        line: 1390
      },
      "60": {
        loc: {
          start: {
            line: 1400,
            column: 12
          },
          end: {
            line: 1410,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1400,
            column: 12
          },
          end: {
            line: 1410,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1400
      },
      "61": {
        loc: {
          start: {
            line: 1427,
            column: 34
          },
          end: {
            line: 1427,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1427,
            column: 59
          },
          end: {
            line: 1427,
            column: 72
          }
        }, {
          start: {
            line: 1427,
            column: 75
          },
          end: {
            line: 1427,
            column: 99
          }
        }],
        line: 1427
      },
      "62": {
        loc: {
          start: {
            line: 1437,
            column: 12
          },
          end: {
            line: 1447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1437,
            column: 12
          },
          end: {
            line: 1447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1437
      },
      "63": {
        loc: {
          start: {
            line: 1464,
            column: 34
          },
          end: {
            line: 1464,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1464,
            column: 59
          },
          end: {
            line: 1464,
            column: 72
          }
        }, {
          start: {
            line: 1464,
            column: 75
          },
          end: {
            line: 1464,
            column: 99
          }
        }],
        line: 1464
      },
      "64": {
        loc: {
          start: {
            line: 1474,
            column: 12
          },
          end: {
            line: 1484,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1474,
            column: 12
          },
          end: {
            line: 1484,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1474
      },
      "65": {
        loc: {
          start: {
            line: 1501,
            column: 34
          },
          end: {
            line: 1501,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1501,
            column: 59
          },
          end: {
            line: 1501,
            column: 72
          }
        }, {
          start: {
            line: 1501,
            column: 75
          },
          end: {
            line: 1501,
            column: 99
          }
        }],
        line: 1501
      },
      "66": {
        loc: {
          start: {
            line: 1511,
            column: 12
          },
          end: {
            line: 1521,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1511,
            column: 12
          },
          end: {
            line: 1521,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1511
      },
      "67": {
        loc: {
          start: {
            line: 1538,
            column: 34
          },
          end: {
            line: 1538,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1538,
            column: 59
          },
          end: {
            line: 1538,
            column: 72
          }
        }, {
          start: {
            line: 1538,
            column: 75
          },
          end: {
            line: 1538,
            column: 99
          }
        }],
        line: 1538
      },
      "68": {
        loc: {
          start: {
            line: 1549,
            column: 12
          },
          end: {
            line: 1559,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1549,
            column: 12
          },
          end: {
            line: 1559,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1549
      },
      "69": {
        loc: {
          start: {
            line: 1576,
            column: 34
          },
          end: {
            line: 1576,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1576,
            column: 59
          },
          end: {
            line: 1576,
            column: 72
          }
        }, {
          start: {
            line: 1576,
            column: 75
          },
          end: {
            line: 1576,
            column: 99
          }
        }],
        line: 1576
      },
      "70": {
        loc: {
          start: {
            line: 1586,
            column: 12
          },
          end: {
            line: 1596,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1586,
            column: 12
          },
          end: {
            line: 1596,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1586
      },
      "71": {
        loc: {
          start: {
            line: 1613,
            column: 34
          },
          end: {
            line: 1613,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1613,
            column: 59
          },
          end: {
            line: 1613,
            column: 72
          }
        }, {
          start: {
            line: 1613,
            column: 75
          },
          end: {
            line: 1613,
            column: 99
          }
        }],
        line: 1613
      },
      "72": {
        loc: {
          start: {
            line: 1623,
            column: 12
          },
          end: {
            line: 1633,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1623,
            column: 12
          },
          end: {
            line: 1633,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1623
      },
      "73": {
        loc: {
          start: {
            line: 1650,
            column: 34
          },
          end: {
            line: 1650,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1650,
            column: 59
          },
          end: {
            line: 1650,
            column: 72
          }
        }, {
          start: {
            line: 1650,
            column: 75
          },
          end: {
            line: 1650,
            column: 99
          }
        }],
        line: 1650
      },
      "74": {
        loc: {
          start: {
            line: 1661,
            column: 12
          },
          end: {
            line: 1671,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1661,
            column: 12
          },
          end: {
            line: 1671,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1661
      },
      "75": {
        loc: {
          start: {
            line: 1688,
            column: 34
          },
          end: {
            line: 1688,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1688,
            column: 59
          },
          end: {
            line: 1688,
            column: 72
          }
        }, {
          start: {
            line: 1688,
            column: 75
          },
          end: {
            line: 1688,
            column: 99
          }
        }],
        line: 1688
      },
      "76": {
        loc: {
          start: {
            line: 1698,
            column: 12
          },
          end: {
            line: 1708,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1698,
            column: 12
          },
          end: {
            line: 1708,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1698
      },
      "77": {
        loc: {
          start: {
            line: 1725,
            column: 34
          },
          end: {
            line: 1725,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1725,
            column: 59
          },
          end: {
            line: 1725,
            column: 72
          }
        }, {
          start: {
            line: 1725,
            column: 75
          },
          end: {
            line: 1725,
            column: 99
          }
        }],
        line: 1725
      },
      "78": {
        loc: {
          start: {
            line: 1735,
            column: 12
          },
          end: {
            line: 1745,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1735,
            column: 12
          },
          end: {
            line: 1745,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1735
      },
      "79": {
        loc: {
          start: {
            line: 1762,
            column: 34
          },
          end: {
            line: 1762,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1762,
            column: 59
          },
          end: {
            line: 1762,
            column: 72
          }
        }, {
          start: {
            line: 1762,
            column: 75
          },
          end: {
            line: 1762,
            column: 99
          }
        }],
        line: 1762
      },
      "80": {
        loc: {
          start: {
            line: 1772,
            column: 12
          },
          end: {
            line: 1782,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1772,
            column: 12
          },
          end: {
            line: 1782,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1772
      },
      "81": {
        loc: {
          start: {
            line: 1799,
            column: 34
          },
          end: {
            line: 1799,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1799,
            column: 59
          },
          end: {
            line: 1799,
            column: 72
          }
        }, {
          start: {
            line: 1799,
            column: 75
          },
          end: {
            line: 1799,
            column: 99
          }
        }],
        line: 1799
      },
      "82": {
        loc: {
          start: {
            line: 1809,
            column: 12
          },
          end: {
            line: 1819,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1809,
            column: 12
          },
          end: {
            line: 1819,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1809
      },
      "83": {
        loc: {
          start: {
            line: 1836,
            column: 34
          },
          end: {
            line: 1836,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1836,
            column: 59
          },
          end: {
            line: 1836,
            column: 72
          }
        }, {
          start: {
            line: 1836,
            column: 75
          },
          end: {
            line: 1836,
            column: 99
          }
        }],
        line: 1836
      },
      "84": {
        loc: {
          start: {
            line: 1846,
            column: 12
          },
          end: {
            line: 1856,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1846,
            column: 12
          },
          end: {
            line: 1856,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1846
      },
      "85": {
        loc: {
          start: {
            line: 1873,
            column: 34
          },
          end: {
            line: 1873,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1873,
            column: 59
          },
          end: {
            line: 1873,
            column: 72
          }
        }, {
          start: {
            line: 1873,
            column: 75
          },
          end: {
            line: 1873,
            column: 99
          }
        }],
        line: 1873
      },
      "86": {
        loc: {
          start: {
            line: 1883,
            column: 12
          },
          end: {
            line: 1893,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1883,
            column: 12
          },
          end: {
            line: 1893,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1883
      },
      "87": {
        loc: {
          start: {
            line: 1910,
            column: 34
          },
          end: {
            line: 1910,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1910,
            column: 59
          },
          end: {
            line: 1910,
            column: 72
          }
        }, {
          start: {
            line: 1910,
            column: 75
          },
          end: {
            line: 1910,
            column: 99
          }
        }],
        line: 1910
      },
      "88": {
        loc: {
          start: {
            line: 1920,
            column: 12
          },
          end: {
            line: 1930,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1920,
            column: 12
          },
          end: {
            line: 1930,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1920
      },
      "89": {
        loc: {
          start: {
            line: 1947,
            column: 34
          },
          end: {
            line: 1947,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 1947,
            column: 59
          },
          end: {
            line: 1947,
            column: 72
          }
        }, {
          start: {
            line: 1947,
            column: 75
          },
          end: {
            line: 1947,
            column: 99
          }
        }],
        line: 1947
      },
      "90": {
        loc: {
          start: {
            line: 1974,
            column: 0
          },
          end: {
            line: 1979,
            column: 1
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 1974,
            column: 0
          },
          end: {
            line: 1979,
            column: 1
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 1974
      },
      "91": {
        loc: {
          start: {
            line: 1974,
            column: 4
          },
          end: {
            line: 1974,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 1974,
            column: 4
          },
          end: {
            line: 1974,
            column: 19
          }
        }, {
          start: {
            line: 1974,
            column: 23
          },
          end: {
            line: 1974,
            column: 59
          }
        }, {
          start: {
            line: 1974,
            column: 63
          },
          end: {
            line: 1974,
            column: 102
          }
        }],
        line: 1974
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0],
      "11": [0],
      "12": [0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0],
      "31": [0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0],
      "90": [0, 0],
      "91": [0, 0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/index.ts"],
      sourcesContent: ["\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport { ListToolsRequestSchema, CallToolRequestSchema } from '@modelcontextprotocol/sdk/types.js';\nimport fetch from 'node-fetch';\n\n// Type definitions for n8n API responses\ninterface N8nUser {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  isPending: boolean;\n  role?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface N8nUserList {\n  data: N8nUser[];\n  nextCursor?: string;\n}\n\ninterface N8nWorkflow {\n  id: number;\n  name: string;\n  active: boolean;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n}\n\ninterface N8nWorkflowList {\n  data: N8nWorkflow[];\n  nextCursor?: string;\n}\n\ninterface N8nProject {\n  id: string;\n  name: string;\n  type?: string;\n}\n\ninterface N8nProjectList {\n  data: N8nProject[];\n  nextCursor?: string;\n}\n\ninterface N8nVariable {\n  id: string;\n  key: string;\n  value: string;\n  type?: string;\n}\n\ninterface N8nVariableList {\n  data: N8nVariable[];\n  nextCursor?: string;\n}\n\ninterface N8nExecution {\n  id: number;\n  data?: any;\n  finished: boolean;\n  mode: string;\n  retryOf?: number;\n  retrySuccessId?: number;\n  startedAt: string;\n  stoppedAt?: string;\n  workflowId: number;\n  waitTill?: string;\n}\n\ninterface N8nExecutionList {\n  data: N8nExecution[];\n  nextCursor?: string;\n}\n\ninterface N8nTag {\n  id: string;\n  name: string;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\ninterface N8nTagList {\n  data: N8nTag[];\n  nextCursor?: string;\n}\n\ninterface N8nAuditResult {\n  'Credentials Risk Report'?: any;\n  'Database Risk Report'?: any;\n  'Filesystem Risk Report'?: any;\n  'Nodes Risk Report'?: any;\n  'Instance Risk Report'?: any;\n}\n\nclass N8nClient {\n  constructor(\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n    // Ensure apiKey is properly assigned for ESLint\n    this.apiKey = apiKey;\n  }\n\n  private async makeRequest<T>(endpoint: string, options: any = {}): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...headers,\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorMessage: string;\n        try {\n          const errorJson = JSON.parse(errorText);\n          // Check for license-related errors\n          if (errorJson.message && errorJson.message.includes('license')) {\n            errorMessage = `This operation requires an n8n Enterprise license with project management features enabled. Error: ${errorJson.message}`;\n          } else {\n            errorMessage = errorJson.message || errorText;\n          }\n        } catch {\n          errorMessage = errorText;\n        }\n        throw new Error(`N8N API error: ${errorMessage}`);\n      }\n\n      // Handle 204 No Content responses\n      if (response.status === 204) {\n        return {} as T;\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Failed to connect to n8n: ${error.message}`);\n      }\n      throw error;\n    }\n  }\n\n  async listWorkflows(): Promise<N8nWorkflowList> {\n    return this.makeRequest<N8nWorkflowList>('/workflows');\n  }\n\n  async getWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`);\n  }\n\n  async createWorkflow(\n    name: string,\n    nodes: any[] = [],\n    connections: any = {}\n  ): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>('/workflows', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        nodes,\n        connections,\n        settings: {\n          saveManualExecutions: true,\n          saveExecutionProgress: true,\n        },\n      }),\n    });\n  }\n\n  async updateWorkflow(id: string, workflow: Partial<N8nWorkflow>): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(workflow),\n    });\n  }\n\n  async deleteWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async activateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/activate`, {\n      method: 'POST',\n    });\n  }\n\n  async deactivateWorkflow(id: string): Promise<N8nWorkflow> {\n    return this.makeRequest<N8nWorkflow>(`/workflows/${id}/deactivate`, {\n      method: 'POST',\n    });\n  }\n\n  // Project management methods (requires n8n Enterprise license)\n  async listProjects(): Promise<N8nProjectList> {\n    return this.makeRequest<N8nProjectList>('/projects');\n  }\n\n  async createProject(name: string): Promise<void> {\n    return this.makeRequest<void>('/projects', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteProject(projectId: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async updateProject(projectId: string, name: string): Promise<void> {\n    return this.makeRequest<void>(`/projects/${projectId}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  // User management methods\n  async listUsers(): Promise<N8nUserList> {\n    return this.makeRequest<N8nUserList>('/users');\n  }\n\n  async createUsers(\n    users: Array<{ email: string; role?: 'global:admin' | 'global:member' }>\n  ): Promise<any> {\n    return this.makeRequest('/users', {\n      method: 'POST',\n      body: JSON.stringify(users),\n    });\n  }\n\n  async getUser(idOrEmail: string): Promise<N8nUser> {\n    return this.makeRequest<N8nUser>(`/users/${idOrEmail}`);\n  }\n\n  async deleteUser(idOrEmail: string): Promise<void> {\n    return this.makeRequest<void>(`/users/${idOrEmail}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Variable management methods\n  async listVariables(): Promise<N8nVariableList> {\n    return this.makeRequest<N8nVariableList>('/variables');\n  }\n\n  async createVariable(key: string, value: string): Promise<void> {\n    return this.makeRequest<void>('/variables', {\n      method: 'POST',\n      body: JSON.stringify({ key, value }),\n    });\n  }\n\n  async deleteVariable(id: string): Promise<void> {\n    return this.makeRequest<void>(`/variables/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Execution management methods\n  async getExecutions(\n    options: {\n      includeData?: boolean;\n      status?: 'error' | 'success' | 'waiting';\n      workflowId?: string;\n      limit?: number;\n    } = {}\n  ): Promise<N8nExecutionList> {\n    const params = new URLSearchParams();\n    if (options.includeData !== undefined)\n      params.append('includeData', String(options.includeData));\n    if (options.status) params.append('status', options.status);\n    if (options.workflowId) params.append('workflowId', options.workflowId);\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nExecutionList>(`/executions?${params.toString()}`);\n  }\n\n  async getExecution(id: number, includeData: boolean = false): Promise<N8nExecution> {\n    const params = new URLSearchParams();\n    if (includeData) params.append('includeData', 'true');\n\n    return this.makeRequest<N8nExecution>(`/executions/${id}?${params.toString()}`);\n  }\n\n  async deleteExecution(id: number): Promise<N8nExecution> {\n    return this.makeRequest<N8nExecution>(`/executions/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Tag management methods\n  async createTag(name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>('/tags', {\n      method: 'POST',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async getTags(options: { limit?: number } = {}): Promise<N8nTagList> {\n    const params = new URLSearchParams();\n    if (options.limit) params.append('limit', String(options.limit));\n\n    return this.makeRequest<N8nTagList>(`/tags?${params.toString()}`);\n  }\n\n  async getTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`);\n  }\n\n  async updateTag(id: string, name: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify({ name }),\n    });\n  }\n\n  async deleteTag(id: string): Promise<N8nTag> {\n    return this.makeRequest<N8nTag>(`/tags/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getWorkflowTags(workflowId: string): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`);\n  }\n\n  async updateWorkflowTags(workflowId: string, tagIds: { id: string }[]): Promise<N8nTag[]> {\n    return this.makeRequest<N8nTag[]>(`/workflows/${workflowId}/tags`, {\n      method: 'PUT',\n      body: JSON.stringify(tagIds),\n    });\n  }\n\n  // Security audit method\n  async generateAudit(\n    options: {\n      daysAbandonedWorkflow?: number;\n      categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n    } = {}\n  ): Promise<N8nAuditResult> {\n    return this.makeRequest<N8nAuditResult>('/audit', {\n      method: 'POST',\n      body: JSON.stringify({\n        additionalOptions: {\n          daysAbandonedWorkflow: options.daysAbandonedWorkflow,\n          categories: options.categories,\n        },\n      }),\n    });\n  }\n\n  // Credential management methods\n  async createCredential(name: string, type: string, data: Record<string, any>): Promise<any> {\n    return this.makeRequest('/credentials', {\n      method: 'POST',\n      body: JSON.stringify({\n        name,\n        type,\n        data,\n      }),\n    });\n  }\n\n  async deleteCredential(id: string): Promise<any> {\n    return this.makeRequest(`/credentials/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getCredentialSchema(credentialTypeName: string): Promise<any> {\n    return this.makeRequest(`/credentials/schema/${credentialTypeName}`);\n  }\n}\n\n// Create an MCP server\nconst server = new Server(\n  {\n    name: 'n8n-integration',\n    version: '1.0.0',\n  },\n  {\n    capabilities: {\n      tools: {},\n    },\n  }\n);\n\n// Store client instances\nconst clients = new Map<string, N8nClient>();\n\n// List tools handler\nserver.setRequestHandler(ListToolsRequestSchema, async () => {\n  return {\n    tools: [\n      {\n        name: 'init-n8n',\n        description:\n          'Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            url: { type: 'string' },\n            apiKey: { type: 'string' },\n          },\n          required: ['url', 'apiKey'],\n        },\n      },\n      {\n        name: 'list-workflows',\n        description:\n          'List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-workflow',\n        description:\n          'Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-workflow',\n        description:\n          \"Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            nodes: { type: 'array' },\n            connections: { type: 'object' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'update-workflow',\n        description:\n          \"Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            workflow: {\n              type: 'object',\n              properties: {\n                name: { type: 'string' },\n                active: { type: 'boolean' },\n                nodes: { type: 'array' },\n                connections: { type: 'object' },\n                settings: { type: 'object' },\n              },\n            },\n          },\n          required: ['clientId', 'id', 'workflow'],\n        },\n      },\n      {\n        name: 'delete-workflow',\n        description:\n          'Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'activate-workflow',\n        description:\n          'Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'deactivate-workflow',\n        description:\n          'Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'list-projects',\n        description:\n          'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-project',\n        description:\n          'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'delete-project',\n        description:\n          'Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n          },\n          required: ['clientId', 'projectId'],\n        },\n      },\n      {\n        name: 'update-project',\n        description:\n          \"Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            projectId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'projectId', 'name'],\n        },\n      },\n      {\n        name: 'list-users',\n        description:\n          'Retrieve all users from your instance. Only available for the instance owner.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-users',\n        description: 'Create one or more users in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            users: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  email: { type: 'string' },\n                  role: {\n                    type: 'string',\n                    enum: ['global:admin', 'global:member'],\n                  },\n                },\n                required: ['email'],\n              },\n            },\n          },\n          required: ['clientId', 'users'],\n        },\n      },\n      {\n        name: 'get-user',\n        description: 'Get user by ID or email address.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'delete-user',\n        description: 'Delete a user from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            idOrEmail: { type: 'string' },\n          },\n          required: ['clientId', 'idOrEmail'],\n        },\n      },\n      {\n        name: 'list-variables',\n        description:\n          'List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'create-variable',\n        description:\n          'Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            key: { type: 'string' },\n            value: { type: 'string' },\n          },\n          required: ['clientId', 'key', 'value'],\n        },\n      },\n      {\n        name: 'delete-variable',\n        description:\n          'Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'create-credential',\n        description:\n          \"Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n            type: { type: 'string' },\n            data: { type: 'object' },\n          },\n          required: ['clientId', 'name', 'type', 'data'],\n        },\n      },\n      {\n        name: 'delete-credential',\n        description: 'Delete a credential by ID. You must be the owner of the credentials.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-credential-schema',\n        description:\n          \"Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            credentialTypeName: { type: 'string' },\n          },\n          required: ['clientId', 'credentialTypeName'],\n        },\n      },\n      // Execution Management Tools\n      {\n        name: 'list-executions',\n        description: 'Retrieve all executions from your instance with optional filtering.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            includeData: { type: 'boolean' },\n            status: {\n              type: 'string',\n              enum: ['error', 'success', 'waiting'],\n            },\n            workflowId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-execution',\n        description: 'Retrieve a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n            includeData: { type: 'boolean' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'delete-execution',\n        description: 'Delete a specific execution by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'number' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      // Tag Management Tools\n      {\n        name: 'create-tag',\n        description: 'Create a new tag in your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'name'],\n        },\n      },\n      {\n        name: 'list-tags',\n        description: 'Retrieve all tags from your instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            limit: { type: 'number' },\n          },\n          required: ['clientId'],\n        },\n      },\n      {\n        name: 'get-tag',\n        description: 'Retrieve a specific tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'update-tag',\n        description: \"Update a tag's name.\",\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n            name: { type: 'string' },\n          },\n          required: ['clientId', 'id', 'name'],\n        },\n      },\n      {\n        name: 'delete-tag',\n        description: 'Delete a tag by ID.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            id: { type: 'string' },\n          },\n          required: ['clientId', 'id'],\n        },\n      },\n      {\n        name: 'get-workflow-tags',\n        description: 'Get tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n          },\n          required: ['clientId', 'workflowId'],\n        },\n      },\n      {\n        name: 'update-workflow-tags',\n        description: 'Update tags associated with a workflow.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            workflowId: { type: 'string' },\n            tagIds: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  id: { type: 'string' },\n                },\n                required: ['id'],\n              },\n            },\n          },\n          required: ['clientId', 'workflowId', 'tagIds'],\n        },\n      },\n      // Security Audit Tool\n      {\n        name: 'generate-audit',\n        description: 'Generate a security audit for your n8n instance.',\n        inputSchema: {\n          type: 'object',\n          properties: {\n            clientId: { type: 'string' },\n            daysAbandonedWorkflow: { type: 'number' },\n            categories: {\n              type: 'array',\n              items: {\n                type: 'string',\n                enum: ['credentials', 'database', 'nodes', 'filesystem', 'instance'],\n              },\n            },\n          },\n          required: ['clientId'],\n        },\n      },\n    ],\n  };\n});\n\n// Tool execution handler\nserver.setRequestHandler(CallToolRequestSchema, async request => {\n  const { name, arguments: args } = request.params;\n\n  switch (name) {\n    case 'init-n8n': {\n      const { url, apiKey } = args as { url: string; apiKey: string };\n      try {\n        const client = new N8nClient(url, apiKey);\n\n        // Test connection by listing workflows\n        await client.listWorkflows();\n\n        // Generate a unique client ID\n        const clientId = Buffer.from(url).toString('base64');\n        clients.set(clientId, client);\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully connected to n8n at ${url}. Use this client ID for future operations: ${clientId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-workflows': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflows = await client.listWorkflows();\n        const formattedWorkflows = workflows.data.map(wf => ({\n          id: wf.id,\n          name: wf.name,\n          active: wf.active,\n          created: wf.createdAt,\n          updated: wf.updatedAt,\n          tags: wf.tags,\n        }));\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(formattedWorkflows, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.getWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(workflow, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow': {\n      const { clientId, id, workflow } = args as {\n        clientId: string;\n        id: string;\n        workflow: Partial<N8nWorkflow>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const updatedWorkflow = await client.updateWorkflow(id, workflow);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow:\\n${JSON.stringify(updatedWorkflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-workflow': {\n      const {\n        clientId,\n        name,\n        nodes = [],\n        connections = {},\n      } = args as {\n        clientId: string;\n        name: string;\n        nodes?: any[];\n        connections?: Record<string, any>;\n      };\n\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.createWorkflow(name, nodes, connections);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deleteWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'activate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.activateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully activated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'deactivate-workflow': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const workflow = await client.deactivateWorkflow(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deactivated workflow:\\n${JSON.stringify(workflow, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-projects': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const projects = await client.listProjects();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(projects.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-project': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createProject(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created project: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-project': {\n      const { clientId, projectId } = args as { clientId: string; projectId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteProject(projectId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted project with ID: ${projectId}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-project': {\n      const { clientId, projectId, name } = args as {\n        clientId: string;\n        projectId: string;\n        name: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.updateProject(projectId, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated project ${projectId} with new name: ${name}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-users': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const users = await client.listUsers();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(users.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-users': {\n      const { clientId, users } = args as {\n        clientId: string;\n        users: Array<{\n          email: string;\n          role?: 'global:admin' | 'global:member';\n        }>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.createUsers(users);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(result, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const user = await client.getUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(user, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-user': {\n      const { clientId, idOrEmail } = args as { clientId: string; idOrEmail: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteUser(idOrEmail);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted user: ${idOrEmail}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-variables': {\n      const { clientId } = args as { clientId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const variables = await client.listVariables();\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(variables.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-variable': {\n      const { clientId, key, value } = args as { clientId: string; key: string; value: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.createVariable(key, value);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created variable with key: ${key}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-variable': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        await client.deleteVariable(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted variable with ID: ${id}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'create-credential': {\n      const { clientId, name, type, data } = args as {\n        clientId: string;\n        name: string;\n        type: string;\n        data: Record<string, any>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const credential = await client.createCredential(name, type, data);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created credential:\\n${JSON.stringify(credential, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-credential': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const result = await client.deleteCredential(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted credential:\\n${JSON.stringify(result, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-credential-schema': {\n      const { clientId, credentialTypeName } = args as {\n        clientId: string;\n        credentialTypeName: string;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(credentialTypeName);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(schema, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Execution Management Handlers\n    case 'list-executions': {\n      const { clientId, includeData, status, workflowId, limit } = args as {\n        clientId: string;\n        includeData?: boolean;\n        status?: 'error' | 'success' | 'waiting';\n        workflowId?: string;\n        limit?: number;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const executions = await client.getExecutions({ includeData, status, workflowId, limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(executions.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-execution': {\n      const { clientId, id, includeData } = args as {\n        clientId: string;\n        id: number;\n        includeData?: boolean;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.getExecution(id, includeData);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(execution, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-execution': {\n      const { clientId, id } = args as { clientId: string; id: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const execution = await client.deleteExecution(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted execution:\\n${JSON.stringify(execution, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    // Tag Management Handlers\n    case 'create-tag': {\n      const { clientId, name } = args as { clientId: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.createTag(name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully created tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'list-tags': {\n      const { clientId, limit } = args as { clientId: string; limit?: number };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getTags({ limit });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags.data, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.getTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tag, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-tag': {\n      const { clientId, id, name } = args as { clientId: string; id: string; name: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.updateTag(id, name);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'delete-tag': {\n      const { clientId, id } = args as { clientId: string; id: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tag = await client.deleteTag(id);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully deleted tag:\\n${JSON.stringify(tag, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'get-workflow-tags': {\n      const { clientId, workflowId } = args as { clientId: string; workflowId: string };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(workflowId);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(tags, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'update-workflow-tags': {\n      const { clientId, workflowId, tagIds } = args as {\n        clientId: string;\n        workflowId: string;\n        tagIds: { id: string }[];\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const tags = await client.updateWorkflowTags(workflowId, tagIds);\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Successfully updated workflow tags:\\n${JSON.stringify(tags, null, 2)}`,\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    case 'generate-audit': {\n      const { clientId, daysAbandonedWorkflow, categories } = args as {\n        clientId: string;\n        daysAbandonedWorkflow?: number;\n        categories?: Array<'credentials' | 'database' | 'nodes' | 'filesystem' | 'instance'>;\n      };\n      const client = clients.get(clientId);\n      if (!client) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: 'Client not initialized. Please run init-n8n first.',\n            },\n          ],\n          isError: true,\n        };\n      }\n\n      try {\n        const audit = await client.generateAudit({ daysAbandonedWorkflow, categories });\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(audit, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        return {\n          content: [\n            {\n              type: 'text',\n              text: error instanceof Error ? error.message : 'Unknown error occurred',\n            },\n          ],\n          isError: true,\n        };\n      }\n    }\n\n    default:\n      return {\n        content: [\n          {\n            type: 'text',\n            text: `Unknown tool: ${name}`,\n          },\n        ],\n        isError: true,\n      };\n  }\n});\n\n// Export the server and initialization function for testing\nexport { server, clients, N8nClient };\n\n// Main function to start the server\nexport async function startServer() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error('N8N MCP Server running on stdio');\n}\n\n// Start the server only if this module is run directly\n// Note: import.meta.url check is replaced with process.argv check for Jest compatibility\nif (process.argv[1] && process.argv[1].includes('index.js') && !process.env.NODE_ENV?.includes('test')) {\n  startServer().catch((error) => {\n    console.error('Failed to start server:', error);\n    process.exit(1);\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "262282449e022f173ff591f64267b4344d7bf96f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nezf8h6vx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nezf8h6vx();
var __importDefault =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[0]++,
/* istanbul ignore next */
(cov_1nezf8h6vx().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1nezf8h6vx().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_1nezf8h6vx().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_1nezf8h6vx().f[0]++;
  cov_1nezf8h6vx().s[1]++;
  return /* istanbul ignore next */(cov_1nezf8h6vx().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_1nezf8h6vx().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1nezf8h6vx().s[3]++;
exports.N8nClient = exports.clients = exports.server = void 0;
/* istanbul ignore next */
cov_1nezf8h6vx().s[4]++;
exports.startServer = startServer;
const index_js_1 =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[5]++, require("@modelcontextprotocol/sdk/server/index.js"));
const stdio_js_1 =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[6]++, require("@modelcontextprotocol/sdk/server/stdio.js"));
const types_js_1 =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[7]++, require("@modelcontextprotocol/sdk/types.js"));
const node_fetch_1 =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[8]++, __importDefault(require("node-fetch")));
class N8nClient {
  baseUrl;
  apiKey;
  constructor(baseUrl, apiKey) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[1]++;
    cov_1nezf8h6vx().s[9]++;
    this.baseUrl = baseUrl;
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[10]++;
    this.apiKey = apiKey;
    // Remove trailing slash if present
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[11]++;
    this.baseUrl = baseUrl.replace(/\/$/, '');
    // Ensure apiKey is properly assigned for ESLint
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[12]++;
    this.apiKey = apiKey;
  }
  async makeRequest(endpoint, options =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[2]++;
    const url =
    /* istanbul ignore next */
    (cov_1nezf8h6vx().s[13]++, `${this.baseUrl}/api/v1${endpoint}`);
    const headers =
    /* istanbul ignore next */
    (cov_1nezf8h6vx().s[14]++, {
      'X-N8N-API-KEY': this.apiKey,
      Accept: 'application/json',
      'Content-Type': 'application/json'
    });
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[15]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_1nezf8h6vx().s[16]++, await (0, node_fetch_1.default)(url, {
        ...options,
        headers: {
          ...headers,
          ...options.headers
        }
      }));
      /* istanbul ignore next */
      cov_1nezf8h6vx().s[17]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_1nezf8h6vx().b[4][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[18]++, await response.text());
        let errorMessage;
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[19]++;
        try {
          const errorJson =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[20]++, JSON.parse(errorText));
          // Check for license-related errors
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[21]++;
          if (
          /* istanbul ignore next */
          (cov_1nezf8h6vx().b[6][0]++, errorJson.message) &&
          /* istanbul ignore next */
          (cov_1nezf8h6vx().b[6][1]++, errorJson.message.includes('license'))) {
            /* istanbul ignore next */
            cov_1nezf8h6vx().b[5][0]++;
            cov_1nezf8h6vx().s[22]++;
            errorMessage = `This operation requires an n8n Enterprise license with project management features enabled. Error: ${errorJson.message}`;
          } else {
            /* istanbul ignore next */
            cov_1nezf8h6vx().b[5][1]++;
            cov_1nezf8h6vx().s[23]++;
            errorMessage =
            /* istanbul ignore next */
            (cov_1nezf8h6vx().b[7][0]++, errorJson.message) ||
            /* istanbul ignore next */
            (cov_1nezf8h6vx().b[7][1]++, errorText);
          }
        } catch {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[24]++;
          errorMessage = errorText;
        }
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[25]++;
        throw new Error(`N8N API error: ${errorMessage}`);
      } else
      /* istanbul ignore next */
      {
        cov_1nezf8h6vx().b[4][1]++;
      }
      // Handle 204 No Content responses
      cov_1nezf8h6vx().s[26]++;
      if (response.status === 204) {
        /* istanbul ignore next */
        cov_1nezf8h6vx().b[8][0]++;
        cov_1nezf8h6vx().s[27]++;
        return {};
      } else
      /* istanbul ignore next */
      {
        cov_1nezf8h6vx().b[8][1]++;
      }
      cov_1nezf8h6vx().s[28]++;
      return await response.json();
    } catch (error) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().s[29]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_1nezf8h6vx().b[9][0]++;
        cov_1nezf8h6vx().s[30]++;
        throw new Error(`Failed to connect to n8n: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_1nezf8h6vx().b[9][1]++;
      }
      cov_1nezf8h6vx().s[31]++;
      throw error;
    }
  }
  async listWorkflows() {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[3]++;
    cov_1nezf8h6vx().s[32]++;
    return this.makeRequest('/workflows');
  }
  async getWorkflow(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[4]++;
    cov_1nezf8h6vx().s[33]++;
    return this.makeRequest(`/workflows/${id}`);
  }
  async createWorkflow(name, nodes =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[10][0]++, []), connections =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[11][0]++, {})) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[5]++;
    cov_1nezf8h6vx().s[34]++;
    return this.makeRequest('/workflows', {
      method: 'POST',
      body: JSON.stringify({
        name,
        nodes,
        connections,
        settings: {
          saveManualExecutions: true,
          saveExecutionProgress: true
        }
      })
    });
  }
  async updateWorkflow(id, workflow) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[6]++;
    cov_1nezf8h6vx().s[35]++;
    return this.makeRequest(`/workflows/${id}`, {
      method: 'PUT',
      body: JSON.stringify(workflow)
    });
  }
  async deleteWorkflow(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[7]++;
    cov_1nezf8h6vx().s[36]++;
    return this.makeRequest(`/workflows/${id}`, {
      method: 'DELETE'
    });
  }
  async activateWorkflow(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[8]++;
    cov_1nezf8h6vx().s[37]++;
    return this.makeRequest(`/workflows/${id}/activate`, {
      method: 'POST'
    });
  }
  async deactivateWorkflow(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[9]++;
    cov_1nezf8h6vx().s[38]++;
    return this.makeRequest(`/workflows/${id}/deactivate`, {
      method: 'POST'
    });
  }
  // Project management methods (requires n8n Enterprise license)
  async listProjects() {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[10]++;
    cov_1nezf8h6vx().s[39]++;
    return this.makeRequest('/projects');
  }
  async createProject(name) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[11]++;
    cov_1nezf8h6vx().s[40]++;
    return this.makeRequest('/projects', {
      method: 'POST',
      body: JSON.stringify({
        name
      })
    });
  }
  async deleteProject(projectId) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[12]++;
    cov_1nezf8h6vx().s[41]++;
    return this.makeRequest(`/projects/${projectId}`, {
      method: 'DELETE'
    });
  }
  async updateProject(projectId, name) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[13]++;
    cov_1nezf8h6vx().s[42]++;
    return this.makeRequest(`/projects/${projectId}`, {
      method: 'PUT',
      body: JSON.stringify({
        name
      })
    });
  }
  // User management methods
  async listUsers() {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[14]++;
    cov_1nezf8h6vx().s[43]++;
    return this.makeRequest('/users');
  }
  async createUsers(users) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[15]++;
    cov_1nezf8h6vx().s[44]++;
    return this.makeRequest('/users', {
      method: 'POST',
      body: JSON.stringify(users)
    });
  }
  async getUser(idOrEmail) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[16]++;
    cov_1nezf8h6vx().s[45]++;
    return this.makeRequest(`/users/${idOrEmail}`);
  }
  async deleteUser(idOrEmail) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[17]++;
    cov_1nezf8h6vx().s[46]++;
    return this.makeRequest(`/users/${idOrEmail}`, {
      method: 'DELETE'
    });
  }
  // Variable management methods
  async listVariables() {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[18]++;
    cov_1nezf8h6vx().s[47]++;
    return this.makeRequest('/variables');
  }
  async createVariable(key, value) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[19]++;
    cov_1nezf8h6vx().s[48]++;
    return this.makeRequest('/variables', {
      method: 'POST',
      body: JSON.stringify({
        key,
        value
      })
    });
  }
  async deleteVariable(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[20]++;
    cov_1nezf8h6vx().s[49]++;
    return this.makeRequest(`/variables/${id}`, {
      method: 'DELETE'
    });
  }
  // Execution management methods
  async getExecutions(options =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[12][0]++, {})) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[21]++;
    const params =
    /* istanbul ignore next */
    (cov_1nezf8h6vx().s[50]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[51]++;
    if (options.includeData !== undefined) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[13][0]++;
      cov_1nezf8h6vx().s[52]++;
      params.append('includeData', String(options.includeData));
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[13][1]++;
    }
    cov_1nezf8h6vx().s[53]++;
    if (options.status) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[14][0]++;
      cov_1nezf8h6vx().s[54]++;
      params.append('status', options.status);
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[14][1]++;
    }
    cov_1nezf8h6vx().s[55]++;
    if (options.workflowId) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[15][0]++;
      cov_1nezf8h6vx().s[56]++;
      params.append('workflowId', options.workflowId);
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[15][1]++;
    }
    cov_1nezf8h6vx().s[57]++;
    if (options.limit) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[16][0]++;
      cov_1nezf8h6vx().s[58]++;
      params.append('limit', String(options.limit));
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[16][1]++;
    }
    cov_1nezf8h6vx().s[59]++;
    return this.makeRequest(`/executions?${params.toString()}`);
  }
  async getExecution(id, includeData =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[17][0]++, false)) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[22]++;
    const params =
    /* istanbul ignore next */
    (cov_1nezf8h6vx().s[60]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[61]++;
    if (includeData) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[18][0]++;
      cov_1nezf8h6vx().s[62]++;
      params.append('includeData', 'true');
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[18][1]++;
    }
    cov_1nezf8h6vx().s[63]++;
    return this.makeRequest(`/executions/${id}?${params.toString()}`);
  }
  async deleteExecution(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[23]++;
    cov_1nezf8h6vx().s[64]++;
    return this.makeRequest(`/executions/${id}`, {
      method: 'DELETE'
    });
  }
  // Tag management methods
  async createTag(name) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[24]++;
    cov_1nezf8h6vx().s[65]++;
    return this.makeRequest('/tags', {
      method: 'POST',
      body: JSON.stringify({
        name
      })
    });
  }
  async getTags(options =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[19][0]++, {})) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[25]++;
    const params =
    /* istanbul ignore next */
    (cov_1nezf8h6vx().s[66]++, new URLSearchParams());
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[67]++;
    if (options.limit) {
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[20][0]++;
      cov_1nezf8h6vx().s[68]++;
      params.append('limit', String(options.limit));
    } else
    /* istanbul ignore next */
    {
      cov_1nezf8h6vx().b[20][1]++;
    }
    cov_1nezf8h6vx().s[69]++;
    return this.makeRequest(`/tags?${params.toString()}`);
  }
  async getTag(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[26]++;
    cov_1nezf8h6vx().s[70]++;
    return this.makeRequest(`/tags/${id}`);
  }
  async updateTag(id, name) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[27]++;
    cov_1nezf8h6vx().s[71]++;
    return this.makeRequest(`/tags/${id}`, {
      method: 'PUT',
      body: JSON.stringify({
        name
      })
    });
  }
  async deleteTag(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[28]++;
    cov_1nezf8h6vx().s[72]++;
    return this.makeRequest(`/tags/${id}`, {
      method: 'DELETE'
    });
  }
  async getWorkflowTags(workflowId) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[29]++;
    cov_1nezf8h6vx().s[73]++;
    return this.makeRequest(`/workflows/${workflowId}/tags`);
  }
  async updateWorkflowTags(workflowId, tagIds) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[30]++;
    cov_1nezf8h6vx().s[74]++;
    return this.makeRequest(`/workflows/${workflowId}/tags`, {
      method: 'PUT',
      body: JSON.stringify(tagIds)
    });
  }
  // Security audit method
  async generateAudit(options =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().b[21][0]++, {})) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[31]++;
    cov_1nezf8h6vx().s[75]++;
    return this.makeRequest('/audit', {
      method: 'POST',
      body: JSON.stringify({
        additionalOptions: {
          daysAbandonedWorkflow: options.daysAbandonedWorkflow,
          categories: options.categories
        }
      })
    });
  }
  // Credential management methods
  async createCredential(name, type, data) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[32]++;
    cov_1nezf8h6vx().s[76]++;
    return this.makeRequest('/credentials', {
      method: 'POST',
      body: JSON.stringify({
        name,
        type,
        data
      })
    });
  }
  async deleteCredential(id) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[33]++;
    cov_1nezf8h6vx().s[77]++;
    return this.makeRequest(`/credentials/${id}`, {
      method: 'DELETE'
    });
  }
  async getCredentialSchema(credentialTypeName) {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[34]++;
    cov_1nezf8h6vx().s[78]++;
    return this.makeRequest(`/credentials/schema/${credentialTypeName}`);
  }
}
/* istanbul ignore next */
cov_1nezf8h6vx().s[79]++;
exports.N8nClient = N8nClient;
// Create an MCP server
const server =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[80]++, new index_js_1.Server({
  name: 'n8n-integration',
  version: '1.0.0'
}, {
  capabilities: {
    tools: {}
  }
}));
/* istanbul ignore next */
cov_1nezf8h6vx().s[81]++;
exports.server = server;
// Store client instances
const clients =
/* istanbul ignore next */
(cov_1nezf8h6vx().s[82]++, new Map());
/* istanbul ignore next */
cov_1nezf8h6vx().s[83]++;
exports.clients = clients;
// List tools handler
/* istanbul ignore next */
cov_1nezf8h6vx().s[84]++;
server.setRequestHandler(types_js_1.ListToolsRequestSchema, async () => {
  /* istanbul ignore next */
  cov_1nezf8h6vx().f[35]++;
  cov_1nezf8h6vx().s[85]++;
  return {
    tools: [{
      name: 'init-n8n',
      description: 'Initialize connection to n8n instance. Use this tool whenever an n8n URL and API key are shared to establish the connection. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          url: {
            type: 'string'
          },
          apiKey: {
            type: 'string'
          }
        },
        required: ['url', 'apiKey']
      }
    }, {
      name: 'list-workflows',
      description: 'List all workflows from n8n. Use after init-n8n to see available workflows. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'get-workflow',
      description: 'Retrieve a workflow by ID. Use after list-workflows to get detailed information about a specific workflow. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'create-workflow',
      description: "Create a new workflow in n8n. Use to set up a new workflow with optional nodes and connections. IMPORTANT: 1) Arguments must be provided as compact, single-line JSON without whitespace or newlines. 2) Must provide full workflow structure including nodes and connections arrays, even if empty. The 'active' property should not be included as it is read-only.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          name: {
            type: 'string'
          },
          nodes: {
            type: 'array'
          },
          connections: {
            type: 'object'
          }
        },
        required: ['clientId', 'name']
      }
    }, {
      name: 'update-workflow',
      description: "Update an existing workflow in n8n. Use after get-workflow to modify a workflow's properties, nodes, or connections. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          },
          workflow: {
            type: 'object',
            properties: {
              name: {
                type: 'string'
              },
              active: {
                type: 'boolean'
              },
              nodes: {
                type: 'array'
              },
              connections: {
                type: 'object'
              },
              settings: {
                type: 'object'
              }
            }
          }
        },
        required: ['clientId', 'id', 'workflow']
      }
    }, {
      name: 'delete-workflow',
      description: 'Delete a workflow by ID. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'activate-workflow',
      description: 'Activate a workflow by ID. This will enable the workflow to run. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'deactivate-workflow',
      description: 'Deactivate a workflow by ID. This will prevent the workflow from running. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'list-projects',
      description: 'List all projects from n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'create-project',
      description: 'Create a new project in n8n. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          name: {
            type: 'string'
          }
        },
        required: ['clientId', 'name']
      }
    }, {
      name: 'delete-project',
      description: 'Delete a project by ID. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          projectId: {
            type: 'string'
          }
        },
        required: ['clientId', 'projectId']
      }
    }, {
      name: 'update-project',
      description: "Update a project's name. NOTE: Requires n8n Enterprise license with project management features enabled. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          projectId: {
            type: 'string'
          },
          name: {
            type: 'string'
          }
        },
        required: ['clientId', 'projectId', 'name']
      }
    }, {
      name: 'list-users',
      description: 'Retrieve all users from your instance. Only available for the instance owner.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'create-users',
      description: 'Create one or more users in your instance.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          users: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                email: {
                  type: 'string'
                },
                role: {
                  type: 'string',
                  enum: ['global:admin', 'global:member']
                }
              },
              required: ['email']
            }
          }
        },
        required: ['clientId', 'users']
      }
    }, {
      name: 'get-user',
      description: 'Get user by ID or email address.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          idOrEmail: {
            type: 'string'
          }
        },
        required: ['clientId', 'idOrEmail']
      }
    }, {
      name: 'delete-user',
      description: 'Delete a user from your instance.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          idOrEmail: {
            type: 'string'
          }
        },
        required: ['clientId', 'idOrEmail']
      }
    }, {
      name: 'list-variables',
      description: 'List all variables from n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after init-n8n to see available variables. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'create-variable',
      description: 'Create a new variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled. Variables can be used across workflows to store and share data. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          key: {
            type: 'string'
          },
          value: {
            type: 'string'
          }
        },
        required: ['clientId', 'key', 'value']
      }
    }, {
      name: 'delete-variable',
      description: 'Delete a variable by ID. NOTE: Requires n8n Enterprise license with variable management features enabled. Use after list-variables to get the ID of the variable to delete. This action cannot be undone. IMPORTANT: Arguments must be provided as compact, single-line JSON without whitespace or newlines.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'create-credential',
      description: "Create a credential that can be used by nodes of the specified type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). Use get-credential-schema first to see what fields are required for the credential type you want to create.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          name: {
            type: 'string'
          },
          type: {
            type: 'string'
          },
          data: {
            type: 'object'
          }
        },
        required: ['clientId', 'name', 'type', 'data']
      }
    }, {
      name: 'delete-credential',
      description: 'Delete a credential by ID. You must be the owner of the credentials.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'get-credential-schema',
      description: "Show credential data schema for a specific credential type. The credential type name can be found in the n8n UI when creating credentials (e.g., 'cloudflareApi', 'githubApi', 'slackOAuth2Api'). This will show you what fields are required for creating credentials of this type.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          credentialTypeName: {
            type: 'string'
          }
        },
        required: ['clientId', 'credentialTypeName']
      }
    },
    // Execution Management Tools
    {
      name: 'list-executions',
      description: 'Retrieve all executions from your instance with optional filtering.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          includeData: {
            type: 'boolean'
          },
          status: {
            type: 'string',
            enum: ['error', 'success', 'waiting']
          },
          workflowId: {
            type: 'string'
          },
          limit: {
            type: 'number'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'get-execution',
      description: 'Retrieve a specific execution by ID.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'number'
          },
          includeData: {
            type: 'boolean'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'delete-execution',
      description: 'Delete a specific execution by ID.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'number'
          }
        },
        required: ['clientId', 'id']
      }
    },
    // Tag Management Tools
    {
      name: 'create-tag',
      description: 'Create a new tag in your instance.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          name: {
            type: 'string'
          }
        },
        required: ['clientId', 'name']
      }
    }, {
      name: 'list-tags',
      description: 'Retrieve all tags from your instance.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          limit: {
            type: 'number'
          }
        },
        required: ['clientId']
      }
    }, {
      name: 'get-tag',
      description: 'Retrieve a specific tag by ID.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'update-tag',
      description: "Update a tag's name.",
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          },
          name: {
            type: 'string'
          }
        },
        required: ['clientId', 'id', 'name']
      }
    }, {
      name: 'delete-tag',
      description: 'Delete a tag by ID.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          id: {
            type: 'string'
          }
        },
        required: ['clientId', 'id']
      }
    }, {
      name: 'get-workflow-tags',
      description: 'Get tags associated with a workflow.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          workflowId: {
            type: 'string'
          }
        },
        required: ['clientId', 'workflowId']
      }
    }, {
      name: 'update-workflow-tags',
      description: 'Update tags associated with a workflow.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          workflowId: {
            type: 'string'
          },
          tagIds: {
            type: 'array',
            items: {
              type: 'object',
              properties: {
                id: {
                  type: 'string'
                }
              },
              required: ['id']
            }
          }
        },
        required: ['clientId', 'workflowId', 'tagIds']
      }
    },
    // Security Audit Tool
    {
      name: 'generate-audit',
      description: 'Generate a security audit for your n8n instance.',
      inputSchema: {
        type: 'object',
        properties: {
          clientId: {
            type: 'string'
          },
          daysAbandonedWorkflow: {
            type: 'number'
          },
          categories: {
            type: 'array',
            items: {
              type: 'string',
              enum: ['credentials', 'database', 'nodes', 'filesystem', 'instance']
            }
          }
        },
        required: ['clientId']
      }
    }]
  };
});
// Tool execution handler
/* istanbul ignore next */
cov_1nezf8h6vx().s[86]++;
server.setRequestHandler(types_js_1.CallToolRequestSchema, async request => {
  /* istanbul ignore next */
  cov_1nezf8h6vx().f[36]++;
  const {
    name,
    arguments: args
  } =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().s[87]++, request.params);
  /* istanbul ignore next */
  cov_1nezf8h6vx().s[88]++;
  switch (name) {
    case 'init-n8n':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][0]++;
      {
        const {
          url,
          apiKey
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[89]++, args);
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[90]++;
        try {
          const client =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[91]++, new N8nClient(url, apiKey));
          // Test connection by listing workflows
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[92]++;
          await client.listWorkflows();
          // Generate a unique client ID
          const clientId =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[93]++, Buffer.from(url).toString('base64'));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[94]++;
          clients.set(clientId, client);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[95]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully connected to n8n at ${url}. Use this client ID for future operations: ${clientId}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[96]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[23][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[23][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'list-workflows':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][1]++;
      {
        const {
          clientId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[97]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[98]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[99]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[24][0]++;
          cov_1nezf8h6vx().s[100]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[24][1]++;
        }
        cov_1nezf8h6vx().s[101]++;
        try {
          const workflows =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[102]++, await client.listWorkflows());
          const formattedWorkflows =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[103]++, workflows.data.map(wf => {
            /* istanbul ignore next */
            cov_1nezf8h6vx().f[37]++;
            cov_1nezf8h6vx().s[104]++;
            return {
              id: wf.id,
              name: wf.name,
              active: wf.active,
              created: wf.createdAt,
              updated: wf.updatedAt,
              tags: wf.tags
            };
          }));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[105]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(formattedWorkflows, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[106]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[25][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[25][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][2]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[107]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[108]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[109]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[26][0]++;
          cov_1nezf8h6vx().s[110]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[26][1]++;
        }
        cov_1nezf8h6vx().s[111]++;
        try {
          const workflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[112]++, await client.getWorkflow(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[113]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(workflow, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[114]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[27][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[27][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'update-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][3]++;
      {
        const {
          clientId,
          id,
          workflow
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[115]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[116]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[117]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[28][0]++;
          cov_1nezf8h6vx().s[118]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[28][1]++;
        }
        cov_1nezf8h6vx().s[119]++;
        try {
          const updatedWorkflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[120]++, await client.updateWorkflow(id, workflow));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[121]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully updated workflow:\n${JSON.stringify(updatedWorkflow, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[122]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[29][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[29][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'create-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][4]++;
      {
        const {
          clientId,
          name,
          nodes =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().b[30][0]++, []),
          connections =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().b[31][0]++, {})
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[123]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[124]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[125]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[32][0]++;
          cov_1nezf8h6vx().s[126]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[32][1]++;
        }
        cov_1nezf8h6vx().s[127]++;
        try {
          const workflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[128]++, await client.createWorkflow(name, nodes, connections));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[129]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully created workflow:\n${JSON.stringify(workflow, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[130]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[33][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[33][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][5]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[131]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[132]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[133]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[34][0]++;
          cov_1nezf8h6vx().s[134]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[34][1]++;
        }
        cov_1nezf8h6vx().s[135]++;
        try {
          const workflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[136]++, await client.deleteWorkflow(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[137]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted workflow:\n${JSON.stringify(workflow, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[138]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[35][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[35][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'activate-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][6]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[139]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[140]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[141]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[36][0]++;
          cov_1nezf8h6vx().s[142]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[36][1]++;
        }
        cov_1nezf8h6vx().s[143]++;
        try {
          const workflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[144]++, await client.activateWorkflow(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[145]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully activated workflow:\n${JSON.stringify(workflow, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[146]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[37][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[37][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'deactivate-workflow':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][7]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[147]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[148]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[149]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[38][0]++;
          cov_1nezf8h6vx().s[150]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[38][1]++;
        }
        cov_1nezf8h6vx().s[151]++;
        try {
          const workflow =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[152]++, await client.deactivateWorkflow(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[153]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deactivated workflow:\n${JSON.stringify(workflow, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[154]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[39][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[39][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'list-projects':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][8]++;
      {
        const {
          clientId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[155]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[156]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[157]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[40][0]++;
          cov_1nezf8h6vx().s[158]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[40][1]++;
        }
        cov_1nezf8h6vx().s[159]++;
        try {
          const projects =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[160]++, await client.listProjects());
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[161]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(projects.data, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[162]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[41][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[41][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'create-project':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][9]++;
      {
        const {
          clientId,
          name
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[163]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[164]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[165]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[42][0]++;
          cov_1nezf8h6vx().s[166]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[42][1]++;
        }
        cov_1nezf8h6vx().s[167]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[168]++;
          await client.createProject(name);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[169]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully created project: ${name}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[170]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[43][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[43][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-project':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][10]++;
      {
        const {
          clientId,
          projectId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[171]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[172]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[173]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[44][0]++;
          cov_1nezf8h6vx().s[174]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[44][1]++;
        }
        cov_1nezf8h6vx().s[175]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[176]++;
          await client.deleteProject(projectId);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[177]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted project with ID: ${projectId}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[178]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[45][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[45][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'update-project':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][11]++;
      {
        const {
          clientId,
          projectId,
          name
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[179]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[180]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[181]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[46][0]++;
          cov_1nezf8h6vx().s[182]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[46][1]++;
        }
        cov_1nezf8h6vx().s[183]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[184]++;
          await client.updateProject(projectId, name);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[185]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully updated project ${projectId} with new name: ${name}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[186]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[47][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[47][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'list-users':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][12]++;
      {
        const {
          clientId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[187]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[188]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[189]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[48][0]++;
          cov_1nezf8h6vx().s[190]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[48][1]++;
        }
        cov_1nezf8h6vx().s[191]++;
        try {
          const users =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[192]++, await client.listUsers());
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[193]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(users.data, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[194]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[49][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[49][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'create-users':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][13]++;
      {
        const {
          clientId,
          users
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[195]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[196]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[197]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[50][0]++;
          cov_1nezf8h6vx().s[198]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[50][1]++;
        }
        cov_1nezf8h6vx().s[199]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[200]++, await client.createUsers(users));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[201]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(result, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[202]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[51][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[51][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-user':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][14]++;
      {
        const {
          clientId,
          idOrEmail
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[203]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[204]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[205]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[52][0]++;
          cov_1nezf8h6vx().s[206]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[52][1]++;
        }
        cov_1nezf8h6vx().s[207]++;
        try {
          const user =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[208]++, await client.getUser(idOrEmail));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[209]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(user, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[210]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[53][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[53][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-user':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][15]++;
      {
        const {
          clientId,
          idOrEmail
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[211]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[212]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[213]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[54][0]++;
          cov_1nezf8h6vx().s[214]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[54][1]++;
        }
        cov_1nezf8h6vx().s[215]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[216]++;
          await client.deleteUser(idOrEmail);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[217]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted user: ${idOrEmail}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[218]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[55][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[55][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'list-variables':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][16]++;
      {
        const {
          clientId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[219]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[220]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[221]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[56][0]++;
          cov_1nezf8h6vx().s[222]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[56][1]++;
        }
        cov_1nezf8h6vx().s[223]++;
        try {
          const variables =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[224]++, await client.listVariables());
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[225]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(variables.data, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[226]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[57][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[57][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'create-variable':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][17]++;
      {
        const {
          clientId,
          key,
          value
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[227]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[228]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[229]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[58][0]++;
          cov_1nezf8h6vx().s[230]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[58][1]++;
        }
        cov_1nezf8h6vx().s[231]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[232]++;
          await client.createVariable(key, value);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[233]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully created variable with key: ${key}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[234]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[59][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[59][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-variable':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][18]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[235]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[236]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[237]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[60][0]++;
          cov_1nezf8h6vx().s[238]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[60][1]++;
        }
        cov_1nezf8h6vx().s[239]++;
        try {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[240]++;
          await client.deleteVariable(id);
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[241]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted variable with ID: ${id}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[242]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[61][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[61][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'create-credential':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][19]++;
      {
        const {
          clientId,
          name,
          type,
          data
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[243]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[244]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[245]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[62][0]++;
          cov_1nezf8h6vx().s[246]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[62][1]++;
        }
        cov_1nezf8h6vx().s[247]++;
        try {
          const credential =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[248]++, await client.createCredential(name, type, data));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[249]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully created credential:\n${JSON.stringify(credential, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[250]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[63][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[63][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-credential':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][20]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[251]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[252]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[253]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[64][0]++;
          cov_1nezf8h6vx().s[254]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[64][1]++;
        }
        cov_1nezf8h6vx().s[255]++;
        try {
          const result =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[256]++, await client.deleteCredential(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[257]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted credential:\n${JSON.stringify(result, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[258]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[65][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[65][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-credential-schema':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][21]++;
      {
        const {
          clientId,
          credentialTypeName
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[259]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[260]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[261]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[66][0]++;
          cov_1nezf8h6vx().s[262]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[66][1]++;
        }
        cov_1nezf8h6vx().s[263]++;
        try {
          const schema =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[264]++, await client.getCredentialSchema(credentialTypeName));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[265]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(schema, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[266]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[67][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[67][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    // Execution Management Handlers
    case 'list-executions':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][22]++;
      {
        const {
          clientId,
          includeData,
          status,
          workflowId,
          limit
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[267]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[268]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[269]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[68][0]++;
          cov_1nezf8h6vx().s[270]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[68][1]++;
        }
        cov_1nezf8h6vx().s[271]++;
        try {
          const executions =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[272]++, await client.getExecutions({
            includeData,
            status,
            workflowId,
            limit
          }));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[273]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(executions.data, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[274]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[69][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[69][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-execution':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][23]++;
      {
        const {
          clientId,
          id,
          includeData
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[275]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[276]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[277]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[70][0]++;
          cov_1nezf8h6vx().s[278]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[70][1]++;
        }
        cov_1nezf8h6vx().s[279]++;
        try {
          const execution =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[280]++, await client.getExecution(id, includeData));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[281]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(execution, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[282]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[71][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[71][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-execution':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][24]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[283]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[284]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[285]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[72][0]++;
          cov_1nezf8h6vx().s[286]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[72][1]++;
        }
        cov_1nezf8h6vx().s[287]++;
        try {
          const execution =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[288]++, await client.deleteExecution(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[289]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted execution:\n${JSON.stringify(execution, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[290]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[73][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[73][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    // Tag Management Handlers
    case 'create-tag':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][25]++;
      {
        const {
          clientId,
          name
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[291]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[292]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[293]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[74][0]++;
          cov_1nezf8h6vx().s[294]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[74][1]++;
        }
        cov_1nezf8h6vx().s[295]++;
        try {
          const tag =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[296]++, await client.createTag(name));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[297]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully created tag:\n${JSON.stringify(tag, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[298]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[75][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[75][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'list-tags':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][26]++;
      {
        const {
          clientId,
          limit
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[299]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[300]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[301]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[76][0]++;
          cov_1nezf8h6vx().s[302]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[76][1]++;
        }
        cov_1nezf8h6vx().s[303]++;
        try {
          const tags =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[304]++, await client.getTags({
            limit
          }));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[305]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(tags.data, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[306]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[77][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[77][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-tag':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][27]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[307]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[308]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[309]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[78][0]++;
          cov_1nezf8h6vx().s[310]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[78][1]++;
        }
        cov_1nezf8h6vx().s[311]++;
        try {
          const tag =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[312]++, await client.getTag(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[313]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(tag, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[314]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[79][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[79][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'update-tag':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][28]++;
      {
        const {
          clientId,
          id,
          name
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[315]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[316]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[317]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[80][0]++;
          cov_1nezf8h6vx().s[318]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[80][1]++;
        }
        cov_1nezf8h6vx().s[319]++;
        try {
          const tag =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[320]++, await client.updateTag(id, name));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[321]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully updated tag:\n${JSON.stringify(tag, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[322]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[81][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[81][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'delete-tag':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][29]++;
      {
        const {
          clientId,
          id
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[323]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[324]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[325]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[82][0]++;
          cov_1nezf8h6vx().s[326]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[82][1]++;
        }
        cov_1nezf8h6vx().s[327]++;
        try {
          const tag =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[328]++, await client.deleteTag(id));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[329]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully deleted tag:\n${JSON.stringify(tag, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[330]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[83][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[83][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'get-workflow-tags':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][30]++;
      {
        const {
          clientId,
          workflowId
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[331]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[332]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[333]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[84][0]++;
          cov_1nezf8h6vx().s[334]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[84][1]++;
        }
        cov_1nezf8h6vx().s[335]++;
        try {
          const tags =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[336]++, await client.getWorkflowTags(workflowId));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[337]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(tags, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[338]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[85][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[85][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'update-workflow-tags':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][31]++;
      {
        const {
          clientId,
          workflowId,
          tagIds
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[339]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[340]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[341]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[86][0]++;
          cov_1nezf8h6vx().s[342]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[86][1]++;
        }
        cov_1nezf8h6vx().s[343]++;
        try {
          const tags =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[344]++, await client.updateWorkflowTags(workflowId, tagIds));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[345]++;
          return {
            content: [{
              type: 'text',
              text: `Successfully updated workflow tags:\n${JSON.stringify(tags, null, 2)}`
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[346]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[87][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[87][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    case 'generate-audit':
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][32]++;
      {
        const {
          clientId,
          daysAbandonedWorkflow,
          categories
        } =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[347]++, args);
        const client =
        /* istanbul ignore next */
        (cov_1nezf8h6vx().s[348]++, clients.get(clientId));
        /* istanbul ignore next */
        cov_1nezf8h6vx().s[349]++;
        if (!client) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().b[88][0]++;
          cov_1nezf8h6vx().s[350]++;
          return {
            content: [{
              type: 'text',
              text: 'Client not initialized. Please run init-n8n first.'
            }],
            isError: true
          };
        } else
        /* istanbul ignore next */
        {
          cov_1nezf8h6vx().b[88][1]++;
        }
        cov_1nezf8h6vx().s[351]++;
        try {
          const audit =
          /* istanbul ignore next */
          (cov_1nezf8h6vx().s[352]++, await client.generateAudit({
            daysAbandonedWorkflow,
            categories
          }));
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[353]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(audit, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1nezf8h6vx().s[354]++;
          return {
            content: [{
              type: 'text',
              text: error instanceof Error ?
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[89][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1nezf8h6vx().b[89][1]++, 'Unknown error occurred')
            }],
            isError: true
          };
        }
      }
    default:
      /* istanbul ignore next */
      cov_1nezf8h6vx().b[22][33]++;
      cov_1nezf8h6vx().s[355]++;
      return {
        content: [{
          type: 'text',
          text: `Unknown tool: ${name}`
        }],
        isError: true
      };
  }
});
// Main function to start the server
async function startServer() {
  /* istanbul ignore next */
  cov_1nezf8h6vx().f[38]++;
  const transport =
  /* istanbul ignore next */
  (cov_1nezf8h6vx().s[356]++, new stdio_js_1.StdioServerTransport());
  /* istanbul ignore next */
  cov_1nezf8h6vx().s[357]++;
  await server.connect(transport);
  /* istanbul ignore next */
  cov_1nezf8h6vx().s[358]++;
  console.error('N8N MCP Server running on stdio');
}
// Start the server only if this module is run directly
// Note: import.meta.url check is replaced with process.argv check for Jest compatibility
/* istanbul ignore next */
cov_1nezf8h6vx().s[359]++;
if (
/* istanbul ignore next */
(cov_1nezf8h6vx().b[91][0]++, process.argv[1]) &&
/* istanbul ignore next */
(cov_1nezf8h6vx().b[91][1]++, process.argv[1].includes('index.js')) &&
/* istanbul ignore next */
(cov_1nezf8h6vx().b[91][2]++, !process.env.NODE_ENV?.includes('test'))) {
  /* istanbul ignore next */
  cov_1nezf8h6vx().b[90][0]++;
  cov_1nezf8h6vx().s[360]++;
  startServer().catch(error => {
    /* istanbul ignore next */
    cov_1nezf8h6vx().f[39]++;
    cov_1nezf8h6vx().s[361]++;
    console.error('Failed to start server:', error);
    /* istanbul ignore next */
    cov_1nezf8h6vx().s[362]++;
    process.exit(1);
  });
} else
/* istanbul ignore next */
{
  cov_1nezf8h6vx().b[90][1]++;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,