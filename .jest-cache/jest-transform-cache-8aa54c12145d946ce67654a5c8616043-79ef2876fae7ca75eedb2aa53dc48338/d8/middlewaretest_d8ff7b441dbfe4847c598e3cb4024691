197037781fccbcfe1cc53395a2af7468
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock FastMCP
globals_1.jest.mock('fastmcp');
const middleware_1 = require("../../../src/auth/middleware");
// Mock AuthProvider for testing
class MockAuthProvider {
    shouldAuthenticate;
    mockUser;
    allowedTools;
    allowedResources;
    constructor(shouldAuthenticate = true, mockUser = null, allowedTools = [], allowedResources = []) {
        this.shouldAuthenticate = shouldAuthenticate;
        this.mockUser = mockUser || {
            id: 'test-user',
            name: 'Test User',
            email: 'test@example.com',
            roles: ['member'],
            permissions: {
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            },
        };
        this.allowedTools = new Set(allowedTools);
        this.allowedResources = new Set(allowedResources);
    }
    async authenticate(context) {
        if (!this.shouldAuthenticate) {
            return {
                success: false,
                error: 'Authentication failed',
            };
        }
        return {
            success: true,
            user: this.mockUser || undefined,
            context: {
                authType: 'mock',
            },
        };
    }
    async canAccessTool(toolName, context) {
        return this.allowedTools.has(toolName) || this.allowedTools.has('*');
    }
    async canAccessResource(resourceUri, context) {
        return this.allowedResources.has(resourceUri) || this.allowedResources.has('*');
    }
    async refresh(context) {
        return this.authenticate(context);
    }
}
(0, globals_1.describe)('FastMCPAuthMiddleware', () => {
    let mockAuthProvider;
    let mockServer;
    let middleware;
    (0, globals_1.beforeEach)(() => {
        mockAuthProvider = new MockAuthProvider(true, null, ['*'], ['*']);
        mockServer = {
            addTool: globals_1.jest.fn(),
            // Add other FastMCP methods as needed
        };
        middleware = new middleware_1.FastMCPAuthMiddleware({
            authProvider: mockAuthProvider,
        });
    });
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
            });
            (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                requireAuth: true,
                publicTools: ['custom-tool'],
                publicResources: ['custom://resource'],
                authHeader: 'x-custom-auth',
                authErrorMessage: 'Custom auth error',
                authzErrorMessage: 'Custom authz error',
            });
            (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
        });
    });
    (0, globals_1.describe)('apply', () => {
        (0, globals_1.it)('should apply middleware to FastMCP server', () => {
            const consoleSpy = globals_1.jest.spyOn(console, 'log').mockImplementation(() => { });
            middleware.apply(mockServer);
            (0, globals_1.expect)(consoleSpy).toHaveBeenCalledWith('🔐 Authentication middleware configured (tool-level implementation)');
            (0, globals_1.expect)(mockServer._authMiddleware).toBe(middleware);
            consoleSpy.mockRestore();
        });
    });
    (0, globals_1.describe)('checkToolAccess', () => {
        (0, globals_1.it)('should allow access to public tools without authentication', async () => {
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('init-n8n', context)).resolves.not.toThrow();
            await (0, globals_1.expect)(middleware.checkToolAccess('status', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should authenticate and check tool access for non-public tools', async () => {
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should throw error when authentication fails for protected tools', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).rejects.toThrow('Authentication required');
        });
        (0, globals_1.it)('should throw error when tool access is denied', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, []); // No tools allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).rejects.toThrow('Access denied: list-workflows');
        });
        (0, globals_1.it)('should allow anonymous access when auth not required', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: false,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should use existing authenticated user if available', async () => {
            const mockUser = {
                id: 'existing-user',
                roles: ['member'],
                permissions: {
                    community: true,
                    enterprise: false,
                    workflows: true,
                    executions: true,
                    credentials: false,
                    users: false,
                    audit: false,
                },
            };
            const context = {
                clientId: 'test-client',
                headers: {},
                user: mockUser,
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('list-workflows', context)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('checkResourceAccess', () => {
        (0, globals_1.it)('should allow access to public resources without authentication', async () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                publicResources: ['public://resource'],
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('public://resource', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should authenticate and check resource access for non-public resources', async () => {
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should throw error when authentication fails for protected resources', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).rejects.toThrow('Authentication required');
        });
        (0, globals_1.it)('should throw error when resource access is denied', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, ['*'], []); // No resources allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-token',
                },
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).rejects.toThrow('Access denied: n8n://workflows/123');
        });
        (0, globals_1.it)('should handle resource pattern matching', async () => {
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: mockAuthProvider,
                publicResources: ['n8n://public'],
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://public/resource', context)).resolves.not.toThrow();
        });
        (0, globals_1.it)('should use existing authenticated user if available', async () => {
            const mockUser = {
                id: 'existing-user',
                roles: ['member'],
                permissions: {
                    community: true,
                    enterprise: false,
                    workflows: true,
                    executions: true,
                    credentials: false,
                    users: false,
                    audit: false,
                },
            };
            const context = {
                clientId: 'test-client',
                headers: {},
                user: mockUser,
            };
            await (0, globals_1.expect)(middleware.checkResourceAccess('n8n://workflows/123', context)).resolves.not.toThrow();
        });
    });
    (0, globals_1.describe)('wrapTool', () => {
        (0, globals_1.it)('should wrap tool function with authentication', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [{ data: 'test' }, { session: { id: 'session-123' }, headers: {} }];
            const result = await wrappedTool(...args);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...args);
            (0, globals_1.expect)(result).toBe('tool result');
        });
        (0, globals_1.it)('should extract context from function arguments', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [
                { data: 'test' },
                {
                    session: { id: 'session-123' },
                    headers: { authorization: 'Bearer token' },
                    metadata: { userAgent: 'test' },
                },
            ];
            await wrappedTool(...args);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...args);
        });
        (0, globals_1.it)('should handle authentication errors in wrapped tool', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('tool result');
            const wrappedTool = middleware.wrapTool('protected-tool', mockToolFunction);
            const args = [{ data: 'test' }];
            await (0, globals_1.expect)(wrappedTool(...args)).rejects.toThrow('Authentication required');
            (0, globals_1.expect)(mockToolFunction).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('wrapResource', () => {
        (0, globals_1.it)('should wrap resource function with authentication', async () => {
            const mockResourceFunction = globals_1.jest
                .fn()
                .mockResolvedValue('resource result');
            const wrappedResource = middleware.wrapResource('n8n://test-resource', mockResourceFunction);
            const args = [{ data: 'test' }, { session: { id: 'session-123' }, headers: {} }];
            const result = await wrappedResource(...args);
            (0, globals_1.expect)(mockResourceFunction).toHaveBeenCalledWith(...args);
            (0, globals_1.expect)(result).toBe('resource result');
        });
        (0, globals_1.it)('should handle authentication errors in wrapped resource', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
            });
            const mockResourceFunction = globals_1.jest
                .fn()
                .mockResolvedValue('resource result');
            const wrappedResource = middleware.wrapResource('n8n://protected-resource', mockResourceFunction);
            const args = [{ data: 'test' }];
            await (0, globals_1.expect)(wrappedResource(...args)).rejects.toThrow('Authentication required');
            (0, globals_1.expect)(mockResourceFunction).not.toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('context extraction', () => {
        (0, globals_1.it)('should extract context from arguments with session', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [
                { data: 'test' },
                {
                    session: { id: 'session-123' },
                    headers: { authorization: 'Bearer token' },
                    metadata: { userAgent: 'test-client' },
                },
            ];
            // This will internally call extractContextFromArgs
            await wrappedTool(...args).catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle arguments without session', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const args = [{ data: 'test' }, { notASession: true }];
            // This will internally call extractContextFromArgs
            await wrappedTool(...args).catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
        (0, globals_1.it)('should handle empty arguments', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            // This will internally call extractContextFromArgs
            await wrappedTool().catch(() => { }); // Ignore errors for this test
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalled();
        });
    });
    (0, globals_1.describe)('error handling and edge cases', () => {
        (0, globals_1.it)('should handle custom error messages', async () => {
            const failingAuthProvider = new MockAuthProvider(false);
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: failingAuthProvider,
                requireAuth: true,
                authErrorMessage: 'Custom authentication error',
                authzErrorMessage: 'Custom authorization error',
            });
            const context = { headers: {} };
            await (0, globals_1.expect)(middleware.checkToolAccess('protected-tool', context)).rejects.toThrow('Custom authentication error');
        });
        (0, globals_1.it)('should handle authorization errors with custom messages', async () => {
            const restrictiveAuthProvider = new MockAuthProvider(true, null, []); // No tools allowed
            const middleware = new middleware_1.FastMCPAuthMiddleware({
                authProvider: restrictiveAuthProvider,
                authzErrorMessage: 'Custom authorization error',
            });
            const context = {
                headers: { authorization: 'Bearer token' },
            };
            await (0, globals_1.expect)(middleware.checkToolAccess('restricted-tool', context)).rejects.toThrow('Custom authorization error: restricted-tool');
        });
        (0, globals_1.it)('should handle null/undefined context gracefully', async () => {
            const mockToolFunction = globals_1.jest.fn().mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            // Should not throw an error even with no proper context
            await (0, globals_1.expect)(wrappedTool()).resolves.toBe('result');
        });
        (0, globals_1.it)('should handle complex argument structures', async () => {
            const mockToolFunction = globals_1.jest
                .fn()
                .mockResolvedValue('result');
            const wrappedTool = middleware.wrapTool('test-tool', mockToolFunction);
            const complexArgs = [
                { param1: 'value1' },
                { param2: 'value2' },
                {
                    session: { id: 'session-123', data: { nested: 'value' } },
                    headers: { 'custom-header': 'value' },
                    metadata: { timestamp: Date.now() },
                },
            ];
            await wrappedTool(...complexArgs);
            (0, globals_1.expect)(mockToolFunction).toHaveBeenCalledWith(...complexArgs);
        });
    });
});
(0, globals_1.describe)('createAuthMiddleware', () => {
    (0, globals_1.it)('should create FastMCPAuthMiddleware instance', () => {
        const mockAuthProvider = new MockAuthProvider();
        const middleware = (0, middleware_1.createAuthMiddleware)({
            authProvider: mockAuthProvider,
        });
        (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
    });
    (0, globals_1.it)('should pass configuration to middleware', () => {
        const mockAuthProvider = new MockAuthProvider();
        const config = {
            authProvider: mockAuthProvider,
            requireAuth: true,
            publicTools: ['public-tool'],
        };
        const middleware = (0, middleware_1.createAuthMiddleware)(config);
        (0, globals_1.expect)(middleware).toBeInstanceOf(middleware_1.FastMCPAuthMiddleware);
    });
});
(0, globals_1.describe)('decorators', () => {
    (0, globals_1.describe)('requireAuth', () => {
        (0, globals_1.it)('should create authentication decorator', () => {
            const decorator = (0, middleware_1.requireAuth)('test-tool');
            (0, globals_1.expect)(typeof decorator).toBe('function');
        });
        (0, globals_1.it)('should apply decorator to methods', async () => {
            const originalMethod = globals_1.jest.fn().mockResolvedValue('result');
            const mockDescriptor = {
                value: originalMethod,
            };
            const decorator = (0, middleware_1.requireAuth)('test-tool');
            const decoratedDescriptor = decorator({}, 'testMethod', mockDescriptor);
            (0, globals_1.expect)(decoratedDescriptor).toBe(mockDescriptor);
            (0, globals_1.expect)(typeof mockDescriptor.value).toBe('function');
            // Test the decorated method
            const result = await mockDescriptor.value('arg1', 'arg2');
            (0, globals_1.expect)(result).toBe('result');
            (0, globals_1.expect)(originalMethod).toHaveBeenCalledWith('arg1', 'arg2');
        });
    });
    (0, globals_1.describe)('requirePermission', () => {
        (0, globals_1.it)('should create permission decorator', () => {
            const decorator = (0, middleware_1.requirePermission)('workflows');
            (0, globals_1.expect)(typeof decorator).toBe('function');
        });
        (0, globals_1.it)('should apply decorator to methods', async () => {
            const originalMethod = globals_1.jest.fn().mockResolvedValue('permission-result');
            const mockDescriptor = {
                value: originalMethod,
            };
            const decorator = (0, middleware_1.requirePermission)('workflows');
            const decoratedDescriptor = decorator({}, 'testMethod', mockDescriptor);
            (0, globals_1.expect)(decoratedDescriptor).toBe(mockDescriptor);
            (0, globals_1.expect)(typeof mockDescriptor.value).toBe('function');
            // Test the decorated method
            const result = await mockDescriptor.value('arg1', 'arg2');
            (0, globals_1.expect)(result).toBe('permission-result');
            (0, globals_1.expect)(originalMethod).toHaveBeenCalledWith('arg1', 'arg2');
        });
    });
});
(0, globals_1.describe)('environment configuration', () => {
    (0, globals_1.describe)('AUTH_ENV_CONFIG', () => {
        (0, globals_1.it)('should define all required environment variable names', () => {
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH).toBe('N8N_MCP_REQUIRE_AUTH');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS).toBe('N8N_MCP_PUBLIC_TOOLS');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.PUBLIC_RESOURCES).toBe('N8N_MCP_PUBLIC_RESOURCES');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTH_HEADER).toBe('N8N_MCP_AUTH_HEADER');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE).toBe('N8N_MCP_AUTH_ERROR_MESSAGE');
            (0, globals_1.expect)(middleware_1.AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE).toBe('N8N_MCP_AUTHZ_ERROR_MESSAGE');
        });
    });
    (0, globals_1.describe)('parseAuthConfigFromEnv', () => {
        let originalEnv;
        (0, globals_1.beforeEach)(() => {
            originalEnv = { ...process.env };
        });
        afterEach(() => {
            process.env = originalEnv;
        });
        (0, globals_1.it)('should parse configuration from environment variables', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = 'true';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS] = 'tool1,tool2,tool3';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_RESOURCES] = 'resource1,resource2';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTH_HEADER] = 'x-custom-auth';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE] = 'Custom auth error';
            process.env[middleware_1.AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE] = 'Custom authz error';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.authProvider).toBe(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(true);
            (0, globals_1.expect)(config.publicTools).toEqual(['tool1', 'tool2', 'tool3']);
            (0, globals_1.expect)(config.publicResources).toEqual(['resource1', 'resource2']);
            (0, globals_1.expect)(config.authHeader).toBe('x-custom-auth');
            (0, globals_1.expect)(config.authErrorMessage).toBe('Custom auth error');
            (0, globals_1.expect)(config.authzErrorMessage).toBe('Custom authz error');
        });
        (0, globals_1.it)('should use defaults when environment variables are not set', () => {
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.authProvider).toBe(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
            (0, globals_1.expect)(config.publicTools).toBeUndefined();
            (0, globals_1.expect)(config.publicResources).toBeUndefined();
            (0, globals_1.expect)(config.authHeader).toBeUndefined();
            (0, globals_1.expect)(config.authErrorMessage).toBeUndefined();
            (0, globals_1.expect)(config.authzErrorMessage).toBeUndefined();
        });
        (0, globals_1.it)('should handle empty string environment variables', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = '';
            process.env[middleware_1.AUTH_ENV_CONFIG.PUBLIC_TOOLS] = '';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
            (0, globals_1.expect)(config.publicTools).toEqual(['']);
        });
        (0, globals_1.it)('should parse boolean values correctly', () => {
            process.env[middleware_1.AUTH_ENV_CONFIG.REQUIRE_AUTH] = 'false';
            const mockAuthProvider = new MockAuthProvider();
            const config = (0, middleware_1.parseAuthConfigFromEnv)(mockAuthProvider);
            (0, globals_1.expect)(config.requireAuth).toBe(false);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,