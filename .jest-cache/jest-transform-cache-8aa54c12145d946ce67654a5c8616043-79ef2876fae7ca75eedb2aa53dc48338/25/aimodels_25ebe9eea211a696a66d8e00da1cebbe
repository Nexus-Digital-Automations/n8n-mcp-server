cfc39b71153a8590daf136552498163f
"use strict";

/* istanbul ignore next */
function cov_10i08mjd2e() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts";
  var hash = "2fdcd487798de6f902da21a86288e08330189b56";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 50
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "5": {
        start: {
          line: 19,
          column: 34
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "6": {
        start: {
          line: 24,
          column: 30
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "7": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 113,
          column: 1
        }
      },
      "8": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 179,
          column: 7
        }
      },
      "9": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 177,
          column: 13
        }
      },
      "10": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 130,
          column: 34
        }
      },
      "11": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 136,
          column: 19
        }
      },
      "12": {
        start: {
          line: 133,
          column: 20
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "13": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 50
        }
      },
      "14": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 140,
          column: 17
        }
      },
      "15": {
        start: {
          line: 139,
          column: 20
        },
        end: {
          line: 139,
          column: 104
        }
      },
      "16": {
        start: {
          line: 139,
          column: 58
        },
        end: {
          line: 139,
          column: 102
        }
      },
      "17": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "18": {
        start: {
          line: 143,
          column: 34
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "19": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 147,
          column: 70
        }
      },
      "20": {
        start: {
          line: 144,
          column: 58
        },
        end: {
          line: 147,
          column: 68
        }
      },
      "21": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 150,
          column: 64
        }
      },
      "22": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 157,
          column: 17
        }
      },
      "23": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 156,
          column: 64
        }
      },
      "24": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 73
        }
      },
      "25": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 171,
          column: 19
        }
      },
      "26": {
        start: {
          line: 160,
          column: 38
        },
        end: {
          line: 160,
          column: 65
        }
      },
      "27": {
        start: {
          line: 161,
          column: 39
        },
        end: {
          line: 161,
          column: 67
        }
      },
      "28": {
        start: {
          line: 162,
          column: 20
        },
        end: {
          line: 162,
          column: 80
        }
      },
      "29": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 117
        }
      },
      "30": {
        start: {
          line: 164,
          column: 20
        },
        end: {
          line: 164,
          column: 59
        }
      },
      "31": {
        start: {
          line: 165,
          column: 20
        },
        end: {
          line: 165,
          column: 87
        }
      },
      "32": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 61
        }
      },
      "33": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 167,
          column: 65
        }
      },
      "34": {
        start: {
          line: 168,
          column: 20
        },
        end: {
          line: 168,
          column: 103
        }
      },
      "35": {
        start: {
          line: 169,
          column: 20
        },
        end: {
          line: 169,
          column: 86
        }
      },
      "36": {
        start: {
          line: 170,
          column: 20
        },
        end: {
          line: 170,
          column: 75
        }
      },
      "37": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 129
        }
      },
      "38": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 30
        }
      },
      "39": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 92
        }
      },
      "40": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 257,
          column: 7
        }
      },
      "41": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "42": {
        start: {
          line: 196,
          column: 33
        },
        end: {
          line: 196,
          column: 37
        }
      },
      "43": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 203,
          column: 19
        }
      },
      "44": {
        start: {
          line: 199,
          column: 34
        },
        end: {
          line: 199,
          column: 73
        }
      },
      "45": {
        start: {
          line: 199,
          column: 51
        },
        end: {
          line: 199,
          column: 72
        }
      },
      "46": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 202,
          column: 21
        }
      },
      "47": {
        start: {
          line: 201,
          column: 24
        },
        end: {
          line: 201,
          column: 43
        }
      },
      "48": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 207,
          column: 17
        }
      },
      "49": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 206,
          column: 82
        }
      },
      "50": {
        start: {
          line: 208,
          column: 30
        },
        end: {
          line: 208,
          column: 40
        }
      },
      "51": {
        start: {
          line: 209,
          column: 34
        },
        end: {
          line: 209,
          column: 61
        }
      },
      "52": {
        start: {
          line: 210,
          column: 35
        },
        end: {
          line: 210,
          column: 63
        }
      },
      "53": {
        start: {
          line: 212,
          column: 37
        },
        end: {
          line: 216,
          column: 17
        }
      },
      "54": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 251,
          column: 104
        }
      },
      "55": {
        start: {
          line: 226,
          column: 38
        },
        end: {
          line: 226,
          column: 105
        }
      },
      "56": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 99
        }
      },
      "57": {
        start: {
          line: 259,
          column: 4
        },
        end: {
          line: 388,
          column: 7
        }
      },
      "58": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 386,
          column: 13
        }
      },
      "59": {
        start: {
          line: 272,
          column: 31
        },
        end: {
          line: 272,
          column: 33
        }
      },
      "60": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 285,
          column: 19
        }
      },
      "61": {
        start: {
          line: 275,
          column: 37
        },
        end: {
          line: 275,
          column: 41
        }
      },
      "62": {
        start: {
          line: 276,
          column: 20
        },
        end: {
          line: 281,
          column: 23
        }
      },
      "63": {
        start: {
          line: 277,
          column: 38
        },
        end: {
          line: 277,
          column: 80
        }
      },
      "64": {
        start: {
          line: 277,
          column: 63
        },
        end: {
          line: 277,
          column: 79
        }
      },
      "65": {
        start: {
          line: 278,
          column: 24
        },
        end: {
          line: 280,
          column: 25
        }
      },
      "66": {
        start: {
          line: 279,
          column: 28
        },
        end: {
          line: 279,
          column: 47
        }
      },
      "67": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 284,
          column: 21
        }
      },
      "68": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 283,
          column: 48
        }
      },
      "69": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 290,
          column: 17
        }
      },
      "70": {
        start: {
          line: 287,
          column: 20
        },
        end: {
          line: 289,
          column: 73
        }
      },
      "71": {
        start: {
          line: 288,
          column: 70
        },
        end: {
          line: 288,
          column: 100
        }
      },
      "72": {
        start: {
          line: 288,
          column: 88
        },
        end: {
          line: 288,
          column: 99
        }
      },
      "73": {
        start: {
          line: 291,
          column: 29
        },
        end: {
          line: 291,
          column: 84
        }
      },
      "74": {
        start: {
          line: 293,
          column: 16
        },
        end: {
          line: 293,
          column: 89
        }
      },
      "75": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 294,
          column: 91
        }
      },
      "76": {
        start: {
          line: 295,
          column: 16
        },
        end: {
          line: 297,
          column: 19
        }
      },
      "77": {
        start: {
          line: 296,
          column: 20
        },
        end: {
          line: 296,
          column: 162
        }
      },
      "78": {
        start: {
          line: 298,
          column: 16
        },
        end: {
          line: 298,
          column: 31
        }
      },
      "79": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "80": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 71
        }
      },
      "81": {
        start: {
          line: 302,
          column: 20
        },
        end: {
          line: 306,
          column: 23
        }
      },
      "82": {
        start: {
          line: 303,
          column: 42
        },
        end: {
          line: 303,
          column: 69
        }
      },
      "83": {
        start: {
          line: 304,
          column: 43
        },
        end: {
          line: 304,
          column: 71
        }
      },
      "84": {
        start: {
          line: 305,
          column: 24
        },
        end: {
          line: 305,
          column: 102
        }
      },
      "85": {
        start: {
          line: 308,
          column: 42
        },
        end: {
          line: 308,
          column: 142
        }
      },
      "86": {
        start: {
          line: 308,
          column: 72
        },
        end: {
          line: 308,
          column: 141
        }
      },
      "87": {
        start: {
          line: 309,
          column: 43
        },
        end: {
          line: 309,
          column: 145
        }
      },
      "88": {
        start: {
          line: 309,
          column: 73
        },
        end: {
          line: 309,
          column: 144
        }
      },
      "89": {
        start: {
          line: 310,
          column: 20
        },
        end: {
          line: 310,
          column: 64
        }
      },
      "90": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 107
        }
      },
      "91": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 113
        }
      },
      "92": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 330,
          column: 17
        }
      },
      "93": {
        start: {
          line: 316,
          column: 41
        },
        end: {
          line: 322,
          column: 21
        }
      },
      "94": {
        start: {
          line: 323,
          column: 42
        },
        end: {
          line: 324,
          column: 53
        }
      },
      "95": {
        start: {
          line: 323,
          column: 64
        },
        end: {
          line: 324,
          column: 52
        }
      },
      "96": {
        start: {
          line: 325,
          column: 20
        },
        end: {
          line: 325,
          column: 53
        }
      },
      "97": {
        start: {
          line: 326,
          column: 20
        },
        end: {
          line: 328,
          column: 23
        }
      },
      "98": {
        start: {
          line: 327,
          column: 24
        },
        end: {
          line: 327,
          column: 86
        }
      },
      "99": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 35
        }
      },
      "100": {
        start: {
          line: 332,
          column: 16
        },
        end: {
          line: 347,
          column: 17
        }
      },
      "101": {
        start: {
          line: 333,
          column: 43
        },
        end: {
          line: 339,
          column: 21
        }
      },
      "102": {
        start: {
          line: 340,
          column: 44
        },
        end: {
          line: 341,
          column: 57
        }
      },
      "103": {
        start: {
          line: 340,
          column: 66
        },
        end: {
          line: 341,
          column: 56
        }
      },
      "104": {
        start: {
          line: 342,
          column: 20
        },
        end: {
          line: 342,
          column: 55
        }
      },
      "105": {
        start: {
          line: 343,
          column: 20
        },
        end: {
          line: 345,
          column: 23
        }
      },
      "106": {
        start: {
          line: 344,
          column: 24
        },
        end: {
          line: 344,
          column: 88
        }
      },
      "107": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 346,
          column: 35
        }
      },
      "108": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "109": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 350,
          column: 63
        }
      },
      "110": {
        start: {
          line: 351,
          column: 44
        },
        end: {
          line: 351,
          column: 93
        }
      },
      "111": {
        start: {
          line: 351,
          column: 76
        },
        end: {
          line: 351,
          column: 90
        }
      },
      "112": {
        start: {
          line: 352,
          column: 20
        },
        end: {
          line: 356,
          column: 23
        }
      },
      "113": {
        start: {
          line: 353,
          column: 53
        },
        end: {
          line: 353,
          column: 108
        }
      },
      "114": {
        start: {
          line: 353,
          column: 72
        },
        end: {
          line: 353,
          column: 107
        }
      },
      "115": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 354,
          column: 122
        }
      },
      "116": {
        start: {
          line: 355,
          column: 24
        },
        end: {
          line: 355,
          column: 90
        }
      },
      "117": {
        start: {
          line: 355,
          column: 64
        },
        end: {
          line: 355,
          column: 70
        }
      },
      "118": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 357,
          column: 35
        }
      },
      "119": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 51
        }
      },
      "120": {
        start: {
          line: 361,
          column: 33
        },
        end: {
          line: 364,
          column: 26
        }
      },
      "121": {
        start: {
          line: 361,
          column: 63
        },
        end: {
          line: 364,
          column: 25
        }
      },
      "122": {
        start: {
          line: 365,
          column: 32
        },
        end: {
          line: 371,
          column: 18
        }
      },
      "123": {
        start: {
          line: 366,
          column: 39
        },
        end: {
          line: 366,
          column: 102
        }
      },
      "124": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 370,
          column: 30
        }
      },
      "125": {
        start: {
          line: 372,
          column: 40
        },
        end: {
          line: 378,
          column: 18
        }
      },
      "126": {
        start: {
          line: 373,
          column: 41
        },
        end: {
          line: 373,
          column: 100
        }
      },
      "127": {
        start: {
          line: 374,
          column: 20
        },
        end: {
          line: 377,
          column: 30
        }
      },
      "128": {
        start: {
          line: 379,
          column: 16
        },
        end: {
          line: 379,
          column: 84
        }
      },
      "129": {
        start: {
          line: 380,
          column: 16
        },
        end: {
          line: 380,
          column: 80
        }
      },
      "130": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 381,
          column: 83
        }
      },
      "131": {
        start: {
          line: 382,
          column: 16
        },
        end: {
          line: 382,
          column: 30
        }
      },
      "132": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 385,
          column: 95
        }
      },
      "133": {
        start: {
          line: 390,
          column: 4
        },
        end: {
          line: 564,
          column: 7
        }
      },
      "134": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 562,
          column: 13
        }
      },
      "135": {
        start: {
          line: 417,
          column: 32
        },
        end: {
          line: 417,
          column: 34
        }
      },
      "136": {
        start: {
          line: 418,
          column: 16
        },
        end: {
          line: 420,
          column: 19
        }
      },
      "137": {
        start: {
          line: 419,
          column: 20
        },
        end: {
          line: 419,
          column: 46
        }
      },
      "138": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 424,
          column: 17
        }
      },
      "139": {
        start: {
          line: 423,
          column: 20
        },
        end: {
          line: 423,
          column: 93
        }
      },
      "140": {
        start: {
          line: 423,
          column: 58
        },
        end: {
          line: 423,
          column: 91
        }
      },
      "141": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 434,
          column: 17
        }
      },
      "142": {
        start: {
          line: 427,
          column: 41
        },
        end: {
          line: 431,
          column: 21
        }
      },
      "143": {
        start: {
          line: 432,
          column: 34
        },
        end: {
          line: 432,
          column: 67
        }
      },
      "144": {
        start: {
          line: 433,
          column: 20
        },
        end: {
          line: 433,
          column: 141
        }
      },
      "145": {
        start: {
          line: 433,
          column: 58
        },
        end: {
          line: 433,
          column: 139
        }
      },
      "146": {
        start: {
          line: 436,
          column: 37
        },
        end: {
          line: 521,
          column: 18
        }
      },
      "147": {
        start: {
          line: 437,
          column: 32
        },
        end: {
          line: 437,
          column: 33
        }
      },
      "148": {
        start: {
          line: 439,
          column: 20
        },
        end: {
          line: 466,
          column: 21
        }
      },
      "149": {
        start: {
          line: 441,
          column: 28
        },
        end: {
          line: 442,
          column: 44
        }
      },
      "150": {
        start: {
          line: 442,
          column: 32
        },
        end: {
          line: 442,
          column: 44
        }
      },
      "151": {
        start: {
          line: 443,
          column: 28
        },
        end: {
          line: 444,
          column: 44
        }
      },
      "152": {
        start: {
          line: 444,
          column: 32
        },
        end: {
          line: 444,
          column: 44
        }
      },
      "153": {
        start: {
          line: 445,
          column: 28
        },
        end: {
          line: 445,
          column: 34
        }
      },
      "154": {
        start: {
          line: 447,
          column: 28
        },
        end: {
          line: 448,
          column: 44
        }
      },
      "155": {
        start: {
          line: 448,
          column: 32
        },
        end: {
          line: 448,
          column: 44
        }
      },
      "156": {
        start: {
          line: 449,
          column: 28
        },
        end: {
          line: 450,
          column: 44
        }
      },
      "157": {
        start: {
          line: 450,
          column: 32
        },
        end: {
          line: 450,
          column: 44
        }
      },
      "158": {
        start: {
          line: 451,
          column: 28
        },
        end: {
          line: 451,
          column: 34
        }
      },
      "159": {
        start: {
          line: 453,
          column: 28
        },
        end: {
          line: 454,
          column: 44
        }
      },
      "160": {
        start: {
          line: 454,
          column: 32
        },
        end: {
          line: 454,
          column: 44
        }
      },
      "161": {
        start: {
          line: 455,
          column: 28
        },
        end: {
          line: 456,
          column: 44
        }
      },
      "162": {
        start: {
          line: 456,
          column: 32
        },
        end: {
          line: 456,
          column: 44
        }
      },
      "163": {
        start: {
          line: 457,
          column: 28
        },
        end: {
          line: 457,
          column: 34
        }
      },
      "164": {
        start: {
          line: 459,
          column: 28
        },
        end: {
          line: 460,
          column: 44
        }
      },
      "165": {
        start: {
          line: 460,
          column: 32
        },
        end: {
          line: 460,
          column: 44
        }
      },
      "166": {
        start: {
          line: 461,
          column: 28
        },
        end: {
          line: 462,
          column: 44
        }
      },
      "167": {
        start: {
          line: 462,
          column: 32
        },
        end: {
          line: 462,
          column: 44
        }
      },
      "168": {
        start: {
          line: 463,
          column: 28
        },
        end: {
          line: 463,
          column: 34
        }
      },
      "169": {
        start: {
          line: 465,
          column: 28
        },
        end: {
          line: 465,
          column: 40
        }
      },
      "170": {
        start: {
          line: 468,
          column: 20
        },
        end: {
          line: 519,
          column: 21
        }
      },
      "171": {
        start: {
          line: 470,
          column: 46
        },
        end: {
          line: 470,
          column: 104
        }
      },
      "172": {
        start: {
          line: 471,
          column: 28
        },
        end: {
          line: 471,
          column: 72
        }
      },
      "173": {
        start: {
          line: 472,
          column: 28
        },
        end: {
          line: 472,
          column: 34
        }
      },
      "174": {
        start: {
          line: 475,
          column: 48
        },
        end: {
          line: 481,
          column: 29
        }
      },
      "175": {
        start: {
          line: 482,
          column: 28
        },
        end: {
          line: 482,
          column: 68
        }
      },
      "176": {
        start: {
          line: 483,
          column: 28
        },
        end: {
          line: 483,
          column: 34
        }
      },
      "177": {
        start: {
          line: 486,
          column: 50
        },
        end: {
          line: 492,
          column: 29
        }
      },
      "178": {
        start: {
          line: 493,
          column: 28
        },
        end: {
          line: 493,
          column: 72
        }
      },
      "179": {
        start: {
          line: 494,
          column: 28
        },
        end: {
          line: 494,
          column: 34
        }
      },
      "180": {
        start: {
          line: 498,
          column: 56
        },
        end: {
          line: 504,
          column: 29
        }
      },
      "181": {
        start: {
          line: 505,
          column: 58
        },
        end: {
          line: 511,
          column: 29
        }
      },
      "182": {
        start: {
          line: 512,
          column: 54
        },
        end: {
          line: 512,
          column: 138
        }
      },
      "183": {
        start: {
          line: 513,
          column: 28
        },
        end: {
          line: 516,
          column: 54
        }
      },
      "184": {
        start: {
          line: 517,
          column: 28
        },
        end: {
          line: 517,
          column: 34
        }
      },
      "185": {
        start: {
          line: 520,
          column: 20
        },
        end: {
          line: 520,
          column: 47
        }
      },
      "186": {
        start: {
          line: 523,
          column: 40
        },
        end: {
          line: 523,
          column: 98
        }
      },
      "187": {
        start: {
          line: 523,
          column: 68
        },
        end: {
          line: 523,
          column: 85
        }
      },
      "188": {
        start: {
          line: 524,
          column: 16
        },
        end: {
          line: 531,
          column: 17
        }
      },
      "189": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 530,
          column: 70
        }
      },
      "190": {
        start: {
          line: 532,
          column: 29
        },
        end: {
          line: 532,
          column: 83
        }
      },
      "191": {
        start: {
          line: 533,
          column: 16
        },
        end: {
          line: 533,
          column: 53
        }
      },
      "192": {
        start: {
          line: 534,
          column: 16
        },
        end: {
          line: 534,
          column: 58
        }
      },
      "193": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 55
        }
      },
      "194": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 536,
          column: 59
        }
      },
      "195": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 111
        }
      },
      "196": {
        start: {
          line: 538,
          column: 16
        },
        end: {
          line: 548,
          column: 19
        }
      },
      "197": {
        start: {
          line: 539,
          column: 36
        },
        end: {
          line: 539,
          column: 80
        }
      },
      "198": {
        start: {
          line: 540,
          column: 38
        },
        end: {
          line: 540,
          column: 65
        }
      },
      "199": {
        start: {
          line: 541,
          column: 39
        },
        end: {
          line: 541,
          column: 67
        }
      },
      "200": {
        start: {
          line: 542,
          column: 20
        },
        end: {
          line: 542,
          column: 98
        }
      },
      "201": {
        start: {
          line: 543,
          column: 20
        },
        end: {
          line: 543,
          column: 117
        }
      },
      "202": {
        start: {
          line: 544,
          column: 20
        },
        end: {
          line: 544,
          column: 88
        }
      },
      "203": {
        start: {
          line: 545,
          column: 20
        },
        end: {
          line: 545,
          column: 88
        }
      },
      "204": {
        start: {
          line: 546,
          column: 20
        },
        end: {
          line: 546,
          column: 87
        }
      },
      "205": {
        start: {
          line: 547,
          column: 20
        },
        end: {
          line: 547,
          column: 72
        }
      },
      "206": {
        start: {
          line: 549,
          column: 33
        },
        end: {
          line: 549,
          column: 51
        }
      },
      "207": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 550,
          column: 69
        }
      },
      "208": {
        start: {
          line: 551,
          column: 16
        },
        end: {
          line: 551,
          column: 41
        }
      },
      "209": {
        start: {
          line: 552,
          column: 16
        },
        end: {
          line: 552,
          column: 32
        }
      },
      "210": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 553,
          column: 59
        }
      },
      "211": {
        start: {
          line: 554,
          column: 16
        },
        end: {
          line: 554,
          column: 52
        }
      },
      "212": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 555,
          column: 83
        }
      },
      "213": {
        start: {
          line: 556,
          column: 16
        },
        end: {
          line: 556,
          column: 32
        }
      },
      "214": {
        start: {
          line: 557,
          column: 16
        },
        end: {
          line: 557,
          column: 35
        }
      },
      "215": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 558,
          column: 30
        }
      },
      "216": {
        start: {
          line: 561,
          column: 16
        },
        end: {
          line: 561,
          column: 103
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAIModelsTools",
        decl: {
          start: {
            line: 115,
            column: 9
          },
          end: {
            line: 115,
            column: 28
          }
        },
        loc: {
          start: {
            line: 115,
            column: 48
          },
          end: {
            line: 565,
            column: 1
          }
        },
        line: 115
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 128,
            column: 17
          },
          end: {
            line: 128,
            column: 18
          }
        },
        loc: {
          start: {
            line: 128,
            column: 33
          },
          end: {
            line: 178,
            column: 9
          }
        },
        line: 128
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 132,
            column: 59
          },
          end: {
            line: 132,
            column: 60
          }
        },
        loc: {
          start: {
            line: 132,
            column: 83
          },
          end: {
            line: 136,
            column: 17
          }
        },
        line: 132
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 139,
            column: 50
          }
        },
        loc: {
          start: {
            line: 139,
            column: 58
          },
          end: {
            line: 139,
            column: 102
          }
        },
        line: 139
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 144,
            column: 49
          },
          end: {
            line: 144,
            column: 50
          }
        },
        loc: {
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 147,
            column: 68
          }
        },
        line: 144
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 159,
            column: 34
          },
          end: {
            line: 159,
            column: 35
          }
        },
        loc: {
          start: {
            line: 159,
            column: 52
          },
          end: {
            line: 171,
            column: 17
          }
        },
        line: 159
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 194,
            column: 17
          },
          end: {
            line: 194,
            column: 18
          }
        },
        loc: {
          start: {
            line: 194,
            column: 33
          },
          end: {
            line: 256,
            column: 9
          }
        },
        line: 194
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 198,
            column: 59
          },
          end: {
            line: 198,
            column: 60
          }
        },
        loc: {
          start: {
            line: 198,
            column: 83
          },
          end: {
            line: 203,
            column: 17
          }
        },
        line: 198
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 199,
            column: 46
          },
          end: {
            line: 199,
            column: 47
          }
        },
        loc: {
          start: {
            line: 199,
            column: 51
          },
          end: {
            line: 199,
            column: 72
          }
        },
        line: 199
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 226,
            column: 29
          },
          end: {
            line: 226,
            column: 30
          }
        },
        loc: {
          start: {
            line: 226,
            column: 38
          },
          end: {
            line: 226,
            column: 105
          }
        },
        line: 226
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 270,
            column: 17
          },
          end: {
            line: 270,
            column: 18
          }
        },
        loc: {
          start: {
            line: 270,
            column: 33
          },
          end: {
            line: 387,
            column: 9
          }
        },
        line: 270
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 274,
            column: 38
          },
          end: {
            line: 274,
            column: 39
          }
        },
        loc: {
          start: {
            line: 274,
            column: 49
          },
          end: {
            line: 285,
            column: 17
          }
        },
        line: 274
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 276,
            column: 63
          },
          end: {
            line: 276,
            column: 64
          }
        },
        loc: {
          start: {
            line: 276,
            column: 95
          },
          end: {
            line: 281,
            column: 21
          }
        },
        line: 276
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 277,
            column: 58
          },
          end: {
            line: 277,
            column: 59
          }
        },
        loc: {
          start: {
            line: 277,
            column: 63
          },
          end: {
            line: 277,
            column: 79
          }
        },
        line: 277
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 288,
            column: 64
          },
          end: {
            line: 288,
            column: 65
          }
        },
        loc: {
          start: {
            line: 288,
            column: 70
          },
          end: {
            line: 288,
            column: 100
          }
        },
        line: 288
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 288,
            column: 83
          },
          end: {
            line: 288,
            column: 84
          }
        },
        loc: {
          start: {
            line: 288,
            column: 88
          },
          end: {
            line: 288,
            column: 99
          }
        },
        line: 288
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 295,
            column: 31
          },
          end: {
            line: 295,
            column: 32
          }
        },
        loc: {
          start: {
            line: 295,
            column: 40
          },
          end: {
            line: 297,
            column: 17
          }
        },
        line: 295
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 302,
            column: 35
          },
          end: {
            line: 302,
            column: 36
          }
        },
        loc: {
          start: {
            line: 302,
            column: 44
          },
          end: {
            line: 306,
            column: 21
          }
        },
        line: 302
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 308,
            column: 56
          },
          end: {
            line: 308,
            column: 57
          }
        },
        loc: {
          start: {
            line: 308,
            column: 72
          },
          end: {
            line: 308,
            column: 141
          }
        },
        line: 308
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 309,
            column: 57
          },
          end: {
            line: 309,
            column: 58
          }
        },
        loc: {
          start: {
            line: 309,
            column: 73
          },
          end: {
            line: 309,
            column: 144
          }
        },
        line: 309
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 323,
            column: 54
          },
          end: {
            line: 323,
            column: 55
          }
        },
        loc: {
          start: {
            line: 323,
            column: 64
          },
          end: {
            line: 324,
            column: 52
          }
        },
        line: 323
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 326,
            column: 42
          },
          end: {
            line: 326,
            column: 43
          }
        },
        loc: {
          start: {
            line: 326,
            column: 60
          },
          end: {
            line: 328,
            column: 21
          }
        },
        line: 326
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 340,
            column: 56
          },
          end: {
            line: 340,
            column: 57
          }
        },
        loc: {
          start: {
            line: 340,
            column: 66
          },
          end: {
            line: 341,
            column: 56
          }
        },
        line: 340
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 343,
            column: 44
          },
          end: {
            line: 343,
            column: 45
          }
        },
        loc: {
          start: {
            line: 343,
            column: 62
          },
          end: {
            line: 345,
            column: 21
          }
        },
        line: 343
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 351,
            column: 71
          },
          end: {
            line: 351,
            column: 72
          }
        },
        loc: {
          start: {
            line: 351,
            column: 76
          },
          end: {
            line: 351,
            column: 90
          }
        },
        line: 351
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 352,
            column: 44
          },
          end: {
            line: 352,
            column: 45
          }
        },
        loc: {
          start: {
            line: 352,
            column: 58
          },
          end: {
            line: 356,
            column: 21
          }
        },
        line: 352
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 353,
            column: 67
          },
          end: {
            line: 353,
            column: 68
          }
        },
        loc: {
          start: {
            line: 353,
            column: 72
          },
          end: {
            line: 353,
            column: 107
          }
        },
        line: 353
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 355,
            column: 59
          },
          end: {
            line: 355,
            column: 60
          }
        },
        loc: {
          start: {
            line: 355,
            column: 64
          },
          end: {
            line: 355,
            column: 70
          }
        },
        line: 355
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 361,
            column: 47
          },
          end: {
            line: 361,
            column: 48
          }
        },
        loc: {
          start: {
            line: 361,
            column: 63
          },
          end: {
            line: 364,
            column: 25
          }
        },
        line: 361
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 365,
            column: 46
          },
          end: {
            line: 365,
            column: 47
          }
        },
        loc: {
          start: {
            line: 365,
            column: 62
          },
          end: {
            line: 371,
            column: 17
          }
        },
        line: 365
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 372,
            column: 54
          },
          end: {
            line: 372,
            column: 55
          }
        },
        loc: {
          start: {
            line: 372,
            column: 70
          },
          end: {
            line: 378,
            column: 17
          }
        },
        line: 372
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 415,
            column: 17
          },
          end: {
            line: 415,
            column: 18
          }
        },
        loc: {
          start: {
            line: 415,
            column: 33
          },
          end: {
            line: 563,
            column: 9
          }
        },
        line: 415
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 418,
            column: 59
          },
          end: {
            line: 418,
            column: 60
          }
        },
        loc: {
          start: {
            line: 418,
            column: 83
          },
          end: {
            line: 420,
            column: 17
          }
        },
        line: 418
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 423,
            column: 49
          },
          end: {
            line: 423,
            column: 50
          }
        },
        loc: {
          start: {
            line: 423,
            column: 58
          },
          end: {
            line: 423,
            column: 91
          }
        },
        line: 423
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 433,
            column: 49
          },
          end: {
            line: 433,
            column: 50
          }
        },
        loc: {
          start: {
            line: 433,
            column: 58
          },
          end: {
            line: 433,
            column: 139
          }
        },
        line: 433
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 436,
            column: 51
          },
          end: {
            line: 436,
            column: 52
          }
        },
        loc: {
          start: {
            line: 436,
            column: 60
          },
          end: {
            line: 521,
            column: 17
          }
        },
        line: 436
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 523,
            column: 58
          },
          end: {
            line: 523,
            column: 59
          }
        },
        loc: {
          start: {
            line: 523,
            column: 68
          },
          end: {
            line: 523,
            column: 85
          }
        },
        line: 523
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 538,
            column: 40
          },
          end: {
            line: 538,
            column: 41
          }
        },
        loc: {
          start: {
            line: 538,
            column: 58
          },
          end: {
            line: 548,
            column: 17
          }
        },
        line: 538
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 20
          },
          end: {
            line: 135,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "1": {
        loc: {
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 47
          }
        }, {
          start: {
            line: 133,
            column: 51
          },
          end: {
            line: 133,
            column: 77
          }
        }],
        line: 133
      },
      "2": {
        loc: {
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 16
          },
          end: {
            line: 140,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "3": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "4": {
        loc: {
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 147,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 144,
            column: 98
          }
        }, {
          start: {
            line: 145,
            column: 24
          },
          end: {
            line: 145,
            column: 62
          }
        }, {
          start: {
            line: 146,
            column: 24
          },
          end: {
            line: 146,
            column: 71
          }
        }, {
          start: {
            line: 147,
            column: 24
          },
          end: {
            line: 147,
            column: 68
          }
        }],
        line: 144
      },
      "5": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 157,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "6": {
        loc: {
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 36
          },
          end: {
            line: 155,
            column: 46
          }
        }, {
          start: {
            line: 155,
            column: 50
          },
          end: {
            line: 155,
            column: 56
          }
        }],
        line: 155
      },
      "7": {
        loc: {
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 20
          },
          end: {
            line: 202,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "8": {
        loc: {
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 16
          },
          end: {
            line: 207,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "9": {
        loc: {
          start: {
            line: 245,
            column: 21
          },
          end: {
            line: 245,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 245,
            column: 53
          },
          end: {
            line: 245,
            column: 95
          }
        }, {
          start: {
            line: 245,
            column: 98
          },
          end: {
            line: 245,
            column: 100
          }
        }],
        line: 245
      },
      "10": {
        loc: {
          start: {
            line: 246,
            column: 21
          },
          end: {
            line: 248,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 26
          },
          end: {
            line: 247,
            column: 54
          }
        }, {
          start: {
            line: 248,
            column: 26
          },
          end: {
            line: 248,
            column: 28
          }
        }],
        line: 246
      },
      "11": {
        loc: {
          start: {
            line: 246,
            column: 21
          },
          end: {
            line: 246,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 21
          },
          end: {
            line: 246,
            column: 48
          }
        }, {
          start: {
            line: 246,
            column: 52
          },
          end: {
            line: 246,
            column: 74
          }
        }],
        line: 246
      },
      "12": {
        loc: {
          start: {
            line: 249,
            column: 21
          },
          end: {
            line: 249,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 249,
            column: 41
          },
          end: {
            line: 249,
            column: 69
          }
        }, {
          start: {
            line: 249,
            column: 72
          },
          end: {
            line: 249,
            column: 74
          }
        }],
        line: 249
      },
      "13": {
        loc: {
          start: {
            line: 250,
            column: 21
          },
          end: {
            line: 250,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 47
          },
          end: {
            line: 250,
            column: 77
          }
        }, {
          start: {
            line: 250,
            column: 80
          },
          end: {
            line: 250,
            column: 82
          }
        }],
        line: 250
      },
      "14": {
        loc: {
          start: {
            line: 251,
            column: 21
          },
          end: {
            line: 251,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 65
          },
          end: {
            line: 251,
            column: 96
          }
        }, {
          start: {
            line: 251,
            column: 99
          },
          end: {
            line: 251,
            column: 101
          }
        }],
        line: 251
      },
      "15": {
        loc: {
          start: {
            line: 278,
            column: 24
          },
          end: {
            line: 280,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 24
          },
          end: {
            line: 280,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "16": {
        loc: {
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 284,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 20
          },
          end: {
            line: 284,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 282
      },
      "17": {
        loc: {
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 290,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 16
          },
          end: {
            line: 290,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "18": {
        loc: {
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 313,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "19": {
        loc: {
          start: {
            line: 308,
            column: 72
          },
          end: {
            line: 308,
            column: 141
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 308,
            column: 130
          },
          end: {
            line: 308,
            column: 135
          }
        }, {
          start: {
            line: 308,
            column: 138
          },
          end: {
            line: 308,
            column: 141
          }
        }],
        line: 308
      },
      "20": {
        loc: {
          start: {
            line: 309,
            column: 73
          },
          end: {
            line: 309,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 309,
            column: 133
          },
          end: {
            line: 309,
            column: 138
          }
        }, {
          start: {
            line: 309,
            column: 141
          },
          end: {
            line: 309,
            column: 144
          }
        }],
        line: 309
      },
      "21": {
        loc: {
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 330,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 16
          },
          end: {
            line: 330,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "22": {
        loc: {
          start: {
            line: 323,
            column: 65
          },
          end: {
            line: 323,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 323,
            column: 65
          },
          end: {
            line: 323,
            column: 86
          }
        }, {
          start: {
            line: 323,
            column: 90
          },
          end: {
            line: 323,
            column: 91
          }
        }],
        line: 323
      },
      "23": {
        loc: {
          start: {
            line: 324,
            column: 25
          },
          end: {
            line: 324,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 25
          },
          end: {
            line: 324,
            column: 46
          }
        }, {
          start: {
            line: 324,
            column: 50
          },
          end: {
            line: 324,
            column: 51
          }
        }],
        line: 324
      },
      "24": {
        loc: {
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 332,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 332
      },
      "25": {
        loc: {
          start: {
            line: 340,
            column: 67
          },
          end: {
            line: 340,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 67
          },
          end: {
            line: 340,
            column: 92
          }
        }, {
          start: {
            line: 340,
            column: 96
          },
          end: {
            line: 340,
            column: 97
          }
        }],
        line: 340
      },
      "26": {
        loc: {
          start: {
            line: 341,
            column: 25
          },
          end: {
            line: 341,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 25
          },
          end: {
            line: 341,
            column: 50
          }
        }, {
          start: {
            line: 341,
            column: 54
          },
          end: {
            line: 341,
            column: 55
          }
        }],
        line: 341
      },
      "27": {
        loc: {
          start: {
            line: 349,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "28": {
        loc: {
          start: {
            line: 361,
            column: 63
          },
          end: {
            line: 364,
            column: 25
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 363,
            column: 22
          },
          end: {
            line: 363,
            column: 27
          }
        }, {
          start: {
            line: 364,
            column: 22
          },
          end: {
            line: 364,
            column: 25
          }
        }],
        line: 361
      },
      "29": {
        loc: {
          start: {
            line: 367,
            column: 27
          },
          end: {
            line: 370,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 369,
            column: 26
          },
          end: {
            line: 369,
            column: 31
          }
        }, {
          start: {
            line: 370,
            column: 26
          },
          end: {
            line: 370,
            column: 29
          }
        }],
        line: 367
      },
      "30": {
        loc: {
          start: {
            line: 367,
            column: 28
          },
          end: {
            line: 367,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 28
          },
          end: {
            line: 367,
            column: 51
          }
        }, {
          start: {
            line: 367,
            column: 55
          },
          end: {
            line: 367,
            column: 56
          }
        }],
        line: 367
      },
      "31": {
        loc: {
          start: {
            line: 368,
            column: 25
          },
          end: {
            line: 368,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 25
          },
          end: {
            line: 368,
            column: 46
          }
        }, {
          start: {
            line: 368,
            column: 50
          },
          end: {
            line: 368,
            column: 51
          }
        }],
        line: 368
      },
      "32": {
        loc: {
          start: {
            line: 374,
            column: 27
          },
          end: {
            line: 377,
            column: 29
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 376,
            column: 26
          },
          end: {
            line: 376,
            column: 31
          }
        }, {
          start: {
            line: 377,
            column: 26
          },
          end: {
            line: 377,
            column: 29
          }
        }],
        line: 374
      },
      "33": {
        loc: {
          start: {
            line: 374,
            column: 28
          },
          end: {
            line: 374,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 374,
            column: 28
          },
          end: {
            line: 374,
            column: 55
          }
        }, {
          start: {
            line: 374,
            column: 59
          },
          end: {
            line: 374,
            column: 60
          }
        }],
        line: 374
      },
      "34": {
        loc: {
          start: {
            line: 375,
            column: 25
          },
          end: {
            line: 375,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 375,
            column: 25
          },
          end: {
            line: 375,
            column: 50
          }
        }, {
          start: {
            line: 375,
            column: 54
          },
          end: {
            line: 375,
            column: 55
          }
        }],
        line: 375
      },
      "35": {
        loc: {
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 424,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 424,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "36": {
        loc: {
          start: {
            line: 426,
            column: 16
          },
          end: {
            line: 434,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 16
          },
          end: {
            line: 434,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "37": {
        loc: {
          start: {
            line: 432,
            column: 34
          },
          end: {
            line: 432,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 432,
            column: 34
          },
          end: {
            line: 432,
            column: 59
          }
        }, {
          start: {
            line: 432,
            column: 63
          },
          end: {
            line: 432,
            column: 67
          }
        }],
        line: 432
      },
      "38": {
        loc: {
          start: {
            line: 433,
            column: 58
          },
          end: {
            line: 433,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 433,
            column: 58
          },
          end: {
            line: 433,
            column: 94
          }
        }, {
          start: {
            line: 433,
            column: 98
          },
          end: {
            line: 433,
            column: 139
          }
        }],
        line: 433
      },
      "39": {
        loc: {
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 466,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 440,
            column: 24
          },
          end: {
            line: 445,
            column: 34
          }
        }, {
          start: {
            line: 446,
            column: 24
          },
          end: {
            line: 451,
            column: 34
          }
        }, {
          start: {
            line: 452,
            column: 24
          },
          end: {
            line: 457,
            column: 34
          }
        }, {
          start: {
            line: 458,
            column: 24
          },
          end: {
            line: 463,
            column: 34
          }
        }, {
          start: {
            line: 464,
            column: 24
          },
          end: {
            line: 465,
            column: 40
          }
        }],
        line: 439
      },
      "40": {
        loc: {
          start: {
            line: 441,
            column: 28
          },
          end: {
            line: 442,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 441,
            column: 28
          },
          end: {
            line: 442,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 441
      },
      "41": {
        loc: {
          start: {
            line: 443,
            column: 28
          },
          end: {
            line: 444,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 443,
            column: 28
          },
          end: {
            line: 444,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 443
      },
      "42": {
        loc: {
          start: {
            line: 443,
            column: 32
          },
          end: {
            line: 443,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 443,
            column: 32
          },
          end: {
            line: 443,
            column: 54
          }
        }, {
          start: {
            line: 443,
            column: 58
          },
          end: {
            line: 443,
            column: 85
          }
        }],
        line: 443
      },
      "43": {
        loc: {
          start: {
            line: 447,
            column: 28
          },
          end: {
            line: 448,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 28
          },
          end: {
            line: 448,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "44": {
        loc: {
          start: {
            line: 449,
            column: 28
          },
          end: {
            line: 450,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 28
          },
          end: {
            line: 450,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "45": {
        loc: {
          start: {
            line: 453,
            column: 28
          },
          end: {
            line: 454,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 453,
            column: 28
          },
          end: {
            line: 454,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 453
      },
      "46": {
        loc: {
          start: {
            line: 455,
            column: 28
          },
          end: {
            line: 456,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 455,
            column: 28
          },
          end: {
            line: 456,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 455
      },
      "47": {
        loc: {
          start: {
            line: 459,
            column: 28
          },
          end: {
            line: 460,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 459,
            column: 28
          },
          end: {
            line: 460,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 459
      },
      "48": {
        loc: {
          start: {
            line: 461,
            column: 28
          },
          end: {
            line: 462,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 461,
            column: 28
          },
          end: {
            line: 462,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 461
      },
      "49": {
        loc: {
          start: {
            line: 468,
            column: 20
          },
          end: {
            line: 519,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 469,
            column: 24
          },
          end: {
            line: 473,
            column: 25
          }
        }, {
          start: {
            line: 474,
            column: 24
          },
          end: {
            line: 484,
            column: 25
          }
        }, {
          start: {
            line: 485,
            column: 24
          },
          end: {
            line: 495,
            column: 25
          }
        }, {
          start: {
            line: 496,
            column: 24
          },
          end: {
            line: 518,
            column: 25
          }
        }],
        line: 468
      },
      "50": {
        loc: {
          start: {
            line: 482,
            column: 37
          },
          end: {
            line: 482,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 37
          },
          end: {
            line: 482,
            column: 61
          }
        }, {
          start: {
            line: 482,
            column: 65
          },
          end: {
            line: 482,
            column: 67
          }
        }],
        line: 482
      },
      "51": {
        loc: {
          start: {
            line: 493,
            column: 37
          },
          end: {
            line: 493,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 493,
            column: 37
          },
          end: {
            line: 493,
            column: 65
          }
        }, {
          start: {
            line: 493,
            column: 69
          },
          end: {
            line: 493,
            column: 71
          }
        }],
        line: 493
      },
      "52": {
        loc: {
          start: {
            line: 514,
            column: 33
          },
          end: {
            line: 514,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 33
          },
          end: {
            line: 514,
            column: 65
          }
        }, {
          start: {
            line: 514,
            column: 69
          },
          end: {
            line: 514,
            column: 71
          }
        }],
        line: 514
      },
      "53": {
        loc: {
          start: {
            line: 515,
            column: 37
          },
          end: {
            line: 515,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 515,
            column: 37
          },
          end: {
            line: 515,
            column: 73
          }
        }, {
          start: {
            line: 515,
            column: 77
          },
          end: {
            line: 515,
            column: 79
          }
        }],
        line: 515
      },
      "54": {
        loc: {
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 531,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 524,
            column: 16
          },
          end: {
            line: 531,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 524
      },
      "55": {
        loc: {
          start: {
            line: 529,
            column: 41
          },
          end: {
            line: 529,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 529,
            column: 41
          },
          end: {
            line: 529,
            column: 55
          }
        }, {
          start: {
            line: 529,
            column: 59
          },
          end: {
            line: 529,
            column: 69
          }
        }],
        line: 529
      },
      "56": {
        loc: {
          start: {
            line: 537,
            column: 43
          },
          end: {
            line: 537,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 537,
            column: 43
          },
          end: {
            line: 537,
            column: 75
          }
        }, {
          start: {
            line: 537,
            column: 79
          },
          end: {
            line: 537,
            column: 104
          }
        }],
        line: 537
      },
      "57": {
        loc: {
          start: {
            line: 539,
            column: 36
          },
          end: {
            line: 539,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 539,
            column: 36
          },
          end: {
            line: 539,
            column: 61
          }
        }, {
          start: {
            line: 539,
            column: 65
          },
          end: {
            line: 539,
            column: 80
          }
        }],
        line: 539
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0, 0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI model management\nconst ModelSearchSchema = z.object({\n  query: z.string().optional(),\n  provider: z\n    .enum(['openai', 'anthropic', 'google', 'huggingface', 'local', 'all'])\n    .optional()\n    .default('all'),\n  capability: z\n    .enum(['text-generation', 'chat', 'completion', 'embedding', 'classification', 'all'])\n    .optional()\n    .default('all'),\n  maxResults: z.number().min(1).max(100).optional().default(20),\n});\n\nconst _ModelConfigurationSchema = z.object({\n  modelId: z.string().min(1, 'Model ID is required'),\n  provider: z.string().min(1, 'Provider is required'),\n  configuration: z.record(z.any()),\n});\n\nconst ModelComparisonSchema = z.object({\n  modelIds: z.array(z.string()).min(2, 'At least 2 models required for comparison'),\n  criteria: z\n    .array(z.enum(['cost', 'speed', 'quality', 'capabilities']))\n    .optional()\n    .default(['cost', 'speed', 'quality']),\n});\n\n// Model database (in a real implementation, this would be fetched from APIs or databases)\nconst AI_MODELS_DATABASE = {\n  openai: [\n    {\n      id: 'gpt-4-turbo',\n      name: 'GPT-4 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 128000,\n      costPer1kTokens: { input: 0.01, output: 0.03 },\n      speed: 'fast',\n      quality: 'excellent',\n      description: 'Most capable GPT-4 model with 128k context window',\n    },\n    {\n      id: 'gpt-3.5-turbo',\n      name: 'GPT-3.5 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 16385,\n      costPer1kTokens: { input: 0.0015, output: 0.002 },\n      speed: 'very-fast',\n      quality: 'good',\n      description: 'Fast and efficient model for most tasks',\n    },\n  ],\n  anthropic: [\n    {\n      id: 'claude-3-opus',\n      name: 'Claude 3 Opus',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'analysis'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.015, output: 0.075 },\n      speed: 'medium',\n      quality: 'excellent',\n      description: 'Most powerful Claude model with exceptional reasoning',\n    },\n    {\n      id: 'claude-3-sonnet',\n      name: 'Claude 3 Sonnet',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.003, output: 0.015 },\n      speed: 'fast',\n      quality: 'very-good',\n      description: 'Balanced model with good performance and cost efficiency',\n    },\n  ],\n  google: [\n    {\n      id: 'gemini-pro',\n      name: 'Gemini Pro',\n      provider: 'google',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'multimodal'],\n      maxTokens: 32768,\n      costPer1kTokens: { input: 0.00025, output: 0.0005 },\n      speed: 'fast',\n      quality: 'good',\n      description: \"Google's multimodal AI model\",\n    },\n  ],\n  local: [\n    {\n      id: 'llama-2-7b',\n      name: 'Llama 2 7B',\n      provider: 'local',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 4096,\n      costPer1kTokens: { input: 0, output: 0 },\n      speed: 'medium',\n      quality: 'good',\n      description: 'Open-source model that can run locally',\n    },\n  ],\n};\n\n// Tool registration function for AI model management tools\nexport function createAIModelsTools(getClient: () => N8nClient | null, server: any) {\n  // List available AI models\n  server.addTool({\n    name: 'list-ai-models',\n    description:\n      'List available AI models with filtering by provider, capability, and search terms',\n    parameters: ModelSearchSchema,\n    annotations: {\n      title: 'List AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelSearchSchema>) => {\n      try {\n        let allModels: any[] = [];\n\n        // Collect models from all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          if (args.provider === 'all' || args.provider === provider) {\n            allModels.push(...models);\n          }\n        });\n\n        // Filter by capability\n        if (args.capability !== 'all') {\n          allModels = allModels.filter(model => model.capabilities.includes(args.capability));\n        }\n\n        // Filter by search query\n        if (args.query) {\n          const query = args.query.toLowerCase();\n          allModels = allModels.filter(\n            model =>\n              model.name.toLowerCase().includes(query) ||\n              model.id.toLowerCase().includes(query) ||\n              model.description.toLowerCase().includes(query) ||\n              model.provider.toLowerCase().includes(query)\n          );\n        }\n\n        // Limit results\n        allModels = allModels.slice(0, args.maxResults);\n\n        if (allModels.length === 0) {\n          return (\n            `No AI models found matching your criteria:\\n` +\n            `- Provider: ${args.provider}\\n` +\n            `- Capability: ${args.capability}\\n` +\n            `- Query: ${args.query || 'None'}\\n\\n` +\n            `Try broadening your search criteria.`\n          );\n        }\n\n        let result = `Found ${allModels.length} AI model(s):\\n\\n`;\n\n        allModels.forEach((model, index) => {\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n\n          result += `**${index + 1}. ${model.name}** (${model.id})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Type: ${model.type}\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Speed: ${model.speed}\\n`;\n          result += `   - Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens (input/output)\\n`;\n          result += `   - Capabilities: ${model.capabilities.join(', ')}\\n`;\n          result += `   - Description: ${model.description}\\n\\n`;\n        });\n\n        result += `**Usage:** Use the model ID (e.g., \"${allModels[0].id}\") when configuring AI nodes in n8n workflows.`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get detailed model information\n  server.addTool({\n    name: 'get-ai-model-info',\n    description:\n      'Get detailed information about a specific AI model including capabilities, pricing, and configuration options',\n    parameters: z.object({\n      modelId: z.string().min(1, 'Model ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Model Info',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { modelId: string }) => {\n      try {\n        let foundModel: any = null;\n\n        // Search for the model across all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          const model = models.find(m => m.id === args.modelId);\n          if (model) {\n            foundModel = model;\n          }\n        });\n\n        if (!foundModel) {\n          return (\n            `Model \"${args.modelId}\" not found.\\n\\n` +\n            `Use the \"list-ai-models\" tool to see available models.`\n          );\n        }\n\n        const model = foundModel;\n        const inputCost = model.costPer1kTokens.input;\n        const outputCost = model.costPer1kTokens.output;\n\n        // Calculate cost examples\n        const exampleCosts = {\n          smallRequest: (1000 * inputCost + 500 * outputCost).toFixed(4),\n          mediumRequest: (5000 * inputCost + 2000 * outputCost).toFixed(4),\n          largeRequest: (20000 * inputCost + 5000 * outputCost).toFixed(4),\n        };\n\n        return (\n          `**${model.name}** (${model.id})\\n\\n` +\n          `**Basic Information:**\\n` +\n          `- Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n` +\n          `- Model Type: ${model.type}\\n` +\n          `- Max Context: ${model.maxTokens.toLocaleString()} tokens\\n` +\n          `- Speed Rating: ${model.speed}\\n` +\n          `- Quality Rating: ${model.quality}\\n\\n` +\n          `**Capabilities:**\\n` +\n          model.capabilities\n            .map(\n              (cap: string) => `- ${cap.charAt(0).toUpperCase() + cap.slice(1).replace('-', ' ')}`\n            )\n            .join('\\n') +\n          '\\n\\n' +\n          `**Pricing:**\\n` +\n          `- Input: $${inputCost} per 1,000 tokens\\n` +\n          `- Output: $${outputCost} per 1,000 tokens\\n\\n` +\n          `**Cost Examples:**\\n` +\n          `- Small request (1k input, 500 output): $${exampleCosts.smallRequest}\\n` +\n          `- Medium request (5k input, 2k output): $${exampleCosts.mediumRequest}\\n` +\n          `- Large request (20k input, 5k output): $${exampleCosts.largeRequest}\\n\\n` +\n          `**Description:**\\n${model.description}\\n\\n` +\n          `**Configuration Example for n8n:**\\n\\`\\`\\`json\\n` +\n          `{\\n` +\n          `  \"model\": \"${model.id}\",\\n` +\n          `  \"temperature\": 0.7,\\n` +\n          `  \"maxTokens\": ${Math.min(4000, model.maxTokens)},\\n` +\n          `  \"provider\": \"${model.provider}\"\\n` +\n          `}\\n\\`\\`\\`\\n\\n` +\n          `**Use Case Recommendations:**\\n` +\n          (model.quality === 'excellent' ? '- Complex reasoning and analysis tasks\\n' : '') +\n          (model.speed === 'very-fast' || model.speed === 'fast'\n            ? '- Real-time applications\\n'\n            : '') +\n          (inputCost < 0.005 ? '- High-volume processing\\n' : '') +\n          (model.maxTokens > 50000 ? '- Long document processing\\n' : '') +\n          (model.capabilities.includes('multimodal') ? '- Image and text processing\\n' : '')\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to get model information: ${error.message}`);\n      }\n    },\n  });\n\n  // Compare AI models\n  server.addTool({\n    name: 'compare-ai-models',\n    description:\n      'Compare multiple AI models across different criteria like cost, speed, quality, and capabilities',\n    parameters: ModelComparisonSchema,\n    annotations: {\n      title: 'Compare AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelComparisonSchema>) => {\n      try {\n        const models: any[] = [];\n\n        // Find all requested models\n        args.modelIds.forEach(modelId => {\n          let foundModel: any = null;\n          Object.entries(AI_MODELS_DATABASE).forEach(([provider, providerModels]) => {\n            const model = providerModels.find(m => m.id === modelId);\n            if (model) {\n              foundModel = model;\n            }\n          });\n\n          if (foundModel) {\n            models.push(foundModel);\n          }\n        });\n\n        if (models.length < 2) {\n          return (\n            `Found only ${models.length} model(s) out of ${args.modelIds.length} requested.\\n\\n` +\n            `Missing models: ${args.modelIds.filter(id => !models.some(m => m.id === id)).join(', ')}\\n\\n` +\n            `Use \"list-ai-models\" to see available models.`\n          );\n        }\n\n        let result = `**AI Model Comparison** (${models.length} models)\\n\\n`;\n\n        // Create comparison table\n        result += `| Model | Provider | Type | Max Tokens | Speed | Quality |\\n`;\n        result += `|-------|----------|------|------------|--------|----------|\\n`;\n        models.forEach(model => {\n          result += `| ${model.name} | ${model.provider} | ${model.type} | ${model.maxTokens.toLocaleString()} | ${model.speed} | ${model.quality} |\\n`;\n        });\n        result += '\\n';\n\n        // Cost comparison\n        if (args.criteria.includes('cost')) {\n          result += `**Cost Comparison (per 1k tokens):**\\n`;\n          models.forEach(model => {\n            const inputCost = model.costPer1kTokens.input;\n            const outputCost = model.costPer1kTokens.output;\n            result += `- **${model.name}**: $${inputCost} input, $${outputCost} output\\n`;\n          });\n\n          // Find most cost-effective\n          const cheapestInput = models.reduce((min, model) =>\n            model.costPer1kTokens.input < min.costPer1kTokens.input ? model : min\n          );\n          const cheapestOutput = models.reduce((min, model) =>\n            model.costPer1kTokens.output < min.costPer1kTokens.output ? model : min\n          );\n\n          result += `\\n\uD83D\uDCB0 **Most Cost-Effective:**\\n`;\n          result += `- Input: ${cheapestInput.name} ($${cheapestInput.costPer1kTokens.input})\\n`;\n          result += `- Output: ${cheapestOutput.name} ($${cheapestOutput.costPer1kTokens.output})\\n\\n`;\n        }\n\n        // Speed comparison\n        if (args.criteria.includes('speed')) {\n          const speedRanking = {\n            'very-fast': 5,\n            fast: 4,\n            medium: 3,\n            slow: 2,\n            'very-slow': 1,\n          };\n\n          const sortedBySpeed = models.sort(\n            (a, b) =>\n              (speedRanking[b.speed as keyof typeof speedRanking] || 3) -\n              (speedRanking[a.speed as keyof typeof speedRanking] || 3)\n          );\n\n          result += `**Speed Ranking:**\\n`;\n          sortedBySpeed.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.speed}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Quality comparison\n        if (args.criteria.includes('quality')) {\n          const qualityRanking = {\n            excellent: 5,\n            'very-good': 4,\n            good: 3,\n            fair: 2,\n            poor: 1,\n          };\n\n          const sortedByQuality = models.sort(\n            (a, b) =>\n              (qualityRanking[b.quality as keyof typeof qualityRanking] || 3) -\n              (qualityRanking[a.quality as keyof typeof qualityRanking] || 3)\n          );\n\n          result += `**Quality Ranking:**\\n`;\n          sortedByQuality.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.quality}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Capabilities comparison\n        if (args.criteria.includes('capabilities')) {\n          result += `**Capabilities Comparison:**\\n`;\n          const allCapabilities = [...new Set(models.flatMap(m => m.capabilities))];\n\n          allCapabilities.forEach(capability => {\n            const modelsWithCapability = models.filter(m => m.capabilities.includes(capability));\n            result += `- **${capability.charAt(0).toUpperCase() + capability.slice(1).replace('-', ' ')}**: `;\n            result += modelsWithCapability.map(m => m.name).join(', ') + '\\n';\n          });\n          result += '\\n';\n        }\n\n        // Recommendations\n        result += `**Recommendations:**\\n`;\n        const cheapest = models.reduce((min, model) =>\n          model.costPer1kTokens.input + model.costPer1kTokens.output <\n          min.costPer1kTokens.input + min.costPer1kTokens.output\n            ? model\n            : min\n        );\n        const fastest = models.reduce((max, model) => {\n          const speedValue = { 'very-fast': 5, fast: 4, medium: 3, slow: 2, 'very-slow': 1 };\n          return (speedValue[model.speed as keyof typeof speedValue] || 3) >\n            (speedValue[max.speed as keyof typeof speedValue] || 3)\n            ? model\n            : max;\n        });\n        const highest_quality = models.reduce((max, model) => {\n          const qualityValue = { excellent: 5, 'very-good': 4, good: 3, fair: 2, poor: 1 };\n          return (qualityValue[model.quality as keyof typeof qualityValue] || 3) >\n            (qualityValue[max.quality as keyof typeof qualityValue] || 3)\n            ? model\n            : max;\n        });\n\n        result += `- **For budget-conscious projects**: ${cheapest.name}\\n`;\n        result += `- **For real-time applications**: ${fastest.name}\\n`;\n        result += `- **For complex reasoning**: ${highest_quality.name}\\n`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to compare AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get model recommendations\n  server.addTool({\n    name: 'recommend-ai-model',\n    description:\n      'Get AI model recommendations based on use case, budget, and performance requirements',\n    parameters: z.object({\n      useCase: z.enum([\n        'chatbot',\n        'content-generation',\n        'code-generation',\n        'data-analysis',\n        'translation',\n        'summarization',\n        'classification',\n        'general-purpose',\n      ]),\n      budget: z.enum(['low', 'medium', 'high', 'unlimited']).optional().default('medium'),\n      priority: z.enum(['cost', 'speed', 'quality', 'balanced']).optional().default('balanced'),\n      maxTokens: z.number().min(1000).max(200000).optional(),\n    }),\n    annotations: {\n      title: 'Recommend AI Model',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: {\n      useCase: string;\n      budget?: string;\n      priority?: string;\n      maxTokens?: number;\n    }) => {\n      try {\n        let allModels: any[] = [];\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          allModels.push(...models);\n        });\n\n        // Filter by token requirements\n        if (args.maxTokens) {\n          allModels = allModels.filter(model => model.maxTokens >= args.maxTokens!);\n        }\n\n        // Filter by budget\n        if (args.budget !== 'unlimited') {\n          const budgetLimits = {\n            low: 0.005, // max $0.005 per 1k tokens\n            medium: 0.02, // max $0.02 per 1k tokens\n            high: 0.1, // max $0.1 per 1k tokens\n          };\n\n          const limit = budgetLimits[args.budget as keyof typeof budgetLimits] || 0.02;\n          allModels = allModels.filter(\n            model =>\n              model.costPer1kTokens.input <= limit && model.costPer1kTokens.output <= limit * 2\n          );\n        }\n\n        // Score models based on priority\n        const scoredModels = allModels.map(model => {\n          let score = 0;\n\n          // Use case specific scoring\n          switch (args.useCase) {\n            case 'chatbot':\n              if (model.capabilities.includes('chat')) score += 30;\n              if (model.speed === 'fast' || model.speed === 'very-fast') score += 20;\n              break;\n            case 'content-generation':\n              if (model.quality === 'excellent') score += 30;\n              if (model.maxTokens > 32000) score += 20;\n              break;\n            case 'code-generation':\n              if (model.capabilities.includes('completion')) score += 30;\n              if (model.quality === 'excellent') score += 20;\n              break;\n            case 'data-analysis':\n              if (model.quality === 'excellent') score += 40;\n              if (model.maxTokens > 50000) score += 10;\n              break;\n            default:\n              score += 20; // Base score for general use\n          }\n\n          // Priority-based scoring\n          switch (args.priority) {\n            case 'cost': {\n              const totalCost = model.costPer1kTokens.input + model.costPer1kTokens.output;\n              score += Math.max(0, 50 - totalCost * 1000); // Lower cost = higher score\n              break;\n            }\n            case 'speed': {\n              const speedScores = {\n                'very-fast': 50,\n                fast: 40,\n                medium: 30,\n                slow: 20,\n                'very-slow': 10,\n              };\n              score += speedScores[model.speed as keyof typeof speedScores] || 25;\n              break;\n            }\n            case 'quality': {\n              const qualityScores = {\n                excellent: 50,\n                'very-good': 40,\n                good: 30,\n                fair: 20,\n                poor: 10,\n              };\n              score += qualityScores[model.quality as keyof typeof qualityScores] || 25;\n              break;\n            }\n            case 'balanced': {\n              // Balanced scoring\n              const balancedSpeedScores = {\n                'very-fast': 20,\n                fast: 18,\n                medium: 15,\n                slow: 10,\n                'very-slow': 5,\n              };\n              const balancedQualityScores = {\n                excellent: 20,\n                'very-good': 18,\n                good: 15,\n                fair: 10,\n                poor: 5,\n              };\n              const balancedCostScore = Math.max(\n                0,\n                10 - (model.costPer1kTokens.input + model.costPer1kTokens.output) * 100\n              );\n              score +=\n                (balancedSpeedScores[model.speed as keyof typeof balancedSpeedScores] || 10) +\n                (balancedQualityScores[model.quality as keyof typeof balancedQualityScores] || 10) +\n                balancedCostScore;\n              break;\n            }\n          }\n\n          return { ...model, score };\n        });\n\n        // Sort by score and take top 3\n        const recommendations = scoredModels.sort((a, b) => b.score - a.score).slice(0, 3);\n\n        if (recommendations.length === 0) {\n          return (\n            `No AI models found matching your criteria:\\n` +\n            `- Use Case: ${args.useCase}\\n` +\n            `- Budget: ${args.budget}\\n` +\n            `- Priority: ${args.priority}\\n` +\n            `- Max Tokens: ${args.maxTokens || 'No limit'}\\n\\n` +\n            `Try adjusting your requirements or budget.`\n          );\n        }\n\n        let result = `**AI Model Recommendations for ${args.useCase}**\\n\\n`;\n        result += `**Your Requirements:**\\n`;\n        result += `- Use Case: ${args.useCase}\\n`;\n        result += `- Budget: ${args.budget}\\n`;\n        result += `- Priority: ${args.priority}\\n`;\n        result += `- Max Tokens: ${args.maxTokens?.toLocaleString() || 'No specific requirement'}\\n\\n`;\n\n        recommendations.forEach((model, index) => {\n          const ranking = ['\uD83E\uDD47', '\uD83E\uDD48', '\uD83E\uDD49'][index] || `${index + 1}.`;\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n\n          result += `${ranking} **${model.name}** (Score: ${model.score.toFixed(0)})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Speed: ${model.speed}, Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Best For: ${model.description}\\n\\n`;\n        });\n\n        const topModel = recommendations[0];\n        result += `**Quick Start with ${topModel.name}:**\\n`;\n        result += `\\`\\`\\`json\\n`;\n        result += `{\\n`;\n        result += `  \"model\": \"${topModel.id}\",\\n`;\n        result += `  \"temperature\": 0.7,\\n`;\n        result += `  \"maxTokens\": ${Math.min(4000, topModel.maxTokens)}\\n`;\n        result += `}\\n`;\n        result += `\\`\\`\\``;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to get model recommendations: ${error.message}`);\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2fdcd487798de6f902da21a86288e08330189b56"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10i08mjd2e = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10i08mjd2e();
cov_10i08mjd2e().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_10i08mjd2e().s[1]++;
exports.createAIModelsTools = createAIModelsTools;
const zod_1 =
/* istanbul ignore next */
(cov_10i08mjd2e().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_10i08mjd2e().s[3]++, require("fastmcp"));
// Zod schemas for AI model management
const ModelSearchSchema =
/* istanbul ignore next */
(cov_10i08mjd2e().s[4]++, zod_1.z.object({
  query: zod_1.z.string().optional(),
  provider: zod_1.z.enum(['openai', 'anthropic', 'google', 'huggingface', 'local', 'all']).optional().default('all'),
  capability: zod_1.z.enum(['text-generation', 'chat', 'completion', 'embedding', 'classification', 'all']).optional().default('all'),
  maxResults: zod_1.z.number().min(1).max(100).optional().default(20)
}));
const _ModelConfigurationSchema =
/* istanbul ignore next */
(cov_10i08mjd2e().s[5]++, zod_1.z.object({
  modelId: zod_1.z.string().min(1, 'Model ID is required'),
  provider: zod_1.z.string().min(1, 'Provider is required'),
  configuration: zod_1.z.record(zod_1.z.any())
}));
const ModelComparisonSchema =
/* istanbul ignore next */
(cov_10i08mjd2e().s[6]++, zod_1.z.object({
  modelIds: zod_1.z.array(zod_1.z.string()).min(2, 'At least 2 models required for comparison'),
  criteria: zod_1.z.array(zod_1.z.enum(['cost', 'speed', 'quality', 'capabilities'])).optional().default(['cost', 'speed', 'quality'])
}));
// Model database (in a real implementation, this would be fetched from APIs or databases)
const AI_MODELS_DATABASE =
/* istanbul ignore next */
(cov_10i08mjd2e().s[7]++, {
  openai: [{
    id: 'gpt-4-turbo',
    name: 'GPT-4 Turbo',
    provider: 'openai',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion'],
    maxTokens: 128000,
    costPer1kTokens: {
      input: 0.01,
      output: 0.03
    },
    speed: 'fast',
    quality: 'excellent',
    description: 'Most capable GPT-4 model with 128k context window'
  }, {
    id: 'gpt-3.5-turbo',
    name: 'GPT-3.5 Turbo',
    provider: 'openai',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion'],
    maxTokens: 16385,
    costPer1kTokens: {
      input: 0.0015,
      output: 0.002
    },
    speed: 'very-fast',
    quality: 'good',
    description: 'Fast and efficient model for most tasks'
  }],
  anthropic: [{
    id: 'claude-3-opus',
    name: 'Claude 3 Opus',
    provider: 'anthropic',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion', 'analysis'],
    maxTokens: 200000,
    costPer1kTokens: {
      input: 0.015,
      output: 0.075
    },
    speed: 'medium',
    quality: 'excellent',
    description: 'Most powerful Claude model with exceptional reasoning'
  }, {
    id: 'claude-3-sonnet',
    name: 'Claude 3 Sonnet',
    provider: 'anthropic',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion'],
    maxTokens: 200000,
    costPer1kTokens: {
      input: 0.003,
      output: 0.015
    },
    speed: 'fast',
    quality: 'very-good',
    description: 'Balanced model with good performance and cost efficiency'
  }],
  google: [{
    id: 'gemini-pro',
    name: 'Gemini Pro',
    provider: 'google',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion', 'multimodal'],
    maxTokens: 32768,
    costPer1kTokens: {
      input: 0.00025,
      output: 0.0005
    },
    speed: 'fast',
    quality: 'good',
    description: "Google's multimodal AI model"
  }],
  local: [{
    id: 'llama-2-7b',
    name: 'Llama 2 7B',
    provider: 'local',
    type: 'chat',
    capabilities: ['text-generation', 'chat', 'completion'],
    maxTokens: 4096,
    costPer1kTokens: {
      input: 0,
      output: 0
    },
    speed: 'medium',
    quality: 'good',
    description: 'Open-source model that can run locally'
  }]
});
// Tool registration function for AI model management tools
function createAIModelsTools(getClient, server) {
  /* istanbul ignore next */
  cov_10i08mjd2e().f[0]++;
  cov_10i08mjd2e().s[8]++;
  // List available AI models
  server.addTool({
    name: 'list-ai-models',
    description: 'List available AI models with filtering by provider, capability, and search terms',
    parameters: ModelSearchSchema,
    annotations: {
      title: 'List AI Models',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_10i08mjd2e().f[1]++;
      cov_10i08mjd2e().s[9]++;
      try {
        let allModels =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[10]++, []);
        // Collect models from all providers
        /* istanbul ignore next */
        cov_10i08mjd2e().s[11]++;
        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[2]++;
          cov_10i08mjd2e().s[12]++;
          if (
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[1][0]++, args.provider === 'all') ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[1][1]++, args.provider === provider)) {
            /* istanbul ignore next */
            cov_10i08mjd2e().b[0][0]++;
            cov_10i08mjd2e().s[13]++;
            allModels.push(...models);
          } else
          /* istanbul ignore next */
          {
            cov_10i08mjd2e().b[0][1]++;
          }
        });
        // Filter by capability
        /* istanbul ignore next */
        cov_10i08mjd2e().s[14]++;
        if (args.capability !== 'all') {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[2][0]++;
          cov_10i08mjd2e().s[15]++;
          allModels = allModels.filter(model => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[3]++;
            cov_10i08mjd2e().s[16]++;
            return model.capabilities.includes(args.capability);
          });
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[2][1]++;
        }
        // Filter by search query
        cov_10i08mjd2e().s[17]++;
        if (args.query) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[3][0]++;
          const query =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[18]++, args.query.toLowerCase());
          /* istanbul ignore next */
          cov_10i08mjd2e().s[19]++;
          allModels = allModels.filter(model => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[4]++;
            cov_10i08mjd2e().s[20]++;
            return /* istanbul ignore next */(cov_10i08mjd2e().b[4][0]++, model.name.toLowerCase().includes(query)) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[4][1]++, model.id.toLowerCase().includes(query)) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[4][2]++, model.description.toLowerCase().includes(query)) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[4][3]++, model.provider.toLowerCase().includes(query));
          });
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[3][1]++;
        }
        // Limit results
        cov_10i08mjd2e().s[21]++;
        allModels = allModels.slice(0, args.maxResults);
        /* istanbul ignore next */
        cov_10i08mjd2e().s[22]++;
        if (allModels.length === 0) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[5][0]++;
          cov_10i08mjd2e().s[23]++;
          return `No AI models found matching your criteria:\n` + `- Provider: ${args.provider}\n` + `- Capability: ${args.capability}\n` + `- Query: ${
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[6][0]++, args.query) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[6][1]++, 'None')}\n\n` + `Try broadening your search criteria.`;
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[5][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[24]++, `Found ${allModels.length} AI model(s):\n\n`);
        /* istanbul ignore next */
        cov_10i08mjd2e().s[25]++;
        allModels.forEach((model, index) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[5]++;
          const inputCost =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[26]++, model.costPer1kTokens.input);
          const outputCost =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[27]++, model.costPer1kTokens.output);
          /* istanbul ignore next */
          cov_10i08mjd2e().s[28]++;
          result += `**${index + 1}. ${model.name}** (${model.id})\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[29]++;
          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[30]++;
          result += `   - Type: ${model.type}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[31]++;
          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[32]++;
          result += `   - Speed: ${model.speed}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[33]++;
          result += `   - Quality: ${model.quality}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[34]++;
          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens (input/output)\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[35]++;
          result += `   - Capabilities: ${model.capabilities.join(', ')}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[36]++;
          result += `   - Description: ${model.description}\n\n`;
        });
        /* istanbul ignore next */
        cov_10i08mjd2e().s[37]++;
        result += `**Usage:** Use the model ID (e.g., "${allModels[0].id}") when configuring AI nodes in n8n workflows.`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[38]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_10i08mjd2e().s[39]++;
        throw new fastmcp_1.UserError(`Failed to list AI models: ${error.message}`);
      }
    }
  });
  // Get detailed model information
  /* istanbul ignore next */
  cov_10i08mjd2e().s[40]++;
  server.addTool({
    name: 'get-ai-model-info',
    description: 'Get detailed information about a specific AI model including capabilities, pricing, and configuration options',
    parameters: zod_1.z.object({
      modelId: zod_1.z.string().min(1, 'Model ID is required')
    }),
    annotations: {
      title: 'Get AI Model Info',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_10i08mjd2e().f[6]++;
      cov_10i08mjd2e().s[41]++;
      try {
        let foundModel =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[42]++, null);
        // Search for the model across all providers
        /* istanbul ignore next */
        cov_10i08mjd2e().s[43]++;
        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[7]++;
          const model =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[44]++, models.find(m => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[8]++;
            cov_10i08mjd2e().s[45]++;
            return m.id === args.modelId;
          }));
          /* istanbul ignore next */
          cov_10i08mjd2e().s[46]++;
          if (model) {
            /* istanbul ignore next */
            cov_10i08mjd2e().b[7][0]++;
            cov_10i08mjd2e().s[47]++;
            foundModel = model;
          } else
          /* istanbul ignore next */
          {
            cov_10i08mjd2e().b[7][1]++;
          }
        });
        /* istanbul ignore next */
        cov_10i08mjd2e().s[48]++;
        if (!foundModel) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[8][0]++;
          cov_10i08mjd2e().s[49]++;
          return `Model "${args.modelId}" not found.\n\n` + `Use the "list-ai-models" tool to see available models.`;
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[8][1]++;
        }
        const model =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[50]++, foundModel);
        const inputCost =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[51]++, model.costPer1kTokens.input);
        const outputCost =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[52]++, model.costPer1kTokens.output);
        // Calculate cost examples
        const exampleCosts =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[53]++, {
          smallRequest: (1000 * inputCost + 500 * outputCost).toFixed(4),
          mediumRequest: (5000 * inputCost + 2000 * outputCost).toFixed(4),
          largeRequest: (20000 * inputCost + 5000 * outputCost).toFixed(4)
        });
        /* istanbul ignore next */
        cov_10i08mjd2e().s[54]++;
        return `**${model.name}** (${model.id})\n\n` + `**Basic Information:**\n` + `- Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\n` + `- Model Type: ${model.type}\n` + `- Max Context: ${model.maxTokens.toLocaleString()} tokens\n` + `- Speed Rating: ${model.speed}\n` + `- Quality Rating: ${model.quality}\n\n` + `**Capabilities:**\n` + model.capabilities.map(cap => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[9]++;
          cov_10i08mjd2e().s[55]++;
          return `- ${cap.charAt(0).toUpperCase() + cap.slice(1).replace('-', ' ')}`;
        }).join('\n') + '\n\n' + `**Pricing:**\n` + `- Input: $${inputCost} per 1,000 tokens\n` + `- Output: $${outputCost} per 1,000 tokens\n\n` + `**Cost Examples:**\n` + `- Small request (1k input, 500 output): $${exampleCosts.smallRequest}\n` + `- Medium request (5k input, 2k output): $${exampleCosts.mediumRequest}\n` + `- Large request (20k input, 5k output): $${exampleCosts.largeRequest}\n\n` + `**Description:**\n${model.description}\n\n` + `**Configuration Example for n8n:**\n\`\`\`json\n` + `{\n` + `  "model": "${model.id}",\n` + `  "temperature": 0.7,\n` + `  "maxTokens": ${Math.min(4000, model.maxTokens)},\n` + `  "provider": "${model.provider}"\n` + `}\n\`\`\`\n\n` + `**Use Case Recommendations:**\n` + (model.quality === 'excellent' ?
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[9][0]++, '- Complex reasoning and analysis tasks\n') :
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[9][1]++, '')) + (
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[11][0]++, model.speed === 'very-fast') ||
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[11][1]++, model.speed === 'fast') ?
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[10][0]++, '- Real-time applications\n') :
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[10][1]++, '')) + (inputCost < 0.005 ?
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[12][0]++, '- High-volume processing\n') :
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[12][1]++, '')) + (model.maxTokens > 50000 ?
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[13][0]++, '- Long document processing\n') :
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[13][1]++, '')) + (model.capabilities.includes('multimodal') ?
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[14][0]++, '- Image and text processing\n') :
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[14][1]++, ''));
      } catch (error) {
        /* istanbul ignore next */
        cov_10i08mjd2e().s[56]++;
        throw new fastmcp_1.UserError(`Failed to get model information: ${error.message}`);
      }
    }
  });
  // Compare AI models
  /* istanbul ignore next */
  cov_10i08mjd2e().s[57]++;
  server.addTool({
    name: 'compare-ai-models',
    description: 'Compare multiple AI models across different criteria like cost, speed, quality, and capabilities',
    parameters: ModelComparisonSchema,
    annotations: {
      title: 'Compare AI Models',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_10i08mjd2e().f[10]++;
      cov_10i08mjd2e().s[58]++;
      try {
        const models =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[59]++, []);
        // Find all requested models
        /* istanbul ignore next */
        cov_10i08mjd2e().s[60]++;
        args.modelIds.forEach(modelId => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[11]++;
          let foundModel =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[61]++, null);
          /* istanbul ignore next */
          cov_10i08mjd2e().s[62]++;
          Object.entries(AI_MODELS_DATABASE).forEach(([provider, providerModels]) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[12]++;
            const model =
            /* istanbul ignore next */
            (cov_10i08mjd2e().s[63]++, providerModels.find(m => {
              /* istanbul ignore next */
              cov_10i08mjd2e().f[13]++;
              cov_10i08mjd2e().s[64]++;
              return m.id === modelId;
            }));
            /* istanbul ignore next */
            cov_10i08mjd2e().s[65]++;
            if (model) {
              /* istanbul ignore next */
              cov_10i08mjd2e().b[15][0]++;
              cov_10i08mjd2e().s[66]++;
              foundModel = model;
            } else
            /* istanbul ignore next */
            {
              cov_10i08mjd2e().b[15][1]++;
            }
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[67]++;
          if (foundModel) {
            /* istanbul ignore next */
            cov_10i08mjd2e().b[16][0]++;
            cov_10i08mjd2e().s[68]++;
            models.push(foundModel);
          } else
          /* istanbul ignore next */
          {
            cov_10i08mjd2e().b[16][1]++;
          }
        });
        /* istanbul ignore next */
        cov_10i08mjd2e().s[69]++;
        if (models.length < 2) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[17][0]++;
          cov_10i08mjd2e().s[70]++;
          return `Found only ${models.length} model(s) out of ${args.modelIds.length} requested.\n\n` + `Missing models: ${args.modelIds.filter(id => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[14]++;
            cov_10i08mjd2e().s[71]++;
            return !models.some(m => {
              /* istanbul ignore next */
              cov_10i08mjd2e().f[15]++;
              cov_10i08mjd2e().s[72]++;
              return m.id === id;
            });
          }).join(', ')}\n\n` + `Use "list-ai-models" to see available models.`;
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[17][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[73]++, `**AI Model Comparison** (${models.length} models)\n\n`);
        // Create comparison table
        /* istanbul ignore next */
        cov_10i08mjd2e().s[74]++;
        result += `| Model | Provider | Type | Max Tokens | Speed | Quality |\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[75]++;
        result += `|-------|----------|------|------------|--------|----------|\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[76]++;
        models.forEach(model => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[16]++;
          cov_10i08mjd2e().s[77]++;
          result += `| ${model.name} | ${model.provider} | ${model.type} | ${model.maxTokens.toLocaleString()} | ${model.speed} | ${model.quality} |\n`;
        });
        /* istanbul ignore next */
        cov_10i08mjd2e().s[78]++;
        result += '\n';
        // Cost comparison
        /* istanbul ignore next */
        cov_10i08mjd2e().s[79]++;
        if (args.criteria.includes('cost')) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[18][0]++;
          cov_10i08mjd2e().s[80]++;
          result += `**Cost Comparison (per 1k tokens):**\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[81]++;
          models.forEach(model => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[17]++;
            const inputCost =
            /* istanbul ignore next */
            (cov_10i08mjd2e().s[82]++, model.costPer1kTokens.input);
            const outputCost =
            /* istanbul ignore next */
            (cov_10i08mjd2e().s[83]++, model.costPer1kTokens.output);
            /* istanbul ignore next */
            cov_10i08mjd2e().s[84]++;
            result += `- **${model.name}**: $${inputCost} input, $${outputCost} output\n`;
          });
          // Find most cost-effective
          const cheapestInput =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[85]++, models.reduce((min, model) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[18]++;
            cov_10i08mjd2e().s[86]++;
            return model.costPer1kTokens.input < min.costPer1kTokens.input ?
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[19][0]++, model) :
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[19][1]++, min);
          }));
          const cheapestOutput =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[87]++, models.reduce((min, model) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[19]++;
            cov_10i08mjd2e().s[88]++;
            return model.costPer1kTokens.output < min.costPer1kTokens.output ?
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[20][0]++, model) :
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[20][1]++, min);
          }));
          /* istanbul ignore next */
          cov_10i08mjd2e().s[89]++;
          result += `\n💰 **Most Cost-Effective:**\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[90]++;
          result += `- Input: ${cheapestInput.name} ($${cheapestInput.costPer1kTokens.input})\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[91]++;
          result += `- Output: ${cheapestOutput.name} ($${cheapestOutput.costPer1kTokens.output})\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[18][1]++;
        }
        // Speed comparison
        cov_10i08mjd2e().s[92]++;
        if (args.criteria.includes('speed')) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[21][0]++;
          const speedRanking =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[93]++, {
            'very-fast': 5,
            fast: 4,
            medium: 3,
            slow: 2,
            'very-slow': 1
          });
          const sortedBySpeed =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[94]++, models.sort((a, b) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[20]++;
            cov_10i08mjd2e().s[95]++;
            return (
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[22][0]++, speedRanking[b.speed]) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[22][1]++, 3)) - (
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[23][0]++, speedRanking[a.speed]) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[23][1]++, 3));
          }));
          /* istanbul ignore next */
          cov_10i08mjd2e().s[96]++;
          result += `**Speed Ranking:**\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[97]++;
          sortedBySpeed.forEach((model, index) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[21]++;
            cov_10i08mjd2e().s[98]++;
            result += `${index + 1}. **${model.name}**: ${model.speed}\n`;
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[99]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[21][1]++;
        }
        // Quality comparison
        cov_10i08mjd2e().s[100]++;
        if (args.criteria.includes('quality')) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[24][0]++;
          const qualityRanking =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[101]++, {
            excellent: 5,
            'very-good': 4,
            good: 3,
            fair: 2,
            poor: 1
          });
          const sortedByQuality =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[102]++, models.sort((a, b) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[22]++;
            cov_10i08mjd2e().s[103]++;
            return (
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[25][0]++, qualityRanking[b.quality]) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[25][1]++, 3)) - (
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[26][0]++, qualityRanking[a.quality]) ||
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[26][1]++, 3));
          }));
          /* istanbul ignore next */
          cov_10i08mjd2e().s[104]++;
          result += `**Quality Ranking:**\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[105]++;
          sortedByQuality.forEach((model, index) => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[23]++;
            cov_10i08mjd2e().s[106]++;
            result += `${index + 1}. **${model.name}**: ${model.quality}\n`;
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[107]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[24][1]++;
        }
        // Capabilities comparison
        cov_10i08mjd2e().s[108]++;
        if (args.criteria.includes('capabilities')) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[27][0]++;
          cov_10i08mjd2e().s[109]++;
          result += `**Capabilities Comparison:**\n`;
          const allCapabilities =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[110]++, [...new Set(models.flatMap(m => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[24]++;
            cov_10i08mjd2e().s[111]++;
            return m.capabilities;
          }))]);
          /* istanbul ignore next */
          cov_10i08mjd2e().s[112]++;
          allCapabilities.forEach(capability => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[25]++;
            const modelsWithCapability =
            /* istanbul ignore next */
            (cov_10i08mjd2e().s[113]++, models.filter(m => {
              /* istanbul ignore next */
              cov_10i08mjd2e().f[26]++;
              cov_10i08mjd2e().s[114]++;
              return m.capabilities.includes(capability);
            }));
            /* istanbul ignore next */
            cov_10i08mjd2e().s[115]++;
            result += `- **${capability.charAt(0).toUpperCase() + capability.slice(1).replace('-', ' ')}**: `;
            /* istanbul ignore next */
            cov_10i08mjd2e().s[116]++;
            result += modelsWithCapability.map(m => {
              /* istanbul ignore next */
              cov_10i08mjd2e().f[27]++;
              cov_10i08mjd2e().s[117]++;
              return m.name;
            }).join(', ') + '\n';
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[118]++;
          result += '\n';
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[27][1]++;
        }
        // Recommendations
        cov_10i08mjd2e().s[119]++;
        result += `**Recommendations:**\n`;
        const cheapest =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[120]++, models.reduce((min, model) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[28]++;
          cov_10i08mjd2e().s[121]++;
          return model.costPer1kTokens.input + model.costPer1kTokens.output < min.costPer1kTokens.input + min.costPer1kTokens.output ?
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[28][0]++, model) :
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[28][1]++, min);
        }));
        const fastest =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[122]++, models.reduce((max, model) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[29]++;
          const speedValue =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[123]++, {
            'very-fast': 5,
            fast: 4,
            medium: 3,
            slow: 2,
            'very-slow': 1
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[124]++;
          return (
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[30][0]++, speedValue[model.speed]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[30][1]++, 3)) > (
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[31][0]++, speedValue[max.speed]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[31][1]++, 3)) ?
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[29][0]++, model) :
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[29][1]++, max);
        }));
        const highest_quality =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[125]++, models.reduce((max, model) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[30]++;
          const qualityValue =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[126]++, {
            excellent: 5,
            'very-good': 4,
            good: 3,
            fair: 2,
            poor: 1
          });
          /* istanbul ignore next */
          cov_10i08mjd2e().s[127]++;
          return (
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[33][0]++, qualityValue[model.quality]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[33][1]++, 3)) > (
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[34][0]++, qualityValue[max.quality]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[34][1]++, 3)) ?
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[32][0]++, model) :
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[32][1]++, max);
        }));
        /* istanbul ignore next */
        cov_10i08mjd2e().s[128]++;
        result += `- **For budget-conscious projects**: ${cheapest.name}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[129]++;
        result += `- **For real-time applications**: ${fastest.name}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[130]++;
        result += `- **For complex reasoning**: ${highest_quality.name}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[131]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_10i08mjd2e().s[132]++;
        throw new fastmcp_1.UserError(`Failed to compare AI models: ${error.message}`);
      }
    }
  });
  // Get model recommendations
  /* istanbul ignore next */
  cov_10i08mjd2e().s[133]++;
  server.addTool({
    name: 'recommend-ai-model',
    description: 'Get AI model recommendations based on use case, budget, and performance requirements',
    parameters: zod_1.z.object({
      useCase: zod_1.z.enum(['chatbot', 'content-generation', 'code-generation', 'data-analysis', 'translation', 'summarization', 'classification', 'general-purpose']),
      budget: zod_1.z.enum(['low', 'medium', 'high', 'unlimited']).optional().default('medium'),
      priority: zod_1.z.enum(['cost', 'speed', 'quality', 'balanced']).optional().default('balanced'),
      maxTokens: zod_1.z.number().min(1000).max(200000).optional()
    }),
    annotations: {
      title: 'Recommend AI Model',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_10i08mjd2e().f[31]++;
      cov_10i08mjd2e().s[134]++;
      try {
        let allModels =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[135]++, []);
        /* istanbul ignore next */
        cov_10i08mjd2e().s[136]++;
        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[32]++;
          cov_10i08mjd2e().s[137]++;
          allModels.push(...models);
        });
        // Filter by token requirements
        /* istanbul ignore next */
        cov_10i08mjd2e().s[138]++;
        if (args.maxTokens) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[35][0]++;
          cov_10i08mjd2e().s[139]++;
          allModels = allModels.filter(model => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[33]++;
            cov_10i08mjd2e().s[140]++;
            return model.maxTokens >= args.maxTokens;
          });
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[35][1]++;
        }
        // Filter by budget
        cov_10i08mjd2e().s[141]++;
        if (args.budget !== 'unlimited') {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[36][0]++;
          const budgetLimits =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[142]++, {
            low: 0.005,
            // max $0.005 per 1k tokens
            medium: 0.02,
            // max $0.02 per 1k tokens
            high: 0.1 // max $0.1 per 1k tokens
          });
          const limit =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[143]++,
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[37][0]++, budgetLimits[args.budget]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[37][1]++, 0.02));
          /* istanbul ignore next */
          cov_10i08mjd2e().s[144]++;
          allModels = allModels.filter(model => {
            /* istanbul ignore next */
            cov_10i08mjd2e().f[34]++;
            cov_10i08mjd2e().s[145]++;
            return /* istanbul ignore next */(cov_10i08mjd2e().b[38][0]++, model.costPer1kTokens.input <= limit) &&
            /* istanbul ignore next */
            (cov_10i08mjd2e().b[38][1]++, model.costPer1kTokens.output <= limit * 2);
          });
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[36][1]++;
        }
        // Score models based on priority
        const scoredModels =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[146]++, allModels.map(model => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[35]++;
          let score =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[147]++, 0);
          // Use case specific scoring
          /* istanbul ignore next */
          cov_10i08mjd2e().s[148]++;
          switch (args.useCase) {
            case 'chatbot':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[39][0]++;
              cov_10i08mjd2e().s[149]++;
              if (model.capabilities.includes('chat')) {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[40][0]++;
                cov_10i08mjd2e().s[150]++;
                score += 30;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[40][1]++;
              }
              cov_10i08mjd2e().s[151]++;
              if (
              /* istanbul ignore next */
              (cov_10i08mjd2e().b[42][0]++, model.speed === 'fast') ||
              /* istanbul ignore next */
              (cov_10i08mjd2e().b[42][1]++, model.speed === 'very-fast')) {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[41][0]++;
                cov_10i08mjd2e().s[152]++;
                score += 20;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[41][1]++;
              }
              cov_10i08mjd2e().s[153]++;
              break;
            case 'content-generation':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[39][1]++;
              cov_10i08mjd2e().s[154]++;
              if (model.quality === 'excellent') {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[43][0]++;
                cov_10i08mjd2e().s[155]++;
                score += 30;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[43][1]++;
              }
              cov_10i08mjd2e().s[156]++;
              if (model.maxTokens > 32000) {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[44][0]++;
                cov_10i08mjd2e().s[157]++;
                score += 20;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[44][1]++;
              }
              cov_10i08mjd2e().s[158]++;
              break;
            case 'code-generation':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[39][2]++;
              cov_10i08mjd2e().s[159]++;
              if (model.capabilities.includes('completion')) {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[45][0]++;
                cov_10i08mjd2e().s[160]++;
                score += 30;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[45][1]++;
              }
              cov_10i08mjd2e().s[161]++;
              if (model.quality === 'excellent') {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[46][0]++;
                cov_10i08mjd2e().s[162]++;
                score += 20;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[46][1]++;
              }
              cov_10i08mjd2e().s[163]++;
              break;
            case 'data-analysis':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[39][3]++;
              cov_10i08mjd2e().s[164]++;
              if (model.quality === 'excellent') {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[47][0]++;
                cov_10i08mjd2e().s[165]++;
                score += 40;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[47][1]++;
              }
              cov_10i08mjd2e().s[166]++;
              if (model.maxTokens > 50000) {
                /* istanbul ignore next */
                cov_10i08mjd2e().b[48][0]++;
                cov_10i08mjd2e().s[167]++;
                score += 10;
              } else
              /* istanbul ignore next */
              {
                cov_10i08mjd2e().b[48][1]++;
              }
              cov_10i08mjd2e().s[168]++;
              break;
            default:
              /* istanbul ignore next */
              cov_10i08mjd2e().b[39][4]++;
              cov_10i08mjd2e().s[169]++;
              score += 20;
            // Base score for general use
          }
          // Priority-based scoring
          /* istanbul ignore next */
          cov_10i08mjd2e().s[170]++;
          switch (args.priority) {
            case 'cost':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[49][0]++;
              {
                const totalCost =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[171]++, model.costPer1kTokens.input + model.costPer1kTokens.output);
                /* istanbul ignore next */
                cov_10i08mjd2e().s[172]++;
                score += Math.max(0, 50 - totalCost * 1000); // Lower cost = higher score
                /* istanbul ignore next */
                cov_10i08mjd2e().s[173]++;
                break;
              }
            case 'speed':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[49][1]++;
              {
                const speedScores =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[174]++, {
                  'very-fast': 50,
                  fast: 40,
                  medium: 30,
                  slow: 20,
                  'very-slow': 10
                });
                /* istanbul ignore next */
                cov_10i08mjd2e().s[175]++;
                score +=
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[50][0]++, speedScores[model.speed]) ||
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[50][1]++, 25);
                /* istanbul ignore next */
                cov_10i08mjd2e().s[176]++;
                break;
              }
            case 'quality':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[49][2]++;
              {
                const qualityScores =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[177]++, {
                  excellent: 50,
                  'very-good': 40,
                  good: 30,
                  fair: 20,
                  poor: 10
                });
                /* istanbul ignore next */
                cov_10i08mjd2e().s[178]++;
                score +=
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[51][0]++, qualityScores[model.quality]) ||
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[51][1]++, 25);
                /* istanbul ignore next */
                cov_10i08mjd2e().s[179]++;
                break;
              }
            case 'balanced':
              /* istanbul ignore next */
              cov_10i08mjd2e().b[49][3]++;
              {
                // Balanced scoring
                const balancedSpeedScores =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[180]++, {
                  'very-fast': 20,
                  fast: 18,
                  medium: 15,
                  slow: 10,
                  'very-slow': 5
                });
                const balancedQualityScores =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[181]++, {
                  excellent: 20,
                  'very-good': 18,
                  good: 15,
                  fair: 10,
                  poor: 5
                });
                const balancedCostScore =
                /* istanbul ignore next */
                (cov_10i08mjd2e().s[182]++, Math.max(0, 10 - (model.costPer1kTokens.input + model.costPer1kTokens.output) * 100));
                /* istanbul ignore next */
                cov_10i08mjd2e().s[183]++;
                score += (
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[52][0]++, balancedSpeedScores[model.speed]) ||
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[52][1]++, 10)) + (
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[53][0]++, balancedQualityScores[model.quality]) ||
                /* istanbul ignore next */
                (cov_10i08mjd2e().b[53][1]++, 10)) + balancedCostScore;
                /* istanbul ignore next */
                cov_10i08mjd2e().s[184]++;
                break;
              }
          }
          /* istanbul ignore next */
          cov_10i08mjd2e().s[185]++;
          return {
            ...model,
            score
          };
        }));
        // Sort by score and take top 3
        const recommendations =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[186]++, scoredModels.sort((a, b) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[36]++;
          cov_10i08mjd2e().s[187]++;
          return b.score - a.score;
        }).slice(0, 3));
        /* istanbul ignore next */
        cov_10i08mjd2e().s[188]++;
        if (recommendations.length === 0) {
          /* istanbul ignore next */
          cov_10i08mjd2e().b[54][0]++;
          cov_10i08mjd2e().s[189]++;
          return `No AI models found matching your criteria:\n` + `- Use Case: ${args.useCase}\n` + `- Budget: ${args.budget}\n` + `- Priority: ${args.priority}\n` + `- Max Tokens: ${
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[55][0]++, args.maxTokens) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[55][1]++, 'No limit')}\n\n` + `Try adjusting your requirements or budget.`;
        } else
        /* istanbul ignore next */
        {
          cov_10i08mjd2e().b[54][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[190]++, `**AI Model Recommendations for ${args.useCase}**\n\n`);
        /* istanbul ignore next */
        cov_10i08mjd2e().s[191]++;
        result += `**Your Requirements:**\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[192]++;
        result += `- Use Case: ${args.useCase}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[193]++;
        result += `- Budget: ${args.budget}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[194]++;
        result += `- Priority: ${args.priority}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[195]++;
        result += `- Max Tokens: ${
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[56][0]++, args.maxTokens?.toLocaleString()) ||
        /* istanbul ignore next */
        (cov_10i08mjd2e().b[56][1]++, 'No specific requirement')}\n\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[196]++;
        recommendations.forEach((model, index) => {
          /* istanbul ignore next */
          cov_10i08mjd2e().f[37]++;
          const ranking =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[197]++,
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[57][0]++, ['🥇', '🥈', '🥉'][index]) ||
          /* istanbul ignore next */
          (cov_10i08mjd2e().b[57][1]++, `${index + 1}.`));
          const inputCost =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[198]++, model.costPer1kTokens.input);
          const outputCost =
          /* istanbul ignore next */
          (cov_10i08mjd2e().s[199]++, model.costPer1kTokens.output);
          /* istanbul ignore next */
          cov_10i08mjd2e().s[200]++;
          result += `${ranking} **${model.name}** (Score: ${model.score.toFixed(0)})\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[201]++;
          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[202]++;
          result += `   - Speed: ${model.speed}, Quality: ${model.quality}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[203]++;
          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[204]++;
          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\n`;
          /* istanbul ignore next */
          cov_10i08mjd2e().s[205]++;
          result += `   - Best For: ${model.description}\n\n`;
        });
        const topModel =
        /* istanbul ignore next */
        (cov_10i08mjd2e().s[206]++, recommendations[0]);
        /* istanbul ignore next */
        cov_10i08mjd2e().s[207]++;
        result += `**Quick Start with ${topModel.name}:**\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[208]++;
        result += `\`\`\`json\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[209]++;
        result += `{\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[210]++;
        result += `  "model": "${topModel.id}",\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[211]++;
        result += `  "temperature": 0.7,\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[212]++;
        result += `  "maxTokens": ${Math.min(4000, topModel.maxTokens)}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[213]++;
        result += `}\n`;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[214]++;
        result += `\`\`\``;
        /* istanbul ignore next */
        cov_10i08mjd2e().s[215]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_10i08mjd2e().s[216]++;
        throw new fastmcp_1.UserError(`Failed to get model recommendations: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,