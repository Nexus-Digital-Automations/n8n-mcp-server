4dfd92eeeecdc4a3552ef306acf0405b
"use strict";
/**
 * n8n-specific Authentication Provider
 *
 * Implements authentication for n8n MCP server using n8n API keys and role-based access control.
 * Supports both Community and Enterprise n8n instances with appropriate feature detection.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultN8nAuth = exports.N8nAuthProvider = void 0;
exports.createN8nAuth = createN8nAuth;
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-unused-vars */
const n8nClient_js_1 = require("../client/n8nClient.js");
const authProvider_js_1 = require("./authProvider.js");
/**
 * n8n authentication provider
 *
 * Provides authentication using n8n API keys with role-based access control.
 * Supports both authenticated and anonymous access based on configuration.
 */
class N8nAuthProvider extends authProvider_js_1.BaseAuthProvider {
    config;
    authCache = new Map();
    constructor(config = {}) {
        super();
        // Set defaults
        this.config = {
            required: false,
            defaultBaseUrl: process.env.N8N_BASE_URL || '',
            defaultApiKey: process.env.N8N_API_KEY || '',
            validateConnection: true,
            cacheDuration: 5 * 60 * 1000, // 5 minutes
            defaultRoles: ['member'],
            ...config,
        };
    }
    /**
     * Authenticate client request
     */
    async authenticate(context) {
        try {
            // If authentication is not required, allow anonymous access
            if (!this.config.required) {
                return this.createAnonymousAuth(context);
            }
            // Extract credentials from context
            const credentials = this.extractCredentials(context);
            if (!credentials) {
                return {
                    success: false,
                    error: 'Authentication required but no credentials provided',
                };
            }
            // Check cache first
            const cacheKey = this.getCacheKey(credentials);
            const cached = this.authCache.get(cacheKey);
            if (cached && cached.expires > Date.now()) {
                return cached.result;
            }
            // Validate credentials
            const authResult = await this.validateCredentials(credentials);
            // Cache successful results
            if (authResult.success && this.config.cacheDuration > 0) {
                this.authCache.set(cacheKey, {
                    result: authResult,
                    expires: Date.now() + this.config.cacheDuration,
                });
            }
            return authResult;
        }
        catch (error) {
            return {
                success: false,
                error: `Authentication failed: ${error instanceof Error ? error.message : String(error)}`,
            };
        }
    }
    /**
     * Refresh authentication
     */
    async refresh(context) {
        // Clear cache and re-authenticate
        if (context.user) {
            const cacheKey = this.getCacheKey({
                baseUrl: context.user.n8nBaseUrl || this.config.defaultBaseUrl,
                apiKey: context.user.n8nApiKey || this.config.defaultApiKey,
            });
            this.authCache.delete(cacheKey);
        }
        return this.authenticate(context);
    }
    /**
     * Create anonymous authentication result
     */
    createAnonymousAuth(context) {
        const user = {
            id: 'anonymous',
            name: 'Anonymous User',
            roles: ['anonymous'],
            permissions: {
                community: true,
                enterprise: false,
                workflows: true,
                executions: true,
                credentials: false,
                users: false,
                audit: false,
            },
            n8nBaseUrl: this.config.defaultBaseUrl,
            n8nApiKey: this.config.defaultApiKey,
        };
        return {
            success: true,
            user,
            context: {
                authType: 'anonymous',
                features: ['community'],
            },
        };
    }
    /**
     * Extract credentials from request context
     */
    extractCredentials(context) {
        const headers = context.headers || {};
        // Try different credential sources
        const apiKey = headers['x-n8n-api-key'] ||
            headers['authorization']?.replace(/^Bearer\s+/, '') ||
            this.config.defaultApiKey;
        const baseUrl = headers['x-n8n-base-url'] || this.config.defaultBaseUrl;
        if (!apiKey || !baseUrl) {
            return null;
        }
        return { baseUrl, apiKey };
    }
    /**
     * Validate credentials against n8n instance
     */
    async validateCredentials(credentials) {
        try {
            // Create n8n client to test connection
            const client = new n8nClient_js_1.N8nClient(credentials.baseUrl, credentials.apiKey);
            if (this.config.validateConnection) {
                // Test connection by fetching user info or workflows
                try {
                    await client.getWorkflows({ limit: 1 });
                }
                catch (error) {
                    return {
                        success: false,
                        error: `Invalid n8n credentials or connection failed: ${error instanceof Error ? error.message : String(error)}`,
                    };
                }
            }
            // Create authenticated user
            const user = await this.createAuthenticatedUser(credentials, client);
            return {
                success: true,
                user,
                context: {
                    authType: 'n8n-api-key',
                    features: this.detectFeatures(user),
                },
            };
        }
        catch (error) {
            return {
                success: false,
                error: `Authentication validation failed: ${error instanceof Error ? error.message : String(error)}`,
            };
        }
    }
    /**
     * Create authenticated user from credentials
     */
    async createAuthenticatedUser(credentials, client) {
        // Detect user roles and permissions
        const roles = await this.detectUserRoles(client);
        const permissions = this.createPermissions(roles);
        return {
            id: `n8n-${credentials.baseUrl}-${credentials.apiKey.slice(-8)}`,
            name: 'n8n API User',
            roles,
            permissions,
            n8nBaseUrl: credentials.baseUrl,
            n8nApiKey: credentials.apiKey,
        };
    }
    /**
     * Detect user roles based on n8n API capabilities
     */
    async detectUserRoles(client) {
        const roles = [...this.config.defaultRoles];
        try {
            // Test Enterprise features to determine if user has elevated permissions
            try {
                await client.getUsers({ limit: 1 });
                roles.push('admin'); // Can access user management
            }
            catch {
                // User management not accessible, likely not an admin
            }
            try {
                await client.getProjects({ limit: 1 });
                roles.push('enterprise'); // Can access Enterprise features
            }
            catch {
                // Enterprise features not accessible
            }
        }
        catch {
            // Default to basic roles
        }
        return [...new Set(roles)]; // Remove duplicates
    }
    /**
     * Detect available features
     */
    detectFeatures(user) {
        const features = ['community'];
        if (user.permissions.enterprise) {
            features.push('enterprise');
        }
        if (user.permissions.users) {
            features.push('user-management');
        }
        if (user.permissions.audit) {
            features.push('audit');
        }
        return features;
    }
    /**
     * Generate cache key for credentials
     */
    getCacheKey(credentials) {
        return `${credentials.baseUrl}:${credentials.apiKey}`;
    }
    /**
     * Clear authentication cache
     */
    clearCache() {
        this.authCache.clear();
    }
    /**
     * Get cache statistics
     */
    getCacheStats() {
        const now = Date.now();
        let validEntries = 0;
        for (const [key, entry] of this.authCache.entries()) {
            if (entry.expires > now) {
                validEntries++;
            }
            else {
                this.authCache.delete(key); // Clean up expired entries
            }
        }
        return {
            size: this.authCache.size,
            entries: validEntries,
        };
    }
}
exports.N8nAuthProvider = N8nAuthProvider;
/**
 * Create n8n authentication provider from environment variables
 */
function createN8nAuth() {
    const config = {
        required: process.env.N8N_MCP_AUTH_REQUIRED === 'true',
        defaultBaseUrl: process.env.N8N_BASE_URL,
        defaultApiKey: process.env.N8N_API_KEY,
        validateConnection: process.env.N8N_MCP_VALIDATE_CONNECTION !== 'false',
        cacheDuration: process.env.N8N_MCP_AUTH_CACHE_DURATION
            ? parseInt(process.env.N8N_MCP_AUTH_CACHE_DURATION)
            : undefined,
        defaultRoles: process.env.N8N_MCP_DEFAULT_ROLES?.split(',') || undefined,
    };
    return new N8nAuthProvider(config);
}
/**
 * Default n8n authentication provider instance
 */
exports.defaultN8nAuth = createN8nAuth();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,