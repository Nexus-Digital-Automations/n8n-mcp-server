7f83777ef20cae88a9794d2a5a9db4ae
"use strict";
/**
 * FastMCP Authentication Middleware
 *
 * Provides authentication middleware for FastMCP server integration.
 * Handles authentication checking and access control for tools and resources.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AUTH_ENV_CONFIG = exports.FastMCPAuthMiddleware = void 0;
exports.createAuthMiddleware = createAuthMiddleware;
exports.requireAuth = requireAuth;
exports.requirePermission = requirePermission;
exports.parseAuthConfigFromEnv = parseAuthConfigFromEnv;
/**
 * Authentication middleware for FastMCP
 *
 * Integrates with FastMCP server to provide authentication and authorization
 * for tool access and resource access.
 */
class FastMCPAuthMiddleware {
    config;
    constructor(config) {
        this.config = {
            requireAuth: false,
            publicTools: ['init-n8n', 'status'],
            publicResources: [],
            authHeader: 'authorization',
            authErrorMessage: 'Authentication required',
            authzErrorMessage: 'Access denied',
            ...config,
        };
    }
    /**
     * Apply authentication middleware to FastMCP server
     */
    apply(server) {
        // Note: Current FastMCP version doesn't have built-in authentication
        // Authentication will be handled at the tool level through wrapper functions
        console.log('üîê Authentication middleware configured (tool-level implementation)');
        // Store reference for tool wrapping
        server._authMiddleware = this;
    }
    /**
     * Create authentication function for FastMCP
     */
    createAuthenticateFunction() {
        return async (request) => {
            try {
                const context = this.createRequestContext(request);
                const authResult = await this.config.authProvider.authenticate(context);
                if (!authResult.success) {
                    if (this.config.requireAuth) {
                        throw new Error(this.config.authErrorMessage);
                    }
                    // Allow anonymous access if auth not required
                    return null;
                }
                return authResult.user;
            }
            catch (error) {
                if (this.config.requireAuth) {
                    throw error;
                }
                return null;
            }
        };
    }
    /**
     * Check if tool access is allowed
     */
    async checkToolAccess(toolName, context) {
        // Public tools are always allowed
        if (this.config.publicTools.includes(toolName)) {
            return;
        }
        // Authenticate if not already done
        if (!context.user) {
            const authResult = await this.config.authProvider.authenticate(context);
            if (!authResult.success) {
                if (this.config.requireAuth) {
                    throw new Error(this.config.authErrorMessage);
                }
                return; // Allow anonymous access
            }
            context.user = authResult.user;
        }
        // Check tool access permissions
        const hasAccess = await this.config.authProvider.canAccessTool(toolName, context);
        if (!hasAccess) {
            throw new Error(`${this.config.authzErrorMessage}: ${toolName}`);
        }
    }
    /**
     * Check if resource access is allowed
     */
    async checkResourceAccess(resourceUri, context) {
        // Public resources are always allowed
        if (this.config.publicResources.some(pattern => resourceUri.startsWith(pattern))) {
            return;
        }
        // Authenticate if not already done
        if (!context.user) {
            const authResult = await this.config.authProvider.authenticate(context);
            if (!authResult.success) {
                if (this.config.requireAuth) {
                    throw new Error(this.config.authErrorMessage);
                }
                return; // Allow anonymous access
            }
            context.user = authResult.user;
        }
        // Check resource access permissions
        const hasAccess = await this.config.authProvider.canAccessResource(resourceUri, context);
        if (!hasAccess) {
            throw new Error(`${this.config.authzErrorMessage}: ${resourceUri}`);
        }
    }
    /**
     * Create request context from FastMCP request
     */
    createRequestContext(request) {
        return {
            clientId: request.clientId || request.id,
            headers: request.headers || {},
            metadata: request.metadata || {},
        };
    }
    /**
     * Wrap tool function with authentication
     */
    wrapTool(toolName, toolFunction) {
        return (async (...args) => {
            const context = this.extractContextFromArgs(args);
            await this.checkToolAccess(toolName, context);
            return toolFunction(...args);
        });
    }
    /**
     * Wrap resource function with authentication
     */
    wrapResource(resourceUri, resourceFunction) {
        return (async (...args) => {
            const context = this.extractContextFromArgs(args);
            await this.checkResourceAccess(resourceUri, context);
            return resourceFunction(...args);
        });
    }
    /**
     * Extract request context from function arguments
     */
    extractContextFromArgs(args) {
        // Look for context in arguments (FastMCP typically passes context as last argument)
        const lastArg = args[args.length - 1];
        if (lastArg && typeof lastArg === 'object' && lastArg.session) {
            return {
                clientId: lastArg.session?.id,
                headers: lastArg.headers || {},
                metadata: lastArg.metadata || {},
            };
        }
        return {
            headers: {},
            metadata: {},
        };
    }
}
exports.FastMCPAuthMiddleware = FastMCPAuthMiddleware;
/**
 * Create authentication middleware
 */
function createAuthMiddleware(config) {
    return new FastMCPAuthMiddleware(config);
}
/**
 * Authentication decorator for tools
 *
 * Usage:
 * @requireAuth('tool-name')
 * async function myTool() { ... }
 */
function requireAuth(toolName) {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            // This would be implemented with actual middleware instance
            console.log(`üîí Authentication check for tool: ${toolName}`);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
/**
 * Authorization decorator for tools with specific permissions
 *
 * Usage:
 * @requirePermission('workflows')
 * async function manageWorkflow() { ... }
 */
function requirePermission(permission) {
    return function (target, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            // This would be implemented with actual middleware instance
            console.log(`üõ°Ô∏è  Permission check for: ${permission}`);
            return originalMethod.apply(this, args);
        };
        return descriptor;
    };
}
/**
 * Environment variable configuration for authentication middleware
 */
exports.AUTH_ENV_CONFIG = {
    /** Whether authentication is required */
    REQUIRE_AUTH: 'N8N_MCP_REQUIRE_AUTH',
    /** Public tools (comma-separated) */
    PUBLIC_TOOLS: 'N8N_MCP_PUBLIC_TOOLS',
    /** Public resources (comma-separated) */
    PUBLIC_RESOURCES: 'N8N_MCP_PUBLIC_RESOURCES',
    /** Custom auth header name */
    AUTH_HEADER: 'N8N_MCP_AUTH_HEADER',
    /** Custom auth error message */
    AUTH_ERROR_MESSAGE: 'N8N_MCP_AUTH_ERROR_MESSAGE',
    /** Custom authz error message */
    AUTHZ_ERROR_MESSAGE: 'N8N_MCP_AUTHZ_ERROR_MESSAGE',
};
/**
 * Parse authentication middleware configuration from environment
 */
function parseAuthConfigFromEnv(authProvider) {
    return {
        authProvider,
        requireAuth: process.env[exports.AUTH_ENV_CONFIG.REQUIRE_AUTH] === 'true',
        publicTools: process.env[exports.AUTH_ENV_CONFIG.PUBLIC_TOOLS]?.split(',') || undefined,
        publicResources: process.env[exports.AUTH_ENV_CONFIG.PUBLIC_RESOURCES]?.split(',') || undefined,
        authHeader: process.env[exports.AUTH_ENV_CONFIG.AUTH_HEADER] || undefined,
        authErrorMessage: process.env[exports.AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE] || undefined,
        authzErrorMessage: process.env[exports.AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE] || undefined,
    };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,