{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/middleware.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/middleware.ts"],"sourcesContent":["/**\n * FastMCP Authentication Middleware\n *\n * Provides authentication middleware for FastMCP server integration.\n * Handles authentication checking and access control for tools and resources.\n */\n\n/* eslint-disable no-unused-vars */\n\nimport { FastMCP } from 'fastmcp';\nimport { AuthProvider, RequestContext } from './authProvider.js';\n\n/**\n * Authentication middleware configuration\n */\nexport interface AuthMiddlewareConfig {\n  /** Authentication provider to use */\n  authProvider: AuthProvider;\n\n  /** Whether to require authentication for all requests */\n  requireAuth?: boolean;\n\n  /** Tools that bypass authentication (always allowed) */\n  publicTools?: string[];\n\n  /** Resources that bypass authentication (always allowed) */\n  publicResources?: string[];\n\n  /** Custom authentication header name */\n  authHeader?: string;\n\n  /** Error message for authentication failures */\n  authErrorMessage?: string;\n\n  /** Error message for authorization failures */\n  authzErrorMessage?: string;\n}\n\n/**\n * Authentication middleware for FastMCP\n *\n * Integrates with FastMCP server to provide authentication and authorization\n * for tool access and resource access.\n */\nexport class FastMCPAuthMiddleware {\n  private config: Required<AuthMiddlewareConfig>;\n\n  constructor(config: AuthMiddlewareConfig) {\n    this.config = {\n      requireAuth: false,\n      publicTools: ['init-n8n', 'status'],\n      publicResources: [],\n      authHeader: 'authorization',\n      authErrorMessage: 'Authentication required',\n      authzErrorMessage: 'Access denied',\n      ...config,\n    };\n  }\n\n  /**\n   * Apply authentication middleware to FastMCP server\n   */\n  public apply(server: FastMCP): void {\n    // Note: Current FastMCP version doesn't have built-in authentication\n    // Authentication will be handled at the tool level through wrapper functions\n    console.log('🔐 Authentication middleware configured (tool-level implementation)');\n\n    // Store reference for tool wrapping\n    (server as any)._authMiddleware = this;\n  }\n\n  /**\n   * Create authentication function for FastMCP\n   */\n  private createAuthenticateFunction() {\n    return async (request: any) => {\n      try {\n        const context = this.createRequestContext(request);\n        const authResult = await this.config.authProvider.authenticate(context);\n\n        if (!authResult.success) {\n          if (this.config.requireAuth) {\n            throw new Error(this.config.authErrorMessage);\n          }\n          // Allow anonymous access if auth not required\n          return null;\n        }\n\n        return authResult.user;\n      } catch (error) {\n        if (this.config.requireAuth) {\n          throw error;\n        }\n        return null;\n      }\n    };\n  }\n\n  /**\n   * Check if tool access is allowed\n   */\n  public async checkToolAccess(toolName: string, context: RequestContext): Promise<void> {\n    // Public tools are always allowed\n    if (this.config.publicTools.includes(toolName)) {\n      return;\n    }\n\n    // Authenticate if not already done\n    if (!context.user) {\n      const authResult = await this.config.authProvider.authenticate(context);\n      if (!authResult.success) {\n        if (this.config.requireAuth) {\n          throw new Error(this.config.authErrorMessage);\n        }\n        return; // Allow anonymous access\n      }\n      context.user = authResult.user;\n    }\n\n    // Check tool access permissions\n    const hasAccess = await this.config.authProvider.canAccessTool(toolName, context);\n    if (!hasAccess) {\n      throw new Error(`${this.config.authzErrorMessage}: ${toolName}`);\n    }\n  }\n\n  /**\n   * Check if resource access is allowed\n   */\n  public async checkResourceAccess(resourceUri: string, context: RequestContext): Promise<void> {\n    // Public resources are always allowed\n    if (this.config.publicResources.some(pattern => resourceUri.startsWith(pattern))) {\n      return;\n    }\n\n    // Authenticate if not already done\n    if (!context.user) {\n      const authResult = await this.config.authProvider.authenticate(context);\n      if (!authResult.success) {\n        if (this.config.requireAuth) {\n          throw new Error(this.config.authErrorMessage);\n        }\n        return; // Allow anonymous access\n      }\n      context.user = authResult.user;\n    }\n\n    // Check resource access permissions\n    const hasAccess = await this.config.authProvider.canAccessResource(resourceUri, context);\n    if (!hasAccess) {\n      throw new Error(`${this.config.authzErrorMessage}: ${resourceUri}`);\n    }\n  }\n\n  /**\n   * Create request context from FastMCP request\n   */\n  private createRequestContext(request: any): RequestContext {\n    return {\n      clientId: request.clientId || request.id,\n      headers: request.headers || {},\n      metadata: request.metadata || {},\n    };\n  }\n\n  /**\n   * Wrap tool function with authentication\n   */\n  public wrapTool<T extends (...args: any[]) => any>(toolName: string, toolFunction: T): T {\n    return (async (...args: any[]) => {\n      const context = this.extractContextFromArgs(args);\n      await this.checkToolAccess(toolName, context);\n      return toolFunction(...args);\n    }) as T;\n  }\n\n  /**\n   * Wrap resource function with authentication\n   */\n  public wrapResource<T extends (...args: any[]) => any>(\n    resourceUri: string,\n    resourceFunction: T\n  ): T {\n    return (async (...args: any[]) => {\n      const context = this.extractContextFromArgs(args);\n      await this.checkResourceAccess(resourceUri, context);\n      return resourceFunction(...args);\n    }) as T;\n  }\n\n  /**\n   * Extract request context from function arguments\n   */\n  private extractContextFromArgs(args: any[]): RequestContext {\n    // Look for context in arguments (FastMCP typically passes context as last argument)\n    const lastArg = args[args.length - 1];\n    if (lastArg && typeof lastArg === 'object' && lastArg.session) {\n      return {\n        clientId: lastArg.session?.id,\n        headers: lastArg.headers || {},\n        metadata: lastArg.metadata || {},\n      };\n    }\n\n    return {\n      headers: {},\n      metadata: {},\n    };\n  }\n}\n\n/**\n * Create authentication middleware\n */\nexport function createAuthMiddleware(config: AuthMiddlewareConfig): FastMCPAuthMiddleware {\n  return new FastMCPAuthMiddleware(config);\n}\n\n/**\n * Authentication decorator for tools\n *\n * Usage:\n * @requireAuth('tool-name')\n * async function myTool() { ... }\n */\nexport function requireAuth(toolName: string) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // This would be implemented with actual middleware instance\n      console.log(`🔒 Authentication check for tool: ${toolName}`);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n * Authorization decorator for tools with specific permissions\n *\n * Usage:\n * @requirePermission('workflows')\n * async function manageWorkflow() { ... }\n */\nexport function requirePermission(permission: string) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = async function (...args: any[]) {\n      // This would be implemented with actual middleware instance\n      console.log(`🛡️  Permission check for: ${permission}`);\n      return originalMethod.apply(this, args);\n    };\n\n    return descriptor;\n  };\n}\n\n/**\n * Environment variable configuration for authentication middleware\n */\nexport const AUTH_ENV_CONFIG = {\n  /** Whether authentication is required */\n  REQUIRE_AUTH: 'N8N_MCP_REQUIRE_AUTH',\n\n  /** Public tools (comma-separated) */\n  PUBLIC_TOOLS: 'N8N_MCP_PUBLIC_TOOLS',\n\n  /** Public resources (comma-separated) */\n  PUBLIC_RESOURCES: 'N8N_MCP_PUBLIC_RESOURCES',\n\n  /** Custom auth header name */\n  AUTH_HEADER: 'N8N_MCP_AUTH_HEADER',\n\n  /** Custom auth error message */\n  AUTH_ERROR_MESSAGE: 'N8N_MCP_AUTH_ERROR_MESSAGE',\n\n  /** Custom authz error message */\n  AUTHZ_ERROR_MESSAGE: 'N8N_MCP_AUTHZ_ERROR_MESSAGE',\n} as const;\n\n/**\n * Parse authentication middleware configuration from environment\n */\nexport function parseAuthConfigFromEnv(authProvider: AuthProvider): AuthMiddlewareConfig {\n  return {\n    authProvider,\n    requireAuth: process.env[AUTH_ENV_CONFIG.REQUIRE_AUTH] === 'true',\n    publicTools: process.env[AUTH_ENV_CONFIG.PUBLIC_TOOLS]?.split(',') || undefined,\n    publicResources: process.env[AUTH_ENV_CONFIG.PUBLIC_RESOURCES]?.split(',') || undefined,\n    authHeader: process.env[AUTH_ENV_CONFIG.AUTH_HEADER] || undefined,\n    authErrorMessage: process.env[AUTH_ENV_CONFIG.AUTH_ERROR_MESSAGE] || undefined,\n    authzErrorMessage: process.env[AUTH_ENV_CONFIG.AUTHZ_ERROR_MESSAGE] || undefined,\n  };\n}\n"],"version":3}