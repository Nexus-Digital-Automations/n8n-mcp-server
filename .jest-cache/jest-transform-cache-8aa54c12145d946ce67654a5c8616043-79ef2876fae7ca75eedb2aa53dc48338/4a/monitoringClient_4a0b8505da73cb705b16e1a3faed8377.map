{"version":3,"names":["cov_uydxqjgb0","actualCoverage","fetch","MonitoringClient","client","baseUrl","apiKey","constructor","f","s","replace","makeRequest","endpoint","options","b","url","headers","response","ok","errorText","text","Error","status","contentType","get","includes","json","error","message","getHealthCheck","performManualHealthCheck","startTime","Date","now","databaseStatus","databaseResponseTime","dbStart","getWorkflows","limit","filesystemStatus","filesystemPermissions","overallStatus","version","uptime","process","database","responseTime","filesystem","permissions","getMetrics","workflowsResponse","executionsResponse","Promise","all","getExecutions","workflows","data","executions","activeWorkflows","filter","w","active","workflowsWithIssues","nodes","length","successfulExecutions","e","finished","stoppedAt","failedExecutions","runningExecutions","executionTimes","startedAt","map","getTime","averageExecutionTime","reduce","sum","time","errorRate","oneHourAgo","recentExecutions","throughput","systemUsage","getSystemResourceUsage","timestamp","toISOString","total","successful","failed","running","waiting","inactive","withIssues","performance","system","getWorkflowDiagnostics","workflowId","workflow","getWorkflow","allExecutions","slice","issues","recommendations","push","id","executionTime","undefined","finishedExecutions","successRate","healthStatus","nodeAnalysis","node","name","type","disabled","averageTime","workflowName","health","memUsage","memoryUsage","cpuUsage","cpuPercent","user","cpu","totalUsage","Math","min","processUsage","loadAverage","platform","require","loadavg","coreCount","cpus","memory","totalMemory","totalmem","freeMemory","freemem","usedMemory","processMemory","heapUsed","heapTotal","external","rss","utilization","disk","totalSpace","freeSpace","usedSpace","network","bytesReceived","bytesSent","packetsReceived","packetsSent","testConnectivity","success","getSystemDiagnostics","healthCheck","connectivity","resolve","overall","apiConnectivity","resources","environment","nodeVersion","architecture","arch"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/monitoringClient.ts"],"sourcesContent":["import fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\nimport {\n  SystemResourceUsage,\n  SystemDiagnostics,\n} from '../types/monitoringTypes.js';\n\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'warning' | 'critical' | 'degraded';\n  version: string;\n  uptime: number;\n  database: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  redis?: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  filesystem: {\n    status: 'accessible' | 'error';\n    permissions: 'read-write' | 'read-only' | 'no-access';\n  };\n}\n\nexport interface MetricsResponse {\n  timestamp: string;\n  executions: {\n    total: number;\n    successful: number;\n    failed: number;\n    running: number;\n    waiting: number;\n  };\n  workflows: {\n    total: number;\n    active: number;\n    inactive: number;\n    withIssues: number;\n  };\n  performance: {\n    averageExecutionTime: number;\n    throughput: number; // executions per minute\n    errorRate: number;\n  };\n  system: SystemResourceUsage;\n}\n\nexport interface WorkflowDiagnosticsResponse {\n  workflowId: string;\n  workflowName: string;\n  health: {\n    status: 'healthy' | 'warning' | 'critical';\n    issues: string[];\n    recommendations: string[];\n  };\n  performance: {\n    averageExecutionTime: number;\n    successRate: number;\n    recentExecutions: Array<{\n      id: string;\n      status: string;\n      executionTime: number;\n      timestamp: string;\n      error?: string;\n    }>;\n  };\n  nodes: Array<{\n    id: string;\n    name: string;\n    type: string;\n    issues: string[];\n    performance: {\n      averageTime: number;\n      successRate: number;\n    };\n  }>;\n}\n\nexport class MonitoringClient {\n  constructor(\n    private client: N8nClient,\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      'Content-Type': 'application/json',\n      ...((options.headers as Record<string, string>) || {}),\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Monitoring request failed: ${error.message}`);\n      }\n      throw new Error('Monitoring request failed with unknown error');\n    }\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealthCheck(): Promise<HealthCheckResponse> {\n    try {\n      // Try the standard n8n health endpoint\n      return await this.makeRequest<HealthCheckResponse>('/health');\n    } catch (error) {\n      // Fallback to manual health check using available endpoints\n      return await this.performManualHealthCheck();\n    }\n  }\n\n  /**\n   * Manual health check using available n8n API endpoints\n   */\n  private async performManualHealthCheck(): Promise<HealthCheckResponse> {\n    const startTime = Date.now();\n    let databaseStatus: 'connected' | 'disconnected' | 'error' = 'disconnected';\n    let databaseResponseTime = 0;\n\n    try {\n      // Test database connectivity by fetching workflows\n      const dbStart = Date.now();\n      await this.client.getWorkflows({ limit: 1 });\n      databaseResponseTime = Date.now() - dbStart;\n      databaseStatus = 'connected';\n    } catch (error) {\n      databaseStatus = 'error';\n      databaseResponseTime = Date.now() - startTime;\n    }\n\n    // Check filesystem access\n    let filesystemStatus: 'accessible' | 'error' = 'accessible';\n    let filesystemPermissions: 'read-write' | 'read-only' | 'no-access' = 'read-write';\n\n    try {\n      // This would typically check file system access\n      // For now, assume accessible if we can make API calls\n      if (databaseStatus === 'connected') {\n        filesystemStatus = 'accessible';\n        filesystemPermissions = 'read-write';\n      } else {\n        filesystemStatus = 'error';\n        filesystemPermissions = 'no-access';\n      }\n    } catch {\n      filesystemStatus = 'error';\n      filesystemPermissions = 'no-access';\n    }\n\n    // Determine overall status\n    let overallStatus: 'healthy' | 'warning' | 'critical' | 'degraded' = 'healthy';\n    if (databaseStatus === 'error' || filesystemStatus === 'error') {\n      overallStatus = 'critical';\n    } else if (databaseResponseTime > 1000) {\n      overallStatus = 'warning';\n    }\n\n    return {\n      status: overallStatus,\n      version: 'unknown', // Would need to be fetched from n8n API if available\n      uptime: process.uptime(),\n      database: {\n        status: databaseStatus,\n        responseTime: databaseResponseTime,\n      },\n      filesystem: {\n        status: filesystemStatus,\n        permissions: filesystemPermissions,\n      },\n    };\n  }\n\n  /**\n   * Get comprehensive system metrics\n   */\n  async getMetrics(): Promise<MetricsResponse> {\n\n    try {\n      // Fetch data in parallel\n      const [workflowsResponse, executionsResponse] = await Promise.all([\n        this.client.getWorkflows({ limit: 1000 }), // Get all workflows for analysis\n        this.client.getExecutions({ limit: 100 }), // Get recent executions\n      ]);\n\n      // Extract data from API response wrappers\n      const workflows = workflowsResponse.data;\n      const executions = executionsResponse.data;\n\n      // Analyze workflow states\n      const activeWorkflows = workflows.filter(w => w.active);\n      const workflowsWithIssues = workflows.filter(w => !w.active && w.nodes && w.nodes.length === 0);\n\n      // Analyze execution stats\n      const successfulExecutions = executions.filter(e => e.finished && !e.stoppedAt);\n      const failedExecutions = executions.filter(e => e.finished && e.stoppedAt);\n      const runningExecutions = executions.filter(e => !e.finished);\n\n      // Calculate performance metrics\n      const executionTimes = executions\n        .filter(e => e.finished && e.startedAt && e.stoppedAt)\n        .map(e => new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime());\n\n      const averageExecutionTime = executionTimes.length > 0 \n        ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length\n        : 0;\n\n      const errorRate = executions.length > 0 \n        ? (failedExecutions.length / executions.length) * 100 \n        : 0;\n\n      // Calculate throughput (executions per minute in last hour)\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      const recentExecutions = executions.filter(e => \n        new Date(e.startedAt) > oneHourAgo\n      );\n      const throughput = recentExecutions.length / 60; // per minute\n\n      // Get system resource usage\n      const systemUsage = this.getSystemResourceUsage();\n\n      return {\n        timestamp: new Date().toISOString(),\n        executions: {\n          total: executions.length,\n          successful: successfulExecutions.length,\n          failed: failedExecutions.length,\n          running: runningExecutions.length,\n          waiting: 0, // Would need to be calculated from queue if available\n        },\n        workflows: {\n          total: workflows.length,\n          active: activeWorkflows.length,\n          inactive: workflows.length - activeWorkflows.length,\n          withIssues: workflowsWithIssues.length,\n        },\n        performance: {\n          averageExecutionTime,\n          throughput,\n          errorRate,\n        },\n        system: systemUsage,\n      };\n    } catch (error) {\n      throw new Error(`Failed to get metrics: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get detailed workflow diagnostics\n   */\n  async getWorkflowDiagnostics(workflowId: string): Promise<WorkflowDiagnosticsResponse> {\n    try {\n      const [workflow, executionsResponse] = await Promise.all([\n        this.client.getWorkflow(workflowId),\n        this.client.getExecutions({ limit: 100 }), // Get more executions to filter by workflowId\n      ]);\n\n      // Extract executions data from API response wrapper and filter by workflowId\n      const allExecutions = executionsResponse.data;\n      const executions = allExecutions.filter(e => e.workflowId === workflowId).slice(0, 50);\n\n      // Analyze workflow health\n      const issues: string[] = [];\n      const recommendations: string[] = [];\n\n      if (!workflow.active) {\n        issues.push('Workflow is inactive');\n        recommendations.push('Consider activating the workflow if it should be running');\n      }\n\n      if (!workflow.nodes || workflow.nodes.length === 0) {\n        issues.push('Workflow has no nodes');\n        recommendations.push('Add nodes to define workflow logic');\n      }\n\n      // Analyze recent executions\n      const recentExecutions = executions.slice(0, 10).map(e => ({\n        id: e.id!,\n        status: e.finished ? (e.stoppedAt ? 'failed' : 'success') : 'running',\n        executionTime: e.finished && e.startedAt && e.stoppedAt \n          ? new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime()\n          : 0,\n        timestamp: e.startedAt,\n        error: e.stoppedAt ? 'Execution stopped' : undefined,\n      }));\n\n      // Calculate success rate\n      const finishedExecutions = executions.filter(e => e.finished);\n      const successfulExecutions = finishedExecutions.filter(e => !e.stoppedAt);\n      const successRate = finishedExecutions.length > 0 \n        ? (successfulExecutions.length / finishedExecutions.length) * 100 \n        : 100;\n\n      // Calculate average execution time\n      const executionTimes = recentExecutions\n        .filter(e => e.status === 'success' && e.executionTime > 0)\n        .map(e => e.executionTime);\n      const averageExecutionTime = executionTimes.length > 0 \n        ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length\n        : 0;\n\n      // Determine health status\n      let healthStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n      if (issues.length > 0 || successRate < 80) {\n        healthStatus = 'critical';\n      } else if (successRate < 95 || averageExecutionTime > 30000) {\n        healthStatus = 'warning';\n      }\n\n      // Analyze nodes\n      const nodeAnalysis = (workflow.nodes || []).map(node => ({\n        id: node.id,\n        name: node.name,\n        type: node.type,\n        issues: node.disabled ? ['Node is disabled'] : [],\n        performance: {\n          averageTime: 0, // Would need execution details to calculate\n          successRate: 100, // Would need execution details to calculate\n        },\n      }));\n\n      return {\n        workflowId: workflow.id!,\n        workflowName: workflow.name,\n        health: {\n          status: healthStatus,\n          issues,\n          recommendations,\n        },\n        performance: {\n          averageExecutionTime,\n          successRate,\n          recentExecutions,\n        },\n        nodes: nodeAnalysis,\n      };\n    } catch (error) {\n      throw new Error(`Failed to get workflow diagnostics: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get current system resource usage\n   */\n  getSystemResourceUsage(): SystemResourceUsage {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n    \n    // Convert CPU usage to percentage (simplified)\n    const cpuPercent = ((cpuUsage.user + cpuUsage.system) / 1000000) / process.uptime() * 100;\n\n    return {\n      cpu: {\n        totalUsage: Math.min(cpuPercent, 100), // Cap at 100%\n        processUsage: Math.min(cpuPercent, 100),\n        loadAverage: process.platform === 'win32' ? [0, 0, 0] : require('os').loadavg(),\n        coreCount: require('os').cpus().length,\n      },\n      memory: {\n        totalMemory: require('os').totalmem(),\n        freeMemory: require('os').freemem(),\n        usedMemory: require('os').totalmem() - require('os').freemem(),\n        processMemory: {\n          heapUsed: memUsage.heapUsed,\n          heapTotal: memUsage.heapTotal,\n          external: memUsage.external,\n          rss: memUsage.rss,\n        },\n        utilization: ((require('os').totalmem() - require('os').freemem()) / require('os').totalmem()) * 100,\n      },\n      disk: {\n        totalSpace: 0, // Would need filesystem API to get real values\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      },\n      network: {\n        bytesReceived: 0, // Would need network statistics\n        bytesSent: 0,\n        packetsReceived: 0,\n        packetsSent: 0,\n      },\n      uptime: process.uptime(),\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Test connectivity to n8n instance\n   */\n  async testConnectivity(): Promise<{ success: boolean; responseTime: number; error?: string }> {\n    const startTime = Date.now();\n    \n    try {\n      await this.client.getWorkflows({ limit: 1 });\n      return {\n        success: true,\n        responseTime: Date.now() - startTime,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        responseTime: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get system diagnostics for troubleshooting\n   */\n  async getSystemDiagnostics(): Promise<SystemDiagnostics> {\n    const [healthCheck, connectivity, systemUsage] = await Promise.all([\n      this.getHealthCheck(),\n      this.testConnectivity(),\n      Promise.resolve(this.getSystemResourceUsage()),\n    ]);\n\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Analyze health issues\n    if (healthCheck.status === 'critical') {\n      issues.push('System health is critical');\n      recommendations.push('Check database connectivity and file system permissions');\n    }\n\n    if (!connectivity.success) {\n      issues.push(`API connectivity failed: ${connectivity.error}`);\n      recommendations.push('Verify n8n instance is running and API key is correct');\n    }\n\n    if (connectivity.responseTime > 1000) {\n      issues.push('High API response time detected');\n      recommendations.push('Check network connectivity and server performance');\n    }\n\n    // Analyze resource usage\n    if (systemUsage.memory.utilization > 85) {\n      issues.push('High memory utilization detected');\n      recommendations.push('Consider increasing available memory or optimizing workflows');\n    }\n\n    if (systemUsage.cpu.totalUsage > 80) {\n      issues.push('High CPU usage detected');\n      recommendations.push('Check for resource-intensive workflows or background processes');\n    }\n\n    return {\n      timestamp: new Date().toISOString(),\n      overall: {\n        status: healthCheck.status,\n        issues,\n        recommendations,\n      },\n      connectivity: {\n        apiConnectivity: connectivity.success,\n        responseTime: connectivity.responseTime,\n        error: connectivity.error,\n      },\n      resources: systemUsage,\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform,\n        architecture: process.arch,\n        uptime: process.uptime(),\n      },\n    };\n  }\n}"],"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","ignoreList":[]}