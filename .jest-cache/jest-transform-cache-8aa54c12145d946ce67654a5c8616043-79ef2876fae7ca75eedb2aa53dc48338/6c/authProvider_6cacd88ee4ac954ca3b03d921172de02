31f1d083859edc037e43b166296eef08
"use strict";
/**
 * Authentication Provider Interface for n8n MCP Server
 *
 * Defines the contract for authentication providers that can validate
 * client requests and control access to n8n tools and resources.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAuthProvider = void 0;
/**
 * Base authentication provider with common functionality
 */
class BaseAuthProvider {
    /**
     * Default tool access control based on user permissions
     */
    async canAccessTool(toolName, context) {
        if (!context.user) {
            return false;
        }
        const { permissions } = context.user;
        // Tool access mapping
        const toolPermissions = {
            // Core workflow tools
            'init-n8n': 'community',
            status: 'community',
            'list-workflows': 'workflows',
            'get-workflow': 'workflows',
            'create-workflow': 'workflows',
            'update-workflow': 'workflows',
            'delete-workflow': 'workflows',
            'activate-workflow': 'workflows',
            'deactivate-workflow': 'workflows',
            // Execution tools
            'list-executions': 'executions',
            'get-execution': 'executions',
            'delete-execution': 'executions',
            'retry-execution': 'executions',
            'stop-execution': 'executions',
            // Enterprise features
            'list-projects': 'enterprise',
            'create-project': 'enterprise',
            'get-project': 'enterprise',
            'update-project': 'enterprise',
            'delete-project': 'enterprise',
            'list-project-workflows': 'enterprise',
            'list-variables': 'enterprise',
            'create-variable': 'enterprise',
            'get-variable': 'enterprise',
            'update-variable': 'enterprise',
            'delete-variable': 'enterprise',
            // User management
            'list-users': 'users',
            'create-user': 'users',
            'get-user': 'users',
            'update-user': 'users',
            'delete-user': 'users',
            // Credentials
            'list-credentials': 'credentials',
            'get-credential': 'credentials',
            'create-credential': 'credentials',
            'update-credential': 'credentials',
            'delete-credential': 'credentials',
            // Audit
            'get-audit-logs': 'audit',
            'generate-audit-report': 'audit',
            // Tags (community feature)
            'list-tags': 'community',
            'create-tag': 'workflows',
            'update-tag': 'workflows',
            'delete-tag': 'workflows',
        };
        const requiredPermission = toolPermissions[toolName];
        if (!requiredPermission) {
            // Unknown tool, default to community access
            return permissions.community;
        }
        return permissions[requiredPermission];
    }
    /**
     * Default resource access control
     */
    async canAccessResource(resourceUri, context) {
        if (!context.user) {
            return false;
        }
        const { permissions } = context.user;
        // Resource access based on URI patterns
        if (resourceUri.startsWith('n8n://workflows/')) {
            return permissions.workflows;
        }
        if (resourceUri.startsWith('n8n://executions/')) {
            return permissions.executions;
        }
        if (resourceUri.startsWith('n8n://credentials/')) {
            return permissions.credentials;
        }
        if (resourceUri.startsWith('n8n://users/')) {
            return permissions.users;
        }
        if (resourceUri.startsWith('n8n://projects/')) {
            return permissions.enterprise;
        }
        // Default to community access for other resources
        return permissions.community;
    }
    /**
     * Create default permissions based on user roles
     */
    createPermissions(roles) {
        const isAdmin = roles.includes('admin') || roles.includes('owner');
        const isEditor = roles.includes('editor') || isAdmin;
        const isMember = roles.includes('member') || isEditor;
        return {
            community: true, // All authenticated users get community access
            enterprise: isAdmin, // Only admins get enterprise features by default
            workflows: isMember, // Members and above can manage workflows
            executions: isMember, // Members and above can view executions
            credentials: isEditor, // Editors and above can manage credentials
            users: isAdmin, // Only admins can manage users
            audit: isAdmin, // Only admins can access audit logs
        };
    }
}
exports.BaseAuthProvider = BaseAuthProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,