{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/authProvider.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/auth/authProvider.ts"],"sourcesContent":["/**\n * Authentication Provider Interface for n8n MCP Server\n *\n * Defines the contract for authentication providers that can validate\n * client requests and control access to n8n tools and resources.\n */\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Request context containing client information and request metadata\n */\nexport interface RequestContext {\n  /** Client identifier or session ID */\n  clientId?: string;\n\n  /** Request headers containing potential authentication tokens */\n  headers?: Record<string, string>;\n\n  /** Request metadata */\n  metadata?: Record<string, unknown>;\n\n  /** Authenticated user information (populated after successful auth) */\n  user?: AuthenticatedUser;\n}\n\n/**\n * Result of authentication attempt\n */\nexport interface AuthResult {\n  /** Whether authentication was successful */\n  success: boolean;\n\n  /** Authenticated user information (if successful) */\n  user?: AuthenticatedUser;\n\n  /** Error message (if failed) */\n  error?: string;\n\n  /** Additional context or session data */\n  context?: Record<string, unknown>;\n}\n\n/**\n * Authenticated user information\n */\nexport interface AuthenticatedUser {\n  /** Unique user identifier */\n  id: string;\n\n  /** User display name */\n  name?: string;\n\n  /** User email address */\n  email?: string;\n\n  /** User roles for access control */\n  roles: string[];\n\n  /** n8n instance permissions */\n  permissions: {\n    /** Can access Community features */\n    community: boolean;\n\n    /** Can access Enterprise features (projects, users, etc.) */\n    enterprise: boolean;\n\n    /** Can manage workflows */\n    workflows: boolean;\n\n    /** Can view executions */\n    executions: boolean;\n\n    /** Can manage credentials */\n    credentials: boolean;\n\n    /** Can manage users (admin only) */\n    users: boolean;\n\n    /** Can access audit logs */\n    audit: boolean;\n  };\n\n  /** n8n API key for backend requests */\n  n8nApiKey?: string;\n\n  /** n8n instance URL */\n  n8nBaseUrl?: string;\n}\n\n/**\n * Authentication provider interface\n */\n\nexport interface AuthProvider {\n  /**\n   * Authenticate a client request\n   * @param context Request context containing client information\n   * @returns Promise resolving to authentication result\n   */\n  authenticate(_context: RequestContext): Promise<AuthResult>;\n\n  /**\n   * Check if authenticated user can access a specific tool\n   * @param toolName Name of the tool being accessed\n   * @param context Request context with authenticated user\n   * @returns Promise resolving to true if access is allowed\n   */\n  canAccessTool(_toolName: string, _context: RequestContext): Promise<boolean>;\n\n  /**\n   * Check if authenticated user can access a specific resource\n   * @param resourceUri URI of the resource being accessed\n   * @param context Request context with authenticated user\n   * @returns Promise resolving to true if access is allowed\n   */\n  canAccessResource(_resourceUri: string, _context: RequestContext): Promise<boolean>;\n\n  /**\n   * Refresh or validate existing authentication\n   * @param context Request context with existing auth data\n   * @returns Promise resolving to updated authentication result\n   */\n  refresh(_context: RequestContext): Promise<AuthResult>;\n}\n\n/**\n * Base authentication provider with common functionality\n */\nexport abstract class BaseAuthProvider implements AuthProvider {\n  abstract authenticate(_context: RequestContext): Promise<AuthResult>;\n  abstract refresh(_context: RequestContext): Promise<AuthResult>;\n\n  /**\n   * Default tool access control based on user permissions\n   */\n  async canAccessTool(toolName: string, context: RequestContext): Promise<boolean> {\n    if (!context.user) {\n      return false;\n    }\n\n    const { permissions } = context.user;\n\n    // Tool access mapping\n    const toolPermissions: Record<string, keyof typeof permissions> = {\n      // Core workflow tools\n      'init-n8n': 'community',\n      status: 'community',\n      'list-workflows': 'workflows',\n      'get-workflow': 'workflows',\n      'create-workflow': 'workflows',\n      'update-workflow': 'workflows',\n      'delete-workflow': 'workflows',\n      'activate-workflow': 'workflows',\n      'deactivate-workflow': 'workflows',\n\n      // Execution tools\n      'list-executions': 'executions',\n      'get-execution': 'executions',\n      'delete-execution': 'executions',\n      'retry-execution': 'executions',\n      'stop-execution': 'executions',\n\n      // Enterprise features\n      'list-projects': 'enterprise',\n      'create-project': 'enterprise',\n      'get-project': 'enterprise',\n      'update-project': 'enterprise',\n      'delete-project': 'enterprise',\n      'list-project-workflows': 'enterprise',\n      'list-variables': 'enterprise',\n      'create-variable': 'enterprise',\n      'get-variable': 'enterprise',\n      'update-variable': 'enterprise',\n      'delete-variable': 'enterprise',\n\n      // User management\n      'list-users': 'users',\n      'create-user': 'users',\n      'get-user': 'users',\n      'update-user': 'users',\n      'delete-user': 'users',\n\n      // Credentials\n      'list-credentials': 'credentials',\n      'get-credential': 'credentials',\n      'create-credential': 'credentials',\n      'update-credential': 'credentials',\n      'delete-credential': 'credentials',\n\n      // Audit\n      'get-audit-logs': 'audit',\n      'generate-audit-report': 'audit',\n\n      // Tags (community feature)\n      'list-tags': 'community',\n      'create-tag': 'workflows',\n      'update-tag': 'workflows',\n      'delete-tag': 'workflows',\n    };\n\n    const requiredPermission = toolPermissions[toolName];\n    if (!requiredPermission) {\n      // Unknown tool, default to community access\n      return permissions.community;\n    }\n\n    return permissions[requiredPermission];\n  }\n\n  /**\n   * Default resource access control\n   */\n  async canAccessResource(resourceUri: string, context: RequestContext): Promise<boolean> {\n    if (!context.user) {\n      return false;\n    }\n\n    const { permissions } = context.user;\n\n    // Resource access based on URI patterns\n    if (resourceUri.startsWith('n8n://workflows/')) {\n      return permissions.workflows;\n    }\n\n    if (resourceUri.startsWith('n8n://executions/')) {\n      return permissions.executions;\n    }\n\n    if (resourceUri.startsWith('n8n://credentials/')) {\n      return permissions.credentials;\n    }\n\n    if (resourceUri.startsWith('n8n://users/')) {\n      return permissions.users;\n    }\n\n    if (resourceUri.startsWith('n8n://projects/')) {\n      return permissions.enterprise;\n    }\n\n    // Default to community access for other resources\n    return permissions.community;\n  }\n\n  /**\n   * Create default permissions based on user roles\n   */\n  protected createPermissions(roles: string[]): AuthenticatedUser['permissions'] {\n    const isAdmin = roles.includes('admin') || roles.includes('owner');\n    const isEditor = roles.includes('editor') || isAdmin;\n    const isMember = roles.includes('member') || isEditor;\n\n    return {\n      community: true, // All authenticated users get community access\n      enterprise: isAdmin, // Only admins get enterprise features by default\n      workflows: isMember, // Members and above can manage workflows\n      executions: isMember, // Members and above can view executions\n      credentials: isEditor, // Editors and above can manage credentials\n      users: isAdmin, // Only admins can manage users\n      audit: isAdmin, // Only admins can access audit logs\n    };\n  }\n}\n"],"version":3}