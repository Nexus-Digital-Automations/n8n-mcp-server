{"version":3,"names":["cov_y8xrsz6ie","actualCoverage","s","exports","createInstanceMonitoringTools","zod_1","require","fastmcp_1","resourceMonitor_js_1","MonitoringPeriodSchema","z","object","hours","number","min","max","optional","default","includeInactive","boolean","WorkflowMonitoringSchema","workflowId","string","includeNodeMetrics","timeRange","enum","AlertManagementSchema","severity","resolved","limit","HealthCheckSchema","includeRecommendations","includeAlerts","includeDependencies","ReportGenerationSchema","includeWorkflows","format","resourceMonitor","getResourceMonitor","f","b","ResourceMonitor","startMonitoring","formatSystemUsage","usage","sections","push","Date","timestamp","toLocaleString","cpu","totalUsage","toFixed","processUsage","loadAverage","map","l","join","coreCount","formatBytes","memory","totalMemory","usedMemory","utilization","freeMemory","processMemory","heapUsed","heapTotal","rss","disk","totalSpace","usedSpace","freeSpace","network","bytesReceived","bytesSent","formatDuration","uptime","formatWorkflowUsage","length","forEach","workflow","index","status","isActive","successRate","executionStats","workflowName","executionCount","resourceMetrics","averageExecutionTime","memoryUsage","average","peak","cpuUsage","averageRunsPerHour","formatHealthMetrics","health","statusEmoji","healthy","warning","degraded","critical","overall","toUpperCase","score","issues","issue","i","recommendations","rec","performance","responseTime","throughput","errorRate","availabilityUptime","resources","memoryPressure","cpuThrottling","diskSpaceWarning","networkLatency","dependencies","dep","name","errorCount","alerts","slice","alert","severityEmoji","info","error","message","formatAlerts","low","medium","high","resolvedAt","title","type","description","triggeredAt","metadata","threshold","actualValue","bytes","k","sizes","Math","floor","log","parseFloat","pow","seconds","minutes","secs","getClient","server","addTool","parameters","annotations","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","monitor","systemUsage","getSystemResourceUsage","Error","UserError","args","client","workflowUsages","getWorkflow","getWorkflowResourceUsage","id","active","workflowsResponse","getWorkflows","data","healthMetrics","getInstanceHealthMetrics","getAlerts","limitedAlerts","alertId","resolveAlert","action","intervalMs","stopMonitoring","updateConfig","monitoring","getConfig","config","enabled","retentionDays","getDataPoints","undefined","duration","success","recordWorkflowExecution"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/instance-monitoring.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { ResourceMonitor } from '../utils/resourceMonitor.js';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  MonitoringReport,\n  PerformanceAlert,\n} from '../types/monitoringTypes.js';\n\n// Validation Schemas\nconst MonitoringPeriodSchema = z.object({\n  hours: z.number().min(1).max(168).optional().default(24), // 1 hour to 1 week\n  includeInactive: z.boolean().optional().default(false),\n});\n\nconst WorkflowMonitoringSchema = z.object({\n  workflowId: z.string().optional(),\n  includeNodeMetrics: z.boolean().optional().default(true),\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).optional().default('24h'),\n});\n\nconst AlertManagementSchema = z.object({\n  severity: z.enum(['low', 'medium', 'high', 'critical']).optional(),\n  resolved: z.boolean().optional(),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst HealthCheckSchema = z.object({\n  includeRecommendations: z.boolean().optional().default(true),\n  includeAlerts: z.boolean().optional().default(true),\n  includeDependencies: z.boolean().optional().default(true),\n});\n\nconst ReportGenerationSchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).optional().default('24h'),\n  includeWorkflows: z.boolean().optional().default(true),\n  includeRecommendations: z.boolean().optional().default(true),\n  format: z.enum(['summary', 'detailed', 'dashboard']).optional().default('summary'),\n});\n\n// Global resource monitor instance\nlet resourceMonitor: ResourceMonitor | null = null;\n\nfunction getResourceMonitor(): ResourceMonitor {\n  if (!resourceMonitor) {\n    resourceMonitor = new ResourceMonitor();\n    resourceMonitor.startMonitoring();\n  }\n  return resourceMonitor;\n}\n\n// Helper Functions\nfunction formatSystemUsage(usage: SystemResourceUsage): string {\n  const sections = [];\n\n  sections.push(`🖥️ **System Resource Usage**\\n`);\n  sections.push(`**Timestamp:** ${new Date(usage.timestamp).toLocaleString()}\\n`);\n\n  sections.push(`**💻 CPU:**`);\n  sections.push(`• Total Usage: ${usage.cpu.totalUsage.toFixed(1)}%`);\n  sections.push(`• Process Usage: ${usage.cpu.processUsage.toFixed(1)}%`);\n  sections.push(`• Load Average: ${usage.cpu.loadAverage.map(l => l.toFixed(2)).join(', ')}`);\n  sections.push(`• Cores: ${usage.cpu.coreCount}`);\n  sections.push('');\n\n  sections.push(`**🧠 Memory:**`);\n  sections.push(`• Total: ${formatBytes(usage.memory.totalMemory)}`);\n  sections.push(\n    `• Used: ${formatBytes(usage.memory.usedMemory)} (${usage.memory.utilization.toFixed(1)}%)`\n  );\n  sections.push(`• Free: ${formatBytes(usage.memory.freeMemory)}`);\n  sections.push(\n    `• Process Heap: ${formatBytes(usage.memory.processMemory.heapUsed)} / ${formatBytes(usage.memory.processMemory.heapTotal)}`\n  );\n  sections.push(`• Process RSS: ${formatBytes(usage.memory.processMemory.rss)}`);\n  sections.push('');\n\n  sections.push(`**💾 Disk:**`);\n  sections.push(`• Total: ${formatBytes(usage.disk.totalSpace)}`);\n  sections.push(\n    `• Used: ${formatBytes(usage.disk.usedSpace)} (${usage.disk.utilization.toFixed(1)}%)`\n  );\n  sections.push(`• Free: ${formatBytes(usage.disk.freeSpace)}`);\n  sections.push('');\n\n  sections.push(`**🌐 Network:**`);\n  sections.push(`• Bytes Received: ${formatBytes(usage.network.bytesReceived)}`);\n  sections.push(`• Bytes Sent: ${formatBytes(usage.network.bytesSent)}`);\n  sections.push('');\n\n  sections.push(`**⏱️ Uptime:** ${formatDuration(usage.uptime)}`);\n\n  return sections.join('\\n');\n}\n\nfunction formatWorkflowUsage(usage: WorkflowResourceUsage[]): string {\n  if (usage.length === 0) {\n    return 'No workflow usage data available.';\n  }\n\n  const sections = [];\n  sections.push(`📊 **Workflow Resource Usage (${usage.length} workflows)**\\n`);\n\n  usage.forEach((workflow, index) => {\n    const status = workflow.isActive ? '✅ Active' : '⏸️ Inactive';\n    const successRate = workflow.executionStats.successRate.toFixed(1);\n\n    sections.push(`**${index + 1}. ${workflow.workflowName}** ${status}`);\n    sections.push(`   ID: ${workflow.workflowId}`);\n    sections.push(`   Executions: ${workflow.executionCount} (${successRate}% success rate)`);\n    sections.push(\n      `   Avg Execution Time: ${formatDuration(workflow.resourceMetrics.averageExecutionTime / 1000)}`\n    );\n    sections.push(\n      `   Memory Usage: Avg ${formatBytes(workflow.resourceMetrics.memoryUsage.average)}, Peak ${formatBytes(workflow.resourceMetrics.memoryUsage.peak)}`\n    );\n    sections.push(\n      `   CPU Usage: Avg ${workflow.resourceMetrics.cpuUsage.average}%, Peak ${workflow.resourceMetrics.cpuUsage.peak}%`\n    );\n    sections.push(`   Runs/Hour: ${workflow.executionStats.averageRunsPerHour.toFixed(1)}`);\n    sections.push('');\n  });\n\n  return sections.join('\\n');\n}\n\nfunction formatHealthMetrics(health: InstanceHealthMetrics): string {\n  const sections = [];\n  const statusEmoji = {\n    healthy: '✅',\n    warning: '⚠️',\n    degraded: '🟡',\n    critical: '🚨',\n  };\n\n  sections.push(`🏥 **Instance Health Report**\\n`);\n  sections.push(\n    `**Overall Status:** ${statusEmoji[health.overall.status]} ${health.overall.status.toUpperCase()}`\n  );\n  sections.push(`**Health Score:** ${health.overall.score}/100\\n`);\n\n  if (health.overall.issues.length > 0) {\n    sections.push(`**🚨 Issues:**`);\n    health.overall.issues.forEach((issue, i) => {\n      sections.push(`${i + 1}. ${issue}`);\n    });\n    sections.push('');\n  }\n\n  if (health.overall.recommendations.length > 0) {\n    sections.push(`**💡 Recommendations:**`);\n    health.overall.recommendations.forEach((rec, i) => {\n      sections.push(`${i + 1}. ${rec}`);\n    });\n    sections.push('');\n  }\n\n  sections.push(`**📈 Performance Metrics:**`);\n  sections.push(`• API Response Time: ${health.performance.responseTime}ms`);\n  sections.push(`• Throughput: ${health.performance.throughput} executions/min`);\n  sections.push(`• Error Rate: ${health.performance.errorRate}%`);\n  sections.push(`• Uptime: ${health.performance.availabilityUptime}%`);\n  sections.push('');\n\n  sections.push(`**🔧 Resource Status:**`);\n  sections.push(`• Memory Pressure: ${health.resources.memoryPressure ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• CPU Throttling: ${health.resources.cpuThrottling ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• Disk Space Warning: ${health.resources.diskSpaceWarning ? '⚠️ Yes' : '✅ No'}`);\n  sections.push(`• Network Latency: ${health.resources.networkLatency}ms`);\n  sections.push('');\n\n  if (health.dependencies.length > 0) {\n    sections.push(`**🔗 Dependencies:**`);\n    health.dependencies.forEach(dep => {\n      const statusEmoji = dep.status === 'online' ? '✅' : dep.status === 'degraded' ? '⚠️' : '❌';\n      sections.push(\n        `• ${dep.name}: ${statusEmoji} ${dep.status} (${dep.responseTime}ms, ${dep.errorCount} errors)`\n      );\n    });\n    sections.push('');\n  }\n\n  if (health.alerts.length > 0) {\n    sections.push(`**🚨 Active Alerts (${health.alerts.length}):**`);\n    health.alerts.slice(0, 5).forEach(alert => {\n      const severityEmoji: Record<string, string> = {\n        info: '💡',\n        warning: '⚠️',\n        error: '🚨',\n        critical: '🔴',\n      };\n      sections.push(`• ${severityEmoji[alert.severity] || '💡'} ${alert.message}`);\n    });\n    if (health.alerts.length > 5) {\n      sections.push(`  ... and ${health.alerts.length - 5} more alerts`);\n    }\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatAlerts(alerts: PerformanceAlert[]): string {\n  if (alerts.length === 0) {\n    return 'No alerts found.';\n  }\n\n  const sections = [];\n  sections.push(`🚨 **Performance Alerts (${alerts.length})**\\n`);\n\n  alerts.forEach((alert, index) => {\n    const severityEmoji = {\n      low: '💡',\n      medium: '⚠️',\n      high: '🚨',\n      critical: '🔴',\n    };\n\n    const status = alert.resolvedAt ? '✅ Resolved' : '🔴 Active';\n\n    sections.push(`**${index + 1}. ${alert.title}** ${status}`);\n    sections.push(`   Severity: ${severityEmoji[alert.severity]} ${alert.severity.toUpperCase()}`);\n    sections.push(`   Type: ${alert.type}`);\n    sections.push(`   Description: ${alert.description}`);\n    sections.push(`   Triggered: ${new Date(alert.triggeredAt).toLocaleString()}`);\n\n    if (alert.resolvedAt) {\n      sections.push(`   Resolved: ${new Date(alert.resolvedAt).toLocaleString()}`);\n    }\n\n    if (alert.metadata.workflowId) {\n      sections.push(`   Workflow: ${alert.metadata.workflowId}`);\n    }\n\n    if (alert.metadata.threshold && alert.metadata.actualValue) {\n      sections.push(\n        `   Threshold: ${alert.metadata.threshold}, Actual: ${alert.metadata.actualValue}`\n      );\n    }\n\n    sections.push('');\n  });\n\n  return sections.join('\\n');\n}\n\nfunction formatBytes(bytes: number): string {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\n}\n\nfunction formatDuration(seconds: number): string {\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const secs = Math.floor(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m ${secs}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs}s`;\n  } else {\n    return `${secs}s`;\n  }\n}\n\nexport function createInstanceMonitoringTools(getClient: () => N8nClient | null, server: any) {\n  // System Resource Monitoring\n  server.addTool({\n    name: 'get-system-resources',\n    description:\n      'Get real-time system resource usage including CPU, memory, disk, and network statistics',\n    parameters: z.object({}),\n    annotations: {\n      title: 'System Resource Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      try {\n        const monitor = getResourceMonitor();\n        const systemUsage = await monitor.getSystemResourceUsage();\n        return formatSystemUsage(systemUsage);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get system resources: ${error.message}`);\n        }\n        throw new UserError('Failed to get system resources with unknown error');\n      }\n    },\n  });\n\n  // Workflow Resource Usage\n  server.addTool({\n    name: 'get-workflow-resources',\n    description:\n      'Monitor per-workflow resource consumption including execution times and memory usage',\n    parameters: WorkflowMonitoringSchema,\n    annotations: {\n      title: 'Workflow Resource Monitoring',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof WorkflowMonitoringSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const monitor = getResourceMonitor();\n        const workflowUsages: WorkflowResourceUsage[] = [];\n\n        if (args.workflowId) {\n          // Get specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const usage = await monitor.getWorkflowResourceUsage(\n            workflow.id,\n            workflow.name,\n            workflow.active\n          );\n          workflowUsages.push(usage);\n        } else {\n          // Get all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: 50 });\n\n          for (const workflow of workflowsResponse.data) {\n            const usage = await monitor.getWorkflowResourceUsage(\n              workflow.id,\n              workflow.name,\n              workflow.active\n            );\n            workflowUsages.push(usage);\n          }\n        }\n\n        return formatWorkflowUsage(workflowUsages);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow resources: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow resources with unknown error');\n      }\n    },\n  });\n\n  // Instance Health Check\n  server.addTool({\n    name: 'check-instance-health',\n    description:\n      'Comprehensive health check of the n8n instance including performance metrics and recommendations',\n    parameters: HealthCheckSchema,\n    annotations: {\n      title: 'Instance Health Check',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof HealthCheckSchema>) => {\n      try {\n        const monitor = getResourceMonitor();\n        const healthMetrics = await monitor.getInstanceHealthMetrics();\n        return formatHealthMetrics(healthMetrics);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to check instance health: ${error.message}`);\n        }\n        throw new UserError('Failed to check instance health with unknown error');\n      }\n    },\n  });\n\n  // Performance Alerts Management\n  server.addTool({\n    name: 'get-performance-alerts',\n    description: 'Retrieve and manage performance alerts with filtering options',\n    parameters: AlertManagementSchema,\n    annotations: {\n      title: 'Performance Alerts',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof AlertManagementSchema>) => {\n      try {\n        const monitor = getResourceMonitor();\n        const alerts = monitor.getAlerts(args.severity, args.resolved);\n        const limitedAlerts = alerts.slice(0, args.limit);\n        return formatAlerts(limitedAlerts);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get performance alerts: ${error.message}`);\n        }\n        throw new UserError('Failed to get performance alerts with unknown error');\n      }\n    },\n  });\n\n  // Resolve Alert\n  server.addTool({\n    name: 'resolve-performance-alert',\n    description: 'Mark a performance alert as resolved',\n    parameters: z.object({\n      alertId: z.string().min(1, 'Alert ID is required'),\n    }),\n    annotations: {\n      title: 'Resolve Performance Alert',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { alertId: string }) => {\n      try {\n        const monitor = getResourceMonitor();\n        const resolved = monitor.resolveAlert(args.alertId);\n\n        if (resolved) {\n          return `✅ Alert ${args.alertId} has been marked as resolved.`;\n        } else {\n          return `❌ Alert ${args.alertId} not found or already resolved.`;\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to resolve alert: ${error.message}`);\n        }\n        throw new UserError('Failed to resolve alert with unknown error');\n      }\n    },\n  });\n\n  // Start/Stop Monitoring\n  server.addTool({\n    name: 'control-monitoring',\n    description: 'Start or stop resource monitoring and configure monitoring settings',\n    parameters: z.object({\n      action: z.enum(['start', 'stop', 'restart', 'status']),\n      intervalMs: z.number().min(5000).max(300000).optional(), // 5 seconds to 5 minutes\n    }),\n    annotations: {\n      title: 'Control Resource Monitoring',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: { action: string; intervalMs?: number }) => {\n      try {\n        const monitor = getResourceMonitor();\n\n        switch (args.action) {\n          case 'start':\n            await monitor.startMonitoring();\n            return '✅ Resource monitoring started successfully.';\n\n          case 'stop':\n            monitor.stopMonitoring();\n            return '⏹️ Resource monitoring stopped.';\n\n          case 'restart':\n            monitor.stopMonitoring();\n            if (args.intervalMs) {\n              monitor.updateConfig({\n                monitoring: { ...monitor.getConfig().monitoring, intervalMs: args.intervalMs },\n              });\n            }\n            await monitor.startMonitoring();\n            return '🔄 Resource monitoring restarted successfully.';\n\n          case 'status':\n            const config = monitor.getConfig();\n            return `📊 **Monitoring Status**\\n\\nEnabled: ${config.monitoring.enabled ? '✅ Yes' : '❌ No'}\\nInterval: ${config.monitoring.intervalMs}ms\\nRetention: ${config.monitoring.retentionDays} days\\nData Points: ${monitor.getDataPoints().length}\\nActive Alerts: ${monitor.getAlerts(undefined, false).length}`;\n\n          default:\n            throw new UserError(`Unknown action: ${args.action}`);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to control monitoring: ${error.message}`);\n        }\n        throw new UserError('Failed to control monitoring with unknown error');\n      }\n    },\n  });\n\n  // Record Workflow Execution (for tracking)\n  server.addTool({\n    name: 'record-execution-metrics',\n    description: 'Record execution metrics for a workflow (used internally for tracking)',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      duration: z.number().min(0, 'Duration must be non-negative'),\n      success: z.boolean(),\n    }),\n    annotations: {\n      title: 'Record Execution Metrics',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: { workflowId: string; duration: number; success: boolean }) => {\n      try {\n        const monitor = getResourceMonitor();\n        monitor.recordWorkflowExecution(args.workflowId, args.duration, args.success);\n\n        return `📊 Execution metrics recorded for workflow ${args.workflowId}: ${args.duration}ms (${args.success ? 'success' : 'failure'})`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to record execution metrics: ${error.message}`);\n        }\n        throw new UserError('Failed to record execution metrics with unknown error');\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}