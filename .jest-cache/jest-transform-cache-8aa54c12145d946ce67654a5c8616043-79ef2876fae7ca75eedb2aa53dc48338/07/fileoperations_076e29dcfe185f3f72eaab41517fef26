efc0a7c41f8e3e3d50e1961088ad881c
"use strict";

/* istanbul ignore next */
function cov_1g9zbwmm0d() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts";
  var hash = "9c26cd638fd05af85af6b8d5674ff5b5f17d8ecc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "37": {
        start: {
          line: 37,
          column: 14
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "38": {
        start: {
          line: 38,
          column: 18
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "39": {
        start: {
          line: 39,
          column: 11
        },
        end: {
          line: 39,
          column: 47
        }
      },
      "40": {
        start: {
          line: 40,
          column: 13
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "41": {
        start: {
          line: 41,
          column: 15
        },
        end: {
          line: 41,
          column: 46
        }
      },
      "42": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 61
        }
      },
      "43": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 50,
          column: 2
        }
      },
      "44": {
        start: {
          line: 51,
          column: 27
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "45": {
        start: {
          line: 57,
          column: 33
        },
        end: {
          line: 60,
          column: 2
        }
      },
      "46": {
        start: {
          line: 61,
          column: 27
        },
        end: {
          line: 65,
          column: 2
        }
      },
      "47": {
        start: {
          line: 66,
          column: 26
        },
        end: {
          line: 70,
          column: 2
        }
      },
      "48": {
        start: {
          line: 71,
          column: 33
        },
        end: {
          line: 80,
          column: 2
        }
      },
      "49": {
        start: {
          line: 81,
          column: 27
        },
        end: {
          line: 86,
          column: 2
        }
      },
      "50": {
        start: {
          line: 87,
          column: 29
        },
        end: {
          line: 92,
          column: 2
        }
      },
      "51": {
        start: {
          line: 93,
          column: 31
        },
        end: {
          line: 99,
          column: 2
        }
      },
      "52": {
        start: {
          line: 100,
          column: 32
        },
        end: {
          line: 105,
          column: 2
        }
      },
      "53": {
        start: {
          line: 107,
          column: 18
        },
        end: {
          line: 107,
          column: 22
        }
      },
      "54": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 130,
          column: 1
        }
      },
      "55": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "56": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 127,
          column: 11
        }
      },
      "57": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 23
        }
      },
      "58": {
        start: {
          line: 132,
          column: 26
        },
        end: {
          line: 137,
          column: 1
        }
      },
      "59": {
        start: {
          line: 133,
          column: 23
        },
        end: {
          line: 133,
          column: 50
        }
      },
      "60": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 48
        }
      },
      "61": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 135,
          column: 31
        }
      },
      "62": {
        start: {
          line: 136,
          column: 4
        },
        end: {
          line: 136,
          column: 33
        }
      },
      "63": {
        start: {
          line: 138,
          column: 30
        },
        end: {
          line: 161,
          column: 1
        }
      },
      "64": {
        start: {
          line: 140,
          column: 23
        },
        end: {
          line: 150,
          column: 5
        }
      },
      "65": {
        start: {
          line: 151,
          column: 19
        },
        end: {
          line: 151,
          column: 70
        }
      },
      "66": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "67": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "68": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 28
        }
      },
      "69": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 158,
          column: 46
        }
      },
      "70": {
        start: {
          line: 159,
          column: 19
        },
        end: {
          line: 159,
          column: 126
        }
      },
      "71": {
        start: {
          line: 159,
          column: 44
        },
        end: {
          line: 159,
          column: 125
        }
      },
      "72": {
        start: {
          line: 160,
          column: 4
        },
        end: {
          line: 160,
          column: 62
        }
      },
      "73": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "74": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "75": {
        start: {
          line: 171,
          column: 36
        },
        end: {
          line: 171,
          column: 52
        }
      },
      "76": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "77": {
        start: {
          line: 174,
          column: 20
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "78": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 86
        }
      },
      "79": {
        start: {
          line: 180,
          column: 30
        },
        end: {
          line: 180,
          column: 58
        }
      },
      "80": {
        start: {
          line: 181,
          column: 33
        },
        end: {
          line: 181,
          column: 61
        }
      },
      "81": {
        start: {
          line: 183,
          column: 31
        },
        end: {
          line: 183,
          column: 63
        }
      },
      "82": {
        start: {
          line: 184,
          column: 41
        },
        end: {
          line: 184,
          column: 76
        }
      },
      "83": {
        start: {
          line: 186,
          column: 35
        },
        end: {
          line: 191,
          column: 18
        }
      },
      "84": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 203,
          column: 18
        }
      },
      "85": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 208,
          column: 17
        }
      },
      "86": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 32
        }
      },
      "87": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 134
        }
      },
      "88": {
        start: {
          line: 214,
          column: 4
        },
        end: {
          line: 239,
          column: 7
        }
      },
      "89": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 237,
          column: 13
        }
      },
      "90": {
        start: {
          line: 220,
          column: 36
        },
        end: {
          line: 220,
          column: 52
        }
      },
      "91": {
        start: {
          line: 222,
          column: 31
        },
        end: {
          line: 222,
          column: 84
        }
      },
      "92": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 230,
          column: 18
        }
      },
      "93": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 235,
          column: 17
        }
      },
      "94": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 32
        }
      },
      "95": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 134
        }
      },
      "96": {
        start: {
          line: 241,
          column: 4
        },
        end: {
          line: 270,
          column: 7
        }
      },
      "97": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 268,
          column: 13
        }
      },
      "98": {
        start: {
          line: 247,
          column: 36
        },
        end: {
          line: 247,
          column: 52
        }
      },
      "99": {
        start: {
          line: 249,
          column: 33
        },
        end: {
          line: 256,
          column: 17
        }
      },
      "100": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 261,
          column: 18
        }
      },
      "101": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 266,
          column: 17
        }
      },
      "102": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 265,
          column: 32
        }
      },
      "103": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 267,
          column: 141
        }
      },
      "104": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 359,
          column: 7
        }
      },
      "105": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 357,
          column: 13
        }
      },
      "106": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 285,
          column: 17
        }
      },
      "107": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 52
        }
      },
      "108": {
        start: {
          line: 281,
          column: 20
        },
        end: {
          line: 281,
          column: 52
        }
      },
      "109": {
        start: {
          line: 284,
          column: 20
        },
        end: {
          line: 284,
          column: 81
        }
      },
      "110": {
        start: {
          line: 287,
          column: 31
        },
        end: {
          line: 287,
          column: 60
        }
      },
      "111": {
        start: {
          line: 288,
          column: 31
        },
        end: {
          line: 288,
          column: 60
        }
      },
      "112": {
        start: {
          line: 289,
          column: 35
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "113": {
        start: {
          line: 309,
          column: 39
        },
        end: {
          line: 312,
          column: 18
        }
      },
      "114": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 41
        }
      },
      "115": {
        start: {
          line: 314,
          column: 16
        },
        end: {
          line: 314,
          column: 41
        }
      },
      "116": {
        start: {
          line: 315,
          column: 16
        },
        end: {
          line: 315,
          column: 58
        }
      },
      "117": {
        start: {
          line: 317,
          column: 41
        },
        end: {
          line: 317,
          column: 45
        }
      },
      "118": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 342,
          column: 17
        }
      },
      "119": {
        start: {
          line: 319,
          column: 49
        },
        end: {
          line: 322,
          column: 22
        }
      },
      "120": {
        start: {
          line: 323,
          column: 35
        },
        end: {
          line: 323,
          column: 55
        }
      },
      "121": {
        start: {
          line: 324,
          column: 35
        },
        end: {
          line: 324,
          column: 55
        }
      },
      "122": {
        start: {
          line: 325,
          column: 37
        },
        end: {
          line: 325,
          column: 75
        }
      },
      "123": {
        start: {
          line: 326,
          column: 40
        },
        end: {
          line: 326,
          column: 42
        }
      },
      "124": {
        start: {
          line: 327,
          column: 20
        },
        end: {
          line: 337,
          column: 21
        }
      },
      "125": {
        start: {
          line: 327,
          column: 33
        },
        end: {
          line: 327,
          column: 34
        }
      },
      "126": {
        start: {
          line: 328,
          column: 38
        },
        end: {
          line: 328,
          column: 53
        }
      },
      "127": {
        start: {
          line: 329,
          column: 38
        },
        end: {
          line: 329,
          column: 53
        }
      },
      "128": {
        start: {
          line: 330,
          column: 24
        },
        end: {
          line: 336,
          column: 25
        }
      },
      "129": {
        start: {
          line: 331,
          column: 28
        },
        end: {
          line: 335,
          column: 31
        }
      },
      "130": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 341,
          column: 22
        }
      },
      "131": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 350,
          column: 18
        }
      },
      "132": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 355,
          column: 17
        }
      },
      "133": {
        start: {
          line: 354,
          column: 20
        },
        end: {
          line: 354,
          column: 32
        }
      },
      "134": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 134
        }
      },
      "135": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 415,
          column: 7
        }
      },
      "136": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 413,
          column: 13
        }
      },
      "137": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "138": {
        start: {
          line: 369,
          column: 20
        },
        end: {
          line: 369,
          column: 51
        }
      },
      "139": {
        start: {
          line: 372,
          column: 20
        },
        end: {
          line: 372,
          column: 86
        }
      },
      "140": {
        start: {
          line: 375,
          column: 30
        },
        end: {
          line: 375,
          column: 58
        }
      },
      "141": {
        start: {
          line: 376,
          column: 33
        },
        end: {
          line: 376,
          column: 61
        }
      },
      "142": {
        start: {
          line: 377,
          column: 38
        },
        end: {
          line: 377,
          column: 65
        }
      },
      "143": {
        start: {
          line: 379,
          column: 31
        },
        end: {
          line: 379,
          column: 78
        }
      },
      "144": {
        start: {
          line: 380,
          column: 41
        },
        end: {
          line: 380,
          column: 76
        }
      },
      "145": {
        start: {
          line: 381,
          column: 33
        },
        end: {
          line: 394,
          column: 17
        }
      },
      "146": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 402,
          column: 17
        }
      },
      "147": {
        start: {
          line: 397,
          column: 33
        },
        end: {
          line: 397,
          column: 91
        }
      },
      "148": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 401,
          column: 22
        }
      },
      "149": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 406,
          column: 18
        }
      },
      "150": {
        start: {
          line: 409,
          column: 16
        },
        end: {
          line: 411,
          column: 17
        }
      },
      "151": {
        start: {
          line: 410,
          column: 20
        },
        end: {
          line: 410,
          column: 32
        }
      },
      "152": {
        start: {
          line: 412,
          column: 16
        },
        end: {
          line: 412,
          column: 134
        }
      },
      "153": {
        start: {
          line: 417,
          column: 4
        },
        end: {
          line: 514,
          column: 7
        }
      },
      "154": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 512,
          column: 13
        }
      },
      "155": {
        start: {
          line: 424,
          column: 16
        },
        end: {
          line: 432,
          column: 17
        }
      },
      "156": {
        start: {
          line: 425,
          column: 34
        },
        end: {
          line: 425,
          column: 67
        }
      },
      "157": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 428,
          column: 21
        }
      },
      "158": {
        start: {
          line: 427,
          column: 24
        },
        end: {
          line: 427,
          column: 81
        }
      },
      "159": {
        start: {
          line: 431,
          column: 20
        },
        end: {
          line: 431,
          column: 96
        }
      },
      "160": {
        start: {
          line: 433,
          column: 41
        },
        end: {
          line: 477,
          column: 17
        }
      },
      "161": {
        start: {
          line: 434,
          column: 36
        },
        end: {
          line: 434,
          column: 86
        }
      },
      "162": {
        start: {
          line: 435,
          column: 37
        },
        end: {
          line: 435,
          column: 38
        }
      },
      "163": {
        start: {
          line: 436,
          column: 43
        },
        end: {
          line: 436,
          column: 44
        }
      },
      "164": {
        start: {
          line: 437,
          column: 36
        },
        end: {
          line: 437,
          column: 37
        }
      },
      "165": {
        start: {
          line: 438,
          column: 39
        },
        end: {
          line: 438,
          column: 41
        }
      },
      "166": {
        start: {
          line: 439,
          column: 20
        },
        end: {
          line: 475,
          column: 21
        }
      },
      "167": {
        start: {
          line: 440,
          column: 41
        },
        end: {
          line: 440,
          column: 71
        }
      },
      "168": {
        start: {
          line: 442,
          column: 24
        },
        end: {
          line: 444,
          column: 25
        }
      },
      "169": {
        start: {
          line: 443,
          column: 28
        },
        end: {
          line: 443,
          column: 37
        }
      },
      "170": {
        start: {
          line: 445,
          column: 24
        },
        end: {
          line: 474,
          column: 25
        }
      },
      "171": {
        start: {
          line: 446,
          column: 28
        },
        end: {
          line: 446,
          column: 47
        }
      },
      "172": {
        start: {
          line: 447,
          column: 28
        },
        end: {
          line: 460,
          column: 29
        }
      },
      "173": {
        start: {
          line: 448,
          column: 49
        },
        end: {
          line: 448,
          column: 81
        }
      },
      "174": {
        start: {
          line: 449,
          column: 32
        },
        end: {
          line: 449,
          column: 66
        }
      },
      "175": {
        start: {
          line: 450,
          column: 32
        },
        end: {
          line: 450,
          column: 78
        }
      },
      "176": {
        start: {
          line: 451,
          column: 32
        },
        end: {
          line: 451,
          column: 64
        }
      },
      "177": {
        start: {
          line: 453,
          column: 32
        },
        end: {
          line: 459,
          column: 33
        }
      },
      "178": {
        start: {
          line: 454,
          column: 36
        },
        end: {
          line: 456,
          column: 37
        }
      },
      "179": {
        start: {
          line: 455,
          column: 40
        },
        end: {
          line: 455,
          column: 80
        }
      },
      "180": {
        start: {
          line: 457,
          column: 36
        },
        end: {
          line: 457,
          column: 72
        }
      },
      "181": {
        start: {
          line: 458,
          column: 36
        },
        end: {
          line: 458,
          column: 70
        }
      },
      "182": {
        start: {
          line: 462,
          column: 29
        },
        end: {
          line: 474,
          column: 25
        }
      },
      "183": {
        start: {
          line: 463,
          column: 28
        },
        end: {
          line: 463,
          column: 41
        }
      },
      "184": {
        start: {
          line: 464,
          column: 45
        },
        end: {
          line: 464,
          column: 68
        }
      },
      "185": {
        start: {
          line: 465,
          column: 28
        },
        end: {
          line: 465,
          column: 55
        }
      },
      "186": {
        start: {
          line: 466,
          column: 28
        },
        end: {
          line: 473,
          column: 29
        }
      },
      "187": {
        start: {
          line: 467,
          column: 44
        },
        end: {
          line: 467,
          column: 101
        }
      },
      "188": {
        start: {
          line: 468,
          column: 32
        },
        end: {
          line: 470,
          column: 33
        }
      },
      "189": {
        start: {
          line: 469,
          column: 36
        },
        end: {
          line: 469,
          column: 76
        }
      },
      "190": {
        start: {
          line: 471,
          column: 32
        },
        end: {
          line: 471,
          column: 56
        }
      },
      "191": {
        start: {
          line: 472,
          column: 32
        },
        end: {
          line: 472,
          column: 70
        }
      },
      "192": {
        start: {
          line: 476,
          column: 20
        },
        end: {
          line: 476,
          column: 83
        }
      },
      "193": {
        start: {
          line: 478,
          column: 30
        },
        end: {
          line: 478,
          column: 72
        }
      },
      "194": {
        start: {
          line: 480,
          column: 41
        },
        end: {
          line: 489,
          column: 22
        }
      },
      "195": {
        start: {
          line: 481,
          column: 44
        },
        end: {
          line: 481,
          column: 61
        }
      },
      "196": {
        start: {
          line: 483,
          column: 38
        },
        end: {
          line: 483,
          column: 42
        }
      },
      "197": {
        start: {
          line: 484,
          column: 20
        },
        end: {
          line: 487,
          column: 22
        }
      },
      "198": {
        start: {
          line: 488,
          column: 20
        },
        end: {
          line: 488,
          column: 31
        }
      },
      "199": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 505,
          column: 18
        }
      },
      "200": {
        start: {
          line: 508,
          column: 16
        },
        end: {
          line: 510,
          column: 17
        }
      },
      "201": {
        start: {
          line: 509,
          column: 20
        },
        end: {
          line: 509,
          column: 32
        }
      },
      "202": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 140
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 109,
            column: 23
          },
          end: {
            line: 109,
            column: 24
          }
        },
        loc: {
          start: {
            line: 109,
            column: 29
          },
          end: {
            line: 130,
            column: 1
          }
        },
        line: 109
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 132,
            column: 26
          },
          end: {
            line: 132,
            column: 27
          }
        },
        loc: {
          start: {
            line: 132,
            column: 68
          },
          end: {
            line: 137,
            column: 1
          }
        },
        line: 132
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 138,
            column: 30
          },
          end: {
            line: 138,
            column: 31
          }
        },
        loc: {
          start: {
            line: 138,
            column: 48
          },
          end: {
            line: 161,
            column: 1
          }
        },
        line: 138
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 159,
            column: 36
          },
          end: {
            line: 159,
            column: 37
          }
        },
        loc: {
          start: {
            line: 159,
            column: 44
          },
          end: {
            line: 159,
            column: 125
          }
        },
        line: 159
      },
      "13": {
        name: "createFileOperationsTools",
        decl: {
          start: {
            line: 163,
            column: 9
          },
          end: {
            line: 163,
            column: 34
          }
        },
        loc: {
          start: {
            line: 163,
            column: 43
          },
          end: {
            line: 515,
            column: 1
          }
        },
        line: 163
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 169,
            column: 18
          }
        },
        loc: {
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 211,
            column: 9
          }
        },
        line: 169
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 218,
            column: 17
          },
          end: {
            line: 218,
            column: 18
          }
        },
        loc: {
          start: {
            line: 218,
            column: 33
          },
          end: {
            line: 238,
            column: 9
          }
        },
        line: 218
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 245,
            column: 17
          },
          end: {
            line: 245,
            column: 18
          }
        },
        loc: {
          start: {
            line: 245,
            column: 33
          },
          end: {
            line: 269,
            column: 9
          }
        },
        line: 245
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 276,
            column: 17
          },
          end: {
            line: 276,
            column: 18
          }
        },
        loc: {
          start: {
            line: 276,
            column: 33
          },
          end: {
            line: 358,
            column: 9
          }
        },
        line: 276
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 365,
            column: 17
          },
          end: {
            line: 365,
            column: 18
          }
        },
        loc: {
          start: {
            line: 365,
            column: 33
          },
          end: {
            line: 414,
            column: 9
          }
        },
        line: 365
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 421,
            column: 17
          },
          end: {
            line: 421,
            column: 18
          }
        },
        loc: {
          start: {
            line: 421,
            column: 33
          },
          end: {
            line: 513,
            column: 9
          }
        },
        line: 421
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 433,
            column: 41
          },
          end: {
            line: 433,
            column: 42
          }
        },
        loc: {
          start: {
            line: 433,
            column: 60
          },
          end: {
            line: 477,
            column: 17
          }
        },
        line: 433
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 481,
            column: 26
          },
          end: {
            line: 481,
            column: 27
          }
        },
        loc: {
          start: {
            line: 481,
            column: 44
          },
          end: {
            line: 481,
            column: 61
          }
        },
        line: 481
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 482,
            column: 28
          },
          end: {
            line: 482,
            column: 29
          }
        },
        loc: {
          start: {
            line: 482,
            column: 50
          },
          end: {
            line: 489,
            column: 17
          }
        },
        line: 482
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "18": {
        loc: {
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 27
          },
          end: {
            line: 112,
            column: 52
          }
        }, {
          start: {
            line: 112,
            column: 56
          },
          end: {
            line: 112,
            column: 70
          }
        }],
        line: 112
      },
      "19": {
        loc: {
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 113,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 113,
            column: 34
          },
          end: {
            line: 113,
            column: 59
          }
        }, {
          start: {
            line: 113,
            column: 63
          },
          end: {
            line: 113,
            column: 74
          }
        }],
        line: 113
      },
      "20": {
        loc: {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 126,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 114,
            column: 72
          }
        }, {
          start: {
            line: 114,
            column: 76
          },
          end: {
            line: 126,
            column: 13
          }
        }],
        line: 114
      },
      "21": {
        loc: {
          start: {
            line: 132,
            column: 43
          },
          end: {
            line: 132,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 132,
            column: 55
          },
          end: {
            line: 132,
            column: 63
          }
        }],
        line: 132
      },
      "22": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "23": {
        loc: {
          start: {
            line: 159,
            column: 44
          },
          end: {
            line: 159,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 44
          },
          end: {
            line: 159,
            column: 57
          }
        }, {
          start: {
            line: 159,
            column: 61
          },
          end: {
            line: 159,
            column: 74
          }
        }, {
          start: {
            line: 159,
            column: 78
          },
          end: {
            line: 159,
            column: 91
          }
        }, {
          start: {
            line: 159,
            column: 96
          },
          end: {
            line: 159,
            column: 108
          }
        }, {
          start: {
            line: 159,
            column: 112
          },
          end: {
            line: 159,
            column: 124
          }
        }],
        line: 159
      },
      "24": {
        loc: {
          start: {
            line: 160,
            column: 11
          },
          end: {
            line: 160,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 160,
            column: 20
          },
          end: {
            line: 160,
            column: 32
          }
        }, {
          start: {
            line: 160,
            column: 35
          },
          end: {
            line: 160,
            column: 61
          }
        }],
        line: 160
      },
      "25": {
        loc: {
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "26": {
        loc: {
          start: {
            line: 209,
            column: 74
          },
          end: {
            line: 209,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 99
          },
          end: {
            line: 209,
            column: 112
          }
        }, {
          start: {
            line: 209,
            column: 115
          },
          end: {
            line: 209,
            column: 130
          }
        }],
        line: 209
      },
      "27": {
        loc: {
          start: {
            line: 227,
            column: 29
          },
          end: {
            line: 229,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 228,
            column: 26
          },
          end: {
            line: 228,
            column: 105
          }
        }, {
          start: {
            line: 229,
            column: 26
          },
          end: {
            line: 229,
            column: 98
          }
        }],
        line: 227
      },
      "28": {
        loc: {
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "29": {
        loc: {
          start: {
            line: 236,
            column: 74
          },
          end: {
            line: 236,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 236,
            column: 99
          },
          end: {
            line: 236,
            column: 112
          }
        }, {
          start: {
            line: 236,
            column: 115
          },
          end: {
            line: 236,
            column: 130
          }
        }],
        line: 236
      },
      "30": {
        loc: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 266,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "31": {
        loc: {
          start: {
            line: 267,
            column: 81
          },
          end: {
            line: 267,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 267,
            column: 106
          },
          end: {
            line: 267,
            column: 119
          }
        }, {
          start: {
            line: 267,
            column: 122
          },
          end: {
            line: 267,
            column: 137
          }
        }],
        line: 267
      },
      "32": {
        loc: {
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 342,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 318,
            column: 16
          },
          end: {
            line: 342,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 318
      },
      "33": {
        loc: {
          start: {
            line: 318,
            column: 20
          },
          end: {
            line: 318,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 318,
            column: 20
          },
          end: {
            line: 318,
            column: 39
          }
        }, {
          start: {
            line: 318,
            column: 43
          },
          end: {
            line: 318,
            column: 68
          }
        }, {
          start: {
            line: 318,
            column: 72
          },
          end: {
            line: 318,
            column: 97
          }
        }],
        line: 318
      },
      "34": {
        loc: {
          start: {
            line: 328,
            column: 38
          },
          end: {
            line: 328,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 328,
            column: 38
          },
          end: {
            line: 328,
            column: 47
          }
        }, {
          start: {
            line: 328,
            column: 51
          },
          end: {
            line: 328,
            column: 53
          }
        }],
        line: 328
      },
      "35": {
        loc: {
          start: {
            line: 329,
            column: 38
          },
          end: {
            line: 329,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 38
          },
          end: {
            line: 329,
            column: 47
          }
        }, {
          start: {
            line: 329,
            column: 51
          },
          end: {
            line: 329,
            column: 53
          }
        }],
        line: 329
      },
      "36": {
        loc: {
          start: {
            line: 330,
            column: 24
          },
          end: {
            line: 336,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 24
          },
          end: {
            line: 336,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "37": {
        loc: {
          start: {
            line: 347,
            column: 29
          },
          end: {
            line: 349,
            column: 148
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 348,
            column: 26
          },
          end: {
            line: 348,
            column: 47
          }
        }, {
          start: {
            line: 349,
            column: 26
          },
          end: {
            line: 349,
            column: 148
          }
        }],
        line: 347
      },
      "38": {
        loc: {
          start: {
            line: 349,
            column: 94
          },
          end: {
            line: 349,
            column: 145
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 349,
            column: 120
          },
          end: {
            line: 349,
            column: 131
          }
        }, {
          start: {
            line: 349,
            column: 134
          },
          end: {
            line: 349,
            column: 145
          }
        }],
        line: 349
      },
      "39": {
        loc: {
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 353,
            column: 16
          },
          end: {
            line: 355,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 353
      },
      "40": {
        loc: {
          start: {
            line: 356,
            column: 74
          },
          end: {
            line: 356,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 99
          },
          end: {
            line: 356,
            column: 112
          }
        }, {
          start: {
            line: 356,
            column: 115
          },
          end: {
            line: 356,
            column: 130
          }
        }],
        line: 356
      },
      "41": {
        loc: {
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 16
          },
          end: {
            line: 402,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "42": {
        loc: {
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 411,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 16
          },
          end: {
            line: 411,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "43": {
        loc: {
          start: {
            line: 412,
            column: 74
          },
          end: {
            line: 412,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 412,
            column: 99
          },
          end: {
            line: 412,
            column: 112
          }
        }, {
          start: {
            line: 412,
            column: 115
          },
          end: {
            line: 412,
            column: 130
          }
        }],
        line: 412
      },
      "44": {
        loc: {
          start: {
            line: 426,
            column: 20
          },
          end: {
            line: 428,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 20
          },
          end: {
            line: 428,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "45": {
        loc: {
          start: {
            line: 442,
            column: 24
          },
          end: {
            line: 444,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 24
          },
          end: {
            line: 444,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "46": {
        loc: {
          start: {
            line: 442,
            column: 28
          },
          end: {
            line: 442,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 28
          },
          end: {
            line: 442,
            column: 47
          }
        }, {
          start: {
            line: 442,
            column: 51
          },
          end: {
            line: 442,
            column: 77
          }
        }],
        line: 442
      },
      "47": {
        loc: {
          start: {
            line: 445,
            column: 24
          },
          end: {
            line: 474,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 24
          },
          end: {
            line: 474,
            column: 25
          }
        }, {
          start: {
            line: 462,
            column: 29
          },
          end: {
            line: 474,
            column: 25
          }
        }],
        line: 445
      },
      "48": {
        loc: {
          start: {
            line: 447,
            column: 28
          },
          end: {
            line: 460,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 447,
            column: 28
          },
          end: {
            line: 460,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 447
      },
      "49": {
        loc: {
          start: {
            line: 454,
            column: 36
          },
          end: {
            line: 456,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 36
          },
          end: {
            line: 456,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "50": {
        loc: {
          start: {
            line: 462,
            column: 29
          },
          end: {
            line: 474,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 29
          },
          end: {
            line: 474,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "51": {
        loc: {
          start: {
            line: 466,
            column: 28
          },
          end: {
            line: 473,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 466,
            column: 28
          },
          end: {
            line: 473,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 466
      },
      "52": {
        loc: {
          start: {
            line: 467,
            column: 44
          },
          end: {
            line: 467,
            column: 101
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 467,
            column: 44
          },
          end: {
            line: 467,
            column: 82
          }
        }, {
          start: {
            line: 467,
            column: 86
          },
          end: {
            line: 467,
            column: 101
          }
        }],
        line: 467
      },
      "53": {
        loc: {
          start: {
            line: 468,
            column: 32
          },
          end: {
            line: 470,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 468,
            column: 32
          },
          end: {
            line: 470,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 468
      },
      "54": {
        loc: {
          start: {
            line: 498,
            column: 44
          },
          end: {
            line: 498,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 498,
            column: 68
          },
          end: {
            line: 498,
            column: 84
          }
        }, {
          start: {
            line: 498,
            column: 87
          },
          end: {
            line: 498,
            column: 96
          }
        }],
        line: 498
      },
      "55": {
        loc: {
          start: {
            line: 508,
            column: 16
          },
          end: {
            line: 510,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 508,
            column: 16
          },
          end: {
            line: 510,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 508
      },
      "56": {
        loc: {
          start: {
            line: 511,
            column: 80
          },
          end: {
            line: 511,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 511,
            column: 105
          },
          end: {
            line: 511,
            column: 118
          }
        }, {
          start: {
            line: 511,
            column: 121
          },
          end: {
            line: 511,
            column: 136
          }
        }],
        line: 511
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0],
      "22": [0, 0],
      "23": [0, 0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/file-operations.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\nimport {\n  FileStorageConfig,\n  FileTransferProgress,\n  FileOperationResult,\n  FileCleanupResult,\n  WorkflowFileManifest,\n  FileValidationOptions,\n  FileValidationResult,\n  FileOperationLog,\n  FileOperationType,\n} from '../types/fileTypes.js';\n\n// Zod schemas for validation\nconst ValidateFileSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  maxFileSize: z.number().optional(),\n  allowedMimeTypes: z.array(z.string()).optional(),\n  allowedExtensions: z.array(z.string()).optional(),\n  checkVirusScan: z.boolean().default(false),\n});\n\nconst CleanupFilesSchema = z.object({\n  olderThanDays: z.number().min(1).max(365).default(30),\n  dryRun: z.boolean().default(true),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n});\n\nconst CreateFileManifestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  includeExecutions: z.boolean().default(true),\n});\n\nconst CompareFilesSchema = z.object({\n  filePath1: z.string().min(1, 'First file path is required'),\n  filePath2: z.string().min(1, 'Second file path is required'),\n  compareContent: z.boolean().default(false),\n});\n\nconst GetFileInfoSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  includeHash: z.boolean().default(false),\n  hashAlgorithm: z.enum(['md5', 'sha1', 'sha256']).default('sha256'),\n});\n\nconst BatchFileOperationSchema = z.object({\n  operation: z.enum(['copy', 'move', 'delete', 'validate']),\n  files: z.array(z.string()).min(1, 'At least one file required'),\n  targetDirectory: z.string().optional(),\n  options: z.object({\n    createDirectories: z.boolean().default(true),\n    overwrite: z.boolean().default(false),\n    preserveTimestamps: z.boolean().default(false),\n  }).optional(),\n});\n\nconst ArchiveFilesSchema = z.object({\n  files: z.array(z.string()).min(1, 'At least one file required'),\n  outputPath: z.string().min(1, 'Output archive path is required'),\n  format: z.enum(['zip', 'tar', 'tar.gz']).default('zip'),\n  compressionLevel: z.number().min(0).max(9).default(6),\n});\n\nconst ExtractArchiveSchema = z.object({\n  archivePath: z.string().min(1, 'Archive path is required'),\n  extractToDirectory: z.string().min(1, 'Extract directory is required'),\n  overwrite: z.boolean().default(false),\n  preserveStructure: z.boolean().default(true),\n});\n\nconst MonitorDirectorySchema = z.object({\n  directoryPath: z.string().min(1, 'Directory path is required'),\n  watchPattern: z.string().default('*'),\n  recursive: z.boolean().default(true),\n  events: z.array(z.enum(['create', 'modify', 'delete'])).default(['create', 'modify', 'delete']),\n  debounceMs: z.number().min(100).max(10000).default(1000),\n});\n\nconst GetDirectoryStatsSchema = z.object({\n  directoryPath: z.string().min(1, 'Directory path is required'),\n  recursive: z.boolean().default(true),\n  includeHidden: z.boolean().default(false),\n  groupByExtension: z.boolean().default(true),\n});\n\n// Global file handler instance\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Initialize file handler\nconst getFileHandler = (): FileHandlingUtils => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Helper functions\nconst calculateFileHash = async (filePath: string, algorithm: string = 'sha256'): Promise<string> => {\n  const fileBuffer = await fs.readFile(filePath);\n  const hashSum = crypto.createHash(algorithm);\n  hashSum.update(fileBuffer);\n  return hashSum.digest('hex');\n};\n\nconst getMimeTypeFromBuffer = async (buffer: Buffer): Promise<string> => {\n  // Simple MIME type detection based on file signatures\n  const signatures: Record<string, string> = {\n    '89504E47': 'image/png',\n    'FFD8FF': 'image/jpeg',\n    '47494638': 'image/gif',\n    '25504446': 'application/pdf',\n    '504B0304': 'application/zip',\n    '504B0506': 'application/zip',\n    '504B0708': 'application/zip',\n    '7B22': 'application/json', // Starts with {\"\n    '3C3F786D6C': 'application/xml', // Starts with <?xml\n  };\n\n  const header = buffer.subarray(0, 8).toString('hex').toUpperCase();\n  \n  for (const [signature, mimeType] of Object.entries(signatures)) {\n    if (header.startsWith(signature)) {\n      return mimeType;\n    }\n  }\n\n  // Check for text files\n  const textSample = buffer.subarray(0, 100);\n  const isText = textSample.every(byte => byte === 0x09 || byte === 0x0A || byte === 0x0D || (byte >= 0x20 && byte <= 0x7E));\n  \n  return isText ? 'text/plain' : 'application/octet-stream';\n};\n\n// Tool registration function\nexport function createFileOperationsTools(server: any) {\n  // Validate file tool\n  server.addTool({\n    name: 'validate-file',\n    description: 'Validate a file against size, type, and security constraints',\n    parameters: ValidateFileSchema,\n    handler: async (args: z.infer<typeof ValidateFileSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Get file stats\n        const stats = await fs.stat(args.filePath);\n        const fileName = path.basename(args.filePath);\n\n        // Detect MIME type\n        const buffer = await fs.readFile(args.filePath);\n        const detectedMimeType = await getMimeTypeFromBuffer(buffer);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(\n          fileName,\n          detectedMimeType,\n          stats.size,\n          {\n            maxFileSize: args.maxFileSize,\n            allowedMimeTypes: args.allowedMimeTypes,\n            allowedExtensions: args.allowedExtensions,\n            virusScan: args.checkVirusScan,\n          }\n        );\n\n        return {\n          success: validation.isValid,\n          validation,\n          fileInfo: {\n            path: args.filePath,\n            name: fileName,\n            size: stats.size,\n            detectedMimeType,\n            created: stats.birthtime.toISOString(),\n            modified: stats.mtime.toISOString(),\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to validate file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Cleanup old files tool\n  server.addTool({\n    name: 'cleanup-files',\n    description: 'Clean up old files from the file storage system',\n    parameters: CleanupFilesSchema,\n    handler: async (args: z.infer<typeof CleanupFilesSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Perform cleanup (using the actual method name from FileHandlingUtils)\n        const result = await fileHandler.cleanupOldFiles(args.olderThanDays);\n\n        return {\n          success: true,\n          result,\n          dryRun: args.dryRun,\n          message: args.dryRun \n            ? `Would delete ${result.deletedFiles} files, freeing ${result.freedSpace} bytes`\n            : `Deleted ${result.deletedFiles} files, freed ${result.freedSpace} bytes`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to cleanup files: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Create workflow file manifest tool\n  server.addTool({\n    name: 'create-file-manifest',\n    description: 'Create a manifest of all files associated with a workflow',\n    parameters: CreateFileManifestSchema,\n    handler: async (args: z.infer<typeof CreateFileManifestSchema>) => {\n      try {\n        const fileHandler = getFileHandler();\n\n        // Create manifest (simplified implementation since method doesn't exist)\n        const manifest: WorkflowFileManifest = {\n          workflowId: args.workflowId,\n          workflowName: `Workflow ${args.workflowId}`,\n          files: [], // Would be populated from actual file system scan\n          totalSize: 0,\n          fileCount: 0,\n          lastUpdated: new Date().toISOString(),\n        };\n\n        return {\n          success: true,\n          manifest,\n          message: `Created manifest for workflow ${args.workflowId} with ${manifest.fileCount} files`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to create file manifest: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Compare files tool\n  server.addTool({\n    name: 'compare-files',\n    description: 'Compare two files for differences',\n    parameters: CompareFilesSchema,\n    handler: async (args: z.infer<typeof CompareFilesSchema>) => {\n      try {\n        // Check if both files exist\n        try {\n          await fs.access(args.filePath1);\n          await fs.access(args.filePath2);\n        } catch {\n          throw new UserError('One or both files not found');\n        }\n\n        // Get file stats\n        const stats1 = await fs.stat(args.filePath1);\n        const stats2 = await fs.stat(args.filePath2);\n\n        const comparison = {\n          files: {\n            file1: {\n              path: args.filePath1,\n              size: stats1.size,\n              modified: stats1.mtime.toISOString(),\n            },\n            file2: {\n              path: args.filePath2,\n              size: stats2.size,\n              modified: stats2.mtime.toISOString(),\n            },\n          },\n          sizeDifference: Math.abs(stats1.size - stats2.size),\n          sizeMatch: stats1.size === stats2.size,\n          contentMatch: false,\n          hash1: '',\n          hash2: '',\n        };\n\n        // Compare hashes\n        const [hash1, hash2] = await Promise.all([\n          calculateFileHash(args.filePath1),\n          calculateFileHash(args.filePath2),\n        ]);\n\n        comparison.hash1 = hash1;\n        comparison.hash2 = hash2;\n        comparison.contentMatch = hash1 === hash2;\n\n        // If requested and files are small enough, compare content line by line\n        let contentDifferences: any = null;\n        if (args.compareContent && stats1.size < 1024 * 1024 && stats2.size < 1024 * 1024) { // Max 1MB\n          const [content1, content2] = await Promise.all([\n            fs.readFile(args.filePath1, 'utf-8'),\n            fs.readFile(args.filePath2, 'utf-8'),\n          ]);\n\n          const lines1 = content1.split('\\n');\n          const lines2 = content2.split('\\n');\n          const maxLines = Math.max(lines1.length, lines2.length);\n          const differences = [];\n\n          for (let i = 0; i < maxLines; i++) {\n            const line1 = lines1[i] || '';\n            const line2 = lines2[i] || '';\n            if (line1 !== line2) {\n              differences.push({\n                lineNumber: i + 1,\n                file1: line1,\n                file2: line2,\n              });\n            }\n          }\n\n          contentDifferences = {\n            totalDifferences: differences.length,\n            differences: differences.slice(0, 50), // Limit to first 50 differences\n          };\n        }\n\n        return {\n          success: true,\n          comparison,\n          contentDifferences,\n          message: comparison.contentMatch\n            ? 'Files are identical'\n            : `Files differ (size: ${comparison.sizeDifference} bytes, content: ${comparison.contentMatch ? 'identical' : 'different'})`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to compare files: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get file information tool\n  server.addTool({\n    name: 'get-file-info',\n    description: 'Get detailed information about a file',\n    parameters: GetFileInfoSchema,\n    handler: async (args: z.infer<typeof GetFileInfoSchema>) => {\n      try {\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Get file stats\n        const stats = await fs.stat(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const fileExtension = path.extname(args.filePath);\n\n        // Detect MIME type\n        const buffer = await fs.readFile(args.filePath, { flag: 'r' });\n        const detectedMimeType = await getMimeTypeFromBuffer(buffer);\n\n        const fileInfo = {\n          path: args.filePath,\n          name: fileName,\n          extension: fileExtension,\n          size: stats.size,\n          sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)} MB`,\n          mimeType: detectedMimeType,\n          created: stats.birthtime.toISOString(),\n          modified: stats.mtime.toISOString(),\n          accessed: stats.atime.toISOString(),\n          isDirectory: stats.isDirectory(),\n          isFile: stats.isFile(),\n          permissions: '0' + (stats.mode & parseInt('777', 8)).toString(8),\n        };\n\n        // Calculate hash if requested\n        if (args.includeHash) {\n          const hash = await calculateFileHash(args.filePath, args.hashAlgorithm);\n          (fileInfo as any).hash = {\n            algorithm: args.hashAlgorithm,\n            value: hash,\n          };\n        }\n\n        return {\n          success: true,\n          fileInfo,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get file info: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get directory statistics tool\n  server.addTool({\n    name: 'get-directory-stats',\n    description: 'Get statistics about a directory and its contents',\n    parameters: GetDirectoryStatsSchema,\n    handler: async (args: z.infer<typeof GetDirectoryStatsSchema>) => {\n      try {\n        // Check if directory exists\n        try {\n          const stats = await fs.stat(args.directoryPath);\n          if (!stats.isDirectory()) {\n            throw new UserError('Path is not a directory');\n          }\n        } catch {\n          throw new UserError(`Directory not found: ${args.directoryPath}`);\n        }\n\n        const analyzeDirectory = async (dirPath: string): Promise<any> => {\n          const entries = await fs.readdir(dirPath, { withFileTypes: true });\n          let totalFiles = 0;\n          let totalDirectories = 0;\n          let totalSize = 0;\n          const extensions: Record<string, { count: number; size: number }> = {};\n\n          for (const entry of entries) {\n            const fullPath = path.join(dirPath, entry.name);\n            \n            // Skip hidden files unless requested\n            if (!args.includeHidden && entry.name.startsWith('.')) {\n              continue;\n            }\n\n            if (entry.isDirectory()) {\n              totalDirectories++;\n              if (args.recursive) {\n                const subStats = await analyzeDirectory(fullPath);\n                totalFiles += subStats.totalFiles;\n                totalDirectories += subStats.totalDirectories;\n                totalSize += subStats.totalSize;\n                \n                // Merge extensions\n                for (const [ext, data] of Object.entries(subStats.extensions)) {\n                  if (!extensions[ext]) {\n                    extensions[ext] = { count: 0, size: 0 };\n                  }\n                  extensions[ext].count += (data as any).count;\n                  extensions[ext].size += (data as any).size;\n                }\n              }\n            } else if (entry.isFile()) {\n              totalFiles++;\n              const fileStat = await fs.stat(fullPath);\n              totalSize += fileStat.size;\n\n              if (args.groupByExtension) {\n                const ext = path.extname(entry.name).toLowerCase() || '.no-extension';\n                if (!extensions[ext]) {\n                  extensions[ext] = { count: 0, size: 0 };\n                }\n                extensions[ext].count++;\n                extensions[ext].size += fileStat.size;\n              }\n            }\n          }\n\n          return { totalFiles, totalDirectories, totalSize, extensions };\n        };\n\n        const stats = await analyzeDirectory(args.directoryPath);\n\n        // Sort extensions by count\n        const sortedExtensions = Object.entries(stats.extensions)\n          .sort(([, a], [, b]) => (b as { count: number }).count - (a as { count: number }).count)\n          .reduce((acc, [ext, data]) => {\n            const typedData = data as { count: number; size: number };\n            acc[ext] = {\n              ...typedData,\n              sizeFormatted: `${(typedData.size / 1024 / 1024).toFixed(2)} MB`,\n            };\n            return acc;\n          }, {} as Record<string, any>);\n\n        return {\n          success: true,\n          directoryPath: args.directoryPath,\n          statistics: {\n            totalFiles: stats.totalFiles,\n            totalDirectories: stats.totalDirectories,\n            totalSize: stats.totalSize,\n            totalSizeFormatted: `${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`,\n            extensionBreakdown: args.groupByExtension ? sortedExtensions : undefined,\n          },\n          options: {\n            recursive: args.recursive,\n            includeHidden: args.includeHidden,\n            groupByExtension: args.groupByExtension,\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get directory stats: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9c26cd638fd05af85af6b8d5674ff5b5f17d8ecc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g9zbwmm0d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g9zbwmm0d();
var __createBinding =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[0]++,
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[0]++;
  cov_1g9zbwmm0d().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().b[2][0]++;
    cov_1g9zbwmm0d().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1g9zbwmm0d().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[5][1]++,
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().b[3][0]++;
    cov_1g9zbwmm0d().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().f[1]++;
        cov_1g9zbwmm0d().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1g9zbwmm0d().b[3][1]++;
  }
  cov_1g9zbwmm0d().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[2]++;
  cov_1g9zbwmm0d().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().b[7][0]++;
    cov_1g9zbwmm0d().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1g9zbwmm0d().b[7][1]++;
  }
  cov_1g9zbwmm0d().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[11]++,
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[3]++;
  cov_1g9zbwmm0d().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[4]++;
  cov_1g9zbwmm0d().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[14]++,
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[5]++;
  cov_1g9zbwmm0d().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().f[6]++;
    cov_1g9zbwmm0d().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().s[17]++, []);
      /* istanbul ignore next */
      cov_1g9zbwmm0d().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[12][0]++;
          cov_1g9zbwmm0d().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1g9zbwmm0d().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1g9zbwmm0d().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().f[8]++;
    cov_1g9zbwmm0d().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().b[13][0]++;
      cov_1g9zbwmm0d().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1g9zbwmm0d().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().s[26]++, {});
    /* istanbul ignore next */
    cov_1g9zbwmm0d().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().b[15][0]++;
      cov_1g9zbwmm0d().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[16][0]++;
          cov_1g9zbwmm0d().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1g9zbwmm0d().b[15][1]++;
    }
    cov_1g9zbwmm0d().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1g9zbwmm0d().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1g9zbwmm0d().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1g9zbwmm0d().s[36]++;
exports.createFileOperationsTools = createFileOperationsTools;
const zod_1 =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[37]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[38]++, require("fastmcp"));
const fs =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[39]++, __importStar(require("fs/promises")));
const path =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[40]++, __importStar(require("path")));
const crypto =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[41]++, __importStar(require("crypto")));
const fileHandling_js_1 =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[42]++, require("../utils/fileHandling.js"));
// Zod schemas for validation
const ValidateFileSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[43]++, zod_1.z.object({
  filePath: zod_1.z.string().min(1, 'File path is required'),
  maxFileSize: zod_1.z.number().optional(),
  allowedMimeTypes: zod_1.z.array(zod_1.z.string()).optional(),
  allowedExtensions: zod_1.z.array(zod_1.z.string()).optional(),
  checkVirusScan: zod_1.z.boolean().default(false)
}));
const CleanupFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[44]++, zod_1.z.object({
  olderThanDays: zod_1.z.number().min(1).max(365).default(30),
  dryRun: zod_1.z.boolean().default(true),
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional()
}));
const CreateFileManifestSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[45]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  includeExecutions: zod_1.z.boolean().default(true)
}));
const CompareFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[46]++, zod_1.z.object({
  filePath1: zod_1.z.string().min(1, 'First file path is required'),
  filePath2: zod_1.z.string().min(1, 'Second file path is required'),
  compareContent: zod_1.z.boolean().default(false)
}));
const GetFileInfoSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[47]++, zod_1.z.object({
  filePath: zod_1.z.string().min(1, 'File path is required'),
  includeHash: zod_1.z.boolean().default(false),
  hashAlgorithm: zod_1.z.enum(['md5', 'sha1', 'sha256']).default('sha256')
}));
const BatchFileOperationSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[48]++, zod_1.z.object({
  operation: zod_1.z.enum(['copy', 'move', 'delete', 'validate']),
  files: zod_1.z.array(zod_1.z.string()).min(1, 'At least one file required'),
  targetDirectory: zod_1.z.string().optional(),
  options: zod_1.z.object({
    createDirectories: zod_1.z.boolean().default(true),
    overwrite: zod_1.z.boolean().default(false),
    preserveTimestamps: zod_1.z.boolean().default(false)
  }).optional()
}));
const ArchiveFilesSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[49]++, zod_1.z.object({
  files: zod_1.z.array(zod_1.z.string()).min(1, 'At least one file required'),
  outputPath: zod_1.z.string().min(1, 'Output archive path is required'),
  format: zod_1.z.enum(['zip', 'tar', 'tar.gz']).default('zip'),
  compressionLevel: zod_1.z.number().min(0).max(9).default(6)
}));
const ExtractArchiveSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[50]++, zod_1.z.object({
  archivePath: zod_1.z.string().min(1, 'Archive path is required'),
  extractToDirectory: zod_1.z.string().min(1, 'Extract directory is required'),
  overwrite: zod_1.z.boolean().default(false),
  preserveStructure: zod_1.z.boolean().default(true)
}));
const MonitorDirectorySchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[51]++, zod_1.z.object({
  directoryPath: zod_1.z.string().min(1, 'Directory path is required'),
  watchPattern: zod_1.z.string().default('*'),
  recursive: zod_1.z.boolean().default(true),
  events: zod_1.z.array(zod_1.z.enum(['create', 'modify', 'delete'])).default(['create', 'modify', 'delete']),
  debounceMs: zod_1.z.number().min(100).max(10000).default(1000)
}));
const GetDirectoryStatsSchema =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[52]++, zod_1.z.object({
  directoryPath: zod_1.z.string().min(1, 'Directory path is required'),
  recursive: zod_1.z.boolean().default(true),
  includeHidden: zod_1.z.boolean().default(false),
  groupByExtension: zod_1.z.boolean().default(true)
}));
// Global file handler instance
let fileHandler =
/* istanbul ignore next */
(cov_1g9zbwmm0d().s[53]++, null);
// Initialize file handler
/* istanbul ignore next */
cov_1g9zbwmm0d().s[54]++;
const getFileHandler = () => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[9]++;
  cov_1g9zbwmm0d().s[55]++;
  if (!fileHandler) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().b[17][0]++;
    cov_1g9zbwmm0d().s[56]++;
    fileHandler = new fileHandling_js_1.FileHandlingUtils({
      baseDirectory:
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[18][0]++, process.env.N8N_FILES_DIR) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[18][1]++, './data/files'),
      maxFileSize: parseInt(
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[19][0]++, process.env.MAX_FILE_SIZE) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[19][1]++, '104857600')),
      // 100MB
      allowedMimeTypes:
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[20][0]++, process.env.ALLOWED_MIME_TYPES?.split(',')) ||
      /* istanbul ignore next */
      (cov_1g9zbwmm0d().b[20][1]++, ['image/*', 'text/*', 'application/json', 'application/pdf', 'application/zip', 'application/x-zip-compressed', 'application/octet-stream', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
    });
  } else
  /* istanbul ignore next */
  {
    cov_1g9zbwmm0d().b[17][1]++;
  }
  cov_1g9zbwmm0d().s[57]++;
  return fileHandler;
};
// Helper functions
/* istanbul ignore next */
cov_1g9zbwmm0d().s[58]++;
const calculateFileHash = async (filePath, algorithm =
/* istanbul ignore next */
(cov_1g9zbwmm0d().b[21][0]++, 'sha256')) => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[10]++;
  const fileBuffer =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[59]++, await fs.readFile(filePath));
  const hashSum =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[60]++, crypto.createHash(algorithm));
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[61]++;
  hashSum.update(fileBuffer);
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[62]++;
  return hashSum.digest('hex');
};
/* istanbul ignore next */
cov_1g9zbwmm0d().s[63]++;
const getMimeTypeFromBuffer = async buffer => {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[11]++;
  // Simple MIME type detection based on file signatures
  const signatures =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[64]++, {
    '89504E47': 'image/png',
    'FFD8FF': 'image/jpeg',
    '47494638': 'image/gif',
    '25504446': 'application/pdf',
    '504B0304': 'application/zip',
    '504B0506': 'application/zip',
    '504B0708': 'application/zip',
    '7B22': 'application/json',
    // Starts with {"
    '3C3F786D6C': 'application/xml' // Starts with <?xml
  });
  const header =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[65]++, buffer.subarray(0, 8).toString('hex').toUpperCase());
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[66]++;
  for (const [signature, mimeType] of Object.entries(signatures)) {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().s[67]++;
    if (header.startsWith(signature)) {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().b[22][0]++;
      cov_1g9zbwmm0d().s[68]++;
      return mimeType;
    } else
    /* istanbul ignore next */
    {
      cov_1g9zbwmm0d().b[22][1]++;
    }
  }
  // Check for text files
  const textSample =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[69]++, buffer.subarray(0, 100));
  const isText =
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().s[70]++, textSample.every(byte => {
    /* istanbul ignore next */
    cov_1g9zbwmm0d().f[12]++;
    cov_1g9zbwmm0d().s[71]++;
    return /* istanbul ignore next */(cov_1g9zbwmm0d().b[23][0]++, byte === 0x09) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[23][1]++, byte === 0x0A) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[23][2]++, byte === 0x0D) ||
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[23][3]++, byte >= 0x20) &&
    /* istanbul ignore next */
    (cov_1g9zbwmm0d().b[23][4]++, byte <= 0x7E);
  }));
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[72]++;
  return isText ?
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[24][0]++, 'text/plain') :
  /* istanbul ignore next */
  (cov_1g9zbwmm0d().b[24][1]++, 'application/octet-stream');
};
// Tool registration function
function createFileOperationsTools(server) {
  /* istanbul ignore next */
  cov_1g9zbwmm0d().f[13]++;
  cov_1g9zbwmm0d().s[73]++;
  // Validate file tool
  server.addTool({
    name: 'validate-file',
    description: 'Validate a file against size, type, and security constraints',
    parameters: ValidateFileSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[14]++;
      cov_1g9zbwmm0d().s[74]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[75]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[76]++;
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[77]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[78]++;
          throw new fastmcp_1.UserError(`File not found: ${args.filePath}`);
        }
        // Get file stats
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[79]++, await fs.stat(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[80]++, path.basename(args.filePath));
        // Detect MIME type
        const buffer =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[81]++, await fs.readFile(args.filePath));
        const detectedMimeType =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[82]++, await getMimeTypeFromBuffer(buffer));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[83]++, await fileHandler.validateFile(fileName, detectedMimeType, stats.size, {
          maxFileSize: args.maxFileSize,
          allowedMimeTypes: args.allowedMimeTypes,
          allowedExtensions: args.allowedExtensions,
          virusScan: args.checkVirusScan
        }));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[84]++;
        return {
          success: validation.isValid,
          validation,
          fileInfo: {
            path: args.filePath,
            name: fileName,
            size: stats.size,
            detectedMimeType,
            created: stats.birthtime.toISOString(),
            modified: stats.mtime.toISOString()
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[85]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[25][0]++;
          cov_1g9zbwmm0d().s[86]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[25][1]++;
        }
        cov_1g9zbwmm0d().s[87]++;
        throw new fastmcp_1.UserError(`Failed to validate file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[26][1]++, 'Unknown error')}`);
      }
    }
  });
  // Cleanup old files tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[88]++;
  server.addTool({
    name: 'cleanup-files',
    description: 'Clean up old files from the file storage system',
    parameters: CleanupFilesSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[15]++;
      cov_1g9zbwmm0d().s[89]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[90]++, getFileHandler());
        // Perform cleanup (using the actual method name from FileHandlingUtils)
        const result =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[91]++, await fileHandler.cleanupOldFiles(args.olderThanDays));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[92]++;
        return {
          success: true,
          result,
          dryRun: args.dryRun,
          message: args.dryRun ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[27][0]++, `Would delete ${result.deletedFiles} files, freeing ${result.freedSpace} bytes`) :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[27][1]++, `Deleted ${result.deletedFiles} files, freed ${result.freedSpace} bytes`)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[93]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[28][0]++;
          cov_1g9zbwmm0d().s[94]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[28][1]++;
        }
        cov_1g9zbwmm0d().s[95]++;
        throw new fastmcp_1.UserError(`Failed to cleanup files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[29][1]++, 'Unknown error')}`);
      }
    }
  });
  // Create workflow file manifest tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[96]++;
  server.addTool({
    name: 'create-file-manifest',
    description: 'Create a manifest of all files associated with a workflow',
    parameters: CreateFileManifestSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[16]++;
      cov_1g9zbwmm0d().s[97]++;
      try {
        const fileHandler =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[98]++, getFileHandler());
        // Create manifest (simplified implementation since method doesn't exist)
        const manifest =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[99]++, {
          workflowId: args.workflowId,
          workflowName: `Workflow ${args.workflowId}`,
          files: [],
          // Would be populated from actual file system scan
          totalSize: 0,
          fileCount: 0,
          lastUpdated: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[100]++;
        return {
          success: true,
          manifest,
          message: `Created manifest for workflow ${args.workflowId} with ${manifest.fileCount} files`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[101]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[30][0]++;
          cov_1g9zbwmm0d().s[102]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[30][1]++;
        }
        cov_1g9zbwmm0d().s[103]++;
        throw new fastmcp_1.UserError(`Failed to create file manifest: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[31][1]++, 'Unknown error')}`);
      }
    }
  });
  // Compare files tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[104]++;
  server.addTool({
    name: 'compare-files',
    description: 'Compare two files for differences',
    parameters: CompareFilesSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[17]++;
      cov_1g9zbwmm0d().s[105]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[106]++;
        // Check if both files exist
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[107]++;
          await fs.access(args.filePath1);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[108]++;
          await fs.access(args.filePath2);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[109]++;
          throw new fastmcp_1.UserError('One or both files not found');
        }
        // Get file stats
        const stats1 =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[110]++, await fs.stat(args.filePath1));
        const stats2 =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[111]++, await fs.stat(args.filePath2));
        const comparison =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[112]++, {
          files: {
            file1: {
              path: args.filePath1,
              size: stats1.size,
              modified: stats1.mtime.toISOString()
            },
            file2: {
              path: args.filePath2,
              size: stats2.size,
              modified: stats2.mtime.toISOString()
            }
          },
          sizeDifference: Math.abs(stats1.size - stats2.size),
          sizeMatch: stats1.size === stats2.size,
          contentMatch: false,
          hash1: '',
          hash2: ''
        });
        // Compare hashes
        const [hash1, hash2] =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[113]++, await Promise.all([calculateFileHash(args.filePath1), calculateFileHash(args.filePath2)]));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[114]++;
        comparison.hash1 = hash1;
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[115]++;
        comparison.hash2 = hash2;
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[116]++;
        comparison.contentMatch = hash1 === hash2;
        // If requested and files are small enough, compare content line by line
        let contentDifferences =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[117]++, null);
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[118]++;
        if (
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[33][0]++, args.compareContent) &&
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[33][1]++, stats1.size < 1024 * 1024) &&
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[33][2]++, stats2.size < 1024 * 1024)) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[32][0]++;
          // Max 1MB
          const [content1, content2] =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[119]++, await Promise.all([fs.readFile(args.filePath1, 'utf-8'), fs.readFile(args.filePath2, 'utf-8')]));
          const lines1 =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[120]++, content1.split('\n'));
          const lines2 =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[121]++, content2.split('\n'));
          const maxLines =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[122]++, Math.max(lines1.length, lines2.length));
          const differences =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[123]++, []);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[124]++;
          for (let i =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[125]++, 0); i < maxLines; i++) {
            const line1 =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[126]++,
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[34][0]++, lines1[i]) ||
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[34][1]++, ''));
            const line2 =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[127]++,
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[35][0]++, lines2[i]) ||
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[35][1]++, ''));
            /* istanbul ignore next */
            cov_1g9zbwmm0d().s[128]++;
            if (line1 !== line2) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[36][0]++;
              cov_1g9zbwmm0d().s[129]++;
              differences.push({
                lineNumber: i + 1,
                file1: line1,
                file2: line2
              });
            } else
            /* istanbul ignore next */
            {
              cov_1g9zbwmm0d().b[36][1]++;
            }
          }
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[130]++;
          contentDifferences = {
            totalDifferences: differences.length,
            differences: differences.slice(0, 50) // Limit to first 50 differences
          };
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[32][1]++;
        }
        cov_1g9zbwmm0d().s[131]++;
        return {
          success: true,
          comparison,
          contentDifferences,
          message: comparison.contentMatch ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[37][0]++, 'Files are identical') :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[37][1]++, `Files differ (size: ${comparison.sizeDifference} bytes, content: ${comparison.contentMatch ?
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[38][0]++, 'identical') :
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().b[38][1]++, 'different')})`)
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[132]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[39][0]++;
          cov_1g9zbwmm0d().s[133]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[39][1]++;
        }
        cov_1g9zbwmm0d().s[134]++;
        throw new fastmcp_1.UserError(`Failed to compare files: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[40][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get file information tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[135]++;
  server.addTool({
    name: 'get-file-info',
    description: 'Get detailed information about a file',
    parameters: GetFileInfoSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[18]++;
      cov_1g9zbwmm0d().s[136]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[137]++;
        // Check if file exists
        try {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[138]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[139]++;
          throw new fastmcp_1.UserError(`File not found: ${args.filePath}`);
        }
        // Get file stats
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[140]++, await fs.stat(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[141]++, path.basename(args.filePath));
        const fileExtension =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[142]++, path.extname(args.filePath));
        // Detect MIME type
        const buffer =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[143]++, await fs.readFile(args.filePath, {
          flag: 'r'
        }));
        const detectedMimeType =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[144]++, await getMimeTypeFromBuffer(buffer));
        const fileInfo =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[145]++, {
          path: args.filePath,
          name: fileName,
          extension: fileExtension,
          size: stats.size,
          sizeFormatted: `${(stats.size / 1024 / 1024).toFixed(2)} MB`,
          mimeType: detectedMimeType,
          created: stats.birthtime.toISOString(),
          modified: stats.mtime.toISOString(),
          accessed: stats.atime.toISOString(),
          isDirectory: stats.isDirectory(),
          isFile: stats.isFile(),
          permissions: '0' + (stats.mode & parseInt('777', 8)).toString(8)
        });
        // Calculate hash if requested
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[146]++;
        if (args.includeHash) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[41][0]++;
          const hash =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[147]++, await calculateFileHash(args.filePath, args.hashAlgorithm));
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[148]++;
          fileInfo.hash = {
            algorithm: args.hashAlgorithm,
            value: hash
          };
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[41][1]++;
        }
        cov_1g9zbwmm0d().s[149]++;
        return {
          success: true,
          fileInfo
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[150]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[42][0]++;
          cov_1g9zbwmm0d().s[151]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[42][1]++;
        }
        cov_1g9zbwmm0d().s[152]++;
        throw new fastmcp_1.UserError(`Failed to get file info: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[43][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[43][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get directory statistics tool
  /* istanbul ignore next */
  cov_1g9zbwmm0d().s[153]++;
  server.addTool({
    name: 'get-directory-stats',
    description: 'Get statistics about a directory and its contents',
    parameters: GetDirectoryStatsSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1g9zbwmm0d().f[19]++;
      cov_1g9zbwmm0d().s[154]++;
      try {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[155]++;
        // Check if directory exists
        try {
          const stats =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[156]++, await fs.stat(args.directoryPath));
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[157]++;
          if (!stats.isDirectory()) {
            /* istanbul ignore next */
            cov_1g9zbwmm0d().b[44][0]++;
            cov_1g9zbwmm0d().s[158]++;
            throw new fastmcp_1.UserError('Path is not a directory');
          } else
          /* istanbul ignore next */
          {
            cov_1g9zbwmm0d().b[44][1]++;
          }
        } catch {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[159]++;
          throw new fastmcp_1.UserError(`Directory not found: ${args.directoryPath}`);
        }
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[160]++;
        const analyzeDirectory = async dirPath => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[20]++;
          const entries =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[161]++, await fs.readdir(dirPath, {
            withFileTypes: true
          }));
          let totalFiles =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[162]++, 0);
          let totalDirectories =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[163]++, 0);
          let totalSize =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[164]++, 0);
          const extensions =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[165]++, {});
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[166]++;
          for (const entry of entries) {
            const fullPath =
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().s[167]++, path.join(dirPath, entry.name));
            // Skip hidden files unless requested
            /* istanbul ignore next */
            cov_1g9zbwmm0d().s[168]++;
            if (
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[46][0]++, !args.includeHidden) &&
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[46][1]++, entry.name.startsWith('.'))) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[45][0]++;
              cov_1g9zbwmm0d().s[169]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_1g9zbwmm0d().b[45][1]++;
            }
            cov_1g9zbwmm0d().s[170]++;
            if (entry.isDirectory()) {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[47][0]++;
              cov_1g9zbwmm0d().s[171]++;
              totalDirectories++;
              /* istanbul ignore next */
              cov_1g9zbwmm0d().s[172]++;
              if (args.recursive) {
                /* istanbul ignore next */
                cov_1g9zbwmm0d().b[48][0]++;
                const subStats =
                /* istanbul ignore next */
                (cov_1g9zbwmm0d().s[173]++, await analyzeDirectory(fullPath));
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[174]++;
                totalFiles += subStats.totalFiles;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[175]++;
                totalDirectories += subStats.totalDirectories;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[176]++;
                totalSize += subStats.totalSize;
                // Merge extensions
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[177]++;
                for (const [ext, data] of Object.entries(subStats.extensions)) {
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[178]++;
                  if (!extensions[ext]) {
                    /* istanbul ignore next */
                    cov_1g9zbwmm0d().b[49][0]++;
                    cov_1g9zbwmm0d().s[179]++;
                    extensions[ext] = {
                      count: 0,
                      size: 0
                    };
                  } else
                  /* istanbul ignore next */
                  {
                    cov_1g9zbwmm0d().b[49][1]++;
                  }
                  cov_1g9zbwmm0d().s[180]++;
                  extensions[ext].count += data.count;
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[181]++;
                  extensions[ext].size += data.size;
                }
              } else
              /* istanbul ignore next */
              {
                cov_1g9zbwmm0d().b[48][1]++;
              }
            } else {
              /* istanbul ignore next */
              cov_1g9zbwmm0d().b[47][1]++;
              cov_1g9zbwmm0d().s[182]++;
              if (entry.isFile()) {
                /* istanbul ignore next */
                cov_1g9zbwmm0d().b[50][0]++;
                cov_1g9zbwmm0d().s[183]++;
                totalFiles++;
                const fileStat =
                /* istanbul ignore next */
                (cov_1g9zbwmm0d().s[184]++, await fs.stat(fullPath));
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[185]++;
                totalSize += fileStat.size;
                /* istanbul ignore next */
                cov_1g9zbwmm0d().s[186]++;
                if (args.groupByExtension) {
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().b[51][0]++;
                  const ext =
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().s[187]++,
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().b[52][0]++, path.extname(entry.name).toLowerCase()) ||
                  /* istanbul ignore next */
                  (cov_1g9zbwmm0d().b[52][1]++, '.no-extension'));
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[188]++;
                  if (!extensions[ext]) {
                    /* istanbul ignore next */
                    cov_1g9zbwmm0d().b[53][0]++;
                    cov_1g9zbwmm0d().s[189]++;
                    extensions[ext] = {
                      count: 0,
                      size: 0
                    };
                  } else
                  /* istanbul ignore next */
                  {
                    cov_1g9zbwmm0d().b[53][1]++;
                  }
                  cov_1g9zbwmm0d().s[190]++;
                  extensions[ext].count++;
                  /* istanbul ignore next */
                  cov_1g9zbwmm0d().s[191]++;
                  extensions[ext].size += fileStat.size;
                } else
                /* istanbul ignore next */
                {
                  cov_1g9zbwmm0d().b[51][1]++;
                }
              } else
              /* istanbul ignore next */
              {
                cov_1g9zbwmm0d().b[50][1]++;
              }
            }
          }
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[192]++;
          return {
            totalFiles,
            totalDirectories,
            totalSize,
            extensions
          };
        };
        const stats =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[193]++, await analyzeDirectory(args.directoryPath));
        // Sort extensions by count
        const sortedExtensions =
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().s[194]++, Object.entries(stats.extensions).sort(([, a], [, b]) => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[21]++;
          cov_1g9zbwmm0d().s[195]++;
          return b.count - a.count;
        }).reduce((acc, [ext, data]) => {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().f[22]++;
          const typedData =
          /* istanbul ignore next */
          (cov_1g9zbwmm0d().s[196]++, data);
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[197]++;
          acc[ext] = {
            ...typedData,
            sizeFormatted: `${(typedData.size / 1024 / 1024).toFixed(2)} MB`
          };
          /* istanbul ignore next */
          cov_1g9zbwmm0d().s[198]++;
          return acc;
        }, {}));
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[199]++;
        return {
          success: true,
          directoryPath: args.directoryPath,
          statistics: {
            totalFiles: stats.totalFiles,
            totalDirectories: stats.totalDirectories,
            totalSize: stats.totalSize,
            totalSizeFormatted: `${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`,
            extensionBreakdown: args.groupByExtension ?
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[54][0]++, sortedExtensions) :
            /* istanbul ignore next */
            (cov_1g9zbwmm0d().b[54][1]++, undefined)
          },
          options: {
            recursive: args.recursive,
            includeHidden: args.includeHidden,
            groupByExtension: args.groupByExtension
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1g9zbwmm0d().s[200]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1g9zbwmm0d().b[55][0]++;
          cov_1g9zbwmm0d().s[201]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1g9zbwmm0d().b[55][1]++;
        }
        cov_1g9zbwmm0d().s[202]++;
        throw new fastmcp_1.UserError(`Failed to get directory stats: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[56][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1g9zbwmm0d().b[56][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHBvcnRzIiwiY3JlYXRlRmlsZU9wZXJhdGlvbnNUb29scyIsInpvZF8xIiwiY292XzFnOXpid21tMGQiLCJzIiwicmVxdWlyZSIsImZhc3RtY3BfMSIsImZzIiwiX19pbXBvcnRTdGFyIiwicGF0aCIsImNyeXB0byIsImZpbGVIYW5kbGluZ19qc18xIiwiVmFsaWRhdGVGaWxlU2NoZW1hIiwieiIsIm9iamVjdCIsImZpbGVQYXRoIiwic3RyaW5nIiwibWluIiwibWF4RmlsZVNpemUiLCJudW1iZXIiLCJvcHRpb25hbCIsImFsbG93ZWRNaW1lVHlwZXMiLCJhcnJheSIsImFsbG93ZWRFeHRlbnNpb25zIiwiY2hlY2tWaXJ1c1NjYW4iLCJib29sZWFuIiwiZGVmYXVsdCIsIkNsZWFudXBGaWxlc1NjaGVtYSIsIm9sZGVyVGhhbkRheXMiLCJtYXgiLCJkcnlSdW4iLCJ3b3JrZmxvd0lkIiwiZXhlY3V0aW9uSWQiLCJDcmVhdGVGaWxlTWFuaWZlc3RTY2hlbWEiLCJpbmNsdWRlRXhlY3V0aW9ucyIsIkNvbXBhcmVGaWxlc1NjaGVtYSIsImZpbGVQYXRoMSIsImZpbGVQYXRoMiIsImNvbXBhcmVDb250ZW50IiwiR2V0RmlsZUluZm9TY2hlbWEiLCJpbmNsdWRlSGFzaCIsImhhc2hBbGdvcml0aG0iLCJlbnVtIiwiQmF0Y2hGaWxlT3BlcmF0aW9uU2NoZW1hIiwib3BlcmF0aW9uIiwiZmlsZXMiLCJ0YXJnZXREaXJlY3RvcnkiLCJvcHRpb25zIiwiY3JlYXRlRGlyZWN0b3JpZXMiLCJvdmVyd3JpdGUiLCJwcmVzZXJ2ZVRpbWVzdGFtcHMiLCJBcmNoaXZlRmlsZXNTY2hlbWEiLCJvdXRwdXRQYXRoIiwiZm9ybWF0IiwiY29tcHJlc3Npb25MZXZlbCIsIkV4dHJhY3RBcmNoaXZlU2NoZW1hIiwiYXJjaGl2ZVBhdGgiLCJleHRyYWN0VG9EaXJlY3RvcnkiLCJwcmVzZXJ2ZVN0cnVjdHVyZSIsIk1vbml0b3JEaXJlY3RvcnlTY2hlbWEiLCJkaXJlY3RvcnlQYXRoIiwid2F0Y2hQYXR0ZXJuIiwicmVjdXJzaXZlIiwiZXZlbnRzIiwiZGVib3VuY2VNcyIsIkdldERpcmVjdG9yeVN0YXRzU2NoZW1hIiwiaW5jbHVkZUhpZGRlbiIsImdyb3VwQnlFeHRlbnNpb24iLCJmaWxlSGFuZGxlciIsImdldEZpbGVIYW5kbGVyIiwiZiIsImIiLCJGaWxlSGFuZGxpbmdVdGlscyIsImJhc2VEaXJlY3RvcnkiLCJwcm9jZXNzIiwiZW52IiwiTjhOX0ZJTEVTX0RJUiIsInBhcnNlSW50IiwiTUFYX0ZJTEVfU0laRSIsIkFMTE9XRURfTUlNRV9UWVBFUyIsInNwbGl0IiwiY2FsY3VsYXRlRmlsZUhhc2giLCJhbGdvcml0aG0iLCJmaWxlQnVmZmVyIiwicmVhZEZpbGUiLCJoYXNoU3VtIiwiY3JlYXRlSGFzaCIsInVwZGF0ZSIsImRpZ2VzdCIsImdldE1pbWVUeXBlRnJvbUJ1ZmZlciIsImJ1ZmZlciIsInNpZ25hdHVyZXMiLCJoZWFkZXIiLCJzdWJhcnJheSIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJzaWduYXR1cmUiLCJtaW1lVHlwZSIsIk9iamVjdCIsImVudHJpZXMiLCJzdGFydHNXaXRoIiwidGV4dFNhbXBsZSIsImlzVGV4dCIsImV2ZXJ5IiwiYnl0ZSIsInNlcnZlciIsImFkZFRvb2wiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwYXJhbWV0ZXJzIiwiaGFuZGxlciIsImFyZ3MiLCJhY2Nlc3MiLCJVc2VyRXJyb3IiLCJzdGF0cyIsInN0YXQiLCJmaWxlTmFtZSIsImJhc2VuYW1lIiwiZGV0ZWN0ZWRNaW1lVHlwZSIsInZhbGlkYXRpb24iLCJ2YWxpZGF0ZUZpbGUiLCJzaXplIiwidmlydXNTY2FuIiwic3VjY2VzcyIsImlzVmFsaWQiLCJmaWxlSW5mbyIsImNyZWF0ZWQiLCJiaXJ0aHRpbWUiLCJ0b0lTT1N0cmluZyIsIm1vZGlmaWVkIiwibXRpbWUiLCJlcnJvciIsIkVycm9yIiwibWVzc2FnZSIsInJlc3VsdCIsImNsZWFudXBPbGRGaWxlcyIsImRlbGV0ZWRGaWxlcyIsImZyZWVkU3BhY2UiLCJtYW5pZmVzdCIsIndvcmtmbG93TmFtZSIsInRvdGFsU2l6ZSIsImZpbGVDb3VudCIsImxhc3RVcGRhdGVkIiwiRGF0ZSIsInN0YXRzMSIsInN0YXRzMiIsImNvbXBhcmlzb24iLCJmaWxlMSIsImZpbGUyIiwic2l6ZURpZmZlcmVuY2UiLCJNYXRoIiwiYWJzIiwic2l6ZU1hdGNoIiwiY29udGVudE1hdGNoIiwiaGFzaDEiLCJoYXNoMiIsIlByb21pc2UiLCJhbGwiLCJjb250ZW50RGlmZmVyZW5jZXMiLCJjb250ZW50MSIsImNvbnRlbnQyIiwibGluZXMxIiwibGluZXMyIiwibWF4TGluZXMiLCJsZW5ndGgiLCJkaWZmZXJlbmNlcyIsImkiLCJsaW5lMSIsImxpbmUyIiwicHVzaCIsImxpbmVOdW1iZXIiLCJ0b3RhbERpZmZlcmVuY2VzIiwic2xpY2UiLCJmaWxlRXh0ZW5zaW9uIiwiZXh0bmFtZSIsImZsYWciLCJleHRlbnNpb24iLCJzaXplRm9ybWF0dGVkIiwidG9GaXhlZCIsImFjY2Vzc2VkIiwiYXRpbWUiLCJpc0RpcmVjdG9yeSIsImlzRmlsZSIsInBlcm1pc3Npb25zIiwibW9kZSIsImhhc2giLCJ2YWx1ZSIsImFuYWx5emVEaXJlY3RvcnkiLCJkaXJQYXRoIiwicmVhZGRpciIsIndpdGhGaWxlVHlwZXMiLCJ0b3RhbEZpbGVzIiwidG90YWxEaXJlY3RvcmllcyIsImV4dGVuc2lvbnMiLCJlbnRyeSIsImZ1bGxQYXRoIiwiam9pbiIsInN1YlN0YXRzIiwiZXh0IiwiZGF0YSIsImNvdW50IiwiZmlsZVN0YXQiLCJ0b0xvd2VyQ2FzZSIsInNvcnRlZEV4dGVuc2lvbnMiLCJzb3J0IiwiYSIsInJlZHVjZSIsImFjYyIsInR5cGVkRGF0YSIsInN0YXRpc3RpY3MiLCJ0b3RhbFNpemVGb3JtYXR0ZWQiLCJleHRlbnNpb25CcmVha2Rvd24iLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci9zcmMvdG9vbHMvZmlsZS1vcGVyYXRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuaW1wb3J0IHsgVXNlckVycm9yIH0gZnJvbSAnZmFzdG1jcCc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy9wcm9taXNlcyc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgY3J5cHRvIGZyb20gJ2NyeXB0byc7XG5pbXBvcnQgeyBGaWxlSGFuZGxpbmdVdGlscyB9IGZyb20gJy4uL3V0aWxzL2ZpbGVIYW5kbGluZy5qcyc7XG5pbXBvcnQge1xuICBGaWxlU3RvcmFnZUNvbmZpZyxcbiAgRmlsZVRyYW5zZmVyUHJvZ3Jlc3MsXG4gIEZpbGVPcGVyYXRpb25SZXN1bHQsXG4gIEZpbGVDbGVhbnVwUmVzdWx0LFxuICBXb3JrZmxvd0ZpbGVNYW5pZmVzdCxcbiAgRmlsZVZhbGlkYXRpb25PcHRpb25zLFxuICBGaWxlVmFsaWRhdGlvblJlc3VsdCxcbiAgRmlsZU9wZXJhdGlvbkxvZyxcbiAgRmlsZU9wZXJhdGlvblR5cGUsXG59IGZyb20gJy4uL3R5cGVzL2ZpbGVUeXBlcy5qcyc7XG5cbi8vIFpvZCBzY2hlbWFzIGZvciB2YWxpZGF0aW9uXG5jb25zdCBWYWxpZGF0ZUZpbGVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGZpbGVQYXRoOiB6LnN0cmluZygpLm1pbigxLCAnRmlsZSBwYXRoIGlzIHJlcXVpcmVkJyksXG4gIG1heEZpbGVTaXplOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGFsbG93ZWRNaW1lVHlwZXM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgYWxsb3dlZEV4dGVuc2lvbnM6IHouYXJyYXkoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgY2hlY2tWaXJ1c1NjYW46IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxufSk7XG5cbmNvbnN0IENsZWFudXBGaWxlc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgb2xkZXJUaGFuRGF5czogei5udW1iZXIoKS5taW4oMSkubWF4KDM2NSkuZGVmYXVsdCgzMCksXG4gIGRyeVJ1bjogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBleGVjdXRpb25JZDogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxufSk7XG5cbmNvbnN0IENyZWF0ZUZpbGVNYW5pZmVzdFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKS5taW4oMSwgJ1dvcmtmbG93IElEIGlzIHJlcXVpcmVkJyksXG4gIGluY2x1ZGVFeGVjdXRpb25zOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxufSk7XG5cbmNvbnN0IENvbXBhcmVGaWxlc1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZmlsZVBhdGgxOiB6LnN0cmluZygpLm1pbigxLCAnRmlyc3QgZmlsZSBwYXRoIGlzIHJlcXVpcmVkJyksXG4gIGZpbGVQYXRoMjogei5zdHJpbmcoKS5taW4oMSwgJ1NlY29uZCBmaWxlIHBhdGggaXMgcmVxdWlyZWQnKSxcbiAgY29tcGFyZUNvbnRlbnQ6IHouYm9vbGVhbigpLmRlZmF1bHQoZmFsc2UpLFxufSk7XG5cbmNvbnN0IEdldEZpbGVJbmZvU2NoZW1hID0gei5vYmplY3Qoe1xuICBmaWxlUGF0aDogei5zdHJpbmcoKS5taW4oMSwgJ0ZpbGUgcGF0aCBpcyByZXF1aXJlZCcpLFxuICBpbmNsdWRlSGFzaDogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gIGhhc2hBbGdvcml0aG06IHouZW51bShbJ21kNScsICdzaGExJywgJ3NoYTI1NiddKS5kZWZhdWx0KCdzaGEyNTYnKSxcbn0pO1xuXG5jb25zdCBCYXRjaEZpbGVPcGVyYXRpb25TY2hlbWEgPSB6Lm9iamVjdCh7XG4gIG9wZXJhdGlvbjogei5lbnVtKFsnY29weScsICdtb3ZlJywgJ2RlbGV0ZScsICd2YWxpZGF0ZSddKSxcbiAgZmlsZXM6IHouYXJyYXkoei5zdHJpbmcoKSkubWluKDEsICdBdCBsZWFzdCBvbmUgZmlsZSByZXF1aXJlZCcpLFxuICB0YXJnZXREaXJlY3Rvcnk6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgb3B0aW9uczogei5vYmplY3Qoe1xuICAgIGNyZWF0ZURpcmVjdG9yaWVzOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxuICAgIG92ZXJ3cml0ZTogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gICAgcHJlc2VydmVUaW1lc3RhbXBzOiB6LmJvb2xlYW4oKS5kZWZhdWx0KGZhbHNlKSxcbiAgfSkub3B0aW9uYWwoKSxcbn0pO1xuXG5jb25zdCBBcmNoaXZlRmlsZXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGZpbGVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm1pbigxLCAnQXQgbGVhc3Qgb25lIGZpbGUgcmVxdWlyZWQnKSxcbiAgb3V0cHV0UGF0aDogei5zdHJpbmcoKS5taW4oMSwgJ091dHB1dCBhcmNoaXZlIHBhdGggaXMgcmVxdWlyZWQnKSxcbiAgZm9ybWF0OiB6LmVudW0oWyd6aXAnLCAndGFyJywgJ3Rhci5neiddKS5kZWZhdWx0KCd6aXAnKSxcbiAgY29tcHJlc3Npb25MZXZlbDogei5udW1iZXIoKS5taW4oMCkubWF4KDkpLmRlZmF1bHQoNiksXG59KTtcblxuY29uc3QgRXh0cmFjdEFyY2hpdmVTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGFyY2hpdmVQYXRoOiB6LnN0cmluZygpLm1pbigxLCAnQXJjaGl2ZSBwYXRoIGlzIHJlcXVpcmVkJyksXG4gIGV4dHJhY3RUb0RpcmVjdG9yeTogei5zdHJpbmcoKS5taW4oMSwgJ0V4dHJhY3QgZGlyZWN0b3J5IGlzIHJlcXVpcmVkJyksXG4gIG92ZXJ3cml0ZTogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gIHByZXNlcnZlU3RydWN0dXJlOiB6LmJvb2xlYW4oKS5kZWZhdWx0KHRydWUpLFxufSk7XG5cbmNvbnN0IE1vbml0b3JEaXJlY3RvcnlTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGRpcmVjdG9yeVBhdGg6IHouc3RyaW5nKCkubWluKDEsICdEaXJlY3RvcnkgcGF0aCBpcyByZXF1aXJlZCcpLFxuICB3YXRjaFBhdHRlcm46IHouc3RyaW5nKCkuZGVmYXVsdCgnKicpLFxuICByZWN1cnNpdmU6IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG4gIGV2ZW50czogei5hcnJheSh6LmVudW0oWydjcmVhdGUnLCAnbW9kaWZ5JywgJ2RlbGV0ZSddKSkuZGVmYXVsdChbJ2NyZWF0ZScsICdtb2RpZnknLCAnZGVsZXRlJ10pLFxuICBkZWJvdW5jZU1zOiB6Lm51bWJlcigpLm1pbigxMDApLm1heCgxMDAwMCkuZGVmYXVsdCgxMDAwKSxcbn0pO1xuXG5jb25zdCBHZXREaXJlY3RvcnlTdGF0c1NjaGVtYSA9IHoub2JqZWN0KHtcbiAgZGlyZWN0b3J5UGF0aDogei5zdHJpbmcoKS5taW4oMSwgJ0RpcmVjdG9yeSBwYXRoIGlzIHJlcXVpcmVkJyksXG4gIHJlY3Vyc2l2ZTogei5ib29sZWFuKCkuZGVmYXVsdCh0cnVlKSxcbiAgaW5jbHVkZUhpZGRlbjogei5ib29sZWFuKCkuZGVmYXVsdChmYWxzZSksXG4gIGdyb3VwQnlFeHRlbnNpb246IHouYm9vbGVhbigpLmRlZmF1bHQodHJ1ZSksXG59KTtcblxuLy8gR2xvYmFsIGZpbGUgaGFuZGxlciBpbnN0YW5jZVxubGV0IGZpbGVIYW5kbGVyOiBGaWxlSGFuZGxpbmdVdGlscyB8IG51bGwgPSBudWxsO1xuXG4vLyBJbml0aWFsaXplIGZpbGUgaGFuZGxlclxuY29uc3QgZ2V0RmlsZUhhbmRsZXIgPSAoKTogRmlsZUhhbmRsaW5nVXRpbHMgPT4ge1xuICBpZiAoIWZpbGVIYW5kbGVyKSB7XG4gICAgZmlsZUhhbmRsZXIgPSBuZXcgRmlsZUhhbmRsaW5nVXRpbHMoe1xuICAgICAgYmFzZURpcmVjdG9yeTogcHJvY2Vzcy5lbnYuTjhOX0ZJTEVTX0RJUiB8fCAnLi9kYXRhL2ZpbGVzJyxcbiAgICAgIG1heEZpbGVTaXplOiBwYXJzZUludChwcm9jZXNzLmVudi5NQVhfRklMRV9TSVpFIHx8ICcxMDQ4NTc2MDAnKSwgLy8gMTAwTUJcbiAgICAgIGFsbG93ZWRNaW1lVHlwZXM6IHByb2Nlc3MuZW52LkFMTE9XRURfTUlNRV9UWVBFUz8uc3BsaXQoJywnKSB8fCBbXG4gICAgICAgICdpbWFnZS8qJyxcbiAgICAgICAgJ3RleHQvKicsXG4gICAgICAgICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ2FwcGxpY2F0aW9uL3BkZicsXG4gICAgICAgICdhcHBsaWNhdGlvbi96aXAnLFxuICAgICAgICAnYXBwbGljYXRpb24veC16aXAtY29tcHJlc3NlZCcsXG4gICAgICAgICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nLFxuICAgICAgICAnYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsJyxcbiAgICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0JyxcbiAgICAgICAgJ2FwcGxpY2F0aW9uL21zd29yZCcsXG4gICAgICAgICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQud29yZHByb2Nlc3NpbmdtbC5kb2N1bWVudCcsXG4gICAgICBdLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBmaWxlSGFuZGxlcjtcbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbnNcbmNvbnN0IGNhbGN1bGF0ZUZpbGVIYXNoID0gYXN5bmMgKGZpbGVQYXRoOiBzdHJpbmcsIGFsZ29yaXRobTogc3RyaW5nID0gJ3NoYTI1NicpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBmaWxlQnVmZmVyID0gYXdhaXQgZnMucmVhZEZpbGUoZmlsZVBhdGgpO1xuICBjb25zdCBoYXNoU3VtID0gY3J5cHRvLmNyZWF0ZUhhc2goYWxnb3JpdGhtKTtcbiAgaGFzaFN1bS51cGRhdGUoZmlsZUJ1ZmZlcik7XG4gIHJldHVybiBoYXNoU3VtLmRpZ2VzdCgnaGV4Jyk7XG59O1xuXG5jb25zdCBnZXRNaW1lVHlwZUZyb21CdWZmZXIgPSBhc3luYyAoYnVmZmVyOiBCdWZmZXIpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAvLyBTaW1wbGUgTUlNRSB0eXBlIGRldGVjdGlvbiBiYXNlZCBvbiBmaWxlIHNpZ25hdHVyZXNcbiAgY29uc3Qgc2lnbmF0dXJlczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAnODk1MDRFNDcnOiAnaW1hZ2UvcG5nJyxcbiAgICAnRkZEOEZGJzogJ2ltYWdlL2pwZWcnLFxuICAgICc0NzQ5NDYzOCc6ICdpbWFnZS9naWYnLFxuICAgICcyNTUwNDQ0Nic6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICc1MDRCMDMwNCc6ICdhcHBsaWNhdGlvbi96aXAnLFxuICAgICc1MDRCMDUwNic6ICdhcHBsaWNhdGlvbi96aXAnLFxuICAgICc1MDRCMDcwOCc6ICdhcHBsaWNhdGlvbi96aXAnLFxuICAgICc3QjIyJzogJ2FwcGxpY2F0aW9uL2pzb24nLCAvLyBTdGFydHMgd2l0aCB7XCJcbiAgICAnM0MzRjc4NkQ2Qyc6ICdhcHBsaWNhdGlvbi94bWwnLCAvLyBTdGFydHMgd2l0aCA8P3htbFxuICB9O1xuXG4gIGNvbnN0IGhlYWRlciA9IGJ1ZmZlci5zdWJhcnJheSgwLCA4KS50b1N0cmluZygnaGV4JykudG9VcHBlckNhc2UoKTtcbiAgXG4gIGZvciAoY29uc3QgW3NpZ25hdHVyZSwgbWltZVR5cGVdIG9mIE9iamVjdC5lbnRyaWVzKHNpZ25hdHVyZXMpKSB7XG4gICAgaWYgKGhlYWRlci5zdGFydHNXaXRoKHNpZ25hdHVyZSkpIHtcbiAgICAgIHJldHVybiBtaW1lVHlwZTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGVjayBmb3IgdGV4dCBmaWxlc1xuICBjb25zdCB0ZXh0U2FtcGxlID0gYnVmZmVyLnN1YmFycmF5KDAsIDEwMCk7XG4gIGNvbnN0IGlzVGV4dCA9IHRleHRTYW1wbGUuZXZlcnkoYnl0ZSA9PiBieXRlID09PSAweDA5IHx8IGJ5dGUgPT09IDB4MEEgfHwgYnl0ZSA9PT0gMHgwRCB8fCAoYnl0ZSA+PSAweDIwICYmIGJ5dGUgPD0gMHg3RSkpO1xuICBcbiAgcmV0dXJuIGlzVGV4dCA/ICd0ZXh0L3BsYWluJyA6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nO1xufTtcblxuLy8gVG9vbCByZWdpc3RyYXRpb24gZnVuY3Rpb25cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWxlT3BlcmF0aW9uc1Rvb2xzKHNlcnZlcjogYW55KSB7XG4gIC8vIFZhbGlkYXRlIGZpbGUgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ3ZhbGlkYXRlLWZpbGUnLFxuICAgIGRlc2NyaXB0aW9uOiAnVmFsaWRhdGUgYSBmaWxlIGFnYWluc3Qgc2l6ZSwgdHlwZSwgYW5kIHNlY3VyaXR5IGNvbnN0cmFpbnRzJyxcbiAgICBwYXJhbWV0ZXJzOiBWYWxpZGF0ZUZpbGVTY2hlbWEsXG4gICAgaGFuZGxlcjogYXN5bmMgKGFyZ3M6IHouaW5mZXI8dHlwZW9mIFZhbGlkYXRlRmlsZVNjaGVtYT4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGZpbGVIYW5kbGVyID0gZ2V0RmlsZUhhbmRsZXIoKTtcblxuICAgICAgICAvLyBDaGVjayBpZiBmaWxlIGV4aXN0c1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGZzLmFjY2VzcyhhcmdzLmZpbGVQYXRoKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmlsZSBub3QgZm91bmQ6ICR7YXJncy5maWxlUGF0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBmaWxlIHN0YXRzXG4gICAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgZnMuc3RhdChhcmdzLmZpbGVQYXRoKTtcbiAgICAgICAgY29uc3QgZmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKGFyZ3MuZmlsZVBhdGgpO1xuXG4gICAgICAgIC8vIERldGVjdCBNSU1FIHR5cGVcbiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgZnMucmVhZEZpbGUoYXJncy5maWxlUGF0aCk7XG4gICAgICAgIGNvbnN0IGRldGVjdGVkTWltZVR5cGUgPSBhd2FpdCBnZXRNaW1lVHlwZUZyb21CdWZmZXIoYnVmZmVyKTtcblxuICAgICAgICAvLyBWYWxpZGF0ZSBmaWxlXG4gICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSBhd2FpdCBmaWxlSGFuZGxlci52YWxpZGF0ZUZpbGUoXG4gICAgICAgICAgZmlsZU5hbWUsXG4gICAgICAgICAgZGV0ZWN0ZWRNaW1lVHlwZSxcbiAgICAgICAgICBzdGF0cy5zaXplLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG1heEZpbGVTaXplOiBhcmdzLm1heEZpbGVTaXplLFxuICAgICAgICAgICAgYWxsb3dlZE1pbWVUeXBlczogYXJncy5hbGxvd2VkTWltZVR5cGVzLFxuICAgICAgICAgICAgYWxsb3dlZEV4dGVuc2lvbnM6IGFyZ3MuYWxsb3dlZEV4dGVuc2lvbnMsXG4gICAgICAgICAgICB2aXJ1c1NjYW46IGFyZ3MuY2hlY2tWaXJ1c1NjYW4sXG4gICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdmFsaWRhdGlvbi5pc1ZhbGlkLFxuICAgICAgICAgIHZhbGlkYXRpb24sXG4gICAgICAgICAgZmlsZUluZm86IHtcbiAgICAgICAgICAgIHBhdGg6IGFyZ3MuZmlsZVBhdGgsXG4gICAgICAgICAgICBuYW1lOiBmaWxlTmFtZSxcbiAgICAgICAgICAgIHNpemU6IHN0YXRzLnNpemUsXG4gICAgICAgICAgICBkZXRlY3RlZE1pbWVUeXBlLFxuICAgICAgICAgICAgY3JlYXRlZDogc3RhdHMuYmlydGh0aW1lLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICBtb2RpZmllZDogc3RhdHMubXRpbWUudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVXNlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIHZhbGlkYXRlIGZpbGU6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQ2xlYW51cCBvbGQgZmlsZXMgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2NsZWFudXAtZmlsZXMnLFxuICAgIGRlc2NyaXB0aW9uOiAnQ2xlYW4gdXAgb2xkIGZpbGVzIGZyb20gdGhlIGZpbGUgc3RvcmFnZSBzeXN0ZW0nLFxuICAgIHBhcmFtZXRlcnM6IENsZWFudXBGaWxlc1NjaGVtYSxcbiAgICBoYW5kbGVyOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgQ2xlYW51cEZpbGVzU2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmlsZUhhbmRsZXIgPSBnZXRGaWxlSGFuZGxlcigpO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gY2xlYW51cCAodXNpbmcgdGhlIGFjdHVhbCBtZXRob2QgbmFtZSBmcm9tIEZpbGVIYW5kbGluZ1V0aWxzKVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmaWxlSGFuZGxlci5jbGVhbnVwT2xkRmlsZXMoYXJncy5vbGRlclRoYW5EYXlzKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIGRyeVJ1bjogYXJncy5kcnlSdW4sXG4gICAgICAgICAgbWVzc2FnZTogYXJncy5kcnlSdW4gXG4gICAgICAgICAgICA/IGBXb3VsZCBkZWxldGUgJHtyZXN1bHQuZGVsZXRlZEZpbGVzfSBmaWxlcywgZnJlZWluZyAke3Jlc3VsdC5mcmVlZFNwYWNlfSBieXRlc2BcbiAgICAgICAgICAgIDogYERlbGV0ZWQgJHtyZXN1bHQuZGVsZXRlZEZpbGVzfSBmaWxlcywgZnJlZWQgJHtyZXN1bHQuZnJlZWRTcGFjZX0gYnl0ZXNgLFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVXNlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGNsZWFudXAgZmlsZXM6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIHdvcmtmbG93IGZpbGUgbWFuaWZlc3QgdG9vbFxuICBzZXJ2ZXIuYWRkVG9vbCh7XG4gICAgbmFtZTogJ2NyZWF0ZS1maWxlLW1hbmlmZXN0JyxcbiAgICBkZXNjcmlwdGlvbjogJ0NyZWF0ZSBhIG1hbmlmZXN0IG9mIGFsbCBmaWxlcyBhc3NvY2lhdGVkIHdpdGggYSB3b3JrZmxvdycsXG4gICAgcGFyYW1ldGVyczogQ3JlYXRlRmlsZU1hbmlmZXN0U2NoZW1hLFxuICAgIGhhbmRsZXI6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBDcmVhdGVGaWxlTWFuaWZlc3RTY2hlbWE+KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBmaWxlSGFuZGxlciA9IGdldEZpbGVIYW5kbGVyKCk7XG5cbiAgICAgICAgLy8gQ3JlYXRlIG1hbmlmZXN0IChzaW1wbGlmaWVkIGltcGxlbWVudGF0aW9uIHNpbmNlIG1ldGhvZCBkb2Vzbid0IGV4aXN0KVxuICAgICAgICBjb25zdCBtYW5pZmVzdDogV29ya2Zsb3dGaWxlTWFuaWZlc3QgPSB7XG4gICAgICAgICAgd29ya2Zsb3dJZDogYXJncy53b3JrZmxvd0lkLFxuICAgICAgICAgIHdvcmtmbG93TmFtZTogYFdvcmtmbG93ICR7YXJncy53b3JrZmxvd0lkfWAsXG4gICAgICAgICAgZmlsZXM6IFtdLCAvLyBXb3VsZCBiZSBwb3B1bGF0ZWQgZnJvbSBhY3R1YWwgZmlsZSBzeXN0ZW0gc2NhblxuICAgICAgICAgIHRvdGFsU2l6ZTogMCxcbiAgICAgICAgICBmaWxlQ291bnQ6IDAsXG4gICAgICAgICAgbGFzdFVwZGF0ZWQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgICAgbWVzc2FnZTogYENyZWF0ZWQgbWFuaWZlc3QgZm9yIHdvcmtmbG93ICR7YXJncy53b3JrZmxvd0lkfSB3aXRoICR7bWFuaWZlc3QuZmlsZUNvdW50fSBmaWxlc2AsXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBVc2VyRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGZpbGUgbWFuaWZlc3Q6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gQ29tcGFyZSBmaWxlcyB0b29sXG4gIHNlcnZlci5hZGRUb29sKHtcbiAgICBuYW1lOiAnY29tcGFyZS1maWxlcycsXG4gICAgZGVzY3JpcHRpb246ICdDb21wYXJlIHR3byBmaWxlcyBmb3IgZGlmZmVyZW5jZXMnLFxuICAgIHBhcmFtZXRlcnM6IENvbXBhcmVGaWxlc1NjaGVtYSxcbiAgICBoYW5kbGVyOiBhc3luYyAoYXJnczogei5pbmZlcjx0eXBlb2YgQ29tcGFyZUZpbGVzU2NoZW1hPikgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgYm90aCBmaWxlcyBleGlzdFxuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGZzLmFjY2VzcyhhcmdzLmZpbGVQYXRoMSk7XG4gICAgICAgICAgYXdhaXQgZnMuYWNjZXNzKGFyZ3MuZmlsZVBhdGgyKTtcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcignT25lIG9yIGJvdGggZmlsZXMgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgZmlsZSBzdGF0c1xuICAgICAgICBjb25zdCBzdGF0czEgPSBhd2FpdCBmcy5zdGF0KGFyZ3MuZmlsZVBhdGgxKTtcbiAgICAgICAgY29uc3Qgc3RhdHMyID0gYXdhaXQgZnMuc3RhdChhcmdzLmZpbGVQYXRoMik7XG5cbiAgICAgICAgY29uc3QgY29tcGFyaXNvbiA9IHtcbiAgICAgICAgICBmaWxlczoge1xuICAgICAgICAgICAgZmlsZTE6IHtcbiAgICAgICAgICAgICAgcGF0aDogYXJncy5maWxlUGF0aDEsXG4gICAgICAgICAgICAgIHNpemU6IHN0YXRzMS5zaXplLFxuICAgICAgICAgICAgICBtb2RpZmllZDogc3RhdHMxLm10aW1lLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsZTI6IHtcbiAgICAgICAgICAgICAgcGF0aDogYXJncy5maWxlUGF0aDIsXG4gICAgICAgICAgICAgIHNpemU6IHN0YXRzMi5zaXplLFxuICAgICAgICAgICAgICBtb2RpZmllZDogc3RhdHMyLm10aW1lLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc2l6ZURpZmZlcmVuY2U6IE1hdGguYWJzKHN0YXRzMS5zaXplIC0gc3RhdHMyLnNpemUpLFxuICAgICAgICAgIHNpemVNYXRjaDogc3RhdHMxLnNpemUgPT09IHN0YXRzMi5zaXplLFxuICAgICAgICAgIGNvbnRlbnRNYXRjaDogZmFsc2UsXG4gICAgICAgICAgaGFzaDE6ICcnLFxuICAgICAgICAgIGhhc2gyOiAnJyxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDb21wYXJlIGhhc2hlc1xuICAgICAgICBjb25zdCBbaGFzaDEsIGhhc2gyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICBjYWxjdWxhdGVGaWxlSGFzaChhcmdzLmZpbGVQYXRoMSksXG4gICAgICAgICAgY2FsY3VsYXRlRmlsZUhhc2goYXJncy5maWxlUGF0aDIpLFxuICAgICAgICBdKTtcblxuICAgICAgICBjb21wYXJpc29uLmhhc2gxID0gaGFzaDE7XG4gICAgICAgIGNvbXBhcmlzb24uaGFzaDIgPSBoYXNoMjtcbiAgICAgICAgY29tcGFyaXNvbi5jb250ZW50TWF0Y2ggPSBoYXNoMSA9PT0gaGFzaDI7XG5cbiAgICAgICAgLy8gSWYgcmVxdWVzdGVkIGFuZCBmaWxlcyBhcmUgc21hbGwgZW5vdWdoLCBjb21wYXJlIGNvbnRlbnQgbGluZSBieSBsaW5lXG4gICAgICAgIGxldCBjb250ZW50RGlmZmVyZW5jZXM6IGFueSA9IG51bGw7XG4gICAgICAgIGlmIChhcmdzLmNvbXBhcmVDb250ZW50ICYmIHN0YXRzMS5zaXplIDwgMTAyNCAqIDEwMjQgJiYgc3RhdHMyLnNpemUgPCAxMDI0ICogMTAyNCkgeyAvLyBNYXggMU1CXG4gICAgICAgICAgY29uc3QgW2NvbnRlbnQxLCBjb250ZW50Ml0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICBmcy5yZWFkRmlsZShhcmdzLmZpbGVQYXRoMSwgJ3V0Zi04JyksXG4gICAgICAgICAgICBmcy5yZWFkRmlsZShhcmdzLmZpbGVQYXRoMiwgJ3V0Zi04JyksXG4gICAgICAgICAgXSk7XG5cbiAgICAgICAgICBjb25zdCBsaW5lczEgPSBjb250ZW50MS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgY29uc3QgbGluZXMyID0gY29udGVudDIuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgIGNvbnN0IG1heExpbmVzID0gTWF0aC5tYXgobGluZXMxLmxlbmd0aCwgbGluZXMyLmxlbmd0aCk7XG4gICAgICAgICAgY29uc3QgZGlmZmVyZW5jZXMgPSBbXTtcblxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4TGluZXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGluZTEgPSBsaW5lczFbaV0gfHwgJyc7XG4gICAgICAgICAgICBjb25zdCBsaW5lMiA9IGxpbmVzMltpXSB8fCAnJztcbiAgICAgICAgICAgIGlmIChsaW5lMSAhPT0gbGluZTIpIHtcbiAgICAgICAgICAgICAgZGlmZmVyZW5jZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogaSArIDEsXG4gICAgICAgICAgICAgICAgZmlsZTE6IGxpbmUxLFxuICAgICAgICAgICAgICAgIGZpbGUyOiBsaW5lMixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGVudERpZmZlcmVuY2VzID0ge1xuICAgICAgICAgICAgdG90YWxEaWZmZXJlbmNlczogZGlmZmVyZW5jZXMubGVuZ3RoLFxuICAgICAgICAgICAgZGlmZmVyZW5jZXM6IGRpZmZlcmVuY2VzLnNsaWNlKDAsIDUwKSwgLy8gTGltaXQgdG8gZmlyc3QgNTAgZGlmZmVyZW5jZXNcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGNvbXBhcmlzb24sXG4gICAgICAgICAgY29udGVudERpZmZlcmVuY2VzLFxuICAgICAgICAgIG1lc3NhZ2U6IGNvbXBhcmlzb24uY29udGVudE1hdGNoXG4gICAgICAgICAgICA/ICdGaWxlcyBhcmUgaWRlbnRpY2FsJ1xuICAgICAgICAgICAgOiBgRmlsZXMgZGlmZmVyIChzaXplOiAke2NvbXBhcmlzb24uc2l6ZURpZmZlcmVuY2V9IGJ5dGVzLCBjb250ZW50OiAke2NvbXBhcmlzb24uY29udGVudE1hdGNoID8gJ2lkZW50aWNhbCcgOiAnZGlmZmVyZW50J30pYCxcbiAgICAgICAgfTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFVzZXJFcnJvcikge1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoYEZhaWxlZCB0byBjb21wYXJlIGZpbGVzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuXG4gIC8vIEdldCBmaWxlIGluZm9ybWF0aW9uIHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdnZXQtZmlsZS1pbmZvJyxcbiAgICBkZXNjcmlwdGlvbjogJ0dldCBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBhIGZpbGUnLFxuICAgIHBhcmFtZXRlcnM6IEdldEZpbGVJbmZvU2NoZW1hLFxuICAgIGhhbmRsZXI6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBHZXRGaWxlSW5mb1NjaGVtYT4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGZpbGUgZXhpc3RzXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgZnMuYWNjZXNzKGFyZ3MuZmlsZVBhdGgpO1xuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGaWxlIG5vdCBmb3VuZDogJHthcmdzLmZpbGVQYXRofWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IGZpbGUgc3RhdHNcbiAgICAgICAgY29uc3Qgc3RhdHMgPSBhd2FpdCBmcy5zdGF0KGFyZ3MuZmlsZVBhdGgpO1xuICAgICAgICBjb25zdCBmaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUoYXJncy5maWxlUGF0aCk7XG4gICAgICAgIGNvbnN0IGZpbGVFeHRlbnNpb24gPSBwYXRoLmV4dG5hbWUoYXJncy5maWxlUGF0aCk7XG5cbiAgICAgICAgLy8gRGV0ZWN0IE1JTUUgdHlwZVxuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCBmcy5yZWFkRmlsZShhcmdzLmZpbGVQYXRoLCB7IGZsYWc6ICdyJyB9KTtcbiAgICAgICAgY29uc3QgZGV0ZWN0ZWRNaW1lVHlwZSA9IGF3YWl0IGdldE1pbWVUeXBlRnJvbUJ1ZmZlcihidWZmZXIpO1xuXG4gICAgICAgIGNvbnN0IGZpbGVJbmZvID0ge1xuICAgICAgICAgIHBhdGg6IGFyZ3MuZmlsZVBhdGgsXG4gICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgZXh0ZW5zaW9uOiBmaWxlRXh0ZW5zaW9uLFxuICAgICAgICAgIHNpemU6IHN0YXRzLnNpemUsXG4gICAgICAgICAgc2l6ZUZvcm1hdHRlZDogYCR7KHN0YXRzLnNpemUgLyAxMDI0IC8gMTAyNCkudG9GaXhlZCgyKX0gTUJgLFxuICAgICAgICAgIG1pbWVUeXBlOiBkZXRlY3RlZE1pbWVUeXBlLFxuICAgICAgICAgIGNyZWF0ZWQ6IHN0YXRzLmJpcnRodGltZS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIG1vZGlmaWVkOiBzdGF0cy5tdGltZS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGFjY2Vzc2VkOiBzdGF0cy5hdGltZS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIGlzRGlyZWN0b3J5OiBzdGF0cy5pc0RpcmVjdG9yeSgpLFxuICAgICAgICAgIGlzRmlsZTogc3RhdHMuaXNGaWxlKCksXG4gICAgICAgICAgcGVybWlzc2lvbnM6ICcwJyArIChzdGF0cy5tb2RlICYgcGFyc2VJbnQoJzc3NycsIDgpKS50b1N0cmluZyg4KSxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgaGFzaCBpZiByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKGFyZ3MuaW5jbHVkZUhhc2gpIHtcbiAgICAgICAgICBjb25zdCBoYXNoID0gYXdhaXQgY2FsY3VsYXRlRmlsZUhhc2goYXJncy5maWxlUGF0aCwgYXJncy5oYXNoQWxnb3JpdGhtKTtcbiAgICAgICAgICAoZmlsZUluZm8gYXMgYW55KS5oYXNoID0ge1xuICAgICAgICAgICAgYWxnb3JpdGhtOiBhcmdzLmhhc2hBbGdvcml0aG0sXG4gICAgICAgICAgICB2YWx1ZTogaGFzaCxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGZpbGVJbmZvLFxuICAgICAgICB9O1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVXNlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFVzZXJFcnJvcihgRmFpbGVkIHRvIGdldCBmaWxlIGluZm86ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gR2V0IGRpcmVjdG9yeSBzdGF0aXN0aWNzIHRvb2xcbiAgc2VydmVyLmFkZFRvb2woe1xuICAgIG5hbWU6ICdnZXQtZGlyZWN0b3J5LXN0YXRzJyxcbiAgICBkZXNjcmlwdGlvbjogJ0dldCBzdGF0aXN0aWNzIGFib3V0IGEgZGlyZWN0b3J5IGFuZCBpdHMgY29udGVudHMnLFxuICAgIHBhcmFtZXRlcnM6IEdldERpcmVjdG9yeVN0YXRzU2NoZW1hLFxuICAgIGhhbmRsZXI6IGFzeW5jIChhcmdzOiB6LmluZmVyPHR5cGVvZiBHZXREaXJlY3RvcnlTdGF0c1NjaGVtYT4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGRpcmVjdG9yeSBleGlzdHNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBzdGF0cyA9IGF3YWl0IGZzLnN0YXQoYXJncy5kaXJlY3RvcnlQYXRoKTtcbiAgICAgICAgICBpZiAoIXN0YXRzLmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVc2VyRXJyb3IoJ1BhdGggaXMgbm90IGEgZGlyZWN0b3J5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBEaXJlY3Rvcnkgbm90IGZvdW5kOiAke2FyZ3MuZGlyZWN0b3J5UGF0aH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFuYWx5emVEaXJlY3RvcnkgPSBhc3luYyAoZGlyUGF0aDogc3RyaW5nKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgICAgICBjb25zdCBlbnRyaWVzID0gYXdhaXQgZnMucmVhZGRpcihkaXJQYXRoLCB7IHdpdGhGaWxlVHlwZXM6IHRydWUgfSk7XG4gICAgICAgICAgbGV0IHRvdGFsRmlsZXMgPSAwO1xuICAgICAgICAgIGxldCB0b3RhbERpcmVjdG9yaWVzID0gMDtcbiAgICAgICAgICBsZXQgdG90YWxTaXplID0gMDtcbiAgICAgICAgICBjb25zdCBleHRlbnNpb25zOiBSZWNvcmQ8c3RyaW5nLCB7IGNvdW50OiBudW1iZXI7IHNpemU6IG51bWJlciB9PiA9IHt9O1xuXG4gICAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBmdWxsUGF0aCA9IHBhdGguam9pbihkaXJQYXRoLCBlbnRyeS5uYW1lKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2tpcCBoaWRkZW4gZmlsZXMgdW5sZXNzIHJlcXVlc3RlZFxuICAgICAgICAgICAgaWYgKCFhcmdzLmluY2x1ZGVIaWRkZW4gJiYgZW50cnkubmFtZS5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbnRyeS5pc0RpcmVjdG9yeSgpKSB7XG4gICAgICAgICAgICAgIHRvdGFsRGlyZWN0b3JpZXMrKztcbiAgICAgICAgICAgICAgaWYgKGFyZ3MucmVjdXJzaXZlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViU3RhdHMgPSBhd2FpdCBhbmFseXplRGlyZWN0b3J5KGZ1bGxQYXRoKTtcbiAgICAgICAgICAgICAgICB0b3RhbEZpbGVzICs9IHN1YlN0YXRzLnRvdGFsRmlsZXM7XG4gICAgICAgICAgICAgICAgdG90YWxEaXJlY3RvcmllcyArPSBzdWJTdGF0cy50b3RhbERpcmVjdG9yaWVzO1xuICAgICAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBzdWJTdGF0cy50b3RhbFNpemU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgZXh0ZW5zaW9uc1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2V4dCwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoc3ViU3RhdHMuZXh0ZW5zaW9ucykpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZXh0ZW5zaW9uc1tleHRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0XSA9IHsgY291bnQ6IDAsIHNpemU6IDAgfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0XS5jb3VudCArPSAoZGF0YSBhcyBhbnkpLmNvdW50O1xuICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRdLnNpemUgKz0gKGRhdGEgYXMgYW55KS5zaXplO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbnRyeS5pc0ZpbGUoKSkge1xuICAgICAgICAgICAgICB0b3RhbEZpbGVzKys7XG4gICAgICAgICAgICAgIGNvbnN0IGZpbGVTdGF0ID0gYXdhaXQgZnMuc3RhdChmdWxsUGF0aCk7XG4gICAgICAgICAgICAgIHRvdGFsU2l6ZSArPSBmaWxlU3RhdC5zaXplO1xuXG4gICAgICAgICAgICAgIGlmIChhcmdzLmdyb3VwQnlFeHRlbnNpb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZW50cnkubmFtZSkudG9Mb3dlckNhc2UoKSB8fCAnLm5vLWV4dGVuc2lvbic7XG4gICAgICAgICAgICAgICAgaWYgKCFleHRlbnNpb25zW2V4dF0pIHtcbiAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnNbZXh0XSA9IHsgY291bnQ6IDAsIHNpemU6IDAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRdLmNvdW50Kys7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uc1tleHRdLnNpemUgKz0gZmlsZVN0YXQuc2l6ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7IHRvdGFsRmlsZXMsIHRvdGFsRGlyZWN0b3JpZXMsIHRvdGFsU2l6ZSwgZXh0ZW5zaW9ucyB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHN0YXRzID0gYXdhaXQgYW5hbHl6ZURpcmVjdG9yeShhcmdzLmRpcmVjdG9yeVBhdGgpO1xuXG4gICAgICAgIC8vIFNvcnQgZXh0ZW5zaW9ucyBieSBjb3VudFxuICAgICAgICBjb25zdCBzb3J0ZWRFeHRlbnNpb25zID0gT2JqZWN0LmVudHJpZXMoc3RhdHMuZXh0ZW5zaW9ucylcbiAgICAgICAgICAuc29ydCgoWywgYV0sIFssIGJdKSA9PiAoYiBhcyB7IGNvdW50OiBudW1iZXIgfSkuY291bnQgLSAoYSBhcyB7IGNvdW50OiBudW1iZXIgfSkuY291bnQpXG4gICAgICAgICAgLnJlZHVjZSgoYWNjLCBbZXh0LCBkYXRhXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdHlwZWREYXRhID0gZGF0YSBhcyB7IGNvdW50OiBudW1iZXI7IHNpemU6IG51bWJlciB9O1xuICAgICAgICAgICAgYWNjW2V4dF0gPSB7XG4gICAgICAgICAgICAgIC4uLnR5cGVkRGF0YSxcbiAgICAgICAgICAgICAgc2l6ZUZvcm1hdHRlZDogYCR7KHR5cGVkRGF0YS5zaXplIC8gMTAyNCAvIDEwMjQpLnRvRml4ZWQoMil9IE1CYCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgIH0sIHt9IGFzIFJlY29yZDxzdHJpbmcsIGFueT4pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICBkaXJlY3RvcnlQYXRoOiBhcmdzLmRpcmVjdG9yeVBhdGgsXG4gICAgICAgICAgc3RhdGlzdGljczoge1xuICAgICAgICAgICAgdG90YWxGaWxlczogc3RhdHMudG90YWxGaWxlcyxcbiAgICAgICAgICAgIHRvdGFsRGlyZWN0b3JpZXM6IHN0YXRzLnRvdGFsRGlyZWN0b3JpZXMsXG4gICAgICAgICAgICB0b3RhbFNpemU6IHN0YXRzLnRvdGFsU2l6ZSxcbiAgICAgICAgICAgIHRvdGFsU2l6ZUZvcm1hdHRlZDogYCR7KHN0YXRzLnRvdGFsU2l6ZSAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpfSBNQmAsXG4gICAgICAgICAgICBleHRlbnNpb25CcmVha2Rvd246IGFyZ3MuZ3JvdXBCeUV4dGVuc2lvbiA/IHNvcnRlZEV4dGVuc2lvbnMgOiB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICByZWN1cnNpdmU6IGFyZ3MucmVjdXJzaXZlLFxuICAgICAgICAgICAgaW5jbHVkZUhpZGRlbjogYXJncy5pbmNsdWRlSGlkZGVuLFxuICAgICAgICAgICAgZ3JvdXBCeUV4dGVuc2lvbjogYXJncy5ncm91cEJ5RXh0ZW5zaW9uLFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBVc2VyRXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVXNlckVycm9yKGBGYWlsZWQgdG8gZ2V0IGRpcmVjdG9yeSBzdGF0czogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNEpBQSxPQUFBLENBQUFDLHlCQUFBLEdBQUFBLHlCQUFBO0FBNUpB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