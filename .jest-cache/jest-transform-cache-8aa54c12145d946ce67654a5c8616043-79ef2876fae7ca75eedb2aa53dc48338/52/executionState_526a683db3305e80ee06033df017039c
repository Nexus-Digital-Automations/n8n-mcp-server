a85bfcf34ee0256576b636cd535b91e4
/* istanbul ignore next */
function cov_7mukgb8g9() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts";
  var hash = "5143be28f8796fc4d8c97fae90f9826a1ef31f4f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 25,
          column: 1
        }
      },
      "1": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 43,
          column: 1
        }
      },
      "2": {
        start: {
          line: 50,
          column: 17
        },
        end: {
          line: 50,
          column: 26
        }
      },
      "3": {
        start: {
          line: 51,
          column: 18
        },
        end: {
          line: 51,
          column: 27
        }
      },
      "4": {
        start: {
          line: 52,
          column: 21
        },
        end: {
          line: 52,
          column: 30
        }
      },
      "5": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 16
        }
      },
      "6": {
        start: {
          line: 60,
          column: 34
        },
        end: {
          line: 90,
          column: 9
        }
      },
      "7": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 94,
          column: 9
        }
      },
      "8": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 121
        }
      },
      "9": {
        start: {
          line: 93,
          column: 84
        },
        end: {
          line: 93,
          column: 119
        }
      },
      "10": {
        start: {
          line: 95,
          column: 24
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "11": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 51
        }
      },
      "12": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 61
        }
      },
      "13": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 33
        }
      },
      "14": {
        start: {
          line: 134,
          column: 24
        },
        end: {
          line: 134,
          column: 56
        }
      },
      "15": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "16": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 25
        }
      },
      "17": {
        start: {
          line: 138,
          column: 29
        },
        end: {
          line: 138,
          column: 60
        }
      },
      "18": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 147,
          column: 9
        }
      },
      "19": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 145,
          column: 15
        }
      },
      "20": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "21": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 149,
          column: 61
        }
      },
      "22": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 150,
          column: 51
        }
      },
      "23": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "24": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 159,
          column: 11
        }
      },
      "25": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 46
        }
      },
      "26": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 167,
          column: 11
        }
      },
      "27": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 20
        }
      },
      "28": {
        start: {
          line: 174,
          column: 24
        },
        end: {
          line: 174,
          column: 56
        }
      },
      "29": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "30": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 24
        }
      },
      "31": {
        start: {
          line: 178,
          column: 29
        },
        end: {
          line: 178,
          column: 70
        }
      },
      "32": {
        start: {
          line: 179,
          column: 27
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "33": {
        start: {
          line: 185,
          column: 32
        },
        end: {
          line: 185,
          column: 58
        }
      },
      "34": {
        start: {
          line: 186,
          column: 29
        },
        end: {
          line: 186,
          column: 40
        }
      },
      "35": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 55
        }
      },
      "36": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 55
        }
      },
      "37": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 193,
          column: 51
        }
      },
      "38": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 194,
          column: 26
        }
      },
      "39": {
        start: {
          line: 200,
          column: 27
        },
        end: {
          line: 200,
          column: 61
        }
      },
      "40": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 203,
          column: 9
        }
      },
      "41": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 202,
          column: 25
        }
      },
      "42": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 67
        }
      },
      "43": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 207,
          column: 9
        }
      },
      "44": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 25
        }
      },
      "45": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 209,
          column: 66
        }
      },
      "46": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 217,
          column: 11
        }
      },
      "47": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "48": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 213,
          column: 39
        }
      },
      "49": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 45
        }
      },
      "50": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 39
        }
      },
      "51": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 221,
          column: 11
        }
      },
      "52": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 225,
          column: 11
        }
      },
      "53": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 226,
          column: 20
        }
      },
      "54": {
        start: {
          line: 232,
          column: 28
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "55": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "56": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 25
        }
      },
      "57": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 89
        }
      },
      "58": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 127
        }
      },
      "59": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 43
        }
      },
      "60": {
        start: {
          line: 248,
          column: 16
        },
        end: {
          line: 248,
          column: 43
        }
      },
      "61": {
        start: {
          line: 255,
          column: 24
        },
        end: {
          line: 255,
          column: 56
        }
      },
      "62": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 258,
          column: 9
        }
      },
      "63": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 257,
          column: 25
        }
      },
      "64": {
        start: {
          line: 259,
          column: 30
        },
        end: {
          line: 259,
          column: 37
        }
      },
      "65": {
        start: {
          line: 260,
          column: 27
        },
        end: {
          line: 260,
          column: 65
        }
      },
      "66": {
        start: {
          line: 261,
          column: 27
        },
        end: {
          line: 261,
          column: 75
        }
      },
      "67": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 263,
          column: 37
        }
      },
      "68": {
        start: {
          line: 269,
          column: 24
        },
        end: {
          line: 269,
          column: 56
        }
      },
      "69": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 272,
          column: 9
        }
      },
      "70": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 25
        }
      },
      "71": {
        start: {
          line: 273,
          column: 26
        },
        end: {
          line: 273,
          column: 85
        }
      },
      "72": {
        start: {
          line: 273,
          column: 65
        },
        end: {
          line: 273,
          column: 84
        }
      },
      "73": {
        start: {
          line: 274,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "74": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 275,
          column: 25
        }
      },
      "75": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 279,
          column: 57
        }
      },
      "76": {
        start: {
          line: 285,
          column: 24
        },
        end: {
          line: 285,
          column: 56
        }
      },
      "77": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 288,
          column: 9
        }
      },
      "78": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 24
        }
      },
      "79": {
        start: {
          line: 289,
          column: 30
        },
        end: {
          line: 289,
          column: 37
        }
      },
      "80": {
        start: {
          line: 290,
          column: 31
        },
        end: {
          line: 290,
          column: 88
        }
      },
      "81": {
        start: {
          line: 290,
          column: 64
        },
        end: {
          line: 290,
          column: 87
        }
      },
      "82": {
        start: {
          line: 291,
          column: 28
        },
        end: {
          line: 291,
          column: 82
        }
      },
      "83": {
        start: {
          line: 291,
          column: 61
        },
        end: {
          line: 291,
          column: 81
        }
      },
      "84": {
        start: {
          line: 293,
          column: 35
        },
        end: {
          line: 293,
          column: 37
        }
      },
      "85": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 29
        }
      },
      "86": {
        start: {
          line: 295,
          column: 27
        },
        end: {
          line: 295,
          column: 28
        }
      },
      "87": {
        start: {
          line: 296,
          column: 27
        },
        end: {
          line: 296,
          column: 28
        }
      },
      "88": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "89": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 301,
          column: 13
        }
      },
      "90": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 64
        }
      },
      "91": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 300,
          column: 47
        }
      },
      "92": {
        start: {
          line: 304,
          column: 29
        },
        end: {
          line: 304,
          column: 77
        }
      },
      "93": {
        start: {
          line: 306,
          column: 28
        },
        end: {
          line: 314,
          column: 11
        }
      },
      "94": {
        start: {
          line: 307,
          column: 28
        },
        end: {
          line: 307,
          column: 65
        }
      },
      "95": {
        start: {
          line: 308,
          column: 28
        },
        end: {
          line: 308,
          column: 65
        }
      },
      "96": {
        start: {
          line: 310,
          column: 26
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "97": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 337,
          column: 10
        }
      },
      "98": {
        start: {
          line: 329,
          column: 45
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "99": {
        start: {
          line: 343,
          column: 24
        },
        end: {
          line: 343,
          column: 64
        }
      },
      "100": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "101": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 355,
          column: 14
        }
      },
      "102": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "103": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 373,
          column: 14
        }
      },
      "104": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 378,
          column: 9
        }
      },
      "105": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 61
        }
      },
      "106": {
        start: {
          line: 379,
          column: 8
        },
        end: {
          line: 379,
          column: 67
        }
      },
      "107": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 408,
          column: 9
        }
      },
      "108": {
        start: {
          line: 381,
          column: 29
        },
        end: {
          line: 381,
          column: 78
        }
      },
      "109": {
        start: {
          line: 383,
          column: 31
        },
        end: {
          line: 383,
          column: 81
        }
      },
      "110": {
        start: {
          line: 384,
          column: 26
        },
        end: {
          line: 384,
          column: 53
        }
      },
      "111": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 387,
          column: 13
        }
      },
      "112": {
        start: {
          line: 386,
          column: 16
        },
        end: {
          line: 386,
          column: 44
        }
      },
      "113": {
        start: {
          line: 388,
          column: 12
        },
        end: {
          line: 388,
          column: 28
        }
      },
      "114": {
        start: {
          line: 392,
          column: 31
        },
        end: {
          line: 392,
          column: 81
        }
      },
      "115": {
        start: {
          line: 393,
          column: 26
        },
        end: {
          line: 393,
          column: 53
        }
      },
      "116": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 396,
          column: 13
        }
      },
      "117": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 44
        }
      },
      "118": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 407,
          column: 14
        }
      },
      "119": {
        start: {
          line: 414,
          column: 8
        },
        end: {
          line: 414,
          column: 56
        }
      },
      "120": {
        start: {
          line: 420,
          column: 27
        },
        end: {
          line: 420,
          column: 51
        }
      },
      "121": {
        start: {
          line: 421,
          column: 22
        },
        end: {
          line: 421,
          column: 23
        }
      },
      "122": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 434,
          column: 9
        }
      },
      "123": {
        start: {
          line: 423,
          column: 34
        },
        end: {
          line: 423,
          column: 81
        }
      },
      "124": {
        start: {
          line: 424,
          column: 32
        },
        end: {
          line: 424,
          column: 110
        }
      },
      "125": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 433,
          column: 13
        }
      },
      "126": {
        start: {
          line: 426,
          column: 16
        },
        end: {
          line: 426,
          column: 52
        }
      },
      "127": {
        start: {
          line: 427,
          column: 16
        },
        end: {
          line: 427,
          column: 56
        }
      },
      "128": {
        start: {
          line: 429,
          column: 16
        },
        end: {
          line: 431,
          column: 19
        }
      },
      "129": {
        start: {
          line: 430,
          column: 20
        },
        end: {
          line: 430,
          column: 69
        }
      },
      "130": {
        start: {
          line: 432,
          column: 16
        },
        end: {
          line: 432,
          column: 26
        }
      },
      "131": {
        start: {
          line: 435,
          column: 8
        },
        end: {
          line: 435,
          column: 70
        }
      },
      "132": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 436,
          column: 23
        }
      },
      "133": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 451,
          column: 9
        }
      },
      "134": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 442,
          column: 33
        }
      },
      "135": {
        start: {
          line: 444,
          column: 16
        },
        end: {
          line: 444,
          column: 35
        }
      },
      "136": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 32
        }
      },
      "137": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 448,
          column: 33
        }
      },
      "138": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 33
        }
      },
      "139": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 463,
          column: 10
        }
      },
      "140": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 466,
          column: 62
        }
      },
      "141": {
        start: {
          line: 469,
          column: 8
        },
        end: {
          line: 470,
          column: 29
        }
      },
      "142": {
        start: {
          line: 470,
          column: 12
        },
        end: {
          line: 470,
          column: 29
        }
      },
      "143": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 472,
          column: 28
        }
      },
      "144": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 472,
          column: 28
        }
      },
      "145": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 474,
          column: 29
        }
      },
      "146": {
        start: {
          line: 474,
          column: 12
        },
        end: {
          line: 474,
          column: 29
        }
      },
      "147": {
        start: {
          line: 475,
          column: 8
        },
        end: {
          line: 476,
          column: 31
        }
      },
      "148": {
        start: {
          line: 476,
          column: 12
        },
        end: {
          line: 476,
          column: 31
        }
      },
      "149": {
        start: {
          line: 477,
          column: 8
        },
        end: {
          line: 478,
          column: 28
        }
      },
      "150": {
        start: {
          line: 478,
          column: 12
        },
        end: {
          line: 478,
          column: 28
        }
      },
      "151": {
        start: {
          line: 479,
          column: 8
        },
        end: {
          line: 480,
          column: 31
        }
      },
      "152": {
        start: {
          line: 480,
          column: 12
        },
        end: {
          line: 480,
          column: 31
        }
      },
      "153": {
        start: {
          line: 481,
          column: 8
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "154": {
        start: {
          line: 482,
          column: 12
        },
        end: {
          line: 482,
          column: 29
        }
      },
      "155": {
        start: {
          line: 483,
          column: 8
        },
        end: {
          line: 483,
          column: 25
        }
      },
      "156": {
        start: {
          line: 486,
          column: 30
        },
        end: {
          line: 486,
          column: 37
        }
      },
      "157": {
        start: {
          line: 487,
          column: 27
        },
        end: {
          line: 487,
          column: 54
        }
      },
      "158": {
        start: {
          line: 488,
          column: 8
        },
        end: {
          line: 491,
          column: 9
        }
      },
      "159": {
        start: {
          line: 489,
          column: 12
        },
        end: {
          line: 489,
          column: 51
        }
      },
      "160": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 490,
          column: 19
        }
      },
      "161": {
        start: {
          line: 492,
          column: 26
        },
        end: {
          line: 492,
          column: 90
        }
      },
      "162": {
        start: {
          line: 492,
          column: 59
        },
        end: {
          line: 492,
          column: 82
        }
      },
      "163": {
        start: {
          line: 493,
          column: 23
        },
        end: {
          line: 493,
          column: 84
        }
      },
      "164": {
        start: {
          line: 493,
          column: 56
        },
        end: {
          line: 493,
          column: 76
        }
      },
      "165": {
        start: {
          line: 494,
          column: 24
        },
        end: {
          line: 494,
          column: 86
        }
      },
      "166": {
        start: {
          line: 494,
          column: 57
        },
        end: {
          line: 494,
          column: 78
        }
      },
      "167": {
        start: {
          line: 495,
          column: 8
        },
        end: {
          line: 495,
          column: 54
        }
      },
      "168": {
        start: {
          line: 496,
          column: 8
        },
        end: {
          line: 496,
          column: 48
        }
      },
      "169": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 50
        }
      },
      "170": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 109
        }
      },
      "171": {
        start: {
          line: 503,
          column: 8
        },
        end: {
          line: 507,
          column: 38
        }
      },
      "172": {
        start: {
          line: 504,
          column: 28
        },
        end: {
          line: 504,
          column: 65
        }
      },
      "173": {
        start: {
          line: 505,
          column: 28
        },
        end: {
          line: 505,
          column: 65
        }
      },
      "174": {
        start: {
          line: 507,
          column: 25
        },
        end: {
          line: 507,
          column: 36
        }
      },
      "175": {
        start: {
          line: 510,
          column: 28
        },
        end: {
          line: 510,
          column: 30
        }
      },
      "176": {
        start: {
          line: 512,
          column: 33
        },
        end: {
          line: 512,
          column: 108
        }
      },
      "177": {
        start: {
          line: 512,
          column: 69
        },
        end: {
          line: 512,
          column: 107
        }
      },
      "178": {
        start: {
          line: 513,
          column: 8
        },
        end: {
          line: 520,
          column: 9
        }
      },
      "179": {
        start: {
          line: 514,
          column: 12
        },
        end: {
          line: 519,
          column: 15
        }
      },
      "180": {
        start: {
          line: 521,
          column: 28
        },
        end: {
          line: 521,
          column: 88
        }
      },
      "181": {
        start: {
          line: 521,
          column: 64
        },
        end: {
          line: 521,
          column: 87
        }
      },
      "182": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 529,
          column: 9
        }
      },
      "183": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 528,
          column: 15
        }
      },
      "184": {
        start: {
          line: 530,
          column: 8
        },
        end: {
          line: 530,
          column: 27
        }
      },
      "185": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 548,
          column: 9
        }
      },
      "186": {
        start: {
          line: 535,
          column: 16
        },
        end: {
          line: 535,
          column: 64
        }
      },
      "187": {
        start: {
          line: 537,
          column: 16
        },
        end: {
          line: 537,
          column: 65
        }
      },
      "188": {
        start: {
          line: 539,
          column: 16
        },
        end: {
          line: 539,
          column: 63
        }
      },
      "189": {
        start: {
          line: 541,
          column: 16
        },
        end: {
          line: 541,
          column: 65
        }
      },
      "190": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 543,
          column: 64
        }
      },
      "191": {
        start: {
          line: 545,
          column: 16
        },
        end: {
          line: 545,
          column: 72
        }
      },
      "192": {
        start: {
          line: 547,
          column: 16
        },
        end: {
          line: 547,
          column: 73
        }
      },
      "193": {
        start: {
          line: 552,
          column: 27
        },
        end: {
          line: 554,
          column: 10
        }
      },
      "194": {
        start: {
          line: 555,
          column: 8
        },
        end: {
          line: 555,
          column: 65
        }
      },
      "195": {
        start: {
          line: 556,
          column: 8
        },
        end: {
          line: 566,
          column: 10
        }
      },
      "196": {
        start: {
          line: 569,
          column: 8
        },
        end: {
          line: 569,
          column: 66
        }
      },
      "197": {
        start: {
          line: 570,
          column: 8
        },
        end: {
          line: 577,
          column: 10
        }
      },
      "198": {
        start: {
          line: 580,
          column: 8
        },
        end: {
          line: 580,
          column: 66
        }
      },
      "199": {
        start: {
          line: 581,
          column: 8
        },
        end: {
          line: 588,
          column: 10
        }
      },
      "200": {
        start: {
          line: 591,
          column: 23
        },
        end: {
          line: 591,
          column: 69
        }
      },
      "201": {
        start: {
          line: 592,
          column: 8
        },
        end: {
          line: 597,
          column: 10
        }
      },
      "202": {
        start: {
          line: 598,
          column: 8
        },
        end: {
          line: 598,
          column: 68
        }
      },
      "203": {
        start: {
          line: 599,
          column: 8
        },
        end: {
          line: 606,
          column: 10
        }
      },
      "204": {
        start: {
          line: 609,
          column: 25
        },
        end: {
          line: 611,
          column: 25
        }
      },
      "205": {
        start: {
          line: 612,
          column: 34
        },
        end: {
          line: 612,
          column: 80
        }
      },
      "206": {
        start: {
          line: 613,
          column: 27
        },
        end: {
          line: 613,
          column: 117
        }
      },
      "207": {
        start: {
          line: 614,
          column: 8
        },
        end: {
          line: 626,
          column: 9
        }
      },
      "208": {
        start: {
          line: 615,
          column: 12
        },
        end: {
          line: 625,
          column: 14
        }
      },
      "209": {
        start: {
          line: 628,
          column: 27
        },
        end: {
          line: 628,
          column: 117
        }
      },
      "210": {
        start: {
          line: 630,
          column: 8
        },
        end: {
          line: 636,
          column: 10
        }
      },
      "211": {
        start: {
          line: 638,
          column: 8
        },
        end: {
          line: 644,
          column: 11
        }
      },
      "212": {
        start: {
          line: 639,
          column: 12
        },
        end: {
          line: 643,
          column: 13
        }
      },
      "213": {
        start: {
          line: 640,
          column: 16
        },
        end: {
          line: 640,
          column: 39
        }
      },
      "214": {
        start: {
          line: 641,
          column: 16
        },
        end: {
          line: 641,
          column: 39
        }
      },
      "215": {
        start: {
          line: 642,
          column: 16
        },
        end: {
          line: 642,
          column: 45
        }
      },
      "216": {
        start: {
          line: 645,
          column: 8
        },
        end: {
          line: 645,
          column: 67
        }
      },
      "217": {
        start: {
          line: 646,
          column: 8
        },
        end: {
          line: 659,
          column: 10
        }
      },
      "218": {
        start: {
          line: 662,
          column: 30
        },
        end: {
          line: 662,
          column: 63
        }
      },
      "219": {
        start: {
          line: 663,
          column: 8
        },
        end: {
          line: 675,
          column: 9
        }
      },
      "220": {
        start: {
          line: 664,
          column: 12
        },
        end: {
          line: 674,
          column: 14
        }
      },
      "221": {
        start: {
          line: 676,
          column: 26
        },
        end: {
          line: 676,
          column: 92
        }
      },
      "222": {
        start: {
          line: 676,
          column: 65
        },
        end: {
          line: 676,
          column: 91
        }
      },
      "223": {
        start: {
          line: 677,
          column: 8
        },
        end: {
          line: 689,
          column: 9
        }
      },
      "224": {
        start: {
          line: 678,
          column: 12
        },
        end: {
          line: 688,
          column: 14
        }
      },
      "225": {
        start: {
          line: 691,
          column: 29
        },
        end: {
          line: 691,
          column: 34
        }
      },
      "226": {
        start: {
          line: 692,
          column: 30
        },
        end: {
          line: 692,
          column: 32
        }
      },
      "227": {
        start: {
          line: 693,
          column: 8
        },
        end: {
          line: 703,
          column: 11
        }
      },
      "228": {
        start: {
          line: 694,
          column: 12
        },
        end: {
          line: 696,
          column: 13
        }
      },
      "229": {
        start: {
          line: 695,
          column: 16
        },
        end: {
          line: 695,
          column: 38
        }
      },
      "230": {
        start: {
          line: 697,
          column: 12
        },
        end: {
          line: 702,
          column: 13
        }
      },
      "231": {
        start: {
          line: 698,
          column: 16
        },
        end: {
          line: 698,
          column: 39
        }
      },
      "232": {
        start: {
          line: 699,
          column: 16
        },
        end: {
          line: 699,
          column: 39
        }
      },
      "233": {
        start: {
          line: 700,
          column: 16
        },
        end: {
          line: 700,
          column: 45
        }
      },
      "234": {
        start: {
          line: 701,
          column: 16
        },
        end: {
          line: 701,
          column: 48
        }
      },
      "235": {
        start: {
          line: 704,
          column: 8
        },
        end: {
          line: 704,
          column: 66
        }
      },
      "236": {
        start: {
          line: 705,
          column: 8
        },
        end: {
          line: 715,
          column: 10
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 18
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 53
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 59
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 93,
            column: 76
          },
          end: {
            line: 93,
            column: 77
          }
        },
        loc: {
          start: {
            line: 93,
            column: 84
          },
          end: {
            line: 93,
            column: 119
          }
        },
        line: 93
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 133,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        loc: {
          start: {
            line: 133,
            column: 58
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 133
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 173,
            column: 4
          },
          end: {
            line: 173,
            column: 5
          }
        },
        loc: {
          start: {
            line: 173,
            column: 62
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 173
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 185,
            column: 24
          },
          end: {
            line: 185,
            column: 25
          }
        },
        loc: {
          start: {
            line: 185,
            column: 32
          },
          end: {
            line: 185,
            column: 58
          }
        },
        line: 185
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 186,
            column: 21
          },
          end: {
            line: 186,
            column: 22
          }
        },
        loc: {
          start: {
            line: 186,
            column: 29
          },
          end: {
            line: 186,
            column: 40
          }
        },
        line: 186
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 199,
            column: 5
          }
        },
        loc: {
          start: {
            line: 199,
            column: 40
          },
          end: {
            line: 227,
            column: 5
          }
        },
        line: 199
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 211,
            column: 45
          },
          end: {
            line: 211,
            column: 46
          }
        },
        loc: {
          start: {
            line: 211,
            column: 53
          },
          end: {
            line: 217,
            column: 9
          }
        },
        line: 211
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 231,
            column: 5
          }
        },
        loc: {
          start: {
            line: 231,
            column: 56
          },
          end: {
            line: 250,
            column: 5
          }
        },
        line: 231
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 254,
            column: 5
          }
        },
        loc: {
          start: {
            line: 254,
            column: 35
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 254
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 38
          },
          end: {
            line: 280,
            column: 5
          }
        },
        line: 268
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 273,
            column: 60
          },
          end: {
            line: 273,
            column: 61
          }
        },
        loc: {
          start: {
            line: 273,
            column: 65
          },
          end: {
            line: 273,
            column: 84
          }
        },
        line: 273
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 39
          },
          end: {
            line: 338,
            column: 5
          }
        },
        line: 284
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 290,
            column: 59
          },
          end: {
            line: 290,
            column: 60
          }
        },
        loc: {
          start: {
            line: 290,
            column: 64
          },
          end: {
            line: 290,
            column: 87
          }
        },
        line: 290
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 291,
            column: 56
          },
          end: {
            line: 291,
            column: 57
          }
        },
        loc: {
          start: {
            line: 291,
            column: 61
          },
          end: {
            line: 291,
            column: 81
          }
        },
        line: 291
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 297,
            column: 31
          },
          end: {
            line: 297,
            column: 32
          }
        },
        loc: {
          start: {
            line: 297,
            column: 39
          },
          end: {
            line: 302,
            column: 9
          }
        },
        line: 297
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 307,
            column: 20
          },
          end: {
            line: 307,
            column: 21
          }
        },
        loc: {
          start: {
            line: 307,
            column: 28
          },
          end: {
            line: 307,
            column: 65
          }
        },
        line: 307
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 308,
            column: 18
          },
          end: {
            line: 308,
            column: 19
          }
        },
        loc: {
          start: {
            line: 308,
            column: 28
          },
          end: {
            line: 308,
            column: 65
          }
        },
        line: 308
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 310,
            column: 17
          },
          end: {
            line: 310,
            column: 18
          }
        },
        loc: {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 314,
            column: 9
          }
        },
        line: 310
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 329,
            column: 36
          },
          end: {
            line: 329,
            column: 37
          }
        },
        loc: {
          start: {
            line: 329,
            column: 45
          },
          end: {
            line: 335,
            column: 13
          }
        },
        line: 329
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 342,
            column: 4
          },
          end: {
            line: 342,
            column: 5
          }
        },
        loc: {
          start: {
            line: 342,
            column: 41
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 342
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 37
          },
          end: {
            line: 415,
            column: 5
          }
        },
        line: 413
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 419,
            column: 5
          }
        },
        loc: {
          start: {
            line: 419,
            column: 47
          },
          end: {
            line: 437,
            column: 5
          }
        },
        line: 419
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 429,
            column: 54
          },
          end: {
            line: 429,
            column: 55
          }
        },
        loc: {
          start: {
            line: 429,
            column: 68
          },
          end: {
            line: 431,
            column: 17
          }
        },
        line: 429
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 439,
            column: 4
          },
          end: {
            line: 439,
            column: 5
          }
        },
        loc: {
          start: {
            line: 439,
            column: 41
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 439
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 453,
            column: 4
          },
          end: {
            line: 453,
            column: 5
          }
        },
        loc: {
          start: {
            line: 453,
            column: 35
          },
          end: {
            line: 464,
            column: 5
          }
        },
        line: 453
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 37
          },
          end: {
            line: 467,
            column: 5
          }
        },
        line: 465
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 468,
            column: 4
          },
          end: {
            line: 468,
            column: 5
          }
        },
        loc: {
          start: {
            line: 468,
            column: 46
          },
          end: {
            line: 484,
            column: 5
          }
        },
        line: 468
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 485,
            column: 4
          },
          end: {
            line: 485,
            column: 5
          }
        },
        loc: {
          start: {
            line: 485,
            column: 37
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 485
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 492,
            column: 54
          },
          end: {
            line: 492,
            column: 55
          }
        },
        loc: {
          start: {
            line: 492,
            column: 59
          },
          end: {
            line: 492,
            column: 82
          }
        },
        line: 492
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 493,
            column: 51
          },
          end: {
            line: 493,
            column: 52
          }
        },
        loc: {
          start: {
            line: 493,
            column: 56
          },
          end: {
            line: 493,
            column: 76
          }
        },
        line: 493
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 494,
            column: 52
          },
          end: {
            line: 494,
            column: 53
          }
        },
        loc: {
          start: {
            line: 494,
            column: 57
          },
          end: {
            line: 494,
            column: 78
          }
        },
        line: 494
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 500,
            column: 4
          },
          end: {
            line: 500,
            column: 5
          }
        },
        loc: {
          start: {
            line: 500,
            column: 38
          },
          end: {
            line: 508,
            column: 5
          }
        },
        line: 500
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 504,
            column: 20
          },
          end: {
            line: 504,
            column: 21
          }
        },
        loc: {
          start: {
            line: 504,
            column: 28
          },
          end: {
            line: 504,
            column: 65
          }
        },
        line: 504
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 505,
            column: 18
          },
          end: {
            line: 505,
            column: 19
          }
        },
        loc: {
          start: {
            line: 505,
            column: 28
          },
          end: {
            line: 505,
            column: 65
          }
        },
        line: 505
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 507,
            column: 17
          },
          end: {
            line: 507,
            column: 18
          }
        },
        loc: {
          start: {
            line: 507,
            column: 25
          },
          end: {
            line: 507,
            column: 36
          }
        },
        line: 507
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 509,
            column: 4
          },
          end: {
            line: 509,
            column: 5
          }
        },
        loc: {
          start: {
            line: 509,
            column: 47
          },
          end: {
            line: 531,
            column: 5
          }
        },
        line: 509
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 512,
            column: 61
          },
          end: {
            line: 512,
            column: 62
          }
        },
        loc: {
          start: {
            line: 512,
            column: 69
          },
          end: {
            line: 512,
            column: 107
          }
        },
        line: 512
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 521,
            column: 56
          },
          end: {
            line: 521,
            column: 57
          }
        },
        loc: {
          start: {
            line: 521,
            column: 64
          },
          end: {
            line: 521,
            column: 87
          }
        },
        line: 521
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 532,
            column: 4
          },
          end: {
            line: 532,
            column: 5
          }
        },
        loc: {
          start: {
            line: 532,
            column: 49
          },
          end: {
            line: 549,
            column: 5
          }
        },
        line: 532
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 550,
            column: 4
          },
          end: {
            line: 550,
            column: 5
          }
        },
        loc: {
          start: {
            line: 550,
            column: 46
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 550
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 568,
            column: 4
          },
          end: {
            line: 568,
            column: 5
          }
        },
        loc: {
          start: {
            line: 568,
            column: 47
          },
          end: {
            line: 578,
            column: 5
          }
        },
        line: 568
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 579,
            column: 4
          },
          end: {
            line: 579,
            column: 5
          }
        },
        loc: {
          start: {
            line: 579,
            column: 45
          },
          end: {
            line: 589,
            column: 5
          }
        },
        line: 579
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 590,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        },
        loc: {
          start: {
            line: 590,
            column: 47
          },
          end: {
            line: 607,
            column: 5
          }
        },
        line: 590
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 608,
            column: 4
          },
          end: {
            line: 608,
            column: 5
          }
        },
        loc: {
          start: {
            line: 608,
            column: 46
          },
          end: {
            line: 660,
            column: 5
          }
        },
        line: 608
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 638,
            column: 45
          },
          end: {
            line: 638,
            column: 46
          }
        },
        loc: {
          start: {
            line: 638,
            column: 53
          },
          end: {
            line: 644,
            column: 9
          }
        },
        line: 638
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 661,
            column: 4
          },
          end: {
            line: 661,
            column: 5
          }
        },
        loc: {
          start: {
            line: 661,
            column: 54
          },
          end: {
            line: 716,
            column: 5
          }
        },
        line: 661
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 676,
            column: 60
          },
          end: {
            line: 676,
            column: 61
          }
        },
        loc: {
          start: {
            line: 676,
            column: 65
          },
          end: {
            line: 676,
            column: 91
          }
        },
        line: 676
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 693,
            column: 45
          },
          end: {
            line: 693,
            column: 46
          }
        },
        loc: {
          start: {
            line: 693,
            column: 53
          },
          end: {
            line: 703,
            column: 9
          }
        },
        line: 693
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 59,
            column: 35
          },
          end: {
            line: 59,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 59,
            column: 44
          },
          end: {
            line: 59,
            column: 46
          }
        }],
        line: 59
      },
      "1": {
        loc: {
          start: {
            line: 81,
            column: 28
          },
          end: {
            line: 81,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 28
          },
          end: {
            line: 81,
            column: 65
          }
        }, {
          start: {
            line: 81,
            column: 69
          },
          end: {
            line: 81,
            column: 70
          }
        }],
        line: 81
      },
      "2": {
        loc: {
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 8
          },
          end: {
            line: 94,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "3": {
        loc: {
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 103,
            column: 35
          },
          end: {
            line: 103,
            column: 58
          }
        }, {
          start: {
            line: 103,
            column: 62
          },
          end: {
            line: 103,
            column: 69
          }
        }],
        line: 103
      },
      "4": {
        loc: {
          start: {
            line: 124,
            column: 30
          },
          end: {
            line: 124,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 30
          },
          end: {
            line: 124,
            column: 76
          }
        }, {
          start: {
            line: 124,
            column: 80
          },
          end: {
            line: 124,
            column: 82
          }
        }],
        line: 124
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 137,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 147,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "7": {
        loc: {
          start: {
            line: 151,
            column: 35
          },
          end: {
            line: 151,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 151,
            column: 35
          },
          end: {
            line: 151,
            column: 58
          }
        }, {
          start: {
            line: 151,
            column: 62
          },
          end: {
            line: 151,
            column: 64
          }
        }],
        line: 151
      },
      "8": {
        loc: {
          start: {
            line: 173,
            column: 47
          },
          end: {
            line: 173,
            column: 60
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 173,
            column: 58
          },
          end: {
            line: 173,
            column: 60
          }
        }],
        line: 173
      },
      "9": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "10": {
        loc: {
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 8
          },
          end: {
            line: 203,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "11": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 207,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "12": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "13": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 212,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 212,
            column: 40
          }
        }, {
          start: {
            line: 212,
            column: 44
          },
          end: {
            line: 212,
            column: 67
          }
        }],
        line: 212
      },
      "14": {
        loc: {
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 236,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 28
          },
          end: {
            line: 232,
            column: 45
          }
        }, {
          start: {
            line: 232,
            column: 49
          },
          end: {
            line: 236,
            column: 9
          }
        }],
        line: 232
      },
      "15": {
        loc: {
          start: {
            line: 237,
            column: 8
          },
          end: {
            line: 249,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 239,
            column: 25
          }
        }, {
          start: {
            line: 240,
            column: 12
          },
          end: {
            line: 241,
            column: 89
          }
        }, {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 243,
            column: 127
          }
        }, {
          start: {
            line: 244,
            column: 12
          },
          end: {
            line: 246,
            column: 43
          }
        }, {
          start: {
            line: 247,
            column: 12
          },
          end: {
            line: 248,
            column: 43
          }
        }],
        line: 237
      },
      "16": {
        loc: {
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 8
          },
          end: {
            line: 258,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "17": {
        loc: {
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 260,
            column: 27
          },
          end: {
            line: 260,
            column: 60
          }
        }, {
          start: {
            line: 260,
            column: 64
          },
          end: {
            line: 260,
            column: 65
          }
        }],
        line: 260
      },
      "18": {
        loc: {
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 27
          },
          end: {
            line: 261,
            column: 70
          }
        }, {
          start: {
            line: 261,
            column: 74
          },
          end: {
            line: 261,
            column: 75
          }
        }],
        line: 261
      },
      "19": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 263,
            column: 35
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 262,
            column: 84
          }
        }, {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 263,
            column: 35
          }
        }],
        line: 262
      },
      "20": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 272,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "21": {
        loc: {
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 274,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 274
      },
      "22": {
        loc: {
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 279,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 16
          },
          end: {
            line: 277,
            column: 44
          }
        }, {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 278,
            column: 30
          }
        }, {
          start: {
            line: 279,
            column: 12
          },
          end: {
            line: 279,
            column: 55
          }
        }],
        line: 277
      },
      "23": {
        loc: {
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 8
          },
          end: {
            line: 288,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 286
      },
      "24": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 301,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "25": {
        loc: {
          start: {
            line: 307,
            column: 28
          },
          end: {
            line: 307,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 28
          },
          end: {
            line: 307,
            column: 41
          }
        }, {
          start: {
            line: 307,
            column: 45
          },
          end: {
            line: 307,
            column: 65
          }
        }],
        line: 307
      },
      "26": {
        loc: {
          start: {
            line: 308,
            column: 29
          },
          end: {
            line: 308,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 29
          },
          end: {
            line: 308,
            column: 39
          }
        }, {
          start: {
            line: 308,
            column: 43
          },
          end: {
            line: 308,
            column: 44
          }
        }],
        line: 308
      },
      "27": {
        loc: {
          start: {
            line: 308,
            column: 49
          },
          end: {
            line: 308,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 308,
            column: 49
          },
          end: {
            line: 308,
            column: 59
          }
        }, {
          start: {
            line: 308,
            column: 63
          },
          end: {
            line: 308,
            column: 64
          }
        }],
        line: 308
      },
      "28": {
        loc: {
          start: {
            line: 312,
            column: 22
          },
          end: {
            line: 312,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 312,
            column: 22
          },
          end: {
            line: 312,
            column: 35
          }
        }, {
          start: {
            line: 312,
            column: 39
          },
          end: {
            line: 312,
            column: 40
          }
        }],
        line: 312
      },
      "29": {
        loc: {
          start: {
            line: 331,
            column: 27
          },
          end: {
            line: 331,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 27
          },
          end: {
            line: 331,
            column: 43
          }
        }, {
          start: {
            line: 331,
            column: 47
          },
          end: {
            line: 331,
            column: 56
          }
        }],
        line: 331
      },
      "30": {
        loc: {
          start: {
            line: 332,
            column: 30
          },
          end: {
            line: 332,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 30
          },
          end: {
            line: 332,
            column: 49
          }
        }, {
          start: {
            line: 332,
            column: 53
          },
          end: {
            line: 332,
            column: 68
          }
        }],
        line: 332
      },
      "31": {
        loc: {
          start: {
            line: 334,
            column: 28
          },
          end: {
            line: 334,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 64
          },
          end: {
            line: 334,
            column: 71
          }
        }, {
          start: {
            line: 334,
            column: 74
          },
          end: {
            line: 334,
            column: 82
          }
        }],
        line: 334
      },
      "32": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "33": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 358
      },
      "34": {
        loc: {
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 378,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "35": {
        loc: {
          start: {
            line: 383,
            column: 31
          },
          end: {
            line: 383,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 31
          },
          end: {
            line: 383,
            column: 75
          }
        }, {
          start: {
            line: 383,
            column: 79
          },
          end: {
            line: 383,
            column: 81
          }
        }],
        line: 383
      },
      "36": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 387,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "37": {
        loc: {
          start: {
            line: 392,
            column: 31
          },
          end: {
            line: 392,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 392,
            column: 31
          },
          end: {
            line: 392,
            column: 75
          }
        }, {
          start: {
            line: 392,
            column: 79
          },
          end: {
            line: 392,
            column: 81
          }
        }],
        line: 392
      },
      "38": {
        loc: {
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 12
          },
          end: {
            line: 396,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "39": {
        loc: {
          start: {
            line: 399,
            column: 54
          },
          end: {
            line: 399,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 79
          },
          end: {
            line: 399,
            column: 92
          }
        }, {
          start: {
            line: 399,
            column: 95
          },
          end: {
            line: 399,
            column: 110
          }
        }],
        line: 399
      },
      "40": {
        loc: {
          start: {
            line: 405,
            column: 29
          },
          end: {
            line: 405,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 54
          },
          end: {
            line: 405,
            column: 67
          }
        }, {
          start: {
            line: 405,
            column: 70
          },
          end: {
            line: 405,
            column: 85
          }
        }],
        line: 405
      },
      "41": {
        loc: {
          start: {
            line: 414,
            column: 15
          },
          end: {
            line: 414,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 15
          },
          end: {
            line: 414,
            column: 47
          }
        }, {
          start: {
            line: 414,
            column: 51
          },
          end: {
            line: 414,
            column: 55
          }
        }],
        line: 414
      },
      "42": {
        loc: {
          start: {
            line: 419,
            column: 12
          },
          end: {
            line: 419,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 419,
            column: 26
          },
          end: {
            line: 419,
            column: 45
          }
        }],
        line: 419
      },
      "43": {
        loc: {
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 12
          },
          end: {
            line: 433,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "44": {
        loc: {
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 425,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 425,
            column: 27
          }
        }, {
          start: {
            line: 425,
            column: 31
          },
          end: {
            line: 425,
            column: 57
          }
        }],
        line: 425
      },
      "45": {
        loc: {
          start: {
            line: 440,
            column: 8
          },
          end: {
            line: 451,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 441,
            column: 12
          },
          end: {
            line: 442,
            column: 33
          }
        }, {
          start: {
            line: 443,
            column: 12
          },
          end: {
            line: 444,
            column: 35
          }
        }, {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 446,
            column: 32
          }
        }, {
          start: {
            line: 447,
            column: 12
          },
          end: {
            line: 448,
            column: 33
          }
        }, {
          start: {
            line: 449,
            column: 12
          },
          end: {
            line: 450,
            column: 33
          }
        }],
        line: 440
      },
      "46": {
        loc: {
          start: {
            line: 466,
            column: 15
          },
          end: {
            line: 466,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 466,
            column: 15
          },
          end: {
            line: 466,
            column: 52
          }
        }, {
          start: {
            line: 466,
            column: 56
          },
          end: {
            line: 466,
            column: 61
          }
        }],
        line: 466
      },
      "47": {
        loc: {
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 470,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 8
          },
          end: {
            line: 470,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "48": {
        loc: {
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 469,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 469,
            column: 12
          },
          end: {
            line: 469,
            column: 30
          }
        }, {
          start: {
            line: 469,
            column: 34
          },
          end: {
            line: 469,
            column: 50
          }
        }],
        line: 469
      },
      "49": {
        loc: {
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 472,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 8
          },
          end: {
            line: 472,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "50": {
        loc: {
          start: {
            line: 471,
            column: 12
          },
          end: {
            line: 471,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 471,
            column: 12
          },
          end: {
            line: 471,
            column: 30
          }
        }, {
          start: {
            line: 471,
            column: 34
          },
          end: {
            line: 471,
            column: 49
          }
        }],
        line: 471
      },
      "51": {
        loc: {
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 474,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 473,
            column: 8
          },
          end: {
            line: 474,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 473
      },
      "52": {
        loc: {
          start: {
            line: 473,
            column: 12
          },
          end: {
            line: 473,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 473,
            column: 12
          },
          end: {
            line: 473,
            column: 29
          }
        }, {
          start: {
            line: 473,
            column: 33
          },
          end: {
            line: 473,
            column: 49
          }
        }],
        line: 473
      },
      "53": {
        loc: {
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 476,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 475,
            column: 8
          },
          end: {
            line: 476,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 475
      },
      "54": {
        loc: {
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 478,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 477,
            column: 8
          },
          end: {
            line: 478,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 477
      },
      "55": {
        loc: {
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 480,
            column: 31
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 479,
            column: 8
          },
          end: {
            line: 480,
            column: 31
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 479
      },
      "56": {
        loc: {
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 482,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 481,
            column: 8
          },
          end: {
            line: 482,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 481
      },
      "57": {
        loc: {
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 488,
            column: 8
          },
          end: {
            line: 491,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 488
      },
      "58": {
        loc: {
          start: {
            line: 504,
            column: 28
          },
          end: {
            line: 504,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 504,
            column: 28
          },
          end: {
            line: 504,
            column: 41
          }
        }, {
          start: {
            line: 504,
            column: 45
          },
          end: {
            line: 504,
            column: 65
          }
        }],
        line: 504
      },
      "59": {
        loc: {
          start: {
            line: 505,
            column: 29
          },
          end: {
            line: 505,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 505,
            column: 29
          },
          end: {
            line: 505,
            column: 39
          }
        }, {
          start: {
            line: 505,
            column: 43
          },
          end: {
            line: 505,
            column: 44
          }
        }],
        line: 505
      },
      "60": {
        loc: {
          start: {
            line: 505,
            column: 49
          },
          end: {
            line: 505,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 505,
            column: 49
          },
          end: {
            line: 505,
            column: 59
          }
        }, {
          start: {
            line: 505,
            column: 63
          },
          end: {
            line: 505,
            column: 64
          }
        }],
        line: 505
      },
      "61": {
        loc: {
          start: {
            line: 512,
            column: 69
          },
          end: {
            line: 512,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 512,
            column: 69
          },
          end: {
            line: 512,
            column: 82
          }
        }, {
          start: {
            line: 512,
            column: 86
          },
          end: {
            line: 512,
            column: 107
          }
        }],
        line: 512
      },
      "62": {
        loc: {
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 520,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 513,
            column: 8
          },
          end: {
            line: 520,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 513
      },
      "63": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 529,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "64": {
        loc: {
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 548,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 534,
            column: 12
          },
          end: {
            line: 535,
            column: 64
          }
        }, {
          start: {
            line: 536,
            column: 12
          },
          end: {
            line: 537,
            column: 65
          }
        }, {
          start: {
            line: 538,
            column: 12
          },
          end: {
            line: 539,
            column: 63
          }
        }, {
          start: {
            line: 540,
            column: 12
          },
          end: {
            line: 541,
            column: 65
          }
        }, {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 543,
            column: 64
          }
        }, {
          start: {
            line: 544,
            column: 12
          },
          end: {
            line: 545,
            column: 72
          }
        }, {
          start: {
            line: 546,
            column: 12
          },
          end: {
            line: 547,
            column: 73
          }
        }],
        line: 533
      },
      "65": {
        loc: {
          start: {
            line: 591,
            column: 23
          },
          end: {
            line: 591,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 591,
            column: 23
          },
          end: {
            line: 591,
            column: 49
          }
        }, {
          start: {
            line: 591,
            column: 53
          },
          end: {
            line: 591,
            column: 69
          }
        }],
        line: 591
      },
      "66": {
        loc: {
          start: {
            line: 609,
            column: 25
          },
          end: {
            line: 611,
            column: 25
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 609,
            column: 25
          },
          end: {
            line: 609,
            column: 58
          }
        }, {
          start: {
            line: 610,
            column: 12
          },
          end: {
            line: 610,
            column: 64
          }
        }, {
          start: {
            line: 611,
            column: 12
          },
          end: {
            line: 611,
            column: 25
          }
        }],
        line: 609
      },
      "67": {
        loc: {
          start: {
            line: 612,
            column: 34
          },
          end: {
            line: 612,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 612,
            column: 34
          },
          end: {
            line: 612,
            column: 75
          }
        }, {
          start: {
            line: 612,
            column: 79
          },
          end: {
            line: 612,
            column: 80
          }
        }],
        line: 612
      },
      "68": {
        loc: {
          start: {
            line: 613,
            column: 27
          },
          end: {
            line: 613,
            column: 117
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 613,
            column: 27
          },
          end: {
            line: 613,
            column: 57
          }
        }, {
          start: {
            line: 613,
            column: 61
          },
          end: {
            line: 613,
            column: 112
          }
        }, {
          start: {
            line: 613,
            column: 116
          },
          end: {
            line: 613,
            column: 117
          }
        }],
        line: 613
      },
      "69": {
        loc: {
          start: {
            line: 614,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 614,
            column: 8
          },
          end: {
            line: 626,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 614
      },
      "70": {
        loc: {
          start: {
            line: 635,
            column: 33
          },
          end: {
            line: 635,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 635,
            column: 33
          },
          end: {
            line: 635,
            column: 81
          }
        }, {
          start: {
            line: 635,
            column: 85
          },
          end: {
            line: 635,
            column: 105
          }
        }],
        line: 635
      },
      "71": {
        loc: {
          start: {
            line: 639,
            column: 12
          },
          end: {
            line: 643,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 639,
            column: 12
          },
          end: {
            line: 643,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 639
      },
      "72": {
        loc: {
          start: {
            line: 663,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 663,
            column: 8
          },
          end: {
            line: 675,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 663
      },
      "73": {
        loc: {
          start: {
            line: 677,
            column: 8
          },
          end: {
            line: 689,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 677,
            column: 8
          },
          end: {
            line: 689,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 677
      },
      "74": {
        loc: {
          start: {
            line: 694,
            column: 12
          },
          end: {
            line: 696,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 694,
            column: 12
          },
          end: {
            line: 696,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 694
      },
      "75": {
        loc: {
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 702,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 697,
            column: 12
          },
          end: {
            line: 702,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 697
      },
      "76": {
        loc: {
          start: {
            line: 697,
            column: 16
          },
          end: {
            line: 697,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 697,
            column: 16
          },
          end: {
            line: 697,
            column: 30
          }
        }, {
          start: {
            line: 697,
            column: 34
          },
          end: {
            line: 697,
            column: 78
          }
        }],
        line: 697
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0, 0, 0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0, 0, 0, 0, 0, 0],
      "65": [0, 0],
      "66": [0, 0, 0],
      "67": [0, 0],
      "68": [0, 0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts",
      mappings: "AAAA;;;;;GAKG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAkBtC;;GAEG;AACH,MAAM,iBAAiB,GAA6C;IAClE,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;IACjC,OAAO,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC;IAC/E,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC;IAC5C,OAAO,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;IAC9B,QAAQ,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;IAClC,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,CAAC;IACjC,SAAS,EAAE,EAAE;IACb,SAAS,EAAE,CAAC,UAAU,CAAC;IACvB,MAAM,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;IACjC,OAAO,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC;IAClC,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC;IAC5C,QAAQ,EAAE,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC;IAC5C,OAAO,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,CAAC;CACzD,CAAC;AAEF;;GAEG;AACH,MAAM,aAAa,GAA8C;IAC/D,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC5B,OAAO,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC;IACpC,MAAM,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC;IACpC,OAAO,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC3B,QAAQ,EAAE,CAAC,QAAQ,CAAC;IACpB,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC5B,SAAS,EAAE,CAAC,OAAO,CAAC;IACpB,SAAS,EAAE,CAAC,OAAO,CAAC;IACpB,MAAM,EAAE,CAAC,OAAO,EAAE,iBAAiB,CAAC;IACpC,OAAO,EAAE,CAAC,OAAO,EAAE,QAAQ,CAAC;IAC5B,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;IAC7B,QAAQ,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC5B,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,iBAAiB,CAAC;CACzD,CAAC;AAEF;;;;GAIG;AACH,MAAM,OAAO,qBAAsB,SAAQ,YAAY;IAC7C,UAAU,GAAG,IAAI,GAAG,EAAmC,CAAC;IACxD,WAAW,GAAG,IAAI,GAAG,EAA+B,CAAC;IACrD,cAAc,GAAG,IAAI,GAAG,EAAqC,CAAC;IAEtE;QACE,KAAK,EAAE,CAAC;IACV,CAAC;IAED;;OAEG;IACH,mBAAmB,CACjB,SAAuB,EACvB,SAA0C,EAAE;QAE5C,MAAM,iBAAiB,GAAsB;YAC3C,GAAG,SAAS;YACZ,aAAa,EAAE,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,MAAM,CAAC;YAClE,QAAQ,EAAE,QAAQ;YAClB,UAAU,EAAE,EAAE;YACd,WAAW,EAAE,EAAE;YACf,aAAa,EAAE;gBACb,gBAAgB,EAAE,OAAO,EAAE,iBAAiB;gBAC5C,mBAAmB,EAAE,CAAC;gBACtB,oBAAoB,EAAE,aAAa;gBACnC,UAAU,EAAE;oBACV,OAAO,EAAE,IAAI;oBACb,UAAU,EAAE,CAAC;oBACb,OAAO,EAAE,KAAK;iBACf;gBACD,iBAAiB,EAAE,IAAI;gBACvB,kBAAkB,EAAE,CAAC;gBACrB,qBAAqB,EAAE,IAAI;gBAC3B,GAAG,MAAM;aACV;YACD,QAAQ,EAAE;gBACR,UAAU,EAAE,SAAS,CAAC,YAAY,EAAE,KAAK,EAAE,MAAM,IAAI,CAAC;gBACtD,cAAc,EAAE,CAAC;gBACjB,WAAW,EAAE,CAAC;gBACd,YAAY,EAAE,CAAC;gBACf,eAAe,EAAE,CAAC;aACnB;YACD,OAAO,EAAE;gBACP,kBAAkB,EAAE,EAAE;aACvB;SACF,CAAC;QAEF,uDAAuD;QACvD,IAAI,SAAS,CAAC,YAAY,EAAE,KAAK,EAAE,CAAC;YAClC,iBAAiB,CAAC,UAAU,GAAG,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CACrE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CACpC,CAAC;QACJ,CAAC;QAED,MAAM,OAAO,GAA4B;YACvC,SAAS,EAAE,iBAAiB;YAC5B,MAAM,EAAE,iBAAiB,CAAC,aAAa;YACvC,UAAU,EAAE;gBACV,wBAAwB,EAAE,IAAI;gBAC9B,kBAAkB,EAAE,IAAI;gBACxB,gBAAgB,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC;gBAC/C,eAAe,EAAE;oBACf,aAAa,EAAE,MAAM,CAAC,gBAAgB,IAAI,OAAO;oBACjD,WAAW,EAAE,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,MAAM;oBACvC,QAAQ,EAAE,EAAE;oBACZ,SAAS,EAAE,EAAE;iBACd;gBACD,aAAa,EAAE;oBACb,SAAS,EAAE,IAAI;oBACf,SAAS,EAAE,IAAI;oBACf,YAAY,EAAE,KAAK;oBACnB,mBAAmB,EAAE,IAAI;iBAC1B;aACF;YACD,OAAO,EAAE;gBACP;oBACE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;oBACnC,KAAK,EAAE,iBAAiB,CAAC,aAAa;oBACtC,KAAK,EAAE,SAAS;oBAChB,WAAW,EAAE,gCAAgC;iBAC9C;aACF;YACD,cAAc,EAAE,EAAE;YAClB,gBAAgB,EAAE,aAAa,CAAC,iBAAiB,CAAC,aAAa,CAAC,IAAI,EAAE;SACvE,CAAC;QAEF,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;QAErD,OAAO,iBAAiB,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,oBAAoB,CAClB,WAAmB,EACnB,QAAwB,EACxB,QAAkC;QAElC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,YAAY,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;QAErD,4BAA4B;QAC5B,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,QAAQ,CAAC,EAAE,CAAC;YACzD,IAAI,CAAC,IAAI,CAAC,wBAAwB,EAAE;gBAClC,WAAW;gBACX,IAAI,EAAE,YAAY;gBAClB,EAAE,EAAE,QAAQ;aACb,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACf,CAAC;QAED,eAAe;QACf,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC;QACtD,OAAO,CAAC,SAAS,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC3C,OAAO,CAAC,gBAAgB,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QAEzD,oBAAoB;QACpB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;YACnB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,KAAK,EAAE,QAAQ;YACf,KAAK,EAAE,IAAI,CAAC,+BAA+B,CAAC,aAAa,EAAE,QAAQ,CAAC;YACpE,WAAW,EAAE,sBAAsB,aAAa,OAAO,QAAQ,EAAE;YACjE,QAAQ;SACT,CAAC,CAAC;QAEH,kBAAkB;QAClB,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;QAEtC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE;YACxB,WAAW;YACX,aAAa;YACb,QAAQ;YACR,OAAO;SACR,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,gBAAgB,CACd,WAAmB,EACnB,WAAmB,EACnB,WAAoC,EAAE;QAEtC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,YAAY,GAAG,cAAc,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAC/D,MAAM,UAAU,GAAwB;YACtC,YAAY;YACZ,WAAW;YACX,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,WAAW;YACX,cAAc,EAAE,OAAO,CAAC,SAAS,CAAC,UAAU;iBACzC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,WAAW,CAAC;iBAC1C,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3B,cAAc,EAAE,EAAE,GAAG,OAAO,CAAC,SAAS,EAAE;YACxC,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC;YAC7C,QAAQ;SACT,CAAC;QAEF,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QAC/C,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE/C,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;QAE3C,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,YAAoB;QACxC,MAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC5D,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;QAED,sBAAsB;QACtB,OAAO,CAAC,SAAS,CAAC,UAAU,GAAG,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;QAE1D,qDAAqD;QACrD,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBACxD,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;gBAC7B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACzB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,yBAAyB;QACzB,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,WAAW,EAAE,SAAS,EAAE;YAC3D,sBAAsB,EAAE,YAAY;SACrC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC9B,WAAW,EAAE,UAAU,CAAC,WAAW;YACnC,YAAY;SACb,CAAC,CAAC;QAEH,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACH,mBAAmB,CACjB,QAAuB,EACvB,YAAoB,EACpB,MAA8B;QAE9B,MAAM,WAAW,GAAG,MAAM,CAAC,UAAU,IAAI;YACvC,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,CAAC;YACb,OAAO,EAAE,KAAK;SACf,CAAC;QAEF,QAAQ,QAAQ,EAAE,CAAC;YACjB,KAAK,WAAW;gBACd,OAAO,CAAC,CAAC;YAEX,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,GAAG,YAAY,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;YAE3E,KAAK,aAAa;gBAChB,OAAO,IAAI,CAAC,GAAG,CACb,WAAW,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,EAAE,YAAY,GAAG,CAAC,CAAC,EACxE,WAAW,CAAC,OAAO,CACpB,CAAC;YAEJ,KAAK,QAAQ;gBACX,iEAAiE;gBACjE,OAAO,WAAW,CAAC,OAAO,CAAC;YAE7B;gBACE,OAAO,WAAW,CAAC,OAAO,CAAC;QAC/B,CAAC;IACH,CAAC;IAED;;OAEG;IACH,iBAAiB,CAAC,WAAmB;QACnC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;QAC9B,MAAM,UAAU,GAAG,SAAS,CAAC,SAAS,EAAE,YAAY,IAAI,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,mBAAmB,IAAI,CAAC,CAAC;QAEpE,OAAO,CACL,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,aAAa,CAAC;YACpE,UAAU,GAAG,UAAU,CACxB,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,WAAmB,EAAE,MAAc;QAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACf,CAAC;QAED,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;QAC9E,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO,KAAK,CAAC;QACf,CAAC;QAED,OAAO,CACL,SAAS,CAAC,KAAK,KAAK,QAAQ;YAC5B,SAAS,CAAC,QAAQ;YAClB,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAC5C,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,qBAAqB,CAAC,WAAmB;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACjD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;QAC9B,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC;QACjF,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;QAE3E,gCAAgC;QAChC,MAAM,kBAAkB,GAA2B,EAAE,CAAC;QACtD,IAAI,aAAa,GAAG,CAAC,CAAC;QACtB,MAAM,UAAU,GAAG,CAAC,CAAC;QACrB,MAAM,UAAU,GAAG,CAAC,CAAC;QAErB,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAClB,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;gBAChD,aAAa,IAAI,IAAI,CAAC,QAAQ,CAAC;YACjC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,8CAA8C;QAC9C,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;QAEtE,uBAAuB;QACvB,MAAM,WAAW,GAAG,cAAc;aAC/B,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,2BAA2B;aACjF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;aACrD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;aACX,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACZ,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC;YAC5B,IAAI,EAAE,KAAc,EAAE,qDAAqD;SAC5E,CAAC,CAAC,CAAC;QAEN,OAAO;YACL,WAAW;YACX,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,WAAW,EAAE;gBACX,aAAa;gBACb,kBAAkB;gBAClB,UAAU;gBACV,UAAU;aACX;YACD,IAAI,EAAE;gBACJ,YAAY;gBACZ,aAAa,EAAE,EAAE,EAAE,gDAAgD;gBACnE,WAAW;aACZ;YACD,MAAM,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC/B,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,IAAI,SAAS;gBACxC,YAAY,EAAE,IAAI,CAAC,KAAK,EAAE,OAAO,IAAI,eAAe;gBACpD,UAAU,EAAE,IAAI,CAAC,UAAU;gBAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ;aACnE,CAAC,CAAC;YACH,aAAa,EAAE,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC;SAC/D,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CAAC,OAAgC;QAC1D,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QACzD,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,aAAa,OAAO,CAAC,WAAW,YAAY;gBACrD,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,qBAAqB;oBAC3B,OAAO,EAAE,0CAA0C;iBACpD;aACF,CAAC;QACJ,CAAC;QAED,8CAA8C;QAC9C,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YACvD,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,UAAU,OAAO,CAAC,MAAM,yBAAyB,OAAO,CAAC,SAAS,CAAC,aAAa,EAAE;gBAC3F,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,gBAAgB;oBACtB,OAAO,EAAE,qCAAqC;oBAC9C,OAAO,EAAE;wBACP,YAAY,EAAE,OAAO,CAAC,SAAS,CAAC,aAAa;wBAC7C,cAAc,EAAE,OAAO,CAAC,gBAAgB;qBACzC;iBACF;aACF,CAAC;QACJ,CAAC;QAED,iCAAiC;QACjC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC;YAClD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC;QACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE5D,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAEnE,sCAAsC;YACtC,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACtE,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACf,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9B,CAAC;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,+CAA+C;YAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;YACtE,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBACf,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC9B,CAAC;YAED,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,6BAA6B,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe,EAAE;gBAChG,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,yBAAyB;oBAC/B,OAAO,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,eAAe;iBAClE;aACF,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,WAAmB;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,OAAO,CAAC,cAAsB,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;QAC/C,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC;QAC5C,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,KAAK,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC;YAC/D,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC;YACtE,MAAM,WAAW,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,QAAQ,CAC/D,OAAO,CAAC,SAAS,CAAC,aAAa,CAChC,CAAC;YAEF,IAAI,WAAW,IAAI,aAAa,GAAG,UAAU,EAAE,CAAC;gBAC9C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACpC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAExC,kCAAkC;gBAClC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;oBACjD,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;gBAEH,OAAO,EAAE,CAAC;YACZ,CAAC;QACH,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE,iBAAiB,EAAE,OAAO,EAAE,CAAC,CAAC;QAC9D,OAAO,OAAO,CAAC;IACjB,CAAC;IAED,yBAAyB;IAEjB,4BAA4B,CAAC,MAAc;QACjD,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,SAAS;gBACZ,OAAO,SAAS,CAAC;YACnB,KAAK,SAAS;gBACZ,OAAO,WAAW,CAAC;YACrB,KAAK,OAAO;gBACV,OAAO,QAAQ,CAAC;YAClB,KAAK,SAAS;gBACZ,OAAO,SAAS,CAAC;YACnB;gBACE,OAAO,SAAS,CAAC;QACrB,CAAC;IACH,CAAC;IAEO,wBAAwB,CAAC,IAAa;QAC5C,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,EAAE;YACf,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,QAAQ,EAAE,IAAI,CAAC,IAAI;YACnB,KAAK,EAAE,SAAS;YAChB,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,CAAC;YACb,QAAQ,EAAE,IAAI;YACd,OAAO,EAAE,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;SACnE,CAAC;IACJ,CAAC;IAEO,sBAAsB,CAAC,IAAoB,EAAE,EAAkB;QACrE,OAAO,iBAAiB,CAAC,IAAI,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,IAAI,KAAK,CAAC;IACxD,CAAC;IAEO,+BAA+B,CACrC,IAAoB,EACpB,EAAkB;QAElB,IAAI,IAAI,KAAK,SAAS,IAAI,EAAE,KAAK,SAAS;YAAE,OAAO,SAAS,CAAC;QAC7D,IAAI,IAAI,KAAK,SAAS,IAAI,EAAE,KAAK,QAAQ;YAAE,OAAO,QAAQ,CAAC;QAC3D,IAAI,IAAI,KAAK,QAAQ,IAAI,EAAE,KAAK,SAAS;YAAE,OAAO,SAAS,CAAC;QAC5D,IAAI,EAAE,KAAK,WAAW;YAAE,OAAO,WAAW,CAAC;QAC3C,IAAI,EAAE,KAAK,QAAQ;YAAE,OAAO,QAAQ,CAAC;QACrC,IAAI,EAAE,KAAK,WAAW;YAAE,OAAO,WAAW,CAAC;QAC3C,IAAI,EAAE,KAAK,UAAU;YAAE,OAAO,SAAS,CAAC;QACxC,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,uBAAuB,CAAC,OAAgC;QAC9D,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;QAC9B,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC;QAE/C,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACrB,SAAS,CAAC,QAAQ,CAAC,eAAe,GAAG,CAAC,CAAC;YACvC,OAAO;QACT,CAAC;QAED,MAAM,SAAS,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,MAAM,CAAC;QACnF,MAAM,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC7E,MAAM,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,MAAM,CAAC;QAE/E,SAAS,CAAC,QAAQ,CAAC,cAAc,GAAG,SAAS,CAAC;QAC9C,SAAS,CAAC,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC;QACxC,SAAS,CAAC,QAAQ,CAAC,YAAY,GAAG,OAAO,CAAC;QAC1C,SAAS,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,KAAK,CAC7C,CAAC,CAAC,SAAS,GAAG,MAAM,GAAG,OAAO,CAAC,GAAG,UAAU,CAAC,GAAG,GAAG,CACpD,CAAC;IACJ,CAAC;IAEO,qBAAqB,CAAC,UAAgC;QAC5D,uCAAuC;QACvC,oEAAoE;QACpE,OAAO,UAAU;aACd,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACrD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC;aACrD,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;aACZ,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAEO,+BAA+B,CACrC,SAA4B;QAE5B,MAAM,WAAW,GAAwC,EAAE,CAAC;QAE5D,oDAAoD;QACpD,MAAM,gBAAgB,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAClD,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAC/C,CAAC;QAEF,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAChC,WAAW,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE,aAAa;gBACnB,WAAW,EAAE,GAAG,gBAAgB,CAAC,MAAM,qDAAqD;gBAC5F,eAAe,EAAE,mCAAmC;gBACpD,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;QACL,CAAC;QAED,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;QACjF,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC3B,WAAW,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE,aAAa;gBACnB,WAAW,EAAE,iEAAiE;gBAC9E,eAAe,EAAE,0CAA0C;gBAC3D,QAAQ,EAAE,MAAM;aACjB,CAAC,CAAC;QACL,CAAC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,KAAK,CAAC,oBAAoB,CAChC,OAAgC,EAChC,OAAgC;QAEhC,QAAQ,OAAO,CAAC,MAAM,EAAE,CAAC;YACvB,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAClD,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACnD,KAAK,MAAM;gBACT,OAAO,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACjD,KAAK,QAAQ;gBACX,OAAO,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACnD,KAAK,OAAO;gBACV,OAAO,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAClD,KAAK,iBAAiB;gBACpB,OAAO,IAAI,CAAC,yBAAyB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1D;gBACE,MAAM,IAAI,KAAK,CAAC,uBAAuB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;QAC7D,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,OAAgC,EAChC,OAAgC;QAEhC,mCAAmC;QACnC,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,WAAW,EAAE,0BAA0B,EAAE;YACxF,QAAQ,EAAE,OAAO,CAAC,WAAW;SAC9B,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;QAEzD,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,+BAA+B;YACxC,cAAc,EAAE,QAAQ;YACxB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE;gBACJ,YAAY,EAAE,UAAU,EAAE,YAAY;aACvC;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAC9B,OAAgC,EAChC,OAAgC;QAEhC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE1D,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,gCAAgC;YACzC,cAAc,EAAE,SAAS;YACzB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAC5B,OAAgC,EAChC,OAAgC;QAEhC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE1D,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,gCAAgC;YACzC,cAAc,EAAE,SAAS;YACzB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,kBAAkB,CAC9B,OAAgC,EAChC,OAAgC;QAEhC,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,EAAE,MAAM,IAAI,gBAAgB,CAAC;QAE9D,OAAO,CAAC,SAAS,CAAC,YAAY,GAAG;YAC/B,MAAM,EAAE,MAA4B;YACpC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,WAAW,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACtC,CAAC;QAEF,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAE5D,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,qCAAqC,MAAM,GAAG;YACvD,cAAc,EAAE,WAAW;YAC3B,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACpC,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAC7B,OAAgC,EAChC,OAAgC;QAEhC,MAAM,QAAQ,GACZ,OAAO,CAAC,UAAU,EAAE,aAAa;YACjC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,oBAAoB;YACpD,aAAa,CAAC;QAChB,MAAM,iBAAiB,GAAG,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,YAAY,IAAI,CAAC,CAAC;QACzE,MAAM,UAAU,GACd,OAAO,CAAC,UAAU,EAAE,UAAU,IAAI,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,mBAAmB,IAAI,CAAC,CAAC;QAE7F,IAAI,iBAAiB,IAAI,UAAU,EAAE,CAAC;YACpC,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,2BAA2B,UAAU,YAAY;gBAC1D,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,sBAAsB;oBAC5B,OAAO,EAAE,gEAAgE;iBAC1E;aACF,CAAC;QACJ,CAAC;QAED,wBAAwB;QACxB,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CACzC,QAAQ,EACR,iBAAiB,GAAG,CAAC,EACrB,OAAO,CAAC,SAAS,CAAC,aAAa,CAChC,CAAC;QAEF,2BAA2B;QAC3B,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG;YAC5B,QAAQ;YACR,YAAY,EAAE,iBAAiB,GAAG,CAAC;YACnC,WAAW,EAAE,UAAU;YACvB,WAAW,EAAE,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,UAAU,CAAC,CAAC,WAAW,EAAE;YAC5D,mBAAmB,EAAE,OAAO,CAAC,SAAS,CAAC,SAAS,EAAE,mBAAmB,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE;SAC9F,CAAC;QAEF,8BAA8B;QAC9B,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE,CAAC;gBAC5B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;YAC/B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAE3D,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,sCAAsC,iBAAiB,GAAG,CAAC,IAAI,UAAU,GAAG;YACrF,cAAc,EAAE,UAAU;YAC1B,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE;gBACJ,mBAAmB,EAAE,OAAO,CAAC,SAAS,CAAC,SAAS,CAAC,WAAW;gBAC5D,iBAAiB,EAAE;oBACjB,cAAc,EAAE,UAAU;iBAC3B;aACF;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,yBAAyB,CACrC,OAAgC,EAChC,OAAgC;QAEhC,MAAM,aAAa,GAAG,OAAO,CAAC,UAAU,EAAE,aAAa,CAAC;QACxD,IAAI,CAAC,aAAa,EAAE,CAAC;YACnB,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,gEAAgE;gBACzE,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,mBAAmB;oBACzB,OAAO,EAAE,yCAAyC;iBACnD;aACF,CAAC;QACJ,CAAC;QAED,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,aAAa,CAAC,CAAC;QACrF,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,OAAO;gBACL,OAAO,EAAE,KAAK;gBACd,OAAO,EAAE,QAAQ,aAAa,yBAAyB;gBACvD,WAAW,EAAE,OAAO,CAAC,WAAW;gBAChC,MAAM,EAAE,OAAO,CAAC,MAAM;gBACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,KAAK,EAAE;oBACL,IAAI,EAAE,gBAAgB;oBACtB,OAAO,EAAE,mDAAmD;iBAC7D;aACF,CAAC;QACJ,CAAC;QAED,8CAA8C;QAC9C,IAAI,cAAc,GAAG,KAAK,CAAC;QAC3B,MAAM,aAAa,GAAa,EAAE,CAAC;QAEnC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC1C,IAAI,IAAI,CAAC,MAAM,KAAK,aAAa,EAAE,CAAC;gBAClC,cAAc,GAAG,IAAI,CAAC;YACxB,CAAC;YAED,IAAI,cAAc,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;gBACnE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;gBACvB,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;gBAC7B,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAClC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;QAE1D,OAAO;YACL,OAAO,EAAE,IAAI;YACb,OAAO,EAAE,kCAAkC,aAAa,EAAE;YAC1D,cAAc,EAAE,SAAS;YACzB,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;YACnC,IAAI,EAAE;gBACJ,aAAa;aACd;SACF,CAAC;IACJ,CAAC;CACF",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/executionState.ts"],
      sourcesContent: ["/**\n * Execution State Management Utilities for n8n MCP Server\n *\n * Provides utilities for managing execution state, checkpoints, retry logic,\n * and execution flow control for sophisticated workflow execution control.\n */\n\nimport { EventEmitter } from 'events';\nimport { N8nExecution, N8nNode } from '../types/n8n.js';\nimport {\n  ExecutionState,\n  ExecutionAction,\n  CancellationReason,\n  RetryStrategy,\n  NodeExecutionState,\n  ExecutionCheckpoint,\n  ExecutionControlConfig,\n  EnhancedExecution,\n  ExecutionControlRequest,\n  ExecutionControlResponse,\n  ExecutionHistoryEntry,\n  ExecutionAnalytics,\n  ExecutionControlContext,\n} from '../types/executionTypes.js';\n\n/**\n * Execution state transition matrix\n */\nconst STATE_TRANSITIONS: Record<ExecutionState, ExecutionState[]> = {\n  pending: ['running', 'cancelled'],\n  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],\n  paused: ['running', 'stopping', 'cancelled'],\n  pausing: ['paused', 'running'],\n  stopping: ['stopped', 'cancelled'],\n  stopped: ['running', 'cancelled'],\n  cancelled: [],\n  completed: ['retrying'],\n  failed: ['retrying', 'cancelled'],\n  timeout: ['retrying', 'cancelled'],\n  waiting: ['running', 'cancelled', 'timeout'],\n  retrying: ['running', 'failed', 'cancelled'],\n  partial: ['running', 'completed', 'failed', 'cancelled'],\n};\n\n/**\n * Available actions for each execution state\n */\nconst STATE_ACTIONS: Record<ExecutionState, ExecutionAction[]> = {\n  pending: ['start', 'cancel'],\n  running: ['pause', 'stop', 'cancel'],\n  paused: ['resume', 'stop', 'cancel'],\n  pausing: ['stop', 'cancel'],\n  stopping: ['cancel'],\n  stopped: ['start', 'cancel'],\n  cancelled: ['retry'],\n  completed: ['retry'],\n  failed: ['retry', 'retry-from-node'],\n  timeout: ['retry', 'cancel'],\n  waiting: ['resume', 'cancel'],\n  retrying: ['stop', 'cancel'],\n  partial: ['resume', 'stop', 'cancel', 'execute-partial'],\n};\n\n/**\n * Execution State Manager\n *\n * Manages execution state transitions, checkpoints, and execution flow control.\n */\nexport class ExecutionStateManager extends EventEmitter {\n  private executions = new Map<string, ExecutionControlContext>();\n  private checkpoints = new Map<string, ExecutionCheckpoint>();\n  private activeRequests = new Map<string, ExecutionControlRequest[]>();\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialize execution tracking\n   */\n  initializeExecution(\n    execution: N8nExecution,\n    config: Partial<ExecutionControlConfig> = {}\n  ): EnhancedExecution {\n    const enhancedExecution: EnhancedExecution = {\n      ...execution,\n      enhancedState: this.mapN8nStatusToExecutionState(execution.status),\n      priority: 'normal',\n      nodeStates: [],\n      checkpoints: [],\n      controlConfig: {\n        maxExecutionTime: 3600000, // 1 hour default\n        maxExecutionRetries: 3,\n        defaultRetryStrategy: 'exponential',\n        retryDelay: {\n          initial: 1000,\n          multiplier: 2,\n          maximum: 30000,\n        },\n        enableCheckpoints: true,\n        checkpointInterval: 5,\n        allowPartialExecution: true,\n        ...config,\n      },\n      progress: {\n        totalNodes: execution.workflowData?.nodes?.length || 0,\n        completedNodes: 0,\n        failedNodes: 0,\n        skippedNodes: 0,\n        percentComplete: 0,\n      },\n      metrics: {\n        nodeExecutionTimes: {},\n      },\n    };\n\n    // Initialize node states if workflow data is available\n    if (execution.workflowData?.nodes) {\n      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node =>\n        this.createNodeExecutionState(node)\n      );\n    }\n\n    const context: ExecutionControlContext = {\n      execution: enhancedExecution,\n      config: enhancedExecution.controlConfig,\n      monitoring: {\n        enableRealTimeMonitoring: true,\n        monitoringInterval: 5000,\n        metricsToCollect: ['cpu', 'memory', 'duration'],\n        alertThresholds: {\n          executionTime: config.maxExecutionTime || 3600000,\n          memoryUsage: 1024 * 1024 * 1024, // 1GB\n          cpuUsage: 80,\n          errorRate: 10,\n        },\n        notifications: {\n          onFailure: true,\n          onTimeout: true,\n          onCompletion: false,\n          onThresholdExceeded: true,\n        },\n      },\n      history: [\n        {\n          timestamp: new Date().toISOString(),\n          state: enhancedExecution.enhancedState,\n          event: 'started',\n          description: 'Execution tracking initialized',\n        },\n      ],\n      activeRequests: [],\n      availableActions: STATE_ACTIONS[enhancedExecution.enhancedState] || [],\n    };\n\n    this.executions.set(execution.id, context);\n    this.emit('executionInitialized', enhancedExecution);\n\n    return enhancedExecution;\n  }\n\n  /**\n   * Update execution state\n   */\n  updateExecutionState(\n    executionId: string,\n    newState: ExecutionState,\n    metadata?: Record<string, unknown>\n  ): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const currentState = context.execution.enhancedState;\n\n    // Validate state transition\n    if (!this.isValidStateTransition(currentState, newState)) {\n      this.emit('invalidStateTransition', {\n        executionId,\n        from: currentState,\n        to: newState,\n      });\n      return false;\n    }\n\n    // Update state\n    const previousState = context.execution.enhancedState;\n    context.execution.enhancedState = newState;\n    context.availableActions = STATE_ACTIONS[newState] || [];\n\n    // Add history entry\n    context.history.push({\n      timestamp: new Date().toISOString(),\n      state: newState,\n      event: this.getEventTypeFromStateTransition(previousState, newState),\n      description: `State changed from ${previousState} to ${newState}`,\n      metadata,\n    });\n\n    // Update progress\n    this.updateExecutionProgress(context);\n\n    this.emit('stateChanged', {\n      executionId,\n      previousState,\n      newState,\n      context,\n    });\n\n    return true;\n  }\n\n  /**\n   * Create execution checkpoint\n   */\n  createCheckpoint(\n    executionId: string,\n    description: string,\n    metadata: Record<string, unknown> = {}\n  ): ExecutionCheckpoint | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const checkpointId = `checkpoint_${executionId}_${Date.now()}`;\n    const checkpoint: ExecutionCheckpoint = {\n      checkpointId,\n      executionId,\n      timestamp: new Date().toISOString(),\n      description,\n      completedNodes: context.execution.nodeStates\n        .filter(node => node.state === 'completed')\n        .map(node => node.nodeId),\n      executionState: { ...context.execution },\n      nodeStates: [...context.execution.nodeStates],\n      metadata,\n    };\n\n    this.checkpoints.set(checkpointId, checkpoint);\n    context.execution.checkpoints.push(checkpoint);\n\n    this.emit('checkpointCreated', checkpoint);\n\n    return checkpoint;\n  }\n\n  /**\n   * Restore execution from checkpoint\n   */\n  restoreFromCheckpoint(checkpointId: string): boolean {\n    const checkpoint = this.checkpoints.get(checkpointId);\n    if (!checkpoint) {\n      return false;\n    }\n\n    const context = this.executions.get(checkpoint.executionId);\n    if (!context) {\n      return false;\n    }\n\n    // Restore node states\n    context.execution.nodeStates = [...checkpoint.nodeStates];\n\n    // Reset nodes that were running or failed to pending\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'running' || node.state === 'failed') {\n        node.state = 'pending';\n        node.completedAt = undefined;\n        node.error = undefined;\n      }\n    });\n\n    // Update execution state\n    this.updateExecutionState(checkpoint.executionId, 'pending', {\n      restoredFromCheckpoint: checkpointId,\n    });\n\n    this.emit('checkpointRestored', {\n      executionId: checkpoint.executionId,\n      checkpointId,\n    });\n\n    return true;\n  }\n\n  /**\n   * Calculate retry delay based on strategy\n   */\n  calculateRetryDelay(\n    strategy: RetryStrategy,\n    attemptCount: number,\n    config: ExecutionControlConfig\n  ): number {\n    const retryConfig = config.retryDelay || {\n      initial: 1000,\n      multiplier: 2,\n      maximum: 30000,\n    };\n\n    switch (strategy) {\n      case 'immediate':\n        return 0;\n\n      case 'linear':\n        return Math.min(retryConfig.initial * attemptCount, retryConfig.maximum);\n\n      case 'exponential':\n        return Math.min(\n          retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1),\n          retryConfig.maximum\n        );\n\n      case 'custom':\n        // Custom strategies can be implemented by overriding this method\n        return retryConfig.initial;\n\n      default:\n        return retryConfig.initial;\n    }\n  }\n\n  /**\n   * Check if execution can be retried\n   */\n  canRetryExecution(executionId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const { execution } = context;\n    const retryCount = execution.retryInfo?.attemptCount || 0;\n    const maxRetries = execution.controlConfig.maxExecutionRetries || 3;\n\n    return (\n      ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState) &&\n      retryCount < maxRetries\n    );\n  }\n\n  /**\n   * Check if node can be retried\n   */\n  canRetryNode(executionId: string, nodeId: string): boolean {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return false;\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === nodeId);\n    if (!nodeState) {\n      return false;\n    }\n\n    return (\n      nodeState.state === 'failed' &&\n      nodeState.canRetry &&\n      nodeState.retryCount < nodeState.maxRetries\n    );\n  }\n\n  /**\n   * Get execution analytics\n   */\n  getExecutionAnalytics(executionId: string): ExecutionAnalytics | null {\n    const context = this.executions.get(executionId);\n    if (!context) {\n      return null;\n    }\n\n    const { execution } = context;\n    const completedNodes = execution.nodeStates.filter(n => n.state === 'completed');\n    const failedNodes = execution.nodeStates.filter(n => n.state === 'failed');\n\n    // Calculate performance metrics\n    const nodeExecutionTimes: Record<string, number> = {};\n    let totalDuration = 0;\n    const memoryPeak = 0;\n    const cpuAverage = 0;\n\n    completedNodes.forEach(node => {\n      if (node.duration) {\n        nodeExecutionTimes[node.nodeId] = node.duration;\n        totalDuration += node.duration;\n      }\n    });\n\n    // Find critical path (longest execution path)\n    const criticalPath = this.calculateCriticalPath(execution.nodeStates);\n\n    // Identify bottlenecks\n    const bottlenecks = completedNodes\n      .filter(node => node.duration && node.duration > 5000) // Nodes taking > 5 seconds\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 5)\n      .map(node => ({\n        nodeId: node.nodeId,\n        duration: node.duration || 0,\n        type: 'cpu' as const, // Could be enhanced to detect actual bottleneck type\n      }));\n\n    return {\n      executionId,\n      timestamp: new Date().toISOString(),\n      performance: {\n        totalDuration,\n        nodeExecutionTimes,\n        memoryPeak,\n        cpuAverage,\n      },\n      flow: {\n        criticalPath,\n        parallelNodes: [], // Could be calculated from workflow connections\n        bottlenecks,\n      },\n      errors: failedNodes.map(node => ({\n        nodeId: node.nodeId,\n        errorType: node.error?.type || 'unknown',\n        errorMessage: node.error?.message || 'Unknown error',\n        retryCount: node.retryCount,\n        resolution: node.retryCount < node.maxRetries ? 'retry' : 'manual',\n      })),\n      optimizations: this.generateOptimizationSuggestions(execution),\n    };\n  }\n\n  /**\n   * Process execution control request\n   */\n  async processControlRequest(request: ExecutionControlRequest): Promise<ExecutionControlResponse> {\n    const context = this.executions.get(request.executionId);\n    if (!context) {\n      return {\n        success: false,\n        message: `Execution ${request.executionId} not found`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'EXECUTION_NOT_FOUND',\n          message: 'The specified execution ID was not found',\n        },\n      };\n    }\n\n    // Check if action is allowed in current state\n    if (!context.availableActions.includes(request.action)) {\n      return {\n        success: false,\n        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'INVALID_ACTION',\n          message: `Action not allowed in current state`,\n          details: {\n            currentState: context.execution.enhancedState,\n            allowedActions: context.availableActions,\n          },\n        },\n      };\n    }\n\n    // Add request to active requests\n    if (!this.activeRequests.has(request.executionId)) {\n      this.activeRequests.set(request.executionId, []);\n    }\n    this.activeRequests.get(request.executionId)!.push(request);\n\n    try {\n      const response = await this.executeControlAction(context, request);\n\n      // Remove request from active requests\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return response;\n    } catch (error) {\n      // Remove request from active requests on error\n      const activeReqs = this.activeRequests.get(request.executionId) || [];\n      const index = activeReqs.indexOf(request);\n      if (index > -1) {\n        activeReqs.splice(index, 1);\n      }\n\n      return {\n        success: false,\n        message: `Failed to execute action: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'ACTION_EXECUTION_FAILED',\n          message: error instanceof Error ? error.message : 'Unknown error',\n        },\n      };\n    }\n  }\n\n  /**\n   * Get execution context\n   */\n  getExecutionContext(executionId: string): ExecutionControlContext | null {\n    return this.executions.get(executionId) || null;\n  }\n\n  /**\n   * Clean up completed or old executions\n   */\n  cleanup(olderThanMs: number = 24 * 60 * 60 * 1000): number {\n    const cutoffTime = Date.now() - olderThanMs;\n    let cleaned = 0;\n\n    for (const [executionId, context] of this.executions.entries()) {\n      const executionTime = new Date(context.execution.startedAt).getTime();\n      const isCompleted = ['completed', 'failed', 'cancelled'].includes(\n        context.execution.enhancedState\n      );\n\n      if (isCompleted && executionTime < cutoffTime) {\n        this.executions.delete(executionId);\n        this.activeRequests.delete(executionId);\n\n        // Clean up associated checkpoints\n        context.execution.checkpoints.forEach(checkpoint => {\n          this.checkpoints.delete(checkpoint.checkpointId);\n        });\n\n        cleaned++;\n      }\n    }\n\n    this.emit('cleanupCompleted', { cleanedExecutions: cleaned });\n    return cleaned;\n  }\n\n  // Private helper methods\n\n  private mapN8nStatusToExecutionState(status: string): ExecutionState {\n    switch (status) {\n      case 'running':\n        return 'running';\n      case 'success':\n        return 'completed';\n      case 'error':\n        return 'failed';\n      case 'waiting':\n        return 'waiting';\n      default:\n        return 'pending';\n    }\n  }\n\n  private createNodeExecutionState(node: N8nNode): NodeExecutionState {\n    return {\n      nodeId: node.id,\n      nodeName: node.name,\n      nodeType: node.type,\n      state: 'pending',\n      retryCount: 0,\n      maxRetries: 3,\n      canRetry: true,\n      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase()),\n    };\n  }\n\n  private isValidStateTransition(from: ExecutionState, to: ExecutionState): boolean {\n    return STATE_TRANSITIONS[from]?.includes(to) || false;\n  }\n\n  private getEventTypeFromStateTransition(\n    from: ExecutionState,\n    to: ExecutionState\n  ): ExecutionHistoryEntry['event'] {\n    if (from === 'pending' && to === 'running') return 'started';\n    if (from === 'running' && to === 'paused') return 'paused';\n    if (from === 'paused' && to === 'running') return 'resumed';\n    if (to === 'completed') return 'completed';\n    if (to === 'failed') return 'failed';\n    if (to === 'cancelled') return 'cancelled';\n    if (to === 'retrying') return 'retried';\n    return 'started';\n  }\n\n  private updateExecutionProgress(context: ExecutionControlContext): void {\n    const { execution } = context;\n    const totalNodes = execution.nodeStates.length;\n\n    if (totalNodes === 0) {\n      execution.progress.percentComplete = 0;\n      return;\n    }\n\n    const completed = execution.nodeStates.filter(n => n.state === 'completed').length;\n    const failed = execution.nodeStates.filter(n => n.state === 'failed').length;\n    const skipped = execution.nodeStates.filter(n => n.state === 'skipped').length;\n\n    execution.progress.completedNodes = completed;\n    execution.progress.failedNodes = failed;\n    execution.progress.skippedNodes = skipped;\n    execution.progress.percentComplete = Math.round(\n      ((completed + failed + skipped) / totalNodes) * 100\n    );\n  }\n\n  private calculateCriticalPath(nodeStates: NodeExecutionState[]): string[] {\n    // Simplified critical path calculation\n    // In a real implementation, this would analyze workflow connections\n    return nodeStates\n      .filter(node => node.duration && node.duration > 1000)\n      .sort((a, b) => (b.duration || 0) - (a.duration || 0))\n      .slice(0, 10)\n      .map(node => node.nodeId);\n  }\n\n  private generateOptimizationSuggestions(\n    execution: EnhancedExecution\n  ): ExecutionAnalytics['optimizations'] {\n    const suggestions: ExecutionAnalytics['optimizations'] = [];\n\n    // Suggest optimizations based on execution patterns\n    const longRunningNodes = execution.nodeStates.filter(\n      node => node.duration && node.duration > 10000\n    );\n\n    if (longRunningNodes.length > 0) {\n      suggestions.push({\n        type: 'performance',\n        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,\n        estimatedImpact: 'Reducing execution time by 30-50%',\n        priority: 'high',\n      });\n    }\n\n    const failedNodes = execution.nodeStates.filter(node => node.state === 'failed');\n    if (failedNodes.length > 0) {\n      suggestions.push({\n        type: 'reliability',\n        description: 'Consider adding error handling and retry logic for failed nodes',\n        estimatedImpact: 'Improving workflow reliability by 60-80%',\n        priority: 'high',\n      });\n    }\n\n    return suggestions;\n  }\n\n  private async executeControlAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    switch (request.action) {\n      case 'pause':\n        return this.handlePauseAction(context, request);\n      case 'resume':\n        return this.handleResumeAction(context, request);\n      case 'stop':\n        return this.handleStopAction(context, request);\n      case 'cancel':\n        return this.handleCancelAction(context, request);\n      case 'retry':\n        return this.handleRetryAction(context, request);\n      case 'retry-from-node':\n        return this.handleRetryFromNodeAction(context, request);\n      default:\n        throw new Error(`Unsupported action: ${request.action}`);\n    }\n  }\n\n  private async handlePauseAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    // Create checkpoint before pausing\n    const checkpoint = this.createCheckpoint(request.executionId, 'Execution paused by user', {\n      pausedBy: request.requestedBy,\n    });\n\n    this.updateExecutionState(request.executionId, 'paused');\n\n    return {\n      success: true,\n      message: 'Execution paused successfully',\n      executionState: 'paused',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        checkpointId: checkpoint?.checkpointId,\n      },\n    };\n  }\n\n  private async handleResumeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'running');\n\n    return {\n      success: true,\n      message: 'Execution resumed successfully',\n      executionState: 'running',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleStopAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    this.updateExecutionState(request.executionId, 'stopped');\n\n    return {\n      success: true,\n      message: 'Execution stopped successfully',\n      executionState: 'stopped',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleCancelAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const reason = request.parameters?.reason || 'user-requested';\n\n    context.execution.cancellation = {\n      reason: reason as CancellationReason,\n      requestedAt: request.requestedAt,\n      requestedBy: request.requestedBy,\n      cancelledAt: new Date().toISOString(),\n    };\n\n    this.updateExecutionState(request.executionId, 'cancelled');\n\n    return {\n      success: true,\n      message: `Execution cancelled successfully (${reason})`,\n      executionState: 'cancelled',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async handleRetryAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const strategy =\n      request.parameters?.retryStrategy ||\n      context.execution.controlConfig.defaultRetryStrategy ||\n      'exponential';\n    const currentRetryCount = context.execution.retryInfo?.attemptCount || 0;\n    const maxRetries =\n      request.parameters?.maxRetries || context.execution.controlConfig.maxExecutionRetries || 3;\n\n    if (currentRetryCount >= maxRetries) {\n      return {\n        success: false,\n        message: `Maximum retry attempts (${maxRetries}) exceeded`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MAX_RETRIES_EXCEEDED',\n          message: 'The execution has reached the maximum number of retry attempts',\n        },\n      };\n    }\n\n    // Calculate retry delay\n    const retryDelay = this.calculateRetryDelay(\n      strategy,\n      currentRetryCount + 1,\n      context.execution.controlConfig\n    );\n\n    // Update retry information\n    context.execution.retryInfo = {\n      strategy,\n      attemptCount: currentRetryCount + 1,\n      maxAttempts: maxRetries,\n      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),\n      originalExecutionId: context.execution.retryInfo?.originalExecutionId || context.execution.id,\n    };\n\n    // Reset node states for retry\n    context.execution.nodeStates.forEach(node => {\n      if (node.state === 'failed') {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'retrying');\n\n    return {\n      success: true,\n      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,\n      executionState: 'retrying',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        estimatedCompletion: context.execution.retryInfo.nextRetryAt,\n        performanceImpact: {\n          estimatedDelay: retryDelay,\n        },\n      },\n    };\n  }\n\n  private async handleRetryFromNodeAction(\n    context: ExecutionControlContext,\n    request: ExecutionControlRequest\n  ): Promise<ExecutionControlResponse> {\n    const startFromNode = request.parameters?.startFromNode;\n    if (!startFromNode) {\n      return {\n        success: false,\n        message: 'startFromNode parameter is required for retry-from-node action',\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'MISSING_PARAMETER',\n          message: 'The startFromNode parameter is required',\n        },\n      };\n    }\n\n    const nodeState = context.execution.nodeStates.find(n => n.nodeId === startFromNode);\n    if (!nodeState) {\n      return {\n        success: false,\n        message: `Node ${startFromNode} not found in execution`,\n        executionId: request.executionId,\n        action: request.action,\n        timestamp: new Date().toISOString(),\n        error: {\n          code: 'NODE_NOT_FOUND',\n          message: 'The specified node was not found in the execution',\n        },\n      };\n    }\n\n    // Reset nodes from the specified node onwards\n    let resetFromFound = false;\n    const affectedNodes: string[] = [];\n\n    context.execution.nodeStates.forEach(node => {\n      if (node.nodeId === startFromNode) {\n        resetFromFound = true;\n      }\n\n      if (resetFromFound && ['failed', 'completed'].includes(node.state)) {\n        node.state = 'pending';\n        node.error = undefined;\n        node.completedAt = undefined;\n        affectedNodes.push(node.nodeId);\n      }\n    });\n\n    this.updateExecutionState(request.executionId, 'partial');\n\n    return {\n      success: true,\n      message: `Execution will retry from node ${startFromNode}`,\n      executionState: 'partial',\n      executionId: request.executionId,\n      action: request.action,\n      timestamp: new Date().toISOString(),\n      data: {\n        affectedNodes,\n      },\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5143be28f8796fc4d8c97fae90f9826a1ef31f4f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_7mukgb8g9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_7mukgb8g9();
/**
 * Execution State Management Utilities for n8n MCP Server
 *
 * Provides utilities for managing execution state, checkpoints, retry logic,
 * and execution flow control for sophisticated workflow execution control.
 */
import { EventEmitter } from 'events';
/**
 * Execution state transition matrix
 */
const STATE_TRANSITIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[0]++, {
  pending: ['running', 'cancelled'],
  running: ['pausing', 'stopping', 'cancelled', 'completed', 'failed', 'waiting'],
  paused: ['running', 'stopping', 'cancelled'],
  pausing: ['paused', 'running'],
  stopping: ['stopped', 'cancelled'],
  stopped: ['running', 'cancelled'],
  cancelled: [],
  completed: ['retrying'],
  failed: ['retrying', 'cancelled'],
  timeout: ['retrying', 'cancelled'],
  waiting: ['running', 'cancelled', 'timeout'],
  retrying: ['running', 'failed', 'cancelled'],
  partial: ['running', 'completed', 'failed', 'cancelled']
});
/**
 * Available actions for each execution state
 */
const STATE_ACTIONS =
/* istanbul ignore next */
(cov_7mukgb8g9().s[1]++, {
  pending: ['start', 'cancel'],
  running: ['pause', 'stop', 'cancel'],
  paused: ['resume', 'stop', 'cancel'],
  pausing: ['stop', 'cancel'],
  stopping: ['cancel'],
  stopped: ['start', 'cancel'],
  cancelled: ['retry'],
  completed: ['retry'],
  failed: ['retry', 'retry-from-node'],
  timeout: ['retry', 'cancel'],
  waiting: ['resume', 'cancel'],
  retrying: ['stop', 'cancel'],
  partial: ['resume', 'stop', 'cancel', 'execute-partial']
});
/**
 * Execution State Manager
 *
 * Manages execution state transitions, checkpoints, and execution flow control.
 */
export class ExecutionStateManager extends EventEmitter {
  executions =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[2]++, new Map());
  checkpoints =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[3]++, new Map());
  activeRequests =
  /* istanbul ignore next */
  (cov_7mukgb8g9().s[4]++, new Map());
  constructor() {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[0]++;
    cov_7mukgb8g9().s[5]++;
    super();
  }
  /**
   * Initialize execution tracking
   */
  initializeExecution(execution, config =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[1]++;
    const enhancedExecution =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[6]++, {
      ...execution,
      enhancedState: this.mapN8nStatusToExecutionState(execution.status),
      priority: 'normal',
      nodeStates: [],
      checkpoints: [],
      controlConfig: {
        maxExecutionTime: 3600000,
        // 1 hour default
        maxExecutionRetries: 3,
        defaultRetryStrategy: 'exponential',
        retryDelay: {
          initial: 1000,
          multiplier: 2,
          maximum: 30000
        },
        enableCheckpoints: true,
        checkpointInterval: 5,
        allowPartialExecution: true,
        ...config
      },
      progress: {
        totalNodes:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][0]++, execution.workflowData?.nodes?.length) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[1][1]++, 0),
        completedNodes: 0,
        failedNodes: 0,
        skippedNodes: 0,
        percentComplete: 0
      },
      metrics: {
        nodeExecutionTimes: {}
      }
    });
    // Initialize node states if workflow data is available
    /* istanbul ignore next */
    cov_7mukgb8g9().s[7]++;
    if (execution.workflowData?.nodes) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[2][0]++;
      cov_7mukgb8g9().s[8]++;
      enhancedExecution.nodeStates = execution.workflowData.nodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[2]++;
        cov_7mukgb8g9().s[9]++;
        return this.createNodeExecutionState(node);
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[2][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[10]++, {
      execution: enhancedExecution,
      config: enhancedExecution.controlConfig,
      monitoring: {
        enableRealTimeMonitoring: true,
        monitoringInterval: 5000,
        metricsToCollect: ['cpu', 'memory', 'duration'],
        alertThresholds: {
          executionTime:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][0]++, config.maxExecutionTime) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[3][1]++, 3600000),
          memoryUsage: 1024 * 1024 * 1024,
          // 1GB
          cpuUsage: 80,
          errorRate: 10
        },
        notifications: {
          onFailure: true,
          onTimeout: true,
          onCompletion: false,
          onThresholdExceeded: true
        }
      },
      history: [{
        timestamp: new Date().toISOString(),
        state: enhancedExecution.enhancedState,
        event: 'started',
        description: 'Execution tracking initialized'
      }],
      activeRequests: [],
      availableActions:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][0]++, STATE_ACTIONS[enhancedExecution.enhancedState]) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[4][1]++, [])
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[11]++;
    this.executions.set(execution.id, context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[12]++;
    this.emit('executionInitialized', enhancedExecution);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[13]++;
    return enhancedExecution;
  }
  /**
   * Update execution state
   */
  updateExecutionState(executionId, newState, metadata) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[3]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[14]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[15]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[5][0]++;
      cov_7mukgb8g9().s[16]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[5][1]++;
    }
    const currentState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[17]++, context.execution.enhancedState);
    // Validate state transition
    /* istanbul ignore next */
    cov_7mukgb8g9().s[18]++;
    if (!this.isValidStateTransition(currentState, newState)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[6][0]++;
      cov_7mukgb8g9().s[19]++;
      this.emit('invalidStateTransition', {
        executionId,
        from: currentState,
        to: newState
      });
      /* istanbul ignore next */
      cov_7mukgb8g9().s[20]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[6][1]++;
    }
    // Update state
    const previousState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[21]++, context.execution.enhancedState);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[22]++;
    context.execution.enhancedState = newState;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[23]++;
    context.availableActions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][0]++, STATE_ACTIONS[newState]) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[7][1]++, []);
    // Add history entry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[24]++;
    context.history.push({
      timestamp: new Date().toISOString(),
      state: newState,
      event: this.getEventTypeFromStateTransition(previousState, newState),
      description: `State changed from ${previousState} to ${newState}`,
      metadata
    });
    // Update progress
    /* istanbul ignore next */
    cov_7mukgb8g9().s[25]++;
    this.updateExecutionProgress(context);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[26]++;
    this.emit('stateChanged', {
      executionId,
      previousState,
      newState,
      context
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[27]++;
    return true;
  }
  /**
   * Create execution checkpoint
   */
  createCheckpoint(executionId, description, metadata =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[8][0]++, {})) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[4]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[28]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[29]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[9][0]++;
      cov_7mukgb8g9().s[30]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[9][1]++;
    }
    const checkpointId =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[31]++, `checkpoint_${executionId}_${Date.now()}`);
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[32]++, {
      checkpointId,
      executionId,
      timestamp: new Date().toISOString(),
      description,
      completedNodes: context.execution.nodeStates.filter(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[5]++;
        cov_7mukgb8g9().s[33]++;
        return node.state === 'completed';
      }).map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[6]++;
        cov_7mukgb8g9().s[34]++;
        return node.nodeId;
      }),
      executionState: {
        ...context.execution
      },
      nodeStates: [...context.execution.nodeStates],
      metadata
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[35]++;
    this.checkpoints.set(checkpointId, checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[36]++;
    context.execution.checkpoints.push(checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[37]++;
    this.emit('checkpointCreated', checkpoint);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[38]++;
    return checkpoint;
  }
  /**
   * Restore execution from checkpoint
   */
  restoreFromCheckpoint(checkpointId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[7]++;
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[39]++, this.checkpoints.get(checkpointId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[40]++;
    if (!checkpoint) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[10][0]++;
      cov_7mukgb8g9().s[41]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[10][1]++;
    }
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[42]++, this.executions.get(checkpoint.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[43]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[11][0]++;
      cov_7mukgb8g9().s[44]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[11][1]++;
    }
    // Restore node states
    cov_7mukgb8g9().s[45]++;
    context.execution.nodeStates = [...checkpoint.nodeStates];
    // Reset nodes that were running or failed to pending
    /* istanbul ignore next */
    cov_7mukgb8g9().s[46]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[8]++;
      cov_7mukgb8g9().s[47]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][0]++, node.state === 'running') ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[13][1]++, node.state === 'failed')) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[12][0]++;
        cov_7mukgb8g9().s[48]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[49]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[50]++;
        node.error = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[12][1]++;
      }
    });
    // Update execution state
    /* istanbul ignore next */
    cov_7mukgb8g9().s[51]++;
    this.updateExecutionState(checkpoint.executionId, 'pending', {
      restoredFromCheckpoint: checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[52]++;
    this.emit('checkpointRestored', {
      executionId: checkpoint.executionId,
      checkpointId
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[53]++;
    return true;
  }
  /**
   * Calculate retry delay based on strategy
   */
  calculateRetryDelay(strategy, attemptCount, config) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[9]++;
    const retryConfig =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[54]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][0]++, config.retryDelay) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[14][1]++, {
      initial: 1000,
      multiplier: 2,
      maximum: 30000
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[55]++;
    switch (strategy) {
      case 'immediate':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][0]++;
        cov_7mukgb8g9().s[56]++;
        return 0;
      case 'linear':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][1]++;
        cov_7mukgb8g9().s[57]++;
        return Math.min(retryConfig.initial * attemptCount, retryConfig.maximum);
      case 'exponential':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][2]++;
        cov_7mukgb8g9().s[58]++;
        return Math.min(retryConfig.initial * Math.pow(retryConfig.multiplier, attemptCount - 1), retryConfig.maximum);
      case 'custom':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][3]++;
        cov_7mukgb8g9().s[59]++;
        // Custom strategies can be implemented by overriding this method
        return retryConfig.initial;
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[15][4]++;
        cov_7mukgb8g9().s[60]++;
        return retryConfig.initial;
    }
  }
  /**
   * Check if execution can be retried
   */
  canRetryExecution(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[10]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[61]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[62]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[16][0]++;
      cov_7mukgb8g9().s[63]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[16][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[64]++, context);
    const retryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[65]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][0]++, execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[17][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[66]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][0]++, execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[18][1]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[67]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[19][0]++, ['failed', 'timeout', 'cancelled'].includes(execution.enhancedState)) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[19][1]++, retryCount < maxRetries);
  }
  /**
   * Check if node can be retried
   */
  canRetryNode(executionId, nodeId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[11]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[68]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[69]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[20][0]++;
      cov_7mukgb8g9().s[70]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[20][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[71]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[12]++;
      cov_7mukgb8g9().s[72]++;
      return n.nodeId === nodeId;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[73]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[21][0]++;
      cov_7mukgb8g9().s[74]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[21][1]++;
    }
    cov_7mukgb8g9().s[75]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[22][0]++, nodeState.state === 'failed') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][1]++, nodeState.canRetry) &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[22][2]++, nodeState.retryCount < nodeState.maxRetries);
  }
  /**
   * Get execution analytics
   */
  getExecutionAnalytics(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[13]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[76]++, this.executions.get(executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[77]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[23][0]++;
      cov_7mukgb8g9().s[78]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[23][1]++;
    }
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[79]++, context);
    const completedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[80]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[14]++;
      cov_7mukgb8g9().s[81]++;
      return n.state === 'completed';
    }));
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[82]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[15]++;
      cov_7mukgb8g9().s[83]++;
      return n.state === 'failed';
    }));
    // Calculate performance metrics
    const nodeExecutionTimes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[84]++, {});
    let totalDuration =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[85]++, 0);
    const memoryPeak =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[86]++, 0);
    const cpuAverage =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[87]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[88]++;
    completedNodes.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[16]++;
      cov_7mukgb8g9().s[89]++;
      if (node.duration) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[24][0]++;
        cov_7mukgb8g9().s[90]++;
        nodeExecutionTimes[node.nodeId] = node.duration;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[91]++;
        totalDuration += node.duration;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[24][1]++;
      }
    });
    // Find critical path (longest execution path)
    const criticalPath =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[92]++, this.calculateCriticalPath(execution.nodeStates));
    // Identify bottlenecks
    const bottlenecks =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[93]++, completedNodes.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[17]++;
      cov_7mukgb8g9().s[94]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[25][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[25][1]++, node.duration > 5000);
    }) // Nodes taking > 5 seconds
    .sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[18]++;
      cov_7mukgb8g9().s[95]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[26][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[27][1]++, 0));
    }).slice(0, 5).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[19]++;
      cov_7mukgb8g9().s[96]++;
      return {
        nodeId: node.nodeId,
        duration:
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][0]++, node.duration) ||
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[28][1]++, 0),
        type: 'cpu' // Could be enhanced to detect actual bottleneck type
      };
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[97]++;
    return {
      executionId,
      timestamp: new Date().toISOString(),
      performance: {
        totalDuration,
        nodeExecutionTimes,
        memoryPeak,
        cpuAverage
      },
      flow: {
        criticalPath,
        parallelNodes: [],
        // Could be calculated from workflow connections
        bottlenecks
      },
      errors: failedNodes.map(node => {
        /* istanbul ignore next */
        cov_7mukgb8g9().f[20]++;
        cov_7mukgb8g9().s[98]++;
        return {
          nodeId: node.nodeId,
          errorType:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][0]++, node.error?.type) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[29][1]++, 'unknown'),
          errorMessage:
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][0]++, node.error?.message) ||
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[30][1]++, 'Unknown error'),
          retryCount: node.retryCount,
          resolution: node.retryCount < node.maxRetries ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][0]++, 'retry') :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[31][1]++, 'manual')
        };
      }),
      optimizations: this.generateOptimizationSuggestions(execution)
    };
  }
  /**
   * Process execution control request
   */
  async processControlRequest(request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[21]++;
    const context =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[99]++, this.executions.get(request.executionId));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[100]++;
    if (!context) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[32][0]++;
      cov_7mukgb8g9().s[101]++;
      return {
        success: false,
        message: `Execution ${request.executionId} not found`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'EXECUTION_NOT_FOUND',
          message: 'The specified execution ID was not found'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[32][1]++;
    }
    // Check if action is allowed in current state
    cov_7mukgb8g9().s[102]++;
    if (!context.availableActions.includes(request.action)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[33][0]++;
      cov_7mukgb8g9().s[103]++;
      return {
        success: false,
        message: `Action ${request.action} not allowed in state ${context.execution.enhancedState}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'INVALID_ACTION',
          message: `Action not allowed in current state`,
          details: {
            currentState: context.execution.enhancedState,
            allowedActions: context.availableActions
          }
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[33][1]++;
    }
    // Add request to active requests
    cov_7mukgb8g9().s[104]++;
    if (!this.activeRequests.has(request.executionId)) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[34][0]++;
      cov_7mukgb8g9().s[105]++;
      this.activeRequests.set(request.executionId, []);
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[34][1]++;
    }
    cov_7mukgb8g9().s[106]++;
    this.activeRequests.get(request.executionId).push(request);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[107]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[108]++, await this.executeControlAction(context, request));
      // Remove request from active requests
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[109]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[35][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[110]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[111]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[36][0]++;
        cov_7mukgb8g9().s[112]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[36][1]++;
      }
      cov_7mukgb8g9().s[113]++;
      return response;
    } catch (error) {
      // Remove request from active requests on error
      const activeReqs =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[114]++,
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][0]++, this.activeRequests.get(request.executionId)) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[37][1]++, []));
      const index =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[115]++, activeReqs.indexOf(request));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[116]++;
      if (index > -1) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[38][0]++;
        cov_7mukgb8g9().s[117]++;
        activeReqs.splice(index, 1);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[38][1]++;
      }
      cov_7mukgb8g9().s[118]++;
      return {
        success: false,
        message: `Failed to execute action: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_7mukgb8g9().b[39][1]++, 'Unknown error')}`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'ACTION_EXECUTION_FAILED',
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][0]++, error.message) :
          /* istanbul ignore next */
          (cov_7mukgb8g9().b[40][1]++, 'Unknown error')
        }
      };
    }
  }
  /**
   * Get execution context
   */
  getExecutionContext(executionId) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[22]++;
    cov_7mukgb8g9().s[119]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[41][0]++, this.executions.get(executionId)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[41][1]++, null);
  }
  /**
   * Clean up completed or old executions
   */
  cleanup(olderThanMs =
  /* istanbul ignore next */
  (cov_7mukgb8g9().b[42][0]++, 24 * 60 * 60 * 1000)) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[23]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[120]++, Date.now() - olderThanMs);
    let cleaned =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[121]++, 0);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[122]++;
    for (const [executionId, context] of this.executions.entries()) {
      const executionTime =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[123]++, new Date(context.execution.startedAt).getTime());
      const isCompleted =
      /* istanbul ignore next */
      (cov_7mukgb8g9().s[124]++, ['completed', 'failed', 'cancelled'].includes(context.execution.enhancedState));
      /* istanbul ignore next */
      cov_7mukgb8g9().s[125]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][0]++, isCompleted) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[44][1]++, executionTime < cutoffTime)) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[43][0]++;
        cov_7mukgb8g9().s[126]++;
        this.executions.delete(executionId);
        /* istanbul ignore next */
        cov_7mukgb8g9().s[127]++;
        this.activeRequests.delete(executionId);
        // Clean up associated checkpoints
        /* istanbul ignore next */
        cov_7mukgb8g9().s[128]++;
        context.execution.checkpoints.forEach(checkpoint => {
          /* istanbul ignore next */
          cov_7mukgb8g9().f[24]++;
          cov_7mukgb8g9().s[129]++;
          this.checkpoints.delete(checkpoint.checkpointId);
        });
        /* istanbul ignore next */
        cov_7mukgb8g9().s[130]++;
        cleaned++;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[43][1]++;
      }
    }
    /* istanbul ignore next */
    cov_7mukgb8g9().s[131]++;
    this.emit('cleanupCompleted', {
      cleanedExecutions: cleaned
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[132]++;
    return cleaned;
  }
  // Private helper methods
  mapN8nStatusToExecutionState(status) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[25]++;
    cov_7mukgb8g9().s[133]++;
    switch (status) {
      case 'running':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][0]++;
        cov_7mukgb8g9().s[134]++;
        return 'running';
      case 'success':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][1]++;
        cov_7mukgb8g9().s[135]++;
        return 'completed';
      case 'error':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][2]++;
        cov_7mukgb8g9().s[136]++;
        return 'failed';
      case 'waiting':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][3]++;
        cov_7mukgb8g9().s[137]++;
        return 'waiting';
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[45][4]++;
        cov_7mukgb8g9().s[138]++;
        return 'pending';
    }
  }
  createNodeExecutionState(node) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[26]++;
    cov_7mukgb8g9().s[139]++;
    return {
      nodeId: node.id,
      nodeName: node.name,
      nodeType: node.type,
      state: 'pending',
      retryCount: 0,
      maxRetries: 3,
      canRetry: true,
      canSkip: !['trigger', 'webhook'].includes(node.type.toLowerCase())
    };
  }
  isValidStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[27]++;
    cov_7mukgb8g9().s[140]++;
    return /* istanbul ignore next */(cov_7mukgb8g9().b[46][0]++, STATE_TRANSITIONS[from]?.includes(to)) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[46][1]++, false);
  }
  getEventTypeFromStateTransition(from, to) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[28]++;
    cov_7mukgb8g9().s[141]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][0]++, from === 'pending') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[48][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[47][0]++;
      cov_7mukgb8g9().s[142]++;
      return 'started';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[47][1]++;
    }
    cov_7mukgb8g9().s[143]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][0]++, from === 'running') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[50][1]++, to === 'paused')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[49][0]++;
      cov_7mukgb8g9().s[144]++;
      return 'paused';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[49][1]++;
    }
    cov_7mukgb8g9().s[145]++;
    if (
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][0]++, from === 'paused') &&
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[52][1]++, to === 'running')) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[51][0]++;
      cov_7mukgb8g9().s[146]++;
      return 'resumed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[51][1]++;
    }
    cov_7mukgb8g9().s[147]++;
    if (to === 'completed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[53][0]++;
      cov_7mukgb8g9().s[148]++;
      return 'completed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[53][1]++;
    }
    cov_7mukgb8g9().s[149]++;
    if (to === 'failed') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[54][0]++;
      cov_7mukgb8g9().s[150]++;
      return 'failed';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[54][1]++;
    }
    cov_7mukgb8g9().s[151]++;
    if (to === 'cancelled') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[55][0]++;
      cov_7mukgb8g9().s[152]++;
      return 'cancelled';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[55][1]++;
    }
    cov_7mukgb8g9().s[153]++;
    if (to === 'retrying') {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[56][0]++;
      cov_7mukgb8g9().s[154]++;
      return 'retried';
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[56][1]++;
    }
    cov_7mukgb8g9().s[155]++;
    return 'started';
  }
  updateExecutionProgress(context) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[29]++;
    const {
      execution
    } =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[156]++, context);
    const totalNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[157]++, execution.nodeStates.length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[158]++;
    if (totalNodes === 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[57][0]++;
      cov_7mukgb8g9().s[159]++;
      execution.progress.percentComplete = 0;
      /* istanbul ignore next */
      cov_7mukgb8g9().s[160]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[57][1]++;
    }
    const completed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[161]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[30]++;
      cov_7mukgb8g9().s[162]++;
      return n.state === 'completed';
    }).length);
    const failed =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[163]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[31]++;
      cov_7mukgb8g9().s[164]++;
      return n.state === 'failed';
    }).length);
    const skipped =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[165]++, execution.nodeStates.filter(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[32]++;
      cov_7mukgb8g9().s[166]++;
      return n.state === 'skipped';
    }).length);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[167]++;
    execution.progress.completedNodes = completed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[168]++;
    execution.progress.failedNodes = failed;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[169]++;
    execution.progress.skippedNodes = skipped;
    /* istanbul ignore next */
    cov_7mukgb8g9().s[170]++;
    execution.progress.percentComplete = Math.round((completed + failed + skipped) / totalNodes * 100);
  }
  calculateCriticalPath(nodeStates) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[33]++;
    cov_7mukgb8g9().s[171]++;
    // Simplified critical path calculation
    // In a real implementation, this would analyze workflow connections
    return nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[34]++;
      cov_7mukgb8g9().s[172]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[58][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[58][1]++, node.duration > 1000);
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[35]++;
      cov_7mukgb8g9().s[173]++;
      return (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][0]++, b.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[59][1]++, 0)) - (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][0]++, a.duration) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[60][1]++, 0));
    }).slice(0, 10).map(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[36]++;
      cov_7mukgb8g9().s[174]++;
      return node.nodeId;
    });
  }
  generateOptimizationSuggestions(execution) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[37]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[175]++, []);
    // Suggest optimizations based on execution patterns
    const longRunningNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[176]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[38]++;
      cov_7mukgb8g9().s[177]++;
      return /* istanbul ignore next */(cov_7mukgb8g9().b[61][0]++, node.duration) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[61][1]++, node.duration > 10000);
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[178]++;
    if (longRunningNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[62][0]++;
      cov_7mukgb8g9().s[179]++;
      suggestions.push({
        type: 'performance',
        description: `${longRunningNodes.length} nodes are taking longer than 10 seconds to execute`,
        estimatedImpact: 'Reducing execution time by 30-50%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[62][1]++;
    }
    const failedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[180]++, execution.nodeStates.filter(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[39]++;
      cov_7mukgb8g9().s[181]++;
      return node.state === 'failed';
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[182]++;
    if (failedNodes.length > 0) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[63][0]++;
      cov_7mukgb8g9().s[183]++;
      suggestions.push({
        type: 'reliability',
        description: 'Consider adding error handling and retry logic for failed nodes',
        estimatedImpact: 'Improving workflow reliability by 60-80%',
        priority: 'high'
      });
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[63][1]++;
    }
    cov_7mukgb8g9().s[184]++;
    return suggestions;
  }
  async executeControlAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[40]++;
    cov_7mukgb8g9().s[185]++;
    switch (request.action) {
      case 'pause':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][0]++;
        cov_7mukgb8g9().s[186]++;
        return this.handlePauseAction(context, request);
      case 'resume':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][1]++;
        cov_7mukgb8g9().s[187]++;
        return this.handleResumeAction(context, request);
      case 'stop':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][2]++;
        cov_7mukgb8g9().s[188]++;
        return this.handleStopAction(context, request);
      case 'cancel':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][3]++;
        cov_7mukgb8g9().s[189]++;
        return this.handleCancelAction(context, request);
      case 'retry':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][4]++;
        cov_7mukgb8g9().s[190]++;
        return this.handleRetryAction(context, request);
      case 'retry-from-node':
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][5]++;
        cov_7mukgb8g9().s[191]++;
        return this.handleRetryFromNodeAction(context, request);
      default:
        /* istanbul ignore next */
        cov_7mukgb8g9().b[64][6]++;
        cov_7mukgb8g9().s[192]++;
        throw new Error(`Unsupported action: ${request.action}`);
    }
  }
  async handlePauseAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[41]++;
    // Create checkpoint before pausing
    const checkpoint =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[193]++, this.createCheckpoint(request.executionId, 'Execution paused by user', {
      pausedBy: request.requestedBy
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[194]++;
    this.updateExecutionState(request.executionId, 'paused');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[195]++;
    return {
      success: true,
      message: 'Execution paused successfully',
      executionState: 'paused',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        checkpointId: checkpoint?.checkpointId
      }
    };
  }
  async handleResumeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[42]++;
    cov_7mukgb8g9().s[196]++;
    this.updateExecutionState(request.executionId, 'running');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[197]++;
    return {
      success: true,
      message: 'Execution resumed successfully',
      executionState: 'running',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleStopAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[43]++;
    cov_7mukgb8g9().s[198]++;
    this.updateExecutionState(request.executionId, 'stopped');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[199]++;
    return {
      success: true,
      message: 'Execution stopped successfully',
      executionState: 'stopped',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleCancelAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[44]++;
    const reason =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[200]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][0]++, request.parameters?.reason) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[65][1]++, 'user-requested'));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[201]++;
    context.execution.cancellation = {
      reason: reason,
      requestedAt: request.requestedAt,
      requestedBy: request.requestedBy,
      cancelledAt: new Date().toISOString()
    };
    /* istanbul ignore next */
    cov_7mukgb8g9().s[202]++;
    this.updateExecutionState(request.executionId, 'cancelled');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[203]++;
    return {
      success: true,
      message: `Execution cancelled successfully (${reason})`,
      executionState: 'cancelled',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString()
    };
  }
  async handleRetryAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[45]++;
    const strategy =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[204]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][0]++, request.parameters?.retryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][1]++, context.execution.controlConfig.defaultRetryStrategy) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[66][2]++, 'exponential'));
    const currentRetryCount =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[205]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][0]++, context.execution.retryInfo?.attemptCount) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[67][1]++, 0));
    const maxRetries =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[206]++,
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][0]++, request.parameters?.maxRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][1]++, context.execution.controlConfig.maxExecutionRetries) ||
    /* istanbul ignore next */
    (cov_7mukgb8g9().b[68][2]++, 3));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[207]++;
    if (currentRetryCount >= maxRetries) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[69][0]++;
      cov_7mukgb8g9().s[208]++;
      return {
        success: false,
        message: `Maximum retry attempts (${maxRetries}) exceeded`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MAX_RETRIES_EXCEEDED',
          message: 'The execution has reached the maximum number of retry attempts'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[69][1]++;
    }
    // Calculate retry delay
    const retryDelay =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[209]++, this.calculateRetryDelay(strategy, currentRetryCount + 1, context.execution.controlConfig));
    // Update retry information
    /* istanbul ignore next */
    cov_7mukgb8g9().s[210]++;
    context.execution.retryInfo = {
      strategy,
      attemptCount: currentRetryCount + 1,
      maxAttempts: maxRetries,
      nextRetryAt: new Date(Date.now() + retryDelay).toISOString(),
      originalExecutionId:
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][0]++, context.execution.retryInfo?.originalExecutionId) ||
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[70][1]++, context.execution.id)
    };
    // Reset node states for retry
    /* istanbul ignore next */
    cov_7mukgb8g9().s[211]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[46]++;
      cov_7mukgb8g9().s[212]++;
      if (node.state === 'failed') {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[71][0]++;
        cov_7mukgb8g9().s[213]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[214]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[215]++;
        node.completedAt = undefined;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[71][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[216]++;
    this.updateExecutionState(request.executionId, 'retrying');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[217]++;
    return {
      success: true,
      message: `Execution retry scheduled (attempt ${currentRetryCount + 1}/${maxRetries})`,
      executionState: 'retrying',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        estimatedCompletion: context.execution.retryInfo.nextRetryAt,
        performanceImpact: {
          estimatedDelay: retryDelay
        }
      }
    };
  }
  async handleRetryFromNodeAction(context, request) {
    /* istanbul ignore next */
    cov_7mukgb8g9().f[47]++;
    const startFromNode =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[218]++, request.parameters?.startFromNode);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[219]++;
    if (!startFromNode) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[72][0]++;
      cov_7mukgb8g9().s[220]++;
      return {
        success: false,
        message: 'startFromNode parameter is required for retry-from-node action',
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'MISSING_PARAMETER',
          message: 'The startFromNode parameter is required'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[72][1]++;
    }
    const nodeState =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[221]++, context.execution.nodeStates.find(n => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[48]++;
      cov_7mukgb8g9().s[222]++;
      return n.nodeId === startFromNode;
    }));
    /* istanbul ignore next */
    cov_7mukgb8g9().s[223]++;
    if (!nodeState) {
      /* istanbul ignore next */
      cov_7mukgb8g9().b[73][0]++;
      cov_7mukgb8g9().s[224]++;
      return {
        success: false,
        message: `Node ${startFromNode} not found in execution`,
        executionId: request.executionId,
        action: request.action,
        timestamp: new Date().toISOString(),
        error: {
          code: 'NODE_NOT_FOUND',
          message: 'The specified node was not found in the execution'
        }
      };
    } else
    /* istanbul ignore next */
    {
      cov_7mukgb8g9().b[73][1]++;
    }
    // Reset nodes from the specified node onwards
    let resetFromFound =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[225]++, false);
    const affectedNodes =
    /* istanbul ignore next */
    (cov_7mukgb8g9().s[226]++, []);
    /* istanbul ignore next */
    cov_7mukgb8g9().s[227]++;
    context.execution.nodeStates.forEach(node => {
      /* istanbul ignore next */
      cov_7mukgb8g9().f[49]++;
      cov_7mukgb8g9().s[228]++;
      if (node.nodeId === startFromNode) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[74][0]++;
        cov_7mukgb8g9().s[229]++;
        resetFromFound = true;
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[74][1]++;
      }
      cov_7mukgb8g9().s[230]++;
      if (
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][0]++, resetFromFound) &&
      /* istanbul ignore next */
      (cov_7mukgb8g9().b[76][1]++, ['failed', 'completed'].includes(node.state))) {
        /* istanbul ignore next */
        cov_7mukgb8g9().b[75][0]++;
        cov_7mukgb8g9().s[231]++;
        node.state = 'pending';
        /* istanbul ignore next */
        cov_7mukgb8g9().s[232]++;
        node.error = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[233]++;
        node.completedAt = undefined;
        /* istanbul ignore next */
        cov_7mukgb8g9().s[234]++;
        affectedNodes.push(node.nodeId);
      } else
      /* istanbul ignore next */
      {
        cov_7mukgb8g9().b[75][1]++;
      }
    });
    /* istanbul ignore next */
    cov_7mukgb8g9().s[235]++;
    this.updateExecutionState(request.executionId, 'partial');
    /* istanbul ignore next */
    cov_7mukgb8g9().s[236]++;
    return {
      success: true,
      message: `Execution will retry from node ${startFromNode}`,
      executionState: 'partial',
      executionId: request.executionId,
      action: request.action,
      timestamp: new Date().toISOString(),
      data: {
        affectedNodes
      }
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,