{"version":3,"names":["cov_2g9xt8gi7r","actualCoverage","MCPToolParser","parseServerCapabilities","capabilitiesData","f","s","b","Error","capabilities","tools","Array","isArray","map","tool","parseTool","resources","sampling","toolData","name","description","inputSchema","parseToolSchema","schemaData","schema","type","properties","parseSchemaProperties","required","additionalProperties","result","propData","Object","entries","parseToolProperty","prop","isValidPropertyType","property","default","enum","items","minLength","maxLength","pattern","format","minimum","maximum","validTypes","includes","validateTool","errors","warnings","isValidNodeName","push","length","complexity","calculateSchemaComplexity","hasCircularReferences","success","nodeNameRegex","test","countProperties","count","values","visited","Set","checkProperty","path","has","add","subProp","delete","extractToolMetadata","metadata","parameterCount","keys","requiredParameters","tags","extractTags","text","toLowerCase","patterns","api","file","database","communication","analysis","automation","category","keywords","some","keyword"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/mcpParser.ts"],"sourcesContent":["import {\n  MCPTool,\n  MCPToolSchema,\n  MCPToolProperty,\n  MCPServer,\n  MCPCapabilities,\n  ConversionResult,\n} from '../types/mcpTypes.js';\n\nexport class MCPToolParser {\n  /**\n   * Parse and validate MCP server capabilities\n   */\n  parseServerCapabilities(capabilitiesData: unknown): MCPCapabilities {\n    if (!capabilitiesData || typeof capabilitiesData !== 'object') {\n      throw new Error('Invalid MCP capabilities data');\n    }\n\n    const capabilities = capabilitiesData as any;\n\n    if (!capabilities.tools || !Array.isArray(capabilities.tools)) {\n      throw new Error('MCP capabilities must include tools array');\n    }\n\n    return {\n      tools: capabilities.tools.map((tool: unknown) => this.parseTool(tool)),\n      resources: capabilities.resources || [],\n      sampling: capabilities.sampling,\n    };\n  }\n\n  /**\n   * Parse individual MCP tool definition\n   */\n  parseTool(toolData: unknown): MCPTool {\n    if (!toolData || typeof toolData !== 'object') {\n      throw new Error('Invalid MCP tool data');\n    }\n\n    const tool = toolData as any;\n\n    if (!tool.name || typeof tool.name !== 'string') {\n      throw new Error('MCP tool must have a name');\n    }\n\n    if (!tool.description || typeof tool.description !== 'string') {\n      throw new Error('MCP tool must have a description');\n    }\n\n    if (!tool.inputSchema) {\n      throw new Error('MCP tool must have inputSchema');\n    }\n\n    return {\n      name: tool.name,\n      description: tool.description,\n      inputSchema: this.parseToolSchema(tool.inputSchema),\n    };\n  }\n\n  /**\n   * Parse MCP tool input schema\n   */\n  parseToolSchema(schemaData: unknown): MCPToolSchema {\n    if (!schemaData || typeof schemaData !== 'object') {\n      throw new Error('Invalid MCP tool schema');\n    }\n\n    const schema = schemaData as any;\n\n    if (schema.type !== 'object') {\n      throw new Error('MCP tool schema must be of type \"object\"');\n    }\n\n    if (!schema.properties || typeof schema.properties !== 'object') {\n      throw new Error('MCP tool schema must have properties');\n    }\n\n    return {\n      type: 'object',\n      properties: this.parseSchemaProperties(schema.properties),\n      required: Array.isArray(schema.required) ? schema.required : [],\n      additionalProperties: schema.additionalProperties !== false,\n    };\n  }\n\n  /**\n   * Parse schema properties recursively\n   */\n  private parseSchemaProperties(\n    properties: Record<string, unknown>\n  ): Record<string, MCPToolProperty> {\n    const result: Record<string, MCPToolProperty> = {};\n\n    for (const [name, propData] of Object.entries(properties)) {\n      result[name] = this.parseToolProperty(propData);\n    }\n\n    return result;\n  }\n\n  /**\n   * Parse individual tool property\n   */\n  private parseToolProperty(propData: unknown): MCPToolProperty {\n    if (!propData || typeof propData !== 'object') {\n      throw new Error('Invalid MCP tool property');\n    }\n\n    const prop = propData as any;\n\n    if (!prop.type || !this.isValidPropertyType(prop.type)) {\n      throw new Error(`Invalid MCP property type: ${prop.type}`);\n    }\n\n    const property: MCPToolProperty = {\n      type: prop.type,\n      description: prop.description,\n      default: prop.default,\n    };\n\n    // Handle enum values\n    if (prop.enum && Array.isArray(prop.enum)) {\n      property.enum = prop.enum;\n    }\n\n    // Handle array items\n    if (prop.type === 'array' && prop.items) {\n      property.items = this.parseToolProperty(prop.items);\n    }\n\n    // Handle object properties\n    if (prop.type === 'object' && prop.properties) {\n      property.properties = this.parseSchemaProperties(prop.properties);\n    }\n\n    // Handle string constraints\n    if (prop.type === 'string') {\n      if (typeof prop.minLength === 'number') property.minLength = prop.minLength;\n      if (typeof prop.maxLength === 'number') property.maxLength = prop.maxLength;\n      if (typeof prop.pattern === 'string') property.pattern = prop.pattern;\n      if (typeof prop.format === 'string') property.format = prop.format;\n    }\n\n    // Handle number constraints\n    if (prop.type === 'number' || prop.type === 'integer') {\n      if (typeof prop.minimum === 'number') property.minimum = prop.minimum;\n      if (typeof prop.maximum === 'number') property.maximum = prop.maximum;\n    }\n\n    return property;\n  }\n\n  /**\n   * Validate property type\n   */\n  private isValidPropertyType(type: unknown): type is MCPToolProperty['type'] {\n    const validTypes = ['string', 'number', 'integer', 'boolean', 'array', 'object'];\n    return typeof type === 'string' && validTypes.includes(type);\n  }\n\n  /**\n   * Validate parsed tool against MCP specification\n   */\n  validateTool(tool: MCPTool): ConversionResult {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // Validate tool name\n    if (!this.isValidNodeName(tool.name)) {\n      errors.push(\n        `Invalid tool name \"${tool.name}\". Must contain only alphanumeric characters, underscores, and hyphens.`\n      );\n    }\n\n    // Validate description\n    if (!tool.description || tool.description.length < 10) {\n      warnings.push(\n        'Tool description should be at least 10 characters long for better user experience'\n      );\n    }\n\n    // Validate schema complexity\n    const complexity = this.calculateSchemaComplexity(tool.inputSchema);\n    if (complexity > 50) {\n      warnings.push(\n        'Tool schema is very complex. Consider simplifying for better user experience.'\n      );\n    }\n\n    // Check for circular references\n    if (this.hasCircularReferences(tool.inputSchema)) {\n      errors.push('Tool schema contains circular references which are not supported');\n    }\n\n    return {\n      success: errors.length === 0,\n      errors,\n      warnings,\n    };\n  }\n\n  /**\n   * Check if tool name is valid for n8n node names\n   */\n  private isValidNodeName(name: string): boolean {\n    // n8n node names must be alphanumeric with underscores and hyphens\n    const nodeNameRegex = /^[a-zA-Z][a-zA-Z0-9_-]*$/;\n    return nodeNameRegex.test(name) && name.length >= 2 && name.length <= 50;\n  }\n\n  /**\n   * Calculate schema complexity score\n   */\n  private calculateSchemaComplexity(schema: MCPToolSchema): number {\n    let complexity = 0;\n\n    const countProperties = (properties: Record<string, MCPToolProperty>): number => {\n      let count = 0;\n      for (const prop of Object.values(properties)) {\n        count += 1;\n        if (prop.type === 'object' && prop.properties) {\n          count += countProperties(prop.properties);\n        }\n        if (prop.type === 'array' && prop.items?.type === 'object' && prop.items.properties) {\n          count += countProperties(prop.items.properties);\n        }\n      }\n      return count;\n    };\n\n    complexity = countProperties(schema.properties);\n    return complexity;\n  }\n\n  /**\n   * Check for circular references in schema\n   */\n  private hasCircularReferences(schema: MCPToolSchema, visited = new Set<string>()): boolean {\n    const checkProperty = (prop: MCPToolProperty, path: string): boolean => {\n      if (visited.has(path)) {\n        return true;\n      }\n\n      visited.add(path);\n\n      if (prop.type === 'object' && prop.properties) {\n        for (const [name, subProp] of Object.entries(prop.properties)) {\n          if (checkProperty(subProp, `${path}.${name}`)) {\n            return true;\n          }\n        }\n      }\n\n      if (prop.type === 'array' && prop.items) {\n        if (checkProperty(prop.items, `${path}[]`)) {\n          return true;\n        }\n      }\n\n      visited.delete(path);\n      return false;\n    };\n\n    for (const [name, prop] of Object.entries(schema.properties)) {\n      if (checkProperty(prop, name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Extract tool metadata for indexing and search\n   */\n  extractToolMetadata(tool: MCPTool) {\n    const metadata = {\n      name: tool.name,\n      description: tool.description,\n      parameterCount: Object.keys(tool.inputSchema.properties).length,\n      requiredParameters: tool.inputSchema.required?.length || 0,\n      complexity: this.calculateSchemaComplexity(tool.inputSchema),\n      tags: this.extractTags(tool),\n    };\n\n    return metadata;\n  }\n\n  /**\n   * Extract semantic tags from tool for categorization\n   */\n  private extractTags(tool: MCPTool): string[] {\n    const tags: string[] = [];\n    const text = `${tool.name} ${tool.description}`.toLowerCase();\n\n    // Common operation patterns\n    const patterns = {\n      'data-processing': ['process', 'transform', 'convert', 'parse', 'format'],\n      api: ['api', 'request', 'http', 'rest', 'endpoint'],\n      file: ['file', 'document', 'upload', 'download', 'attachment'],\n      database: ['database', 'query', 'sql', 'data', 'record'],\n      communication: ['email', 'message', 'notification', 'send', 'receive'],\n      analysis: ['analyze', 'calculate', 'compute', 'statistics', 'report'],\n      automation: ['automate', 'schedule', 'trigger', 'workflow', 'batch'],\n    };\n\n    for (const [category, keywords] of Object.entries(patterns)) {\n      if (keywords.some(keyword => text.includes(keyword))) {\n        tags.push(category);\n      }\n    }\n\n    return tags;\n  }\n}\n"],"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","ignoreList":[]}