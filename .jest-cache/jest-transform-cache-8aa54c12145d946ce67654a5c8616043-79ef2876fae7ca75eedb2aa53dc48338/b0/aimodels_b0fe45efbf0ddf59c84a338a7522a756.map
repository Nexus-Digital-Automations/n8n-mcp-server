{"version":3,"names":["cov_10i08mjd2e","actualCoverage","z","UserError","ModelSearchSchema","s","object","query","string","optional","provider","enum","default","capability","maxResults","number","min","max","ModelConfigurationSchema","modelId","configuration","record","unknown","ModelComparisonSchema","modelIds","array","criteria","AI_MODELS_DATABASE","openai","id","name","type","capabilities","maxTokens","costPer1kTokens","input","output","speed","quality","description","anthropic","google","local","createAIModelsTools","getClient","server","f","addTool","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","allModels","Object","entries","forEach","models","b","push","filter","model","includes","toLowerCase","slice","length","result","index","inputCost","outputCost","charAt","toUpperCase","toLocaleString","join","error","message","foundModel","find","m","exampleCosts","smallRequest","toFixed","mediumRequest","largeRequest","map","cap","replace","Math","providerModels","some","cheapestInput","reduce","cheapestOutput","speedRanking","sortedBySpeed","sort","a","qualityRanking","sortedByQuality","allCapabilities","Set","flatMap","modelsWithCapability","cheapest","fastest","speedValue","highest_quality","qualityValue","useCase","budget","priority","budgetLimits","low","medium","high","limit","scoredModels","score","totalCost","speedScores","qualityScores","balancedSpeedScores","balancedQualityScores","balancedCostScore","recommendations","ranking","topModel"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI model management\nconst ModelSearchSchema = z.object({\n  query: z.string().optional(),\n  provider: z.enum(['openai', 'anthropic', 'google', 'huggingface', 'local', 'all']).optional().default('all'),\n  capability: z.enum(['text-generation', 'chat', 'completion', 'embedding', 'classification', 'all']).optional().default('all'),\n  maxResults: z.number().min(1).max(100).optional().default(20),\n});\n\nconst ModelConfigurationSchema = z.object({\n  modelId: z.string().min(1, 'Model ID is required'),\n  provider: z.string().min(1, 'Provider is required'),\n  configuration: z.record(z.unknown()),\n});\n\nconst ModelComparisonSchema = z.object({\n  modelIds: z.array(z.string()).min(2, 'At least 2 models required for comparison'),\n  criteria: z.array(z.enum(['cost', 'speed', 'quality', 'capabilities'])).optional().default(['cost', 'speed', 'quality']),\n});\n\n// Model database (in a real implementation, this would be fetched from APIs or databases)\nconst AI_MODELS_DATABASE = {\n  openai: [\n    {\n      id: 'gpt-4-turbo',\n      name: 'GPT-4 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 128000,\n      costPer1kTokens: { input: 0.01, output: 0.03 },\n      speed: 'fast',\n      quality: 'excellent',\n      description: 'Most capable GPT-4 model with 128k context window',\n    },\n    {\n      id: 'gpt-3.5-turbo',\n      name: 'GPT-3.5 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 16385,\n      costPer1kTokens: { input: 0.0015, output: 0.002 },\n      speed: 'very-fast',\n      quality: 'good',\n      description: 'Fast and efficient model for most tasks',\n    },\n  ],\n  anthropic: [\n    {\n      id: 'claude-3-opus',\n      name: 'Claude 3 Opus',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'analysis'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.015, output: 0.075 },\n      speed: 'medium',\n      quality: 'excellent',\n      description: 'Most powerful Claude model with exceptional reasoning',\n    },\n    {\n      id: 'claude-3-sonnet',\n      name: 'Claude 3 Sonnet',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.003, output: 0.015 },\n      speed: 'fast',\n      quality: 'very-good',\n      description: 'Balanced model with good performance and cost efficiency',\n    },\n  ],\n  google: [\n    {\n      id: 'gemini-pro',\n      name: 'Gemini Pro',\n      provider: 'google',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'multimodal'],\n      maxTokens: 32768,\n      costPer1kTokens: { input: 0.00025, output: 0.0005 },\n      speed: 'fast',\n      quality: 'good',\n      description: 'Google\\'s multimodal AI model',\n    },\n  ],\n  local: [\n    {\n      id: 'llama-2-7b',\n      name: 'Llama 2 7B',\n      provider: 'local',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 4096,\n      costPer1kTokens: { input: 0, output: 0 },\n      speed: 'medium',\n      quality: 'good',\n      description: 'Open-source model that can run locally',\n    },\n  ],\n};\n\n// Tool registration function for AI model management tools\nexport function createAIModelsTools(getClient: () => N8nClient | null, server: any) {\n  // List available AI models\n  server.addTool({\n    name: 'list-ai-models',\n    description: 'List available AI models with filtering by provider, capability, and search terms',\n    parameters: ModelSearchSchema,\n    annotations: {\n      title: 'List AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelSearchSchema>) => {\n      try {\n        let allModels: any[] = [];\n        \n        // Collect models from all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          if (args.provider === 'all' || args.provider === provider) {\n            allModels.push(...models);\n          }\n        });\n\n        // Filter by capability\n        if (args.capability !== 'all') {\n          allModels = allModels.filter(model => \n            model.capabilities.includes(args.capability)\n          );\n        }\n\n        // Filter by search query\n        if (args.query) {\n          const query = args.query.toLowerCase();\n          allModels = allModels.filter(model => \n            model.name.toLowerCase().includes(query) ||\n            model.id.toLowerCase().includes(query) ||\n            model.description.toLowerCase().includes(query) ||\n            model.provider.toLowerCase().includes(query)\n          );\n        }\n\n        // Limit results\n        allModels = allModels.slice(0, args.maxResults);\n\n        if (allModels.length === 0) {\n          return `No AI models found matching your criteria:\\n` +\n                 `- Provider: ${args.provider}\\n` +\n                 `- Capability: ${args.capability}\\n` +\n                 `- Query: ${args.query || 'None'}\\n\\n` +\n                 `Try broadening your search criteria.`;\n        }\n\n        let result = `Found ${allModels.length} AI model(s):\\n\\n`;\n\n        allModels.forEach((model, index) => {\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n          \n          result += `**${index + 1}. ${model.name}** (${model.id})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Type: ${model.type}\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Speed: ${model.speed}\\n`;\n          result += `   - Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens (input/output)\\n`;\n          result += `   - Capabilities: ${model.capabilities.join(', ')}\\n`;\n          result += `   - Description: ${model.description}\\n\\n`;\n        });\n\n        result += `**Usage:** Use the model ID (e.g., \"${allModels[0].id}\") when configuring AI nodes in n8n workflows.`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get detailed model information\n  server.addTool({\n    name: 'get-ai-model-info',\n    description: 'Get detailed information about a specific AI model including capabilities, pricing, and configuration options',\n    parameters: z.object({\n      modelId: z.string().min(1, 'Model ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Model Info',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { modelId: string }) => {\n      try {\n        let foundModel: any = null;\n        \n        // Search for the model across all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          const model = models.find(m => m.id === args.modelId);\n          if (model) {\n            foundModel = model;\n          }\n        });\n\n        if (!foundModel) {\n          return `Model \"${args.modelId}\" not found.\\n\\n` +\n                 `Use the \"list-ai-models\" tool to see available models.`;\n        }\n\n        const model = foundModel;\n        const inputCost = model.costPer1kTokens.input;\n        const outputCost = model.costPer1kTokens.output;\n\n        // Calculate cost examples\n        const exampleCosts = {\n          smallRequest: (1000 * inputCost + 500 * outputCost).toFixed(4),\n          mediumRequest: (5000 * inputCost + 2000 * outputCost).toFixed(4),\n          largeRequest: (20000 * inputCost + 5000 * outputCost).toFixed(4),\n        };\n\n        return `**${model.name}** (${model.id})\\n\\n` +\n               `**Basic Information:**\\n` +\n               `- Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n` +\n               `- Model Type: ${model.type}\\n` +\n               `- Max Context: ${model.maxTokens.toLocaleString()} tokens\\n` +\n               `- Speed Rating: ${model.speed}\\n` +\n               `- Quality Rating: ${model.quality}\\n\\n` +\n               `**Capabilities:**\\n` +\n               model.capabilities.map((cap: string) => `- ${cap.charAt(0).toUpperCase() + cap.slice(1).replace('-', ' ')}`).join('\\n') + '\\n\\n' +\n               `**Pricing:**\\n` +\n               `- Input: $${inputCost} per 1,000 tokens\\n` +\n               `- Output: $${outputCost} per 1,000 tokens\\n\\n` +\n               `**Cost Examples:**\\n` +\n               `- Small request (1k input, 500 output): $${exampleCosts.smallRequest}\\n` +\n               `- Medium request (5k input, 2k output): $${exampleCosts.mediumRequest}\\n` +\n               `- Large request (20k input, 5k output): $${exampleCosts.largeRequest}\\n\\n` +\n               `**Description:**\\n${model.description}\\n\\n` +\n               `**Configuration Example for n8n:**\\n\\`\\`\\`json\\n` +\n               `{\\n` +\n               `  \"model\": \"${model.id}\",\\n` +\n               `  \"temperature\": 0.7,\\n` +\n               `  \"maxTokens\": ${Math.min(4000, model.maxTokens)},\\n` +\n               `  \"provider\": \"${model.provider}\"\\n` +\n               `}\\n\\`\\`\\`\\n\\n` +\n               `**Use Case Recommendations:**\\n` +\n               (model.quality === 'excellent' ? '- Complex reasoning and analysis tasks\\n' : '') +\n               (model.speed === 'very-fast' || model.speed === 'fast' ? '- Real-time applications\\n' : '') +\n               (inputCost < 0.005 ? '- High-volume processing\\n' : '') +\n               (model.maxTokens > 50000 ? '- Long document processing\\n' : '') +\n               (model.capabilities.includes('multimodal') ? '- Image and text processing\\n' : '');\n      } catch (error: any) {\n        throw new UserError(`Failed to get model information: ${error.message}`);\n      }\n    },\n  });\n\n  // Compare AI models\n  server.addTool({\n    name: 'compare-ai-models',\n    description: 'Compare multiple AI models across different criteria like cost, speed, quality, and capabilities',\n    parameters: ModelComparisonSchema,\n    annotations: {\n      title: 'Compare AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelComparisonSchema>) => {\n      try {\n        const models: any[] = [];\n        \n        // Find all requested models\n        args.modelIds.forEach(modelId => {\n          let foundModel: any = null;\n          Object.entries(AI_MODELS_DATABASE).forEach(([provider, providerModels]) => {\n            const model = providerModels.find(m => m.id === modelId);\n            if (model) {\n              foundModel = model;\n            }\n          });\n          \n          if (foundModel) {\n            models.push(foundModel);\n          }\n        });\n\n        if (models.length < 2) {\n          return `Found only ${models.length} model(s) out of ${args.modelIds.length} requested.\\n\\n` +\n                 `Missing models: ${args.modelIds.filter(id => !models.some(m => m.id === id)).join(', ')}\\n\\n` +\n                 `Use \"list-ai-models\" to see available models.`;\n        }\n\n        let result = `**AI Model Comparison** (${models.length} models)\\n\\n`;\n\n        // Create comparison table\n        result += `| Model | Provider | Type | Max Tokens | Speed | Quality |\\n`;\n        result += `|-------|----------|------|------------|--------|----------|\\n`;\n        models.forEach(model => {\n          result += `| ${model.name} | ${model.provider} | ${model.type} | ${model.maxTokens.toLocaleString()} | ${model.speed} | ${model.quality} |\\n`;\n        });\n        result += '\\n';\n\n        // Cost comparison\n        if (args.criteria.includes('cost')) {\n          result += `**Cost Comparison (per 1k tokens):**\\n`;\n          models.forEach(model => {\n            const inputCost = model.costPer1kTokens.input;\n            const outputCost = model.costPer1kTokens.output;\n            result += `- **${model.name}**: $${inputCost} input, $${outputCost} output\\n`;\n          });\n          \n          // Find most cost-effective\n          const cheapestInput = models.reduce((min, model) => \n            model.costPer1kTokens.input < min.costPer1kTokens.input ? model : min\n          );\n          const cheapestOutput = models.reduce((min, model) => \n            model.costPer1kTokens.output < min.costPer1kTokens.output ? model : min\n          );\n          \n          result += `\\n💰 **Most Cost-Effective:**\\n`;\n          result += `- Input: ${cheapestInput.name} ($${cheapestInput.costPer1kTokens.input})\\n`;\n          result += `- Output: ${cheapestOutput.name} ($${cheapestOutput.costPer1kTokens.output})\\n\\n`;\n        }\n\n        // Speed comparison\n        if (args.criteria.includes('speed')) {\n          const speedRanking = {\n            'very-fast': 5,\n            'fast': 4,\n            'medium': 3,\n            'slow': 2,\n            'very-slow': 1\n          };\n          \n          const sortedBySpeed = models.sort((a, b) => \n            (speedRanking[b.speed as keyof typeof speedRanking] || 3) - \n            (speedRanking[a.speed as keyof typeof speedRanking] || 3)\n          );\n          \n          result += `**Speed Ranking:**\\n`;\n          sortedBySpeed.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.speed}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Quality comparison\n        if (args.criteria.includes('quality')) {\n          const qualityRanking = {\n            'excellent': 5,\n            'very-good': 4,\n            'good': 3,\n            'fair': 2,\n            'poor': 1\n          };\n          \n          const sortedByQuality = models.sort((a, b) => \n            (qualityRanking[b.quality as keyof typeof qualityRanking] || 3) - \n            (qualityRanking[a.quality as keyof typeof qualityRanking] || 3)\n          );\n          \n          result += `**Quality Ranking:**\\n`;\n          sortedByQuality.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.quality}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Capabilities comparison\n        if (args.criteria.includes('capabilities')) {\n          result += `**Capabilities Comparison:**\\n`;\n          const allCapabilities = [...new Set(models.flatMap(m => m.capabilities))];\n          \n          allCapabilities.forEach(capability => {\n            const modelsWithCapability = models.filter(m => m.capabilities.includes(capability));\n            result += `- **${capability.charAt(0).toUpperCase() + capability.slice(1).replace('-', ' ')}**: `;\n            result += modelsWithCapability.map(m => m.name).join(', ') + '\\n';\n          });\n          result += '\\n';\n        }\n\n        // Recommendations\n        result += `**Recommendations:**\\n`;\n        const cheapest = models.reduce((min, model) => \n          (model.costPer1kTokens.input + model.costPer1kTokens.output) < \n          (min.costPer1kTokens.input + min.costPer1kTokens.output) ? model : min\n        );\n        const fastest = models.reduce((max, model) => {\n          const speedValue = { 'very-fast': 5, 'fast': 4, 'medium': 3, 'slow': 2, 'very-slow': 1 };\n          return (speedValue[model.speed as keyof typeof speedValue] || 3) > \n                 (speedValue[max.speed as keyof typeof speedValue] || 3) ? model : max;\n        });\n        const highest_quality = models.reduce((max, model) => {\n          const qualityValue = { 'excellent': 5, 'very-good': 4, 'good': 3, 'fair': 2, 'poor': 1 };\n          return (qualityValue[model.quality as keyof typeof qualityValue] || 3) > \n                 (qualityValue[max.quality as keyof typeof qualityValue] || 3) ? model : max;\n        });\n\n        result += `- **For budget-conscious projects**: ${cheapest.name}\\n`;\n        result += `- **For real-time applications**: ${fastest.name}\\n`;\n        result += `- **For complex reasoning**: ${highest_quality.name}\\n`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to compare AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get model recommendations\n  server.addTool({\n    name: 'recommend-ai-model',\n    description: 'Get AI model recommendations based on use case, budget, and performance requirements',\n    parameters: z.object({\n      useCase: z.enum([\n        'chatbot', 'content-generation', 'code-generation', 'data-analysis',\n        'translation', 'summarization', 'classification', 'general-purpose'\n      ]),\n      budget: z.enum(['low', 'medium', 'high', 'unlimited']).optional().default('medium'),\n      priority: z.enum(['cost', 'speed', 'quality', 'balanced']).optional().default('balanced'),\n      maxTokens: z.number().min(1000).max(200000).optional(),\n    }),\n    annotations: {\n      title: 'Recommend AI Model',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { \n      useCase: string; \n      budget?: string; \n      priority?: string; \n      maxTokens?: number; \n    }) => {\n      try {\n        let allModels: any[] = [];\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          allModels.push(...models);\n        });\n\n        // Filter by token requirements\n        if (args.maxTokens) {\n          allModels = allModels.filter(model => model.maxTokens >= args.maxTokens!);\n        }\n\n        // Filter by budget\n        if (args.budget !== 'unlimited') {\n          const budgetLimits = {\n            low: 0.005,    // max $0.005 per 1k tokens\n            medium: 0.02,  // max $0.02 per 1k tokens\n            high: 0.1,     // max $0.1 per 1k tokens\n          };\n          \n          const limit = budgetLimits[args.budget as keyof typeof budgetLimits] || 0.02;\n          allModels = allModels.filter(model => \n            model.costPer1kTokens.input <= limit && model.costPer1kTokens.output <= limit * 2\n          );\n        }\n\n        // Score models based on priority\n        const scoredModels = allModels.map(model => {\n          let score = 0;\n          \n          // Use case specific scoring\n          switch (args.useCase) {\n            case 'chatbot':\n              if (model.capabilities.includes('chat')) score += 30;\n              if (model.speed === 'fast' || model.speed === 'very-fast') score += 20;\n              break;\n            case 'content-generation':\n              if (model.quality === 'excellent') score += 30;\n              if (model.maxTokens > 32000) score += 20;\n              break;\n            case 'code-generation':\n              if (model.capabilities.includes('completion')) score += 30;\n              if (model.quality === 'excellent') score += 20;\n              break;\n            case 'data-analysis':\n              if (model.quality === 'excellent') score += 40;\n              if (model.maxTokens > 50000) score += 10;\n              break;\n            default:\n              score += 20; // Base score for general use\n          }\n\n          // Priority-based scoring\n          switch (args.priority) {\n            case 'cost':\n              const totalCost = model.costPer1kTokens.input + model.costPer1kTokens.output;\n              score += Math.max(0, 50 - totalCost * 1000); // Lower cost = higher score\n              break;\n            case 'speed':\n              const speedScores = { 'very-fast': 50, 'fast': 40, 'medium': 30, 'slow': 20, 'very-slow': 10 };\n              score += speedScores[model.speed as keyof typeof speedScores] || 25;\n              break;\n            case 'quality':\n              const qualityScores = { 'excellent': 50, 'very-good': 40, 'good': 30, 'fair': 20, 'poor': 10 };\n              score += qualityScores[model.quality as keyof typeof qualityScores] || 25;\n              break;\n            case 'balanced':\n              // Balanced scoring\n              const balancedSpeedScores = { 'very-fast': 20, 'fast': 18, 'medium': 15, 'slow': 10, 'very-slow': 5 };\n              const balancedQualityScores = { 'excellent': 20, 'very-good': 18, 'good': 15, 'fair': 10, 'poor': 5 };\n              const balancedCostScore = Math.max(0, 10 - (model.costPer1kTokens.input + model.costPer1kTokens.output) * 100);\n              score += (balancedSpeedScores[model.speed as keyof typeof balancedSpeedScores] || 10) +\n                      (balancedQualityScores[model.quality as keyof typeof balancedQualityScores] || 10) +\n                      balancedCostScore;\n              break;\n          }\n\n          return { ...model, score };\n        });\n\n        // Sort by score and take top 3\n        const recommendations = scoredModels\n          .sort((a, b) => b.score - a.score)\n          .slice(0, 3);\n\n        if (recommendations.length === 0) {\n          return `No AI models found matching your criteria:\\n` +\n                 `- Use Case: ${args.useCase}\\n` +\n                 `- Budget: ${args.budget}\\n` +\n                 `- Priority: ${args.priority}\\n` +\n                 `- Max Tokens: ${args.maxTokens || 'No limit'}\\n\\n` +\n                 `Try adjusting your requirements or budget.`;\n        }\n\n        let result = `**AI Model Recommendations for ${args.useCase}**\\n\\n`;\n        result += `**Your Requirements:**\\n`;\n        result += `- Use Case: ${args.useCase}\\n`;\n        result += `- Budget: ${args.budget}\\n`;\n        result += `- Priority: ${args.priority}\\n`;\n        result += `- Max Tokens: ${args.maxTokens?.toLocaleString() || 'No specific requirement'}\\n\\n`;\n\n        recommendations.forEach((model, index) => {\n          const ranking = ['🥇', '🥈', '🥉'][index] || `${index + 1}.`;\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n          \n          result += `${ranking} **${model.name}** (Score: ${model.score.toFixed(0)})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Speed: ${model.speed}, Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Best For: ${model.description}\\n\\n`;\n        });\n\n        const topModel = recommendations[0];\n        result += `**Quick Start with ${topModel.name}:**\\n`;\n        result += `\\`\\`\\`json\\n`;\n        result += `{\\n`;\n        result += `  \"model\": \"${topModel.id}\",\\n`;\n        result += `  \"temperature\": 0.7,\\n`;\n        result += `  \"maxTokens\": ${Math.min(4000, topModel.maxTokens)}\\n`;\n        result += `}\\n`;\n        result += `\\`\\`\\``;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to get model recommendations: ${error.message}`);\n      }\n    },\n  });\n}"],"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","ignoreList":[]}