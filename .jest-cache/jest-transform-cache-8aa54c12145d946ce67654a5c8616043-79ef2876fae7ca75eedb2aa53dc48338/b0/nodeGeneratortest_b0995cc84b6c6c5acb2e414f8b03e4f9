621db7c9f8f3b8366244c09111c552c8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const nodeGenerator_js_1 = require("../../utils/nodeGenerator.js");
const testData_js_1 = require("../testData.js");
(0, globals_1.describe)('N8nNodeGenerator', () => {
    let generator;
    (0, globals_1.beforeEach)(() => {
        generator = new nodeGenerator_js_1.N8nNodeGenerator();
    });
    (0, globals_1.describe)('generateNodeDefinition', () => {
        (0, globals_1.it)('should generate node definition for simple tool', () => {
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition).toBeDefined();
            (0, globals_1.expect)(result.nodeDefinition.displayName).toBe('MCP Simple Test');
            (0, globals_1.expect)(result.nodeDefinition.name).toBe('MCPSimpleTest');
            (0, globals_1.expect)(result.nodeDefinition.description).toBe('A simple test tool for unit testing');
            (0, globals_1.expect)(result.nodeDefinition.icon).toBe('fa:cog');
            (0, globals_1.expect)(result.nodeDefinition.group).toEqual(['transform']);
            (0, globals_1.expect)(result.nodeDefinition.version).toEqual([1]);
        });
        (0, globals_1.it)('should generate node definition for complex tool', () => {
            const complexContext = {
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockComplexTool,
            };
            const result = generator.generateNodeDefinition(complexContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition).toBeDefined();
            (0, globals_1.expect)(result.nodeDefinition.displayName).toBe('MCP Complex Data Processor');
            (0, globals_1.expect)(result.nodeDefinition.name).toBe('MCPComplexDataProcessor');
        });
        (0, globals_1.it)('should generate node definition for enum tool', () => {
            const enumContext = {
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockEnumTool,
            };
            const result = generator.generateNodeDefinition(enumContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition).toBeDefined();
            // Find the priority property
            const properties = result.nodeDefinition.properties;
            const priorityProp = properties.find(p => p.name === 'priority');
            (0, globals_1.expect)(priorityProp).toBeDefined();
            (0, globals_1.expect)(priorityProp.type).toBe('options');
            (0, globals_1.expect)(priorityProp.options).toEqual([
                { name: 'Low', value: 'low' },
                { name: 'Medium', value: 'medium' },
                { name: 'High', value: 'high' },
            ]);
            (0, globals_1.expect)(priorityProp.default).toBe('medium');
        });
        (0, globals_1.it)('should handle custom configuration', () => {
            const customConfig = {
                nodeNamePrefix: 'Custom',
                defaultIcon: 'fa:star',
                defaultGroup: ['custom'],
                credentialName: 'customAuth',
                enableBinaryData: false,
                enableResourceAccess: false,
            };
            const customContext = {
                ...testData_js_1.mockConversionContext,
                config: customConfig,
            };
            const result = generator.generateNodeDefinition(customContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition.displayName).toBe('Custom Simple Test');
            (0, globals_1.expect)(result.nodeDefinition.name).toBe('CustomSimpleTest');
            (0, globals_1.expect)(result.nodeDefinition.icon).toBe('fa:star');
            (0, globals_1.expect)(result.nodeDefinition.group).toEqual(['custom']);
            (0, globals_1.expect)(result.nodeDefinition.credentials[0].name).toBe('customAuth');
        });
        (0, globals_1.it)('should handle missing configuration gracefully', () => {
            const minimalContext = {
                mcpServer: testData_js_1.mockMCPServer,
                tool: testData_js_1.mockSimpleTool,
                config: {},
            };
            const result = generator.generateNodeDefinition(minimalContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition.icon).toBe('fa:cog');
            (0, globals_1.expect)(result.nodeDefinition.group).toEqual(['transform']);
        });
        (0, globals_1.it)('should generate properties correctly', () => {
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            // Find message property
            const messageProp = properties.find(p => p.name === 'message');
            (0, globals_1.expect)(messageProp).toBeDefined();
            (0, globals_1.expect)(messageProp.type).toBe('string');
            (0, globals_1.expect)(messageProp.required).toBe(true);
            (0, globals_1.expect)(messageProp.default).toBe('Hello World');
            (0, globals_1.expect)(messageProp.displayName).toBe('Message');
            // Find count property
            const countProp = properties.find(p => p.name === 'count');
            (0, globals_1.expect)(countProp).toBeDefined();
            (0, globals_1.expect)(countProp.type).toBe('number');
            (0, globals_1.expect)(countProp.required).toBe(false);
        });
        (0, globals_1.it)('should add binary data property when enabled', () => {
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const binaryDataProp = properties.find(p => p.name === 'binaryData');
            (0, globals_1.expect)(binaryDataProp).toBeDefined();
            (0, globals_1.expect)(binaryDataProp.type).toBe('boolean');
            (0, globals_1.expect)(binaryDataProp.default).toBe(false);
        });
        (0, globals_1.it)('should add resource access property when enabled', () => {
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const resourceProp = properties.find(p => p.name === 'enableResources');
            (0, globals_1.expect)(resourceProp).toBeDefined();
            (0, globals_1.expect)(resourceProp.type).toBe('boolean');
            (0, globals_1.expect)(resourceProp.default).toBe(false);
        });
        (0, globals_1.it)('should handle error during generation', () => {
            const invalidContext = {
                ...testData_js_1.mockConversionContext,
                tool: null,
            };
            const result = generator.generateNodeDefinition(invalidContext);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.errors).toBeDefined();
            (0, globals_1.expect)(result.errors.length).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('property type mapping', () => {
        (0, globals_1.it)('should map MCP string to n8n string', () => {
            const stringContext = {
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockStringConstraintsTool,
            };
            const result = generator.generateNodeDefinition(stringContext);
            (0, globals_1.expect)(result.success).toBe(true);
            const emailProp = result.nodeDefinition.properties.find(p => p.name === 'email');
            (0, globals_1.expect)(emailProp.type).toBe('string');
            (0, globals_1.expect)(emailProp.placeholder).toBe('user@example.com');
            const passwordProp = result.nodeDefinition.properties.find(p => p.name === 'password');
            (0, globals_1.expect)(passwordProp.typeOptions).toMatchObject({ password: true });
            const websiteProp = result.nodeDefinition.properties.find(p => p.name === 'website');
            (0, globals_1.expect)(websiteProp.placeholder).toBe('https://example.com');
        });
        (0, globals_1.it)('should map MCP number to n8n number with constraints', () => {
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockComplexTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            // The timeout property is nested in config object, so it becomes JSON
            const configProp = properties.find(p => p.name === 'config');
            (0, globals_1.expect)(configProp.type).toBe('json');
        });
        (0, globals_1.it)('should map MCP array to n8n json', () => {
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockComplexTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const itemsProp = properties.find(p => p.name === 'items');
            (0, globals_1.expect)(itemsProp.type).toBe('json');
            (0, globals_1.expect)(itemsProp.typeOptions).toMatchObject({ rows: 4 });
        });
        (0, globals_1.it)('should map MCP object to n8n json', () => {
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockComplexTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const configProp = properties.find(p => p.name === 'config');
            (0, globals_1.expect)(configProp.type).toBe('json');
            (0, globals_1.expect)(configProp.typeOptions).toMatchObject({ rows: 6 });
        });
        (0, globals_1.it)('should use custom type mapping', () => {
            const customConfig = {
                typeMapping: {
                    string: 'string',
                    number: 'string', // Map numbers to strings
                    integer: 'string',
                    boolean: 'options',
                    array: 'collection',
                    object: 'fixedCollection',
                },
            };
            const customContext = {
                ...testData_js_1.mockConversionContext,
                config: customConfig,
            };
            const result = generator.generateNodeDefinition(customContext);
            (0, globals_1.expect)(result.success).toBe(true);
        });
    });
    (0, globals_1.describe)('node name generation', () => {
        (0, globals_1.it)('should generate valid node names from tool names', () => {
            const testCases = [
                { input: 'simple_test', expected: 'MCPSimpleTest' },
                { input: 'kebab-case-name', expected: 'MCPKebabCaseName' },
                { input: 'UPPERCASE_TOOL', expected: 'MCPUPPERCASETOOL' },
                { input: 'mixed_Case-Tool', expected: 'MCPMixedCaseTool' },
                { input: '123numeric_start', expected: 'MCPn123numericStart' },
                { input: 'special!@#chars', expected: 'MCPSpecialChars' },
            ];
            testCases.forEach(({ input, expected }) => {
                const context = {
                    ...testData_js_1.mockConversionContext,
                    tool: { ...testData_js_1.mockSimpleTool, name: input },
                };
                const result = generator.generateNodeDefinition(context);
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.nodeDefinition.name).toBe(expected);
            });
        });
        (0, globals_1.it)('should generate display names correctly', () => {
            const testCases = [
                { input: 'simple_test', expected: 'MCP Simple Test' },
                { input: 'kebab-case-name', expected: 'MCP Kebab Case Name' },
                { input: 'camelCaseName', expected: 'MCP CamelCaseName' },
            ];
            testCases.forEach(({ input, expected }) => {
                const context = {
                    ...testData_js_1.mockConversionContext,
                    tool: { ...testData_js_1.mockSimpleTool, name: input },
                };
                const result = generator.generateNodeDefinition(context);
                (0, globals_1.expect)(result.success).toBe(true);
                (0, globals_1.expect)(result.nodeDefinition.displayName).toBe(expected);
            });
        });
        (0, globals_1.it)('should handle names without prefix', () => {
            const configWithoutPrefix = {
                nodeNamePrefix: undefined,
            };
            const context = {
                ...testData_js_1.mockConversionContext,
                config: configWithoutPrefix,
            };
            const result = generator.generateNodeDefinition(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition.name).toBe('simpleTest');
            (0, globals_1.expect)(result.nodeDefinition.displayName).toBe('Simple Test');
        });
    });
    (0, globals_1.describe)('validation', () => {
        (0, globals_1.it)('should validate generated node definition', () => {
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.errors).toEqual([]);
            (0, globals_1.expect)(result.warnings).toBeDefined();
        });
        (0, globals_1.it)('should detect invalid display names', () => {
            // Create a tool that would generate invalid display name
            const shortNameTool = {
                ...testData_js_1.mockSimpleTool,
                name: 'ab',
                description: 'Test',
            };
            const context = {
                ...testData_js_1.mockConversionContext,
                tool: shortNameTool,
            };
            const result = generator.generateNodeDefinition(context);
            // Should still succeed but with warnings about short description
            (0, globals_1.expect)(result.success).toBe(true);
        });
        (0, globals_1.it)('should detect duplicate property names', () => {
            // This is more of an edge case since our property generation should prevent duplicates
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            const propertyNames = result.nodeDefinition.properties.map(p => p.name);
            const uniqueNames = new Set(propertyNames);
            (0, globals_1.expect)(propertyNames.length).toBe(uniqueNames.size);
        });
        (0, globals_1.it)('should warn about many properties', () => {
            // Create a tool with many properties
            const manyPropsSchema = {
                type: 'object',
                properties: {},
            };
            // Add 25 properties to trigger warning
            for (let i = 0; i < 25; i++) {
                manyPropsSchema.properties[`prop${i}`] = {
                    type: 'string',
                    description: `Property ${i}`,
                };
            }
            const manyPropsTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: manyPropsSchema,
            };
            const context = {
                ...testData_js_1.mockConversionContext,
                tool: manyPropsTool,
            };
            const result = generator.generateNodeDefinition(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.warnings).toContain(globals_1.expect.stringContaining('Consider grouping'));
        });
        (0, globals_1.it)('should handle empty properties', () => {
            const emptyPropsTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    type: 'object',
                    properties: {},
                },
            };
            const context = {
                ...testData_js_1.mockConversionContext,
                tool: emptyPropsTool,
            };
            const result = generator.generateNodeDefinition(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.warnings).toContain(globals_1.expect.stringContaining('no configurable properties'));
        });
    });
    (0, globals_1.describe)('property generation details', () => {
        (0, globals_1.it)('should handle string format types correctly', () => {
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockStringConstraintsTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const passwordProp = properties.find(p => p.name === 'password');
            (0, globals_1.expect)(passwordProp.typeOptions).toMatchObject({
                password: true,
                minLength: 8,
                maxLength: 128,
            });
            const codeProp = properties.find(p => p.name === 'code');
            (0, globals_1.expect)(codeProp.typeOptions).toMatchObject({
                pattern: '^[A-Z]{3}[0-9]{3}$',
            });
        });
        (0, globals_1.it)('should handle integer constraints', () => {
            const integerTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    type: 'object',
                    properties: {
                        count: {
                            type: 'integer',
                            minimum: 1,
                            maximum: 100,
                            description: 'Count value',
                        },
                    },
                },
            };
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: integerTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const countProp = properties.find(p => p.name === 'count');
            (0, globals_1.expect)(countProp.type).toBe('number');
            (0, globals_1.expect)(countProp.typeOptions).toMatchObject({
                minValue: 1,
                maxValue: 100,
            });
        });
        (0, globals_1.it)('should handle array items description', () => {
            const arrayTool = {
                ...testData_js_1.mockSimpleTool,
                inputSchema: {
                    type: 'object',
                    properties: {
                        items: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                            description: 'List of items',
                        },
                    },
                },
            };
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: arrayTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const itemsProp = properties.find(p => p.name === 'items');
            (0, globals_1.expect)(itemsProp.description).toContain('Array of string');
        });
        (0, globals_1.it)('should handle object properties description', () => {
            const result = generator.generateNodeDefinition({
                ...testData_js_1.mockConversionContext,
                tool: testData_js_1.mockComplexTool,
            });
            (0, globals_1.expect)(result.success).toBe(true);
            const properties = result.nodeDefinition.properties;
            const configProp = properties.find(p => p.name === 'config');
            (0, globals_1.expect)(configProp.description).toContain('Object with: enabled, timeout');
        });
        (0, globals_1.it)('should handle credentials configuration', () => {
            const noCredConfig = {
                credentialName: undefined,
            };
            const context = {
                ...testData_js_1.mockConversionContext,
                config: noCredConfig,
            };
            const result = generator.generateNodeDefinition(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.nodeDefinition.credentials).toBeUndefined();
        });
    });
    (0, globals_1.describe)('utility methods', () => {
        (0, globals_1.it)('should return supported MCP types', () => {
            const supportedTypes = generator.getSupportedMCPTypes();
            (0, globals_1.expect)(supportedTypes).toEqual([
                'string', 'number', 'integer', 'boolean', 'array', 'object'
            ]);
        });
        (0, globals_1.it)('should return available n8n types', () => {
            const n8nTypes = generator.getAvailableN8nTypes();
            (0, globals_1.expect)(n8nTypes).toContain('string');
            (0, globals_1.expect)(n8nTypes).toContain('number');
            (0, globals_1.expect)(n8nTypes).toContain('boolean');
            (0, globals_1.expect)(n8nTypes).toContain('options');
            (0, globals_1.expect)(n8nTypes).toContain('json');
        });
        (0, globals_1.it)('should generate multiple nodes for complex tools', () => {
            const results = generator.generateMultipleNodes(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(results).toHaveLength(1);
            (0, globals_1.expect)(results[0].success).toBe(true);
        });
        (0, globals_1.it)('should handle operation properties for multi-operation tools', () => {
            // Currently returns false, but test the structure
            const result = generator.generateNodeDefinition(testData_js_1.mockConversionContext);
            (0, globals_1.expect)(result.success).toBe(true);
            // No operation property should be added for single operation tools
            const properties = result.nodeDefinition.properties;
            const operationProp = properties.find(p => p.name === 'operation');
            (0, globals_1.expect)(operationProp).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,