b4ff4e4c0a20bc53e9f7d78f22759022
"use strict";

/* istanbul ignore next */
function cov_1giyc2czfi() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts";
  var hash = "5e82d8989dbebaf2096254baeb2ca26d17d29114";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 40
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 20
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "5": {
        start: {
          line: 10,
          column: 25
        },
        end: {
          line: 12,
          column: 2
        }
      },
      "6": {
        start: {
          line: 13,
          column: 23
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "7": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "8": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "9": {
        start: {
          line: 24,
          column: 33
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "10": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 84,
          column: 7
        }
      },
      "11": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "12": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "13": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 104
        }
      },
      "14": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "15": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "16": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "17": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "18": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "19": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "20": {
        start: {
          line: 53,
          column: 33
        },
        end: {
          line: 53,
          column: 62
        }
      },
      "21": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "22": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 64
        }
      },
      "23": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 72
        }
      },
      "24": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "25": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 64
        }
      },
      "26": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 53
        }
      },
      "27": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "28": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 74
        }
      },
      "29": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 66,
          column: 21
        }
      },
      "30": {
        start: {
          line: 65,
          column: 24
        },
        end: {
          line: 65,
          column: 100
        }
      },
      "31": {
        start: {
          line: 67,
          column: 20
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "32": {
        start: {
          line: 68,
          column: 24
        },
        end: {
          line: 68,
          column: 100
        }
      },
      "33": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 70,
          column: 35
        }
      },
      "34": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 74,
          column: 17
        }
      },
      "35": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 73,
          column: 95
        }
      },
      "36": {
        start: {
          line: 75,
          column: 16
        },
        end: {
          line: 75,
          column: 30
        }
      },
      "37": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 80,
          column: 17
        }
      },
      "38": {
        start: {
          line: 79,
          column: 20
        },
        end: {
          line: 79,
          column: 91
        }
      },
      "39": {
        start: {
          line: 81,
          column: 16
        },
        end: {
          line: 81,
          column: 88
        }
      },
      "40": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 125,
          column: 7
        }
      },
      "41": {
        start: {
          line: 98,
          column: 27
        },
        end: {
          line: 98,
          column: 38
        }
      },
      "42": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 101,
          column: 13
        }
      },
      "43": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 100,
          column: 104
        }
      },
      "44": {
        start: {
          line: 102,
          column: 12
        },
        end: {
          line: 123,
          column: 13
        }
      },
      "45": {
        start: {
          line: 103,
          column: 28
        },
        end: {
          line: 103,
          column: 59
        }
      },
      "46": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 53
        }
      },
      "47": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 48
        }
      },
      "48": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "49": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "50": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 69
        }
      },
      "51": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "52": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 91
        }
      },
      "53": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "54": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 91
        }
      },
      "55": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 30
        }
      },
      "56": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 121,
          column: 17
        }
      },
      "57": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 89
        }
      },
      "58": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 86
        }
      },
      "59": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "60": {
        start: {
          line: 139,
          column: 27
        },
        end: {
          line: 139,
          column: 38
        }
      },
      "61": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 142,
          column: 13
        }
      },
      "62": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 104
        }
      },
      "63": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "64": {
        start: {
          line: 144,
          column: 32
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "65": {
        start: {
          line: 147,
          column: 28
        },
        end: {
          line: 147,
          column: 59
        }
      },
      "66": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 85
        }
      },
      "67": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "68": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 92
        }
      },
      "69": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 89
        }
      },
      "70": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 190,
          column: 7
        }
      },
      "71": {
        start: {
          line: 171,
          column: 27
        },
        end: {
          line: 171,
          column: 38
        }
      },
      "72": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 174,
          column: 13
        }
      },
      "73": {
        start: {
          line: 173,
          column: 16
        },
        end: {
          line: 173,
          column: 104
        }
      },
      "74": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "75": {
        start: {
          line: 176,
          column: 49
        },
        end: {
          line: 176,
          column: 53
        }
      },
      "76": {
        start: {
          line: 177,
          column: 32
        },
        end: {
          line: 179,
          column: 17
        }
      },
      "77": {
        start: {
          line: 180,
          column: 28
        },
        end: {
          line: 180,
          column: 66
        }
      },
      "78": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 85
        }
      },
      "79": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 186,
          column: 17
        }
      },
      "80": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "81": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 89
        }
      },
      "82": {
        start: {
          line: 192,
          column: 4
        },
        end: {
          line: 219,
          column: 7
        }
      },
      "83": {
        start: {
          line: 204,
          column: 27
        },
        end: {
          line: 204,
          column: 38
        }
      },
      "84": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "85": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 104
        }
      },
      "86": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "87": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 51
        }
      },
      "88": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 210,
          column: 75
        }
      },
      "89": {
        start: {
          line: 213,
          column: 16
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "90": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 92
        }
      },
      "91": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 89
        }
      },
      "92": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 255,
          column: 7
        }
      },
      "93": {
        start: {
          line: 233,
          column: 27
        },
        end: {
          line: 233,
          column: 38
        }
      },
      "94": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "95": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 104
        }
      },
      "96": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "97": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 238,
          column: 74
        }
      },
      "98": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 241,
          column: 17
        }
      },
      "99": {
        start: {
          line: 240,
          column: 20
        },
        end: {
          line: 240,
          column: 79
        }
      },
      "100": {
        start: {
          line: 242,
          column: 29
        },
        end: {
          line: 242,
          column: 95
        }
      },
      "101": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 245,
          column: 19
        }
      },
      "102": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 244,
          column: 80
        }
      },
      "103": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 30
        }
      },
      "104": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "105": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 99
        }
      },
      "106": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 96
        }
      },
      "107": {
        start: {
          line: 257,
          column: 4
        },
        end: {
          line: 285,
          column: 7
        }
      },
      "108": {
        start: {
          line: 269,
          column: 27
        },
        end: {
          line: 269,
          column: 38
        }
      },
      "109": {
        start: {
          line: 270,
          column: 12
        },
        end: {
          line: 272,
          column: 13
        }
      },
      "110": {
        start: {
          line: 271,
          column: 16
        },
        end: {
          line: 271,
          column: 104
        }
      },
      "111": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "112": {
        start: {
          line: 274,
          column: 16
        },
        end: {
          line: 274,
          column: 78
        }
      },
      "113": {
        start: {
          line: 275,
          column: 33
        },
        end: {
          line: 275,
          column: 51
        }
      },
      "114": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 100
        }
      },
      "115": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 281,
          column: 17
        }
      },
      "116": {
        start: {
          line: 280,
          column: 20
        },
        end: {
          line: 280,
          column: 102
        }
      },
      "117": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 99
        }
      }
    },
    fnMap: {
      "0": {
        name: "createTagTools",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 23
          }
        },
        loc: {
          start: {
            line: 29,
            column: 43
          },
          end: {
            line: 286,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 17
          },
          end: {
            line: 42,
            column: 18
          }
        },
        loc: {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 39
          }
        },
        loc: {
          start: {
            line: 58,
            column: 54
          },
          end: {
            line: 71,
            column: 17
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 17
          },
          end: {
            line: 97,
            column: 18
          }
        },
        loc: {
          start: {
            line: 97,
            column: 33
          },
          end: {
            line: 124,
            column: 9
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 138,
            column: 17
          },
          end: {
            line: 138,
            column: 18
          }
        },
        loc: {
          start: {
            line: 138,
            column: 33
          },
          end: {
            line: 156,
            column: 9
          }
        },
        line: 138
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 170,
            column: 17
          },
          end: {
            line: 170,
            column: 18
          }
        },
        loc: {
          start: {
            line: 170,
            column: 33
          },
          end: {
            line: 189,
            column: 9
          }
        },
        line: 170
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 203,
            column: 18
          }
        },
        loc: {
          start: {
            line: 203,
            column: 33
          },
          end: {
            line: 218,
            column: 9
          }
        },
        line: 203
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 232,
            column: 17
          },
          end: {
            line: 232,
            column: 18
          }
        },
        loc: {
          start: {
            line: 232,
            column: 33
          },
          end: {
            line: 254,
            column: 9
          }
        },
        line: 232
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 30
          }
        },
        loc: {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 245,
            column: 17
          }
        },
        line: 243
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 268,
            column: 17
          },
          end: {
            line: 268,
            column: 18
          }
        },
        loc: {
          start: {
            line: 268,
            column: 33
          },
          end: {
            line: 284,
            column: 9
          }
        },
        line: 268
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 52,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 52,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 66,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 20
          },
          end: {
            line: 66,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "6": {
        loc: {
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 20
          },
          end: {
            line: 69,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 72,
            column: 16
          },
          end: {
            line: 74,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 80,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 99,
            column: 12
          },
          end: {
            line: 101,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 99
      },
      "10": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "11": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 16
          },
          end: {
            line: 121,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "14": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 12
          },
          end: {
            line: 174,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "17": {
        loc: {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 186,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 186,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "18": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "19": {
        loc: {
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "20": {
        loc: {
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "21": {
        loc: {
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 239,
            column: 16
          },
          end: {
            line: 241,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 239
      },
      "22": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "23": {
        loc: {
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 12
          },
          end: {
            line: 272,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "24": {
        loc: {
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 16
          },
          end: {
            line: 281,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 279
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/tags.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nTag, CreateTagRequest, UpdateTagRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst TagIdSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n});\n\nconst WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst ListTagsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateTagSchema = z.object({\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateTagSchema = z.object({\n  tagId: z.string().min(1, 'Tag ID is required'),\n  name: z.string().min(1, 'Tag name is required'),\n});\n\nconst UpdateWorkflowTagsSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  tagIds: z.array(z.string()).min(0, 'Tag IDs must be an array'),\n});\n\n// Tool registration function\nexport function createTagTools(getClient: () => N8nClient | null, server: any) {\n  // List tags tool\n  server.addTool({\n    name: 'list-tags',\n    description: 'List all tags in the n8n instance with pagination support and usage statistics',\n    parameters: ListTagsSchema,\n    annotations: {\n      title: 'List n8n Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getTags(options);\n\n        if (response.data.length === 0) {\n          return 'No tags found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} tag(s):\\n\\n`;\n\n        response.data.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}**\\n`;\n          result += `   - ID: ${tag.id}\\n`;\n\n          if (tag.usageCount !== undefined) {\n            result += `   - Usage Count: ${tag.usageCount}\\n`;\n          }\n\n          if (tag.createdAt) {\n            result += `   - Created: ${new Date(tag.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (tag.updatedAt) {\n            result += `   - Updated: ${new Date(tag.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list tags: ${error.message}`);\n        }\n        throw new UserError('Failed to list tags with unknown error');\n      }\n    },\n  });\n\n  // Get tag tool\n  server.addTool({\n    name: 'get-tag',\n    description: 'Get detailed information about a specific tag by ID',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Get Tag Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tag = await client.getTag(args.tagId);\n\n        let result = `# Tag: ${tag.name}\\n\\n`;\n        result += `**ID:** ${tag.id}\\n`;\n        result += `**Name:** ${tag.name}\\n`;\n\n        if (tag.usageCount !== undefined) {\n          result += `**Usage Count:** ${tag.usageCount}\\n`;\n        }\n\n        if (tag.createdAt) {\n          result += `**Created:** ${new Date(tag.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (tag.updatedAt) {\n          result += `**Updated:** ${new Date(tag.updatedAt).toLocaleString()}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get tag: ${error.message}`);\n        }\n        throw new UserError('Failed to get tag with unknown error');\n      }\n    },\n  });\n\n  // Create tag tool\n  server.addTool({\n    name: 'create-tag',\n    description: 'Create a new tag in n8n for organizing workflows',\n    parameters: CreateTagSchema,\n    annotations: {\n      title: 'Create New Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tagData: CreateTagRequest = {\n          name: args.name,\n        };\n\n        const tag = await client.createTag(tagData);\n\n        return `\u2705 Successfully created tag \"${tag.name}\" with ID: ${tag.id}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create tag: ${error.message}`);\n        }\n        throw new UserError('Failed to create tag with unknown error');\n      }\n    },\n  });\n\n  // Update tag tool\n  server.addTool({\n    name: 'update-tag',\n    description: \"Update a tag's name in n8n\",\n    parameters: UpdateTagSchema,\n    annotations: {\n      title: 'Update Tag',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateTagSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { tagId, ...updateData } = args;\n        const tagData: UpdateTagRequest = {\n          name: updateData.name,\n        };\n\n        const tag = await client.updateTag(tagId, tagData);\n\n        return `\u2705 Successfully updated tag to \"${tag.name}\" (ID: ${tag.id})`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update tag: ${error.message}`);\n        }\n        throw new UserError('Failed to update tag with unknown error');\n      }\n    },\n  });\n\n  // Delete tag tool\n  server.addTool({\n    name: 'delete-tag',\n    description:\n      'Delete a tag from n8n permanently. This will remove the tag from all workflows using it',\n    parameters: TagIdSchema,\n    annotations: {\n      title: 'Delete Tag',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TagIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteTag(args.tagId);\n        return `\u2705 Successfully deleted tag with ID: ${args.tagId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete tag: ${error.message}`);\n        }\n        throw new UserError('Failed to delete tag with unknown error');\n      }\n    },\n  });\n\n  // Get workflow tags tool\n  server.addTool({\n    name: 'get-workflow-tags',\n    description: 'Get all tags assigned to a specific workflow',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Get Workflow Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const tags = await client.getWorkflowTags(args.workflowId);\n\n        if (tags.length === 0) {\n          return `No tags found for workflow ID: ${args.workflowId}`;\n        }\n\n        let result = `Found ${tags.length} tag(s) for workflow ${args.workflowId}:\\n\\n`;\n\n        tags.forEach((tag: N8nTag, index: number) => {\n          result += `${index + 1}. **${tag.name}** (ID: ${tag.id})\\n`;\n        });\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow tags with unknown error');\n      }\n    },\n  });\n\n  // Update workflow tags tool\n  server.addTool({\n    name: 'update-workflow-tags',\n    description:\n      'Update the tags assigned to a workflow. This replaces all existing tags with the provided list',\n    parameters: UpdateWorkflowTagsSchema,\n    annotations: {\n      title: 'Update Workflow Tags',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateWorkflowTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.updateWorkflowTags(args.workflowId, args.tagIds);\n\n        const tagCount = args.tagIds.length;\n        return `\u2705 Successfully updated workflow ${args.workflowId} with ${tagCount} tag(s)`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update workflow tags: ${error.message}`);\n        }\n        throw new UserError('Failed to update workflow tags with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5e82d8989dbebaf2096254baeb2ca26d17d29114"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1giyc2czfi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1giyc2czfi();
cov_1giyc2czfi().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1giyc2czfi().s[1]++;
exports.createTagTools = createTagTools;
const zod_1 =
/* istanbul ignore next */
(cov_1giyc2czfi().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1giyc2czfi().s[3]++, require("fastmcp"));
// Zod schemas for validation
const TagIdSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[4]++, zod_1.z.object({
  tagId: zod_1.z.string().min(1, 'Tag ID is required')
}));
const WorkflowIdSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[5]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required')
}));
const ListTagsSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[6]++, zod_1.z.object({
  limit: zod_1.z.number().min(1).max(100).optional(),
  cursor: zod_1.z.string().optional()
}));
const CreateTagSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[7]++, zod_1.z.object({
  name: zod_1.z.string().min(1, 'Tag name is required')
}));
const UpdateTagSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[8]++, zod_1.z.object({
  tagId: zod_1.z.string().min(1, 'Tag ID is required'),
  name: zod_1.z.string().min(1, 'Tag name is required')
}));
const UpdateWorkflowTagsSchema =
/* istanbul ignore next */
(cov_1giyc2czfi().s[9]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  tagIds: zod_1.z.array(zod_1.z.string()).min(0, 'Tag IDs must be an array')
}));
// Tool registration function
function createTagTools(getClient, server) {
  /* istanbul ignore next */
  cov_1giyc2czfi().f[0]++;
  cov_1giyc2czfi().s[10]++;
  // List tags tool
  server.addTool({
    name: 'list-tags',
    description: 'List all tags in the n8n instance with pagination support and usage statistics',
    parameters: ListTagsSchema,
    annotations: {
      title: 'List n8n Tags',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[11]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[12]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[0][0]++;
        cov_1giyc2czfi().s[13]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[0][1]++;
      }
      cov_1giyc2czfi().s[14]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[15]++, {});
        /* istanbul ignore next */
        cov_1giyc2czfi().s[16]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[1][0]++;
          cov_1giyc2czfi().s[17]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[1][1]++;
        }
        cov_1giyc2czfi().s[18]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[2][0]++;
          cov_1giyc2czfi().s[19]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[20]++, await client.getTags(options));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[21]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[3][0]++;
          cov_1giyc2czfi().s[22]++;
          return 'No tags found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[23]++, `Found ${response.data.length} tag(s):\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[24]++;
        response.data.forEach((tag, index) => {
          /* istanbul ignore next */
          cov_1giyc2czfi().f[2]++;
          cov_1giyc2czfi().s[25]++;
          result += `${index + 1}. **${tag.name}**\n`;
          /* istanbul ignore next */
          cov_1giyc2czfi().s[26]++;
          result += `   - ID: ${tag.id}\n`;
          /* istanbul ignore next */
          cov_1giyc2czfi().s[27]++;
          if (tag.usageCount !== undefined) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[4][0]++;
            cov_1giyc2czfi().s[28]++;
            result += `   - Usage Count: ${tag.usageCount}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[4][1]++;
          }
          cov_1giyc2czfi().s[29]++;
          if (tag.createdAt) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[5][0]++;
            cov_1giyc2czfi().s[30]++;
            result += `   - Created: ${new Date(tag.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[5][1]++;
          }
          cov_1giyc2czfi().s[31]++;
          if (tag.updatedAt) {
            /* istanbul ignore next */
            cov_1giyc2czfi().b[6][0]++;
            cov_1giyc2czfi().s[32]++;
            result += `   - Updated: ${new Date(tag.updatedAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1giyc2czfi().b[6][1]++;
          }
          cov_1giyc2czfi().s[33]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1giyc2czfi().s[34]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[7][0]++;
          cov_1giyc2czfi().s[35]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[7][1]++;
        }
        cov_1giyc2czfi().s[36]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[37]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[8][0]++;
          cov_1giyc2czfi().s[38]++;
          throw new fastmcp_1.UserError(`Failed to list tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[8][1]++;
        }
        cov_1giyc2czfi().s[39]++;
        throw new fastmcp_1.UserError('Failed to list tags with unknown error');
      }
    }
  });
  // Get tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[40]++;
  server.addTool({
    name: 'get-tag',
    description: 'Get detailed information about a specific tag by ID',
    parameters: TagIdSchema,
    annotations: {
      title: 'Get Tag Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[41]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[42]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[9][0]++;
        cov_1giyc2czfi().s[43]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[9][1]++;
      }
      cov_1giyc2czfi().s[44]++;
      try {
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[45]++, await client.getTag(args.tagId));
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[46]++, `# Tag: ${tag.name}\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[47]++;
        result += `**ID:** ${tag.id}\n`;
        /* istanbul ignore next */
        cov_1giyc2czfi().s[48]++;
        result += `**Name:** ${tag.name}\n`;
        /* istanbul ignore next */
        cov_1giyc2czfi().s[49]++;
        if (tag.usageCount !== undefined) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[10][0]++;
          cov_1giyc2czfi().s[50]++;
          result += `**Usage Count:** ${tag.usageCount}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[10][1]++;
        }
        cov_1giyc2czfi().s[51]++;
        if (tag.createdAt) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[11][0]++;
          cov_1giyc2czfi().s[52]++;
          result += `**Created:** ${new Date(tag.createdAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[11][1]++;
        }
        cov_1giyc2czfi().s[53]++;
        if (tag.updatedAt) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[12][0]++;
          cov_1giyc2czfi().s[54]++;
          result += `**Updated:** ${new Date(tag.updatedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[12][1]++;
        }
        cov_1giyc2czfi().s[55]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[56]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[13][0]++;
          cov_1giyc2czfi().s[57]++;
          throw new fastmcp_1.UserError(`Failed to get tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[13][1]++;
        }
        cov_1giyc2czfi().s[58]++;
        throw new fastmcp_1.UserError('Failed to get tag with unknown error');
      }
    }
  });
  // Create tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[59]++;
  server.addTool({
    name: 'create-tag',
    description: 'Create a new tag in n8n for organizing workflows',
    parameters: CreateTagSchema,
    annotations: {
      title: 'Create New Tag',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[60]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[61]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[14][0]++;
        cov_1giyc2czfi().s[62]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[14][1]++;
      }
      cov_1giyc2czfi().s[63]++;
      try {
        const tagData =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[64]++, {
          name: args.name
        });
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[65]++, await client.createTag(tagData));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[66]++;
        return `✅ Successfully created tag "${tag.name}" with ID: ${tag.id}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[67]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[15][0]++;
          cov_1giyc2czfi().s[68]++;
          throw new fastmcp_1.UserError(`Failed to create tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[15][1]++;
        }
        cov_1giyc2czfi().s[69]++;
        throw new fastmcp_1.UserError('Failed to create tag with unknown error');
      }
    }
  });
  // Update tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[70]++;
  server.addTool({
    name: 'update-tag',
    description: "Update a tag's name in n8n",
    parameters: UpdateTagSchema,
    annotations: {
      title: 'Update Tag',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[71]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[72]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[16][0]++;
        cov_1giyc2czfi().s[73]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[16][1]++;
      }
      cov_1giyc2czfi().s[74]++;
      try {
        const {
          tagId,
          ...updateData
        } =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[75]++, args);
        const tagData =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[76]++, {
          name: updateData.name
        });
        const tag =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[77]++, await client.updateTag(tagId, tagData));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[78]++;
        return `✅ Successfully updated tag to "${tag.name}" (ID: ${tag.id})`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[79]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[17][0]++;
          cov_1giyc2czfi().s[80]++;
          throw new fastmcp_1.UserError(`Failed to update tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[17][1]++;
        }
        cov_1giyc2czfi().s[81]++;
        throw new fastmcp_1.UserError('Failed to update tag with unknown error');
      }
    }
  });
  // Delete tag tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[82]++;
  server.addTool({
    name: 'delete-tag',
    description: 'Delete a tag from n8n permanently. This will remove the tag from all workflows using it',
    parameters: TagIdSchema,
    annotations: {
      title: 'Delete Tag',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[6]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[83]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[84]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[18][0]++;
        cov_1giyc2czfi().s[85]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[18][1]++;
      }
      cov_1giyc2czfi().s[86]++;
      try {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[87]++;
        await client.deleteTag(args.tagId);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[88]++;
        return `✅ Successfully deleted tag with ID: ${args.tagId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[89]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[19][0]++;
          cov_1giyc2czfi().s[90]++;
          throw new fastmcp_1.UserError(`Failed to delete tag: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[19][1]++;
        }
        cov_1giyc2czfi().s[91]++;
        throw new fastmcp_1.UserError('Failed to delete tag with unknown error');
      }
    }
  });
  // Get workflow tags tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[92]++;
  server.addTool({
    name: 'get-workflow-tags',
    description: 'Get all tags assigned to a specific workflow',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Get Workflow Tags',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[7]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[93]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[94]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[20][0]++;
        cov_1giyc2czfi().s[95]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[20][1]++;
      }
      cov_1giyc2czfi().s[96]++;
      try {
        const tags =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[97]++, await client.getWorkflowTags(args.workflowId));
        /* istanbul ignore next */
        cov_1giyc2czfi().s[98]++;
        if (tags.length === 0) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[21][0]++;
          cov_1giyc2czfi().s[99]++;
          return `No tags found for workflow ID: ${args.workflowId}`;
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[21][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[100]++, `Found ${tags.length} tag(s) for workflow ${args.workflowId}:\n\n`);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[101]++;
        tags.forEach((tag, index) => {
          /* istanbul ignore next */
          cov_1giyc2czfi().f[8]++;
          cov_1giyc2czfi().s[102]++;
          result += `${index + 1}. **${tag.name}** (ID: ${tag.id})\n`;
        });
        /* istanbul ignore next */
        cov_1giyc2czfi().s[103]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[104]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[22][0]++;
          cov_1giyc2czfi().s[105]++;
          throw new fastmcp_1.UserError(`Failed to get workflow tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[22][1]++;
        }
        cov_1giyc2czfi().s[106]++;
        throw new fastmcp_1.UserError('Failed to get workflow tags with unknown error');
      }
    }
  });
  // Update workflow tags tool
  /* istanbul ignore next */
  cov_1giyc2czfi().s[107]++;
  server.addTool({
    name: 'update-workflow-tags',
    description: 'Update the tags assigned to a workflow. This replaces all existing tags with the provided list',
    parameters: UpdateWorkflowTagsSchema,
    annotations: {
      title: 'Update Workflow Tags',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1giyc2czfi().f[9]++;
      const client =
      /* istanbul ignore next */
      (cov_1giyc2czfi().s[108]++, getClient());
      /* istanbul ignore next */
      cov_1giyc2czfi().s[109]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1giyc2czfi().b[23][0]++;
        cov_1giyc2czfi().s[110]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1giyc2czfi().b[23][1]++;
      }
      cov_1giyc2czfi().s[111]++;
      try {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[112]++;
        await client.updateWorkflowTags(args.workflowId, args.tagIds);
        const tagCount =
        /* istanbul ignore next */
        (cov_1giyc2czfi().s[113]++, args.tagIds.length);
        /* istanbul ignore next */
        cov_1giyc2czfi().s[114]++;
        return `✅ Successfully updated workflow ${args.workflowId} with ${tagCount} tag(s)`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1giyc2czfi().s[115]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1giyc2czfi().b[24][0]++;
          cov_1giyc2czfi().s[116]++;
          throw new fastmcp_1.UserError(`Failed to update workflow tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1giyc2czfi().b[24][1]++;
        }
        cov_1giyc2czfi().s[117]++;
        throw new fastmcp_1.UserError('Failed to update workflow tags with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,