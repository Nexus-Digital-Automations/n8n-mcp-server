{"version":3,"names":["cov_2rr464tyiy","actualCoverage","z","UserError","TemplateSearchSchema","s","object","query","string","optional","category","enum","default","complexity","tags","array","limit","number","min","max","TemplateExportSchema","workflowId","templateName","description","includeCredentials","boolean","makeSensitiveDataGeneric","TemplateImportSchema","templateData","record","any","workflowName","parameterMapping","replaceCredentials","activate","PatternAnalysisSchema","patternType","includeRecommendations","BestPracticesSchema","includeExamples","TEMPLATE_LIBRARY","automation","id","name","nodeCount","estimatedSetupTime","features","useCase","integration","notification","WORKFLOW_PATTERNS","pattern","nodes","implementation","createTemplateTools","getClient","server","f","addTool","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","allTemplates","Object","entries","forEach","templates","b","push","map","template","filter","toLowerCase","includes","some","tag","length","slice","join","result","index","complexityIcon","charAt","toUpperCase","feature","error","message","client","workflow","getWorkflow","Date","now","exportDate","toISOString","originalWorkflow","active","connections","settings","sensitiveDataFields","requirements","credentials","externalServices","prerequisites","credentialTypes","Set","sensitiveFields","node","nodeIndex","keys","credType","add","nodeType","type","key","value","match","Array","from","exportResult","toLocaleString","cred","service","field","placeholder","JSON","stringify","workflowData","parse","mappingKey","credData","nodeIdMap","Map","newId","Math","random","toString","substr","set","position","newConnections","oldNodeId","newNodeId","get","updatedConnections","outputName","outputs","isArray","output","createWorkflowRequest","newWorkflow","createWorkflow","credId","req","prereq","workflows","response","getWorkflows","data","analysis","patternMatches","_nodeTypes","_hasConnections","integrationScore","analyzeIntegrationPattern","score","details","dataScore","analyzeDataTransformationPattern","errorScore","analyzeErrorHandlingPattern","notificationScore","analyzeNotificationPattern","aiScore","analyzeAIProcessingPattern","matches","sort","a","patternInfo","scoreLevel","detail","recommendations","workflowsWithoutErrorHandling","integrationWorkflows","lowScoreIntegrations","hasComplexWorkflows","w","hasNotificationPatterns","rec","bestPractices","apiNodes","transformNodes","errorNodes","authNodes","dataNodes","validationNodes","codeNodes","errorTriggers","tryCatchNodes","notificationNodes","conditionalNodes","formatNodes","aiNodes","prepNodes","processNodes"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/templates.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow } from '../types/n8n.js';\n\n// Zod schemas for template and pattern management\nconst TemplateSearchSchema = z.object({\n  query: z.string().optional(),\n  category: z\n    .enum([\n      'automation',\n      'data-processing',\n      'integration',\n      'notification',\n      'ai-workflow',\n      'e-commerce',\n      'all',\n    ])\n    .optional()\n    .default('all'),\n  complexity: z.enum(['simple', 'intermediate', 'advanced', 'all']).optional().default('all'),\n  tags: z.array(z.string()).optional(),\n  limit: z.number().min(1).max(50).optional().default(20),\n});\n\nconst TemplateExportSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  templateName: z.string().min(1, 'Template name is required'),\n  description: z.string().optional(),\n  category: z.enum([\n    'automation',\n    'data-processing',\n    'integration',\n    'notification',\n    'ai-workflow',\n    'e-commerce',\n  ]),\n  tags: z.array(z.string()).optional(),\n  includeCredentials: z.boolean().optional().default(false),\n  makeSensitiveDataGeneric: z.boolean().optional().default(true),\n});\n\nconst TemplateImportSchema = z.object({\n  templateData: z.record(z.any()),\n  workflowName: z.string().min(1, 'Workflow name is required'),\n  parameterMapping: z.record(z.string()).optional(),\n  replaceCredentials: z.record(z.string()).optional(),\n  activate: z.boolean().optional().default(false),\n});\n\nconst PatternAnalysisSchema = z.object({\n  workflowId: z.string().optional(),\n  patternType: z\n    .enum([\n      'integration',\n      'data-transformation',\n      'error-handling',\n      'notification',\n      'ai-processing',\n      'all',\n    ])\n    .optional()\n    .default('all'),\n  includeRecommendations: z.boolean().optional().default(true),\n});\n\nconst BestPracticesSchema = z.object({\n  workflowId: z.string().optional(),\n  category: z\n    .enum(['structure', 'performance', 'security', 'maintainability', 'all'])\n    .optional()\n    .default('all'),\n  includeExamples: z.boolean().optional().default(true),\n});\n\n// Curated template library (in production, this would connect to n8n's template API or database)\nconst TEMPLATE_LIBRARY = {\n  automation: [\n    {\n      id: 'auto-1',\n      name: 'Automated Email Response System',\n      description: 'Automatically respond to emails based on content analysis and predefined rules',\n      category: 'automation',\n      complexity: 'intermediate',\n      tags: ['email', 'automation', 'ai', 'response'],\n      nodeCount: 8,\n      estimatedSetupTime: '30 minutes',\n      features: ['Email parsing', 'AI content analysis', 'Conditional responses', 'Logging'],\n      useCase: 'Customer support automation',\n    },\n    {\n      id: 'auto-2',\n      name: 'Social Media Post Scheduler',\n      description: 'Schedule and automatically post content across multiple social media platforms',\n      category: 'automation',\n      complexity: 'simple',\n      tags: ['social-media', 'scheduling', 'content'],\n      nodeCount: 6,\n      estimatedSetupTime: '20 minutes',\n      features: [\n        'Multi-platform posting',\n        'Content scheduling',\n        'Image handling',\n        'Analytics tracking',\n      ],\n      useCase: 'Social media management',\n    },\n  ],\n  'data-processing': [\n    {\n      id: 'data-1',\n      name: 'CSV Data Transformation Pipeline',\n      description: 'Transform, validate, and enrich CSV data with external APIs',\n      category: 'data-processing',\n      complexity: 'intermediate',\n      tags: ['csv', 'data-transformation', 'validation', 'api'],\n      nodeCount: 12,\n      estimatedSetupTime: '45 minutes',\n      features: [\n        'CSV parsing',\n        'Data validation',\n        'API enrichment',\n        'Error handling',\n        'Output formatting',\n      ],\n      useCase: 'Data migration and processing',\n    },\n    {\n      id: 'data-2',\n      name: 'Real-time Data Aggregation',\n      description: 'Aggregate data from multiple sources in real-time with caching',\n      category: 'data-processing',\n      complexity: 'advanced',\n      tags: ['real-time', 'aggregation', 'caching', 'multiple-sources'],\n      nodeCount: 15,\n      estimatedSetupTime: '60 minutes',\n      features: [\n        'Multi-source integration',\n        'Real-time processing',\n        'Data caching',\n        'Performance optimization',\n      ],\n      useCase: 'Business intelligence dashboards',\n    },\n  ],\n  integration: [\n    {\n      id: 'int-1',\n      name: 'CRM to Marketing Automation Sync',\n      description: 'Sync customer data between CRM and marketing automation platforms',\n      category: 'integration',\n      complexity: 'intermediate',\n      tags: ['crm', 'marketing', 'sync', 'customer-data'],\n      nodeCount: 10,\n      estimatedSetupTime: '40 minutes',\n      features: ['Bidirectional sync', 'Data mapping', 'Conflict resolution', 'Audit logging'],\n      useCase: 'Sales and marketing alignment',\n    },\n    {\n      id: 'int-2',\n      name: 'E-commerce Order Processing',\n      description: 'Process e-commerce orders across multiple systems and platforms',\n      category: 'integration',\n      complexity: 'advanced',\n      tags: ['e-commerce', 'orders', 'inventory', 'fulfillment'],\n      nodeCount: 18,\n      estimatedSetupTime: '90 minutes',\n      features: [\n        'Order validation',\n        'Inventory management',\n        'Payment processing',\n        'Fulfillment automation',\n      ],\n      useCase: 'E-commerce operations',\n    },\n  ],\n  notification: [\n    {\n      id: 'notif-1',\n      name: 'Smart Alert System',\n      description: 'Intelligent alert system with escalation and multiple notification channels',\n      category: 'notification',\n      complexity: 'intermediate',\n      tags: ['alerts', 'escalation', 'multi-channel', 'intelligent'],\n      nodeCount: 9,\n      estimatedSetupTime: '35 minutes',\n      features: ['Smart routing', 'Escalation rules', 'Multiple channels', 'Alert deduplication'],\n      useCase: 'System monitoring and alerting',\n    },\n  ],\n  'ai-workflow': [\n    {\n      id: 'ai-1',\n      name: 'Document Analysis and Classification',\n      description: 'AI-powered document analysis with automatic classification and data extraction',\n      category: 'ai-workflow',\n      complexity: 'advanced',\n      tags: ['ai', 'document-processing', 'classification', 'extraction'],\n      nodeCount: 14,\n      estimatedSetupTime: '75 minutes',\n      features: [\n        'AI document analysis',\n        'Auto-classification',\n        'Data extraction',\n        'Confidence scoring',\n      ],\n      useCase: 'Document management and processing',\n    },\n    {\n      id: 'ai-2',\n      name: 'Intelligent Content Generation',\n      description: 'Generate and optimize content using AI with quality validation',\n      category: 'ai-workflow',\n      complexity: 'intermediate',\n      tags: ['ai', 'content-generation', 'optimization', 'validation'],\n      nodeCount: 11,\n      estimatedSetupTime: '50 minutes',\n      features: [\n        'AI content generation',\n        'Quality validation',\n        'Multi-format output',\n        'Brand consistency',\n      ],\n      useCase: 'Content marketing automation',\n    },\n  ],\n};\n\n// Common workflow patterns\nconst WORKFLOW_PATTERNS = {\n  'error-handling': {\n    name: 'Comprehensive Error Handling',\n    description: 'Best practices for implementing robust error handling in workflows',\n    pattern: 'Try-Catch blocks with retry logic, fallback mechanisms, and error notifications',\n    nodes: ['Error Trigger', 'Retry Logic', 'Fallback Action', 'Error Notification'],\n    implementation:\n      'Use error trigger nodes after critical operations, implement exponential backoff for retries',\n  },\n  'data-validation': {\n    name: 'Data Validation Pipeline',\n    description: 'Systematic approach to validating and sanitizing input data',\n    pattern: 'Input validation → Data sanitization → Business rule validation → Error reporting',\n    nodes: ['Validation Node', 'Set Node (cleaning)', 'IF Node (business rules)', 'Error Handler'],\n    implementation:\n      'Validate data types, check business rules, sanitize inputs, handle validation failures',\n  },\n  'api-integration': {\n    name: 'Reliable API Integration',\n    description: 'Best practices for integrating with external APIs',\n    pattern: 'Rate limiting → Authentication → Request → Retry logic → Response handling',\n    nodes: ['Wait Node', 'HTTP Request', 'IF Node (status check)', 'Error Handler'],\n    implementation:\n      'Implement rate limiting, proper authentication, status code handling, and retry mechanisms',\n  },\n  'notification-system': {\n    name: 'Multi-Channel Notification System',\n    description: 'Flexible notification system with multiple channels and priorities',\n    pattern:\n      'Priority assessment → Channel selection → Message formatting → Delivery → Confirmation',\n    nodes: ['Switch Node (priority)', 'Multiple notification nodes', 'Webhook (confirmation)'],\n    implementation:\n      'Route notifications based on priority, use multiple channels, confirm delivery',\n  },\n};\n\n// Tool registration function for template and pattern management tools\nexport function createTemplateTools(getClient: () => N8nClient | null, server: any) {\n  // Search workflow templates\n  server.addTool({\n    name: 'search-workflow-templates',\n    description:\n      'Search and browse curated workflow templates by category, complexity, and functionality',\n    parameters: TemplateSearchSchema,\n    annotations: {\n      title: 'Search Workflow Templates',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof TemplateSearchSchema>) => {\n      try {\n        let allTemplates: any[] = [];\n\n        // Collect templates from all categories\n        Object.entries(TEMPLATE_LIBRARY).forEach(([category, templates]) => {\n          if (args.category === 'all' || args.category === category) {\n            allTemplates.push(...templates.map(template => ({ ...template, category })));\n          }\n        });\n\n        // Filter by complexity\n        if (args.complexity !== 'all') {\n          allTemplates = allTemplates.filter(template => template.complexity === args.complexity);\n        }\n\n        // Filter by search query\n        if (args.query) {\n          const query = args.query.toLowerCase();\n          allTemplates = allTemplates.filter(\n            template =>\n              template.name.toLowerCase().includes(query) ||\n              template.description.toLowerCase().includes(query) ||\n              template.tags.some((tag: string) => tag.toLowerCase().includes(query)) ||\n              template.useCase.toLowerCase().includes(query)\n          );\n        }\n\n        // Filter by tags\n        if (args.tags && args.tags.length > 0) {\n          allTemplates = allTemplates.filter(template =>\n            args.tags!.some(tag => template.tags.includes(tag.toLowerCase()))\n          );\n        }\n\n        // Limit results\n        allTemplates = allTemplates.slice(0, args.limit);\n\n        if (allTemplates.length === 0) {\n          return (\n            `No templates found matching your criteria:\\n` +\n            `- Category: ${args.category}\\n` +\n            `- Complexity: ${args.complexity}\\n` +\n            `- Query: ${args.query || 'None'}\\n` +\n            `- Tags: ${args.tags?.join(', ') || 'None'}\\n\\n` +\n            `Try broadening your search criteria or browse all templates.`\n          );\n        }\n\n        let result = `# Workflow Template Search Results\\n\\n`;\n        result += `**Found ${allTemplates.length} template(s) matching your criteria**\\n`;\n        result += `**Search Query**: ${args.query || 'All templates'}\\n`;\n        result += `**Category**: ${args.category}\\n`;\n        result += `**Complexity**: ${args.complexity}\\n\\n`;\n\n        allTemplates.forEach((template, index) => {\n          const complexityIcon =\n            template.complexity === 'simple'\n              ? '🟢'\n              : template.complexity === 'intermediate'\n                ? '🟡'\n                : '🔴';\n\n          result += `## ${index + 1}. ${template.name} ${complexityIcon}\\n`;\n          result += `**Category**: ${template.category.charAt(0).toUpperCase() + template.category.slice(1)}\\n`;\n          result += `**Complexity**: ${template.complexity.charAt(0).toUpperCase() + template.complexity.slice(1)}\\n`;\n          result += `**Description**: ${template.description}\\n`;\n          result += `**Use Case**: ${template.useCase}\\n`;\n          result += `**Setup Time**: ${template.estimatedSetupTime}\\n`;\n          result += `**Node Count**: ${template.nodeCount} nodes\\n`;\n          result += `**Tags**: ${template.tags.join(', ')}\\n`;\n\n          result += `**Features**:\\n`;\n          template.features.forEach((feature: string) => {\n            result += `- ${feature}\\n`;\n          });\n\n          result += `**Template ID**: \\`${template.id}\\` (use with import-workflow-template)\\n\\n`;\n        });\n\n        result += `## 🔧 Next Steps\\n`;\n        result += `- Use \\`import-workflow-template\\` with a template ID to import a template\\n`;\n        result += `- Use \\`export-workflow-template\\` to create your own templates\\n`;\n        result += `- Use \\`analyze-workflow-patterns\\` to understand common patterns\\n`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to search templates: ${error.message}`);\n      }\n    },\n  });\n\n  // Export workflow as template\n  server.addTool({\n    name: 'export-workflow-template',\n    description:\n      'Export an existing workflow as a reusable template with parameter mapping and sensitive data protection',\n    parameters: TemplateExportSchema,\n    annotations: {\n      title: 'Export Workflow Template',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TemplateExportSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Create template structure\n        const template = {\n          id: `custom-${Date.now()}`,\n          name: args.templateName,\n          description: args.description || `Template created from workflow: ${workflow.name}`,\n          category: args.category,\n          tags: args.tags || [],\n          complexity:\n            workflow.nodes && workflow.nodes.length > 15\n              ? 'advanced'\n              : workflow.nodes && workflow.nodes.length > 8\n                ? 'intermediate'\n                : 'simple',\n          nodeCount: workflow.nodes?.length || 0,\n          estimatedSetupTime:\n            workflow.nodes && workflow.nodes.length > 15\n              ? '60+ minutes'\n              : workflow.nodes && workflow.nodes.length > 8\n                ? '30-45 minutes'\n                : '15-30 minutes',\n          exportDate: new Date().toISOString(),\n          originalWorkflow: {\n            id: workflow.id,\n            name: workflow.name,\n            active: workflow.active,\n          },\n          template: {\n            nodes: workflow.nodes || [],\n            connections: workflow.connections || {},\n            settings: workflow.settings || {},\n          },\n          parameterMapping: {} as Record<string, string>,\n          sensitiveDataFields: [] as string[],\n          requirements: {\n            credentials: [] as string[],\n            externalServices: [] as string[],\n            prerequisites: [] as string[],\n          },\n        };\n\n        // Analyze workflow for sensitive data and requirements\n        const credentialTypes = new Set<string>();\n        const externalServices = new Set<string>();\n        const sensitiveFields: string[] = [];\n        const parameterMapping: Record<string, string> = {};\n\n        (workflow.nodes || []).forEach((node, nodeIndex) => {\n          // Track credentials\n          if (node.credentials) {\n            Object.keys(node.credentials).forEach(credType => credentialTypes.add(credType));\n          }\n\n          // Identify external services\n          const nodeType = node.type.toLowerCase();\n          if (nodeType.includes('http') || nodeType.includes('webhook')) {\n            externalServices.add('HTTP/Webhook APIs');\n          } else if (nodeType.includes('slack')) {\n            externalServices.add('Slack');\n          } else if (nodeType.includes('gmail') || nodeType.includes('email')) {\n            externalServices.add('Email Service');\n          } else if (nodeType.includes('mysql') || nodeType.includes('postgres')) {\n            externalServices.add('Database');\n          } else if (\n            nodeType.includes('ai') ||\n            nodeType.includes('openai') ||\n            nodeType.includes('anthropic')\n          ) {\n            externalServices.add('AI Services');\n          }\n\n          // Process sensitive data\n          if (args.makeSensitiveDataGeneric && node.parameters) {\n            Object.entries(node.parameters).forEach(([key, value]) => {\n              if (typeof value === 'string') {\n                // Check for potentially sensitive data patterns\n                if (value.includes('@') && value.includes('.')) {\n                  // Email\n                  parameterMapping[`node_${nodeIndex}_${key}`] = 'user@example.com';\n                  sensitiveFields.push(`Node \"${node.name}\" - ${key} (email)`);\n                } else if (value.match(/^https?:\\/\\//)) {\n                  // URL\n                  parameterMapping[`node_${nodeIndex}_${key}`] = 'https://example.com/api';\n                  sensitiveFields.push(`Node \"${node.name}\" - ${key} (URL)`);\n                } else if (value.match(/\\b\\d{10,}\\b/)) {\n                  // Long number (could be phone, ID, etc.)\n                  parameterMapping[`node_${nodeIndex}_${key}`] = '1234567890';\n                  sensitiveFields.push(`Node \"${node.name}\" - ${key} (numeric ID)`);\n                } else if (\n                  key.toLowerCase().includes('key') ||\n                  key.toLowerCase().includes('token') ||\n                  key.toLowerCase().includes('secret') ||\n                  key.toLowerCase().includes('password')\n                ) {\n                  // API keys, tokens, secrets\n                  parameterMapping[`node_${nodeIndex}_${key}`] = 'YOUR_API_KEY_HERE';\n                  sensitiveFields.push(`Node \"${node.name}\" - ${key} (credential)`);\n                }\n              }\n            });\n          }\n        });\n\n        // Update template with analysis results\n        template.requirements.credentials = Array.from(credentialTypes);\n        template.requirements.externalServices = Array.from(externalServices);\n        template.parameterMapping = parameterMapping;\n        template.sensitiveDataFields = sensitiveFields;\n\n        // Remove credentials from template if not explicitly included\n        if (!args.includeCredentials) {\n          template.template.nodes = template.template.nodes.map(node => ({\n            ...node,\n            credentials: {},\n          }));\n        }\n\n        // Generate template export\n        let exportResult = `# Template Export: \"${args.templateName}\"\\n\\n`;\n        exportResult += `**Export Date**: ${new Date().toLocaleString()}\\n`;\n        exportResult += `**Source Workflow**: ${workflow.name} (${workflow.id})\\n`;\n        exportResult += `**Category**: ${args.category}\\n`;\n        exportResult += `**Complexity**: ${template.complexity}\\n`;\n        exportResult += `**Estimated Setup Time**: ${template.estimatedSetupTime}\\n\\n`;\n\n        exportResult += `## 📋 Template Details\\n`;\n        exportResult += `- **Node Count**: ${template.nodeCount}\\n`;\n        exportResult += `- **Description**: ${template.description}\\n`;\n        exportResult += `- **Tags**: ${template.tags.join(', ') || 'None'}\\n\\n`;\n\n        if (template.requirements.credentials.length > 0) {\n          exportResult += `## 🔐 Required Credentials\\n`;\n          template.requirements.credentials.forEach(cred => {\n            exportResult += `- ${cred}\\n`;\n          });\n          exportResult += '\\n';\n        }\n\n        if (template.requirements.externalServices.length > 0) {\n          exportResult += `## 🌐 External Services\\n`;\n          template.requirements.externalServices.forEach(service => {\n            exportResult += `- ${service}\\n`;\n          });\n          exportResult += '\\n';\n        }\n\n        if (sensitiveFields.length > 0) {\n          exportResult += `## ⚠️ Sensitive Data Replaced\\n`;\n          exportResult += `The following fields contained sensitive data and were replaced with generic values:\\n`;\n          sensitiveFields.forEach(field => {\n            exportResult += `- ${field}\\n`;\n          });\n          exportResult += '\\n';\n        }\n\n        exportResult += `## 🔧 Parameter Mapping\\n`;\n        if (Object.keys(parameterMapping).length > 0) {\n          exportResult += `When importing this template, update these parameters:\\n`;\n          Object.entries(parameterMapping).forEach(([field, placeholder]) => {\n            exportResult += `- **${field}**: Currently set to \"${placeholder}\"\\n`;\n          });\n        } else {\n          exportResult += `No sensitive parameters detected - template should work with minimal configuration.\\n`;\n        }\n        exportResult += '\\n';\n\n        exportResult += `## 📦 Template Data\\n`;\n        exportResult += `\\`\\`\\`json\\n${JSON.stringify(template, null, 2)}\\n\\`\\`\\`\\n\\n`;\n\n        exportResult += `## 🚀 Usage Instructions\\n`;\n        exportResult += `1. Save the template JSON above to a file\\n`;\n        exportResult += `2. Use \\`import-workflow-template\\` with the template data\\n`;\n        exportResult += `3. Configure required credentials and external service connections\\n`;\n        exportResult += `4. Update any parameter mappings with your specific values\\n`;\n        exportResult += `5. Test the imported workflow before activating\\n\\n`;\n\n        exportResult += `## 📤 Quick Import Command\\n`;\n        exportResult += `Use this template ID for quick import: \\`${template.id}\\`\\n`;\n        exportResult += `Note: Custom templates are stored locally and may not persist across sessions.`;\n\n        return exportResult;\n      } catch (error: any) {\n        throw new UserError(`Failed to export workflow template: ${error.message}`);\n      }\n    },\n  });\n\n  // Import workflow template\n  server.addTool({\n    name: 'import-workflow-template',\n    description:\n      'Import a workflow template and create a new workflow with parameter mapping and credential configuration',\n    parameters: TemplateImportSchema,\n    annotations: {\n      title: 'Import Workflow Template',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TemplateImportSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const templateData = args.templateData;\n\n        // Validate template structure\n        if (!templateData.template || !templateData.template.nodes) {\n          throw new UserError('Invalid template data: missing nodes structure');\n        }\n\n        // Clone template data to avoid modifying original\n        const workflowData = JSON.parse(JSON.stringify(templateData.template));\n\n        // Apply parameter mapping\n        if (args.parameterMapping && Object.keys(args.parameterMapping).length > 0) {\n          workflowData.nodes = workflowData.nodes.map((node: any, nodeIndex: number) => {\n            if (node.parameters) {\n              Object.entries(node.parameters).forEach(([key, value]) => {\n                const mappingKey = `node_${nodeIndex}_${key}`;\n                if (args.parameterMapping![mappingKey]) {\n                  node.parameters[key] = args.parameterMapping![mappingKey];\n                }\n              });\n            }\n            return node;\n          });\n        }\n\n        // Apply credential replacements\n        if (args.replaceCredentials && Object.keys(args.replaceCredentials).length > 0) {\n          workflowData.nodes = workflowData.nodes.map((node: any) => {\n            if (node.credentials) {\n              Object.entries(node.credentials).forEach(([credType, credData]) => {\n                if (args.replaceCredentials![credType]) {\n                  node.credentials[credType] = {\n                    id: args.replaceCredentials![credType],\n                    name: args.replaceCredentials![credType],\n                  };\n                }\n              });\n            }\n            return node;\n          });\n        }\n\n        // Generate unique node IDs\n        const nodeIdMap = new Map<string, string>();\n        workflowData.nodes = workflowData.nodes.map((node: any) => {\n          const newId = `node_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n          nodeIdMap.set(node.id, newId);\n          return {\n            ...node,\n            id: newId,\n            position: node.position || [100, 100],\n          };\n        });\n\n        // Update connections with new node IDs\n        const newConnections: Record<string, any> = {};\n        Object.entries(workflowData.connections).forEach(([oldNodeId, connections]) => {\n          const newNodeId = nodeIdMap.get(oldNodeId);\n          if (newNodeId) {\n            const updatedConnections: Record<string, any> = {};\n            Object.entries(connections as Record<string, any>).forEach(([outputName, outputs]) => {\n              if (Array.isArray(outputs)) {\n                updatedConnections[outputName] = outputs.map((output: any) => ({\n                  ...output,\n                  node: nodeIdMap.get(output.node) || output.node,\n                }));\n              }\n            });\n            newConnections[newNodeId] = updatedConnections;\n          }\n        });\n\n        workflowData.connections = newConnections;\n\n        // Create the workflow\n        const createWorkflowRequest = {\n          name: args.workflowName,\n          nodes: workflowData.nodes,\n          connections: workflowData.connections,\n          active: args.activate,\n          settings: workflowData.settings || {},\n        };\n\n        const newWorkflow = await client.createWorkflow(createWorkflowRequest);\n\n        let result = `# Template Import Successful! 🎉\\n\\n`;\n        result += `**New Workflow Created**: ${newWorkflow.name}\\n`;\n        result += `**Workflow ID**: ${newWorkflow.id}\\n`;\n        result += `**Status**: ${newWorkflow.active ? '🟢 Active' : '🔴 Inactive'}\\n`;\n        result += `**Nodes Imported**: ${workflowData.nodes.length}\\n`;\n        result += `**Import Date**: ${new Date().toLocaleString()}\\n\\n`;\n\n        // Show template information if available\n        if (templateData.name) {\n          result += `## 📋 Template Information\\n`;\n          result += `- **Template Name**: ${templateData.name}\\n`;\n          result += `- **Category**: ${templateData.category || 'Unknown'}\\n`;\n          result += `- **Complexity**: ${templateData.complexity || 'Unknown'}\\n`;\n          if (templateData.description) {\n            result += `- **Description**: ${templateData.description}\\n`;\n          }\n          result += '\\n';\n        }\n\n        // Show applied mappings\n        if (args.parameterMapping && Object.keys(args.parameterMapping).length > 0) {\n          result += `## 🔧 Applied Parameter Mappings\\n`;\n          Object.entries(args.parameterMapping).forEach(([field, value]) => {\n            result += `- **${field}**: ${value}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Show credential mappings\n        if (args.replaceCredentials && Object.keys(args.replaceCredentials).length > 0) {\n          result += `## 🔐 Applied Credential Mappings\\n`;\n          Object.entries(args.replaceCredentials).forEach(([credType, credId]) => {\n            result += `- **${credType}**: ${credId}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Show requirements if available\n        if (templateData.requirements) {\n          const req = templateData.requirements;\n\n          if (req.credentials && req.credentials.length > 0) {\n            result += `## ⚠️ Required Credentials\\n`;\n            result += `Ensure these credentials are configured:\\n`;\n            req.credentials.forEach((cred: string) => {\n              result += `- ${cred}\\n`;\n            });\n            result += '\\n';\n          }\n\n          if (req.externalServices && req.externalServices.length > 0) {\n            result += `## 🌐 External Service Dependencies\\n`;\n            req.externalServices.forEach((service: string) => {\n              result += `- ${service}\\n`;\n            });\n            result += '\\n';\n          }\n\n          if (req.prerequisites && req.prerequisites.length > 0) {\n            result += `## 📋 Prerequisites\\n`;\n            req.prerequisites.forEach((prereq: string) => {\n              result += `- ${prereq}\\n`;\n            });\n            result += '\\n';\n          }\n        }\n\n        result += `## 🚀 Next Steps\\n`;\n        result += `1. **Review Configuration**: Check all node parameters and connections\\n`;\n        result += `2. **Configure Credentials**: Set up any required authentication\\n`;\n        result += `3. **Test Workflow**: Run a test execution to verify functionality\\n`;\n        if (!args.activate) {\n          result += `4. **Activate Workflow**: Use \\`activate-workflow\\` when ready\\n`;\n        }\n        result += `5. **Monitor Performance**: Use monitoring tools to track execution\\n\\n`;\n\n        result += `## 🔧 Useful Commands\\n`;\n        result += `- \\`get-workflow ${newWorkflow.id}\\` - View workflow details\\n`;\n        result += `- \\`test-workflow ${newWorkflow.id}\\` - Test workflow execution\\n`;\n        result += `- \\`analyze-workflow-complexity ${newWorkflow.id}\\` - Analyze complexity\\n`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to import workflow template: ${error.message}`);\n      }\n    },\n  });\n\n  // Analyze workflow patterns\n  server.addTool({\n    name: 'analyze-workflow-patterns',\n    description:\n      'Analyze workflows to identify common patterns, best practices, and suggest improvements based on established patterns',\n    parameters: PatternAnalysisSchema,\n    annotations: {\n      title: 'Analyze Workflow Patterns',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof PatternAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        let workflows: N8nWorkflow[] = [];\n\n        if (args.workflowId) {\n          const workflow = await client.getWorkflow(args.workflowId);\n          workflows = [workflow];\n        } else {\n          const response = await client.getWorkflows({ limit: 20 });\n          workflows = response.data;\n        }\n\n        let analysis = `# Workflow Pattern Analysis\\n\\n`;\n        analysis += `**Analysis Date**: ${new Date().toLocaleString()}\\n`;\n        analysis += `**Workflows Analyzed**: ${workflows.length}\\n`;\n        analysis += `**Pattern Type**: ${args.patternType}\\n\\n`;\n\n        const patternMatches: Record<\n          string,\n          Array<{ workflow: N8nWorkflow; score: number; details: string[] }>\n        > = {};\n\n        for (const workflow of workflows) {\n          if (!workflow.nodes || workflow.nodes.length === 0) continue;\n\n          const _nodeTypes = workflow.nodes.map(node => node.type.toLowerCase());\n          const _hasConnections =\n            workflow.connections && Object.keys(workflow.connections).length > 0;\n\n          // Analyze integration patterns\n          if (args.patternType === 'integration' || args.patternType === 'all') {\n            const integrationScore = analyzeIntegrationPattern(workflow);\n            if (integrationScore.score > 0) {\n              if (!patternMatches['integration']) patternMatches['integration'] = [];\n              patternMatches['integration'].push({\n                workflow,\n                score: integrationScore.score,\n                details: integrationScore.details,\n              });\n            }\n          }\n\n          // Analyze data transformation patterns\n          if (args.patternType === 'data-transformation' || args.patternType === 'all') {\n            const dataScore = analyzeDataTransformationPattern(workflow);\n            if (dataScore.score > 0) {\n              if (!patternMatches['data-transformation'])\n                patternMatches['data-transformation'] = [];\n              patternMatches['data-transformation'].push({\n                workflow,\n                score: dataScore.score,\n                details: dataScore.details,\n              });\n            }\n          }\n\n          // Analyze error handling patterns\n          if (args.patternType === 'error-handling' || args.patternType === 'all') {\n            const errorScore = analyzeErrorHandlingPattern(workflow);\n            if (errorScore.score > 0) {\n              if (!patternMatches['error-handling']) patternMatches['error-handling'] = [];\n              patternMatches['error-handling'].push({\n                workflow,\n                score: errorScore.score,\n                details: errorScore.details,\n              });\n            }\n          }\n\n          // Analyze notification patterns\n          if (args.patternType === 'notification' || args.patternType === 'all') {\n            const notificationScore = analyzeNotificationPattern(workflow);\n            if (notificationScore.score > 0) {\n              if (!patternMatches['notification']) patternMatches['notification'] = [];\n              patternMatches['notification'].push({\n                workflow,\n                score: notificationScore.score,\n                details: notificationScore.details,\n              });\n            }\n          }\n\n          // Analyze AI processing patterns\n          if (args.patternType === 'ai-processing' || args.patternType === 'all') {\n            const aiScore = analyzeAIProcessingPattern(workflow);\n            if (aiScore.score > 0) {\n              if (!patternMatches['ai-processing']) patternMatches['ai-processing'] = [];\n              patternMatches['ai-processing'].push({\n                workflow,\n                score: aiScore.score,\n                details: aiScore.details,\n              });\n            }\n          }\n        }\n\n        // Generate pattern analysis report\n        if (Object.keys(patternMatches).length === 0) {\n          analysis += `No significant patterns detected in the analyzed workflows.\\n`;\n          analysis += `This could indicate:\\n`;\n          analysis += `- Workflows are using custom patterns\\n`;\n          analysis += `- Limited workflow data available\\n`;\n          analysis += `- Patterns don't match common templates\\n\\n`;\n          analysis += `Consider analyzing individual workflows or using template search.`;\n          return analysis;\n        }\n\n        Object.entries(patternMatches).forEach(([patternType, matches]) => {\n          matches.sort((a, b) => b.score - a.score);\n          const patternInfo = WORKFLOW_PATTERNS[patternType as keyof typeof WORKFLOW_PATTERNS];\n\n          analysis += `## ${patternInfo?.name || patternType.charAt(0).toUpperCase() + patternType.slice(1)} Pattern\\n`;\n          if (patternInfo) {\n            analysis += `**Description**: ${patternInfo.description}\\n`;\n            analysis += `**Typical Implementation**: ${patternInfo.pattern}\\n\\n`;\n          }\n\n          analysis += `**Workflows Using This Pattern** (${matches.length}):\\n`;\n          matches.forEach((match, index) => {\n            const scoreLevel =\n              match.score >= 80\n                ? '🟢 Excellent'\n                : match.score >= 60\n                  ? '🟡 Good'\n                  : match.score >= 40\n                    ? '🟠 Partial'\n                    : '🔴 Basic';\n\n            analysis += `${index + 1}. **${match.workflow.name}** - ${scoreLevel} (${match.score}/100)\\n`;\n            match.details.forEach(detail => {\n              analysis += `   - ${detail}\\n`;\n            });\n            analysis += '\\n';\n          });\n        });\n\n        // Pattern recommendations\n        if (args.includeRecommendations) {\n          analysis += `## 💡 Pattern-Based Recommendations\\n\\n`;\n\n          const recommendations = [];\n\n          // Check for missing error handling\n          const workflowsWithoutErrorHandling = workflows.filter(\n            workflow =>\n              !patternMatches['error-handling']?.some(match => match.workflow.id === workflow.id)\n          );\n\n          if (workflowsWithoutErrorHandling.length > 0) {\n            recommendations.push(\n              `**Error Handling**: ${workflowsWithoutErrorHandling.length} workflow(s) could benefit from implementing error handling patterns`\n            );\n          }\n\n          // Check for integration improvements\n          const integrationWorkflows = patternMatches['integration'] || [];\n          const lowScoreIntegrations = integrationWorkflows.filter(match => match.score < 60);\n\n          if (lowScoreIntegrations.length > 0) {\n            recommendations.push(\n              `**Integration Patterns**: ${lowScoreIntegrations.length} workflow(s) have partial integration patterns - consider implementing complete API integration patterns`\n            );\n          }\n\n          // Check for notification improvements\n          const hasComplexWorkflows = workflows.some(w => (w.nodes?.length || 0) > 10);\n          const hasNotificationPatterns = patternMatches['notification']?.length > 0;\n\n          if (hasComplexWorkflows && !hasNotificationPatterns) {\n            recommendations.push(\n              `**Notification Patterns**: Complex workflows detected without notification patterns - consider adding monitoring and alerting`\n            );\n          }\n\n          if (recommendations.length === 0) {\n            recommendations.push(\n              'Workflows demonstrate good pattern usage - continue monitoring for optimization opportunities'\n            );\n          }\n\n          recommendations.forEach((rec, index) => {\n            analysis += `${index + 1}. ${rec}\\n`;\n          });\n          analysis += '\\n';\n\n          // Best practices\n          analysis += `## 🏆 Pattern Best Practices\\n`;\n          Object.entries(WORKFLOW_PATTERNS).forEach(([key, pattern]) => {\n            analysis += `**${pattern.name}**: ${pattern.implementation}\\n`;\n          });\n        }\n\n        analysis += `\\n## 🔧 Related Tools\\n`;\n        analysis += `- Use \\`search-workflow-templates\\` to find templates with these patterns\\n`;\n        analysis += `- Use \\`get-best-practices\\` for detailed implementation guidance\\n`;\n        analysis += `- Use \\`get-optimization-suggestions\\` for specific improvements\\n`;\n\n        return analysis;\n      } catch (error: any) {\n        throw new UserError(`Failed to analyze workflow patterns: ${error.message}`);\n      }\n    },\n  });\n\n  // Get best practices\n  server.addTool({\n    name: 'get-best-practices',\n    description:\n      'Get comprehensive best practices and implementation guidelines for workflow development, organized by category',\n    parameters: BestPracticesSchema,\n    annotations: {\n      title: 'Get Best Practices',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof BestPracticesSchema>) => {\n      try {\n        let bestPractices = `# n8n Workflow Best Practices Guide\\n\\n`;\n        bestPractices += `**Generated**: ${new Date().toLocaleString()}\\n`;\n        bestPractices += `**Category Focus**: ${args.category}\\n\\n`;\n\n        // Structure best practices\n        if (args.category === 'structure' || args.category === 'all') {\n          bestPractices += `## 🏗️ Workflow Structure Best Practices\\n\\n`;\n\n          bestPractices += `### 1. Workflow Organization\\n`;\n          bestPractices += `- **Single Responsibility**: Each workflow should have one clear purpose\\n`;\n          bestPractices += `- **Logical Flow**: Organize nodes in a clear, left-to-right flow\\n`;\n          bestPractices += `- **Node Naming**: Use descriptive, business-focused names\\n`;\n          bestPractices += `- **Documentation**: Add notes to complex nodes and decision points\\n`;\n          bestPractices += `- **Size Limits**: Keep workflows under 30 nodes when possible\\n\\n`;\n\n          bestPractices += `### 2. Node Configuration\\n`;\n          bestPractices += `- **Parameter Validation**: Always validate input parameters\\n`;\n          bestPractices += `- **Default Values**: Provide sensible defaults for optional parameters\\n`;\n          bestPractices += `- **Environment Variables**: Use environment variables for configuration\\n`;\n          bestPractices += `- **Resource Optimization**: Configure appropriate timeouts and limits\\n\\n`;\n\n          if (args.includeExamples) {\n            bestPractices += `### Example: Good Node Naming\\n`;\n            bestPractices += `\\`\\`\\`\\n`;\n            bestPractices += `❌ Bad: \"HTTP Request\", \"Set\", \"IF\"\\n`;\n            bestPractices += `✅ Good: \"Fetch Customer Data\", \"Format Order Details\", \"Check Payment Status\"\\n`;\n            bestPractices += `\\`\\`\\`\\n\\n`;\n          }\n        }\n\n        // Performance best practices\n        if (args.category === 'performance' || args.category === 'all') {\n          bestPractices += `## ⚡ Performance Best Practices\\n\\n`;\n\n          bestPractices += `### 1. HTTP Request Optimization\\n`;\n          bestPractices += `- **Connection Pooling**: Enable keep-alive for HTTP requests\\n`;\n          bestPractices += `- **Request Batching**: Batch multiple requests when possible\\n`;\n          bestPractices += `- **Timeout Configuration**: Set appropriate request timeouts\\n`;\n          bestPractices += `- **Rate Limiting**: Implement rate limiting for external APIs\\n`;\n          bestPractices += `- **Caching**: Cache frequently accessed data\\n\\n`;\n\n          bestPractices += `### 2. Data Processing\\n`;\n          bestPractices += `- **Stream Processing**: Use streaming for large datasets\\n`;\n          bestPractices += `- **Memory Management**: Avoid loading large datasets into memory\\n`;\n          bestPractices += `- **Parallel Processing**: Use parallel execution where appropriate\\n`;\n          bestPractices += `- **Data Validation**: Validate data early in the workflow\\n\\n`;\n\n          bestPractices += `### 3. Code Node Optimization\\n`;\n          bestPractices += `- **Library Usage**: Minimize external library imports\\n`;\n          bestPractices += `- **Loop Optimization**: Avoid nested loops in code nodes\\n`;\n          bestPractices += `- **Error Handling**: Implement proper error handling in custom code\\n`;\n          bestPractices += `- **Performance Monitoring**: Add timing and logging to code nodes\\n\\n`;\n\n          if (args.includeExamples) {\n            bestPractices += `### Example: HTTP Request Configuration\\n`;\n            bestPractices += `\\`\\`\\`json\\n`;\n            bestPractices += `{\\n`;\n            bestPractices += `  \"timeout\": 30000,\\n`;\n            bestPractices += `  \"redirect\": {\\n`;\n            bestPractices += `    \"followRedirects\": true,\\n`;\n            bestPractices += `    \"maxRedirects\": 3\\n`;\n            bestPractices += `  },\\n`;\n            bestPractices += `  \"response\": {\\n`;\n            bestPractices += `    \"fullResponse\": false\\n`;\n            bestPractices += `  }\\n`;\n            bestPractices += `}\\n`;\n            bestPractices += `\\`\\`\\`\\n\\n`;\n          }\n        }\n\n        // Security best practices\n        if (args.category === 'security' || args.category === 'all') {\n          bestPractices += `## 🔒 Security Best Practices\\n\\n`;\n\n          bestPractices += `### 1. Credential Management\\n`;\n          bestPractices += `- **No Hardcoded Secrets**: Never hardcode API keys or passwords\\n`;\n          bestPractices += `- **Credential Scope**: Use least-privilege principle for credentials\\n`;\n          bestPractices += `- **Credential Rotation**: Regularly rotate API keys and tokens\\n`;\n          bestPractices += `- **Environment Separation**: Use different credentials for different environments\\n\\n`;\n\n          bestPractices += `### 2. Data Security\\n`;\n          bestPractices += `- **Data Encryption**: Encrypt sensitive data in transit and at rest\\n`;\n          bestPractices += `- **Input Sanitization**: Sanitize all external inputs\\n`;\n          bestPractices += `- **Output Filtering**: Filter sensitive data from logs and responses\\n`;\n          bestPractices += `- **Access Control**: Implement proper access controls\\n\\n`;\n\n          bestPractices += `### 3. Network Security\\n`;\n          bestPractices += `- **HTTPS Only**: Always use HTTPS for external communications\\n`;\n          bestPractices += `- **Certificate Validation**: Validate SSL certificates\\n`;\n          bestPractices += `- **IP Whitelisting**: Restrict access to known IP addresses\\n`;\n          bestPractices += `- **Webhook Security**: Validate webhook signatures\\n\\n`;\n\n          if (args.includeExamples) {\n            bestPractices += `### Example: Secure API Request\\n`;\n            bestPractices += `\\`\\`\\`javascript\\n`;\n            bestPractices += `// In Code Node - Input Validation\\n`;\n            bestPractices += `const email = $input.first().json.email;\\n`;\n            bestPractices += `if (!email || !email.match(/^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/)) {\\n`;\n            bestPractices += `  throw new Error('Invalid email format');\\n`;\n            bestPractices += `}\\n`;\n            bestPractices += `\\`\\`\\`\\n\\n`;\n          }\n        }\n\n        // Maintainability best practices\n        if (args.category === 'maintainability' || args.category === 'all') {\n          bestPractices += `## 🔧 Maintainability Best Practices\\n\\n`;\n\n          bestPractices += `### 1. Documentation\\n`;\n          bestPractices += `- **Workflow Description**: Clear description of workflow purpose\\n`;\n          bestPractices += `- **Node Documentation**: Document complex logic and decision points\\n`;\n          bestPractices += `- **Change Log**: Maintain a record of significant changes\\n`;\n          bestPractices += `- **Dependencies**: Document external service dependencies\\n\\n`;\n\n          bestPractices += `### 2. Version Control\\n`;\n          bestPractices += `- **Backup Strategy**: Regular workflow backups\\n`;\n          bestPractices += `- **Change Tracking**: Track workflow modifications\\n`;\n          bestPractices += `- **Environment Management**: Separate development and production workflows\\n`;\n          bestPractices += `- **Rollback Plan**: Maintain ability to rollback changes\\n\\n`;\n\n          bestPractices += `### 3. Monitoring & Observability\\n`;\n          bestPractices += `- **Error Monitoring**: Implement comprehensive error tracking\\n`;\n          bestPractices += `- **Performance Metrics**: Track execution times and success rates\\n`;\n          bestPractices += `- **Health Checks**: Regular workflow health validation\\n`;\n          bestPractices += `- **Alerting**: Set up alerts for critical failures\\n\\n`;\n\n          bestPractices += `### 4. Testing Strategy\\n`;\n          bestPractices += `- **Test Data**: Use realistic but non-sensitive test data\\n`;\n          bestPractices += `- **Edge Cases**: Test error conditions and edge cases\\n`;\n          bestPractices += `- **Integration Testing**: Test with actual external services\\n`;\n          bestPractices += `- **Regression Testing**: Test after modifications\\n\\n`;\n\n          if (args.includeExamples) {\n            bestPractices += `### Example: Workflow Documentation Template\\n`;\n            bestPractices += `\\`\\`\\`\\n`;\n            bestPractices += `Purpose: Process customer orders from e-commerce platform\\n`;\n            bestPractices += `Trigger: Webhook from Shopify on new order\\n`;\n            bestPractices += `Dependencies: Shopify API, Email service, Database\\n`;\n            bestPractices += `Error Handling: Slack notifications for failures\\n`;\n            bestPractices += `Last Updated: 2024-01-15 by John Doe\\n`;\n            bestPractices += `\\`\\`\\`\\n\\n`;\n          }\n        }\n\n        // Common anti-patterns to avoid\n        bestPractices += `## ❌ Common Anti-Patterns to Avoid\\n\\n`;\n        bestPractices += `### 1. Structure Anti-Patterns\\n`;\n        bestPractices += `- **Monolithic Workflows**: Workflows with 50+ nodes\\n`;\n        bestPractices += `- **Deep Nesting**: Excessive IF/Switch nesting\\n`;\n        bestPractices += `- **Unclear Dependencies**: Complex node interconnections\\n`;\n        bestPractices += `- **Poor Naming**: Generic or technical node names\\n\\n`;\n\n        bestPractices += `### 2. Performance Anti-Patterns\\n`;\n        bestPractices += `- **Sequential HTTP Calls**: Making sequential API calls when parallel is possible\\n`;\n        bestPractices += `- **Memory Leaks**: Not clearing large variables in code nodes\\n`;\n        bestPractices += `- **Inefficient Loops**: Processing items one-by-one instead of batching\\n`;\n        bestPractices += `- **No Caching**: Repeatedly fetching the same data\\n\\n`;\n\n        bestPractices += `### 3. Security Anti-Patterns\\n`;\n        bestPractices += `- **Hardcoded Credentials**: API keys in workflow configuration\\n`;\n        bestPractices += `- **Logging Sensitive Data**: Including passwords or tokens in logs\\n`;\n        bestPractices += `- **Unvalidated Input**: Processing external data without validation\\n`;\n        bestPractices += `- **Overprivileged Access**: Using admin credentials for routine operations\\n\\n`;\n\n        // Quick reference checklist\n        bestPractices += `## ✅ Quick Reference Checklist\\n\\n`;\n        bestPractices += `### Pre-Deployment Checklist\\n`;\n        bestPractices += `- [ ] Workflow has clear, descriptive name and documentation\\n`;\n        bestPractices += `- [ ] All nodes have descriptive, business-focused names\\n`;\n        bestPractices += `- [ ] Error handling implemented for critical operations\\n`;\n        bestPractices += `- [ ] No hardcoded credentials or sensitive data\\n`;\n        bestPractices += `- [ ] Input validation implemented for external data\\n`;\n        bestPractices += `- [ ] Appropriate timeouts configured for HTTP requests\\n`;\n        bestPractices += `- [ ] Monitoring and alerting configured\\n`;\n        bestPractices += `- [ ] Workflow tested with realistic data\\n`;\n        bestPractices += `- [ ] Performance requirements validated\\n`;\n        bestPractices += `- [ ] Security review completed\\n\\n`;\n\n        bestPractices += `## 🔧 Implementation Tools\\n`;\n        bestPractices += `- Use \\`analyze-workflow-complexity\\` to assess workflow structure\\n`;\n        bestPractices += `- Use \\`get-optimization-suggestions\\` for specific improvements\\n`;\n        bestPractices += `- Use \\`check-workflow-health\\` for comprehensive health checks\\n`;\n        bestPractices += `- Use \\`search-workflow-templates\\` for proven patterns\\n`;\n\n        return bestPractices;\n      } catch (error: any) {\n        throw new UserError(`Failed to get best practices: ${error.message}`);\n      }\n    },\n  });\n}\n\n// Helper functions for pattern analysis\nfunction analyzeIntegrationPattern(workflow: N8nWorkflow): { score: number; details: string[] } {\n  const nodes = workflow.nodes || [];\n  const _nodeTypes = nodes.map(node => node.type.toLowerCase());\n  const details: string[] = [];\n  let score = 0;\n\n  // Check for HTTP/API nodes\n  const apiNodes = _nodeTypes.filter(\n    type => type.includes('http') || type.includes('webhook') || type.includes('api')\n  ).length;\n\n  if (apiNodes > 0) {\n    score += 30;\n    details.push(`${apiNodes} API integration node(s) detected`);\n  }\n\n  // Check for data transformation\n  const transformNodes = _nodeTypes.filter(\n    type => type.includes('set') || type.includes('code') || type.includes('function')\n  ).length;\n\n  if (transformNodes > 0) {\n    score += 20;\n    details.push(`${transformNodes} data transformation node(s) found`);\n  }\n\n  // Check for error handling\n  const errorNodes = nodes.filter(\n    node => node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error')\n  ).length;\n\n  if (errorNodes > 0) {\n    score += 25;\n    details.push(`Error handling implemented with ${errorNodes} node(s)`);\n  }\n\n  // Check for authentication\n  const authNodes = nodes.filter(\n    node => node.credentials && Object.keys(node.credentials).length > 0\n  ).length;\n\n  if (authNodes > 0) {\n    score += 25;\n    details.push(`Authentication configured for ${authNodes} node(s)`);\n  }\n\n  return { score, details };\n}\n\nfunction analyzeDataTransformationPattern(workflow: N8nWorkflow): {\n  score: number;\n  details: string[];\n} {\n  const nodes = workflow.nodes || [];\n  const _nodeTypes = nodes.map(node => node.type.toLowerCase());\n  const details: string[] = [];\n  let score = 0;\n\n  // Check for data processing nodes\n  const dataNodes = _nodeTypes.filter(\n    type => type.includes('set') || type.includes('merge') || type.includes('split')\n  ).length;\n\n  if (dataNodes > 0) {\n    score += 40;\n    details.push(`${dataNodes} data processing node(s) identified`);\n  }\n\n  // Check for validation\n  const validationNodes = _nodeTypes.filter(\n    type => type.includes('if') || type.includes('switch') || type.includes('filter')\n  ).length;\n\n  if (validationNodes > 0) {\n    score += 30;\n    details.push(`${validationNodes} validation/filtering node(s) found`);\n  }\n\n  // Check for custom transformation logic\n  const codeNodes = _nodeTypes.filter(\n    type => type.includes('code') || type.includes('function')\n  ).length;\n\n  if (codeNodes > 0) {\n    score += 30;\n    details.push(`${codeNodes} custom transformation node(s) implemented`);\n  }\n\n  return { score, details };\n}\n\nfunction analyzeErrorHandlingPattern(workflow: N8nWorkflow): { score: number; details: string[] } {\n  const nodes = workflow.nodes || [];\n  const details: string[] = [];\n  let score = 0;\n\n  // Check for error trigger nodes\n  const errorTriggers = nodes.filter(\n    node =>\n      node.type.toLowerCase().includes('error') ||\n      (node.parameters && JSON.stringify(node.parameters).toLowerCase().includes('error'))\n  ).length;\n\n  if (errorTriggers > 0) {\n    score += 40;\n    details.push(`${errorTriggers} error trigger/handler node(s) configured`);\n  }\n\n  // Check for try-catch patterns in code nodes\n  const codeNodes = nodes.filter(node => node.type.toLowerCase().includes('code'));\n  const tryCatchNodes = codeNodes.filter(\n    node => node.parameters && JSON.stringify(node.parameters).includes('try')\n  ).length;\n\n  if (tryCatchNodes > 0) {\n    score += 30;\n    details.push(`${tryCatchNodes} code node(s) with try-catch patterns`);\n  }\n\n  // Check for notification nodes (error alerts)\n  const notificationNodes = nodes.filter(node => {\n    const type = node.type.toLowerCase();\n    return type.includes('slack') || type.includes('email') || type.includes('webhook');\n  }).length;\n\n  if (notificationNodes > 0) {\n    score += 30;\n    details.push(`${notificationNodes} notification node(s) for error alerting`);\n  }\n\n  return { score, details };\n}\n\nfunction analyzeNotificationPattern(workflow: N8nWorkflow): { score: number; details: string[] } {\n  const nodes = workflow.nodes || [];\n  const _nodeTypes = nodes.map(node => node.type.toLowerCase());\n  const details: string[] = [];\n  let score = 0;\n\n  // Check for notification nodes\n  const notificationNodes = _nodeTypes.filter(\n    type =>\n      type.includes('slack') ||\n      type.includes('email') ||\n      type.includes('sms') ||\n      type.includes('webhook') ||\n      type.includes('discord')\n  ).length;\n\n  if (notificationNodes > 0) {\n    score += 50;\n    details.push(`${notificationNodes} notification channel(s) configured`);\n  }\n\n  // Check for conditional notification logic\n  const conditionalNodes = _nodeTypes.filter(\n    type => type.includes('if') || type.includes('switch')\n  ).length;\n\n  if (conditionalNodes > 0 && notificationNodes > 0) {\n    score += 25;\n    details.push(`Conditional notification logic with ${conditionalNodes} decision node(s)`);\n  }\n\n  // Check for message formatting\n  const formatNodes = _nodeTypes.filter(\n    type => type.includes('set') || type.includes('code')\n  ).length;\n\n  if (formatNodes > 0 && notificationNodes > 0) {\n    score += 25;\n    details.push(`Message formatting implemented with ${formatNodes} node(s)`);\n  }\n\n  return { score, details };\n}\n\nfunction analyzeAIProcessingPattern(workflow: N8nWorkflow): { score: number; details: string[] } {\n  const nodes = workflow.nodes || [];\n  const _nodeTypes = nodes.map(node => node.type.toLowerCase());\n  const details: string[] = [];\n  let score = 0;\n\n  // Check for AI nodes\n  const aiNodes = _nodeTypes.filter(\n    type =>\n      type.includes('ai') ||\n      type.includes('openai') ||\n      type.includes('anthropic') ||\n      type.includes('claude') ||\n      type.includes('gpt') ||\n      type.includes('llama')\n  ).length;\n\n  if (aiNodes > 0) {\n    score += 50;\n    details.push(`${aiNodes} AI processing node(s) identified`);\n  }\n\n  // Check for data preparation\n  const prepNodes = _nodeTypes.filter(\n    type => type.includes('set') || type.includes('code') || type.includes('split')\n  ).length;\n\n  if (prepNodes > 0 && aiNodes > 0) {\n    score += 25;\n    details.push(`Data preparation implemented with ${prepNodes} node(s)`);\n  }\n\n  // Check for AI result processing\n  const processNodes = nodes.filter(\n    node => node.type.toLowerCase().includes('merge') || node.type.toLowerCase().includes('if')\n  ).length;\n\n  if (processNodes > 0 && aiNodes > 0) {\n    score += 25;\n    details.push(`AI result processing with ${processNodes} node(s)`);\n  }\n\n  return { score, details };\n}\n"],"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","ignoreList":[]}