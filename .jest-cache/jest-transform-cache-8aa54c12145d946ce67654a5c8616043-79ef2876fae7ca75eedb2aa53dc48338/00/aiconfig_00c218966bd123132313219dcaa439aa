facdff1eda5a9bea5d2ba2a86625302a
"use strict";

/* istanbul ignore next */
function cov_nop76s7lu() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts";
  var hash = "88a150fbd1bc39bb5f8aebd6c8068c9caec631d3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 50
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 27
        },
        end: {
          line: 11,
          column: 2
        }
      },
      "5": {
        start: {
          line: 12,
          column: 27
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "6": {
        start: {
          line: 18,
          column: 31
        },
        end: {
          line: 24,
          column: 2
        }
      },
      "7": {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 31,
          column: 2
        }
      },
      "8": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 111,
          column: 7
        }
      },
      "9": {
        start: {
          line: 49,
          column: 27
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "10": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "11": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 104
        }
      },
      "12": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "13": {
        start: {
          line: 54,
          column: 36
        },
        end: {
          line: 58,
          column: 17
        }
      },
      "14": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 105,
          column: 17
        }
      },
      "15": {
        start: {
          line: 61,
          column: 37
        },
        end: {
          line: 61,
          column: 78
        }
      },
      "16": {
        start: {
          line: 62,
          column: 36
        },
        end: {
          line: 64,
          column: 68
        }
      },
      "17": {
        start: {
          line: 62,
          column: 67
        },
        end: {
          line: 64,
          column: 61
        }
      },
      "18": {
        start: {
          line: 62,
          column: 94
        },
        end: {
          line: 64,
          column: 60
        }
      },
      "19": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "20": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 103
        }
      },
      "21": {
        start: {
          line: 68,
          column: 33
        },
        end: {
          line: 68,
          column: 105
        }
      },
      "22": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 80,
          column: 23
        }
      },
      "23": {
        start: {
          line: 70,
          column: 24
        },
        end: {
          line: 70,
          column: 84
        }
      },
      "24": {
        start: {
          line: 71,
          column: 24
        },
        end: {
          line: 71,
          column: 63
        }
      },
      "25": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 110
        }
      },
      "26": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 75,
          column: 25
        }
      },
      "27": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 79
        }
      },
      "28": {
        start: {
          line: 76,
          column: 24
        },
        end: {
          line: 78,
          column: 25
        }
      },
      "29": {
        start: {
          line: 77,
          column: 28
        },
        end: {
          line: 77,
          column: 91
        }
      },
      "30": {
        start: {
          line: 79,
          column: 24
        },
        end: {
          line: 79,
          column: 39
        }
      },
      "31": {
        start: {
          line: 81,
          column: 20
        },
        end: {
          line: 81,
          column: 34
        }
      },
      "32": {
        start: {
          line: 85,
          column: 38
        },
        end: {
          line: 85,
          column: 79
        }
      },
      "33": {
        start: {
          line: 86,
          column: 39
        },
        end: {
          line: 86,
          column: 40
        }
      },
      "34": {
        start: {
          line: 87,
          column: 33
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "35": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 100,
          column: 21
        }
      },
      "36": {
        start: {
          line: 89,
          column: 40
        },
        end: {
          line: 91,
          column: 72
        }
      },
      "37": {
        start: {
          line: 89,
          column: 71
        },
        end: {
          line: 91,
          column: 65
        }
      },
      "38": {
        start: {
          line: 89,
          column: 98
        },
        end: {
          line: 91,
          column: 64
        }
      },
      "39": {
        start: {
          line: 92,
          column: 24
        },
        end: {
          line: 99,
          column: 25
        }
      },
      "40": {
        start: {
          line: 93,
          column: 28
        },
        end: {
          line: 93,
          column: 59
        }
      },
      "41": {
        start: {
          line: 94,
          column: 28
        },
        end: {
          line: 94,
          column: 110
        }
      },
      "42": {
        start: {
          line: 95,
          column: 28
        },
        end: {
          line: 97,
          column: 31
        }
      },
      "43": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 96,
          column: 78
        }
      },
      "44": {
        start: {
          line: 98,
          column: 28
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "45": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 103,
          column: 21
        }
      },
      "46": {
        start: {
          line: 102,
          column: 24
        },
        end: {
          line: 102,
          column: 69
        }
      },
      "47": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 80
        }
      },
      "48": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 91
        }
      },
      "49": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 185,
          column: 7
        }
      },
      "50": {
        start: {
          line: 128,
          column: 27
        },
        end: {
          line: 128,
          column: 38
        }
      },
      "51": {
        start: {
          line: 129,
          column: 12
        },
        end: {
          line: 131,
          column: 13
        }
      },
      "52": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 130,
          column: 104
        }
      },
      "53": {
        start: {
          line: 132,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "54": {
        start: {
          line: 133,
          column: 33
        },
        end: {
          line: 133,
          column: 74
        }
      },
      "55": {
        start: {
          line: 134,
          column: 29
        },
        end: {
          line: 134,
          column: 76
        }
      },
      "56": {
        start: {
          line: 134,
          column: 55
        },
        end: {
          line: 134,
          column: 75
        }
      },
      "57": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 137,
          column: 17
        }
      },
      "58": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 126
        }
      },
      "59": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 147,
          column: 17
        }
      },
      "60": {
        start: {
          line: 149,
          column: 33
        },
        end: {
          line: 161,
          column: 17
        }
      },
      "61": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 179,
          column: 107
        }
      },
      "62": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 103
        }
      },
      "63": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 228,
          column: 7
        }
      },
      "64": {
        start: {
          line: 199,
          column: 27
        },
        end: {
          line: 199,
          column: 38
        }
      },
      "65": {
        start: {
          line: 200,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "66": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 104
        }
      },
      "67": {
        start: {
          line: 203,
          column: 12
        },
        end: {
          line: 226,
          column: 13
        }
      },
      "68": {
        start: {
          line: 204,
          column: 33
        },
        end: {
          line: 204,
          column: 74
        }
      },
      "69": {
        start: {
          line: 205,
          column: 34
        },
        end: {
          line: 205,
          column: 86
        }
      },
      "70": {
        start: {
          line: 205,
          column: 65
        },
        end: {
          line: 205,
          column: 85
        }
      },
      "71": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 208,
          column: 17
        }
      },
      "72": {
        start: {
          line: 207,
          column: 20
        },
        end: {
          line: 207,
          column: 126
        }
      },
      "73": {
        start: {
          line: 210,
          column: 16
        },
        end: {
          line: 215,
          column: 17
        }
      },
      "74": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 214,
          column: 22
        }
      },
      "75": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "76": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 222,
          column: 103
        }
      },
      "77": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 106
        }
      },
      "78": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 289,
          column: 7
        }
      },
      "79": {
        start: {
          line: 242,
          column: 27
        },
        end: {
          line: 242,
          column: 38
        }
      },
      "80": {
        start: {
          line: 243,
          column: 12
        },
        end: {
          line: 245,
          column: 13
        }
      },
      "81": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 104
        }
      },
      "82": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "83": {
        start: {
          line: 247,
          column: 33
        },
        end: {
          line: 247,
          column: 74
        }
      },
      "84": {
        start: {
          line: 248,
          column: 29
        },
        end: {
          line: 248,
          column: 76
        }
      },
      "85": {
        start: {
          line: 248,
          column: 55
        },
        end: {
          line: 248,
          column: 75
        }
      },
      "86": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 251,
          column: 17
        }
      },
      "87": {
        start: {
          line: 250,
          column: 20
        },
        end: {
          line: 250,
          column: 126
        }
      },
      "88": {
        start: {
          line: 253,
          column: 35
        },
        end: {
          line: 269,
          column: 17
        }
      },
      "89": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 283,
          column: 123
        }
      },
      "90": {
        start: {
          line: 286,
          column: 16
        },
        end: {
          line: 286,
          column: 92
        }
      },
      "91": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 341,
          column: 7
        }
      },
      "92": {
        start: {
          line: 303,
          column: 27
        },
        end: {
          line: 303,
          column: 38
        }
      },
      "93": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 306,
          column: 13
        }
      },
      "94": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 104
        }
      },
      "95": {
        start: {
          line: 307,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "96": {
        start: {
          line: 308,
          column: 33
        },
        end: {
          line: 308,
          column: 74
        }
      },
      "97": {
        start: {
          line: 309,
          column: 34
        },
        end: {
          line: 309,
          column: 86
        }
      },
      "98": {
        start: {
          line: 309,
          column: 65
        },
        end: {
          line: 309,
          column: 85
        }
      },
      "99": {
        start: {
          line: 310,
          column: 16
        },
        end: {
          line: 312,
          column: 17
        }
      },
      "100": {
        start: {
          line: 311,
          column: 20
        },
        end: {
          line: 311,
          column: 126
        }
      },
      "101": {
        start: {
          line: 314,
          column: 36
        },
        end: {
          line: 318,
          column: 17
        }
      },
      "102": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 324,
          column: 17
        }
      },
      "103": {
        start: {
          line: 320,
          column: 20
        },
        end: {
          line: 323,
          column: 22
        }
      },
      "104": {
        start: {
          line: 326,
          column: 16
        },
        end: {
          line: 329,
          column: 19
        }
      },
      "105": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 335,
          column: 107
        }
      },
      "106": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 96
        }
      },
      "107": {
        start: {
          line: 343,
          column: 4
        },
        end: {
          line: 400,
          column: 7
        }
      },
      "108": {
        start: {
          line: 355,
          column: 27
        },
        end: {
          line: 355,
          column: 38
        }
      },
      "109": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 358,
          column: 13
        }
      },
      "110": {
        start: {
          line: 357,
          column: 16
        },
        end: {
          line: 357,
          column: 104
        }
      },
      "111": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 398,
          column: 13
        }
      },
      "112": {
        start: {
          line: 360,
          column: 33
        },
        end: {
          line: 360,
          column: 74
        }
      },
      "113": {
        start: {
          line: 361,
          column: 34
        },
        end: {
          line: 361,
          column: 86
        }
      },
      "114": {
        start: {
          line: 361,
          column: 65
        },
        end: {
          line: 361,
          column: 85
        }
      },
      "115": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 364,
          column: 17
        }
      },
      "116": {
        start: {
          line: 363,
          column: 20
        },
        end: {
          line: 363,
          column: 126
        }
      },
      "117": {
        start: {
          line: 366,
          column: 37
        },
        end: {
          line: 373,
          column: 17
        }
      },
      "118": {
        start: {
          line: 374,
          column: 16
        },
        end: {
          line: 379,
          column: 17
        }
      },
      "119": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 378,
          column: 22
        }
      },
      "120": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 384,
          column: 19
        }
      },
      "121": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 394,
          column: 85
        }
      },
      "122": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 97
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAIConfigTools",
        decl: {
          start: {
            line: 33,
            column: 9
          },
          end: {
            line: 33,
            column: 28
          }
        },
        loc: {
          start: {
            line: 33,
            column: 48
          },
          end: {
            line: 401,
            column: 1
          }
        },
        line: 33
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 48,
            column: 17
          },
          end: {
            line: 48,
            column: 18
          }
        },
        loc: {
          start: {
            line: 48,
            column: 33
          },
          end: {
            line: 110,
            column: 9
          }
        },
        line: 48
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 62,
            column: 59
          },
          end: {
            line: 62,
            column: 60
          }
        },
        loc: {
          start: {
            line: 62,
            column: 67
          },
          end: {
            line: 64,
            column: 61
          }
        },
        line: 62
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 62,
            column: 84
          },
          end: {
            line: 62,
            column: 85
          }
        },
        loc: {
          start: {
            line: 62,
            column: 94
          },
          end: {
            line: 64,
            column: 60
          }
        },
        line: 62
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 36
          },
          end: {
            line: 69,
            column: 37
          }
        },
        loc: {
          start: {
            line: 69,
            column: 53
          },
          end: {
            line: 80,
            column: 21
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 89,
            column: 63
          },
          end: {
            line: 89,
            column: 64
          }
        },
        loc: {
          start: {
            line: 89,
            column: 71
          },
          end: {
            line: 91,
            column: 65
          }
        },
        line: 89
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 89,
            column: 88
          },
          end: {
            line: 89,
            column: 89
          }
        },
        loc: {
          start: {
            line: 89,
            column: 98
          },
          end: {
            line: 91,
            column: 64
          }
        },
        line: 89
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 95,
            column: 44
          },
          end: {
            line: 95,
            column: 45
          }
        },
        loc: {
          start: {
            line: 95,
            column: 52
          },
          end: {
            line: 97,
            column: 29
          }
        },
        line: 95
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 127,
            column: 17
          },
          end: {
            line: 127,
            column: 18
          }
        },
        loc: {
          start: {
            line: 127,
            column: 33
          },
          end: {
            line: 184,
            column: 9
          }
        },
        line: 127
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 134,
            column: 50
          },
          end: {
            line: 134,
            column: 51
          }
        },
        loc: {
          start: {
            line: 134,
            column: 55
          },
          end: {
            line: 134,
            column: 75
          }
        },
        line: 134
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 198,
            column: 17
          },
          end: {
            line: 198,
            column: 18
          }
        },
        loc: {
          start: {
            line: 198,
            column: 33
          },
          end: {
            line: 227,
            column: 9
          }
        },
        line: 198
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 205,
            column: 60
          },
          end: {
            line: 205,
            column: 61
          }
        },
        loc: {
          start: {
            line: 205,
            column: 65
          },
          end: {
            line: 205,
            column: 85
          }
        },
        line: 205
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 241,
            column: 17
          },
          end: {
            line: 241,
            column: 18
          }
        },
        loc: {
          start: {
            line: 241,
            column: 33
          },
          end: {
            line: 288,
            column: 9
          }
        },
        line: 241
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 248,
            column: 50
          },
          end: {
            line: 248,
            column: 51
          }
        },
        loc: {
          start: {
            line: 248,
            column: 55
          },
          end: {
            line: 248,
            column: 75
          }
        },
        line: 248
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 302,
            column: 17
          },
          end: {
            line: 302,
            column: 18
          }
        },
        loc: {
          start: {
            line: 302,
            column: 33
          },
          end: {
            line: 340,
            column: 9
          }
        },
        line: 302
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 309,
            column: 60
          },
          end: {
            line: 309,
            column: 61
          }
        },
        loc: {
          start: {
            line: 309,
            column: 65
          },
          end: {
            line: 309,
            column: 85
          }
        },
        line: 309
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 354,
            column: 17
          },
          end: {
            line: 354,
            column: 18
          }
        },
        loc: {
          start: {
            line: 354,
            column: 33
          },
          end: {
            line: 399,
            column: 9
          }
        },
        line: 354
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 361,
            column: 60
          },
          end: {
            line: 361,
            column: 61
          }
        },
        loc: {
          start: {
            line: 361,
            column: 65
          },
          end: {
            line: 361,
            column: 85
          }
        },
        line: 361
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 12
          },
          end: {
            line: 52,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 16
          },
          end: {
            line: 105,
            column: 17
          }
        }, {
          start: {
            line: 83,
            column: 21
          },
          end: {
            line: 105,
            column: 17
          }
        }],
        line: 59
      },
      "2": {
        loc: {
          start: {
            line: 62,
            column: 36
          },
          end: {
            line: 64,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 36
          },
          end: {
            line: 64,
            column: 62
          }
        }, {
          start: {
            line: 64,
            column: 66
          },
          end: {
            line: 64,
            column: 68
          }
        }],
        line: 62
      },
      "3": {
        loc: {
          start: {
            line: 62,
            column: 94
          },
          end: {
            line: 64,
            column: 60
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 94
          },
          end: {
            line: 62,
            column: 135
          }
        }, {
          start: {
            line: 63,
            column: 24
          },
          end: {
            line: 63,
            column: 63
          }
        }, {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 64,
            column: 60
          }
        }],
        line: 62
      },
      "4": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "5": {
        loc: {
          start: {
            line: 72,
            column: 53
          },
          end: {
            line: 72,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 53
          },
          end: {
            line: 72,
            column: 71
          }
        }, {
          start: {
            line: 72,
            column: 75
          },
          end: {
            line: 72,
            column: 76
          }
        }],
        line: 72
      },
      "6": {
        loc: {
          start: {
            line: 72,
            column: 81
          },
          end: {
            line: 72,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 81
          },
          end: {
            line: 72,
            column: 99
          }
        }, {
          start: {
            line: 72,
            column: 103
          },
          end: {
            line: 72,
            column: 104
          }
        }],
        line: 72
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 75,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 75,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 78,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 24
          },
          end: {
            line: 78,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "9": {
        loc: {
          start: {
            line: 89,
            column: 40
          },
          end: {
            line: 91,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 40
          },
          end: {
            line: 91,
            column: 66
          }
        }, {
          start: {
            line: 91,
            column: 70
          },
          end: {
            line: 91,
            column: 72
          }
        }],
        line: 89
      },
      "10": {
        loc: {
          start: {
            line: 89,
            column: 98
          },
          end: {
            line: 91,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 98
          },
          end: {
            line: 89,
            column: 139
          }
        }, {
          start: {
            line: 90,
            column: 28
          },
          end: {
            line: 90,
            column: 67
          }
        }, {
          start: {
            line: 91,
            column: 28
          },
          end: {
            line: 91,
            column: 64
          }
        }],
        line: 89
      },
      "11": {
        loc: {
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 99,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 24
          },
          end: {
            line: 99,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 92
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 101,
            column: 20
          },
          end: {
            line: 103,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 129,
            column: 12
          },
          end: {
            line: 131,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 129
      },
      "14": {
        loc: {
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 137,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 16
          },
          end: {
            line: 137,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 32
          },
          end: {
            line: 143,
            column: 47
          }
        }, {
          start: {
            line: 143,
            column: 51
          },
          end: {
            line: 143,
            column: 53
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 33
          },
          end: {
            line: 144,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 33
          },
          end: {
            line: 144,
            column: 49
          }
        }, {
          start: {
            line: 144,
            column: 53
          },
          end: {
            line: 144,
            column: 55
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 146,
            column: 30
          },
          end: {
            line: 146,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 146,
            column: 30
          },
          end: {
            line: 146,
            column: 43
          }
        }, {
          start: {
            line: 146,
            column: 47
          },
          end: {
            line: 146,
            column: 52
          }
        }],
        line: 146
      },
      "18": {
        loc: {
          start: {
            line: 152,
            column: 31
          },
          end: {
            line: 152,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 152,
            column: 31
          },
          end: {
            line: 152,
            column: 54
          }
        }, {
          start: {
            line: 152,
            column: 58
          },
          end: {
            line: 152,
            column: 62
          }
        }],
        line: 152
      },
      "19": {
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 153,
            column: 66
          }
        }, {
          start: {
            line: 153,
            column: 70
          },
          end: {
            line: 153,
            column: 74
          }
        }],
        line: 153
      },
      "20": {
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 154,
            column: 62
          }
        }, {
          start: {
            line: 154,
            column: 66
          },
          end: {
            line: 154,
            column: 94
          }
        }, {
          start: {
            line: 154,
            column: 98
          },
          end: {
            line: 154,
            column: 102
          }
        }],
        line: 154
      },
      "21": {
        loc: {
          start: {
            line: 155,
            column: 38
          },
          end: {
            line: 155,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 38
          },
          end: {
            line: 155,
            column: 68
          }
        }, {
          start: {
            line: 155,
            column: 72
          },
          end: {
            line: 155,
            column: 103
          }
        }, {
          start: {
            line: 155,
            column: 107
          },
          end: {
            line: 155,
            column: 111
          }
        }],
        line: 155
      },
      "22": {
        loc: {
          start: {
            line: 156,
            column: 36
          },
          end: {
            line: 156,
            column: 100
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 156,
            column: 36
          },
          end: {
            line: 156,
            column: 60
          }
        }, {
          start: {
            line: 156,
            column: 64
          },
          end: {
            line: 156,
            column: 92
          }
        }, {
          start: {
            line: 156,
            column: 96
          },
          end: {
            line: 156,
            column: 100
          }
        }],
        line: 156
      },
      "23": {
        loc: {
          start: {
            line: 157,
            column: 32
          },
          end: {
            line: 157,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 157,
            column: 32
          },
          end: {
            line: 157,
            column: 56
          }
        }, {
          start: {
            line: 157,
            column: 60
          },
          end: {
            line: 157,
            column: 64
          }
        }],
        line: 157
      },
      "24": {
        loc: {
          start: {
            line: 158,
            column: 31
          },
          end: {
            line: 158,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 31
          },
          end: {
            line: 158,
            column: 54
          }
        }, {
          start: {
            line: 158,
            column: 58
          },
          end: {
            line: 158,
            column: 62
          }
        }],
        line: 158
      },
      "25": {
        loc: {
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 159,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 33
          },
          end: {
            line: 159,
            column: 58
          }
        }, {
          start: {
            line: 159,
            column: 62
          },
          end: {
            line: 159,
            column: 66
          }
        }],
        line: 159
      },
      "26": {
        loc: {
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 36
          },
          end: {
            line: 168,
            column: 58
          }
        }, {
          start: {
            line: 168,
            column: 62
          },
          end: {
            line: 168,
            column: 63
          }
        }],
        line: 168
      },
      "27": {
        loc: {
          start: {
            line: 168,
            column: 68
          },
          end: {
            line: 168,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 168,
            column: 68
          },
          end: {
            line: 168,
            column: 90
          }
        }, {
          start: {
            line: 168,
            column: 94
          },
          end: {
            line: 168,
            column: 95
          }
        }],
        line: 168
      },
      "28": {
        loc: {
          start: {
            line: 170,
            column: 32
          },
          end: {
            line: 170,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 32
          },
          end: {
            line: 170,
            column: 57
          }
        }, {
          start: {
            line: 170,
            column: 61
          },
          end: {
            line: 170,
            column: 77
          }
        }],
        line: 170
      },
      "29": {
        loc: {
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 171,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 38
          },
          end: {
            line: 171,
            column: 69
          }
        }, {
          start: {
            line: 171,
            column: 73
          },
          end: {
            line: 171,
            column: 82
          }
        }],
        line: 171
      },
      "30": {
        loc: {
          start: {
            line: 172,
            column: 37
          },
          end: {
            line: 172,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 172,
            column: 37
          },
          end: {
            line: 172,
            column: 66
          }
        }, {
          start: {
            line: 172,
            column: 70
          },
          end: {
            line: 172,
            column: 79
          }
        }],
        line: 172
      },
      "31": {
        loc: {
          start: {
            line: 173,
            column: 40
          },
          end: {
            line: 173,
            column: 99
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 173,
            column: 75
          },
          end: {
            line: 173,
            column: 87
          }
        }, {
          start: {
            line: 173,
            column: 90
          },
          end: {
            line: 173,
            column: 99
          }
        }],
        line: 173
      },
      "32": {
        loc: {
          start: {
            line: 174,
            column: 38
          },
          end: {
            line: 174,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 174,
            column: 71
          },
          end: {
            line: 174,
            column: 83
          }
        }, {
          start: {
            line: 174,
            column: 86
          },
          end: {
            line: 174,
            column: 95
          }
        }],
        line: 174
      },
      "33": {
        loc: {
          start: {
            line: 175,
            column: 33
          },
          end: {
            line: 175,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 175,
            column: 33
          },
          end: {
            line: 175,
            column: 59
          }
        }, {
          start: {
            line: 175,
            column: 63
          },
          end: {
            line: 175,
            column: 79
          }
        }],
        line: 175
      },
      "34": {
        loc: {
          start: {
            line: 176,
            column: 32
          },
          end: {
            line: 176,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 176,
            column: 60
          },
          end: {
            line: 176,
            column: 72
          }
        }, {
          start: {
            line: 176,
            column: 75
          },
          end: {
            line: 176,
            column: 84
          }
        }],
        line: 176
      },
      "35": {
        loc: {
          start: {
            line: 177,
            column: 34
          },
          end: {
            line: 177,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 64
          },
          end: {
            line: 177,
            column: 76
          }
        }, {
          start: {
            line: 177,
            column: 79
          },
          end: {
            line: 177,
            column: 88
          }
        }],
        line: 177
      },
      "36": {
        loc: {
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 200,
            column: 12
          },
          end: {
            line: 202,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 200
      },
      "37": {
        loc: {
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 16
          },
          end: {
            line: 208,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "38": {
        loc: {
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 206,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 206,
            column: 20
          },
          end: {
            line: 206,
            column: 36
          }
        }, {
          start: {
            line: 206,
            column: 40
          },
          end: {
            line: 206,
            column: 63
          }
        }],
        line: 206
      },
      "39": {
        loc: {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 215,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "40": {
        loc: {
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 12
          },
          end: {
            line: 245,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      },
      "41": {
        loc: {
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 16
          },
          end: {
            line: 251,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "42": {
        loc: {
          start: {
            line: 258,
            column: 32
          },
          end: {
            line: 258,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 32
          },
          end: {
            line: 258,
            column: 47
          }
        }, {
          start: {
            line: 258,
            column: 51
          },
          end: {
            line: 258,
            column: 53
          }
        }],
        line: 258
      },
      "43": {
        loc: {
          start: {
            line: 259,
            column: 27
          },
          end: {
            line: 259,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 27
          },
          end: {
            line: 259,
            column: 49
          }
        }, {
          start: {
            line: 259,
            column: 53
          },
          end: {
            line: 259,
            column: 62
          }
        }],
        line: 259
      },
      "44": {
        loc: {
          start: {
            line: 279,
            column: 39
          },
          end: {
            line: 279,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 279,
            column: 82
          },
          end: {
            line: 279,
            column: 85
          }
        }, {
          start: {
            line: 279,
            column: 88
          },
          end: {
            line: 279,
            column: 91
          }
        }],
        line: 279
      },
      "45": {
        loc: {
          start: {
            line: 280,
            column: 47
          },
          end: {
            line: 280,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 97
          },
          end: {
            line: 280,
            column: 100
          }
        }, {
          start: {
            line: 280,
            column: 103
          },
          end: {
            line: 280,
            column: 106
          }
        }],
        line: 280
      },
      "46": {
        loc: {
          start: {
            line: 281,
            column: 51
          },
          end: {
            line: 281,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 105
          },
          end: {
            line: 281,
            column: 108
          }
        }, {
          start: {
            line: 281,
            column: 111
          },
          end: {
            line: 281,
            column: 114
          }
        }],
        line: 281
      },
      "47": {
        loc: {
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 12
          },
          end: {
            line: 306,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 304
      },
      "48": {
        loc: {
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 16
          },
          end: {
            line: 312,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "49": {
        loc: {
          start: {
            line: 310,
            column: 20
          },
          end: {
            line: 310,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 20
          },
          end: {
            line: 310,
            column: 36
          }
        }, {
          start: {
            line: 310,
            column: 40
          },
          end: {
            line: 310,
            column: 63
          }
        }],
        line: 310
      },
      "50": {
        loc: {
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 16
          },
          end: {
            line: 324,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "51": {
        loc: {
          start: {
            line: 334,
            column: 63
          },
          end: {
            line: 334,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 63
          },
          end: {
            line: 334,
            column: 78
          }
        }, {
          start: {
            line: 334,
            column: 82
          },
          end: {
            line: 334,
            column: 84
          }
        }],
        line: 334
      },
      "52": {
        loc: {
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 12
          },
          end: {
            line: 358,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "53": {
        loc: {
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 364,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 364,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "54": {
        loc: {
          start: {
            line: 362,
            column: 20
          },
          end: {
            line: 362,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 20
          },
          end: {
            line: 362,
            column: 36
          }
        }, {
          start: {
            line: 362,
            column: 40
          },
          end: {
            line: 362,
            column: 63
          }
        }],
        line: 362
      },
      "55": {
        loc: {
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 16
          },
          end: {
            line: 379,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "56": {
        loc: {
          start: {
            line: 388,
            column: 37
          },
          end: {
            line: 388,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 388,
            column: 37
          },
          end: {
            line: 388,
            column: 51
          }
        }, {
          start: {
            line: 388,
            column: 55
          },
          end: {
            line: 388,
            column: 66
          }
        }],
        line: 388
      },
      "57": {
        loc: {
          start: {
            line: 389,
            column: 42
          },
          end: {
            line: 389,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 389,
            column: 57
          },
          end: {
            line: 389,
            column: 62
          }
        }, {
          start: {
            line: 389,
            column: 65
          },
          end: {
            line: 389,
            column: 69
          }
        }],
        line: 389
      },
      "58": {
        loc: {
          start: {
            line: 394,
            column: 54
          },
          end: {
            line: 394,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 54
          },
          end: {
            line: 394,
            column: 66
          }
        }, {
          start: {
            line: 394,
            column: 70
          },
          end: {
            line: 394,
            column: 72
          }
        }],
        line: 394
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0],
      "21": [0, 0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nWorkflow, N8nNode } from '../types/n8n.js';\n\n// Zod schemas for AI configuration validation\nconst AINodeConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  config: z.record(z.any()),\n});\n\nconst AIPromptTestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  prompt: z.string().min(1, 'Prompt is required'),\n  sampleData: z.record(z.any()).optional(),\n});\n\nconst AIModelSelectionSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  modelType: z.enum(['openai', 'anthropic', 'local', 'custom']),\n  modelName: z.string().min(1, 'Model name is required'),\n  parameters: z.record(z.any()).optional(),\n});\n\nconst AIMemoryConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  memoryType: z.enum(['buffer', 'summary', 'conversation', 'vector']),\n  maxTokens: z.number().min(1).max(100000).optional(),\n  context: z.record(z.any()).optional(),\n});\n\n// Tool registration function for AI configuration tools\nexport function createAIConfigTools(getClient: () => N8nClient | null, server: any) {\n  // List AI nodes in workflow\n  server.addTool({\n    name: 'list-ai-nodes',\n    description: 'List all AI-enabled nodes in a specific workflow or across all workflows',\n    parameters: z.object({\n      workflowId: z.string().optional(),\n    }),\n    annotations: {\n      title: 'List AI Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const aiNodeTypes = [\n          'openai', 'anthropic', 'chatgpt', 'gpt3', 'gpt4', 'claude',\n          'mistral', 'llama', 'huggingface', 'cohere', 'ai-agent',\n          'ai-memory', 'ai-tool', 'ai-chain', 'langchain'\n        ];\n\n        if (args.workflowId) {\n          // Get specific workflow and analyze its nodes\n          const workflow = await client.getWorkflow(args.workflowId);\n          const aiNodes = workflow.nodes?.filter(node => \n            aiNodeTypes.some(aiType => \n              node.type?.toLowerCase().includes(aiType) || \n              node.name?.toLowerCase().includes('ai') ||\n              node.parameters?.model !== undefined\n            )\n          ) || [];\n\n          if (aiNodes.length === 0) {\n            return `No AI nodes found in workflow \"${workflow.name}\" (${args.workflowId})`;\n          }\n\n          let result = `Found ${aiNodes.length} AI node(s) in workflow \"${workflow.name}\":\\n\\n`;\n          aiNodes.forEach((node, index) => {\n            result += `${index + 1}. **${node.name}** (${node.type})\\n`;\n            result += `   - Node ID: ${node.id}\\n`;\n            result += `   - Position: (${node.position?.[0] || 0}, ${node.position?.[1] || 0})\\n`;\n            if (node.parameters?.model) {\n              result += `   - Model: ${node.parameters.model}\\n`;\n            }\n            if (node.parameters?.temperature) {\n              result += `   - Temperature: ${node.parameters.temperature}\\n`;\n            }\n            result += '\\n';\n          });\n\n          return result;\n        } else {\n          // List AI nodes across all workflows\n          const workflows = await client.getWorkflows({ limit: 100 });\n          let totalAINodes = 0;\n          let result = 'AI nodes found across all workflows:\\n\\n';\n\n          for (const workflow of workflows.data) {\n            const aiNodes = workflow.nodes?.filter(node => \n              aiNodeTypes.some(aiType => \n                node.type?.toLowerCase().includes(aiType) || \n                node.name?.toLowerCase().includes('ai') ||\n                node.parameters?.model !== undefined\n              )\n            ) || [];\n\n            if (aiNodes.length > 0) {\n              totalAINodes += aiNodes.length;\n              result += `**${workflow.name}** (${workflow.id}): ${aiNodes.length} AI node(s)\\n`;\n              aiNodes.forEach(node => {\n                result += `  - ${node.name} (${node.type})\\n`;\n              });\n              result += '\\n';\n            }\n          }\n\n          if (totalAINodes === 0) {\n            return 'No AI nodes found in any workflows.';\n          }\n\n          return `Total AI nodes found: ${totalAINodes}\\n\\n${result}`;\n        }\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI nodes: ${error.message}`);\n      }\n    },\n  });\n\n  // Get AI node configuration\n  server.addTool({\n    name: 'get-ai-node-config',\n    description: 'Get the configuration of a specific AI node including model settings, prompts, and parameters',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      nodeId: z.string().min(1, 'Node ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Node Configuration',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId: string; nodeId: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(`Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`);\n        }\n\n        const config = {\n          nodeId: node.id,\n          nodeName: node.name,\n          nodeType: node.type,\n          position: node.position,\n          parameters: node.parameters || {},\n          credentials: node.credentials || {},\n          typeVersion: node.typeVersion,\n          disabled: node.disabled || false,\n        };\n\n        // Extract AI-specific configuration\n        const aiConfig: any = {\n          ...config,\n          aiSpecific: {\n            model: config.parameters.model || null,\n            temperature: config.parameters.temperature || null,\n            maxTokens: config.parameters.maxTokens || config.parameters.max_tokens || null,\n            systemPrompt: config.parameters.systemPrompt || config.parameters.system_prompt || null,\n            userPrompt: config.parameters.prompt || config.parameters.userPrompt || null,\n            memory: config.parameters.memory || null,\n            tools: config.parameters.tools || null,\n            context: config.parameters.context || null,\n          }\n        };\n\n        return `AI Node Configuration for \"${node.name}\" (${node.type}):\\n\\n` +\n               `**Basic Information:**\\n` +\n               `- Node ID: ${aiConfig.nodeId}\\n` +\n               `- Node Type: ${aiConfig.nodeType}\\n` +\n               `- Type Version: ${aiConfig.typeVersion}\\n` +\n               `- Disabled: ${aiConfig.disabled}\\n` +\n               `- Position: (${aiConfig.position?.[0] || 0}, ${aiConfig.position?.[1] || 0})\\n\\n` +\n               `**AI-Specific Configuration:**\\n` +\n               `- Model: ${aiConfig.aiSpecific.model || 'Not configured'}\\n` +\n               `- Temperature: ${aiConfig.aiSpecific.temperature || 'Not set'}\\n` +\n               `- Max Tokens: ${aiConfig.aiSpecific.maxTokens || 'Not set'}\\n` +\n               `- System Prompt: ${aiConfig.aiSpecific.systemPrompt ? 'Configured' : 'Not set'}\\n` +\n               `- User Prompt: ${aiConfig.aiSpecific.userPrompt ? 'Configured' : 'Not set'}\\n` +\n               `- Memory: ${aiConfig.aiSpecific.memory || 'Not configured'}\\n` +\n               `- Tools: ${aiConfig.aiSpecific.tools ? 'Configured' : 'Not set'}\\n` +\n               `- Context: ${aiConfig.aiSpecific.context ? 'Configured' : 'Not set'}\\n\\n` +\n               `**Full Parameters:**\\n\\`\\`\\`json\\n${JSON.stringify(config.parameters, null, 2)}\\n\\`\\`\\`\\n\\n` +\n               `**Credentials:**\\n\\`\\`\\`json\\n${JSON.stringify(config.credentials, null, 2)}\\n\\`\\`\\``;\n      } catch (error: any) {\n        throw new UserError(`Failed to get AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Update AI node configuration\n  server.addTool({\n    name: 'update-ai-node-config',\n    description: 'Update the configuration of an AI node including model settings, prompts, and parameters',\n    parameters: AINodeConfigSchema,\n    annotations: {\n      title: 'Update AI Node Configuration',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AINodeConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(`Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`);\n        }\n\n        // Update the node configuration\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...args.config,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return `Successfully updated AI node configuration for \"${workflow.nodes?.[nodeIndex]?.name}\" in workflow \"${workflow.name}\".\\n\\n` +\n               `Updated parameters:\\n\\`\\`\\`json\\n${JSON.stringify(args.config, null, 2)}\\n\\`\\`\\``;\n      } catch (error: any) {\n        throw new UserError(`Failed to update AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Test AI prompt with sample data\n  server.addTool({\n    name: 'test-ai-prompt',\n    description: 'Test an AI node prompt with sample data to validate functionality before execution',\n    parameters: AIPromptTestSchema,\n    annotations: {\n      title: 'Test AI Prompt',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIPromptTestSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(`Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`);\n        }\n\n        // Simulate prompt testing (in a real implementation, this would execute the node with test data)\n        const testResult = {\n          nodeId: args.nodeId,\n          nodeName: node.name,\n          nodeType: node.type,\n          prompt: args.prompt,\n          sampleData: args.sampleData || {},\n          model: node.parameters?.model || 'Unknown',\n          timestamp: new Date().toISOString(),\n          // Simulated response (in real implementation, would be actual AI response)\n          simulatedResponse: `[TEST MODE] This is a simulated response for prompt: \"${args.prompt}\". In a real implementation, this would execute the AI node with the provided sample data and return the actual AI response.`,\n          status: 'test_completed',\n          validationResults: {\n            promptValid: args.prompt.length > 0,\n            dataStructureValid: typeof args.sampleData === 'object',\n            nodeConfigurationValid: !!node.parameters?.model,\n          }\n        };\n\n        return `AI Prompt Test Results:\\n\\n` +\n               `**Node Information:**\\n` +\n               `- Node: ${testResult.nodeName} (${testResult.nodeType})\\n` +\n               `- Model: ${testResult.model}\\n` +\n               `- Test Time: ${testResult.timestamp}\\n\\n` +\n               `**Test Input:**\\n` +\n               `- Prompt: \"${testResult.prompt}\"\\n` +\n               `- Sample Data: ${JSON.stringify(testResult.sampleData, null, 2)}\\n\\n` +\n               `**Validation Results:**\\n` +\n               `- Prompt Valid: ${testResult.validationResults.promptValid ? '\u2705' : '\u274C'}\\n` +\n               `- Data Structure Valid: ${testResult.validationResults.dataStructureValid ? '\u2705' : '\u274C'}\\n` +\n               `- Node Configuration Valid: ${testResult.validationResults.nodeConfigurationValid ? '\u2705' : '\u274C'}\\n\\n` +\n               `**Simulated Response:**\\n${testResult.simulatedResponse}\\n\\n` +\n               `**Note:** This is a test simulation. To execute the actual AI node, use the 'execute-workflow' tool.`;\n      } catch (error: any) {\n        throw new UserError(`Failed to test AI prompt: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI model selection\n  server.addTool({\n    name: 'configure-ai-model',\n    description: 'Configure AI model selection and parameters for an AI node',\n    parameters: AIModelSelectionSchema,\n    annotations: {\n      title: 'Configure AI Model',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIModelSelectionSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(`Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`);\n        }\n\n        // Update model configuration\n        const modelConfig = {\n          model: args.modelName,\n          modelType: args.modelType,\n          ...args.parameters,\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...modelConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return `Successfully configured AI model for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n               `**Model Configuration:**\\n` +\n               `- Model Type: ${args.modelType}\\n` +\n               `- Model Name: ${args.modelName}\\n` +\n               `- Additional Parameters: ${JSON.stringify(args.parameters || {}, null, 2)}\\n\\n` +\n               `The workflow has been updated and is ready for use with the new model configuration.`;\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI model: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI memory and context\n  server.addTool({\n    name: 'configure-ai-memory',\n    description: 'Configure AI memory, context, and $fromAI() functionality for an AI node',\n    parameters: AIMemoryConfigSchema,\n    annotations: {\n      title: 'Configure AI Memory',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIMemoryConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(`Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`);\n        }\n\n        // Configure memory settings\n        const memoryConfig = {\n          memory: {\n            type: args.memoryType,\n            maxTokens: args.maxTokens,\n            context: args.context,\n            fromAI: true, // Enable $fromAI() functionality\n          },\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...memoryConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return `Successfully configured AI memory for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n               `**Memory Configuration:**\\n` +\n               `- Memory Type: ${args.memoryType}\\n` +\n               `- Max Tokens: ${args.maxTokens || 'Unlimited'}\\n` +\n               `- Context Enabled: ${args.context ? 'Yes' : 'No'}\\n` +\n               `- $fromAI() Function: Enabled\\n\\n` +\n               `**Usage:**\\n` +\n               `- Use \\$fromAI() in expressions to access AI-generated data\\n` +\n               `- Memory will be maintained across workflow executions\\n` +\n               `- Context data: ${JSON.stringify(args.context || {}, null, 2)}`;\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI memory: ${error.message}`);\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "88a150fbd1bc39bb5f8aebd6c8068c9caec631d3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_nop76s7lu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_nop76s7lu();
cov_nop76s7lu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_nop76s7lu().s[1]++;
exports.createAIConfigTools = createAIConfigTools;
const zod_1 =
/* istanbul ignore next */
(cov_nop76s7lu().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_nop76s7lu().s[3]++, require("fastmcp"));
// Zod schemas for AI configuration validation
const AINodeConfigSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[4]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  config: zod_1.z.record(zod_1.z.any())
}));
const AIPromptTestSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[5]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  prompt: zod_1.z.string().min(1, 'Prompt is required'),
  sampleData: zod_1.z.record(zod_1.z.any()).optional()
}));
const AIModelSelectionSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[6]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  modelType: zod_1.z.enum(['openai', 'anthropic', 'local', 'custom']),
  modelName: zod_1.z.string().min(1, 'Model name is required'),
  parameters: zod_1.z.record(zod_1.z.any()).optional()
}));
const AIMemoryConfigSchema =
/* istanbul ignore next */
(cov_nop76s7lu().s[7]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  memoryType: zod_1.z.enum(['buffer', 'summary', 'conversation', 'vector']),
  maxTokens: zod_1.z.number().min(1).max(100000).optional(),
  context: zod_1.z.record(zod_1.z.any()).optional()
}));
// Tool registration function for AI configuration tools
function createAIConfigTools(getClient, server) {
  /* istanbul ignore next */
  cov_nop76s7lu().f[0]++;
  cov_nop76s7lu().s[8]++;
  // List AI nodes in workflow
  server.addTool({
    name: 'list-ai-nodes',
    description: 'List all AI-enabled nodes in a specific workflow or across all workflows',
    parameters: zod_1.z.object({
      workflowId: zod_1.z.string().optional()
    }),
    annotations: {
      title: 'List AI Nodes',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[9]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[10]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[0][0]++;
        cov_nop76s7lu().s[11]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[0][1]++;
      }
      cov_nop76s7lu().s[12]++;
      try {
        const aiNodeTypes =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[13]++, ['openai', 'anthropic', 'chatgpt', 'gpt3', 'gpt4', 'claude', 'mistral', 'llama', 'huggingface', 'cohere', 'ai-agent', 'ai-memory', 'ai-tool', 'ai-chain', 'langchain']);
        /* istanbul ignore next */
        cov_nop76s7lu().s[14]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[1][0]++;
          // Get specific workflow and analyze its nodes
          const workflow =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[15]++, await client.getWorkflow(args.workflowId));
          const aiNodes =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[16]++,
          /* istanbul ignore next */
          (cov_nop76s7lu().b[2][0]++, workflow.nodes?.filter(node => {
            /* istanbul ignore next */
            cov_nop76s7lu().f[2]++;
            cov_nop76s7lu().s[17]++;
            return aiNodeTypes.some(aiType => {
              /* istanbul ignore next */
              cov_nop76s7lu().f[3]++;
              cov_nop76s7lu().s[18]++;
              return /* istanbul ignore next */(cov_nop76s7lu().b[3][0]++, node.type?.toLowerCase().includes(aiType)) ||
              /* istanbul ignore next */
              (cov_nop76s7lu().b[3][1]++, node.name?.toLowerCase().includes('ai')) ||
              /* istanbul ignore next */
              (cov_nop76s7lu().b[3][2]++, node.parameters?.model !== undefined);
            });
          })) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[2][1]++, []));
          /* istanbul ignore next */
          cov_nop76s7lu().s[19]++;
          if (aiNodes.length === 0) {
            /* istanbul ignore next */
            cov_nop76s7lu().b[4][0]++;
            cov_nop76s7lu().s[20]++;
            return `No AI nodes found in workflow "${workflow.name}" (${args.workflowId})`;
          } else
          /* istanbul ignore next */
          {
            cov_nop76s7lu().b[4][1]++;
          }
          let result =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[21]++, `Found ${aiNodes.length} AI node(s) in workflow "${workflow.name}":\n\n`);
          /* istanbul ignore next */
          cov_nop76s7lu().s[22]++;
          aiNodes.forEach((node, index) => {
            /* istanbul ignore next */
            cov_nop76s7lu().f[4]++;
            cov_nop76s7lu().s[23]++;
            result += `${index + 1}. **${node.name}** (${node.type})\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[24]++;
            result += `   - Node ID: ${node.id}\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[25]++;
            result += `   - Position: (${
            /* istanbul ignore next */
            (cov_nop76s7lu().b[5][0]++, node.position?.[0]) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[5][1]++, 0)}, ${
            /* istanbul ignore next */
            (cov_nop76s7lu().b[6][0]++, node.position?.[1]) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[6][1]++, 0)})\n`;
            /* istanbul ignore next */
            cov_nop76s7lu().s[26]++;
            if (node.parameters?.model) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[7][0]++;
              cov_nop76s7lu().s[27]++;
              result += `   - Model: ${node.parameters.model}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[7][1]++;
            }
            cov_nop76s7lu().s[28]++;
            if (node.parameters?.temperature) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[8][0]++;
              cov_nop76s7lu().s[29]++;
              result += `   - Temperature: ${node.parameters.temperature}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[8][1]++;
            }
            cov_nop76s7lu().s[30]++;
            result += '\n';
          });
          /* istanbul ignore next */
          cov_nop76s7lu().s[31]++;
          return result;
        } else {
          /* istanbul ignore next */
          cov_nop76s7lu().b[1][1]++;
          // List AI nodes across all workflows
          const workflows =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[32]++, await client.getWorkflows({
            limit: 100
          }));
          let totalAINodes =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[33]++, 0);
          let result =
          /* istanbul ignore next */
          (cov_nop76s7lu().s[34]++, 'AI nodes found across all workflows:\n\n');
          /* istanbul ignore next */
          cov_nop76s7lu().s[35]++;
          for (const workflow of workflows.data) {
            const aiNodes =
            /* istanbul ignore next */
            (cov_nop76s7lu().s[36]++,
            /* istanbul ignore next */
            (cov_nop76s7lu().b[9][0]++, workflow.nodes?.filter(node => {
              /* istanbul ignore next */
              cov_nop76s7lu().f[5]++;
              cov_nop76s7lu().s[37]++;
              return aiNodeTypes.some(aiType => {
                /* istanbul ignore next */
                cov_nop76s7lu().f[6]++;
                cov_nop76s7lu().s[38]++;
                return /* istanbul ignore next */(cov_nop76s7lu().b[10][0]++, node.type?.toLowerCase().includes(aiType)) ||
                /* istanbul ignore next */
                (cov_nop76s7lu().b[10][1]++, node.name?.toLowerCase().includes('ai')) ||
                /* istanbul ignore next */
                (cov_nop76s7lu().b[10][2]++, node.parameters?.model !== undefined);
              });
            })) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[9][1]++, []));
            /* istanbul ignore next */
            cov_nop76s7lu().s[39]++;
            if (aiNodes.length > 0) {
              /* istanbul ignore next */
              cov_nop76s7lu().b[11][0]++;
              cov_nop76s7lu().s[40]++;
              totalAINodes += aiNodes.length;
              /* istanbul ignore next */
              cov_nop76s7lu().s[41]++;
              result += `**${workflow.name}** (${workflow.id}): ${aiNodes.length} AI node(s)\n`;
              /* istanbul ignore next */
              cov_nop76s7lu().s[42]++;
              aiNodes.forEach(node => {
                /* istanbul ignore next */
                cov_nop76s7lu().f[7]++;
                cov_nop76s7lu().s[43]++;
                result += `  - ${node.name} (${node.type})\n`;
              });
              /* istanbul ignore next */
              cov_nop76s7lu().s[44]++;
              result += '\n';
            } else
            /* istanbul ignore next */
            {
              cov_nop76s7lu().b[11][1]++;
            }
          }
          /* istanbul ignore next */
          cov_nop76s7lu().s[45]++;
          if (totalAINodes === 0) {
            /* istanbul ignore next */
            cov_nop76s7lu().b[12][0]++;
            cov_nop76s7lu().s[46]++;
            return 'No AI nodes found in any workflows.';
          } else
          /* istanbul ignore next */
          {
            cov_nop76s7lu().b[12][1]++;
          }
          cov_nop76s7lu().s[47]++;
          return `Total AI nodes found: ${totalAINodes}\n\n${result}`;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[48]++;
        throw new fastmcp_1.UserError(`Failed to list AI nodes: ${error.message}`);
      }
    }
  });
  // Get AI node configuration
  /* istanbul ignore next */
  cov_nop76s7lu().s[49]++;
  server.addTool({
    name: 'get-ai-node-config',
    description: 'Get the configuration of a specific AI node including model settings, prompts, and parameters',
    parameters: zod_1.z.object({
      workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
      nodeId: zod_1.z.string().min(1, 'Node ID is required')
    }),
    annotations: {
      title: 'Get AI Node Configuration',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[50]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[51]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[13][0]++;
        cov_nop76s7lu().s[52]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[13][1]++;
      }
      cov_nop76s7lu().s[53]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[54]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[55]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[9]++;
          cov_nop76s7lu().s[56]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[57]++;
        if (!node) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[14][0]++;
          cov_nop76s7lu().s[58]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[14][1]++;
        }
        const config =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[59]++, {
          nodeId: node.id,
          nodeName: node.name,
          nodeType: node.type,
          position: node.position,
          parameters:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[15][0]++, node.parameters) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[15][1]++, {}),
          credentials:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[16][0]++, node.credentials) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[16][1]++, {}),
          typeVersion: node.typeVersion,
          disabled:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[17][0]++, node.disabled) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[17][1]++, false)
        });
        // Extract AI-specific configuration
        const aiConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[60]++, {
          ...config,
          aiSpecific: {
            model:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[18][0]++, config.parameters.model) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[18][1]++, null),
            temperature:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[19][0]++, config.parameters.temperature) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[19][1]++, null),
            maxTokens:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][0]++, config.parameters.maxTokens) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][1]++, config.parameters.max_tokens) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[20][2]++, null),
            systemPrompt:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][0]++, config.parameters.systemPrompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][1]++, config.parameters.system_prompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[21][2]++, null),
            userPrompt:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][0]++, config.parameters.prompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][1]++, config.parameters.userPrompt) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[22][2]++, null),
            memory:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[23][0]++, config.parameters.memory) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[23][1]++, null),
            tools:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[24][0]++, config.parameters.tools) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[24][1]++, null),
            context:
            /* istanbul ignore next */
            (cov_nop76s7lu().b[25][0]++, config.parameters.context) ||
            /* istanbul ignore next */
            (cov_nop76s7lu().b[25][1]++, null)
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[61]++;
        return `AI Node Configuration for "${node.name}" (${node.type}):\n\n` + `**Basic Information:**\n` + `- Node ID: ${aiConfig.nodeId}\n` + `- Node Type: ${aiConfig.nodeType}\n` + `- Type Version: ${aiConfig.typeVersion}\n` + `- Disabled: ${aiConfig.disabled}\n` + `- Position: (${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[26][0]++, aiConfig.position?.[0]) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[26][1]++, 0)}, ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[27][0]++, aiConfig.position?.[1]) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[27][1]++, 0)})\n\n` + `**AI-Specific Configuration:**\n` + `- Model: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[28][0]++, aiConfig.aiSpecific.model) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[28][1]++, 'Not configured')}\n` + `- Temperature: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[29][0]++, aiConfig.aiSpecific.temperature) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[29][1]++, 'Not set')}\n` + `- Max Tokens: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[30][0]++, aiConfig.aiSpecific.maxTokens) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[30][1]++, 'Not set')}\n` + `- System Prompt: ${aiConfig.aiSpecific.systemPrompt ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[31][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[31][1]++, 'Not set')}\n` + `- User Prompt: ${aiConfig.aiSpecific.userPrompt ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[32][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[32][1]++, 'Not set')}\n` + `- Memory: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[33][0]++, aiConfig.aiSpecific.memory) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[33][1]++, 'Not configured')}\n` + `- Tools: ${aiConfig.aiSpecific.tools ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[34][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[34][1]++, 'Not set')}\n` + `- Context: ${aiConfig.aiSpecific.context ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[35][0]++, 'Configured') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[35][1]++, 'Not set')}\n\n` + `**Full Parameters:**\n\`\`\`json\n${JSON.stringify(config.parameters, null, 2)}\n\`\`\`\n\n` + `**Credentials:**\n\`\`\`json\n${JSON.stringify(config.credentials, null, 2)}\n\`\`\``;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[62]++;
        throw new fastmcp_1.UserError(`Failed to get AI node configuration: ${error.message}`);
      }
    }
  });
  // Update AI node configuration
  /* istanbul ignore next */
  cov_nop76s7lu().s[63]++;
  server.addTool({
    name: 'update-ai-node-config',
    description: 'Update the configuration of an AI node including model settings, prompts, and parameters',
    parameters: AINodeConfigSchema,
    annotations: {
      title: 'Update AI Node Configuration',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[10]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[64]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[65]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[36][0]++;
        cov_nop76s7lu().s[66]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[36][1]++;
      }
      cov_nop76s7lu().s[67]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[68]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[69]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[11]++;
          cov_nop76s7lu().s[70]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[71]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[38][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[38][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[37][0]++;
          cov_nop76s7lu().s[72]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[37][1]++;
        }
        // Update the node configuration
        cov_nop76s7lu().s[73]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[39][0]++;
          cov_nop76s7lu().s[74]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...args.config
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[39][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[75]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[76]++;
        return `Successfully updated AI node configuration for "${workflow.nodes?.[nodeIndex]?.name}" in workflow "${workflow.name}".\n\n` + `Updated parameters:\n\`\`\`json\n${JSON.stringify(args.config, null, 2)}\n\`\`\``;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[77]++;
        throw new fastmcp_1.UserError(`Failed to update AI node configuration: ${error.message}`);
      }
    }
  });
  // Test AI prompt with sample data
  /* istanbul ignore next */
  cov_nop76s7lu().s[78]++;
  server.addTool({
    name: 'test-ai-prompt',
    description: 'Test an AI node prompt with sample data to validate functionality before execution',
    parameters: AIPromptTestSchema,
    annotations: {
      title: 'Test AI Prompt',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[12]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[79]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[80]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[40][0]++;
        cov_nop76s7lu().s[81]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[40][1]++;
      }
      cov_nop76s7lu().s[82]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[83]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[84]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[13]++;
          cov_nop76s7lu().s[85]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[86]++;
        if (!node) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[41][0]++;
          cov_nop76s7lu().s[87]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[41][1]++;
        }
        // Simulate prompt testing (in a real implementation, this would execute the node with test data)
        const testResult =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[88]++, {
          nodeId: args.nodeId,
          nodeName: node.name,
          nodeType: node.type,
          prompt: args.prompt,
          sampleData:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[42][0]++, args.sampleData) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[42][1]++, {}),
          model:
          /* istanbul ignore next */
          (cov_nop76s7lu().b[43][0]++, node.parameters?.model) ||
          /* istanbul ignore next */
          (cov_nop76s7lu().b[43][1]++, 'Unknown'),
          timestamp: new Date().toISOString(),
          // Simulated response (in real implementation, would be actual AI response)
          simulatedResponse: `[TEST MODE] This is a simulated response for prompt: "${args.prompt}". In a real implementation, this would execute the AI node with the provided sample data and return the actual AI response.`,
          status: 'test_completed',
          validationResults: {
            promptValid: args.prompt.length > 0,
            dataStructureValid: typeof args.sampleData === 'object',
            nodeConfigurationValid: !!node.parameters?.model
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[89]++;
        return `AI Prompt Test Results:\n\n` + `**Node Information:**\n` + `- Node: ${testResult.nodeName} (${testResult.nodeType})\n` + `- Model: ${testResult.model}\n` + `- Test Time: ${testResult.timestamp}\n\n` + `**Test Input:**\n` + `- Prompt: "${testResult.prompt}"\n` + `- Sample Data: ${JSON.stringify(testResult.sampleData, null, 2)}\n\n` + `**Validation Results:**\n` + `- Prompt Valid: ${testResult.validationResults.promptValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[44][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[44][1]++, '❌')}\n` + `- Data Structure Valid: ${testResult.validationResults.dataStructureValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[45][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[45][1]++, '❌')}\n` + `- Node Configuration Valid: ${testResult.validationResults.nodeConfigurationValid ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[46][0]++, '✅') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[46][1]++, '❌')}\n\n` + `**Simulated Response:**\n${testResult.simulatedResponse}\n\n` + `**Note:** This is a test simulation. To execute the actual AI node, use the 'execute-workflow' tool.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[90]++;
        throw new fastmcp_1.UserError(`Failed to test AI prompt: ${error.message}`);
      }
    }
  });
  // Configure AI model selection
  /* istanbul ignore next */
  cov_nop76s7lu().s[91]++;
  server.addTool({
    name: 'configure-ai-model',
    description: 'Configure AI model selection and parameters for an AI node',
    parameters: AIModelSelectionSchema,
    annotations: {
      title: 'Configure AI Model',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[14]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[92]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[93]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[47][0]++;
        cov_nop76s7lu().s[94]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[47][1]++;
      }
      cov_nop76s7lu().s[95]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[96]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[97]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[15]++;
          cov_nop76s7lu().s[98]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[99]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[49][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[49][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[48][0]++;
          cov_nop76s7lu().s[100]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[48][1]++;
        }
        // Update model configuration
        const modelConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[101]++, {
          model: args.modelName,
          modelType: args.modelType,
          ...args.parameters
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[102]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[50][0]++;
          cov_nop76s7lu().s[103]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...modelConfig
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[50][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[104]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[105]++;
        return `Successfully configured AI model for node "${workflow.nodes?.[nodeIndex]?.name}":\n\n` + `**Model Configuration:**\n` + `- Model Type: ${args.modelType}\n` + `- Model Name: ${args.modelName}\n` + `- Additional Parameters: ${JSON.stringify(
        /* istanbul ignore next */
        (cov_nop76s7lu().b[51][0]++, args.parameters) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[51][1]++, {}), null, 2)}\n\n` + `The workflow has been updated and is ready for use with the new model configuration.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[106]++;
        throw new fastmcp_1.UserError(`Failed to configure AI model: ${error.message}`);
      }
    }
  });
  // Configure AI memory and context
  /* istanbul ignore next */
  cov_nop76s7lu().s[107]++;
  server.addTool({
    name: 'configure-ai-memory',
    description: 'Configure AI memory, context, and $fromAI() functionality for an AI node',
    parameters: AIMemoryConfigSchema,
    annotations: {
      title: 'Configure AI Memory',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_nop76s7lu().f[16]++;
      const client =
      /* istanbul ignore next */
      (cov_nop76s7lu().s[108]++, getClient());
      /* istanbul ignore next */
      cov_nop76s7lu().s[109]++;
      if (!client) {
        /* istanbul ignore next */
        cov_nop76s7lu().b[52][0]++;
        cov_nop76s7lu().s[110]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_nop76s7lu().b[52][1]++;
      }
      cov_nop76s7lu().s[111]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[112]++, await client.getWorkflow(args.workflowId));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[113]++, workflow.nodes?.findIndex(n => {
          /* istanbul ignore next */
          cov_nop76s7lu().f[17]++;
          cov_nop76s7lu().s[114]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_nop76s7lu().s[115]++;
        if (
        /* istanbul ignore next */
        (cov_nop76s7lu().b[54][0]++, nodeIndex === -1) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[54][1]++, nodeIndex === undefined)) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[53][0]++;
          cov_nop76s7lu().s[116]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[53][1]++;
        }
        // Configure memory settings
        const memoryConfig =
        /* istanbul ignore next */
        (cov_nop76s7lu().s[117]++, {
          memory: {
            type: args.memoryType,
            maxTokens: args.maxTokens,
            context: args.context,
            fromAI: true // Enable $fromAI() functionality
          }
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[118]++;
        if (workflow.nodes) {
          /* istanbul ignore next */
          cov_nop76s7lu().b[55][0]++;
          cov_nop76s7lu().s[119]++;
          workflow.nodes[nodeIndex].parameters = {
            ...workflow.nodes[nodeIndex].parameters,
            ...memoryConfig
          };
        } else
        /* istanbul ignore next */
        {
          cov_nop76s7lu().b[55][1]++;
        }
        // Update the workflow
        cov_nop76s7lu().s[120]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: workflow.nodes,
          connections: workflow.connections
        });
        /* istanbul ignore next */
        cov_nop76s7lu().s[121]++;
        return `Successfully configured AI memory for node "${workflow.nodes?.[nodeIndex]?.name}":\n\n` + `**Memory Configuration:**\n` + `- Memory Type: ${args.memoryType}\n` + `- Max Tokens: ${
        /* istanbul ignore next */
        (cov_nop76s7lu().b[56][0]++, args.maxTokens) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[56][1]++, 'Unlimited')}\n` + `- Context Enabled: ${args.context ?
        /* istanbul ignore next */
        (cov_nop76s7lu().b[57][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_nop76s7lu().b[57][1]++, 'No')}\n` + `- $fromAI() Function: Enabled\n\n` + `**Usage:**\n` + `- Use \$fromAI() in expressions to access AI-generated data\n` + `- Memory will be maintained across workflow executions\n` + `- Context data: ${JSON.stringify(
        /* istanbul ignore next */
        (cov_nop76s7lu().b[58][0]++, args.context) ||
        /* istanbul ignore next */
        (cov_nop76s7lu().b[58][1]++, {}), null, 2)}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_nop76s7lu().s[122]++;
        throw new fastmcp_1.UserError(`Failed to configure AI memory: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,