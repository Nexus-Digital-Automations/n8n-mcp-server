555a0acf396941c1be8a1d53262b56fa
/* istanbul ignore next */
function cov_wcd6uik6t() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/nodeAnalysis.ts";
  var hash = "92c0269d20159be75691266705f9c3b52c4e7a7d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/nodeAnalysis.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 8
        },
        end: {
          line: 5,
          column: 55
        }
      },
      "1": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 55
        }
      },
      "2": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 11,
          column: 87
        }
      },
      "3": {
        start: {
          line: 12,
          column: 33
        },
        end: {
          line: 12,
          column: 97
        }
      },
      "4": {
        start: {
          line: 13,
          column: 32
        },
        end: {
          line: 13,
          column: 69
        }
      },
      "5": {
        start: {
          line: 14,
          column: 32
        },
        end: {
          line: 14,
          column: 71
        }
      },
      "6": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "7": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 29,
          column: 25
        }
      },
      "8": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 30
        }
      },
      "9": {
        start: {
          line: 31,
          column: 40
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "10": {
        start: {
          line: 32,
          column: 33
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "11": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 38,
          column: 9
        }
      },
      "12": {
        start: {
          line: 35,
          column: 35
        },
        end: {
          line: 35,
          column: 98
        }
      },
      "13": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 50
        }
      },
      "14": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 69
        }
      },
      "15": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "16": {
        start: {
          line: 41,
          column: 38
        },
        end: {
          line: 41,
          column: 112
        }
      },
      "17": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 79
        }
      },
      "18": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 43,
          column: 63
        }
      },
      "19": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 72
        }
      },
      "20": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 47,
          column: 96
        }
      },
      "21": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "22": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 38
        }
      },
      "23": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 104
        }
      },
      "24": {
        start: {
          line: 53,
          column: 8
        },
        end: {
          line: 55,
          column: 9
        }
      },
      "25": {
        start: {
          line: 54,
          column: 12
        },
        end: {
          line: 54,
          column: 90
        }
      },
      "26": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "27": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 127
        }
      },
      "28": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "29": {
        start: {
          line: 70,
          column: 27
        },
        end: {
          line: 70,
          column: 29
        }
      },
      "30": {
        start: {
          line: 71,
          column: 42
        },
        end: {
          line: 71,
          column: 44
        }
      },
      "31": {
        start: {
          line: 72,
          column: 41
        },
        end: {
          line: 72,
          column: 43
        }
      },
      "32": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "33": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "34": {
        start: {
          line: 81,
          column: 34
        },
        end: {
          line: 81,
          column: 55
        }
      },
      "35": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "36": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 84,
          column: 25
        }
      },
      "37": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 84,
          column: 25
        }
      },
      "38": {
        start: {
          line: 85,
          column: 33
        },
        end: {
          line: 85,
          column: 65
        }
      },
      "39": {
        start: {
          line: 86,
          column: 29
        },
        end: {
          line: 86,
          column: 103
        }
      },
      "40": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 89,
          column: 13
        }
      },
      "41": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 62
        }
      },
      "42": {
        start: {
          line: 90,
          column: 35
        },
        end: {
          line: 90,
          column: 93
        }
      },
      "43": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 99,
          column: 15
        }
      },
      "44": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "45": {
        start: {
          line: 103,
          column: 37
        },
        end: {
          line: 103,
          column: 94
        }
      },
      "46": {
        start: {
          line: 103,
          column: 70
        },
        end: {
          line: 103,
          column: 93
        }
      },
      "47": {
        start: {
          line: 104,
          column: 12
        },
        end: {
          line: 106,
          column: 13
        }
      },
      "48": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 57
        }
      },
      "49": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 113,
          column: 10
        }
      },
      "50": {
        start: {
          line: 116,
          column: 22
        },
        end: {
          line: 116,
          column: 42
        }
      },
      "51": {
        start: {
          line: 117,
          column: 28
        },
        end: {
          line: 117,
          column: 54
        }
      },
      "52": {
        start: {
          line: 119,
          column: 21
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "53": {
        start: {
          line: 121,
          column: 26
        },
        end: {
          line: 121,
          column: 72
        }
      },
      "54": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 73
        }
      },
      "55": {
        start: {
          line: 124,
          column: 8
        },
        end: {
          line: 128,
          column: 10
        }
      },
      "56": {
        start: {
          line: 131,
          column: 26
        },
        end: {
          line: 131,
          column: 53
        }
      },
      "57": {
        start: {
          line: 132,
          column: 32
        },
        end: {
          line: 132,
          column: 81
        }
      },
      "58": {
        start: {
          line: 134,
          column: 25
        },
        end: {
          line: 134,
          column: 64
        }
      },
      "59": {
        start: {
          line: 136,
          column: 33
        },
        end: {
          line: 136,
          column: 146
        }
      },
      "60": {
        start: {
          line: 136,
          column: 61
        },
        end: {
          line: 136,
          column: 139
        }
      },
      "61": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 52
        }
      },
      "62": {
        start: {
          line: 139,
          column: 26
        },
        end: {
          line: 139,
          column: 112
        }
      },
      "63": {
        start: {
          line: 139,
          column: 54
        },
        end: {
          line: 139,
          column: 105
        }
      },
      "64": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 45
        }
      },
      "65": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 44
        }
      },
      "66": {
        start: {
          line: 145,
          column: 20
        },
        end: {
          line: 145,
          column: 21
        }
      },
      "67": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "68": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "69": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "70": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "71": {
        start: {
          line: 154,
          column: 23
        },
        end: {
          line: 154,
          column: 25
        }
      },
      "72": {
        start: {
          line: 155,
          column: 22
        },
        end: {
          line: 155,
          column: 42
        }
      },
      "73": {
        start: {
          line: 158,
          column: 29
        },
        end: {
          line: 158,
          column: 104
        }
      },
      "74": {
        start: {
          line: 158,
          column: 47
        },
        end: {
          line: 158,
          column: 103
        }
      },
      "75": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 166,
          column: 9
        }
      },
      "76": {
        start: {
          line: 160,
          column: 12
        },
        end: {
          line: 165,
          column: 15
        }
      },
      "77": {
        start: {
          line: 168,
          column: 30
        },
        end: {
          line: 168,
          column: 59
        }
      },
      "78": {
        start: {
          line: 168,
          column: 48
        },
        end: {
          line: 168,
          column: 58
        }
      },
      "79": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "80": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 176,
          column: 15
        }
      },
      "81": {
        start: {
          line: 179,
          column: 35
        },
        end: {
          line: 179,
          column: 120
        }
      },
      "82": {
        start: {
          line: 179,
          column: 53
        },
        end: {
          line: 179,
          column: 119
        }
      },
      "83": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 187,
          column: 9
        }
      },
      "84": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 186,
          column: 15
        }
      },
      "85": {
        start: {
          line: 189,
          column: 26
        },
        end: {
          line: 189,
          column: 68
        }
      },
      "86": {
        start: {
          line: 189,
          column: 44
        },
        end: {
          line: 189,
          column: 67
        }
      },
      "87": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 197,
          column: 9
        }
      },
      "88": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "89": {
        start: {
          line: 199,
          column: 32
        },
        end: {
          line: 199,
          column: 105
        }
      },
      "90": {
        start: {
          line: 199,
          column: 50
        },
        end: {
          line: 199,
          column: 104
        }
      },
      "91": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 210,
          column: 9
        }
      },
      "92": {
        start: {
          line: 201,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "93": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 208,
          column: 19
        }
      },
      "94": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 211,
          column: 22
        }
      },
      "95": {
        start: {
          line: 214,
          column: 23
        },
        end: {
          line: 214,
          column: 25
        }
      },
      "96": {
        start: {
          line: 215,
          column: 34
        },
        end: {
          line: 215,
          column: 37
        }
      },
      "97": {
        start: {
          line: 217,
          column: 30
        },
        end: {
          line: 217,
          column: 81
        }
      },
      "98": {
        start: {
          line: 218,
          column: 36
        },
        end: {
          line: 218,
          column: 88
        }
      },
      "99": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 9
        }
      },
      "100": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 86
        }
      },
      "101": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 221,
          column: 39
        }
      },
      "102": {
        start: {
          line: 223,
          column: 8
        },
        end: {
          line: 223,
          column: 47
        }
      },
      "103": {
        start: {
          line: 226,
          column: 32
        },
        end: {
          line: 226,
          column: 34
        }
      },
      "104": {
        start: {
          line: 227,
          column: 28
        },
        end: {
          line: 227,
          column: 30
        }
      },
      "105": {
        start: {
          line: 228,
          column: 34
        },
        end: {
          line: 228,
          column: 37
        }
      },
      "106": {
        start: {
          line: 229,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "107": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "108": {
        start: {
          line: 231,
          column: 48
        },
        end: {
          line: 231,
          column: 105
        }
      },
      "109": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "110": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 66
        }
      },
      "111": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 47
        }
      },
      "112": {
        start: {
          line: 237,
          column: 20
        },
        end: {
          line: 237,
          column: 101
        }
      },
      "113": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 69
        }
      },
      "114": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "115": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 256,
          column: 9
        }
      },
      "116": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "117": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 81
        }
      },
      "118": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 59
        }
      },
      "119": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 270,
          column: 9
        }
      },
      "120": {
        start: {
          line: 262,
          column: 34
        },
        end: {
          line: 262,
          column: 96
        }
      },
      "121": {
        start: {
          line: 262,
          column: 65
        },
        end: {
          line: 262,
          column: 95
        }
      },
      "122": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "123": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 268,
          column: 18
        }
      },
      "124": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 277,
          column: 9
        }
      },
      "125": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 276,
          column: 14
        }
      },
      "126": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 284,
          column: 9
        }
      },
      "127": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 283,
          column: 14
        }
      },
      "128": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 289,
          column: 10
        }
      },
      "129": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "130": {
        start: {
          line: 293,
          column: 12
        },
        end: {
          line: 293,
          column: 32
        }
      },
      "131": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 297,
          column: 9
        }
      },
      "132": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 31
        }
      },
      "133": {
        start: {
          line: 298,
          column: 8
        },
        end: {
          line: 298,
          column: 24
        }
      },
      "134": {
        start: {
          line: 301,
          column: 23
        },
        end: {
          line: 301,
          column: 25
        }
      },
      "135": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 304,
          column: 9
        }
      },
      "136": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 303,
          column: 57
        }
      },
      "137": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 309,
          column: 9
        }
      },
      "138": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 308,
          column: 13
        }
      },
      "139": {
        start: {
          line: 307,
          column: 16
        },
        end: {
          line: 307,
          column: 74
        }
      },
      "140": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "141": {
        start: {
          line: 311,
          column: 32
        },
        end: {
          line: 311,
          column: 72
        }
      },
      "142": {
        start: {
          line: 311,
          column: 62
        },
        end: {
          line: 311,
          column: 71
        }
      },
      "143": {
        start: {
          line: 312,
          column: 12
        },
        end: {
          line: 314,
          column: 13
        }
      },
      "144": {
        start: {
          line: 313,
          column: 16
        },
        end: {
          line: 313,
          column: 87
        }
      },
      "145": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 22
        }
      },
      "146": {
        start: {
          line: 319,
          column: 21
        },
        end: {
          line: 319,
          column: 23
        }
      },
      "147": {
        start: {
          line: 321,
          column: 26
        },
        end: {
          line: 323,
          column: 57
        }
      },
      "148": {
        start: {
          line: 322,
          column: 30
        },
        end: {
          line: 322,
          column: 50
        }
      },
      "149": {
        start: {
          line: 323,
          column: 30
        },
        end: {
          line: 323,
          column: 56
        }
      },
      "150": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "151": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 331,
          column: 15
        }
      },
      "152": {
        start: {
          line: 333,
          column: 31
        },
        end: {
          line: 333,
          column: 77
        }
      },
      "153": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 88
        }
      },
      "154": {
        start: {
          line: 334,
          column: 55
        },
        end: {
          line: 334,
          column: 74
        }
      },
      "155": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 336,
          column: 20
        }
      },
      "156": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 344,
          column: 12
        }
      },
      "157": {
        start: {
          line: 339,
          column: 42
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "158": {
        start: {
          line: 347,
          column: 28
        },
        end: {
          line: 347,
          column: 30
        }
      },
      "159": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 365,
          column: 9
        }
      },
      "160": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 356,
          column: 13
        }
      },
      "161": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 355,
          column: 19
        }
      },
      "162": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 364,
          column: 13
        }
      },
      "163": {
        start: {
          line: 358,
          column: 16
        },
        end: {
          line: 363,
          column: 19
        }
      },
      "164": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 27
        }
      },
      "165": {
        start: {
          line: 369,
          column: 25
        },
        end: {
          line: 369,
          column: 48
        }
      },
      "166": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 371,
          column: 64
        }
      },
      "167": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 64
        }
      },
      "168": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 373,
          column: 50
        }
      },
      "169": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 373,
          column: 50
        }
      },
      "170": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 375,
          column: 53
        }
      },
      "171": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 375,
          column: 53
        }
      },
      "172": {
        start: {
          line: 376,
          column: 8
        },
        end: {
          line: 377,
          column: 65
        }
      },
      "173": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 377,
          column: 65
        }
      },
      "174": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 379,
          column: 62
        }
      },
      "175": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 62
        }
      },
      "176": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 380,
          column: 64
        }
      },
      "177": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "178": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "179": {
        start: {
          line: 389,
          column: 39
        },
        end: {
          line: 389,
          column: 67
        }
      },
      "180": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 81
        }
      },
      "181": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 25
        }
      },
      "182": {
        start: {
          line: 396,
          column: 8
        },
        end: {
          line: 397,
          column: 28
        }
      },
      "183": {
        start: {
          line: 397,
          column: 12
        },
        end: {
          line: 397,
          column: 28
        }
      },
      "184": {
        start: {
          line: 398,
          column: 8
        },
        end: {
          line: 399,
          column: 28
        }
      },
      "185": {
        start: {
          line: 399,
          column: 12
        },
        end: {
          line: 399,
          column: 28
        }
      },
      "186": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 401,
          column: 28
        }
      },
      "187": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 28
        }
      },
      "188": {
        start: {
          line: 402,
          column: 8
        },
        end: {
          line: 403,
          column: 25
        }
      },
      "189": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 25
        }
      },
      "190": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 25
        }
      },
      "191": {
        start: {
          line: 407,
          column: 8
        },
        end: {
          line: 409,
          column: 9
        }
      },
      "192": {
        start: {
          line: 408,
          column: 12
        },
        end: {
          line: 408,
          column: 63
        }
      },
      "193": {
        start: {
          line: 410,
          column: 8
        },
        end: {
          line: 410,
          column: 25
        }
      },
      "194": {
        start: {
          line: 413,
          column: 26
        },
        end: {
          line: 413,
          column: 39
        }
      },
      "195": {
        start: {
          line: 414,
          column: 27
        },
        end: {
          line: 414,
          column: 42
        }
      },
      "196": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "197": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 420,
          column: 14
        }
      },
      "198": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "199": {
        start: {
          line: 423,
          column: 12
        },
        end: {
          line: 427,
          column: 14
        }
      },
      "200": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 429,
          column: 20
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 4,
            column: 4
          },
          end: {
            line: 4,
            column: 5
          }
        },
        loc: {
          start: {
            line: 4,
            column: 18
          },
          end: {
            line: 6,
            column: 5
          }
        },
        line: 4
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        loc: {
          start: {
            line: 7,
            column: 29
          },
          end: {
            line: 9,
            column: 5
          }
        },
        line: 7
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 27,
            column: 5
          }
        },
        line: 10
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        loc: {
          start: {
            line: 28,
            column: 85
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 28
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 69,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        loc: {
          start: {
            line: 69,
            column: 42
          },
          end: {
            line: 114,
            column: 5
          }
        },
        line: 69
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 103,
            column: 62
          },
          end: {
            line: 103,
            column: 63
          }
        },
        loc: {
          start: {
            line: 103,
            column: 70
          },
          end: {
            line: 103,
            column: 93
          }
        },
        line: 103
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 115,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        loc: {
          start: {
            line: 115,
            column: 43
          },
          end: {
            line: 129,
            column: 5
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 130,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        loc: {
          start: {
            line: 130,
            column: 39
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 130
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 136,
            column: 56
          },
          end: {
            line: 136,
            column: 57
          }
        },
        loc: {
          start: {
            line: 136,
            column: 61
          },
          end: {
            line: 136,
            column: 139
          }
        },
        line: 136
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 139,
            column: 49
          },
          end: {
            line: 139,
            column: 50
          }
        },
        loc: {
          start: {
            line: 139,
            column: 54
          },
          end: {
            line: 139,
            column: 105
          }
        },
        line: 139
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        loc: {
          start: {
            line: 144,
            column: 34
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 144
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 153,
            column: 5
          }
        },
        loc: {
          start: {
            line: 153,
            column: 37
          },
          end: {
            line: 212,
            column: 5
          }
        },
        line: 153
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 158,
            column: 42
          },
          end: {
            line: 158,
            column: 43
          }
        },
        loc: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 103
          }
        },
        line: 158
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 168,
            column: 43
          },
          end: {
            line: 168,
            column: 44
          }
        },
        loc: {
          start: {
            line: 168,
            column: 48
          },
          end: {
            line: 168,
            column: 58
          }
        },
        line: 168
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 179,
            column: 48
          },
          end: {
            line: 179,
            column: 49
          }
        },
        loc: {
          start: {
            line: 179,
            column: 53
          },
          end: {
            line: 179,
            column: 119
          }
        },
        line: 179
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 189,
            column: 39
          },
          end: {
            line: 189,
            column: 40
          }
        },
        loc: {
          start: {
            line: 189,
            column: 44
          },
          end: {
            line: 189,
            column: 67
          }
        },
        line: 189
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 199,
            column: 45
          },
          end: {
            line: 199,
            column: 46
          }
        },
        loc: {
          start: {
            line: 199,
            column: 50
          },
          end: {
            line: 199,
            column: 104
          }
        },
        line: 199
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 5
          }
        },
        loc: {
          start: {
            line: 213,
            column: 63
          },
          end: {
            line: 224,
            column: 5
          }
        },
        line: 213
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 225,
            column: 4
          },
          end: {
            line: 225,
            column: 5
          }
        },
        loc: {
          start: {
            line: 225,
            column: 74
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 225
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 54
          },
          end: {
            line: 258,
            column: 5
          }
        },
        line: 243
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 5
          }
        },
        loc: {
          start: {
            line: 259,
            column: 58
          },
          end: {
            line: 290,
            column: 5
          }
        },
        line: 259
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 262,
            column: 56
          },
          end: {
            line: 262,
            column: 57
          }
        },
        loc: {
          start: {
            line: 262,
            column: 65
          },
          end: {
            line: 262,
            column: 95
          }
        },
        line: 262
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 291,
            column: 5
          }
        },
        loc: {
          start: {
            line: 291,
            column: 36
          },
          end: {
            line: 299,
            column: 5
          }
        },
        line: 291
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 300,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        loc: {
          start: {
            line: 300,
            column: 44
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 300
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 311,
            column: 53
          },
          end: {
            line: 311,
            column: 54
          }
        },
        loc: {
          start: {
            line: 311,
            column: 62
          },
          end: {
            line: 311,
            column: 71
          }
        },
        line: 311
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 56
          },
          end: {
            line: 337,
            column: 5
          }
        },
        line: 318
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 322,
            column: 25
          },
          end: {
            line: 322,
            column: 26
          }
        },
        loc: {
          start: {
            line: 322,
            column: 30
          },
          end: {
            line: 322,
            column: 50
          }
        },
        line: 322
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 323,
            column: 25
          },
          end: {
            line: 323,
            column: 26
          }
        },
        loc: {
          start: {
            line: 323,
            column: 30
          },
          end: {
            line: 323,
            column: 56
          }
        },
        line: 323
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 334,
            column: 50
          },
          end: {
            line: 334,
            column: 51
          }
        },
        loc: {
          start: {
            line: 334,
            column: 55
          },
          end: {
            line: 334,
            column: 74
          }
        },
        line: 334
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 338,
            column: 4
          },
          end: {
            line: 338,
            column: 5
          }
        },
        loc: {
          start: {
            line: 338,
            column: 46
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 338
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 339,
            column: 24
          },
          end: {
            line: 339,
            column: 25
          }
        },
        loc: {
          start: {
            line: 339,
            column: 42
          },
          end: {
            line: 344,
            column: 9
          }
        },
        line: 339
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 346,
            column: 4
          },
          end: {
            line: 346,
            column: 5
          }
        },
        loc: {
          start: {
            line: 346,
            column: 45
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 346
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 368,
            column: 4
          },
          end: {
            line: 368,
            column: 5
          }
        },
        loc: {
          start: {
            line: 368,
            column: 37
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 368
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 382,
            column: 4
          },
          end: {
            line: 382,
            column: 5
          }
        },
        loc: {
          start: {
            line: 382,
            column: 45
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 382
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 395,
            column: 4
          },
          end: {
            line: 395,
            column: 5
          }
        },
        loc: {
          start: {
            line: 395,
            column: 30
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 395
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 32
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 406
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 57
          },
          end: {
            line: 430,
            column: 5
          }
        },
        line: 412
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 18,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 23
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 49
          },
          end: {
            line: 18,
            column: 50
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 51
          },
          end: {
            line: 19,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 51
          },
          end: {
            line: 19,
            column: 71
          }
        }, {
          start: {
            line: 19,
            column: 75
          },
          end: {
            line: 19,
            column: 77
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 8
          },
          end: {
            line: 38,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 34,
            column: 12
          },
          end: {
            line: 34,
            column: 26
          }
        }, {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 34,
            column: 44
          }
        }],
        line: 34
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 8
          },
          end: {
            line: 55,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "7": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 8
          },
          end: {
            line: 80,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 81,
            column: 34
          },
          end: {
            line: 81,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 34
          },
          end: {
            line: 81,
            column: 49
          }
        }, {
          start: {
            line: 81,
            column: 53
          },
          end: {
            line: 81,
            column: 55
          }
        }],
        line: 81
      },
      "10": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 84,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 84,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "11": {
        loc: {
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 83,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 83,
            column: 16
          },
          end: {
            line: 83,
            column: 42
          }
        }, {
          start: {
            line: 83,
            column: 46
          },
          end: {
            line: 83,
            column: 72
          }
        }],
        line: 83
      },
      "12": {
        loc: {
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 29
          },
          end: {
            line: 86,
            column: 55
          }
        }, {
          start: {
            line: 86,
            column: 59
          },
          end: {
            line: 86,
            column: 80
          }
        }, {
          start: {
            line: 86,
            column: 84
          },
          end: {
            line: 86,
            column: 103
          }
        }],
        line: 86
      },
      "13": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 89,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "14": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 87,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 87,
            column: 33
          }
        }, {
          start: {
            line: 87,
            column: 37
          },
          end: {
            line: 87,
            column: 46
          }
        }],
        line: 87
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 12
          },
          end: {
            line: 106,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "16": {
        loc: {
          start: {
            line: 116,
            column: 22
          },
          end: {
            line: 116,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 116,
            column: 22
          },
          end: {
            line: 116,
            column: 36
          }
        }, {
          start: {
            line: 116,
            column: 40
          },
          end: {
            line: 116,
            column: 42
          }
        }],
        line: 116
      },
      "17": {
        loc: {
          start: {
            line: 117,
            column: 28
          },
          end: {
            line: 117,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 28
          },
          end: {
            line: 117,
            column: 48
          }
        }, {
          start: {
            line: 117,
            column: 52
          },
          end: {
            line: 117,
            column: 54
          }
        }],
        line: 117
      },
      "18": {
        loc: {
          start: {
            line: 131,
            column: 26
          },
          end: {
            line: 131,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 26
          },
          end: {
            line: 131,
            column: 48
          }
        }, {
          start: {
            line: 131,
            column: 52
          },
          end: {
            line: 131,
            column: 53
          }
        }],
        line: 131
      },
      "19": {
        loc: {
          start: {
            line: 132,
            column: 54
          },
          end: {
            line: 132,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 54
          },
          end: {
            line: 132,
            column: 74
          }
        }, {
          start: {
            line: 132,
            column: 78
          },
          end: {
            line: 132,
            column: 80
          }
        }],
        line: 132
      },
      "20": {
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 136,
            column: 146
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 136,
            column: 140
          }
        }, {
          start: {
            line: 136,
            column: 144
          },
          end: {
            line: 136,
            column: 146
          }
        }],
        line: 136
      },
      "21": {
        loc: {
          start: {
            line: 136,
            column: 61
          },
          end: {
            line: 136,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 136,
            column: 61
          },
          end: {
            line: 136,
            column: 82
          }
        }, {
          start: {
            line: 136,
            column: 86
          },
          end: {
            line: 136,
            column: 111
          }
        }, {
          start: {
            line: 136,
            column: 115
          },
          end: {
            line: 136,
            column: 139
          }
        }],
        line: 136
      },
      "22": {
        loc: {
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 112
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 26
          },
          end: {
            line: 139,
            column: 106
          }
        }, {
          start: {
            line: 139,
            column: 110
          },
          end: {
            line: 139,
            column: 112
          }
        }],
        line: 139
      },
      "23": {
        loc: {
          start: {
            line: 139,
            column: 54
          },
          end: {
            line: 139,
            column: 105
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 54
          },
          end: {
            line: 139,
            column: 77
          }
        }, {
          start: {
            line: 139,
            column: 81
          },
          end: {
            line: 139,
            column: 105
          }
        }],
        line: 139
      },
      "24": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "25": {
        loc: {
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 147,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 16
          },
          end: {
            line: 147,
            column: 51
          }
        }, {
          start: {
            line: 147,
            column: 55
          },
          end: {
            line: 147,
            column: 79
          }
        }],
        line: 147
      },
      "26": {
        loc: {
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 155,
            column: 22
          },
          end: {
            line: 155,
            column: 36
          }
        }, {
          start: {
            line: 155,
            column: 40
          },
          end: {
            line: 155,
            column: 42
          }
        }],
        line: 155
      },
      "27": {
        loc: {
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 47
          },
          end: {
            line: 158,
            column: 73
          }
        }, {
          start: {
            line: 158,
            column: 77
          },
          end: {
            line: 158,
            column: 103
          }
        }],
        line: 158
      },
      "28": {
        loc: {
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 159,
            column: 8
          },
          end: {
            line: 166,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 159
      },
      "29": {
        loc: {
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 159,
            column: 12
          },
          end: {
            line: 159,
            column: 37
          }
        }, {
          start: {
            line: 159,
            column: 41
          },
          end: {
            line: 159,
            column: 56
          }
        }],
        line: 159
      },
      "30": {
        loc: {
          start: {
            line: 179,
            column: 53
          },
          end: {
            line: 179,
            column: 119
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 179,
            column: 53
          },
          end: {
            line: 179,
            column: 77
          }
        }, {
          start: {
            line: 179,
            column: 81
          },
          end: {
            line: 179,
            column: 119
          }
        }],
        line: 179
      },
      "31": {
        loc: {
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 8
          },
          end: {
            line: 187,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "32": {
        loc: {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 180,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 180,
            column: 28
          }
        }, {
          start: {
            line: 180,
            column: 32
          },
          end: {
            line: 180,
            column: 63
          }
        }],
        line: 180
      },
      "33": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 197,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "34": {
        loc: {
          start: {
            line: 199,
            column: 50
          },
          end: {
            line: 199,
            column: 104
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 199,
            column: 50
          },
          end: {
            line: 199,
            column: 63
          }
        }, {
          start: {
            line: 199,
            column: 67
          },
          end: {
            line: 199,
            column: 104
          }
        }],
        line: 199
      },
      "35": {
        loc: {
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 201,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 201
      },
      "36": {
        loc: {
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 201,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 201,
            column: 16
          },
          end: {
            line: 201,
            column: 31
          }
        }, {
          start: {
            line: 201,
            column: 35
          },
          end: {
            line: 201,
            column: 87
          }
        }],
        line: 201
      },
      "37": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 222,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "38": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 25
          }
        }, {
          start: {
            line: 219,
            column: 29
          },
          end: {
            line: 219,
            column: 48
          }
        }],
        line: 219
      },
      "39": {
        loc: {
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 12
          },
          end: {
            line: 239,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "40": {
        loc: {
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 230,
            column: 16
          },
          end: {
            line: 230,
            column: 33
          }
        }, {
          start: {
            line: 230,
            column: 37
          },
          end: {
            line: 230,
            column: 76
          }
        }],
        line: 230
      },
      "41": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 238,
            column: 17
          }
        }, {
          start: {
            line: 235,
            column: 21
          },
          end: {
            line: 238,
            column: 17
          }
        }],
        line: 232
      },
      "42": {
        loc: {
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "43": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 253,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 252,
            column: 65
          }
        }, {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 65
          }
        }],
        line: 252
      },
      "44": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 270,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "45": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 39
          }
        }, {
          start: {
            line: 261,
            column: 43
          },
          end: {
            line: 261,
            column: 59
          }
        }],
        line: 261
      },
      "46": {
        loc: {
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "47": {
        loc: {
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 271,
            column: 8
          },
          end: {
            line: 277,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 271
      },
      "48": {
        loc: {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 271,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 271,
            column: 55
          }
        }, {
          start: {
            line: 271,
            column: 59
          },
          end: {
            line: 271,
            column: 85
          }
        }],
        line: 271
      },
      "49": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 284,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "50": {
        loc: {
          start: {
            line: 280,
            column: 23
          },
          end: {
            line: 280,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 56
          },
          end: {
            line: 280,
            column: 72
          }
        }, {
          start: {
            line: 280,
            column: 75
          },
          end: {
            line: 280,
            column: 80
          }
        }],
        line: 280
      },
      "51": {
        loc: {
          start: {
            line: 287,
            column: 24
          },
          end: {
            line: 287,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 57
          },
          end: {
            line: 287,
            column: 60
          }
        }, {
          start: {
            line: 287,
            column: 63
          },
          end: {
            line: 287,
            column: 66
          }
        }],
        line: 287
      },
      "52": {
        loc: {
          start: {
            line: 288,
            column: 23
          },
          end: {
            line: 288,
            column: 114
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 56
          },
          end: {
            line: 288,
            column: 77
          }
        }, {
          start: {
            line: 288,
            column: 80
          },
          end: {
            line: 288,
            column: 114
          }
        }],
        line: 288
      },
      "53": {
        loc: {
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 292,
            column: 8
          },
          end: {
            line: 294,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 292
      },
      "54": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 292,
            column: 37
          }
        }, {
          start: {
            line: 292,
            column: 41
          },
          end: {
            line: 292,
            column: 61
          }
        }],
        line: 292
      },
      "55": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 297,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "56": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 31
          }
        }, {
          start: {
            line: 295,
            column: 35
          },
          end: {
            line: 295,
            column: 49
          }
        }],
        line: 295
      },
      "57": {
        loc: {
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 8
          },
          end: {
            line: 304,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "58": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 302,
            column: 29
          }
        }, {
          start: {
            line: 302,
            column: 34
          },
          end: {
            line: 302,
            column: 53
          }
        }, {
          start: {
            line: 302,
            column: 57
          },
          end: {
            line: 302,
            column: 71
          }
        }, {
          start: {
            line: 302,
            column: 75
          },
          end: {
            line: 302,
            column: 87
          }
        }],
        line: 302
      },
      "59": {
        loc: {
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 8
          },
          end: {
            line: 309,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "60": {
        loc: {
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 12
          },
          end: {
            line: 305,
            column: 38
          }
        }, {
          start: {
            line: 305,
            column: 42
          },
          end: {
            line: 305,
            column: 67
          }
        }],
        line: 305
      },
      "61": {
        loc: {
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 12
          },
          end: {
            line: 308,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "62": {
        loc: {
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 310,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 310
      },
      "63": {
        loc: {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 310,
            column: 39
          }
        }, {
          start: {
            line: 310,
            column: 43
          },
          end: {
            line: 310,
            column: 59
          }
        }],
        line: 310
      },
      "64": {
        loc: {
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 12
          },
          end: {
            line: 314,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      },
      "65": {
        loc: {
          start: {
            line: 321,
            column: 26
          },
          end: {
            line: 323,
            column: 57
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 14
          },
          end: {
            line: 322,
            column: 51
          }
        }, {
          start: {
            line: 323,
            column: 14
          },
          end: {
            line: 323,
            column: 57
          }
        }],
        line: 321
      },
      "66": {
        loc: {
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 15
          },
          end: {
            line: 324,
            column: 26
          }
        }, {
          start: {
            line: 324,
            column: 30
          },
          end: {
            line: 324,
            column: 46
          }
        }],
        line: 324
      },
      "67": {
        loc: {
          start: {
            line: 334,
            column: 26
          },
          end: {
            line: 334,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 39
          },
          end: {
            line: 334,
            column: 75
          }
        }, {
          start: {
            line: 334,
            column: 78
          },
          end: {
            line: 334,
            column: 87
          }
        }],
        line: 334
      },
      "68": {
        loc: {
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 12
          },
          end: {
            line: 356,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "69": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 364,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "70": {
        loc: {
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 357,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 16
          },
          end: {
            line: 357,
            column: 50
          }
        }, {
          start: {
            line: 357,
            column: 54
          },
          end: {
            line: 357,
            column: 83
          }
        }],
        line: 357
      },
      "71": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 371,
            column: 64
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 371,
            column: 64
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "72": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 373,
            column: 50
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 373,
            column: 50
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "73": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 375,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 375,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "74": {
        loc: {
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 377,
            column: 65
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 376,
            column: 8
          },
          end: {
            line: 377,
            column: 65
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 376
      },
      "75": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 379,
            column: 62
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 379,
            column: 62
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "76": {
        loc: {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 385
      },
      "77": {
        loc: {
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 387,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 385,
            column: 16
          },
          end: {
            line: 385,
            column: 40
          }
        }, {
          start: {
            line: 386,
            column: 16
          },
          end: {
            line: 386,
            column: 51
          }
        }, {
          start: {
            line: 387,
            column: 16
          },
          end: {
            line: 387,
            column: 40
          }
        }],
        line: 385
      },
      "78": {
        loc: {
          start: {
            line: 390,
            column: 23
          },
          end: {
            line: 390,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 390,
            column: 51
          },
          end: {
            line: 390,
            column: 68
          }
        }, {
          start: {
            line: 390,
            column: 71
          },
          end: {
            line: 390,
            column: 80
          }
        }],
        line: 390
      },
      "79": {
        loc: {
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 397,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 396,
            column: 8
          },
          end: {
            line: 397,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 396
      },
      "80": {
        loc: {
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 399,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 8
          },
          end: {
            line: 399,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "81": {
        loc: {
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 401,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 8
          },
          end: {
            line: 401,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 400
      },
      "82": {
        loc: {
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 403,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 8
          },
          end: {
            line: 403,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "83": {
        loc: {
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 407,
            column: 8
          },
          end: {
            line: 409,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 407
      },
      "84": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "85": {
        loc: {
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 415,
            column: 12
          },
          end: {
            line: 415,
            column: 51
          }
        }, {
          start: {
            line: 415,
            column: 55
          },
          end: {
            line: 415,
            column: 82
          }
        }],
        line: 415
      },
      "86": {
        loc: {
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "87": {
        loc: {
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 422,
            column: 12
          },
          end: {
            line: 422,
            column: 50
          }
        }, {
          start: {
            line: 422,
            column: 54
          },
          end: {
            line: 422,
            column: 85
          }
        }],
        line: 422
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0, 0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/nodeAnalysis.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/nodeAnalysis.ts"],
      sourcesContent: ["import { N8nNode, N8nWorkflow, N8nNodeTypeDescription } from '../types/n8n.js';\nimport {\n  SuggestionEngine,\n  NodeFlowAnalysis,\n  NodeConnectionSuggestion,\n  ParameterMapping,\n} from '../ai/suggestionEngine.js';\n\nexport interface WorkflowAnalysisResult {\n  workflowId: string;\n  workflowName: string;\n  nodeCount: number;\n  connectionCount: number;\n  complexityScore: number;\n  suggestedConnections: NodeConnectionSuggestion[];\n  parameterMappings: ParameterMapping[];\n  optimizationSuggestions: string[];\n  flowAnalysis: NodeFlowAnalysis[];\n  potentialIssues: WorkflowIssue[];\n}\n\nexport interface WorkflowIssue {\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  type: 'connection' | 'parameter' | 'performance' | 'logic' | 'security';\n  nodeId?: string;\n  message: string;\n  suggestion?: string;\n}\n\nexport interface NodeCompatibilityResult {\n  sourceNodeId: string;\n  targetNodeId: string;\n  compatible: boolean;\n  compatibilityScore: number;\n  issues: string[];\n  suggestions: string[];\n  requiredTransformations: Array<{\n    parameter: string;\n    transformation: string;\n    reason: string;\n  }>;\n}\n\nexport interface ParameterAnalysisResult {\n  nodeId: string;\n  parameters: Array<{\n    name: string;\n    currentValue: unknown;\n    suggestedValue?: unknown;\n    source: 'manual' | 'expression' | 'suggested';\n    confidence: number;\n    reasoning: string;\n    issues: string[];\n  }>;\n  missingRequiredParameters: string[];\n  unusedOptionalParameters: string[];\n}\n\nexport interface DataFlowAnalysis {\n  path: Array<{\n    nodeId: string;\n    nodeName: string;\n    nodeType: string;\n    dataTransformation: string;\n  }>;\n  dataTypes: Array<{\n    step: number;\n    nodeId: string;\n    expectedType: string;\n    actualType?: string;\n    schema?: Record<string, unknown>;\n  }>;\n  bottlenecks: Array<{\n    nodeId: string;\n    reason: string;\n    impact: 'low' | 'medium' | 'high';\n    suggestion: string;\n  }>;\n}\n\nexport class NodeAnalyzer {\n  private suggestionEngine: SuggestionEngine;\n\n  constructor() {\n    this.suggestionEngine = new SuggestionEngine();\n  }\n\n  loadNodeTypes(nodeTypes: N8nNodeTypeDescription[]): void {\n    this.suggestionEngine.loadNodeTypes(nodeTypes);\n  }\n\n  analyzeWorkflow(workflow: N8nWorkflow): WorkflowAnalysisResult {\n    const flowAnalysis = this.suggestionEngine.analyzeWorkflowConnections(workflow);\n    const smartSuggestions = this.suggestionEngine.generateSmartWorkflowSuggestions(workflow);\n    const potentialIssues = this.identifyWorkflowIssues(workflow);\n    const complexityScore = this.calculateComplexityScore(workflow);\n\n    return {\n      workflowId: workflow.id,\n      workflowName: workflow.name,\n      nodeCount: workflow.nodes?.length || 0,\n      connectionCount: this.countConnections(workflow.connections || {}),\n      complexityScore,\n      suggestedConnections: smartSuggestions.missingConnections,\n      parameterMappings: smartSuggestions.parameterMappingOpportunities,\n      optimizationSuggestions: smartSuggestions.optimizationSuggestions,\n      flowAnalysis,\n      potentialIssues,\n    };\n  }\n\n  analyzeNodeCompatibility(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceNodeType?: N8nNodeTypeDescription,\n    targetNodeType?: N8nNodeTypeDescription\n  ): NodeCompatibilityResult {\n    const issues: string[] = [];\n    const suggestions: string[] = [];\n    const requiredTransformations: Array<{\n      parameter: string;\n      transformation: string;\n      reason: string;\n    }> = [];\n\n    let compatibilityScore = 1.0;\n\n    // Check data type compatibility\n    if (sourceNodeType && targetNodeType) {\n      const dataTypeIssues = this.checkDataTypeCompatibility(sourceNodeType, targetNodeType);\n      issues.push(...dataTypeIssues.issues);\n      compatibilityScore *= dataTypeIssues.compatibilityFactor;\n    }\n\n    // Check parameter compatibility\n    if (targetNodeType) {\n      const parameterAnalysis = this.analyzeParameterCompatibility(\n        sourceNode,\n        targetNode,\n        targetNodeType\n      );\n      requiredTransformations.push(...parameterAnalysis.transformations);\n      suggestions.push(...parameterAnalysis.suggestions);\n      compatibilityScore *= parameterAnalysis.compatibilityFactor;\n    }\n\n    // Check for common connection patterns\n    const patternAnalysis = this.analyzeConnectionPatterns(sourceNode.type, targetNode.type);\n    if (!patternAnalysis.isCommonPattern) {\n      compatibilityScore *= 0.8;\n      issues.push('This connection pattern is uncommon and may require additional configuration');\n    }\n\n    // Generate suggestions based on analysis\n    if (compatibilityScore < 0.7) {\n      suggestions.push('Consider adding a transformation node between these nodes');\n    }\n\n    if (requiredTransformations.length > 3) {\n      suggestions.push(\n        'Multiple transformations required - consider using a Function node for complex data processing'\n      );\n    }\n\n    return {\n      sourceNodeId: sourceNode.id,\n      targetNodeId: targetNode.id,\n      compatible: compatibilityScore > 0.5,\n      compatibilityScore,\n      issues,\n      suggestions,\n      requiredTransformations,\n    };\n  }\n\n  analyzeNodeParameters(node: N8nNode, nodeType?: N8nNodeTypeDescription): ParameterAnalysisResult {\n    const parameters: Array<{\n      name: string;\n      currentValue: unknown;\n      suggestedValue?: unknown;\n      source: 'manual' | 'expression' | 'suggested';\n      confidence: number;\n      reasoning: string;\n      issues: string[];\n    }> = [];\n    const missingRequiredParameters: string[] = [];\n    const unusedOptionalParameters: string[] = [];\n\n    if (!nodeType) {\n      return {\n        nodeId: node.id,\n        parameters,\n        missingRequiredParameters,\n        unusedOptionalParameters,\n      };\n    }\n\n    const currentParameters = node.parameters || {};\n\n    for (const property of nodeType.properties) {\n      if (property.type === 'hidden' || property.type === 'notice') continue;\n\n      const currentValue = currentParameters[property.name];\n      const hasValue = currentValue !== undefined && currentValue !== null && currentValue !== '';\n\n      if (property.required && !hasValue) {\n        missingRequiredParameters.push(property.name);\n      }\n\n      const suggestedValue = this.generateParameterSuggestion(node, property, nodeType);\n\n      parameters.push({\n        name: property.name,\n        currentValue,\n        suggestedValue: suggestedValue.value,\n        source: this.determineParameterSource(currentValue),\n        confidence: suggestedValue.confidence,\n        reasoning: suggestedValue.reasoning,\n        issues: this.validateParameterValue(currentValue, property),\n      });\n    }\n\n    // Find unused parameters\n    for (const paramName of Object.keys(currentParameters)) {\n      const isKnownParameter = nodeType.properties.some(prop => prop.name === paramName);\n      if (!isKnownParameter) {\n        unusedOptionalParameters.push(paramName);\n      }\n    }\n\n    return {\n      nodeId: node.id,\n      parameters,\n      missingRequiredParameters,\n      unusedOptionalParameters,\n    };\n  }\n\n  analyzeDataFlow(workflow: N8nWorkflow, startNodeId?: string): DataFlowAnalysis {\n    const nodes = workflow.nodes || [];\n    const connections = workflow.connections || {};\n\n    // Build execution path\n    const path = this.buildExecutionPath(nodes, connections, startNodeId);\n\n    // Analyze data types at each step\n    const dataTypes = this.analyzeDataTypesInPath(path, connections);\n\n    // Identify bottlenecks\n    const bottlenecks = this.identifyDataFlowBottlenecks(path, nodes);\n\n    return {\n      path,\n      dataTypes,\n      bottlenecks,\n    };\n  }\n\n  private calculateComplexityScore(workflow: N8nWorkflow): number {\n    const nodeCount = workflow.nodes?.length || 0;\n    const connectionCount = this.countConnections(workflow.connections || {});\n\n    // Base complexity on nodes and connections\n    let complexity = nodeCount * 0.5 + connectionCount * 0.3;\n\n    // Add complexity for conditional logic\n    const conditionalNodes =\n      workflow.nodes?.filter(\n        n => n.type.includes('if') || n.type.includes('switch') || n.type.includes('merge')\n      ) || [];\n    complexity += conditionalNodes.length * 1.5;\n\n    // Add complexity for loops\n    const loopNodes =\n      workflow.nodes?.filter(n => n.type.includes('loop') || n.type.includes('split')) || [];\n    complexity += loopNodes.length * 2.0;\n\n    // Normalize to 0-10 scale\n    return Math.min(complexity / 3, 10);\n  }\n\n  private countConnections(connections: Record<string, unknown>): number {\n    let count = 0;\n    for (const nodeConnections of Object.values(connections)) {\n      if (typeof nodeConnections === 'object' && nodeConnections !== null) {\n        count += Object.keys(nodeConnections).length;\n      }\n    }\n    return count;\n  }\n\n  private identifyWorkflowIssues(workflow: N8nWorkflow): WorkflowIssue[] {\n    const issues: WorkflowIssue[] = [];\n    const nodes = workflow.nodes || [];\n\n    // Check for common issues\n\n    // 1. Missing trigger nodes\n    const triggerNodes = nodes.filter(\n      n => n.type.includes('trigger') || n.type.includes('webhook')\n    );\n    if (triggerNodes.length === 0 && workflow.active) {\n      issues.push({\n        severity: 'high',\n        type: 'logic',\n        message: 'Active workflow has no trigger nodes - it may never execute',\n        suggestion: 'Add a trigger node to start the workflow execution',\n      });\n    }\n\n    // 2. Disabled nodes in critical path\n    const disabledNodes = nodes.filter(n => n.disabled);\n    for (const node of disabledNodes) {\n      issues.push({\n        severity: 'medium',\n        type: 'logic',\n        nodeId: node.id,\n        message: `Node \"${node.name}\" is disabled but may be part of the workflow`,\n        suggestion: 'Review if this node should be enabled or removed',\n      });\n    }\n\n    // 3. Missing error handling\n    const errorHandlingNodes = nodes.filter(\n      n => n.type.includes('error') || n.name.toLowerCase().includes('error')\n    );\n    if (nodes.length > 5 && errorHandlingNodes.length === 0) {\n      issues.push({\n        severity: 'medium',\n        type: 'logic',\n        message: 'Complex workflow lacks error handling nodes',\n        suggestion: 'Consider adding error handling for robust workflow execution',\n      });\n    }\n\n    // 4. Performance concerns\n    const httpNodes = nodes.filter(n => n.type.includes('http'));\n    if (httpNodes.length > 10) {\n      issues.push({\n        severity: 'medium',\n        type: 'performance',\n        message: 'Many HTTP nodes detected - may impact performance',\n        suggestion: 'Consider batching requests or using pagination',\n      });\n    }\n\n    // 5. Security concerns\n    const credentialNodes = nodes.filter(\n      n => n.credentials && Object.keys(n.credentials).length > 0\n    );\n    for (const node of credentialNodes) {\n      if (node.parameters && JSON.stringify(node.parameters).includes('password')) {\n        issues.push({\n          severity: 'critical',\n          type: 'security',\n          nodeId: node.id,\n          message: 'Potential hardcoded credentials detected',\n          suggestion: 'Use credential system instead of hardcoded values',\n        });\n      }\n    }\n\n    return issues;\n  }\n\n  private checkDataTypeCompatibility(\n    sourceNodeType: N8nNodeTypeDescription,\n    targetNodeType: N8nNodeTypeDescription\n  ): { issues: string[]; compatibilityFactor: number } {\n    const issues: string[] = [];\n    let compatibilityFactor = 1.0;\n\n    // Check common incompatibility patterns\n    const sourceIsArray = sourceNodeType.name.toLowerCase().includes('split');\n    const targetExpectsSingle = !targetNodeType.name.toLowerCase().includes('merge');\n\n    if (sourceIsArray && targetExpectsSingle) {\n      issues.push('Source produces array data but target expects single items');\n      compatibilityFactor *= 0.6;\n    }\n\n    return { issues, compatibilityFactor };\n  }\n\n  private analyzeParameterCompatibility(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    targetNodeType: N8nNodeTypeDescription\n  ): {\n    transformations: Array<{ parameter: string; transformation: string; reason: string }>;\n    suggestions: string[];\n    compatibilityFactor: number;\n  } {\n    const transformations: Array<{ parameter: string; transformation: string; reason: string }> =\n      [];\n    const suggestions: string[] = [];\n    let compatibilityFactor = 1.0;\n\n    for (const property of targetNodeType.properties) {\n      if (property.required && !targetNode.parameters?.[property.name]) {\n        const suggestedTransformation = this.suggestParameterTransformation(property, sourceNode);\n        if (suggestedTransformation) {\n          transformations.push(suggestedTransformation);\n        } else {\n          compatibilityFactor *= 0.8;\n          suggestions.push(`Required parameter \"${property.name}\" needs to be configured`);\n        }\n      }\n    }\n\n    return { transformations, suggestions, compatibilityFactor };\n  }\n\n  private analyzeConnectionPatterns(\n    sourceType: string,\n    targetType: string\n  ): { isCommonPattern: boolean; confidence: number } {\n    const commonPatterns = [\n      { source: 'trigger', target: 'http', confidence: 0.9 },\n      { source: 'http', target: 'json', confidence: 0.8 },\n      { source: 'json', target: 'set', confidence: 0.7 },\n      { source: 'if', target: 'http', confidence: 0.6 },\n      { source: 'webhook', target: 'response', confidence: 0.9 },\n    ];\n\n    for (const pattern of commonPatterns) {\n      if (\n        sourceType.toLowerCase().includes(pattern.source) &&\n        targetType.toLowerCase().includes(pattern.target)\n      ) {\n        return { isCommonPattern: true, confidence: pattern.confidence };\n      }\n    }\n\n    return { isCommonPattern: false, confidence: 0.3 };\n  }\n\n  private generateParameterSuggestion(\n    node: N8nNode,\n    property: any,\n    nodeType: N8nNodeTypeDescription\n  ): { value: unknown; confidence: number; reasoning: string } {\n    // Generate smart parameter suggestions based on context\n\n    if (property.type === 'options' && property.options) {\n      const defaultOption = property.options.find((opt: any) => opt.value === property.default);\n      if (defaultOption) {\n        return {\n          value: defaultOption.value,\n          confidence: 0.7,\n          reasoning: `Default option for ${property.displayName}`,\n        };\n      }\n    }\n\n    if (property.name.toLowerCase().includes('url') && node.type.includes('http')) {\n      return {\n        value: 'https://api.example.com/endpoint',\n        confidence: 0.5,\n        reasoning: 'Common URL pattern for HTTP requests',\n      };\n    }\n\n    if (property.type === 'boolean') {\n      return {\n        value: property.default !== undefined ? property.default : false,\n        confidence: 0.6,\n        reasoning: 'Using default boolean value',\n      };\n    }\n\n    return {\n      value: property.default,\n      confidence: property.default !== undefined ? 0.8 : 0.3,\n      reasoning:\n        property.default !== undefined ? 'Using default value' : 'No specific suggestion available',\n    };\n  }\n\n  private determineParameterSource(value: unknown): 'manual' | 'expression' | 'suggested' {\n    if (typeof value === 'string' && value.includes('{{')) {\n      return 'expression';\n    }\n    if (value === undefined || value === null) {\n      return 'suggested';\n    }\n    return 'manual';\n  }\n\n  private validateParameterValue(value: unknown, property: any): string[] {\n    const issues: string[] = [];\n\n    if (property.required && (value === undefined || value === null || value === '')) {\n      issues.push('Required parameter is missing');\n    }\n\n    if (property.type === 'number' && typeof value === 'string') {\n      if (isNaN(Number(value))) {\n        issues.push('Expected number but got non-numeric string');\n      }\n    }\n\n    if (property.type === 'options' && property.options) {\n      const validValues = property.options.map((opt: any) => opt.value);\n      if (!validValues.includes(value)) {\n        issues.push(`Value not in allowed options: ${validValues.join(', ')}`);\n      }\n    }\n\n    return issues;\n  }\n\n  private buildExecutionPath(\n    nodes: N8nNode[],\n    connections: Record<string, unknown>,\n    startNodeId?: string\n  ): Array<{ nodeId: string; nodeName: string; nodeType: string; dataTransformation: string }> {\n    const path = [];\n\n    // Simple linear path building (could be enhanced for complex branching)\n    let currentNode = startNodeId\n      ? nodes.find(n => n.id === startNodeId)\n      : nodes.find(n => n.type.includes('trigger'));\n\n    while (currentNode && path.length < 50) {\n      // Prevent infinite loops\n      path.push({\n        nodeId: currentNode.id,\n        nodeName: currentNode.name,\n        nodeType: currentNode.type,\n        dataTransformation: this.describeDataTransformation(currentNode),\n      });\n\n      // Find next node (simplified)\n      const nextNodeId = this.findNextNode(currentNode.id, connections);\n      currentNode = nextNodeId ? nodes.find(n => n.id === nextNodeId) : undefined;\n    }\n\n    return path;\n  }\n\n  private analyzeDataTypesInPath(\n    path: Array<{ nodeId: string; nodeName: string; nodeType: string; dataTransformation: string }>,\n    connections: Record<string, unknown>\n  ): Array<{\n    step: number;\n    nodeId: string;\n    expectedType: string;\n    actualType?: string;\n    schema?: Record<string, unknown>;\n  }> {\n    return path.map((step, index) => ({\n      step: index,\n      nodeId: step.nodeId,\n      expectedType: this.predictDataType(step.nodeType),\n      schema: this.predictDataSchema(step.nodeType),\n    }));\n  }\n\n  private identifyDataFlowBottlenecks(\n    path: Array<{ nodeId: string; nodeName: string; nodeType: string; dataTransformation: string }>,\n    nodes: N8nNode[]\n  ): Array<{\n    nodeId: string;\n    reason: string;\n    impact: 'low' | 'medium' | 'high';\n    suggestion: string;\n  }> {\n    const bottlenecks = [];\n\n    for (const step of path) {\n      if (step.nodeType.includes('http')) {\n        bottlenecks.push({\n          nodeId: step.nodeId,\n          reason: 'HTTP requests can be slow and may fail',\n          impact: 'medium' as const,\n          suggestion: 'Consider adding retry logic and timeout configuration',\n        });\n      }\n\n      if (step.nodeType.includes('database') || step.nodeType.includes('sql')) {\n        bottlenecks.push({\n          nodeId: step.nodeId,\n          reason: 'Database operations can be slow with large datasets',\n          impact: 'high' as const,\n          suggestion: 'Consider using pagination and indexed queries',\n        });\n      }\n    }\n\n    return bottlenecks;\n  }\n\n  private describeDataTransformation(node: N8nNode): string {\n    const nodeType = node.type.toLowerCase();\n\n    if (nodeType.includes('set')) return 'Transforms data by setting specific fields';\n    if (nodeType.includes('json')) return 'Parses or converts JSON data';\n    if (nodeType.includes('http')) return 'Fetches data from HTTP endpoint';\n    if (nodeType.includes('if')) return 'Conditionally routes data based on criteria';\n    if (nodeType.includes('function')) return 'Applies custom JavaScript transformation';\n\n    return 'Processes data according to node configuration';\n  }\n\n  private findNextNode(\n    currentNodeId: string,\n    connections: Record<string, unknown>\n  ): string | undefined {\n    // Simplified next node finding (real implementation would parse n8n connection format)\n    for (const [nodeId, nodeConnections] of Object.entries(connections)) {\n      if (\n        nodeId === currentNodeId &&\n        typeof nodeConnections === 'object' &&\n        nodeConnections !== null\n      ) {\n        // Return first connected node (simplified)\n        const connectionKeys = Object.keys(nodeConnections);\n        return connectionKeys.length > 0 ? connectionKeys[0] : undefined;\n      }\n    }\n    return undefined;\n  }\n\n  private predictDataType(nodeType: string): string {\n    if (nodeType.includes('http')) return 'object';\n    if (nodeType.includes('json')) return 'object';\n    if (nodeType.includes('set')) return 'object';\n    if (nodeType.includes('function')) return 'any';\n    return 'unknown';\n  }\n\n  private predictDataSchema(nodeType: string): Record<string, unknown> | undefined {\n    if (nodeType.includes('http')) {\n      return { data: {}, headers: {}, status: 'number' };\n    }\n    return undefined;\n  }\n\n  private suggestParameterTransformation(\n    property: any,\n    sourceNode: N8nNode\n  ): { parameter: string; transformation: string; reason: string } | null {\n    const paramName = property.name;\n    const sourceType = sourceNode.type;\n\n    if (paramName.toLowerCase().includes('url') && sourceType.includes('http')) {\n      return {\n        parameter: paramName,\n        transformation: `{{$node[\"${sourceNode.name}\"].json[\"url\"]}}`,\n        reason: 'Map URL from HTTP response',\n      };\n    }\n\n    if (paramName.toLowerCase().includes('id') && sourceType.includes('database')) {\n      return {\n        parameter: paramName,\n        transformation: `{{$node[\"${sourceNode.name}\"].json[\"id\"]}}`,\n        reason: 'Map ID from database result',\n      };\n    }\n\n    return null;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "92c0269d20159be75691266705f9c3b52c4e7a7d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_wcd6uik6t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_wcd6uik6t();
import { SuggestionEngine } from '../ai/suggestionEngine.js';
export class NodeAnalyzer {
  suggestionEngine;
  constructor() {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[0]++;
    cov_wcd6uik6t().s[0]++;
    this.suggestionEngine = new SuggestionEngine();
  }
  loadNodeTypes(nodeTypes) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[1]++;
    cov_wcd6uik6t().s[1]++;
    this.suggestionEngine.loadNodeTypes(nodeTypes);
  }
  analyzeWorkflow(workflow) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[2]++;
    const flowAnalysis =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[2]++, this.suggestionEngine.analyzeWorkflowConnections(workflow));
    const smartSuggestions =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[3]++, this.suggestionEngine.generateSmartWorkflowSuggestions(workflow));
    const potentialIssues =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[4]++, this.identifyWorkflowIssues(workflow));
    const complexityScore =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[5]++, this.calculateComplexityScore(workflow));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[6]++;
    return {
      workflowId: workflow.id,
      workflowName: workflow.name,
      nodeCount:
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[0][0]++, workflow.nodes?.length) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[0][1]++, 0),
      connectionCount: this.countConnections(
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[1][0]++, workflow.connections) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[1][1]++, {})),
      complexityScore,
      suggestedConnections: smartSuggestions.missingConnections,
      parameterMappings: smartSuggestions.parameterMappingOpportunities,
      optimizationSuggestions: smartSuggestions.optimizationSuggestions,
      flowAnalysis,
      potentialIssues
    };
  }
  analyzeNodeCompatibility(sourceNode, targetNode, sourceNodeType, targetNodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[3]++;
    const issues =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[7]++, []);
    const suggestions =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[8]++, []);
    const requiredTransformations =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[9]++, []);
    let compatibilityScore =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[10]++, 1.0);
    // Check data type compatibility
    /* istanbul ignore next */
    cov_wcd6uik6t().s[11]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[3][0]++, sourceNodeType) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[3][1]++, targetNodeType)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[2][0]++;
      const dataTypeIssues =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[12]++, this.checkDataTypeCompatibility(sourceNodeType, targetNodeType));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[13]++;
      issues.push(...dataTypeIssues.issues);
      /* istanbul ignore next */
      cov_wcd6uik6t().s[14]++;
      compatibilityScore *= dataTypeIssues.compatibilityFactor;
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[2][1]++;
    }
    // Check parameter compatibility
    cov_wcd6uik6t().s[15]++;
    if (targetNodeType) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[4][0]++;
      const parameterAnalysis =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[16]++, this.analyzeParameterCompatibility(sourceNode, targetNode, targetNodeType));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[17]++;
      requiredTransformations.push(...parameterAnalysis.transformations);
      /* istanbul ignore next */
      cov_wcd6uik6t().s[18]++;
      suggestions.push(...parameterAnalysis.suggestions);
      /* istanbul ignore next */
      cov_wcd6uik6t().s[19]++;
      compatibilityScore *= parameterAnalysis.compatibilityFactor;
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[4][1]++;
    }
    // Check for common connection patterns
    const patternAnalysis =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[20]++, this.analyzeConnectionPatterns(sourceNode.type, targetNode.type));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[21]++;
    if (!patternAnalysis.isCommonPattern) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[5][0]++;
      cov_wcd6uik6t().s[22]++;
      compatibilityScore *= 0.8;
      /* istanbul ignore next */
      cov_wcd6uik6t().s[23]++;
      issues.push('This connection pattern is uncommon and may require additional configuration');
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[5][1]++;
    }
    // Generate suggestions based on analysis
    cov_wcd6uik6t().s[24]++;
    if (compatibilityScore < 0.7) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[6][0]++;
      cov_wcd6uik6t().s[25]++;
      suggestions.push('Consider adding a transformation node between these nodes');
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[6][1]++;
    }
    cov_wcd6uik6t().s[26]++;
    if (requiredTransformations.length > 3) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[7][0]++;
      cov_wcd6uik6t().s[27]++;
      suggestions.push('Multiple transformations required - consider using a Function node for complex data processing');
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[7][1]++;
    }
    cov_wcd6uik6t().s[28]++;
    return {
      sourceNodeId: sourceNode.id,
      targetNodeId: targetNode.id,
      compatible: compatibilityScore > 0.5,
      compatibilityScore,
      issues,
      suggestions,
      requiredTransformations
    };
  }
  analyzeNodeParameters(node, nodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[4]++;
    const parameters =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[29]++, []);
    const missingRequiredParameters =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[30]++, []);
    const unusedOptionalParameters =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[31]++, []);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[32]++;
    if (!nodeType) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[8][0]++;
      cov_wcd6uik6t().s[33]++;
      return {
        nodeId: node.id,
        parameters,
        missingRequiredParameters,
        unusedOptionalParameters
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[8][1]++;
    }
    const currentParameters =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[34]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[9][0]++, node.parameters) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[9][1]++, {}));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[35]++;
    for (const property of nodeType.properties) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[36]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[11][0]++, property.type === 'hidden') ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[11][1]++, property.type === 'notice')) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[10][0]++;
        cov_wcd6uik6t().s[37]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[10][1]++;
      }
      const currentValue =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[38]++, currentParameters[property.name]);
      const hasValue =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[39]++,
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[12][0]++, currentValue !== undefined) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[12][1]++, currentValue !== null) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[12][2]++, currentValue !== ''));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[40]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[14][0]++, property.required) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[14][1]++, !hasValue)) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[13][0]++;
        cov_wcd6uik6t().s[41]++;
        missingRequiredParameters.push(property.name);
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[13][1]++;
      }
      const suggestedValue =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[42]++, this.generateParameterSuggestion(node, property, nodeType));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[43]++;
      parameters.push({
        name: property.name,
        currentValue,
        suggestedValue: suggestedValue.value,
        source: this.determineParameterSource(currentValue),
        confidence: suggestedValue.confidence,
        reasoning: suggestedValue.reasoning,
        issues: this.validateParameterValue(currentValue, property)
      });
    }
    // Find unused parameters
    /* istanbul ignore next */
    cov_wcd6uik6t().s[44]++;
    for (const paramName of Object.keys(currentParameters)) {
      const isKnownParameter =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[45]++, nodeType.properties.some(prop => {
        /* istanbul ignore next */
        cov_wcd6uik6t().f[5]++;
        cov_wcd6uik6t().s[46]++;
        return prop.name === paramName;
      }));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[47]++;
      if (!isKnownParameter) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[15][0]++;
        cov_wcd6uik6t().s[48]++;
        unusedOptionalParameters.push(paramName);
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[15][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[49]++;
    return {
      nodeId: node.id,
      parameters,
      missingRequiredParameters,
      unusedOptionalParameters
    };
  }
  analyzeDataFlow(workflow, startNodeId) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[6]++;
    const nodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[50]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[16][0]++, workflow.nodes) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[16][1]++, []));
    const connections =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[51]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[17][0]++, workflow.connections) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[17][1]++, {}));
    // Build execution path
    const path =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[52]++, this.buildExecutionPath(nodes, connections, startNodeId));
    // Analyze data types at each step
    const dataTypes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[53]++, this.analyzeDataTypesInPath(path, connections));
    // Identify bottlenecks
    const bottlenecks =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[54]++, this.identifyDataFlowBottlenecks(path, nodes));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[55]++;
    return {
      path,
      dataTypes,
      bottlenecks
    };
  }
  calculateComplexityScore(workflow) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[7]++;
    const nodeCount =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[56]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[18][0]++, workflow.nodes?.length) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[18][1]++, 0));
    const connectionCount =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[57]++, this.countConnections(
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[19][0]++, workflow.connections) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[19][1]++, {})));
    // Base complexity on nodes and connections
    let complexity =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[58]++, nodeCount * 0.5 + connectionCount * 0.3);
    // Add complexity for conditional logic
    const conditionalNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[59]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[20][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[8]++;
      cov_wcd6uik6t().s[60]++;
      return /* istanbul ignore next */(cov_wcd6uik6t().b[21][0]++, n.type.includes('if')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[21][1]++, n.type.includes('switch')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[21][2]++, n.type.includes('merge'));
    })) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[20][1]++, []));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[61]++;
    complexity += conditionalNodes.length * 1.5;
    // Add complexity for loops
    const loopNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[62]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[22][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[9]++;
      cov_wcd6uik6t().s[63]++;
      return /* istanbul ignore next */(cov_wcd6uik6t().b[23][0]++, n.type.includes('loop')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[23][1]++, n.type.includes('split'));
    })) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[22][1]++, []));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[64]++;
    complexity += loopNodes.length * 2.0;
    // Normalize to 0-10 scale
    /* istanbul ignore next */
    cov_wcd6uik6t().s[65]++;
    return Math.min(complexity / 3, 10);
  }
  countConnections(connections) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[10]++;
    let count =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[66]++, 0);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[67]++;
    for (const nodeConnections of Object.values(connections)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[68]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[25][0]++, typeof nodeConnections === 'object') &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[25][1]++, nodeConnections !== null)) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[24][0]++;
        cov_wcd6uik6t().s[69]++;
        count += Object.keys(nodeConnections).length;
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[24][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[70]++;
    return count;
  }
  identifyWorkflowIssues(workflow) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[11]++;
    const issues =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[71]++, []);
    const nodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[72]++,
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[26][0]++, workflow.nodes) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[26][1]++, []));
    // Check for common issues
    // 1. Missing trigger nodes
    const triggerNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[73]++, nodes.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[12]++;
      cov_wcd6uik6t().s[74]++;
      return /* istanbul ignore next */(cov_wcd6uik6t().b[27][0]++, n.type.includes('trigger')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[27][1]++, n.type.includes('webhook'));
    }));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[75]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[29][0]++, triggerNodes.length === 0) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[29][1]++, workflow.active)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[28][0]++;
      cov_wcd6uik6t().s[76]++;
      issues.push({
        severity: 'high',
        type: 'logic',
        message: 'Active workflow has no trigger nodes - it may never execute',
        suggestion: 'Add a trigger node to start the workflow execution'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[28][1]++;
    }
    // 2. Disabled nodes in critical path
    const disabledNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[77]++, nodes.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[13]++;
      cov_wcd6uik6t().s[78]++;
      return n.disabled;
    }));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[79]++;
    for (const node of disabledNodes) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[80]++;
      issues.push({
        severity: 'medium',
        type: 'logic',
        nodeId: node.id,
        message: `Node "${node.name}" is disabled but may be part of the workflow`,
        suggestion: 'Review if this node should be enabled or removed'
      });
    }
    // 3. Missing error handling
    const errorHandlingNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[81]++, nodes.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[14]++;
      cov_wcd6uik6t().s[82]++;
      return /* istanbul ignore next */(cov_wcd6uik6t().b[30][0]++, n.type.includes('error')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[30][1]++, n.name.toLowerCase().includes('error'));
    }));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[83]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[32][0]++, nodes.length > 5) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[32][1]++, errorHandlingNodes.length === 0)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[31][0]++;
      cov_wcd6uik6t().s[84]++;
      issues.push({
        severity: 'medium',
        type: 'logic',
        message: 'Complex workflow lacks error handling nodes',
        suggestion: 'Consider adding error handling for robust workflow execution'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[31][1]++;
    }
    // 4. Performance concerns
    const httpNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[85]++, nodes.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[15]++;
      cov_wcd6uik6t().s[86]++;
      return n.type.includes('http');
    }));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[87]++;
    if (httpNodes.length > 10) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[33][0]++;
      cov_wcd6uik6t().s[88]++;
      issues.push({
        severity: 'medium',
        type: 'performance',
        message: 'Many HTTP nodes detected - may impact performance',
        suggestion: 'Consider batching requests or using pagination'
      });
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[33][1]++;
    }
    // 5. Security concerns
    const credentialNodes =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[89]++, nodes.filter(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[16]++;
      cov_wcd6uik6t().s[90]++;
      return /* istanbul ignore next */(cov_wcd6uik6t().b[34][0]++, n.credentials) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[34][1]++, Object.keys(n.credentials).length > 0);
    }));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[91]++;
    for (const node of credentialNodes) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[92]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[36][0]++, node.parameters) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[36][1]++, JSON.stringify(node.parameters).includes('password'))) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[35][0]++;
        cov_wcd6uik6t().s[93]++;
        issues.push({
          severity: 'critical',
          type: 'security',
          nodeId: node.id,
          message: 'Potential hardcoded credentials detected',
          suggestion: 'Use credential system instead of hardcoded values'
        });
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[35][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[94]++;
    return issues;
  }
  checkDataTypeCompatibility(sourceNodeType, targetNodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[17]++;
    const issues =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[95]++, []);
    let compatibilityFactor =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[96]++, 1.0);
    // Check common incompatibility patterns
    const sourceIsArray =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[97]++, sourceNodeType.name.toLowerCase().includes('split'));
    const targetExpectsSingle =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[98]++, !targetNodeType.name.toLowerCase().includes('merge'));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[99]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[38][0]++, sourceIsArray) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[38][1]++, targetExpectsSingle)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[37][0]++;
      cov_wcd6uik6t().s[100]++;
      issues.push('Source produces array data but target expects single items');
      /* istanbul ignore next */
      cov_wcd6uik6t().s[101]++;
      compatibilityFactor *= 0.6;
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[37][1]++;
    }
    cov_wcd6uik6t().s[102]++;
    return {
      issues,
      compatibilityFactor
    };
  }
  analyzeParameterCompatibility(sourceNode, targetNode, targetNodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[18]++;
    const transformations =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[103]++, []);
    const suggestions =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[104]++, []);
    let compatibilityFactor =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[105]++, 1.0);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[106]++;
    for (const property of targetNodeType.properties) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[107]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[40][0]++, property.required) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[40][1]++, !targetNode.parameters?.[property.name])) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[39][0]++;
        const suggestedTransformation =
        /* istanbul ignore next */
        (cov_wcd6uik6t().s[108]++, this.suggestParameterTransformation(property, sourceNode));
        /* istanbul ignore next */
        cov_wcd6uik6t().s[109]++;
        if (suggestedTransformation) {
          /* istanbul ignore next */
          cov_wcd6uik6t().b[41][0]++;
          cov_wcd6uik6t().s[110]++;
          transformations.push(suggestedTransformation);
        } else {
          /* istanbul ignore next */
          cov_wcd6uik6t().b[41][1]++;
          cov_wcd6uik6t().s[111]++;
          compatibilityFactor *= 0.8;
          /* istanbul ignore next */
          cov_wcd6uik6t().s[112]++;
          suggestions.push(`Required parameter "${property.name}" needs to be configured`);
        }
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[39][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[113]++;
    return {
      transformations,
      suggestions,
      compatibilityFactor
    };
  }
  analyzeConnectionPatterns(sourceType, targetType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[19]++;
    const commonPatterns =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[114]++, [{
      source: 'trigger',
      target: 'http',
      confidence: 0.9
    }, {
      source: 'http',
      target: 'json',
      confidence: 0.8
    }, {
      source: 'json',
      target: 'set',
      confidence: 0.7
    }, {
      source: 'if',
      target: 'http',
      confidence: 0.6
    }, {
      source: 'webhook',
      target: 'response',
      confidence: 0.9
    }]);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[115]++;
    for (const pattern of commonPatterns) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[116]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[43][0]++, sourceType.toLowerCase().includes(pattern.source)) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[43][1]++, targetType.toLowerCase().includes(pattern.target))) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[42][0]++;
        cov_wcd6uik6t().s[117]++;
        return {
          isCommonPattern: true,
          confidence: pattern.confidence
        };
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[42][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[118]++;
    return {
      isCommonPattern: false,
      confidence: 0.3
    };
  }
  generateParameterSuggestion(node, property, nodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[20]++;
    cov_wcd6uik6t().s[119]++;
    // Generate smart parameter suggestions based on context
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[45][0]++, property.type === 'options') &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[45][1]++, property.options)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[44][0]++;
      const defaultOption =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[120]++, property.options.find(opt => {
        /* istanbul ignore next */
        cov_wcd6uik6t().f[21]++;
        cov_wcd6uik6t().s[121]++;
        return opt.value === property.default;
      }));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[122]++;
      if (defaultOption) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[46][0]++;
        cov_wcd6uik6t().s[123]++;
        return {
          value: defaultOption.value,
          confidence: 0.7,
          reasoning: `Default option for ${property.displayName}`
        };
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[46][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[44][1]++;
    }
    cov_wcd6uik6t().s[124]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[48][0]++, property.name.toLowerCase().includes('url')) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[48][1]++, node.type.includes('http'))) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[47][0]++;
      cov_wcd6uik6t().s[125]++;
      return {
        value: 'https://api.example.com/endpoint',
        confidence: 0.5,
        reasoning: 'Common URL pattern for HTTP requests'
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[47][1]++;
    }
    cov_wcd6uik6t().s[126]++;
    if (property.type === 'boolean') {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[49][0]++;
      cov_wcd6uik6t().s[127]++;
      return {
        value: property.default !== undefined ?
        /* istanbul ignore next */
        (cov_wcd6uik6t().b[50][0]++, property.default) :
        /* istanbul ignore next */
        (cov_wcd6uik6t().b[50][1]++, false),
        confidence: 0.6,
        reasoning: 'Using default boolean value'
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[49][1]++;
    }
    cov_wcd6uik6t().s[128]++;
    return {
      value: property.default,
      confidence: property.default !== undefined ?
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[51][0]++, 0.8) :
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[51][1]++, 0.3),
      reasoning: property.default !== undefined ?
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[52][0]++, 'Using default value') :
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[52][1]++, 'No specific suggestion available')
    };
  }
  determineParameterSource(value) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[22]++;
    cov_wcd6uik6t().s[129]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[54][0]++, typeof value === 'string') &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[54][1]++, value.includes('{{'))) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[53][0]++;
      cov_wcd6uik6t().s[130]++;
      return 'expression';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[53][1]++;
    }
    cov_wcd6uik6t().s[131]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[56][0]++, value === undefined) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[56][1]++, value === null)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[55][0]++;
      cov_wcd6uik6t().s[132]++;
      return 'suggested';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[55][1]++;
    }
    cov_wcd6uik6t().s[133]++;
    return 'manual';
  }
  validateParameterValue(value, property) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[23]++;
    const issues =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[134]++, []);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[135]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[58][0]++, property.required) && (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[58][1]++, value === undefined) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[58][2]++, value === null) ||
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[58][3]++, value === ''))) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[57][0]++;
      cov_wcd6uik6t().s[136]++;
      issues.push('Required parameter is missing');
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[57][1]++;
    }
    cov_wcd6uik6t().s[137]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[60][0]++, property.type === 'number') &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[60][1]++, typeof value === 'string')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[59][0]++;
      cov_wcd6uik6t().s[138]++;
      if (isNaN(Number(value))) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[61][0]++;
        cov_wcd6uik6t().s[139]++;
        issues.push('Expected number but got non-numeric string');
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[61][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[59][1]++;
    }
    cov_wcd6uik6t().s[140]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[63][0]++, property.type === 'options') &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[63][1]++, property.options)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[62][0]++;
      const validValues =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[141]++, property.options.map(opt => {
        /* istanbul ignore next */
        cov_wcd6uik6t().f[24]++;
        cov_wcd6uik6t().s[142]++;
        return opt.value;
      }));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[143]++;
      if (!validValues.includes(value)) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[64][0]++;
        cov_wcd6uik6t().s[144]++;
        issues.push(`Value not in allowed options: ${validValues.join(', ')}`);
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[64][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[62][1]++;
    }
    cov_wcd6uik6t().s[145]++;
    return issues;
  }
  buildExecutionPath(nodes, connections, startNodeId) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[25]++;
    const path =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[146]++, []);
    // Simple linear path building (could be enhanced for complex branching)
    let currentNode =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[147]++, startNodeId ?
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[65][0]++, nodes.find(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[26]++;
      cov_wcd6uik6t().s[148]++;
      return n.id === startNodeId;
    })) :
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[65][1]++, nodes.find(n => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[27]++;
      cov_wcd6uik6t().s[149]++;
      return n.type.includes('trigger');
    })));
    /* istanbul ignore next */
    cov_wcd6uik6t().s[150]++;
    while (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[66][0]++, currentNode) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[66][1]++, path.length < 50)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[151]++;
      // Prevent infinite loops
      path.push({
        nodeId: currentNode.id,
        nodeName: currentNode.name,
        nodeType: currentNode.type,
        dataTransformation: this.describeDataTransformation(currentNode)
      });
      // Find next node (simplified)
      const nextNodeId =
      /* istanbul ignore next */
      (cov_wcd6uik6t().s[152]++, this.findNextNode(currentNode.id, connections));
      /* istanbul ignore next */
      cov_wcd6uik6t().s[153]++;
      currentNode = nextNodeId ?
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[67][0]++, nodes.find(n => {
        /* istanbul ignore next */
        cov_wcd6uik6t().f[28]++;
        cov_wcd6uik6t().s[154]++;
        return n.id === nextNodeId;
      })) :
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[67][1]++, undefined);
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[155]++;
    return path;
  }
  analyzeDataTypesInPath(path, connections) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[29]++;
    cov_wcd6uik6t().s[156]++;
    return path.map((step, index) => {
      /* istanbul ignore next */
      cov_wcd6uik6t().f[30]++;
      cov_wcd6uik6t().s[157]++;
      return {
        step: index,
        nodeId: step.nodeId,
        expectedType: this.predictDataType(step.nodeType),
        schema: this.predictDataSchema(step.nodeType)
      };
    });
  }
  identifyDataFlowBottlenecks(path, nodes) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[31]++;
    const bottlenecks =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[158]++, []);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[159]++;
    for (const step of path) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[160]++;
      if (step.nodeType.includes('http')) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[68][0]++;
        cov_wcd6uik6t().s[161]++;
        bottlenecks.push({
          nodeId: step.nodeId,
          reason: 'HTTP requests can be slow and may fail',
          impact: 'medium',
          suggestion: 'Consider adding retry logic and timeout configuration'
        });
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[68][1]++;
      }
      cov_wcd6uik6t().s[162]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[70][0]++, step.nodeType.includes('database')) ||
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[70][1]++, step.nodeType.includes('sql'))) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[69][0]++;
        cov_wcd6uik6t().s[163]++;
        bottlenecks.push({
          nodeId: step.nodeId,
          reason: 'Database operations can be slow with large datasets',
          impact: 'high',
          suggestion: 'Consider using pagination and indexed queries'
        });
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[69][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[164]++;
    return bottlenecks;
  }
  describeDataTransformation(node) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[32]++;
    const nodeType =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[165]++, node.type.toLowerCase());
    /* istanbul ignore next */
    cov_wcd6uik6t().s[166]++;
    if (nodeType.includes('set')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[71][0]++;
      cov_wcd6uik6t().s[167]++;
      return 'Transforms data by setting specific fields';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[71][1]++;
    }
    cov_wcd6uik6t().s[168]++;
    if (nodeType.includes('json')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[72][0]++;
      cov_wcd6uik6t().s[169]++;
      return 'Parses or converts JSON data';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[72][1]++;
    }
    cov_wcd6uik6t().s[170]++;
    if (nodeType.includes('http')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[73][0]++;
      cov_wcd6uik6t().s[171]++;
      return 'Fetches data from HTTP endpoint';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[73][1]++;
    }
    cov_wcd6uik6t().s[172]++;
    if (nodeType.includes('if')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[74][0]++;
      cov_wcd6uik6t().s[173]++;
      return 'Conditionally routes data based on criteria';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[74][1]++;
    }
    cov_wcd6uik6t().s[174]++;
    if (nodeType.includes('function')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[75][0]++;
      cov_wcd6uik6t().s[175]++;
      return 'Applies custom JavaScript transformation';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[75][1]++;
    }
    cov_wcd6uik6t().s[176]++;
    return 'Processes data according to node configuration';
  }
  findNextNode(currentNodeId, connections) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[33]++;
    cov_wcd6uik6t().s[177]++;
    // Simplified next node finding (real implementation would parse n8n connection format)
    for (const [nodeId, nodeConnections] of Object.entries(connections)) {
      /* istanbul ignore next */
      cov_wcd6uik6t().s[178]++;
      if (
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[77][0]++, nodeId === currentNodeId) &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[77][1]++, typeof nodeConnections === 'object') &&
      /* istanbul ignore next */
      (cov_wcd6uik6t().b[77][2]++, nodeConnections !== null)) {
        /* istanbul ignore next */
        cov_wcd6uik6t().b[76][0]++;
        // Return first connected node (simplified)
        const connectionKeys =
        /* istanbul ignore next */
        (cov_wcd6uik6t().s[179]++, Object.keys(nodeConnections));
        /* istanbul ignore next */
        cov_wcd6uik6t().s[180]++;
        return connectionKeys.length > 0 ?
        /* istanbul ignore next */
        (cov_wcd6uik6t().b[78][0]++, connectionKeys[0]) :
        /* istanbul ignore next */
        (cov_wcd6uik6t().b[78][1]++, undefined);
      } else
      /* istanbul ignore next */
      {
        cov_wcd6uik6t().b[76][1]++;
      }
    }
    /* istanbul ignore next */
    cov_wcd6uik6t().s[181]++;
    return undefined;
  }
  predictDataType(nodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[34]++;
    cov_wcd6uik6t().s[182]++;
    if (nodeType.includes('http')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[79][0]++;
      cov_wcd6uik6t().s[183]++;
      return 'object';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[79][1]++;
    }
    cov_wcd6uik6t().s[184]++;
    if (nodeType.includes('json')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[80][0]++;
      cov_wcd6uik6t().s[185]++;
      return 'object';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[80][1]++;
    }
    cov_wcd6uik6t().s[186]++;
    if (nodeType.includes('set')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[81][0]++;
      cov_wcd6uik6t().s[187]++;
      return 'object';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[81][1]++;
    }
    cov_wcd6uik6t().s[188]++;
    if (nodeType.includes('function')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[82][0]++;
      cov_wcd6uik6t().s[189]++;
      return 'any';
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[82][1]++;
    }
    cov_wcd6uik6t().s[190]++;
    return 'unknown';
  }
  predictDataSchema(nodeType) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[35]++;
    cov_wcd6uik6t().s[191]++;
    if (nodeType.includes('http')) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[83][0]++;
      cov_wcd6uik6t().s[192]++;
      return {
        data: {},
        headers: {},
        status: 'number'
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[83][1]++;
    }
    cov_wcd6uik6t().s[193]++;
    return undefined;
  }
  suggestParameterTransformation(property, sourceNode) {
    /* istanbul ignore next */
    cov_wcd6uik6t().f[36]++;
    const paramName =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[194]++, property.name);
    const sourceType =
    /* istanbul ignore next */
    (cov_wcd6uik6t().s[195]++, sourceNode.type);
    /* istanbul ignore next */
    cov_wcd6uik6t().s[196]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[85][0]++, paramName.toLowerCase().includes('url')) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[85][1]++, sourceType.includes('http'))) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[84][0]++;
      cov_wcd6uik6t().s[197]++;
      return {
        parameter: paramName,
        transformation: `{{$node["${sourceNode.name}"].json["url"]}}`,
        reason: 'Map URL from HTTP response'
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[84][1]++;
    }
    cov_wcd6uik6t().s[198]++;
    if (
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[87][0]++, paramName.toLowerCase().includes('id')) &&
    /* istanbul ignore next */
    (cov_wcd6uik6t().b[87][1]++, sourceType.includes('database'))) {
      /* istanbul ignore next */
      cov_wcd6uik6t().b[86][0]++;
      cov_wcd6uik6t().s[199]++;
      return {
        parameter: paramName,
        transformation: `{{$node["${sourceNode.name}"].json["id"]}}`,
        reason: 'Map ID from database result'
      };
    } else
    /* istanbul ignore next */
    {
      cov_wcd6uik6t().b[86][1]++;
    }
    cov_wcd6uik6t().s[200]++;
    return null;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,