ca8d44822df3980ce3255a97dc190876
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.N8nClient = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
class N8nClient {
    baseUrl;
    apiKey;
    constructor(baseUrl, apiKey) {
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        // Remove trailing slash if present
        this.baseUrl = baseUrl.replace(/\/$/, '');
        // Ensure apiKey is properly assigned
        this.apiKey = apiKey;
    }
    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseUrl}/api/v1${endpoint}`;
        const headers = {
            'X-N8N-API-KEY': this.apiKey,
            Accept: 'application/json',
            'Content-Type': 'application/json',
        };
        try {
            const response = await (0, node_fetch_1.default)(url, {
                ...options,
                headers: {
                    ...headers,
                    ...(options.headers || {}),
                },
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                return (await response.json());
            }
            return (await response.text());
        }
        catch (error) {
            if (error instanceof Error) {
                throw new Error(`n8n API request failed: ${error.message}`);
            }
            throw new Error('n8n API request failed with unknown error');
        }
    }
    // User Management
    async getUsers(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/users${query}`);
    }
    async getUser(id) {
        return this.makeRequest(`/users/${id}`);
    }
    async createUser(userData) {
        return this.makeRequest('/users', {
            method: 'POST',
            body: JSON.stringify(userData),
        });
    }
    async updateUser(id, userData) {
        return this.makeRequest(`/users/${id}`, {
            method: 'PATCH',
            body: JSON.stringify(userData),
        });
    }
    async deleteUser(id) {
        await this.makeRequest(`/users/${id}`, {
            method: 'DELETE',
        });
    }
    // Workflow Management
    async getWorkflows(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/workflows${query}`);
    }
    async getWorkflow(id) {
        return this.makeRequest(`/workflows/${id}`);
    }
    async createWorkflow(workflowData) {
        return this.makeRequest('/workflows', {
            method: 'POST',
            body: JSON.stringify(workflowData),
        });
    }
    async updateWorkflow(id, workflowData) {
        return this.makeRequest(`/workflows/${id}`, {
            method: 'PUT',
            body: JSON.stringify(workflowData),
        });
    }
    async deleteWorkflow(id) {
        await this.makeRequest(`/workflows/${id}`, {
            method: 'DELETE',
        });
    }
    async activateWorkflow(id) {
        return this.makeRequest(`/workflows/${id}/activate`, {
            method: 'POST',
        });
    }
    async deactivateWorkflow(id) {
        return this.makeRequest(`/workflows/${id}/deactivate`, {
            method: 'POST',
        });
    }
    // Execution Management
    async getExecutions(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/executions${query}`);
    }
    async getExecution(id) {
        return this.makeRequest(`/executions/${id}`);
    }
    async deleteExecution(id) {
        await this.makeRequest(`/executions/${id}`, {
            method: 'DELETE',
        });
    }
    // Credential Management
    async getCredentials(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/credentials${query}`);
    }
    async getCredential(id) {
        return this.makeRequest(`/credentials/${id}`);
    }
    async createCredential(credentialData) {
        return this.makeRequest('/credentials', {
            method: 'POST',
            body: JSON.stringify(credentialData),
        });
    }
    async deleteCredential(id) {
        await this.makeRequest(`/credentials/${id}`, {
            method: 'DELETE',
        });
    }
    async getCredentialSchema(credentialType) {
        return this.makeRequest(`/credentials/schema/${credentialType}`);
    }
    // Project Management (Enterprise)
    async getProjects(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/projects${query}`);
    }
    async createProject(projectData) {
        return this.makeRequest('/projects', {
            method: 'POST',
            body: JSON.stringify(projectData),
        });
    }
    async updateProject(id, projectData) {
        return this.makeRequest(`/projects/${id}`, {
            method: 'PUT',
            body: JSON.stringify(projectData),
        });
    }
    async deleteProject(id) {
        await this.makeRequest(`/projects/${id}`, {
            method: 'DELETE',
        });
    }
    // Variable Management (Enterprise)
    async getVariables(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/variables${query}`);
    }
    async createVariable(variableData) {
        return this.makeRequest('/variables', {
            method: 'POST',
            body: JSON.stringify(variableData),
        });
    }
    async deleteVariable(id) {
        await this.makeRequest(`/variables/${id}`, {
            method: 'DELETE',
        });
    }
    // Tag Management
    async getTags(options = {}) {
        const params = new URLSearchParams();
        if (options.limit)
            params.append('limit', options.limit.toString());
        if (options.cursor)
            params.append('cursor', options.cursor);
        const query = params.toString() ? `?${params.toString()}` : '';
        return this.makeRequest(`/tags${query}`);
    }
    async getTag(id) {
        return this.makeRequest(`/tags/${id}`);
    }
    async createTag(tagData) {
        return this.makeRequest('/tags', {
            method: 'POST',
            body: JSON.stringify(tagData),
        });
    }
    async updateTag(id, tagData) {
        return this.makeRequest(`/tags/${id}`, {
            method: 'PUT',
            body: JSON.stringify(tagData),
        });
    }
    async deleteTag(id) {
        await this.makeRequest(`/tags/${id}`, {
            method: 'DELETE',
        });
    }
    async getWorkflowTags(workflowId) {
        return this.makeRequest(`/workflows/${workflowId}/tags`);
    }
    async updateWorkflowTags(workflowId, tagIds) {
        await this.makeRequest(`/workflows/${workflowId}/tags`, {
            method: 'PUT',
            body: JSON.stringify({ tagIds }),
        });
    }
    // Audit Report
    async generateAuditReport() {
        return this.makeRequest('/audit');
    }
}
exports.N8nClient = N8nClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,