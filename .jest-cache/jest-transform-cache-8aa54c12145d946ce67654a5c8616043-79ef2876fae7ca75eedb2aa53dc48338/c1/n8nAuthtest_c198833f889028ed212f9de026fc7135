53732a01c94eb1e3f3302d14e94453ef
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const n8nAuth_1 = require("../../../src/auth/n8nAuth");
// Simple test focused on coverage of N8nAuthProvider without complex mocking
// This avoids the N8nClient import issues by focusing on the simpler methods
(0, globals_1.describe)('N8nAuthProvider Simple Tests', () => {
    let authProvider;
    (0, globals_1.beforeEach)(() => {
        authProvider = new n8nAuth_1.N8nAuthProvider({
            required: false,
            defaultBaseUrl: 'https://test.n8n.io',
            defaultApiKey: 'test-api-key',
            validateConnection: false, // Skip connection validation to avoid N8nClient
            cacheDuration: 5 * 60 * 1000,
            defaultRoles: ['member'],
        });
    });
    (0, globals_1.afterEach)(() => {
        authProvider.clearCache();
    });
    (0, globals_1.describe)('constructor', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            const provider = new n8nAuth_1.N8nAuthProvider();
            (0, globals_1.expect)(provider).toBeInstanceOf(n8nAuth_1.N8nAuthProvider);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                required: true,
                defaultBaseUrl: 'https://custom.n8n.io',
                defaultApiKey: 'custom-api-key',
                validateConnection: false,
                cacheDuration: 10 * 60 * 1000,
                defaultRoles: ['admin'],
            };
            const provider = new n8nAuth_1.N8nAuthProvider(config);
            (0, globals_1.expect)(provider).toBeInstanceOf(n8nAuth_1.N8nAuthProvider);
        });
    });
    (0, globals_1.describe)('anonymous authentication', () => {
        (0, globals_1.it)('should allow anonymous access when authentication not required', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ required: false });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.user).toBeDefined();
            (0, globals_1.expect)(result.user?.id).toBe('anonymous');
            (0, globals_1.expect)(result.user?.roles).toEqual(['anonymous']);
            (0, globals_1.expect)(result.context?.authType).toBe('anonymous');
            (0, globals_1.expect)(result.user?.permissions.community).toBe(true);
            (0, globals_1.expect)(result.user?.permissions.workflows).toBe(true);
            (0, globals_1.expect)(result.user?.permissions.executions).toBe(true);
            (0, globals_1.expect)(result.user?.permissions.enterprise).toBe(false);
            (0, globals_1.expect)(result.user?.permissions.credentials).toBe(false);
            (0, globals_1.expect)(result.user?.permissions.users).toBe(false);
            (0, globals_1.expect)(result.user?.permissions.audit).toBe(false);
        });
        (0, globals_1.it)('should include context information for anonymous users', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ required: false });
            const context = {};
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.context?.authType).toBe('anonymous');
            (0, globals_1.expect)(result.context?.features).toEqual(['community']);
        });
    });
    (0, globals_1.describe)('required authentication without validation', () => {
        (0, globals_1.it)('should require credentials when authentication is required', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ required: true });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toBe('Authentication required but no credentials provided');
        });
        (0, globals_1.it)('should accept credentials when provided and validation is disabled', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({
                required: true,
                validateConnection: false,
                defaultBaseUrl: 'https://test.n8n.io',
                defaultRoles: ['member'],
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    'x-n8n-api-key': 'valid-api-key',
                },
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.user?.n8nApiKey).toBe('valid-api-key');
            (0, globals_1.expect)(result.user?.n8nBaseUrl).toBe('https://test.n8n.io');
            (0, globals_1.expect)(result.context?.authType).toBe('n8n-api-key');
        });
        (0, globals_1.it)('should handle Bearer token authentication', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({
                required: true,
                validateConnection: false,
                defaultBaseUrl: 'https://default.n8n.io',
                defaultRoles: ['member'],
            });
            const context = {
                clientId: 'test-client',
                headers: {
                    authorization: 'Bearer valid-bearer-token',
                },
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.user?.n8nApiKey).toBe('valid-bearer-token');
            (0, globals_1.expect)(result.user?.n8nBaseUrl).toBe('https://default.n8n.io');
        });
    });
    (0, globals_1.describe)('cache management', () => {
        (0, globals_1.it)('should clear cache', () => {
            const provider = new n8nAuth_1.N8nAuthProvider();
            provider.clearCache();
            const stats = provider.getCacheStats();
            (0, globals_1.expect)(stats.size).toBe(0);
            (0, globals_1.expect)(stats.entries).toBe(0);
        });
        (0, globals_1.it)('should provide cache statistics', () => {
            const provider = new n8nAuth_1.N8nAuthProvider();
            const stats = provider.getCacheStats();
            (0, globals_1.expect)(typeof stats.size).toBe('number');
            (0, globals_1.expect)(typeof stats.entries).toBe('number');
        });
        (0, globals_1.it)('should clean up expired cache entries', () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ cacheDuration: -1 }); // Expired immediately
            // Manually add expired cache entry to test cleanup
            const cache = provider.authCache;
            cache.set('test-key', {
                result: { success: true, user: { id: 'test' } },
                expires: Date.now() - 1000 // Expired 1 second ago
            });
            // This should trigger cleanup of expired entries
            const stats = provider.getCacheStats();
            (0, globals_1.expect)(stats.entries).toBe(0); // Expired entry should be cleaned up
        });
        (0, globals_1.it)('should handle cache with zero duration', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({
                required: true,
                validateConnection: false,
                cacheDuration: 0, // No caching
                defaultBaseUrl: 'https://test.n8n.io',
                defaultRoles: ['member'],
            });
            const context = {
                headers: {
                    'x-n8n-api-key': 'valid-api-key',
                },
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(true);
            // With zero cache duration, nothing should be cached
            const stats = provider.getCacheStats();
            (0, globals_1.expect)(stats.entries).toBe(0);
        });
    });
    (0, globals_1.describe)('refresh authentication', () => {
        (0, globals_1.it)('should refresh authentication by clearing cache', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({
                required: false,
                cacheDuration: 60000,
            });
            const context = {
                clientId: 'test-client',
                headers: {},
            };
            // First authenticate
            const result1 = await provider.authenticate(context);
            (0, globals_1.expect)(result1.success).toBe(true);
            // Refresh should work
            const result2 = await provider.refresh(context);
            (0, globals_1.expect)(result2.success).toBe(true);
            (0, globals_1.expect)(result2.user?.id).toBe('anonymous');
        });
        (0, globals_1.it)('should refresh authentication with user context and clear specific cache', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({
                required: true,
                validateConnection: false,
                cacheDuration: 60000,
                defaultBaseUrl: 'https://test.n8n.io',
                defaultApiKey: 'test-key',
            });
            const user = {
                id: 'test-user',
                name: 'Test User',
                roles: ['member'],
                permissions: {
                    community: true,
                    enterprise: false,
                    workflows: true,
                    executions: true,
                    credentials: false,
                    users: false,
                    audit: false,
                },
                n8nBaseUrl: 'https://test.n8n.io',
                n8nApiKey: 'test-key',
            };
            const context = {
                user,
                headers: {},
            };
            // Refresh with user context should clear cache for that user
            const result = await provider.refresh(context);
            (0, globals_1.expect)(result.success).toBe(false); // No credentials in headers, should fail
            (0, globals_1.expect)(result.error).toContain('Authentication required but no credentials provided');
        });
    });
    (0, globals_1.describe)('error handling', () => {
        (0, globals_1.it)('should handle authentication errors gracefully', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ required: true });
            // Mock the extractCredentials method to throw an error
            jest.spyOn(provider, 'extractCredentials').mockImplementation(() => {
                throw new Error('Credential extraction failed');
            });
            const context = {
                headers: {
                    'x-n8n-api-key': 'test-key',
                },
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toContain('Authentication failed: Credential extraction failed');
        });
        (0, globals_1.it)('should handle non-Error objects in catch blocks', async () => {
            const provider = new n8nAuth_1.N8nAuthProvider({ required: true });
            // Mock to throw a non-Error object
            jest.spyOn(provider, 'extractCredentials').mockImplementation(() => {
                throw 'String error'; // Non-Error object
            });
            const context = {
                headers: {
                    'x-n8n-api-key': 'test-key',
                },
            };
            const result = await provider.authenticate(context);
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toContain('Authentication failed: String error');
        });
    });
});
(0, globals_1.describe)('createN8nAuth', () => {
    let originalEnv;
    (0, globals_1.beforeEach)(() => {
        originalEnv = { ...process.env };
    });
    (0, globals_1.afterEach)(() => {
        process.env = originalEnv;
    });
    (0, globals_1.it)('should create N8nAuthProvider instance', () => {
        const provider = (0, n8nAuth_1.createN8nAuth)();
        (0, globals_1.expect)(provider).toBeInstanceOf(n8nAuth_1.N8nAuthProvider);
    });
    (0, globals_1.it)('should handle environment variables', () => {
        process.env.N8N_MCP_AUTH_REQUIRED = 'true';
        process.env.N8N_BASE_URL = 'https://env.n8n.io';
        process.env.N8N_API_KEY = 'env-api-key';
        const provider = (0, n8nAuth_1.createN8nAuth)();
        (0, globals_1.expect)(provider).toBeInstanceOf(n8nAuth_1.N8nAuthProvider);
    });
});
(0, globals_1.describe)('defaultN8nAuth', () => {
    (0, globals_1.it)('should be an instance of N8nAuthProvider', () => {
        (0, globals_1.expect)(n8nAuth_1.defaultN8nAuth).toBeInstanceOf(n8nAuth_1.N8nAuthProvider);
    });
    (0, globals_1.it)('should be a singleton instance', async () => {
        // Import again to test singleton behavior
        const module = await Promise.resolve().then(() => __importStar(require('../../../src/auth/n8nAuth')));
        const secondInstance = module.defaultN8nAuth;
        (0, globals_1.expect)(n8nAuth_1.defaultN8nAuth).toBe(secondInstance);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,