{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts"],"sourcesContent":["/**\n * Resource Manager for n8n MCP Server\n *\n * Central coordinator for all MCP resources, managing registration,\n * configuration, and lifecycle of resource providers.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-unused-vars */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { WorkflowResourceManager, createWorkflowResources } from './workflowResources.js';\nimport { ExecutionResourceManager, createExecutionResources } from './executionResources.js';\n\n/**\n * Resource manager configuration\n */\nexport interface ResourceManagerConfig {\n  /** Base URI prefix for all n8n resources */\n  baseUri?: string;\n\n  /** Whether to enable workflow resources */\n  enableWorkflows?: boolean;\n\n  /** Whether to enable execution resources */\n  enableExecutions?: boolean;\n\n  /** Whether to enable credential resources */\n  enableCredentials?: boolean;\n\n  /** Whether to enable node documentation resources */\n  enableNodes?: boolean;\n\n  /** Global cache duration for all resources (ms) */\n  globalCacheDuration?: number;\n\n  /** Maximum number of items in resource listings */\n  maxItems?: number;\n}\n\n/**\n * Central resource manager\n *\n * Coordinates all resource providers and handles global resource configuration.\n */\nexport class ResourceManager {\n  private config: Required<ResourceManagerConfig>;\n  private workflowResources?: WorkflowResourceManager;\n  private executionResources?: ExecutionResourceManager;\n\n  constructor(config: ResourceManagerConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://',\n      enableWorkflows: true,\n      enableExecutions: true,\n      enableCredentials: false, // Disabled by default for security\n      enableNodes: true,\n      globalCacheDuration: 5 * 60 * 1000, // 5 minutes\n      maxItems: 100,\n      ...config,\n    };\n  }\n\n  /**\n   * Register all enabled resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    console.log('📚 Registering n8n MCP resources...');\n\n    // Register workflow resources\n    if (this.config.enableWorkflows) {\n      this.workflowResources = createWorkflowResources({\n        baseUri: `${this.config.baseUri}workflows`,\n        maxWorkflows: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.workflowResources.register(server, getClient);\n    }\n\n    // Register execution resources\n    if (this.config.enableExecutions) {\n      this.executionResources = createExecutionResources({\n        baseUri: `${this.config.baseUri}executions`,\n        maxExecutions: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.executionResources.register(server, getClient);\n    }\n\n    // Register node documentation resources\n    if (this.config.enableNodes) {\n      this.registerNodeResources(server, getClient);\n    }\n\n    // Register credential template resources (if enabled)\n    if (this.config.enableCredentials) {\n      this.registerCredentialResources(server, getClient);\n    }\n\n    // Register general n8n information resources\n    this.registerGeneralResources(server, getClient);\n\n    console.log('✅ All n8n MCP resources registered');\n  }\n\n  /**\n   * Register node documentation resources\n   */\n  private registerNodeResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Available nodes resource\n    server.addResource({\n      uri: `${this.config.baseUri}nodes/available`,\n      name: 'n8n Available Nodes',\n      mimeType: 'application/json',\n      load: async () => {\n        const nodes = await this.getAvailableNodes();\n        return {\n          text: JSON.stringify(nodes, null, 2),\n        };\n      },\n    });\n\n    // Node documentation template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}nodes/{nodeType}`,\n      name: 'n8n Node Documentation',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'nodeType',\n          description: 'The type of n8n node (e.g., \"n8n-nodes-base.httpRequest\")',\n          required: true,\n        },\n      ],\n      load: async ({ nodeType }: { nodeType: string }) => {\n        const nodeDoc = await this.getNodeDocumentation(nodeType);\n        return {\n          text: JSON.stringify(nodeDoc, null, 2),\n        };\n      },\n    });\n\n    console.log('📦 Node resources registered');\n  }\n\n  /**\n   * Register credential template resources\n   */\n  private registerCredentialResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Credential types resource\n    server.addResource({\n      uri: `${this.config.baseUri}credentials/types`,\n      name: 'n8n Credential Types',\n      mimeType: 'application/json',\n      load: async () => {\n        const credTypes = await this.getCredentialTypes();\n        return {\n          text: JSON.stringify(credTypes, null, 2),\n        };\n      },\n    });\n\n    // Credential template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}credentials/template/{credType}`,\n      name: 'n8n Credential Template',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'credType',\n          description: 'The credential type name',\n          required: true,\n        },\n      ],\n      load: async ({ credType }: { credType: string }) => {\n        const template = await this.getCredentialTemplate(credType);\n        return {\n          text: JSON.stringify(template, null, 2),\n        };\n      },\n    });\n\n    console.log('🔐 Credential resources registered');\n  }\n\n  /**\n   * Register general n8n information resources\n   */\n  private registerGeneralResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // n8n instance information\n    server.addResource({\n      uri: `${this.config.baseUri}info`,\n      name: 'n8n Instance Information',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const info = await this.getInstanceInfo(client);\n        return {\n          text: JSON.stringify(info, null, 2),\n        };\n      },\n    });\n\n    // Resource directory/index\n    server.addResource({\n      uri: `${this.config.baseUri}index`,\n      name: 'n8n Resource Directory',\n      mimeType: 'application/json',\n      load: async () => {\n        const directory = this.getResourceDirectory();\n        return {\n          text: JSON.stringify(directory, null, 2),\n        };\n      },\n    });\n\n    console.log('ℹ️  General resources registered');\n  }\n\n  /**\n   * Get available n8n nodes (mock data - would need to be retrieved from n8n API)\n   */\n  private async getAvailableNodes(): Promise<any> {\n    // This would typically fetch from n8n API or node registry\n    return {\n      nodes: [\n        {\n          name: 'HTTP Request',\n          type: 'n8n-nodes-base.httpRequest',\n          description: 'Makes HTTP requests and returns the response data',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'Code',\n          type: 'n8n-nodes-base.code',\n          description: 'Run custom JavaScript code',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'If',\n          type: 'n8n-nodes-base.if',\n          description: 'Conditional routing based on comparison operations',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        // More nodes would be listed here\n      ],\n      metadata: {\n        totalNodes: 500, // Example count\n        categories: ['Core Nodes', 'Trigger Nodes', 'Regular Nodes'],\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/available`,\n        type: 'n8n-available-nodes',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get node documentation\n   */\n  private async getNodeDocumentation(nodeType: string): Promise<any> {\n    // This would fetch actual node documentation from n8n\n    return {\n      nodeType,\n      name: nodeType.split('.').pop(),\n      description: `Documentation for ${nodeType}`,\n      parameters: [],\n      examples: [],\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/${nodeType}`,\n        type: 'n8n-node-documentation',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential types\n   */\n  private async getCredentialTypes(): Promise<any> {\n    return {\n      credentialTypes: [\n        {\n          name: 'httpBasicAuth',\n          displayName: 'Basic Auth',\n          properties: ['user', 'password'],\n        },\n        {\n          name: 'httpHeaderAuth',\n          displayName: 'Header Auth',\n          properties: ['name', 'value'],\n        },\n        // More credential types\n      ],\n      metadata: {\n        totalTypes: 50, // Example count\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/types`,\n        type: 'n8n-credential-types',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential template (without sensitive data)\n   */\n  private async getCredentialTemplate(credType: string): Promise<any> {\n    return {\n      credentialType: credType,\n      template: {\n        name: `${credType} Template`,\n        type: credType,\n        data: {\n          // Template structure without actual values\n          fields: ['user', 'password'], // Example fields\n        },\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/template/${credType}`,\n        type: 'n8n-credential-template',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get n8n instance information\n   */\n  private async getInstanceInfo(client: N8nClient): Promise<any> {\n    try {\n      // Attempt to gather instance information\n      const workflows = await client.getWorkflows({ limit: 1 });\n      const executions = await client.getExecutions({ limit: 1 });\n\n      return {\n        status: 'connected',\n        features: {\n          workflows: true,\n          executions: true,\n          // Test for Enterprise features\n          projects: await this.testFeature(() => client.getProjects({ limit: 1 })),\n          users: await this.testFeature(() => client.getUsers({ limit: 1 })),\n          variables: await this.testFeature(() => client.getVariables({ limit: 1 })),\n        },\n        statistics: {\n          totalWorkflows: workflows.data.length,\n          totalExecutions: executions.data.length,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        error: error instanceof Error ? error.message : String(error),\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    }\n  }\n\n  /**\n   * Test if a feature is available\n   */\n  private async testFeature(testFn: () => Promise<any>): Promise<boolean> {\n    try {\n      await testFn();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get resource directory\n   */\n  private getResourceDirectory(): any {\n    const resources: any[] = [];\n\n    if (this.config.enableWorkflows) {\n      resources.push({\n        name: 'Workflows',\n        baseUri: `${this.config.baseUri}workflows`,\n        description: 'Access n8n workflow definitions and metadata',\n        endpoints: [\n          `${this.config.baseUri}workflows/list`,\n          `${this.config.baseUri}workflows/active`,\n          `${this.config.baseUri}workflows/stats`,\n          `${this.config.baseUri}workflows/{id}`,\n        ],\n      });\n    }\n\n    if (this.config.enableExecutions) {\n      resources.push({\n        name: 'Executions',\n        baseUri: `${this.config.baseUri}executions`,\n        description: 'Access n8n execution data, logs, and statistics',\n        endpoints: [\n          `${this.config.baseUri}executions/recent`,\n          `${this.config.baseUri}executions/failures`,\n          `${this.config.baseUri}executions/stats`,\n          `${this.config.baseUri}executions/{id}`,\n          `${this.config.baseUri}executions/{id}/logs`,\n        ],\n      });\n    }\n\n    if (this.config.enableNodes) {\n      resources.push({\n        name: 'Nodes',\n        baseUri: `${this.config.baseUri}nodes`,\n        description: 'Access n8n node documentation and information',\n        endpoints: [\n          `${this.config.baseUri}nodes/available`,\n          `${this.config.baseUri}nodes/{nodeType}`,\n        ],\n      });\n    }\n\n    return {\n      resources,\n      metadata: {\n        totalResources: resources.length,\n        baseUri: this.config.baseUri,\n        version: '1.0',\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}index`,\n        type: 'n8n-resource-directory',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Clear all resource caches\n   */\n  public clearAllCaches(): void {\n    this.workflowResources?.clearCache();\n    this.executionResources?.clearCache();\n    console.log('🧹 All resource caches cleared');\n  }\n\n  /**\n   * Get cache statistics for all resources\n   */\n  public getAllCacheStats(): any {\n    return {\n      workflows: this.workflowResources?.getCacheStats() || { size: 0, keys: [] },\n      executions: this.executionResources?.getCacheStats() || { size: 0, keys: [] },\n    };\n  }\n}\n\n/**\n * Create resource manager\n */\nexport function createResourceManager(config?: ResourceManagerConfig): ResourceManager {\n  return new ResourceManager(config);\n}\n\n/**\n * Environment variable configuration for resources\n */\nexport const RESOURCE_ENV_CONFIG = {\n  /** Base URI for resources */\n  BASE_URI: 'N8N_MCP_RESOURCE_BASE_URI',\n\n  /** Enable/disable specific resource types */\n  ENABLE_WORKFLOWS: 'N8N_MCP_ENABLE_WORKFLOW_RESOURCES',\n  ENABLE_EXECUTIONS: 'N8N_MCP_ENABLE_EXECUTION_RESOURCES',\n  ENABLE_CREDENTIALS: 'N8N_MCP_ENABLE_CREDENTIAL_RESOURCES',\n  ENABLE_NODES: 'N8N_MCP_ENABLE_NODE_RESOURCES',\n\n  /** Global configuration */\n  CACHE_DURATION: 'N8N_MCP_RESOURCE_CACHE_DURATION',\n  MAX_ITEMS: 'N8N_MCP_RESOURCE_MAX_ITEMS',\n} as const;\n\n/**\n * Parse resource configuration from environment variables\n */\nexport function parseResourceConfigFromEnv(): ResourceManagerConfig {\n  return {\n    baseUri: process.env[RESOURCE_ENV_CONFIG.BASE_URI] || undefined,\n    enableWorkflows: process.env[RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] !== 'false',\n    enableExecutions: process.env[RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS] !== 'false',\n    enableCredentials: process.env[RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] === 'true',\n    enableNodes: process.env[RESOURCE_ENV_CONFIG.ENABLE_NODES] !== 'false',\n    globalCacheDuration: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION];\n      return value ? parseInt(value) : undefined;\n    })(),\n    maxItems: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS];\n      return value ? parseInt(value) : undefined;\n    })(),\n  };\n}\n"],"version":3}