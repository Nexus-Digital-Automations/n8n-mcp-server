{"version":3,"names":["cov_1mdh9u53o7","actualCoverage","s","exports","createAIHelperTools","zod_1","require","fastmcp_1","nodeAnalysis_js_1","suggestionEngine_js_1","WorkflowAnalysisSchema","z","object","workflowId","string","min","includeOptimizations","boolean","optional","default","maxSuggestions","number","max","NodeCompatibilitySchema","sourceNodeId","targetNodeId","ParameterMappingSchema","nodeId","autoApply","ConnectionSuggestionSchema","suggestionType","enum","minConfidence","SmartWorkflowOptimizationSchema","optimizationType","applyRecommendations","formatWorkflowAnalysis","analysis","f","sections","push","workflowName","nodeCount","connectionCount","complexityScore","toFixed","suggestedConnections","length","b","forEach","conn","i","confidence","Math","round","reasoning","parameterMappings","slice","mapping","targetParameter","sourceParameter","transformation","optimizationSuggestions","suggestion","potentialIssues","issue","emoji","severity","message","join","formatCompatibilityResult","result","compatibility","compatible","score","compatibilityScore","issues","suggestions","requiredTransformations","trans","parameter","reason","formatParameterAnalysis","missingRequiredParameters","param","parameters","filter","p","suggestedValue","undefined","name","JSON","stringify","currentValue","unusedOptionalParameters","getClient","server","nodeAnalyzer","NodeAnalyzer","addTool","description","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","client","UserError","workflow","getWorkflow","nodeTypes","getNodeTypes","loadNodeTypes","analyzeWorkflow","error","Error","nodes","sourceNode","find","n","id","targetNode","sourceNodeType","nt","type","targetNodeType","analyzeNodeCompatibility","nodeTypeInfo","analyzeNodeParameters","some","updatedParameters","appliedCount","updateWorkflow","map","suggestionEngine","SuggestionEngine","smartSuggestions","generateSmartWorkflowSuggestions","connections","missingConnections","sourceOutput","targetInput","dataTypeMatch","suggestedParameters","Object","keys","dataFlow","analyzeDataFlow","bottlenecks","bottleneck","impact","highSeverityIssues","appliedOptimizations","startNodeId","path","step","nodeName","nodeType","dataTransformation","dataTypes","dataType","expectedType","schema","impactEmoji"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-helpers.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { NodeAnalyzer } from '../utils/nodeAnalysis.js';\nimport { SuggestionEngine } from '../ai/suggestionEngine.js';\n\n// Validation Schemas\nconst WorkflowAnalysisSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  includeOptimizations: z.boolean().optional().default(true),\n  maxSuggestions: z.number().min(1).max(50).optional().default(10),\n});\n\nconst NodeCompatibilitySchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  sourceNodeId: z.string().min(1, 'Source node ID is required'),\n  targetNodeId: z.string().min(1, 'Target node ID is required'),\n});\n\nconst ParameterMappingSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  autoApply: z.boolean().optional().default(false),\n});\n\nconst ConnectionSuggestionSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().optional(),\n  suggestionType: z.enum(['all', 'missing', 'optimization']).optional().default('all'),\n  minConfidence: z.number().min(0).max(1).optional().default(0.3),\n});\n\nconst SmartWorkflowOptimizationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  optimizationType: z.enum(['performance', 'reliability', 'maintainability', 'all']).optional().default('all'),\n  applyRecommendations: z.boolean().optional().default(false),\n});\n\n// Helper Functions\nfunction formatWorkflowAnalysis(analysis: any): string {\n  const sections = [];\n  \n  sections.push(`📊 **Workflow Analysis: ${analysis.workflowName}**\\n`);\n  sections.push(`**Overview:**`);\n  sections.push(`• Nodes: ${analysis.nodeCount}`);\n  sections.push(`• Connections: ${analysis.connectionCount}`);\n  sections.push(`• Complexity Score: ${analysis.complexityScore.toFixed(1)}/10\\n`);\n\n  if (analysis.suggestedConnections.length > 0) {\n    sections.push(`**🔗 Suggested Connections (${analysis.suggestedConnections.length}):**`);\n    analysis.suggestedConnections.forEach((conn: any, i: number) => {\n      const confidence = Math.round(conn.confidence * 100);\n      sections.push(`${i + 1}. Connect \"${conn.sourceNodeId}\" → \"${conn.targetNodeId}\" (${confidence}% confidence)`);\n      sections.push(`   Reasoning: ${conn.reasoning}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.parameterMappings.length > 0) {\n    sections.push(`**⚙️ Parameter Mapping Opportunities (${analysis.parameterMappings.length}):**`);\n    analysis.parameterMappings.slice(0, 5).forEach((mapping: any, i: number) => {\n      const confidence = Math.round(mapping.confidence * 100);\n      sections.push(`${i + 1}. ${mapping.targetParameter} = ${mapping.sourceParameter} (${confidence}% confidence)`);\n      if (mapping.transformation) {\n        sections.push(`   Transformation: ${mapping.transformation}`);\n      }\n    });\n    sections.push('');\n  }\n\n  if (analysis.optimizationSuggestions.length > 0) {\n    sections.push(`**💡 Optimization Suggestions:**`);\n    analysis.optimizationSuggestions.forEach((suggestion: string, i: number) => {\n      sections.push(`${i + 1}. ${suggestion}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.potentialIssues.length > 0) {\n    sections.push(`**⚠️ Potential Issues:**`);\n    analysis.potentialIssues.forEach((issue: any, i: number) => {\n      const emoji = issue.severity === 'critical' ? '🚨' : issue.severity === 'high' ? '⚠️' : '💡';\n      sections.push(`${i + 1}. ${emoji} ${issue.message}`);\n      if (issue.suggestion) {\n        sections.push(`   Suggestion: ${issue.suggestion}`);\n      }\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatCompatibilityResult(result: any): string {\n  const compatibility = result.compatible ? '✅ Compatible' : '❌ Incompatible';\n  const score = Math.round(result.compatibilityScore * 100);\n  \n  const sections = [\n    `🔗 **Node Compatibility Analysis**\\n`,\n    `**Result:** ${compatibility} (${score}% score)\\n`,\n  ];\n\n  if (result.issues.length > 0) {\n    sections.push(`**Issues:**`);\n    result.issues.forEach((issue: string, i: number) => {\n      sections.push(`${i + 1}. ${issue}`);\n    });\n    sections.push('');\n  }\n\n  if (result.suggestions.length > 0) {\n    sections.push(`**Suggestions:**`);\n    result.suggestions.forEach((suggestion: string, i: number) => {\n      sections.push(`${i + 1}. ${suggestion}`);\n    });\n    sections.push('');\n  }\n\n  if (result.requiredTransformations.length > 0) {\n    sections.push(`**Required Transformations:**`);\n    result.requiredTransformations.forEach((trans: any, i: number) => {\n      sections.push(`${i + 1}. ${trans.parameter}: ${trans.transformation}`);\n      sections.push(`   Reason: ${trans.reason}`);\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nfunction formatParameterAnalysis(analysis: any): string {\n  const sections = [\n    `⚙️ **Parameter Analysis for Node: ${analysis.nodeId}**\\n`,\n  ];\n\n  if (analysis.missingRequiredParameters.length > 0) {\n    sections.push(`**❌ Missing Required Parameters:**`);\n    analysis.missingRequiredParameters.forEach((param: string, i: number) => {\n      sections.push(`${i + 1}. ${param}`);\n    });\n    sections.push('');\n  }\n\n  if (analysis.parameters.length > 0) {\n    sections.push(`**📋 Parameter Suggestions:**`);\n    analysis.parameters\n      .filter((p: any) => p.suggestedValue !== undefined)\n      .slice(0, 10)\n      .forEach((param: any, i: number) => {\n        const confidence = Math.round(param.confidence * 100);\n        sections.push(`${i + 1}. **${param.name}**`);\n        sections.push(`   Current: ${JSON.stringify(param.currentValue)}`);\n        sections.push(`   Suggested: ${JSON.stringify(param.suggestedValue)} (${confidence}% confidence)`);\n        sections.push(`   Reasoning: ${param.reasoning}`);\n        \n        if (param.issues.length > 0) {\n          sections.push(`   Issues: ${param.issues.join(', ')}`);\n        }\n        sections.push('');\n      });\n  }\n\n  if (analysis.unusedOptionalParameters.length > 0) {\n    sections.push(`**ℹ️ Unused Parameters:**`);\n    analysis.unusedOptionalParameters.forEach((param: string, i: number) => {\n      sections.push(`${i + 1}. ${param} (may be legacy or misconfigured)`);\n    });\n  }\n\n  return sections.join('\\n');\n}\n\nexport function createAIHelperTools(getClient: () => N8nClient | null, server: any) {\n  // Initialize analyzer\n  const nodeAnalyzer = new NodeAnalyzer();\n\n  // AI-Powered Workflow Analysis\n  server.addTool({\n    name: 'analyze-workflow-ai',\n    description: 'AI-powered comprehensive workflow analysis with connection suggestions and optimization recommendations',\n    parameters: WorkflowAnalysisSchema,\n    annotations: {\n      title: 'AI Workflow Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof WorkflowAnalysisSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        // Get workflow data\n        const workflow = await client.getWorkflow(args.workflowId);\n        \n        // Load node types for better analysis\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n        \n        // Perform comprehensive analysis\n        const analysis = nodeAnalyzer.analyzeWorkflow(workflow);\n        \n        return formatWorkflowAnalysis(analysis);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze workflow with unknown error');\n      }\n    },\n  });\n\n  // Node Compatibility Analysis\n  server.addTool({\n    name: 'analyze-node-compatibility',\n    description: 'Analyze compatibility between two nodes and suggest required transformations',\n    parameters: NodeCompatibilitySchema,\n    annotations: {\n      title: 'Node Compatibility Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeCompatibilitySchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n        \n        const sourceNode = nodes.find(n => n.id === args.sourceNodeId);\n        const targetNode = nodes.find(n => n.id === args.targetNodeId);\n        \n        if (!sourceNode) {\n          throw new UserError(`Source node with ID '${args.sourceNodeId}' not found`);\n        }\n        if (!targetNode) {\n          throw new UserError(`Target node with ID '${args.targetNodeId}' not found`);\n        }\n\n        // Get node type information\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n        \n        const sourceNodeType = nodeTypes.find(nt => nt.name === sourceNode.type);\n        const targetNodeType = nodeTypes.find(nt => nt.name === targetNode.type);\n        \n        const result = nodeAnalyzer.analyzeNodeCompatibility(\n          sourceNode,\n          targetNode,\n          sourceNodeType,\n          targetNodeType\n        );\n        \n        return formatCompatibilityResult(result);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node compatibility: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node compatibility with unknown error');\n      }\n    },\n  });\n\n  // Smart Parameter Mapping\n  server.addTool({\n    name: 'suggest-parameter-mappings',\n    description: 'AI-powered parameter mapping suggestions with auto-configuration options',\n    parameters: ParameterMappingSchema,\n    annotations: {\n      title: 'Smart Parameter Mapping',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ParameterMappingSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n        \n        const targetNode = nodes.find(n => n.id === args.nodeId);\n        if (!targetNode) {\n          throw new UserError(`Node with ID '${args.nodeId}' not found`);\n        }\n\n        // Get node type information\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n        \n        const nodeTypeInfo = nodeTypes.find(nt => nt.name === targetNode.type);\n        const analysis = nodeAnalyzer.analyzeNodeParameters(targetNode, nodeTypeInfo);\n        \n        // Auto-apply suggestions if requested\n        if (args.autoApply && analysis.parameters.some(p => p.suggestedValue !== undefined)) {\n          const updatedParameters = { ...targetNode.parameters };\n          let appliedCount = 0;\n          \n          for (const param of analysis.parameters) {\n            if (param.suggestedValue !== undefined && param.confidence > 0.7) {\n              updatedParameters[param.name] = param.suggestedValue;\n              appliedCount++;\n            }\n          }\n          \n          if (appliedCount > 0) {\n            await client.updateWorkflow(args.workflowId, {\n              nodes: nodes.map(n => n.id === args.nodeId ? \n                { ...n, parameters: updatedParameters } : n\n              ) as Array<Record<string, unknown>>,\n            });\n            \n            return formatParameterAnalysis(analysis) + \n              `\\n\\n✅ **Auto-Applied ${appliedCount} high-confidence parameter suggestions to the workflow.**`;\n          }\n        }\n        \n        return formatParameterAnalysis(analysis);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze parameters with unknown error');\n      }\n    },\n  });\n\n  // AI Connection Suggestions\n  server.addTool({\n    name: 'suggest-node-connections',\n    description: 'Generate intelligent node connection suggestions based on workflow analysis',\n    parameters: ConnectionSuggestionSchema,\n    annotations: {\n      title: 'AI Connection Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ConnectionSuggestionSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        \n        // Load node types\n        const nodeTypes = await client.getNodeTypes();\n        const suggestionEngine = new SuggestionEngine(nodeTypes);\n        \n        const smartSuggestions = suggestionEngine.generateSmartWorkflowSuggestions(workflow);\n        let connections = smartSuggestions.missingConnections;\n        \n        // Filter by confidence and type\n        connections = connections.filter(conn => conn.confidence >= args.minConfidence);\n        \n        if (args.nodeId) {\n          connections = connections.filter(conn => \n            conn.sourceNodeId === args.nodeId || conn.targetNodeId === args.nodeId\n          );\n        }\n\n        if (connections.length === 0) {\n          return `No connection suggestions found matching criteria (min confidence: ${Math.round(args.minConfidence * 100)}%)`;\n        }\n\n        const sections = [\n          `🔗 **AI Connection Suggestions for Workflow: ${workflow.name}**\\n`,\n          `Found ${connections.length} potential connections:\\n`,\n        ];\n\n        connections.forEach((conn, i) => {\n          const confidence = Math.round(conn.confidence * 100);\n          const sourceNode = workflow.nodes?.find(n => n.id === conn.sourceNodeId);\n          const targetNode = workflow.nodes?.find(n => n.id === conn.targetNodeId);\n          \n          sections.push(`**${i + 1}. ${sourceNode?.name || conn.sourceNodeId} → ${targetNode?.name || conn.targetNodeId}**`);\n          sections.push(`   Confidence: ${confidence}%`);\n          sections.push(`   Connection: ${conn.sourceOutput} → ${conn.targetInput}`);\n          sections.push(`   Reasoning: ${conn.reasoning}`);\n          sections.push(`   Data Types Compatible: ${conn.dataTypeMatch ? '✅' : '⚠️'}`);\n          \n          if (conn.suggestedParameters && Object.keys(conn.suggestedParameters).length > 0) {\n            sections.push(`   Suggested Parameters: ${JSON.stringify(conn.suggestedParameters, null, 2)}`);\n          }\n          sections.push('');\n        });\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to generate connection suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to generate connection suggestions with unknown error');\n      }\n    },\n  });\n\n  // Smart Workflow Optimization\n  server.addTool({\n    name: 'optimize-workflow-ai',\n    description: 'AI-powered workflow optimization with performance, reliability, and maintainability recommendations',\n    parameters: SmartWorkflowOptimizationSchema,\n    annotations: {\n      title: 'AI Workflow Optimization',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SmartWorkflowOptimizationSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        \n        // Load node types for analysis\n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n        \n        // Perform comprehensive analysis\n        const analysis = nodeAnalyzer.analyzeWorkflow(workflow);\n        \n        // Analyze data flow\n        const dataFlow = nodeAnalyzer.analyzeDataFlow(workflow);\n        \n        const sections = [\n          `🚀 **AI Workflow Optimization: ${workflow.name}**\\n`,\n          `**Current State:**`,\n          `• Complexity Score: ${analysis.complexityScore.toFixed(1)}/10`,\n          `• Nodes: ${analysis.nodeCount}`,\n          `• Connections: ${analysis.connectionCount}\\n`,\n        ];\n\n        // Performance Optimizations\n        if (args.optimizationType === 'performance' || args.optimizationType === 'all') {\n          sections.push(`**⚡ Performance Optimizations:**`);\n          \n          dataFlow.bottlenecks.forEach((bottleneck, i) => {\n            sections.push(`${i + 1}. ${bottleneck.reason} (${bottleneck.impact} impact)`);\n            sections.push(`   Suggestion: ${bottleneck.suggestion}`);\n          });\n          \n          if (analysis.nodeCount > 15) {\n            sections.push(`${dataFlow.bottlenecks.length + 1}. Consider breaking large workflow into smaller, focused workflows`);\n          }\n          sections.push('');\n        }\n\n        // Reliability Improvements\n        if (args.optimizationType === 'reliability' || args.optimizationType === 'all') {\n          sections.push(`**🛡️ Reliability Improvements:**`);\n          \n          const highSeverityIssues = analysis.potentialIssues.filter(issue => \n            issue.severity === 'high' || issue.severity === 'critical'\n          );\n          \n          highSeverityIssues.forEach((issue, i) => {\n            sections.push(`${i + 1}. ${issue.message}`);\n            if (issue.suggestion) {\n              sections.push(`   Solution: ${issue.suggestion}`);\n            }\n          });\n          \n          if (highSeverityIssues.length === 0) {\n            sections.push('✅ No major reliability issues detected');\n          }\n          sections.push('');\n        }\n\n        // Maintainability Enhancements  \n        if (args.optimizationType === 'maintainability' || args.optimizationType === 'all') {\n          sections.push(`**🔧 Maintainability Enhancements:**`);\n          \n          analysis.optimizationSuggestions.forEach((suggestion, i) => {\n            sections.push(`${i + 1}. ${suggestion}`);\n          });\n          \n          if (analysis.suggestedConnections.length > 0) {\n            sections.push(`${analysis.optimizationSuggestions.length + 1}. ${analysis.suggestedConnections.length} potential connections could improve workflow clarity`);\n          }\n        }\n\n        // Auto-apply optimizations if requested (limited to safe changes)\n        if (args.applyRecommendations) {\n          let appliedOptimizations = 0;\n          \n          // Apply high-confidence parameter mappings\n          for (const mapping of analysis.parameterMappings.slice(0, 5)) {\n            if (mapping.confidence > 0.8) {\n              appliedOptimizations++;\n            }\n          }\n          \n          if (appliedOptimizations > 0) {\n            sections.push(`\\n✅ **Applied ${appliedOptimizations} safe optimization recommendations automatically.**`);\n          } else {\n            sections.push(`\\n💡 **No safe automatic optimizations could be applied. Manual review recommended.**`);\n          }\n        }\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to optimize workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to optimize workflow with unknown error');\n      }\n    },\n  });\n\n  // Data Flow Analysis\n  server.addTool({\n    name: 'analyze-data-flow',\n    description: 'Analyze data flow through workflow nodes with bottleneck identification and optimization suggestions',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      startNodeId: z.string().optional(),\n    }),\n    annotations: {\n      title: 'Data Flow Analysis',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { workflowId: string; startNodeId?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        \n        const nodeTypes = await client.getNodeTypes();\n        nodeAnalyzer.loadNodeTypes(nodeTypes);\n        \n        const dataFlow = nodeAnalyzer.analyzeDataFlow(workflow, args.startNodeId);\n        \n        const sections = [\n          `📊 **Data Flow Analysis: ${workflow.name}**\\n`,\n          `**Execution Path (${dataFlow.path.length} steps):**`,\n        ];\n\n        dataFlow.path.forEach((step, i) => {\n          sections.push(`${i + 1}. **${step.nodeName}** (${step.nodeType})`);\n          sections.push(`   Transformation: ${step.dataTransformation}`);\n        });\n        sections.push('');\n\n        if (dataFlow.dataTypes.length > 0) {\n          sections.push(`**Data Types by Step:**`);\n          dataFlow.dataTypes.forEach(dataType => {\n            sections.push(`Step ${dataType.step + 1}: ${dataType.expectedType}`);\n            if (dataType.schema) {\n              sections.push(`   Schema: ${JSON.stringify(dataType.schema, null, 2)}`);\n            }\n          });\n          sections.push('');\n        }\n\n        if (dataFlow.bottlenecks.length > 0) {\n          sections.push(`**⚠️ Identified Bottlenecks:**`);\n          dataFlow.bottlenecks.forEach((bottleneck, i) => {\n            const impactEmoji = bottleneck.impact === 'high' ? '🚨' : bottleneck.impact === 'medium' ? '⚠️' : '💡';\n            sections.push(`${i + 1}. ${impactEmoji} ${bottleneck.reason}`);\n            sections.push(`   Node: ${bottleneck.nodeId}`);\n            sections.push(`   Impact: ${bottleneck.impact}`);\n            sections.push(`   Suggestion: ${bottleneck.suggestion}`);\n            sections.push('');\n          });\n        } else {\n          sections.push(`✅ **No significant bottlenecks detected in the data flow.**`);\n        }\n\n        return sections.join('\\n');\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze data flow: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze data flow with unknown error');\n      }\n    },\n  });\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}