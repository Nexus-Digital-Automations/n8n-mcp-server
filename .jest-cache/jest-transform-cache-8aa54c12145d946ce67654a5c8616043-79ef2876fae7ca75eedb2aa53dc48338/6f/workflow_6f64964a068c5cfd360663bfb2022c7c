5bcb6aad904803bfc4d50a305602c682
/* istanbul ignore next */
function cov_2eycqhrh36() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow.ts";
  var hash = "04c8b532cc273e5d1cd28ea3b241450d6637face";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 25
        },
        end: {
          line: 6,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 28
        },
        end: {
          line: 10,
          column: 2
        }
      },
      "2": {
        start: {
          line: 11,
          column: 29
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "3": {
        start: {
          line: 19,
          column: 29
        },
        end: {
          line: 27,
          column: 2
        }
      },
      "4": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 83,
          column: 7
        }
      },
      "5": {
        start: {
          line: 43,
          column: 27
        },
        end: {
          line: 43,
          column: 38
        }
      },
      "6": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "7": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 94
        }
      },
      "8": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 81,
          column: 13
        }
      },
      "9": {
        start: {
          line: 48,
          column: 32
        },
        end: {
          line: 48,
          column: 34
        }
      },
      "10": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "11": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 47
        }
      },
      "12": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "13": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 49
        }
      },
      "14": {
        start: {
          line: 53,
          column: 33
        },
        end: {
          line: 53,
          column: 67
        }
      },
      "15": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 56,
          column: 17
        }
      },
      "16": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 69
        }
      },
      "17": {
        start: {
          line: 57,
          column: 29
        },
        end: {
          line: 57,
          column: 77
        }
      },
      "18": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 70,
          column: 19
        }
      },
      "19": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "20": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 58
        }
      },
      "21": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 96
        }
      },
      "22": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 77
        }
      },
      "23": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 65,
          column: 21
        }
      },
      "24": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 64,
          column: 77
        }
      },
      "25": {
        start: {
          line: 66,
          column: 20
        },
        end: {
          line: 68,
          column: 21
        }
      },
      "26": {
        start: {
          line: 67,
          column: 24
        },
        end: {
          line: 67,
          column: 105
        }
      },
      "27": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 35
        }
      },
      "28": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 73,
          column: 17
        }
      },
      "29": {
        start: {
          line: 72,
          column: 20
        },
        end: {
          line: 72,
          column: 95
        }
      },
      "30": {
        start: {
          line: 74,
          column: 16
        },
        end: {
          line: 74,
          column: 30
        }
      },
      "31": {
        start: {
          line: 77,
          column: 16
        },
        end: {
          line: 79,
          column: 17
        }
      },
      "32": {
        start: {
          line: 78,
          column: 20
        },
        end: {
          line: 78,
          column: 86
        }
      },
      "33": {
        start: {
          line: 80,
          column: 16
        },
        end: {
          line: 80,
          column: 83
        }
      },
      "34": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 132,
          column: 7
        }
      },
      "35": {
        start: {
          line: 97,
          column: 27
        },
        end: {
          line: 97,
          column: 38
        }
      },
      "36": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 100,
          column: 13
        }
      },
      "37": {
        start: {
          line: 99,
          column: 16
        },
        end: {
          line: 99,
          column: 94
        }
      },
      "38": {
        start: {
          line: 101,
          column: 12
        },
        end: {
          line: 130,
          column: 13
        }
      },
      "39": {
        start: {
          line: 102,
          column: 33
        },
        end: {
          line: 102,
          column: 74
        }
      },
      "40": {
        start: {
          line: 103,
          column: 29
        },
        end: {
          line: 103,
          column: 63
        }
      },
      "41": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 104,
          column: 53
        }
      },
      "42": {
        start: {
          line: 105,
          column: 16
        },
        end: {
          line: 105,
          column: 91
        }
      },
      "43": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 72
        }
      },
      "44": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 109,
          column: 17
        }
      },
      "45": {
        start: {
          line: 108,
          column: 20
        },
        end: {
          line: 108,
          column: 72
        }
      },
      "46": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "47": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 96
        }
      },
      "48": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "49": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 96
        }
      },
      "50": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "51": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 46
        }
      },
      "52": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 121,
          column: 23
        }
      },
      "53": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 120
        }
      },
      "54": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 123,
          column: 30
        }
      },
      "55": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 128,
          column: 17
        }
      },
      "56": {
        start: {
          line: 127,
          column: 20
        },
        end: {
          line: 127,
          column: 84
        }
      },
      "57": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 81
        }
      },
      "58": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 171,
          column: 7
        }
      },
      "59": {
        start: {
          line: 146,
          column: 27
        },
        end: {
          line: 146,
          column: 38
        }
      },
      "60": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "61": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "62": {
        start: {
          line: 150,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "63": {
        start: {
          line: 151,
          column: 37
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "64": {
        start: {
          line: 159,
          column: 33
        },
        end: {
          line: 159,
          column: 74
        }
      },
      "65": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 162,
          column: 61
        }
      },
      "66": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 167,
          column: 17
        }
      },
      "67": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 166,
          column: 87
        }
      },
      "68": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 84
        }
      },
      "69": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 204,
          column: 7
        }
      },
      "70": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 185,
          column: 38
        }
      },
      "71": {
        start: {
          line: 186,
          column: 12
        },
        end: {
          line: 188,
          column: 13
        }
      },
      "72": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 94
        }
      },
      "73": {
        start: {
          line: 189,
          column: 12
        },
        end: {
          line: 202,
          column: 13
        }
      },
      "74": {
        start: {
          line: 190,
          column: 54
        },
        end: {
          line: 190,
          column: 58
        }
      },
      "75": {
        start: {
          line: 191,
          column: 37
        },
        end: {
          line: 191,
          column: 47
        }
      },
      "76": {
        start: {
          line: 192,
          column: 33
        },
        end: {
          line: 192,
          column: 86
        }
      },
      "77": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 195,
          column: 61
        }
      },
      "78": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 200,
          column: 17
        }
      },
      "79": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 199,
          column: 87
        }
      },
      "80": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 201,
          column: 84
        }
      },
      "81": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 233,
          column: 7
        }
      },
      "82": {
        start: {
          line: 218,
          column: 27
        },
        end: {
          line: 218,
          column: 38
        }
      },
      "83": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "84": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 94
        }
      },
      "85": {
        start: {
          line: 222,
          column: 12
        },
        end: {
          line: 231,
          column: 13
        }
      },
      "86": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 223,
          column: 61
        }
      },
      "87": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 85
        }
      },
      "88": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "89": {
        start: {
          line: 228,
          column: 20
        },
        end: {
          line: 228,
          column: 87
        }
      },
      "90": {
        start: {
          line: 230,
          column: 16
        },
        end: {
          line: 230,
          column: 84
        }
      },
      "91": {
        start: {
          line: 235,
          column: 4
        },
        end: {
          line: 263,
          column: 7
        }
      },
      "92": {
        start: {
          line: 247,
          column: 27
        },
        end: {
          line: 247,
          column: 38
        }
      },
      "93": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 250,
          column: 13
        }
      },
      "94": {
        start: {
          line: 249,
          column: 16
        },
        end: {
          line: 249,
          column: 94
        }
      },
      "95": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 261,
          column: 13
        }
      },
      "96": {
        start: {
          line: 252,
          column: 33
        },
        end: {
          line: 252,
          column: 79
        }
      },
      "97": {
        start: {
          line: 253,
          column: 16
        },
        end: {
          line: 254,
          column: 41
        }
      },
      "98": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 259,
          column: 17
        }
      },
      "99": {
        start: {
          line: 258,
          column: 20
        },
        end: {
          line: 258,
          column: 89
        }
      },
      "100": {
        start: {
          line: 260,
          column: 16
        },
        end: {
          line: 260,
          column: 86
        }
      },
      "101": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 293,
          column: 7
        }
      },
      "102": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 277,
          column: 38
        }
      },
      "103": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "104": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 94
        }
      },
      "105": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 291,
          column: 13
        }
      },
      "106": {
        start: {
          line: 282,
          column: 33
        },
        end: {
          line: 282,
          column: 81
        }
      },
      "107": {
        start: {
          line: 283,
          column: 16
        },
        end: {
          line: 284,
          column: 43
        }
      },
      "108": {
        start: {
          line: 287,
          column: 16
        },
        end: {
          line: 289,
          column: 17
        }
      },
      "109": {
        start: {
          line: 288,
          column: 20
        },
        end: {
          line: 288,
          column: 91
        }
      },
      "110": {
        start: {
          line: 290,
          column: 16
        },
        end: {
          line: 290,
          column: 88
        }
      }
    },
    fnMap: {
      "0": {
        name: "createWorkflowTools",
        decl: {
          start: {
            line: 29,
            column: 16
          },
          end: {
            line: 29,
            column: 35
          }
        },
        loc: {
          start: {
            line: 29,
            column: 55
          },
          end: {
            line: 294,
            column: 1
          }
        },
        line: 29
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 17
          },
          end: {
            line: 42,
            column: 18
          }
        },
        loc: {
          start: {
            line: 42,
            column: 33
          },
          end: {
            line: 82,
            column: 9
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 38
          },
          end: {
            line: 58,
            column: 39
          }
        },
        loc: {
          start: {
            line: 58,
            column: 59
          },
          end: {
            line: 70,
            column: 17
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 96,
            column: 17
          },
          end: {
            line: 96,
            column: 18
          }
        },
        loc: {
          start: {
            line: 96,
            column: 33
          },
          end: {
            line: 131,
            column: 9
          }
        },
        line: 96
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 119,
            column: 43
          },
          end: {
            line: 119,
            column: 44
          }
        },
        loc: {
          start: {
            line: 119,
            column: 60
          },
          end: {
            line: 121,
            column: 21
          }
        },
        line: 119
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 145,
            column: 17
          },
          end: {
            line: 145,
            column: 18
          }
        },
        loc: {
          start: {
            line: 145,
            column: 33
          },
          end: {
            line: 170,
            column: 9
          }
        },
        line: 145
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 184,
            column: 17
          },
          end: {
            line: 184,
            column: 18
          }
        },
        loc: {
          start: {
            line: 184,
            column: 33
          },
          end: {
            line: 203,
            column: 9
          }
        },
        line: 184
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 217,
            column: 17
          },
          end: {
            line: 217,
            column: 18
          }
        },
        loc: {
          start: {
            line: 217,
            column: 33
          },
          end: {
            line: 232,
            column: 9
          }
        },
        line: 217
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 246,
            column: 17
          },
          end: {
            line: 246,
            column: 18
          }
        },
        loc: {
          start: {
            line: 246,
            column: 33
          },
          end: {
            line: 262,
            column: 9
          }
        },
        line: 246
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 276,
            column: 17
          },
          end: {
            line: 276,
            column: 18
          }
        },
        loc: {
          start: {
            line: 276,
            column: 33
          },
          end: {
            line: 292,
            column: 9
          }
        },
        line: 276
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "1": {
        loc: {
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 16
          },
          end: {
            line: 50,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 52,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 16
          },
          end: {
            line: 52,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 56,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 46
          },
          end: {
            line: 61,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 64
          },
          end: {
            line: 61,
            column: 75
          }
        }, {
          start: {
            line: 61,
            column: 78
          },
          end: {
            line: 61,
            column: 91
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 67
          }
        }, {
          start: {
            line: 62,
            column: 71
          },
          end: {
            line: 62,
            column: 72
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 20
          },
          end: {
            line: 65,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 24
          },
          end: {
            line: 63,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 63,
            column: 24
          },
          end: {
            line: 63,
            column: 37
          }
        }, {
          start: {
            line: 63,
            column: 41
          },
          end: {
            line: 63,
            column: 65
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 20
          },
          end: {
            line: 68,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 66
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 16
          },
          end: {
            line: 79,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "11": {
        loc: {
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 12
          },
          end: {
            line: 100,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "12": {
        loc: {
          start: {
            line: 105,
            column: 41
          },
          end: {
            line: 105,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 59
          },
          end: {
            line: 105,
            column: 70
          }
        }, {
          start: {
            line: 105,
            column: 73
          },
          end: {
            line: 105,
            column: 86
          }
        }],
        line: 105
      },
      "13": {
        loc: {
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 40
          },
          end: {
            line: 106,
            column: 62
          }
        }, {
          start: {
            line: 106,
            column: 66
          },
          end: {
            line: 106,
            column: 67
          }
        }],
        line: 106
      },
      "14": {
        loc: {
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 16
          },
          end: {
            line: 109,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "15": {
        loc: {
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 20
          },
          end: {
            line: 107,
            column: 33
          }
        }, {
          start: {
            line: 107,
            column: 37
          },
          end: {
            line: 107,
            column: 61
          }
        }],
        line: 107
      },
      "16": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "17": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "18": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 122,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "19": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 34
          }
        }, {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 117,
            column: 63
          }
        }],
        line: 117
      },
      "20": {
        loc: {
          start: {
            line: 120,
            column: 53
          },
          end: {
            line: 120,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 53
          },
          end: {
            line: 120,
            column: 62
          }
        }, {
          start: {
            line: 120,
            column: 66
          },
          end: {
            line: 120,
            column: 80
          }
        }],
        line: 120
      },
      "21": {
        loc: {
          start: {
            line: 120,
            column: 87
          },
          end: {
            line: 120,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 120,
            column: 87
          },
          end: {
            line: 120,
            column: 96
          }
        }, {
          start: {
            line: 120,
            column: 100
          },
          end: {
            line: 120,
            column: 114
          }
        }],
        line: 120
      },
      "22": {
        loc: {
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 128,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 16
          },
          end: {
            line: 128,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "23": {
        loc: {
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "24": {
        loc: {
          start: {
            line: 161,
            column: 31
          },
          end: {
            line: 161,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 161,
            column: 49
          },
          end: {
            line: 161,
            column: 60
          }
        }, {
          start: {
            line: 161,
            column: 63
          },
          end: {
            line: 161,
            column: 76
          }
        }],
        line: 161
      },
      "25": {
        loc: {
          start: {
            line: 162,
            column: 30
          },
          end: {
            line: 162,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 30
          },
          end: {
            line: 162,
            column: 52
          }
        }, {
          start: {
            line: 162,
            column: 56
          },
          end: {
            line: 162,
            column: 57
          }
        }],
        line: 162
      },
      "26": {
        loc: {
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 16
          },
          end: {
            line: 167,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "27": {
        loc: {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 188,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 186
      },
      "28": {
        loc: {
          start: {
            line: 194,
            column: 31
          },
          end: {
            line: 194,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 49
          },
          end: {
            line: 194,
            column: 60
          }
        }, {
          start: {
            line: 194,
            column: 63
          },
          end: {
            line: 194,
            column: 76
          }
        }],
        line: 194
      },
      "29": {
        loc: {
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 195,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 30
          },
          end: {
            line: 195,
            column: 52
          }
        }, {
          start: {
            line: 195,
            column: 56
          },
          end: {
            line: 195,
            column: 57
          }
        }],
        line: 195
      },
      "30": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 200,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 200,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "31": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 221,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "32": {
        loc: {
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 229,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 16
          },
          end: {
            line: 229,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "33": {
        loc: {
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 12
          },
          end: {
            line: 250,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "34": {
        loc: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 259,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 259,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "35": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "36": {
        loc: {
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 16
          },
          end: {
            line: 289,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nWorkflow,\n  CreateWorkflowRequest,\n  UpdateWorkflowRequest,\n  PaginationOptions,\n} from '../types/n8n.js';\n\n// Zod schemas for validation\nconst WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst ListWorkflowsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateWorkflowSchema = z.object({\n  name: z.string().min(1, 'Workflow name is required'),\n  nodes: z.array(z.record(z.unknown())).min(1, 'At least one node is required'),\n  connections: z.record(z.unknown()),\n  active: z.boolean().optional().default(false),\n  settings: z.record(z.unknown()).optional(),\n  tags: z.array(z.string()).optional(),\n});\n\nconst UpdateWorkflowSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  name: z.string().min(1).optional(),\n  nodes: z.array(z.record(z.unknown())).optional(),\n  connections: z.record(z.unknown()).optional(),\n  active: z.boolean().optional(),\n  settings: z.record(z.unknown()).optional(),\n  tags: z.array(z.string()).optional(),\n});\n\n// Tool registration function\nexport function createWorkflowTools(getClient: () => N8nClient | null, server: any) {\n  // List workflows tool\n  server.addTool({\n    name: 'list-workflows',\n    description: 'List all workflows in the n8n instance with pagination support',\n    parameters: ListWorkflowsSchema,\n    annotations: {\n      title: 'List n8n Workflows',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListWorkflowsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getWorkflows(options);\n\n        if (response.data.length === 0) {\n          return 'No workflows found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} workflow(s):\\n\\n`;\n\n        response.data.forEach((workflow: N8nWorkflow, index: number) => {\n          result += `${index + 1}. **${workflow.name}**\\n`;\n          result += `   - ID: ${workflow.id}\\n`;\n          result += `   - Status: ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n`;\n          result += `   - Nodes: ${workflow.nodes?.length || 0}\\n`;\n          if (workflow.tags && workflow.tags.length > 0) {\n            result += `   - Tags: ${workflow.tags.join(', ')}\\n`;\n          }\n          if (workflow.createdAt) {\n            result += `   - Created: ${new Date(workflow.createdAt).toLocaleDateString()}\\n`;\n          }\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list workflows: ${error.message}`);\n        }\n        throw new UserError('Failed to list workflows with unknown error');\n      }\n    },\n  });\n\n  // Get workflow tool\n  server.addTool({\n    name: 'get-workflow',\n    description: 'Get detailed information about a specific workflow by ID',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Get Workflow Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        let result = `# Workflow: ${workflow.name}\\n\\n`;\n        result += `**ID:** ${workflow.id}\\n`;\n        result += `**Status:** ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n`;\n        result += `**Nodes:** ${workflow.nodes?.length || 0}\\n`;\n\n        if (workflow.tags && workflow.tags.length > 0) {\n          result += `**Tags:** ${workflow.tags.join(', ')}\\n`;\n        }\n\n        if (workflow.createdAt) {\n          result += `**Created:** ${new Date(workflow.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (workflow.updatedAt) {\n          result += `**Updated:** ${new Date(workflow.updatedAt).toLocaleString()}\\n`;\n        }\n\n        // List nodes\n        if (workflow.nodes && workflow.nodes.length > 0) {\n          result += '\\n## Nodes:\\n';\n          workflow.nodes.forEach((node, index) => {\n            result += `${index + 1}. **${node.name || 'Unnamed Node'}** (${node.type || 'Unknown Type'})\\n`;\n          });\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to get workflow with unknown error');\n      }\n    },\n  });\n\n  // Create workflow tool\n  server.addTool({\n    name: 'create-workflow',\n    description: 'Create a new workflow in n8n with nodes and connections',\n    parameters: CreateWorkflowSchema,\n    annotations: {\n      title: 'Create New Workflow',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateWorkflowSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflowData: CreateWorkflowRequest = {\n          name: args.name,\n          nodes: args.nodes,\n          connections: args.connections,\n          active: args.active,\n          settings: args.settings,\n          tags: args.tags,\n        };\n\n        const workflow = await client.createWorkflow(workflowData);\n\n        return (\n          `\u2705 Successfully created workflow \"${workflow.name}\" with ID: ${workflow.id}\\n` +\n          `Status: ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n` +\n          `Nodes: ${workflow.nodes?.length || 0}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to create workflow with unknown error');\n      }\n    },\n  });\n\n  // Update workflow tool\n  server.addTool({\n    name: 'update-workflow',\n    description: \"Update an existing workflow's properties, nodes, or connections\",\n    parameters: UpdateWorkflowSchema,\n    annotations: {\n      title: 'Update Workflow',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateWorkflowSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { workflowId, ...updateData } = args;\n        const workflowData: UpdateWorkflowRequest = updateData;\n\n        const workflow = await client.updateWorkflow(workflowId, workflowData);\n\n        return (\n          `\u2705 Successfully updated workflow \"${workflow.name}\" (ID: ${workflow.id})\\n` +\n          `Status: ${workflow.active ? '\uD83D\uDFE2 Active' : '\uD83D\uDD34 Inactive'}\\n` +\n          `Nodes: ${workflow.nodes?.length || 0}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to update workflow with unknown error');\n      }\n    },\n  });\n\n  // Delete workflow tool\n  server.addTool({\n    name: 'delete-workflow',\n    description: 'Delete a workflow from n8n permanently',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Delete Workflow',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteWorkflow(args.workflowId);\n        return `\u2705 Successfully deleted workflow with ID: ${args.workflowId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to delete workflow with unknown error');\n      }\n    },\n  });\n\n  // Activate workflow tool\n  server.addTool({\n    name: 'activate-workflow',\n    description: 'Activate a workflow to start receiving trigger events',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Activate Workflow',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.activateWorkflow(args.workflowId);\n\n        return (\n          `\u2705 Successfully activated workflow \"${workflow.name}\" (ID: ${workflow.id})\\n` +\n          `Status: \uD83D\uDFE2 Active`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to activate workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to activate workflow with unknown error');\n      }\n    },\n  });\n\n  // Deactivate workflow tool\n  server.addTool({\n    name: 'deactivate-workflow',\n    description: 'Deactivate a workflow to stop receiving trigger events',\n    parameters: WorkflowIdSchema,\n    annotations: {\n      title: 'Deactivate Workflow',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.deactivateWorkflow(args.workflowId);\n\n        return (\n          `\u2705 Successfully deactivated workflow \"${workflow.name}\" (ID: ${workflow.id})\\n` +\n          `Status: \uD83D\uDD34 Inactive`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to deactivate workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to deactivate workflow with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "04c8b532cc273e5d1cd28ea3b241450d6637face"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2eycqhrh36 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2eycqhrh36();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Zod schemas for validation
const WorkflowIdSchema =
/* istanbul ignore next */
(cov_2eycqhrh36().s[0]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required')
}));
const ListWorkflowsSchema =
/* istanbul ignore next */
(cov_2eycqhrh36().s[1]++, z.object({
  limit: z.number().min(1).max(100).optional(),
  cursor: z.string().optional()
}));
const CreateWorkflowSchema =
/* istanbul ignore next */
(cov_2eycqhrh36().s[2]++, z.object({
  name: z.string().min(1, 'Workflow name is required'),
  nodes: z.array(z.record(z.unknown())).min(1, 'At least one node is required'),
  connections: z.record(z.unknown()),
  active: z.boolean().optional().default(false),
  settings: z.record(z.unknown()).optional(),
  tags: z.array(z.string()).optional()
}));
const UpdateWorkflowSchema =
/* istanbul ignore next */
(cov_2eycqhrh36().s[3]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  name: z.string().min(1).optional(),
  nodes: z.array(z.record(z.unknown())).optional(),
  connections: z.record(z.unknown()).optional(),
  active: z.boolean().optional(),
  settings: z.record(z.unknown()).optional(),
  tags: z.array(z.string()).optional()
}));
// Tool registration function
export function createWorkflowTools(getClient, server) {
  /* istanbul ignore next */
  cov_2eycqhrh36().f[0]++;
  cov_2eycqhrh36().s[4]++;
  // List workflows tool
  server.addTool({
    name: 'list-workflows',
    description: 'List all workflows in the n8n instance with pagination support',
    parameters: ListWorkflowsSchema,
    annotations: {
      title: 'List n8n Workflows',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[5]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[6]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[0][0]++;
        cov_2eycqhrh36().s[7]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[0][1]++;
      }
      cov_2eycqhrh36().s[8]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[9]++, {});
        /* istanbul ignore next */
        cov_2eycqhrh36().s[10]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[1][0]++;
          cov_2eycqhrh36().s[11]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[1][1]++;
        }
        cov_2eycqhrh36().s[12]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[2][0]++;
          cov_2eycqhrh36().s[13]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[14]++, await client.getWorkflows(options));
        /* istanbul ignore next */
        cov_2eycqhrh36().s[15]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[3][0]++;
          cov_2eycqhrh36().s[16]++;
          return 'No workflows found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[17]++, `Found ${response.data.length} workflow(s):\n\n`);
        /* istanbul ignore next */
        cov_2eycqhrh36().s[18]++;
        response.data.forEach((workflow, index) => {
          /* istanbul ignore next */
          cov_2eycqhrh36().f[2]++;
          cov_2eycqhrh36().s[19]++;
          result += `${index + 1}. **${workflow.name}**\n`;
          /* istanbul ignore next */
          cov_2eycqhrh36().s[20]++;
          result += `   - ID: ${workflow.id}\n`;
          /* istanbul ignore next */
          cov_2eycqhrh36().s[21]++;
          result += `   - Status: ${workflow.active ?
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[4][0]++, '🟢 Active') :
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[4][1]++, '🔴 Inactive')}\n`;
          /* istanbul ignore next */
          cov_2eycqhrh36().s[22]++;
          result += `   - Nodes: ${
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[5][0]++, workflow.nodes?.length) ||
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[5][1]++, 0)}\n`;
          /* istanbul ignore next */
          cov_2eycqhrh36().s[23]++;
          if (
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[7][0]++, workflow.tags) &&
          /* istanbul ignore next */
          (cov_2eycqhrh36().b[7][1]++, workflow.tags.length > 0)) {
            /* istanbul ignore next */
            cov_2eycqhrh36().b[6][0]++;
            cov_2eycqhrh36().s[24]++;
            result += `   - Tags: ${workflow.tags.join(', ')}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_2eycqhrh36().b[6][1]++;
          }
          cov_2eycqhrh36().s[25]++;
          if (workflow.createdAt) {
            /* istanbul ignore next */
            cov_2eycqhrh36().b[8][0]++;
            cov_2eycqhrh36().s[26]++;
            result += `   - Created: ${new Date(workflow.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_2eycqhrh36().b[8][1]++;
          }
          cov_2eycqhrh36().s[27]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_2eycqhrh36().s[28]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[9][0]++;
          cov_2eycqhrh36().s[29]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[9][1]++;
        }
        cov_2eycqhrh36().s[30]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[31]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[10][0]++;
          cov_2eycqhrh36().s[32]++;
          throw new UserError(`Failed to list workflows: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[10][1]++;
        }
        cov_2eycqhrh36().s[33]++;
        throw new UserError('Failed to list workflows with unknown error');
      }
    }
  });
  // Get workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[34]++;
  server.addTool({
    name: 'get-workflow',
    description: 'Get detailed information about a specific workflow by ID',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Get Workflow Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[35]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[36]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[11][0]++;
        cov_2eycqhrh36().s[37]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[11][1]++;
      }
      cov_2eycqhrh36().s[38]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[39]++, await client.getWorkflow(args.workflowId));
        let result =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[40]++, `# Workflow: ${workflow.name}\n\n`);
        /* istanbul ignore next */
        cov_2eycqhrh36().s[41]++;
        result += `**ID:** ${workflow.id}\n`;
        /* istanbul ignore next */
        cov_2eycqhrh36().s[42]++;
        result += `**Status:** ${workflow.active ?
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[12][0]++, '🟢 Active') :
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[12][1]++, '🔴 Inactive')}\n`;
        /* istanbul ignore next */
        cov_2eycqhrh36().s[43]++;
        result += `**Nodes:** ${
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[13][0]++, workflow.nodes?.length) ||
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[13][1]++, 0)}\n`;
        /* istanbul ignore next */
        cov_2eycqhrh36().s[44]++;
        if (
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[15][0]++, workflow.tags) &&
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[15][1]++, workflow.tags.length > 0)) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[14][0]++;
          cov_2eycqhrh36().s[45]++;
          result += `**Tags:** ${workflow.tags.join(', ')}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[14][1]++;
        }
        cov_2eycqhrh36().s[46]++;
        if (workflow.createdAt) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[16][0]++;
          cov_2eycqhrh36().s[47]++;
          result += `**Created:** ${new Date(workflow.createdAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[16][1]++;
        }
        cov_2eycqhrh36().s[48]++;
        if (workflow.updatedAt) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[17][0]++;
          cov_2eycqhrh36().s[49]++;
          result += `**Updated:** ${new Date(workflow.updatedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[17][1]++;
        }
        // List nodes
        cov_2eycqhrh36().s[50]++;
        if (
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[19][0]++, workflow.nodes) &&
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[19][1]++, workflow.nodes.length > 0)) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[18][0]++;
          cov_2eycqhrh36().s[51]++;
          result += '\n## Nodes:\n';
          /* istanbul ignore next */
          cov_2eycqhrh36().s[52]++;
          workflow.nodes.forEach((node, index) => {
            /* istanbul ignore next */
            cov_2eycqhrh36().f[4]++;
            cov_2eycqhrh36().s[53]++;
            result += `${index + 1}. **${
            /* istanbul ignore next */
            (cov_2eycqhrh36().b[20][0]++, node.name) ||
            /* istanbul ignore next */
            (cov_2eycqhrh36().b[20][1]++, 'Unnamed Node')}** (${
            /* istanbul ignore next */
            (cov_2eycqhrh36().b[21][0]++, node.type) ||
            /* istanbul ignore next */
            (cov_2eycqhrh36().b[21][1]++, 'Unknown Type')})\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[18][1]++;
        }
        cov_2eycqhrh36().s[54]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[55]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[22][0]++;
          cov_2eycqhrh36().s[56]++;
          throw new UserError(`Failed to get workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[22][1]++;
        }
        cov_2eycqhrh36().s[57]++;
        throw new UserError('Failed to get workflow with unknown error');
      }
    }
  });
  // Create workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[58]++;
  server.addTool({
    name: 'create-workflow',
    description: 'Create a new workflow in n8n with nodes and connections',
    parameters: CreateWorkflowSchema,
    annotations: {
      title: 'Create New Workflow',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[59]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[60]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[23][0]++;
        cov_2eycqhrh36().s[61]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[23][1]++;
      }
      cov_2eycqhrh36().s[62]++;
      try {
        const workflowData =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[63]++, {
          name: args.name,
          nodes: args.nodes,
          connections: args.connections,
          active: args.active,
          settings: args.settings,
          tags: args.tags
        });
        const workflow =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[64]++, await client.createWorkflow(workflowData));
        /* istanbul ignore next */
        cov_2eycqhrh36().s[65]++;
        return `✅ Successfully created workflow "${workflow.name}" with ID: ${workflow.id}\n` + `Status: ${workflow.active ?
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[24][0]++, '🟢 Active') :
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[24][1]++, '🔴 Inactive')}\n` + `Nodes: ${
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[25][0]++, workflow.nodes?.length) ||
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[25][1]++, 0)}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[66]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[26][0]++;
          cov_2eycqhrh36().s[67]++;
          throw new UserError(`Failed to create workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[26][1]++;
        }
        cov_2eycqhrh36().s[68]++;
        throw new UserError('Failed to create workflow with unknown error');
      }
    }
  });
  // Update workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[69]++;
  server.addTool({
    name: 'update-workflow',
    description: "Update an existing workflow's properties, nodes, or connections",
    parameters: UpdateWorkflowSchema,
    annotations: {
      title: 'Update Workflow',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[6]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[70]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[71]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[27][0]++;
        cov_2eycqhrh36().s[72]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[27][1]++;
      }
      cov_2eycqhrh36().s[73]++;
      try {
        const {
          workflowId,
          ...updateData
        } =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[74]++, args);
        const workflowData =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[75]++, updateData);
        const workflow =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[76]++, await client.updateWorkflow(workflowId, workflowData));
        /* istanbul ignore next */
        cov_2eycqhrh36().s[77]++;
        return `✅ Successfully updated workflow "${workflow.name}" (ID: ${workflow.id})\n` + `Status: ${workflow.active ?
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[28][0]++, '🟢 Active') :
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[28][1]++, '🔴 Inactive')}\n` + `Nodes: ${
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[29][0]++, workflow.nodes?.length) ||
        /* istanbul ignore next */
        (cov_2eycqhrh36().b[29][1]++, 0)}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[78]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[30][0]++;
          cov_2eycqhrh36().s[79]++;
          throw new UserError(`Failed to update workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[30][1]++;
        }
        cov_2eycqhrh36().s[80]++;
        throw new UserError('Failed to update workflow with unknown error');
      }
    }
  });
  // Delete workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[81]++;
  server.addTool({
    name: 'delete-workflow',
    description: 'Delete a workflow from n8n permanently',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Delete Workflow',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[7]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[82]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[83]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[31][0]++;
        cov_2eycqhrh36().s[84]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[31][1]++;
      }
      cov_2eycqhrh36().s[85]++;
      try {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[86]++;
        await client.deleteWorkflow(args.workflowId);
        /* istanbul ignore next */
        cov_2eycqhrh36().s[87]++;
        return `✅ Successfully deleted workflow with ID: ${args.workflowId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[88]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[32][0]++;
          cov_2eycqhrh36().s[89]++;
          throw new UserError(`Failed to delete workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[32][1]++;
        }
        cov_2eycqhrh36().s[90]++;
        throw new UserError('Failed to delete workflow with unknown error');
      }
    }
  });
  // Activate workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[91]++;
  server.addTool({
    name: 'activate-workflow',
    description: 'Activate a workflow to start receiving trigger events',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Activate Workflow',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[92]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[93]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[33][0]++;
        cov_2eycqhrh36().s[94]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[33][1]++;
      }
      cov_2eycqhrh36().s[95]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[96]++, await client.activateWorkflow(args.workflowId));
        /* istanbul ignore next */
        cov_2eycqhrh36().s[97]++;
        return `✅ Successfully activated workflow "${workflow.name}" (ID: ${workflow.id})\n` + `Status: 🟢 Active`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[98]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[34][0]++;
          cov_2eycqhrh36().s[99]++;
          throw new UserError(`Failed to activate workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[34][1]++;
        }
        cov_2eycqhrh36().s[100]++;
        throw new UserError('Failed to activate workflow with unknown error');
      }
    }
  });
  // Deactivate workflow tool
  /* istanbul ignore next */
  cov_2eycqhrh36().s[101]++;
  server.addTool({
    name: 'deactivate-workflow',
    description: 'Deactivate a workflow to stop receiving trigger events',
    parameters: WorkflowIdSchema,
    annotations: {
      title: 'Deactivate Workflow',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2eycqhrh36().f[9]++;
      const client =
      /* istanbul ignore next */
      (cov_2eycqhrh36().s[102]++, getClient());
      /* istanbul ignore next */
      cov_2eycqhrh36().s[103]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2eycqhrh36().b[35][0]++;
        cov_2eycqhrh36().s[104]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2eycqhrh36().b[35][1]++;
      }
      cov_2eycqhrh36().s[105]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2eycqhrh36().s[106]++, await client.deactivateWorkflow(args.workflowId));
        /* istanbul ignore next */
        cov_2eycqhrh36().s[107]++;
        return `✅ Successfully deactivated workflow "${workflow.name}" (ID: ${workflow.id})\n` + `Status: 🔴 Inactive`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2eycqhrh36().s[108]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2eycqhrh36().b[36][0]++;
          cov_2eycqhrh36().s[109]++;
          throw new UserError(`Failed to deactivate workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2eycqhrh36().b[36][1]++;
        }
        cov_2eycqhrh36().s[110]++;
        throw new UserError('Failed to deactivate workflow with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,