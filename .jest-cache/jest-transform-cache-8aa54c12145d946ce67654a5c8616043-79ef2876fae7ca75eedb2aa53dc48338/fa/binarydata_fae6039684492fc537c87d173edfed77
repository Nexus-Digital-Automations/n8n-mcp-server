fb3e13a5f15b35932cfcfcd20642108b
"use strict";

/* istanbul ignore next */
function cov_1kbgesm3jb() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts";
  var hash = "ae7eef253808d06faf18a1ea00ac7695518d91b8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 54
        }
      },
      "37": {
        start: {
          line: 37,
          column: 14
        },
        end: {
          line: 37,
          column: 28
        }
      },
      "38": {
        start: {
          line: 38,
          column: 18
        },
        end: {
          line: 38,
          column: 36
        }
      },
      "39": {
        start: {
          line: 39,
          column: 11
        },
        end: {
          line: 39,
          column: 47
        }
      },
      "40": {
        start: {
          line: 40,
          column: 13
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "41": {
        start: {
          line: 41,
          column: 30
        },
        end: {
          line: 41,
          column: 70
        }
      },
      "42": {
        start: {
          line: 42,
          column: 26
        },
        end: {
          line: 42,
          column: 61
        }
      },
      "43": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 51,
          column: 2
        }
      },
      "44": {
        start: {
          line: 52,
          column: 33
        },
        end: {
          line: 58,
          column: 2
        }
      },
      "45": {
        start: {
          line: 59,
          column: 31
        },
        end: {
          line: 66,
          column: 2
        }
      },
      "46": {
        start: {
          line: 67,
          column: 38
        },
        end: {
          line: 74,
          column: 2
        }
      },
      "47": {
        start: {
          line: 75,
          column: 35
        },
        end: {
          line: 81,
          column: 2
        }
      },
      "48": {
        start: {
          line: 82,
          column: 29
        },
        end: {
          line: 88,
          column: 2
        }
      },
      "49": {
        start: {
          line: 89,
          column: 31
        },
        end: {
          line: 91,
          column: 2
        }
      },
      "50": {
        start: {
          line: 92,
          column: 32
        },
        end: {
          line: 94,
          column: 2
        }
      },
      "51": {
        start: {
          line: 95,
          column: 30
        },
        end: {
          line: 102,
          column: 2
        }
      },
      "52": {
        start: {
          line: 104,
          column: 23
        },
        end: {
          line: 104,
          column: 27
        }
      },
      "53": {
        start: {
          line: 105,
          column: 18
        },
        end: {
          line: 105,
          column: 22
        }
      },
      "54": {
        start: {
          line: 107,
          column: 28
        },
        end: {
          line: 119,
          column: 1
        }
      },
      "55": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "56": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 34
        }
      },
      "57": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 112,
          column: 9
        }
      },
      "58": {
        start: {
          line: 111,
          column: 12
        },
        end: {
          line: 111,
          column: 70
        }
      },
      "59": {
        start: {
          line: 114,
          column: 24
        },
        end: {
          line: 114,
          column: 93
        }
      },
      "60": {
        start: {
          line: 115,
          column: 23
        },
        end: {
          line: 115,
          column: 69
        }
      },
      "61": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 95
        }
      },
      "62": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 28
        }
      },
      "63": {
        start: {
          line: 121,
          column: 23
        },
        end: {
          line: 142,
          column: 1
        }
      },
      "64": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "65": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 139,
          column: 11
        }
      },
      "66": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 141,
          column: 23
        }
      },
      "67": {
        start: {
          line: 144,
          column: 33
        },
        end: {
          line: 163,
          column: 1
        }
      },
      "68": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 52
        }
      },
      "69": {
        start: {
          line: 146,
          column: 22
        },
        end: {
          line: 161,
          column: 5
        }
      },
      "70": {
        start: {
          line: 162,
          column: 4
        },
        end: {
          line: 162,
          column: 56
        }
      },
      "71": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 214,
          column: 7
        }
      },
      "72": {
        start: {
          line: 172,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "73": {
        start: {
          line: 173,
          column: 37
        },
        end: {
          line: 173,
          column: 67
        }
      },
      "74": {
        start: {
          line: 174,
          column: 36
        },
        end: {
          line: 174,
          column: 52
        }
      },
      "75": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "76": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "77": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 86
        }
      },
      "78": {
        start: {
          line: 183,
          column: 33
        },
        end: {
          line: 183,
          column: 65
        }
      },
      "79": {
        start: {
          line: 184,
          column: 33
        },
        end: {
          line: 184,
          column: 61
        }
      },
      "80": {
        start: {
          line: 185,
          column: 33
        },
        end: {
          line: 185,
          column: 92
        }
      },
      "81": {
        start: {
          line: 187,
          column: 35
        },
        end: {
          line: 187,
          column: 102
        }
      },
      "82": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 190,
          column: 17
        }
      },
      "83": {
        start: {
          line: 189,
          column: 20
        },
        end: {
          line: 189,
          column: 109
        }
      },
      "84": {
        start: {
          line: 192,
          column: 38
        },
        end: {
          line: 199,
          column: 17
        }
      },
      "85": {
        start: {
          line: 200,
          column: 31
        },
        end: {
          line: 200,
          column: 81
        }
      },
      "86": {
        start: {
          line: 201,
          column: 16
        },
        end: {
          line: 205,
          column: 18
        }
      },
      "87": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "88": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 32
        }
      },
      "89": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 139
        }
      },
      "90": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 253,
          column: 7
        }
      },
      "91": {
        start: {
          line: 221,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "92": {
        start: {
          line: 222,
          column: 37
        },
        end: {
          line: 222,
          column: 67
        }
      },
      "93": {
        start: {
          line: 224,
          column: 40
        },
        end: {
          line: 229,
          column: 17
        }
      },
      "94": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 85
        }
      },
      "95": {
        start: {
          line: 232,
          column: 33
        },
        end: {
          line: 232,
          column: 67
        }
      },
      "96": {
        start: {
          line: 234,
          column: 34
        },
        end: {
          line: 234,
          column: 63
        }
      },
      "97": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 63
        }
      },
      "98": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 62
        }
      },
      "99": {
        start: {
          line: 237,
          column: 16
        },
        end: {
          line: 244,
          column: 18
        }
      },
      "100": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "101": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 32
        }
      },
      "102": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 141
        }
      },
      "103": {
        start: {
          line: 255,
          column: 4
        },
        end: {
          line: 291,
          column: 7
        }
      },
      "104": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 289,
          column: 13
        }
      },
      "105": {
        start: {
          line: 261,
          column: 37
        },
        end: {
          line: 261,
          column: 67
        }
      },
      "106": {
        start: {
          line: 262,
          column: 36
        },
        end: {
          line: 262,
          column: 52
        }
      },
      "107": {
        start: {
          line: 264,
          column: 33
        },
        end: {
          line: 264,
          column: 59
        }
      },
      "108": {
        start: {
          line: 265,
          column: 35
        },
        end: {
          line: 265,
          column: 105
        }
      },
      "109": {
        start: {
          line: 266,
          column: 16
        },
        end: {
          line: 268,
          column: 17
        }
      },
      "110": {
        start: {
          line: 267,
          column: 20
        },
        end: {
          line: 267,
          column: 109
        }
      },
      "111": {
        start: {
          line: 269,
          column: 38
        },
        end: {
          line: 276,
          column: 17
        }
      },
      "112": {
        start: {
          line: 277,
          column: 31
        },
        end: {
          line: 277,
          column: 81
        }
      },
      "113": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 282,
          column: 18
        }
      },
      "114": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 287,
          column: 17
        }
      },
      "115": {
        start: {
          line: 286,
          column: 20
        },
        end: {
          line: 286,
          column: 32
        }
      },
      "116": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 288,
          column: 139
        }
      },
      "117": {
        start: {
          line: 293,
          column: 4
        },
        end: {
          line: 322,
          column: 7
        }
      },
      "118": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "119": {
        start: {
          line: 299,
          column: 37
        },
        end: {
          line: 299,
          column: 67
        }
      },
      "120": {
        start: {
          line: 301,
          column: 33
        },
        end: {
          line: 301,
          column: 158
        }
      },
      "121": {
        start: {
          line: 303,
          column: 34
        },
        end: {
          line: 303,
          column: 63
        }
      },
      "122": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 63
        }
      },
      "123": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 305,
          column: 62
        }
      },
      "124": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 313,
          column: 18
        }
      },
      "125": {
        start: {
          line: 316,
          column: 16
        },
        end: {
          line: 318,
          column: 17
        }
      },
      "126": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 32
        }
      },
      "127": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 151
        }
      },
      "128": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 365,
          column: 7
        }
      },
      "129": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 363,
          column: 13
        }
      },
      "130": {
        start: {
          line: 330,
          column: 37
        },
        end: {
          line: 330,
          column: 67
        }
      },
      "131": {
        start: {
          line: 331,
          column: 36
        },
        end: {
          line: 331,
          column: 52
        }
      },
      "132": {
        start: {
          line: 333,
          column: 16
        },
        end: {
          line: 338,
          column: 17
        }
      },
      "133": {
        start: {
          line: 334,
          column: 20
        },
        end: {
          line: 334,
          column: 51
        }
      },
      "134": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 337,
          column: 86
        }
      },
      "135": {
        start: {
          line: 340,
          column: 33
        },
        end: {
          line: 340,
          column: 65
        }
      },
      "136": {
        start: {
          line: 341,
          column: 33
        },
        end: {
          line: 341,
          column: 61
        }
      },
      "137": {
        start: {
          line: 342,
          column: 33
        },
        end: {
          line: 342,
          column: 92
        }
      },
      "138": {
        start: {
          line: 344,
          column: 35
        },
        end: {
          line: 344,
          column: 102
        }
      },
      "139": {
        start: {
          line: 345,
          column: 16
        },
        end: {
          line: 347,
          column: 17
        }
      },
      "140": {
        start: {
          line: 346,
          column: 20
        },
        end: {
          line: 346,
          column: 109
        }
      },
      "141": {
        start: {
          line: 349,
          column: 31
        },
        end: {
          line: 349,
          column: 153
        }
      },
      "142": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 356,
          column: 18
        }
      },
      "143": {
        start: {
          line: 359,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "144": {
        start: {
          line: 360,
          column: 20
        },
        end: {
          line: 360,
          column: 32
        }
      },
      "145": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 362,
          column: 148
        }
      },
      "146": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 403,
          column: 7
        }
      },
      "147": {
        start: {
          line: 372,
          column: 12
        },
        end: {
          line: 401,
          column: 13
        }
      },
      "148": {
        start: {
          line: 373,
          column: 37
        },
        end: {
          line: 373,
          column: 67
        }
      },
      "149": {
        start: {
          line: 374,
          column: 30
        },
        end: {
          line: 380,
          column: 18
        }
      },
      "150": {
        start: {
          line: 381,
          column: 16
        },
        end: {
          line: 394,
          column: 18
        }
      },
      "151": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 399,
          column: 17
        }
      },
      "152": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 398,
          column: 32
        }
      },
      "153": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 137
        }
      },
      "154": {
        start: {
          line: 405,
          column: 4
        },
        end: {
          line: 426,
          column: 7
        }
      },
      "155": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 424,
          column: 13
        }
      },
      "156": {
        start: {
          line: 411,
          column: 37
        },
        end: {
          line: 411,
          column: 67
        }
      },
      "157": {
        start: {
          line: 412,
          column: 31
        },
        end: {
          line: 412,
          column: 79
        }
      },
      "158": {
        start: {
          line: 413,
          column: 16
        },
        end: {
          line: 417,
          column: 18
        }
      },
      "159": {
        start: {
          line: 420,
          column: 16
        },
        end: {
          line: 422,
          column: 17
        }
      },
      "160": {
        start: {
          line: 421,
          column: 20
        },
        end: {
          line: 421,
          column: 32
        }
      },
      "161": {
        start: {
          line: 423,
          column: 16
        },
        end: {
          line: 423,
          column: 139
        }
      },
      "162": {
        start: {
          line: 428,
          column: 4
        },
        end: {
          line: 448,
          column: 7
        }
      },
      "163": {
        start: {
          line: 433,
          column: 12
        },
        end: {
          line: 446,
          column: 13
        }
      },
      "164": {
        start: {
          line: 434,
          column: 37
        },
        end: {
          line: 434,
          column: 67
        }
      },
      "165": {
        start: {
          line: 435,
          column: 33
        },
        end: {
          line: 435,
          column: 86
        }
      },
      "166": {
        start: {
          line: 436,
          column: 16
        },
        end: {
          line: 439,
          column: 18
        }
      },
      "167": {
        start: {
          line: 442,
          column: 16
        },
        end: {
          line: 444,
          column: 17
        }
      },
      "168": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 32
        }
      },
      "169": {
        start: {
          line: 445,
          column: 16
        },
        end: {
          line: 445,
          column: 140
        }
      },
      "170": {
        start: {
          line: 450,
          column: 4
        },
        end: {
          line: 502,
          column: 7
        }
      },
      "171": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 500,
          column: 13
        }
      },
      "172": {
        start: {
          line: 456,
          column: 37
        },
        end: {
          line: 456,
          column: 67
        }
      },
      "173": {
        start: {
          line: 457,
          column: 36
        },
        end: {
          line: 457,
          column: 52
        }
      },
      "174": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 464,
          column: 17
        }
      },
      "175": {
        start: {
          line: 460,
          column: 20
        },
        end: {
          line: 460,
          column: 51
        }
      },
      "176": {
        start: {
          line: 463,
          column: 20
        },
        end: {
          line: 463,
          column: 86
        }
      },
      "177": {
        start: {
          line: 466,
          column: 33
        },
        end: {
          line: 466,
          column: 65
        }
      },
      "178": {
        start: {
          line: 467,
          column: 33
        },
        end: {
          line: 467,
          column: 61
        }
      },
      "179": {
        start: {
          line: 468,
          column: 33
        },
        end: {
          line: 468,
          column: 67
        }
      },
      "180": {
        start: {
          line: 470,
          column: 35
        },
        end: {
          line: 470,
          column: 102
        }
      },
      "181": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 473,
          column: 17
        }
      },
      "182": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 109
        }
      },
      "183": {
        start: {
          line: 474,
          column: 38
        },
        end: {
          line: 474,
          column: 40
        }
      },
      "184": {
        start: {
          line: 476,
          column: 31
        },
        end: {
          line: 484,
          column: 18
        }
      },
      "185": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 482,
          column: 62
        }
      },
      "186": {
        start: {
          line: 485,
          column: 16
        },
        end: {
          line: 493,
          column: 18
        }
      },
      "187": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 498,
          column: 17
        }
      },
      "188": {
        start: {
          line: 497,
          column: 20
        },
        end: {
          line: 497,
          column: 32
        }
      },
      "189": {
        start: {
          line: 499,
          column: 16
        },
        end: {
          line: 499,
          column: 138
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 107,
            column: 28
          },
          end: {
            line: 107,
            column: 29
          }
        },
        loc: {
          start: {
            line: 107,
            column: 43
          },
          end: {
            line: 119,
            column: 1
          }
        },
        line: 107
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 121,
            column: 23
          },
          end: {
            line: 121,
            column: 24
          }
        },
        loc: {
          start: {
            line: 121,
            column: 29
          },
          end: {
            line: 142,
            column: 1
          }
        },
        line: 121
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 144,
            column: 33
          },
          end: {
            line: 144,
            column: 34
          }
        },
        loc: {
          start: {
            line: 144,
            column: 47
          },
          end: {
            line: 163,
            column: 1
          }
        },
        line: 144
      },
      "12": {
        name: "createBinaryDataTools",
        decl: {
          start: {
            line: 165,
            column: 9
          },
          end: {
            line: 165,
            column: 30
          }
        },
        loc: {
          start: {
            line: 165,
            column: 50
          },
          end: {
            line: 503,
            column: 1
          }
        },
        line: 165
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 17
          },
          end: {
            line: 171,
            column: 18
          }
        },
        loc: {
          start: {
            line: 171,
            column: 33
          },
          end: {
            line: 213,
            column: 9
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 220,
            column: 17
          },
          end: {
            line: 220,
            column: 18
          }
        },
        loc: {
          start: {
            line: 220,
            column: 33
          },
          end: {
            line: 252,
            column: 9
          }
        },
        line: 220
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 259,
            column: 17
          },
          end: {
            line: 259,
            column: 18
          }
        },
        loc: {
          start: {
            line: 259,
            column: 33
          },
          end: {
            line: 290,
            column: 9
          }
        },
        line: 259
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 297,
            column: 17
          },
          end: {
            line: 297,
            column: 18
          }
        },
        loc: {
          start: {
            line: 297,
            column: 33
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 297
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 328,
            column: 17
          },
          end: {
            line: 328,
            column: 18
          }
        },
        loc: {
          start: {
            line: 328,
            column: 33
          },
          end: {
            line: 364,
            column: 9
          }
        },
        line: 328
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 371,
            column: 17
          },
          end: {
            line: 371,
            column: 18
          }
        },
        loc: {
          start: {
            line: 371,
            column: 33
          },
          end: {
            line: 402,
            column: 9
          }
        },
        line: 371
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 409,
            column: 17
          },
          end: {
            line: 409,
            column: 18
          }
        },
        loc: {
          start: {
            line: 409,
            column: 33
          },
          end: {
            line: 425,
            column: 9
          }
        },
        line: 409
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 432,
            column: 17
          },
          end: {
            line: 432,
            column: 18
          }
        },
        loc: {
          start: {
            line: 432,
            column: 33
          },
          end: {
            line: 447,
            column: 9
          }
        },
        line: 432
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 454,
            column: 17
          },
          end: {
            line: 454,
            column: 18
          }
        },
        loc: {
          start: {
            line: 454,
            column: 33
          },
          end: {
            line: 501,
            column: 9
          }
        },
        line: 454
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 481,
            column: 52
          },
          end: {
            line: 481,
            column: 53
          }
        },
        loc: {
          start: {
            line: 481,
            column: 66
          },
          end: {
            line: 483,
            column: 21
          }
        },
        line: 481
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "18": {
        loc: {
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 8
          },
          end: {
            line: 112,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "19": {
        loc: {
          start: {
            line: 114,
            column: 24
          },
          end: {
            line: 114,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 114,
            column: 24
          },
          end: {
            line: 114,
            column: 38
          }
        }, {
          start: {
            line: 114,
            column: 42
          },
          end: {
            line: 114,
            column: 66
          }
        }, {
          start: {
            line: 114,
            column: 70
          },
          end: {
            line: 114,
            column: 93
          }
        }],
        line: 114
      },
      "20": {
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 36
          }
        }, {
          start: {
            line: 115,
            column: 40
          },
          end: {
            line: 115,
            column: 63
          }
        }, {
          start: {
            line: 115,
            column: 67
          },
          end: {
            line: 115,
            column: 69
          }
        }],
        line: 115
      },
      "21": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "22": {
        loc: {
          start: {
            line: 124,
            column: 27
          },
          end: {
            line: 124,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 124,
            column: 27
          },
          end: {
            line: 124,
            column: 52
          }
        }, {
          start: {
            line: 124,
            column: 56
          },
          end: {
            line: 124,
            column: 70
          }
        }],
        line: 124
      },
      "23": {
        loc: {
          start: {
            line: 125,
            column: 34
          },
          end: {
            line: 125,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 125,
            column: 34
          },
          end: {
            line: 125,
            column: 59
          }
        }, {
          start: {
            line: 125,
            column: 63
          },
          end: {
            line: 125,
            column: 74
          }
        }],
        line: 125
      },
      "24": {
        loc: {
          start: {
            line: 126,
            column: 30
          },
          end: {
            line: 138,
            column: 13
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 30
          },
          end: {
            line: 126,
            column: 72
          }
        }, {
          start: {
            line: 126,
            column: 76
          },
          end: {
            line: 138,
            column: 13
          }
        }],
        line: 126
      },
      "25": {
        loc: {
          start: {
            line: 162,
            column: 11
          },
          end: {
            line: 162,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 162,
            column: 11
          },
          end: {
            line: 162,
            column: 25
          }
        }, {
          start: {
            line: 162,
            column: 29
          },
          end: {
            line: 162,
            column: 55
          }
        }],
        line: 162
      },
      "26": {
        loc: {
          start: {
            line: 185,
            column: 33
          },
          end: {
            line: 185,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 33
          },
          end: {
            line: 185,
            column: 54
          }
        }, {
          start: {
            line: 185,
            column: 58
          },
          end: {
            line: 185,
            column: 92
          }
        }],
        line: 185
      },
      "27": {
        loc: {
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 16
          },
          end: {
            line: 190,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "28": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "29": {
        loc: {
          start: {
            line: 211,
            column: 79
          },
          end: {
            line: 211,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 104
          },
          end: {
            line: 211,
            column: 117
          }
        }, {
          start: {
            line: 211,
            column: 120
          },
          end: {
            line: 211,
            column: 135
          }
        }],
        line: 211
      },
      "30": {
        loc: {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      },
      "31": {
        loc: {
          start: {
            line: 250,
            column: 81
          },
          end: {
            line: 250,
            column: 137
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 106
          },
          end: {
            line: 250,
            column: 119
          }
        }, {
          start: {
            line: 250,
            column: 122
          },
          end: {
            line: 250,
            column: 137
          }
        }],
        line: 250
      },
      "32": {
        loc: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 268,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "33": {
        loc: {
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 16
          },
          end: {
            line: 287,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "34": {
        loc: {
          start: {
            line: 288,
            column: 79
          },
          end: {
            line: 288,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 104
          },
          end: {
            line: 288,
            column: 117
          }
        }, {
          start: {
            line: 288,
            column: 120
          },
          end: {
            line: 288,
            column: 135
          }
        }],
        line: 288
      },
      "35": {
        loc: {
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 316,
            column: 16
          },
          end: {
            line: 318,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 316
      },
      "36": {
        loc: {
          start: {
            line: 319,
            column: 91
          },
          end: {
            line: 319,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 319,
            column: 116
          },
          end: {
            line: 319,
            column: 129
          }
        }, {
          start: {
            line: 319,
            column: 132
          },
          end: {
            line: 319,
            column: 147
          }
        }],
        line: 319
      },
      "37": {
        loc: {
          start: {
            line: 342,
            column: 33
          },
          end: {
            line: 342,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 33
          },
          end: {
            line: 342,
            column: 54
          }
        }, {
          start: {
            line: 342,
            column: 58
          },
          end: {
            line: 342,
            column: 92
          }
        }],
        line: 342
      },
      "38": {
        loc: {
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 16
          },
          end: {
            line: 347,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 345
      },
      "39": {
        loc: {
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 359,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 359
      },
      "40": {
        loc: {
          start: {
            line: 362,
            column: 88
          },
          end: {
            line: 362,
            column: 144
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 362,
            column: 113
          },
          end: {
            line: 362,
            column: 126
          }
        }, {
          start: {
            line: 362,
            column: 129
          },
          end: {
            line: 362,
            column: 144
          }
        }],
        line: 362
      },
      "41": {
        loc: {
          start: {
            line: 397,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 16
          },
          end: {
            line: 399,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "42": {
        loc: {
          start: {
            line: 400,
            column: 77
          },
          end: {
            line: 400,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 400,
            column: 102
          },
          end: {
            line: 400,
            column: 115
          }
        }, {
          start: {
            line: 400,
            column: 118
          },
          end: {
            line: 400,
            column: 133
          }
        }],
        line: 400
      },
      "43": {
        loc: {
          start: {
            line: 420,
            column: 16
          },
          end: {
            line: 422,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 16
          },
          end: {
            line: 422,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "44": {
        loc: {
          start: {
            line: 423,
            column: 79
          },
          end: {
            line: 423,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 423,
            column: 104
          },
          end: {
            line: 423,
            column: 117
          }
        }, {
          start: {
            line: 423,
            column: 120
          },
          end: {
            line: 423,
            column: 135
          }
        }],
        line: 423
      },
      "45": {
        loc: {
          start: {
            line: 442,
            column: 16
          },
          end: {
            line: 444,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 16
          },
          end: {
            line: 444,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "46": {
        loc: {
          start: {
            line: 445,
            column: 80
          },
          end: {
            line: 445,
            column: 136
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 445,
            column: 105
          },
          end: {
            line: 445,
            column: 118
          }
        }, {
          start: {
            line: 445,
            column: 121
          },
          end: {
            line: 445,
            column: 136
          }
        }],
        line: 445
      },
      "47": {
        loc: {
          start: {
            line: 471,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      },
      "48": {
        loc: {
          start: {
            line: 481,
            column: 32
          },
          end: {
            line: 483,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 481,
            column: 52
          },
          end: {
            line: 483,
            column: 21
          }
        }, {
          start: {
            line: 483,
            column: 24
          },
          end: {
            line: 483,
            column: 33
          }
        }],
        line: 481
      },
      "49": {
        loc: {
          start: {
            line: 491,
            column: 37
          },
          end: {
            line: 491,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 491,
            column: 57
          },
          end: {
            line: 491,
            column: 72
          }
        }, {
          start: {
            line: 491,
            column: 75
          },
          end: {
            line: 491,
            column: 84
          }
        }],
        line: 491
      },
      "50": {
        loc: {
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 496,
            column: 16
          },
          end: {
            line: 498,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 496
      },
      "51": {
        loc: {
          start: {
            line: 499,
            column: 78
          },
          end: {
            line: 499,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 499,
            column: 103
          },
          end: {
            line: 499,
            column: 116
          }
        }, {
          start: {
            line: 499,
            column: 119
          },
          end: {
            line: 499,
            column: 134
          }
        }],
        line: 499
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0, 0],
      "20": [0, 0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/binary-data.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { BinaryDataClient } from '../client/binaryDataClient.js';\nimport { FileHandlingUtils } from '../utils/fileHandling.js';\nimport {\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n  N8nBinaryDataResponse,\n} from '../types/fileTypes.js';\n\n// Zod schemas for validation\nconst UploadBinaryDataSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst DownloadBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst UploadFromBase64Schema = z.object({\n  data: z.string().min(1, 'Base64 data is required'),\n  fileName: z.string().min(1, 'File name is required'),\n  mimeType: z.string().min(1, 'MIME type is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n});\n\nconst DownloadExecutionBinarySchema = z.object({\n  executionId: z.string().min(1, 'Execution ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  outputPath: z.string().min(1, 'Output path is required'),\n  outputIndex: z.number().min(0).default(0),\n  itemIndex: z.number().min(0).default(0),\n  propertyName: z.string().default('data'),\n});\n\nconst UploadWorkflowBinarySchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  filePath: z.string().min(1, 'File path is required'),\n  propertyName: z.string().default('data'),\n  overrideMimeType: z.string().optional(),\n});\n\nconst ListBinaryDataSchema = z.object({\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  limit: z.number().min(1).max(100).default(20),\n  offset: z.number().min(0).default(0),\n});\n\nconst DeleteBinaryDataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst GetBinaryMetadataSchema = z.object({\n  fileId: z.string().min(1, 'File ID is required'),\n});\n\nconst UploadLargeFileSchema = z.object({\n  filePath: z.string().min(1, 'File path is required'),\n  workflowId: z.string().optional(),\n  executionId: z.string().optional(),\n  nodeId: z.string().optional(),\n  chunkSize: z.number().min(1024).max(10 * 1024 * 1024).default(1024 * 1024), // 1MB default, max 10MB\n  showProgress: z.boolean().default(true),\n});\n\n// Global instances\nlet binaryDataClient: BinaryDataClient | null = null;\nlet fileHandler: FileHandlingUtils | null = null;\n\n// Initialize binary data client\nconst getBinaryDataClient = (getClient: () => N8nClient | null): BinaryDataClient => {\n  if (!binaryDataClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n    // Extract baseUrl and apiKey from client (assuming they're accessible)\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n    \n    binaryDataClient = new BinaryDataClient(client, baseUrl, apiKey);\n  }\n  return binaryDataClient;\n};\n\n// Initialize file handler\nconst getFileHandler = () => {\n  if (!fileHandler) {\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: process.env.N8N_FILES_DIR || './data/files',\n      maxFileSize: parseInt(process.env.MAX_FILE_SIZE || '104857600'), // 100MB\n      allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n        'application/vnd.ms-excel',\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'application/msword',\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      ],\n    });\n  }\n  return fileHandler;\n};\n\n// Helper function to detect MIME type from file extension\nconst getMimeTypeFromExtension = (fileName: string): string => {\n  const ext = path.extname(fileName).toLowerCase();\n  const mimeTypes: Record<string, string> = {\n    '.jpg': 'image/jpeg',\n    '.jpeg': 'image/jpeg',\n    '.png': 'image/png',\n    '.gif': 'image/gif',\n    '.pdf': 'application/pdf',\n    '.txt': 'text/plain',\n    '.json': 'application/json',\n    '.zip': 'application/zip',\n    '.csv': 'text/csv',\n    '.xml': 'application/xml',\n    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    '.xls': 'application/vnd.ms-excel',\n    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    '.doc': 'application/msword',\n  };\n  return mimeTypes[ext] || 'application/octet-stream';\n};\n\n// Tool registration function\nexport function createBinaryDataTools(getClient: () => N8nClient | null, server: any) {\n  // Upload binary data from file system\n  server.addTool({\n    name: 'upload-binary-data',\n    description: 'Upload a file from the local file system to n8n as binary data',\n    parameters: UploadBinaryDataSchema,\n    handler: async (args: z.infer<typeof UploadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload file\n        const uploadRequest: FileUploadRequest = {\n          fileName,\n          mimeType,\n          data: fileData.toString('base64'),\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download binary data to file system\n  server.addTool({\n    name: 'download-binary-data',\n    description: 'Download binary data from n8n to the local file system',\n    parameters: DownloadBinaryDataSchema,\n    handler: async (args: z.infer<typeof DownloadBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download file\n        const downloadRequest: FileDownloadRequest = {\n          fileId: args.fileId,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.downloadBinaryData(downloadRequest);\n        \n        // Convert base64 to buffer and save\n        const fileData = Buffer.from(result.data, 'base64');\n        \n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileName: result.fileName,\n          mimeType: result.mimeType,\n          fileSize: result.fileSize,\n          message: `Successfully downloaded ${result.fileName} to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload binary data from base64 string\n  server.addTool({\n    name: 'upload-from-base64',\n    description: 'Upload binary data from a base64 encoded string',\n    parameters: UploadFromBase64Schema,\n    handler: async (args: z.infer<typeof UploadFromBase64Schema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Validate base64 data size\n        const dataSize = (args.data.length * 3) / 4; // Approximate decoded size\n        const validation = await fileHandler.validateFile(args.fileName, args.mimeType, dataSize);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        const uploadRequest: FileUploadRequest = {\n          fileName: args.fileName,\n          mimeType: args.mimeType,\n          data: args.data,\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n        };\n\n        const result = await binaryClient.uploadBinaryData(uploadRequest);\n\n        return {\n          success: true,\n          fileInfo: result,\n          message: `Successfully uploaded ${args.fileName} from base64 data`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload from base64: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Download execution binary data\n  server.addTool({\n    name: 'download-execution-binary',\n    description: 'Download binary data from a specific workflow execution output',\n    parameters: DownloadExecutionBinarySchema,\n    handler: async (args: z.infer<typeof DownloadExecutionBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        // Download binary data from execution\n        const fileData = await binaryClient.getExecutionBinaryData(\n          args.executionId,\n          args.nodeId,\n          args.outputIndex,\n          args.itemIndex,\n          args.propertyName\n        );\n\n        // Ensure output directory exists\n        const outputDir = path.dirname(args.outputPath);\n        await fs.mkdir(outputDir, { recursive: true });\n\n        await fs.writeFile(args.outputPath, fileData);\n\n        return {\n          success: true,\n          outputPath: args.outputPath,\n          fileSize: fileData.length,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          message: `Successfully downloaded execution binary data to ${args.outputPath}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to download execution binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload workflow binary data\n  server.addTool({\n    name: 'upload-workflow-binary',\n    description: 'Upload binary data for use in a specific workflow',\n    parameters: UploadWorkflowBinarySchema,\n    handler: async (args: z.infer<typeof UploadWorkflowBinarySchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = args.overrideMimeType || getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        // Upload workflow binary data\n        const result = await binaryClient.uploadWorkflowBinaryData(\n          args.workflowId,\n          args.nodeId,\n          fileData,\n          fileName,\n          mimeType,\n          args.propertyName\n        );\n\n        return {\n          success: true,\n          fileInfo: result,\n          workflowId: args.workflowId,\n          nodeId: args.nodeId,\n          message: `Successfully uploaded ${fileName} for workflow ${args.workflowId}`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload workflow binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // List binary data\n  server.addTool({\n    name: 'list-binary-data',\n    description: 'List binary data files stored in n8n',\n    parameters: ListBinaryDataSchema,\n    handler: async (args: z.infer<typeof ListBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const files = await binaryClient.listBinaryData({\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          limit: args.limit,\n          offset: args.offset,\n        });\n\n        return {\n          success: true,\n          files,\n          count: files.length,\n          filters: {\n            workflowId: args.workflowId,\n            executionId: args.executionId,\n            nodeId: args.nodeId,\n          },\n          pagination: {\n            limit: args.limit,\n            offset: args.offset,\n          },\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to list binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Delete binary data\n  server.addTool({\n    name: 'delete-binary-data',\n    description: 'Delete binary data from n8n storage',\n    parameters: DeleteBinaryDataSchema,\n    handler: async (args: z.infer<typeof DeleteBinaryDataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const result = await binaryClient.deleteBinaryData(args.fileId);\n\n        return {\n          success: result.success,\n          fileId: args.fileId,\n          message: result.message,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to delete binary data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Get binary data metadata\n  server.addTool({\n    name: 'get-binary-metadata',\n    description: 'Get metadata for binary data stored in n8n',\n    parameters: GetBinaryMetadataSchema,\n    handler: async (args: z.infer<typeof GetBinaryMetadataSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n\n        const metadata = await binaryClient.getBinaryDataMetadata(args.fileId);\n\n        return {\n          success: true,\n          metadata,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get binary metadata: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Upload large file with progress tracking\n  server.addTool({\n    name: 'upload-large-file',\n    description: 'Upload a large file with progress tracking and chunked transfer',\n    parameters: UploadLargeFileSchema,\n    handler: async (args: z.infer<typeof UploadLargeFileSchema>) => {\n      try {\n        const binaryClient = getBinaryDataClient(getClient);\n        const fileHandler = getFileHandler();\n\n        // Check if file exists\n        try {\n          await fs.access(args.filePath);\n        } catch {\n          throw new UserError(`File not found: ${args.filePath}`);\n        }\n\n        // Read file\n        const fileData = await fs.readFile(args.filePath);\n        const fileName = path.basename(args.filePath);\n        const mimeType = getMimeTypeFromExtension(fileName);\n\n        // Validate file\n        const validation = await fileHandler.validateFile(fileName, mimeType, fileData.length);\n        if (!validation.isValid) {\n          throw new UserError(`File validation failed: ${validation.errors.join(', ')}`);\n        }\n\n        let progressUpdates: FileTransferProgress[] = [];\n\n        // Upload with progress tracking\n        const result = await binaryClient.uploadLargeFile(fileData, fileName, mimeType, {\n          workflowId: args.workflowId,\n          executionId: args.executionId,\n          nodeId: args.nodeId,\n          chunkSize: args.chunkSize,\n          onProgress: args.showProgress ? (progress) => {\n            progressUpdates.push({ ...progress });\n          } : undefined,\n        });\n\n        return {\n          success: true,\n          fileInfo: result,\n          fileName,\n          fileSize: fileData.length,\n          chunkSize: args.chunkSize,\n          progressUpdates: args.showProgress ? progressUpdates : undefined,\n          message: `Successfully uploaded large file ${fileName} (${fileData.length} bytes)`,\n        };\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to upload large file: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ae7eef253808d06faf18a1ea00ac7695518d91b8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1kbgesm3jb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1kbgesm3jb();
var __createBinding =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[0]++,
/* istanbul ignore next */
(cov_1kbgesm3jb().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1kbgesm3jb().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1kbgesm3jb().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1kbgesm3jb().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[0]++;
  cov_1kbgesm3jb().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[2][0]++;
    cov_1kbgesm3jb().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1kbgesm3jb().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[5][1]++,
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[3][0]++;
    cov_1kbgesm3jb().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1kbgesm3jb().f[1]++;
        cov_1kbgesm3jb().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[3][1]++;
  }
  cov_1kbgesm3jb().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1kbgesm3jb().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[2]++;
  cov_1kbgesm3jb().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[7][0]++;
    cov_1kbgesm3jb().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[7][1]++;
  }
  cov_1kbgesm3jb().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[11]++,
/* istanbul ignore next */
(cov_1kbgesm3jb().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1kbgesm3jb().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1kbgesm3jb().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1kbgesm3jb().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[3]++;
  cov_1kbgesm3jb().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1kbgesm3jb().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[4]++;
  cov_1kbgesm3jb().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[14]++,
/* istanbul ignore next */
(cov_1kbgesm3jb().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1kbgesm3jb().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1kbgesm3jb().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[5]++;
  cov_1kbgesm3jb().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().f[6]++;
    cov_1kbgesm3jb().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1kbgesm3jb().s[17]++, []);
      /* istanbul ignore next */
      cov_1kbgesm3jb().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[12][0]++;
          cov_1kbgesm3jb().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1kbgesm3jb().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().f[8]++;
    cov_1kbgesm3jb().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1kbgesm3jb().b[13][0]++;
      cov_1kbgesm3jb().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1kbgesm3jb().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[26]++, {});
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1kbgesm3jb().b[15][0]++;
      cov_1kbgesm3jb().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[16][0]++;
          cov_1kbgesm3jb().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1kbgesm3jb().b[15][1]++;
    }
    cov_1kbgesm3jb().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1kbgesm3jb().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1kbgesm3jb().s[36]++;
exports.createBinaryDataTools = createBinaryDataTools;
const zod_1 =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[37]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[38]++, require("fastmcp"));
const fs =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[39]++, __importStar(require("fs/promises")));
const path =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[40]++, __importStar(require("path")));
const binaryDataClient_js_1 =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[41]++, require("../client/binaryDataClient.js"));
const fileHandling_js_1 =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[42]++, require("../utils/fileHandling.js"));
// Zod schemas for validation
const UploadBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[43]++, zod_1.z.object({
  filePath: zod_1.z.string().min(1, 'File path is required'),
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional(),
  nodeId: zod_1.z.string().optional(),
  propertyName: zod_1.z.string().default('data'),
  overrideMimeType: zod_1.z.string().optional()
}));
const DownloadBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[44]++, zod_1.z.object({
  fileId: zod_1.z.string().min(1, 'File ID is required'),
  outputPath: zod_1.z.string().min(1, 'Output path is required'),
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional(),
  nodeId: zod_1.z.string().optional()
}));
const UploadFromBase64Schema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[45]++, zod_1.z.object({
  data: zod_1.z.string().min(1, 'Base64 data is required'),
  fileName: zod_1.z.string().min(1, 'File name is required'),
  mimeType: zod_1.z.string().min(1, 'MIME type is required'),
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional(),
  nodeId: zod_1.z.string().optional()
}));
const DownloadExecutionBinarySchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[46]++, zod_1.z.object({
  executionId: zod_1.z.string().min(1, 'Execution ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  outputPath: zod_1.z.string().min(1, 'Output path is required'),
  outputIndex: zod_1.z.number().min(0).default(0),
  itemIndex: zod_1.z.number().min(0).default(0),
  propertyName: zod_1.z.string().default('data')
}));
const UploadWorkflowBinarySchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[47]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  filePath: zod_1.z.string().min(1, 'File path is required'),
  propertyName: zod_1.z.string().default('data'),
  overrideMimeType: zod_1.z.string().optional()
}));
const ListBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[48]++, zod_1.z.object({
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional(),
  nodeId: zod_1.z.string().optional(),
  limit: zod_1.z.number().min(1).max(100).default(20),
  offset: zod_1.z.number().min(0).default(0)
}));
const DeleteBinaryDataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[49]++, zod_1.z.object({
  fileId: zod_1.z.string().min(1, 'File ID is required')
}));
const GetBinaryMetadataSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[50]++, zod_1.z.object({
  fileId: zod_1.z.string().min(1, 'File ID is required')
}));
const UploadLargeFileSchema =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[51]++, zod_1.z.object({
  filePath: zod_1.z.string().min(1, 'File path is required'),
  workflowId: zod_1.z.string().optional(),
  executionId: zod_1.z.string().optional(),
  nodeId: zod_1.z.string().optional(),
  chunkSize: zod_1.z.number().min(1024).max(10 * 1024 * 1024).default(1024 * 1024),
  // 1MB default, max 10MB
  showProgress: zod_1.z.boolean().default(true)
}));
// Global instances
let binaryDataClient =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[52]++, null);
let fileHandler =
/* istanbul ignore next */
(cov_1kbgesm3jb().s[53]++, null);
// Initialize binary data client
/* istanbul ignore next */
cov_1kbgesm3jb().s[54]++;
const getBinaryDataClient = getClient => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[9]++;
  cov_1kbgesm3jb().s[55]++;
  if (!binaryDataClient) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[17][0]++;
    const client =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[56]++, getClient());
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[57]++;
    if (!client) {
      /* istanbul ignore next */
      cov_1kbgesm3jb().b[18][0]++;
      cov_1kbgesm3jb().s[58]++;
      throw new fastmcp_1.UserError('N8n client not available');
    } else
    /* istanbul ignore next */
    {
      cov_1kbgesm3jb().b[18][1]++;
    }
    // Extract baseUrl and apiKey from client (assuming they're accessible)
    const baseUrl =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[59]++,
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[19][0]++, client.baseUrl) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[19][1]++, process.env.N8N_BASE_URL) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[19][2]++, 'http://localhost:5678'));
    const apiKey =
    /* istanbul ignore next */
    (cov_1kbgesm3jb().s[60]++,
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[20][0]++, client.apiKey) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[20][1]++, process.env.N8N_API_KEY) ||
    /* istanbul ignore next */
    (cov_1kbgesm3jb().b[20][2]++, ''));
    /* istanbul ignore next */
    cov_1kbgesm3jb().s[61]++;
    binaryDataClient = new binaryDataClient_js_1.BinaryDataClient(client, baseUrl, apiKey);
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[17][1]++;
  }
  cov_1kbgesm3jb().s[62]++;
  return binaryDataClient;
};
// Initialize file handler
/* istanbul ignore next */
cov_1kbgesm3jb().s[63]++;
const getFileHandler = () => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[10]++;
  cov_1kbgesm3jb().s[64]++;
  if (!fileHandler) {
    /* istanbul ignore next */
    cov_1kbgesm3jb().b[21][0]++;
    cov_1kbgesm3jb().s[65]++;
    fileHandler = new fileHandling_js_1.FileHandlingUtils({
      baseDirectory:
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[22][0]++, process.env.N8N_FILES_DIR) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[22][1]++, './data/files'),
      maxFileSize: parseInt(
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[23][0]++, process.env.MAX_FILE_SIZE) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[23][1]++, '104857600')),
      // 100MB
      allowedMimeTypes:
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[24][0]++, process.env.ALLOWED_MIME_TYPES?.split(',')) ||
      /* istanbul ignore next */
      (cov_1kbgesm3jb().b[24][1]++, ['image/*', 'text/*', 'application/json', 'application/pdf', 'application/zip', 'application/x-zip-compressed', 'application/octet-stream', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'])
    });
  } else
  /* istanbul ignore next */
  {
    cov_1kbgesm3jb().b[21][1]++;
  }
  cov_1kbgesm3jb().s[66]++;
  return fileHandler;
};
// Helper function to detect MIME type from file extension
/* istanbul ignore next */
cov_1kbgesm3jb().s[67]++;
const getMimeTypeFromExtension = fileName => {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[11]++;
  const ext =
  /* istanbul ignore next */
  (cov_1kbgesm3jb().s[68]++, path.extname(fileName).toLowerCase());
  const mimeTypes =
  /* istanbul ignore next */
  (cov_1kbgesm3jb().s[69]++, {
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.gif': 'image/gif',
    '.pdf': 'application/pdf',
    '.txt': 'text/plain',
    '.json': 'application/json',
    '.zip': 'application/zip',
    '.csv': 'text/csv',
    '.xml': 'application/xml',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xls': 'application/vnd.ms-excel',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    '.doc': 'application/msword'
  });
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[70]++;
  return /* istanbul ignore next */(cov_1kbgesm3jb().b[25][0]++, mimeTypes[ext]) ||
  /* istanbul ignore next */
  (cov_1kbgesm3jb().b[25][1]++, 'application/octet-stream');
};
// Tool registration function
function createBinaryDataTools(getClient, server) {
  /* istanbul ignore next */
  cov_1kbgesm3jb().f[12]++;
  cov_1kbgesm3jb().s[71]++;
  // Upload binary data from file system
  server.addTool({
    name: 'upload-binary-data',
    description: 'Upload a file from the local file system to n8n as binary data',
    parameters: UploadBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[13]++;
      cov_1kbgesm3jb().s[72]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[73]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[74]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[75]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[76]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[77]++;
          throw new fastmcp_1.UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[78]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[79]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[80]++,
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[26][0]++, args.overrideMimeType) ||
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[26][1]++, getMimeTypeFromExtension(fileName)));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[81]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[82]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[27][0]++;
          cov_1kbgesm3jb().s[83]++;
          throw new fastmcp_1.UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[27][1]++;
        }
        // Upload file
        const uploadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[84]++, {
          fileName,
          mimeType,
          data: fileData.toString('base64'),
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[85]++, await binaryClient.uploadBinaryData(uploadRequest));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[86]++;
        return {
          success: true,
          fileInfo: result,
          message: `Successfully uploaded ${fileName} (${fileData.length} bytes)`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[87]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[28][0]++;
          cov_1kbgesm3jb().s[88]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[28][1]++;
        }
        cov_1kbgesm3jb().s[89]++;
        throw new fastmcp_1.UserError(`Failed to upload binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[29][1]++, 'Unknown error')}`);
      }
    }
  });
  // Download binary data to file system
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[90]++;
  server.addTool({
    name: 'download-binary-data',
    description: 'Download binary data from n8n to the local file system',
    parameters: DownloadBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[14]++;
      cov_1kbgesm3jb().s[91]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[92]++, getBinaryDataClient(getClient));
        // Download file
        const downloadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[93]++, {
          fileId: args.fileId,
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[94]++, await binaryClient.downloadBinaryData(downloadRequest));
        // Convert base64 to buffer and save
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[95]++, Buffer.from(result.data, 'base64'));
        // Ensure output directory exists
        const outputDir =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[96]++, path.dirname(args.outputPath));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[97]++;
        await fs.mkdir(outputDir, {
          recursive: true
        });
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[98]++;
        await fs.writeFile(args.outputPath, fileData);
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[99]++;
        return {
          success: true,
          outputPath: args.outputPath,
          fileName: result.fileName,
          mimeType: result.mimeType,
          fileSize: result.fileSize,
          message: `Successfully downloaded ${result.fileName} to ${args.outputPath}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[100]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[30][0]++;
          cov_1kbgesm3jb().s[101]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[30][1]++;
        }
        cov_1kbgesm3jb().s[102]++;
        throw new fastmcp_1.UserError(`Failed to download binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[31][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[31][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload binary data from base64 string
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[103]++;
  server.addTool({
    name: 'upload-from-base64',
    description: 'Upload binary data from a base64 encoded string',
    parameters: UploadFromBase64Schema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[15]++;
      cov_1kbgesm3jb().s[104]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[105]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[106]++, getFileHandler());
        // Validate base64 data size
        const dataSize =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[107]++, args.data.length * 3 / 4); // Approximate decoded size
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[108]++, await fileHandler.validateFile(args.fileName, args.mimeType, dataSize));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[109]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[32][0]++;
          cov_1kbgesm3jb().s[110]++;
          throw new fastmcp_1.UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[32][1]++;
        }
        const uploadRequest =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[111]++, {
          fileName: args.fileName,
          mimeType: args.mimeType,
          data: args.data,
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId
        });
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[112]++, await binaryClient.uploadBinaryData(uploadRequest));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[113]++;
        return {
          success: true,
          fileInfo: result,
          message: `Successfully uploaded ${args.fileName} from base64 data`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[114]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[33][0]++;
          cov_1kbgesm3jb().s[115]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[33][1]++;
        }
        cov_1kbgesm3jb().s[116]++;
        throw new fastmcp_1.UserError(`Failed to upload from base64: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[34][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[34][1]++, 'Unknown error')}`);
      }
    }
  });
  // Download execution binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[117]++;
  server.addTool({
    name: 'download-execution-binary',
    description: 'Download binary data from a specific workflow execution output',
    parameters: DownloadExecutionBinarySchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[16]++;
      cov_1kbgesm3jb().s[118]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[119]++, getBinaryDataClient(getClient));
        // Download binary data from execution
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[120]++, await binaryClient.getExecutionBinaryData(args.executionId, args.nodeId, args.outputIndex, args.itemIndex, args.propertyName));
        // Ensure output directory exists
        const outputDir =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[121]++, path.dirname(args.outputPath));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[122]++;
        await fs.mkdir(outputDir, {
          recursive: true
        });
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[123]++;
        await fs.writeFile(args.outputPath, fileData);
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[124]++;
        return {
          success: true,
          outputPath: args.outputPath,
          fileSize: fileData.length,
          executionId: args.executionId,
          nodeId: args.nodeId,
          message: `Successfully downloaded execution binary data to ${args.outputPath}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[125]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[35][0]++;
          cov_1kbgesm3jb().s[126]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[35][1]++;
        }
        cov_1kbgesm3jb().s[127]++;
        throw new fastmcp_1.UserError(`Failed to download execution binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[36][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[36][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload workflow binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[128]++;
  server.addTool({
    name: 'upload-workflow-binary',
    description: 'Upload binary data for use in a specific workflow',
    parameters: UploadWorkflowBinarySchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[17]++;
      cov_1kbgesm3jb().s[129]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[130]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[131]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[132]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[133]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[134]++;
          throw new fastmcp_1.UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[135]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[136]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[137]++,
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[37][0]++, args.overrideMimeType) ||
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[37][1]++, getMimeTypeFromExtension(fileName)));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[138]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[139]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[38][0]++;
          cov_1kbgesm3jb().s[140]++;
          throw new fastmcp_1.UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[38][1]++;
        }
        // Upload workflow binary data
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[141]++, await binaryClient.uploadWorkflowBinaryData(args.workflowId, args.nodeId, fileData, fileName, mimeType, args.propertyName));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[142]++;
        return {
          success: true,
          fileInfo: result,
          workflowId: args.workflowId,
          nodeId: args.nodeId,
          message: `Successfully uploaded ${fileName} for workflow ${args.workflowId}`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[143]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[39][0]++;
          cov_1kbgesm3jb().s[144]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[39][1]++;
        }
        cov_1kbgesm3jb().s[145]++;
        throw new fastmcp_1.UserError(`Failed to upload workflow binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[40][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[40][1]++, 'Unknown error')}`);
      }
    }
  });
  // List binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[146]++;
  server.addTool({
    name: 'list-binary-data',
    description: 'List binary data files stored in n8n',
    parameters: ListBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[18]++;
      cov_1kbgesm3jb().s[147]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[148]++, getBinaryDataClient(getClient));
        const files =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[149]++, await binaryClient.listBinaryData({
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId,
          limit: args.limit,
          offset: args.offset
        }));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[150]++;
        return {
          success: true,
          files,
          count: files.length,
          filters: {
            workflowId: args.workflowId,
            executionId: args.executionId,
            nodeId: args.nodeId
          },
          pagination: {
            limit: args.limit,
            offset: args.offset
          }
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[151]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[41][0]++;
          cov_1kbgesm3jb().s[152]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[41][1]++;
        }
        cov_1kbgesm3jb().s[153]++;
        throw new fastmcp_1.UserError(`Failed to list binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[42][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[42][1]++, 'Unknown error')}`);
      }
    }
  });
  // Delete binary data
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[154]++;
  server.addTool({
    name: 'delete-binary-data',
    description: 'Delete binary data from n8n storage',
    parameters: DeleteBinaryDataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[19]++;
      cov_1kbgesm3jb().s[155]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[156]++, getBinaryDataClient(getClient));
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[157]++, await binaryClient.deleteBinaryData(args.fileId));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[158]++;
        return {
          success: result.success,
          fileId: args.fileId,
          message: result.message
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[159]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[43][0]++;
          cov_1kbgesm3jb().s[160]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[43][1]++;
        }
        cov_1kbgesm3jb().s[161]++;
        throw new fastmcp_1.UserError(`Failed to delete binary data: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[44][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[44][1]++, 'Unknown error')}`);
      }
    }
  });
  // Get binary data metadata
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[162]++;
  server.addTool({
    name: 'get-binary-metadata',
    description: 'Get metadata for binary data stored in n8n',
    parameters: GetBinaryMetadataSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[20]++;
      cov_1kbgesm3jb().s[163]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[164]++, getBinaryDataClient(getClient));
        const metadata =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[165]++, await binaryClient.getBinaryDataMetadata(args.fileId));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[166]++;
        return {
          success: true,
          metadata
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[167]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[45][0]++;
          cov_1kbgesm3jb().s[168]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[45][1]++;
        }
        cov_1kbgesm3jb().s[169]++;
        throw new fastmcp_1.UserError(`Failed to get binary metadata: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[46][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[46][1]++, 'Unknown error')}`);
      }
    }
  });
  // Upload large file with progress tracking
  /* istanbul ignore next */
  cov_1kbgesm3jb().s[170]++;
  server.addTool({
    name: 'upload-large-file',
    description: 'Upload a large file with progress tracking and chunked transfer',
    parameters: UploadLargeFileSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_1kbgesm3jb().f[21]++;
      cov_1kbgesm3jb().s[171]++;
      try {
        const binaryClient =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[172]++, getBinaryDataClient(getClient));
        const fileHandler =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[173]++, getFileHandler());
        // Check if file exists
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[174]++;
        try {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[175]++;
          await fs.access(args.filePath);
        } catch {
          /* istanbul ignore next */
          cov_1kbgesm3jb().s[176]++;
          throw new fastmcp_1.UserError(`File not found: ${args.filePath}`);
        }
        // Read file
        const fileData =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[177]++, await fs.readFile(args.filePath));
        const fileName =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[178]++, path.basename(args.filePath));
        const mimeType =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[179]++, getMimeTypeFromExtension(fileName));
        // Validate file
        const validation =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[180]++, await fileHandler.validateFile(fileName, mimeType, fileData.length));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[181]++;
        if (!validation.isValid) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[47][0]++;
          cov_1kbgesm3jb().s[182]++;
          throw new fastmcp_1.UserError(`File validation failed: ${validation.errors.join(', ')}`);
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[47][1]++;
        }
        let progressUpdates =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[183]++, []);
        // Upload with progress tracking
        const result =
        /* istanbul ignore next */
        (cov_1kbgesm3jb().s[184]++, await binaryClient.uploadLargeFile(fileData, fileName, mimeType, {
          workflowId: args.workflowId,
          executionId: args.executionId,
          nodeId: args.nodeId,
          chunkSize: args.chunkSize,
          onProgress: args.showProgress ?
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[48][0]++, progress => {
            /* istanbul ignore next */
            cov_1kbgesm3jb().f[22]++;
            cov_1kbgesm3jb().s[185]++;
            progressUpdates.push({
              ...progress
            });
          }) :
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[48][1]++, undefined)
        }));
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[186]++;
        return {
          success: true,
          fileInfo: result,
          fileName,
          fileSize: fileData.length,
          chunkSize: args.chunkSize,
          progressUpdates: args.showProgress ?
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[49][0]++, progressUpdates) :
          /* istanbul ignore next */
          (cov_1kbgesm3jb().b[49][1]++, undefined),
          message: `Successfully uploaded large file ${fileName} (${fileData.length} bytes)`
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_1kbgesm3jb().s[187]++;
        if (error instanceof fastmcp_1.UserError) {
          /* istanbul ignore next */
          cov_1kbgesm3jb().b[50][0]++;
          cov_1kbgesm3jb().s[188]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_1kbgesm3jb().b[50][1]++;
        }
        cov_1kbgesm3jb().s[189]++;
        throw new fastmcp_1.UserError(`Failed to upload large file: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[51][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1kbgesm3jb().b[51][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,