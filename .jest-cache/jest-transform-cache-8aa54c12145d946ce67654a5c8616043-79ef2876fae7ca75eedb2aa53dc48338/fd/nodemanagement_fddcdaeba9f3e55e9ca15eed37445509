62b4998c25f2b2a47e33222279f0c0c9
"use strict";

/* istanbul ignore next */
function cov_2qv86yv8dz() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts";
  var hash = "7f394f3859d95448d2a08a79f2063cb27bce0dfd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 26
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "5": {
        start: {
          line: 10,
          column: 29
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "6": {
        start: {
          line: 14,
          column: 26
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "7": {
        start: {
          line: 20,
          column: 23
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "8": {
        start: {
          line: 23,
          column: 25
        },
        end: {
          line: 33,
          column: 2
        }
      },
      "9": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "10": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "11": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 50
        }
      },
      "12": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 54,
          column: 22
        }
      },
      "13": {
        start: {
          line: 50,
          column: 26
        },
        end: {
          line: 50,
          column: 57
        }
      },
      "14": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 70
        }
      },
      "15": {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 161
        }
      },
      "16": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "17": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 38
        }
      },
      "18": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "19": {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 44
        }
      },
      "20": {
        start: {
          line: 63,
          column: 28
        },
        end: {
          line: 65,
          column: 16
        }
      },
      "21": {
        start: {
          line: 64,
          column: 60
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "22": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 140
        }
      },
      "23": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 73,
          column: 5
        }
      },
      "24": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 62
        }
      },
      "25": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 80,
          column: 22
        }
      },
      "26": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 74
        }
      },
      "27": {
        start: {
          line: 77,
          column: 25
        },
        end: {
          line: 77,
          column: 66
        }
      },
      "28": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 202
        }
      },
      "29": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 85,
          column: 5
        }
      },
      "30": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 44
        }
      },
      "31": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 93,
          column: 22
        }
      },
      "32": {
        start: {
          line: 88,
          column: 25
        },
        end: {
          line: 90,
          column: 16
        }
      },
      "33": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 137
        }
      },
      "34": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 124,
          column: 7
        }
      },
      "35": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 109,
          column: 38
        }
      },
      "36": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "37": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 104
        }
      },
      "38": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 122,
          column: 13
        }
      },
      "39": {
        start: {
          line: 114,
          column: 33
        },
        end: {
          line: 114,
          column: 68
        }
      },
      "40": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 115,
          column: 56
        }
      },
      "41": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 120,
          column: 17
        }
      },
      "42": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 105
        }
      },
      "43": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 121,
          column: 102
        }
      },
      "44": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 160,
          column: 7
        }
      },
      "45": {
        start: {
          line: 137,
          column: 27
        },
        end: {
          line: 137,
          column: 38
        }
      },
      "46": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 140,
          column: 13
        }
      },
      "47": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 104
        }
      },
      "48": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 158,
          column: 13
        }
      },
      "49": {
        start: {
          line: 142,
          column: 36
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "50": {
        start: {
          line: 146,
          column: 41
        },
        end: {
          line: 146,
          column: 90
        }
      },
      "51": {
        start: {
          line: 147,
          column: 34
        },
        end: {
          line: 147,
          column: 78
        }
      },
      "52": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 293
        }
      },
      "53": {
        start: {
          line: 148,
          column: 219
        },
        end: {
          line: 148,
          column: 257
        }
      },
      "54": {
        start: {
          line: 151,
          column: 16
        },
        end: {
          line: 156,
          column: 17
        }
      },
      "55": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 154,
          column: 21
        }
      },
      "56": {
        start: {
          line: 153,
          column: 24
        },
        end: {
          line: 153,
          column: 143
        }
      },
      "57": {
        start: {
          line: 155,
          column: 20
        },
        end: {
          line: 155,
          column: 97
        }
      },
      "58": {
        start: {
          line: 157,
          column: 16
        },
        end: {
          line: 157,
          column: 94
        }
      },
      "59": {
        start: {
          line: 161,
          column: 4
        },
        end: {
          line: 196,
          column: 7
        }
      },
      "60": {
        start: {
          line: 173,
          column: 27
        },
        end: {
          line: 173,
          column: 38
        }
      },
      "61": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 176,
          column: 13
        }
      },
      "62": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 104
        }
      },
      "63": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 194,
          column: 13
        }
      },
      "64": {
        start: {
          line: 178,
          column: 36
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "65": {
        start: {
          line: 182,
          column: 39
        },
        end: {
          line: 182,
          column: 98
        }
      },
      "66": {
        start: {
          line: 183,
          column: 34
        },
        end: {
          line: 183,
          column: 76
        }
      },
      "67": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 184,
          column: 288
        }
      },
      "68": {
        start: {
          line: 184,
          column: 214
        },
        end: {
          line: 184,
          column: 252
        }
      },
      "69": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 192,
          column: 17
        }
      },
      "70": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 190,
          column: 21
        }
      },
      "71": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 147
        }
      },
      "72": {
        start: {
          line: 191,
          column: 20
        },
        end: {
          line: 191,
          column: 96
        }
      },
      "73": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 93
        }
      },
      "74": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 227,
          column: 7
        }
      },
      "75": {
        start: {
          line: 209,
          column: 27
        },
        end: {
          line: 209,
          column: 38
        }
      },
      "76": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 212,
          column: 13
        }
      },
      "77": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 104
        }
      },
      "78": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "79": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 73
        }
      },
      "80": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 171
        }
      },
      "81": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 223,
          column: 17
        }
      },
      "82": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "83": {
        start: {
          line: 220,
          column: 24
        },
        end: {
          line: 220,
          column: 103
        }
      },
      "84": {
        start: {
          line: 222,
          column: 20
        },
        end: {
          line: 222,
          column: 99
        }
      },
      "85": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 96
        }
      },
      "86": {
        start: {
          line: 229,
          column: 4
        },
        end: {
          line: 267,
          column: 7
        }
      },
      "87": {
        start: {
          line: 244,
          column: 27
        },
        end: {
          line: 244,
          column: 38
        }
      },
      "88": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "89": {
        start: {
          line: 246,
          column: 16
        },
        end: {
          line: 246,
          column: 104
        }
      },
      "90": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 265,
          column: 13
        }
      },
      "91": {
        start: {
          line: 249,
          column: 34
        },
        end: {
          line: 251,
          column: 49
        }
      },
      "92": {
        start: {
          line: 252,
          column: 39
        },
        end: {
          line: 252,
          column: 69
        }
      },
      "93": {
        start: {
          line: 253,
          column: 32
        },
        end: {
          line: 253,
          column: 70
        }
      },
      "94": {
        start: {
          line: 254,
          column: 29
        },
        end: {
          line: 254,
          column: 63
        }
      },
      "95": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 257,
          column: 17
        }
      },
      "96": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 135
        }
      },
      "97": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 30
        }
      },
      "98": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "99": {
        start: {
          line: 262,
          column: 20
        },
        end: {
          line: 262,
          column: 97
        }
      },
      "100": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 94
        }
      },
      "101": {
        start: {
          line: 268,
          column: 4
        },
        end: {
          line: 314,
          column: 7
        }
      },
      "102": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 38
        }
      },
      "103": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 283,
          column: 13
        }
      },
      "104": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 104
        }
      },
      "105": {
        start: {
          line: 284,
          column: 12
        },
        end: {
          line: 312,
          column: 13
        }
      },
      "106": {
        start: {
          line: 285,
          column: 33
        },
        end: {
          line: 285,
          column: 72
        }
      },
      "107": {
        start: {
          line: 286,
          column: 36
        },
        end: {
          line: 288,
          column: 41
        }
      },
      "108": {
        start: {
          line: 287,
          column: 34
        },
        end: {
          line: 287,
          column: 98
        }
      },
      "109": {
        start: {
          line: 289,
          column: 35
        },
        end: {
          line: 292,
          column: 31
        }
      },
      "110": {
        start: {
          line: 291,
          column: 33
        },
        end: {
          line: 291,
          column: 156
        }
      },
      "111": {
        start: {
          line: 293,
          column: 37
        },
        end: {
          line: 293,
          column: 68
        }
      },
      "112": {
        start: {
          line: 294,
          column: 16
        },
        end: {
          line: 302,
          column: 109
        }
      },
      "113": {
        start: {
          line: 305,
          column: 16
        },
        end: {
          line: 310,
          column: 17
        }
      },
      "114": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 308,
          column: 21
        }
      },
      "115": {
        start: {
          line: 307,
          column: 24
        },
        end: {
          line: 307,
          column: 127
        }
      },
      "116": {
        start: {
          line: 309,
          column: 20
        },
        end: {
          line: 309,
          column: 103
        }
      },
      "117": {
        start: {
          line: 311,
          column: 16
        },
        end: {
          line: 311,
          column: 100
        }
      },
      "118": {
        start: {
          line: 316,
          column: 4
        },
        end: {
          line: 372,
          column: 7
        }
      },
      "119": {
        start: {
          line: 328,
          column: 27
        },
        end: {
          line: 328,
          column: 38
        }
      },
      "120": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 331,
          column: 13
        }
      },
      "121": {
        start: {
          line: 330,
          column: 16
        },
        end: {
          line: 330,
          column: 104
        }
      },
      "122": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 370,
          column: 13
        }
      },
      "123": {
        start: {
          line: 333,
          column: 32
        },
        end: {
          line: 333,
          column: 34
        }
      },
      "124": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 361,
          column: 17
        }
      },
      "125": {
        start: {
          line: 336,
          column: 37
        },
        end: {
          line: 336,
          column: 78
        }
      },
      "126": {
        start: {
          line: 337,
          column: 34
        },
        end: {
          line: 337,
          column: 54
        }
      },
      "127": {
        start: {
          line: 338,
          column: 42
        },
        end: {
          line: 338,
          column: 115
        }
      },
      "128": {
        start: {
          line: 338,
          column: 63
        },
        end: {
          line: 338,
          column: 114
        }
      },
      "129": {
        start: {
          line: 339,
          column: 20
        },
        end: {
          line: 344,
          column: 25
        }
      },
      "130": {
        start: {
          line: 339,
          column: 63
        },
        end: {
          line: 344,
          column: 21
        }
      },
      "131": {
        start: {
          line: 348,
          column: 46
        },
        end: {
          line: 348,
          column: 94
        }
      },
      "132": {
        start: {
          line: 349,
          column: 38
        },
        end: {
          line: 349,
          column: 104
        }
      },
      "133": {
        start: {
          line: 349,
          column: 74
        },
        end: {
          line: 349,
          column: 103
        }
      },
      "134": {
        start: {
          line: 350,
          column: 20
        },
        end: {
          line: 360,
          column: 21
        }
      },
      "135": {
        start: {
          line: 351,
          column: 45
        },
        end: {
          line: 351,
          column: 82
        }
      },
      "136": {
        start: {
          line: 352,
          column: 38
        },
        end: {
          line: 352,
          column: 62
        }
      },
      "137": {
        start: {
          line: 353,
          column: 46
        },
        end: {
          line: 353,
          column: 119
        }
      },
      "138": {
        start: {
          line: 353,
          column: 67
        },
        end: {
          line: 353,
          column: 118
        }
      },
      "139": {
        start: {
          line: 354,
          column: 24
        },
        end: {
          line: 359,
          column: 29
        }
      },
      "140": {
        start: {
          line: 354,
          column: 67
        },
        end: {
          line: 359,
          column: 25
        }
      },
      "141": {
        start: {
          line: 362,
          column: 39
        },
        end: {
          line: 362,
          column: 67
        }
      },
      "142": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 59
        }
      },
      "143": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 368,
          column: 17
        }
      },
      "144": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 367,
          column: 94
        }
      },
      "145": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 91
        }
      },
      "146": {
        start: {
          line: 373,
          column: 4
        },
        end: {
          line: 431,
          column: 7
        }
      },
      "147": {
        start: {
          line: 388,
          column: 27
        },
        end: {
          line: 388,
          column: 38
        }
      },
      "148": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 391,
          column: 13
        }
      },
      "149": {
        start: {
          line: 390,
          column: 16
        },
        end: {
          line: 390,
          column: 104
        }
      },
      "150": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "151": {
        start: {
          line: 393,
          column: 42
        },
        end: {
          line: 393,
          column: 83
        }
      },
      "152": {
        start: {
          line: 394,
          column: 34
        },
        end: {
          line: 394,
          column: 56
        }
      },
      "153": {
        start: {
          line: 395,
          column: 33
        },
        end: {
          line: 395,
          column: 35
        }
      },
      "154": {
        start: {
          line: 396,
          column: 16
        },
        end: {
          line: 420,
          column: 17
        }
      },
      "155": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 398,
          column: 33
        }
      },
      "156": {
        start: {
          line: 398,
          column: 24
        },
        end: {
          line: 398,
          column: 33
        }
      },
      "157": {
        start: {
          line: 399,
          column: 41
        },
        end: {
          line: 399,
          column: 78
        }
      },
      "158": {
        start: {
          line: 400,
          column: 34
        },
        end: {
          line: 400,
          column: 58
        }
      },
      "159": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 419,
          column: 21
        }
      },
      "160": {
        start: {
          line: 402,
          column: 24
        },
        end: {
          line: 403,
          column: 37
        }
      },
      "161": {
        start: {
          line: 403,
          column: 28
        },
        end: {
          line: 403,
          column: 37
        }
      },
      "162": {
        start: {
          line: 404,
          column: 24
        },
        end: {
          line: 411,
          column: 25
        }
      },
      "163": {
        start: {
          line: 405,
          column: 28
        },
        end: {
          line: 410,
          column: 30
        }
      },
      "164": {
        start: {
          line: 412,
          column: 24
        },
        end: {
          line: 412,
          column: 57
        }
      },
      "165": {
        start: {
          line: 413,
          column: 24
        },
        end: {
          line: 415,
          column: 25
        }
      },
      "166": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 414,
          column: 70
        }
      },
      "167": {
        start: {
          line: 416,
          column: 24
        },
        end: {
          line: 418,
          column: 25
        }
      },
      "168": {
        start: {
          line: 417,
          column: 28
        },
        end: {
          line: 417,
          column: 78
        }
      },
      "169": {
        start: {
          line: 421,
          column: 30
        },
        end: {
          line: 421,
          column: 97
        }
      },
      "170": {
        start: {
          line: 421,
          column: 69
        },
        end: {
          line: 421,
          column: 96
        }
      },
      "171": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 422,
          column: 47
        }
      },
      "172": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 427,
          column: 17
        }
      },
      "173": {
        start: {
          line: 426,
          column: 20
        },
        end: {
          line: 426,
          column: 100
        }
      },
      "174": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 97
        }
      },
      "175": {
        start: {
          line: 432,
          column: 4
        },
        end: {
          line: 478,
          column: 7
        }
      },
      "176": {
        start: {
          line: 444,
          column: 27
        },
        end: {
          line: 444,
          column: 38
        }
      },
      "177": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 447,
          column: 13
        }
      },
      "178": {
        start: {
          line: 446,
          column: 16
        },
        end: {
          line: 446,
          column: 104
        }
      },
      "179": {
        start: {
          line: 448,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "180": {
        start: {
          line: 449,
          column: 33
        },
        end: {
          line: 449,
          column: 74
        }
      },
      "181": {
        start: {
          line: 450,
          column: 30
        },
        end: {
          line: 450,
          column: 50
        }
      },
      "182": {
        start: {
          line: 451,
          column: 34
        },
        end: {
          line: 451,
          column: 82
        }
      },
      "183": {
        start: {
          line: 451,
          column: 58
        },
        end: {
          line: 451,
          column: 81
        }
      },
      "184": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 454,
          column: 17
        }
      },
      "185": {
        start: {
          line: 453,
          column: 20
        },
        end: {
          line: 453,
          column: 126
        }
      },
      "186": {
        start: {
          line: 455,
          column: 37
        },
        end: {
          line: 455,
          column: 53
        }
      },
      "187": {
        start: {
          line: 456,
          column: 36
        },
        end: {
          line: 461,
          column: 17
        }
      },
      "188": {
        start: {
          line: 462,
          column: 16
        },
        end: {
          line: 462,
          column: 47
        }
      },
      "189": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 465,
          column: 19
        }
      },
      "190": {
        start: {
          line: 466,
          column: 32
        },
        end: {
          line: 468,
          column: 31
        }
      },
      "191": {
        start: {
          line: 467,
          column: 32
        },
        end: {
          line: 467,
          column: 119
        }
      },
      "192": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 469,
          column: 136
        }
      },
      "193": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 474,
          column: 17
        }
      },
      "194": {
        start: {
          line: 473,
          column: 20
        },
        end: {
          line: 473,
          column: 93
        }
      },
      "195": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 90
        }
      },
      "196": {
        start: {
          line: 480,
          column: 4
        },
        end: {
          line: 521,
          column: 7
        }
      },
      "197": {
        start: {
          line: 492,
          column: 27
        },
        end: {
          line: 492,
          column: 38
        }
      },
      "198": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 495,
          column: 13
        }
      },
      "199": {
        start: {
          line: 494,
          column: 16
        },
        end: {
          line: 494,
          column: 104
        }
      },
      "200": {
        start: {
          line: 496,
          column: 12
        },
        end: {
          line: 519,
          column: 13
        }
      },
      "201": {
        start: {
          line: 497,
          column: 32
        },
        end: {
          line: 504,
          column: 17
        }
      },
      "202": {
        start: {
          line: 505,
          column: 35
        },
        end: {
          line: 505,
          column: 81
        }
      },
      "203": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 508,
          column: 17
        }
      },
      "204": {
        start: {
          line: 507,
          column: 20
        },
        end: {
          line: 507,
          column: 121
        }
      },
      "205": {
        start: {
          line: 509,
          column: 34
        },
        end: {
          line: 511,
          column: 31
        }
      },
      "206": {
        start: {
          line: 510,
          column: 34
        },
        end: {
          line: 510,
          column: 113
        }
      },
      "207": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 87
        }
      },
      "208": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 517,
          column: 17
        }
      },
      "209": {
        start: {
          line: 516,
          column: 20
        },
        end: {
          line: 516,
          column: 104
        }
      },
      "210": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 101
        }
      },
      "211": {
        start: {
          line: 522,
          column: 4
        },
        end: {
          line: 559,
          column: 7
        }
      },
      "212": {
        start: {
          line: 534,
          column: 27
        },
        end: {
          line: 534,
          column: 38
        }
      },
      "213": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 537,
          column: 13
        }
      },
      "214": {
        start: {
          line: 536,
          column: 16
        },
        end: {
          line: 536,
          column: 104
        }
      },
      "215": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 557,
          column: 13
        }
      },
      "216": {
        start: {
          line: 539,
          column: 39
        },
        end: {
          line: 539,
          column: 81
        }
      },
      "217": {
        start: {
          line: 540,
          column: 37
        },
        end: {
          line: 542,
          column: 39
        }
      },
      "218": {
        start: {
          line: 541,
          column: 63
        },
        end: {
          line: 541,
          column: 73
        }
      },
      "219": {
        start: {
          line: 543,
          column: 37
        },
        end: {
          line: 545,
          column: 38
        }
      },
      "220": {
        start: {
          line: 544,
          column: 70
        },
        end: {
          line: 544,
          column: 80
        }
      },
      "221": {
        start: {
          line: 546,
          column: 16
        },
        end: {
          line: 550,
          column: 67
        }
      },
      "222": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 555,
          column: 17
        }
      },
      "223": {
        start: {
          line: 554,
          column: 20
        },
        end: {
          line: 554,
          column: 98
        }
      },
      "224": {
        start: {
          line: 556,
          column: 16
        },
        end: {
          line: 556,
          column: 95
        }
      },
      "225": {
        start: {
          line: 560,
          column: 4
        },
        end: {
          line: 600,
          column: 7
        }
      },
      "226": {
        start: {
          line: 572,
          column: 27
        },
        end: {
          line: 572,
          column: 38
        }
      },
      "227": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 575,
          column: 13
        }
      },
      "228": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 574,
          column: 104
        }
      },
      "229": {
        start: {
          line: 576,
          column: 12
        },
        end: {
          line: 598,
          column: 13
        }
      },
      "230": {
        start: {
          line: 577,
          column: 36
        },
        end: {
          line: 577,
          column: 84
        }
      },
      "231": {
        start: {
          line: 578,
          column: 16
        },
        end: {
          line: 580,
          column: 17
        }
      },
      "232": {
        start: {
          line: 579,
          column: 20
        },
        end: {
          line: 579,
          column: 90
        }
      },
      "233": {
        start: {
          line: 581,
          column: 34
        },
        end: {
          line: 590,
          column: 33
        }
      },
      "234": {
        start: {
          line: 583,
          column: 41
        },
        end: {
          line: 585,
          column: 28
        }
      },
      "235": {
        start: {
          line: 586,
          column: 20
        },
        end: {
          line: 588,
          column: 101
        }
      },
      "236": {
        start: {
          line: 591,
          column: 16
        },
        end: {
          line: 591,
          column: 81
        }
      },
      "237": {
        start: {
          line: 594,
          column: 16
        },
        end: {
          line: 596,
          column: 17
        }
      },
      "238": {
        start: {
          line: 595,
          column: 20
        },
        end: {
          line: 595,
          column: 100
        }
      },
      "239": {
        start: {
          line: 597,
          column: 16
        },
        end: {
          line: 597,
          column: 97
        }
      }
    },
    fnMap: {
      "0": {
        name: "formatPackageList",
        decl: {
          start: {
            line: 44,
            column: 9
          },
          end: {
            line: 44,
            column: 26
          }
        },
        loc: {
          start: {
            line: 44,
            column: 37
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 44
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 13
          },
          end: {
            line: 49,
            column: 14
          }
        },
        loc: {
          start: {
            line: 49,
            column: 20
          },
          end: {
            line: 53,
            column: 5
          }
        },
        line: 49
      },
      "2": {
        name: "formatNodeTypeList",
        decl: {
          start: {
            line: 56,
            column: 9
          },
          end: {
            line: 56,
            column: 27
          }
        },
        loc: {
          start: {
            line: 56,
            column: 39
          },
          end: {
            line: 69,
            column: 1
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 13
          },
          end: {
            line: 61,
            column: 14
          }
        },
        loc: {
          start: {
            line: 61,
            column: 21
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 64,
            column: 55
          },
          end: {
            line: 64,
            column: 56
          }
        },
        loc: {
          start: {
            line: 64,
            column: 60
          },
          end: {
            line: 64,
            column: 66
          }
        },
        line: 64
      },
      "5": {
        name: "formatSearchResults",
        decl: {
          start: {
            line: 70,
            column: 9
          },
          end: {
            line: 70,
            column: 28
          }
        },
        loc: {
          start: {
            line: 70,
            column: 38
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 70
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 75,
            column: 14
          }
        },
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 79,
            column: 5
          }
        },
        line: 75
      },
      "7": {
        name: "formatUsageStats",
        decl: {
          start: {
            line: 82,
            column: 9
          },
          end: {
            line: 82,
            column: 25
          }
        },
        loc: {
          start: {
            line: 82,
            column: 33
          },
          end: {
            line: 94,
            column: 1
          }
        },
        line: 82
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 87,
            column: 13
          },
          end: {
            line: 87,
            column: 14
          }
        },
        loc: {
          start: {
            line: 87,
            column: 21
          },
          end: {
            line: 92,
            column: 5
          }
        },
        line: 87
      },
      "9": {
        name: "createNodeManagementTools",
        decl: {
          start: {
            line: 95,
            column: 9
          },
          end: {
            line: 95,
            column: 34
          }
        },
        loc: {
          start: {
            line: 95,
            column: 54
          },
          end: {
            line: 601,
            column: 1
          }
        },
        line: 95
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 108,
            column: 18
          }
        },
        loc: {
          start: {
            line: 108,
            column: 29
          },
          end: {
            line: 123,
            column: 9
          }
        },
        line: 108
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 136,
            column: 17
          },
          end: {
            line: 136,
            column: 18
          }
        },
        loc: {
          start: {
            line: 136,
            column: 33
          },
          end: {
            line: 159,
            column: 9
          }
        },
        line: 136
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 148,
            column: 211
          },
          end: {
            line: 148,
            column: 212
          }
        },
        loc: {
          start: {
            line: 148,
            column: 219
          },
          end: {
            line: 148,
            column: 257
          }
        },
        line: 148
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 172,
            column: 17
          },
          end: {
            line: 172,
            column: 18
          }
        },
        loc: {
          start: {
            line: 172,
            column: 33
          },
          end: {
            line: 195,
            column: 9
          }
        },
        line: 172
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 184,
            column: 206
          },
          end: {
            line: 184,
            column: 207
          }
        },
        loc: {
          start: {
            line: 184,
            column: 214
          },
          end: {
            line: 184,
            column: 252
          }
        },
        line: 184
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 208,
            column: 17
          },
          end: {
            line: 208,
            column: 18
          }
        },
        loc: {
          start: {
            line: 208,
            column: 33
          },
          end: {
            line: 226,
            column: 9
          }
        },
        line: 208
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 243,
            column: 17
          },
          end: {
            line: 243,
            column: 18
          }
        },
        loc: {
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 266,
            column: 9
          }
        },
        line: 243
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 279,
            column: 17
          },
          end: {
            line: 279,
            column: 18
          }
        },
        loc: {
          start: {
            line: 279,
            column: 33
          },
          end: {
            line: 313,
            column: 9
          }
        },
        line: 279
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 287,
            column: 26
          },
          end: {
            line: 287,
            column: 27
          }
        },
        loc: {
          start: {
            line: 287,
            column: 34
          },
          end: {
            line: 287,
            column: 98
          }
        },
        line: 287
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 291,
            column: 25
          },
          end: {
            line: 291,
            column: 26
          }
        },
        loc: {
          start: {
            line: 291,
            column: 33
          },
          end: {
            line: 291,
            column: 156
          }
        },
        line: 291
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 327,
            column: 17
          },
          end: {
            line: 327,
            column: 18
          }
        },
        loc: {
          start: {
            line: 327,
            column: 33
          },
          end: {
            line: 371,
            column: 9
          }
        },
        line: 327
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 338,
            column: 55
          },
          end: {
            line: 338,
            column: 56
          }
        },
        loc: {
          start: {
            line: 338,
            column: 63
          },
          end: {
            line: 338,
            column: 114
          }
        },
        line: 338
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 339,
            column: 54
          },
          end: {
            line: 339,
            column: 55
          }
        },
        loc: {
          start: {
            line: 339,
            column: 63
          },
          end: {
            line: 344,
            column: 21
          }
        },
        line: 339
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 349,
            column: 68
          },
          end: {
            line: 349,
            column: 69
          }
        },
        loc: {
          start: {
            line: 349,
            column: 74
          },
          end: {
            line: 349,
            column: 103
          }
        },
        line: 349
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 353,
            column: 59
          },
          end: {
            line: 353,
            column: 60
          }
        },
        loc: {
          start: {
            line: 353,
            column: 67
          },
          end: {
            line: 353,
            column: 118
          }
        },
        line: 353
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 354,
            column: 58
          },
          end: {
            line: 354,
            column: 59
          }
        },
        loc: {
          start: {
            line: 354,
            column: 67
          },
          end: {
            line: 359,
            column: 25
          }
        },
        line: 354
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 387,
            column: 17
          },
          end: {
            line: 387,
            column: 18
          }
        },
        loc: {
          start: {
            line: 387,
            column: 33
          },
          end: {
            line: 430,
            column: 9
          }
        },
        line: 387
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 421,
            column: 59
          },
          end: {
            line: 421,
            column: 60
          }
        },
        loc: {
          start: {
            line: 421,
            column: 69
          },
          end: {
            line: 421,
            column: 96
          }
        },
        line: 421
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 443,
            column: 17
          },
          end: {
            line: 443,
            column: 18
          }
        },
        loc: {
          start: {
            line: 443,
            column: 33
          },
          end: {
            line: 477,
            column: 9
          }
        },
        line: 443
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 451,
            column: 50
          },
          end: {
            line: 451,
            column: 51
          }
        },
        loc: {
          start: {
            line: 451,
            column: 58
          },
          end: {
            line: 451,
            column: 81
          }
        },
        line: 451
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 467,
            column: 25
          },
          end: {
            line: 467,
            column: 26
          }
        },
        loc: {
          start: {
            line: 467,
            column: 32
          },
          end: {
            line: 467,
            column: 119
          }
        },
        line: 467
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 491,
            column: 17
          },
          end: {
            line: 491,
            column: 18
          }
        },
        loc: {
          start: {
            line: 491,
            column: 33
          },
          end: {
            line: 520,
            column: 9
          }
        },
        line: 491
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 510,
            column: 25
          },
          end: {
            line: 510,
            column: 26
          }
        },
        loc: {
          start: {
            line: 510,
            column: 34
          },
          end: {
            line: 510,
            column: 113
          }
        },
        line: 510
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 533,
            column: 17
          },
          end: {
            line: 533,
            column: 18
          }
        },
        loc: {
          start: {
            line: 533,
            column: 33
          },
          end: {
            line: 558,
            column: 9
          }
        },
        line: 533
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 541,
            column: 56
          },
          end: {
            line: 541,
            column: 57
          }
        },
        loc: {
          start: {
            line: 541,
            column: 63
          },
          end: {
            line: 541,
            column: 73
          }
        },
        line: 541
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 544,
            column: 63
          },
          end: {
            line: 544,
            column: 64
          }
        },
        loc: {
          start: {
            line: 544,
            column: 70
          },
          end: {
            line: 544,
            column: 80
          }
        },
        line: 544
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 571,
            column: 17
          },
          end: {
            line: 571,
            column: 18
          }
        },
        loc: {
          start: {
            line: 571,
            column: 33
          },
          end: {
            line: 599,
            column: 9
          }
        },
        line: 571
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 582,
            column: 25
          },
          end: {
            line: 582,
            column: 26
          }
        },
        loc: {
          start: {
            line: 582,
            column: 48
          },
          end: {
            line: 589,
            column: 17
          }
        },
        line: 582
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 26
          },
          end: {
            line: 50,
            column: 52
          }
        }, {
          start: {
            line: 50,
            column: 56
          },
          end: {
            line: 50,
            column: 57
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 51,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 43
          },
          end: {
            line: 51,
            column: 65
          }
        }, {
          start: {
            line: 51,
            column: 68
          },
          end: {
            line: 51,
            column: 70
          }
        }],
        line: 51
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 65,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 14
          },
          end: {
            line: 64,
            column: 80
          }
        }, {
          start: {
            line: 65,
            column: 14
          },
          end: {
            line: 65,
            column: 16
          }
        }],
        line: 63
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 73,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 76,
            column: 23
          },
          end: {
            line: 76,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 76,
            column: 49
          },
          end: {
            line: 76,
            column: 59
          }
        }, {
          start: {
            line: 76,
            column: 62
          },
          end: {
            line: 76,
            column: 74
          }
        }],
        line: 76
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 25
          },
          end: {
            line: 77,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 48
          },
          end: {
            line: 77,
            column: 61
          }
        }, {
          start: {
            line: 77,
            column: 64
          },
          end: {
            line: 77,
            column: 66
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 85,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "9": {
        loc: {
          start: {
            line: 88,
            column: 25
          },
          end: {
            line: 90,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 89,
            column: 14
          },
          end: {
            line: 89,
            column: 74
          }
        }, {
          start: {
            line: 90,
            column: 14
          },
          end: {
            line: 90,
            column: 16
          }
        }],
        line: 88
      },
      "10": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "11": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 120,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 120,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "12": {
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "13": {
        loc: {
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 34
          },
          end: {
            line: 147,
            column: 73
          }
        }, {
          start: {
            line: 147,
            column: 77
          },
          end: {
            line: 147,
            column: 78
          }
        }],
        line: 147
      },
      "14": {
        loc: {
          start: {
            line: 148,
            column: 174
          },
          end: {
            line: 148,
            column: 290
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 148,
            column: 174
          },
          end: {
            line: 148,
            column: 269
          }
        }, {
          start: {
            line: 148,
            column: 273
          },
          end: {
            line: 148,
            column: 290
          }
        }],
        line: 148
      },
      "15": {
        loc: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 156,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 156,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 151
      },
      "16": {
        loc: {
          start: {
            line: 152,
            column: 20
          },
          end: {
            line: 154,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 20
          },
          end: {
            line: 154,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "17": {
        loc: {
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 174,
            column: 12
          },
          end: {
            line: 176,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 174
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 34
          },
          end: {
            line: 183,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 183,
            column: 34
          },
          end: {
            line: 183,
            column: 71
          }
        }, {
          start: {
            line: 183,
            column: 75
          },
          end: {
            line: 183,
            column: 76
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 184,
            column: 171
          },
          end: {
            line: 184,
            column: 285
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 184,
            column: 171
          },
          end: {
            line: 184,
            column: 264
          }
        }, {
          start: {
            line: 184,
            column: 268
          },
          end: {
            line: 184,
            column: 285
          }
        }],
        line: 184
      },
      "20": {
        loc: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 192,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 192,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 187
      },
      "21": {
        loc: {
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 190,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 190,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "22": {
        loc: {
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 59
          }
        }, {
          start: {
            line: 188,
            column: 63
          },
          end: {
            line: 188,
            column: 102
          }
        }],
        line: 188
      },
      "23": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 212,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 210
      },
      "24": {
        loc: {
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 16
          },
          end: {
            line: 223,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "25": {
        loc: {
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 20
          },
          end: {
            line: 221,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "26": {
        loc: {
          start: {
            line: 219,
            column: 24
          },
          end: {
            line: 219,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 24
          },
          end: {
            line: 219,
            column: 59
          }
        }, {
          start: {
            line: 219,
            column: 63
          },
          end: {
            line: 219,
            column: 102
          }
        }],
        line: 219
      },
      "27": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 247,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "28": {
        loc: {
          start: {
            line: 249,
            column: 34
          },
          end: {
            line: 251,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 250,
            column: 22
          },
          end: {
            line: 250,
            column: 58
          }
        }, {
          start: {
            line: 251,
            column: 22
          },
          end: {
            line: 251,
            column: 49
          }
        }],
        line: 249
      },
      "29": {
        loc: {
          start: {
            line: 253,
            column: 52
          },
          end: {
            line: 253,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 52
          },
          end: {
            line: 253,
            column: 62
          }
        }, {
          start: {
            line: 253,
            column: 66
          },
          end: {
            line: 253,
            column: 69
          }
        }],
        line: 253
      },
      "30": {
        loc: {
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 255,
            column: 16
          },
          end: {
            line: 257,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 255
      },
      "31": {
        loc: {
          start: {
            line: 256,
            column: 65
          },
          end: {
            line: 256,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 256,
            column: 65
          },
          end: {
            line: 256,
            column: 75
          }
        }, {
          start: {
            line: 256,
            column: 79
          },
          end: {
            line: 256,
            column: 82
          }
        }],
        line: 256
      },
      "32": {
        loc: {
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 16
          },
          end: {
            line: 263,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "33": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 283,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "34": {
        loc: {
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 288,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 286,
            column: 36
          },
          end: {
            line: 288,
            column: 31
          }
        }, {
          start: {
            line: 288,
            column: 35
          },
          end: {
            line: 288,
            column: 41
          }
        }],
        line: 286
      },
      "35": {
        loc: {
          start: {
            line: 287,
            column: 51
          },
          end: {
            line: 287,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 67
          },
          end: {
            line: 287,
            column: 80
          }
        }, {
          start: {
            line: 287,
            column: 83
          },
          end: {
            line: 287,
            column: 96
          }
        }],
        line: 287
      },
      "36": {
        loc: {
          start: {
            line: 291,
            column: 86
          },
          end: {
            line: 291,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 291,
            column: 102
          },
          end: {
            line: 291,
            column: 106
          }
        }, {
          start: {
            line: 291,
            column: 109
          },
          end: {
            line: 291,
            column: 111
          }
        }],
        line: 291
      },
      "37": {
        loc: {
          start: {
            line: 291,
            column: 118
          },
          end: {
            line: 291,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 291,
            column: 118
          },
          end: {
            line: 291,
            column: 134
          }
        }, {
          start: {
            line: 291,
            column: 138
          },
          end: {
            line: 291,
            column: 154
          }
        }],
        line: 291
      },
      "38": {
        loc: {
          start: {
            line: 300,
            column: 36
          },
          end: {
            line: 300,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 300,
            column: 51
          },
          end: {
            line: 300,
            column: 72
          }
        }, {
          start: {
            line: 300,
            column: 75
          },
          end: {
            line: 300,
            column: 77
          }
        }],
        line: 300
      },
      "39": {
        loc: {
          start: {
            line: 301,
            column: 21
          },
          end: {
            line: 301,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 36
          },
          end: {
            line: 301,
            column: 75
          }
        }, {
          start: {
            line: 301,
            column: 78
          },
          end: {
            line: 301,
            column: 80
          }
        }],
        line: 301
      },
      "40": {
        loc: {
          start: {
            line: 302,
            column: 21
          },
          end: {
            line: 302,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 49
          },
          end: {
            line: 302,
            column: 101
          }
        }, {
          start: {
            line: 302,
            column: 104
          },
          end: {
            line: 302,
            column: 106
          }
        }],
        line: 302
      },
      "41": {
        loc: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 310,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 305
      },
      "42": {
        loc: {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 308,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "43": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 331,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "44": {
        loc: {
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 16
          },
          end: {
            line: 361,
            column: 17
          }
        }, {
          start: {
            line: 346,
            column: 21
          },
          end: {
            line: 361,
            column: 17
          }
        }],
        line: 334
      },
      "45": {
        loc: {
          start: {
            line: 337,
            column: 34
          },
          end: {
            line: 337,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 34
          },
          end: {
            line: 337,
            column: 48
          }
        }, {
          start: {
            line: 337,
            column: 52
          },
          end: {
            line: 337,
            column: 54
          }
        }],
        line: 337
      },
      "46": {
        loc: {
          start: {
            line: 338,
            column: 63
          },
          end: {
            line: 338,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 338,
            column: 63
          },
          end: {
            line: 338,
            column: 77
          }
        }, {
          start: {
            line: 338,
            column: 81
          },
          end: {
            line: 338,
            column: 114
          }
        }],
        line: 338
      },
      "47": {
        loc: {
          start: {
            line: 349,
            column: 74
          },
          end: {
            line: 349,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 74
          },
          end: {
            line: 349,
            column: 90
          }
        }, {
          start: {
            line: 349,
            column: 94
          },
          end: {
            line: 349,
            column: 103
          }
        }],
        line: 349
      },
      "48": {
        loc: {
          start: {
            line: 352,
            column: 38
          },
          end: {
            line: 352,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 352,
            column: 38
          },
          end: {
            line: 352,
            column: 56
          }
        }, {
          start: {
            line: 352,
            column: 60
          },
          end: {
            line: 352,
            column: 62
          }
        }],
        line: 352
      },
      "49": {
        loc: {
          start: {
            line: 353,
            column: 67
          },
          end: {
            line: 353,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 353,
            column: 67
          },
          end: {
            line: 353,
            column: 81
          }
        }, {
          start: {
            line: 353,
            column: 85
          },
          end: {
            line: 353,
            column: 118
          }
        }],
        line: 353
      },
      "50": {
        loc: {
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 16
          },
          end: {
            line: 368,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "51": {
        loc: {
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 12
          },
          end: {
            line: 391,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "52": {
        loc: {
          start: {
            line: 397,
            column: 20
          },
          end: {
            line: 398,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 397,
            column: 20
          },
          end: {
            line: 398,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 397
      },
      "53": {
        loc: {
          start: {
            line: 397,
            column: 24
          },
          end: {
            line: 397,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 24
          },
          end: {
            line: 397,
            column: 45
          }
        }, {
          start: {
            line: 397,
            column: 49
          },
          end: {
            line: 397,
            column: 65
          }
        }],
        line: 397
      },
      "54": {
        loc: {
          start: {
            line: 400,
            column: 34
          },
          end: {
            line: 400,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 400,
            column: 34
          },
          end: {
            line: 400,
            column: 52
          }
        }, {
          start: {
            line: 400,
            column: 56
          },
          end: {
            line: 400,
            column: 58
          }
        }],
        line: 400
      },
      "55": {
        loc: {
          start: {
            line: 402,
            column: 24
          },
          end: {
            line: 403,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 402,
            column: 24
          },
          end: {
            line: 403,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 402
      },
      "56": {
        loc: {
          start: {
            line: 402,
            column: 28
          },
          end: {
            line: 402,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 402,
            column: 28
          },
          end: {
            line: 402,
            column: 41
          }
        }, {
          start: {
            line: 402,
            column: 45
          },
          end: {
            line: 402,
            column: 79
          }
        }],
        line: 402
      },
      "57": {
        loc: {
          start: {
            line: 404,
            column: 24
          },
          end: {
            line: 411,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 404,
            column: 24
          },
          end: {
            line: 411,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 404
      },
      "58": {
        loc: {
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 415,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 415,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "59": {
        loc: {
          start: {
            line: 416,
            column: 24
          },
          end: {
            line: 418,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 24
          },
          end: {
            line: 418,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "60": {
        loc: {
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 16
          },
          end: {
            line: 427,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      },
      "61": {
        loc: {
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 12
          },
          end: {
            line: 447,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "62": {
        loc: {
          start: {
            line: 450,
            column: 30
          },
          end: {
            line: 450,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 450,
            column: 30
          },
          end: {
            line: 450,
            column: 44
          }
        }, {
          start: {
            line: 450,
            column: 48
          },
          end: {
            line: 450,
            column: 50
          }
        }],
        line: 450
      },
      "63": {
        loc: {
          start: {
            line: 452,
            column: 16
          },
          end: {
            line: 454,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 16
          },
          end: {
            line: 454,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "64": {
        loc: {
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 472,
            column: 16
          },
          end: {
            line: 474,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 472
      },
      "65": {
        loc: {
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 495,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 12
          },
          end: {
            line: 495,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "66": {
        loc: {
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 508,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 16
          },
          end: {
            line: 508,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "67": {
        loc: {
          start: {
            line: 510,
            column: 75
          },
          end: {
            line: 510,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 510,
            column: 88
          },
          end: {
            line: 510,
            column: 106
          }
        }, {
          start: {
            line: 510,
            column: 109
          },
          end: {
            line: 510,
            column: 111
          }
        }],
        line: 510
      },
      "68": {
        loc: {
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 517,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 515,
            column: 16
          },
          end: {
            line: 517,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 515
      },
      "69": {
        loc: {
          start: {
            line: 535,
            column: 12
          },
          end: {
            line: 537,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 535,
            column: 12
          },
          end: {
            line: 537,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 535
      },
      "70": {
        loc: {
          start: {
            line: 540,
            column: 37
          },
          end: {
            line: 542,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 541,
            column: 22
          },
          end: {
            line: 541,
            column: 85
          }
        }, {
          start: {
            line: 542,
            column: 22
          },
          end: {
            line: 542,
            column: 39
          }
        }],
        line: 540
      },
      "71": {
        loc: {
          start: {
            line: 543,
            column: 37
          },
          end: {
            line: 545,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 544,
            column: 22
          },
          end: {
            line: 544,
            column: 92
          }
        }, {
          start: {
            line: 545,
            column: 22
          },
          end: {
            line: 545,
            column: 38
          }
        }],
        line: 543
      },
      "72": {
        loc: {
          start: {
            line: 547,
            column: 35
          },
          end: {
            line: 547,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 547,
            column: 61
          },
          end: {
            line: 547,
            column: 68
          }
        }, {
          start: {
            line: 547,
            column: 71
          },
          end: {
            line: 547,
            column: 77
          }
        }],
        line: 547
      },
      "73": {
        loc: {
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 553,
            column: 16
          },
          end: {
            line: 555,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 553
      },
      "74": {
        loc: {
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 575,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 573,
            column: 12
          },
          end: {
            line: 575,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 573
      },
      "75": {
        loc: {
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 580,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 578,
            column: 16
          },
          end: {
            line: 580,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 578
      },
      "76": {
        loc: {
          start: {
            line: 583,
            column: 41
          },
          end: {
            line: 585,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 584,
            column: 26
          },
          end: {
            line: 584,
            column: 92
          }
        }, {
          start: {
            line: 585,
            column: 26
          },
          end: {
            line: 585,
            column: 28
          }
        }],
        line: 583
      },
      "77": {
        loc: {
          start: {
            line: 594,
            column: 16
          },
          end: {
            line: 596,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 594,
            column: 16
          },
          end: {
            line: 596,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 594
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nCommunityPackage,\n  N8nNodeTypeDescription,\n  N8nWorkflow,\n  N8nNode,\n  ApiResponse,\n  CommunityPackageInstallRequest,\n  CommunityPackageUpdateRequest,\n  NodeSearchResult,\n  NodeUsageStats,\n  NodeUpdateRequest,\n  DynamicNodeOptions,\n  AINodeClassification,\n  AINodeSuggestion,\n} from '../types/n8n.js';\n\n// Validation Schemas\nconst PackageNameSchema = z.object({\n  packageName: z.string().min(1, 'Package name is required'),\n});\n\nconst InstallPackageSchema = z.object({\n  name: z.string().min(1, 'Package name is required'),\n  version: z.string().optional(),\n});\n\nconst SearchNodesSchema = z.object({\n  nodeType: z.string().optional(),\n  workflowId: z.string().optional(),\n  activeOnly: z.boolean().optional().default(false),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst NodeTypeSchema = z.object({\n  nodeType: z.string().min(1, 'Node type is required'),\n});\n\nconst UpdateNodeSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  updates: z.object({\n    name: z.string().optional(),\n    parameters: z.record(z.unknown()).optional(),\n    disabled: z.boolean().optional(),\n    notes: z.string().optional(),\n    position: z.tuple([z.number(), z.number()]).optional(),\n  }),\n});\n\nconst DynamicParametersSchema = z.object({\n  property: z.string().min(1, 'Property name is required'),\n  nodeType: z.string().min(1, 'Node type is required'),\n  currentNodeParameters: z.record(z.unknown()).optional().default({}),\n  credentials: z.record(z.unknown()).optional(),\n  path: z.string().optional(),\n  methodName: z.string().optional(),\n  loadOptionsMethod: z.string().optional(),\n});\n\n// Helper Functions\nfunction formatPackageList(packages: N8nCommunityPackage[]): string {\n  if (packages.length === 0) {\n    return 'No community packages installed.';\n  }\n\n  return packages\n    .map(pkg => {\n      const nodeCount = pkg.installedNodes?.length || 0;\n      const status = pkg.failedLoading ? ' (\u26A0\uFE0F Failed Loading)' : '';\n      return `\u2022 ${pkg.packageName}@${pkg.installedVersion}${status}\\n  ${nodeCount} node(s) installed\\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatNodeTypeList(nodeTypes: N8nNodeTypeDescription[]): string {\n  if (nodeTypes.length === 0) {\n    return 'No node types found.';\n  }\n\n  return nodeTypes\n    .map(node => {\n      const groups = node.group.join(', ');\n      const credentials = node.credentials?.length\n        ? `\\n  Credentials: ${node.credentials.map(c => c.name).join(', ')}`\n        : '';\n      return `\u2022 ${node.displayName} (${node.name})\\n  Version: ${node.version}\\n  Groups: ${groups}${credentials}\\n  ${node.description}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatSearchResults(results: NodeSearchResult[]): string {\n  if (results.length === 0) {\n    return 'No nodes found matching the search criteria.';\n  }\n\n  return results\n    .map(result => {\n      const status = result.isWorkflowActive ? '\u2705 Active' : '\u274C Inactive';\n      const disabled = result.node.disabled ? ' (Disabled)' : '';\n      return `\u2022 ${result.node.name} (${result.node.type})${disabled}\\n  Workflow: ${result.workflowName} (${result.workflowId})\\n  Status: ${status}\\n  Position: [${result.node.position.join(', ')}]`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatUsageStats(stats: NodeUsageStats[]): string {\n  if (stats.length === 0) {\n    return 'No usage statistics found.';\n  }\n\n  return stats\n    .map(stat => {\n      const lastUsed = stat.lastUsed\n        ? `\\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}`\n        : '';\n      return `\u2022 ${stat.nodeType}\\n  Total Usage: ${stat.totalCount} times\\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;\n    })\n    .join('\\n\\n');\n}\n\nexport function createNodeManagementTools(getClient: () => N8nClient | null, server: any) {\n  // Community Package Management Tools\n  server.addTool({\n    name: 'list-community-packages',\n    description: 'List all installed community packages and their node types',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List Community Packages',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const response = await client.getCommunityPackages();\n        return formatPackageList(response.data);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list community packages: ${error.message}`);\n        }\n        throw new UserError('Failed to list community packages with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'install-community-package',\n    description: 'Install a community package from npm registry',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Install Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageInstallRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const installedPackage = await client.installCommunityPackage(packageData);\n        const nodeCount = installedPackage.installedNodes?.length || 0;\n\n        return `\u2705 Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\\n\\nInstalled ${nodeCount} new node type(s):\\n${installedPackage.installedNodes?.map(node => `\u2022 ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('already installed')) {\n            throw new UserError(\n              `Package ${args.name} is already installed. Use update-community-package to update it.`\n            );\n          }\n          throw new UserError(`Failed to install package: ${error.message}`);\n        }\n        throw new UserError('Failed to install package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-community-package',\n    description: 'Update an installed community package to a newer version',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Update Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageUpdateRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const updatedPackage = await client.updateCommunityPackage(args.name, packageData);\n        const nodeCount = updatedPackage.installedNodes?.length || 0;\n\n        return `\u2705 Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\\n\\nPackage contains ${nodeCount} node type(s):\\n${updatedPackage.installedNodes?.map(node => `\u2022 ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(\n              `Package ${args.name} is not installed. Use install-community-package to install it first.`\n            );\n          }\n          throw new UserError(`Failed to update package: ${error.message}`);\n        }\n        throw new UserError('Failed to update package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'uninstall-community-package',\n    description: 'Remove a community package and all its node types',\n    parameters: PackageNameSchema,\n    annotations: {\n      title: 'Uninstall Community Package',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof PackageNameSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.uninstallCommunityPackage(args.packageName);\n        return `\u2705 Successfully uninstalled package: ${args.packageName}\\n\\n\u26A0\uFE0F Note: Any workflows using nodes from this package may no longer function correctly.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(`Package ${args.packageName} is not installed.`);\n          }\n          throw new UserError(`Failed to uninstall package: ${error.message}`);\n        }\n        throw new UserError('Failed to uninstall package with unknown error');\n      }\n    },\n  });\n\n  // Node Type Discovery Tools\n  server.addTool({\n    name: 'list-node-types',\n    description: 'List all available node types (core and community)',\n    parameters: z.object({\n      communityOnly: z.boolean().optional().default(false),\n      limit: z.number().min(1).max(500).optional().default(100),\n    }),\n    annotations: {\n      title: 'List Node Types',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { communityOnly?: boolean; limit?: number }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeTypes = args.communityOnly\n          ? await client.getCommunityNodeTypes()\n          : await client.getNodeTypes();\n\n        const limitedResults = nodeTypes.slice(0, args.limit);\n        const hasMore = nodeTypes.length > (args.limit || 100);\n\n        let result = formatNodeTypeList(limitedResults);\n        if (hasMore) {\n          result += `\\n\\n... and ${nodeTypes.length - (args.limit || 100)} more node types. Use a higher limit to see more.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list node types: ${error.message}`);\n        }\n        throw new UserError('Failed to list node types with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-node-type-details',\n    description:\n      'Get detailed information about a specific node type including parameters and credentials',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get Node Type Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeType = await client.getNodeType(args.nodeType);\n\n        const credentials =\n          nodeType.credentials\n            ?.map(cred => `\u2022 ${cred.name}${cred.required ? ' (Required)' : ' (Optional)'}`)\n            .join('\\n') || 'None';\n\n        const properties = nodeType.properties\n          .slice(0, 10)\n          .map(\n            prop =>\n              `\u2022 ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ? ' *' : ''}\\n  ${prop.description || 'No description'}`\n          )\n          .join('\\n');\n\n        const hasMoreProps = nodeType.properties.length > 10;\n\n        return (\n          `\uD83D\uDCCB Node Type: ${nodeType.displayName}\\n\\n` +\n          `\uD83D\uDD27 Technical Name: ${nodeType.name}\\n` +\n          `\uD83D\uDCE6 Version: ${nodeType.version}\\n` +\n          `\uD83D\uDCC1 Groups: ${nodeType.group.join(', ')}\\n` +\n          `\uD83D\uDCDD Description: ${nodeType.description}\\n\\n` +\n          `\uD83D\uDD10 Credentials:\\n${credentials}\\n\\n` +\n          `\u2699\uFE0F Parameters${hasMoreProps ? ' (showing first 10)' : ''}:\\n${properties}` +\n          (hasMoreProps ? '\\n\\n... and more parameters available' : '') +\n          (nodeType.documentationUrl ? `\\n\\n\uD83D\uDCD6 Documentation: ${nodeType.documentationUrl}` : '')\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found')) {\n            throw new UserError(\n              `Node type '${args.nodeType}' not found. Check the name and try again.`\n            );\n          }\n          throw new UserError(`Failed to get node type details: ${error.message}`);\n        }\n        throw new UserError('Failed to get node type details with unknown error');\n      }\n    },\n  });\n\n  // Workflow Node Analysis Tools\n  server.addTool({\n    name: 'search-workflow-nodes',\n    description: 'Search for nodes across workflows by type, name, or workflow criteria',\n    parameters: SearchNodesSchema,\n    annotations: {\n      title: 'Search Workflow Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SearchNodesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const results: NodeSearchResult[] = [];\n\n        if (args.workflowId) {\n          // Search within specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const nodes = workflow.nodes || [];\n\n          const filteredNodes = nodes.filter(\n            node => !args.nodeType || node.type.includes(args.nodeType)\n          );\n\n          results.push(\n            ...filteredNodes.map(node => ({\n              workflowId: workflow.id,\n              workflowName: workflow.name,\n              node,\n              isWorkflowActive: workflow.active,\n            }))\n          );\n        } else {\n          // Search across all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: args.limit });\n          const workflows = workflowsResponse.data.filter(wf => !args.activeOnly || wf.active);\n\n          for (const workflow of workflows) {\n            const fullWorkflow = await client.getWorkflow(workflow.id);\n            const nodes = fullWorkflow.nodes || [];\n\n            const filteredNodes = nodes.filter(\n              node => !args.nodeType || node.type.includes(args.nodeType)\n            );\n\n            results.push(\n              ...filteredNodes.map(node => ({\n                workflowId: workflow.id,\n                workflowName: workflow.name,\n                node,\n                isWorkflowActive: workflow.active,\n              }))\n            );\n          }\n        }\n\n        const limitedResults = results.slice(0, args.limit);\n        return formatSearchResults(limitedResults);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to search nodes: ${error.message}`);\n        }\n        throw new UserError('Failed to search nodes with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'analyze-node-usage',\n    description: 'Analyze usage statistics for node types across all workflows',\n    parameters: z.object({\n      nodeType: z.string().optional(),\n      includeInactive: z.boolean().optional().default(false),\n    }),\n    annotations: {\n      title: 'Analyze Node Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { nodeType?: string; includeInactive?: boolean }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const workflows = workflowsResponse.data;\n        const usageMap: Record<string, NodeUsageStats> = {};\n\n        for (const workflow of workflows) {\n          if (!args.includeInactive && !workflow.active) continue;\n\n          const fullWorkflow = await client.getWorkflow(workflow.id);\n          const nodes = fullWorkflow.nodes || [];\n\n          for (const node of nodes) {\n            if (args.nodeType && !node.type.includes(args.nodeType)) continue;\n\n            if (!usageMap[node.type]) {\n              usageMap[node.type] = {\n                nodeType: node.type,\n                totalCount: 0,\n                activeWorkflowCount: 0,\n                workflowIds: [],\n              };\n            }\n\n            usageMap[node.type].totalCount++;\n            if (workflow.active) {\n              usageMap[node.type].activeWorkflowCount++;\n            }\n            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {\n              usageMap[node.type].workflowIds.push(workflow.id);\n            }\n          }\n        }\n\n        const stats = Object.values(usageMap).sort((a, b) => b.totalCount - a.totalCount);\n        return formatUsageStats(stats);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node usage: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node usage with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-workflow-node',\n    description: 'Update properties of a specific node within a workflow',\n    parameters: UpdateNodeSchema,\n    annotations: {\n      title: 'Update Workflow Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof UpdateNodeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n\n        const nodeIndex = nodes.findIndex(node => node.id === args.nodeId);\n        if (nodeIndex === -1) {\n          throw new UserError(\n            `Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`\n          );\n        }\n\n        const originalNode = nodes[nodeIndex];\n        const updatedNode = {\n          ...originalNode,\n          ...args.updates,\n          id: originalNode.id, // Preserve original ID\n          type: originalNode.type, // Preserve original type\n        };\n\n        nodes[nodeIndex] = updatedNode;\n\n        await client.updateWorkflow(args.workflowId, {\n          nodes: nodes as Array<Record<string, unknown>>,\n        });\n\n        const changes = Object.keys(args.updates)\n          .map(\n            key =>\n              `\u2022 ${key}: ${JSON.stringify((originalNode as any)[key])} \u2192 ${JSON.stringify((args.updates as any)[key])}`\n          )\n          .join('\\n');\n\n        return `\u2705 Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\\n\\nChanges made:\\n${changes}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update node: ${error.message}`);\n        }\n        throw new UserError('Failed to update node with unknown error');\n      }\n    },\n  });\n\n  // Dynamic Parameters and AI Tools\n  server.addTool({\n    name: 'get-dynamic-node-parameters',\n    description: 'Get dynamic parameter options for a node type based on current configuration',\n    parameters: DynamicParametersSchema,\n    annotations: {\n      title: 'Get Dynamic Node Parameters',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof DynamicParametersSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: DynamicNodeOptions = {\n          property: args.property,\n          currentNodeParameters: args.currentNodeParameters,\n          credentials: args.credentials,\n          path: args.path,\n          methodName: args.methodName,\n          loadOptionsMethod: args.loadOptionsMethod,\n        };\n\n        const parameters = await client.getDynamicNodeParameters(options);\n\n        if (parameters.length === 0) {\n          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;\n        }\n\n        const formatted = parameters\n          .map(\n            param => `\u2022 ${param.displayName}: ${param.value}${param.type ? ` (${param.type})` : ''}`\n          )\n          .join('\\n');\n\n        return `\uD83D\uDD27 Dynamic parameters for '${args.property}':\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get dynamic parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to get dynamic parameters with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'classify-ai-node',\n    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Classify AI Node',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const classification = await client.classifyAINode(args.nodeType);\n\n        const capabilities =\n          classification.aiCapabilities.length > 0\n            ? classification.aiCapabilities.map(cap => `\u2022 ${cap}`).join('\\n')\n            : 'None identified';\n\n        const integrations =\n          classification.suggestedIntegrations.length > 0\n            ? classification.suggestedIntegrations.map(int => `\u2022 ${int}`).join('\\n')\n            : 'None suggested';\n\n        return (\n          `\uD83E\uDD16 AI Classification for ${args.nodeType}\\n\\n` +\n          `Is AI Node: ${classification.isAINode ? '\u2705 Yes' : '\u274C No'}\\n` +\n          `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\\n\\n` +\n          `\uD83C\uDFAF AI Capabilities:\\n${capabilities}\\n\\n` +\n          `\uD83D\uDD17 Suggested Integrations:\\n${integrations}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to classify AI node: ${error.message}`);\n        }\n        throw new UserError('Failed to classify AI node with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-ai-node-suggestions',\n    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get AI Node Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const suggestions = await client.getAINodeSuggestions(args.nodeType);\n\n        if (suggestions.length === 0) {\n          return `No AI suggestions available for node type '${args.nodeType}'`;\n        }\n\n        const formatted = suggestions\n          .map((suggestion, index) => {\n            const alternatives =\n              suggestion.alternativeNodes.length > 0\n                ? `\\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`\n                : '';\n\n            return (\n              `${index + 1}. ${suggestion.suggestion}\\n` +\n              `   Reasoning: ${suggestion.reasoning}\\n` +\n              `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`\n            );\n          })\n          .join('\\n\\n');\n\n        return `\uD83D\uDCA1 AI Suggestions for ${args.nodeType}:\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get AI suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to get AI suggestions with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7f394f3859d95448d2a08a79f2063cb27bce0dfd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qv86yv8dz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qv86yv8dz();
cov_2qv86yv8dz().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qv86yv8dz().s[1]++;
exports.createNodeManagementTools = createNodeManagementTools;
const zod_1 =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[3]++, require("fastmcp"));
// Validation Schemas
const PackageNameSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[4]++, zod_1.z.object({
  packageName: zod_1.z.string().min(1, 'Package name is required')
}));
const InstallPackageSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[5]++, zod_1.z.object({
  name: zod_1.z.string().min(1, 'Package name is required'),
  version: zod_1.z.string().optional()
}));
const SearchNodesSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[6]++, zod_1.z.object({
  nodeType: zod_1.z.string().optional(),
  workflowId: zod_1.z.string().optional(),
  activeOnly: zod_1.z.boolean().optional().default(false),
  limit: zod_1.z.number().min(1).max(100).optional().default(50)
}));
const NodeTypeSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[7]++, zod_1.z.object({
  nodeType: zod_1.z.string().min(1, 'Node type is required')
}));
const UpdateNodeSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[8]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  updates: zod_1.z.object({
    name: zod_1.z.string().optional(),
    parameters: zod_1.z.record(zod_1.z.unknown()).optional(),
    disabled: zod_1.z.boolean().optional(),
    notes: zod_1.z.string().optional(),
    position: zod_1.z.tuple([zod_1.z.number(), zod_1.z.number()]).optional()
  })
}));
const DynamicParametersSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[9]++, zod_1.z.object({
  property: zod_1.z.string().min(1, 'Property name is required'),
  nodeType: zod_1.z.string().min(1, 'Node type is required'),
  currentNodeParameters: zod_1.z.record(zod_1.z.unknown()).optional().default({}),
  credentials: zod_1.z.record(zod_1.z.unknown()).optional(),
  path: zod_1.z.string().optional(),
  methodName: zod_1.z.string().optional(),
  loadOptionsMethod: zod_1.z.string().optional()
}));
// Helper Functions
function formatPackageList(packages) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[0]++;
  cov_2qv86yv8dz().s[10]++;
  if (packages.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[0][0]++;
    cov_2qv86yv8dz().s[11]++;
    return 'No community packages installed.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[0][1]++;
  }
  cov_2qv86yv8dz().s[12]++;
  return packages.map(pkg => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[1]++;
    const nodeCount =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[13]++,
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[1][0]++, pkg.installedNodes?.length) ||
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[1][1]++, 0));
    const status =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[14]++, pkg.failedLoading ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[2][0]++, ' (⚠️ Failed Loading)') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[2][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[15]++;
    return `• ${pkg.packageName}@${pkg.installedVersion}${status}\n  ${nodeCount} node(s) installed\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;
  }).join('\n\n');
}
function formatNodeTypeList(nodeTypes) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[2]++;
  cov_2qv86yv8dz().s[16]++;
  if (nodeTypes.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[3][0]++;
    cov_2qv86yv8dz().s[17]++;
    return 'No node types found.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[3][1]++;
  }
  cov_2qv86yv8dz().s[18]++;
  return nodeTypes.map(node => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[3]++;
    const groups =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[19]++, node.group.join(', '));
    const credentials =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[20]++, node.credentials?.length ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[4][0]++, `\n  Credentials: ${node.credentials.map(c => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[4]++;
      cov_2qv86yv8dz().s[21]++;
      return c.name;
    }).join(', ')}`) :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[4][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[22]++;
    return `• ${node.displayName} (${node.name})\n  Version: ${node.version}\n  Groups: ${groups}${credentials}\n  ${node.description}`;
  }).join('\n\n');
}
function formatSearchResults(results) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[5]++;
  cov_2qv86yv8dz().s[23]++;
  if (results.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[5][0]++;
    cov_2qv86yv8dz().s[24]++;
    return 'No nodes found matching the search criteria.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[5][1]++;
  }
  cov_2qv86yv8dz().s[25]++;
  return results.map(result => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[6]++;
    const status =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[26]++, result.isWorkflowActive ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[6][0]++, '✅ Active') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[6][1]++, '❌ Inactive'));
    const disabled =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[27]++, result.node.disabled ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[7][0]++, ' (Disabled)') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[7][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[28]++;
    return `• ${result.node.name} (${result.node.type})${disabled}\n  Workflow: ${result.workflowName} (${result.workflowId})\n  Status: ${status}\n  Position: [${result.node.position.join(', ')}]`;
  }).join('\n\n');
}
function formatUsageStats(stats) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[7]++;
  cov_2qv86yv8dz().s[29]++;
  if (stats.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[8][0]++;
    cov_2qv86yv8dz().s[30]++;
    return 'No usage statistics found.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[8][1]++;
  }
  cov_2qv86yv8dz().s[31]++;
  return stats.map(stat => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[8]++;
    const lastUsed =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[32]++, stat.lastUsed ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[9][0]++, `\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}`) :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[9][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[33]++;
    return `• ${stat.nodeType}\n  Total Usage: ${stat.totalCount} times\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;
  }).join('\n\n');
}
function createNodeManagementTools(getClient, server) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[9]++;
  cov_2qv86yv8dz().s[34]++;
  // Community Package Management Tools
  server.addTool({
    name: 'list-community-packages',
    description: 'List all installed community packages and their node types',
    parameters: zod_1.z.object({}),
    annotations: {
      title: 'List Community Packages',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async () => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[10]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[35]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[36]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[10][0]++;
        cov_2qv86yv8dz().s[37]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[10][1]++;
      }
      cov_2qv86yv8dz().s[38]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[39]++, await client.getCommunityPackages());
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[40]++;
        return formatPackageList(response.data);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[41]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[11][0]++;
          cov_2qv86yv8dz().s[42]++;
          throw new fastmcp_1.UserError(`Failed to list community packages: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[11][1]++;
        }
        cov_2qv86yv8dz().s[43]++;
        throw new fastmcp_1.UserError('Failed to list community packages with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[44]++;
  server.addTool({
    name: 'install-community-package',
    description: 'Install a community package from npm registry',
    parameters: InstallPackageSchema,
    annotations: {
      title: 'Install Community Package',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[11]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[45]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[46]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[12][0]++;
        cov_2qv86yv8dz().s[47]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[12][1]++;
      }
      cov_2qv86yv8dz().s[48]++;
      try {
        const packageData =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[49]++, {
          name: args.name,
          version: args.version
        });
        const installedPackage =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[50]++, await client.installCommunityPackage(packageData));
        const nodeCount =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[51]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[13][0]++, installedPackage.installedNodes?.length) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[13][1]++, 0));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[52]++;
        return `✅ Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\n\nInstalled ${nodeCount} new node type(s):\n${
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[14][0]++, installedPackage.installedNodes?.map(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[12]++;
          cov_2qv86yv8dz().s[53]++;
          return `• ${node.displayName} (${node.name})`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[14][1]++, 'No nodes listed')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[54]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[15][0]++;
          cov_2qv86yv8dz().s[55]++;
          if (error.message.includes('already installed')) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[16][0]++;
            cov_2qv86yv8dz().s[56]++;
            throw new fastmcp_1.UserError(`Package ${args.name} is already installed. Use update-community-package to update it.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[16][1]++;
          }
          cov_2qv86yv8dz().s[57]++;
          throw new fastmcp_1.UserError(`Failed to install package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[15][1]++;
        }
        cov_2qv86yv8dz().s[58]++;
        throw new fastmcp_1.UserError('Failed to install package with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[59]++;
  server.addTool({
    name: 'update-community-package',
    description: 'Update an installed community package to a newer version',
    parameters: InstallPackageSchema,
    annotations: {
      title: 'Update Community Package',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[13]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[60]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[61]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[17][0]++;
        cov_2qv86yv8dz().s[62]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[17][1]++;
      }
      cov_2qv86yv8dz().s[63]++;
      try {
        const packageData =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[64]++, {
          name: args.name,
          version: args.version
        });
        const updatedPackage =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[65]++, await client.updateCommunityPackage(args.name, packageData));
        const nodeCount =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[66]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[18][0]++, updatedPackage.installedNodes?.length) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[18][1]++, 0));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[67]++;
        return `✅ Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\n\nPackage contains ${nodeCount} node type(s):\n${
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[19][0]++, updatedPackage.installedNodes?.map(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[14]++;
          cov_2qv86yv8dz().s[68]++;
          return `• ${node.displayName} (${node.name})`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[19][1]++, 'No nodes listed')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[69]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[20][0]++;
          cov_2qv86yv8dz().s[70]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[22][0]++, error.message.includes('not found')) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[22][1]++, error.message.includes('not installed'))) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[21][0]++;
            cov_2qv86yv8dz().s[71]++;
            throw new fastmcp_1.UserError(`Package ${args.name} is not installed. Use install-community-package to install it first.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[21][1]++;
          }
          cov_2qv86yv8dz().s[72]++;
          throw new fastmcp_1.UserError(`Failed to update package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[20][1]++;
        }
        cov_2qv86yv8dz().s[73]++;
        throw new fastmcp_1.UserError('Failed to update package with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[74]++;
  server.addTool({
    name: 'uninstall-community-package',
    description: 'Remove a community package and all its node types',
    parameters: PackageNameSchema,
    annotations: {
      title: 'Uninstall Community Package',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[15]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[75]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[76]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[23][0]++;
        cov_2qv86yv8dz().s[77]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[23][1]++;
      }
      cov_2qv86yv8dz().s[78]++;
      try {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[79]++;
        await client.uninstallCommunityPackage(args.packageName);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[80]++;
        return `✅ Successfully uninstalled package: ${args.packageName}\n\n⚠️ Note: Any workflows using nodes from this package may no longer function correctly.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[81]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[24][0]++;
          cov_2qv86yv8dz().s[82]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[26][0]++, error.message.includes('not found')) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[26][1]++, error.message.includes('not installed'))) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[25][0]++;
            cov_2qv86yv8dz().s[83]++;
            throw new fastmcp_1.UserError(`Package ${args.packageName} is not installed.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[25][1]++;
          }
          cov_2qv86yv8dz().s[84]++;
          throw new fastmcp_1.UserError(`Failed to uninstall package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[24][1]++;
        }
        cov_2qv86yv8dz().s[85]++;
        throw new fastmcp_1.UserError('Failed to uninstall package with unknown error');
      }
    }
  });
  // Node Type Discovery Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[86]++;
  server.addTool({
    name: 'list-node-types',
    description: 'List all available node types (core and community)',
    parameters: zod_1.z.object({
      communityOnly: zod_1.z.boolean().optional().default(false),
      limit: zod_1.z.number().min(1).max(500).optional().default(100)
    }),
    annotations: {
      title: 'List Node Types',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[16]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[87]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[88]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[27][0]++;
        cov_2qv86yv8dz().s[89]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[27][1]++;
      }
      cov_2qv86yv8dz().s[90]++;
      try {
        const nodeTypes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[91]++, args.communityOnly ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[28][0]++, await client.getCommunityNodeTypes()) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[28][1]++, await client.getNodeTypes()));
        const limitedResults =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[92]++, nodeTypes.slice(0, args.limit));
        const hasMore =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[93]++, nodeTypes.length > (
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[29][0]++, args.limit) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[29][1]++, 100)));
        let result =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[94]++, formatNodeTypeList(limitedResults));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[95]++;
        if (hasMore) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[30][0]++;
          cov_2qv86yv8dz().s[96]++;
          result += `\n\n... and ${nodeTypes.length - (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[31][0]++, args.limit) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[31][1]++, 100))} more node types. Use a higher limit to see more.`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[30][1]++;
        }
        cov_2qv86yv8dz().s[97]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[98]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[32][0]++;
          cov_2qv86yv8dz().s[99]++;
          throw new fastmcp_1.UserError(`Failed to list node types: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[32][1]++;
        }
        cov_2qv86yv8dz().s[100]++;
        throw new fastmcp_1.UserError('Failed to list node types with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[101]++;
  server.addTool({
    name: 'get-node-type-details',
    description: 'Get detailed information about a specific node type including parameters and credentials',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Get Node Type Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[17]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[102]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[103]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[33][0]++;
        cov_2qv86yv8dz().s[104]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[33][1]++;
      }
      cov_2qv86yv8dz().s[105]++;
      try {
        const nodeType =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[106]++, await client.getNodeType(args.nodeType));
        const credentials =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[107]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[34][0]++, nodeType.credentials?.map(cred => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[18]++;
          cov_2qv86yv8dz().s[108]++;
          return `• ${cred.name}${cred.required ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[35][0]++, ' (Required)') :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[35][1]++, ' (Optional)')}`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[34][1]++, 'None'));
        const properties =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[109]++, nodeType.properties.slice(0, 10).map(prop => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[19]++;
          cov_2qv86yv8dz().s[110]++;
          return `• ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[36][0]++, ' *') :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[36][1]++, '')}\n  ${
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[37][0]++, prop.description) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[37][1]++, 'No description')}`;
        }).join('\n'));
        const hasMoreProps =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[111]++, nodeType.properties.length > 10);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[112]++;
        return `📋 Node Type: ${nodeType.displayName}\n\n` + `🔧 Technical Name: ${nodeType.name}\n` + `📦 Version: ${nodeType.version}\n` + `📁 Groups: ${nodeType.group.join(', ')}\n` + `📝 Description: ${nodeType.description}\n\n` + `🔐 Credentials:\n${credentials}\n\n` + `⚙️ Parameters${hasMoreProps ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[38][0]++, ' (showing first 10)') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[38][1]++, '')}:\n${properties}` + (hasMoreProps ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[39][0]++, '\n\n... and more parameters available') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[39][1]++, '')) + (nodeType.documentationUrl ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[40][0]++, `\n\n📖 Documentation: ${nodeType.documentationUrl}`) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[40][1]++, ''));
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[113]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[41][0]++;
          cov_2qv86yv8dz().s[114]++;
          if (error.message.includes('not found')) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[42][0]++;
            cov_2qv86yv8dz().s[115]++;
            throw new fastmcp_1.UserError(`Node type '${args.nodeType}' not found. Check the name and try again.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[42][1]++;
          }
          cov_2qv86yv8dz().s[116]++;
          throw new fastmcp_1.UserError(`Failed to get node type details: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[41][1]++;
        }
        cov_2qv86yv8dz().s[117]++;
        throw new fastmcp_1.UserError('Failed to get node type details with unknown error');
      }
    }
  });
  // Workflow Node Analysis Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[118]++;
  server.addTool({
    name: 'search-workflow-nodes',
    description: 'Search for nodes across workflows by type, name, or workflow criteria',
    parameters: SearchNodesSchema,
    annotations: {
      title: 'Search Workflow Nodes',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[20]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[119]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[120]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[43][0]++;
        cov_2qv86yv8dz().s[121]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[43][1]++;
      }
      cov_2qv86yv8dz().s[122]++;
      try {
        const results =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[123]++, []);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[124]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[44][0]++;
          // Search within specific workflow
          const workflow =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[125]++, await client.getWorkflow(args.workflowId));
          const nodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[126]++,
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[45][0]++, workflow.nodes) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[45][1]++, []));
          const filteredNodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[127]++, nodes.filter(node => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[21]++;
            cov_2qv86yv8dz().s[128]++;
            return /* istanbul ignore next */(cov_2qv86yv8dz().b[46][0]++, !args.nodeType) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[46][1]++, node.type.includes(args.nodeType));
          }));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[129]++;
          results.push(...filteredNodes.map(node => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[22]++;
            cov_2qv86yv8dz().s[130]++;
            return {
              workflowId: workflow.id,
              workflowName: workflow.name,
              node,
              isWorkflowActive: workflow.active
            };
          }));
        } else {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[44][1]++;
          // Search across all workflows
          const workflowsResponse =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[131]++, await client.getWorkflows({
            limit: args.limit
          }));
          const workflows =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[132]++, workflowsResponse.data.filter(wf => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[23]++;
            cov_2qv86yv8dz().s[133]++;
            return /* istanbul ignore next */(cov_2qv86yv8dz().b[47][0]++, !args.activeOnly) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[47][1]++, wf.active);
          }));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[134]++;
          for (const workflow of workflows) {
            const fullWorkflow =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[135]++, await client.getWorkflow(workflow.id));
            const nodes =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[136]++,
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[48][0]++, fullWorkflow.nodes) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[48][1]++, []));
            const filteredNodes =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[137]++, nodes.filter(node => {
              /* istanbul ignore next */
              cov_2qv86yv8dz().f[24]++;
              cov_2qv86yv8dz().s[138]++;
              return /* istanbul ignore next */(cov_2qv86yv8dz().b[49][0]++, !args.nodeType) ||
              /* istanbul ignore next */
              (cov_2qv86yv8dz().b[49][1]++, node.type.includes(args.nodeType));
            }));
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[139]++;
            results.push(...filteredNodes.map(node => {
              /* istanbul ignore next */
              cov_2qv86yv8dz().f[25]++;
              cov_2qv86yv8dz().s[140]++;
              return {
                workflowId: workflow.id,
                workflowName: workflow.name,
                node,
                isWorkflowActive: workflow.active
              };
            }));
          }
        }
        const limitedResults =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[141]++, results.slice(0, args.limit));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[142]++;
        return formatSearchResults(limitedResults);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[143]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[50][0]++;
          cov_2qv86yv8dz().s[144]++;
          throw new fastmcp_1.UserError(`Failed to search nodes: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[50][1]++;
        }
        cov_2qv86yv8dz().s[145]++;
        throw new fastmcp_1.UserError('Failed to search nodes with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[146]++;
  server.addTool({
    name: 'analyze-node-usage',
    description: 'Analyze usage statistics for node types across all workflows',
    parameters: zod_1.z.object({
      nodeType: zod_1.z.string().optional(),
      includeInactive: zod_1.z.boolean().optional().default(false)
    }),
    annotations: {
      title: 'Analyze Node Usage',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[26]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[147]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[148]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[51][0]++;
        cov_2qv86yv8dz().s[149]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[51][1]++;
      }
      cov_2qv86yv8dz().s[150]++;
      try {
        const workflowsResponse =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[151]++, await client.getWorkflows({
          limit: 100
        }));
        const workflows =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[152]++, workflowsResponse.data);
        const usageMap =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[153]++, {});
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[154]++;
        for (const workflow of workflows) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[155]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[53][0]++, !args.includeInactive) &&
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[53][1]++, !workflow.active)) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[52][0]++;
            cov_2qv86yv8dz().s[156]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[52][1]++;
          }
          const fullWorkflow =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[157]++, await client.getWorkflow(workflow.id));
          const nodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[158]++,
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[54][0]++, fullWorkflow.nodes) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[54][1]++, []));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[159]++;
          for (const node of nodes) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[160]++;
            if (
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[56][0]++, args.nodeType) &&
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[56][1]++, !node.type.includes(args.nodeType))) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[55][0]++;
              cov_2qv86yv8dz().s[161]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[55][1]++;
            }
            cov_2qv86yv8dz().s[162]++;
            if (!usageMap[node.type]) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[57][0]++;
              cov_2qv86yv8dz().s[163]++;
              usageMap[node.type] = {
                nodeType: node.type,
                totalCount: 0,
                activeWorkflowCount: 0,
                workflowIds: []
              };
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[57][1]++;
            }
            cov_2qv86yv8dz().s[164]++;
            usageMap[node.type].totalCount++;
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[165]++;
            if (workflow.active) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[58][0]++;
              cov_2qv86yv8dz().s[166]++;
              usageMap[node.type].activeWorkflowCount++;
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[58][1]++;
            }
            cov_2qv86yv8dz().s[167]++;
            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[59][0]++;
              cov_2qv86yv8dz().s[168]++;
              usageMap[node.type].workflowIds.push(workflow.id);
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[59][1]++;
            }
          }
        }
        const stats =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[169]++, Object.values(usageMap).sort((a, b) => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[27]++;
          cov_2qv86yv8dz().s[170]++;
          return b.totalCount - a.totalCount;
        }));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[171]++;
        return formatUsageStats(stats);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[172]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[60][0]++;
          cov_2qv86yv8dz().s[173]++;
          throw new fastmcp_1.UserError(`Failed to analyze node usage: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[60][1]++;
        }
        cov_2qv86yv8dz().s[174]++;
        throw new fastmcp_1.UserError('Failed to analyze node usage with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[175]++;
  server.addTool({
    name: 'update-workflow-node',
    description: 'Update properties of a specific node within a workflow',
    parameters: UpdateNodeSchema,
    annotations: {
      title: 'Update Workflow Node',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[28]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[176]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[177]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[61][0]++;
        cov_2qv86yv8dz().s[178]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[61][1]++;
      }
      cov_2qv86yv8dz().s[179]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[180]++, await client.getWorkflow(args.workflowId));
        const nodes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[181]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[62][0]++, workflow.nodes) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[62][1]++, []));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[182]++, nodes.findIndex(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[29]++;
          cov_2qv86yv8dz().s[183]++;
          return node.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[184]++;
        if (nodeIndex === -1) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[63][0]++;
          cov_2qv86yv8dz().s[185]++;
          throw new fastmcp_1.UserError(`Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[63][1]++;
        }
        const originalNode =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[186]++, nodes[nodeIndex]);
        const updatedNode =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[187]++, {
          ...originalNode,
          ...args.updates,
          id: originalNode.id,
          // Preserve original ID
          type: originalNode.type // Preserve original type
        });
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[188]++;
        nodes[nodeIndex] = updatedNode;
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[189]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: nodes
        });
        const changes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[190]++, Object.keys(args.updates).map(key => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[30]++;
          cov_2qv86yv8dz().s[191]++;
          return `• ${key}: ${JSON.stringify(originalNode[key])} → ${JSON.stringify(args.updates[key])}`;
        }).join('\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[192]++;
        return `✅ Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\n\nChanges made:\n${changes}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[193]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[64][0]++;
          cov_2qv86yv8dz().s[194]++;
          throw new fastmcp_1.UserError(`Failed to update node: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[64][1]++;
        }
        cov_2qv86yv8dz().s[195]++;
        throw new fastmcp_1.UserError('Failed to update node with unknown error');
      }
    }
  });
  // Dynamic Parameters and AI Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[196]++;
  server.addTool({
    name: 'get-dynamic-node-parameters',
    description: 'Get dynamic parameter options for a node type based on current configuration',
    parameters: DynamicParametersSchema,
    annotations: {
      title: 'Get Dynamic Node Parameters',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[31]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[197]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[198]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[65][0]++;
        cov_2qv86yv8dz().s[199]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[65][1]++;
      }
      cov_2qv86yv8dz().s[200]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[201]++, {
          property: args.property,
          currentNodeParameters: args.currentNodeParameters,
          credentials: args.credentials,
          path: args.path,
          methodName: args.methodName,
          loadOptionsMethod: args.loadOptionsMethod
        });
        const parameters =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[202]++, await client.getDynamicNodeParameters(options));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[203]++;
        if (parameters.length === 0) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[66][0]++;
          cov_2qv86yv8dz().s[204]++;
          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[66][1]++;
        }
        const formatted =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[205]++, parameters.map(param => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[32]++;
          cov_2qv86yv8dz().s[206]++;
          return `• ${param.displayName}: ${param.value}${param.type ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[67][0]++, ` (${param.type})`) :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[67][1]++, '')}`;
        }).join('\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[207]++;
        return `🔧 Dynamic parameters for '${args.property}':\n\n${formatted}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[208]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[68][0]++;
          cov_2qv86yv8dz().s[209]++;
          throw new fastmcp_1.UserError(`Failed to get dynamic parameters: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[68][1]++;
        }
        cov_2qv86yv8dz().s[210]++;
        throw new fastmcp_1.UserError('Failed to get dynamic parameters with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[211]++;
  server.addTool({
    name: 'classify-ai-node',
    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Classify AI Node',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[33]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[212]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[213]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[69][0]++;
        cov_2qv86yv8dz().s[214]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[69][1]++;
      }
      cov_2qv86yv8dz().s[215]++;
      try {
        const classification =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[216]++, await client.classifyAINode(args.nodeType));
        const capabilities =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[217]++, classification.aiCapabilities.length > 0 ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[70][0]++, classification.aiCapabilities.map(cap => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[34]++;
          cov_2qv86yv8dz().s[218]++;
          return `• ${cap}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[70][1]++, 'None identified'));
        const integrations =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[219]++, classification.suggestedIntegrations.length > 0 ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[71][0]++, classification.suggestedIntegrations.map(int => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[35]++;
          cov_2qv86yv8dz().s[220]++;
          return `• ${int}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[71][1]++, 'None suggested'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[221]++;
        return `🤖 AI Classification for ${args.nodeType}\n\n` + `Is AI Node: ${classification.isAINode ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[72][0]++, '✅ Yes') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[72][1]++, '❌ No')}\n` + `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\n\n` + `🎯 AI Capabilities:\n${capabilities}\n\n` + `🔗 Suggested Integrations:\n${integrations}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[222]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[73][0]++;
          cov_2qv86yv8dz().s[223]++;
          throw new fastmcp_1.UserError(`Failed to classify AI node: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[73][1]++;
        }
        cov_2qv86yv8dz().s[224]++;
        throw new fastmcp_1.UserError('Failed to classify AI node with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[225]++;
  server.addTool({
    name: 'get-ai-node-suggestions',
    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Get AI Node Suggestions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[36]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[226]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[227]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[74][0]++;
        cov_2qv86yv8dz().s[228]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[74][1]++;
      }
      cov_2qv86yv8dz().s[229]++;
      try {
        const suggestions =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[230]++, await client.getAINodeSuggestions(args.nodeType));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[231]++;
        if (suggestions.length === 0) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[75][0]++;
          cov_2qv86yv8dz().s[232]++;
          return `No AI suggestions available for node type '${args.nodeType}'`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[75][1]++;
        }
        const formatted =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[233]++, suggestions.map((suggestion, index) => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[37]++;
          const alternatives =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[234]++, suggestion.alternativeNodes.length > 0 ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[76][0]++, `\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`) :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[76][1]++, ''));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[235]++;
          return `${index + 1}. ${suggestion.suggestion}\n` + `   Reasoning: ${suggestion.reasoning}\n` + `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`;
        }).join('\n\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[236]++;
        return `💡 AI Suggestions for ${args.nodeType}:\n\n${formatted}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[237]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[77][0]++;
          cov_2qv86yv8dz().s[238]++;
          throw new fastmcp_1.UserError(`Failed to get AI suggestions: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[77][1]++;
        }
        cov_2qv86yv8dz().s[239]++;
        throw new fastmcp_1.UserError('Failed to get AI suggestions with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,