{"version":3,"names":["ParameterMapper","mapN8nParametersToMCP","nodeParameters","inputData","tool","cov_py7ubqbfc","f","mappedArguments","s","paramName","paramSchema","Object","entries","inputSchema","properties","nodeValue","b","undefined","convertValueToMCPType","default","required","includes","Error","validateMappedArguments","name","arguments","value","resolvedValue","resolveExpressions","type","convertToString","convertToNumber","convertToInteger","convertToBoolean","convertToArray","convertToObject","expressionRegex","replace","match","fieldPath","firstItem","json","fieldValue","getNestedValue","String","obj","path","split","reduce","current","key","schema","stringValue","JSON","stringify","minLength","length","maxLength","pattern","RegExp","test","enum","join","numberValue","parseFloat","isNaN","minimum","maximum","Number","isInteger","lowerValue","toLowerCase","Boolean","arrayValue","Array","isArray","parsed","parse","items","map","item","objectValue","validatedObject","propName","propSchema","propValue","mappedArgs","requiredParam","additionalProperties","allowedParams","Set","keys","argName","has","mapMCPResponseToN8n","mcpResponse","context","outputData","content","i","executionData","processContentItem","pairedItem","data","binary","mimeType","fileName","getFileExtension","push","result","message","error","originalResponse","index","text","hasData","uri","assign","extensions","createValidationSummary","summary","hasDefault","constraints","getParameterConstraints","exports"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/parameterMapper.ts"],"sourcesContent":["import {\n  MCPTool,\n  MCPToolProperty,\n  MCPToolRequest,\n  N8nExecutionData,\n  MCPExecutionContext,\n} from '../types/mcpTypes.js';\n\nexport class ParameterMapper {\n  /**\n   * Map n8n node parameters to MCP tool arguments\n   */\n  mapN8nParametersToMCP(\n    nodeParameters: Record<string, unknown>,\n    inputData: N8nExecutionData[],\n    tool: MCPTool\n  ): MCPToolRequest {\n    const mappedArguments: Record<string, unknown> = {};\n\n    // Process each parameter according to the tool schema\n    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {\n      const nodeValue = nodeParameters[paramName];\n\n      if (nodeValue !== undefined && nodeValue !== null && nodeValue !== '') {\n        mappedArguments[paramName] = this.convertValueToMCPType(nodeValue, paramSchema, inputData);\n      } else if (paramSchema.default !== undefined) {\n        mappedArguments[paramName] = paramSchema.default;\n      } else if (tool.inputSchema.required?.includes(paramName)) {\n        throw new Error(`Required parameter '${paramName}' is missing or empty`);\n      }\n    }\n\n    // Validate mapped arguments against schema\n    this.validateMappedArguments(mappedArguments, tool);\n\n    return {\n      name: tool.name,\n      arguments: mappedArguments,\n    };\n  }\n\n  /**\n   * Convert n8n value to appropriate MCP type\n   */\n  private convertValueToMCPType(\n    value: unknown,\n    paramSchema: MCPToolProperty,\n    inputData: N8nExecutionData[]\n  ): unknown {\n    // Handle expression resolution first\n    const resolvedValue = this.resolveExpressions(value, inputData);\n\n    switch (paramSchema.type) {\n      case 'string':\n        return this.convertToString(resolvedValue, paramSchema);\n\n      case 'number':\n        return this.convertToNumber(resolvedValue, paramSchema);\n\n      case 'integer':\n        return this.convertToInteger(resolvedValue, paramSchema);\n\n      case 'boolean':\n        return this.convertToBoolean(resolvedValue);\n\n      case 'array':\n        return this.convertToArray(resolvedValue, paramSchema, inputData);\n\n      case 'object':\n        return this.convertToObject(resolvedValue, paramSchema);\n\n      default:\n        return resolvedValue;\n    }\n  }\n\n  /**\n   * Resolve n8n expressions in values\n   */\n  private resolveExpressions(value: unknown, inputData: N8nExecutionData[]): unknown {\n    if (typeof value === 'string') {\n      // Handle simple variable references like {{ $json.field }}\n      const expressionRegex = /\\{\\{\\s*\\$json\\.([^}]+)\\s*\\}\\}/g;\n\n      return value.replace(expressionRegex, (match, fieldPath) => {\n        const firstItem = inputData[0];\n        if (firstItem && firstItem.json) {\n          const fieldValue = this.getNestedValue(firstItem.json, fieldPath);\n          return fieldValue !== undefined ? String(fieldValue) : match;\n        }\n        return match;\n      });\n    }\n\n    return value;\n  }\n\n  /**\n   * Get nested value from object using dot notation\n   */\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    return path.split('.').reduce((current: any, key) => {\n      return current && typeof current === 'object' && key in current\n        ? current[key]\n        : undefined;\n    }, obj as any);\n  }\n\n  /**\n   * Convert value to string with validation\n   */\n  private convertToString(value: unknown, schema: MCPToolProperty): string {\n    let stringValue: string;\n\n    if (typeof value === 'string') {\n      stringValue = value;\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      stringValue = String(value);\n    } else if (value === null || value === undefined) {\n      stringValue = '';\n    } else if (typeof value === 'object') {\n      stringValue = JSON.stringify(value);\n    } else {\n      stringValue = String(value);\n    }\n\n    // Validate string constraints\n    if (schema.minLength !== undefined && stringValue.length < schema.minLength) {\n      throw new Error(\n        `String value too short. Minimum length: ${schema.minLength}, got: ${stringValue.length}`\n      );\n    }\n\n    if (schema.maxLength !== undefined && stringValue.length > schema.maxLength) {\n      throw new Error(\n        `String value too long. Maximum length: ${schema.maxLength}, got: ${stringValue.length}`\n      );\n    }\n\n    if (schema.pattern && !new RegExp(schema.pattern).test(stringValue)) {\n      throw new Error(`String value does not match required pattern: ${schema.pattern}`);\n    }\n\n    if (schema.enum && !schema.enum.includes(stringValue)) {\n      throw new Error(\n        `Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${stringValue}`\n      );\n    }\n\n    return stringValue;\n  }\n\n  /**\n   * Convert value to number with validation\n   */\n  private convertToNumber(value: unknown, schema: MCPToolProperty): number {\n    let numberValue: number;\n\n    if (typeof value === 'number') {\n      numberValue = value;\n    } else if (typeof value === 'string') {\n      numberValue = parseFloat(value);\n      if (isNaN(numberValue)) {\n        throw new Error(`Cannot convert '${value}' to number`);\n      }\n    } else if (typeof value === 'boolean') {\n      numberValue = value ? 1 : 0;\n    } else {\n      throw new Error(`Cannot convert ${typeof value} to number`);\n    }\n\n    // Validate number constraints\n    if (schema.minimum !== undefined && numberValue < schema.minimum) {\n      throw new Error(`Number too small. Minimum: ${schema.minimum}, got: ${numberValue}`);\n    }\n\n    if (schema.maximum !== undefined && numberValue > schema.maximum) {\n      throw new Error(`Number too large. Maximum: ${schema.maximum}, got: ${numberValue}`);\n    }\n\n    if (schema.enum && !schema.enum.includes(numberValue)) {\n      throw new Error(\n        `Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${numberValue}`\n      );\n    }\n\n    return numberValue;\n  }\n\n  /**\n   * Convert value to integer with validation\n   */\n  private convertToInteger(value: unknown, schema: MCPToolProperty): number {\n    const numberValue = this.convertToNumber(value, schema);\n\n    if (!Number.isInteger(numberValue)) {\n      throw new Error(`Value must be an integer, got: ${numberValue}`);\n    }\n\n    return numberValue;\n  }\n\n  /**\n   * Convert value to boolean\n   */\n  private convertToBoolean(value: unknown): boolean {\n    if (typeof value === 'boolean') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      const lowerValue = value.toLowerCase();\n      if (lowerValue === 'true' || lowerValue === '1' || lowerValue === 'yes') {\n        return true;\n      }\n      if (\n        lowerValue === 'false' ||\n        lowerValue === '0' ||\n        lowerValue === 'no' ||\n        lowerValue === ''\n      ) {\n        return false;\n      }\n      throw new Error(`Cannot convert '${value}' to boolean`);\n    }\n\n    if (typeof value === 'number') {\n      return value !== 0;\n    }\n\n    if (value === null || value === undefined) {\n      return false;\n    }\n\n    return Boolean(value);\n  }\n\n  /**\n   * Convert value to array with validation\n   */\n  private convertToArray(\n    value: unknown,\n    schema: MCPToolProperty,\n    inputData: N8nExecutionData[]\n  ): unknown[] {\n    let arrayValue: unknown[];\n\n    if (Array.isArray(value)) {\n      arrayValue = value;\n    } else if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value);\n        if (Array.isArray(parsed)) {\n          arrayValue = parsed;\n        } else {\n          // Treat as single-item array\n          arrayValue = [parsed];\n        }\n      } catch {\n        // Treat string as single-item array\n        arrayValue = [value];\n      }\n    } else if (value === null || value === undefined) {\n      arrayValue = [];\n    } else {\n      // Wrap single value in array\n      arrayValue = [value];\n    }\n\n    // Convert array items if schema is provided\n    if (schema.items) {\n      arrayValue = arrayValue.map(item =>\n        this.convertValueToMCPType(item, schema.items!, inputData)\n      );\n    }\n\n    return arrayValue;\n  }\n\n  /**\n   * Convert value to object with validation\n   */\n  private convertToObject(value: unknown, schema: MCPToolProperty): Record<string, unknown> {\n    let objectValue: Record<string, unknown>;\n\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      objectValue = value as Record<string, unknown>;\n    } else if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value);\n        if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) {\n          objectValue = parsed;\n        } else {\n          throw new Error('Parsed value is not an object');\n        }\n      } catch {\n        throw new Error(`Cannot parse '${value}' as JSON object`);\n      }\n    } else if (value === null || value === undefined) {\n      objectValue = {};\n    } else {\n      throw new Error(`Cannot convert ${typeof value} to object`);\n    }\n\n    // Validate object properties if schema is provided\n    if (schema.properties) {\n      const validatedObject: Record<string, unknown> = {};\n\n      for (const [propName, propSchema] of Object.entries(schema.properties)) {\n        const propValue = objectValue[propName];\n        if (propValue !== undefined) {\n          validatedObject[propName] = this.convertValueToMCPType(propValue, propSchema, []);\n        }\n      }\n\n      objectValue = validatedObject;\n    }\n\n    return objectValue;\n  }\n\n  /**\n   * Validate mapped arguments against tool schema\n   */\n  private validateMappedArguments(mappedArgs: Record<string, unknown>, tool: MCPTool): void {\n    const schema = tool.inputSchema;\n\n    // Check required parameters\n    if (schema.required) {\n      for (const requiredParam of schema.required) {\n        if (!(requiredParam in mappedArgs) || mappedArgs[requiredParam] === undefined) {\n          throw new Error(`Required parameter '${requiredParam}' is missing`);\n        }\n      }\n    }\n\n    // Check for unexpected parameters\n    if (!schema.additionalProperties) {\n      const allowedParams = new Set(Object.keys(schema.properties));\n      for (const argName of Object.keys(mappedArgs)) {\n        if (!allowedParams.has(argName)) {\n          throw new Error(\n            `Unexpected parameter '${argName}'. Tool does not accept this parameter.`\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Map MCP response back to n8n execution data\n   */\n  mapMCPResponseToN8n(mcpResponse: any, context: MCPExecutionContext): N8nExecutionData[] {\n    const outputData: N8nExecutionData[] = [];\n\n    try {\n      // Handle different response formats\n      if (mcpResponse.content && Array.isArray(mcpResponse.content)) {\n        // MCP standard response format\n        for (let i = 0; i < mcpResponse.content.length; i++) {\n          const content = mcpResponse.content[i];\n          const executionData: N8nExecutionData = {\n            json: this.processContentItem(content, i),\n            pairedItem: { item: 0 },\n          };\n\n          // Handle binary data\n          if (content.type === 'image' && content.data) {\n            executionData.binary = {\n              data: {\n                data: content.data,\n                mimeType: content.mimeType || 'image/png',\n                fileName: `mcp_response_${i}.${this.getFileExtension(content.mimeType)}`,\n              },\n            };\n          }\n\n          outputData.push(executionData);\n        }\n      } else if (typeof mcpResponse === 'object' && mcpResponse !== null) {\n        // Direct object response\n        outputData.push({\n          json: mcpResponse,\n          pairedItem: { item: 0 },\n        });\n      } else {\n        // Simple value response\n        outputData.push({\n          json: { result: mcpResponse },\n          pairedItem: { item: 0 },\n        });\n      }\n\n      // Ensure we always return at least one item\n      if (outputData.length === 0) {\n        outputData.push({\n          json: { message: 'MCP tool executed successfully with no output' },\n          pairedItem: { item: 0 },\n        });\n      }\n    } catch (error) {\n      // Return error as output data\n      outputData.push({\n        json: {\n          error: true,\n          message: error instanceof Error ? error.message : 'Unknown error processing MCP response',\n          originalResponse: mcpResponse,\n        },\n        pairedItem: { item: 0 },\n      });\n    }\n\n    return outputData;\n  }\n\n  /**\n   * Process individual MCP content item\n   */\n  private processContentItem(content: any, index: number): Record<string, unknown> {\n    const result: Record<string, unknown> = {\n      type: content.type || 'unknown',\n      index,\n    };\n\n    switch (content.type) {\n      case 'text':\n        result.text = content.text || '';\n        break;\n\n      case 'image':\n        result.mimeType = content.mimeType || 'image/png';\n        result.hasData = Boolean(content.data);\n        break;\n\n      case 'resource':\n        result.uri = content.uri;\n        result.mimeType = content.mimeType;\n        break;\n\n      default:\n        // Copy all properties for unknown types\n        Object.assign(result, content);\n    }\n\n    return result;\n  }\n\n  /**\n   * Get file extension from MIME type\n   */\n  private getFileExtension(mimeType?: string): string {\n    if (!mimeType) return 'bin';\n\n    const extensions: Record<string, string> = {\n      'image/png': 'png',\n      'image/jpeg': 'jpg',\n      'image/gif': 'gif',\n      'image/svg+xml': 'svg',\n      'text/plain': 'txt',\n      'application/json': 'json',\n      'application/xml': 'xml',\n      'text/html': 'html',\n      'application/pdf': 'pdf',\n    };\n\n    return extensions[mimeType] || 'bin';\n  }\n\n  /**\n   * Create parameter validation summary\n   */\n  createValidationSummary(tool: MCPTool): Record<string, any> {\n    const summary: Record<string, any> = {};\n\n    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {\n      summary[paramName] = {\n        type: paramSchema.type,\n        required: tool.inputSchema.required?.includes(paramName) || false,\n        hasDefault: paramSchema.default !== undefined,\n        constraints: this.getParameterConstraints(paramSchema),\n      };\n    }\n\n    return summary;\n  }\n\n  /**\n   * Get parameter constraints for validation summary\n   */\n  private getParameterConstraints(schema: MCPToolProperty): Record<string, unknown> {\n    const constraints: Record<string, unknown> = {};\n\n    if (schema.enum) constraints.enum = schema.enum;\n    if (schema.minimum !== undefined) constraints.minimum = schema.minimum;\n    if (schema.maximum !== undefined) constraints.maximum = schema.maximum;\n    if (schema.minLength !== undefined) constraints.minLength = schema.minLength;\n    if (schema.maxLength !== undefined) constraints.maxLength = schema.maxLength;\n    if (schema.pattern) constraints.pattern = schema.pattern;\n\n    return constraints;\n  }\n}\n"],"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","ignoreList":[]}