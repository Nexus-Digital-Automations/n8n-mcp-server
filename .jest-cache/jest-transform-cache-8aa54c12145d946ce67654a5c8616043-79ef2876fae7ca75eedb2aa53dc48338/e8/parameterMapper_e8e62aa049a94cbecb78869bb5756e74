07c4431bf5478b0bccfabe56615261dc
"use strict";

/* istanbul ignore next */
function cov_py7ubqbfc() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/parameterMapper.ts";
  var hash = "72f289bba076573e508fbac8c16e369487083db0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/parameterMapper.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 9,
          column: 34
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 22,
          column: 9
        }
      },
      "4": {
        start: {
          line: 12,
          column: 30
        },
        end: {
          line: 12,
          column: 55
        }
      },
      "5": {
        start: {
          line: 13,
          column: 12
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "6": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 107
        }
      },
      "7": {
        start: {
          line: 16,
          column: 17
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "8": {
        start: {
          line: 17,
          column: 16
        },
        end: {
          line: 17,
          column: 65
        }
      },
      "9": {
        start: {
          line: 19,
          column: 17
        },
        end: {
          line: 21,
          column: 13
        }
      },
      "10": {
        start: {
          line: 20,
          column: 16
        },
        end: {
          line: 20,
          column: 89
        }
      },
      "11": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 60
        }
      },
      "12": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "13": {
        start: {
          line: 35,
          column: 30
        },
        end: {
          line: 35,
          column: 71
        }
      },
      "14": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "15": {
        start: {
          line: 38,
          column: 16
        },
        end: {
          line: 38,
          column: 72
        }
      },
      "16": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 72
        }
      },
      "17": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 42,
          column: 73
        }
      },
      "18": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 60
        }
      },
      "19": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 82
        }
      },
      "20": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 72
        }
      },
      "21": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 50,
          column: 37
        }
      },
      "22": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 68,
          column: 9
        }
      },
      "23": {
        start: {
          line: 59,
          column: 36
        },
        end: {
          line: 59,
          column: 68
        }
      },
      "24": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 67,
          column: 15
        }
      },
      "25": {
        start: {
          line: 61,
          column: 34
        },
        end: {
          line: 61,
          column: 46
        }
      },
      "26": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 65,
          column: 17
        }
      },
      "27": {
        start: {
          line: 63,
          column: 39
        },
        end: {
          line: 63,
          column: 85
        }
      },
      "28": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 81
        }
      },
      "29": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 29
        }
      },
      "30": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 21
        }
      },
      "31": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 79,
          column: 16
        }
      },
      "32": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 78,
          column: 28
        }
      },
      "33": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "34": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 32
        }
      },
      "35": {
        start: {
          line: 89,
          column: 13
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "36": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 40
        }
      },
      "37": {
        start: {
          line: 92,
          column: 13
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "38": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 29
        }
      },
      "39": {
        start: {
          line: 95,
          column: 13
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "40": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 48
        }
      },
      "41": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 40
        }
      },
      "42": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 104,
          column: 9
        }
      },
      "43": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 119
        }
      },
      "44": {
        start: {
          line: 105,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "45": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 118
        }
      },
      "46": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 110,
          column: 9
        }
      },
      "47": {
        start: {
          line: 109,
          column: 12
        },
        end: {
          line: 109,
          column: 95
        }
      },
      "48": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "49": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 115
        }
      },
      "50": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 27
        }
      },
      "51": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "52": {
        start: {
          line: 122,
          column: 12
        },
        end: {
          line: 122,
          column: 32
        }
      },
      "53": {
        start: {
          line: 124,
          column: 13
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "54": {
        start: {
          line: 125,
          column: 12
        },
        end: {
          line: 125,
          column: 44
        }
      },
      "55": {
        start: {
          line: 126,
          column: 12
        },
        end: {
          line: 128,
          column: 13
        }
      },
      "56": {
        start: {
          line: 127,
          column: 16
        },
        end: {
          line: 127,
          column: 71
        }
      },
      "57": {
        start: {
          line: 130,
          column: 13
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "58": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 131,
          column: 40
        }
      },
      "59": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 72
        }
      },
      "60": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "61": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 138,
          column: 97
        }
      },
      "62": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 142,
          column: 9
        }
      },
      "63": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 141,
          column: 97
        }
      },
      "64": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "65": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 144,
          column: 115
        }
      },
      "66": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 27
        }
      },
      "67": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 152,
          column: 63
        }
      },
      "68": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 155,
          column: 9
        }
      },
      "69": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 154,
          column: 77
        }
      },
      "70": {
        start: {
          line: 156,
          column: 8
        },
        end: {
          line: 156,
          column: 27
        }
      },
      "71": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 164,
          column: 9
        }
      },
      "72": {
        start: {
          line: 163,
          column: 12
        },
        end: {
          line: 163,
          column: 25
        }
      },
      "73": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "74": {
        start: {
          line: 166,
          column: 31
        },
        end: {
          line: 166,
          column: 50
        }
      },
      "75": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 169,
          column: 13
        }
      },
      "76": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 28
        }
      },
      "77": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 175,
          column: 13
        }
      },
      "78": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 29
        }
      },
      "79": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 68
        }
      },
      "80": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "81": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 31
        }
      },
      "82": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "83": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 25
        }
      },
      "84": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 30
        }
      },
      "85": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "86": {
        start: {
          line: 192,
          column: 12
        },
        end: {
          line: 192,
          column: 31
        }
      },
      "87": {
        start: {
          line: 194,
          column: 13
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "88": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 208,
          column: 13
        }
      },
      "89": {
        start: {
          line: 196,
          column: 31
        },
        end: {
          line: 196,
          column: 48
        }
      },
      "90": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 203,
          column: 17
        }
      },
      "91": {
        start: {
          line: 198,
          column: 20
        },
        end: {
          line: 198,
          column: 40
        }
      },
      "92": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 42
        }
      },
      "93": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 37
        }
      },
      "94": {
        start: {
          line: 210,
          column: 13
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "95": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 28
        }
      },
      "96": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 33
        }
      },
      "97": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 220,
          column: 9
        }
      },
      "98": {
        start: {
          line: 219,
          column: 12
        },
        end: {
          line: 219,
          column: 107
        }
      },
      "99": {
        start: {
          line: 219,
          column: 48
        },
        end: {
          line: 219,
          column: 105
        }
      },
      "100": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 221,
          column: 26
        }
      },
      "101": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "102": {
        start: {
          line: 229,
          column: 12
        },
        end: {
          line: 229,
          column: 32
        }
      },
      "103": {
        start: {
          line: 231,
          column: 13
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "104": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 243,
          column: 13
        }
      },
      "105": {
        start: {
          line: 233,
          column: 31
        },
        end: {
          line: 233,
          column: 48
        }
      },
      "106": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 239,
          column: 17
        }
      },
      "107": {
        start: {
          line: 235,
          column: 20
        },
        end: {
          line: 235,
          column: 41
        }
      },
      "108": {
        start: {
          line: 238,
          column: 20
        },
        end: {
          line: 238,
          column: 69
        }
      },
      "109": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 74
        }
      },
      "110": {
        start: {
          line: 245,
          column: 13
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "111": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 246,
          column: 29
        }
      },
      "112": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 72
        }
      },
      "113": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "114": {
        start: {
          line: 253,
          column: 36
        },
        end: {
          line: 253,
          column: 38
        }
      },
      "115": {
        start: {
          line: 254,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "116": {
        start: {
          line: 255,
          column: 34
        },
        end: {
          line: 255,
          column: 55
        }
      },
      "117": {
        start: {
          line: 256,
          column: 16
        },
        end: {
          line: 258,
          column: 17
        }
      },
      "118": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 102
        }
      },
      "119": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 42
        }
      },
      "120": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 262,
          column: 27
        }
      },
      "121": {
        start: {
          line: 268,
          column: 23
        },
        end: {
          line: 268,
          column: 39
        }
      },
      "122": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 276,
          column: 9
        }
      },
      "123": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "124": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 274,
          column: 17
        }
      },
      "125": {
        start: {
          line: 273,
          column: 20
        },
        end: {
          line: 273,
          column: 88
        }
      },
      "126": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "127": {
        start: {
          line: 279,
          column: 34
        },
        end: {
          line: 279,
          column: 73
        }
      },
      "128": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "129": {
        start: {
          line: 281,
          column: 16
        },
        end: {
          line: 283,
          column: 17
        }
      },
      "130": {
        start: {
          line: 282,
          column: 20
        },
        end: {
          line: 282,
          column: 111
        }
      },
      "131": {
        start: {
          line: 291,
          column: 27
        },
        end: {
          line: 291,
          column: 29
        }
      },
      "132": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 347,
          column: 9
        }
      },
      "133": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "134": {
        start: {
          line: 296,
          column: 16
        },
        end: {
          line: 313,
          column: 17
        }
      },
      "135": {
        start: {
          line: 296,
          column: 29
        },
        end: {
          line: 296,
          column: 30
        }
      },
      "136": {
        start: {
          line: 297,
          column: 36
        },
        end: {
          line: 297,
          column: 58
        }
      },
      "137": {
        start: {
          line: 298,
          column: 42
        },
        end: {
          line: 301,
          column: 21
        }
      },
      "138": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 311,
          column: 21
        }
      },
      "139": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 310,
          column: 26
        }
      },
      "140": {
        start: {
          line: 312,
          column: 20
        },
        end: {
          line: 312,
          column: 51
        }
      },
      "141": {
        start: {
          line: 315,
          column: 17
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "142": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 320,
          column: 19
        }
      },
      "143": {
        start: {
          line: 324,
          column: 16
        },
        end: {
          line: 327,
          column: 19
        }
      },
      "144": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "145": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 334,
          column: 19
        }
      },
      "146": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 346,
          column: 15
        }
      },
      "147": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 348,
          column: 26
        }
      },
      "148": {
        start: {
          line: 354,
          column: 23
        },
        end: {
          line: 357,
          column: 9
        }
      },
      "149": {
        start: {
          line: 358,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "150": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 49
        }
      },
      "151": {
        start: {
          line: 361,
          column: 16
        },
        end: {
          line: 361,
          column: 22
        }
      },
      "152": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 66
        }
      },
      "153": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 364,
          column: 55
        }
      },
      "154": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 365,
          column: 22
        }
      },
      "155": {
        start: {
          line: 367,
          column: 16
        },
        end: {
          line: 367,
          column: 41
        }
      },
      "156": {
        start: {
          line: 368,
          column: 16
        },
        end: {
          line: 368,
          column: 51
        }
      },
      "157": {
        start: {
          line: 369,
          column: 16
        },
        end: {
          line: 369,
          column: 22
        }
      },
      "158": {
        start: {
          line: 372,
          column: 16
        },
        end: {
          line: 372,
          column: 47
        }
      },
      "159": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 22
        }
      },
      "160": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 381,
          column: 25
        }
      },
      "161": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 381,
          column: 25
        }
      },
      "162": {
        start: {
          line: 382,
          column: 27
        },
        end: {
          line: 392,
          column: 9
        }
      },
      "163": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 45
        }
      },
      "164": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 399,
          column: 26
        }
      },
      "165": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 407,
          column: 9
        }
      },
      "166": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 406,
          column: 14
        }
      },
      "167": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 23
        }
      },
      "168": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 414,
          column: 30
        }
      },
      "169": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 416,
          column: 43
        }
      },
      "170": {
        start: {
          line: 416,
          column: 12
        },
        end: {
          line: 416,
          column: 43
        }
      },
      "171": {
        start: {
          line: 417,
          column: 8
        },
        end: {
          line: 418,
          column: 49
        }
      },
      "172": {
        start: {
          line: 418,
          column: 12
        },
        end: {
          line: 418,
          column: 49
        }
      },
      "173": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 420,
          column: 49
        }
      },
      "174": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 49
        }
      },
      "175": {
        start: {
          line: 421,
          column: 8
        },
        end: {
          line: 422,
          column: 53
        }
      },
      "176": {
        start: {
          line: 422,
          column: 12
        },
        end: {
          line: 422,
          column: 53
        }
      },
      "177": {
        start: {
          line: 423,
          column: 8
        },
        end: {
          line: 424,
          column: 53
        }
      },
      "178": {
        start: {
          line: 424,
          column: 12
        },
        end: {
          line: 424,
          column: 53
        }
      },
      "179": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 426,
          column: 49
        }
      },
      "180": {
        start: {
          line: 426,
          column: 12
        },
        end: {
          line: 426,
          column: 49
        }
      },
      "181": {
        start: {
          line: 427,
          column: 8
        },
        end: {
          line: 427,
          column: 27
        }
      },
      "182": {
        start: {
          line: 430,
          column: 0
        },
        end: {
          line: 430,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 8,
            column: 5
          }
        },
        loc: {
          start: {
            line: 8,
            column: 59
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 57
          },
          end: {
            line: 52,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        loc: {
          start: {
            line: 56,
            column: 41
          },
          end: {
            line: 70,
            column: 5
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 50
          },
          end: {
            line: 60,
            column: 51
          }
        },
        loc: {
          start: {
            line: 60,
            column: 72
          },
          end: {
            line: 67,
            column: 13
          }
        },
        line: 60
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 74,
            column: 4
          },
          end: {
            line: 74,
            column: 5
          }
        },
        loc: {
          start: {
            line: 74,
            column: 30
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 74
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 75,
            column: 38
          },
          end: {
            line: 75,
            column: 39
          }
        },
        loc: {
          start: {
            line: 75,
            column: 56
          },
          end: {
            line: 79,
            column: 9
          }
        },
        line: 75
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 35
          },
          end: {
            line: 115,
            column: 5
          }
        },
        line: 84
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        loc: {
          start: {
            line: 119,
            column: 35
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 119
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 151,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        loc: {
          start: {
            line: 151,
            column: 36
          },
          end: {
            line: 157,
            column: 5
          }
        },
        line: 151
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 161,
            column: 5
          }
        },
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 185,
            column: 5
          }
        },
        line: 161
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 189,
            column: 5
          }
        },
        loc: {
          start: {
            line: 189,
            column: 45
          },
          end: {
            line: 222,
            column: 5
          }
        },
        line: 189
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 219,
            column: 40
          },
          end: {
            line: 219,
            column: 41
          }
        },
        loc: {
          start: {
            line: 219,
            column: 48
          },
          end: {
            line: 219,
            column: 105
          }
        },
        line: 219
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        loc: {
          start: {
            line: 226,
            column: 35
          },
          end: {
            line: 263,
            column: 5
          }
        },
        line: 226
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 267,
            column: 4
          },
          end: {
            line: 267,
            column: 5
          }
        },
        loc: {
          start: {
            line: 267,
            column: 46
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 267
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 46
          },
          end: {
            line: 349,
            column: 5
          }
        },
        line: 290
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 353,
            column: 4
          },
          end: {
            line: 353,
            column: 5
          }
        },
        loc: {
          start: {
            line: 353,
            column: 39
          },
          end: {
            line: 375,
            column: 5
          }
        },
        line: 353
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 31
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 379
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 398,
            column: 4
          },
          end: {
            line: 398,
            column: 5
          }
        },
        loc: {
          start: {
            line: 398,
            column: 34
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 398
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 413,
            column: 5
          }
        },
        loc: {
          start: {
            line: 413,
            column: 36
          },
          end: {
            line: 428,
            column: 5
          }
        },
        line: 413
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 39
          }
        }, {
          start: {
            line: 13,
            column: 43
          },
          end: {
            line: 13,
            column: 61
          }
        }, {
          start: {
            line: 13,
            column: 65
          },
          end: {
            line: 13,
            column: 81
          }
        }],
        line: 13
      },
      "2": {
        loc: {
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        }],
        line: 16
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 17
          },
          end: {
            line: 21,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 37,
            column: 12
          },
          end: {
            line: 38,
            column: 72
          }
        }, {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 40,
            column: 72
          }
        }, {
          start: {
            line: 41,
            column: 12
          },
          end: {
            line: 42,
            column: 73
          }
        }, {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 44,
            column: 60
          }
        }, {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 46,
            column: 82
          }
        }, {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 48,
            column: 72
          }
        }, {
          start: {
            line: 49,
            column: 12
          },
          end: {
            line: 50,
            column: 37
          }
        }],
        line: 36
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 68,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 65,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 16
          },
          end: {
            line: 65,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 62,
            column: 29
          }
        }, {
          start: {
            line: 62,
            column: 33
          },
          end: {
            line: 62,
            column: 47
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 64,
            column: 27
          },
          end: {
            line: 64,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 54
          },
          end: {
            line: 64,
            column: 72
          }
        }, {
          start: {
            line: 64,
            column: 75
          },
          end: {
            line: 64,
            column: 80
          }
        }],
        line: 64
      },
      "9": {
        loc: {
          start: {
            line: 76,
            column: 19
          },
          end: {
            line: 78,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 77,
            column: 18
          },
          end: {
            line: 77,
            column: 30
          }
        }, {
          start: {
            line: 78,
            column: 18
          },
          end: {
            line: 78,
            column: 27
          }
        }],
        line: 76
      },
      "10": {
        loc: {
          start: {
            line: 76,
            column: 19
          },
          end: {
            line: 76,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 19
          },
          end: {
            line: 76,
            column: 26
          }
        }, {
          start: {
            line: 76,
            column: 30
          },
          end: {
            line: 76,
            column: 57
          }
        }, {
          start: {
            line: 76,
            column: 61
          },
          end: {
            line: 76,
            column: 75
          }
        }],
        line: 76
      },
      "11": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 89,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 86
      },
      "12": {
        loc: {
          start: {
            line: 89,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 92,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 89
      },
      "13": {
        loc: {
          start: {
            line: 89,
            column: 17
          },
          end: {
            line: 89,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 89,
            column: 17
          },
          end: {
            line: 89,
            column: 42
          }
        }, {
          start: {
            line: 89,
            column: 46
          },
          end: {
            line: 89,
            column: 72
          }
        }],
        line: 89
      },
      "14": {
        loc: {
          start: {
            line: 92,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 92,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 92
      },
      "15": {
        loc: {
          start: {
            line: 92,
            column: 17
          },
          end: {
            line: 92,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 92,
            column: 17
          },
          end: {
            line: 92,
            column: 31
          }
        }, {
          start: {
            line: 92,
            column: 35
          },
          end: {
            line: 92,
            column: 54
          }
        }],
        line: 92
      },
      "16": {
        loc: {
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: 98,
            column: 13
          },
          end: {
            line: 100,
            column: 9
          }
        }],
        line: 95
      },
      "17": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 104,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "18": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 42
          }
        }, {
          start: {
            line: 102,
            column: 46
          },
          end: {
            line: 102,
            column: 83
          }
        }],
        line: 102
      },
      "19": {
        loc: {
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "20": {
        loc: {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 105,
            column: 42
          }
        }, {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 83
          }
        }],
        line: 105
      },
      "21": {
        loc: {
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 8
          },
          end: {
            line: 110,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "22": {
        loc: {
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 108,
            column: 12
          },
          end: {
            line: 108,
            column: 26
          }
        }, {
          start: {
            line: 108,
            column: 30
          },
          end: {
            line: 108,
            column: 75
          }
        }],
        line: 108
      },
      "23": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "24": {
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 111,
            column: 23
          }
        }, {
          start: {
            line: 111,
            column: 27
          },
          end: {
            line: 111,
            column: 61
          }
        }],
        line: 111
      },
      "25": {
        loc: {
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 121
      },
      "26": {
        loc: {
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 124
      },
      "27": {
        loc: {
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 126,
            column: 12
          },
          end: {
            line: 128,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 126
      },
      "28": {
        loc: {
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: 133,
            column: 13
          },
          end: {
            line: 135,
            column: 9
          }
        }],
        line: 130
      },
      "29": {
        loc: {
          start: {
            line: 131,
            column: 26
          },
          end: {
            line: 131,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 131,
            column: 34
          },
          end: {
            line: 131,
            column: 35
          }
        }, {
          start: {
            line: 131,
            column: 38
          },
          end: {
            line: 131,
            column: 39
          }
        }],
        line: 131
      },
      "30": {
        loc: {
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 137,
            column: 8
          },
          end: {
            line: 139,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 137
      },
      "31": {
        loc: {
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 137,
            column: 40
          }
        }, {
          start: {
            line: 137,
            column: 44
          },
          end: {
            line: 137,
            column: 72
          }
        }],
        line: 137
      },
      "32": {
        loc: {
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 8
          },
          end: {
            line: 142,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "33": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 140,
            column: 40
          }
        }, {
          start: {
            line: 140,
            column: 44
          },
          end: {
            line: 140,
            column: 72
          }
        }],
        line: 140
      },
      "34": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 145,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "35": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 143,
            column: 23
          }
        }, {
          start: {
            line: 143,
            column: 27
          },
          end: {
            line: 143,
            column: 61
          }
        }],
        line: 143
      },
      "36": {
        loc: {
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 8
          },
          end: {
            line: 155,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "37": {
        loc: {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 164,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "38": {
        loc: {
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 165,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 165
      },
      "39": {
        loc: {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 169,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "40": {
        loc: {
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 167,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 167,
            column: 16
          },
          end: {
            line: 167,
            column: 37
          }
        }, {
          start: {
            line: 167,
            column: 41
          },
          end: {
            line: 167,
            column: 59
          }
        }, {
          start: {
            line: 167,
            column: 63
          },
          end: {
            line: 167,
            column: 83
          }
        }],
        line: 167
      },
      "41": {
        loc: {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 175,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 170
      },
      "42": {
        loc: {
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 173,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 16
          },
          end: {
            line: 170,
            column: 38
          }
        }, {
          start: {
            line: 171,
            column: 16
          },
          end: {
            line: 171,
            column: 34
          }
        }, {
          start: {
            line: 172,
            column: 16
          },
          end: {
            line: 172,
            column: 35
          }
        }, {
          start: {
            line: 173,
            column: 16
          },
          end: {
            line: 173,
            column: 33
          }
        }],
        line: 170
      },
      "43": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "44": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "45": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 181,
            column: 26
          }
        }, {
          start: {
            line: 181,
            column: 30
          },
          end: {
            line: 181,
            column: 49
          }
        }],
        line: 181
      },
      "46": {
        loc: {
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 191,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 194,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 191
      },
      "47": {
        loc: {
          start: {
            line: 194,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 210,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 194
      },
      "48": {
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 203,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 203,
            column: 17
          }
        }, {
          start: {
            line: 200,
            column: 21
          },
          end: {
            line: 203,
            column: 17
          }
        }],
        line: 197
      },
      "49": {
        loc: {
          start: {
            line: 210,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 210,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: 213,
            column: 13
          },
          end: {
            line: 216,
            column: 9
          }
        }],
        line: 210
      },
      "50": {
        loc: {
          start: {
            line: 210,
            column: 17
          },
          end: {
            line: 210,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 17
          },
          end: {
            line: 210,
            column: 31
          }
        }, {
          start: {
            line: 210,
            column: 35
          },
          end: {
            line: 210,
            column: 54
          }
        }],
        line: 210
      },
      "51": {
        loc: {
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 218,
            column: 8
          },
          end: {
            line: 220,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 218
      },
      "52": {
        loc: {
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 8
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: 231,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        }],
        line: 228
      },
      "53": {
        loc: {
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 228,
            column: 12
          },
          end: {
            line: 228,
            column: 17
          }
        }, {
          start: {
            line: 228,
            column: 21
          },
          end: {
            line: 228,
            column: 46
          }
        }, {
          start: {
            line: 228,
            column: 50
          },
          end: {
            line: 228,
            column: 71
          }
        }],
        line: 228
      },
      "54": {
        loc: {
          start: {
            line: 231,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: 245,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        }],
        line: 231
      },
      "55": {
        loc: {
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 16
          },
          end: {
            line: 239,
            column: 17
          }
        }, {
          start: {
            line: 237,
            column: 21
          },
          end: {
            line: 239,
            column: 17
          }
        }],
        line: 234
      },
      "56": {
        loc: {
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 234,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 20
          },
          end: {
            line: 234,
            column: 26
          }
        }, {
          start: {
            line: 234,
            column: 30
          },
          end: {
            line: 234,
            column: 56
          }
        }, {
          start: {
            line: 234,
            column: 60
          },
          end: {
            line: 234,
            column: 82
          }
        }],
        line: 234
      },
      "57": {
        loc: {
          start: {
            line: 245,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        }, {
          start: {
            line: 248,
            column: 13
          },
          end: {
            line: 250,
            column: 9
          }
        }],
        line: 245
      },
      "58": {
        loc: {
          start: {
            line: 245,
            column: 17
          },
          end: {
            line: 245,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 17
          },
          end: {
            line: 245,
            column: 31
          }
        }, {
          start: {
            line: 245,
            column: 35
          },
          end: {
            line: 245,
            column: 54
          }
        }],
        line: 245
      },
      "59": {
        loc: {
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "60": {
        loc: {
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 16
          },
          end: {
            line: 258,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "61": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 276,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "62": {
        loc: {
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 274,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 16
          },
          end: {
            line: 274,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "63": {
        loc: {
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 272,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 272,
            column: 20
          },
          end: {
            line: 272,
            column: 50
          }
        }, {
          start: {
            line: 272,
            column: 54
          },
          end: {
            line: 272,
            column: 93
          }
        }],
        line: 272
      },
      "64": {
        loc: {
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "65": {
        loc: {
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 283,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 16
          },
          end: {
            line: 283,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 281
      },
      "66": {
        loc: {
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 294,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: 315,
            column: 17
          },
          end: {
            line: 328,
            column: 13
          }
        }],
        line: 294
      },
      "67": {
        loc: {
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 294,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 294,
            column: 16
          },
          end: {
            line: 294,
            column: 35
          }
        }, {
          start: {
            line: 294,
            column: 39
          },
          end: {
            line: 294,
            column: 73
          }
        }],
        line: 294
      },
      "68": {
        loc: {
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 311,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 311,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "69": {
        loc: {
          start: {
            line: 303,
            column: 24
          },
          end: {
            line: 303,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 303,
            column: 24
          },
          end: {
            line: 303,
            column: 48
          }
        }, {
          start: {
            line: 303,
            column: 52
          },
          end: {
            line: 303,
            column: 64
          }
        }],
        line: 303
      },
      "70": {
        loc: {
          start: {
            line: 307,
            column: 42
          },
          end: {
            line: 307,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 307,
            column: 42
          },
          end: {
            line: 307,
            column: 58
          }
        }, {
          start: {
            line: 307,
            column: 62
          },
          end: {
            line: 307,
            column: 73
          }
        }],
        line: 307
      },
      "71": {
        loc: {
          start: {
            line: 315,
            column: 17
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 17
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: 322,
            column: 17
          },
          end: {
            line: 328,
            column: 13
          }
        }],
        line: 315
      },
      "72": {
        loc: {
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 315,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 21
          },
          end: {
            line: 315,
            column: 52
          }
        }, {
          start: {
            line: 315,
            column: 56
          },
          end: {
            line: 315,
            column: 76
          }
        }],
        line: 315
      },
      "73": {
        loc: {
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 330,
            column: 12
          },
          end: {
            line: 335,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 330
      },
      "74": {
        loc: {
          start: {
            line: 342,
            column: 29
          },
          end: {
            line: 342,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 342,
            column: 54
          },
          end: {
            line: 342,
            column: 67
          }
        }, {
          start: {
            line: 342,
            column: 70
          },
          end: {
            line: 342,
            column: 109
          }
        }],
        line: 342
      },
      "75": {
        loc: {
          start: {
            line: 355,
            column: 18
          },
          end: {
            line: 355,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 355,
            column: 18
          },
          end: {
            line: 355,
            column: 30
          }
        }, {
          start: {
            line: 355,
            column: 34
          },
          end: {
            line: 355,
            column: 43
          }
        }],
        line: 355
      },
      "76": {
        loc: {
          start: {
            line: 358,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 359,
            column: 12
          },
          end: {
            line: 361,
            column: 22
          }
        }, {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 365,
            column: 22
          }
        }, {
          start: {
            line: 366,
            column: 12
          },
          end: {
            line: 369,
            column: 22
          }
        }, {
          start: {
            line: 370,
            column: 12
          },
          end: {
            line: 372,
            column: 47
          }
        }],
        line: 358
      },
      "77": {
        loc: {
          start: {
            line: 360,
            column: 30
          },
          end: {
            line: 360,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 30
          },
          end: {
            line: 360,
            column: 42
          }
        }, {
          start: {
            line: 360,
            column: 46
          },
          end: {
            line: 360,
            column: 48
          }
        }],
        line: 360
      },
      "78": {
        loc: {
          start: {
            line: 363,
            column: 34
          },
          end: {
            line: 363,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 363,
            column: 34
          },
          end: {
            line: 363,
            column: 50
          }
        }, {
          start: {
            line: 363,
            column: 54
          },
          end: {
            line: 363,
            column: 65
          }
        }],
        line: 363
      },
      "79": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 381,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 381,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "80": {
        loc: {
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 393,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 393,
            column: 15
          },
          end: {
            line: 393,
            column: 35
          }
        }, {
          start: {
            line: 393,
            column: 39
          },
          end: {
            line: 393,
            column: 44
          }
        }],
        line: 393
      },
      "81": {
        loc: {
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 403,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 403,
            column: 26
          },
          end: {
            line: 403,
            column: 72
          }
        }, {
          start: {
            line: 403,
            column: 76
          },
          end: {
            line: 403,
            column: 81
          }
        }],
        line: 403
      },
      "82": {
        loc: {
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 416,
            column: 43
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 415,
            column: 8
          },
          end: {
            line: 416,
            column: 43
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 415
      },
      "83": {
        loc: {
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 418,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 417,
            column: 8
          },
          end: {
            line: 418,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 417
      },
      "84": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 420,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 420,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "85": {
        loc: {
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 422,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 421,
            column: 8
          },
          end: {
            line: 422,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 421
      },
      "86": {
        loc: {
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 424,
            column: 53
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 423,
            column: 8
          },
          end: {
            line: 424,
            column: 53
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 423
      },
      "87": {
        loc: {
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 426,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 425,
            column: 8
          },
          end: {
            line: 426,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 425
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0, 0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0, 0, 0],
      "77": [0, 0],
      "78": [0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/parameterMapper.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/parameterMapper.ts"],
      sourcesContent: ["import {\n  MCPTool,\n  MCPToolProperty,\n  MCPToolRequest,\n  N8nExecutionData,\n  MCPExecutionContext,\n} from '../types/mcpTypes.js';\n\nexport class ParameterMapper {\n  /**\n   * Map n8n node parameters to MCP tool arguments\n   */\n  mapN8nParametersToMCP(\n    nodeParameters: Record<string, unknown>,\n    inputData: N8nExecutionData[],\n    tool: MCPTool\n  ): MCPToolRequest {\n    const mappedArguments: Record<string, unknown> = {};\n\n    // Process each parameter according to the tool schema\n    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {\n      const nodeValue = nodeParameters[paramName];\n\n      if (nodeValue !== undefined && nodeValue !== null && nodeValue !== '') {\n        mappedArguments[paramName] = this.convertValueToMCPType(nodeValue, paramSchema, inputData);\n      } else if (paramSchema.default !== undefined) {\n        mappedArguments[paramName] = paramSchema.default;\n      } else if (tool.inputSchema.required?.includes(paramName)) {\n        throw new Error(`Required parameter '${paramName}' is missing or empty`);\n      }\n    }\n\n    // Validate mapped arguments against schema\n    this.validateMappedArguments(mappedArguments, tool);\n\n    return {\n      name: tool.name,\n      arguments: mappedArguments,\n    };\n  }\n\n  /**\n   * Convert n8n value to appropriate MCP type\n   */\n  private convertValueToMCPType(\n    value: unknown,\n    paramSchema: MCPToolProperty,\n    inputData: N8nExecutionData[]\n  ): unknown {\n    // Handle expression resolution first\n    const resolvedValue = this.resolveExpressions(value, inputData);\n\n    switch (paramSchema.type) {\n      case 'string':\n        return this.convertToString(resolvedValue, paramSchema);\n\n      case 'number':\n        return this.convertToNumber(resolvedValue, paramSchema);\n\n      case 'integer':\n        return this.convertToInteger(resolvedValue, paramSchema);\n\n      case 'boolean':\n        return this.convertToBoolean(resolvedValue);\n\n      case 'array':\n        return this.convertToArray(resolvedValue, paramSchema, inputData);\n\n      case 'object':\n        return this.convertToObject(resolvedValue, paramSchema);\n\n      default:\n        return resolvedValue;\n    }\n  }\n\n  /**\n   * Resolve n8n expressions in values\n   */\n  private resolveExpressions(value: unknown, inputData: N8nExecutionData[]): unknown {\n    if (typeof value === 'string') {\n      // Handle simple variable references like {{ $json.field }}\n      const expressionRegex = /\\{\\{\\s*\\$json\\.([^}]+)\\s*\\}\\}/g;\n\n      return value.replace(expressionRegex, (match, fieldPath) => {\n        const firstItem = inputData[0];\n        if (firstItem && firstItem.json) {\n          const fieldValue = this.getNestedValue(firstItem.json, fieldPath);\n          return fieldValue !== undefined ? String(fieldValue) : match;\n        }\n        return match;\n      });\n    }\n\n    return value;\n  }\n\n  /**\n   * Get nested value from object using dot notation\n   */\n  private getNestedValue(obj: Record<string, unknown>, path: string): unknown {\n    return path.split('.').reduce((current: any, key) => {\n      return current && typeof current === 'object' && key in current\n        ? current[key]\n        : undefined;\n    }, obj as any);\n  }\n\n  /**\n   * Convert value to string with validation\n   */\n  private convertToString(value: unknown, schema: MCPToolProperty): string {\n    let stringValue: string;\n\n    if (typeof value === 'string') {\n      stringValue = value;\n    } else if (typeof value === 'number' || typeof value === 'boolean') {\n      stringValue = String(value);\n    } else if (value === null || value === undefined) {\n      stringValue = '';\n    } else if (typeof value === 'object') {\n      stringValue = JSON.stringify(value);\n    } else {\n      stringValue = String(value);\n    }\n\n    // Validate string constraints\n    if (schema.minLength !== undefined && stringValue.length < schema.minLength) {\n      throw new Error(\n        `String value too short. Minimum length: ${schema.minLength}, got: ${stringValue.length}`\n      );\n    }\n\n    if (schema.maxLength !== undefined && stringValue.length > schema.maxLength) {\n      throw new Error(\n        `String value too long. Maximum length: ${schema.maxLength}, got: ${stringValue.length}`\n      );\n    }\n\n    if (schema.pattern && !new RegExp(schema.pattern).test(stringValue)) {\n      throw new Error(`String value does not match required pattern: ${schema.pattern}`);\n    }\n\n    if (schema.enum && !schema.enum.includes(stringValue)) {\n      throw new Error(\n        `Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${stringValue}`\n      );\n    }\n\n    return stringValue;\n  }\n\n  /**\n   * Convert value to number with validation\n   */\n  private convertToNumber(value: unknown, schema: MCPToolProperty): number {\n    let numberValue: number;\n\n    if (typeof value === 'number') {\n      numberValue = value;\n    } else if (typeof value === 'string') {\n      numberValue = parseFloat(value);\n      if (isNaN(numberValue)) {\n        throw new Error(`Cannot convert '${value}' to number`);\n      }\n    } else if (typeof value === 'boolean') {\n      numberValue = value ? 1 : 0;\n    } else {\n      throw new Error(`Cannot convert ${typeof value} to number`);\n    }\n\n    // Validate number constraints\n    if (schema.minimum !== undefined && numberValue < schema.minimum) {\n      throw new Error(`Number too small. Minimum: ${schema.minimum}, got: ${numberValue}`);\n    }\n\n    if (schema.maximum !== undefined && numberValue > schema.maximum) {\n      throw new Error(`Number too large. Maximum: ${schema.maximum}, got: ${numberValue}`);\n    }\n\n    if (schema.enum && !schema.enum.includes(numberValue)) {\n      throw new Error(\n        `Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${numberValue}`\n      );\n    }\n\n    return numberValue;\n  }\n\n  /**\n   * Convert value to integer with validation\n   */\n  private convertToInteger(value: unknown, schema: MCPToolProperty): number {\n    const numberValue = this.convertToNumber(value, schema);\n\n    if (!Number.isInteger(numberValue)) {\n      throw new Error(`Value must be an integer, got: ${numberValue}`);\n    }\n\n    return numberValue;\n  }\n\n  /**\n   * Convert value to boolean\n   */\n  private convertToBoolean(value: unknown): boolean {\n    if (typeof value === 'boolean') {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      const lowerValue = value.toLowerCase();\n      if (lowerValue === 'true' || lowerValue === '1' || lowerValue === 'yes') {\n        return true;\n      }\n      if (\n        lowerValue === 'false' ||\n        lowerValue === '0' ||\n        lowerValue === 'no' ||\n        lowerValue === ''\n      ) {\n        return false;\n      }\n      throw new Error(`Cannot convert '${value}' to boolean`);\n    }\n\n    if (typeof value === 'number') {\n      return value !== 0;\n    }\n\n    if (value === null || value === undefined) {\n      return false;\n    }\n\n    return Boolean(value);\n  }\n\n  /**\n   * Convert value to array with validation\n   */\n  private convertToArray(\n    value: unknown,\n    schema: MCPToolProperty,\n    inputData: N8nExecutionData[]\n  ): unknown[] {\n    let arrayValue: unknown[];\n\n    if (Array.isArray(value)) {\n      arrayValue = value;\n    } else if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value);\n        if (Array.isArray(parsed)) {\n          arrayValue = parsed;\n        } else {\n          // Treat as single-item array\n          arrayValue = [parsed];\n        }\n      } catch {\n        // Treat string as single-item array\n        arrayValue = [value];\n      }\n    } else if (value === null || value === undefined) {\n      arrayValue = [];\n    } else {\n      // Wrap single value in array\n      arrayValue = [value];\n    }\n\n    // Convert array items if schema is provided\n    if (schema.items) {\n      arrayValue = arrayValue.map(item =>\n        this.convertValueToMCPType(item, schema.items!, inputData)\n      );\n    }\n\n    return arrayValue;\n  }\n\n  /**\n   * Convert value to object with validation\n   */\n  private convertToObject(value: unknown, schema: MCPToolProperty): Record<string, unknown> {\n    let objectValue: Record<string, unknown>;\n\n    if (value && typeof value === 'object' && !Array.isArray(value)) {\n      objectValue = value as Record<string, unknown>;\n    } else if (typeof value === 'string') {\n      try {\n        const parsed = JSON.parse(value);\n        if (parsed && typeof parsed === 'object' && !Array.isArray(parsed)) {\n          objectValue = parsed;\n        } else {\n          throw new Error('Parsed value is not an object');\n        }\n      } catch {\n        throw new Error(`Cannot parse '${value}' as JSON object`);\n      }\n    } else if (value === null || value === undefined) {\n      objectValue = {};\n    } else {\n      throw new Error(`Cannot convert ${typeof value} to object`);\n    }\n\n    // Validate object properties if schema is provided\n    if (schema.properties) {\n      const validatedObject: Record<string, unknown> = {};\n\n      for (const [propName, propSchema] of Object.entries(schema.properties)) {\n        const propValue = objectValue[propName];\n        if (propValue !== undefined) {\n          validatedObject[propName] = this.convertValueToMCPType(propValue, propSchema, []);\n        }\n      }\n\n      objectValue = validatedObject;\n    }\n\n    return objectValue;\n  }\n\n  /**\n   * Validate mapped arguments against tool schema\n   */\n  private validateMappedArguments(mappedArgs: Record<string, unknown>, tool: MCPTool): void {\n    const schema = tool.inputSchema;\n\n    // Check required parameters\n    if (schema.required) {\n      for (const requiredParam of schema.required) {\n        if (!(requiredParam in mappedArgs) || mappedArgs[requiredParam] === undefined) {\n          throw new Error(`Required parameter '${requiredParam}' is missing`);\n        }\n      }\n    }\n\n    // Check for unexpected parameters\n    if (!schema.additionalProperties) {\n      const allowedParams = new Set(Object.keys(schema.properties));\n      for (const argName of Object.keys(mappedArgs)) {\n        if (!allowedParams.has(argName)) {\n          throw new Error(\n            `Unexpected parameter '${argName}'. Tool does not accept this parameter.`\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * Map MCP response back to n8n execution data\n   */\n  mapMCPResponseToN8n(mcpResponse: any, context: MCPExecutionContext): N8nExecutionData[] {\n    const outputData: N8nExecutionData[] = [];\n\n    try {\n      // Handle different response formats\n      if (mcpResponse.content && Array.isArray(mcpResponse.content)) {\n        // MCP standard response format\n        for (let i = 0; i < mcpResponse.content.length; i++) {\n          const content = mcpResponse.content[i];\n          const executionData: N8nExecutionData = {\n            json: this.processContentItem(content, i),\n            pairedItem: { item: 0 },\n          };\n\n          // Handle binary data\n          if (content.type === 'image' && content.data) {\n            executionData.binary = {\n              data: {\n                data: content.data,\n                mimeType: content.mimeType || 'image/png',\n                fileName: `mcp_response_${i}.${this.getFileExtension(content.mimeType)}`,\n              },\n            };\n          }\n\n          outputData.push(executionData);\n        }\n      } else if (typeof mcpResponse === 'object' && mcpResponse !== null) {\n        // Direct object response\n        outputData.push({\n          json: mcpResponse,\n          pairedItem: { item: 0 },\n        });\n      } else {\n        // Simple value response\n        outputData.push({\n          json: { result: mcpResponse },\n          pairedItem: { item: 0 },\n        });\n      }\n\n      // Ensure we always return at least one item\n      if (outputData.length === 0) {\n        outputData.push({\n          json: { message: 'MCP tool executed successfully with no output' },\n          pairedItem: { item: 0 },\n        });\n      }\n    } catch (error) {\n      // Return error as output data\n      outputData.push({\n        json: {\n          error: true,\n          message: error instanceof Error ? error.message : 'Unknown error processing MCP response',\n          originalResponse: mcpResponse,\n        },\n        pairedItem: { item: 0 },\n      });\n    }\n\n    return outputData;\n  }\n\n  /**\n   * Process individual MCP content item\n   */\n  private processContentItem(content: any, index: number): Record<string, unknown> {\n    const result: Record<string, unknown> = {\n      type: content.type || 'unknown',\n      index,\n    };\n\n    switch (content.type) {\n      case 'text':\n        result.text = content.text || '';\n        break;\n\n      case 'image':\n        result.mimeType = content.mimeType || 'image/png';\n        result.hasData = Boolean(content.data);\n        break;\n\n      case 'resource':\n        result.uri = content.uri;\n        result.mimeType = content.mimeType;\n        break;\n\n      default:\n        // Copy all properties for unknown types\n        Object.assign(result, content);\n    }\n\n    return result;\n  }\n\n  /**\n   * Get file extension from MIME type\n   */\n  private getFileExtension(mimeType?: string): string {\n    if (!mimeType) return 'bin';\n\n    const extensions: Record<string, string> = {\n      'image/png': 'png',\n      'image/jpeg': 'jpg',\n      'image/gif': 'gif',\n      'image/svg+xml': 'svg',\n      'text/plain': 'txt',\n      'application/json': 'json',\n      'application/xml': 'xml',\n      'text/html': 'html',\n      'application/pdf': 'pdf',\n    };\n\n    return extensions[mimeType] || 'bin';\n  }\n\n  /**\n   * Create parameter validation summary\n   */\n  createValidationSummary(tool: MCPTool): Record<string, any> {\n    const summary: Record<string, any> = {};\n\n    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {\n      summary[paramName] = {\n        type: paramSchema.type,\n        required: tool.inputSchema.required?.includes(paramName) || false,\n        hasDefault: paramSchema.default !== undefined,\n        constraints: this.getParameterConstraints(paramSchema),\n      };\n    }\n\n    return summary;\n  }\n\n  /**\n   * Get parameter constraints for validation summary\n   */\n  private getParameterConstraints(schema: MCPToolProperty): Record<string, unknown> {\n    const constraints: Record<string, unknown> = {};\n\n    if (schema.enum) constraints.enum = schema.enum;\n    if (schema.minimum !== undefined) constraints.minimum = schema.minimum;\n    if (schema.maximum !== undefined) constraints.maximum = schema.maximum;\n    if (schema.minLength !== undefined) constraints.minLength = schema.minLength;\n    if (schema.maxLength !== undefined) constraints.maxLength = schema.maxLength;\n    if (schema.pattern) constraints.pattern = schema.pattern;\n\n    return constraints;\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "72f289bba076573e508fbac8c16e369487083db0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_py7ubqbfc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_py7ubqbfc();
cov_py7ubqbfc().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_py7ubqbfc().s[1]++;
exports.ParameterMapper = void 0;
class ParameterMapper {
  /**
   * Map n8n node parameters to MCP tool arguments
   */
  mapN8nParametersToMCP(nodeParameters, inputData, tool) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[0]++;
    const mappedArguments =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[2]++, {});
    // Process each parameter according to the tool schema
    /* istanbul ignore next */
    cov_py7ubqbfc().s[3]++;
    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {
      const nodeValue =
      /* istanbul ignore next */
      (cov_py7ubqbfc().s[4]++, nodeParameters[paramName]);
      /* istanbul ignore next */
      cov_py7ubqbfc().s[5]++;
      if (
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[1][0]++, nodeValue !== undefined) &&
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[1][1]++, nodeValue !== null) &&
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[1][2]++, nodeValue !== '')) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[0][0]++;
        cov_py7ubqbfc().s[6]++;
        mappedArguments[paramName] = this.convertValueToMCPType(nodeValue, paramSchema, inputData);
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[0][1]++;
        cov_py7ubqbfc().s[7]++;
        if (paramSchema.default !== undefined) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[2][0]++;
          cov_py7ubqbfc().s[8]++;
          mappedArguments[paramName] = paramSchema.default;
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[2][1]++;
          cov_py7ubqbfc().s[9]++;
          if (tool.inputSchema.required?.includes(paramName)) {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[3][0]++;
            cov_py7ubqbfc().s[10]++;
            throw new Error(`Required parameter '${paramName}' is missing or empty`);
          } else
          /* istanbul ignore next */
          {
            cov_py7ubqbfc().b[3][1]++;
          }
        }
      }
    }
    // Validate mapped arguments against schema
    /* istanbul ignore next */
    cov_py7ubqbfc().s[11]++;
    this.validateMappedArguments(mappedArguments, tool);
    /* istanbul ignore next */
    cov_py7ubqbfc().s[12]++;
    return {
      name: tool.name,
      arguments: mappedArguments
    };
  }
  /**
   * Convert n8n value to appropriate MCP type
   */
  convertValueToMCPType(value, paramSchema, inputData) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[1]++;
    // Handle expression resolution first
    const resolvedValue =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[13]++, this.resolveExpressions(value, inputData));
    /* istanbul ignore next */
    cov_py7ubqbfc().s[14]++;
    switch (paramSchema.type) {
      case 'string':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][0]++;
        cov_py7ubqbfc().s[15]++;
        return this.convertToString(resolvedValue, paramSchema);
      case 'number':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][1]++;
        cov_py7ubqbfc().s[16]++;
        return this.convertToNumber(resolvedValue, paramSchema);
      case 'integer':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][2]++;
        cov_py7ubqbfc().s[17]++;
        return this.convertToInteger(resolvedValue, paramSchema);
      case 'boolean':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][3]++;
        cov_py7ubqbfc().s[18]++;
        return this.convertToBoolean(resolvedValue);
      case 'array':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][4]++;
        cov_py7ubqbfc().s[19]++;
        return this.convertToArray(resolvedValue, paramSchema, inputData);
      case 'object':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][5]++;
        cov_py7ubqbfc().s[20]++;
        return this.convertToObject(resolvedValue, paramSchema);
      default:
        /* istanbul ignore next */
        cov_py7ubqbfc().b[4][6]++;
        cov_py7ubqbfc().s[21]++;
        return resolvedValue;
    }
  }
  /**
   * Resolve n8n expressions in values
   */
  resolveExpressions(value, inputData) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[2]++;
    cov_py7ubqbfc().s[22]++;
    if (typeof value === 'string') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[5][0]++;
      // Handle simple variable references like {{ $json.field }}
      const expressionRegex =
      /* istanbul ignore next */
      (cov_py7ubqbfc().s[23]++, /\{\{\s*\$json\.([^}]+)\s*\}\}/g);
      /* istanbul ignore next */
      cov_py7ubqbfc().s[24]++;
      return value.replace(expressionRegex, (match, fieldPath) => {
        /* istanbul ignore next */
        cov_py7ubqbfc().f[3]++;
        const firstItem =
        /* istanbul ignore next */
        (cov_py7ubqbfc().s[25]++, inputData[0]);
        /* istanbul ignore next */
        cov_py7ubqbfc().s[26]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[7][0]++, firstItem) &&
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[7][1]++, firstItem.json)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[6][0]++;
          const fieldValue =
          /* istanbul ignore next */
          (cov_py7ubqbfc().s[27]++, this.getNestedValue(firstItem.json, fieldPath));
          /* istanbul ignore next */
          cov_py7ubqbfc().s[28]++;
          return fieldValue !== undefined ?
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[8][0]++, String(fieldValue)) :
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[8][1]++, match);
        } else
        /* istanbul ignore next */
        {
          cov_py7ubqbfc().b[6][1]++;
        }
        cov_py7ubqbfc().s[29]++;
        return match;
      });
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[5][1]++;
    }
    cov_py7ubqbfc().s[30]++;
    return value;
  }
  /**
   * Get nested value from object using dot notation
   */
  getNestedValue(obj, path) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[4]++;
    cov_py7ubqbfc().s[31]++;
    return path.split('.').reduce((current, key) => {
      /* istanbul ignore next */
      cov_py7ubqbfc().f[5]++;
      cov_py7ubqbfc().s[32]++;
      return /* istanbul ignore next */(cov_py7ubqbfc().b[10][0]++, current) &&
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[10][1]++, typeof current === 'object') &&
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[10][2]++, key in current) ?
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[9][0]++, current[key]) :
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[9][1]++, undefined);
    }, obj);
  }
  /**
   * Convert value to string with validation
   */
  convertToString(value, schema) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[6]++;
    let stringValue;
    /* istanbul ignore next */
    cov_py7ubqbfc().s[33]++;
    if (typeof value === 'string') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[11][0]++;
      cov_py7ubqbfc().s[34]++;
      stringValue = value;
    } else {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[11][1]++;
      cov_py7ubqbfc().s[35]++;
      if (
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[13][0]++, typeof value === 'number') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[13][1]++, typeof value === 'boolean')) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[12][0]++;
        cov_py7ubqbfc().s[36]++;
        stringValue = String(value);
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[12][1]++;
        cov_py7ubqbfc().s[37]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[15][0]++, value === null) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[15][1]++, value === undefined)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[14][0]++;
          cov_py7ubqbfc().s[38]++;
          stringValue = '';
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[14][1]++;
          cov_py7ubqbfc().s[39]++;
          if (typeof value === 'object') {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[16][0]++;
            cov_py7ubqbfc().s[40]++;
            stringValue = JSON.stringify(value);
          } else {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[16][1]++;
            cov_py7ubqbfc().s[41]++;
            stringValue = String(value);
          }
        }
      }
    }
    // Validate string constraints
    /* istanbul ignore next */
    cov_py7ubqbfc().s[42]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[18][0]++, schema.minLength !== undefined) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[18][1]++, stringValue.length < schema.minLength)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[17][0]++;
      cov_py7ubqbfc().s[43]++;
      throw new Error(`String value too short. Minimum length: ${schema.minLength}, got: ${stringValue.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[17][1]++;
    }
    cov_py7ubqbfc().s[44]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[20][0]++, schema.maxLength !== undefined) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[20][1]++, stringValue.length > schema.maxLength)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[19][0]++;
      cov_py7ubqbfc().s[45]++;
      throw new Error(`String value too long. Maximum length: ${schema.maxLength}, got: ${stringValue.length}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[19][1]++;
    }
    cov_py7ubqbfc().s[46]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[22][0]++, schema.pattern) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[22][1]++, !new RegExp(schema.pattern).test(stringValue))) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[21][0]++;
      cov_py7ubqbfc().s[47]++;
      throw new Error(`String value does not match required pattern: ${schema.pattern}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[21][1]++;
    }
    cov_py7ubqbfc().s[48]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[24][0]++, schema.enum) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[24][1]++, !schema.enum.includes(stringValue))) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[23][0]++;
      cov_py7ubqbfc().s[49]++;
      throw new Error(`Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${stringValue}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[23][1]++;
    }
    cov_py7ubqbfc().s[50]++;
    return stringValue;
  }
  /**
   * Convert value to number with validation
   */
  convertToNumber(value, schema) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[7]++;
    let numberValue;
    /* istanbul ignore next */
    cov_py7ubqbfc().s[51]++;
    if (typeof value === 'number') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[25][0]++;
      cov_py7ubqbfc().s[52]++;
      numberValue = value;
    } else {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[25][1]++;
      cov_py7ubqbfc().s[53]++;
      if (typeof value === 'string') {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[26][0]++;
        cov_py7ubqbfc().s[54]++;
        numberValue = parseFloat(value);
        /* istanbul ignore next */
        cov_py7ubqbfc().s[55]++;
        if (isNaN(numberValue)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[27][0]++;
          cov_py7ubqbfc().s[56]++;
          throw new Error(`Cannot convert '${value}' to number`);
        } else
        /* istanbul ignore next */
        {
          cov_py7ubqbfc().b[27][1]++;
        }
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[26][1]++;
        cov_py7ubqbfc().s[57]++;
        if (typeof value === 'boolean') {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[28][0]++;
          cov_py7ubqbfc().s[58]++;
          numberValue = value ?
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[29][0]++, 1) :
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[29][1]++, 0);
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[28][1]++;
          cov_py7ubqbfc().s[59]++;
          throw new Error(`Cannot convert ${typeof value} to number`);
        }
      }
    }
    // Validate number constraints
    /* istanbul ignore next */
    cov_py7ubqbfc().s[60]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[31][0]++, schema.minimum !== undefined) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[31][1]++, numberValue < schema.minimum)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[30][0]++;
      cov_py7ubqbfc().s[61]++;
      throw new Error(`Number too small. Minimum: ${schema.minimum}, got: ${numberValue}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[30][1]++;
    }
    cov_py7ubqbfc().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[33][0]++, schema.maximum !== undefined) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[33][1]++, numberValue > schema.maximum)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[32][0]++;
      cov_py7ubqbfc().s[63]++;
      throw new Error(`Number too large. Maximum: ${schema.maximum}, got: ${numberValue}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[32][1]++;
    }
    cov_py7ubqbfc().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[35][0]++, schema.enum) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[35][1]++, !schema.enum.includes(numberValue))) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[34][0]++;
      cov_py7ubqbfc().s[65]++;
      throw new Error(`Invalid enum value. Expected one of: ${schema.enum.join(', ')}, got: ${numberValue}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[34][1]++;
    }
    cov_py7ubqbfc().s[66]++;
    return numberValue;
  }
  /**
   * Convert value to integer with validation
   */
  convertToInteger(value, schema) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[8]++;
    const numberValue =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[67]++, this.convertToNumber(value, schema));
    /* istanbul ignore next */
    cov_py7ubqbfc().s[68]++;
    if (!Number.isInteger(numberValue)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[36][0]++;
      cov_py7ubqbfc().s[69]++;
      throw new Error(`Value must be an integer, got: ${numberValue}`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[36][1]++;
    }
    cov_py7ubqbfc().s[70]++;
    return numberValue;
  }
  /**
   * Convert value to boolean
   */
  convertToBoolean(value) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[9]++;
    cov_py7ubqbfc().s[71]++;
    if (typeof value === 'boolean') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[37][0]++;
      cov_py7ubqbfc().s[72]++;
      return value;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[37][1]++;
    }
    cov_py7ubqbfc().s[73]++;
    if (typeof value === 'string') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[38][0]++;
      const lowerValue =
      /* istanbul ignore next */
      (cov_py7ubqbfc().s[74]++, value.toLowerCase());
      /* istanbul ignore next */
      cov_py7ubqbfc().s[75]++;
      if (
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[40][0]++, lowerValue === 'true') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[40][1]++, lowerValue === '1') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[40][2]++, lowerValue === 'yes')) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[39][0]++;
        cov_py7ubqbfc().s[76]++;
        return true;
      } else
      /* istanbul ignore next */
      {
        cov_py7ubqbfc().b[39][1]++;
      }
      cov_py7ubqbfc().s[77]++;
      if (
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[42][0]++, lowerValue === 'false') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[42][1]++, lowerValue === '0') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[42][2]++, lowerValue === 'no') ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[42][3]++, lowerValue === '')) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[41][0]++;
        cov_py7ubqbfc().s[78]++;
        return false;
      } else
      /* istanbul ignore next */
      {
        cov_py7ubqbfc().b[41][1]++;
      }
      cov_py7ubqbfc().s[79]++;
      throw new Error(`Cannot convert '${value}' to boolean`);
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[38][1]++;
    }
    cov_py7ubqbfc().s[80]++;
    if (typeof value === 'number') {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[43][0]++;
      cov_py7ubqbfc().s[81]++;
      return value !== 0;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[43][1]++;
    }
    cov_py7ubqbfc().s[82]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[45][0]++, value === null) ||
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[45][1]++, value === undefined)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[44][0]++;
      cov_py7ubqbfc().s[83]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[44][1]++;
    }
    cov_py7ubqbfc().s[84]++;
    return Boolean(value);
  }
  /**
   * Convert value to array with validation
   */
  convertToArray(value, schema, inputData) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[10]++;
    let arrayValue;
    /* istanbul ignore next */
    cov_py7ubqbfc().s[85]++;
    if (Array.isArray(value)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[46][0]++;
      cov_py7ubqbfc().s[86]++;
      arrayValue = value;
    } else {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[46][1]++;
      cov_py7ubqbfc().s[87]++;
      if (typeof value === 'string') {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[47][0]++;
        cov_py7ubqbfc().s[88]++;
        try {
          const parsed =
          /* istanbul ignore next */
          (cov_py7ubqbfc().s[89]++, JSON.parse(value));
          /* istanbul ignore next */
          cov_py7ubqbfc().s[90]++;
          if (Array.isArray(parsed)) {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[48][0]++;
            cov_py7ubqbfc().s[91]++;
            arrayValue = parsed;
          } else {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[48][1]++;
            cov_py7ubqbfc().s[92]++;
            // Treat as single-item array
            arrayValue = [parsed];
          }
        } catch {
          /* istanbul ignore next */
          cov_py7ubqbfc().s[93]++;
          // Treat string as single-item array
          arrayValue = [value];
        }
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[47][1]++;
        cov_py7ubqbfc().s[94]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[50][0]++, value === null) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[50][1]++, value === undefined)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[49][0]++;
          cov_py7ubqbfc().s[95]++;
          arrayValue = [];
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[49][1]++;
          cov_py7ubqbfc().s[96]++;
          // Wrap single value in array
          arrayValue = [value];
        }
      }
    }
    // Convert array items if schema is provided
    /* istanbul ignore next */
    cov_py7ubqbfc().s[97]++;
    if (schema.items) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[51][0]++;
      cov_py7ubqbfc().s[98]++;
      arrayValue = arrayValue.map(item => {
        /* istanbul ignore next */
        cov_py7ubqbfc().f[11]++;
        cov_py7ubqbfc().s[99]++;
        return this.convertValueToMCPType(item, schema.items, inputData);
      });
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[51][1]++;
    }
    cov_py7ubqbfc().s[100]++;
    return arrayValue;
  }
  /**
   * Convert value to object with validation
   */
  convertToObject(value, schema) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[12]++;
    let objectValue;
    /* istanbul ignore next */
    cov_py7ubqbfc().s[101]++;
    if (
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[53][0]++, value) &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[53][1]++, typeof value === 'object') &&
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[53][2]++, !Array.isArray(value))) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[52][0]++;
      cov_py7ubqbfc().s[102]++;
      objectValue = value;
    } else {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[52][1]++;
      cov_py7ubqbfc().s[103]++;
      if (typeof value === 'string') {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[54][0]++;
        cov_py7ubqbfc().s[104]++;
        try {
          const parsed =
          /* istanbul ignore next */
          (cov_py7ubqbfc().s[105]++, JSON.parse(value));
          /* istanbul ignore next */
          cov_py7ubqbfc().s[106]++;
          if (
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[56][0]++, parsed) &&
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[56][1]++, typeof parsed === 'object') &&
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[56][2]++, !Array.isArray(parsed))) {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[55][0]++;
            cov_py7ubqbfc().s[107]++;
            objectValue = parsed;
          } else {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[55][1]++;
            cov_py7ubqbfc().s[108]++;
            throw new Error('Parsed value is not an object');
          }
        } catch {
          /* istanbul ignore next */
          cov_py7ubqbfc().s[109]++;
          throw new Error(`Cannot parse '${value}' as JSON object`);
        }
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[54][1]++;
        cov_py7ubqbfc().s[110]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[58][0]++, value === null) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[58][1]++, value === undefined)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[57][0]++;
          cov_py7ubqbfc().s[111]++;
          objectValue = {};
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[57][1]++;
          cov_py7ubqbfc().s[112]++;
          throw new Error(`Cannot convert ${typeof value} to object`);
        }
      }
    }
    // Validate object properties if schema is provided
    /* istanbul ignore next */
    cov_py7ubqbfc().s[113]++;
    if (schema.properties) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[59][0]++;
      const validatedObject =
      /* istanbul ignore next */
      (cov_py7ubqbfc().s[114]++, {});
      /* istanbul ignore next */
      cov_py7ubqbfc().s[115]++;
      for (const [propName, propSchema] of Object.entries(schema.properties)) {
        const propValue =
        /* istanbul ignore next */
        (cov_py7ubqbfc().s[116]++, objectValue[propName]);
        /* istanbul ignore next */
        cov_py7ubqbfc().s[117]++;
        if (propValue !== undefined) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[60][0]++;
          cov_py7ubqbfc().s[118]++;
          validatedObject[propName] = this.convertValueToMCPType(propValue, propSchema, []);
        } else
        /* istanbul ignore next */
        {
          cov_py7ubqbfc().b[60][1]++;
        }
      }
      /* istanbul ignore next */
      cov_py7ubqbfc().s[119]++;
      objectValue = validatedObject;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[59][1]++;
    }
    cov_py7ubqbfc().s[120]++;
    return objectValue;
  }
  /**
   * Validate mapped arguments against tool schema
   */
  validateMappedArguments(mappedArgs, tool) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[13]++;
    const schema =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[121]++, tool.inputSchema);
    // Check required parameters
    /* istanbul ignore next */
    cov_py7ubqbfc().s[122]++;
    if (schema.required) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[61][0]++;
      cov_py7ubqbfc().s[123]++;
      for (const requiredParam of schema.required) {
        /* istanbul ignore next */
        cov_py7ubqbfc().s[124]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[63][0]++, !(requiredParam in mappedArgs)) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[63][1]++, mappedArgs[requiredParam] === undefined)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[62][0]++;
          cov_py7ubqbfc().s[125]++;
          throw new Error(`Required parameter '${requiredParam}' is missing`);
        } else
        /* istanbul ignore next */
        {
          cov_py7ubqbfc().b[62][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[61][1]++;
    }
    // Check for unexpected parameters
    cov_py7ubqbfc().s[126]++;
    if (!schema.additionalProperties) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[64][0]++;
      const allowedParams =
      /* istanbul ignore next */
      (cov_py7ubqbfc().s[127]++, new Set(Object.keys(schema.properties)));
      /* istanbul ignore next */
      cov_py7ubqbfc().s[128]++;
      for (const argName of Object.keys(mappedArgs)) {
        /* istanbul ignore next */
        cov_py7ubqbfc().s[129]++;
        if (!allowedParams.has(argName)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[65][0]++;
          cov_py7ubqbfc().s[130]++;
          throw new Error(`Unexpected parameter '${argName}'. Tool does not accept this parameter.`);
        } else
        /* istanbul ignore next */
        {
          cov_py7ubqbfc().b[65][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[64][1]++;
    }
  }
  /**
   * Map MCP response back to n8n execution data
   */
  mapMCPResponseToN8n(mcpResponse, context) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[14]++;
    const outputData =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[131]++, []);
    /* istanbul ignore next */
    cov_py7ubqbfc().s[132]++;
    try {
      /* istanbul ignore next */
      cov_py7ubqbfc().s[133]++;
      // Handle different response formats
      if (
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[67][0]++, mcpResponse.content) &&
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[67][1]++, Array.isArray(mcpResponse.content))) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[66][0]++;
        cov_py7ubqbfc().s[134]++;
        // MCP standard response format
        for (let i =
        /* istanbul ignore next */
        (cov_py7ubqbfc().s[135]++, 0); i < mcpResponse.content.length; i++) {
          const content =
          /* istanbul ignore next */
          (cov_py7ubqbfc().s[136]++, mcpResponse.content[i]);
          const executionData =
          /* istanbul ignore next */
          (cov_py7ubqbfc().s[137]++, {
            json: this.processContentItem(content, i),
            pairedItem: {
              item: 0
            }
          });
          // Handle binary data
          /* istanbul ignore next */
          cov_py7ubqbfc().s[138]++;
          if (
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[69][0]++, content.type === 'image') &&
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[69][1]++, content.data)) {
            /* istanbul ignore next */
            cov_py7ubqbfc().b[68][0]++;
            cov_py7ubqbfc().s[139]++;
            executionData.binary = {
              data: {
                data: content.data,
                mimeType:
                /* istanbul ignore next */
                (cov_py7ubqbfc().b[70][0]++, content.mimeType) ||
                /* istanbul ignore next */
                (cov_py7ubqbfc().b[70][1]++, 'image/png'),
                fileName: `mcp_response_${i}.${this.getFileExtension(content.mimeType)}`
              }
            };
          } else
          /* istanbul ignore next */
          {
            cov_py7ubqbfc().b[68][1]++;
          }
          cov_py7ubqbfc().s[140]++;
          outputData.push(executionData);
        }
      } else {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[66][1]++;
        cov_py7ubqbfc().s[141]++;
        if (
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[72][0]++, typeof mcpResponse === 'object') &&
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[72][1]++, mcpResponse !== null)) {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[71][0]++;
          cov_py7ubqbfc().s[142]++;
          // Direct object response
          outputData.push({
            json: mcpResponse,
            pairedItem: {
              item: 0
            }
          });
        } else {
          /* istanbul ignore next */
          cov_py7ubqbfc().b[71][1]++;
          cov_py7ubqbfc().s[143]++;
          // Simple value response
          outputData.push({
            json: {
              result: mcpResponse
            },
            pairedItem: {
              item: 0
            }
          });
        }
      }
      // Ensure we always return at least one item
      /* istanbul ignore next */
      cov_py7ubqbfc().s[144]++;
      if (outputData.length === 0) {
        /* istanbul ignore next */
        cov_py7ubqbfc().b[73][0]++;
        cov_py7ubqbfc().s[145]++;
        outputData.push({
          json: {
            message: 'MCP tool executed successfully with no output'
          },
          pairedItem: {
            item: 0
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_py7ubqbfc().b[73][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_py7ubqbfc().s[146]++;
      // Return error as output data
      outputData.push({
        json: {
          error: true,
          message: error instanceof Error ?
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[74][0]++, error.message) :
          /* istanbul ignore next */
          (cov_py7ubqbfc().b[74][1]++, 'Unknown error processing MCP response'),
          originalResponse: mcpResponse
        },
        pairedItem: {
          item: 0
        }
      });
    }
    /* istanbul ignore next */
    cov_py7ubqbfc().s[147]++;
    return outputData;
  }
  /**
   * Process individual MCP content item
   */
  processContentItem(content, index) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[15]++;
    const result =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[148]++, {
      type:
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[75][0]++, content.type) ||
      /* istanbul ignore next */
      (cov_py7ubqbfc().b[75][1]++, 'unknown'),
      index
    });
    /* istanbul ignore next */
    cov_py7ubqbfc().s[149]++;
    switch (content.type) {
      case 'text':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[76][0]++;
        cov_py7ubqbfc().s[150]++;
        result.text =
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[77][0]++, content.text) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[77][1]++, '');
        /* istanbul ignore next */
        cov_py7ubqbfc().s[151]++;
        break;
      case 'image':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[76][1]++;
        cov_py7ubqbfc().s[152]++;
        result.mimeType =
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[78][0]++, content.mimeType) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[78][1]++, 'image/png');
        /* istanbul ignore next */
        cov_py7ubqbfc().s[153]++;
        result.hasData = Boolean(content.data);
        /* istanbul ignore next */
        cov_py7ubqbfc().s[154]++;
        break;
      case 'resource':
        /* istanbul ignore next */
        cov_py7ubqbfc().b[76][2]++;
        cov_py7ubqbfc().s[155]++;
        result.uri = content.uri;
        /* istanbul ignore next */
        cov_py7ubqbfc().s[156]++;
        result.mimeType = content.mimeType;
        /* istanbul ignore next */
        cov_py7ubqbfc().s[157]++;
        break;
      default:
        /* istanbul ignore next */
        cov_py7ubqbfc().b[76][3]++;
        cov_py7ubqbfc().s[158]++;
        // Copy all properties for unknown types
        Object.assign(result, content);
    }
    /* istanbul ignore next */
    cov_py7ubqbfc().s[159]++;
    return result;
  }
  /**
   * Get file extension from MIME type
   */
  getFileExtension(mimeType) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[16]++;
    cov_py7ubqbfc().s[160]++;
    if (!mimeType) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[79][0]++;
      cov_py7ubqbfc().s[161]++;
      return 'bin';
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[79][1]++;
    }
    const extensions =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[162]++, {
      'image/png': 'png',
      'image/jpeg': 'jpg',
      'image/gif': 'gif',
      'image/svg+xml': 'svg',
      'text/plain': 'txt',
      'application/json': 'json',
      'application/xml': 'xml',
      'text/html': 'html',
      'application/pdf': 'pdf'
    });
    /* istanbul ignore next */
    cov_py7ubqbfc().s[163]++;
    return /* istanbul ignore next */(cov_py7ubqbfc().b[80][0]++, extensions[mimeType]) ||
    /* istanbul ignore next */
    (cov_py7ubqbfc().b[80][1]++, 'bin');
  }
  /**
   * Create parameter validation summary
   */
  createValidationSummary(tool) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[17]++;
    const summary =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[164]++, {});
    /* istanbul ignore next */
    cov_py7ubqbfc().s[165]++;
    for (const [paramName, paramSchema] of Object.entries(tool.inputSchema.properties)) {
      /* istanbul ignore next */
      cov_py7ubqbfc().s[166]++;
      summary[paramName] = {
        type: paramSchema.type,
        required:
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[81][0]++, tool.inputSchema.required?.includes(paramName)) ||
        /* istanbul ignore next */
        (cov_py7ubqbfc().b[81][1]++, false),
        hasDefault: paramSchema.default !== undefined,
        constraints: this.getParameterConstraints(paramSchema)
      };
    }
    /* istanbul ignore next */
    cov_py7ubqbfc().s[167]++;
    return summary;
  }
  /**
   * Get parameter constraints for validation summary
   */
  getParameterConstraints(schema) {
    /* istanbul ignore next */
    cov_py7ubqbfc().f[18]++;
    const constraints =
    /* istanbul ignore next */
    (cov_py7ubqbfc().s[168]++, {});
    /* istanbul ignore next */
    cov_py7ubqbfc().s[169]++;
    if (schema.enum) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[82][0]++;
      cov_py7ubqbfc().s[170]++;
      constraints.enum = schema.enum;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[82][1]++;
    }
    cov_py7ubqbfc().s[171]++;
    if (schema.minimum !== undefined) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[83][0]++;
      cov_py7ubqbfc().s[172]++;
      constraints.minimum = schema.minimum;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[83][1]++;
    }
    cov_py7ubqbfc().s[173]++;
    if (schema.maximum !== undefined) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[84][0]++;
      cov_py7ubqbfc().s[174]++;
      constraints.maximum = schema.maximum;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[84][1]++;
    }
    cov_py7ubqbfc().s[175]++;
    if (schema.minLength !== undefined) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[85][0]++;
      cov_py7ubqbfc().s[176]++;
      constraints.minLength = schema.minLength;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[85][1]++;
    }
    cov_py7ubqbfc().s[177]++;
    if (schema.maxLength !== undefined) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[86][0]++;
      cov_py7ubqbfc().s[178]++;
      constraints.maxLength = schema.maxLength;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[86][1]++;
    }
    cov_py7ubqbfc().s[179]++;
    if (schema.pattern) {
      /* istanbul ignore next */
      cov_py7ubqbfc().b[87][0]++;
      cov_py7ubqbfc().s[180]++;
      constraints.pattern = schema.pattern;
    } else
    /* istanbul ignore next */
    {
      cov_py7ubqbfc().b[87][1]++;
    }
    cov_py7ubqbfc().s[181]++;
    return constraints;
  }
}
/* istanbul ignore next */
cov_py7ubqbfc().s[182]++;
exports.ParameterMapper = ParameterMapper;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,