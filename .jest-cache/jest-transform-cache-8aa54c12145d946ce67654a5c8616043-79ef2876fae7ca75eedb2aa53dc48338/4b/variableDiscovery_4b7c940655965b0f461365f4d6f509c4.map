{"version":3,"names":["cov_22z1fv2v3","actualCoverage","discoverWorkflowVariables","workflow","nodeId","options","b","f","includeGlobal","includeNodeOutputs","includeExpressionFunctions","s","variables","global","getGlobalVariables","getWorkflowVariables","execution","getExecutionVariables","nodeOutputs","getNodeOutputVariables","getAllNodeOutputVariables","functions","getExpressionFunctions","extractAvailableVariables","push","name","type","source","description","example","dataType","path","id","active","staticData","Object","keys","length","forEach","key","currentNodeId","nodes","precedingNodes","findPrecedingNodes","node","parameters","param","connections","sourceNodeId","main","outputConnections","Array","isArray","connection","sourceNode","find","n"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/variableDiscovery.ts"],"sourcesContent":["import { N8nWorkflow, N8nNode } from '../types/n8n.js';\n\nexport interface VariableDiscoveryOptions {\n  includeGlobal?: boolean;\n  includeNodeOutputs?: boolean;\n  includeExpressionFunctions?: boolean;\n}\n\nexport interface WorkflowVariable {\n  name: string;\n  type: 'global' | 'node_output' | 'workflow_data' | 'execution_data' | 'expression_function';\n  source: string;\n  description?: string;\n  example?: string;\n  dataType?: string;\n  path?: string;\n}\n\nexport interface VariableContext {\n  [category: string]: WorkflowVariable[];\n}\n\n/**\n * Discover available variables within a workflow context\n */\nexport async function discoverWorkflowVariables(\n  workflow: N8nWorkflow,\n  nodeId?: string,\n  options: VariableDiscoveryOptions = {}\n): Promise<VariableContext> {\n  const {\n    includeGlobal = true,\n    includeNodeOutputs = true,\n    includeExpressionFunctions = false,\n  } = options;\n\n  const variables: VariableContext = {};\n\n  // Global variables available in all workflows\n  if (includeGlobal) {\n    variables.global = getGlobalVariables();\n  }\n\n  // Workflow-specific variables\n  variables.workflow = getWorkflowVariables(workflow);\n\n  // Execution context variables\n  variables.execution = getExecutionVariables();\n\n  // Node-specific variables based on context\n  if (nodeId && includeNodeOutputs) {\n    variables.nodeOutputs = await getNodeOutputVariables(workflow, nodeId);\n  } else if (includeNodeOutputs) {\n    variables.nodeOutputs = await getAllNodeOutputVariables(workflow);\n  }\n\n  // Expression functions\n  if (includeExpressionFunctions) {\n    variables.functions = getExpressionFunctions();\n  }\n\n  return variables;\n}\n\n/**\n * Extract available variables for a specific node context\n */\nexport async function extractAvailableVariables(\n  workflow: N8nWorkflow,\n  nodeId: string\n): Promise<WorkflowVariable[]> {\n  const variables: WorkflowVariable[] = [];\n\n  // Add global variables\n  variables.push(...getGlobalVariables());\n\n  // Add workflow variables\n  variables.push(...getWorkflowVariables(workflow));\n\n  // Add execution variables\n  variables.push(...getExecutionVariables());\n\n  // Add preceding node outputs\n  variables.push(...(await getNodeOutputVariables(workflow, nodeId)));\n\n  return variables;\n}\n\n/**\n * Get global variables available in all n8n workflows\n */\nfunction getGlobalVariables(): WorkflowVariable[] {\n  return [\n    {\n      name: '$now',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Current timestamp',\n      example: '{{ $now }}',\n      dataType: 'DateTime',\n      path: '$now',\n    },\n    {\n      name: '$today',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Current date at midnight',\n      example: '{{ $today }}',\n      dataType: 'DateTime',\n      path: '$today',\n    },\n    {\n      name: '$workflow',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Workflow information',\n      example: '{{ $workflow.id }}',\n      dataType: 'Object',\n      path: '$workflow',\n    },\n    {\n      name: '$execution',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Current execution information',\n      example: '{{ $execution.id }}',\n      dataType: 'Object',\n      path: '$execution',\n    },\n    {\n      name: '$vars',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Environment variables',\n      example: '{{ $vars.MY_VARIABLE }}',\n      dataType: 'Object',\n      path: '$vars',\n    },\n    {\n      name: '$secrets',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Secret variables',\n      example: '{{ $secrets.MY_SECRET }}',\n      dataType: 'Object',\n      path: '$secrets',\n    },\n    {\n      name: '$prevNode',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Data from the previous node',\n      example: '{{ $prevNode.data }}',\n      dataType: 'Object',\n      path: '$prevNode',\n    },\n    {\n      name: '$input',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Input data for current node',\n      example: '{{ $input.all() }}',\n      dataType: 'Object',\n      path: '$input',\n    },\n    {\n      name: '$json',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'JSON data from previous node',\n      example: '{{ $json.propertyName }}',\n      dataType: 'Object',\n      path: '$json',\n    },\n    {\n      name: '$binary',\n      type: 'global',\n      source: 'n8n-core',\n      description: 'Binary data from previous node',\n      example: '{{ $binary.data }}',\n      dataType: 'Object',\n      path: '$binary',\n    },\n  ];\n}\n\n/**\n * Get workflow-specific variables\n */\nfunction getWorkflowVariables(workflow: N8nWorkflow): WorkflowVariable[] {\n  const variables: WorkflowVariable[] = [];\n\n  // Workflow metadata\n  variables.push({\n    name: 'workflow.id',\n    type: 'workflow_data',\n    source: workflow.name || 'Current Workflow',\n    description: 'Workflow ID',\n    example: `{{ $workflow.id }} // ${workflow.id}`,\n    dataType: 'string',\n    path: '$workflow.id',\n  });\n\n  variables.push({\n    name: 'workflow.name',\n    type: 'workflow_data',\n    source: workflow.name || 'Current Workflow',\n    description: 'Workflow name',\n    example: `{{ $workflow.name }} // ${workflow.name}`,\n    dataType: 'string',\n    path: '$workflow.name',\n  });\n\n  variables.push({\n    name: 'workflow.active',\n    type: 'workflow_data',\n    source: workflow.name || 'Current Workflow',\n    description: 'Whether workflow is active',\n    example: `{{ $workflow.active }} // ${workflow.active}`,\n    dataType: 'boolean',\n    path: '$workflow.active',\n  });\n\n  // Static data if available\n  if (workflow.staticData && Object.keys(workflow.staticData).length > 0) {\n    Object.keys(workflow.staticData).forEach(key => {\n      variables.push({\n        name: `staticData.${key}`,\n        type: 'workflow_data',\n        source: workflow.name || 'Current Workflow',\n        description: `Static data: ${key}`,\n        example: `{{ $workflow.staticData.${key} }}`,\n        dataType: 'unknown',\n        path: `$workflow.staticData.${key}`,\n      });\n    });\n  }\n\n  return variables;\n}\n\n/**\n * Get execution context variables\n */\nfunction getExecutionVariables(): WorkflowVariable[] {\n  return [\n    {\n      name: 'execution.id',\n      type: 'execution_data',\n      source: 'n8n-execution',\n      description: 'Current execution ID',\n      example: '{{ $execution.id }}',\n      dataType: 'string',\n      path: '$execution.id',\n    },\n    {\n      name: 'execution.mode',\n      type: 'execution_data',\n      source: 'n8n-execution',\n      description: 'Execution mode (manual, trigger, etc.)',\n      example: '{{ $execution.mode }}',\n      dataType: 'string',\n      path: '$execution.mode',\n    },\n    {\n      name: 'execution.resumeUrl',\n      type: 'execution_data',\n      source: 'n8n-execution',\n      description: 'URL to resume execution',\n      example: '{{ $execution.resumeUrl }}',\n      dataType: 'string',\n      path: '$execution.resumeUrl',\n    },\n  ];\n}\n\n/**\n * Get variables from node outputs that precede the given node\n */\nasync function getNodeOutputVariables(\n  workflow: N8nWorkflow,\n  currentNodeId: string\n): Promise<WorkflowVariable[]> {\n  const variables: WorkflowVariable[] = [];\n\n  if (!workflow.nodes) {\n    return variables;\n  }\n\n  // Find nodes that can provide data to the current node\n  const precedingNodes = findPrecedingNodes(workflow, currentNodeId);\n\n  precedingNodes.forEach(node => {\n    // Add node-specific variables\n    variables.push({\n      name: `${node.name}.json`,\n      type: 'node_output',\n      source: node.name,\n      description: `JSON output from ${node.name}`,\n      example: `{{ $node[\"${node.name}\"].json }}`,\n      dataType: 'Object',\n      path: `$node[\"${node.name}\"].json`,\n    });\n\n    variables.push({\n      name: `${node.name}.binary`,\n      type: 'node_output',\n      source: node.name,\n      description: `Binary output from ${node.name}`,\n      example: `{{ $node[\"${node.name}\"].binary }}`,\n      dataType: 'Object',\n      path: `$node[\"${node.name}\"].binary`,\n    });\n\n    variables.push({\n      name: `${node.name}.context`,\n      type: 'node_output',\n      source: node.name,\n      description: `Context from ${node.name}`,\n      example: `{{ $node[\"${node.name}\"].context }}`,\n      dataType: 'Object',\n      path: `$node[\"${node.name}\"].context`,\n    });\n\n    // Add parameter-based variables if available\n    if (node.parameters && Object.keys(node.parameters).length > 0) {\n      Object.keys(node.parameters).forEach(param => {\n        variables.push({\n          name: `${node.name}.parameter.${param}`,\n          type: 'node_output',\n          source: node.name,\n          description: `Parameter \"${param}\" from ${node.name}`,\n          example: `{{ $node[\"${node.name}\"].parameter[\"${param}\"] }}`,\n          dataType: 'unknown',\n          path: `$node[\"${node.name}\"].parameter[\"${param}\"]`,\n        });\n      });\n    }\n  });\n\n  return variables;\n}\n\n/**\n * Get all possible node output variables from the workflow\n */\nasync function getAllNodeOutputVariables(workflow: N8nWorkflow): Promise<WorkflowVariable[]> {\n  const variables: WorkflowVariable[] = [];\n\n  if (!workflow.nodes) {\n    return variables;\n  }\n\n  workflow.nodes.forEach(node => {\n    variables.push({\n      name: `${node.name}.json`,\n      type: 'node_output',\n      source: node.name,\n      description: `JSON output from ${node.name} (${node.type})`,\n      example: `{{ $node[\"${node.name}\"].json }}`,\n      dataType: 'Object',\n      path: `$node[\"${node.name}\"].json`,\n    });\n\n    variables.push({\n      name: `${node.name}.binary`,\n      type: 'node_output',\n      source: node.name,\n      description: `Binary output from ${node.name} (${node.type})`,\n      example: `{{ $node[\"${node.name}\"].binary }}`,\n      dataType: 'Object',\n      path: `$node[\"${node.name}\"].binary`,\n    });\n  });\n\n  return variables;\n}\n\n/**\n * Get available expression functions\n */\nfunction getExpressionFunctions(): WorkflowVariable[] {\n  return [\n    // Date functions\n    {\n      name: 'DateTime.now()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Get current date and time',\n      example: '{{ DateTime.now() }}',\n      dataType: 'DateTime',\n    },\n    {\n      name: 'DateTime.format()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Format date and time',\n      example: '{{ DateTime.now().format(\"yyyy-MM-dd\") }}',\n      dataType: 'string',\n    },\n\n    // String functions\n    {\n      name: 'String.toLowerCase()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Convert string to lowercase',\n      example: '{{ \"HELLO\".toLowerCase() }}',\n      dataType: 'string',\n    },\n    {\n      name: 'String.toUpperCase()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Convert string to uppercase',\n      example: '{{ \"hello\".toUpperCase() }}',\n      dataType: 'string',\n    },\n\n    // Math functions\n    {\n      name: 'Math.floor()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Round number down',\n      example: '{{ Math.floor(4.7) }}',\n      dataType: 'number',\n    },\n    {\n      name: 'Math.random()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Generate random number',\n      example: '{{ Math.random() }}',\n      dataType: 'number',\n    },\n\n    // Array functions\n    {\n      name: 'Array.length',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Get array length',\n      example: '{{ $json.items.length }}',\n      dataType: 'number',\n    },\n\n    // Object functions\n    {\n      name: 'Object.keys()',\n      type: 'expression_function',\n      source: 'n8n-expressions',\n      description: 'Get object keys',\n      example: '{{ Object.keys($json) }}',\n      dataType: 'Array<string>',\n    },\n  ];\n}\n\n/**\n * Find nodes that precede the given node in the workflow\n */\nfunction findPrecedingNodes(workflow: N8nWorkflow, nodeId: string): N8nNode[] {\n  const precedingNodes: N8nNode[] = [];\n\n  if (!workflow.nodes || !workflow.connections) {\n    return precedingNodes;\n  }\n\n  // Look through connections to find nodes that connect to the current node\n  Object.keys(workflow.connections).forEach(sourceNodeId => {\n    const connections = workflow.connections[sourceNodeId] as any;\n    if (connections && connections.main) {\n      connections.main.forEach((outputConnections: any) => {\n        if (Array.isArray(outputConnections)) {\n          outputConnections.forEach((connection: any) => {\n            if (connection.node === nodeId) {\n              const sourceNode = workflow.nodes!.find(n => n.id === sourceNodeId);\n              if (sourceNode && !precedingNodes.find(n => n.id === sourceNode.id)) {\n                precedingNodes.push(sourceNode);\n              }\n            }\n          });\n        }\n      });\n    }\n  });\n\n  return precedingNodes;\n}\n"],"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","ignoreList":[]}