{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/test/binary-data.test.ts","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA0E;AAC1E,gDAAkC;AAClC,2CAA6B;AAG7B,kEAAiE;AAEjE,IAAA,kBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;IACtC,IAAI,YAAoB,CAAC;IACzB,IAAI,eAAuB,CAAC;IAC5B,IAAI,WAA8B,CAAC;IACnC,MAAM,YAAY,GAAG,eAAe,CAAC;IACrC,MAAM,YAAY,GAAG,YAAY,CAAC;IAElC,IAAA,mBAAS,EAAC,KAAK,IAAI,EAAE;QACnB,wBAAwB;QACxB,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,WAAW,CAAC,CAAC;QACtD,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7C,mBAAmB;QACnB,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAChD,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,yGAAyG,CAAC,CAAC;QACzI,MAAM,EAAE,CAAC,SAAS,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;QAElD,0BAA0B;QAC1B,WAAW,GAAG,IAAI,mCAAiB,CAAC;YAClC,aAAa,EAAE,OAAO;YACtB,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;YACtC,gBAAgB,EAAE,CAAC,QAAQ,EAAE,eAAe,EAAE,SAAS,CAAC;SACzD,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,KAAK,IAAI,EAAE;QAClB,sBAAsB;QACtB,IAAI,CAAC;YACH,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;YAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC3C,MAAM,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,wBAAwB;QAC1B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,YAAE,EAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,YAAY,CAC/C,YAAY,EACZ,YAAY,EACZ,eAAe,CAAC,MAAM,CACvB,CAAC;YAEF,IAAA,gBAAM,EAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtC,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,YAAY,CAC/C,gBAAgB,EAChB,YAAY,EACZ,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,OAAO;YACzB,EAAE,WAAW,EAAE,EAAE,GAAG,IAAI,GAAG,IAAI,EAAE,CAAC,aAAa;aAChD,CAAC;YAEF,IAAA,gBAAM,EAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM,CAAC,gBAAgB,CAAC,8BAA8B,CAAC,CAAC,CAAC;QAC/F,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,YAAY,CAC/C,UAAU,EACV,0BAA0B,EAC1B,IAAI,EACJ,EAAE,gBAAgB,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,EAAE,CAC5C,CAAC;YAEF,IAAA,gBAAM,EAAC,UAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,IAAA,gBAAM,EAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,gBAAM,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,YAAE,EAAC,4BAA4B,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,UAAU,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;YACrF,IAAA,gBAAM,EAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE9B,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAChD,IAAA,gBAAM,EAAC,OAAO,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,MAAM,GAAG,wDAAa,QAAQ,GAAC,CAAC;YACtC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAEhF,+BAA+B;YAC/B,MAAM,WAAW,GAAG,MAAM,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YACpD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE5E,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,SAAS,GAA2B;gBACxC,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,kBAAkB;gBAC3B,MAAM,EAAE,iBAAiB;gBACzB,MAAM,EAAE,WAAW;gBACnB,MAAM,EAAE,YAAY;aACrB,CAAC;YAEF,KAAK,MAAM,CAAC,GAAG,EAAE,YAAY,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;gBAC5D,MAAM,QAAQ,GAAG,OAAO,GAAG,EAAE,CAAC;gBAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,CAAC;gBAEvD,4CAA4C;gBAC5C,MAAM,YAAY,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,0BAA0B,CAAC;gBACxE,IAAA,gBAAM,EAAC,YAAY,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,mBAAmB,EAAE,GAAG,EAAE;QACjC,IAAA,YAAE,EAAC,8CAA8C,EAAE,GAAG,EAAE;YACtD,MAAM,UAAU,GAAG,UAAU,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;YACrF,MAAM,QAAQ,GAAG;gBACf,UAAU;gBACV,QAAQ,EAAE,YAAY;gBACtB,UAAU,EAAE,eAAe,CAAC,MAAM;gBAClC,gBAAgB,EAAE,CAAC;gBACnB,eAAe,EAAE,CAAC;gBAClB,MAAM,EAAE,SAAkB;gBAC1B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACpC,CAAC;YAEF,IAAA,gBAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;YAC9D,IAAA,gBAAM,EAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7C,IAAA,gBAAM,EAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;YACzD,IAAA,gBAAM,EAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxC,IAAA,gBAAM,EAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,UAAU,GAAG,IAAI,CAAC;YACxB,MAAM,gBAAgB,GAAG,GAAG,CAAC;YAC7B,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,gBAAgB,GAAG,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC;YAE1E,IAAA,gBAAM,EAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,0BAA0B,EAAE,GAAG,EAAE;QACxC,IAAA,YAAE,EAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,YAAY,GAAG,eAAe,CAAC;YACrC,MAAM,UAAU,GAAG,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACnD,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAEtD,IAAA,gBAAM,EAAC,WAAW,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,0BAA0B,EAAE,GAAG,EAAE;YAClC,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACnD,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YAExD,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7B,IAAA,gBAAM,EAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,IAAA,YAAE,EAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,uBAAuB,CAAC,CAAC;YAE1E,IAAI,CAAC;gBACH,MAAM,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBACjC,8BAA8B;gBAC9B,IAAA,gBAAM,EAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAA,gBAAM,EAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;YAC9B,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,cAAc,GAAG,CAAC,UAAU,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YAExD,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC7B,MAAM,UAAU,GAAQ;oBACtB,QAAQ,EAAE,UAAU;oBACpB,QAAQ,EAAE,YAAY;oBACtB,IAAI,EAAE,WAAW;iBAClB,CAAC;gBAEF,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;gBAEzB,6DAA6D;gBAC7D,IAAA,gBAAM,EAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,IAAA,YAAE,EAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,YAAY,GAAG,IAAI,CAAC;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACrD,MAAM,qBAAqB,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAE/D,sDAAsD;YACtD,IAAA,gBAAM,EAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,GAAG,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,oCAAoC,EAAE,GAAG,EAAE;YAC5C,MAAM,WAAW,GAAG,CAAC,KAAa,EAAU,EAAE;gBAC5C,IAAI,KAAK,KAAK,CAAC;oBAAE,OAAO,KAAK,CAAC;gBAC9B,MAAM,CAAC,GAAG,IAAI,CAAC;gBACf,MAAM,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;gBACtC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpD,OAAO,UAAU,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC1E,CAAC,CAAC;YAEF,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACnC,IAAA,gBAAM,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACvC,IAAA,gBAAM,EAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,uGAAuG;AACvG,IAAA,kBAAQ,EAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,IAAA,kBAAQ,EAAC,2BAA2B,EAAE,GAAG,EAAE;QACzC,IAAA,YAAE,EAAC,4CAA4C,EAAE,GAAG,EAAE;YACpD,MAAM,OAAO,GAAG,uBAAuB,CAAC;YACxC,MAAM,WAAW,GAAG,GAAG,OAAO,4BAA4B,CAAC;YAC3D,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iDAAiD,CAAC,CAAC;QAC9E,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sDAAsD,EAAE,GAAG,EAAE;YAC9D,MAAM,OAAO,GAAG,uBAAuB,CAAC;YACxC,MAAM,MAAM,GAAG,cAAc,CAAC;YAC9B,MAAM,UAAU,GAAG,cAAc,CAAC;YAElC,MAAM,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;YAC1C,WAAW,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;YAE7C,MAAM,WAAW,GAAG,GAAG,OAAO,uBAAuB,kBAAkB,CAAC,MAAM,CAAC,IAAI,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC5G,IAAA,gBAAM,EAAC,WAAW,CAAC,CAAC,IAAI,CAAC,+EAA+E,CAAC,CAAC;QAC5G,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,sCAAsC,EAAE,GAAG,EAAE;YAC9C,MAAM,MAAM,GAAG,mCAAmC,CAAC;YACnD,MAAM,OAAO,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAA,gBAAM,EAAC,OAAO,CAAC,CAAC,IAAI,CAAC,+CAA+C,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,IAAA,kBAAQ,EAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,IAAA,YAAE,EAAC,kDAAkD,EAAE,GAAG,EAAE;YAC1D,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,OAAO,GAAG;gBACd,eAAe,EAAE,MAAM;gBACvB,cAAc,EAAE,kBAAkB;aACnC,CAAC;YAEF,IAAA,gBAAM,EAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QAEH,IAAA,YAAE,EAAC,2CAA2C,EAAE,GAAG,EAAE;YACnD,MAAM,MAAM,GAAG,kBAAkB,CAAC;YAClC,MAAM,OAAO,GAAuC;gBAClD,eAAe,EAAE,MAAM;gBACvB,wEAAwE;aACzE,CAAC;YAEF,IAAA,gBAAM,EAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAA,gBAAM,EAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/test/binary-data.test.ts"],"sourcesContent":["import { describe, it, expect, beforeAll, afterAll } from '@jest/globals';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { BinaryDataClient } from '../src/client/binaryDataClient.js';\nimport { N8nClient } from '../src/client/n8nClient.js';\nimport { FileHandlingUtils } from '../src/utils/fileHandling.js';\n\ndescribe('Binary Data Operations', () => {\n  let testFilePath: string;\n  let testFileContent: Buffer;\n  let fileHandler: FileHandlingUtils;\n  const testFileName = 'test-file.txt';\n  const testMimeType = 'text/plain';\n\n  beforeAll(async () => {\n    // Create test directory\n    const testDir = path.join(process.cwd(), 'test-data');\n    await fs.mkdir(testDir, { recursive: true });\n    \n    // Create test file\n    testFilePath = path.join(testDir, testFileName);\n    testFileContent = Buffer.from('This is a test file for binary data operations.\\nIt contains multiple lines.\\nAnd some test data: 12345');\n    await fs.writeFile(testFilePath, testFileContent);\n\n    // Initialize file handler\n    fileHandler = new FileHandlingUtils({\n      baseDirectory: testDir,\n      maxFileSize: 10 * 1024 * 1024, // 10MB\n      allowedMimeTypes: ['text/*', 'application/*', 'image/*'],\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test files\n    try {\n      await fs.unlink(testFilePath);\n      const testDir = path.dirname(testFilePath);\n      await fs.rmdir(testDir);\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe('File Validation', () => {\n    it('should validate a valid file', async () => {\n      const validation = await fileHandler.validateFile(\n        testFileName,\n        testMimeType,\n        testFileContent.length\n      );\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    it('should reject oversized files', async () => {\n      const validation = await fileHandler.validateFile(\n        'large-file.txt',\n        testMimeType,\n        20 * 1024 * 1024, // 20MB\n        { maxFileSize: 10 * 1024 * 1024 } // 10MB limit\n      );\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain(expect.stringContaining('exceeds maximum allowed size'));\n    });\n\n    it('should reject invalid MIME types', async () => {\n      const validation = await fileHandler.validateFile(\n        'test.exe',\n        'application/x-executable',\n        1024,\n        { allowedMimeTypes: ['text/*', 'image/*'] }\n      );\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain(expect.stringContaining('not allowed'));\n    });\n  });\n\n  describe('File Operations', () => {\n    it('should read file correctly', async () => {\n      const fileExists = await fs.access(testFilePath).then(() => true).catch(() => false);\n      expect(fileExists).toBe(true);\n\n      const content = await fs.readFile(testFilePath);\n      expect(content.equals(testFileContent)).toBe(true);\n    });\n\n    it('should calculate file hash correctly', async () => {\n      const crypto = await import('crypto');\n      const hash1 = crypto.createHash('sha256').update(testFileContent).digest('hex');\n      \n      // Read file and calculate hash\n      const fileContent = await fs.readFile(testFilePath);\n      const hash2 = crypto.createHash('sha256').update(fileContent).digest('hex');\n      \n      expect(hash1).toBe(hash2);\n    });\n\n    it('should detect MIME type from file extension', async () => {\n      const mimeTypes: Record<string, string> = {\n        '.txt': 'text/plain',\n        '.json': 'application/json',\n        '.pdf': 'application/pdf',\n        '.png': 'image/png',\n        '.jpg': 'image/jpeg',\n      };\n\n      for (const [ext, expectedMime] of Object.entries(mimeTypes)) {\n        const fileName = `test${ext}`;\n        const ext_lower = path.extname(fileName).toLowerCase();\n        \n        // This mimics the logic from binary-data.ts\n        const detectedMime = mimeTypes[ext_lower] || 'application/octet-stream';\n        expect(detectedMime).toBe(expectedMime);\n      }\n    });\n  });\n\n  describe('Progress Tracking', () => {\n    it('should create valid transfer progress object', () => {\n      const transferId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const progress = {\n        transferId,\n        fileName: testFileName,\n        totalBytes: testFileContent.length,\n        transferredBytes: 0,\n        percentComplete: 0,\n        status: 'pending' as const,\n        startedAt: new Date().toISOString(),\n      };\n\n      expect(progress.transferId).toMatch(/^upload_\\d+_[a-z0-9]+$/);\n      expect(progress.fileName).toBe(testFileName);\n      expect(progress.totalBytes).toBe(testFileContent.length);\n      expect(progress.status).toBe('pending');\n      expect(progress.percentComplete).toBe(0);\n    });\n\n    it('should calculate progress correctly', () => {\n      const totalBytes = 1000;\n      const transferredBytes = 250;\n      const percentComplete = Math.round((transferredBytes / totalBytes) * 100);\n      \n      expect(percentComplete).toBe(25);\n    });\n  });\n\n  describe('Base64 Encoding/Decoding', () => {\n    it('should encode and decode binary data correctly', () => {\n      const originalData = testFileContent;\n      const base64Data = originalData.toString('base64');\n      const decodedData = Buffer.from(base64Data, 'base64');\n      \n      expect(decodedData.equals(originalData)).toBe(true);\n    });\n\n    it('should handle empty data', () => {\n      const emptyBuffer = Buffer.alloc(0);\n      const base64Empty = emptyBuffer.toString('base64');\n      const decodedEmpty = Buffer.from(base64Empty, 'base64');\n      \n      expect(base64Empty).toBe('');\n      expect(decodedEmpty.length).toBe(0);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle non-existent files gracefully', async () => {\n      const nonExistentPath = path.join(process.cwd(), 'non-existent-file.txt');\n      \n      try {\n        await fs.access(nonExistentPath);\n        // Should not reach this point\n        expect(true).toBe(false);\n      } catch (error) {\n        expect(error).toBeDefined();\n      }\n    });\n\n    it('should validate required parameters', () => {\n      const requiredFields = ['fileName', 'mimeType', 'data'];\n      \n      requiredFields.forEach(field => {\n        const testObject: any = {\n          fileName: 'test.txt',\n          mimeType: 'text/plain',\n          data: 'test-data',\n        };\n        \n        delete testObject[field];\n        \n        // In a real scenario, this would be validated by Zod schemas\n        expect(testObject[field]).toBeUndefined();\n      });\n    });\n  });\n\n  describe('File Size Calculations', () => {\n    it('should estimate base64 decoded size correctly', () => {\n      const originalSize = 1000;\n      const base64Size = Math.ceil((originalSize * 4) / 3);\n      const estimatedOriginalSize = Math.floor((base64Size * 3) / 4);\n      \n      // Should be close to original (within base64 padding)\n      expect(Math.abs(estimatedOriginalSize - originalSize)).toBeLessThanOrEqual(3);\n    });\n\n    it('should format file sizes correctly', () => {\n      const formatBytes = (bytes: number): string => {\n        if (bytes === 0) return '0 B';\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n      };\n\n      expect(formatBytes(0)).toBe('0 B');\n      expect(formatBytes(1024)).toBe('1 KB');\n      expect(formatBytes(1024 * 1024)).toBe('1 MB');\n      expect(formatBytes(1536)).toBe('1.5 KB');\n    });\n  });\n});\n\n// Mock tests for API integration (since we can't test actual API calls without a running n8n instance)\ndescribe('Binary Data Client (Mock Tests)', () => {\n  describe('API Endpoint Construction', () => {\n    it('should construct upload endpoint correctly', () => {\n      const baseUrl = 'http://localhost:5678';\n      const expectedUrl = `${baseUrl}/api/v1/binary-data/upload`;\n      expect(expectedUrl).toBe('http://localhost:5678/api/v1/binary-data/upload');\n    });\n\n    it('should construct download endpoint with query params', () => {\n      const baseUrl = 'http://localhost:5678';\n      const fileId = 'test-file-id';\n      const workflowId = 'workflow-123';\n      \n      const queryParams = new URLSearchParams();\n      queryParams.append('workflowId', workflowId);\n      \n      const expectedUrl = `${baseUrl}/api/v1/binary-data/${encodeURIComponent(fileId)}?${queryParams.toString()}`;\n      expect(expectedUrl).toBe('http://localhost:5678/api/v1/binary-data/test-file-id?workflowId=workflow-123');\n    });\n\n    it('should handle URL encoding correctly', () => {\n      const fileId = 'file with spaces & special chars!';\n      const encoded = encodeURIComponent(fileId);\n      expect(encoded).toBe('file%20with%20spaces%20%26%20special%20chars!');\n    });\n  });\n\n  describe('Request Headers', () => {\n    it('should construct proper headers for API requests', () => {\n      const apiKey = 'test-api-key-123';\n      const headers = {\n        'X-N8N-API-KEY': apiKey,\n        'Content-Type': 'application/json',\n      };\n      \n      expect(headers['X-N8N-API-KEY']).toBe(apiKey);\n      expect(headers['Content-Type']).toBe('application/json');\n    });\n\n    it('should handle form data headers correctly', () => {\n      const apiKey = 'test-api-key-123';\n      const headers: Record<string, string | undefined> = {\n        'X-N8N-API-KEY': apiKey,\n        // Content-Type should not be set for FormData to allow boundary setting\n      };\n      \n      expect(headers['X-N8N-API-KEY']).toBe(apiKey);\n      expect(headers['Content-Type']).toBeUndefined();\n    });\n  });\n});"],"version":3}