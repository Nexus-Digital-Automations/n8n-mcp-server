094b1af4034b5b731c79b7baaf701cf0
/* istanbul ignore next */
function cov_14upbp3753() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/performance-metrics.ts";
  var hash = "ae3c54b7dfd32ba739c77f90897971ac109e653f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/performance-metrics.ts",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 27
        },
        end: {
          line: 11,
          column: 2
        }
      },
      "1": {
        start: {
          line: 12,
          column: 34
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "2": {
        start: {
          line: 21,
          column: 28
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "3": {
        start: {
          line: 30,
          column: 27
        },
        end: {
          line: 51,
          column: 2
        }
      },
      "4": {
        start: {
          line: 52,
          column: 31
        },
        end: {
          line: 59,
          column: 2
        }
      },
      "5": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 67,
          column: 2
        }
      },
      "6": {
        start: {
          line: 69,
          column: 23
        },
        end: {
          line: 69,
          column: 27
        }
      },
      "7": {
        start: {
          line: 71,
          column: 24
        },
        end: {
          line: 71,
          column: 26
        }
      },
      "8": {
        start: {
          line: 72,
          column: 26
        },
        end: {
          line: 72,
          column: 28
        }
      },
      "9": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 85,
          column: 1
        }
      },
      "10": {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "11": {
        start: {
          line: 76,
          column: 23
        },
        end: {
          line: 76,
          column: 34
        }
      },
      "12": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 79,
          column: 9
        }
      },
      "13": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 60
        }
      },
      "14": {
        start: {
          line: 80,
          column: 24
        },
        end: {
          line: 80,
          column: 93
        }
      },
      "15": {
        start: {
          line: 81,
          column: 23
        },
        end: {
          line: 81,
          column: 69
        }
      },
      "16": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 73
        }
      },
      "17": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 28
        }
      },
      "18": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 93,
          column: 1
        }
      },
      "19": {
        start: {
          line: 88,
          column: 4
        },
        end: {
          line: 89,
          column: 25
        }
      },
      "20": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 25
        }
      },
      "21": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "22": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 44
        }
      },
      "23": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 41
        }
      },
      "24": {
        start: {
          line: 94,
          column: 25
        },
        end: {
          line: 96,
          column: 1
        }
      },
      "25": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 34
        }
      },
      "26": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 104,
          column: 1
        }
      },
      "27": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 99,
          column: 21
        }
      },
      "28": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 21
        }
      },
      "29": {
        start: {
          line: 100,
          column: 14
        },
        end: {
          line: 100,
          column: 18
        }
      },
      "30": {
        start: {
          line: 101,
          column: 18
        },
        end: {
          line: 101,
          column: 47
        }
      },
      "31": {
        start: {
          line: 102,
          column: 14
        },
        end: {
          line: 102,
          column: 55
        }
      },
      "32": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 76
        }
      },
      "33": {
        start: {
          line: 105,
          column: 23
        },
        end: {
          line: 116,
          column: 1
        }
      },
      "34": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "35": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 24
        }
      },
      "36": {
        start: {
          line: 108,
          column: 22
        },
        end: {
          line: 108,
          column: 68
        }
      },
      "37": {
        start: {
          line: 109,
          column: 23
        },
        end: {
          line: 109,
          column: 66
        }
      },
      "38": {
        start: {
          line: 110,
          column: 21
        },
        end: {
          line: 110,
          column: 84
        }
      },
      "39": {
        start: {
          line: 110,
          column: 52
        },
        end: {
          line: 110,
          column: 61
        }
      },
      "40": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 87
        }
      },
      "41": {
        start: {
          line: 111,
          column: 54
        },
        end: {
          line: 111,
          column: 63
        }
      },
      "42": {
        start: {
          line: 112,
          column: 26
        },
        end: {
          line: 112,
          column: 67
        }
      },
      "43": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "44": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 24
        }
      },
      "45": {
        start: {
          line: 115,
          column: 4
        },
        end: {
          line: 115,
          column: 59
        }
      },
      "46": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 135,
          column: 1
        }
      },
      "47": {
        start: {
          line: 118,
          column: 28
        },
        end: {
          line: 118,
          column: 30
        }
      },
      "48": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "49": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 106
        }
      },
      "50": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "51": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 99
        }
      },
      "52": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 127,
          column: 5
        }
      },
      "53": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 113
        }
      },
      "54": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "55": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 88
        }
      },
      "56": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "57": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 113
        }
      },
      "58": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 27
        }
      },
      "59": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 149,
          column: 1
        }
      },
      "60": {
        start: {
          line: 138,
          column: 22
        },
        end: {
          line: 143,
          column: 5
        }
      },
      "61": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 144,
          column: 36
        }
      },
      "62": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "63": {
        start: {
          line: 147,
          column: 8
        },
        end: {
          line: 147,
          column: 32
        }
      },
      "64": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 223,
          column: 7
        }
      },
      "65": {
        start: {
          line: 158,
          column: 12
        },
        end: {
          line: 221,
          column: 13
        }
      },
      "66": {
        start: {
          line: 159,
          column: 41
        },
        end: {
          line: 159,
          column: 71
        }
      },
      "67": {
        start: {
          line: 160,
          column: 32
        },
        end: {
          line: 160,
          column: 67
        }
      },
      "68": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 165,
          column: 19
        }
      },
      "69": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 172,
          column: 17
        }
      },
      "70": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 171,
          column: 22
        }
      },
      "71": {
        start: {
          line: 173,
          column: 31
        },
        end: {
          line: 173,
          column: 70
        }
      },
      "72": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 174,
          column: 95
        }
      },
      "73": {
        start: {
          line: 175,
          column: 16
        },
        end: {
          line: 175,
          column: 68
        }
      },
      "74": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 177,
          column: 57
        }
      },
      "75": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 80
        }
      },
      "76": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 167
        }
      },
      "77": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 155
        }
      },
      "78": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 83
        }
      },
      "79": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "80": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 63
        }
      },
      "81": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 185,
          column: 82
        }
      },
      "82": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 74
        }
      },
      "83": {
        start: {
          line: 187,
          column: 20
        },
        end: {
          line: 187,
          column: 78
        }
      },
      "84": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 190,
          column: 21
        }
      },
      "85": {
        start: {
          line: 189,
          column: 24
        },
        end: {
          line: 189,
          column: 87
        }
      },
      "86": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 54
        }
      },
      "87": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 194,
          column: 118
        }
      },
      "88": {
        start: {
          line: 195,
          column: 16
        },
        end: {
          line: 195,
          column: 109
        }
      },
      "89": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 97
        }
      },
      "90": {
        start: {
          line: 198,
          column: 16
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "91": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 199,
          column: 63
        }
      },
      "92": {
        start: {
          line: 200,
          column: 20
        },
        end: {
          line: 200,
          column: 100
        }
      },
      "93": {
        start: {
          line: 201,
          column: 20
        },
        end: {
          line: 201,
          column: 158
        }
      },
      "94": {
        start: {
          line: 202,
          column: 20
        },
        end: {
          line: 202,
          column: 114
        }
      },
      "95": {
        start: {
          line: 203,
          column: 20
        },
        end: {
          line: 205,
          column: 21
        }
      },
      "96": {
        start: {
          line: 204,
          column: 24
        },
        end: {
          line: 204,
          column: 107
        }
      },
      "97": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 213,
          column: 17
        }
      },
      "98": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 63
        }
      },
      "99": {
        start: {
          line: 210,
          column: 20
        },
        end: {
          line: 210,
          column: 81
        }
      },
      "100": {
        start: {
          line: 211,
          column: 20
        },
        end: {
          line: 211,
          column: 177
        }
      },
      "101": {
        start: {
          line: 212,
          column: 20
        },
        end: {
          line: 212,
          column: 101
        }
      },
      "102": {
        start: {
          line: 214,
          column: 16
        },
        end: {
          line: 214,
          column: 32
        }
      },
      "103": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 219,
          column: 17
        }
      },
      "104": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 32
        }
      },
      "105": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 134
        }
      },
      "106": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 337,
          column: 7
        }
      },
      "107": {
        start: {
          line: 230,
          column: 12
        },
        end: {
          line: 335,
          column: 13
        }
      },
      "108": {
        start: {
          line: 231,
          column: 31
        },
        end: {
          line: 231,
          column: 42
        }
      },
      "109": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 234,
          column: 17
        }
      },
      "110": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 233,
          column: 70
        }
      },
      "111": {
        start: {
          line: 236,
          column: 43
        },
        end: {
          line: 238,
          column: 18
        }
      },
      "112": {
        start: {
          line: 240,
          column: 33
        },
        end: {
          line: 240,
          column: 56
        }
      },
      "113": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 243,
          column: 17
        }
      },
      "114": {
        start: {
          line: 242,
          column: 20
        },
        end: {
          line: 242,
          column: 90
        }
      },
      "115": {
        start: {
          line: 242,
          column: 56
        },
        end: {
          line: 242,
          column: 88
        }
      },
      "116": {
        start: {
          line: 244,
          column: 31
        },
        end: {
          line: 244,
          column: 86
        }
      },
      "117": {
        start: {
          line: 245,
          column: 16
        },
        end: {
          line: 315,
          column: 17
        }
      },
      "118": {
        start: {
          line: 247,
          column: 47
        },
        end: {
          line: 253,
          column: 27
        }
      },
      "119": {
        start: {
          line: 248,
          column: 41
        },
        end: {
          line: 248,
          column: 81
        }
      },
      "120": {
        start: {
          line: 249,
          column: 39
        },
        end: {
          line: 253,
          column: 25
        }
      },
      "121": {
        start: {
          line: 254,
          column: 24
        },
        end: {
          line: 257,
          column: 25
        }
      },
      "122": {
        start: {
          line: 255,
          column: 28
        },
        end: {
          line: 255,
          column: 88
        }
      },
      "123": {
        start: {
          line: 256,
          column: 28
        },
        end: {
          line: 256,
          column: 34
        }
      },
      "124": {
        start: {
          line: 258,
          column: 40
        },
        end: {
          line: 258,
          column: 118
        }
      },
      "125": {
        start: {
          line: 258,
          column: 74
        },
        end: {
          line: 258,
          column: 90
        }
      },
      "126": {
        start: {
          line: 259,
          column: 40
        },
        end: {
          line: 259,
          column: 88
        }
      },
      "127": {
        start: {
          line: 259,
          column: 76
        },
        end: {
          line: 259,
          column: 86
        }
      },
      "128": {
        start: {
          line: 260,
          column: 40
        },
        end: {
          line: 260,
          column: 88
        }
      },
      "129": {
        start: {
          line: 260,
          column: 76
        },
        end: {
          line: 260,
          column: 86
        }
      },
      "130": {
        start: {
          line: 261,
          column: 43
        },
        end: {
          line: 261,
          column: 151
        }
      },
      "131": {
        start: {
          line: 261,
          column: 73
        },
        end: {
          line: 261,
          column: 96
        }
      },
      "132": {
        start: {
          line: 262,
          column: 24
        },
        end: {
          line: 262,
          column: 110
        }
      },
      "133": {
        start: {
          line: 263,
          column: 24
        },
        end: {
          line: 263,
          column: 78
        }
      },
      "134": {
        start: {
          line: 264,
          column: 24
        },
        end: {
          line: 264,
          column: 80
        }
      },
      "135": {
        start: {
          line: 265,
          column: 24
        },
        end: {
          line: 265,
          column: 74
        }
      },
      "136": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 74
        }
      },
      "137": {
        start: {
          line: 268,
          column: 46
        },
        end: {
          line: 268,
          column: 75
        }
      },
      "138": {
        start: {
          line: 269,
          column: 47
        },
        end: {
          line: 269,
          column: 101
        }
      },
      "139": {
        start: {
          line: 269,
          column: 74
        },
        end: {
          line: 269,
          column: 100
        }
      },
      "140": {
        start: {
          line: 270,
          column: 24
        },
        end: {
          line: 272,
          column: 25
        }
      },
      "141": {
        start: {
          line: 271,
          column: 28
        },
        end: {
          line: 271,
          column: 131
        }
      },
      "142": {
        start: {
          line: 273,
          column: 24
        },
        end: {
          line: 273,
          column: 30
        }
      },
      "143": {
        start: {
          line: 276,
          column: 43
        },
        end: {
          line: 276,
          column: 60
        }
      },
      "144": {
        start: {
          line: 277,
          column: 44
        },
        end: {
          line: 277,
          column: 100
        }
      },
      "145": {
        start: {
          line: 277,
          column: 67
        },
        end: {
          line: 277,
          column: 92
        }
      },
      "146": {
        start: {
          line: 278,
          column: 42
        },
        end: {
          line: 278,
          column: 95
        }
      },
      "147": {
        start: {
          line: 279,
          column: 24
        },
        end: {
          line: 279,
          column: 67
        }
      },
      "148": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 280,
          column: 74
        }
      },
      "149": {
        start: {
          line: 281,
          column: 24
        },
        end: {
          line: 281,
          column: 76
        }
      },
      "150": {
        start: {
          line: 282,
          column: 24
        },
        end: {
          line: 282,
          column: 85
        }
      },
      "151": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "152": {
        start: {
          line: 284,
          column: 28
        },
        end: {
          line: 284,
          column: 79
        }
      },
      "153": {
        start: {
          line: 286,
          column: 29
        },
        end: {
          line: 291,
          column: 25
        }
      },
      "154": {
        start: {
          line: 287,
          column: 28
        },
        end: {
          line: 287,
          column: 91
        }
      },
      "155": {
        start: {
          line: 290,
          column: 28
        },
        end: {
          line: 290,
          column: 87
        }
      },
      "156": {
        start: {
          line: 292,
          column: 24
        },
        end: {
          line: 292,
          column: 30
        }
      },
      "157": {
        start: {
          line: 295,
          column: 36
        },
        end: {
          line: 295,
          column: 46
        }
      },
      "158": {
        start: {
          line: 296,
          column: 40
        },
        end: {
          line: 296,
          column: 80
        }
      },
      "159": {
        start: {
          line: 297,
          column: 44
        },
        end: {
          line: 297,
          column: 99
        }
      },
      "160": {
        start: {
          line: 297,
          column: 67
        },
        end: {
          line: 297,
          column: 98
        }
      },
      "161": {
        start: {
          line: 298,
          column: 50
        },
        end: {
          line: 298,
          column: 68
        }
      },
      "162": {
        start: {
          line: 299,
          column: 52
        },
        end: {
          line: 299,
          column: 74
        }
      },
      "163": {
        start: {
          line: 300,
          column: 24
        },
        end: {
          line: 300,
          column: 68
        }
      },
      "164": {
        start: {
          line: 301,
          column: 24
        },
        end: {
          line: 301,
          column: 87
        }
      },
      "165": {
        start: {
          line: 302,
          column: 24
        },
        end: {
          line: 302,
          column: 106
        }
      },
      "166": {
        start: {
          line: 303,
          column: 24
        },
        end: {
          line: 303,
          column: 123
        }
      },
      "167": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 30
        }
      },
      "168": {
        start: {
          line: 307,
          column: 49
        },
        end: {
          line: 307,
          column: 79
        }
      },
      "169": {
        start: {
          line: 308,
          column: 44
        },
        end: {
          line: 308,
          column: 85
        }
      },
      "170": {
        start: {
          line: 309,
          column: 24
        },
        end: {
          line: 309,
          column: 72
        }
      },
      "171": {
        start: {
          line: 310,
          column: 24
        },
        end: {
          line: 310,
          column: 132
        }
      },
      "172": {
        start: {
          line: 311,
          column: 24
        },
        end: {
          line: 311,
          column: 102
        }
      },
      "173": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 111
        }
      },
      "174": {
        start: {
          line: 313,
          column: 24
        },
        end: {
          line: 313,
          column: 30
        }
      },
      "175": {
        start: {
          line: 317,
          column: 16
        },
        end: {
          line: 327,
          column: 17
        }
      },
      "176": {
        start: {
          line: 318,
          column: 45
        },
        end: {
          line: 318,
          column: 75
        }
      },
      "177": {
        start: {
          line: 319,
          column: 36
        },
        end: {
          line: 319,
          column: 71
        }
      },
      "178": {
        start: {
          line: 320,
          column: 44
        },
        end: {
          line: 320,
          column: 76
        }
      },
      "179": {
        start: {
          line: 321,
          column: 20
        },
        end: {
          line: 326,
          column: 21
        }
      },
      "180": {
        start: {
          line: 322,
          column: 24
        },
        end: {
          line: 322,
          column: 66
        }
      },
      "181": {
        start: {
          line: 323,
          column: 24
        },
        end: {
          line: 325,
          column: 27
        }
      },
      "182": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 324,
          column: 53
        }
      },
      "183": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 32
        }
      },
      "184": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 333,
          column: 17
        }
      },
      "185": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 332,
          column: 32
        }
      },
      "186": {
        start: {
          line: 334,
          column: 16
        },
        end: {
          line: 334,
          column: 130
        }
      },
      "187": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 499,
          column: 7
        }
      },
      "188": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 497,
          column: 13
        }
      },
      "189": {
        start: {
          line: 345,
          column: 41
        },
        end: {
          line: 345,
          column: 71
        }
      },
      "190": {
        start: {
          line: 346,
          column: 31
        },
        end: {
          line: 346,
          column: 76
        }
      },
      "191": {
        start: {
          line: 347,
          column: 16
        },
        end: {
          line: 347,
          column: 51
        }
      },
      "192": {
        start: {
          line: 348,
          column: 16
        },
        end: {
          line: 348,
          column: 62
        }
      },
      "193": {
        start: {
          line: 349,
          column: 16
        },
        end: {
          line: 349,
          column: 67
        }
      },
      "194": {
        start: {
          line: 350,
          column: 16
        },
        end: {
          line: 352,
          column: 17
        }
      },
      "195": {
        start: {
          line: 351,
          column: 20
        },
        end: {
          line: 351,
          column: 70
        }
      },
      "196": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 33
        }
      },
      "197": {
        start: {
          line: 354,
          column: 32
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "198": {
        start: {
          line: 361,
          column: 34
        },
        end: {
          line: 361,
          column: 44
        }
      },
      "199": {
        start: {
          line: 362,
          column: 32
        },
        end: {
          line: 362,
          column: 64
        }
      },
      "200": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 363,
          column: 57
        }
      },
      "201": {
        start: {
          line: 364,
          column: 16
        },
        end: {
          line: 489,
          column: 17
        }
      },
      "202": {
        start: {
          line: 365,
          column: 20
        },
        end: {
          line: 438,
          column: 21
        }
      },
      "203": {
        start: {
          line: 368,
          column: 28
        },
        end: {
          line: 394,
          column: 29
        }
      },
      "204": {
        start: {
          line: 369,
          column: 49
        },
        end: {
          line: 369,
          column: 51
        }
      },
      "205": {
        start: {
          line: 370,
          column: 32
        },
        end: {
          line: 390,
          column: 33
        }
      },
      "206": {
        start: {
          line: 370,
          column: 45
        },
        end: {
          line: 370,
          column: 46
        }
      },
      "207": {
        start: {
          line: 371,
          column: 36
        },
        end: {
          line: 389,
          column: 40
        }
      },
      "208": {
        start: {
          line: 374,
          column: 40
        },
        end: {
          line: 374,
          column: 64
        }
      },
      "209": {
        start: {
          line: 375,
          column: 40
        },
        end: {
          line: 383,
          column: 41
        }
      },
      "210": {
        start: {
          line: 376,
          column: 44
        },
        end: {
          line: 376,
          column: 73
        }
      },
      "211": {
        start: {
          line: 377,
          column: 44
        },
        end: {
          line: 377,
          column: 92
        }
      },
      "212": {
        start: {
          line: 380,
          column: 44
        },
        end: {
          line: 380,
          column: 69
        }
      },
      "213": {
        start: {
          line: 381,
          column: 44
        },
        end: {
          line: 382,
          column: 82
        }
      },
      "214": {
        start: {
          line: 382,
          column: 48
        },
        end: {
          line: 382,
          column: 82
        }
      },
      "215": {
        start: {
          line: 386,
          column: 40
        },
        end: {
          line: 386,
          column: 64
        }
      },
      "216": {
        start: {
          line: 387,
          column: 40
        },
        end: {
          line: 387,
          column: 65
        }
      },
      "217": {
        start: {
          line: 388,
          column: 40
        },
        end: {
          line: 388,
          column: 75
        }
      },
      "218": {
        start: {
          line: 391,
          column: 32
        },
        end: {
          line: 391,
          column: 60
        }
      },
      "219": {
        start: {
          line: 393,
          column: 32
        },
        end: {
          line: 393,
          column: 87
        }
      },
      "220": {
        start: {
          line: 393,
          column: 61
        },
        end: {
          line: 393,
          column: 85
        }
      },
      "221": {
        start: {
          line: 395,
          column: 28
        },
        end: {
          line: 395,
          column: 34
        }
      },
      "222": {
        start: {
          line: 398,
          column: 28
        },
        end: {
          line: 400,
          column: 29
        }
      },
      "223": {
        start: {
          line: 399,
          column: 32
        },
        end: {
          line: 399,
          column: 112
        }
      },
      "224": {
        start: {
          line: 403,
          column: 28
        },
        end: {
          line: 403,
          column: 132
        }
      },
      "225": {
        start: {
          line: 404,
          column: 28
        },
        end: {
          line: 404,
          column: 55
        }
      },
      "226": {
        start: {
          line: 405,
          column: 28
        },
        end: {
          line: 405,
          column: 59
        }
      },
      "227": {
        start: {
          line: 406,
          column: 28
        },
        end: {
          line: 406,
          column: 55
        }
      },
      "228": {
        start: {
          line: 407,
          column: 28
        },
        end: {
          line: 407,
          column: 101
        }
      },
      "229": {
        start: {
          line: 408,
          column: 28
        },
        end: {
          line: 408,
          column: 34
        }
      },
      "230": {
        start: {
          line: 412,
          column: 51
        },
        end: {
          line: 412,
          column: 92
        }
      },
      "231": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 429,
          column: 29
        }
      },
      "232": {
        start: {
          line: 415,
          column: 49
        },
        end: {
          line: 415,
          column: 51
        }
      },
      "233": {
        start: {
          line: 416,
          column: 32
        },
        end: {
          line: 426,
          column: 33
        }
      },
      "234": {
        start: {
          line: 416,
          column: 45
        },
        end: {
          line: 416,
          column: 46
        }
      },
      "235": {
        start: {
          line: 417,
          column: 36
        },
        end: {
          line: 425,
          column: 40
        }
      },
      "236": {
        start: {
          line: 418,
          column: 40
        },
        end: {
          line: 418,
          column: 64
        }
      },
      "237": {
        start: {
          line: 419,
          column: 40
        },
        end: {
          line: 424,
          column: 41
        }
      },
      "238": {
        start: {
          line: 420,
          column: 44
        },
        end: {
          line: 420,
          column: 73
        }
      },
      "239": {
        start: {
          line: 423,
          column: 44
        },
        end: {
          line: 423,
          column: 69
        }
      },
      "240": {
        start: {
          line: 427,
          column: 32
        },
        end: {
          line: 427,
          column: 60
        }
      },
      "241": {
        start: {
          line: 428,
          column: 32
        },
        end: {
          line: 428,
          column: 87
        }
      },
      "242": {
        start: {
          line: 428,
          column: 61
        },
        end: {
          line: 428,
          column: 85
        }
      },
      "243": {
        start: {
          line: 430,
          column: 49
        },
        end: {
          line: 430,
          column: 90
        }
      },
      "244": {
        start: {
          line: 431,
          column: 28
        },
        end: {
          line: 431,
          column: 65
        }
      },
      "245": {
        start: {
          line: 432,
          column: 28
        },
        end: {
          line: 432,
          column: 135
        }
      },
      "246": {
        start: {
          line: 433,
          column: 28
        },
        end: {
          line: 433,
          column: 157
        }
      },
      "247": {
        start: {
          line: 434,
          column: 28
        },
        end: {
          line: 434,
          column: 34
        }
      },
      "248": {
        start: {
          line: 437,
          column: 28
        },
        end: {
          line: 437,
          column: 96
        }
      },
      "249": {
        start: {
          line: 440,
          column: 43
        },
        end: {
          line: 440,
          column: 74
        }
      },
      "250": {
        start: {
          line: 441,
          column: 46
        },
        end: {
          line: 441,
          column: 84
        }
      },
      "251": {
        start: {
          line: 442,
          column: 40
        },
        end: {
          line: 444,
          column: 27
        }
      },
      "252": {
        start: {
          line: 445,
          column: 20
        },
        end: {
          line: 445,
          column: 54
        }
      },
      "253": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 78
        }
      },
      "254": {
        start: {
          line: 447,
          column: 20
        },
        end: {
          line: 447,
          column: 79
        }
      },
      "255": {
        start: {
          line: 448,
          column: 20
        },
        end: {
          line: 448,
          column: 80
        }
      },
      "256": {
        start: {
          line: 449,
          column: 20
        },
        end: {
          line: 449,
          column: 72
        }
      },
      "257": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 85
        }
      },
      "258": {
        start: {
          line: 451,
          column: 20
        },
        end: {
          line: 451,
          column: 87
        }
      },
      "259": {
        start: {
          line: 452,
          column: 20
        },
        end: {
          line: 464,
          column: 21
        }
      },
      "260": {
        start: {
          line: 453,
          column: 48
        },
        end: {
          line: 454,
          column: 56
        }
      },
      "261": {
        start: {
          line: 453,
          column: 92
        },
        end: {
          line: 453,
          column: 102
        }
      },
      "262": {
        start: {
          line: 455,
          column: 48
        },
        end: {
          line: 455,
          column: 82
        }
      },
      "263": {
        start: {
          line: 456,
          column: 48
        },
        end: {
          line: 456,
          column: 82
        }
      },
      "264": {
        start: {
          line: 457,
          column: 44
        },
        end: {
          line: 457,
          column: 87
        }
      },
      "265": {
        start: {
          line: 457,
          column: 81
        },
        end: {
          line: 457,
          column: 86
        }
      },
      "266": {
        start: {
          line: 458,
          column: 48
        },
        end: {
          line: 458,
          column: 98
        }
      },
      "267": {
        start: {
          line: 459,
          column: 24
        },
        end: {
          line: 459,
          column: 65
        }
      },
      "268": {
        start: {
          line: 460,
          column: 24
        },
        end: {
          line: 460,
          column: 83
        }
      },
      "269": {
        start: {
          line: 461,
          column: 24
        },
        end: {
          line: 461,
          column: 68
        }
      },
      "270": {
        start: {
          line: 462,
          column: 24
        },
        end: {
          line: 462,
          column: 68
        }
      },
      "271": {
        start: {
          line: 463,
          column: 24
        },
        end: {
          line: 463,
          column: 80
        }
      },
      "272": {
        start: {
          line: 465,
          column: 20
        },
        end: {
          line: 470,
          column: 21
        }
      },
      "273": {
        start: {
          line: 466,
          column: 24
        },
        end: {
          line: 466,
          column: 66
        }
      },
      "274": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 469,
          column: 27
        }
      },
      "275": {
        start: {
          line: 468,
          column: 28
        },
        end: {
          line: 468,
          column: 55
        }
      },
      "276": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 485,
          column: 23
        }
      },
      "277": {
        start: {
          line: 479,
          column: 74
        },
        end: {
          line: 479,
          column: 84
        }
      },
      "278": {
        start: {
          line: 488,
          column: 20
        },
        end: {
          line: 488,
          column: 122
        }
      },
      "279": {
        start: {
          line: 490,
          column: 16
        },
        end: {
          line: 490,
          column: 32
        }
      },
      "280": {
        start: {
          line: 493,
          column: 16
        },
        end: {
          line: 495,
          column: 17
        }
      },
      "281": {
        start: {
          line: 494,
          column: 20
        },
        end: {
          line: 494,
          column: 32
        }
      },
      "282": {
        start: {
          line: 496,
          column: 16
        },
        end: {
          line: 496,
          column: 124
        }
      },
      "283": {
        start: {
          line: 501,
          column: 4
        },
        end: {
          line: 583,
          column: 7
        }
      },
      "284": {
        start: {
          line: 506,
          column: 12
        },
        end: {
          line: 581,
          column: 13
        }
      },
      "285": {
        start: {
          line: 507,
          column: 41
        },
        end: {
          line: 507,
          column: 71
        }
      },
      "286": {
        start: {
          line: 508,
          column: 32
        },
        end: {
          line: 508,
          column: 67
        }
      },
      "287": {
        start: {
          line: 509,
          column: 31
        },
        end: {
          line: 509,
          column: 62
        }
      },
      "288": {
        start: {
          line: 510,
          column: 16
        },
        end: {
          line: 510,
          column: 78
        }
      },
      "289": {
        start: {
          line: 511,
          column: 16
        },
        end: {
          line: 511,
          column: 66
        }
      },
      "290": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 66
        }
      },
      "291": {
        start: {
          line: 514,
          column: 16
        },
        end: {
          line: 514,
          column: 58
        }
      },
      "292": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 229
        }
      },
      "293": {
        start: {
          line: 516,
          column: 16
        },
        end: {
          line: 516,
          column: 80
        }
      },
      "294": {
        start: {
          line: 517,
          column: 16
        },
        end: {
          line: 517,
          column: 134
        }
      },
      "295": {
        start: {
          line: 518,
          column: 16
        },
        end: {
          line: 518,
          column: 117
        }
      },
      "296": {
        start: {
          line: 519,
          column: 16
        },
        end: {
          line: 519,
          column: 118
        }
      },
      "297": {
        start: {
          line: 521,
          column: 16
        },
        end: {
          line: 530,
          column: 17
        }
      },
      "298": {
        start: {
          line: 522,
          column: 20
        },
        end: {
          line: 522,
          column: 65
        }
      },
      "299": {
        start: {
          line: 523,
          column: 20
        },
        end: {
          line: 523,
          column: 84
        }
      },
      "300": {
        start: {
          line: 524,
          column: 20
        },
        end: {
          line: 524,
          column: 88
        }
      },
      "301": {
        start: {
          line: 525,
          column: 20
        },
        end: {
          line: 525,
          column: 95
        }
      },
      "302": {
        start: {
          line: 526,
          column: 20
        },
        end: {
          line: 526,
          column: 65
        }
      },
      "303": {
        start: {
          line: 527,
          column: 20
        },
        end: {
          line: 527,
          column: 100
        }
      },
      "304": {
        start: {
          line: 528,
          column: 20
        },
        end: {
          line: 528,
          column: 107
        }
      },
      "305": {
        start: {
          line: 529,
          column: 20
        },
        end: {
          line: 529,
          column: 103
        }
      },
      "306": {
        start: {
          line: 532,
          column: 41
        },
        end: {
          line: 543,
          column: 18
        }
      },
      "307": {
        start: {
          line: 533,
          column: 37
        },
        end: {
          line: 541,
          column: 41
        }
      },
      "308": {
        start: {
          line: 542,
          column: 20
        },
        end: {
          line: 542,
          column: 101
        }
      },
      "309": {
        start: {
          line: 544,
          column: 16
        },
        end: {
          line: 553,
          column: 17
        }
      },
      "310": {
        start: {
          line: 545,
          column: 43
        },
        end: {
          line: 547,
          column: 76
        }
      },
      "311": {
        start: {
          line: 546,
          column: 38
        },
        end: {
          line: 546,
          column: 79
        }
      },
      "312": {
        start: {
          line: 547,
          column: 35
        },
        end: {
          line: 547,
          column: 75
        }
      },
      "313": {
        start: {
          line: 548,
          column: 20
        },
        end: {
          line: 552,
          column: 21
        }
      },
      "314": {
        start: {
          line: 549,
          column: 38
        },
        end: {
          line: 549,
          column: 68
        }
      },
      "315": {
        start: {
          line: 550,
          column: 24
        },
        end: {
          line: 550,
          column: 67
        }
      },
      "316": {
        start: {
          line: 551,
          column: 24
        },
        end: {
          line: 551,
          column: 165
        }
      },
      "317": {
        start: {
          line: 555,
          column: 16
        },
        end: {
          line: 563,
          column: 17
        }
      },
      "318": {
        start: {
          line: 556,
          column: 44
        },
        end: {
          line: 556,
          column: 76
        }
      },
      "319": {
        start: {
          line: 557,
          column: 20
        },
        end: {
          line: 562,
          column: 21
        }
      },
      "320": {
        start: {
          line: 558,
          column: 24
        },
        end: {
          line: 558,
          column: 66
        }
      },
      "321": {
        start: {
          line: 559,
          column: 24
        },
        end: {
          line: 561,
          column: 27
        }
      },
      "322": {
        start: {
          line: 560,
          column: 28
        },
        end: {
          line: 560,
          column: 53
        }
      },
      "323": {
        start: {
          line: 565,
          column: 16
        },
        end: {
          line: 573,
          column: 19
        }
      },
      "324": {
        start: {
          line: 574,
          column: 16
        },
        end: {
          line: 574,
          column: 32
        }
      },
      "325": {
        start: {
          line: 577,
          column: 16
        },
        end: {
          line: 579,
          column: 17
        }
      },
      "326": {
        start: {
          line: 578,
          column: 20
        },
        end: {
          line: 578,
          column: 32
        }
      },
      "327": {
        start: {
          line: 580,
          column: 16
        },
        end: {
          line: 580,
          column: 138
        }
      },
      "328": {
        start: {
          line: 585,
          column: 4
        },
        end: {
          line: 698,
          column: 7
        }
      },
      "329": {
        start: {
          line: 590,
          column: 12
        },
        end: {
          line: 696,
          column: 13
        }
      },
      "330": {
        start: {
          line: 591,
          column: 34
        },
        end: {
          line: 597,
          column: 34
        }
      },
      "331": {
        start: {
          line: 598,
          column: 35
        },
        end: {
          line: 598,
          column: 84
        }
      },
      "332": {
        start: {
          line: 599,
          column: 37
        },
        end: {
          line: 599,
          column: 140
        }
      },
      "333": {
        start: {
          line: 599,
          column: 66
        },
        end: {
          line: 599,
          column: 139
        }
      },
      "334": {
        start: {
          line: 600,
          column: 31
        },
        end: {
          line: 600,
          column: 74
        }
      },
      "335": {
        start: {
          line: 601,
          column: 16
        },
        end: {
          line: 601,
          column: 66
        }
      },
      "336": {
        start: {
          line: 602,
          column: 16
        },
        end: {
          line: 602,
          column: 74
        }
      },
      "337": {
        start: {
          line: 603,
          column: 16
        },
        end: {
          line: 606,
          column: 17
        }
      },
      "338": {
        start: {
          line: 604,
          column: 20
        },
        end: {
          line: 604,
          column: 103
        }
      },
      "339": {
        start: {
          line: 605,
          column: 20
        },
        end: {
          line: 605,
          column: 36
        }
      },
      "340": {
        start: {
          line: 608,
          column: 29
        },
        end: {
          line: 608,
          column: 31
        }
      },
      "341": {
        start: {
          line: 609,
          column: 27
        },
        end: {
          line: 609,
          column: 29
        }
      },
      "342": {
        start: {
          line: 610,
          column: 16
        },
        end: {
          line: 635,
          column: 17
        }
      },
      "343": {
        start: {
          line: 612,
          column: 24
        },
        end: {
          line: 614,
          column: 81
        }
      },
      "344": {
        start: {
          line: 613,
          column: 42
        },
        end: {
          line: 613,
          column: 83
        }
      },
      "345": {
        start: {
          line: 614,
          column: 39
        },
        end: {
          line: 614,
          column: 79
        }
      },
      "346": {
        start: {
          line: 615,
          column: 24
        },
        end: {
          line: 615,
          column: 36
        }
      },
      "347": {
        start: {
          line: 616,
          column: 24
        },
        end: {
          line: 616,
          column: 30
        }
      },
      "348": {
        start: {
          line: 618,
          column: 24
        },
        end: {
          line: 620,
          column: 105
        }
      },
      "349": {
        start: {
          line: 619,
          column: 42
        },
        end: {
          line: 619,
          column: 60
        }
      },
      "350": {
        start: {
          line: 620,
          column: 39
        },
        end: {
          line: 620,
          column: 103
        }
      },
      "351": {
        start: {
          line: 621,
          column: 24
        },
        end: {
          line: 621,
          column: 35
        }
      },
      "352": {
        start: {
          line: 622,
          column: 24
        },
        end: {
          line: 622,
          column: 30
        }
      },
      "353": {
        start: {
          line: 624,
          column: 24
        },
        end: {
          line: 626,
          column: 70
        }
      },
      "354": {
        start: {
          line: 625,
          column: 42
        },
        end: {
          line: 625,
          column: 73
        }
      },
      "355": {
        start: {
          line: 626,
          column: 39
        },
        end: {
          line: 626,
          column: 68
        }
      },
      "356": {
        start: {
          line: 627,
          column: 24
        },
        end: {
          line: 627,
          column: 35
        }
      },
      "357": {
        start: {
          line: 628,
          column: 24
        },
        end: {
          line: 628,
          column: 30
        }
      },
      "358": {
        start: {
          line: 630,
          column: 24
        },
        end: {
          line: 632,
          column: 71
        }
      },
      "359": {
        start: {
          line: 631,
          column: 42
        },
        end: {
          line: 631,
          column: 73
        }
      },
      "360": {
        start: {
          line: 632,
          column: 39
        },
        end: {
          line: 632,
          column: 69
        }
      },
      "361": {
        start: {
          line: 633,
          column: 24
        },
        end: {
          line: 633,
          column: 48
        }
      },
      "362": {
        start: {
          line: 634,
          column: 24
        },
        end: {
          line: 634,
          column: 30
        }
      },
      "363": {
        start: {
          line: 636,
          column: 16
        },
        end: {
          line: 639,
          column: 17
        }
      },
      "364": {
        start: {
          line: 637,
          column: 20
        },
        end: {
          line: 637,
          column: 90
        }
      },
      "365": {
        start: {
          line: 638,
          column: 20
        },
        end: {
          line: 638,
          column: 36
        }
      },
      "366": {
        start: {
          line: 641,
          column: 30
        },
        end: {
          line: 641,
          column: 52
        }
      },
      "367": {
        start: {
          line: 642,
          column: 35
        },
        end: {
          line: 642,
          column: 44
        }
      },
      "368": {
        start: {
          line: 643,
          column: 34
        },
        end: {
          line: 643,
          column: 59
        }
      },
      "369": {
        start: {
          line: 644,
          column: 38
        },
        end: {
          line: 644,
          column: 83
        }
      },
      "370": {
        start: {
          line: 646,
          column: 32
        },
        end: {
          line: 646,
          column: 89
        }
      },
      "371": {
        start: {
          line: 646,
          column: 60
        },
        end: {
          line: 646,
          column: 69
        }
      },
      "372": {
        start: {
          line: 647,
          column: 28
        },
        end: {
          line: 647,
          column: 47
        }
      },
      "373": {
        start: {
          line: 648,
          column: 28
        },
        end: {
          line: 648,
          column: 47
        }
      },
      "374": {
        start: {
          line: 649,
          column: 33
        },
        end: {
          line: 649,
          column: 113
        }
      },
      "375": {
        start: {
          line: 649,
          column: 61
        },
        end: {
          line: 649,
          column: 93
        }
      },
      "376": {
        start: {
          line: 650,
          column: 42
        },
        end: {
          line: 650,
          column: 61
        }
      },
      "377": {
        start: {
          line: 651,
          column: 16
        },
        end: {
          line: 651,
          column: 63
        }
      },
      "378": {
        start: {
          line: 652,
          column: 16
        },
        end: {
          line: 652,
          column: 152
        }
      },
      "379": {
        start: {
          line: 653,
          column: 16
        },
        end: {
          line: 653,
          column: 110
        }
      },
      "380": {
        start: {
          line: 654,
          column: 16
        },
        end: {
          line: 654,
          column: 78
        }
      },
      "381": {
        start: {
          line: 655,
          column: 16
        },
        end: {
          line: 655,
          column: 70
        }
      },
      "382": {
        start: {
          line: 656,
          column: 16
        },
        end: {
          line: 656,
          column: 70
        }
      },
      "383": {
        start: {
          line: 657,
          column: 16
        },
        end: {
          line: 657,
          column: 95
        }
      },
      "384": {
        start: {
          line: 659,
          column: 42
        },
        end: {
          line: 659,
          column: 77
        }
      },
      "385": {
        start: {
          line: 660,
          column: 16
        },
        end: {
          line: 660,
          column: 62
        }
      },
      "386": {
        start: {
          line: 661,
          column: 16
        },
        end: {
          line: 669,
          column: 17
        }
      },
      "387": {
        start: {
          line: 662,
          column: 20
        },
        end: {
          line: 662,
          column: 112
        }
      },
      "388": {
        start: {
          line: 664,
          column: 21
        },
        end: {
          line: 669,
          column: 17
        }
      },
      "389": {
        start: {
          line: 665,
          column: 20
        },
        end: {
          line: 665,
          column: 115
        }
      },
      "390": {
        start: {
          line: 668,
          column: 20
        },
        end: {
          line: 668,
          column: 115
        }
      },
      "391": {
        start: {
          line: 671,
          column: 16
        },
        end: {
          line: 688,
          column: 17
        }
      },
      "392": {
        start: {
          line: 673,
          column: 30
        },
        end: {
          line: 673,
          column: 43
        }
      },
      "393": {
        start: {
          line: 674,
          column: 30
        },
        end: {
          line: 674,
          column: 68
        }
      },
      "394": {
        start: {
          line: 674,
          column: 66
        },
        end: {
          line: 674,
          column: 67
        }
      },
      "395": {
        start: {
          line: 675,
          column: 33
        },
        end: {
          line: 675,
          column: 69
        }
      },
      "396": {
        start: {
          line: 675,
          column: 56
        },
        end: {
          line: 675,
          column: 65
        }
      },
      "397": {
        start: {
          line: 676,
          column: 33
        },
        end: {
          line: 676,
          column: 74
        }
      },
      "398": {
        start: {
          line: 676,
          column: 61
        },
        end: {
          line: 676,
          column: 70
        }
      },
      "399": {
        start: {
          line: 677,
          column: 34
        },
        end: {
          line: 677,
          column: 85
        }
      },
      "400": {
        start: {
          line: 677,
          column: 60
        },
        end: {
          line: 677,
          column: 81
        }
      },
      "401": {
        start: {
          line: 678,
          column: 34
        },
        end: {
          line: 678,
          column: 76
        }
      },
      "402": {
        start: {
          line: 678,
          column: 57
        },
        end: {
          line: 678,
          column: 72
        }
      },
      "403": {
        start: {
          line: 679,
          column: 34
        },
        end: {
          line: 679,
          column: 87
        }
      },
      "404": {
        start: {
          line: 680,
          column: 38
        },
        end: {
          line: 680,
          column: 63
        }
      },
      "405": {
        start: {
          line: 681,
          column: 38
        },
        end: {
          line: 681,
          column: 59
        }
      },
      "406": {
        start: {
          line: 682,
          column: 40
        },
        end: {
          line: 682,
          column: 67
        }
      },
      "407": {
        start: {
          line: 683,
          column: 20
        },
        end: {
          line: 683,
          column: 82
        }
      },
      "408": {
        start: {
          line: 684,
          column: 20
        },
        end: {
          line: 684,
          column: 90
        }
      },
      "409": {
        start: {
          line: 685,
          column: 20
        },
        end: {
          line: 685,
          column: 88
        }
      },
      "410": {
        start: {
          line: 686,
          column: 20
        },
        end: {
          line: 686,
          column: 108
        }
      },
      "411": {
        start: {
          line: 687,
          column: 20
        },
        end: {
          line: 687,
          column: 132
        }
      },
      "412": {
        start: {
          line: 689,
          column: 16
        },
        end: {
          line: 689,
          column: 32
        }
      },
      "413": {
        start: {
          line: 692,
          column: 16
        },
        end: {
          line: 694,
          column: 17
        }
      },
      "414": {
        start: {
          line: 693,
          column: 20
        },
        end: {
          line: 693,
          column: 32
        }
      },
      "415": {
        start: {
          line: 695,
          column: 16
        },
        end: {
          line: 695,
          column: 125
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 29
          }
        },
        loc: {
          start: {
            line: 74,
            column: 43
          },
          end: {
            line: 85,
            column: 1
          }
        },
        line: 74
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 87,
            column: 23
          },
          end: {
            line: 87,
            column: 24
          }
        },
        loc: {
          start: {
            line: 87,
            column: 31
          },
          end: {
            line: 93,
            column: 1
          }
        },
        line: 87
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 94,
            column: 25
          },
          end: {
            line: 94,
            column: 26
          }
        },
        loc: {
          start: {
            line: 94,
            column: 36
          },
          end: {
            line: 96,
            column: 1
          }
        },
        line: 94
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 97,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        loc: {
          start: {
            line: 97,
            column: 31
          },
          end: {
            line: 104,
            column: 1
          }
        },
        line: 97
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 105,
            column: 23
          },
          end: {
            line: 105,
            column: 24
          }
        },
        loc: {
          start: {
            line: 105,
            column: 35
          },
          end: {
            line: 116,
            column: 1
          }
        },
        line: 105
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 38
          },
          end: {
            line: 110,
            column: 39
          }
        },
        loc: {
          start: {
            line: 110,
            column: 52
          },
          end: {
            line: 110,
            column: 61
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 40
          },
          end: {
            line: 111,
            column: 41
          }
        },
        loc: {
          start: {
            line: 111,
            column: 54
          },
          end: {
            line: 111,
            column: 63
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 117,
            column: 32
          },
          end: {
            line: 117,
            column: 33
          }
        },
        loc: {
          start: {
            line: 117,
            column: 45
          },
          end: {
            line: 135,
            column: 1
          }
        },
        line: 117
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 137,
            column: 23
          },
          end: {
            line: 137,
            column: 24
          }
        },
        loc: {
          start: {
            line: 137,
            column: 50
          },
          end: {
            line: 149,
            column: 1
          }
        },
        line: 137
      },
      "9": {
        name: "createPerformanceMetricsTools",
        decl: {
          start: {
            line: 151,
            column: 16
          },
          end: {
            line: 151,
            column: 45
          }
        },
        loc: {
          start: {
            line: 151,
            column: 65
          },
          end: {
            line: 699,
            column: 1
          }
        },
        line: 151
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 157,
            column: 17
          },
          end: {
            line: 157,
            column: 18
          }
        },
        loc: {
          start: {
            line: 157,
            column: 33
          },
          end: {
            line: 222,
            column: 9
          }
        },
        line: 157
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 229,
            column: 17
          },
          end: {
            line: 229,
            column: 18
          }
        },
        loc: {
          start: {
            line: 229,
            column: 33
          },
          end: {
            line: 336,
            column: 9
          }
        },
        line: 229
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 242,
            column: 51
          },
          end: {
            line: 242,
            column: 52
          }
        },
        loc: {
          start: {
            line: 242,
            column: 56
          },
          end: {
            line: 242,
            column: 88
          }
        },
        line: 242
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 248,
            column: 36
          },
          end: {
            line: 248,
            column: 37
          }
        },
        loc: {
          start: {
            line: 248,
            column: 41
          },
          end: {
            line: 248,
            column: 81
          }
        },
        line: 248
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 249,
            column: 33
          },
          end: {
            line: 249,
            column: 34
          }
        },
        loc: {
          start: {
            line: 249,
            column: 39
          },
          end: {
            line: 253,
            column: 25
          }
        },
        line: 249
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 258,
            column: 62
          },
          end: {
            line: 258,
            column: 63
          }
        },
        loc: {
          start: {
            line: 258,
            column: 74
          },
          end: {
            line: 258,
            column: 90
          }
        },
        line: 258
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 259,
            column: 71
          },
          end: {
            line: 259,
            column: 72
          }
        },
        loc: {
          start: {
            line: 259,
            column: 76
          },
          end: {
            line: 259,
            column: 86
          }
        },
        line: 259
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 260,
            column: 71
          },
          end: {
            line: 260,
            column: 72
          }
        },
        loc: {
          start: {
            line: 260,
            column: 76
          },
          end: {
            line: 260,
            column: 86
          }
        },
        line: 260
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 261,
            column: 63
          },
          end: {
            line: 261,
            column: 64
          }
        },
        loc: {
          start: {
            line: 261,
            column: 73
          },
          end: {
            line: 261,
            column: 96
          }
        },
        line: 261
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 269,
            column: 69
          },
          end: {
            line: 269,
            column: 70
          }
        },
        loc: {
          start: {
            line: 269,
            column: 74
          },
          end: {
            line: 269,
            column: 100
          }
        },
        line: 269
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 277,
            column: 62
          },
          end: {
            line: 277,
            column: 63
          }
        },
        loc: {
          start: {
            line: 277,
            column: 67
          },
          end: {
            line: 277,
            column: 92
          }
        },
        line: 277
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 297,
            column: 62
          },
          end: {
            line: 297,
            column: 63
          }
        },
        loc: {
          start: {
            line: 297,
            column: 67
          },
          end: {
            line: 297,
            column: 98
          }
        },
        line: 297
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 323,
            column: 48
          },
          end: {
            line: 323,
            column: 49
          }
        },
        loc: {
          start: {
            line: 323,
            column: 55
          },
          end: {
            line: 325,
            column: 25
          }
        },
        line: 323
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 343,
            column: 17
          },
          end: {
            line: 343,
            column: 18
          }
        },
        loc: {
          start: {
            line: 343,
            column: 33
          },
          end: {
            line: 498,
            column: 9
          }
        },
        line: 343
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 373,
            column: 46
          },
          end: {
            line: 373,
            column: 47
          }
        },
        loc: {
          start: {
            line: 373,
            column: 56
          },
          end: {
            line: 384,
            column: 37
          }
        },
        line: 373
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 385,
            column: 47
          },
          end: {
            line: 385,
            column: 48
          }
        },
        loc: {
          start: {
            line: 385,
            column: 56
          },
          end: {
            line: 389,
            column: 37
          }
        },
        line: 385
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 393,
            column: 50
          },
          end: {
            line: 393,
            column: 51
          }
        },
        loc: {
          start: {
            line: 393,
            column: 61
          },
          end: {
            line: 393,
            column: 85
          }
        },
        line: 393
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 417,
            column: 91
          },
          end: {
            line: 417,
            column: 92
          }
        },
        loc: {
          start: {
            line: 417,
            column: 101
          },
          end: {
            line: 425,
            column: 37
          }
        },
        line: 417
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 428,
            column: 50
          },
          end: {
            line: 428,
            column: 51
          }
        },
        loc: {
          start: {
            line: 428,
            column: 61
          },
          end: {
            line: 428,
            column: 85
          }
        },
        line: 428
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 453,
            column: 77
          },
          end: {
            line: 453,
            column: 78
          }
        },
        loc: {
          start: {
            line: 453,
            column: 92
          },
          end: {
            line: 453,
            column: 102
          }
        },
        line: 453
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 457,
            column: 71
          },
          end: {
            line: 457,
            column: 72
          }
        },
        loc: {
          start: {
            line: 457,
            column: 81
          },
          end: {
            line: 457,
            column: 86
          }
        },
        line: 457
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 467,
            column: 59
          },
          end: {
            line: 467,
            column: 60
          }
        },
        loc: {
          start: {
            line: 467,
            column: 68
          },
          end: {
            line: 469,
            column: 25
          }
        },
        line: 467
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 479,
            column: 59
          },
          end: {
            line: 479,
            column: 60
          }
        },
        loc: {
          start: {
            line: 479,
            column: 74
          },
          end: {
            line: 479,
            column: 84
          }
        },
        line: 479
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 505,
            column: 17
          },
          end: {
            line: 505,
            column: 18
          }
        },
        loc: {
          start: {
            line: 505,
            column: 33
          },
          end: {
            line: 582,
            column: 9
          }
        },
        line: 505
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 532,
            column: 64
          },
          end: {
            line: 532,
            column: 65
          }
        },
        loc: {
          start: {
            line: 532,
            column: 70
          },
          end: {
            line: 543,
            column: 17
          }
        },
        line: 532
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 546,
            column: 32
          },
          end: {
            line: 546,
            column: 33
          }
        },
        loc: {
          start: {
            line: 546,
            column: 38
          },
          end: {
            line: 546,
            column: 79
          }
        },
        line: 546
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 547,
            column: 29
          },
          end: {
            line: 547,
            column: 30
          }
        },
        loc: {
          start: {
            line: 547,
            column: 35
          },
          end: {
            line: 547,
            column: 75
          }
        },
        line: 547
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 559,
            column: 48
          },
          end: {
            line: 559,
            column: 49
          }
        },
        loc: {
          start: {
            line: 559,
            column: 55
          },
          end: {
            line: 561,
            column: 25
          }
        },
        line: 559
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 589,
            column: 17
          },
          end: {
            line: 589,
            column: 18
          }
        },
        loc: {
          start: {
            line: 589,
            column: 33
          },
          end: {
            line: 697,
            column: 9
          }
        },
        line: 589
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 599,
            column: 60
          },
          end: {
            line: 599,
            column: 61
          }
        },
        loc: {
          start: {
            line: 599,
            column: 66
          },
          end: {
            line: 599,
            column: 139
          }
        },
        line: 599
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 613,
            column: 36
          },
          end: {
            line: 613,
            column: 37
          }
        },
        loc: {
          start: {
            line: 613,
            column: 42
          },
          end: {
            line: 613,
            column: 83
          }
        },
        line: 613
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 614,
            column: 33
          },
          end: {
            line: 614,
            column: 34
          }
        },
        loc: {
          start: {
            line: 614,
            column: 39
          },
          end: {
            line: 614,
            column: 79
          }
        },
        line: 614
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 619,
            column: 36
          },
          end: {
            line: 619,
            column: 37
          }
        },
        loc: {
          start: {
            line: 619,
            column: 42
          },
          end: {
            line: 619,
            column: 60
          }
        },
        line: 619
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 620,
            column: 33
          },
          end: {
            line: 620,
            column: 34
          }
        },
        loc: {
          start: {
            line: 620,
            column: 39
          },
          end: {
            line: 620,
            column: 103
          }
        },
        line: 620
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 625,
            column: 36
          },
          end: {
            line: 625,
            column: 37
          }
        },
        loc: {
          start: {
            line: 625,
            column: 42
          },
          end: {
            line: 625,
            column: 73
          }
        },
        line: 625
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 626,
            column: 33
          },
          end: {
            line: 626,
            column: 34
          }
        },
        loc: {
          start: {
            line: 626,
            column: 39
          },
          end: {
            line: 626,
            column: 68
          }
        },
        line: 626
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 631,
            column: 36
          },
          end: {
            line: 631,
            column: 37
          }
        },
        loc: {
          start: {
            line: 631,
            column: 42
          },
          end: {
            line: 631,
            column: 73
          }
        },
        line: 631
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 632,
            column: 33
          },
          end: {
            line: 632,
            column: 34
          }
        },
        loc: {
          start: {
            line: 632,
            column: 39
          },
          end: {
            line: 632,
            column: 69
          }
        },
        line: 632
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 646,
            column: 46
          },
          end: {
            line: 646,
            column: 47
          }
        },
        loc: {
          start: {
            line: 646,
            column: 60
          },
          end: {
            line: 646,
            column: 69
          }
        },
        line: 646
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 649,
            column: 47
          },
          end: {
            line: 649,
            column: 48
          }
        },
        loc: {
          start: {
            line: 649,
            column: 61
          },
          end: {
            line: 649,
            column: 93
          }
        },
        line: 649
      },
      "50": {
        name: "(anonymous_50)",
        decl: {
          start: {
            line: 674,
            column: 56
          },
          end: {
            line: 674,
            column: 57
          }
        },
        loc: {
          start: {
            line: 674,
            column: 66
          },
          end: {
            line: 674,
            column: 67
          }
        },
        line: 674
      },
      "51": {
        name: "(anonymous_51)",
        decl: {
          start: {
            line: 675,
            column: 42
          },
          end: {
            line: 675,
            column: 43
          }
        },
        loc: {
          start: {
            line: 675,
            column: 56
          },
          end: {
            line: 675,
            column: 65
          }
        },
        line: 675
      },
      "52": {
        name: "(anonymous_52)",
        decl: {
          start: {
            line: 676,
            column: 47
          },
          end: {
            line: 676,
            column: 48
          }
        },
        loc: {
          start: {
            line: 676,
            column: 61
          },
          end: {
            line: 676,
            column: 70
          }
        },
        line: 676
      },
      "53": {
        name: "(anonymous_53)",
        decl: {
          start: {
            line: 677,
            column: 43
          },
          end: {
            line: 677,
            column: 44
          }
        },
        loc: {
          start: {
            line: 677,
            column: 60
          },
          end: {
            line: 677,
            column: 81
          }
        },
        line: 677
      },
      "54": {
        name: "(anonymous_54)",
        decl: {
          start: {
            line: 678,
            column: 43
          },
          end: {
            line: 678,
            column: 44
          }
        },
        loc: {
          start: {
            line: 678,
            column: 57
          },
          end: {
            line: 678,
            column: 72
          }
        },
        line: 678
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 83,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 79,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 93
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 80,
            column: 24
          },
          end: {
            line: 80,
            column: 38
          }
        }, {
          start: {
            line: 80,
            column: 42
          },
          end: {
            line: 80,
            column: 66
          }
        }, {
          start: {
            line: 80,
            column: 70
          },
          end: {
            line: 80,
            column: 93
          }
        }],
        line: 80
      },
      "3": {
        loc: {
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 81,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 81,
            column: 23
          },
          end: {
            line: 81,
            column: 36
          }
        }, {
          start: {
            line: 81,
            column: 40
          },
          end: {
            line: 81,
            column: 63
          }
        }, {
          start: {
            line: 81,
            column: 67
          },
          end: {
            line: 81,
            column: 69
          }
        }],
        line: 81
      },
      "4": {
        loc: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 89,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 89,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 88
      },
      "5": {
        loc: {
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 91,
            column: 44
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 90,
            column: 4
          },
          end: {
            line: 91,
            column: 44
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 90
      },
      "6": {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 99,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 99,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 98
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 107,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 107,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 114,
            column: 24
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 4
          },
          end: {
            line: 114,
            column: 24
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 115,
            column: 11
          },
          end: {
            line: 115,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 31
          },
          end: {
            line: 115,
            column: 43
          }
        }, {
          start: {
            line: 115,
            column: 46
          },
          end: {
            line: 115,
            column: 58
          }
        }],
        line: 115
      },
      "10": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "11": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "12": {
        loc: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "13": {
        loc: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "14": {
        loc: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "15": {
        loc: {
          start: {
            line: 137,
            column: 36
          },
          end: {
            line: 137,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 137,
            column: 43
          },
          end: {
            line: 137,
            column: 45
          }
        }],
        line: 137
      },
      "16": {
        loc: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "17": {
        loc: {
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 16
          },
          end: {
            line: 172,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "18": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "19": {
        loc: {
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 190,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 20
          },
          end: {
            line: 190,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 16
          },
          end: {
            line: 206,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 205,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 20
          },
          end: {
            line: 205,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 203
      },
      "22": {
        loc: {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 213,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "23": {
        loc: {
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 219,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 16
          },
          end: {
            line: 219,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "24": {
        loc: {
          start: {
            line: 220,
            column: 74
          },
          end: {
            line: 220,
            column: 130
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 99
          },
          end: {
            line: 220,
            column: 112
          }
        }, {
          start: {
            line: 220,
            column: 115
          },
          end: {
            line: 220,
            column: 130
          }
        }],
        line: 220
      },
      "25": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 234,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "26": {
        loc: {
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 241,
            column: 16
          },
          end: {
            line: 243,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 241
      },
      "27": {
        loc: {
          start: {
            line: 245,
            column: 16
          },
          end: {
            line: 315,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 246,
            column: 20
          },
          end: {
            line: 274,
            column: 21
          }
        }, {
          start: {
            line: 275,
            column: 20
          },
          end: {
            line: 293,
            column: 21
          }
        }, {
          start: {
            line: 294,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        }, {
          start: {
            line: 306,
            column: 20
          },
          end: {
            line: 314,
            column: 21
          }
        }],
        line: 245
      },
      "28": {
        loc: {
          start: {
            line: 248,
            column: 41
          },
          end: {
            line: 248,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 248,
            column: 41
          },
          end: {
            line: 248,
            column: 51
          }
        }, {
          start: {
            line: 248,
            column: 55
          },
          end: {
            line: 248,
            column: 66
          }
        }, {
          start: {
            line: 248,
            column: 70
          },
          end: {
            line: 248,
            column: 81
          }
        }],
        line: 248
      },
      "29": {
        loc: {
          start: {
            line: 251,
            column: 40
          },
          end: {
            line: 251,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 40
          },
          end: {
            line: 251,
            column: 52
          }
        }, {
          start: {
            line: 251,
            column: 56
          },
          end: {
            line: 251,
            column: 65
          }
        }],
        line: 251
      },
      "30": {
        loc: {
          start: {
            line: 252,
            column: 36
          },
          end: {
            line: 252,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 252,
            column: 50
          },
          end: {
            line: 252,
            column: 58
          }
        }, {
          start: {
            line: 252,
            column: 61
          },
          end: {
            line: 252,
            column: 70
          }
        }],
        line: 252
      },
      "31": {
        loc: {
          start: {
            line: 254,
            column: 24
          },
          end: {
            line: 257,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 24
          },
          end: {
            line: 257,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "32": {
        loc: {
          start: {
            line: 261,
            column: 43
          },
          end: {
            line: 261,
            column: 151
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 43
          },
          end: {
            line: 261,
            column: 146
          }
        }, {
          start: {
            line: 261,
            column: 150
          },
          end: {
            line: 261,
            column: 151
          }
        }],
        line: 261
      },
      "33": {
        loc: {
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 46
          },
          end: {
            line: 268,
            column: 60
          }
        }, {
          start: {
            line: 268,
            column: 64
          },
          end: {
            line: 268,
            column: 75
          }
        }],
        line: 268
      },
      "34": {
        loc: {
          start: {
            line: 270,
            column: 24
          },
          end: {
            line: 272,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 24
          },
          end: {
            line: 272,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "35": {
        loc: {
          start: {
            line: 277,
            column: 67
          },
          end: {
            line: 277,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 277,
            column: 67
          },
          end: {
            line: 277,
            column: 77
          }
        }, {
          start: {
            line: 277,
            column: 81
          },
          end: {
            line: 277,
            column: 92
          }
        }],
        line: 277
      },
      "36": {
        loc: {
          start: {
            line: 278,
            column: 42
          },
          end: {
            line: 278,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 278,
            column: 59
          },
          end: {
            line: 278,
            column: 91
          }
        }, {
          start: {
            line: 278,
            column: 94
          },
          end: {
            line: 278,
            column: 95
          }
        }],
        line: 278
      },
      "37": {
        loc: {
          start: {
            line: 283,
            column: 24
          },
          end: {
            line: 291,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 24
          },
          end: {
            line: 291,
            column: 25
          }
        }, {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 291,
            column: 25
          }
        }],
        line: 283
      },
      "38": {
        loc: {
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 291,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 286,
            column: 29
          },
          end: {
            line: 291,
            column: 25
          }
        }, {
          start: {
            line: 289,
            column: 29
          },
          end: {
            line: 291,
            column: 25
          }
        }],
        line: 286
      },
      "39": {
        loc: {
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 317,
            column: 16
          },
          end: {
            line: 327,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 317
      },
      "40": {
        loc: {
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 326,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 326,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "41": {
        loc: {
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 333,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "42": {
        loc: {
          start: {
            line: 334,
            column: 70
          },
          end: {
            line: 334,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 334,
            column: 95
          },
          end: {
            line: 334,
            column: 108
          }
        }, {
          start: {
            line: 334,
            column: 111
          },
          end: {
            line: 334,
            column: 126
          }
        }],
        line: 334
      },
      "43": {
        loc: {
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 16
          },
          end: {
            line: 352,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "44": {
        loc: {
          start: {
            line: 365,
            column: 20
          },
          end: {
            line: 438,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 366,
            column: 24
          },
          end: {
            line: 396,
            column: 25
          }
        }, {
          start: {
            line: 397,
            column: 24
          },
          end: {
            line: 409,
            column: 25
          }
        }, {
          start: {
            line: 410,
            column: 24
          },
          end: {
            line: 435,
            column: 25
          }
        }, {
          start: {
            line: 436,
            column: 24
          },
          end: {
            line: 437,
            column: 96
          }
        }],
        line: 365
      },
      "45": {
        loc: {
          start: {
            line: 375,
            column: 40
          },
          end: {
            line: 383,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 40
          },
          end: {
            line: 383,
            column: 41
          }
        }, {
          start: {
            line: 379,
            column: 45
          },
          end: {
            line: 383,
            column: 41
          }
        }],
        line: 375
      },
      "46": {
        loc: {
          start: {
            line: 381,
            column: 44
          },
          end: {
            line: 382,
            column: 82
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 44
          },
          end: {
            line: 382,
            column: 82
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "47": {
        loc: {
          start: {
            line: 398,
            column: 28
          },
          end: {
            line: 400,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 398,
            column: 28
          },
          end: {
            line: 400,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 398
      },
      "48": {
        loc: {
          start: {
            line: 419,
            column: 40
          },
          end: {
            line: 424,
            column: 41
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 40
          },
          end: {
            line: 424,
            column: 41
          }
        }, {
          start: {
            line: 422,
            column: 45
          },
          end: {
            line: 424,
            column: 41
          }
        }],
        line: 419
      },
      "49": {
        loc: {
          start: {
            line: 442,
            column: 40
          },
          end: {
            line: 444,
            column: 27
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 443,
            column: 26
          },
          end: {
            line: 443,
            column: 84
          }
        }, {
          start: {
            line: 444,
            column: 26
          },
          end: {
            line: 444,
            column: 27
          }
        }],
        line: 442
      },
      "50": {
        loc: {
          start: {
            line: 452,
            column: 20
          },
          end: {
            line: 464,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 452,
            column: 20
          },
          end: {
            line: 464,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 452
      },
      "51": {
        loc: {
          start: {
            line: 465,
            column: 20
          },
          end: {
            line: 470,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 465,
            column: 20
          },
          end: {
            line: 470,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 465
      },
      "52": {
        loc: {
          start: {
            line: 465,
            column: 24
          },
          end: {
            line: 465,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 465,
            column: 24
          },
          end: {
            line: 465,
            column: 43
          }
        }, {
          start: {
            line: 465,
            column: 47
          },
          end: {
            line: 465,
            column: 72
          }
        }],
        line: 465
      },
      "53": {
        loc: {
          start: {
            line: 478,
            column: 45
          },
          end: {
            line: 481,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 479,
            column: 30
          },
          end: {
            line: 480,
            column: 60
          }
        }, {
          start: {
            line: 481,
            column: 30
          },
          end: {
            line: 481,
            column: 31
          }
        }],
        line: 478
      },
      "54": {
        loc: {
          start: {
            line: 488,
            column: 61
          },
          end: {
            line: 488,
            column: 117
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 488,
            column: 86
          },
          end: {
            line: 488,
            column: 99
          }
        }, {
          start: {
            line: 488,
            column: 102
          },
          end: {
            line: 488,
            column: 117
          }
        }],
        line: 488
      },
      "55": {
        loc: {
          start: {
            line: 493,
            column: 16
          },
          end: {
            line: 495,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 16
          },
          end: {
            line: 495,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "56": {
        loc: {
          start: {
            line: 496,
            column: 64
          },
          end: {
            line: 496,
            column: 120
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 496,
            column: 89
          },
          end: {
            line: 496,
            column: 102
          }
        }, {
          start: {
            line: 496,
            column: 105
          },
          end: {
            line: 496,
            column: 120
          }
        }],
        line: 496
      },
      "57": {
        loc: {
          start: {
            line: 515,
            column: 48
          },
          end: {
            line: 515,
            column: 224
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 515,
            column: 110
          },
          end: {
            line: 515,
            column: 122
          }
        }, {
          start: {
            line: 515,
            column: 125
          },
          end: {
            line: 515,
            column: 224
          }
        }],
        line: 515
      },
      "58": {
        loc: {
          start: {
            line: 515,
            column: 125
          },
          end: {
            line: 515,
            column: 224
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 515,
            column: 187
          },
          end: {
            line: 515,
            column: 208
          }
        }, {
          start: {
            line: 515,
            column: 211
          },
          end: {
            line: 515,
            column: 224
          }
        }],
        line: 515
      },
      "59": {
        loc: {
          start: {
            line: 521,
            column: 16
          },
          end: {
            line: 530,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 521,
            column: 16
          },
          end: {
            line: 530,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 521
      },
      "60": {
        loc: {
          start: {
            line: 521,
            column: 20
          },
          end: {
            line: 521,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 521,
            column: 20
          },
          end: {
            line: 521,
            column: 46
          }
        }, {
          start: {
            line: 521,
            column: 50
          },
          end: {
            line: 521,
            column: 77
          }
        }],
        line: 521
      },
      "61": {
        loc: {
          start: {
            line: 533,
            column: 37
          },
          end: {
            line: 541,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 534,
            column: 26
          },
          end: {
            line: 534,
            column: 27
          }
        }, {
          start: {
            line: 535,
            column: 26
          },
          end: {
            line: 541,
            column: 41
          }
        }],
        line: 533
      },
      "62": {
        loc: {
          start: {
            line: 535,
            column: 26
          },
          end: {
            line: 541,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 536,
            column: 30
          },
          end: {
            line: 536,
            column: 31
          }
        }, {
          start: {
            line: 537,
            column: 30
          },
          end: {
            line: 541,
            column: 41
          }
        }],
        line: 535
      },
      "63": {
        loc: {
          start: {
            line: 537,
            column: 30
          },
          end: {
            line: 541,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 34
          },
          end: {
            line: 538,
            column: 36
          }
        }, {
          start: {
            line: 539,
            column: 34
          },
          end: {
            line: 541,
            column: 41
          }
        }],
        line: 537
      },
      "64": {
        loc: {
          start: {
            line: 539,
            column: 34
          },
          end: {
            line: 541,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 540,
            column: 38
          },
          end: {
            line: 540,
            column: 41
          }
        }, {
          start: {
            line: 541,
            column: 38
          },
          end: {
            line: 541,
            column: 41
          }
        }],
        line: 539
      },
      "65": {
        loc: {
          start: {
            line: 544,
            column: 16
          },
          end: {
            line: 553,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 544,
            column: 16
          },
          end: {
            line: 553,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 544
      },
      "66": {
        loc: {
          start: {
            line: 548,
            column: 20
          },
          end: {
            line: 552,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 548,
            column: 20
          },
          end: {
            line: 552,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 548
      },
      "67": {
        loc: {
          start: {
            line: 551,
            column: 63
          },
          end: {
            line: 551,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 551,
            column: 88
          },
          end: {
            line: 551,
            column: 103
          }
        }, {
          start: {
            line: 551,
            column: 106
          },
          end: {
            line: 551,
            column: 160
          }
        }],
        line: 551
      },
      "68": {
        loc: {
          start: {
            line: 551,
            column: 106
          },
          end: {
            line: 551,
            column: 160
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 551,
            column: 131
          },
          end: {
            line: 551,
            column: 146
          }
        }, {
          start: {
            line: 551,
            column: 149
          },
          end: {
            line: 551,
            column: 160
          }
        }],
        line: 551
      },
      "69": {
        loc: {
          start: {
            line: 555,
            column: 16
          },
          end: {
            line: 563,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 555,
            column: 16
          },
          end: {
            line: 563,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 555
      },
      "70": {
        loc: {
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 562,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 557,
            column: 20
          },
          end: {
            line: 562,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 557
      },
      "71": {
        loc: {
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 579,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 577,
            column: 16
          },
          end: {
            line: 579,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 577
      },
      "72": {
        loc: {
          start: {
            line: 580,
            column: 78
          },
          end: {
            line: 580,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 580,
            column: 103
          },
          end: {
            line: 580,
            column: 116
          }
        }, {
          start: {
            line: 580,
            column: 119
          },
          end: {
            line: 580,
            column: 134
          }
        }],
        line: 580
      },
      "73": {
        loc: {
          start: {
            line: 591,
            column: 34
          },
          end: {
            line: 597,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 592,
            column: 22
          },
          end: {
            line: 592,
            column: 24
          }
        }, {
          start: {
            line: 593,
            column: 22
          },
          end: {
            line: 597,
            column: 34
          }
        }],
        line: 591
      },
      "74": {
        loc: {
          start: {
            line: 593,
            column: 22
          },
          end: {
            line: 597,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 594,
            column: 26
          },
          end: {
            line: 594,
            column: 29
          }
        }, {
          start: {
            line: 595,
            column: 26
          },
          end: {
            line: 597,
            column: 34
          }
        }],
        line: 593
      },
      "75": {
        loc: {
          start: {
            line: 595,
            column: 26
          },
          end: {
            line: 597,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 596,
            column: 30
          },
          end: {
            line: 596,
            column: 33
          }
        }, {
          start: {
            line: 597,
            column: 30
          },
          end: {
            line: 597,
            column: 34
          }
        }],
        line: 595
      },
      "76": {
        loc: {
          start: {
            line: 599,
            column: 66
          },
          end: {
            line: 599,
            column: 139
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 599,
            column: 66
          },
          end: {
            line: 599,
            column: 101
          }
        }, {
          start: {
            line: 599,
            column: 105
          },
          end: {
            line: 599,
            column: 139
          }
        }],
        line: 599
      },
      "77": {
        loc: {
          start: {
            line: 603,
            column: 16
          },
          end: {
            line: 606,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 603,
            column: 16
          },
          end: {
            line: 606,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 603
      },
      "78": {
        loc: {
          start: {
            line: 610,
            column: 16
          },
          end: {
            line: 635,
            column: 17
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 611,
            column: 20
          },
          end: {
            line: 616,
            column: 30
          }
        }, {
          start: {
            line: 617,
            column: 20
          },
          end: {
            line: 622,
            column: 30
          }
        }, {
          start: {
            line: 623,
            column: 20
          },
          end: {
            line: 628,
            column: 30
          }
        }, {
          start: {
            line: 629,
            column: 20
          },
          end: {
            line: 634,
            column: 30
          }
        }],
        line: 610
      },
      "79": {
        loc: {
          start: {
            line: 636,
            column: 16
          },
          end: {
            line: 639,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 636,
            column: 16
          },
          end: {
            line: 639,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 636
      },
      "80": {
        loc: {
          start: {
            line: 652,
            column: 50
          },
          end: {
            line: 652,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 652,
            column: 75
          },
          end: {
            line: 652,
            column: 90
          }
        }, {
          start: {
            line: 652,
            column: 93
          },
          end: {
            line: 652,
            column: 147
          }
        }],
        line: 652
      },
      "81": {
        loc: {
          start: {
            line: 652,
            column: 93
          },
          end: {
            line: 652,
            column: 147
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 652,
            column: 118
          },
          end: {
            line: 652,
            column: 133
          }
        }, {
          start: {
            line: 652,
            column: 136
          },
          end: {
            line: 652,
            column: 147
          }
        }],
        line: 652
      },
      "82": {
        loc: {
          start: {
            line: 653,
            column: 49
          },
          end: {
            line: 653,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 653,
            column: 69
          },
          end: {
            line: 653,
            column: 72
          }
        }, {
          start: {
            line: 653,
            column: 75
          },
          end: {
            line: 653,
            column: 77
          }
        }],
        line: 653
      },
      "83": {
        loc: {
          start: {
            line: 661,
            column: 16
          },
          end: {
            line: 669,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 661,
            column: 16
          },
          end: {
            line: 669,
            column: 17
          }
        }, {
          start: {
            line: 664,
            column: 21
          },
          end: {
            line: 669,
            column: 17
          }
        }],
        line: 661
      },
      "84": {
        loc: {
          start: {
            line: 664,
            column: 21
          },
          end: {
            line: 669,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 664,
            column: 21
          },
          end: {
            line: 669,
            column: 17
          }
        }, {
          start: {
            line: 667,
            column: 21
          },
          end: {
            line: 669,
            column: 17
          }
        }],
        line: 664
      },
      "85": {
        loc: {
          start: {
            line: 671,
            column: 16
          },
          end: {
            line: 688,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 671,
            column: 16
          },
          end: {
            line: 688,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 671
      },
      "86": {
        loc: {
          start: {
            line: 671,
            column: 20
          },
          end: {
            line: 671,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 671,
            column: 20
          },
          end: {
            line: 671,
            column: 43
          }
        }, {
          start: {
            line: 671,
            column: 47
          },
          end: {
            line: 671,
            column: 65
          }
        }],
        line: 671
      },
      "87": {
        loc: {
          start: {
            line: 686,
            column: 50
          },
          end: {
            line: 686,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 686,
            column: 62
          },
          end: {
            line: 686,
            column: 65
          }
        }, {
          start: {
            line: 686,
            column: 68
          },
          end: {
            line: 686,
            column: 70
          }
        }],
        line: 686
      },
      "88": {
        loc: {
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 694,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 692,
            column: 16
          },
          end: {
            line: 694,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 692
      },
      "89": {
        loc: {
          start: {
            line: 695,
            column: 65
          },
          end: {
            line: 695,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 695,
            column: 90
          },
          end: {
            line: 695,
            column: 103
          }
        }, {
          start: {
            line: 695,
            column: 106
          },
          end: {
            line: 695,
            column: 121
          }
        }],
        line: 695
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0,
      "316": 0,
      "317": 0,
      "318": 0,
      "319": 0,
      "320": 0,
      "321": 0,
      "322": 0,
      "323": 0,
      "324": 0,
      "325": 0,
      "326": 0,
      "327": 0,
      "328": 0,
      "329": 0,
      "330": 0,
      "331": 0,
      "332": 0,
      "333": 0,
      "334": 0,
      "335": 0,
      "336": 0,
      "337": 0,
      "338": 0,
      "339": 0,
      "340": 0,
      "341": 0,
      "342": 0,
      "343": 0,
      "344": 0,
      "345": 0,
      "346": 0,
      "347": 0,
      "348": 0,
      "349": 0,
      "350": 0,
      "351": 0,
      "352": 0,
      "353": 0,
      "354": 0,
      "355": 0,
      "356": 0,
      "357": 0,
      "358": 0,
      "359": 0,
      "360": 0,
      "361": 0,
      "362": 0,
      "363": 0,
      "364": 0,
      "365": 0,
      "366": 0,
      "367": 0,
      "368": 0,
      "369": 0,
      "370": 0,
      "371": 0,
      "372": 0,
      "373": 0,
      "374": 0,
      "375": 0,
      "376": 0,
      "377": 0,
      "378": 0,
      "379": 0,
      "380": 0,
      "381": 0,
      "382": 0,
      "383": 0,
      "384": 0,
      "385": 0,
      "386": 0,
      "387": 0,
      "388": 0,
      "389": 0,
      "390": 0,
      "391": 0,
      "392": 0,
      "393": 0,
      "394": 0,
      "395": 0,
      "396": 0,
      "397": 0,
      "398": 0,
      "399": 0,
      "400": 0,
      "401": 0,
      "402": 0,
      "403": 0,
      "404": 0,
      "405": 0,
      "406": 0,
      "407": 0,
      "408": 0,
      "409": 0,
      "410": 0,
      "411": 0,
      "412": 0,
      "413": 0,
      "414": 0,
      "415": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0, 0],
      "28": [0, 0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0],
      "78": [0, 0, 0, 0],
      "79": [0, 0],
      "80": [0, 0],
      "81": [0, 0],
      "82": [0, 0],
      "83": [0, 0],
      "84": [0, 0],
      "85": [0, 0],
      "86": [0, 0],
      "87": [0, 0],
      "88": [0, 0],
      "89": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/performance-metrics.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/performance-metrics.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { MonitoringClient } from '../client/monitoringClient.js';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  PerformanceAlert,\n  MonitoringReport,\n  MonitoringDataPoint,\n} from '../types/monitoringTypes.js';\n\n// Zod schemas for validation\nconst MetricsQuerySchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  includeWorkflows: z.boolean().default(true),\n  includeSystem: z.boolean().default(true),\n  workflowId: z.string().optional(),\n  format: z.enum(['summary', 'detailed', 'raw']).default('summary'),\n});\n\nconst PerformanceAnalysisSchema = z.object({\n  analysisType: z\n    .enum(['execution-times', 'resource-usage', 'error-rates', 'throughput'])\n    .default('execution-times'),\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  workflowId: z.string().optional(),\n  includeRecommendations: z.boolean().default(true),\n  threshold: z.number().optional(),\n});\n\nconst BenchmarkTestSchema = z.object({\n  testType: z\n    .enum(['api-response', 'workflow-execution', 'resource-load', 'concurrent-executions'])\n    .default('api-response'),\n  duration: z.number().min(10).max(300).default(60), // seconds\n  concurrency: z.number().min(1).max(20).default(1),\n  workflowId: z.string().optional(),\n  includeDetails: z.boolean().default(true),\n});\n\nconst AlertsConfigSchema = z.object({\n  type: z.enum(['create', 'update', 'delete', 'list']).default('list'),\n  alertId: z.string().optional(),\n  configuration: z\n    .object({\n      name: z.string().optional(),\n      metric: z\n        .enum([\n          'cpu-usage',\n          'memory-usage',\n          'disk-usage',\n          'execution-time',\n          'error-rate',\n          'response-time',\n        ])\n        .optional(),\n      threshold: z.number().optional(),\n      severity: z.enum(['low', 'medium', 'high', 'critical']).optional(),\n      enabled: z.boolean().optional(),\n    })\n    .optional(),\n});\n\nconst ReportGenerationSchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  includeWorkflows: z.boolean().default(true),\n  includeRecommendations: z.boolean().default(true),\n  includeCharts: z.boolean().default(false),\n  format: z.enum(['summary', 'detailed', 'executive']).default('summary'),\n  workflowFilter: z.array(z.string()).optional(),\n});\n\nconst TrendAnalysisSchema = z.object({\n  metric: z\n    .enum(['execution-times', 'success-rates', 'resource-usage', 'throughput'])\n    .default('execution-times'),\n  timeRange: z.enum(['24h', '7d', '30d', '90d']).default('7d'),\n  workflowId: z.string().optional(),\n  includeForecasting: z.boolean().default(false),\n});\n\n// Global monitoring client\nlet monitoringClient: MonitoringClient | null = null;\n\n// Performance data storage (in-memory for this implementation)\nconst performanceData: MonitoringDataPoint[] = [];\nconst performanceAlerts: PerformanceAlert[] = [];\n\n// Initialize monitoring client\nconst getMonitoringClient = (getClient: () => N8nClient | null): MonitoringClient => {\n  if (!monitoringClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n\n    monitoringClient = new MonitoringClient(client, baseUrl, apiKey);\n  }\n  return monitoringClient;\n};\n\n// Helper functions\nconst formatDuration = (ms: number): string => {\n  if (ms < 1000) return `${ms}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(2)}s`;\n  return `${(ms / 60000).toFixed(2)}m`;\n};\n\nconst formatPercentage = (value: number): string => {\n  return `${value.toFixed(2)}%`;\n};\n\nconst formatBytes = (bytes: number): string => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nconst calculateTrend = (values: number[]): 'increasing' | 'decreasing' | 'stable' => {\n  if (values.length < 2) return 'stable';\n\n  const firstHalf = values.slice(0, Math.floor(values.length / 2));\n  const secondHalf = values.slice(Math.floor(values.length / 2));\n\n  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n\n  const changePercent = ((secondAvg - firstAvg) / firstAvg) * 100;\n\n  if (Math.abs(changePercent) < 5) return 'stable';\n  return changePercent > 0 ? 'increasing' : 'decreasing';\n};\n\nconst generateRecommendations = (metrics: any): string[] => {\n  const recommendations: string[] = [];\n\n  if (metrics.performance?.errorRate > 10) {\n    recommendations.push(\n      'High error rate detected - review failing workflows and fix common issues'\n    );\n  }\n\n  if (metrics.performance?.averageExecutionTime > 60000) {\n    recommendations.push('Long execution times detected - consider optimizing slow workflows');\n  }\n\n  if (metrics.system?.memory?.utilization > 85) {\n    recommendations.push(\n      'High memory usage - consider increasing available memory or optimizing workflows'\n    );\n  }\n\n  if (metrics.system?.cpu?.totalUsage > 80) {\n    recommendations.push('High CPU usage - check for resource-intensive workflows');\n  }\n\n  if (metrics.workflows?.inactive > metrics.workflows?.active) {\n    recommendations.push(\n      'Many inactive workflows - consider cleanup or activation based on business needs'\n    );\n  }\n\n  return recommendations;\n};\n\n// Store performance data point\nconst storeDataPoint = (type: string, data: any, tags: Record<string, string> = {}): void => {\n  const dataPoint: MonitoringDataPoint = {\n    timestamp: new Date().toISOString(),\n    metricType: type as any,\n    data,\n    tags,\n  };\n\n  performanceData.push(dataPoint);\n\n  // Keep only last 10000 data points to prevent memory issues\n  if (performanceData.length > 10000) {\n    performanceData.shift();\n  }\n};\n\n// Tool registration function\nexport function createPerformanceMetricsTools(getClient: () => N8nClient | null, server: any) {\n  // Get performance metrics tool\n  server.addTool({\n    name: 'get-performance-metrics',\n    description: 'Collect and analyze performance metrics from n8n instance',\n    parameters: MetricsQuerySchema,\n    handler: async (args: z.infer<typeof MetricsQuerySchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n        const metrics = await monitoringClient.getMetrics();\n\n        // Store the data point\n        storeDataPoint('performance', metrics, {\n          timeRange: args.timeRange,\n          format: args.format,\n        });\n\n        if (args.format === 'raw') {\n          return {\n            success: true,\n            data: metrics,\n            timestamp: metrics.timestamp,\n          };\n        }\n\n        let response = `\uD83D\uDCCA **Performance Metrics Report**\\n\\n`;\n        response += `**Generated:** ${new Date(metrics.timestamp).toLocaleString()}\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n\\n`;\n\n        // Execution metrics\n        response += `**\u26A1 Execution Metrics:**\\n`;\n        response += `\u2022 Total Executions: ${metrics.executions.total}\\n`;\n        response += `\u2022 Successful: ${metrics.executions.successful} (${formatPercentage((metrics.executions.successful / metrics.executions.total) * 100)})\\n`;\n        response += `\u2022 Failed: ${metrics.executions.failed} (${formatPercentage((metrics.executions.failed / metrics.executions.total) * 100)})\\n`;\n        response += `\u2022 Currently Running: ${metrics.executions.running}\\n`;\n\n        // Workflow metrics\n        if (args.includeWorkflows) {\n          response += `\\n**\uD83D\uDD04 Workflow Metrics:**\\n`;\n          response += `\u2022 Total Workflows: ${metrics.workflows.total}\\n`;\n          response += `\u2022 Active: ${metrics.workflows.active}\\n`;\n          response += `\u2022 Inactive: ${metrics.workflows.inactive}\\n`;\n          if (metrics.workflows.withIssues > 0) {\n            response += `\u2022 With Issues: ${metrics.workflows.withIssues}\\n`;\n          }\n        }\n\n        // Performance metrics\n        response += `\\n**\uD83D\uDE80 Performance:**\\n`;\n        response += `\u2022 Average Execution Time: ${formatDuration(metrics.performance.averageExecutionTime)}\\n`;\n        response += `\u2022 Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\\n`;\n        response += `\u2022 Error Rate: ${formatPercentage(metrics.performance.errorRate)}\\n`;\n\n        // System metrics\n        if (args.includeSystem) {\n          response += `\\n**\uD83D\uDCBB System Resources:**\\n`;\n          response += `\u2022 CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\\n`;\n          response += `\u2022 Memory Usage: ${formatPercentage(metrics.system.memory.utilization)} (${formatBytes(metrics.system.memory.usedMemory)})\\n`;\n          response += `\u2022 Process Memory: ${formatBytes(metrics.system.memory.processMemory.rss)} RSS\\n`;\n          if (metrics.system.disk.totalSpace > 0) {\n            response += `\u2022 Disk Usage: ${formatPercentage(metrics.system.disk.utilization)}\\n`;\n          }\n        }\n\n        if (args.format === 'detailed') {\n          // Add more detailed information\n          response += `\\n**\uD83D\uDCC8 Detailed Metrics:**\\n`;\n          response += `\u2022 CPU Cores: ${metrics.system.cpu.coreCount}\\n`;\n          response += `\u2022 Process Heap: ${formatBytes(metrics.system.memory.processMemory.heapUsed)} / ${formatBytes(metrics.system.memory.processMemory.heapTotal)}\\n`;\n          response += `\u2022 System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to get performance metrics: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Performance analysis tool\n  server.addTool({\n    name: 'analyze-performance',\n    description: 'Perform detailed performance analysis with insights and recommendations',\n    parameters: PerformanceAnalysisSchema,\n    handler: async (args: z.infer<typeof PerformanceAnalysisSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('N8n client not initialized');\n        }\n\n        // Get executions for analysis\n        const executionsResponse = await client.getExecutions({\n          limit: 100,\n        });\n\n        // Extract data from API response wrapper and filter by workflowId if specified\n        let executions = executionsResponse.data;\n        if (args.workflowId) {\n          executions = executions.filter(e => e.workflowId === args.workflowId);\n        }\n\n        let response = `\uD83D\uDD0D **Performance Analysis: ${args.analysisType}**\\n\\n`;\n\n        switch (args.analysisType) {\n          case 'execution-times': {\n            const executionTimes = executions\n              .filter(e => e.finished && e.startedAt && e.stoppedAt)\n              .map(e => ({\n                duration: new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime(),\n                workflowId: e.workflowId || 'unknown',\n                status: e.stoppedAt ? 'failed' : 'success',\n              }));\n\n            if (executionTimes.length === 0) {\n              response += 'No completed executions found for analysis.\\n';\n              break;\n            }\n\n            const avgTime =\n              executionTimes.reduce((sum, e) => sum + e.duration, 0) / executionTimes.length;\n            const minTime = Math.min(...executionTimes.map(e => e.duration));\n            const maxTime = Math.max(...executionTimes.map(e => e.duration));\n            const medianTime =\n              executionTimes.sort((a, b) => a.duration - b.duration)[\n                Math.floor(executionTimes.length / 2)\n              ]?.duration || 0;\n\n            response += `**\uD83D\uDCCA Execution Time Analysis (${executionTimes.length} executions):**\\n`;\n            response += `\u2022 Average: ${formatDuration(avgTime)}\\n`;\n            response += `\u2022 Median: ${formatDuration(medianTime)}\\n`;\n            response += `\u2022 Min: ${formatDuration(minTime)}\\n`;\n            response += `\u2022 Max: ${formatDuration(maxTime)}\\n`;\n\n            // Identify slow executions\n            const slowThreshold = args.threshold || avgTime * 2;\n            const slowExecutions = executionTimes.filter(e => e.duration > slowThreshold);\n\n            if (slowExecutions.length > 0) {\n              response += `\\n\u26A0\uFE0F **Slow Executions (>${formatDuration(slowThreshold)}):** ${slowExecutions.length}\\n`;\n            }\n\n            break;\n          }\n\n          case 'error-rates': {\n            const totalExecs = executions.length;\n            const failedExecs = executions.filter(e => e.finished && e.stoppedAt).length;\n            const errorRate = totalExecs > 0 ? (failedExecs / totalExecs) * 100 : 0;\n\n            response += `**\u274C Error Rate Analysis:**\\n`;\n            response += `\u2022 Total Executions: ${totalExecs}\\n`;\n            response += `\u2022 Failed Executions: ${failedExecs}\\n`;\n            response += `\u2022 Error Rate: ${formatPercentage(errorRate)}\\n`;\n\n            if (errorRate > 10) {\n              response += `\\n\uD83D\uDD34 **High error rate detected!**\\n`;\n            } else if (errorRate > 5) {\n              response += `\\n\uD83D\uDFE1 **Moderate error rate - monitor closely**\\n`;\n            } else {\n              response += `\\n\u2705 **Error rate within acceptable range**\\n`;\n            }\n\n            break;\n          }\n\n          case 'throughput': {\n            const now = new Date();\n            const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n            const recentExecs = executions.filter(e => new Date(e.startedAt) > hourAgo);\n            const throughputPerHour = recentExecs.length;\n            const throughputPerMinute = throughputPerHour / 60;\n\n            response += `**\uD83D\uDE80 Throughput Analysis:**\\n`;\n            response += `\u2022 Executions (last hour): ${throughputPerHour}\\n`;\n            response += `\u2022 Throughput: ${throughputPerMinute.toFixed(2)} executions/minute\\n`;\n            response += `\u2022 Peak capacity utilization: ${formatPercentage((throughputPerMinute / 10) * 100)}\\n`; // Assuming 10/min peak\n\n            break;\n          }\n\n          case 'resource-usage': {\n            const monitoringClient = getMonitoringClient(getClient);\n            const systemUsage = monitoringClient.getSystemResourceUsage();\n\n            response += `**\uD83D\uDCBB Resource Usage Analysis:**\\n`;\n            response += `\u2022 CPU: ${formatPercentage(systemUsage.cpu.totalUsage)} (${systemUsage.cpu.coreCount} cores)\\n`;\n            response += `\u2022 Memory: ${formatPercentage(systemUsage.memory.utilization)}\\n`;\n            response += `\u2022 Process Memory: ${formatBytes(systemUsage.memory.processMemory.rss)}\\n`;\n\n            break;\n          }\n        }\n\n        // Add recommendations if requested\n        if (args.includeRecommendations) {\n          const monitoringClient = getMonitoringClient(getClient);\n          const metrics = await monitoringClient.getMetrics();\n          const recommendations = generateRecommendations(metrics);\n\n          if (recommendations.length > 0) {\n            response += `\\n**\uD83D\uDCA1 Recommendations:**\\n`;\n            recommendations.forEach(rec => {\n              response += `\u2022 ${rec}\\n`;\n            });\n          }\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to analyze performance: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Benchmark test tool\n  server.addTool({\n    name: 'run-benchmark',\n    description: 'Run performance benchmarks to test system capabilities',\n    parameters: BenchmarkTestSchema,\n    handler: async (args: z.infer<typeof BenchmarkTestSchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n\n        let response = `\uD83C\uDFC1 **Benchmark Test: ${args.testType}**\\n\\n`;\n        response += `**Configuration:**\\n`;\n        response += `\u2022 Duration: ${args.duration}s\\n`;\n        response += `\u2022 Concurrency: ${args.concurrency}\\n`;\n        if (args.workflowId) {\n          response += `\u2022 Workflow ID: ${args.workflowId}\\n`;\n        }\n        response += `\\n`;\n\n        const results = {\n          totalRequests: 0,\n          successfulRequests: 0,\n          failedRequests: 0,\n          responseTimes: [] as number[],\n          errors: [] as string[],\n        };\n\n        const startTime = Date.now();\n        const endTime = startTime + args.duration * 1000;\n\n        response += `**Running benchmark...**\\n`;\n\n        try {\n          switch (args.testType) {\n            case 'api-response': {\n              // Test API response times\n              while (Date.now() < endTime) {\n                const promises = [];\n                for (let i = 0; i < args.concurrency; i++) {\n                  promises.push(\n                    monitoringClient\n                      .testConnectivity()\n                      .then(result => {\n                        results.totalRequests++;\n                        if (result.success) {\n                          results.successfulRequests++;\n                          results.responseTimes.push(result.responseTime);\n                        } else {\n                          results.failedRequests++;\n                          if (result.error) results.errors.push(result.error);\n                        }\n                      })\n                      .catch(error => {\n                        results.totalRequests++;\n                        results.failedRequests++;\n                        results.errors.push(error.message);\n                      })\n                  );\n                }\n                await Promise.all(promises);\n\n                // Small delay between batches\n                await new Promise(resolve => setTimeout(resolve, 100));\n              }\n              break;\n            }\n\n            case 'workflow-execution': {\n              if (!args.workflowId) {\n                throw new UserError('Workflow ID is required for workflow execution benchmark');\n              }\n\n              // This would trigger workflow executions for benchmarking\n              // For now, simulate the benchmark\n              response += `*Note: Workflow execution benchmarking requires careful consideration of side effects.*\\n`;\n              results.totalRequests = 10;\n              results.successfulRequests = 8;\n              results.failedRequests = 2;\n              results.responseTimes = [1200, 1350, 1100, 1450, 1300, 1250, 1400, 1150];\n              break;\n            }\n\n            case 'resource-load': {\n              // Monitor resource usage during load\n              const loadStartUsage = monitoringClient.getSystemResourceUsage();\n\n              // Simulate some load by making multiple API calls\n              while (Date.now() < endTime) {\n                const promises = [];\n                for (let i = 0; i < args.concurrency * 2; i++) {\n                  promises.push(\n                    monitoringClient.testConnectivity().then(result => {\n                      results.totalRequests++;\n                      if (result.success) {\n                        results.successfulRequests++;\n                      } else {\n                        results.failedRequests++;\n                      }\n                    })\n                  );\n                }\n                await Promise.all(promises);\n                await new Promise(resolve => setTimeout(resolve, 200));\n              }\n\n              const loadEndUsage = monitoringClient.getSystemResourceUsage();\n              response += `**Resource Impact:**\\n`;\n              response += `\u2022 CPU Change: ${(loadEndUsage.cpu.totalUsage - loadStartUsage.cpu.totalUsage).toFixed(1)}%\\n`;\n              response += `\u2022 Memory Change: ${formatBytes(loadEndUsage.memory.processMemory.rss - loadStartUsage.memory.processMemory.rss)}\\n`;\n              break;\n            }\n\n            default:\n              throw new UserError(`Unsupported benchmark type: ${args.testType}`);\n          }\n\n          // Calculate statistics\n          const actualDuration = (Date.now() - startTime) / 1000;\n          const requestsPerSecond = results.totalRequests / actualDuration;\n          const successRate =\n            results.totalRequests > 0\n              ? (results.successfulRequests / results.totalRequests) * 100\n              : 0;\n\n          response += `\\n**\uD83D\uDCCA Results:**\\n`;\n          response += `\u2022 Duration: ${actualDuration.toFixed(1)}s\\n`;\n          response += `\u2022 Total Requests: ${results.totalRequests}\\n`;\n          response += `\u2022 Successful: ${results.successfulRequests}\\n`;\n          response += `\u2022 Failed: ${results.failedRequests}\\n`;\n          response += `\u2022 Success Rate: ${formatPercentage(successRate)}\\n`;\n          response += `\u2022 Requests/second: ${requestsPerSecond.toFixed(2)}\\n`;\n\n          if (results.responseTimes.length > 0) {\n            const avgResponseTime =\n              results.responseTimes.reduce((sum, time) => sum + time, 0) /\n              results.responseTimes.length;\n            const minResponseTime = Math.min(...results.responseTimes);\n            const maxResponseTime = Math.max(...results.responseTimes);\n            const sortedTimes = results.responseTimes.sort((a, b) => a - b);\n            const p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];\n\n            response += `\\n**\u23F1\uFE0F Response Times:**\\n`;\n            response += `\u2022 Average: ${avgResponseTime.toFixed(0)}ms\\n`;\n            response += `\u2022 Min: ${minResponseTime}ms\\n`;\n            response += `\u2022 Max: ${maxResponseTime}ms\\n`;\n            response += `\u2022 95th Percentile: ${p95ResponseTime}ms\\n`;\n          }\n\n          if (args.includeDetails && results.errors.length > 0) {\n            response += `\\n**\u274C Errors (first 5):**\\n`;\n            results.errors.slice(0, 5).forEach(error => {\n              response += `\u2022 ${error}\\n`;\n            });\n          }\n\n          // Store benchmark results\n          storeDataPoint(\n            'performance',\n            {\n              benchmarkType: args.testType,\n              duration: actualDuration,\n              totalRequests: results.totalRequests,\n              successRate,\n              requestsPerSecond,\n              averageResponseTime:\n                results.responseTimes.length > 0\n                  ? results.responseTimes.reduce((sum, time) => sum + time, 0) /\n                    results.responseTimes.length\n                  : 0,\n            },\n            {\n              testType: args.testType,\n              concurrency: args.concurrency.toString(),\n            }\n          );\n        } catch (error) {\n          response += `\\n\u274C **Benchmark failed:** ${error instanceof Error ? error.message : 'Unknown error'}\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to run benchmark: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Generate performance report tool\n  server.addTool({\n    name: 'generate-performance-report',\n    description: 'Generate comprehensive performance report with trends and recommendations',\n    parameters: ReportGenerationSchema,\n    handler: async (args: z.infer<typeof ReportGenerationSchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n        const metrics = await monitoringClient.getMetrics();\n\n        let response = `\uD83D\uDCCA **Performance Report**\\n\\n`;\n        response += `**Generated:** ${new Date().toLocaleString()}\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Report Type:** ${args.format}\\n\\n`;\n\n        // Executive Summary\n        response += `**\uD83D\uDCC8 Executive Summary:**\\n`;\n        response += `\u2022 System Status: ${metrics.executions.failed / metrics.executions.total < 0.05 ? '\uD83D\uDFE2 Healthy' : metrics.executions.failed / metrics.executions.total < 0.15 ? '\uD83D\uDFE1 Attention Needed' : '\uD83D\uDD34 Critical'}\\n`;\n        response += `\u2022 Total Executions: ${metrics.executions.total}\\n`;\n        response += `\u2022 Success Rate: ${formatPercentage((metrics.executions.successful / metrics.executions.total) * 100)}\\n`;\n        response += `\u2022 Average Response Time: ${formatDuration(metrics.performance.averageExecutionTime)}\\n`;\n        response += `\u2022 System Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\\n\\n`;\n\n        // Detailed metrics based on format\n        if (args.format === 'detailed' || args.format === 'executive') {\n          response += `**\uD83D\uDD04 Workflow Performance:**\\n`;\n          response += `\u2022 Active Workflows: ${metrics.workflows.active}\\n`;\n          response += `\u2022 Inactive Workflows: ${metrics.workflows.inactive}\\n`;\n          response += `\u2022 Workflows with Issues: ${metrics.workflows.withIssues}\\n\\n`;\n\n          response += `**\uD83D\uDCBB Resource Utilization:**\\n`;\n          response += `\u2022 CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\\n`;\n          response += `\u2022 Memory Usage: ${formatPercentage(metrics.system.memory.utilization)}\\n`;\n          response += `\u2022 System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\\n\\n`;\n        }\n\n        // Trend Analysis\n        const recentDataPoints = performanceData.filter(dp => {\n          const hoursAgo =\n            args.timeRange === '1h'\n              ? 1\n              : args.timeRange === '6h'\n                ? 6\n                : args.timeRange === '24h'\n                  ? 24\n                  : args.timeRange === '7d'\n                    ? 168\n                    : 720;\n          return new Date(dp.timestamp) > new Date(Date.now() - hoursAgo * 60 * 60 * 1000);\n        });\n\n        if (recentDataPoints.length > 1) {\n          const executionTimes = recentDataPoints\n            .filter(dp => (dp.data as any).performance?.averageExecutionTime)\n            .map(dp => (dp.data as any).performance.averageExecutionTime);\n\n          if (executionTimes.length > 1) {\n            const trend = calculateTrend(executionTimes);\n            response += `**\uD83D\uDCCA Performance Trends:**\\n`;\n            response += `\u2022 Execution Time Trend: ${trend === 'increasing' ? '\uD83D\uDCC8 Increasing' : trend === 'decreasing' ? '\uD83D\uDCC9 Decreasing' : '\u27A1\uFE0F Stable'}\\n`;\n          }\n        }\n\n        // Recommendations\n        if (args.includeRecommendations) {\n          const recommendations = generateRecommendations(metrics);\n          if (recommendations.length > 0) {\n            response += `\\n**\uD83D\uDCA1 Recommendations:**\\n`;\n            recommendations.forEach(rec => {\n              response += `\u2022 ${rec}\\n`;\n            });\n          }\n        }\n\n        // Store the report generation\n        storeDataPoint(\n          'performance',\n          {\n            reportType: 'performance-report',\n            timeRange: args.timeRange,\n            format: args.format,\n            metricsSnapshot: metrics,\n          },\n          {\n            reportFormat: args.format,\n            timeRange: args.timeRange,\n          }\n        );\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to generate performance report: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Trend analysis tool\n  server.addTool({\n    name: 'analyze-trends',\n    description: 'Analyze performance trends over time with forecasting capabilities',\n    parameters: TrendAnalysisSchema,\n    handler: async (args: z.infer<typeof TrendAnalysisSchema>) => {\n      try {\n        const hoursBack =\n          args.timeRange === '24h'\n            ? 24\n            : args.timeRange === '7d'\n              ? 168\n              : args.timeRange === '30d'\n                ? 720\n                : 2160;\n        const cutoffTime = new Date(Date.now() - hoursBack * 60 * 60 * 1000);\n\n        const relevantData = performanceData.filter(\n          dp => new Date(dp.timestamp) > cutoffTime && dp.data[args.metric] !== undefined\n        );\n\n        let response = `\uD83D\uDCC8 **Trend Analysis: ${args.metric}**\\n\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Data Points:** ${relevantData.length}\\n\\n`;\n\n        if (relevantData.length < 2) {\n          response += 'Insufficient data for trend analysis. Need at least 2 data points.\\n';\n          return response;\n        }\n\n        // Extract values based on metric type\n        let values: number[] = [];\n        let unit = '';\n\n        switch (args.metric) {\n          case 'execution-times':\n            values = relevantData\n              .filter(dp => (dp.data as any).performance?.averageExecutionTime)\n              .map(dp => (dp.data as any).performance.averageExecutionTime);\n            unit = 'ms';\n            break;\n          case 'success-rates':\n            values = relevantData\n              .filter(dp => (dp.data as any).executions)\n              .map(\n                dp =>\n                  ((dp.data as any).executions.successful / (dp.data as any).executions.total) * 100\n              );\n            unit = '%';\n            break;\n          case 'resource-usage':\n            values = relevantData\n              .filter(dp => (dp.data as any).system?.cpu?.totalUsage)\n              .map(dp => (dp.data as any).system.cpu.totalUsage);\n            unit = '%';\n            break;\n          case 'throughput':\n            values = relevantData\n              .filter(dp => (dp.data as any).performance?.throughput)\n              .map(dp => (dp.data as any).performance.throughput);\n            unit = 'executions/min';\n            break;\n        }\n\n        if (values.length < 2) {\n          response += `No sufficient ${args.metric} data found for analysis.\\n`;\n          return response;\n        }\n\n        // Calculate trend\n        const trend = calculateTrend(values);\n        const firstValue = values[0];\n        const lastValue = values[values.length - 1];\n        const changePercent = ((lastValue - firstValue) / firstValue) * 100;\n\n        // Calculate statistics\n        const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const variance =\n          values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / values.length;\n        const standardDeviation = Math.sqrt(variance);\n\n        response += `**\uD83D\uDCCA Trend Analysis Results:**\\n`;\n        response += `\u2022 Trend Direction: ${trend === 'increasing' ? '\uD83D\uDCC8 Increasing' : trend === 'decreasing' ? '\uD83D\uDCC9 Decreasing' : '\u27A1\uFE0F Stable'}\\n`;\n        response += `\u2022 Overall Change: ${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%\\n`;\n        response += `\u2022 Average Value: ${average.toFixed(2)}${unit}\\n`;\n        response += `\u2022 Min Value: ${min.toFixed(2)}${unit}\\n`;\n        response += `\u2022 Max Value: ${max.toFixed(2)}${unit}\\n`;\n        response += `\u2022 Standard Deviation: ${standardDeviation.toFixed(2)}${unit}\\n\\n`;\n\n        // Volatility assessment\n        const volatilityPercent = (standardDeviation / average) * 100;\n        response += `**\uD83D\uDCCA Volatility Assessment:**\\n`;\n        if (volatilityPercent < 10) {\n          response += `\u2022 \uD83D\uDFE2 Low volatility (${volatilityPercent.toFixed(1)}%) - Stable performance\\n`;\n        } else if (volatilityPercent < 25) {\n          response += `\u2022 \uD83D\uDFE1 Moderate volatility (${volatilityPercent.toFixed(1)}%) - Some fluctuation\\n`;\n        } else {\n          response += `\u2022 \uD83D\uDD34 High volatility (${volatilityPercent.toFixed(1)}%) - Unstable performance\\n`;\n        }\n\n        // Simple forecasting if requested\n        if (args.includeForecasting && values.length >= 5) {\n          // Simple linear regression for forecasting\n          const n = values.length;\n          const x = Array.from({ length: n }, (_, i) => i);\n          const sumX = x.reduce((sum, val) => sum + val, 0);\n          const sumY = values.reduce((sum, val) => sum + val, 0);\n          const sumXY = x.reduce((sum, val, i) => sum + val * values[i], 0);\n          const sumXX = x.reduce((sum, val) => sum + val * val, 0);\n\n          const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n          const intercept = (sumY - slope * sumX) / n;\n\n          const nextValue = slope * n + intercept;\n          const futureValue = slope * (n + 5) + intercept; // 5 periods ahead\n\n          response += `\\n**\uD83D\uDD2E Forecast (Simple Linear Projection):**\\n`;\n          response += `\u2022 Next Expected Value: ${nextValue.toFixed(2)}${unit}\\n`;\n          response += `\u2022 5 Periods Ahead: ${futureValue.toFixed(2)}${unit}\\n`;\n          response += `\u2022 Trend Slope: ${slope > 0 ? '+' : ''}${slope.toFixed(4)}${unit}/period\\n`;\n\n          response += `\\n*Note: Forecasting is based on simple linear regression and should be used as guidance only.*\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to analyze trends: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ae3c54b7dfd32ba739c77f90897971ac109e653f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14upbp3753 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14upbp3753();
import { z } from 'zod';
import { UserError } from 'fastmcp';
import { MonitoringClient } from '../client/monitoringClient.js';
// Zod schemas for validation
const MetricsQuerySchema =
/* istanbul ignore next */
(cov_14upbp3753().s[0]++, z.object({
  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),
  includeWorkflows: z.boolean().default(true),
  includeSystem: z.boolean().default(true),
  workflowId: z.string().optional(),
  format: z.enum(['summary', 'detailed', 'raw']).default('summary')
}));
const PerformanceAnalysisSchema =
/* istanbul ignore next */
(cov_14upbp3753().s[1]++, z.object({
  analysisType: z.enum(['execution-times', 'resource-usage', 'error-rates', 'throughput']).default('execution-times'),
  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),
  workflowId: z.string().optional(),
  includeRecommendations: z.boolean().default(true),
  threshold: z.number().optional()
}));
const BenchmarkTestSchema =
/* istanbul ignore next */
(cov_14upbp3753().s[2]++, z.object({
  testType: z.enum(['api-response', 'workflow-execution', 'resource-load', 'concurrent-executions']).default('api-response'),
  duration: z.number().min(10).max(300).default(60),
  // seconds
  concurrency: z.number().min(1).max(20).default(1),
  workflowId: z.string().optional(),
  includeDetails: z.boolean().default(true)
}));
const AlertsConfigSchema =
/* istanbul ignore next */
(cov_14upbp3753().s[3]++, z.object({
  type: z.enum(['create', 'update', 'delete', 'list']).default('list'),
  alertId: z.string().optional(),
  configuration: z.object({
    name: z.string().optional(),
    metric: z.enum(['cpu-usage', 'memory-usage', 'disk-usage', 'execution-time', 'error-rate', 'response-time']).optional(),
    threshold: z.number().optional(),
    severity: z.enum(['low', 'medium', 'high', 'critical']).optional(),
    enabled: z.boolean().optional()
  }).optional()
}));
const ReportGenerationSchema =
/* istanbul ignore next */
(cov_14upbp3753().s[4]++, z.object({
  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),
  includeWorkflows: z.boolean().default(true),
  includeRecommendations: z.boolean().default(true),
  includeCharts: z.boolean().default(false),
  format: z.enum(['summary', 'detailed', 'executive']).default('summary'),
  workflowFilter: z.array(z.string()).optional()
}));
const TrendAnalysisSchema =
/* istanbul ignore next */
(cov_14upbp3753().s[5]++, z.object({
  metric: z.enum(['execution-times', 'success-rates', 'resource-usage', 'throughput']).default('execution-times'),
  timeRange: z.enum(['24h', '7d', '30d', '90d']).default('7d'),
  workflowId: z.string().optional(),
  includeForecasting: z.boolean().default(false)
}));
// Global monitoring client
let monitoringClient =
/* istanbul ignore next */
(cov_14upbp3753().s[6]++, null);
// Performance data storage (in-memory for this implementation)
const performanceData =
/* istanbul ignore next */
(cov_14upbp3753().s[7]++, []);
const performanceAlerts =
/* istanbul ignore next */
(cov_14upbp3753().s[8]++, []);
// Initialize monitoring client
/* istanbul ignore next */
cov_14upbp3753().s[9]++;
const getMonitoringClient = getClient => {
  /* istanbul ignore next */
  cov_14upbp3753().f[0]++;
  cov_14upbp3753().s[10]++;
  if (!monitoringClient) {
    /* istanbul ignore next */
    cov_14upbp3753().b[0][0]++;
    const client =
    /* istanbul ignore next */
    (cov_14upbp3753().s[11]++, getClient());
    /* istanbul ignore next */
    cov_14upbp3753().s[12]++;
    if (!client) {
      /* istanbul ignore next */
      cov_14upbp3753().b[1][0]++;
      cov_14upbp3753().s[13]++;
      throw new UserError('N8n client not available');
    } else
    /* istanbul ignore next */
    {
      cov_14upbp3753().b[1][1]++;
    }
    const baseUrl =
    /* istanbul ignore next */
    (cov_14upbp3753().s[14]++,
    /* istanbul ignore next */
    (cov_14upbp3753().b[2][0]++, client.baseUrl) ||
    /* istanbul ignore next */
    (cov_14upbp3753().b[2][1]++, process.env.N8N_BASE_URL) ||
    /* istanbul ignore next */
    (cov_14upbp3753().b[2][2]++, 'http://localhost:5678'));
    const apiKey =
    /* istanbul ignore next */
    (cov_14upbp3753().s[15]++,
    /* istanbul ignore next */
    (cov_14upbp3753().b[3][0]++, client.apiKey) ||
    /* istanbul ignore next */
    (cov_14upbp3753().b[3][1]++, process.env.N8N_API_KEY) ||
    /* istanbul ignore next */
    (cov_14upbp3753().b[3][2]++, ''));
    /* istanbul ignore next */
    cov_14upbp3753().s[16]++;
    monitoringClient = new MonitoringClient(client, baseUrl, apiKey);
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[0][1]++;
  }
  cov_14upbp3753().s[17]++;
  return monitoringClient;
};
// Helper functions
/* istanbul ignore next */
cov_14upbp3753().s[18]++;
const formatDuration = ms => {
  /* istanbul ignore next */
  cov_14upbp3753().f[1]++;
  cov_14upbp3753().s[19]++;
  if (ms < 1000) {
    /* istanbul ignore next */
    cov_14upbp3753().b[4][0]++;
    cov_14upbp3753().s[20]++;
    return `${ms}ms`;
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[4][1]++;
  }
  cov_14upbp3753().s[21]++;
  if (ms < 60000) {
    /* istanbul ignore next */
    cov_14upbp3753().b[5][0]++;
    cov_14upbp3753().s[22]++;
    return `${(ms / 1000).toFixed(2)}s`;
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[5][1]++;
  }
  cov_14upbp3753().s[23]++;
  return `${(ms / 60000).toFixed(2)}m`;
};
/* istanbul ignore next */
cov_14upbp3753().s[24]++;
const formatPercentage = value => {
  /* istanbul ignore next */
  cov_14upbp3753().f[2]++;
  cov_14upbp3753().s[25]++;
  return `${value.toFixed(2)}%`;
};
/* istanbul ignore next */
cov_14upbp3753().s[26]++;
const formatBytes = bytes => {
  /* istanbul ignore next */
  cov_14upbp3753().f[3]++;
  cov_14upbp3753().s[27]++;
  if (bytes === 0) {
    /* istanbul ignore next */
    cov_14upbp3753().b[6][0]++;
    cov_14upbp3753().s[28]++;
    return '0 B';
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[6][1]++;
  }
  const k =
  /* istanbul ignore next */
  (cov_14upbp3753().s[29]++, 1024);
  const sizes =
  /* istanbul ignore next */
  (cov_14upbp3753().s[30]++, ['B', 'KB', 'MB', 'GB', 'TB']);
  const i =
  /* istanbul ignore next */
  (cov_14upbp3753().s[31]++, Math.floor(Math.log(bytes) / Math.log(k)));
  /* istanbul ignore next */
  cov_14upbp3753().s[32]++;
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
};
/* istanbul ignore next */
cov_14upbp3753().s[33]++;
const calculateTrend = values => {
  /* istanbul ignore next */
  cov_14upbp3753().f[4]++;
  cov_14upbp3753().s[34]++;
  if (values.length < 2) {
    /* istanbul ignore next */
    cov_14upbp3753().b[7][0]++;
    cov_14upbp3753().s[35]++;
    return 'stable';
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[7][1]++;
  }
  const firstHalf =
  /* istanbul ignore next */
  (cov_14upbp3753().s[36]++, values.slice(0, Math.floor(values.length / 2)));
  const secondHalf =
  /* istanbul ignore next */
  (cov_14upbp3753().s[37]++, values.slice(Math.floor(values.length / 2)));
  const firstAvg =
  /* istanbul ignore next */
  (cov_14upbp3753().s[38]++, firstHalf.reduce((sum, val) => {
    /* istanbul ignore next */
    cov_14upbp3753().f[5]++;
    cov_14upbp3753().s[39]++;
    return sum + val;
  }, 0) / firstHalf.length);
  const secondAvg =
  /* istanbul ignore next */
  (cov_14upbp3753().s[40]++, secondHalf.reduce((sum, val) => {
    /* istanbul ignore next */
    cov_14upbp3753().f[6]++;
    cov_14upbp3753().s[41]++;
    return sum + val;
  }, 0) / secondHalf.length);
  const changePercent =
  /* istanbul ignore next */
  (cov_14upbp3753().s[42]++, (secondAvg - firstAvg) / firstAvg * 100);
  /* istanbul ignore next */
  cov_14upbp3753().s[43]++;
  if (Math.abs(changePercent) < 5) {
    /* istanbul ignore next */
    cov_14upbp3753().b[8][0]++;
    cov_14upbp3753().s[44]++;
    return 'stable';
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[8][1]++;
  }
  cov_14upbp3753().s[45]++;
  return changePercent > 0 ?
  /* istanbul ignore next */
  (cov_14upbp3753().b[9][0]++, 'increasing') :
  /* istanbul ignore next */
  (cov_14upbp3753().b[9][1]++, 'decreasing');
};
/* istanbul ignore next */
cov_14upbp3753().s[46]++;
const generateRecommendations = metrics => {
  /* istanbul ignore next */
  cov_14upbp3753().f[7]++;
  const recommendations =
  /* istanbul ignore next */
  (cov_14upbp3753().s[47]++, []);
  /* istanbul ignore next */
  cov_14upbp3753().s[48]++;
  if (metrics.performance?.errorRate > 10) {
    /* istanbul ignore next */
    cov_14upbp3753().b[10][0]++;
    cov_14upbp3753().s[49]++;
    recommendations.push('High error rate detected - review failing workflows and fix common issues');
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[10][1]++;
  }
  cov_14upbp3753().s[50]++;
  if (metrics.performance?.averageExecutionTime > 60000) {
    /* istanbul ignore next */
    cov_14upbp3753().b[11][0]++;
    cov_14upbp3753().s[51]++;
    recommendations.push('Long execution times detected - consider optimizing slow workflows');
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[11][1]++;
  }
  cov_14upbp3753().s[52]++;
  if (metrics.system?.memory?.utilization > 85) {
    /* istanbul ignore next */
    cov_14upbp3753().b[12][0]++;
    cov_14upbp3753().s[53]++;
    recommendations.push('High memory usage - consider increasing available memory or optimizing workflows');
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[12][1]++;
  }
  cov_14upbp3753().s[54]++;
  if (metrics.system?.cpu?.totalUsage > 80) {
    /* istanbul ignore next */
    cov_14upbp3753().b[13][0]++;
    cov_14upbp3753().s[55]++;
    recommendations.push('High CPU usage - check for resource-intensive workflows');
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[13][1]++;
  }
  cov_14upbp3753().s[56]++;
  if (metrics.workflows?.inactive > metrics.workflows?.active) {
    /* istanbul ignore next */
    cov_14upbp3753().b[14][0]++;
    cov_14upbp3753().s[57]++;
    recommendations.push('Many inactive workflows - consider cleanup or activation based on business needs');
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[14][1]++;
  }
  cov_14upbp3753().s[58]++;
  return recommendations;
};
// Store performance data point
/* istanbul ignore next */
cov_14upbp3753().s[59]++;
const storeDataPoint = (type, data, tags =
/* istanbul ignore next */
(cov_14upbp3753().b[15][0]++, {})) => {
  /* istanbul ignore next */
  cov_14upbp3753().f[8]++;
  const dataPoint =
  /* istanbul ignore next */
  (cov_14upbp3753().s[60]++, {
    timestamp: new Date().toISOString(),
    metricType: type,
    data,
    tags
  });
  /* istanbul ignore next */
  cov_14upbp3753().s[61]++;
  performanceData.push(dataPoint);
  // Keep only last 10000 data points to prevent memory issues
  /* istanbul ignore next */
  cov_14upbp3753().s[62]++;
  if (performanceData.length > 10000) {
    /* istanbul ignore next */
    cov_14upbp3753().b[16][0]++;
    cov_14upbp3753().s[63]++;
    performanceData.shift();
  } else
  /* istanbul ignore next */
  {
    cov_14upbp3753().b[16][1]++;
  }
};
// Tool registration function
export function createPerformanceMetricsTools(getClient, server) {
  /* istanbul ignore next */
  cov_14upbp3753().f[9]++;
  cov_14upbp3753().s[64]++;
  // Get performance metrics tool
  server.addTool({
    name: 'get-performance-metrics',
    description: 'Collect and analyze performance metrics from n8n instance',
    parameters: MetricsQuerySchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_14upbp3753().f[10]++;
      cov_14upbp3753().s[65]++;
      try {
        const monitoringClient =
        /* istanbul ignore next */
        (cov_14upbp3753().s[66]++, getMonitoringClient(getClient));
        const metrics =
        /* istanbul ignore next */
        (cov_14upbp3753().s[67]++, await monitoringClient.getMetrics());
        // Store the data point
        /* istanbul ignore next */
        cov_14upbp3753().s[68]++;
        storeDataPoint('performance', metrics, {
          timeRange: args.timeRange,
          format: args.format
        });
        /* istanbul ignore next */
        cov_14upbp3753().s[69]++;
        if (args.format === 'raw') {
          /* istanbul ignore next */
          cov_14upbp3753().b[17][0]++;
          cov_14upbp3753().s[70]++;
          return {
            success: true,
            data: metrics,
            timestamp: metrics.timestamp
          };
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[17][1]++;
        }
        let response =
        /* istanbul ignore next */
        (cov_14upbp3753().s[71]++, `📊 **Performance Metrics Report**\n\n`);
        /* istanbul ignore next */
        cov_14upbp3753().s[72]++;
        response += `**Generated:** ${new Date(metrics.timestamp).toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[73]++;
        response += `**Time Range:** ${args.timeRange}\n\n`;
        // Execution metrics
        /* istanbul ignore next */
        cov_14upbp3753().s[74]++;
        response += `**⚡ Execution Metrics:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[75]++;
        response += `• Total Executions: ${metrics.executions.total}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[76]++;
        response += `• Successful: ${metrics.executions.successful} (${formatPercentage(metrics.executions.successful / metrics.executions.total * 100)})\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[77]++;
        response += `• Failed: ${metrics.executions.failed} (${formatPercentage(metrics.executions.failed / metrics.executions.total * 100)})\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[78]++;
        response += `• Currently Running: ${metrics.executions.running}\n`;
        // Workflow metrics
        /* istanbul ignore next */
        cov_14upbp3753().s[79]++;
        if (args.includeWorkflows) {
          /* istanbul ignore next */
          cov_14upbp3753().b[18][0]++;
          cov_14upbp3753().s[80]++;
          response += `\n**🔄 Workflow Metrics:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[81]++;
          response += `• Total Workflows: ${metrics.workflows.total}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[82]++;
          response += `• Active: ${metrics.workflows.active}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[83]++;
          response += `• Inactive: ${metrics.workflows.inactive}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[84]++;
          if (metrics.workflows.withIssues > 0) {
            /* istanbul ignore next */
            cov_14upbp3753().b[19][0]++;
            cov_14upbp3753().s[85]++;
            response += `• With Issues: ${metrics.workflows.withIssues}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[19][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[18][1]++;
        }
        // Performance metrics
        cov_14upbp3753().s[86]++;
        response += `\n**🚀 Performance:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[87]++;
        response += `• Average Execution Time: ${formatDuration(metrics.performance.averageExecutionTime)}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[88]++;
        response += `• Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[89]++;
        response += `• Error Rate: ${formatPercentage(metrics.performance.errorRate)}\n`;
        // System metrics
        /* istanbul ignore next */
        cov_14upbp3753().s[90]++;
        if (args.includeSystem) {
          /* istanbul ignore next */
          cov_14upbp3753().b[20][0]++;
          cov_14upbp3753().s[91]++;
          response += `\n**💻 System Resources:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[92]++;
          response += `• CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[93]++;
          response += `• Memory Usage: ${formatPercentage(metrics.system.memory.utilization)} (${formatBytes(metrics.system.memory.usedMemory)})\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[94]++;
          response += `• Process Memory: ${formatBytes(metrics.system.memory.processMemory.rss)} RSS\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[95]++;
          if (metrics.system.disk.totalSpace > 0) {
            /* istanbul ignore next */
            cov_14upbp3753().b[21][0]++;
            cov_14upbp3753().s[96]++;
            response += `• Disk Usage: ${formatPercentage(metrics.system.disk.utilization)}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[21][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[20][1]++;
        }
        cov_14upbp3753().s[97]++;
        if (args.format === 'detailed') {
          /* istanbul ignore next */
          cov_14upbp3753().b[22][0]++;
          cov_14upbp3753().s[98]++;
          // Add more detailed information
          response += `\n**📈 Detailed Metrics:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[99]++;
          response += `• CPU Cores: ${metrics.system.cpu.coreCount}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[100]++;
          response += `• Process Heap: ${formatBytes(metrics.system.memory.processMemory.heapUsed)} / ${formatBytes(metrics.system.memory.processMemory.heapTotal)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[101]++;
          response += `• System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[22][1]++;
        }
        cov_14upbp3753().s[102]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_14upbp3753().s[103]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_14upbp3753().b[23][0]++;
          cov_14upbp3753().s[104]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[23][1]++;
        }
        cov_14upbp3753().s[105]++;
        throw new UserError(`Failed to get performance metrics: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[24][0]++, error.message) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[24][1]++, 'Unknown error')}`);
      }
    }
  });
  // Performance analysis tool
  /* istanbul ignore next */
  cov_14upbp3753().s[106]++;
  server.addTool({
    name: 'analyze-performance',
    description: 'Perform detailed performance analysis with insights and recommendations',
    parameters: PerformanceAnalysisSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_14upbp3753().f[11]++;
      cov_14upbp3753().s[107]++;
      try {
        const client =
        /* istanbul ignore next */
        (cov_14upbp3753().s[108]++, getClient());
        /* istanbul ignore next */
        cov_14upbp3753().s[109]++;
        if (!client) {
          /* istanbul ignore next */
          cov_14upbp3753().b[25][0]++;
          cov_14upbp3753().s[110]++;
          throw new UserError('N8n client not initialized');
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[25][1]++;
        }
        // Get executions for analysis
        const executionsResponse =
        /* istanbul ignore next */
        (cov_14upbp3753().s[111]++, await client.getExecutions({
          limit: 100
        }));
        // Extract data from API response wrapper and filter by workflowId if specified
        let executions =
        /* istanbul ignore next */
        (cov_14upbp3753().s[112]++, executionsResponse.data);
        /* istanbul ignore next */
        cov_14upbp3753().s[113]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_14upbp3753().b[26][0]++;
          cov_14upbp3753().s[114]++;
          executions = executions.filter(e => {
            /* istanbul ignore next */
            cov_14upbp3753().f[12]++;
            cov_14upbp3753().s[115]++;
            return e.workflowId === args.workflowId;
          });
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[26][1]++;
        }
        let response =
        /* istanbul ignore next */
        (cov_14upbp3753().s[116]++, `🔍 **Performance Analysis: ${args.analysisType}**\n\n`);
        /* istanbul ignore next */
        cov_14upbp3753().s[117]++;
        switch (args.analysisType) {
          case 'execution-times':
            /* istanbul ignore next */
            cov_14upbp3753().b[27][0]++;
            {
              const executionTimes =
              /* istanbul ignore next */
              (cov_14upbp3753().s[118]++, executions.filter(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[13]++;
                cov_14upbp3753().s[119]++;
                return /* istanbul ignore next */(cov_14upbp3753().b[28][0]++, e.finished) &&
                /* istanbul ignore next */
                (cov_14upbp3753().b[28][1]++, e.startedAt) &&
                /* istanbul ignore next */
                (cov_14upbp3753().b[28][2]++, e.stoppedAt);
              }).map(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[14]++;
                cov_14upbp3753().s[120]++;
                return {
                  duration: new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime(),
                  workflowId:
                  /* istanbul ignore next */
                  (cov_14upbp3753().b[29][0]++, e.workflowId) ||
                  /* istanbul ignore next */
                  (cov_14upbp3753().b[29][1]++, 'unknown'),
                  status: e.stoppedAt ?
                  /* istanbul ignore next */
                  (cov_14upbp3753().b[30][0]++, 'failed') :
                  /* istanbul ignore next */
                  (cov_14upbp3753().b[30][1]++, 'success')
                };
              }));
              /* istanbul ignore next */
              cov_14upbp3753().s[121]++;
              if (executionTimes.length === 0) {
                /* istanbul ignore next */
                cov_14upbp3753().b[31][0]++;
                cov_14upbp3753().s[122]++;
                response += 'No completed executions found for analysis.\n';
                /* istanbul ignore next */
                cov_14upbp3753().s[123]++;
                break;
              } else
              /* istanbul ignore next */
              {
                cov_14upbp3753().b[31][1]++;
              }
              const avgTime =
              /* istanbul ignore next */
              (cov_14upbp3753().s[124]++, executionTimes.reduce((sum, e) => {
                /* istanbul ignore next */
                cov_14upbp3753().f[15]++;
                cov_14upbp3753().s[125]++;
                return sum + e.duration;
              }, 0) / executionTimes.length);
              const minTime =
              /* istanbul ignore next */
              (cov_14upbp3753().s[126]++, Math.min(...executionTimes.map(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[16]++;
                cov_14upbp3753().s[127]++;
                return e.duration;
              })));
              const maxTime =
              /* istanbul ignore next */
              (cov_14upbp3753().s[128]++, Math.max(...executionTimes.map(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[17]++;
                cov_14upbp3753().s[129]++;
                return e.duration;
              })));
              const medianTime =
              /* istanbul ignore next */
              (cov_14upbp3753().s[130]++,
              /* istanbul ignore next */
              (cov_14upbp3753().b[32][0]++, executionTimes.sort((a, b) => {
                /* istanbul ignore next */
                cov_14upbp3753().f[18]++;
                cov_14upbp3753().s[131]++;
                return a.duration - b.duration;
              })[Math.floor(executionTimes.length / 2)]?.duration) ||
              /* istanbul ignore next */
              (cov_14upbp3753().b[32][1]++, 0));
              /* istanbul ignore next */
              cov_14upbp3753().s[132]++;
              response += `**📊 Execution Time Analysis (${executionTimes.length} executions):**\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[133]++;
              response += `• Average: ${formatDuration(avgTime)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[134]++;
              response += `• Median: ${formatDuration(medianTime)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[135]++;
              response += `• Min: ${formatDuration(minTime)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[136]++;
              response += `• Max: ${formatDuration(maxTime)}\n`;
              // Identify slow executions
              const slowThreshold =
              /* istanbul ignore next */
              (cov_14upbp3753().s[137]++,
              /* istanbul ignore next */
              (cov_14upbp3753().b[33][0]++, args.threshold) ||
              /* istanbul ignore next */
              (cov_14upbp3753().b[33][1]++, avgTime * 2));
              const slowExecutions =
              /* istanbul ignore next */
              (cov_14upbp3753().s[138]++, executionTimes.filter(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[19]++;
                cov_14upbp3753().s[139]++;
                return e.duration > slowThreshold;
              }));
              /* istanbul ignore next */
              cov_14upbp3753().s[140]++;
              if (slowExecutions.length > 0) {
                /* istanbul ignore next */
                cov_14upbp3753().b[34][0]++;
                cov_14upbp3753().s[141]++;
                response += `\n⚠️ **Slow Executions (>${formatDuration(slowThreshold)}):** ${slowExecutions.length}\n`;
              } else
              /* istanbul ignore next */
              {
                cov_14upbp3753().b[34][1]++;
              }
              cov_14upbp3753().s[142]++;
              break;
            }
          case 'error-rates':
            /* istanbul ignore next */
            cov_14upbp3753().b[27][1]++;
            {
              const totalExecs =
              /* istanbul ignore next */
              (cov_14upbp3753().s[143]++, executions.length);
              const failedExecs =
              /* istanbul ignore next */
              (cov_14upbp3753().s[144]++, executions.filter(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[20]++;
                cov_14upbp3753().s[145]++;
                return /* istanbul ignore next */(cov_14upbp3753().b[35][0]++, e.finished) &&
                /* istanbul ignore next */
                (cov_14upbp3753().b[35][1]++, e.stoppedAt);
              }).length);
              const errorRate =
              /* istanbul ignore next */
              (cov_14upbp3753().s[146]++, totalExecs > 0 ?
              /* istanbul ignore next */
              (cov_14upbp3753().b[36][0]++, failedExecs / totalExecs * 100) :
              /* istanbul ignore next */
              (cov_14upbp3753().b[36][1]++, 0));
              /* istanbul ignore next */
              cov_14upbp3753().s[147]++;
              response += `**❌ Error Rate Analysis:**\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[148]++;
              response += `• Total Executions: ${totalExecs}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[149]++;
              response += `• Failed Executions: ${failedExecs}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[150]++;
              response += `• Error Rate: ${formatPercentage(errorRate)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[151]++;
              if (errorRate > 10) {
                /* istanbul ignore next */
                cov_14upbp3753().b[37][0]++;
                cov_14upbp3753().s[152]++;
                response += `\n🔴 **High error rate detected!**\n`;
              } else {
                /* istanbul ignore next */
                cov_14upbp3753().b[37][1]++;
                cov_14upbp3753().s[153]++;
                if (errorRate > 5) {
                  /* istanbul ignore next */
                  cov_14upbp3753().b[38][0]++;
                  cov_14upbp3753().s[154]++;
                  response += `\n🟡 **Moderate error rate - monitor closely**\n`;
                } else {
                  /* istanbul ignore next */
                  cov_14upbp3753().b[38][1]++;
                  cov_14upbp3753().s[155]++;
                  response += `\n✅ **Error rate within acceptable range**\n`;
                }
              }
              /* istanbul ignore next */
              cov_14upbp3753().s[156]++;
              break;
            }
          case 'throughput':
            /* istanbul ignore next */
            cov_14upbp3753().b[27][2]++;
            {
              const now =
              /* istanbul ignore next */
              (cov_14upbp3753().s[157]++, new Date());
              const hourAgo =
              /* istanbul ignore next */
              (cov_14upbp3753().s[158]++, new Date(now.getTime() - 60 * 60 * 1000));
              const recentExecs =
              /* istanbul ignore next */
              (cov_14upbp3753().s[159]++, executions.filter(e => {
                /* istanbul ignore next */
                cov_14upbp3753().f[21]++;
                cov_14upbp3753().s[160]++;
                return new Date(e.startedAt) > hourAgo;
              }));
              const throughputPerHour =
              /* istanbul ignore next */
              (cov_14upbp3753().s[161]++, recentExecs.length);
              const throughputPerMinute =
              /* istanbul ignore next */
              (cov_14upbp3753().s[162]++, throughputPerHour / 60);
              /* istanbul ignore next */
              cov_14upbp3753().s[163]++;
              response += `**🚀 Throughput Analysis:**\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[164]++;
              response += `• Executions (last hour): ${throughputPerHour}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[165]++;
              response += `• Throughput: ${throughputPerMinute.toFixed(2)} executions/minute\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[166]++;
              response += `• Peak capacity utilization: ${formatPercentage(throughputPerMinute / 10 * 100)}\n`; // Assuming 10/min peak
              /* istanbul ignore next */
              cov_14upbp3753().s[167]++;
              break;
            }
          case 'resource-usage':
            /* istanbul ignore next */
            cov_14upbp3753().b[27][3]++;
            {
              const monitoringClient =
              /* istanbul ignore next */
              (cov_14upbp3753().s[168]++, getMonitoringClient(getClient));
              const systemUsage =
              /* istanbul ignore next */
              (cov_14upbp3753().s[169]++, monitoringClient.getSystemResourceUsage());
              /* istanbul ignore next */
              cov_14upbp3753().s[170]++;
              response += `**💻 Resource Usage Analysis:**\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[171]++;
              response += `• CPU: ${formatPercentage(systemUsage.cpu.totalUsage)} (${systemUsage.cpu.coreCount} cores)\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[172]++;
              response += `• Memory: ${formatPercentage(systemUsage.memory.utilization)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[173]++;
              response += `• Process Memory: ${formatBytes(systemUsage.memory.processMemory.rss)}\n`;
              /* istanbul ignore next */
              cov_14upbp3753().s[174]++;
              break;
            }
        }
        // Add recommendations if requested
        /* istanbul ignore next */
        cov_14upbp3753().s[175]++;
        if (args.includeRecommendations) {
          /* istanbul ignore next */
          cov_14upbp3753().b[39][0]++;
          const monitoringClient =
          /* istanbul ignore next */
          (cov_14upbp3753().s[176]++, getMonitoringClient(getClient));
          const metrics =
          /* istanbul ignore next */
          (cov_14upbp3753().s[177]++, await monitoringClient.getMetrics());
          const recommendations =
          /* istanbul ignore next */
          (cov_14upbp3753().s[178]++, generateRecommendations(metrics));
          /* istanbul ignore next */
          cov_14upbp3753().s[179]++;
          if (recommendations.length > 0) {
            /* istanbul ignore next */
            cov_14upbp3753().b[40][0]++;
            cov_14upbp3753().s[180]++;
            response += `\n**💡 Recommendations:**\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[181]++;
            recommendations.forEach(rec => {
              /* istanbul ignore next */
              cov_14upbp3753().f[22]++;
              cov_14upbp3753().s[182]++;
              response += `• ${rec}\n`;
            });
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[40][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[39][1]++;
        }
        cov_14upbp3753().s[183]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_14upbp3753().s[184]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_14upbp3753().b[41][0]++;
          cov_14upbp3753().s[185]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[41][1]++;
        }
        cov_14upbp3753().s[186]++;
        throw new UserError(`Failed to analyze performance: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[42][0]++, error.message) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[42][1]++, 'Unknown error')}`);
      }
    }
  });
  // Benchmark test tool
  /* istanbul ignore next */
  cov_14upbp3753().s[187]++;
  server.addTool({
    name: 'run-benchmark',
    description: 'Run performance benchmarks to test system capabilities',
    parameters: BenchmarkTestSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_14upbp3753().f[23]++;
      cov_14upbp3753().s[188]++;
      try {
        const monitoringClient =
        /* istanbul ignore next */
        (cov_14upbp3753().s[189]++, getMonitoringClient(getClient));
        let response =
        /* istanbul ignore next */
        (cov_14upbp3753().s[190]++, `🏁 **Benchmark Test: ${args.testType}**\n\n`);
        /* istanbul ignore next */
        cov_14upbp3753().s[191]++;
        response += `**Configuration:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[192]++;
        response += `• Duration: ${args.duration}s\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[193]++;
        response += `• Concurrency: ${args.concurrency}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[194]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_14upbp3753().b[43][0]++;
          cov_14upbp3753().s[195]++;
          response += `• Workflow ID: ${args.workflowId}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[43][1]++;
        }
        cov_14upbp3753().s[196]++;
        response += `\n`;
        const results =
        /* istanbul ignore next */
        (cov_14upbp3753().s[197]++, {
          totalRequests: 0,
          successfulRequests: 0,
          failedRequests: 0,
          responseTimes: [],
          errors: []
        });
        const startTime =
        /* istanbul ignore next */
        (cov_14upbp3753().s[198]++, Date.now());
        const endTime =
        /* istanbul ignore next */
        (cov_14upbp3753().s[199]++, startTime + args.duration * 1000);
        /* istanbul ignore next */
        cov_14upbp3753().s[200]++;
        response += `**Running benchmark...**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[201]++;
        try {
          /* istanbul ignore next */
          cov_14upbp3753().s[202]++;
          switch (args.testType) {
            case 'api-response':
              /* istanbul ignore next */
              cov_14upbp3753().b[44][0]++;
              {
                /* istanbul ignore next */
                cov_14upbp3753().s[203]++;
                // Test API response times
                while (Date.now() < endTime) {
                  const promises =
                  /* istanbul ignore next */
                  (cov_14upbp3753().s[204]++, []);
                  /* istanbul ignore next */
                  cov_14upbp3753().s[205]++;
                  for (let i =
                  /* istanbul ignore next */
                  (cov_14upbp3753().s[206]++, 0); i < args.concurrency; i++) {
                    /* istanbul ignore next */
                    cov_14upbp3753().s[207]++;
                    promises.push(monitoringClient.testConnectivity().then(result => {
                      /* istanbul ignore next */
                      cov_14upbp3753().f[24]++;
                      cov_14upbp3753().s[208]++;
                      results.totalRequests++;
                      /* istanbul ignore next */
                      cov_14upbp3753().s[209]++;
                      if (result.success) {
                        /* istanbul ignore next */
                        cov_14upbp3753().b[45][0]++;
                        cov_14upbp3753().s[210]++;
                        results.successfulRequests++;
                        /* istanbul ignore next */
                        cov_14upbp3753().s[211]++;
                        results.responseTimes.push(result.responseTime);
                      } else {
                        /* istanbul ignore next */
                        cov_14upbp3753().b[45][1]++;
                        cov_14upbp3753().s[212]++;
                        results.failedRequests++;
                        /* istanbul ignore next */
                        cov_14upbp3753().s[213]++;
                        if (result.error) {
                          /* istanbul ignore next */
                          cov_14upbp3753().b[46][0]++;
                          cov_14upbp3753().s[214]++;
                          results.errors.push(result.error);
                        } else
                        /* istanbul ignore next */
                        {
                          cov_14upbp3753().b[46][1]++;
                        }
                      }
                    }).catch(error => {
                      /* istanbul ignore next */
                      cov_14upbp3753().f[25]++;
                      cov_14upbp3753().s[215]++;
                      results.totalRequests++;
                      /* istanbul ignore next */
                      cov_14upbp3753().s[216]++;
                      results.failedRequests++;
                      /* istanbul ignore next */
                      cov_14upbp3753().s[217]++;
                      results.errors.push(error.message);
                    }));
                  }
                  /* istanbul ignore next */
                  cov_14upbp3753().s[218]++;
                  await Promise.all(promises);
                  // Small delay between batches
                  /* istanbul ignore next */
                  cov_14upbp3753().s[219]++;
                  await new Promise(resolve => {
                    /* istanbul ignore next */
                    cov_14upbp3753().f[26]++;
                    cov_14upbp3753().s[220]++;
                    return setTimeout(resolve, 100);
                  });
                }
                /* istanbul ignore next */
                cov_14upbp3753().s[221]++;
                break;
              }
            case 'workflow-execution':
              /* istanbul ignore next */
              cov_14upbp3753().b[44][1]++;
              {
                /* istanbul ignore next */
                cov_14upbp3753().s[222]++;
                if (!args.workflowId) {
                  /* istanbul ignore next */
                  cov_14upbp3753().b[47][0]++;
                  cov_14upbp3753().s[223]++;
                  throw new UserError('Workflow ID is required for workflow execution benchmark');
                } else
                /* istanbul ignore next */
                {
                  cov_14upbp3753().b[47][1]++;
                }
                // This would trigger workflow executions for benchmarking
                // For now, simulate the benchmark
                cov_14upbp3753().s[224]++;
                response += `*Note: Workflow execution benchmarking requires careful consideration of side effects.*\n`;
                /* istanbul ignore next */
                cov_14upbp3753().s[225]++;
                results.totalRequests = 10;
                /* istanbul ignore next */
                cov_14upbp3753().s[226]++;
                results.successfulRequests = 8;
                /* istanbul ignore next */
                cov_14upbp3753().s[227]++;
                results.failedRequests = 2;
                /* istanbul ignore next */
                cov_14upbp3753().s[228]++;
                results.responseTimes = [1200, 1350, 1100, 1450, 1300, 1250, 1400, 1150];
                /* istanbul ignore next */
                cov_14upbp3753().s[229]++;
                break;
              }
            case 'resource-load':
              /* istanbul ignore next */
              cov_14upbp3753().b[44][2]++;
              {
                // Monitor resource usage during load
                const loadStartUsage =
                /* istanbul ignore next */
                (cov_14upbp3753().s[230]++, monitoringClient.getSystemResourceUsage());
                // Simulate some load by making multiple API calls
                /* istanbul ignore next */
                cov_14upbp3753().s[231]++;
                while (Date.now() < endTime) {
                  const promises =
                  /* istanbul ignore next */
                  (cov_14upbp3753().s[232]++, []);
                  /* istanbul ignore next */
                  cov_14upbp3753().s[233]++;
                  for (let i =
                  /* istanbul ignore next */
                  (cov_14upbp3753().s[234]++, 0); i < args.concurrency * 2; i++) {
                    /* istanbul ignore next */
                    cov_14upbp3753().s[235]++;
                    promises.push(monitoringClient.testConnectivity().then(result => {
                      /* istanbul ignore next */
                      cov_14upbp3753().f[27]++;
                      cov_14upbp3753().s[236]++;
                      results.totalRequests++;
                      /* istanbul ignore next */
                      cov_14upbp3753().s[237]++;
                      if (result.success) {
                        /* istanbul ignore next */
                        cov_14upbp3753().b[48][0]++;
                        cov_14upbp3753().s[238]++;
                        results.successfulRequests++;
                      } else {
                        /* istanbul ignore next */
                        cov_14upbp3753().b[48][1]++;
                        cov_14upbp3753().s[239]++;
                        results.failedRequests++;
                      }
                    }));
                  }
                  /* istanbul ignore next */
                  cov_14upbp3753().s[240]++;
                  await Promise.all(promises);
                  /* istanbul ignore next */
                  cov_14upbp3753().s[241]++;
                  await new Promise(resolve => {
                    /* istanbul ignore next */
                    cov_14upbp3753().f[28]++;
                    cov_14upbp3753().s[242]++;
                    return setTimeout(resolve, 200);
                  });
                }
                const loadEndUsage =
                /* istanbul ignore next */
                (cov_14upbp3753().s[243]++, monitoringClient.getSystemResourceUsage());
                /* istanbul ignore next */
                cov_14upbp3753().s[244]++;
                response += `**Resource Impact:**\n`;
                /* istanbul ignore next */
                cov_14upbp3753().s[245]++;
                response += `• CPU Change: ${(loadEndUsage.cpu.totalUsage - loadStartUsage.cpu.totalUsage).toFixed(1)}%\n`;
                /* istanbul ignore next */
                cov_14upbp3753().s[246]++;
                response += `• Memory Change: ${formatBytes(loadEndUsage.memory.processMemory.rss - loadStartUsage.memory.processMemory.rss)}\n`;
                /* istanbul ignore next */
                cov_14upbp3753().s[247]++;
                break;
              }
            default:
              /* istanbul ignore next */
              cov_14upbp3753().b[44][3]++;
              cov_14upbp3753().s[248]++;
              throw new UserError(`Unsupported benchmark type: ${args.testType}`);
          }
          // Calculate statistics
          const actualDuration =
          /* istanbul ignore next */
          (cov_14upbp3753().s[249]++, (Date.now() - startTime) / 1000);
          const requestsPerSecond =
          /* istanbul ignore next */
          (cov_14upbp3753().s[250]++, results.totalRequests / actualDuration);
          const successRate =
          /* istanbul ignore next */
          (cov_14upbp3753().s[251]++, results.totalRequests > 0 ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[49][0]++, results.successfulRequests / results.totalRequests * 100) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[49][1]++, 0));
          /* istanbul ignore next */
          cov_14upbp3753().s[252]++;
          response += `\n**📊 Results:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[253]++;
          response += `• Duration: ${actualDuration.toFixed(1)}s\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[254]++;
          response += `• Total Requests: ${results.totalRequests}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[255]++;
          response += `• Successful: ${results.successfulRequests}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[256]++;
          response += `• Failed: ${results.failedRequests}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[257]++;
          response += `• Success Rate: ${formatPercentage(successRate)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[258]++;
          response += `• Requests/second: ${requestsPerSecond.toFixed(2)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[259]++;
          if (results.responseTimes.length > 0) {
            /* istanbul ignore next */
            cov_14upbp3753().b[50][0]++;
            const avgResponseTime =
            /* istanbul ignore next */
            (cov_14upbp3753().s[260]++, results.responseTimes.reduce((sum, time) => {
              /* istanbul ignore next */
              cov_14upbp3753().f[29]++;
              cov_14upbp3753().s[261]++;
              return sum + time;
            }, 0) / results.responseTimes.length);
            const minResponseTime =
            /* istanbul ignore next */
            (cov_14upbp3753().s[262]++, Math.min(...results.responseTimes));
            const maxResponseTime =
            /* istanbul ignore next */
            (cov_14upbp3753().s[263]++, Math.max(...results.responseTimes));
            const sortedTimes =
            /* istanbul ignore next */
            (cov_14upbp3753().s[264]++, results.responseTimes.sort((a, b) => {
              /* istanbul ignore next */
              cov_14upbp3753().f[30]++;
              cov_14upbp3753().s[265]++;
              return a - b;
            }));
            const p95ResponseTime =
            /* istanbul ignore next */
            (cov_14upbp3753().s[266]++, sortedTimes[Math.floor(sortedTimes.length * 0.95)]);
            /* istanbul ignore next */
            cov_14upbp3753().s[267]++;
            response += `\n**⏱️ Response Times:**\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[268]++;
            response += `• Average: ${avgResponseTime.toFixed(0)}ms\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[269]++;
            response += `• Min: ${minResponseTime}ms\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[270]++;
            response += `• Max: ${maxResponseTime}ms\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[271]++;
            response += `• 95th Percentile: ${p95ResponseTime}ms\n`;
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[50][1]++;
          }
          cov_14upbp3753().s[272]++;
          if (
          /* istanbul ignore next */
          (cov_14upbp3753().b[52][0]++, args.includeDetails) &&
          /* istanbul ignore next */
          (cov_14upbp3753().b[52][1]++, results.errors.length > 0)) {
            /* istanbul ignore next */
            cov_14upbp3753().b[51][0]++;
            cov_14upbp3753().s[273]++;
            response += `\n**❌ Errors (first 5):**\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[274]++;
            results.errors.slice(0, 5).forEach(error => {
              /* istanbul ignore next */
              cov_14upbp3753().f[31]++;
              cov_14upbp3753().s[275]++;
              response += `• ${error}\n`;
            });
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[51][1]++;
          }
          // Store benchmark results
          cov_14upbp3753().s[276]++;
          storeDataPoint('performance', {
            benchmarkType: args.testType,
            duration: actualDuration,
            totalRequests: results.totalRequests,
            successRate,
            requestsPerSecond,
            averageResponseTime: results.responseTimes.length > 0 ?
            /* istanbul ignore next */
            (cov_14upbp3753().b[53][0]++, results.responseTimes.reduce((sum, time) => {
              /* istanbul ignore next */
              cov_14upbp3753().f[32]++;
              cov_14upbp3753().s[277]++;
              return sum + time;
            }, 0) / results.responseTimes.length) :
            /* istanbul ignore next */
            (cov_14upbp3753().b[53][1]++, 0)
          }, {
            testType: args.testType,
            concurrency: args.concurrency.toString()
          });
        } catch (error) {
          /* istanbul ignore next */
          cov_14upbp3753().s[278]++;
          response += `\n❌ **Benchmark failed:** ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[54][0]++, error.message) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[54][1]++, 'Unknown error')}\n`;
        }
        /* istanbul ignore next */
        cov_14upbp3753().s[279]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_14upbp3753().s[280]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_14upbp3753().b[55][0]++;
          cov_14upbp3753().s[281]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[55][1]++;
        }
        cov_14upbp3753().s[282]++;
        throw new UserError(`Failed to run benchmark: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[56][0]++, error.message) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[56][1]++, 'Unknown error')}`);
      }
    }
  });
  // Generate performance report tool
  /* istanbul ignore next */
  cov_14upbp3753().s[283]++;
  server.addTool({
    name: 'generate-performance-report',
    description: 'Generate comprehensive performance report with trends and recommendations',
    parameters: ReportGenerationSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_14upbp3753().f[33]++;
      cov_14upbp3753().s[284]++;
      try {
        const monitoringClient =
        /* istanbul ignore next */
        (cov_14upbp3753().s[285]++, getMonitoringClient(getClient));
        const metrics =
        /* istanbul ignore next */
        (cov_14upbp3753().s[286]++, await monitoringClient.getMetrics());
        let response =
        /* istanbul ignore next */
        (cov_14upbp3753().s[287]++, `📊 **Performance Report**\n\n`);
        /* istanbul ignore next */
        cov_14upbp3753().s[288]++;
        response += `**Generated:** ${new Date().toLocaleString()}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[289]++;
        response += `**Time Range:** ${args.timeRange}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[290]++;
        response += `**Report Type:** ${args.format}\n\n`;
        // Executive Summary
        /* istanbul ignore next */
        cov_14upbp3753().s[291]++;
        response += `**📈 Executive Summary:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[292]++;
        response += `• System Status: ${metrics.executions.failed / metrics.executions.total < 0.05 ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[57][0]++, '🟢 Healthy') :
        /* istanbul ignore next */
        (cov_14upbp3753().b[57][1]++, metrics.executions.failed / metrics.executions.total < 0.15 ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[58][0]++, '🟡 Attention Needed') :
        /* istanbul ignore next */
        (cov_14upbp3753().b[58][1]++, '🔴 Critical'))}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[293]++;
        response += `• Total Executions: ${metrics.executions.total}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[294]++;
        response += `• Success Rate: ${formatPercentage(metrics.executions.successful / metrics.executions.total * 100)}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[295]++;
        response += `• Average Response Time: ${formatDuration(metrics.performance.averageExecutionTime)}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[296]++;
        response += `• System Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\n\n`;
        // Detailed metrics based on format
        /* istanbul ignore next */
        cov_14upbp3753().s[297]++;
        if (
        /* istanbul ignore next */
        (cov_14upbp3753().b[60][0]++, args.format === 'detailed') ||
        /* istanbul ignore next */
        (cov_14upbp3753().b[60][1]++, args.format === 'executive')) {
          /* istanbul ignore next */
          cov_14upbp3753().b[59][0]++;
          cov_14upbp3753().s[298]++;
          response += `**🔄 Workflow Performance:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[299]++;
          response += `• Active Workflows: ${metrics.workflows.active}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[300]++;
          response += `• Inactive Workflows: ${metrics.workflows.inactive}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[301]++;
          response += `• Workflows with Issues: ${metrics.workflows.withIssues}\n\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[302]++;
          response += `**💻 Resource Utilization:**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[303]++;
          response += `• CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[304]++;
          response += `• Memory Usage: ${formatPercentage(metrics.system.memory.utilization)}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[305]++;
          response += `• System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[59][1]++;
        }
        // Trend Analysis
        const recentDataPoints =
        /* istanbul ignore next */
        (cov_14upbp3753().s[306]++, performanceData.filter(dp => {
          /* istanbul ignore next */
          cov_14upbp3753().f[34]++;
          const hoursAgo =
          /* istanbul ignore next */
          (cov_14upbp3753().s[307]++, args.timeRange === '1h' ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[61][0]++, 1) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[61][1]++, args.timeRange === '6h' ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[62][0]++, 6) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[62][1]++, args.timeRange === '24h' ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[63][0]++, 24) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[63][1]++, args.timeRange === '7d' ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[64][0]++, 168) :
          /* istanbul ignore next */
          (cov_14upbp3753().b[64][1]++, 720)))));
          /* istanbul ignore next */
          cov_14upbp3753().s[308]++;
          return new Date(dp.timestamp) > new Date(Date.now() - hoursAgo * 60 * 60 * 1000);
        }));
        /* istanbul ignore next */
        cov_14upbp3753().s[309]++;
        if (recentDataPoints.length > 1) {
          /* istanbul ignore next */
          cov_14upbp3753().b[65][0]++;
          const executionTimes =
          /* istanbul ignore next */
          (cov_14upbp3753().s[310]++, recentDataPoints.filter(dp => {
            /* istanbul ignore next */
            cov_14upbp3753().f[35]++;
            cov_14upbp3753().s[311]++;
            return dp.data.performance?.averageExecutionTime;
          }).map(dp => {
            /* istanbul ignore next */
            cov_14upbp3753().f[36]++;
            cov_14upbp3753().s[312]++;
            return dp.data.performance.averageExecutionTime;
          }));
          /* istanbul ignore next */
          cov_14upbp3753().s[313]++;
          if (executionTimes.length > 1) {
            /* istanbul ignore next */
            cov_14upbp3753().b[66][0]++;
            const trend =
            /* istanbul ignore next */
            (cov_14upbp3753().s[314]++, calculateTrend(executionTimes));
            /* istanbul ignore next */
            cov_14upbp3753().s[315]++;
            response += `**📊 Performance Trends:**\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[316]++;
            response += `• Execution Time Trend: ${trend === 'increasing' ?
            /* istanbul ignore next */
            (cov_14upbp3753().b[67][0]++, '📈 Increasing') :
            /* istanbul ignore next */
            (cov_14upbp3753().b[67][1]++, trend === 'decreasing' ?
            /* istanbul ignore next */
            (cov_14upbp3753().b[68][0]++, '📉 Decreasing') :
            /* istanbul ignore next */
            (cov_14upbp3753().b[68][1]++, '➡️ Stable'))}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[66][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[65][1]++;
        }
        // Recommendations
        cov_14upbp3753().s[317]++;
        if (args.includeRecommendations) {
          /* istanbul ignore next */
          cov_14upbp3753().b[69][0]++;
          const recommendations =
          /* istanbul ignore next */
          (cov_14upbp3753().s[318]++, generateRecommendations(metrics));
          /* istanbul ignore next */
          cov_14upbp3753().s[319]++;
          if (recommendations.length > 0) {
            /* istanbul ignore next */
            cov_14upbp3753().b[70][0]++;
            cov_14upbp3753().s[320]++;
            response += `\n**💡 Recommendations:**\n`;
            /* istanbul ignore next */
            cov_14upbp3753().s[321]++;
            recommendations.forEach(rec => {
              /* istanbul ignore next */
              cov_14upbp3753().f[37]++;
              cov_14upbp3753().s[322]++;
              response += `• ${rec}\n`;
            });
          } else
          /* istanbul ignore next */
          {
            cov_14upbp3753().b[70][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[69][1]++;
        }
        // Store the report generation
        cov_14upbp3753().s[323]++;
        storeDataPoint('performance', {
          reportType: 'performance-report',
          timeRange: args.timeRange,
          format: args.format,
          metricsSnapshot: metrics
        }, {
          reportFormat: args.format,
          timeRange: args.timeRange
        });
        /* istanbul ignore next */
        cov_14upbp3753().s[324]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_14upbp3753().s[325]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_14upbp3753().b[71][0]++;
          cov_14upbp3753().s[326]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[71][1]++;
        }
        cov_14upbp3753().s[327]++;
        throw new UserError(`Failed to generate performance report: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[72][0]++, error.message) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[72][1]++, 'Unknown error')}`);
      }
    }
  });
  // Trend analysis tool
  /* istanbul ignore next */
  cov_14upbp3753().s[328]++;
  server.addTool({
    name: 'analyze-trends',
    description: 'Analyze performance trends over time with forecasting capabilities',
    parameters: TrendAnalysisSchema,
    handler: async args => {
      /* istanbul ignore next */
      cov_14upbp3753().f[38]++;
      cov_14upbp3753().s[329]++;
      try {
        const hoursBack =
        /* istanbul ignore next */
        (cov_14upbp3753().s[330]++, args.timeRange === '24h' ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[73][0]++, 24) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[73][1]++, args.timeRange === '7d' ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[74][0]++, 168) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[74][1]++, args.timeRange === '30d' ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[75][0]++, 720) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[75][1]++, 2160))));
        const cutoffTime =
        /* istanbul ignore next */
        (cov_14upbp3753().s[331]++, new Date(Date.now() - hoursBack * 60 * 60 * 1000));
        const relevantData =
        /* istanbul ignore next */
        (cov_14upbp3753().s[332]++, performanceData.filter(dp => {
          /* istanbul ignore next */
          cov_14upbp3753().f[39]++;
          cov_14upbp3753().s[333]++;
          return /* istanbul ignore next */(cov_14upbp3753().b[76][0]++, new Date(dp.timestamp) > cutoffTime) &&
          /* istanbul ignore next */
          (cov_14upbp3753().b[76][1]++, dp.data[args.metric] !== undefined);
        }));
        let response =
        /* istanbul ignore next */
        (cov_14upbp3753().s[334]++, `📈 **Trend Analysis: ${args.metric}**\n\n`);
        /* istanbul ignore next */
        cov_14upbp3753().s[335]++;
        response += `**Time Range:** ${args.timeRange}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[336]++;
        response += `**Data Points:** ${relevantData.length}\n\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[337]++;
        if (relevantData.length < 2) {
          /* istanbul ignore next */
          cov_14upbp3753().b[77][0]++;
          cov_14upbp3753().s[338]++;
          response += 'Insufficient data for trend analysis. Need at least 2 data points.\n';
          /* istanbul ignore next */
          cov_14upbp3753().s[339]++;
          return response;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[77][1]++;
        }
        // Extract values based on metric type
        let values =
        /* istanbul ignore next */
        (cov_14upbp3753().s[340]++, []);
        let unit =
        /* istanbul ignore next */
        (cov_14upbp3753().s[341]++, '');
        /* istanbul ignore next */
        cov_14upbp3753().s[342]++;
        switch (args.metric) {
          case 'execution-times':
            /* istanbul ignore next */
            cov_14upbp3753().b[78][0]++;
            cov_14upbp3753().s[343]++;
            values = relevantData.filter(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[40]++;
              cov_14upbp3753().s[344]++;
              return dp.data.performance?.averageExecutionTime;
            }).map(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[41]++;
              cov_14upbp3753().s[345]++;
              return dp.data.performance.averageExecutionTime;
            });
            /* istanbul ignore next */
            cov_14upbp3753().s[346]++;
            unit = 'ms';
            /* istanbul ignore next */
            cov_14upbp3753().s[347]++;
            break;
          case 'success-rates':
            /* istanbul ignore next */
            cov_14upbp3753().b[78][1]++;
            cov_14upbp3753().s[348]++;
            values = relevantData.filter(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[42]++;
              cov_14upbp3753().s[349]++;
              return dp.data.executions;
            }).map(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[43]++;
              cov_14upbp3753().s[350]++;
              return dp.data.executions.successful / dp.data.executions.total * 100;
            });
            /* istanbul ignore next */
            cov_14upbp3753().s[351]++;
            unit = '%';
            /* istanbul ignore next */
            cov_14upbp3753().s[352]++;
            break;
          case 'resource-usage':
            /* istanbul ignore next */
            cov_14upbp3753().b[78][2]++;
            cov_14upbp3753().s[353]++;
            values = relevantData.filter(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[44]++;
              cov_14upbp3753().s[354]++;
              return dp.data.system?.cpu?.totalUsage;
            }).map(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[45]++;
              cov_14upbp3753().s[355]++;
              return dp.data.system.cpu.totalUsage;
            });
            /* istanbul ignore next */
            cov_14upbp3753().s[356]++;
            unit = '%';
            /* istanbul ignore next */
            cov_14upbp3753().s[357]++;
            break;
          case 'throughput':
            /* istanbul ignore next */
            cov_14upbp3753().b[78][3]++;
            cov_14upbp3753().s[358]++;
            values = relevantData.filter(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[46]++;
              cov_14upbp3753().s[359]++;
              return dp.data.performance?.throughput;
            }).map(dp => {
              /* istanbul ignore next */
              cov_14upbp3753().f[47]++;
              cov_14upbp3753().s[360]++;
              return dp.data.performance.throughput;
            });
            /* istanbul ignore next */
            cov_14upbp3753().s[361]++;
            unit = 'executions/min';
            /* istanbul ignore next */
            cov_14upbp3753().s[362]++;
            break;
        }
        /* istanbul ignore next */
        cov_14upbp3753().s[363]++;
        if (values.length < 2) {
          /* istanbul ignore next */
          cov_14upbp3753().b[79][0]++;
          cov_14upbp3753().s[364]++;
          response += `No sufficient ${args.metric} data found for analysis.\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[365]++;
          return response;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[79][1]++;
        }
        // Calculate trend
        const trend =
        /* istanbul ignore next */
        (cov_14upbp3753().s[366]++, calculateTrend(values));
        const firstValue =
        /* istanbul ignore next */
        (cov_14upbp3753().s[367]++, values[0]);
        const lastValue =
        /* istanbul ignore next */
        (cov_14upbp3753().s[368]++, values[values.length - 1]);
        const changePercent =
        /* istanbul ignore next */
        (cov_14upbp3753().s[369]++, (lastValue - firstValue) / firstValue * 100);
        // Calculate statistics
        const average =
        /* istanbul ignore next */
        (cov_14upbp3753().s[370]++, values.reduce((sum, val) => {
          /* istanbul ignore next */
          cov_14upbp3753().f[48]++;
          cov_14upbp3753().s[371]++;
          return sum + val;
        }, 0) / values.length);
        const min =
        /* istanbul ignore next */
        (cov_14upbp3753().s[372]++, Math.min(...values));
        const max =
        /* istanbul ignore next */
        (cov_14upbp3753().s[373]++, Math.max(...values));
        const variance =
        /* istanbul ignore next */
        (cov_14upbp3753().s[374]++, values.reduce((sum, val) => {
          /* istanbul ignore next */
          cov_14upbp3753().f[49]++;
          cov_14upbp3753().s[375]++;
          return sum + Math.pow(val - average, 2);
        }, 0) / values.length);
        const standardDeviation =
        /* istanbul ignore next */
        (cov_14upbp3753().s[376]++, Math.sqrt(variance));
        /* istanbul ignore next */
        cov_14upbp3753().s[377]++;
        response += `**📊 Trend Analysis Results:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[378]++;
        response += `• Trend Direction: ${trend === 'increasing' ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[80][0]++, '📈 Increasing') :
        /* istanbul ignore next */
        (cov_14upbp3753().b[80][1]++, trend === 'decreasing' ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[81][0]++, '📉 Decreasing') :
        /* istanbul ignore next */
        (cov_14upbp3753().b[81][1]++, '➡️ Stable'))}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[379]++;
        response += `• Overall Change: ${changePercent > 0 ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[82][0]++, '+') :
        /* istanbul ignore next */
        (cov_14upbp3753().b[82][1]++, '')}${changePercent.toFixed(2)}%\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[380]++;
        response += `• Average Value: ${average.toFixed(2)}${unit}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[381]++;
        response += `• Min Value: ${min.toFixed(2)}${unit}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[382]++;
        response += `• Max Value: ${max.toFixed(2)}${unit}\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[383]++;
        response += `• Standard Deviation: ${standardDeviation.toFixed(2)}${unit}\n\n`;
        // Volatility assessment
        const volatilityPercent =
        /* istanbul ignore next */
        (cov_14upbp3753().s[384]++, standardDeviation / average * 100);
        /* istanbul ignore next */
        cov_14upbp3753().s[385]++;
        response += `**📊 Volatility Assessment:**\n`;
        /* istanbul ignore next */
        cov_14upbp3753().s[386]++;
        if (volatilityPercent < 10) {
          /* istanbul ignore next */
          cov_14upbp3753().b[83][0]++;
          cov_14upbp3753().s[387]++;
          response += `• 🟢 Low volatility (${volatilityPercent.toFixed(1)}%) - Stable performance\n`;
        } else {
          /* istanbul ignore next */
          cov_14upbp3753().b[83][1]++;
          cov_14upbp3753().s[388]++;
          if (volatilityPercent < 25) {
            /* istanbul ignore next */
            cov_14upbp3753().b[84][0]++;
            cov_14upbp3753().s[389]++;
            response += `• 🟡 Moderate volatility (${volatilityPercent.toFixed(1)}%) - Some fluctuation\n`;
          } else {
            /* istanbul ignore next */
            cov_14upbp3753().b[84][1]++;
            cov_14upbp3753().s[390]++;
            response += `• 🔴 High volatility (${volatilityPercent.toFixed(1)}%) - Unstable performance\n`;
          }
        }
        // Simple forecasting if requested
        /* istanbul ignore next */
        cov_14upbp3753().s[391]++;
        if (
        /* istanbul ignore next */
        (cov_14upbp3753().b[86][0]++, args.includeForecasting) &&
        /* istanbul ignore next */
        (cov_14upbp3753().b[86][1]++, values.length >= 5)) {
          /* istanbul ignore next */
          cov_14upbp3753().b[85][0]++;
          // Simple linear regression for forecasting
          const n =
          /* istanbul ignore next */
          (cov_14upbp3753().s[392]++, values.length);
          const x =
          /* istanbul ignore next */
          (cov_14upbp3753().s[393]++, Array.from({
            length: n
          }, (_, i) => {
            /* istanbul ignore next */
            cov_14upbp3753().f[50]++;
            cov_14upbp3753().s[394]++;
            return i;
          }));
          const sumX =
          /* istanbul ignore next */
          (cov_14upbp3753().s[395]++, x.reduce((sum, val) => {
            /* istanbul ignore next */
            cov_14upbp3753().f[51]++;
            cov_14upbp3753().s[396]++;
            return sum + val;
          }, 0));
          const sumY =
          /* istanbul ignore next */
          (cov_14upbp3753().s[397]++, values.reduce((sum, val) => {
            /* istanbul ignore next */
            cov_14upbp3753().f[52]++;
            cov_14upbp3753().s[398]++;
            return sum + val;
          }, 0));
          const sumXY =
          /* istanbul ignore next */
          (cov_14upbp3753().s[399]++, x.reduce((sum, val, i) => {
            /* istanbul ignore next */
            cov_14upbp3753().f[53]++;
            cov_14upbp3753().s[400]++;
            return sum + val * values[i];
          }, 0));
          const sumXX =
          /* istanbul ignore next */
          (cov_14upbp3753().s[401]++, x.reduce((sum, val) => {
            /* istanbul ignore next */
            cov_14upbp3753().f[54]++;
            cov_14upbp3753().s[402]++;
            return sum + val * val;
          }, 0));
          const slope =
          /* istanbul ignore next */
          (cov_14upbp3753().s[403]++, (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX));
          const intercept =
          /* istanbul ignore next */
          (cov_14upbp3753().s[404]++, (sumY - slope * sumX) / n);
          const nextValue =
          /* istanbul ignore next */
          (cov_14upbp3753().s[405]++, slope * n + intercept);
          const futureValue =
          /* istanbul ignore next */
          (cov_14upbp3753().s[406]++, slope * (n + 5) + intercept); // 5 periods ahead
          /* istanbul ignore next */
          cov_14upbp3753().s[407]++;
          response += `\n**🔮 Forecast (Simple Linear Projection):**\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[408]++;
          response += `• Next Expected Value: ${nextValue.toFixed(2)}${unit}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[409]++;
          response += `• 5 Periods Ahead: ${futureValue.toFixed(2)}${unit}\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[410]++;
          response += `• Trend Slope: ${slope > 0 ?
          /* istanbul ignore next */
          (cov_14upbp3753().b[87][0]++, '+') :
          /* istanbul ignore next */
          (cov_14upbp3753().b[87][1]++, '')}${slope.toFixed(4)}${unit}/period\n`;
          /* istanbul ignore next */
          cov_14upbp3753().s[411]++;
          response += `\n*Note: Forecasting is based on simple linear regression and should be used as guidance only.*\n`;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[85][1]++;
        }
        cov_14upbp3753().s[412]++;
        return response;
      } catch (error) {
        /* istanbul ignore next */
        cov_14upbp3753().s[413]++;
        if (error instanceof UserError) {
          /* istanbul ignore next */
          cov_14upbp3753().b[88][0]++;
          cov_14upbp3753().s[414]++;
          throw error;
        } else
        /* istanbul ignore next */
        {
          cov_14upbp3753().b[88][1]++;
        }
        cov_14upbp3753().s[415]++;
        throw new UserError(`Failed to analyze trends: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_14upbp3753().b[89][0]++, error.message) :
        /* istanbul ignore next */
        (cov_14upbp3753().b[89][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,