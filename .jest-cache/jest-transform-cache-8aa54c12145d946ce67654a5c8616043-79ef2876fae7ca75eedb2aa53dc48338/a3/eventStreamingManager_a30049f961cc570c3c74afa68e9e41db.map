{"version":3,"names":["cov_2mzz0wi3ov","actualCoverage","EventEmitter","N8nWebSocketClient","z","WorkflowExecutionStatusSchema","s","object","executionId","string","workflowId","status","enum","progress","number","min","max","optional","currentNode","startTime","endTime","error","data","any","NodeExecutionUpdateSchema","nodeId","nodeName","executionTime","inputData","outputData","ProgressUpdateSchema","currentNodeIndex","totalNodes","currentNodeName","estimatedTimeRemaining","EventStreamingManager","wsClient","config","activeExecutions","Map","executionHistory","metrics","eventBuffer","isStreaming","constructor","f","wsConfig","initializeMetrics","setupEventHandlers","startStreaming","connect","subscribeToExecutions","emit","timestamp","Date","toISOString","Error","b","message","stopStreaming","disconnect","getMetrics","subscribeToWorkflow","unsubscribeFromWorkflow","getExecutionStatus","get","getActiveExecutions","Array","from","values","getExecutionHistory","limit","slice","getConnectionStatus","isConnected","connectionState","getConnectionState","sendCommand","command","sendMessage","on","event","handleWorkflowEvent","heartbeat","type","bufferSize","push","length","shift","handleExecutionStarted","handleExecutionCompleted","handleNodeExecutionStarted","handleNodeExecutionCompleted","processedAt","executionStatus","set","totalExecutions","currentActiveExecutions","execution","enableProgressTracking","createProgressUpdate","activeExecution","completedExecution","delete","successfulExecutions","failedExecutions","getTime","updateAverageExecutionTime","nodeUpdate","nodeExecutionCounts","newExecutionTime","totalCompletedExecutions","averageExecutionTime","createEventStreamingManager","options","retryAttempts","enableMetrics","DEFAULT_STREAMING_CONFIG"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/eventStreamingManager.ts"],"sourcesContent":["/**\n * Event Streaming Manager for n8n Fork Integration\n *\n * Manages real-time event streaming for workflow execution updates,\n * progress monitoring, and bidirectional communication with n8n fork.\n */\n\nimport { EventEmitter } from 'events';\nimport { N8nWebSocketClient, WorkflowExecutionEvent, WebSocketConfig } from './websocketClient.js';\nimport { z } from 'zod';\n\n// Event streaming schemas\nexport const WorkflowExecutionStatusSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  status: z.enum(['running', 'success', 'error', 'waiting', 'canceled']),\n  progress: z.number().min(0).max(100).optional(),\n  currentNode: z.string().optional(),\n  startTime: z.string(),\n  endTime: z.string().optional(),\n  error: z.string().optional(),\n  data: z.any().optional(),\n});\n\nexport const NodeExecutionUpdateSchema = z.object({\n  executionId: z.string(),\n  nodeId: z.string(),\n  nodeName: z.string(),\n  status: z.enum(['running', 'success', 'error', 'waiting']),\n  startTime: z.string(),\n  endTime: z.string().optional(),\n  executionTime: z.number().optional(),\n  inputData: z.any().optional(),\n  outputData: z.any().optional(),\n  error: z.string().optional(),\n});\n\nexport const ProgressUpdateSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  progress: z.number().min(0).max(100),\n  currentNodeIndex: z.number(),\n  totalNodes: z.number(),\n  currentNodeName: z.string(),\n  estimatedTimeRemaining: z.number().optional(),\n});\n\nexport type WorkflowExecutionStatus = z.infer<typeof WorkflowExecutionStatusSchema>;\nexport type NodeExecutionUpdate = z.infer<typeof NodeExecutionUpdateSchema>;\nexport type ProgressUpdate = z.infer<typeof ProgressUpdateSchema>;\n\nexport interface EventStreamingConfig {\n  wsConfig: WebSocketConfig;\n  bufferSize: number;\n  retryAttempts: number;\n  enableProgressTracking: boolean;\n  enableMetrics: boolean;\n  eventFilters?: string[];\n}\n\nexport interface ExecutionMetrics {\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  averageExecutionTime: number;\n  currentActiveExecutions: number;\n  nodeExecutionCounts: Record<string, number>;\n}\n\n/**\n * Event Streaming Manager\n *\n * Coordinates real-time event streaming between n8n fork WebSocket\n * and MCP server event system.\n */\nexport class EventStreamingManager extends EventEmitter {\n  private wsClient: N8nWebSocketClient;\n  private config: EventStreamingConfig;\n  private activeExecutions: Map<string, WorkflowExecutionStatus> = new Map();\n  private executionHistory: WorkflowExecutionStatus[] = [];\n  private metrics: ExecutionMetrics;\n  private eventBuffer: WorkflowExecutionEvent[] = [];\n  private isStreaming: boolean = false;\n\n  constructor(config: EventStreamingConfig) {\n    super();\n    this.config = config;\n    this.wsClient = new N8nWebSocketClient(config.wsConfig);\n    this.metrics = this.initializeMetrics();\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Start event streaming\n   */\n  public async startStreaming(): Promise<void> {\n    try {\n      await this.wsClient.connect();\n      this.isStreaming = true;\n      \n      // Subscribe to all workflow execution events\n      await this.wsClient.subscribeToExecutions();\n      \n      this.emit('streamingStarted', {\n        timestamp: new Date().toISOString(),\n        config: this.config,\n      });\n\n    } catch (error) {\n      this.emit('streamingError', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Stop event streaming\n   */\n  public async stopStreaming(): Promise<void> {\n    this.isStreaming = false;\n    await this.wsClient.disconnect();\n    \n    this.emit('streamingStopped', {\n      timestamp: new Date().toISOString(),\n      metrics: this.getMetrics(),\n    });\n  }\n\n  /**\n   * Subscribe to specific workflow updates\n   */\n  public async subscribeToWorkflow(workflowId: string): Promise<void> {\n    await this.wsClient.subscribeToWorkflow(workflowId);\n    \n    this.emit('workflowSubscribed', {\n      workflowId,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Unsubscribe from workflow updates\n   */\n  public async unsubscribeFromWorkflow(workflowId: string): Promise<void> {\n    await this.wsClient.unsubscribeFromWorkflow(workflowId);\n    \n    this.emit('workflowUnsubscribed', {\n      workflowId,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Get current execution status\n   */\n  public getExecutionStatus(executionId: string): WorkflowExecutionStatus | null {\n    return this.activeExecutions.get(executionId) || null;\n  }\n\n  /**\n   * Get all active executions\n   */\n  public getActiveExecutions(): WorkflowExecutionStatus[] {\n    return Array.from(this.activeExecutions.values());\n  }\n\n  /**\n   * Get execution history\n   */\n  public getExecutionHistory(limit?: number): WorkflowExecutionStatus[] {\n    if (limit) {\n      return this.executionHistory.slice(-limit);\n    }\n    return [...this.executionHistory];\n  }\n\n  /**\n   * Get streaming metrics\n   */\n  public getMetrics(): ExecutionMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get connection status\n   */\n  public getConnectionStatus(): {\n    isConnected: boolean;\n    isStreaming: boolean;\n    connectionState: any;\n  } {\n    return {\n      isConnected: this.wsClient.isConnected(),\n      isStreaming: this.isStreaming,\n      connectionState: this.wsClient.getConnectionState(),\n    };\n  }\n\n  /**\n   * Send command to n8n fork\n   */\n  public async sendCommand(command: any): Promise<void> {\n    await this.wsClient.sendMessage(command);\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    this.wsClient.on('connected', () => {\n      this.emit('connected', {\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('disconnected', (data) => {\n      this.emit('disconnected', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('workflowEvent', (event: WorkflowExecutionEvent) => {\n      this.handleWorkflowEvent(event);\n    });\n\n    this.wsClient.on('heartbeat', (heartbeat) => {\n      this.emit('heartbeat', heartbeat);\n    });\n\n    this.wsClient.on('error', (error) => {\n      this.emit('error', {\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('reconnecting', (data) => {\n      this.emit('reconnecting', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('maxReconnectAttemptsReached', () => {\n      this.emit('maxReconnectAttemptsReached', {\n        timestamp: new Date().toISOString(),\n      });\n    });\n  }\n\n  /**\n   * Handle workflow execution events\n   */\n  private handleWorkflowEvent(event: WorkflowExecutionEvent): void {\n    try {\n      const { type, data } = event;\n      \n      // Buffer event if needed\n      if (this.config.bufferSize > 0) {\n        this.eventBuffer.push(event);\n        if (this.eventBuffer.length > this.config.bufferSize) {\n          this.eventBuffer.shift();\n        }\n      }\n\n      switch (type) {\n        case 'workflowExecutionStarted':\n          this.handleExecutionStarted(data);\n          break;\n          \n        case 'workflowExecutionCompleted':\n          this.handleExecutionCompleted(data);\n          break;\n          \n        case 'nodeExecutionStarted':\n          this.handleNodeExecutionStarted(data);\n          break;\n          \n        case 'nodeExecutionCompleted':\n          this.handleNodeExecutionCompleted(data);\n          break;\n      }\n\n      // Emit the processed event\n      this.emit('workflowEvent', {\n        ...event,\n        processedAt: new Date().toISOString(),\n      });\n\n    } catch (error) {\n      this.emit('eventProcessingError', {\n        event,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Handle workflow execution started\n   */\n  private handleExecutionStarted(data: any): void {\n    const executionStatus: WorkflowExecutionStatus = {\n      executionId: data.executionId,\n      workflowId: data.workflowId || 'unknown',\n      status: 'running',\n      progress: 0,\n      startTime: data.timestamp,\n    };\n\n    this.activeExecutions.set(data.executionId, executionStatus);\n    this.metrics.totalExecutions++;\n    this.metrics.currentActiveExecutions++;\n\n    this.emit('executionStarted', {\n      execution: executionStatus,\n      timestamp: new Date().toISOString(),\n    });\n\n    if (this.config.enableProgressTracking) {\n      this.emit('progressUpdate', this.createProgressUpdate(executionStatus));\n    }\n  }\n\n  /**\n   * Handle workflow execution completed\n   */\n  private handleExecutionCompleted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      const completedExecution: WorkflowExecutionStatus = {\n        ...activeExecution,\n        status: data.status === 'error' ? 'error' : 'success',\n        progress: 100,\n        endTime: data.timestamp,\n        error: data.error,\n        data: data.data,\n      };\n\n      // Move to history\n      this.executionHistory.push(completedExecution);\n      this.activeExecutions.delete(executionId);\n      \n      // Update metrics\n      if (completedExecution.status === 'success') {\n        this.metrics.successfulExecutions++;\n      } else {\n        this.metrics.failedExecutions++;\n      }\n      this.metrics.currentActiveExecutions--;\n\n      // Calculate execution time and update average\n      if (completedExecution.endTime) {\n        const executionTime = new Date(completedExecution.endTime).getTime() - \n                             new Date(completedExecution.startTime).getTime();\n        this.updateAverageExecutionTime(executionTime);\n      }\n\n      this.emit('executionCompleted', {\n        execution: completedExecution,\n        timestamp: new Date().toISOString(),\n      });\n\n      if (this.config.enableProgressTracking) {\n        this.emit('progressUpdate', this.createProgressUpdate(completedExecution));\n      }\n\n      // Trim history if it gets too large\n      if (this.executionHistory.length > 1000) {\n        this.executionHistory = this.executionHistory.slice(-500);\n      }\n    }\n  }\n\n  /**\n   * Handle node execution started\n   */\n  private handleNodeExecutionStarted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      activeExecution.currentNode = data.nodeName;\n      \n      const nodeUpdate: NodeExecutionUpdate = {\n        executionId,\n        nodeId: data.nodeId,\n        nodeName: data.nodeName,\n        status: 'running',\n        startTime: data.timestamp,\n      };\n\n      this.emit('nodeExecutionStarted', {\n        nodeUpdate,\n        execution: activeExecution,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Update node execution counts\n      this.metrics.nodeExecutionCounts[data.nodeName] = \n        (this.metrics.nodeExecutionCounts[data.nodeName] || 0) + 1;\n    }\n  }\n\n  /**\n   * Handle node execution completed\n   */\n  private handleNodeExecutionCompleted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      const nodeUpdate: NodeExecutionUpdate = {\n        executionId,\n        nodeId: data.nodeId,\n        nodeName: data.nodeName,\n        status: data.status === 'error' ? 'error' : 'success',\n        startTime: data.timestamp,\n        endTime: data.timestamp,\n        error: data.error,\n      };\n\n      this.emit('nodeExecutionCompleted', {\n        nodeUpdate,\n        execution: activeExecution,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Create progress update\n   */\n  private createProgressUpdate(execution: WorkflowExecutionStatus): ProgressUpdate {\n    return {\n      executionId: execution.executionId,\n      workflowId: execution.workflowId,\n      progress: execution.progress || 0,\n      currentNodeIndex: 0, // TODO: Calculate from workflow structure\n      totalNodes: 1, // TODO: Get from workflow definition\n      currentNodeName: execution.currentNode || 'Unknown',\n    };\n  }\n\n  /**\n   * Update average execution time\n   */\n  private updateAverageExecutionTime(newExecutionTime: number): void {\n    const totalCompletedExecutions = this.metrics.successfulExecutions + this.metrics.failedExecutions;\n    \n    if (totalCompletedExecutions === 1) {\n      this.metrics.averageExecutionTime = newExecutionTime;\n    } else {\n      this.metrics.averageExecutionTime = \n        (this.metrics.averageExecutionTime * (totalCompletedExecutions - 1) + newExecutionTime) / \n        totalCompletedExecutions;\n    }\n  }\n\n  /**\n   * Initialize metrics\n   */\n  private initializeMetrics(): ExecutionMetrics {\n    return {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      averageExecutionTime: 0,\n      currentActiveExecutions: 0,\n      nodeExecutionCounts: {},\n    };\n  }\n}\n\n/**\n * Create event streaming manager with default configuration\n */\nexport function createEventStreamingManager(\n  wsConfig: WebSocketConfig,\n  options: Partial<EventStreamingConfig> = {}\n): EventStreamingManager {\n  const config: EventStreamingConfig = {\n    wsConfig,\n    bufferSize: 100,\n    retryAttempts: 5,\n    enableProgressTracking: true,\n    enableMetrics: true,\n    ...options,\n  };\n\n  return new EventStreamingManager(config);\n}\n\n/**\n * Default event streaming configuration\n */\nexport const DEFAULT_STREAMING_CONFIG: Partial<EventStreamingConfig> = {\n  bufferSize: 100,\n  retryAttempts: 5,\n  enableProgressTracking: true,\n  enableMetrics: true,\n};"],"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","ignoreList":[]}