b7ba15504d6990769a0248f5ff77c5d4
/* istanbul ignore next */
function cov_2mzz0wi3ov() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/eventStreamingManager.ts";
  var hash = "073ab5c017dc0c29daa05802b172744ac1428dcd";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/eventStreamingManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 45
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "1": {
        start: {
          line: 22,
          column: 41
        },
        end: {
          line: 33,
          column: 2
        }
      },
      "2": {
        start: {
          line: 34,
          column: 36
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "3": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 32
        }
      },
      "4": {
        start: {
          line: 53,
          column: 23
        },
        end: {
          line: 53,
          column: 25
        }
      },
      "5": {
        start: {
          line: 55,
          column: 18
        },
        end: {
          line: 55,
          column: 20
        }
      },
      "6": {
        start: {
          line: 56,
          column: 18
        },
        end: {
          line: 56,
          column: 23
        }
      },
      "7": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 16
        }
      },
      "8": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 29
        }
      },
      "9": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 64
        }
      },
      "10": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 48
        }
      },
      "11": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 34
        }
      },
      "12": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "13": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 42
        }
      },
      "14": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 36
        }
      },
      "15": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 56
        }
      },
      "16": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "17": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 82,
          column: 15
        }
      },
      "18": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 24
        }
      },
      "19": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 33
        }
      },
      "20": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 91,
          column: 41
        }
      },
      "21": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 95,
          column: 11
        }
      },
      "22": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 60
        }
      },
      "23": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 105,
          column: 11
        }
      },
      "24": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 111,
          column: 64
        }
      },
      "25": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 115,
          column: 11
        }
      },
      "26": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 62
        }
      },
      "27": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 58
        }
      },
      "28": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "29": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 55
        }
      },
      "30": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 42
        }
      },
      "31": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 35
        }
      },
      "32": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 152,
          column: 10
        }
      },
      "33": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 49
        }
      },
      "34": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 168,
          column: 11
        }
      },
      "35": {
        start: {
          line: 165,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "36": {
        start: {
          line: 169,
          column: 8
        },
        end: {
          line: 174,
          column: 11
        }
      },
      "37": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 173,
          column: 15
        }
      },
      "38": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "39": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 44
        }
      },
      "40": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 11
        }
      },
      "41": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 46
        }
      },
      "42": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 186,
          column: 11
        }
      },
      "43": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 185,
          column: 15
        }
      },
      "44": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 192,
          column: 11
        }
      },
      "45": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 191,
          column: 15
        }
      },
      "46": {
        start: {
          line: 193,
          column: 8
        },
        end: {
          line: 197,
          column: 11
        }
      },
      "47": {
        start: {
          line: 194,
          column: 12
        },
        end: {
          line: 196,
          column: 15
        }
      },
      "48": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 238,
          column: 9
        }
      },
      "49": {
        start: {
          line: 204,
          column: 35
        },
        end: {
          line: 204,
          column: 40
        }
      },
      "50": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 211,
          column: 13
        }
      },
      "51": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 207,
          column: 45
        }
      },
      "52": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 210,
          column: 17
        }
      },
      "53": {
        start: {
          line: 209,
          column: 20
        },
        end: {
          line: 209,
          column: 45
        }
      },
      "54": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "55": {
        start: {
          line: 214,
          column: 20
        },
        end: {
          line: 214,
          column: 54
        }
      },
      "56": {
        start: {
          line: 215,
          column: 20
        },
        end: {
          line: 215,
          column: 26
        }
      },
      "57": {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 56
        }
      },
      "58": {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 218,
          column: 26
        }
      },
      "59": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 58
        }
      },
      "60": {
        start: {
          line: 221,
          column: 20
        },
        end: {
          line: 221,
          column: 26
        }
      },
      "61": {
        start: {
          line: 223,
          column: 20
        },
        end: {
          line: 223,
          column: 60
        }
      },
      "62": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 224,
          column: 26
        }
      },
      "63": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 230,
          column: 15
        }
      },
      "64": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 237,
          column: 15
        }
      },
      "65": {
        start: {
          line: 244,
          column: 32
        },
        end: {
          line: 250,
          column: 9
        }
      },
      "66": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 69
        }
      },
      "67": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 252,
          column: 39
        }
      },
      "68": {
        start: {
          line: 253,
          column: 8
        },
        end: {
          line: 253,
          column: 47
        }
      },
      "69": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 257,
          column: 11
        }
      },
      "70": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "71": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 84
        }
      },
      "72": {
        start: {
          line: 266,
          column: 28
        },
        end: {
          line: 266,
          column: 44
        }
      },
      "73": {
        start: {
          line: 267,
          column: 32
        },
        end: {
          line: 267,
          column: 70
        }
      },
      "74": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 305,
          column: 9
        }
      },
      "75": {
        start: {
          line: 269,
          column: 39
        },
        end: {
          line: 276,
          column: 13
        }
      },
      "76": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 278,
          column: 59
        }
      },
      "77": {
        start: {
          line: 279,
          column: 12
        },
        end: {
          line: 279,
          column: 54
        }
      },
      "78": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "79": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 282,
          column: 52
        }
      },
      "80": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 48
        }
      },
      "81": {
        start: {
          line: 287,
          column: 12
        },
        end: {
          line: 287,
          column: 51
        }
      },
      "82": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 293,
          column: 13
        }
      },
      "83": {
        start: {
          line: 290,
          column: 38
        },
        end: {
          line: 291,
          column: 68
        }
      },
      "84": {
        start: {
          line: 292,
          column: 16
        },
        end: {
          line: 292,
          column: 63
        }
      },
      "85": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 297,
          column: 15
        }
      },
      "86": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 300,
          column: 13
        }
      },
      "87": {
        start: {
          line: 299,
          column: 16
        },
        end: {
          line: 299,
          column: 91
        }
      },
      "88": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "89": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 74
        }
      },
      "90": {
        start: {
          line: 311,
          column: 28
        },
        end: {
          line: 311,
          column: 44
        }
      },
      "91": {
        start: {
          line: 312,
          column: 32
        },
        end: {
          line: 312,
          column: 70
        }
      },
      "92": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "93": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 56
        }
      },
      "94": {
        start: {
          line: 315,
          column: 31
        },
        end: {
          line: 321,
          column: 13
        }
      },
      "95": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 326,
          column: 15
        }
      },
      "96": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 329,
          column: 75
        }
      },
      "97": {
        start: {
          line: 336,
          column: 28
        },
        end: {
          line: 336,
          column: 44
        }
      },
      "98": {
        start: {
          line: 337,
          column: 32
        },
        end: {
          line: 337,
          column: 70
        }
      },
      "99": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 353,
          column: 9
        }
      },
      "100": {
        start: {
          line: 339,
          column: 31
        },
        end: {
          line: 347,
          column: 13
        }
      },
      "101": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 352,
          column: 15
        }
      },
      "102": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 366,
          column: 10
        }
      },
      "103": {
        start: {
          line: 372,
          column: 41
        },
        end: {
          line: 372,
          column: 106
        }
      },
      "104": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "105": {
        start: {
          line: 374,
          column: 12
        },
        end: {
          line: 374,
          column: 65
        }
      },
      "106": {
        start: {
          line: 377,
          column: 12
        },
        end: {
          line: 379,
          column: 45
        }
      },
      "107": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 393,
          column: 10
        }
      },
      "108": {
        start: {
          line: 400,
          column: 19
        },
        end: {
          line: 407,
          column: 5
        }
      },
      "109": {
        start: {
          line: 408,
          column: 4
        },
        end: {
          line: 408,
          column: 45
        }
      },
      "110": {
        start: {
          line: 413,
          column: 40
        },
        end: {
          line: 418,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 57,
            column: 5
          }
        },
        loc: {
          start: {
            line: 57,
            column: 24
          },
          end: {
            line: 63,
            column: 5
          }
        },
        line: 57
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 67,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        loc: {
          start: {
            line: 67,
            column: 27
          },
          end: {
            line: 85,
            column: 5
          }
        },
        line: 67
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 5
          }
        },
        loc: {
          start: {
            line: 89,
            column: 26
          },
          end: {
            line: 96,
            column: 5
          }
        },
        line: 89
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 5
          }
        },
        loc: {
          start: {
            line: 100,
            column: 42
          },
          end: {
            line: 106,
            column: 5
          }
        },
        line: 100
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 110,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        loc: {
          start: {
            line: 110,
            column: 46
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 110
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        loc: {
          start: {
            line: 120,
            column: 36
          },
          end: {
            line: 122,
            column: 5
          }
        },
        line: 120
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 126,
            column: 4
          },
          end: {
            line: 126,
            column: 5
          }
        },
        loc: {
          start: {
            line: 126,
            column: 26
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 126
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 31
          },
          end: {
            line: 137,
            column: 5
          }
        },
        line: 132
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 141,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        loc: {
          start: {
            line: 141,
            column: 17
          },
          end: {
            line: 143,
            column: 5
          }
        },
        line: 141
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 147,
            column: 5
          }
        },
        loc: {
          start: {
            line: 147,
            column: 26
          },
          end: {
            line: 153,
            column: 5
          }
        },
        line: 147
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        loc: {
          start: {
            line: 157,
            column: 31
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 157
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 25
          },
          end: {
            line: 198,
            column: 5
          }
        },
        line: 163
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 164,
            column: 38
          },
          end: {
            line: 164,
            column: 39
          }
        },
        loc: {
          start: {
            line: 164,
            column: 44
          },
          end: {
            line: 168,
            column: 9
          }
        },
        line: 164
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 169,
            column: 41
          },
          end: {
            line: 169,
            column: 42
          }
        },
        loc: {
          start: {
            line: 169,
            column: 51
          },
          end: {
            line: 174,
            column: 9
          }
        },
        line: 169
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 175,
            column: 42
          },
          end: {
            line: 175,
            column: 43
          }
        },
        loc: {
          start: {
            line: 175,
            column: 53
          },
          end: {
            line: 177,
            column: 9
          }
        },
        line: 175
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 178,
            column: 38
          },
          end: {
            line: 178,
            column: 39
          }
        },
        loc: {
          start: {
            line: 178,
            column: 53
          },
          end: {
            line: 180,
            column: 9
          }
        },
        line: 178
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 181,
            column: 34
          },
          end: {
            line: 181,
            column: 35
          }
        },
        loc: {
          start: {
            line: 181,
            column: 45
          },
          end: {
            line: 186,
            column: 9
          }
        },
        line: 181
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 187,
            column: 41
          },
          end: {
            line: 187,
            column: 42
          }
        },
        loc: {
          start: {
            line: 187,
            column: 51
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 187
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 193,
            column: 56
          },
          end: {
            line: 193,
            column: 57
          }
        },
        loc: {
          start: {
            line: 193,
            column: 62
          },
          end: {
            line: 197,
            column: 9
          }
        },
        line: 193
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 202,
            column: 5
          }
        },
        loc: {
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 202
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 243,
            column: 5
          }
        },
        loc: {
          start: {
            line: 243,
            column: 33
          },
          end: {
            line: 261,
            column: 5
          }
        },
        line: 243
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 265,
            column: 4
          },
          end: {
            line: 265,
            column: 5
          }
        },
        loc: {
          start: {
            line: 265,
            column: 35
          },
          end: {
            line: 306,
            column: 5
          }
        },
        line: 265
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 310,
            column: 4
          },
          end: {
            line: 310,
            column: 5
          }
        },
        loc: {
          start: {
            line: 310,
            column: 37
          },
          end: {
            line: 331,
            column: 5
          }
        },
        line: 310
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 39
          },
          end: {
            line: 354,
            column: 5
          }
        },
        line: 335
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 36
          },
          end: {
            line: 367,
            column: 5
          }
        },
        line: 358
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 49
          },
          end: {
            line: 381,
            column: 5
          }
        },
        line: 371
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 385,
            column: 4
          },
          end: {
            line: 385,
            column: 5
          }
        },
        loc: {
          start: {
            line: 385,
            column: 24
          },
          end: {
            line: 394,
            column: 5
          }
        },
        line: 385
      },
      "27": {
        name: "createEventStreamingManager",
        decl: {
          start: {
            line: 399,
            column: 16
          },
          end: {
            line: 399,
            column: 43
          }
        },
        loc: {
          start: {
            line: 399,
            column: 68
          },
          end: {
            line: 409,
            column: 1
          }
        },
        line: 399
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 80,
            column: 23
          },
          end: {
            line: 80,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 80,
            column: 48
          },
          end: {
            line: 80,
            column: 61
          }
        }, {
          start: {
            line: 80,
            column: 64
          },
          end: {
            line: 80,
            column: 79
          }
        }],
        line: 80
      },
      "1": {
        loc: {
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 121,
            column: 15
          },
          end: {
            line: 121,
            column: 53
          }
        }, {
          start: {
            line: 121,
            column: 57
          },
          end: {
            line: 121,
            column: 61
          }
        }],
        line: 121
      },
      "2": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "3": {
        loc: {
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 206,
            column: 12
          },
          end: {
            line: 211,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 206
      },
      "4": {
        loc: {
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 16
          },
          end: {
            line: 210,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "5": {
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 213,
            column: 16
          },
          end: {
            line: 215,
            column: 26
          }
        }, {
          start: {
            line: 216,
            column: 16
          },
          end: {
            line: 218,
            column: 26
          }
        }, {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 26
          }
        }, {
          start: {
            line: 222,
            column: 16
          },
          end: {
            line: 224,
            column: 26
          }
        }],
        line: 212
      },
      "6": {
        loc: {
          start: {
            line: 235,
            column: 23
          },
          end: {
            line: 235,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 48
          },
          end: {
            line: 235,
            column: 61
          }
        }, {
          start: {
            line: 235,
            column: 64
          },
          end: {
            line: 235,
            column: 79
          }
        }],
        line: 235
      },
      "7": {
        loc: {
          start: {
            line: 246,
            column: 24
          },
          end: {
            line: 246,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 246,
            column: 24
          },
          end: {
            line: 246,
            column: 39
          }
        }, {
          start: {
            line: 246,
            column: 43
          },
          end: {
            line: 246,
            column: 52
          }
        }],
        line: 246
      },
      "8": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "9": {
        loc: {
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 8
          },
          end: {
            line: 305,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "10": {
        loc: {
          start: {
            line: 271,
            column: 24
          },
          end: {
            line: 271,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 271,
            column: 50
          },
          end: {
            line: 271,
            column: 57
          }
        }, {
          start: {
            line: 271,
            column: 60
          },
          end: {
            line: 271,
            column: 69
          }
        }],
        line: 271
      },
      "11": {
        loc: {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 286,
            column: 13
          }
        }, {
          start: {
            line: 284,
            column: 17
          },
          end: {
            line: 286,
            column: 13
          }
        }],
        line: 281
      },
      "12": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 293,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 293,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "13": {
        loc: {
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 12
          },
          end: {
            line: 300,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "14": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "15": {
        loc: {
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 313,
            column: 8
          },
          end: {
            line: 330,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 313
      },
      "16": {
        loc: {
          start: {
            line: 329,
            column: 17
          },
          end: {
            line: 329,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 17
          },
          end: {
            line: 329,
            column: 64
          }
        }, {
          start: {
            line: 329,
            column: 68
          },
          end: {
            line: 329,
            column: 69
          }
        }],
        line: 329
      },
      "17": {
        loc: {
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 338,
            column: 8
          },
          end: {
            line: 353,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 338
      },
      "18": {
        loc: {
          start: {
            line: 343,
            column: 24
          },
          end: {
            line: 343,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 343,
            column: 50
          },
          end: {
            line: 343,
            column: 57
          }
        }, {
          start: {
            line: 343,
            column: 60
          },
          end: {
            line: 343,
            column: 69
          }
        }],
        line: 343
      },
      "19": {
        loc: {
          start: {
            line: 362,
            column: 22
          },
          end: {
            line: 362,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 22
          },
          end: {
            line: 362,
            column: 40
          }
        }, {
          start: {
            line: 362,
            column: 44
          },
          end: {
            line: 362,
            column: 45
          }
        }],
        line: 362
      },
      "20": {
        loc: {
          start: {
            line: 365,
            column: 29
          },
          end: {
            line: 365,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 29
          },
          end: {
            line: 365,
            column: 50
          }
        }, {
          start: {
            line: 365,
            column: 54
          },
          end: {
            line: 365,
            column: 63
          }
        }],
        line: 365
      },
      "21": {
        loc: {
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 373,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: 376,
            column: 13
          },
          end: {
            line: 380,
            column: 9
          }
        }],
        line: 373
      },
      "22": {
        loc: {
          start: {
            line: 399,
            column: 54
          },
          end: {
            line: 399,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 399,
            column: 64
          },
          end: {
            line: 399,
            column: 66
          }
        }],
        line: 399
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/eventStreamingManager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/eventStreamingManager.ts"],
      sourcesContent: ["/**\n * Event Streaming Manager for n8n Fork Integration\n *\n * Manages real-time event streaming for workflow execution updates,\n * progress monitoring, and bidirectional communication with n8n fork.\n */\n\nimport { EventEmitter } from 'events';\nimport { N8nWebSocketClient, WorkflowExecutionEvent, WebSocketConfig } from './websocketClient.js';\nimport { z } from 'zod';\n\n// Event streaming schemas\nexport const WorkflowExecutionStatusSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  status: z.enum(['running', 'success', 'error', 'waiting', 'canceled']),\n  progress: z.number().min(0).max(100).optional(),\n  currentNode: z.string().optional(),\n  startTime: z.string(),\n  endTime: z.string().optional(),\n  error: z.string().optional(),\n  data: z.any().optional(),\n});\n\nexport const NodeExecutionUpdateSchema = z.object({\n  executionId: z.string(),\n  nodeId: z.string(),\n  nodeName: z.string(),\n  status: z.enum(['running', 'success', 'error', 'waiting']),\n  startTime: z.string(),\n  endTime: z.string().optional(),\n  executionTime: z.number().optional(),\n  inputData: z.any().optional(),\n  outputData: z.any().optional(),\n  error: z.string().optional(),\n});\n\nexport const ProgressUpdateSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  progress: z.number().min(0).max(100),\n  currentNodeIndex: z.number(),\n  totalNodes: z.number(),\n  currentNodeName: z.string(),\n  estimatedTimeRemaining: z.number().optional(),\n});\n\nexport type WorkflowExecutionStatus = z.infer<typeof WorkflowExecutionStatusSchema>;\nexport type NodeExecutionUpdate = z.infer<typeof NodeExecutionUpdateSchema>;\nexport type ProgressUpdate = z.infer<typeof ProgressUpdateSchema>;\n\nexport interface EventStreamingConfig {\n  wsConfig: WebSocketConfig;\n  bufferSize: number;\n  retryAttempts: number;\n  enableProgressTracking: boolean;\n  enableMetrics: boolean;\n  eventFilters?: string[];\n}\n\nexport interface ExecutionMetrics {\n  totalExecutions: number;\n  successfulExecutions: number;\n  failedExecutions: number;\n  averageExecutionTime: number;\n  currentActiveExecutions: number;\n  nodeExecutionCounts: Record<string, number>;\n}\n\n/**\n * Event Streaming Manager\n *\n * Coordinates real-time event streaming between n8n fork WebSocket\n * and MCP server event system.\n */\nexport class EventStreamingManager extends EventEmitter {\n  private wsClient: N8nWebSocketClient;\n  private config: EventStreamingConfig;\n  private activeExecutions: Map<string, WorkflowExecutionStatus> = new Map();\n  private executionHistory: WorkflowExecutionStatus[] = [];\n  private metrics: ExecutionMetrics;\n  private eventBuffer: WorkflowExecutionEvent[] = [];\n  private isStreaming: boolean = false;\n\n  constructor(config: EventStreamingConfig) {\n    super();\n    this.config = config;\n    this.wsClient = new N8nWebSocketClient(config.wsConfig);\n    this.metrics = this.initializeMetrics();\n    this.setupEventHandlers();\n  }\n\n  /**\n   * Start event streaming\n   */\n  public async startStreaming(): Promise<void> {\n    try {\n      await this.wsClient.connect();\n      this.isStreaming = true;\n      \n      // Subscribe to all workflow execution events\n      await this.wsClient.subscribeToExecutions();\n      \n      this.emit('streamingStarted', {\n        timestamp: new Date().toISOString(),\n        config: this.config,\n      });\n\n    } catch (error) {\n      this.emit('streamingError', {\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Stop event streaming\n   */\n  public async stopStreaming(): Promise<void> {\n    this.isStreaming = false;\n    await this.wsClient.disconnect();\n    \n    this.emit('streamingStopped', {\n      timestamp: new Date().toISOString(),\n      metrics: this.getMetrics(),\n    });\n  }\n\n  /**\n   * Subscribe to specific workflow updates\n   */\n  public async subscribeToWorkflow(workflowId: string): Promise<void> {\n    await this.wsClient.subscribeToWorkflow(workflowId);\n    \n    this.emit('workflowSubscribed', {\n      workflowId,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Unsubscribe from workflow updates\n   */\n  public async unsubscribeFromWorkflow(workflowId: string): Promise<void> {\n    await this.wsClient.unsubscribeFromWorkflow(workflowId);\n    \n    this.emit('workflowUnsubscribed', {\n      workflowId,\n      timestamp: new Date().toISOString(),\n    });\n  }\n\n  /**\n   * Get current execution status\n   */\n  public getExecutionStatus(executionId: string): WorkflowExecutionStatus | null {\n    return this.activeExecutions.get(executionId) || null;\n  }\n\n  /**\n   * Get all active executions\n   */\n  public getActiveExecutions(): WorkflowExecutionStatus[] {\n    return Array.from(this.activeExecutions.values());\n  }\n\n  /**\n   * Get execution history\n   */\n  public getExecutionHistory(limit?: number): WorkflowExecutionStatus[] {\n    if (limit) {\n      return this.executionHistory.slice(-limit);\n    }\n    return [...this.executionHistory];\n  }\n\n  /**\n   * Get streaming metrics\n   */\n  public getMetrics(): ExecutionMetrics {\n    return { ...this.metrics };\n  }\n\n  /**\n   * Get connection status\n   */\n  public getConnectionStatus(): {\n    isConnected: boolean;\n    isStreaming: boolean;\n    connectionState: any;\n  } {\n    return {\n      isConnected: this.wsClient.isConnected(),\n      isStreaming: this.isStreaming,\n      connectionState: this.wsClient.getConnectionState(),\n    };\n  }\n\n  /**\n   * Send command to n8n fork\n   */\n  public async sendCommand(command: any): Promise<void> {\n    await this.wsClient.sendMessage(command);\n  }\n\n  /**\n   * Setup WebSocket event handlers\n   */\n  private setupEventHandlers(): void {\n    this.wsClient.on('connected', () => {\n      this.emit('connected', {\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('disconnected', (data) => {\n      this.emit('disconnected', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('workflowEvent', (event: WorkflowExecutionEvent) => {\n      this.handleWorkflowEvent(event);\n    });\n\n    this.wsClient.on('heartbeat', (heartbeat) => {\n      this.emit('heartbeat', heartbeat);\n    });\n\n    this.wsClient.on('error', (error) => {\n      this.emit('error', {\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('reconnecting', (data) => {\n      this.emit('reconnecting', {\n        ...data,\n        timestamp: new Date().toISOString(),\n      });\n    });\n\n    this.wsClient.on('maxReconnectAttemptsReached', () => {\n      this.emit('maxReconnectAttemptsReached', {\n        timestamp: new Date().toISOString(),\n      });\n    });\n  }\n\n  /**\n   * Handle workflow execution events\n   */\n  private handleWorkflowEvent(event: WorkflowExecutionEvent): void {\n    try {\n      const { type, data } = event;\n      \n      // Buffer event if needed\n      if (this.config.bufferSize > 0) {\n        this.eventBuffer.push(event);\n        if (this.eventBuffer.length > this.config.bufferSize) {\n          this.eventBuffer.shift();\n        }\n      }\n\n      switch (type) {\n        case 'workflowExecutionStarted':\n          this.handleExecutionStarted(data);\n          break;\n          \n        case 'workflowExecutionCompleted':\n          this.handleExecutionCompleted(data);\n          break;\n          \n        case 'nodeExecutionStarted':\n          this.handleNodeExecutionStarted(data);\n          break;\n          \n        case 'nodeExecutionCompleted':\n          this.handleNodeExecutionCompleted(data);\n          break;\n      }\n\n      // Emit the processed event\n      this.emit('workflowEvent', {\n        ...event,\n        processedAt: new Date().toISOString(),\n      });\n\n    } catch (error) {\n      this.emit('eventProcessingError', {\n        event,\n        error: error instanceof Error ? error.message : 'Unknown error',\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Handle workflow execution started\n   */\n  private handleExecutionStarted(data: any): void {\n    const executionStatus: WorkflowExecutionStatus = {\n      executionId: data.executionId,\n      workflowId: data.workflowId || 'unknown',\n      status: 'running',\n      progress: 0,\n      startTime: data.timestamp,\n    };\n\n    this.activeExecutions.set(data.executionId, executionStatus);\n    this.metrics.totalExecutions++;\n    this.metrics.currentActiveExecutions++;\n\n    this.emit('executionStarted', {\n      execution: executionStatus,\n      timestamp: new Date().toISOString(),\n    });\n\n    if (this.config.enableProgressTracking) {\n      this.emit('progressUpdate', this.createProgressUpdate(executionStatus));\n    }\n  }\n\n  /**\n   * Handle workflow execution completed\n   */\n  private handleExecutionCompleted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      const completedExecution: WorkflowExecutionStatus = {\n        ...activeExecution,\n        status: data.status === 'error' ? 'error' : 'success',\n        progress: 100,\n        endTime: data.timestamp,\n        error: data.error,\n        data: data.data,\n      };\n\n      // Move to history\n      this.executionHistory.push(completedExecution);\n      this.activeExecutions.delete(executionId);\n      \n      // Update metrics\n      if (completedExecution.status === 'success') {\n        this.metrics.successfulExecutions++;\n      } else {\n        this.metrics.failedExecutions++;\n      }\n      this.metrics.currentActiveExecutions--;\n\n      // Calculate execution time and update average\n      if (completedExecution.endTime) {\n        const executionTime = new Date(completedExecution.endTime).getTime() - \n                             new Date(completedExecution.startTime).getTime();\n        this.updateAverageExecutionTime(executionTime);\n      }\n\n      this.emit('executionCompleted', {\n        execution: completedExecution,\n        timestamp: new Date().toISOString(),\n      });\n\n      if (this.config.enableProgressTracking) {\n        this.emit('progressUpdate', this.createProgressUpdate(completedExecution));\n      }\n\n      // Trim history if it gets too large\n      if (this.executionHistory.length > 1000) {\n        this.executionHistory = this.executionHistory.slice(-500);\n      }\n    }\n  }\n\n  /**\n   * Handle node execution started\n   */\n  private handleNodeExecutionStarted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      activeExecution.currentNode = data.nodeName;\n      \n      const nodeUpdate: NodeExecutionUpdate = {\n        executionId,\n        nodeId: data.nodeId,\n        nodeName: data.nodeName,\n        status: 'running',\n        startTime: data.timestamp,\n      };\n\n      this.emit('nodeExecutionStarted', {\n        nodeUpdate,\n        execution: activeExecution,\n        timestamp: new Date().toISOString(),\n      });\n\n      // Update node execution counts\n      this.metrics.nodeExecutionCounts[data.nodeName] = \n        (this.metrics.nodeExecutionCounts[data.nodeName] || 0) + 1;\n    }\n  }\n\n  /**\n   * Handle node execution completed\n   */\n  private handleNodeExecutionCompleted(data: any): void {\n    const executionId = data.executionId;\n    const activeExecution = this.activeExecutions.get(executionId);\n    \n    if (activeExecution) {\n      const nodeUpdate: NodeExecutionUpdate = {\n        executionId,\n        nodeId: data.nodeId,\n        nodeName: data.nodeName,\n        status: data.status === 'error' ? 'error' : 'success',\n        startTime: data.timestamp,\n        endTime: data.timestamp,\n        error: data.error,\n      };\n\n      this.emit('nodeExecutionCompleted', {\n        nodeUpdate,\n        execution: activeExecution,\n        timestamp: new Date().toISOString(),\n      });\n    }\n  }\n\n  /**\n   * Create progress update\n   */\n  private createProgressUpdate(execution: WorkflowExecutionStatus): ProgressUpdate {\n    return {\n      executionId: execution.executionId,\n      workflowId: execution.workflowId,\n      progress: execution.progress || 0,\n      currentNodeIndex: 0, // TODO: Calculate from workflow structure\n      totalNodes: 1, // TODO: Get from workflow definition\n      currentNodeName: execution.currentNode || 'Unknown',\n    };\n  }\n\n  /**\n   * Update average execution time\n   */\n  private updateAverageExecutionTime(newExecutionTime: number): void {\n    const totalCompletedExecutions = this.metrics.successfulExecutions + this.metrics.failedExecutions;\n    \n    if (totalCompletedExecutions === 1) {\n      this.metrics.averageExecutionTime = newExecutionTime;\n    } else {\n      this.metrics.averageExecutionTime = \n        (this.metrics.averageExecutionTime * (totalCompletedExecutions - 1) + newExecutionTime) / \n        totalCompletedExecutions;\n    }\n  }\n\n  /**\n   * Initialize metrics\n   */\n  private initializeMetrics(): ExecutionMetrics {\n    return {\n      totalExecutions: 0,\n      successfulExecutions: 0,\n      failedExecutions: 0,\n      averageExecutionTime: 0,\n      currentActiveExecutions: 0,\n      nodeExecutionCounts: {},\n    };\n  }\n}\n\n/**\n * Create event streaming manager with default configuration\n */\nexport function createEventStreamingManager(\n  wsConfig: WebSocketConfig,\n  options: Partial<EventStreamingConfig> = {}\n): EventStreamingManager {\n  const config: EventStreamingConfig = {\n    wsConfig,\n    bufferSize: 100,\n    retryAttempts: 5,\n    enableProgressTracking: true,\n    enableMetrics: true,\n    ...options,\n  };\n\n  return new EventStreamingManager(config);\n}\n\n/**\n * Default event streaming configuration\n */\nexport const DEFAULT_STREAMING_CONFIG: Partial<EventStreamingConfig> = {\n  bufferSize: 100,\n  retryAttempts: 5,\n  enableProgressTracking: true,\n  enableMetrics: true,\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "073ab5c017dc0c29daa05802b172744ac1428dcd"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2mzz0wi3ov = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2mzz0wi3ov();
/**
 * Event Streaming Manager for n8n Fork Integration
 *
 * Manages real-time event streaming for workflow execution updates,
 * progress monitoring, and bidirectional communication with n8n fork.
 */
import { EventEmitter } from 'events';
import { N8nWebSocketClient } from './websocketClient.js';
import { z } from 'zod';
// Event streaming schemas
export const WorkflowExecutionStatusSchema =
/* istanbul ignore next */
(cov_2mzz0wi3ov().s[0]++, z.object({
  executionId: z.string(),
  workflowId: z.string(),
  status: z.enum(['running', 'success', 'error', 'waiting', 'canceled']),
  progress: z.number().min(0).max(100).optional(),
  currentNode: z.string().optional(),
  startTime: z.string(),
  endTime: z.string().optional(),
  error: z.string().optional(),
  data: z.any().optional()
}));
export const NodeExecutionUpdateSchema =
/* istanbul ignore next */
(cov_2mzz0wi3ov().s[1]++, z.object({
  executionId: z.string(),
  nodeId: z.string(),
  nodeName: z.string(),
  status: z.enum(['running', 'success', 'error', 'waiting']),
  startTime: z.string(),
  endTime: z.string().optional(),
  executionTime: z.number().optional(),
  inputData: z.any().optional(),
  outputData: z.any().optional(),
  error: z.string().optional()
}));
export const ProgressUpdateSchema =
/* istanbul ignore next */
(cov_2mzz0wi3ov().s[2]++, z.object({
  executionId: z.string(),
  workflowId: z.string(),
  progress: z.number().min(0).max(100),
  currentNodeIndex: z.number(),
  totalNodes: z.number(),
  currentNodeName: z.string(),
  estimatedTimeRemaining: z.number().optional()
}));
/**
 * Event Streaming Manager
 *
 * Coordinates real-time event streaming between n8n fork WebSocket
 * and MCP server event system.
 */
export class EventStreamingManager extends EventEmitter {
  wsClient;
  config;
  activeExecutions =
  /* istanbul ignore next */
  (cov_2mzz0wi3ov().s[3]++, new Map());
  executionHistory =
  /* istanbul ignore next */
  (cov_2mzz0wi3ov().s[4]++, []);
  metrics;
  eventBuffer =
  /* istanbul ignore next */
  (cov_2mzz0wi3ov().s[5]++, []);
  isStreaming =
  /* istanbul ignore next */
  (cov_2mzz0wi3ov().s[6]++, false);
  constructor(config) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[0]++;
    cov_2mzz0wi3ov().s[7]++;
    super();
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[8]++;
    this.config = config;
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[9]++;
    this.wsClient = new N8nWebSocketClient(config.wsConfig);
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[10]++;
    this.metrics = this.initializeMetrics();
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[11]++;
    this.setupEventHandlers();
  }
  /**
   * Start event streaming
   */
  async startStreaming() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[1]++;
    cov_2mzz0wi3ov().s[12]++;
    try {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[13]++;
      await this.wsClient.connect();
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[14]++;
      this.isStreaming = true;
      // Subscribe to all workflow execution events
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[15]++;
      await this.wsClient.subscribeToExecutions();
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[16]++;
      this.emit('streamingStarted', {
        timestamp: new Date().toISOString(),
        config: this.config
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[17]++;
      this.emit('streamingError', {
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[0][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[0][1]++, 'Unknown error'),
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[18]++;
      throw error;
    }
  }
  /**
   * Stop event streaming
   */
  async stopStreaming() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[2]++;
    cov_2mzz0wi3ov().s[19]++;
    this.isStreaming = false;
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[20]++;
    await this.wsClient.disconnect();
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[21]++;
    this.emit('streamingStopped', {
      timestamp: new Date().toISOString(),
      metrics: this.getMetrics()
    });
  }
  /**
   * Subscribe to specific workflow updates
   */
  async subscribeToWorkflow(workflowId) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[3]++;
    cov_2mzz0wi3ov().s[22]++;
    await this.wsClient.subscribeToWorkflow(workflowId);
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[23]++;
    this.emit('workflowSubscribed', {
      workflowId,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Unsubscribe from workflow updates
   */
  async unsubscribeFromWorkflow(workflowId) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[4]++;
    cov_2mzz0wi3ov().s[24]++;
    await this.wsClient.unsubscribeFromWorkflow(workflowId);
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[25]++;
    this.emit('workflowUnsubscribed', {
      workflowId,
      timestamp: new Date().toISOString()
    });
  }
  /**
   * Get current execution status
   */
  getExecutionStatus(executionId) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[5]++;
    cov_2mzz0wi3ov().s[26]++;
    return /* istanbul ignore next */(cov_2mzz0wi3ov().b[1][0]++, this.activeExecutions.get(executionId)) ||
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().b[1][1]++, null);
  }
  /**
   * Get all active executions
   */
  getActiveExecutions() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[6]++;
    cov_2mzz0wi3ov().s[27]++;
    return Array.from(this.activeExecutions.values());
  }
  /**
   * Get execution history
   */
  getExecutionHistory(limit) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[7]++;
    cov_2mzz0wi3ov().s[28]++;
    if (limit) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[2][0]++;
      cov_2mzz0wi3ov().s[29]++;
      return this.executionHistory.slice(-limit);
    } else
    /* istanbul ignore next */
    {
      cov_2mzz0wi3ov().b[2][1]++;
    }
    cov_2mzz0wi3ov().s[30]++;
    return [...this.executionHistory];
  }
  /**
   * Get streaming metrics
   */
  getMetrics() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[8]++;
    cov_2mzz0wi3ov().s[31]++;
    return {
      ...this.metrics
    };
  }
  /**
   * Get connection status
   */
  getConnectionStatus() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[9]++;
    cov_2mzz0wi3ov().s[32]++;
    return {
      isConnected: this.wsClient.isConnected(),
      isStreaming: this.isStreaming,
      connectionState: this.wsClient.getConnectionState()
    };
  }
  /**
   * Send command to n8n fork
   */
  async sendCommand(command) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[10]++;
    cov_2mzz0wi3ov().s[33]++;
    await this.wsClient.sendMessage(command);
  }
  /**
   * Setup WebSocket event handlers
   */
  setupEventHandlers() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[11]++;
    cov_2mzz0wi3ov().s[34]++;
    this.wsClient.on('connected', () => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[12]++;
      cov_2mzz0wi3ov().s[35]++;
      this.emit('connected', {
        timestamp: new Date().toISOString()
      });
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[36]++;
    this.wsClient.on('disconnected', data => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[13]++;
      cov_2mzz0wi3ov().s[37]++;
      this.emit('disconnected', {
        ...data,
        timestamp: new Date().toISOString()
      });
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[38]++;
    this.wsClient.on('workflowEvent', event => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[14]++;
      cov_2mzz0wi3ov().s[39]++;
      this.handleWorkflowEvent(event);
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[40]++;
    this.wsClient.on('heartbeat', heartbeat => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[15]++;
      cov_2mzz0wi3ov().s[41]++;
      this.emit('heartbeat', heartbeat);
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[42]++;
    this.wsClient.on('error', error => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[16]++;
      cov_2mzz0wi3ov().s[43]++;
      this.emit('error', {
        error: error.message,
        timestamp: new Date().toISOString()
      });
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[44]++;
    this.wsClient.on('reconnecting', data => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[17]++;
      cov_2mzz0wi3ov().s[45]++;
      this.emit('reconnecting', {
        ...data,
        timestamp: new Date().toISOString()
      });
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[46]++;
    this.wsClient.on('maxReconnectAttemptsReached', () => {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().f[18]++;
      cov_2mzz0wi3ov().s[47]++;
      this.emit('maxReconnectAttemptsReached', {
        timestamp: new Date().toISOString()
      });
    });
  }
  /**
   * Handle workflow execution events
   */
  handleWorkflowEvent(event) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[19]++;
    cov_2mzz0wi3ov().s[48]++;
    try {
      const {
        type,
        data
      } =
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().s[49]++, event);
      // Buffer event if needed
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[50]++;
      if (this.config.bufferSize > 0) {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[3][0]++;
        cov_2mzz0wi3ov().s[51]++;
        this.eventBuffer.push(event);
        /* istanbul ignore next */
        cov_2mzz0wi3ov().s[52]++;
        if (this.eventBuffer.length > this.config.bufferSize) {
          /* istanbul ignore next */
          cov_2mzz0wi3ov().b[4][0]++;
          cov_2mzz0wi3ov().s[53]++;
          this.eventBuffer.shift();
        } else
        /* istanbul ignore next */
        {
          cov_2mzz0wi3ov().b[4][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_2mzz0wi3ov().b[3][1]++;
      }
      cov_2mzz0wi3ov().s[54]++;
      switch (type) {
        case 'workflowExecutionStarted':
          /* istanbul ignore next */
          cov_2mzz0wi3ov().b[5][0]++;
          cov_2mzz0wi3ov().s[55]++;
          this.handleExecutionStarted(data);
          /* istanbul ignore next */
          cov_2mzz0wi3ov().s[56]++;
          break;
        case 'workflowExecutionCompleted':
          /* istanbul ignore next */
          cov_2mzz0wi3ov().b[5][1]++;
          cov_2mzz0wi3ov().s[57]++;
          this.handleExecutionCompleted(data);
          /* istanbul ignore next */
          cov_2mzz0wi3ov().s[58]++;
          break;
        case 'nodeExecutionStarted':
          /* istanbul ignore next */
          cov_2mzz0wi3ov().b[5][2]++;
          cov_2mzz0wi3ov().s[59]++;
          this.handleNodeExecutionStarted(data);
          /* istanbul ignore next */
          cov_2mzz0wi3ov().s[60]++;
          break;
        case 'nodeExecutionCompleted':
          /* istanbul ignore next */
          cov_2mzz0wi3ov().b[5][3]++;
          cov_2mzz0wi3ov().s[61]++;
          this.handleNodeExecutionCompleted(data);
          /* istanbul ignore next */
          cov_2mzz0wi3ov().s[62]++;
          break;
      }
      // Emit the processed event
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[63]++;
      this.emit('workflowEvent', {
        ...event,
        processedAt: new Date().toISOString()
      });
    } catch (error) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[64]++;
      this.emit('eventProcessingError', {
        event,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[6][1]++, 'Unknown error'),
        timestamp: new Date().toISOString()
      });
    }
  }
  /**
   * Handle workflow execution started
   */
  handleExecutionStarted(data) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[20]++;
    const executionStatus =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[65]++, {
      executionId: data.executionId,
      workflowId:
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[7][0]++, data.workflowId) ||
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[7][1]++, 'unknown'),
      status: 'running',
      progress: 0,
      startTime: data.timestamp
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[66]++;
    this.activeExecutions.set(data.executionId, executionStatus);
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[67]++;
    this.metrics.totalExecutions++;
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[68]++;
    this.metrics.currentActiveExecutions++;
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[69]++;
    this.emit('executionStarted', {
      execution: executionStatus,
      timestamp: new Date().toISOString()
    });
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[70]++;
    if (this.config.enableProgressTracking) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[8][0]++;
      cov_2mzz0wi3ov().s[71]++;
      this.emit('progressUpdate', this.createProgressUpdate(executionStatus));
    } else
    /* istanbul ignore next */
    {
      cov_2mzz0wi3ov().b[8][1]++;
    }
  }
  /**
   * Handle workflow execution completed
   */
  handleExecutionCompleted(data) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[21]++;
    const executionId =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[72]++, data.executionId);
    const activeExecution =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[73]++, this.activeExecutions.get(executionId));
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[74]++;
    if (activeExecution) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[9][0]++;
      const completedExecution =
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().s[75]++, {
        ...activeExecution,
        status: data.status === 'error' ?
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[10][0]++, 'error') :
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[10][1]++, 'success'),
        progress: 100,
        endTime: data.timestamp,
        error: data.error,
        data: data.data
      });
      // Move to history
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[76]++;
      this.executionHistory.push(completedExecution);
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[77]++;
      this.activeExecutions.delete(executionId);
      // Update metrics
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[78]++;
      if (completedExecution.status === 'success') {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[11][0]++;
        cov_2mzz0wi3ov().s[79]++;
        this.metrics.successfulExecutions++;
      } else {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[11][1]++;
        cov_2mzz0wi3ov().s[80]++;
        this.metrics.failedExecutions++;
      }
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[81]++;
      this.metrics.currentActiveExecutions--;
      // Calculate execution time and update average
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[82]++;
      if (completedExecution.endTime) {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[12][0]++;
        const executionTime =
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().s[83]++, new Date(completedExecution.endTime).getTime() - new Date(completedExecution.startTime).getTime());
        /* istanbul ignore next */
        cov_2mzz0wi3ov().s[84]++;
        this.updateAverageExecutionTime(executionTime);
      } else
      /* istanbul ignore next */
      {
        cov_2mzz0wi3ov().b[12][1]++;
      }
      cov_2mzz0wi3ov().s[85]++;
      this.emit('executionCompleted', {
        execution: completedExecution,
        timestamp: new Date().toISOString()
      });
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[86]++;
      if (this.config.enableProgressTracking) {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[13][0]++;
        cov_2mzz0wi3ov().s[87]++;
        this.emit('progressUpdate', this.createProgressUpdate(completedExecution));
      } else
      /* istanbul ignore next */
      {
        cov_2mzz0wi3ov().b[13][1]++;
      }
      // Trim history if it gets too large
      cov_2mzz0wi3ov().s[88]++;
      if (this.executionHistory.length > 1000) {
        /* istanbul ignore next */
        cov_2mzz0wi3ov().b[14][0]++;
        cov_2mzz0wi3ov().s[89]++;
        this.executionHistory = this.executionHistory.slice(-500);
      } else
      /* istanbul ignore next */
      {
        cov_2mzz0wi3ov().b[14][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2mzz0wi3ov().b[9][1]++;
    }
  }
  /**
   * Handle node execution started
   */
  handleNodeExecutionStarted(data) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[22]++;
    const executionId =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[90]++, data.executionId);
    const activeExecution =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[91]++, this.activeExecutions.get(executionId));
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[92]++;
    if (activeExecution) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[15][0]++;
      cov_2mzz0wi3ov().s[93]++;
      activeExecution.currentNode = data.nodeName;
      const nodeUpdate =
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().s[94]++, {
        executionId,
        nodeId: data.nodeId,
        nodeName: data.nodeName,
        status: 'running',
        startTime: data.timestamp
      });
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[95]++;
      this.emit('nodeExecutionStarted', {
        nodeUpdate,
        execution: activeExecution,
        timestamp: new Date().toISOString()
      });
      // Update node execution counts
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[96]++;
      this.metrics.nodeExecutionCounts[data.nodeName] = (
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[16][0]++, this.metrics.nodeExecutionCounts[data.nodeName]) ||
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[16][1]++, 0)) + 1;
    } else
    /* istanbul ignore next */
    {
      cov_2mzz0wi3ov().b[15][1]++;
    }
  }
  /**
   * Handle node execution completed
   */
  handleNodeExecutionCompleted(data) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[23]++;
    const executionId =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[97]++, data.executionId);
    const activeExecution =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[98]++, this.activeExecutions.get(executionId));
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[99]++;
    if (activeExecution) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[17][0]++;
      const nodeUpdate =
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().s[100]++, {
        executionId,
        nodeId: data.nodeId,
        nodeName: data.nodeName,
        status: data.status === 'error' ?
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[18][0]++, 'error') :
        /* istanbul ignore next */
        (cov_2mzz0wi3ov().b[18][1]++, 'success'),
        startTime: data.timestamp,
        endTime: data.timestamp,
        error: data.error
      });
      /* istanbul ignore next */
      cov_2mzz0wi3ov().s[101]++;
      this.emit('nodeExecutionCompleted', {
        nodeUpdate,
        execution: activeExecution,
        timestamp: new Date().toISOString()
      });
    } else
    /* istanbul ignore next */
    {
      cov_2mzz0wi3ov().b[17][1]++;
    }
  }
  /**
   * Create progress update
   */
  createProgressUpdate(execution) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[24]++;
    cov_2mzz0wi3ov().s[102]++;
    return {
      executionId: execution.executionId,
      workflowId: execution.workflowId,
      progress:
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[19][0]++, execution.progress) ||
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[19][1]++, 0),
      currentNodeIndex: 0,
      // TODO: Calculate from workflow structure
      totalNodes: 1,
      // TODO: Get from workflow definition
      currentNodeName:
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[20][0]++, execution.currentNode) ||
      /* istanbul ignore next */
      (cov_2mzz0wi3ov().b[20][1]++, 'Unknown')
    };
  }
  /**
   * Update average execution time
   */
  updateAverageExecutionTime(newExecutionTime) {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[25]++;
    const totalCompletedExecutions =
    /* istanbul ignore next */
    (cov_2mzz0wi3ov().s[103]++, this.metrics.successfulExecutions + this.metrics.failedExecutions);
    /* istanbul ignore next */
    cov_2mzz0wi3ov().s[104]++;
    if (totalCompletedExecutions === 1) {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[21][0]++;
      cov_2mzz0wi3ov().s[105]++;
      this.metrics.averageExecutionTime = newExecutionTime;
    } else {
      /* istanbul ignore next */
      cov_2mzz0wi3ov().b[21][1]++;
      cov_2mzz0wi3ov().s[106]++;
      this.metrics.averageExecutionTime = (this.metrics.averageExecutionTime * (totalCompletedExecutions - 1) + newExecutionTime) / totalCompletedExecutions;
    }
  }
  /**
   * Initialize metrics
   */
  initializeMetrics() {
    /* istanbul ignore next */
    cov_2mzz0wi3ov().f[26]++;
    cov_2mzz0wi3ov().s[107]++;
    return {
      totalExecutions: 0,
      successfulExecutions: 0,
      failedExecutions: 0,
      averageExecutionTime: 0,
      currentActiveExecutions: 0,
      nodeExecutionCounts: {}
    };
  }
}
/**
 * Create event streaming manager with default configuration
 */
export function createEventStreamingManager(wsConfig, options =
/* istanbul ignore next */
(cov_2mzz0wi3ov().b[22][0]++, {})) {
  /* istanbul ignore next */
  cov_2mzz0wi3ov().f[27]++;
  const config =
  /* istanbul ignore next */
  (cov_2mzz0wi3ov().s[108]++, {
    wsConfig,
    bufferSize: 100,
    retryAttempts: 5,
    enableProgressTracking: true,
    enableMetrics: true,
    ...options
  });
  /* istanbul ignore next */
  cov_2mzz0wi3ov().s[109]++;
  return new EventStreamingManager(config);
}
/**
 * Default event streaming configuration
 */
export const DEFAULT_STREAMING_CONFIG =
/* istanbul ignore next */
(cov_2mzz0wi3ov().s[110]++, {
  bufferSize: 100,
  retryAttempts: 5,
  enableProgressTracking: true,
  enableMetrics: true
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMm16ejB3aTNvdiIsImFjdHVhbENvdmVyYWdlIiwiRXZlbnRFbWl0dGVyIiwiTjhuV2ViU29ja2V0Q2xpZW50IiwieiIsIldvcmtmbG93RXhlY3V0aW9uU3RhdHVzU2NoZW1hIiwicyIsIm9iamVjdCIsImV4ZWN1dGlvbklkIiwic3RyaW5nIiwid29ya2Zsb3dJZCIsInN0YXR1cyIsImVudW0iLCJwcm9ncmVzcyIsIm51bWJlciIsIm1pbiIsIm1heCIsIm9wdGlvbmFsIiwiY3VycmVudE5vZGUiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZXJyb3IiLCJkYXRhIiwiYW55IiwiTm9kZUV4ZWN1dGlvblVwZGF0ZVNjaGVtYSIsIm5vZGVJZCIsIm5vZGVOYW1lIiwiZXhlY3V0aW9uVGltZSIsImlucHV0RGF0YSIsIm91dHB1dERhdGEiLCJQcm9ncmVzc1VwZGF0ZVNjaGVtYSIsImN1cnJlbnROb2RlSW5kZXgiLCJ0b3RhbE5vZGVzIiwiY3VycmVudE5vZGVOYW1lIiwiZXN0aW1hdGVkVGltZVJlbWFpbmluZyIsIkV2ZW50U3RyZWFtaW5nTWFuYWdlciIsIndzQ2xpZW50IiwiY29uZmlnIiwiYWN0aXZlRXhlY3V0aW9ucyIsIk1hcCIsImV4ZWN1dGlvbkhpc3RvcnkiLCJtZXRyaWNzIiwiZXZlbnRCdWZmZXIiLCJpc1N0cmVhbWluZyIsImNvbnN0cnVjdG9yIiwiZiIsIndzQ29uZmlnIiwiaW5pdGlhbGl6ZU1ldHJpY3MiLCJzZXR1cEV2ZW50SGFuZGxlcnMiLCJzdGFydFN0cmVhbWluZyIsImNvbm5lY3QiLCJzdWJzY3JpYmVUb0V4ZWN1dGlvbnMiLCJlbWl0IiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiRXJyb3IiLCJiIiwibWVzc2FnZSIsInN0b3BTdHJlYW1pbmciLCJkaXNjb25uZWN0IiwiZ2V0TWV0cmljcyIsInN1YnNjcmliZVRvV29ya2Zsb3ciLCJ1bnN1YnNjcmliZUZyb21Xb3JrZmxvdyIsImdldEV4ZWN1dGlvblN0YXR1cyIsImdldCIsImdldEFjdGl2ZUV4ZWN1dGlvbnMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRFeGVjdXRpb25IaXN0b3J5IiwibGltaXQiLCJzbGljZSIsImdldENvbm5lY3Rpb25TdGF0dXMiLCJpc0Nvbm5lY3RlZCIsImNvbm5lY3Rpb25TdGF0ZSIsImdldENvbm5lY3Rpb25TdGF0ZSIsInNlbmRDb21tYW5kIiwiY29tbWFuZCIsInNlbmRNZXNzYWdlIiwib24iLCJldmVudCIsImhhbmRsZVdvcmtmbG93RXZlbnQiLCJoZWFydGJlYXQiLCJ0eXBlIiwiYnVmZmVyU2l6ZSIsInB1c2giLCJsZW5ndGgiLCJzaGlmdCIsImhhbmRsZUV4ZWN1dGlvblN0YXJ0ZWQiLCJoYW5kbGVFeGVjdXRpb25Db21wbGV0ZWQiLCJoYW5kbGVOb2RlRXhlY3V0aW9uU3RhcnRlZCIsImhhbmRsZU5vZGVFeGVjdXRpb25Db21wbGV0ZWQiLCJwcm9jZXNzZWRBdCIsImV4ZWN1dGlvblN0YXR1cyIsInNldCIsInRvdGFsRXhlY3V0aW9ucyIsImN1cnJlbnRBY3RpdmVFeGVjdXRpb25zIiwiZXhlY3V0aW9uIiwiZW5hYmxlUHJvZ3Jlc3NUcmFja2luZyIsImNyZWF0ZVByb2dyZXNzVXBkYXRlIiwiYWN0aXZlRXhlY3V0aW9uIiwiY29tcGxldGVkRXhlY3V0aW9uIiwiZGVsZXRlIiwic3VjY2Vzc2Z1bEV4ZWN1dGlvbnMiLCJmYWlsZWRFeGVjdXRpb25zIiwiZ2V0VGltZSIsInVwZGF0ZUF2ZXJhZ2VFeGVjdXRpb25UaW1lIiwibm9kZVVwZGF0ZSIsIm5vZGVFeGVjdXRpb25Db3VudHMiLCJuZXdFeGVjdXRpb25UaW1lIiwidG90YWxDb21wbGV0ZWRFeGVjdXRpb25zIiwiYXZlcmFnZUV4ZWN1dGlvblRpbWUiLCJjcmVhdGVFdmVudFN0cmVhbWluZ01hbmFnZXIiLCJvcHRpb25zIiwicmV0cnlBdHRlbXB0cyIsImVuYWJsZU1ldHJpY3MiLCJERUZBVUxUX1NUUkVBTUlOR19DT05GSUciXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci9zcmMvdHJhbnNwb3J0L2V2ZW50U3RyZWFtaW5nTWFuYWdlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV2ZW50IFN0cmVhbWluZyBNYW5hZ2VyIGZvciBuOG4gRm9yayBJbnRlZ3JhdGlvblxuICpcbiAqIE1hbmFnZXMgcmVhbC10aW1lIGV2ZW50IHN0cmVhbWluZyBmb3Igd29ya2Zsb3cgZXhlY3V0aW9uIHVwZGF0ZXMsXG4gKiBwcm9ncmVzcyBtb25pdG9yaW5nLCBhbmQgYmlkaXJlY3Rpb25hbCBjb21tdW5pY2F0aW9uIHdpdGggbjhuIGZvcmsuXG4gKi9cblxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IE44bldlYlNvY2tldENsaWVudCwgV29ya2Zsb3dFeGVjdXRpb25FdmVudCwgV2ViU29ja2V0Q29uZmlnIH0gZnJvbSAnLi93ZWJzb2NrZXRDbGllbnQuanMnO1xuaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5cbi8vIEV2ZW50IHN0cmVhbWluZyBzY2hlbWFzXG5leHBvcnQgY29uc3QgV29ya2Zsb3dFeGVjdXRpb25TdGF0dXNTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGV4ZWN1dGlvbklkOiB6LnN0cmluZygpLFxuICB3b3JrZmxvd0lkOiB6LnN0cmluZygpLFxuICBzdGF0dXM6IHouZW51bShbJ3J1bm5pbmcnLCAnc3VjY2VzcycsICdlcnJvcicsICd3YWl0aW5nJywgJ2NhbmNlbGVkJ10pLFxuICBwcm9ncmVzczogei5udW1iZXIoKS5taW4oMCkubWF4KDEwMCkub3B0aW9uYWwoKSxcbiAgY3VycmVudE5vZGU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbiAgc3RhcnRUaW1lOiB6LnN0cmluZygpLFxuICBlbmRUaW1lOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGVycm9yOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gIGRhdGE6IHouYW55KCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgTm9kZUV4ZWN1dGlvblVwZGF0ZVNjaGVtYSA9IHoub2JqZWN0KHtcbiAgZXhlY3V0aW9uSWQ6IHouc3RyaW5nKCksXG4gIG5vZGVJZDogei5zdHJpbmcoKSxcbiAgbm9kZU5hbWU6IHouc3RyaW5nKCksXG4gIHN0YXR1czogei5lbnVtKFsncnVubmluZycsICdzdWNjZXNzJywgJ2Vycm9yJywgJ3dhaXRpbmcnXSksXG4gIHN0YXJ0VGltZTogei5zdHJpbmcoKSxcbiAgZW5kVGltZTogei5zdHJpbmcoKS5vcHRpb25hbCgpLFxuICBleGVjdXRpb25UaW1lOiB6Lm51bWJlcigpLm9wdGlvbmFsKCksXG4gIGlucHV0RGF0YTogei5hbnkoKS5vcHRpb25hbCgpLFxuICBvdXRwdXREYXRhOiB6LmFueSgpLm9wdGlvbmFsKCksXG4gIGVycm9yOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IGNvbnN0IFByb2dyZXNzVXBkYXRlU2NoZW1hID0gei5vYmplY3Qoe1xuICBleGVjdXRpb25JZDogei5zdHJpbmcoKSxcbiAgd29ya2Zsb3dJZDogei5zdHJpbmcoKSxcbiAgcHJvZ3Jlc3M6IHoubnVtYmVyKCkubWluKDApLm1heCgxMDApLFxuICBjdXJyZW50Tm9kZUluZGV4OiB6Lm51bWJlcigpLFxuICB0b3RhbE5vZGVzOiB6Lm51bWJlcigpLFxuICBjdXJyZW50Tm9kZU5hbWU6IHouc3RyaW5nKCksXG4gIGVzdGltYXRlZFRpbWVSZW1haW5pbmc6IHoubnVtYmVyKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBXb3JrZmxvd0V4ZWN1dGlvblN0YXR1cyA9IHouaW5mZXI8dHlwZW9mIFdvcmtmbG93RXhlY3V0aW9uU3RhdHVzU2NoZW1hPjtcbmV4cG9ydCB0eXBlIE5vZGVFeGVjdXRpb25VcGRhdGUgPSB6LmluZmVyPHR5cGVvZiBOb2RlRXhlY3V0aW9uVXBkYXRlU2NoZW1hPjtcbmV4cG9ydCB0eXBlIFByb2dyZXNzVXBkYXRlID0gei5pbmZlcjx0eXBlb2YgUHJvZ3Jlc3NVcGRhdGVTY2hlbWE+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEV2ZW50U3RyZWFtaW5nQ29uZmlnIHtcbiAgd3NDb25maWc6IFdlYlNvY2tldENvbmZpZztcbiAgYnVmZmVyU2l6ZTogbnVtYmVyO1xuICByZXRyeUF0dGVtcHRzOiBudW1iZXI7XG4gIGVuYWJsZVByb2dyZXNzVHJhY2tpbmc6IGJvb2xlYW47XG4gIGVuYWJsZU1ldHJpY3M6IGJvb2xlYW47XG4gIGV2ZW50RmlsdGVycz86IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4ZWN1dGlvbk1ldHJpY3Mge1xuICB0b3RhbEV4ZWN1dGlvbnM6IG51bWJlcjtcbiAgc3VjY2Vzc2Z1bEV4ZWN1dGlvbnM6IG51bWJlcjtcbiAgZmFpbGVkRXhlY3V0aW9uczogbnVtYmVyO1xuICBhdmVyYWdlRXhlY3V0aW9uVGltZTogbnVtYmVyO1xuICBjdXJyZW50QWN0aXZlRXhlY3V0aW9uczogbnVtYmVyO1xuICBub2RlRXhlY3V0aW9uQ291bnRzOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xufVxuXG4vKipcbiAqIEV2ZW50IFN0cmVhbWluZyBNYW5hZ2VyXG4gKlxuICogQ29vcmRpbmF0ZXMgcmVhbC10aW1lIGV2ZW50IHN0cmVhbWluZyBiZXR3ZWVuIG44biBmb3JrIFdlYlNvY2tldFxuICogYW5kIE1DUCBzZXJ2ZXIgZXZlbnQgc3lzdGVtLlxuICovXG5leHBvcnQgY2xhc3MgRXZlbnRTdHJlYW1pbmdNYW5hZ2VyIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcbiAgcHJpdmF0ZSB3c0NsaWVudDogTjhuV2ViU29ja2V0Q2xpZW50O1xuICBwcml2YXRlIGNvbmZpZzogRXZlbnRTdHJlYW1pbmdDb25maWc7XG4gIHByaXZhdGUgYWN0aXZlRXhlY3V0aW9uczogTWFwPHN0cmluZywgV29ya2Zsb3dFeGVjdXRpb25TdGF0dXM+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIGV4ZWN1dGlvbkhpc3Rvcnk6IFdvcmtmbG93RXhlY3V0aW9uU3RhdHVzW10gPSBbXTtcbiAgcHJpdmF0ZSBtZXRyaWNzOiBFeGVjdXRpb25NZXRyaWNzO1xuICBwcml2YXRlIGV2ZW50QnVmZmVyOiBXb3JrZmxvd0V4ZWN1dGlvbkV2ZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBpc1N0cmVhbWluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogRXZlbnRTdHJlYW1pbmdDb25maWcpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMud3NDbGllbnQgPSBuZXcgTjhuV2ViU29ja2V0Q2xpZW50KGNvbmZpZy53c0NvbmZpZyk7XG4gICAgdGhpcy5tZXRyaWNzID0gdGhpcy5pbml0aWFsaXplTWV0cmljcygpO1xuICAgIHRoaXMuc2V0dXBFdmVudEhhbmRsZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnQgZXZlbnQgc3RyZWFtaW5nXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgc3RhcnRTdHJlYW1pbmcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMud3NDbGllbnQuY29ubmVjdCgpO1xuICAgICAgdGhpcy5pc1N0cmVhbWluZyA9IHRydWU7XG4gICAgICBcbiAgICAgIC8vIFN1YnNjcmliZSB0byBhbGwgd29ya2Zsb3cgZXhlY3V0aW9uIGV2ZW50c1xuICAgICAgYXdhaXQgdGhpcy53c0NsaWVudC5zdWJzY3JpYmVUb0V4ZWN1dGlvbnMoKTtcbiAgICAgIFxuICAgICAgdGhpcy5lbWl0KCdzdHJlYW1pbmdTdGFydGVkJywge1xuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICAgIH0pO1xuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuZW1pdCgnc3RyZWFtaW5nRXJyb3InLCB7XG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIGV2ZW50IHN0cmVhbWluZ1xuICAgKi9cbiAgcHVibGljIGFzeW5jIHN0b3BTdHJlYW1pbmcoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5pc1N0cmVhbWluZyA9IGZhbHNlO1xuICAgIGF3YWl0IHRoaXMud3NDbGllbnQuZGlzY29ubmVjdCgpO1xuICAgIFxuICAgIHRoaXMuZW1pdCgnc3RyZWFtaW5nU3RvcHBlZCcsIHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgbWV0cmljczogdGhpcy5nZXRNZXRyaWNzKCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHNwZWNpZmljIHdvcmtmbG93IHVwZGF0ZXNcbiAgICovXG4gIHB1YmxpYyBhc3luYyBzdWJzY3JpYmVUb1dvcmtmbG93KHdvcmtmbG93SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGF3YWl0IHRoaXMud3NDbGllbnQuc3Vic2NyaWJlVG9Xb3JrZmxvdyh3b3JrZmxvd0lkKTtcbiAgICBcbiAgICB0aGlzLmVtaXQoJ3dvcmtmbG93U3Vic2NyaWJlZCcsIHtcbiAgICAgIHdvcmtmbG93SWQsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHdvcmtmbG93IHVwZGF0ZXNcbiAgICovXG4gIHB1YmxpYyBhc3luYyB1bnN1YnNjcmliZUZyb21Xb3JrZmxvdyh3b3JrZmxvd0lkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLndzQ2xpZW50LnVuc3Vic2NyaWJlRnJvbVdvcmtmbG93KHdvcmtmbG93SWQpO1xuICAgIFxuICAgIHRoaXMuZW1pdCgnd29ya2Zsb3dVbnN1YnNjcmliZWQnLCB7XG4gICAgICB3b3JrZmxvd0lkLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGN1cnJlbnQgZXhlY3V0aW9uIHN0YXR1c1xuICAgKi9cbiAgcHVibGljIGdldEV4ZWN1dGlvblN0YXR1cyhleGVjdXRpb25JZDogc3RyaW5nKTogV29ya2Zsb3dFeGVjdXRpb25TdGF0dXMgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVFeGVjdXRpb25zLmdldChleGVjdXRpb25JZCkgfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIGFjdGl2ZSBleGVjdXRpb25zXG4gICAqL1xuICBwdWJsaWMgZ2V0QWN0aXZlRXhlY3V0aW9ucygpOiBXb3JrZmxvd0V4ZWN1dGlvblN0YXR1c1tdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZUV4ZWN1dGlvbnMudmFsdWVzKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBleGVjdXRpb24gaGlzdG9yeVxuICAgKi9cbiAgcHVibGljIGdldEV4ZWN1dGlvbkhpc3RvcnkobGltaXQ/OiBudW1iZXIpOiBXb3JrZmxvd0V4ZWN1dGlvblN0YXR1c1tdIHtcbiAgICBpZiAobGltaXQpIHtcbiAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGlvbkhpc3Rvcnkuc2xpY2UoLWxpbWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIFsuLi50aGlzLmV4ZWN1dGlvbkhpc3RvcnldO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzdHJlYW1pbmcgbWV0cmljc1xuICAgKi9cbiAgcHVibGljIGdldE1ldHJpY3MoKTogRXhlY3V0aW9uTWV0cmljcyB7XG4gICAgcmV0dXJuIHsgLi4udGhpcy5tZXRyaWNzIH07XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNvbm5lY3Rpb24gc3RhdHVzXG4gICAqL1xuICBwdWJsaWMgZ2V0Q29ubmVjdGlvblN0YXR1cygpOiB7XG4gICAgaXNDb25uZWN0ZWQ6IGJvb2xlYW47XG4gICAgaXNTdHJlYW1pbmc6IGJvb2xlYW47XG4gICAgY29ubmVjdGlvblN0YXRlOiBhbnk7XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBpc0Nvbm5lY3RlZDogdGhpcy53c0NsaWVudC5pc0Nvbm5lY3RlZCgpLFxuICAgICAgaXNTdHJlYW1pbmc6IHRoaXMuaXNTdHJlYW1pbmcsXG4gICAgICBjb25uZWN0aW9uU3RhdGU6IHRoaXMud3NDbGllbnQuZ2V0Q29ubmVjdGlvblN0YXRlKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kIGNvbW1hbmQgdG8gbjhuIGZvcmtcbiAgICovXG4gIHB1YmxpYyBhc3luYyBzZW5kQ29tbWFuZChjb21tYW5kOiBhbnkpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLndzQ2xpZW50LnNlbmRNZXNzYWdlKGNvbW1hbmQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHVwIFdlYlNvY2tldCBldmVudCBoYW5kbGVyc1xuICAgKi9cbiAgcHJpdmF0ZSBzZXR1cEV2ZW50SGFuZGxlcnMoKTogdm9pZCB7XG4gICAgdGhpcy53c0NsaWVudC5vbignY29ubmVjdGVkJywgKCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdjb25uZWN0ZWQnLCB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLndzQ2xpZW50Lm9uKCdkaXNjb25uZWN0ZWQnLCAoZGF0YSkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdkaXNjb25uZWN0ZWQnLCB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLndzQ2xpZW50Lm9uKCd3b3JrZmxvd0V2ZW50JywgKGV2ZW50OiBXb3JrZmxvd0V4ZWN1dGlvbkV2ZW50KSA9PiB7XG4gICAgICB0aGlzLmhhbmRsZVdvcmtmbG93RXZlbnQoZXZlbnQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy53c0NsaWVudC5vbignaGVhcnRiZWF0JywgKGhlYXJ0YmVhdCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdoZWFydGJlYXQnLCBoZWFydGJlYXQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy53c0NsaWVudC5vbignZXJyb3InLCAoZXJyb3IpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCB7XG4gICAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy53c0NsaWVudC5vbigncmVjb25uZWN0aW5nJywgKGRhdGEpID0+IHtcbiAgICAgIHRoaXMuZW1pdCgncmVjb25uZWN0aW5nJywge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhpcy53c0NsaWVudC5vbignbWF4UmVjb25uZWN0QXR0ZW1wdHNSZWFjaGVkJywgKCkgPT4ge1xuICAgICAgdGhpcy5lbWl0KCdtYXhSZWNvbm5lY3RBdHRlbXB0c1JlYWNoZWQnLCB7XG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHdvcmtmbG93IGV4ZWN1dGlvbiBldmVudHNcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlV29ya2Zsb3dFdmVudChldmVudDogV29ya2Zsb3dFeGVjdXRpb25FdmVudCk6IHZvaWQge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHR5cGUsIGRhdGEgfSA9IGV2ZW50O1xuICAgICAgXG4gICAgICAvLyBCdWZmZXIgZXZlbnQgaWYgbmVlZGVkXG4gICAgICBpZiAodGhpcy5jb25maWcuYnVmZmVyU2l6ZSA+IDApIHtcbiAgICAgICAgdGhpcy5ldmVudEJ1ZmZlci5wdXNoKGV2ZW50KTtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRCdWZmZXIubGVuZ3RoID4gdGhpcy5jb25maWcuYnVmZmVyU2l6ZSkge1xuICAgICAgICAgIHRoaXMuZXZlbnRCdWZmZXIuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnd29ya2Zsb3dFeGVjdXRpb25TdGFydGVkJzpcbiAgICAgICAgICB0aGlzLmhhbmRsZUV4ZWN1dGlvblN0YXJ0ZWQoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ3dvcmtmbG93RXhlY3V0aW9uQ29tcGxldGVkJzpcbiAgICAgICAgICB0aGlzLmhhbmRsZUV4ZWN1dGlvbkNvbXBsZXRlZChkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgICBcbiAgICAgICAgY2FzZSAnbm9kZUV4ZWN1dGlvblN0YXJ0ZWQnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlTm9kZUV4ZWN1dGlvblN0YXJ0ZWQoZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgXG4gICAgICAgIGNhc2UgJ25vZGVFeGVjdXRpb25Db21wbGV0ZWQnOlxuICAgICAgICAgIHRoaXMuaGFuZGxlTm9kZUV4ZWN1dGlvbkNvbXBsZXRlZChkYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgLy8gRW1pdCB0aGUgcHJvY2Vzc2VkIGV2ZW50XG4gICAgICB0aGlzLmVtaXQoJ3dvcmtmbG93RXZlbnQnLCB7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBwcm9jZXNzZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG5cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5lbWl0KCdldmVudFByb2Nlc3NpbmdFcnJvcicsIHtcbiAgICAgICAgZXZlbnQsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHdvcmtmbG93IGV4ZWN1dGlvbiBzdGFydGVkXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZUV4ZWN1dGlvblN0YXJ0ZWQoZGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgZXhlY3V0aW9uU3RhdHVzOiBXb3JrZmxvd0V4ZWN1dGlvblN0YXR1cyA9IHtcbiAgICAgIGV4ZWN1dGlvbklkOiBkYXRhLmV4ZWN1dGlvbklkLFxuICAgICAgd29ya2Zsb3dJZDogZGF0YS53b3JrZmxvd0lkIHx8ICd1bmtub3duJyxcbiAgICAgIHN0YXR1czogJ3J1bm5pbmcnLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICBzdGFydFRpbWU6IGRhdGEudGltZXN0YW1wLFxuICAgIH07XG5cbiAgICB0aGlzLmFjdGl2ZUV4ZWN1dGlvbnMuc2V0KGRhdGEuZXhlY3V0aW9uSWQsIGV4ZWN1dGlvblN0YXR1cyk7XG4gICAgdGhpcy5tZXRyaWNzLnRvdGFsRXhlY3V0aW9ucysrO1xuICAgIHRoaXMubWV0cmljcy5jdXJyZW50QWN0aXZlRXhlY3V0aW9ucysrO1xuXG4gICAgdGhpcy5lbWl0KCdleGVjdXRpb25TdGFydGVkJywge1xuICAgICAgZXhlY3V0aW9uOiBleGVjdXRpb25TdGF0dXMsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcblxuICAgIGlmICh0aGlzLmNvbmZpZy5lbmFibGVQcm9ncmVzc1RyYWNraW5nKSB7XG4gICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzVXBkYXRlJywgdGhpcy5jcmVhdGVQcm9ncmVzc1VwZGF0ZShleGVjdXRpb25TdGF0dXMpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIHdvcmtmbG93IGV4ZWN1dGlvbiBjb21wbGV0ZWRcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlRXhlY3V0aW9uQ29tcGxldGVkKGRhdGE6IGFueSk6IHZvaWQge1xuICAgIGNvbnN0IGV4ZWN1dGlvbklkID0gZGF0YS5leGVjdXRpb25JZDtcbiAgICBjb25zdCBhY3RpdmVFeGVjdXRpb24gPSB0aGlzLmFjdGl2ZUV4ZWN1dGlvbnMuZ2V0KGV4ZWN1dGlvbklkKTtcbiAgICBcbiAgICBpZiAoYWN0aXZlRXhlY3V0aW9uKSB7XG4gICAgICBjb25zdCBjb21wbGV0ZWRFeGVjdXRpb246IFdvcmtmbG93RXhlY3V0aW9uU3RhdHVzID0ge1xuICAgICAgICAuLi5hY3RpdmVFeGVjdXRpb24sXG4gICAgICAgIHN0YXR1czogZGF0YS5zdGF0dXMgPT09ICdlcnJvcicgPyAnZXJyb3InIDogJ3N1Y2Nlc3MnLFxuICAgICAgICBwcm9ncmVzczogMTAwLFxuICAgICAgICBlbmRUaW1lOiBkYXRhLnRpbWVzdGFtcCxcbiAgICAgICAgZXJyb3I6IGRhdGEuZXJyb3IsXG4gICAgICAgIGRhdGE6IGRhdGEuZGF0YSxcbiAgICAgIH07XG5cbiAgICAgIC8vIE1vdmUgdG8gaGlzdG9yeVxuICAgICAgdGhpcy5leGVjdXRpb25IaXN0b3J5LnB1c2goY29tcGxldGVkRXhlY3V0aW9uKTtcbiAgICAgIHRoaXMuYWN0aXZlRXhlY3V0aW9ucy5kZWxldGUoZXhlY3V0aW9uSWQpO1xuICAgICAgXG4gICAgICAvLyBVcGRhdGUgbWV0cmljc1xuICAgICAgaWYgKGNvbXBsZXRlZEV4ZWN1dGlvbi5zdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICB0aGlzLm1ldHJpY3Muc3VjY2Vzc2Z1bEV4ZWN1dGlvbnMrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubWV0cmljcy5mYWlsZWRFeGVjdXRpb25zKys7XG4gICAgICB9XG4gICAgICB0aGlzLm1ldHJpY3MuY3VycmVudEFjdGl2ZUV4ZWN1dGlvbnMtLTtcblxuICAgICAgLy8gQ2FsY3VsYXRlIGV4ZWN1dGlvbiB0aW1lIGFuZCB1cGRhdGUgYXZlcmFnZVxuICAgICAgaWYgKGNvbXBsZXRlZEV4ZWN1dGlvbi5lbmRUaW1lKSB7XG4gICAgICAgIGNvbnN0IGV4ZWN1dGlvblRpbWUgPSBuZXcgRGF0ZShjb21wbGV0ZWRFeGVjdXRpb24uZW5kVGltZSkuZ2V0VGltZSgpIC0gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKGNvbXBsZXRlZEV4ZWN1dGlvbi5zdGFydFRpbWUpLmdldFRpbWUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVBdmVyYWdlRXhlY3V0aW9uVGltZShleGVjdXRpb25UaW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5lbWl0KCdleGVjdXRpb25Db21wbGV0ZWQnLCB7XG4gICAgICAgIGV4ZWN1dGlvbjogY29tcGxldGVkRXhlY3V0aW9uLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5jb25maWcuZW5hYmxlUHJvZ3Jlc3NUcmFja2luZykge1xuICAgICAgICB0aGlzLmVtaXQoJ3Byb2dyZXNzVXBkYXRlJywgdGhpcy5jcmVhdGVQcm9ncmVzc1VwZGF0ZShjb21wbGV0ZWRFeGVjdXRpb24pKTtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpbSBoaXN0b3J5IGlmIGl0IGdldHMgdG9vIGxhcmdlXG4gICAgICBpZiAodGhpcy5leGVjdXRpb25IaXN0b3J5Lmxlbmd0aCA+IDEwMDApIHtcbiAgICAgICAgdGhpcy5leGVjdXRpb25IaXN0b3J5ID0gdGhpcy5leGVjdXRpb25IaXN0b3J5LnNsaWNlKC01MDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgbm9kZSBleGVjdXRpb24gc3RhcnRlZFxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVOb2RlRXhlY3V0aW9uU3RhcnRlZChkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBjb25zdCBleGVjdXRpb25JZCA9IGRhdGEuZXhlY3V0aW9uSWQ7XG4gICAgY29uc3QgYWN0aXZlRXhlY3V0aW9uID0gdGhpcy5hY3RpdmVFeGVjdXRpb25zLmdldChleGVjdXRpb25JZCk7XG4gICAgXG4gICAgaWYgKGFjdGl2ZUV4ZWN1dGlvbikge1xuICAgICAgYWN0aXZlRXhlY3V0aW9uLmN1cnJlbnROb2RlID0gZGF0YS5ub2RlTmFtZTtcbiAgICAgIFxuICAgICAgY29uc3Qgbm9kZVVwZGF0ZTogTm9kZUV4ZWN1dGlvblVwZGF0ZSA9IHtcbiAgICAgICAgZXhlY3V0aW9uSWQsXG4gICAgICAgIG5vZGVJZDogZGF0YS5ub2RlSWQsXG4gICAgICAgIG5vZGVOYW1lOiBkYXRhLm5vZGVOYW1lLFxuICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyxcbiAgICAgICAgc3RhcnRUaW1lOiBkYXRhLnRpbWVzdGFtcCxcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW1pdCgnbm9kZUV4ZWN1dGlvblN0YXJ0ZWQnLCB7XG4gICAgICAgIG5vZGVVcGRhdGUsXG4gICAgICAgIGV4ZWN1dGlvbjogYWN0aXZlRXhlY3V0aW9uLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBVcGRhdGUgbm9kZSBleGVjdXRpb24gY291bnRzXG4gICAgICB0aGlzLm1ldHJpY3Mubm9kZUV4ZWN1dGlvbkNvdW50c1tkYXRhLm5vZGVOYW1lXSA9IFxuICAgICAgICAodGhpcy5tZXRyaWNzLm5vZGVFeGVjdXRpb25Db3VudHNbZGF0YS5ub2RlTmFtZV0gfHwgMCkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgbm9kZSBleGVjdXRpb24gY29tcGxldGVkXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZU5vZGVFeGVjdXRpb25Db21wbGV0ZWQoZGF0YTogYW55KTogdm9pZCB7XG4gICAgY29uc3QgZXhlY3V0aW9uSWQgPSBkYXRhLmV4ZWN1dGlvbklkO1xuICAgIGNvbnN0IGFjdGl2ZUV4ZWN1dGlvbiA9IHRoaXMuYWN0aXZlRXhlY3V0aW9ucy5nZXQoZXhlY3V0aW9uSWQpO1xuICAgIFxuICAgIGlmIChhY3RpdmVFeGVjdXRpb24pIHtcbiAgICAgIGNvbnN0IG5vZGVVcGRhdGU6IE5vZGVFeGVjdXRpb25VcGRhdGUgPSB7XG4gICAgICAgIGV4ZWN1dGlvbklkLFxuICAgICAgICBub2RlSWQ6IGRhdGEubm9kZUlkLFxuICAgICAgICBub2RlTmFtZTogZGF0YS5ub2RlTmFtZSxcbiAgICAgICAgc3RhdHVzOiBkYXRhLnN0YXR1cyA9PT0gJ2Vycm9yJyA/ICdlcnJvcicgOiAnc3VjY2VzcycsXG4gICAgICAgIHN0YXJ0VGltZTogZGF0YS50aW1lc3RhbXAsXG4gICAgICAgIGVuZFRpbWU6IGRhdGEudGltZXN0YW1wLFxuICAgICAgICBlcnJvcjogZGF0YS5lcnJvcixcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZW1pdCgnbm9kZUV4ZWN1dGlvbkNvbXBsZXRlZCcsIHtcbiAgICAgICAgbm9kZVVwZGF0ZSxcbiAgICAgICAgZXhlY3V0aW9uOiBhY3RpdmVFeGVjdXRpb24sXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBwcm9ncmVzcyB1cGRhdGVcbiAgICovXG4gIHByaXZhdGUgY3JlYXRlUHJvZ3Jlc3NVcGRhdGUoZXhlY3V0aW9uOiBXb3JrZmxvd0V4ZWN1dGlvblN0YXR1cyk6IFByb2dyZXNzVXBkYXRlIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXhlY3V0aW9uSWQ6IGV4ZWN1dGlvbi5leGVjdXRpb25JZCxcbiAgICAgIHdvcmtmbG93SWQ6IGV4ZWN1dGlvbi53b3JrZmxvd0lkLFxuICAgICAgcHJvZ3Jlc3M6IGV4ZWN1dGlvbi5wcm9ncmVzcyB8fCAwLFxuICAgICAgY3VycmVudE5vZGVJbmRleDogMCwgLy8gVE9ETzogQ2FsY3VsYXRlIGZyb20gd29ya2Zsb3cgc3RydWN0dXJlXG4gICAgICB0b3RhbE5vZGVzOiAxLCAvLyBUT0RPOiBHZXQgZnJvbSB3b3JrZmxvdyBkZWZpbml0aW9uXG4gICAgICBjdXJyZW50Tm9kZU5hbWU6IGV4ZWN1dGlvbi5jdXJyZW50Tm9kZSB8fCAnVW5rbm93bicsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYXZlcmFnZSBleGVjdXRpb24gdGltZVxuICAgKi9cbiAgcHJpdmF0ZSB1cGRhdGVBdmVyYWdlRXhlY3V0aW9uVGltZShuZXdFeGVjdXRpb25UaW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0b3RhbENvbXBsZXRlZEV4ZWN1dGlvbnMgPSB0aGlzLm1ldHJpY3Muc3VjY2Vzc2Z1bEV4ZWN1dGlvbnMgKyB0aGlzLm1ldHJpY3MuZmFpbGVkRXhlY3V0aW9ucztcbiAgICBcbiAgICBpZiAodG90YWxDb21wbGV0ZWRFeGVjdXRpb25zID09PSAxKSB7XG4gICAgICB0aGlzLm1ldHJpY3MuYXZlcmFnZUV4ZWN1dGlvblRpbWUgPSBuZXdFeGVjdXRpb25UaW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1ldHJpY3MuYXZlcmFnZUV4ZWN1dGlvblRpbWUgPSBcbiAgICAgICAgKHRoaXMubWV0cmljcy5hdmVyYWdlRXhlY3V0aW9uVGltZSAqICh0b3RhbENvbXBsZXRlZEV4ZWN1dGlvbnMgLSAxKSArIG5ld0V4ZWN1dGlvblRpbWUpIC8gXG4gICAgICAgIHRvdGFsQ29tcGxldGVkRXhlY3V0aW9ucztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSBtZXRyaWNzXG4gICAqL1xuICBwcml2YXRlIGluaXRpYWxpemVNZXRyaWNzKCk6IEV4ZWN1dGlvbk1ldHJpY3Mge1xuICAgIHJldHVybiB7XG4gICAgICB0b3RhbEV4ZWN1dGlvbnM6IDAsXG4gICAgICBzdWNjZXNzZnVsRXhlY3V0aW9uczogMCxcbiAgICAgIGZhaWxlZEV4ZWN1dGlvbnM6IDAsXG4gICAgICBhdmVyYWdlRXhlY3V0aW9uVGltZTogMCxcbiAgICAgIGN1cnJlbnRBY3RpdmVFeGVjdXRpb25zOiAwLFxuICAgICAgbm9kZUV4ZWN1dGlvbkNvdW50czoge30sXG4gICAgfTtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZSBldmVudCBzdHJlYW1pbmcgbWFuYWdlciB3aXRoIGRlZmF1bHQgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRXZlbnRTdHJlYW1pbmdNYW5hZ2VyKFxuICB3c0NvbmZpZzogV2ViU29ja2V0Q29uZmlnLFxuICBvcHRpb25zOiBQYXJ0aWFsPEV2ZW50U3RyZWFtaW5nQ29uZmlnPiA9IHt9XG4pOiBFdmVudFN0cmVhbWluZ01hbmFnZXIge1xuICBjb25zdCBjb25maWc6IEV2ZW50U3RyZWFtaW5nQ29uZmlnID0ge1xuICAgIHdzQ29uZmlnLFxuICAgIGJ1ZmZlclNpemU6IDEwMCxcbiAgICByZXRyeUF0dGVtcHRzOiA1LFxuICAgIGVuYWJsZVByb2dyZXNzVHJhY2tpbmc6IHRydWUsXG4gICAgZW5hYmxlTWV0cmljczogdHJ1ZSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xuXG4gIHJldHVybiBuZXcgRXZlbnRTdHJlYW1pbmdNYW5hZ2VyKGNvbmZpZyk7XG59XG5cbi8qKlxuICogRGVmYXVsdCBldmVudCBzdHJlYW1pbmcgY29uZmlndXJhdGlvblxuICovXG5leHBvcnQgY29uc3QgREVGQVVMVF9TVFJFQU1JTkdfQ09ORklHOiBQYXJ0aWFsPEV2ZW50U3RyZWFtaW5nQ29uZmlnPiA9IHtcbiAgYnVmZmVyU2l6ZTogMTAwLFxuICByZXRyeUF0dGVtcHRzOiA1LFxuICBlbmFibGVQcm9ncmVzc1RyYWNraW5nOiB0cnVlLFxuICBlbmFibGVNZXRyaWNzOiB0cnVlLFxufTsiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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