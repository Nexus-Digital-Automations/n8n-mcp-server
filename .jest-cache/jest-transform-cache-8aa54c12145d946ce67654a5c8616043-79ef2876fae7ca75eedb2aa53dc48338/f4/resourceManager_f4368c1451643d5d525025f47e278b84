b41ade4c6f9f3d757bf2f3e85556cb07
/* istanbul ignore next */
function cov_2dbxy2tc76() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts";
  var hash = "142fc8ad3f6d686fc075be4eb7d892a04db34dc4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "1": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 59
        }
      },
      "2": {
        start: {
          line: 36,
          column: 8
        },
        end: {
          line: 43,
          column: 9
        }
      },
      "3": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 41,
          column: 15
        }
      },
      "4": {
        start: {
          line: 42,
          column: 12
        },
        end: {
          line: 42,
          column: 63
        }
      },
      "5": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "6": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 15
        }
      },
      "7": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 64
        }
      },
      "8": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 56,
          column: 9
        }
      },
      "9": {
        start: {
          line: 55,
          column: 12
        },
        end: {
          line: 55,
          column: 58
        }
      },
      "10": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 60,
          column: 9
        }
      },
      "11": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 64
        }
      },
      "12": {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 62,
          column: 57
        }
      },
      "13": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "14": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 80,
          column: 11
        }
      },
      "15": {
        start: {
          line: 75,
          column: 30
        },
        end: {
          line: 75,
          column: 60
        }
      },
      "16": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 78,
          column: 18
        }
      },
      "17": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 99,
          column: 11
        }
      },
      "18": {
        start: {
          line: 94,
          column: 32
        },
        end: {
          line: 94,
          column: 73
        }
      },
      "19": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 97,
          column: 18
        }
      },
      "20": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 100,
          column: 52
        }
      },
      "21": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 117,
          column: 11
        }
      },
      "22": {
        start: {
          line: 112,
          column: 34
        },
        end: {
          line: 112,
          column: 65
        }
      },
      "23": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 115,
          column: 18
        }
      },
      "24": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 136,
          column: 11
        }
      },
      "25": {
        start: {
          line: 131,
          column: 33
        },
        end: {
          line: 131,
          column: 75
        }
      },
      "26": {
        start: {
          line: 132,
          column: 16
        },
        end: {
          line: 134,
          column: 18
        }
      },
      "27": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 58
        }
      },
      "28": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 158,
          column: 11
        }
      },
      "29": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 149,
          column: 42
        }
      },
      "30": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "31": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 87
        }
      },
      "32": {
        start: {
          line: 153,
          column: 29
        },
        end: {
          line: 153,
          column: 63
        }
      },
      "33": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 156,
          column: 18
        }
      },
      "34": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "35": {
        start: {
          line: 165,
          column: 34
        },
        end: {
          line: 165,
          column: 61
        }
      },
      "36": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 168,
          column: 18
        }
      },
      "37": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 56
        }
      },
      "38": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 214,
          column: 10
        }
      },
      "39": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 233,
          column: 10
        }
      },
      "40": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 263,
          column: 10
        }
      },
      "41": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 285,
          column: 10
        }
      },
      "42": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 328,
          column: 9
        }
      },
      "43": {
        start: {
          line: 293,
          column: 30
        },
        end: {
          line: 293,
          column: 69
        }
      },
      "44": {
        start: {
          line: 294,
          column: 31
        },
        end: {
          line: 294,
          column: 71
        }
      },
      "45": {
        start: {
          line: 295,
          column: 12
        },
        end: {
          line: 315,
          column: 14
        }
      },
      "46": {
        start: {
          line: 301,
          column: 59
        },
        end: {
          line: 301,
          column: 91
        }
      },
      "47": {
        start: {
          line: 302,
          column: 56
        },
        end: {
          line: 302,
          column: 85
        }
      },
      "48": {
        start: {
          line: 303,
          column: 60
        },
        end: {
          line: 303,
          column: 93
        }
      },
      "49": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 327,
          column: 14
        }
      },
      "50": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 340,
          column: 9
        }
      },
      "51": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 27
        }
      },
      "52": {
        start: {
          line: 336,
          column: 12
        },
        end: {
          line: 336,
          column: 24
        }
      },
      "53": {
        start: {
          line: 339,
          column: 12
        },
        end: {
          line: 339,
          column: 25
        }
      },
      "54": {
        start: {
          line: 346,
          column: 26
        },
        end: {
          line: 346,
          column: 28
        }
      },
      "55": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "56": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 358,
          column: 15
        }
      },
      "57": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 373,
          column: 9
        }
      },
      "58": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 372,
          column: 15
        }
      },
      "59": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 384,
          column: 9
        }
      },
      "60": {
        start: {
          line: 375,
          column: 12
        },
        end: {
          line: 383,
          column: 15
        }
      },
      "61": {
        start: {
          line: 385,
          column: 8
        },
        end: {
          line: 398,
          column: 10
        }
      },
      "62": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 45
        }
      },
      "63": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 46
        }
      },
      "64": {
        start: {
          line: 406,
          column: 8
        },
        end: {
          line: 406,
          column: 54
        }
      },
      "65": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 415,
          column: 10
        }
      },
      "66": {
        start: {
          line: 422,
          column: 4
        },
        end: {
          line: 422,
          column: 39
        }
      },
      "67": {
        start: {
          line: 427,
          column: 35
        },
        end: {
          line: 438,
          column: 1
        }
      },
      "68": {
        start: {
          line: 443,
          column: 4
        },
        end: {
          line: 457,
          column: 6
        }
      },
      "69": {
        start: {
          line: 450,
          column: 26
        },
        end: {
          line: 450,
          column: 73
        }
      },
      "70": {
        start: {
          line: 451,
          column: 12
        },
        end: {
          line: 451,
          column: 55
        }
      },
      "71": {
        start: {
          line: 454,
          column: 26
        },
        end: {
          line: 454,
          column: 68
        }
      },
      "72": {
        start: {
          line: 455,
          column: 12
        },
        end: {
          line: 455,
          column: 55
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 29
          },
          end: {
            line: 29,
            column: 5
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 45
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 74,
            column: 18
          },
          end: {
            line: 74,
            column: 19
          }
        },
        loc: {
          start: {
            line: 74,
            column: 30
          },
          end: {
            line: 79,
            column: 13
          }
        },
        line: 74
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 93,
            column: 18
          },
          end: {
            line: 93,
            column: 19
          }
        },
        loc: {
          start: {
            line: 93,
            column: 42
          },
          end: {
            line: 98,
            column: 13
          }
        },
        line: 93
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 105,
            column: 5
          }
        },
        loc: {
          start: {
            line: 105,
            column: 51
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 105
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 18
          },
          end: {
            line: 111,
            column: 19
          }
        },
        loc: {
          start: {
            line: 111,
            column: 30
          },
          end: {
            line: 116,
            column: 13
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 130,
            column: 18
          },
          end: {
            line: 130,
            column: 19
          }
        },
        loc: {
          start: {
            line: 130,
            column: 42
          },
          end: {
            line: 135,
            column: 13
          }
        },
        line: 130
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 48
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 148,
            column: 18
          },
          end: {
            line: 148,
            column: 19
          }
        },
        loc: {
          start: {
            line: 148,
            column: 30
          },
          end: {
            line: 157,
            column: 13
          }
        },
        line: 148
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 164,
            column: 18
          },
          end: {
            line: 164,
            column: 19
          }
        },
        loc: {
          start: {
            line: 164,
            column: 30
          },
          end: {
            line: 169,
            column: 13
          }
        },
        line: 164
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 30
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 176
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 219,
            column: 4
          },
          end: {
            line: 219,
            column: 5
          }
        },
        loc: {
          start: {
            line: 219,
            column: 41
          },
          end: {
            line: 234,
            column: 5
          }
        },
        line: 219
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 238,
            column: 5
          }
        },
        loc: {
          start: {
            line: 238,
            column: 31
          },
          end: {
            line: 264,
            column: 5
          }
        },
        line: 238
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 268,
            column: 5
          }
        },
        loc: {
          start: {
            line: 268,
            column: 42
          },
          end: {
            line: 286,
            column: 5
          }
        },
        line: 268
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 290,
            column: 4
          },
          end: {
            line: 290,
            column: 5
          }
        },
        loc: {
          start: {
            line: 290,
            column: 34
          },
          end: {
            line: 329,
            column: 5
          }
        },
        line: 290
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 301,
            column: 53
          },
          end: {
            line: 301,
            column: 54
          }
        },
        loc: {
          start: {
            line: 301,
            column: 59
          },
          end: {
            line: 301,
            column: 91
          }
        },
        line: 301
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 302,
            column: 50
          },
          end: {
            line: 302,
            column: 51
          }
        },
        loc: {
          start: {
            line: 302,
            column: 56
          },
          end: {
            line: 302,
            column: 85
          }
        },
        line: 302
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 303,
            column: 54
          },
          end: {
            line: 303,
            column: 55
          }
        },
        loc: {
          start: {
            line: 303,
            column: 60
          },
          end: {
            line: 303,
            column: 93
          }
        },
        line: 303
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 30
          },
          end: {
            line: 341,
            column: 5
          }
        },
        line: 333
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 345,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        loc: {
          start: {
            line: 345,
            column: 27
          },
          end: {
            line: 399,
            column: 5
          }
        },
        line: 345
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 21
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 403
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 23
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 411
      },
      "23": {
        name: "createResourceManager",
        decl: {
          start: {
            line: 421,
            column: 16
          },
          end: {
            line: 421,
            column: 37
          }
        },
        loc: {
          start: {
            line: 421,
            column: 46
          },
          end: {
            line: 423,
            column: 1
          }
        },
        line: 421
      },
      "24": {
        name: "parseResourceConfigFromEnv",
        decl: {
          start: {
            line: 442,
            column: 16
          },
          end: {
            line: 442,
            column: 42
          }
        },
        loc: {
          start: {
            line: 442,
            column: 45
          },
          end: {
            line: 458,
            column: 1
          }
        },
        line: 442
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 449,
            column: 30
          },
          end: {
            line: 449,
            column: 31
          }
        },
        loc: {
          start: {
            line: 449,
            column: 36
          },
          end: {
            line: 452,
            column: 9
          }
        },
        line: 449
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 453,
            column: 19
          },
          end: {
            line: 453,
            column: 20
          }
        },
        loc: {
          start: {
            line: 453,
            column: 25
          },
          end: {
            line: 456,
            column: 9
          }
        },
        line: 453
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 25
          },
          end: {
            line: 18,
            column: 27
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 43,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 52,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 56,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 60,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "5": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "6": {
        loc: {
          start: {
            line: 320,
            column: 23
          },
          end: {
            line: 320,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 48
          },
          end: {
            line: 320,
            column: 61
          }
        }, {
          start: {
            line: 320,
            column: 64
          },
          end: {
            line: 320,
            column: 77
          }
        }],
        line: 320
      },
      "7": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "8": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 373,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      },
      "9": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 384,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 374
      },
      "10": {
        loc: {
          start: {
            line: 413,
            column: 23
          },
          end: {
            line: 413,
            column: 87
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 23
          },
          end: {
            line: 413,
            column: 62
          }
        }, {
          start: {
            line: 413,
            column: 66
          },
          end: {
            line: 413,
            column: 87
          }
        }],
        line: 413
      },
      "11": {
        loc: {
          start: {
            line: 414,
            column: 24
          },
          end: {
            line: 414,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 414,
            column: 24
          },
          end: {
            line: 414,
            column: 64
          }
        }, {
          start: {
            line: 414,
            column: 68
          },
          end: {
            line: 414,
            column: 89
          }
        }],
        line: 414
      },
      "12": {
        loc: {
          start: {
            line: 444,
            column: 17
          },
          end: {
            line: 444,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 444,
            column: 17
          },
          end: {
            line: 444,
            column: 58
          }
        }, {
          start: {
            line: 444,
            column: 62
          },
          end: {
            line: 444,
            column: 71
          }
        }],
        line: 444
      },
      "13": {
        loc: {
          start: {
            line: 451,
            column: 19
          },
          end: {
            line: 451,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 451,
            column: 27
          },
          end: {
            line: 451,
            column: 42
          }
        }, {
          start: {
            line: 451,
            column: 45
          },
          end: {
            line: 451,
            column: 54
          }
        }],
        line: 451
      },
      "14": {
        loc: {
          start: {
            line: 455,
            column: 19
          },
          end: {
            line: 455,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 455,
            column: 27
          },
          end: {
            line: 455,
            column: 42
          }
        }, {
          start: {
            line: 455,
            column: 45
          },
          end: {
            line: 455,
            column: 54
          }
        }],
        line: 455
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/resourceManager.ts"],
      sourcesContent: ["/**\n * Resource Manager for n8n MCP Server\n *\n * Central coordinator for all MCP resources, managing registration,\n * configuration, and lifecycle of resource providers.\n */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable no-unused-vars */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { WorkflowResourceManager, createWorkflowResources } from './workflowResources.js';\nimport { ExecutionResourceManager, createExecutionResources } from './executionResources.js';\n\n/**\n * Resource manager configuration\n */\nexport interface ResourceManagerConfig {\n  /** Base URI prefix for all n8n resources */\n  baseUri?: string;\n\n  /** Whether to enable workflow resources */\n  enableWorkflows?: boolean;\n\n  /** Whether to enable execution resources */\n  enableExecutions?: boolean;\n\n  /** Whether to enable credential resources */\n  enableCredentials?: boolean;\n\n  /** Whether to enable node documentation resources */\n  enableNodes?: boolean;\n\n  /** Global cache duration for all resources (ms) */\n  globalCacheDuration?: number;\n\n  /** Maximum number of items in resource listings */\n  maxItems?: number;\n}\n\n/**\n * Central resource manager\n *\n * Coordinates all resource providers and handles global resource configuration.\n */\nexport class ResourceManager {\n  private config: Required<ResourceManagerConfig>;\n  private workflowResources?: WorkflowResourceManager;\n  private executionResources?: ExecutionResourceManager;\n\n  constructor(config: ResourceManagerConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://',\n      enableWorkflows: true,\n      enableExecutions: true,\n      enableCredentials: false, // Disabled by default for security\n      enableNodes: true,\n      globalCacheDuration: 5 * 60 * 1000, // 5 minutes\n      maxItems: 100,\n      ...config,\n    };\n  }\n\n  /**\n   * Register all enabled resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    console.log('\uD83D\uDCDA Registering n8n MCP resources...');\n\n    // Register workflow resources\n    if (this.config.enableWorkflows) {\n      this.workflowResources = createWorkflowResources({\n        baseUri: `${this.config.baseUri}workflows`,\n        maxWorkflows: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.workflowResources.register(server, getClient);\n    }\n\n    // Register execution resources\n    if (this.config.enableExecutions) {\n      this.executionResources = createExecutionResources({\n        baseUri: `${this.config.baseUri}executions`,\n        maxExecutions: this.config.maxItems,\n        cacheDuration: this.config.globalCacheDuration,\n      });\n      this.executionResources.register(server, getClient);\n    }\n\n    // Register node documentation resources\n    if (this.config.enableNodes) {\n      this.registerNodeResources(server, getClient);\n    }\n\n    // Register credential template resources (if enabled)\n    if (this.config.enableCredentials) {\n      this.registerCredentialResources(server, getClient);\n    }\n\n    // Register general n8n information resources\n    this.registerGeneralResources(server, getClient);\n\n    console.log('\u2705 All n8n MCP resources registered');\n  }\n\n  /**\n   * Register node documentation resources\n   */\n  private registerNodeResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Available nodes resource\n    server.addResource({\n      uri: `${this.config.baseUri}nodes/available`,\n      name: 'n8n Available Nodes',\n      mimeType: 'application/json',\n      load: async () => {\n        const nodes = await this.getAvailableNodes();\n        return {\n          text: JSON.stringify(nodes, null, 2),\n        };\n      },\n    });\n\n    // Node documentation template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}nodes/{nodeType}`,\n      name: 'n8n Node Documentation',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'nodeType',\n          description: 'The type of n8n node (e.g., \"n8n-nodes-base.httpRequest\")',\n          required: true,\n        },\n      ],\n      load: async ({ nodeType }: { nodeType: string }) => {\n        const nodeDoc = await this.getNodeDocumentation(nodeType);\n        return {\n          text: JSON.stringify(nodeDoc, null, 2),\n        };\n      },\n    });\n\n    console.log('\uD83D\uDCE6 Node resources registered');\n  }\n\n  /**\n   * Register credential template resources\n   */\n  private registerCredentialResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Credential types resource\n    server.addResource({\n      uri: `${this.config.baseUri}credentials/types`,\n      name: 'n8n Credential Types',\n      mimeType: 'application/json',\n      load: async () => {\n        const credTypes = await this.getCredentialTypes();\n        return {\n          text: JSON.stringify(credTypes, null, 2),\n        };\n      },\n    });\n\n    // Credential template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}credentials/template/{credType}`,\n      name: 'n8n Credential Template',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'credType',\n          description: 'The credential type name',\n          required: true,\n        },\n      ],\n      load: async ({ credType }: { credType: string }) => {\n        const template = await this.getCredentialTemplate(credType);\n        return {\n          text: JSON.stringify(template, null, 2),\n        };\n      },\n    });\n\n    console.log('\uD83D\uDD10 Credential resources registered');\n  }\n\n  /**\n   * Register general n8n information resources\n   */\n  private registerGeneralResources(server: FastMCP, getClient: () => N8nClient | null): void {\n    // n8n instance information\n    server.addResource({\n      uri: `${this.config.baseUri}info`,\n      name: 'n8n Instance Information',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const info = await this.getInstanceInfo(client);\n        return {\n          text: JSON.stringify(info, null, 2),\n        };\n      },\n    });\n\n    // Resource directory/index\n    server.addResource({\n      uri: `${this.config.baseUri}index`,\n      name: 'n8n Resource Directory',\n      mimeType: 'application/json',\n      load: async () => {\n        const directory = this.getResourceDirectory();\n        return {\n          text: JSON.stringify(directory, null, 2),\n        };\n      },\n    });\n\n    console.log('\u2139\uFE0F  General resources registered');\n  }\n\n  /**\n   * Get available n8n nodes (mock data - would need to be retrieved from n8n API)\n   */\n  private async getAvailableNodes(): Promise<any> {\n    // This would typically fetch from n8n API or node registry\n    return {\n      nodes: [\n        {\n          name: 'HTTP Request',\n          type: 'n8n-nodes-base.httpRequest',\n          description: 'Makes HTTP requests and returns the response data',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'Code',\n          type: 'n8n-nodes-base.code',\n          description: 'Run custom JavaScript code',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        {\n          name: 'If',\n          type: 'n8n-nodes-base.if',\n          description: 'Conditional routing based on comparison operations',\n          category: 'Core Nodes',\n          version: 1,\n        },\n        // More nodes would be listed here\n      ],\n      metadata: {\n        totalNodes: 500, // Example count\n        categories: ['Core Nodes', 'Trigger Nodes', 'Regular Nodes'],\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/available`,\n        type: 'n8n-available-nodes',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get node documentation\n   */\n  private async getNodeDocumentation(nodeType: string): Promise<any> {\n    // This would fetch actual node documentation from n8n\n    return {\n      nodeType,\n      name: nodeType.split('.').pop(),\n      description: `Documentation for ${nodeType}`,\n      parameters: [],\n      examples: [],\n      resourceInfo: {\n        uri: `${this.config.baseUri}nodes/${nodeType}`,\n        type: 'n8n-node-documentation',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential types\n   */\n  private async getCredentialTypes(): Promise<any> {\n    return {\n      credentialTypes: [\n        {\n          name: 'httpBasicAuth',\n          displayName: 'Basic Auth',\n          properties: ['user', 'password'],\n        },\n        {\n          name: 'httpHeaderAuth',\n          displayName: 'Header Auth',\n          properties: ['name', 'value'],\n        },\n        // More credential types\n      ],\n      metadata: {\n        totalTypes: 50, // Example count\n        lastUpdated: new Date().toISOString(),\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/types`,\n        type: 'n8n-credential-types',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get credential template (without sensitive data)\n   */\n  private async getCredentialTemplate(credType: string): Promise<any> {\n    return {\n      credentialType: credType,\n      template: {\n        name: `${credType} Template`,\n        type: credType,\n        data: {\n          // Template structure without actual values\n          fields: ['user', 'password'], // Example fields\n        },\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}credentials/template/${credType}`,\n        type: 'n8n-credential-template',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Get n8n instance information\n   */\n  private async getInstanceInfo(client: N8nClient): Promise<any> {\n    try {\n      // Attempt to gather instance information\n      const workflows = await client.getWorkflows({ limit: 1 });\n      const executions = await client.getExecutions({ limit: 1 });\n\n      return {\n        status: 'connected',\n        features: {\n          workflows: true,\n          executions: true,\n          // Test for Enterprise features\n          projects: await this.testFeature(() => client.getProjects({ limit: 1 })),\n          users: await this.testFeature(() => client.getUsers({ limit: 1 })),\n          variables: await this.testFeature(() => client.getVariables({ limit: 1 })),\n        },\n        statistics: {\n          totalWorkflows: workflows.data.length,\n          totalExecutions: executions.data.length,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    } catch (error) {\n      return {\n        status: 'error',\n        error: error instanceof Error ? error.message : String(error),\n        resourceInfo: {\n          uri: `${this.config.baseUri}info`,\n          type: 'n8n-instance-info',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n    }\n  }\n\n  /**\n   * Test if a feature is available\n   */\n  private async testFeature(testFn: () => Promise<any>): Promise<boolean> {\n    try {\n      await testFn();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Get resource directory\n   */\n  private getResourceDirectory(): any {\n    const resources: any[] = [];\n\n    if (this.config.enableWorkflows) {\n      resources.push({\n        name: 'Workflows',\n        baseUri: `${this.config.baseUri}workflows`,\n        description: 'Access n8n workflow definitions and metadata',\n        endpoints: [\n          `${this.config.baseUri}workflows/list`,\n          `${this.config.baseUri}workflows/active`,\n          `${this.config.baseUri}workflows/stats`,\n          `${this.config.baseUri}workflows/{id}`,\n        ],\n      });\n    }\n\n    if (this.config.enableExecutions) {\n      resources.push({\n        name: 'Executions',\n        baseUri: `${this.config.baseUri}executions`,\n        description: 'Access n8n execution data, logs, and statistics',\n        endpoints: [\n          `${this.config.baseUri}executions/recent`,\n          `${this.config.baseUri}executions/failures`,\n          `${this.config.baseUri}executions/stats`,\n          `${this.config.baseUri}executions/{id}`,\n          `${this.config.baseUri}executions/{id}/logs`,\n        ],\n      });\n    }\n\n    if (this.config.enableNodes) {\n      resources.push({\n        name: 'Nodes',\n        baseUri: `${this.config.baseUri}nodes`,\n        description: 'Access n8n node documentation and information',\n        endpoints: [\n          `${this.config.baseUri}nodes/available`,\n          `${this.config.baseUri}nodes/{nodeType}`,\n        ],\n      });\n    }\n\n    return {\n      resources,\n      metadata: {\n        totalResources: resources.length,\n        baseUri: this.config.baseUri,\n        version: '1.0',\n      },\n      resourceInfo: {\n        uri: `${this.config.baseUri}index`,\n        type: 'n8n-resource-directory',\n        version: '1.0',\n        lastAccessed: new Date().toISOString(),\n      },\n    };\n  }\n\n  /**\n   * Clear all resource caches\n   */\n  public clearAllCaches(): void {\n    this.workflowResources?.clearCache();\n    this.executionResources?.clearCache();\n    console.log('\uD83E\uDDF9 All resource caches cleared');\n  }\n\n  /**\n   * Get cache statistics for all resources\n   */\n  public getAllCacheStats(): any {\n    return {\n      workflows: this.workflowResources?.getCacheStats() || { size: 0, keys: [] },\n      executions: this.executionResources?.getCacheStats() || { size: 0, keys: [] },\n    };\n  }\n}\n\n/**\n * Create resource manager\n */\nexport function createResourceManager(config?: ResourceManagerConfig): ResourceManager {\n  return new ResourceManager(config);\n}\n\n/**\n * Environment variable configuration for resources\n */\nexport const RESOURCE_ENV_CONFIG = {\n  /** Base URI for resources */\n  BASE_URI: 'N8N_MCP_RESOURCE_BASE_URI',\n\n  /** Enable/disable specific resource types */\n  ENABLE_WORKFLOWS: 'N8N_MCP_ENABLE_WORKFLOW_RESOURCES',\n  ENABLE_EXECUTIONS: 'N8N_MCP_ENABLE_EXECUTION_RESOURCES',\n  ENABLE_CREDENTIALS: 'N8N_MCP_ENABLE_CREDENTIAL_RESOURCES',\n  ENABLE_NODES: 'N8N_MCP_ENABLE_NODE_RESOURCES',\n\n  /** Global configuration */\n  CACHE_DURATION: 'N8N_MCP_RESOURCE_CACHE_DURATION',\n  MAX_ITEMS: 'N8N_MCP_RESOURCE_MAX_ITEMS',\n} as const;\n\n/**\n * Parse resource configuration from environment variables\n */\nexport function parseResourceConfigFromEnv(): ResourceManagerConfig {\n  return {\n    baseUri: process.env[RESOURCE_ENV_CONFIG.BASE_URI] || undefined,\n    enableWorkflows: process.env[RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] !== 'false',\n    enableExecutions: process.env[RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS] !== 'false',\n    enableCredentials: process.env[RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] === 'true',\n    enableNodes: process.env[RESOURCE_ENV_CONFIG.ENABLE_NODES] !== 'false',\n    globalCacheDuration: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION];\n      return value ? parseInt(value) : undefined;\n    })(),\n    maxItems: (() => {\n      const value = process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS];\n      return value ? parseInt(value) : undefined;\n    })(),\n  };\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "142fc8ad3f6d686fc075be4eb7d892a04db34dc4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2dbxy2tc76 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2dbxy2tc76();
/**
 * Resource Manager for n8n MCP Server
 *
 * Central coordinator for all MCP resources, managing registration,
 * configuration, and lifecycle of resource providers.
 */
import { createWorkflowResources } from './workflowResources.js';
import { createExecutionResources } from './executionResources.js';
/**
 * Central resource manager
 *
 * Coordinates all resource providers and handles global resource configuration.
 */
export class ResourceManager {
  config;
  workflowResources;
  executionResources;
  constructor(config =
  /* istanbul ignore next */
  (cov_2dbxy2tc76().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[0]++;
    cov_2dbxy2tc76().s[0]++;
    this.config = {
      baseUri: 'n8n://',
      enableWorkflows: true,
      enableExecutions: true,
      enableCredentials: false,
      // Disabled by default for security
      enableNodes: true,
      globalCacheDuration: 5 * 60 * 1000,
      // 5 minutes
      maxItems: 100,
      ...config
    };
  }
  /**
   * Register all enabled resources with FastMCP server
   */
  register(server, getClient) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[1]++;
    cov_2dbxy2tc76().s[1]++;
    console.log('📚 Registering n8n MCP resources...');
    // Register workflow resources
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[2]++;
    if (this.config.enableWorkflows) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[1][0]++;
      cov_2dbxy2tc76().s[3]++;
      this.workflowResources = createWorkflowResources({
        baseUri: `${this.config.baseUri}workflows`,
        maxWorkflows: this.config.maxItems,
        cacheDuration: this.config.globalCacheDuration
      });
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[4]++;
      this.workflowResources.register(server, getClient);
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[1][1]++;
    }
    // Register execution resources
    cov_2dbxy2tc76().s[5]++;
    if (this.config.enableExecutions) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[2][0]++;
      cov_2dbxy2tc76().s[6]++;
      this.executionResources = createExecutionResources({
        baseUri: `${this.config.baseUri}executions`,
        maxExecutions: this.config.maxItems,
        cacheDuration: this.config.globalCacheDuration
      });
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[7]++;
      this.executionResources.register(server, getClient);
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[2][1]++;
    }
    // Register node documentation resources
    cov_2dbxy2tc76().s[8]++;
    if (this.config.enableNodes) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[3][0]++;
      cov_2dbxy2tc76().s[9]++;
      this.registerNodeResources(server, getClient);
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[3][1]++;
    }
    // Register credential template resources (if enabled)
    cov_2dbxy2tc76().s[10]++;
    if (this.config.enableCredentials) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[4][0]++;
      cov_2dbxy2tc76().s[11]++;
      this.registerCredentialResources(server, getClient);
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[4][1]++;
    }
    // Register general n8n information resources
    cov_2dbxy2tc76().s[12]++;
    this.registerGeneralResources(server, getClient);
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[13]++;
    console.log('✅ All n8n MCP resources registered');
  }
  /**
   * Register node documentation resources
   */
  registerNodeResources(server, getClient) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[2]++;
    cov_2dbxy2tc76().s[14]++;
    // Available nodes resource
    server.addResource({
      uri: `${this.config.baseUri}nodes/available`,
      name: 'n8n Available Nodes',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[3]++;
        const nodes =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[15]++, await this.getAvailableNodes());
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[16]++;
        return {
          text: JSON.stringify(nodes, null, 2)
        };
      }
    });
    // Node documentation template
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[17]++;
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}nodes/{nodeType}`,
      name: 'n8n Node Documentation',
      mimeType: 'application/json',
      arguments: [{
        name: 'nodeType',
        description: 'The type of n8n node (e.g., "n8n-nodes-base.httpRequest")',
        required: true
      }],
      load: async ({
        nodeType
      }) => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[4]++;
        const nodeDoc =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[18]++, await this.getNodeDocumentation(nodeType));
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[19]++;
        return {
          text: JSON.stringify(nodeDoc, null, 2)
        };
      }
    });
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[20]++;
    console.log('📦 Node resources registered');
  }
  /**
   * Register credential template resources
   */
  registerCredentialResources(server, getClient) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[5]++;
    cov_2dbxy2tc76().s[21]++;
    // Credential types resource
    server.addResource({
      uri: `${this.config.baseUri}credentials/types`,
      name: 'n8n Credential Types',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[6]++;
        const credTypes =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[22]++, await this.getCredentialTypes());
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[23]++;
        return {
          text: JSON.stringify(credTypes, null, 2)
        };
      }
    });
    // Credential template
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[24]++;
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}credentials/template/{credType}`,
      name: 'n8n Credential Template',
      mimeType: 'application/json',
      arguments: [{
        name: 'credType',
        description: 'The credential type name',
        required: true
      }],
      load: async ({
        credType
      }) => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[7]++;
        const template =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[25]++, await this.getCredentialTemplate(credType));
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[26]++;
        return {
          text: JSON.stringify(template, null, 2)
        };
      }
    });
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[27]++;
    console.log('🔐 Credential resources registered');
  }
  /**
   * Register general n8n information resources
   */
  registerGeneralResources(server, getClient) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[8]++;
    cov_2dbxy2tc76().s[28]++;
    // n8n instance information
    server.addResource({
      uri: `${this.config.baseUri}info`,
      name: 'n8n Instance Information',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[9]++;
        const client =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[29]++, getClient());
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[30]++;
        if (!client) {
          /* istanbul ignore next */
          cov_2dbxy2tc76().b[5][0]++;
          cov_2dbxy2tc76().s[31]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_2dbxy2tc76().b[5][1]++;
        }
        const info =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[32]++, await this.getInstanceInfo(client));
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[33]++;
        return {
          text: JSON.stringify(info, null, 2)
        };
      }
    });
    // Resource directory/index
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[34]++;
    server.addResource({
      uri: `${this.config.baseUri}index`,
      name: 'n8n Resource Directory',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_2dbxy2tc76().f[10]++;
        const directory =
        /* istanbul ignore next */
        (cov_2dbxy2tc76().s[35]++, this.getResourceDirectory());
        /* istanbul ignore next */
        cov_2dbxy2tc76().s[36]++;
        return {
          text: JSON.stringify(directory, null, 2)
        };
      }
    });
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[37]++;
    console.log('ℹ️  General resources registered');
  }
  /**
   * Get available n8n nodes (mock data - would need to be retrieved from n8n API)
   */
  async getAvailableNodes() {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[11]++;
    cov_2dbxy2tc76().s[38]++;
    // This would typically fetch from n8n API or node registry
    return {
      nodes: [{
        name: 'HTTP Request',
        type: 'n8n-nodes-base.httpRequest',
        description: 'Makes HTTP requests and returns the response data',
        category: 'Core Nodes',
        version: 1
      }, {
        name: 'Code',
        type: 'n8n-nodes-base.code',
        description: 'Run custom JavaScript code',
        category: 'Core Nodes',
        version: 1
      }, {
        name: 'If',
        type: 'n8n-nodes-base.if',
        description: 'Conditional routing based on comparison operations',
        category: 'Core Nodes',
        version: 1
      }
      // More nodes would be listed here
      ],
      metadata: {
        totalNodes: 500,
        // Example count
        categories: ['Core Nodes', 'Trigger Nodes', 'Regular Nodes'],
        lastUpdated: new Date().toISOString()
      },
      resourceInfo: {
        uri: `${this.config.baseUri}nodes/available`,
        type: 'n8n-available-nodes',
        version: '1.0',
        lastAccessed: new Date().toISOString()
      }
    };
  }
  /**
   * Get node documentation
   */
  async getNodeDocumentation(nodeType) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[12]++;
    cov_2dbxy2tc76().s[39]++;
    // This would fetch actual node documentation from n8n
    return {
      nodeType,
      name: nodeType.split('.').pop(),
      description: `Documentation for ${nodeType}`,
      parameters: [],
      examples: [],
      resourceInfo: {
        uri: `${this.config.baseUri}nodes/${nodeType}`,
        type: 'n8n-node-documentation',
        version: '1.0',
        lastAccessed: new Date().toISOString()
      }
    };
  }
  /**
   * Get credential types
   */
  async getCredentialTypes() {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[13]++;
    cov_2dbxy2tc76().s[40]++;
    return {
      credentialTypes: [{
        name: 'httpBasicAuth',
        displayName: 'Basic Auth',
        properties: ['user', 'password']
      }, {
        name: 'httpHeaderAuth',
        displayName: 'Header Auth',
        properties: ['name', 'value']
      }
      // More credential types
      ],
      metadata: {
        totalTypes: 50,
        // Example count
        lastUpdated: new Date().toISOString()
      },
      resourceInfo: {
        uri: `${this.config.baseUri}credentials/types`,
        type: 'n8n-credential-types',
        version: '1.0',
        lastAccessed: new Date().toISOString()
      }
    };
  }
  /**
   * Get credential template (without sensitive data)
   */
  async getCredentialTemplate(credType) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[14]++;
    cov_2dbxy2tc76().s[41]++;
    return {
      credentialType: credType,
      template: {
        name: `${credType} Template`,
        type: credType,
        data: {
          // Template structure without actual values
          fields: ['user', 'password'] // Example fields
        }
      },
      resourceInfo: {
        uri: `${this.config.baseUri}credentials/template/${credType}`,
        type: 'n8n-credential-template',
        version: '1.0',
        lastAccessed: new Date().toISOString()
      }
    };
  }
  /**
   * Get n8n instance information
   */
  async getInstanceInfo(client) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[15]++;
    cov_2dbxy2tc76().s[42]++;
    try {
      // Attempt to gather instance information
      const workflows =
      /* istanbul ignore next */
      (cov_2dbxy2tc76().s[43]++, await client.getWorkflows({
        limit: 1
      }));
      const executions =
      /* istanbul ignore next */
      (cov_2dbxy2tc76().s[44]++, await client.getExecutions({
        limit: 1
      }));
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[45]++;
      return {
        status: 'connected',
        features: {
          workflows: true,
          executions: true,
          // Test for Enterprise features
          projects: await this.testFeature(() => {
            /* istanbul ignore next */
            cov_2dbxy2tc76().f[16]++;
            cov_2dbxy2tc76().s[46]++;
            return client.getProjects({
              limit: 1
            });
          }),
          users: await this.testFeature(() => {
            /* istanbul ignore next */
            cov_2dbxy2tc76().f[17]++;
            cov_2dbxy2tc76().s[47]++;
            return client.getUsers({
              limit: 1
            });
          }),
          variables: await this.testFeature(() => {
            /* istanbul ignore next */
            cov_2dbxy2tc76().f[18]++;
            cov_2dbxy2tc76().s[48]++;
            return client.getVariables({
              limit: 1
            });
          })
        },
        statistics: {
          totalWorkflows: workflows.data.length,
          totalExecutions: executions.data.length
        },
        resourceInfo: {
          uri: `${this.config.baseUri}info`,
          type: 'n8n-instance-info',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[49]++;
      return {
        status: 'error',
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_2dbxy2tc76().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2dbxy2tc76().b[6][1]++, String(error)),
        resourceInfo: {
          uri: `${this.config.baseUri}info`,
          type: 'n8n-instance-info',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      };
    }
  }
  /**
   * Test if a feature is available
   */
  async testFeature(testFn) {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[19]++;
    cov_2dbxy2tc76().s[50]++;
    try {
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[51]++;
      await testFn();
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[52]++;
      return true;
    } catch {
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[53]++;
      return false;
    }
  }
  /**
   * Get resource directory
   */
  getResourceDirectory() {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[20]++;
    const resources =
    /* istanbul ignore next */
    (cov_2dbxy2tc76().s[54]++, []);
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[55]++;
    if (this.config.enableWorkflows) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[7][0]++;
      cov_2dbxy2tc76().s[56]++;
      resources.push({
        name: 'Workflows',
        baseUri: `${this.config.baseUri}workflows`,
        description: 'Access n8n workflow definitions and metadata',
        endpoints: [`${this.config.baseUri}workflows/list`, `${this.config.baseUri}workflows/active`, `${this.config.baseUri}workflows/stats`, `${this.config.baseUri}workflows/{id}`]
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[7][1]++;
    }
    cov_2dbxy2tc76().s[57]++;
    if (this.config.enableExecutions) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[8][0]++;
      cov_2dbxy2tc76().s[58]++;
      resources.push({
        name: 'Executions',
        baseUri: `${this.config.baseUri}executions`,
        description: 'Access n8n execution data, logs, and statistics',
        endpoints: [`${this.config.baseUri}executions/recent`, `${this.config.baseUri}executions/failures`, `${this.config.baseUri}executions/stats`, `${this.config.baseUri}executions/{id}`, `${this.config.baseUri}executions/{id}/logs`]
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[8][1]++;
    }
    cov_2dbxy2tc76().s[59]++;
    if (this.config.enableNodes) {
      /* istanbul ignore next */
      cov_2dbxy2tc76().b[9][0]++;
      cov_2dbxy2tc76().s[60]++;
      resources.push({
        name: 'Nodes',
        baseUri: `${this.config.baseUri}nodes`,
        description: 'Access n8n node documentation and information',
        endpoints: [`${this.config.baseUri}nodes/available`, `${this.config.baseUri}nodes/{nodeType}`]
      });
    } else
    /* istanbul ignore next */
    {
      cov_2dbxy2tc76().b[9][1]++;
    }
    cov_2dbxy2tc76().s[61]++;
    return {
      resources,
      metadata: {
        totalResources: resources.length,
        baseUri: this.config.baseUri,
        version: '1.0'
      },
      resourceInfo: {
        uri: `${this.config.baseUri}index`,
        type: 'n8n-resource-directory',
        version: '1.0',
        lastAccessed: new Date().toISOString()
      }
    };
  }
  /**
   * Clear all resource caches
   */
  clearAllCaches() {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[21]++;
    cov_2dbxy2tc76().s[62]++;
    this.workflowResources?.clearCache();
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[63]++;
    this.executionResources?.clearCache();
    /* istanbul ignore next */
    cov_2dbxy2tc76().s[64]++;
    console.log('🧹 All resource caches cleared');
  }
  /**
   * Get cache statistics for all resources
   */
  getAllCacheStats() {
    /* istanbul ignore next */
    cov_2dbxy2tc76().f[22]++;
    cov_2dbxy2tc76().s[65]++;
    return {
      workflows:
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[10][0]++, this.workflowResources?.getCacheStats()) ||
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[10][1]++, {
        size: 0,
        keys: []
      }),
      executions:
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[11][0]++, this.executionResources?.getCacheStats()) ||
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[11][1]++, {
        size: 0,
        keys: []
      })
    };
  }
}
/**
 * Create resource manager
 */
export function createResourceManager(config) {
  /* istanbul ignore next */
  cov_2dbxy2tc76().f[23]++;
  cov_2dbxy2tc76().s[66]++;
  return new ResourceManager(config);
}
/**
 * Environment variable configuration for resources
 */
export const RESOURCE_ENV_CONFIG =
/* istanbul ignore next */
(cov_2dbxy2tc76().s[67]++, {
  /** Base URI for resources */
  BASE_URI: 'N8N_MCP_RESOURCE_BASE_URI',
  /** Enable/disable specific resource types */
  ENABLE_WORKFLOWS: 'N8N_MCP_ENABLE_WORKFLOW_RESOURCES',
  ENABLE_EXECUTIONS: 'N8N_MCP_ENABLE_EXECUTION_RESOURCES',
  ENABLE_CREDENTIALS: 'N8N_MCP_ENABLE_CREDENTIAL_RESOURCES',
  ENABLE_NODES: 'N8N_MCP_ENABLE_NODE_RESOURCES',
  /** Global configuration */
  CACHE_DURATION: 'N8N_MCP_RESOURCE_CACHE_DURATION',
  MAX_ITEMS: 'N8N_MCP_RESOURCE_MAX_ITEMS'
});
/**
 * Parse resource configuration from environment variables
 */
export function parseResourceConfigFromEnv() {
  /* istanbul ignore next */
  cov_2dbxy2tc76().f[24]++;
  cov_2dbxy2tc76().s[68]++;
  return {
    baseUri:
    /* istanbul ignore next */
    (cov_2dbxy2tc76().b[12][0]++, process.env[RESOURCE_ENV_CONFIG.BASE_URI]) ||
    /* istanbul ignore next */
    (cov_2dbxy2tc76().b[12][1]++, undefined),
    enableWorkflows: process.env[RESOURCE_ENV_CONFIG.ENABLE_WORKFLOWS] !== 'false',
    enableExecutions: process.env[RESOURCE_ENV_CONFIG.ENABLE_EXECUTIONS] !== 'false',
    enableCredentials: process.env[RESOURCE_ENV_CONFIG.ENABLE_CREDENTIALS] === 'true',
    enableNodes: process.env[RESOURCE_ENV_CONFIG.ENABLE_NODES] !== 'false',
    globalCacheDuration: (() => {
      /* istanbul ignore next */
      cov_2dbxy2tc76().f[25]++;
      const value =
      /* istanbul ignore next */
      (cov_2dbxy2tc76().s[69]++, process.env[RESOURCE_ENV_CONFIG.CACHE_DURATION]);
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[70]++;
      return value ?
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[13][0]++, parseInt(value)) :
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[13][1]++, undefined);
    })(),
    maxItems: (() => {
      /* istanbul ignore next */
      cov_2dbxy2tc76().f[26]++;
      const value =
      /* istanbul ignore next */
      (cov_2dbxy2tc76().s[71]++, process.env[RESOURCE_ENV_CONFIG.MAX_ITEMS]);
      /* istanbul ignore next */
      cov_2dbxy2tc76().s[72]++;
      return value ?
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[14][0]++, parseInt(value)) :
      /* istanbul ignore next */
      (cov_2dbxy2tc76().b[14][1]++, undefined);
    })()
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,