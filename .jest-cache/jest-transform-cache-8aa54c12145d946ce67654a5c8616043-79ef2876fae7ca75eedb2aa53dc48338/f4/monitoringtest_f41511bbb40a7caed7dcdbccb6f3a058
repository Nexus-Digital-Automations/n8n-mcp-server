704274e38ac0ae735b61f36791930809
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const monitoringClient_js_1 = require("../src/client/monitoringClient.js");
// Create a proper mock for N8nClient with explicit typing
const mockGetWorkflows = globals_1.jest.fn();
const mockGetWorkflow = globals_1.jest.fn();
const mockGetExecutions = globals_1.jest.fn();
const mockN8nClient = {
    getWorkflows: mockGetWorkflows,
    getWorkflow: mockGetWorkflow,
    getExecutions: mockGetExecutions,
};
(0, globals_1.describe)('Monitoring Client', () => {
    let monitoringClient;
    const baseUrl = 'http://localhost:5678';
    const apiKey = 'test-api-key';
    (0, globals_1.beforeAll)(() => {
        monitoringClient = new monitoringClient_js_1.MonitoringClient(mockN8nClient, baseUrl, apiKey);
    });
    (0, globals_1.describe)('System Resource Usage', () => {
        (0, globals_1.it)('should return current system resource usage', () => {
            const usage = monitoringClient.getSystemResourceUsage();
            (0, globals_1.expect)(usage).toBeDefined();
            (0, globals_1.expect)(usage.timestamp).toBeDefined();
            (0, globals_1.expect)(usage.cpu).toBeDefined();
            (0, globals_1.expect)(usage.memory).toBeDefined();
            (0, globals_1.expect)(usage.disk).toBeDefined();
            (0, globals_1.expect)(usage.network).toBeDefined();
            (0, globals_1.expect)(usage.uptime).toBeGreaterThan(0);
            // CPU checks
            (0, globals_1.expect)(usage.cpu.totalUsage).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(usage.cpu.totalUsage).toBeLessThanOrEqual(100);
            (0, globals_1.expect)(usage.cpu.coreCount).toBeGreaterThan(0);
            (0, globals_1.expect)(Array.isArray(usage.cpu.loadAverage)).toBe(true);
            // Memory checks
            (0, globals_1.expect)(usage.memory.totalMemory).toBeGreaterThan(0);
            (0, globals_1.expect)(usage.memory.freeMemory).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(usage.memory.usedMemory).toBeGreaterThan(0);
            (0, globals_1.expect)(usage.memory.utilization).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(usage.memory.utilization).toBeLessThanOrEqual(100);
            (0, globals_1.expect)(usage.memory.processMemory.heapUsed).toBeGreaterThan(0);
            (0, globals_1.expect)(usage.memory.processMemory.heapTotal).toBeGreaterThan(0);
            (0, globals_1.expect)(usage.memory.processMemory.rss).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should have consistent memory calculations', () => {
            const usage = monitoringClient.getSystemResourceUsage();
            // Total memory should equal used + free
            (0, globals_1.expect)(usage.memory.totalMemory).toBeCloseTo(usage.memory.usedMemory + usage.memory.freeMemory, -3 // Allow for some variance in bytes
            );
            // Utilization should match calculated percentage
            const calculatedUtilization = (usage.memory.usedMemory / usage.memory.totalMemory) * 100;
            (0, globals_1.expect)(usage.memory.utilization).toBeCloseTo(calculatedUtilization, 1);
        });
    });
    (0, globals_1.describe)('Health Check Functions', () => {
        (0, globals_1.it)('should perform manual health check when API unavailable', async () => {
            // Mock getWorkflows to simulate database connectivity
            mockGetWorkflows.mockResolvedValue({ data: [] });
            const healthCheck = await monitoringClient.getHealthCheck();
            (0, globals_1.expect)(healthCheck).toBeDefined();
            (0, globals_1.expect)(healthCheck.status).toBeDefined();
            (0, globals_1.expect)(['healthy', 'warning', 'critical', 'degraded']).toContain(healthCheck.status);
            (0, globals_1.expect)(healthCheck.database).toBeDefined();
            (0, globals_1.expect)(healthCheck.database.status).toBeDefined();
            (0, globals_1.expect)(healthCheck.database.responseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(healthCheck.filesystem).toBeDefined();
            (0, globals_1.expect)(healthCheck.uptime).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should handle database connection errors', async () => {
            // Mock getWorkflows to throw an error
            mockGetWorkflows.mockRejectedValue(new Error('Connection failed'));
            const healthCheck = await monitoringClient.getHealthCheck();
            (0, globals_1.expect)(healthCheck.status).toBe('critical');
            (0, globals_1.expect)(healthCheck.database.status).toBe('error');
            (0, globals_1.expect)(healthCheck.filesystem.status).toBe('error');
        });
    });
    (0, globals_1.describe)('Connectivity Testing', () => {
        (0, globals_1.it)('should test connectivity successfully', async () => {
            mockGetWorkflows.mockResolvedValue({ data: [] });
            const result = await monitoringClient.testConnectivity();
            (0, globals_1.expect)(result).toBeDefined();
            (0, globals_1.expect)(result.success).toBe(true);
            (0, globals_1.expect)(result.responseTime).toBeGreaterThan(0);
            (0, globals_1.expect)(result.error).toBeUndefined();
        });
        (0, globals_1.it)('should handle connectivity failures', async () => {
            mockGetWorkflows.mockRejectedValue(new Error('Network error'));
            const result = await monitoringClient.testConnectivity();
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.responseTime).toBeGreaterThan(0);
            (0, globals_1.expect)(result.error).toBeDefined();
            (0, globals_1.expect)(result.error).toContain('Network error');
        });
    });
    (0, globals_1.describe)('System Diagnostics', () => {
        (0, globals_1.it)('should generate comprehensive system diagnostics', async () => {
            mockGetWorkflows.mockResolvedValue({ data: [] });
            const diagnostics = await monitoringClient.getSystemDiagnostics();
            (0, globals_1.expect)(diagnostics).toBeDefined();
            (0, globals_1.expect)(diagnostics.timestamp).toBeDefined();
            (0, globals_1.expect)(diagnostics.overall).toBeDefined();
            (0, globals_1.expect)(diagnostics.overall.status).toBeDefined();
            (0, globals_1.expect)(Array.isArray(diagnostics.overall.issues)).toBe(true);
            (0, globals_1.expect)(Array.isArray(diagnostics.overall.recommendations)).toBe(true);
            (0, globals_1.expect)(diagnostics.connectivity).toBeDefined();
            (0, globals_1.expect)(typeof diagnostics.connectivity.apiConnectivity).toBe('boolean');
            (0, globals_1.expect)(diagnostics.connectivity.responseTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(diagnostics.resources).toBeDefined();
            (0, globals_1.expect)(diagnostics.environment).toBeDefined();
            (0, globals_1.expect)(diagnostics.environment.nodeVersion).toBeDefined();
            (0, globals_1.expect)(diagnostics.environment.platform).toBeDefined();
            (0, globals_1.expect)(diagnostics.environment.architecture).toBeDefined();
            (0, globals_1.expect)(diagnostics.environment.uptime).toBeGreaterThan(0);
        });
        (0, globals_1.it)('should provide recommendations based on resource usage', async () => {
            mockGetWorkflows.mockResolvedValue({ data: [] });
            // Mock high resource usage by modifying the method temporarily
            const originalMethod = monitoringClient.getSystemResourceUsage;
            monitoringClient.getSystemResourceUsage = () => ({
                ...originalMethod.call(monitoringClient),
                memory: {
                    ...originalMethod.call(monitoringClient).memory,
                    utilization: 90, // High memory usage
                },
                cpu: {
                    ...originalMethod.call(monitoringClient).cpu,
                    totalUsage: 85, // High CPU usage
                },
            });
            const diagnostics = await monitoringClient.getSystemDiagnostics();
            (0, globals_1.expect)(diagnostics.overall.issues.length).toBeGreaterThan(0);
            (0, globals_1.expect)(diagnostics.overall.recommendations.length).toBeGreaterThan(0);
            // Restore original method
            monitoringClient.getSystemResourceUsage = originalMethod;
        });
    });
    (0, globals_1.describe)('Metrics Collection', () => {
        (0, globals_1.it)('should collect comprehensive metrics', async () => {
            // Mock workflow and execution data
            const mockWorkflows = [
                { id: '1', name: 'Workflow 1', active: true, nodes: [{ id: 'node1', type: 'test' }] },
                { id: '2', name: 'Workflow 2', active: false, nodes: [] },
            ];
            const mockExecutions = [
                {
                    id: '1',
                    workflowId: '1',
                    finished: true,
                    startedAt: new Date(Date.now() - 1000).toISOString(),
                    stoppedAt: undefined,
                },
                {
                    id: '2',
                    workflowId: '1',
                    finished: true,
                    startedAt: new Date(Date.now() - 2000).toISOString(),
                    stoppedAt: new Date(Date.now() - 1500).toISOString(),
                },
            ];
            mockGetWorkflows.mockResolvedValue({ data: mockWorkflows });
            mockGetExecutions.mockResolvedValue({ data: mockExecutions });
            const metrics = await monitoringClient.getMetrics();
            (0, globals_1.expect)(metrics).toBeDefined();
            (0, globals_1.expect)(metrics.timestamp).toBeDefined();
            // Check execution metrics
            (0, globals_1.expect)(metrics.executions).toBeDefined();
            (0, globals_1.expect)(metrics.executions.total).toBe(2);
            (0, globals_1.expect)(metrics.executions.successful).toBe(1);
            (0, globals_1.expect)(metrics.executions.failed).toBe(1);
            // Check workflow metrics
            (0, globals_1.expect)(metrics.workflows).toBeDefined();
            (0, globals_1.expect)(metrics.workflows.total).toBe(2);
            (0, globals_1.expect)(metrics.workflows.active).toBe(1);
            (0, globals_1.expect)(metrics.workflows.inactive).toBe(1);
            (0, globals_1.expect)(metrics.workflows.withIssues).toBe(1); // Workflow with no nodes
            // Check performance metrics
            (0, globals_1.expect)(metrics.performance).toBeDefined();
            (0, globals_1.expect)(metrics.performance.averageExecutionTime).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(metrics.performance.throughput).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(metrics.performance.errorRate).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(metrics.performance.errorRate).toBeLessThanOrEqual(100);
            // Check system metrics
            (0, globals_1.expect)(metrics.system).toBeDefined();
        });
    });
    (0, globals_1.describe)('Workflow Diagnostics', () => {
        (0, globals_1.it)('should analyze workflow health', async () => {
            const mockWorkflow = {
                id: 'test-workflow',
                name: 'Test Workflow',
                active: true,
                nodes: [
                    { id: 'node1', name: 'Start', type: 'manual', disabled: false },
                    { id: 'node2', name: 'Process', type: 'function', disabled: false },
                ],
            };
            const mockExecutions = [
                {
                    id: '1',
                    workflowId: 'test-workflow',
                    finished: true,
                    startedAt: new Date(Date.now() - 5000).toISOString(),
                    stoppedAt: undefined, // Success
                },
                {
                    id: '2',
                    workflowId: 'test-workflow',
                    finished: true,
                    startedAt: new Date(Date.now() - 10000).toISOString(),
                    stoppedAt: new Date(Date.now() - 8000).toISOString(), // Failed
                },
            ];
            mockGetWorkflow.mockResolvedValue(mockWorkflow);
            mockGetExecutions.mockResolvedValue({ data: mockExecutions });
            const diagnostics = await monitoringClient.getWorkflowDiagnostics('test-workflow');
            (0, globals_1.expect)(diagnostics).toBeDefined();
            (0, globals_1.expect)(diagnostics.workflowId).toBe('test-workflow');
            (0, globals_1.expect)(diagnostics.workflowName).toBe('Test Workflow');
            (0, globals_1.expect)(diagnostics.health).toBeDefined();
            (0, globals_1.expect)(['healthy', 'warning', 'critical']).toContain(diagnostics.health.status);
            (0, globals_1.expect)(Array.isArray(diagnostics.health.issues)).toBe(true);
            (0, globals_1.expect)(Array.isArray(diagnostics.health.recommendations)).toBe(true);
            (0, globals_1.expect)(diagnostics.performance).toBeDefined();
            (0, globals_1.expect)(diagnostics.performance.successRate).toBe(50); // 1 success out of 2
            (0, globals_1.expect)(Array.isArray(diagnostics.performance.recentExecutions)).toBe(true);
            (0, globals_1.expect)(diagnostics.performance.recentExecutions).toHaveLength(2);
            (0, globals_1.expect)(diagnostics.nodes).toBeDefined();
            (0, globals_1.expect)(diagnostics.nodes).toHaveLength(2);
            (0, globals_1.expect)(diagnostics.nodes[0].id).toBe('node1');
            (0, globals_1.expect)(diagnostics.nodes[1].id).toBe('node2');
        });
    });
});
(0, globals_1.describe)('Monitoring Utility Functions', () => {
    (0, globals_1.describe)('Data Validation', () => {
        (0, globals_1.it)('should validate system resource usage structure', () => {
            const mockClient = new monitoringClient_js_1.MonitoringClient(mockN8nClient, 'http://test', 'key');
            const usage = mockClient.getSystemResourceUsage();
            // Required properties
            const requiredProps = ['cpu', 'memory', 'disk', 'network', 'uptime', 'timestamp'];
            requiredProps.forEach(prop => {
                (0, globals_1.expect)(usage).toHaveProperty(prop);
            });
            // CPU structure
            (0, globals_1.expect)(usage.cpu).toHaveProperty('totalUsage');
            (0, globals_1.expect)(usage.cpu).toHaveProperty('processUsage');
            (0, globals_1.expect)(usage.cpu).toHaveProperty('loadAverage');
            (0, globals_1.expect)(usage.cpu).toHaveProperty('coreCount');
            // Memory structure
            (0, globals_1.expect)(usage.memory).toHaveProperty('totalMemory');
            (0, globals_1.expect)(usage.memory).toHaveProperty('freeMemory');
            (0, globals_1.expect)(usage.memory).toHaveProperty('usedMemory');
            (0, globals_1.expect)(usage.memory).toHaveProperty('processMemory');
            (0, globals_1.expect)(usage.memory).toHaveProperty('utilization');
            (0, globals_1.expect)(usage.memory.processMemory).toHaveProperty('heapUsed');
            (0, globals_1.expect)(usage.memory.processMemory).toHaveProperty('heapTotal');
            (0, globals_1.expect)(usage.memory.processMemory).toHaveProperty('external');
            (0, globals_1.expect)(usage.memory.processMemory).toHaveProperty('rss');
        });
        (0, globals_1.it)('should produce valid timestamp format', () => {
            const mockClient = new monitoringClient_js_1.MonitoringClient(mockN8nClient, 'http://test', 'key');
            const usage = mockClient.getSystemResourceUsage();
            (0, globals_1.expect)(() => new Date(usage.timestamp)).not.toThrow();
            (0, globals_1.expect)(new Date(usage.timestamp).getTime()).toBeGreaterThan(0);
        });
    });
    (0, globals_1.describe)('Error Handling', () => {
        (0, globals_1.it)('should handle missing required parameters gracefully', () => {
            // Test client creation with invalid parameters
            (0, globals_1.expect)(() => {
                new monitoringClient_js_1.MonitoringClient(null, '', '');
            }).not.toThrow();
        });
        (0, globals_1.it)('should handle network timeouts appropriately', async () => {
            mockGetWorkflows.mockImplementation(() => {
                return new Promise((_, reject) => {
                    setTimeout(() => reject(new Error('Timeout')), 1000);
                });
            });
            const mockClient = new monitoringClient_js_1.MonitoringClient(mockN8nClient, 'http://test', 'key');
            const result = await mockClient.testConnectivity();
            (0, globals_1.expect)(result.success).toBe(false);
            (0, globals_1.expect)(result.error).toContain('Timeout');
        });
    });
    (0, globals_1.describe)('Performance Calculations', () => {
        (0, globals_1.it)('should calculate percentages correctly', () => {
            // Test percentage calculations used in monitoring
            const total = 100;
            const used = 75;
            const percentage = (used / total) * 100;
            (0, globals_1.expect)(percentage).toBe(75);
            (0, globals_1.expect)(percentage).toBeGreaterThanOrEqual(0);
            (0, globals_1.expect)(percentage).toBeLessThanOrEqual(100);
        });
        (0, globals_1.it)('should handle division by zero in calculations', () => {
            // Test safe division
            const safeDivision = (numerator, denominator) => {
                return denominator === 0 ? 0 : numerator / denominator;
            };
            (0, globals_1.expect)(safeDivision(100, 0)).toBe(0);
            (0, globals_1.expect)(safeDivision(100, 10)).toBe(10);
            (0, globals_1.expect)(safeDivision(0, 10)).toBe(0);
        });
    });
});
(0, globals_1.afterAll)(() => {
    globals_1.jest.restoreAllMocks();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,