89bbf245128f4ae17ab1648ca685fdf8
/* istanbul ignore next */
function cov_1huohd1wyi() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts";
  var hash = "ab39f318e1510b64ae193a7e604f78677bef6983";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 27
        },
        end: {
          line: 6,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "2": {
        start: {
          line: 10,
          column: 30
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "3": {
        start: {
          line: 14,
          column: 31
        },
        end: {
          line: 21,
          column: 2
        }
      },
      "4": {
        start: {
          line: 17,
          column: 47
        },
        end: {
          line: 17,
          column: 75
        }
      },
      "5": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "6": {
        start: {
          line: 37,
          column: 27
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "7": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "8": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 94
        }
      },
      "9": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "10": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 34
        }
      },
      "11": {
        start: {
          line: 43,
          column: 16
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "12": {
        start: {
          line: 44,
          column: 20
        },
        end: {
          line: 44,
          column: 47
        }
      },
      "13": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 46,
          column: 49
        }
      },
      "14": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 49
        }
      },
      "15": {
        start: {
          line: 47,
          column: 33
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "16": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "17": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "18": {
        start: {
          line: 51,
          column: 29
        },
        end: {
          line: 51,
          column: 79
        }
      },
      "19": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "20": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 71
        }
      },
      "21": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 60
        }
      },
      "22": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 55,
          column: 64
        }
      },
      "23": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 58,
          column: 21
        }
      },
      "24": {
        start: {
          line: 57,
          column: 24
        },
        end: {
          line: 57,
          column: 116
        }
      },
      "25": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 61,
          column: 21
        }
      },
      "26": {
        start: {
          line: 60,
          column: 24
        },
        end: {
          line: 60,
          column: 96
        }
      },
      "27": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 64,
          column: 21
        }
      },
      "28": {
        start: {
          line: 63,
          column: 24
        },
        end: {
          line: 63,
          column: 83
        }
      },
      "29": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "30": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 107
        }
      },
      "31": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "32": {
        start: {
          line: 69,
          column: 24
        },
        end: {
          line: 69,
          column: 107
        }
      },
      "33": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 35
        }
      },
      "34": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "35": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 95
        }
      },
      "36": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "37": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "38": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 88
        }
      },
      "39": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 85
        }
      },
      "40": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 149,
          column: 7
        }
      },
      "41": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 38
        }
      },
      "42": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "43": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 94
        }
      },
      "44": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 147,
          column: 13
        }
      },
      "45": {
        start: {
          line: 104,
          column: 35
        },
        end: {
          line: 104,
          column: 80
        }
      },
      "46": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 67
        }
      },
      "47": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 55
        }
      },
      "48": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 59
        }
      },
      "49": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 59
        }
      },
      "50": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 111,
          column: 17
        }
      },
      "51": {
        start: {
          line: 110,
          column: 20
        },
        end: {
          line: 110,
          column: 111
        }
      },
      "52": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "53": {
        start: {
          line: 113,
          column: 20
        },
        end: {
          line: 113,
          column: 52
        }
      },
      "54": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 116,
          column: 23
        }
      },
      "55": {
        start: {
          line: 115,
          column: 24
        },
        end: {
          line: 115,
          column: 143
        }
      },
      "56": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 129,
          column: 17
        }
      },
      "57": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 52
        }
      },
      "58": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 128,
          column: 23
        }
      },
      "59": {
        start: {
          line: 121,
          column: 24
        },
        end: {
          line: 121,
          column: 82
        }
      },
      "60": {
        start: {
          line: 122,
          column: 24
        },
        end: {
          line: 124,
          column: 25
        }
      },
      "61": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 123,
          column: 68
        }
      },
      "62": {
        start: {
          line: 125,
          column: 24
        },
        end: {
          line: 127,
          column: 25
        }
      },
      "63": {
        start: {
          line: 126,
          column: 28
        },
        end: {
          line: 126,
          column: 95
        }
      },
      "64": {
        start: {
          line: 130,
          column: 16
        },
        end: {
          line: 132,
          column: 17
        }
      },
      "65": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 80
        }
      },
      "66": {
        start: {
          line: 133,
          column: 16
        },
        end: {
          line: 135,
          column: 17
        }
      },
      "67": {
        start: {
          line: 134,
          column: 20
        },
        end: {
          line: 134,
          column: 98
        }
      },
      "68": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 138,
          column: 17
        }
      },
      "69": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 98
        }
      },
      "70": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 106
        }
      },
      "71": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 140,
          column: 30
        }
      },
      "72": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 145,
          column: 17
        }
      },
      "73": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 144,
          column: 86
        }
      },
      "74": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 146,
          column: 83
        }
      },
      "75": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 189,
          column: 7
        }
      },
      "76": {
        start: {
          line: 163,
          column: 27
        },
        end: {
          line: 163,
          column: 38
        }
      },
      "77": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 166,
          column: 13
        }
      },
      "78": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 94
        }
      },
      "79": {
        start: {
          line: 167,
          column: 12
        },
        end: {
          line: 187,
          column: 13
        }
      },
      "80": {
        start: {
          line: 168,
          column: 39
        },
        end: {
          line: 173,
          column: 17
        }
      },
      "81": {
        start: {
          line: 174,
          column: 35
        },
        end: {
          line: 174,
          column: 80
        }
      },
      "82": {
        start: {
          line: 175,
          column: 29
        },
        end: {
          line: 175,
          column: 113
        }
      },
      "83": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 176,
          column: 53
        }
      },
      "84": {
        start: {
          line: 177,
          column: 16
        },
        end: {
          line: 179,
          column: 17
        }
      },
      "85": {
        start: {
          line: 178,
          column: 20
        },
        end: {
          line: 178,
          column: 74
        }
      },
      "86": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 180,
          column: 30
        }
      },
      "87": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 185,
          column: 17
        }
      },
      "88": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 184,
          column: 89
        }
      },
      "89": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 86
        }
      },
      "90": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 218,
          column: 7
        }
      },
      "91": {
        start: {
          line: 203,
          column: 27
        },
        end: {
          line: 203,
          column: 38
        }
      },
      "92": {
        start: {
          line: 204,
          column: 12
        },
        end: {
          line: 206,
          column: 13
        }
      },
      "93": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 205,
          column: 94
        }
      },
      "94": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "95": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 65
        }
      },
      "96": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 209,
          column: 89
        }
      },
      "97": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 214,
          column: 17
        }
      },
      "98": {
        start: {
          line: 213,
          column: 20
        },
        end: {
          line: 213,
          column: 89
        }
      },
      "99": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 215,
          column: 86
        }
      },
      "100": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 253,
          column: 7
        }
      },
      "101": {
        start: {
          line: 232,
          column: 27
        },
        end: {
          line: 232,
          column: 38
        }
      },
      "102": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 235,
          column: 13
        }
      },
      "103": {
        start: {
          line: 234,
          column: 16
        },
        end: {
          line: 234,
          column: 94
        }
      },
      "104": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 251,
          column: 13
        }
      },
      "105": {
        start: {
          line: 237,
          column: 31
        },
        end: {
          line: 237,
          column: 84
        }
      },
      "106": {
        start: {
          line: 238,
          column: 29
        },
        end: {
          line: 238,
          column: 78
        }
      },
      "107": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 239,
          column: 100
        }
      },
      "108": {
        start: {
          line: 240,
          column: 16
        },
        end: {
          line: 240,
          column: 38
        }
      },
      "109": {
        start: {
          line: 241,
          column: 16
        },
        end: {
          line: 241,
          column: 58
        }
      },
      "110": {
        start: {
          line: 242,
          column: 16
        },
        end: {
          line: 242,
          column: 36
        }
      },
      "111": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 140
        }
      },
      "112": {
        start: {
          line: 244,
          column: 16
        },
        end: {
          line: 244,
          column: 30
        }
      },
      "113": {
        start: {
          line: 247,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "114": {
        start: {
          line: 248,
          column: 20
        },
        end: {
          line: 248,
          column: 93
        }
      },
      "115": {
        start: {
          line: 250,
          column: 16
        },
        end: {
          line: 250,
          column: 90
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 39
          },
          end: {
            line: 17,
            column: 40
          }
        },
        loc: {
          start: {
            line: 17,
            column: 47
          },
          end: {
            line: 17,
            column: 75
          }
        },
        line: 17
      },
      "1": {
        name: "createCredentialTools",
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 37
          }
        },
        loc: {
          start: {
            line: 23,
            column: 57
          },
          end: {
            line: 254,
            column: 1
          }
        },
        line: 23
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 36,
            column: 18
          }
        },
        loc: {
          start: {
            line: 36,
            column: 33
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 36
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 52,
            column: 38
          },
          end: {
            line: 52,
            column: 39
          }
        },
        loc: {
          start: {
            line: 52,
            column: 61
          },
          end: {
            line: 72,
            column: 17
          }
        },
        line: 52
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 98,
            column: 17
          },
          end: {
            line: 98,
            column: 18
          }
        },
        loc: {
          start: {
            line: 98,
            column: 33
          },
          end: {
            line: 148,
            column: 9
          }
        },
        line: 98
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 114,
            column: 50
          },
          end: {
            line: 114,
            column: 51
          }
        },
        loc: {
          start: {
            line: 114,
            column: 68
          },
          end: {
            line: 116,
            column: 21
          }
        },
        line: 114
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 120,
            column: 51
          },
          end: {
            line: 120,
            column: 52
          }
        },
        loc: {
          start: {
            line: 120,
            column: 70
          },
          end: {
            line: 128,
            column: 21
          }
        },
        line: 120
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 162,
            column: 17
          },
          end: {
            line: 162,
            column: 18
          }
        },
        loc: {
          start: {
            line: 162,
            column: 33
          },
          end: {
            line: 188,
            column: 9
          }
        },
        line: 162
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 202,
            column: 17
          },
          end: {
            line: 202,
            column: 18
          }
        },
        loc: {
          start: {
            line: 202,
            column: 33
          },
          end: {
            line: 217,
            column: 9
          }
        },
        line: 202
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 231,
            column: 17
          },
          end: {
            line: 231,
            column: 18
          }
        },
        loc: {
          start: {
            line: 231,
            column: 33
          },
          end: {
            line: 252,
            column: 9
          }
        },
        line: 231
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 44,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 16
          },
          end: {
            line: 44,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 46,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 46,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 58,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 20
          },
          end: {
            line: 58,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "5": {
        loc: {
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 61,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 59,
            column: 20
          },
          end: {
            line: 61,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 59
      },
      "6": {
        loc: {
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 59,
            column: 24
          },
          end: {
            line: 59,
            column: 45
          }
        }, {
          start: {
            line: 59,
            column: 49
          },
          end: {
            line: 59,
            column: 81
          }
        }],
        line: 59
      },
      "7": {
        loc: {
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 64,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 20
          },
          end: {
            line: 64,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "8": {
        loc: {
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 62,
            column: 24
          },
          end: {
            line: 62,
            column: 41
          }
        }, {
          start: {
            line: 62,
            column: 45
          },
          end: {
            line: 62,
            column: 73
          }
        }],
        line: 62
      },
      "9": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "10": {
        loc: {
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 70,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 70,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "11": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "12": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "13": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "14": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 111,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "15": {
        loc: {
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 112,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 112
      },
      "16": {
        loc: {
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 112,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 112,
            column: 20
          },
          end: {
            line: 112,
            column: 41
          }
        }, {
          start: {
            line: 112,
            column: 45
          },
          end: {
            line: 112,
            column: 77
          }
        }],
        line: 112
      },
      "17": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 129,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "18": {
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 118,
            column: 42
          }
        }, {
          start: {
            line: 118,
            column: 46
          },
          end: {
            line: 118,
            column: 79
          }
        }],
        line: 118
      },
      "19": {
        loc: {
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 124,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 24
          },
          end: {
            line: 124,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "20": {
        loc: {
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 127,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 125,
            column: 24
          },
          end: {
            line: 127,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 125
      },
      "21": {
        loc: {
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 132,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 16
          },
          end: {
            line: 132,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "22": {
        loc: {
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 20
          },
          end: {
            line: 130,
            column: 37
          }
        }, {
          start: {
            line: 130,
            column: 41
          },
          end: {
            line: 130,
            column: 69
          }
        }],
        line: 130
      },
      "23": {
        loc: {
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 133,
            column: 16
          },
          end: {
            line: 135,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 133
      },
      "24": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 138,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 136
      },
      "25": {
        loc: {
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 16
          },
          end: {
            line: 145,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "26": {
        loc: {
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 164
      },
      "27": {
        loc: {
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 16
          },
          end: {
            line: 179,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "28": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 185,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "29": {
        loc: {
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 204,
            column: 12
          },
          end: {
            line: 206,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 204
      },
      "30": {
        loc: {
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 16
          },
          end: {
            line: 214,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "31": {
        loc: {
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 12
          },
          end: {
            line: 235,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "32": {
        loc: {
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 247,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 247
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nCredential, CreateCredentialRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst CredentialIdSchema = z.object({\n  credentialId: z.string().min(1, 'Credential ID is required'),\n});\n\nconst CredentialTypeSchema = z.object({\n  credentialType: z.string().min(1, 'Credential type is required'),\n});\n\nconst ListCredentialsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateCredentialSchema = z.object({\n  name: z.string().min(1, 'Credential name is required'),\n  type: z.string().min(1, 'Credential type is required'),\n  data: z.record(z.unknown()).refine(data => Object.keys(data).length > 0, {\n    message: 'Credential data is required',\n  }),\n  projectId: z.string().optional(),\n});\n\n// Tool registration function\nexport function createCredentialTools(getClient: () => N8nClient | null, server: any) {\n  // List credentials tool\n  server.addTool({\n    name: 'list-credentials',\n    description:\n      'List all credentials in the n8n instance with pagination support. Sensitive data is not included',\n    parameters: ListCredentialsSchema,\n    annotations: {\n      title: 'List n8n Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListCredentialsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getCredentials(options);\n\n        if (response.data.length === 0) {\n          return 'No credentials found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} credential(s):\\n\\n`;\n\n        response.data.forEach((credential: N8nCredential, index: number) => {\n          result += `${index + 1}. **${credential.name}**\\n`;\n          result += `   - ID: ${credential.id}\\n`;\n          result += `   - Type: ${credential.type}\\n`;\n\n          if (credential.homeProject) {\n            result += `   - Project: ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n          }\n\n          if (credential.sharedWith && credential.sharedWith.length > 0) {\n            result += `   - Shared with: ${credential.sharedWith.length} user(s)\\n`;\n          }\n\n          if (credential.scopes && credential.scopes.length > 0) {\n            result += `   - Scopes: ${credential.scopes.join(', ')}\\n`;\n          }\n\n          if (credential.createdAt) {\n            result += `   - Created: ${new Date(credential.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (credential.updatedAt) {\n            result += `   - Updated: ${new Date(credential.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list credentials: ${error.message}`);\n        }\n        throw new UserError('Failed to list credentials with unknown error');\n      }\n    },\n  });\n\n  // Get credential tool\n  server.addTool({\n    name: 'get-credential',\n    description:\n      'Get detailed information about a specific credential by ID. Sensitive data is not included for security',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Get Credential Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credential = await client.getCredential(args.credentialId);\n\n        let result = `# Credential: ${credential.name}\\n\\n`;\n        result += `**ID:** ${credential.id}\\n`;\n        result += `**Name:** ${credential.name}\\n`;\n        result += `**Type:** ${credential.type}\\n`;\n\n        if (credential.homeProject) {\n          result += `**Project:** ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n        }\n\n        if (credential.sharedWith && credential.sharedWith.length > 0) {\n          result += `\\n## Shared With:\\n`;\n          credential.sharedWith.forEach((share, index) => {\n            result += `${index + 1}. ${share.user.firstName} ${share.user.lastName} (${share.user.email}) - Role: ${share.role}\\n`;\n          });\n        }\n\n        if (credential.nodesAccess && credential.nodesAccess.length > 0) {\n          result += `\\n## Node Access:\\n`;\n          credential.nodesAccess.forEach((access, index) => {\n            result += `${index + 1}. Node Type: ${access.nodeType}\\n`;\n            if (access.user) {\n              result += `   - User: ${access.user}\\n`;\n            }\n            if (access.date) {\n              result += `   - Date: ${new Date(access.date).toLocaleString()}\\n`;\n            }\n          });\n        }\n\n        if (credential.scopes && credential.scopes.length > 0) {\n          result += `\\n**Scopes:** ${credential.scopes.join(', ')}\\n`;\n        }\n\n        if (credential.createdAt) {\n          result += `**Created:** ${new Date(credential.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (credential.updatedAt) {\n          result += `**Updated:** ${new Date(credential.updatedAt).toLocaleString()}\\n`;\n        }\n\n        result += `\\n**Note:** Sensitive credential data is not displayed for security purposes.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential with unknown error');\n      }\n    },\n  });\n\n  // Create credential tool\n  server.addTool({\n    name: 'create-credential',\n    description: 'Create a new credential in n8n with the specified type and configuration data',\n    parameters: CreateCredentialSchema,\n    annotations: {\n      title: 'Create New Credential',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateCredentialSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credentialData: CreateCredentialRequest = {\n          name: args.name,\n          type: args.type,\n          data: args.data as Record<string, unknown>,\n          projectId: args.projectId,\n        };\n\n        const credential = await client.createCredential(credentialData);\n\n        let result = `\u2705 Successfully created credential \"${credential.name}\" with ID: ${credential.id}\\n`;\n        result += `Type: ${credential.type}`;\n\n        if (credential.homeProject) {\n          result += `\\nProject: ${credential.homeProject.name}`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create credential: ${error.message}`);\n        }\n        throw new UserError('Failed to create credential with unknown error');\n      }\n    },\n  });\n\n  // Delete credential tool\n  server.addTool({\n    name: 'delete-credential',\n    description:\n      'Delete a credential from n8n permanently. WARNING: This action cannot be undone and may break workflows using this credential',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Delete Credential',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteCredential(args.credentialId);\n        return `\u2705 Successfully deleted credential with ID: ${args.credentialId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete credential: ${error.message}`);\n        }\n        throw new UserError('Failed to delete credential with unknown error');\n      }\n    },\n  });\n\n  // Get credential schema tool\n  server.addTool({\n    name: 'get-credential-schema',\n    description:\n      'Get the schema definition for a specific credential type to understand required fields',\n    parameters: CredentialTypeSchema,\n    annotations: {\n      title: 'Get Credential Schema',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(args.credentialType);\n\n        let result = `# Credential Schema: ${args.credentialType}\\n\\n`;\n        result += `**Schema definition for credential type \"${args.credentialType}\":**\\n\\n`;\n        result += '```json\\n';\n        result += JSON.stringify(schema, null, 2);\n        result += '\\n```\\n';\n\n        result += `\\nUse this schema to understand the required fields when creating credentials of type \"${args.credentialType}\".`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential schema: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential schema with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ab39f318e1510b64ae193a7e604f78677bef6983"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1huohd1wyi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1huohd1wyi();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Zod schemas for validation
const CredentialIdSchema =
/* istanbul ignore next */
(cov_1huohd1wyi().s[0]++, z.object({
  credentialId: z.string().min(1, 'Credential ID is required')
}));
const CredentialTypeSchema =
/* istanbul ignore next */
(cov_1huohd1wyi().s[1]++, z.object({
  credentialType: z.string().min(1, 'Credential type is required')
}));
const ListCredentialsSchema =
/* istanbul ignore next */
(cov_1huohd1wyi().s[2]++, z.object({
  limit: z.number().min(1).max(100).optional(),
  cursor: z.string().optional()
}));
const CreateCredentialSchema =
/* istanbul ignore next */
(cov_1huohd1wyi().s[3]++, z.object({
  name: z.string().min(1, 'Credential name is required'),
  type: z.string().min(1, 'Credential type is required'),
  data: z.record(z.unknown()).refine(data => {
    /* istanbul ignore next */
    cov_1huohd1wyi().f[0]++;
    cov_1huohd1wyi().s[4]++;
    return Object.keys(data).length > 0;
  }, {
    message: 'Credential data is required'
  }),
  projectId: z.string().optional()
}));
// Tool registration function
export function createCredentialTools(getClient, server) {
  /* istanbul ignore next */
  cov_1huohd1wyi().f[1]++;
  cov_1huohd1wyi().s[5]++;
  // List credentials tool
  server.addTool({
    name: 'list-credentials',
    description: 'List all credentials in the n8n instance with pagination support. Sensitive data is not included',
    parameters: ListCredentialsSchema,
    annotations: {
      title: 'List n8n Credentials',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1huohd1wyi().f[2]++;
      const client =
      /* istanbul ignore next */
      (cov_1huohd1wyi().s[6]++, getClient());
      /* istanbul ignore next */
      cov_1huohd1wyi().s[7]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1huohd1wyi().b[0][0]++;
        cov_1huohd1wyi().s[8]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1huohd1wyi().b[0][1]++;
      }
      cov_1huohd1wyi().s[9]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[10]++, {});
        /* istanbul ignore next */
        cov_1huohd1wyi().s[11]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[1][0]++;
          cov_1huohd1wyi().s[12]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[1][1]++;
        }
        cov_1huohd1wyi().s[13]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[2][0]++;
          cov_1huohd1wyi().s[14]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[15]++, await client.getCredentials(options));
        /* istanbul ignore next */
        cov_1huohd1wyi().s[16]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[3][0]++;
          cov_1huohd1wyi().s[17]++;
          return 'No credentials found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[18]++, `Found ${response.data.length} credential(s):\n\n`);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[19]++;
        response.data.forEach((credential, index) => {
          /* istanbul ignore next */
          cov_1huohd1wyi().f[3]++;
          cov_1huohd1wyi().s[20]++;
          result += `${index + 1}. **${credential.name}**\n`;
          /* istanbul ignore next */
          cov_1huohd1wyi().s[21]++;
          result += `   - ID: ${credential.id}\n`;
          /* istanbul ignore next */
          cov_1huohd1wyi().s[22]++;
          result += `   - Type: ${credential.type}\n`;
          /* istanbul ignore next */
          cov_1huohd1wyi().s[23]++;
          if (credential.homeProject) {
            /* istanbul ignore next */
            cov_1huohd1wyi().b[4][0]++;
            cov_1huohd1wyi().s[24]++;
            result += `   - Project: ${credential.homeProject.name} (${credential.homeProject.type})\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1huohd1wyi().b[4][1]++;
          }
          cov_1huohd1wyi().s[25]++;
          if (
          /* istanbul ignore next */
          (cov_1huohd1wyi().b[6][0]++, credential.sharedWith) &&
          /* istanbul ignore next */
          (cov_1huohd1wyi().b[6][1]++, credential.sharedWith.length > 0)) {
            /* istanbul ignore next */
            cov_1huohd1wyi().b[5][0]++;
            cov_1huohd1wyi().s[26]++;
            result += `   - Shared with: ${credential.sharedWith.length} user(s)\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1huohd1wyi().b[5][1]++;
          }
          cov_1huohd1wyi().s[27]++;
          if (
          /* istanbul ignore next */
          (cov_1huohd1wyi().b[8][0]++, credential.scopes) &&
          /* istanbul ignore next */
          (cov_1huohd1wyi().b[8][1]++, credential.scopes.length > 0)) {
            /* istanbul ignore next */
            cov_1huohd1wyi().b[7][0]++;
            cov_1huohd1wyi().s[28]++;
            result += `   - Scopes: ${credential.scopes.join(', ')}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1huohd1wyi().b[7][1]++;
          }
          cov_1huohd1wyi().s[29]++;
          if (credential.createdAt) {
            /* istanbul ignore next */
            cov_1huohd1wyi().b[9][0]++;
            cov_1huohd1wyi().s[30]++;
            result += `   - Created: ${new Date(credential.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1huohd1wyi().b[9][1]++;
          }
          cov_1huohd1wyi().s[31]++;
          if (credential.updatedAt) {
            /* istanbul ignore next */
            cov_1huohd1wyi().b[10][0]++;
            cov_1huohd1wyi().s[32]++;
            result += `   - Updated: ${new Date(credential.updatedAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1huohd1wyi().b[10][1]++;
          }
          cov_1huohd1wyi().s[33]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1huohd1wyi().s[34]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[11][0]++;
          cov_1huohd1wyi().s[35]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[11][1]++;
        }
        cov_1huohd1wyi().s[36]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[37]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[12][0]++;
          cov_1huohd1wyi().s[38]++;
          throw new UserError(`Failed to list credentials: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[12][1]++;
        }
        cov_1huohd1wyi().s[39]++;
        throw new UserError('Failed to list credentials with unknown error');
      }
    }
  });
  // Get credential tool
  /* istanbul ignore next */
  cov_1huohd1wyi().s[40]++;
  server.addTool({
    name: 'get-credential',
    description: 'Get detailed information about a specific credential by ID. Sensitive data is not included for security',
    parameters: CredentialIdSchema,
    annotations: {
      title: 'Get Credential Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1huohd1wyi().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_1huohd1wyi().s[41]++, getClient());
      /* istanbul ignore next */
      cov_1huohd1wyi().s[42]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1huohd1wyi().b[13][0]++;
        cov_1huohd1wyi().s[43]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1huohd1wyi().b[13][1]++;
      }
      cov_1huohd1wyi().s[44]++;
      try {
        const credential =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[45]++, await client.getCredential(args.credentialId));
        let result =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[46]++, `# Credential: ${credential.name}\n\n`);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[47]++;
        result += `**ID:** ${credential.id}\n`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[48]++;
        result += `**Name:** ${credential.name}\n`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[49]++;
        result += `**Type:** ${credential.type}\n`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[50]++;
        if (credential.homeProject) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[14][0]++;
          cov_1huohd1wyi().s[51]++;
          result += `**Project:** ${credential.homeProject.name} (${credential.homeProject.type})\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[14][1]++;
        }
        cov_1huohd1wyi().s[52]++;
        if (
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[16][0]++, credential.sharedWith) &&
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[16][1]++, credential.sharedWith.length > 0)) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[15][0]++;
          cov_1huohd1wyi().s[53]++;
          result += `\n## Shared With:\n`;
          /* istanbul ignore next */
          cov_1huohd1wyi().s[54]++;
          credential.sharedWith.forEach((share, index) => {
            /* istanbul ignore next */
            cov_1huohd1wyi().f[5]++;
            cov_1huohd1wyi().s[55]++;
            result += `${index + 1}. ${share.user.firstName} ${share.user.lastName} (${share.user.email}) - Role: ${share.role}\n`;
          });
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[15][1]++;
        }
        cov_1huohd1wyi().s[56]++;
        if (
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[18][0]++, credential.nodesAccess) &&
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[18][1]++, credential.nodesAccess.length > 0)) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[17][0]++;
          cov_1huohd1wyi().s[57]++;
          result += `\n## Node Access:\n`;
          /* istanbul ignore next */
          cov_1huohd1wyi().s[58]++;
          credential.nodesAccess.forEach((access, index) => {
            /* istanbul ignore next */
            cov_1huohd1wyi().f[6]++;
            cov_1huohd1wyi().s[59]++;
            result += `${index + 1}. Node Type: ${access.nodeType}\n`;
            /* istanbul ignore next */
            cov_1huohd1wyi().s[60]++;
            if (access.user) {
              /* istanbul ignore next */
              cov_1huohd1wyi().b[19][0]++;
              cov_1huohd1wyi().s[61]++;
              result += `   - User: ${access.user}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_1huohd1wyi().b[19][1]++;
            }
            cov_1huohd1wyi().s[62]++;
            if (access.date) {
              /* istanbul ignore next */
              cov_1huohd1wyi().b[20][0]++;
              cov_1huohd1wyi().s[63]++;
              result += `   - Date: ${new Date(access.date).toLocaleString()}\n`;
            } else
            /* istanbul ignore next */
            {
              cov_1huohd1wyi().b[20][1]++;
            }
          });
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[17][1]++;
        }
        cov_1huohd1wyi().s[64]++;
        if (
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[22][0]++, credential.scopes) &&
        /* istanbul ignore next */
        (cov_1huohd1wyi().b[22][1]++, credential.scopes.length > 0)) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[21][0]++;
          cov_1huohd1wyi().s[65]++;
          result += `\n**Scopes:** ${credential.scopes.join(', ')}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[21][1]++;
        }
        cov_1huohd1wyi().s[66]++;
        if (credential.createdAt) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[23][0]++;
          cov_1huohd1wyi().s[67]++;
          result += `**Created:** ${new Date(credential.createdAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[23][1]++;
        }
        cov_1huohd1wyi().s[68]++;
        if (credential.updatedAt) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[24][0]++;
          cov_1huohd1wyi().s[69]++;
          result += `**Updated:** ${new Date(credential.updatedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[24][1]++;
        }
        cov_1huohd1wyi().s[70]++;
        result += `\n**Note:** Sensitive credential data is not displayed for security purposes.`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[71]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[72]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[25][0]++;
          cov_1huohd1wyi().s[73]++;
          throw new UserError(`Failed to get credential: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[25][1]++;
        }
        cov_1huohd1wyi().s[74]++;
        throw new UserError('Failed to get credential with unknown error');
      }
    }
  });
  // Create credential tool
  /* istanbul ignore next */
  cov_1huohd1wyi().s[75]++;
  server.addTool({
    name: 'create-credential',
    description: 'Create a new credential in n8n with the specified type and configuration data',
    parameters: CreateCredentialSchema,
    annotations: {
      title: 'Create New Credential',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1huohd1wyi().f[7]++;
      const client =
      /* istanbul ignore next */
      (cov_1huohd1wyi().s[76]++, getClient());
      /* istanbul ignore next */
      cov_1huohd1wyi().s[77]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1huohd1wyi().b[26][0]++;
        cov_1huohd1wyi().s[78]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1huohd1wyi().b[26][1]++;
      }
      cov_1huohd1wyi().s[79]++;
      try {
        const credentialData =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[80]++, {
          name: args.name,
          type: args.type,
          data: args.data,
          projectId: args.projectId
        });
        const credential =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[81]++, await client.createCredential(credentialData));
        let result =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[82]++, `✅ Successfully created credential "${credential.name}" with ID: ${credential.id}\n`);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[83]++;
        result += `Type: ${credential.type}`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[84]++;
        if (credential.homeProject) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[27][0]++;
          cov_1huohd1wyi().s[85]++;
          result += `\nProject: ${credential.homeProject.name}`;
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[27][1]++;
        }
        cov_1huohd1wyi().s[86]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[87]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[28][0]++;
          cov_1huohd1wyi().s[88]++;
          throw new UserError(`Failed to create credential: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[28][1]++;
        }
        cov_1huohd1wyi().s[89]++;
        throw new UserError('Failed to create credential with unknown error');
      }
    }
  });
  // Delete credential tool
  /* istanbul ignore next */
  cov_1huohd1wyi().s[90]++;
  server.addTool({
    name: 'delete-credential',
    description: 'Delete a credential from n8n permanently. WARNING: This action cannot be undone and may break workflows using this credential',
    parameters: CredentialIdSchema,
    annotations: {
      title: 'Delete Credential',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1huohd1wyi().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_1huohd1wyi().s[91]++, getClient());
      /* istanbul ignore next */
      cov_1huohd1wyi().s[92]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1huohd1wyi().b[29][0]++;
        cov_1huohd1wyi().s[93]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1huohd1wyi().b[29][1]++;
      }
      cov_1huohd1wyi().s[94]++;
      try {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[95]++;
        await client.deleteCredential(args.credentialId);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[96]++;
        return `✅ Successfully deleted credential with ID: ${args.credentialId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[97]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[30][0]++;
          cov_1huohd1wyi().s[98]++;
          throw new UserError(`Failed to delete credential: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[30][1]++;
        }
        cov_1huohd1wyi().s[99]++;
        throw new UserError('Failed to delete credential with unknown error');
      }
    }
  });
  // Get credential schema tool
  /* istanbul ignore next */
  cov_1huohd1wyi().s[100]++;
  server.addTool({
    name: 'get-credential-schema',
    description: 'Get the schema definition for a specific credential type to understand required fields',
    parameters: CredentialTypeSchema,
    annotations: {
      title: 'Get Credential Schema',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1huohd1wyi().f[9]++;
      const client =
      /* istanbul ignore next */
      (cov_1huohd1wyi().s[101]++, getClient());
      /* istanbul ignore next */
      cov_1huohd1wyi().s[102]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1huohd1wyi().b[31][0]++;
        cov_1huohd1wyi().s[103]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1huohd1wyi().b[31][1]++;
      }
      cov_1huohd1wyi().s[104]++;
      try {
        const schema =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[105]++, await client.getCredentialSchema(args.credentialType));
        let result =
        /* istanbul ignore next */
        (cov_1huohd1wyi().s[106]++, `# Credential Schema: ${args.credentialType}\n\n`);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[107]++;
        result += `**Schema definition for credential type "${args.credentialType}":**\n\n`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[108]++;
        result += '```json\n';
        /* istanbul ignore next */
        cov_1huohd1wyi().s[109]++;
        result += JSON.stringify(schema, null, 2);
        /* istanbul ignore next */
        cov_1huohd1wyi().s[110]++;
        result += '\n```\n';
        /* istanbul ignore next */
        cov_1huohd1wyi().s[111]++;
        result += `\nUse this schema to understand the required fields when creating credentials of type "${args.credentialType}".`;
        /* istanbul ignore next */
        cov_1huohd1wyi().s[112]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1huohd1wyi().s[113]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1huohd1wyi().b[32][0]++;
          cov_1huohd1wyi().s[114]++;
          throw new UserError(`Failed to get credential schema: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1huohd1wyi().b[32][1]++;
        }
        cov_1huohd1wyi().s[115]++;
        throw new UserError('Failed to get credential schema with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,