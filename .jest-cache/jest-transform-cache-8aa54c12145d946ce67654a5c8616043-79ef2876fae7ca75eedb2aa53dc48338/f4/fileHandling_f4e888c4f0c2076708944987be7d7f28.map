{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/fileHandling.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/fileHandling.ts"],"sourcesContent":["import * as fs from 'fs/promises';\nimport * as path from 'path';\nimport * as crypto from 'crypto';\nimport { EventEmitter } from 'events';\nimport {\n  FileUploadRequest,\n  StaticFileInfo,\n  FileStorageConfig,\n  FileTransferProgress,\n  FileOperationResult,\n  FileValidationOptions,\n  FileValidationResult,\n  FileCleanupResult,\n  WorkflowFileManifest,\n  FileSearchOptions,\n} from '../types/fileTypes.js';\n\nexport class FileHandlingUtils extends EventEmitter {\n  private config: FileStorageConfig;\n  private activeTransfers: Map<string, FileTransferProgress> = new Map();\n\n  constructor(config: Partial<FileStorageConfig> = {}) {\n    super();\n    this.config = {\n      baseDirectory: config.baseDirectory || './data/files',\n      maxFileSize: config.maxFileSize || 100 * 1024 * 1024, // 100MB default\n      allowedMimeTypes: config.allowedMimeTypes || [\n        'image/*',\n        'text/*',\n        'application/json',\n        'application/pdf',\n        'application/zip',\n        'application/x-zip-compressed',\n        'application/octet-stream',\n      ],\n      cleanupOlderThan: config.cleanupOlderThan || 30, // 30 days\n    };\n\n    this.ensureDirectoryExists();\n  }\n\n  private async ensureDirectoryExists(): Promise<void> {\n    try {\n      await fs.access(this.config.baseDirectory);\n    } catch {\n      await fs.mkdir(this.config.baseDirectory, { recursive: true });\n    }\n  }\n\n  /**\n   * Generate a unique file ID\n   */\n  private generateFileId(): string {\n    return crypto.randomUUID();\n  }\n\n  /**\n   * Generate transfer ID for progress tracking\n   */\n  private generateTransferId(): string {\n    return `transfer_${Date.now()}_${crypto.randomBytes(4).toString('hex')}`;\n  }\n\n  /**\n   * Get file path from file ID\n   */\n  private getFilePath(fileId: string): string {\n    return path.join(this.config.baseDirectory, `${fileId}.data`);\n  }\n\n  /**\n   * Get metadata file path from file ID\n   */\n  private getMetadataPath(fileId: string): string {\n    return path.join(this.config.baseDirectory, `${fileId}.meta.json`);\n  }\n\n  /**\n   * Validate file before upload\n   */\n  async validateFile(\n    fileName: string,\n    mimeType: string,\n    fileSize: number,\n    options: FileValidationOptions = {}\n  ): Promise<FileValidationResult> {\n    const result: FileValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n    };\n\n    const maxSize = options.maxFileSize || this.config.maxFileSize;\n    const allowedTypes = options.allowedMimeTypes || this.config.allowedMimeTypes;\n\n    // Check file size\n    if (fileSize > maxSize) {\n      result.isValid = false;\n      result.errors.push(\n        `File size ${fileSize} bytes exceeds maximum allowed size ${maxSize} bytes`\n      );\n    }\n\n    // Check MIME type\n    const isMimeTypeAllowed = allowedTypes.some(allowed => {\n      if (allowed.endsWith('/*')) {\n        const prefix = allowed.slice(0, -2);\n        return mimeType.startsWith(prefix);\n      }\n      return allowed === mimeType;\n    });\n\n    if (!isMimeTypeAllowed) {\n      result.isValid = false;\n      result.errors.push(`MIME type ${mimeType} is not allowed`);\n    }\n\n    // Check file extension if specified\n    if (options.allowedExtensions) {\n      const fileExtension = path.extname(fileName).toLowerCase();\n      if (!options.allowedExtensions.includes(fileExtension)) {\n        result.isValid = false;\n        result.errors.push(`File extension ${fileExtension} is not allowed`);\n      }\n    }\n\n    // Validate file name\n    if (!fileName || fileName.trim().length === 0) {\n      result.isValid = false;\n      result.errors.push('File name is required');\n    }\n\n    if (fileName.includes('..') || fileName.includes('/') || fileName.includes('\\\\')) {\n      result.isValid = false;\n      result.errors.push('File name contains invalid characters');\n    }\n\n    return result;\n  }\n\n  /**\n   * Upload a file from base64 data\n   */\n  async uploadFile(request: FileUploadRequest): Promise<FileOperationResult> {\n    const transferId = this.generateTransferId();\n\n    try {\n      // Decode base64 to get actual file size\n      const buffer = Buffer.from(request.data, 'base64');\n      const actualFileSize = buffer.length;\n\n      // Validate file\n      const validation = await this.validateFile(\n        request.fileName,\n        request.mimeType,\n        actualFileSize\n      );\n\n      if (!validation.isValid) {\n        return {\n          success: false,\n          message: `File validation failed: ${validation.errors.join(', ')}`,\n          transferId,\n        };\n      }\n\n      const fileId = this.generateFileId();\n      const filePath = this.getFilePath(fileId);\n      const metadataPath = this.getMetadataPath(fileId);\n\n      // Initialize transfer progress\n      const progress: FileTransferProgress = {\n        transferId,\n        fileName: request.fileName,\n        totalBytes: actualFileSize,\n        transferredBytes: 0,\n        percentComplete: 0,\n        status: 'in-progress',\n        startedAt: new Date().toISOString(),\n      };\n\n      this.activeTransfers.set(transferId, progress);\n      this.emit('transferStarted', progress);\n\n      // Write file data\n      await fs.writeFile(filePath, buffer);\n\n      // Create metadata\n      const metadata: StaticFileInfo = {\n        id: fileId,\n        fileName: request.fileName,\n        mimeType: request.mimeType,\n        fileSize: actualFileSize,\n        uploadedAt: new Date().toISOString(),\n        workflowId: request.workflowId,\n        executionId: request.executionId,\n        nodeId: request.nodeId,\n        filePath,\n      };\n\n      await fs.writeFile(metadataPath, JSON.stringify(metadata, null, 2));\n\n      // Update progress\n      progress.transferredBytes = actualFileSize;\n      progress.percentComplete = 100;\n      progress.status = 'completed';\n      progress.completedAt = new Date().toISOString();\n\n      this.emit('transferCompleted', progress);\n      this.activeTransfers.delete(transferId);\n\n      return {\n        success: true,\n        fileId,\n        fileName: request.fileName,\n        message: `File uploaded successfully`,\n        fileSize: actualFileSize,\n        transferId,\n      };\n    } catch (error) {\n      const progress = this.activeTransfers.get(transferId);\n      if (progress) {\n        progress.status = 'failed';\n        progress.error = error instanceof Error ? error.message : 'Unknown error';\n        progress.completedAt = new Date().toISOString();\n        this.emit('transferFailed', progress);\n        this.activeTransfers.delete(transferId);\n      }\n\n      return {\n        success: false,\n        message: `File upload failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        transferId,\n      };\n    }\n  }\n\n  /**\n   * Download a file as base64 data\n   */\n  async downloadFile(\n    fileId: string\n  ): Promise<FileOperationResult & { data?: string; metadata?: StaticFileInfo }> {\n    const transferId = this.generateTransferId();\n\n    try {\n      const filePath = this.getFilePath(fileId);\n      const metadataPath = this.getMetadataPath(fileId);\n\n      // Check if file exists\n      try {\n        await fs.access(filePath);\n        await fs.access(metadataPath);\n      } catch {\n        return {\n          success: false,\n          message: `File with ID ${fileId} not found`,\n          transferId,\n        };\n      }\n\n      // Read metadata\n      const metadataContent = await fs.readFile(metadataPath, 'utf-8');\n      const metadata: StaticFileInfo = JSON.parse(metadataContent);\n\n      // Initialize transfer progress\n      const progress: FileTransferProgress = {\n        transferId,\n        fileName: metadata.fileName,\n        totalBytes: metadata.fileSize,\n        transferredBytes: 0,\n        percentComplete: 0,\n        status: 'in-progress',\n        startedAt: new Date().toISOString(),\n      };\n\n      this.activeTransfers.set(transferId, progress);\n      this.emit('transferStarted', progress);\n\n      // Read file data\n      const buffer = await fs.readFile(filePath);\n      const base64Data = buffer.toString('base64');\n\n      // Update progress\n      progress.transferredBytes = metadata.fileSize;\n      progress.percentComplete = 100;\n      progress.status = 'completed';\n      progress.completedAt = new Date().toISOString();\n\n      this.emit('transferCompleted', progress);\n      this.activeTransfers.delete(transferId);\n\n      return {\n        success: true,\n        fileId,\n        fileName: metadata.fileName,\n        message: `File downloaded successfully`,\n        fileSize: metadata.fileSize,\n        transferId,\n        data: base64Data,\n        metadata,\n      };\n    } catch (error) {\n      const progress = this.activeTransfers.get(transferId);\n      if (progress) {\n        progress.status = 'failed';\n        progress.error = error instanceof Error ? error.message : 'Unknown error';\n        progress.completedAt = new Date().toISOString();\n        this.emit('transferFailed', progress);\n        this.activeTransfers.delete(transferId);\n      }\n\n      return {\n        success: false,\n        message: `File download failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n        transferId,\n      };\n    }\n  }\n\n  /**\n   * Delete a file\n   */\n  async deleteFile(fileId: string): Promise<FileOperationResult> {\n    try {\n      const filePath = this.getFilePath(fileId);\n      const metadataPath = this.getMetadataPath(fileId);\n\n      // Check if file exists and get metadata\n      let metadata: StaticFileInfo | null = null;\n      try {\n        const metadataContent = await fs.readFile(metadataPath, 'utf-8');\n        metadata = JSON.parse(metadataContent);\n      } catch {\n        return {\n          success: false,\n          message: `File with ID ${fileId} not found`,\n        };\n      }\n\n      // Delete files\n      await Promise.all([\n        fs.unlink(filePath).catch(() => {}), // Ignore errors if file doesn't exist\n        fs.unlink(metadataPath).catch(() => {}),\n      ]);\n\n      return {\n        success: true,\n        fileId,\n        fileName: metadata?.fileName || 'Unknown',\n        message: `File deleted successfully`,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        message: `File deletion failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      };\n    }\n  }\n\n  /**\n   * List files based on search criteria\n   */\n  async listFiles(options: FileSearchOptions = {}): Promise<StaticFileInfo[]> {\n    try {\n      const files = await fs.readdir(this.config.baseDirectory);\n      const metadataFiles = files.filter(file => file.endsWith('.meta.json'));\n\n      const fileInfos: StaticFileInfo[] = [];\n\n      for (const metaFile of metadataFiles) {\n        try {\n          const metadataPath = path.join(this.config.baseDirectory, metaFile);\n          const content = await fs.readFile(metadataPath, 'utf-8');\n          const metadata: StaticFileInfo = JSON.parse(content);\n\n          // Apply filters\n          if (\n            options.fileName &&\n            !metadata.fileName.toLowerCase().includes(options.fileName.toLowerCase())\n          ) {\n            continue;\n          }\n\n          if (options.mimeType && metadata.mimeType !== options.mimeType) {\n            continue;\n          }\n\n          if (options.workflowId && metadata.workflowId !== options.workflowId) {\n            continue;\n          }\n\n          if (options.executionId && metadata.executionId !== options.executionId) {\n            continue;\n          }\n\n          if (options.nodeId && metadata.nodeId !== options.nodeId) {\n            continue;\n          }\n\n          if (\n            options.uploadedAfter &&\n            new Date(metadata.uploadedAt) < new Date(options.uploadedAfter)\n          ) {\n            continue;\n          }\n\n          if (\n            options.uploadedBefore &&\n            new Date(metadata.uploadedAt) > new Date(options.uploadedBefore)\n          ) {\n            continue;\n          }\n\n          if (options.minFileSize && metadata.fileSize < options.minFileSize) {\n            continue;\n          }\n\n          if (options.maxFileSize && metadata.fileSize > options.maxFileSize) {\n            continue;\n          }\n\n          fileInfos.push(metadata);\n        } catch {\n          // Skip invalid metadata files\n          continue;\n        }\n      }\n\n      // Sort by upload date (newest first)\n      fileInfos.sort((a, b) => new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime());\n\n      // Apply pagination\n      if (options.offset || options.limit) {\n        const start = options.offset || 0;\n        const end = options.limit ? start + options.limit : undefined;\n        return fileInfos.slice(start, end);\n      }\n\n      return fileInfos;\n    } catch (error) {\n      throw new Error(\n        `Failed to list files: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get file metadata\n   */\n  async getFileMetadata(fileId: string): Promise<StaticFileInfo | null> {\n    try {\n      const metadataPath = this.getMetadataPath(fileId);\n      const content = await fs.readFile(metadataPath, 'utf-8');\n      return JSON.parse(content);\n    } catch {\n      return null;\n    }\n  }\n\n  /**\n   * Get workflow file manifest\n   */\n  async getWorkflowFileManifest(workflowId: string): Promise<WorkflowFileManifest> {\n    const files = await this.listFiles({ workflowId });\n    const totalSize = files.reduce((sum, file) => sum + file.fileSize, 0);\n\n    return {\n      workflowId,\n      workflowName: workflowId, // Could be enhanced to get actual workflow name\n      files,\n      totalSize,\n      fileCount: files.length,\n      lastUpdated: files.length > 0 ? files[0].uploadedAt : new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Cleanup old files\n   */\n  async cleanupOldFiles(olderThanDays?: number): Promise<FileCleanupResult> {\n    const cleanupDate = new Date();\n    cleanupDate.setDate(\n      cleanupDate.getDate() - (olderThanDays || this.config.cleanupOlderThan || 30)\n    );\n\n    const allFiles = await this.listFiles();\n    const filesToDelete = allFiles.filter(file => new Date(file.uploadedAt) < cleanupDate);\n\n    let deletedFiles = 0;\n    let freedSpace = 0;\n    const errors: string[] = [];\n\n    for (const file of filesToDelete) {\n      try {\n        const result = await this.deleteFile(file.id);\n        if (result.success) {\n          deletedFiles++;\n          freedSpace += file.fileSize;\n        } else {\n          errors.push(`Failed to delete ${file.fileName}: ${result.message}`);\n        }\n      } catch (error) {\n        errors.push(\n          `Error deleting ${file.fileName}: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    }\n\n    return {\n      deletedFiles,\n      freedSpace,\n      errors,\n    };\n  }\n\n  /**\n   * Get transfer progress\n   */\n  getTransferProgress(transferId: string): FileTransferProgress | null {\n    return this.activeTransfers.get(transferId) || null;\n  }\n\n  /**\n   * Get all active transfers\n   */\n  getActiveTransfers(): FileTransferProgress[] {\n    return Array.from(this.activeTransfers.values());\n  }\n\n  /**\n   * Cancel an active transfer\n   */\n  cancelTransfer(transferId: string): boolean {\n    const transfer = this.activeTransfers.get(transferId);\n    if (transfer && transfer.status === 'in-progress') {\n      transfer.status = 'cancelled';\n      transfer.completedAt = new Date().toISOString();\n      this.emit('transferCancelled', transfer);\n      this.activeTransfers.delete(transferId);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Get storage statistics\n   */\n  async getStorageStats(): Promise<{\n    totalFiles: number;\n    totalSize: number;\n    averageFileSize: number;\n    oldestFile: string | null;\n    newestFile: string | null;\n  }> {\n    const files = await this.listFiles();\n\n    if (files.length === 0) {\n      return {\n        totalFiles: 0,\n        totalSize: 0,\n        averageFileSize: 0,\n        oldestFile: null,\n        newestFile: null,\n      };\n    }\n\n    const totalSize = files.reduce((sum, file) => sum + file.fileSize, 0);\n    const sortedByDate = [...files].sort(\n      (a, b) => new Date(a.uploadedAt).getTime() - new Date(b.uploadedAt).getTime()\n    );\n\n    return {\n      totalFiles: files.length,\n      totalSize,\n      averageFileSize: totalSize / files.length,\n      oldestFile: sortedByDate[0].uploadedAt,\n      newestFile: sortedByDate[sortedByDate.length - 1].uploadedAt,\n    };\n  }\n}\n"],"version":3}