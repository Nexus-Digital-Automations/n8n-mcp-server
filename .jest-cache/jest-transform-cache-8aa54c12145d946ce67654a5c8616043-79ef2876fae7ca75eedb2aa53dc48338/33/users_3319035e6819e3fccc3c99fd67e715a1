b49e6e35a28d791951941bee26e2fe68
"use strict";

/* istanbul ignore next */
function cov_1wh3369e51() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/users.ts";
  var hash = "4d5aac53f83ff8e6d78055f9a26ea3c7798c2ab3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/users.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 42
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "5": {
        start: {
          line: 10,
          column: 24
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "6": {
        start: {
          line: 14,
          column: 25
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "7": {
        start: {
          line: 21,
          column: 25
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "9": {
        start: {
          line: 44,
          column: 27
        },
        end: {
          line: 44,
          column: 38
        }
      },
      "10": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 47,
          column: 13
        }
      },
      "11": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 104
        }
      },
      "12": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 83,
          column: 13
        }
      },
      "13": {
        start: {
          line: 49,
          column: 32
        },
        end: {
          line: 49,
          column: 34
        }
      },
      "14": {
        start: {
          line: 50,
          column: 16
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "15": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 47
        }
      },
      "16": {
        start: {
          line: 52,
          column: 16
        },
        end: {
          line: 53,
          column: 49
        }
      },
      "17": {
        start: {
          line: 53,
          column: 20
        },
        end: {
          line: 53,
          column: 49
        }
      },
      "18": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 54,
          column: 63
        }
      },
      "19": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 57,
          column: 17
        }
      },
      "20": {
        start: {
          line: 56,
          column: 20
        },
        end: {
          line: 56,
          column: 65
        }
      },
      "21": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 73
        }
      },
      "22": {
        start: {
          line: 59,
          column: 16
        },
        end: {
          line: 72,
          column: 19
        }
      },
      "23": {
        start: {
          line: 60,
          column: 20
        },
        end: {
          line: 60,
          column: 87
        }
      },
      "24": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 54
        }
      },
      "25": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 62,
          column: 60
        }
      },
      "26": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 63,
          column: 58
        }
      },
      "27": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 94
        }
      },
      "28": {
        start: {
          line: 65,
          column: 20
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "29": {
        start: {
          line: 66,
          column: 24
        },
        end: {
          line: 66,
          column: 101
        }
      },
      "30": {
        start: {
          line: 68,
          column: 20
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "31": {
        start: {
          line: 69,
          column: 24
        },
        end: {
          line: 69,
          column: 104
        }
      },
      "32": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 71,
          column: 35
        }
      },
      "33": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "34": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 95
        }
      },
      "35": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 30
        }
      },
      "36": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "37": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 92
        }
      },
      "38": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 82,
          column: 89
        }
      },
      "39": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 128,
          column: 7
        }
      },
      "40": {
        start: {
          line: 99,
          column: 27
        },
        end: {
          line: 99,
          column: 38
        }
      },
      "41": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 102,
          column: 13
        }
      },
      "42": {
        start: {
          line: 101,
          column: 16
        },
        end: {
          line: 101,
          column: 104
        }
      },
      "43": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 126,
          column: 13
        }
      },
      "44": {
        start: {
          line: 104,
          column: 29
        },
        end: {
          line: 104,
          column: 62
        }
      },
      "45": {
        start: {
          line: 105,
          column: 29
        },
        end: {
          line: 105,
          column: 77
        }
      },
      "46": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 106,
          column: 49
        }
      },
      "47": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 55
        }
      },
      "48": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 53
        }
      },
      "49": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 109,
          column: 89
        }
      },
      "50": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 112,
          column: 17
        }
      },
      "51": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 111,
          column: 92
        }
      },
      "52": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "53": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 92
        }
      },
      "54": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "55": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 95
        }
      },
      "56": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 119,
          column: 30
        }
      },
      "57": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 124,
          column: 17
        }
      },
      "58": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 123,
          column: 90
        }
      },
      "59": {
        start: {
          line: 125,
          column: 16
        },
        end: {
          line: 125,
          column: 87
        }
      },
      "60": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 166,
          column: 7
        }
      },
      "61": {
        start: {
          line: 142,
          column: 27
        },
        end: {
          line: 142,
          column: 38
        }
      },
      "62": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 145,
          column: 13
        }
      },
      "63": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 104
        }
      },
      "64": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 164,
          column: 13
        }
      },
      "65": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "66": {
        start: {
          line: 154,
          column: 29
        },
        end: {
          line: 154,
          column: 62
        }
      },
      "67": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 157,
          column: 42
        }
      },
      "68": {
        start: {
          line: 160,
          column: 16
        },
        end: {
          line: 162,
          column: 17
        }
      },
      "69": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 93
        }
      },
      "70": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 163,
          column: 90
        }
      },
      "71": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 200,
          column: 7
        }
      },
      "72": {
        start: {
          line: 180,
          column: 27
        },
        end: {
          line: 180,
          column: 38
        }
      },
      "73": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 183,
          column: 13
        }
      },
      "74": {
        start: {
          line: 182,
          column: 16
        },
        end: {
          line: 182,
          column: 104
        }
      },
      "75": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 198,
          column: 13
        }
      },
      "76": {
        start: {
          line: 185,
          column: 50
        },
        end: {
          line: 185,
          column: 54
        }
      },
      "77": {
        start: {
          line: 186,
          column: 33
        },
        end: {
          line: 186,
          column: 43
        }
      },
      "78": {
        start: {
          line: 187,
          column: 29
        },
        end: {
          line: 187,
          column: 70
        }
      },
      "79": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 191,
          column: 78
        }
      },
      "80": {
        start: {
          line: 194,
          column: 16
        },
        end: {
          line: 196,
          column: 17
        }
      },
      "81": {
        start: {
          line: 195,
          column: 20
        },
        end: {
          line: 195,
          column: 93
        }
      },
      "82": {
        start: {
          line: 197,
          column: 16
        },
        end: {
          line: 197,
          column: 90
        }
      },
      "83": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 229,
          column: 7
        }
      },
      "84": {
        start: {
          line: 214,
          column: 27
        },
        end: {
          line: 214,
          column: 38
        }
      },
      "85": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 217,
          column: 13
        }
      },
      "86": {
        start: {
          line: 216,
          column: 16
        },
        end: {
          line: 216,
          column: 104
        }
      },
      "87": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 227,
          column: 13
        }
      },
      "88": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 219,
          column: 53
        }
      },
      "89": {
        start: {
          line: 220,
          column: 16
        },
        end: {
          line: 220,
          column: 77
        }
      },
      "90": {
        start: {
          line: 223,
          column: 16
        },
        end: {
          line: 225,
          column: 17
        }
      },
      "91": {
        start: {
          line: 224,
          column: 20
        },
        end: {
          line: 224,
          column: 93
        }
      },
      "92": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 90
        }
      }
    },
    fnMap: {
      "0": {
        name: "createUserTools",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 24
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 230,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 18
          }
        },
        loc: {
          start: {
            line: 43,
            column: 33
          },
          end: {
            line: 84,
            column: 9
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 38
          },
          end: {
            line: 59,
            column: 39
          }
        },
        loc: {
          start: {
            line: 59,
            column: 55
          },
          end: {
            line: 72,
            column: 17
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 98,
            column: 17
          },
          end: {
            line: 98,
            column: 18
          }
        },
        loc: {
          start: {
            line: 98,
            column: 33
          },
          end: {
            line: 127,
            column: 9
          }
        },
        line: 98
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 141,
            column: 17
          },
          end: {
            line: 141,
            column: 18
          }
        },
        loc: {
          start: {
            line: 141,
            column: 33
          },
          end: {
            line: 165,
            column: 9
          }
        },
        line: 141
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 179,
            column: 17
          },
          end: {
            line: 179,
            column: 18
          }
        },
        loc: {
          start: {
            line: 179,
            column: 33
          },
          end: {
            line: 199,
            column: 9
          }
        },
        line: 179
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 213,
            column: 17
          },
          end: {
            line: 213,
            column: 18
          }
        },
        loc: {
          start: {
            line: 213,
            column: 33
          },
          end: {
            line: 228,
            column: 9
          }
        },
        line: 213
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "1": {
        loc: {
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 51,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 50,
            column: 16
          },
          end: {
            line: 51,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 50
      },
      "2": {
        loc: {
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 53,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 52,
            column: 16
          },
          end: {
            line: 53,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 52
      },
      "3": {
        loc: {
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 16
          },
          end: {
            line: 57,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "4": {
        loc: {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 62
          },
          end: {
            line: 64,
            column: 75
          }
        }, {
          start: {
            line: 64,
            column: 78
          },
          end: {
            line: 64,
            column: 89
          }
        }],
        line: 64
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 20
          },
          end: {
            line: 67,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 70,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 20
          },
          end: {
            line: 70,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "7": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 73
      },
      "8": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "9": {
        loc: {
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 12
          },
          end: {
            line: 102,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 41
          },
          end: {
            line: 109,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 57
          },
          end: {
            line: 109,
            column: 70
          }
        }, {
          start: {
            line: 109,
            column: 73
          },
          end: {
            line: 109,
            column: 84
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 16
          },
          end: {
            line: 112,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "12": {
        loc: {
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "13": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 16
          },
          end: {
            line: 124,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 160,
            column: 16
          },
          end: {
            line: 162,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 160
      },
      "17": {
        loc: {
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 12
          },
          end: {
            line: 183,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "18": {
        loc: {
          start: {
            line: 191,
            column: 31
          },
          end: {
            line: 191,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 47
          },
          end: {
            line: 191,
            column: 60
          }
        }, {
          start: {
            line: 191,
            column: 63
          },
          end: {
            line: 191,
            column: 74
          }
        }],
        line: 191
      },
      "19": {
        loc: {
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 196,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 194,
            column: 16
          },
          end: {
            line: 196,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 194
      },
      "20": {
        loc: {
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 12
          },
          end: {
            line: 217,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "21": {
        loc: {
          start: {
            line: 223,
            column: 16
          },
          end: {
            line: 225,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 16
          },
          end: {
            line: 225,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/users.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/users.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nUser, CreateUserRequest, UpdateUserRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst UserIdSchema = z.object({\n  userId: z.string().min(1, 'User ID is required'),\n});\n\nconst ListUsersSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateUserSchema = z.object({\n  email: z.string().email('Valid email address is required'),\n  firstName: z.string().min(1, 'First name is required'),\n  lastName: z.string().min(1, 'Last name is required'),\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  role: z.enum(['admin', 'member', 'owner']).optional().default('member'),\n});\n\nconst UpdateUserSchema = z.object({\n  userId: z.string().min(1, 'User ID is required'),\n  email: z.string().email().optional(),\n  firstName: z.string().min(1).optional(),\n  lastName: z.string().min(1).optional(),\n  role: z.enum(['admin', 'member', 'owner']).optional(),\n  disabled: z.boolean().optional(),\n});\n\n// Tool registration function\nexport function createUserTools(getClient: () => N8nClient | null, server: any) {\n  // List users tool\n  server.addTool({\n    name: 'list-users',\n    description: 'List all users in the n8n instance with pagination support',\n    parameters: ListUsersSchema,\n    annotations: {\n      title: 'List n8n Users',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListUsersSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getUsers(options);\n\n        if (response.data.length === 0) {\n          return 'No users found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} user(s):\\n\\n`;\n\n        response.data.forEach((user: N8nUser, index: number) => {\n          result += `${index + 1}. **${user.firstName} ${user.lastName}**\\n`;\n          result += `   - ID: ${user.id}\\n`;\n          result += `   - Email: ${user.email}\\n`;\n          result += `   - Role: ${user.role}\\n`;\n          result += `   - Status: ${user.disabled ? '\uD83D\uDD34 Disabled' : '\uD83D\uDFE2 Active'}\\n`;\n          if (user.createdAt) {\n            result += `   - Created: ${new Date(user.createdAt).toLocaleDateString()}\\n`;\n          }\n          if (user.lastSeenAt) {\n            result += `   - Last Seen: ${new Date(user.lastSeenAt).toLocaleDateString()}\\n`;\n          }\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list users: ${error.message}`);\n        }\n        throw new UserError('Failed to list users with unknown error');\n      }\n    },\n  });\n\n  // Get user tool\n  server.addTool({\n    name: 'get-user',\n    description: 'Get detailed information about a specific user by ID',\n    parameters: UserIdSchema,\n    annotations: {\n      title: 'Get User Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UserIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const user = await client.getUser(args.userId);\n\n        let result = `# User: ${user.firstName} ${user.lastName}\\n\\n`;\n        result += `**ID:** ${user.id}\\n`;\n        result += `**Email:** ${user.email}\\n`;\n        result += `**Role:** ${user.role}\\n`;\n        result += `**Status:** ${user.disabled ? '\uD83D\uDD34 Disabled' : '\uD83D\uDFE2 Active'}\\n`;\n\n        if (user.createdAt) {\n          result += `**Created:** ${new Date(user.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (user.updatedAt) {\n          result += `**Updated:** ${new Date(user.updatedAt).toLocaleString()}\\n`;\n        }\n\n        if (user.lastSeenAt) {\n          result += `**Last Seen:** ${new Date(user.lastSeenAt).toLocaleString()}\\n`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get user: ${error.message}`);\n        }\n        throw new UserError('Failed to get user with unknown error');\n      }\n    },\n  });\n\n  // Create user tool\n  server.addTool({\n    name: 'create-user',\n    description: 'Create a new user in n8n with email, name, password, and role',\n    parameters: CreateUserSchema,\n    annotations: {\n      title: 'Create New User',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateUserSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const userData: CreateUserRequest = {\n          email: args.email,\n          firstName: args.firstName,\n          lastName: args.lastName,\n          password: args.password,\n          role: args.role,\n        };\n\n        const user = await client.createUser(userData);\n\n        return (\n          `\u2705 Successfully created user \"${user.firstName} ${user.lastName}\" with ID: ${user.id}\\n` +\n          `Email: ${user.email}\\n` +\n          `Role: ${user.role}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create user: ${error.message}`);\n        }\n        throw new UserError('Failed to create user with unknown error');\n      }\n    },\n  });\n\n  // Update user tool\n  server.addTool({\n    name: 'update-user',\n    description: \"Update a user's information including email, name, role, or status\",\n    parameters: UpdateUserSchema,\n    annotations: {\n      title: 'Update User',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UpdateUserSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const { userId, ...updateData } = args;\n        const userData: UpdateUserRequest = updateData;\n\n        const user = await client.updateUser(userId, userData);\n\n        return (\n          `\u2705 Successfully updated user \"${user.firstName} ${user.lastName}\" (ID: ${user.id})\\n` +\n          `Email: ${user.email}\\n` +\n          `Role: ${user.role}\\n` +\n          `Status: ${user.disabled ? '\uD83D\uDD34 Disabled' : '\uD83D\uDFE2 Active'}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update user: ${error.message}`);\n        }\n        throw new UserError('Failed to update user with unknown error');\n      }\n    },\n  });\n\n  // Delete user tool\n  server.addTool({\n    name: 'delete-user',\n    description: 'Delete a user from n8n permanently. WARNING: This action cannot be undone',\n    parameters: UserIdSchema,\n    annotations: {\n      title: 'Delete User',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof UserIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteUser(args.userId);\n        return `\u2705 Successfully deleted user with ID: ${args.userId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete user: ${error.message}`);\n        }\n        throw new UserError('Failed to delete user with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4d5aac53f83ff8e6d78055f9a26ea3c7798c2ab3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wh3369e51 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wh3369e51();
cov_1wh3369e51().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1wh3369e51().s[1]++;
exports.createUserTools = createUserTools;
const zod_1 =
/* istanbul ignore next */
(cov_1wh3369e51().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1wh3369e51().s[3]++, require("fastmcp"));
// Zod schemas for validation
const UserIdSchema =
/* istanbul ignore next */
(cov_1wh3369e51().s[4]++, zod_1.z.object({
  userId: zod_1.z.string().min(1, 'User ID is required')
}));
const ListUsersSchema =
/* istanbul ignore next */
(cov_1wh3369e51().s[5]++, zod_1.z.object({
  limit: zod_1.z.number().min(1).max(100).optional(),
  cursor: zod_1.z.string().optional()
}));
const CreateUserSchema =
/* istanbul ignore next */
(cov_1wh3369e51().s[6]++, zod_1.z.object({
  email: zod_1.z.string().email('Valid email address is required'),
  firstName: zod_1.z.string().min(1, 'First name is required'),
  lastName: zod_1.z.string().min(1, 'Last name is required'),
  password: zod_1.z.string().min(8, 'Password must be at least 8 characters'),
  role: zod_1.z.enum(['admin', 'member', 'owner']).optional().default('member')
}));
const UpdateUserSchema =
/* istanbul ignore next */
(cov_1wh3369e51().s[7]++, zod_1.z.object({
  userId: zod_1.z.string().min(1, 'User ID is required'),
  email: zod_1.z.string().email().optional(),
  firstName: zod_1.z.string().min(1).optional(),
  lastName: zod_1.z.string().min(1).optional(),
  role: zod_1.z.enum(['admin', 'member', 'owner']).optional(),
  disabled: zod_1.z.boolean().optional()
}));
// Tool registration function
function createUserTools(getClient, server) {
  /* istanbul ignore next */
  cov_1wh3369e51().f[0]++;
  cov_1wh3369e51().s[8]++;
  // List users tool
  server.addTool({
    name: 'list-users',
    description: 'List all users in the n8n instance with pagination support',
    parameters: ListUsersSchema,
    annotations: {
      title: 'List n8n Users',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1wh3369e51().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_1wh3369e51().s[9]++, getClient());
      /* istanbul ignore next */
      cov_1wh3369e51().s[10]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1wh3369e51().b[0][0]++;
        cov_1wh3369e51().s[11]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1wh3369e51().b[0][1]++;
      }
      cov_1wh3369e51().s[12]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[13]++, {});
        /* istanbul ignore next */
        cov_1wh3369e51().s[14]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[1][0]++;
          cov_1wh3369e51().s[15]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[1][1]++;
        }
        cov_1wh3369e51().s[16]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[2][0]++;
          cov_1wh3369e51().s[17]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[18]++, await client.getUsers(options));
        /* istanbul ignore next */
        cov_1wh3369e51().s[19]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[3][0]++;
          cov_1wh3369e51().s[20]++;
          return 'No users found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[21]++, `Found ${response.data.length} user(s):\n\n`);
        /* istanbul ignore next */
        cov_1wh3369e51().s[22]++;
        response.data.forEach((user, index) => {
          /* istanbul ignore next */
          cov_1wh3369e51().f[2]++;
          cov_1wh3369e51().s[23]++;
          result += `${index + 1}. **${user.firstName} ${user.lastName}**\n`;
          /* istanbul ignore next */
          cov_1wh3369e51().s[24]++;
          result += `   - ID: ${user.id}\n`;
          /* istanbul ignore next */
          cov_1wh3369e51().s[25]++;
          result += `   - Email: ${user.email}\n`;
          /* istanbul ignore next */
          cov_1wh3369e51().s[26]++;
          result += `   - Role: ${user.role}\n`;
          /* istanbul ignore next */
          cov_1wh3369e51().s[27]++;
          result += `   - Status: ${user.disabled ?
          /* istanbul ignore next */
          (cov_1wh3369e51().b[4][0]++, '🔴 Disabled') :
          /* istanbul ignore next */
          (cov_1wh3369e51().b[4][1]++, '🟢 Active')}\n`;
          /* istanbul ignore next */
          cov_1wh3369e51().s[28]++;
          if (user.createdAt) {
            /* istanbul ignore next */
            cov_1wh3369e51().b[5][0]++;
            cov_1wh3369e51().s[29]++;
            result += `   - Created: ${new Date(user.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1wh3369e51().b[5][1]++;
          }
          cov_1wh3369e51().s[30]++;
          if (user.lastSeenAt) {
            /* istanbul ignore next */
            cov_1wh3369e51().b[6][0]++;
            cov_1wh3369e51().s[31]++;
            result += `   - Last Seen: ${new Date(user.lastSeenAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1wh3369e51().b[6][1]++;
          }
          cov_1wh3369e51().s[32]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1wh3369e51().s[33]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[7][0]++;
          cov_1wh3369e51().s[34]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[7][1]++;
        }
        cov_1wh3369e51().s[35]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1wh3369e51().s[36]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[8][0]++;
          cov_1wh3369e51().s[37]++;
          throw new fastmcp_1.UserError(`Failed to list users: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[8][1]++;
        }
        cov_1wh3369e51().s[38]++;
        throw new fastmcp_1.UserError('Failed to list users with unknown error');
      }
    }
  });
  // Get user tool
  /* istanbul ignore next */
  cov_1wh3369e51().s[39]++;
  server.addTool({
    name: 'get-user',
    description: 'Get detailed information about a specific user by ID',
    parameters: UserIdSchema,
    annotations: {
      title: 'Get User Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1wh3369e51().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_1wh3369e51().s[40]++, getClient());
      /* istanbul ignore next */
      cov_1wh3369e51().s[41]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1wh3369e51().b[9][0]++;
        cov_1wh3369e51().s[42]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1wh3369e51().b[9][1]++;
      }
      cov_1wh3369e51().s[43]++;
      try {
        const user =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[44]++, await client.getUser(args.userId));
        let result =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[45]++, `# User: ${user.firstName} ${user.lastName}\n\n`);
        /* istanbul ignore next */
        cov_1wh3369e51().s[46]++;
        result += `**ID:** ${user.id}\n`;
        /* istanbul ignore next */
        cov_1wh3369e51().s[47]++;
        result += `**Email:** ${user.email}\n`;
        /* istanbul ignore next */
        cov_1wh3369e51().s[48]++;
        result += `**Role:** ${user.role}\n`;
        /* istanbul ignore next */
        cov_1wh3369e51().s[49]++;
        result += `**Status:** ${user.disabled ?
        /* istanbul ignore next */
        (cov_1wh3369e51().b[10][0]++, '🔴 Disabled') :
        /* istanbul ignore next */
        (cov_1wh3369e51().b[10][1]++, '🟢 Active')}\n`;
        /* istanbul ignore next */
        cov_1wh3369e51().s[50]++;
        if (user.createdAt) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[11][0]++;
          cov_1wh3369e51().s[51]++;
          result += `**Created:** ${new Date(user.createdAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[11][1]++;
        }
        cov_1wh3369e51().s[52]++;
        if (user.updatedAt) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[12][0]++;
          cov_1wh3369e51().s[53]++;
          result += `**Updated:** ${new Date(user.updatedAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[12][1]++;
        }
        cov_1wh3369e51().s[54]++;
        if (user.lastSeenAt) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[13][0]++;
          cov_1wh3369e51().s[55]++;
          result += `**Last Seen:** ${new Date(user.lastSeenAt).toLocaleString()}\n`;
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[13][1]++;
        }
        cov_1wh3369e51().s[56]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1wh3369e51().s[57]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[14][0]++;
          cov_1wh3369e51().s[58]++;
          throw new fastmcp_1.UserError(`Failed to get user: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[14][1]++;
        }
        cov_1wh3369e51().s[59]++;
        throw new fastmcp_1.UserError('Failed to get user with unknown error');
      }
    }
  });
  // Create user tool
  /* istanbul ignore next */
  cov_1wh3369e51().s[60]++;
  server.addTool({
    name: 'create-user',
    description: 'Create a new user in n8n with email, name, password, and role',
    parameters: CreateUserSchema,
    annotations: {
      title: 'Create New User',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1wh3369e51().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_1wh3369e51().s[61]++, getClient());
      /* istanbul ignore next */
      cov_1wh3369e51().s[62]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1wh3369e51().b[15][0]++;
        cov_1wh3369e51().s[63]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1wh3369e51().b[15][1]++;
      }
      cov_1wh3369e51().s[64]++;
      try {
        const userData =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[65]++, {
          email: args.email,
          firstName: args.firstName,
          lastName: args.lastName,
          password: args.password,
          role: args.role
        });
        const user =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[66]++, await client.createUser(userData));
        /* istanbul ignore next */
        cov_1wh3369e51().s[67]++;
        return `✅ Successfully created user "${user.firstName} ${user.lastName}" with ID: ${user.id}\n` + `Email: ${user.email}\n` + `Role: ${user.role}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1wh3369e51().s[68]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[16][0]++;
          cov_1wh3369e51().s[69]++;
          throw new fastmcp_1.UserError(`Failed to create user: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[16][1]++;
        }
        cov_1wh3369e51().s[70]++;
        throw new fastmcp_1.UserError('Failed to create user with unknown error');
      }
    }
  });
  // Update user tool
  /* istanbul ignore next */
  cov_1wh3369e51().s[71]++;
  server.addTool({
    name: 'update-user',
    description: "Update a user's information including email, name, role, or status",
    parameters: UpdateUserSchema,
    annotations: {
      title: 'Update User',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1wh3369e51().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_1wh3369e51().s[72]++, getClient());
      /* istanbul ignore next */
      cov_1wh3369e51().s[73]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1wh3369e51().b[17][0]++;
        cov_1wh3369e51().s[74]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1wh3369e51().b[17][1]++;
      }
      cov_1wh3369e51().s[75]++;
      try {
        const {
          userId,
          ...updateData
        } =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[76]++, args);
        const userData =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[77]++, updateData);
        const user =
        /* istanbul ignore next */
        (cov_1wh3369e51().s[78]++, await client.updateUser(userId, userData));
        /* istanbul ignore next */
        cov_1wh3369e51().s[79]++;
        return `✅ Successfully updated user "${user.firstName} ${user.lastName}" (ID: ${user.id})\n` + `Email: ${user.email}\n` + `Role: ${user.role}\n` + `Status: ${user.disabled ?
        /* istanbul ignore next */
        (cov_1wh3369e51().b[18][0]++, '🔴 Disabled') :
        /* istanbul ignore next */
        (cov_1wh3369e51().b[18][1]++, '🟢 Active')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1wh3369e51().s[80]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[19][0]++;
          cov_1wh3369e51().s[81]++;
          throw new fastmcp_1.UserError(`Failed to update user: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[19][1]++;
        }
        cov_1wh3369e51().s[82]++;
        throw new fastmcp_1.UserError('Failed to update user with unknown error');
      }
    }
  });
  // Delete user tool
  /* istanbul ignore next */
  cov_1wh3369e51().s[83]++;
  server.addTool({
    name: 'delete-user',
    description: 'Delete a user from n8n permanently. WARNING: This action cannot be undone',
    parameters: UserIdSchema,
    annotations: {
      title: 'Delete User',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1wh3369e51().f[6]++;
      const client =
      /* istanbul ignore next */
      (cov_1wh3369e51().s[84]++, getClient());
      /* istanbul ignore next */
      cov_1wh3369e51().s[85]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1wh3369e51().b[20][0]++;
        cov_1wh3369e51().s[86]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1wh3369e51().b[20][1]++;
      }
      cov_1wh3369e51().s[87]++;
      try {
        /* istanbul ignore next */
        cov_1wh3369e51().s[88]++;
        await client.deleteUser(args.userId);
        /* istanbul ignore next */
        cov_1wh3369e51().s[89]++;
        return `✅ Successfully deleted user with ID: ${args.userId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1wh3369e51().s[90]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1wh3369e51().b[21][0]++;
          cov_1wh3369e51().s[91]++;
          throw new fastmcp_1.UserError(`Failed to delete user: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1wh3369e51().b[21][1]++;
        }
        cov_1wh3369e51().s[92]++;
        throw new fastmcp_1.UserError('Failed to delete user with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,