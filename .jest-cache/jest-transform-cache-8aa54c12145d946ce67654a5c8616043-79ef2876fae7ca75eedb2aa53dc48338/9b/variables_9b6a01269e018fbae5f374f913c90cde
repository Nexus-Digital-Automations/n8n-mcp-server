ded25e398b755457133bb87b859c274e
"use strict";

/* istanbul ignore next */
function cov_1q46ed8fbu() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts";
  var hash = "45033764ff9dd382bf62170dff10a7ead46d6761";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 50
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 9,
          column: 2
        }
      },
      "5": {
        start: {
          line: 10,
          column: 28
        },
        end: {
          line: 13,
          column: 2
        }
      },
      "6": {
        start: {
          line: 14,
          column: 29
        },
        end: {
          line: 18,
          column: 2
        }
      },
      "7": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 79,
          column: 7
        }
      },
      "8": {
        start: {
          line: 34,
          column: 27
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "9": {
        start: {
          line: 35,
          column: 12
        },
        end: {
          line: 37,
          column: 13
        }
      },
      "10": {
        start: {
          line: 36,
          column: 16
        },
        end: {
          line: 36,
          column: 104
        }
      },
      "11": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 77,
          column: 13
        }
      },
      "12": {
        start: {
          line: 39,
          column: 32
        },
        end: {
          line: 39,
          column: 34
        }
      },
      "13": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 41,
          column: 47
        }
      },
      "14": {
        start: {
          line: 41,
          column: 20
        },
        end: {
          line: 41,
          column: 47
        }
      },
      "15": {
        start: {
          line: 42,
          column: 16
        },
        end: {
          line: 43,
          column: 49
        }
      },
      "16": {
        start: {
          line: 43,
          column: 20
        },
        end: {
          line: 43,
          column: 49
        }
      },
      "17": {
        start: {
          line: 44,
          column: 33
        },
        end: {
          line: 44,
          column: 67
        }
      },
      "18": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "19": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 69
        }
      },
      "20": {
        start: {
          line: 48,
          column: 29
        },
        end: {
          line: 48,
          column: 77
        }
      },
      "21": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 62,
          column: 19
        }
      },
      "22": {
        start: {
          line: 50,
          column: 20
        },
        end: {
          line: 50,
          column: 68
        }
      },
      "23": {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 58
        }
      },
      "24": {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 52,
          column: 74
        }
      },
      "25": {
        start: {
          line: 54,
          column: 20
        },
        end: {
          line: 54,
          column: 55
        }
      },
      "26": {
        start: {
          line: 55,
          column: 20
        },
        end: {
          line: 57,
          column: 21
        }
      },
      "27": {
        start: {
          line: 56,
          column: 24
        },
        end: {
          line: 56,
          column: 105
        }
      },
      "28": {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 60,
          column: 21
        }
      },
      "29": {
        start: {
          line: 59,
          column: 24
        },
        end: {
          line: 59,
          column: 105
        }
      },
      "30": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 61,
          column: 35
        }
      },
      "31": {
        start: {
          line: 63,
          column: 16
        },
        end: {
          line: 65,
          column: 17
        }
      },
      "32": {
        start: {
          line: 64,
          column: 20
        },
        end: {
          line: 64,
          column: 95
        }
      },
      "33": {
        start: {
          line: 66,
          column: 16
        },
        end: {
          line: 66,
          column: 30
        }
      },
      "34": {
        start: {
          line: 69,
          column: 16
        },
        end: {
          line: 75,
          column: 17
        }
      },
      "35": {
        start: {
          line: 71,
          column: 20
        },
        end: {
          line: 73,
          column: 21
        }
      },
      "36": {
        start: {
          line: 72,
          column: 24
        },
        end: {
          line: 72,
          column: 174
        }
      },
      "37": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 96
        }
      },
      "38": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 93
        }
      },
      "39": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 119,
          column: 7
        }
      },
      "40": {
        start: {
          line: 93,
          column: 27
        },
        end: {
          line: 93,
          column: 38
        }
      },
      "41": {
        start: {
          line: 94,
          column: 12
        },
        end: {
          line: 96,
          column: 13
        }
      },
      "42": {
        start: {
          line: 95,
          column: 16
        },
        end: {
          line: 95,
          column: 104
        }
      },
      "43": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 117,
          column: 13
        }
      },
      "44": {
        start: {
          line: 98,
          column: 37
        },
        end: {
          line: 102,
          column: 17
        }
      },
      "45": {
        start: {
          line: 103,
          column: 33
        },
        end: {
          line: 103,
          column: 74
        }
      },
      "46": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 106,
          column: 52
        }
      },
      "47": {
        start: {
          line: 109,
          column: 16
        },
        end: {
          line: 115,
          column: 17
        }
      },
      "48": {
        start: {
          line: 111,
          column: 20
        },
        end: {
          line: 113,
          column: 21
        }
      },
      "49": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 174
        }
      },
      "50": {
        start: {
          line: 114,
          column: 20
        },
        end: {
          line: 114,
          column: 97
        }
      },
      "51": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 116,
          column: 94
        }
      },
      "52": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 152,
          column: 7
        }
      },
      "53": {
        start: {
          line: 133,
          column: 27
        },
        end: {
          line: 133,
          column: 38
        }
      },
      "54": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 136,
          column: 13
        }
      },
      "55": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 135,
          column: 104
        }
      },
      "56": {
        start: {
          line: 137,
          column: 12
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "57": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "58": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 85
        }
      },
      "59": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "60": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 146,
          column: 21
        }
      },
      "61": {
        start: {
          line: 145,
          column: 24
        },
        end: {
          line: 145,
          column: 174
        }
      },
      "62": {
        start: {
          line: 147,
          column: 20
        },
        end: {
          line: 147,
          column: 97
        }
      },
      "63": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 94
        }
      }
    },
    fnMap: {
      "0": {
        name: "createVariableTools",
        decl: {
          start: {
            line: 20,
            column: 9
          },
          end: {
            line: 20,
            column: 28
          }
        },
        loc: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 153,
            column: 1
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 33,
            column: 18
          }
        },
        loc: {
          start: {
            line: 33,
            column: 33
          },
          end: {
            line: 78,
            column: 9
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 38
          },
          end: {
            line: 49,
            column: 39
          }
        },
        loc: {
          start: {
            line: 49,
            column: 59
          },
          end: {
            line: 62,
            column: 17
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 17
          },
          end: {
            line: 92,
            column: 18
          }
        },
        loc: {
          start: {
            line: 92,
            column: 33
          },
          end: {
            line: 118,
            column: 9
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 132,
            column: 17
          },
          end: {
            line: 132,
            column: 18
          }
        },
        loc: {
          start: {
            line: 132,
            column: 33
          },
          end: {
            line: 151,
            column: 9
          }
        },
        line: 132
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 37,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 41,
            column: 47
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 16
          },
          end: {
            line: 41,
            column: 47
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 40
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 43,
            column: 49
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 16
          },
          end: {
            line: 43,
            column: 49
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 52,
            column: 44
          },
          end: {
            line: 52,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 44
          },
          end: {
            line: 52,
            column: 57
          }
        }, {
          start: {
            line: 52,
            column: 61
          },
          end: {
            line: 52,
            column: 69
          }
        }],
        line: 52
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 57,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 20
          },
          end: {
            line: 57,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 60,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 20
          },
          end: {
            line: 60,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 65,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 65,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 63
      },
      "8": {
        loc: {
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 16
          },
          end: {
            line: 75,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "9": {
        loc: {
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 73,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 20
          },
          end: {
            line: 73,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 71
      },
      "10": {
        loc: {
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 94,
            column: 12
          },
          end: {
            line: 96,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 94
      },
      "11": {
        loc: {
          start: {
            line: 105,
            column: 29
          },
          end: {
            line: 105,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 105,
            column: 29
          },
          end: {
            line: 105,
            column: 42
          }
        }, {
          start: {
            line: 105,
            column: 46
          },
          end: {
            line: 105,
            column: 54
          }
        }],
        line: 105
      },
      "12": {
        loc: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 115,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 109
      },
      "13": {
        loc: {
          start: {
            line: 111,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 20
          },
          end: {
            line: 113,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "14": {
        loc: {
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 136,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 134
      },
      "15": {
        loc: {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 20
          },
          end: {
            line: 146,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 20
          },
          end: {
            line: 146,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/variables.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nVariable, CreateVariableRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst VariableIdSchema = z.object({\n  variableId: z.string().min(1, 'Variable ID is required'),\n});\n\nconst ListVariablesSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateVariableSchema = z.object({\n  key: z.string().min(1, 'Variable key is required'),\n  value: z.string().min(1, 'Variable value is required'),\n  type: z.enum(['string', 'number', 'boolean', 'json']).optional().default('string'),\n});\n\n// Tool registration function\nexport function createVariableTools(getClient: () => N8nClient | null, server: any) {\n  // List variables tool\n  server.addTool({\n    name: 'list-variables',\n    description:\n      'List all environment variables in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: ListVariablesSchema,\n    annotations: {\n      title: 'List n8n Variables',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListVariablesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getVariables(options);\n\n        if (response.data.length === 0) {\n          return 'No variables found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} variable(s):\\n\\n`;\n\n        response.data.forEach((variable: N8nVariable, index: number) => {\n          result += `${index + 1}. **${variable.key}**\\n`;\n          result += `   - ID: ${variable.id}\\n`;\n          result += `   - Type: ${variable.type || 'string'}\\n`;\n          // Don't show actual values for security reasons\n          result += `   - Value: [HIDDEN]\\n`;\n          if (variable.createdAt) {\n            result += `   - Created: ${new Date(variable.createdAt).toLocaleDateString()}\\n`;\n          }\n          if (variable.updatedAt) {\n            result += `   - Updated: ${new Date(variable.updatedAt).toLocaleDateString()}\\n`;\n          }\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n\uD83D\uDCC4 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to list variables: ${error.message}`);\n        }\n        throw new UserError('Failed to list variables with unknown error');\n      }\n    },\n  });\n\n  // Create variable tool\n  server.addTool({\n    name: 'create-variable',\n    description:\n      'Create a new environment variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: CreateVariableSchema,\n    annotations: {\n      title: 'Create New Variable',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateVariableSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const variableData: CreateVariableRequest = {\n          key: args.key,\n          value: args.value,\n          type: args.type,\n        };\n\n        const variable = await client.createVariable(variableData);\n\n        return (\n          `\u2705 Successfully created variable \"${variable.key}\" with ID: ${variable.id}\\n` +\n          `Type: ${variable.type || 'string'}\\n` +\n          `Value: [HIDDEN for security]`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to create variable: ${error.message}`);\n        }\n        throw new UserError('Failed to create variable with unknown error');\n      }\n    },\n  });\n\n  // Delete variable tool\n  server.addTool({\n    name: 'delete-variable',\n    description:\n      'Delete an environment variable from n8n permanently. NOTE: Requires n8n Enterprise license with variable management features enabled',\n    parameters: VariableIdSchema,\n    annotations: {\n      title: 'Delete Variable',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof VariableIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteVariable(args.variableId);\n        return `\u2705 Successfully deleted variable with ID: ${args.variableId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          // Check for license-related errors\n          if (error.message.includes('license')) {\n            throw new UserError(\n              `This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`\n            );\n          }\n          throw new UserError(`Failed to delete variable: ${error.message}`);\n        }\n        throw new UserError('Failed to delete variable with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "45033764ff9dd382bf62170dff10a7ead46d6761"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1q46ed8fbu = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q46ed8fbu();
cov_1q46ed8fbu().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1q46ed8fbu().s[1]++;
exports.createVariableTools = createVariableTools;
const zod_1 =
/* istanbul ignore next */
(cov_1q46ed8fbu().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_1q46ed8fbu().s[3]++, require("fastmcp"));
// Zod schemas for validation
const VariableIdSchema =
/* istanbul ignore next */
(cov_1q46ed8fbu().s[4]++, zod_1.z.object({
  variableId: zod_1.z.string().min(1, 'Variable ID is required')
}));
const ListVariablesSchema =
/* istanbul ignore next */
(cov_1q46ed8fbu().s[5]++, zod_1.z.object({
  limit: zod_1.z.number().min(1).max(100).optional(),
  cursor: zod_1.z.string().optional()
}));
const CreateVariableSchema =
/* istanbul ignore next */
(cov_1q46ed8fbu().s[6]++, zod_1.z.object({
  key: zod_1.z.string().min(1, 'Variable key is required'),
  value: zod_1.z.string().min(1, 'Variable value is required'),
  type: zod_1.z.enum(['string', 'number', 'boolean', 'json']).optional().default('string')
}));
// Tool registration function
function createVariableTools(getClient, server) {
  /* istanbul ignore next */
  cov_1q46ed8fbu().f[0]++;
  cov_1q46ed8fbu().s[7]++;
  // List variables tool
  server.addTool({
    name: 'list-variables',
    description: 'List all environment variables in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',
    parameters: ListVariablesSchema,
    annotations: {
      title: 'List n8n Variables',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1q46ed8fbu().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_1q46ed8fbu().s[8]++, getClient());
      /* istanbul ignore next */
      cov_1q46ed8fbu().s[9]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().b[0][0]++;
        cov_1q46ed8fbu().s[10]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1q46ed8fbu().b[0][1]++;
      }
      cov_1q46ed8fbu().s[11]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_1q46ed8fbu().s[12]++, {});
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[13]++;
        if (args.limit) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[1][0]++;
          cov_1q46ed8fbu().s[14]++;
          options.limit = args.limit;
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[1][1]++;
        }
        cov_1q46ed8fbu().s[15]++;
        if (args.cursor) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[2][0]++;
          cov_1q46ed8fbu().s[16]++;
          options.cursor = args.cursor;
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[2][1]++;
        }
        const response =
        /* istanbul ignore next */
        (cov_1q46ed8fbu().s[17]++, await client.getVariables(options));
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[18]++;
        if (response.data.length === 0) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[3][0]++;
          cov_1q46ed8fbu().s[19]++;
          return 'No variables found in the n8n instance.';
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[3][1]++;
        }
        let result =
        /* istanbul ignore next */
        (cov_1q46ed8fbu().s[20]++, `Found ${response.data.length} variable(s):\n\n`);
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[21]++;
        response.data.forEach((variable, index) => {
          /* istanbul ignore next */
          cov_1q46ed8fbu().f[2]++;
          cov_1q46ed8fbu().s[22]++;
          result += `${index + 1}. **${variable.key}**\n`;
          /* istanbul ignore next */
          cov_1q46ed8fbu().s[23]++;
          result += `   - ID: ${variable.id}\n`;
          /* istanbul ignore next */
          cov_1q46ed8fbu().s[24]++;
          result += `   - Type: ${
          /* istanbul ignore next */
          (cov_1q46ed8fbu().b[4][0]++, variable.type) ||
          /* istanbul ignore next */
          (cov_1q46ed8fbu().b[4][1]++, 'string')}\n`;
          // Don't show actual values for security reasons
          /* istanbul ignore next */
          cov_1q46ed8fbu().s[25]++;
          result += `   - Value: [HIDDEN]\n`;
          /* istanbul ignore next */
          cov_1q46ed8fbu().s[26]++;
          if (variable.createdAt) {
            /* istanbul ignore next */
            cov_1q46ed8fbu().b[5][0]++;
            cov_1q46ed8fbu().s[27]++;
            result += `   - Created: ${new Date(variable.createdAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1q46ed8fbu().b[5][1]++;
          }
          cov_1q46ed8fbu().s[28]++;
          if (variable.updatedAt) {
            /* istanbul ignore next */
            cov_1q46ed8fbu().b[6][0]++;
            cov_1q46ed8fbu().s[29]++;
            result += `   - Updated: ${new Date(variable.updatedAt).toLocaleDateString()}\n`;
          } else
          /* istanbul ignore next */
          {
            cov_1q46ed8fbu().b[6][1]++;
          }
          cov_1q46ed8fbu().s[30]++;
          result += '\n';
        });
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[31]++;
        if (response.nextCursor) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[7][0]++;
          cov_1q46ed8fbu().s[32]++;
          result += `\n📄 Use cursor "${response.nextCursor}" to get the next page.`;
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[7][1]++;
        }
        cov_1q46ed8fbu().s[33]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[34]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[8][0]++;
          cov_1q46ed8fbu().s[35]++;
          // Check for license-related errors
          if (error.message.includes('license')) {
            /* istanbul ignore next */
            cov_1q46ed8fbu().b[9][0]++;
            cov_1q46ed8fbu().s[36]++;
            throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
          } else
          /* istanbul ignore next */
          {
            cov_1q46ed8fbu().b[9][1]++;
          }
          cov_1q46ed8fbu().s[37]++;
          throw new fastmcp_1.UserError(`Failed to list variables: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[8][1]++;
        }
        cov_1q46ed8fbu().s[38]++;
        throw new fastmcp_1.UserError('Failed to list variables with unknown error');
      }
    }
  });
  // Create variable tool
  /* istanbul ignore next */
  cov_1q46ed8fbu().s[39]++;
  server.addTool({
    name: 'create-variable',
    description: 'Create a new environment variable in n8n. NOTE: Requires n8n Enterprise license with variable management features enabled',
    parameters: CreateVariableSchema,
    annotations: {
      title: 'Create New Variable',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1q46ed8fbu().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_1q46ed8fbu().s[40]++, getClient());
      /* istanbul ignore next */
      cov_1q46ed8fbu().s[41]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().b[10][0]++;
        cov_1q46ed8fbu().s[42]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1q46ed8fbu().b[10][1]++;
      }
      cov_1q46ed8fbu().s[43]++;
      try {
        const variableData =
        /* istanbul ignore next */
        (cov_1q46ed8fbu().s[44]++, {
          key: args.key,
          value: args.value,
          type: args.type
        });
        const variable =
        /* istanbul ignore next */
        (cov_1q46ed8fbu().s[45]++, await client.createVariable(variableData));
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[46]++;
        return `✅ Successfully created variable "${variable.key}" with ID: ${variable.id}\n` + `Type: ${
        /* istanbul ignore next */
        (cov_1q46ed8fbu().b[11][0]++, variable.type) ||
        /* istanbul ignore next */
        (cov_1q46ed8fbu().b[11][1]++, 'string')}\n` + `Value: [HIDDEN for security]`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[47]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[12][0]++;
          cov_1q46ed8fbu().s[48]++;
          // Check for license-related errors
          if (error.message.includes('license')) {
            /* istanbul ignore next */
            cov_1q46ed8fbu().b[13][0]++;
            cov_1q46ed8fbu().s[49]++;
            throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
          } else
          /* istanbul ignore next */
          {
            cov_1q46ed8fbu().b[13][1]++;
          }
          cov_1q46ed8fbu().s[50]++;
          throw new fastmcp_1.UserError(`Failed to create variable: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[12][1]++;
        }
        cov_1q46ed8fbu().s[51]++;
        throw new fastmcp_1.UserError('Failed to create variable with unknown error');
      }
    }
  });
  // Delete variable tool
  /* istanbul ignore next */
  cov_1q46ed8fbu().s[52]++;
  server.addTool({
    name: 'delete-variable',
    description: 'Delete an environment variable from n8n permanently. NOTE: Requires n8n Enterprise license with variable management features enabled',
    parameters: VariableIdSchema,
    annotations: {
      title: 'Delete Variable',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_1q46ed8fbu().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_1q46ed8fbu().s[53]++, getClient());
      /* istanbul ignore next */
      cov_1q46ed8fbu().s[54]++;
      if (!client) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().b[14][0]++;
        cov_1q46ed8fbu().s[55]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_1q46ed8fbu().b[14][1]++;
      }
      cov_1q46ed8fbu().s[56]++;
      try {
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[57]++;
        await client.deleteVariable(args.variableId);
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[58]++;
        return `✅ Successfully deleted variable with ID: ${args.variableId}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_1q46ed8fbu().s[59]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_1q46ed8fbu().b[15][0]++;
          cov_1q46ed8fbu().s[60]++;
          // Check for license-related errors
          if (error.message.includes('license')) {
            /* istanbul ignore next */
            cov_1q46ed8fbu().b[16][0]++;
            cov_1q46ed8fbu().s[61]++;
            throw new fastmcp_1.UserError(`This operation requires an n8n Enterprise license with variable management features enabled. Error: ${error.message}`);
          } else
          /* istanbul ignore next */
          {
            cov_1q46ed8fbu().b[16][1]++;
          }
          cov_1q46ed8fbu().s[62]++;
          throw new fastmcp_1.UserError(`Failed to delete variable: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_1q46ed8fbu().b[15][1]++;
        }
        cov_1q46ed8fbu().s[63]++;
        throw new fastmcp_1.UserError('Failed to delete variable with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,