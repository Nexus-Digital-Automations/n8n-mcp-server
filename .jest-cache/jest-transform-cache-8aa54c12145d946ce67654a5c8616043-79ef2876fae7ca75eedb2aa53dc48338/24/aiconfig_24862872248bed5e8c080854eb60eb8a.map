{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-config.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI configuration validation\nconst AINodeConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  config: z.record(z.any()),\n});\n\nconst AIPromptTestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  prompt: z.string().min(1, 'Prompt is required'),\n  sampleData: z.record(z.any()).optional(),\n});\n\nconst AIModelSelectionSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  modelType: z.enum(['openai', 'anthropic', 'local', 'custom']),\n  modelName: z.string().min(1, 'Model name is required'),\n  parameters: z.record(z.any()).optional(),\n});\n\nconst AIMemoryConfigSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  memoryType: z.enum(['buffer', 'summary', 'conversation', 'vector']),\n  maxTokens: z.number().min(1).max(100000).optional(),\n  context: z.record(z.any()).optional(),\n});\n\n// Tool registration function for AI configuration tools\nexport function createAIConfigTools(getClient: () => N8nClient | null, server: any) {\n  // List AI nodes in workflow\n  server.addTool({\n    name: 'list-ai-nodes',\n    description: 'List all AI-enabled nodes in a specific workflow or across all workflows',\n    parameters: z.object({\n      workflowId: z.string().optional(),\n    }),\n    annotations: {\n      title: 'List AI Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId?: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const aiNodeTypes = [\n          'openai',\n          'anthropic',\n          'chatgpt',\n          'gpt3',\n          'gpt4',\n          'claude',\n          'mistral',\n          'llama',\n          'huggingface',\n          'cohere',\n          'ai-agent',\n          'ai-memory',\n          'ai-tool',\n          'ai-chain',\n          'langchain',\n        ];\n\n        if (args.workflowId) {\n          // Get specific workflow and analyze its nodes\n          const workflow = await client.getWorkflow(args.workflowId);\n          const aiNodes =\n            workflow.nodes?.filter(node =>\n              aiNodeTypes.some(\n                aiType =>\n                  node.type?.toLowerCase().includes(aiType) ||\n                  node.name?.toLowerCase().includes('ai') ||\n                  node.parameters?.model !== undefined\n              )\n            ) || [];\n\n          if (aiNodes.length === 0) {\n            return `No AI nodes found in workflow \"${workflow.name}\" (${args.workflowId})`;\n          }\n\n          let result = `Found ${aiNodes.length} AI node(s) in workflow \"${workflow.name}\":\\n\\n`;\n          aiNodes.forEach((node, index) => {\n            result += `${index + 1}. **${node.name}** (${node.type})\\n`;\n            result += `   - Node ID: ${node.id}\\n`;\n            result += `   - Position: (${node.position?.[0] || 0}, ${node.position?.[1] || 0})\\n`;\n            if (node.parameters?.model) {\n              result += `   - Model: ${node.parameters.model}\\n`;\n            }\n            if (node.parameters?.temperature) {\n              result += `   - Temperature: ${node.parameters.temperature}\\n`;\n            }\n            result += '\\n';\n          });\n\n          return result;\n        } else {\n          // List AI nodes across all workflows\n          const workflows = await client.getWorkflows({ limit: 100 });\n          let totalAINodes = 0;\n          let result = 'AI nodes found across all workflows:\\n\\n';\n\n          for (const workflow of workflows.data) {\n            const aiNodes =\n              workflow.nodes?.filter(node =>\n                aiNodeTypes.some(\n                  aiType =>\n                    node.type?.toLowerCase().includes(aiType) ||\n                    node.name?.toLowerCase().includes('ai') ||\n                    node.parameters?.model !== undefined\n                )\n              ) || [];\n\n            if (aiNodes.length > 0) {\n              totalAINodes += aiNodes.length;\n              result += `**${workflow.name}** (${workflow.id}): ${aiNodes.length} AI node(s)\\n`;\n              aiNodes.forEach(node => {\n                result += `  - ${node.name} (${node.type})\\n`;\n              });\n              result += '\\n';\n            }\n          }\n\n          if (totalAINodes === 0) {\n            return 'No AI nodes found in any workflows.';\n          }\n\n          return `Total AI nodes found: ${totalAINodes}\\n\\n${result}`;\n        }\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI nodes: ${error.message}`);\n      }\n    },\n  });\n\n  // Get AI node configuration\n  server.addTool({\n    name: 'get-ai-node-config',\n    description:\n      'Get the configuration of a specific AI node including model settings, prompts, and parameters',\n    parameters: z.object({\n      workflowId: z.string().min(1, 'Workflow ID is required'),\n      nodeId: z.string().min(1, 'Node ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Node Configuration',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: { workflowId: string; nodeId: string }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        const config = {\n          nodeId: node.id,\n          nodeName: node.name,\n          nodeType: node.type,\n          position: node.position,\n          parameters: node.parameters || {},\n          credentials: node.credentials || {},\n          typeVersion: node.typeVersion,\n          disabled: node.disabled || false,\n        };\n\n        // Extract AI-specific configuration\n        const aiConfig: any = {\n          ...config,\n          aiSpecific: {\n            model: config.parameters.model || null,\n            temperature: config.parameters.temperature || null,\n            maxTokens: config.parameters.maxTokens || config.parameters.max_tokens || null,\n            systemPrompt: config.parameters.systemPrompt || config.parameters.system_prompt || null,\n            userPrompt: config.parameters.prompt || config.parameters.userPrompt || null,\n            memory: config.parameters.memory || null,\n            tools: config.parameters.tools || null,\n            context: config.parameters.context || null,\n          },\n        };\n\n        return (\n          `AI Node Configuration for \"${node.name}\" (${node.type}):\\n\\n` +\n          `**Basic Information:**\\n` +\n          `- Node ID: ${aiConfig.nodeId}\\n` +\n          `- Node Type: ${aiConfig.nodeType}\\n` +\n          `- Type Version: ${aiConfig.typeVersion}\\n` +\n          `- Disabled: ${aiConfig.disabled}\\n` +\n          `- Position: (${aiConfig.position?.[0] || 0}, ${aiConfig.position?.[1] || 0})\\n\\n` +\n          `**AI-Specific Configuration:**\\n` +\n          `- Model: ${aiConfig.aiSpecific.model || 'Not configured'}\\n` +\n          `- Temperature: ${aiConfig.aiSpecific.temperature || 'Not set'}\\n` +\n          `- Max Tokens: ${aiConfig.aiSpecific.maxTokens || 'Not set'}\\n` +\n          `- System Prompt: ${aiConfig.aiSpecific.systemPrompt ? 'Configured' : 'Not set'}\\n` +\n          `- User Prompt: ${aiConfig.aiSpecific.userPrompt ? 'Configured' : 'Not set'}\\n` +\n          `- Memory: ${aiConfig.aiSpecific.memory || 'Not configured'}\\n` +\n          `- Tools: ${aiConfig.aiSpecific.tools ? 'Configured' : 'Not set'}\\n` +\n          `- Context: ${aiConfig.aiSpecific.context ? 'Configured' : 'Not set'}\\n\\n` +\n          `**Full Parameters:**\\n\\`\\`\\`json\\n${JSON.stringify(config.parameters, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Credentials:**\\n\\`\\`\\`json\\n${JSON.stringify(config.credentials, null, 2)}\\n\\`\\`\\``\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to get AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Update AI node configuration\n  server.addTool({\n    name: 'update-ai-node-config',\n    description:\n      'Update the configuration of an AI node including model settings, prompts, and parameters',\n    parameters: AINodeConfigSchema,\n    annotations: {\n      title: 'Update AI Node Configuration',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AINodeConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Update the node configuration\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...args.config,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully updated AI node configuration for \"${workflow.nodes?.[nodeIndex]?.name}\" in workflow \"${workflow.name}\".\\n\\n` +\n          `Updated parameters:\\n\\`\\`\\`json\\n${JSON.stringify(args.config, null, 2)}\\n\\`\\`\\``\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to update AI node configuration: ${error.message}`);\n      }\n    },\n  });\n\n  // Test AI prompt with sample data\n  server.addTool({\n    name: 'test-ai-prompt',\n    description:\n      'Test an AI node prompt with sample data to validate functionality before execution',\n    parameters: AIPromptTestSchema,\n    annotations: {\n      title: 'Test AI Prompt',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIPromptTestSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Simulate prompt testing (in a real implementation, this would execute the node with test data)\n        const testResult = {\n          nodeId: args.nodeId,\n          nodeName: node.name,\n          nodeType: node.type,\n          prompt: args.prompt,\n          sampleData: args.sampleData || {},\n          model: node.parameters?.model || 'Unknown',\n          timestamp: new Date().toISOString(),\n          // Simulated response (in real implementation, would be actual AI response)\n          simulatedResponse: `[TEST MODE] This is a simulated response for prompt: \"${args.prompt}\". In a real implementation, this would execute the AI node with the provided sample data and return the actual AI response.`,\n          status: 'test_completed',\n          validationResults: {\n            promptValid: args.prompt.length > 0,\n            dataStructureValid: typeof args.sampleData === 'object',\n            nodeConfigurationValid: !!node.parameters?.model,\n          },\n        };\n\n        return (\n          `AI Prompt Test Results:\\n\\n` +\n          `**Node Information:**\\n` +\n          `- Node: ${testResult.nodeName} (${testResult.nodeType})\\n` +\n          `- Model: ${testResult.model}\\n` +\n          `- Test Time: ${testResult.timestamp}\\n\\n` +\n          `**Test Input:**\\n` +\n          `- Prompt: \"${testResult.prompt}\"\\n` +\n          `- Sample Data: ${JSON.stringify(testResult.sampleData, null, 2)}\\n\\n` +\n          `**Validation Results:**\\n` +\n          `- Prompt Valid: ${testResult.validationResults.promptValid ? '✅' : '❌'}\\n` +\n          `- Data Structure Valid: ${testResult.validationResults.dataStructureValid ? '✅' : '❌'}\\n` +\n          `- Node Configuration Valid: ${testResult.validationResults.nodeConfigurationValid ? '✅' : '❌'}\\n\\n` +\n          `**Simulated Response:**\\n${testResult.simulatedResponse}\\n\\n` +\n          `**Note:** This is a test simulation. To execute the actual AI node, use the 'execute-workflow' tool.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to test AI prompt: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI model selection\n  server.addTool({\n    name: 'configure-ai-model',\n    description: 'Configure AI model selection and parameters for an AI node',\n    parameters: AIModelSelectionSchema,\n    annotations: {\n      title: 'Configure AI Model',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIModelSelectionSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Update model configuration\n        const modelConfig = {\n          model: args.modelName,\n          modelType: args.modelType,\n          ...args.parameters,\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...modelConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully configured AI model for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n          `**Model Configuration:**\\n` +\n          `- Model Type: ${args.modelType}\\n` +\n          `- Model Name: ${args.modelName}\\n` +\n          `- Additional Parameters: ${JSON.stringify(args.parameters || {}, null, 2)}\\n\\n` +\n          `The workflow has been updated and is ready for use with the new model configuration.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI model: ${error.message}`);\n      }\n    },\n  });\n\n  // Configure AI memory and context\n  server.addTool({\n    name: 'configure-ai-memory',\n    description: 'Configure AI memory, context, and $fromAI() functionality for an AI node',\n    parameters: AIMemoryConfigSchema,\n    annotations: {\n      title: 'Configure AI Memory',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIMemoryConfigSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodeIndex = workflow.nodes?.findIndex(n => n.id === args.nodeId);\n\n        if (nodeIndex === -1 || nodeIndex === undefined) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        // Configure memory settings\n        const memoryConfig = {\n          memory: {\n            type: args.memoryType,\n            maxTokens: args.maxTokens,\n            context: args.context,\n            fromAI: true, // Enable $fromAI() functionality\n          },\n        };\n\n        if (workflow.nodes) {\n          workflow.nodes[nodeIndex].parameters = {\n            ...workflow.nodes[nodeIndex].parameters,\n            ...memoryConfig,\n          };\n        }\n\n        // Update the workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: workflow.nodes as Array<Record<string, unknown>>,\n          connections: workflow.connections,\n        });\n\n        return (\n          `Successfully configured AI memory for node \"${workflow.nodes?.[nodeIndex]?.name}\":\\n\\n` +\n          `**Memory Configuration:**\\n` +\n          `- Memory Type: ${args.memoryType}\\n` +\n          `- Max Tokens: ${args.maxTokens || 'Unlimited'}\\n` +\n          `- Context Enabled: ${args.context ? 'Yes' : 'No'}\\n` +\n          `- $fromAI() Function: Enabled\\n\\n` +\n          `**Usage:**\\n` +\n          `- Use $fromAI() in expressions to access AI-generated data\\n` +\n          `- Memory will be maintained across workflow executions\\n` +\n          `- Context data: ${JSON.stringify(args.context || {}, null, 2)}`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to configure AI memory: ${error.message}`);\n      }\n    },\n  });\n}\n"],"version":3}