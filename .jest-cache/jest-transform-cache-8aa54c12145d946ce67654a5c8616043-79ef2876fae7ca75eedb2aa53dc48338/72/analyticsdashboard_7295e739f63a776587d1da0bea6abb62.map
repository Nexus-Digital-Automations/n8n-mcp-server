{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics-dashboard.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/analytics-dashboard.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { EventClient, DashboardMetric } from '../client/eventClient.js';\n\n// Zod schemas for validation\nconst DashboardMetricsSchema = z.object({\n  timeRange: z.enum(['1h', '24h', '7d', '30d']).default('24h'),\n  includeWorkflows: z.boolean().default(true),\n  includeExecutions: z.boolean().default(true),\n  includeUsers: z.boolean().default(true),\n  includePerformance: z.boolean().default(true),\n  includeErrors: z.boolean().default(true),\n});\n\nconst UsageAnalyticsSchema = z.object({\n  period: z.enum(['hour', 'day', 'week', 'month']).default('day'),\n  limit: z.number().min(1).max(100).default(30),\n  groupBy: z.enum(['workflow', 'user', 'execution_status', 'node_type']).optional(),\n  workflowId: z.string().optional(),\n  userId: z.string().optional(),\n});\n\nconst PerformanceReportSchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d']).default('24h'),\n  includeExecutionTimes: z.boolean().default(true),\n  includeThroughput: z.boolean().default(true),\n  includeErrorRates: z.boolean().default(true),\n  includeResourceUsage: z.boolean().default(true),\n  workflowId: z.string().optional(),\n  percentiles: z.array(z.number().min(0).max(100)).default([50, 90, 95, 99]),\n});\n\nconst TrendAnalysisSchema = z.object({\n  metric: z.enum(['executions', 'success_rate', 'execution_time', 'error_rate', 'throughput']),\n  timeRange: z.enum(['7d', '30d', '90d']).default('30d'),\n  granularity: z.enum(['hour', 'day', 'week']).default('day'),\n  compareWith: z.enum(['previous_period', 'same_period_last_year']).optional(),\n});\n\nconst AlertConfigSchema = z.object({\n  metricName: z.string().min(1, 'Metric name is required'),\n  threshold: z.number().min(0, 'Threshold must be positive'),\n  operator: z.enum(['gt', 'lt', 'eq', 'gte', 'lte']).default('gt'),\n  timeWindow: z.enum(['5m', '15m', '1h', '24h']).default('15m'),\n  enabled: z.boolean().default(true),\n  webhookUrl: z.string().url().optional(),\n  emailRecipients: z.array(z.string().email()).optional(),\n});\n\nconst CustomMetricSchema = z.object({\n  name: z.string().min(1, 'Metric name is required'),\n  description: z.string().optional(),\n  query: z.string().min(1, 'Query is required'),\n  unit: z.string().optional(),\n  tags: z.record(z.string()).optional(),\n});\n\n// Global event client reference\nlet eventClient: EventClient | null = null;\n\n// Initialize event client\nconst getEventClient = (getClient: () => N8nClient | null): EventClient => {\n  if (!eventClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n\n    // This should use the same instance as event-streaming tools\n    // In practice, this would be managed by a service locator or DI container\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n\n    const config = {\n      baseUrl,\n      apiKey,\n      reconnectInterval: 5000,\n      maxReconnectAttempts: 10,\n      enableHeartbeat: true,\n      heartbeatInterval: 30000,\n    };\n\n    eventClient = new EventClient(client, config);\n  }\n  return eventClient;\n};\n\n// Helper functions\nconst formatMetric = (metric: DashboardMetric): string => {\n  let result = `**${metric.name}:** ${metric.value}`;\n\n  if (metric.unit) {\n    result += ` ${metric.unit}`;\n  }\n\n  if (metric.trend) {\n    const trendIcon =\n      metric.trend.direction === 'up' ? '📈' : metric.trend.direction === 'down' ? '📉' : '➡️';\n    result += ` ${trendIcon} ${metric.trend.percentage.toFixed(1)}% (${metric.trend.period})`;\n  }\n\n  if (metric.description) {\n    result += `\\n  _${metric.description}_`;\n  }\n\n  return result;\n};\n\nconst calculateTimeRange = (range: string): { start: Date; end: Date } => {\n  const end = new Date();\n  const start = new Date();\n\n  switch (range) {\n    case '1h':\n      start.setHours(start.getHours() - 1);\n      break;\n    case '24h':\n      start.setDate(start.getDate() - 1);\n      break;\n    case '7d':\n      start.setDate(start.getDate() - 7);\n      break;\n    case '30d':\n      start.setDate(start.getDate() - 30);\n      break;\n    case '90d':\n      start.setDate(start.getDate() - 90);\n      break;\n    default:\n      start.setDate(start.getDate() - 1);\n  }\n\n  return { start, end };\n};\n\nconst generateMockMetrics = (timeRange: string): DashboardMetric[] => {\n  const now = new Date();\n  const baseValue = Math.floor(Math.random() * 1000) + 100;\n\n  return [\n    {\n      id: 'total_executions',\n      name: 'Total Executions',\n      value: baseValue,\n      type: 'counter',\n      description: 'Total workflow executions in time range',\n      timestamp: now,\n      trend: {\n        direction: 'up',\n        percentage: Math.random() * 20,\n        period: timeRange,\n      },\n    },\n    {\n      id: 'success_rate',\n      name: 'Success Rate',\n      value: 85 + Math.random() * 10,\n      type: 'percentage',\n      unit: '%',\n      description: 'Percentage of successful executions',\n      timestamp: now,\n      trend: {\n        direction: Math.random() > 0.5 ? 'up' : 'down',\n        percentage: Math.random() * 5,\n        period: timeRange,\n      },\n    },\n    {\n      id: 'avg_execution_time',\n      name: 'Avg Execution Time',\n      value: 2.5 + Math.random() * 5,\n      type: 'gauge',\n      unit: 's',\n      description: 'Average time per workflow execution',\n      timestamp: now,\n      trend: {\n        direction: 'down',\n        percentage: Math.random() * 15,\n        period: timeRange,\n      },\n    },\n    {\n      id: 'error_rate',\n      name: 'Error Rate',\n      value: Math.random() * 10,\n      type: 'percentage',\n      unit: '%',\n      description: 'Percentage of failed executions',\n      timestamp: now,\n      trend: {\n        direction: Math.random() > 0.7 ? 'up' : 'down',\n        percentage: Math.random() * 8,\n        period: timeRange,\n      },\n    },\n    {\n      id: 'active_workflows',\n      name: 'Active Workflows',\n      value: Math.floor(Math.random() * 50) + 10,\n      type: 'gauge',\n      description: 'Number of currently active workflows',\n      timestamp: now,\n    },\n    {\n      id: 'throughput',\n      name: 'Throughput',\n      value: Math.floor(Math.random() * 100) + 20,\n      type: 'gauge',\n      unit: 'exec/min',\n      description: 'Executions per minute',\n      timestamp: now,\n      trend: {\n        direction: 'up',\n        percentage: Math.random() * 12,\n        period: timeRange,\n      },\n    },\n  ];\n};\n\n// Tool registration function\nexport function createAnalyticsDashboardTools(getClient: () => N8nClient | null, server: any) {\n  // Get dashboard metrics tool\n  server.addTool({\n    name: 'get-dashboard-metrics',\n    description: 'Get comprehensive dashboard metrics and KPIs',\n    parameters: DashboardMetricsSchema,\n    handler: async (args: z.infer<typeof DashboardMetricsSchema>) => {\n      try {\n        const client = getEventClient(getClient);\n        const { start, end } = calculateTimeRange(args.timeRange);\n\n        // Get real-time stats as base data\n        const realtimeStats = await client.getRealtimeStats();\n\n        // Generate comprehensive metrics (in a real implementation, this would query actual data)\n        const metrics = generateMockMetrics(args.timeRange);\n\n        let response = `📊 **Analytics Dashboard - ${args.timeRange.toUpperCase()}**\\n\\n`;\n        response += `**Report Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\\n\\n`;\n\n        // Core metrics\n        response += `**📈 Core Metrics:**\\n`;\n        metrics.slice(0, 4).forEach(metric => {\n          response += `• ${formatMetric(metric)}\\n`;\n        });\n\n        // Real-time data\n        if (args.includeExecutions) {\n          response += `\\n**⚡ Real-time Data:**\\n`;\n          response += `• Active Executions: ${realtimeStats.activeExecutions}\\n`;\n          response += `• Today's Executions: ${realtimeStats.totalExecutionsToday}\\n`;\n          response += `• Current Success Rate: ${realtimeStats.successRate.toFixed(1)}%\\n`;\n          response += `• Avg Response Time: ${(realtimeStats.averageExecutionTime / 1000).toFixed(2)}s\\n`;\n        }\n\n        // Workflow metrics\n        if (args.includeWorkflows && realtimeStats.topWorkflows.length > 0) {\n          response += `\\n**🔥 Top Performing Workflows:**\\n`;\n          realtimeStats.topWorkflows.slice(0, 5).forEach((workflow, index) => {\n            const avgTime =\n              workflow.avgTime > 0 ? ` (${(workflow.avgTime / 1000).toFixed(2)}s)` : '';\n            response += `${index + 1}. **${workflow.name}**: ${workflow.executions} executions${avgTime}\\n`;\n          });\n        }\n\n        // System performance\n        if (args.includePerformance) {\n          response += `\\n**💻 System Performance:**\\n`;\n          response += `• CPU Usage: ${realtimeStats.systemLoad.cpu.toFixed(1)}%\\n`;\n          response += `• Memory Usage: ${realtimeStats.systemLoad.memory.toFixed(1)}%\\n`;\n          response += `• Disk Usage: ${realtimeStats.systemLoad.disk.toFixed(1)}%\\n`;\n        }\n\n        // User activity\n        if (args.includeUsers) {\n          response += `\\n**👥 User Activity:**\\n`;\n          response += `• Active Users: ${realtimeStats.activeUsers}\\n`;\n          response += `• Peak Concurrent Users: ${Math.floor(realtimeStats.activeUsers * 1.2)}\\n`;\n        }\n\n        // Error analysis\n        if (args.includeErrors && realtimeStats.errorRate > 0) {\n          response += `\\n**🚨 Error Analysis:**\\n`;\n          response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\\n`;\n          response += `• Most Common Errors: Connection timeouts, Invalid credentials\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to get dashboard metrics: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Get usage analytics tool\n  server.addTool({\n    name: 'get-usage-analytics',\n    description: 'Get detailed usage analytics with grouping and filtering options',\n    parameters: UsageAnalyticsSchema,\n    handler: async (args: z.infer<typeof UsageAnalyticsSchema>) => {\n      try {\n        const client = getEventClient(getClient);\n\n        // Get analytics events from buffer\n        const analyticsEvents = client.getAnalyticsBuffer();\n\n        let response = `📊 **Usage Analytics Report**\\n\\n`;\n        response += `**Period:** ${args.period}\\n`;\n        response += `**Limit:** ${args.limit}\\n`;\n\n        if (args.groupBy) {\n          response += `**Grouped by:** ${args.groupBy}\\n`;\n        }\n\n        if (args.workflowId) {\n          response += `**Filtered by Workflow:** ${args.workflowId}\\n`;\n        }\n\n        response += `\\n`;\n\n        // Analytics summary\n        if (analyticsEvents.length > 0) {\n          const eventsByType = analyticsEvents.reduce((acc: Record<string, number>, event) => {\n            acc[event.type] = (acc[event.type] || 0) + 1;\n            return acc;\n          }, {});\n\n          response += `**📈 Event Summary (${analyticsEvents.length} total events):**\\n`;\n          Object.entries(eventsByType).forEach(([type, count]) => {\n            response += `• ${type}: ${count} events\\n`;\n          });\n\n          // Category breakdown\n          const eventsByCategory = analyticsEvents.reduce((acc: Record<string, number>, event) => {\n            acc[event.category] = (acc[event.category] || 0) + 1;\n            return acc;\n          }, {});\n\n          response += `\\n**📂 Category Breakdown:**\\n`;\n          Object.entries(eventsByCategory).forEach(([category, count]) => {\n            response += `• ${category}: ${count} events\\n`;\n          });\n\n          // Recent activity\n          const recentEvents = analyticsEvents\n            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n            .slice(0, 10);\n\n          if (recentEvents.length > 0) {\n            response += `\\n**🕐 Recent Activity (last 10 events):**\\n`;\n            recentEvents.forEach((event, index) => {\n              const timeStr = new Date(event.timestamp).toLocaleString();\n              response += `${index + 1}. **${event.action}** (${event.category}) - ${timeStr}\\n`;\n            });\n          }\n        } else {\n          response += `📭 **No analytics events found**\\n\\n`;\n          response += `Start using the system and tracking events to see usage analytics here.`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to get usage analytics: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Generate performance report tool\n  server.addTool({\n    name: 'generate-performance-report',\n    description: 'Generate a comprehensive performance analysis report',\n    parameters: PerformanceReportSchema,\n    handler: async (args: z.infer<typeof PerformanceReportSchema>) => {\n      try {\n        const client = getEventClient(getClient);\n        const { start, end } = calculateTimeRange(args.timeRange);\n        const realtimeStats = await client.getRealtimeStats();\n\n        let response = `📊 **Performance Analysis Report**\\n\\n`;\n        response += `**Analysis Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\\n`;\n        response += `**Generated:** ${new Date().toLocaleString()}\\n\\n`;\n\n        // Executive Summary\n        response += `**📈 Executive Summary:**\\n`;\n        response += `• Total Executions: ${realtimeStats.totalExecutionsToday}\\n`;\n        response += `• Success Rate: ${realtimeStats.successRate.toFixed(1)}%\\n`;\n        response += `• Average Response Time: ${(realtimeStats.averageExecutionTime / 1000).toFixed(2)}s\\n`;\n        response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\\n\\n`;\n\n        // Execution time analysis\n        if (args.includeExecutionTimes) {\n          response += `**⏱️ Execution Time Analysis:**\\n`;\n\n          // Mock percentile data\n          const mockExecutionTimes = args.percentiles.map(p => ({\n            percentile: p,\n            time: (realtimeStats.averageExecutionTime * (1 + p / 100)) / 1000,\n          }));\n\n          mockExecutionTimes.forEach(({ percentile, time }) => {\n            response += `• P${percentile}: ${time.toFixed(2)}s\\n`;\n          });\n\n          response += `• Median (P50): ${mockExecutionTimes[0]?.time.toFixed(2)}s\\n`;\n          response += `• 90th Percentile: ${mockExecutionTimes.find(t => t.percentile === 90)?.time.toFixed(2)}s\\n\\n`;\n        }\n\n        // Throughput analysis\n        if (args.includeThroughput) {\n          const mockThroughput = Math.floor(realtimeStats.totalExecutionsToday / 24); // executions per hour\n          response += `**🚀 Throughput Analysis:**\\n`;\n          response += `• Executions per Hour: ${mockThroughput}\\n`;\n          response += `• Executions per Minute: ${Math.floor(mockThroughput / 60)}\\n`;\n          response += `• Peak Hour Throughput: ${Math.floor(mockThroughput * 1.8)}\\n`;\n          response += `• Off-Peak Throughput: ${Math.floor(mockThroughput * 0.3)}\\n\\n`;\n        }\n\n        // Error rate analysis\n        if (args.includeErrorRates && realtimeStats.errorRate > 0) {\n          response += `**🚨 Error Rate Analysis:**\\n`;\n          response += `• Current Error Rate: ${realtimeStats.errorRate.toFixed(1)}%\\n`;\n          response += `• Peak Error Rate: ${Math.min(realtimeStats.errorRate * 2, 100).toFixed(1)}%\\n`;\n          response += `• Most Common Error Types:\\n`;\n          response += `  - Connection timeouts (35%)\\n`;\n          response += `  - Authentication failures (25%)\\n`;\n          response += `  - Rate limiting (20%)\\n`;\n          response += `  - Data validation errors (20%)\\n\\n`;\n        }\n\n        // Resource usage\n        if (args.includeResourceUsage) {\n          response += `**💻 Resource Usage Analysis:**\\n`;\n          response += `• Current CPU Usage: ${realtimeStats.systemLoad.cpu.toFixed(1)}%\\n`;\n          response += `• Current Memory Usage: ${realtimeStats.systemLoad.memory.toFixed(1)}%\\n`;\n          response += `• Current Disk Usage: ${realtimeStats.systemLoad.disk.toFixed(1)}%\\n`;\n          response += `• Peak CPU (${args.timeRange}): ${Math.min(realtimeStats.systemLoad.cpu * 1.5, 100).toFixed(1)}%\\n`;\n          response += `• Peak Memory (${args.timeRange}): ${Math.min(realtimeStats.systemLoad.memory * 1.3, 100).toFixed(1)}%\\n\\n`;\n        }\n\n        // Workflow-specific analysis\n        if (args.workflowId) {\n          response += `**🔧 Workflow-Specific Analysis (${args.workflowId}):**\\n`;\n          const workflow = realtimeStats.topWorkflows.find(w => w.id === args.workflowId);\n          if (workflow) {\n            response += `• Workflow Name: ${workflow.name}\\n`;\n            response += `• Total Executions: ${workflow.executions}\\n`;\n            response += `• Average Time: ${(workflow.avgTime / 1000).toFixed(2)}s\\n`;\n            response += `• Estimated Success Rate: 95%\\n`;\n          } else {\n            response += `• Workflow not found in top performers\\n`;\n          }\n          response += `\\n`;\n        }\n\n        // Recommendations\n        response += `**💡 Performance Recommendations:**\\n`;\n\n        if (realtimeStats.averageExecutionTime > 10000) {\n          response += `• ⚠️ High execution times detected - consider optimizing workflow logic\\n`;\n        }\n\n        if (realtimeStats.errorRate > 5) {\n          response += `• ⚠️ Elevated error rate - review failing workflows and improve error handling\\n`;\n        }\n\n        if (realtimeStats.systemLoad.cpu > 80) {\n          response += `• ⚠️ High CPU usage - consider scaling or optimizing resource-intensive workflows\\n`;\n        }\n\n        if (realtimeStats.systemLoad.memory > 80) {\n          response += `• ⚠️ High memory usage - monitor for memory leaks and optimize data processing\\n`;\n        }\n\n        response += `• ✅ Regular monitoring of these metrics is recommended\\n`;\n        response += `• ✅ Set up alerts for critical thresholds\\n`;\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to generate performance report: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Trend analysis tool\n  server.addTool({\n    name: 'analyze-trends',\n    description: 'Analyze trends for specific metrics over time with comparison options',\n    parameters: TrendAnalysisSchema,\n    handler: async (args: z.infer<typeof TrendAnalysisSchema>) => {\n      try {\n        const client = getEventClient(getClient);\n        const { start, end } = calculateTimeRange(args.timeRange);\n        const realtimeStats = await client.getRealtimeStats();\n\n        let response = `📈 **Trend Analysis: ${args.metric.toUpperCase()}**\\n\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Granularity:** ${args.granularity}\\n`;\n        response += `**Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\\n\\n`;\n\n        // Generate mock trend data based on metric type\n        const generateTrendData = (metric: string, granularity: string) => {\n          const points = granularity === 'hour' ? 24 : granularity === 'day' ? 30 : 4;\n          const data = [];\n\n          for (let i = 0; i < points; i++) {\n            const timestamp = new Date(\n              start.getTime() + (i * (end.getTime() - start.getTime())) / points\n            );\n            let value = 0;\n\n            switch (metric) {\n              case 'executions':\n                value = Math.floor(Math.random() * 50) + 10;\n                break;\n              case 'success_rate':\n                value = 85 + Math.random() * 10;\n                break;\n              case 'execution_time':\n                value = 2000 + Math.random() * 5000;\n                break;\n              case 'error_rate':\n                value = Math.random() * 10;\n                break;\n              case 'throughput':\n                value = Math.random() * 100 + 20;\n                break;\n            }\n\n            data.push({ timestamp, value });\n          }\n\n          return data;\n        };\n\n        const trendData = generateTrendData(args.metric, args.granularity);\n\n        // Calculate trend statistics\n        const values = trendData.map(d => d.value);\n        const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const latest = values[values.length - 1];\n        const previous = values[values.length - 2] || latest;\n        const change = ((latest - previous) / previous) * 100;\n\n        response += `**📊 Trend Summary:**\\n`;\n        response += `• Current Value: ${latest.toFixed(2)}\\n`;\n        response += `• Average: ${average.toFixed(2)}\\n`;\n        response += `• Minimum: ${min.toFixed(2)}\\n`;\n        response += `• Maximum: ${max.toFixed(2)}\\n`;\n        response += `• Recent Change: ${change > 0 ? '📈' : '📉'} ${Math.abs(change).toFixed(1)}%\\n\\n`;\n\n        // Trend direction analysis\n        const firstHalf = values.slice(0, Math.floor(values.length / 2));\n        const secondHalf = values.slice(Math.floor(values.length / 2));\n        const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n        const overallTrend = ((secondAvg - firstAvg) / firstAvg) * 100;\n\n        response += `**📈 Trend Direction:**\\n`;\n        if (Math.abs(overallTrend) < 2) {\n          response += `• **Stable** - Minimal change (${overallTrend.toFixed(1)}%)\\n`;\n        } else if (overallTrend > 0) {\n          response += `• **Increasing** - Up ${overallTrend.toFixed(1)}% over period\\n`;\n        } else {\n          response += `• **Decreasing** - Down ${Math.abs(overallTrend).toFixed(1)}% over period\\n`;\n        }\n\n        // Data points sample\n        response += `\\n**📋 Sample Data Points (last 5):**\\n`;\n        trendData.slice(-5).forEach((point, index) => {\n          const timeStr = point.timestamp.toLocaleString();\n          response += `${index + 1}. ${point.value.toFixed(2)} - ${timeStr}\\n`;\n        });\n\n        // Comparison analysis\n        if (args.compareWith) {\n          response += `\\n**🔄 Comparison with ${args.compareWith.replace('_', ' ')}:**\\n`;\n          // Mock comparison data\n          const comparisonChange = (Math.random() - 0.5) * 40; // -20% to +20%\n          response += `• Change: ${comparisonChange > 0 ? '📈' : '📉'} ${Math.abs(comparisonChange).toFixed(1)}%\\n`;\n\n          if (Math.abs(comparisonChange) > 10) {\n            response += `• **Significant change detected** - investigate causes\\n`;\n          } else {\n            response += `• Normal variation within expected range\\n`;\n          }\n        }\n\n        // Insights and recommendations\n        response += `\\n**💡 Insights:**\\n`;\n\n        switch (args.metric) {\n          case 'executions':\n            if (overallTrend > 20) {\n              response += `• Strong growth in execution volume - consider scaling resources\\n`;\n            } else if (overallTrend < -20) {\n              response += `• Declining execution volume - investigate usage patterns\\n`;\n            }\n            break;\n          case 'success_rate':\n            if (average < 90) {\n              response += `• Success rate below target - review failing workflows\\n`;\n            }\n            if (overallTrend < -5) {\n              response += `• Declining success rate - immediate attention required\\n`;\n            }\n            break;\n          case 'execution_time':\n            if (overallTrend > 15) {\n              response += `• Execution times increasing - performance optimization needed\\n`;\n            }\n            break;\n          case 'error_rate':\n            if (overallTrend > 10) {\n              response += `• Error rate increasing - investigate root causes\\n`;\n            }\n            break;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to analyze trends: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  const ExportDataSchema = z.object({\n    format: z.enum(['json', 'csv']).default('json'),\n    timeRange: z.enum(['1h', '24h', '7d', '30d']).default('24h'),\n    includeEvents: z.boolean().default(true),\n    includeMetrics: z.boolean().default(true),\n    includePerformance: z.boolean().default(true),\n  });\n\n  // Export analytics data tool\n  server.addTool({\n    name: 'export-analytics-data',\n    description: 'Export analytics data in various formats (JSON, CSV) for external analysis',\n    parameters: ExportDataSchema,\n    handler: async (args: z.infer<typeof ExportDataSchema>) => {\n      try {\n        const client = getEventClient(getClient);\n        const { start, end } = calculateTimeRange(args.timeRange);\n\n        const exportData: any = {\n          exportInfo: {\n            timestamp: new Date().toISOString(),\n            timeRange: args.timeRange,\n            startDate: start.toISOString(),\n            endDate: end.toISOString(),\n            format: args.format,\n          },\n          data: {},\n        };\n\n        // Include events if requested\n        if (args.includeEvents) {\n          const events = client.getEventBuffer();\n          exportData.data.events = events.filter(e => {\n            const eventTime = new Date(e.timestamp);\n            return eventTime >= start && eventTime <= end;\n          });\n        }\n\n        // Include analytics if requested\n        if (args.includeEvents) {\n          const analytics = client.getAnalyticsBuffer();\n          exportData.data.analytics = analytics.filter(a => {\n            const analyticsTime = new Date(a.timestamp);\n            return analyticsTime >= start && analyticsTime <= end;\n          });\n        }\n\n        // Include metrics if requested\n        if (args.includeMetrics) {\n          exportData.data.metrics = generateMockMetrics(args.timeRange);\n        }\n\n        // Include performance data if requested\n        if (args.includePerformance) {\n          const realtimeStats = await client.getRealtimeStats();\n          exportData.data.performance = realtimeStats;\n        }\n\n        let response = `📤 **Analytics Data Export**\\n\\n`;\n        response += `**Export Format:** ${args.format.toUpperCase()}\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Period:** ${start.toLocaleString()} - ${end.toLocaleString()}\\n`;\n        response += `**Generated:** ${new Date().toLocaleString()}\\n\\n`;\n\n        if (args.format === 'json') {\n          response += `**📋 JSON Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(exportData, null, 2)}\\n\\`\\`\\`\\n\\n`;\n        } else {\n          // For CSV, provide a simplified representation\n          response += `**📊 CSV Export Summary:**\\n`;\n          response += `• Events: ${exportData.data.events?.length || 0} records\\n`;\n          response += `• Analytics: ${exportData.data.analytics?.length || 0} records\\n`;\n          response += `• Metrics: ${exportData.data.metrics?.length || 0} data points\\n`;\n          response += `\\nCSV data would include columns: timestamp, type, category, value, metadata\\n`;\n        }\n\n        response += `**💡 Usage Instructions:**\\n`;\n        response += `• Copy the export data to your analytics tools\\n`;\n        response += `• Import into spreadsheet applications for analysis\\n`;\n        response += `• Use with business intelligence platforms\\n`;\n        response += `• Archive for historical reporting\\n`;\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(\n          `Failed to export analytics data: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n"],"version":3}