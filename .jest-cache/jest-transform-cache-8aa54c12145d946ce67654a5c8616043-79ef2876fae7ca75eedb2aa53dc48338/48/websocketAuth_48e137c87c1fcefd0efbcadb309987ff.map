{"version":3,"names":["cov_1ne9cjtwua","actualCoverage","z","createHash","randomBytes","ApiKeyAuthSchema","s","object","type","literal","apiKey","string","min","keyType","enum","default","SessionTokenAuthSchema","sessionToken","userId","optional","expiresAt","OAuth2AuthSchema","accessToken","refreshToken","tokenType","scope","SSOAuthSchema","provider","token","email","roles","array","AuthConfigSchema","union","WebSocketAuthManager","securityOptions","connectionCounts","Map","rateLimitTracker","activeTokens","constructor","b","f","enableCSRFProtection","enableRateLimiting","maxConnectionsPerUser","tokenRefreshThreshold","securityHeaders","authenticate","authConfig","connectionInfo","validatedAuth","parse","rateLimitResult","checkRateLimit","remoteAddress","allowed","success","error","metadata","retryAfter","authResult","authenticateApiKey","authenticateSessionToken","authenticateOAuth2","authenticateSSO","connectionResult","checkConnectionLimit","maxConnections","trackConnection","Error","message","generateAuthHeaders","headers","generateCSRFToken","needsTokenRefresh","now","Date","undefined","timeToExpiry","getTime","refreshOAuth2Token","refreshSessionToken","authType","currentCount","get","set","tokenKey","generateTokenKey","releaseConnection","auth","isValid","validateApiKeyWithN8n","userInfo","getUserInfoFromApiKey","permissions","sessionInfo","validateSessionTokenWithN8n","valid","sessionId","tokenInfo","validateOAuth2TokenWithN8n","split","ssoInfo","validateSSOTokenWithN8n","key","windowSize","maxRequests","tracker","resetTime","count","Math","ceil","toString","data","update","digest","refreshResult","callOAuth2RefreshEndpoint","expiresIn","toISOString","callSessionRefreshEndpoint","length","slice","createWebSocketAuthManager","DEFAULT_SECURITY_OPTIONS"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/websocketAuth.ts"],"sourcesContent":["/**\n * WebSocket Authentication and Authorization for n8n Fork Integration\n *\n * Provides secure authentication mechanisms for WebSocket connections\n * including API keys, session tokens, OAuth 2.0, and enterprise SSO.\n */\n\nimport { z } from 'zod';\nimport { createHash, randomBytes } from 'crypto';\n\n// Authentication schemas\nexport const ApiKeyAuthSchema = z.object({\n  type: z.literal('apiKey'),\n  apiKey: z.string().min(1),\n  keyType: z.enum(['user', 'service', 'admin']).default('user'),\n});\n\nexport const SessionTokenAuthSchema = z.object({\n  type: z.literal('sessionToken'),\n  sessionToken: z.string().min(1),\n  userId: z.string().optional(),\n  expiresAt: z.string().optional(),\n});\n\nexport const OAuth2AuthSchema = z.object({\n  type: z.literal('oauth2'),\n  accessToken: z.string().min(1),\n  refreshToken: z.string().optional(),\n  tokenType: z.string().default('Bearer'),\n  expiresAt: z.string().optional(),\n  scope: z.string().optional(),\n});\n\nexport const SSOAuthSchema = z.object({\n  type: z.literal('sso'),\n  provider: z.enum(['saml', 'oidc']),\n  token: z.string().min(1),\n  userId: z.string(),\n  email: z.string().email().optional(),\n  roles: z.array(z.string()).default([]),\n});\n\nexport const AuthConfigSchema = z.union([\n  ApiKeyAuthSchema,\n  SessionTokenAuthSchema,\n  OAuth2AuthSchema,\n  SSOAuthSchema,\n]);\n\nexport type ApiKeyAuth = z.infer<typeof ApiKeyAuthSchema>;\nexport type SessionTokenAuth = z.infer<typeof SessionTokenAuthSchema>;\nexport type OAuth2Auth = z.infer<typeof OAuth2AuthSchema>;\nexport type SSOAuth = z.infer<typeof SSOAuthSchema>;\nexport type AuthConfig = z.infer<typeof AuthConfigSchema>;\n\nexport interface AuthResult {\n  success: boolean;\n  userId?: string;\n  roles?: string[];\n  permissions?: string[];\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface SecurityOptions {\n  enableCSRFProtection: boolean;\n  enableRateLimiting: boolean;\n  maxConnectionsPerUser: number;\n  tokenRefreshThreshold: number; // milliseconds before expiry to refresh\n  securityHeaders: Record<string, string>;\n}\n\n/**\n * WebSocket Authentication Manager\n *\n * Handles authentication and authorization for WebSocket connections\n * with support for multiple authentication methods and security features.\n */\nexport class WebSocketAuthManager {\n  private securityOptions: SecurityOptions;\n  private connectionCounts: Map<string, number> = new Map();\n  private rateLimitTracker: Map<string, { count: number; resetTime: number }> = new Map();\n  private activeTokens: Map<string, { userId: string; expiresAt?: Date; type: string }> = new Map();\n\n  constructor(securityOptions: Partial<SecurityOptions> = {}) {\n    this.securityOptions = {\n      enableCSRFProtection: true,\n      enableRateLimiting: true,\n      maxConnectionsPerUser: 10,\n      tokenRefreshThreshold: 300000, // 5 minutes\n      securityHeaders: {\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n      },\n      ...securityOptions,\n    };\n  }\n\n  /**\n   * Authenticate WebSocket connection\n   */\n  public async authenticate(authConfig: AuthConfig, connectionInfo: any): Promise<AuthResult> {\n    try {\n      // Validate authentication configuration\n      const validatedAuth = AuthConfigSchema.parse(authConfig);\n\n      // Check rate limiting\n      if (this.securityOptions.enableRateLimiting) {\n        const rateLimitResult = this.checkRateLimit(connectionInfo.remoteAddress);\n        if (!rateLimitResult.allowed) {\n          return {\n            success: false,\n            error: 'Rate limit exceeded',\n            metadata: { retryAfter: rateLimitResult.retryAfter },\n          };\n        }\n      }\n\n      // Perform authentication based on type\n      let authResult: AuthResult;\n      switch (validatedAuth.type) {\n        case 'apiKey':\n          authResult = await this.authenticateApiKey(validatedAuth);\n          break;\n        case 'sessionToken':\n          authResult = await this.authenticateSessionToken(validatedAuth);\n          break;\n        case 'oauth2':\n          authResult = await this.authenticateOAuth2(validatedAuth);\n          break;\n        case 'sso':\n          authResult = await this.authenticateSSO(validatedAuth);\n          break;\n        default:\n          return { success: false, error: 'Unsupported authentication type' };\n      }\n\n      // Check connection limits\n      if (authResult.success && authResult.userId) {\n        const connectionResult = this.checkConnectionLimit(authResult.userId);\n        if (!connectionResult.allowed) {\n          return {\n            success: false,\n            error: 'Maximum connections exceeded for user',\n            metadata: { maxConnections: this.securityOptions.maxConnectionsPerUser },\n          };\n        }\n      }\n\n      // Track successful authentication\n      if (authResult.success && authResult.userId) {\n        this.trackConnection(authResult.userId, validatedAuth.type);\n      }\n\n      return authResult;\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Authentication validation failed',\n      };\n    }\n  }\n\n  /**\n   * Generate authentication headers for WebSocket connection\n   */\n  public generateAuthHeaders(authConfig: AuthConfig): Record<string, string> {\n    const headers: Record<string, string> = {\n      ...this.securityOptions.securityHeaders,\n    };\n\n    switch (authConfig.type) {\n      case 'apiKey':\n        headers['X-N8N-API-KEY'] = authConfig.apiKey;\n        break;\n      case 'sessionToken':\n        headers['Cookie'] = `n8n-auth=${authConfig.sessionToken}`;\n        break;\n      case 'oauth2':\n        headers['Authorization'] = `${authConfig.tokenType} ${authConfig.accessToken}`;\n        break;\n      case 'sso':\n        headers['Authorization'] = `SSO ${authConfig.token}`;\n        headers['X-SSO-Provider'] = authConfig.provider;\n        break;\n    }\n\n    // Add CSRF protection if enabled\n    if (this.securityOptions.enableCSRFProtection) {\n      headers['X-CSRF-Token'] = this.generateCSRFToken();\n    }\n\n    return headers;\n  }\n\n  /**\n   * Check if token needs refresh\n   */\n  public needsTokenRefresh(authConfig: AuthConfig): boolean {\n    const now = new Date();\n    let expiresAt: Date | undefined;\n\n    switch (authConfig.type) {\n      case 'sessionToken':\n        expiresAt = authConfig.expiresAt ? new Date(authConfig.expiresAt) : undefined;\n        break;\n      case 'oauth2':\n        expiresAt = authConfig.expiresAt ? new Date(authConfig.expiresAt) : undefined;\n        break;\n      default:\n        return false;\n    }\n\n    if (expiresAt) {\n      const timeToExpiry = expiresAt.getTime() - now.getTime();\n      return timeToExpiry <= this.securityOptions.tokenRefreshThreshold;\n    }\n\n    return false;\n  }\n\n  /**\n   * Refresh authentication token\n   */\n  public async refreshToken(authConfig: AuthConfig): Promise<AuthConfig | null> {\n    switch (authConfig.type) {\n      case 'oauth2':\n        return await this.refreshOAuth2Token(authConfig);\n      case 'sessionToken':\n        return await this.refreshSessionToken(authConfig);\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Track successful connection\n   */\n  public trackConnection(userId: string, authType: string): void {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    this.connectionCounts.set(userId, currentCount + 1);\n\n    // Store token information for tracking\n    const tokenKey = this.generateTokenKey(userId, authType);\n    this.activeTokens.set(tokenKey, {\n      userId,\n      type: authType,\n      expiresAt: new Date(Date.now() + 3600000), // 1 hour default\n    });\n  }\n\n  /**\n   * Release connection\n   */\n  public releaseConnection(userId: string): void {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    if (currentCount > 0) {\n      this.connectionCounts.set(userId, currentCount - 1);\n    }\n  }\n\n  /**\n   * Authenticate using API key\n   */\n  private async authenticateApiKey(auth: ApiKeyAuth): Promise<AuthResult> {\n    try {\n      // In a real implementation, this would validate against n8n's API key store\n      // For now, we'll simulate the validation\n      const isValid = await this.validateApiKeyWithN8n(auth.apiKey);\n      \n      if (!isValid) {\n        return { success: false, error: 'Invalid API key' };\n      }\n\n      // Get user information from API key\n      const userInfo = await this.getUserInfoFromApiKey(auth.apiKey);\n      \n      return {\n        success: true,\n        userId: userInfo.userId,\n        roles: userInfo.roles,\n        permissions: userInfo.permissions,\n        metadata: { keyType: auth.keyType },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'API key authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using session token\n   */\n  private async authenticateSessionToken(auth: SessionTokenAuth): Promise<AuthResult> {\n    try {\n      // Validate session token with n8n\n      const sessionInfo = await this.validateSessionTokenWithN8n(auth.sessionToken);\n      \n      if (!sessionInfo.valid) {\n        return { success: false, error: 'Invalid or expired session token' };\n      }\n\n      return {\n        success: true,\n        userId: sessionInfo.userId,\n        roles: sessionInfo.roles,\n        permissions: sessionInfo.permissions,\n        metadata: { sessionId: sessionInfo.sessionId },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Session token authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using OAuth 2.0\n   */\n  private async authenticateOAuth2(auth: OAuth2Auth): Promise<AuthResult> {\n    try {\n      // Validate OAuth2 token\n      const tokenInfo = await this.validateOAuth2TokenWithN8n(auth.accessToken);\n      \n      if (!tokenInfo.valid) {\n        return { success: false, error: 'Invalid or expired OAuth2 token' };\n      }\n\n      return {\n        success: true,\n        userId: tokenInfo.userId,\n        roles: tokenInfo.roles,\n        permissions: tokenInfo.scope?.split(' ') || [],\n        metadata: { \n          tokenType: auth.tokenType,\n          scope: auth.scope,\n        },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'OAuth2 authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using SSO\n   */\n  private async authenticateSSO(auth: SSOAuth): Promise<AuthResult> {\n    try {\n      // Validate SSO token based on provider\n      const ssoInfo = await this.validateSSOTokenWithN8n(auth.token, auth.provider);\n      \n      if (!ssoInfo.valid) {\n        return { success: false, error: 'Invalid SSO token' };\n      }\n\n      return {\n        success: true,\n        userId: ssoInfo.userId,\n        roles: ssoInfo.roles || auth.roles,\n        permissions: ssoInfo.permissions,\n        metadata: {\n          provider: auth.provider,\n          email: auth.email,\n        },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'SSO authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Check rate limiting\n   */\n  private checkRateLimit(remoteAddress: string): { allowed: boolean; retryAfter?: number } {\n    const key = `rate_limit_${remoteAddress}`;\n    const now = Date.now();\n    const windowSize = 60000; // 1 minute window\n    const maxRequests = 100; // Max 100 requests per minute\n\n    const tracker = this.rateLimitTracker.get(key);\n    \n    if (!tracker || now > tracker.resetTime) {\n      this.rateLimitTracker.set(key, { count: 1, resetTime: now + windowSize });\n      return { allowed: true };\n    }\n\n    if (tracker.count >= maxRequests) {\n      return { \n        allowed: false, \n        retryAfter: Math.ceil((tracker.resetTime - now) / 1000) \n      };\n    }\n\n    tracker.count++;\n    return { allowed: true };\n  }\n\n  /**\n   * Check connection limit\n   */\n  private checkConnectionLimit(userId: string): { allowed: boolean } {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    return { allowed: currentCount < this.securityOptions.maxConnectionsPerUser };\n  }\n\n  /**\n   * Generate CSRF token\n   */\n  private generateCSRFToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Generate token key for tracking\n   */\n  private generateTokenKey(userId: string, authType: string): string {\n    const data = `${userId}:${authType}:${Date.now()}`;\n    return createHash('sha256').update(data).digest('hex');\n  }\n\n  /**\n   * Refresh OAuth2 token\n   */\n  private async refreshOAuth2Token(auth: OAuth2Auth): Promise<OAuth2Auth | null> {\n    if (!auth.refreshToken) {\n      return null;\n    }\n\n    try {\n      // In a real implementation, this would call the OAuth2 provider's token endpoint\n      const refreshResult = await this.callOAuth2RefreshEndpoint(auth.refreshToken);\n      \n      return {\n        ...auth,\n        accessToken: refreshResult.accessToken,\n        refreshToken: refreshResult.refreshToken || auth.refreshToken,\n        expiresAt: new Date(Date.now() + refreshResult.expiresIn * 1000).toISOString(),\n      };\n\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Refresh session token\n   */\n  private async refreshSessionToken(auth: SessionTokenAuth): Promise<SessionTokenAuth | null> {\n    try {\n      // In a real implementation, this would call n8n's session refresh endpoint\n      const refreshResult = await this.callSessionRefreshEndpoint(auth.sessionToken);\n      \n      return {\n        ...auth,\n        sessionToken: refreshResult.sessionToken,\n        expiresAt: refreshResult.expiresAt,\n      };\n\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Placeholder methods for external API calls\n  // These would be implemented to call actual n8n fork APIs\n\n  private async validateApiKeyWithN8n(apiKey: string): Promise<boolean> {\n    // TODO: Implement actual API key validation with n8n fork\n    return apiKey.length > 10; // Placeholder validation\n  }\n\n  private async getUserInfoFromApiKey(apiKey: string): Promise<any> {\n    // TODO: Implement actual user info retrieval from API key\n    return {\n      userId: createHash('md5').update(apiKey).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n    };\n  }\n\n  private async validateSessionTokenWithN8n(sessionToken: string): Promise<any> {\n    // TODO: Implement actual session token validation\n    return {\n      valid: sessionToken.length > 10,\n      userId: createHash('md5').update(sessionToken).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n      sessionId: 'session_' + sessionToken.slice(0, 8),\n    };\n  }\n\n  private async validateOAuth2TokenWithN8n(accessToken: string): Promise<any> {\n    // TODO: Implement actual OAuth2 token validation\n    return {\n      valid: accessToken.length > 10,\n      userId: createHash('md5').update(accessToken).digest('hex').slice(0, 8),\n      roles: ['user'],\n      scope: 'read execute',\n    };\n  }\n\n  private async validateSSOTokenWithN8n(token: string, provider: string): Promise<any> {\n    // TODO: Implement actual SSO token validation\n    return {\n      valid: token.length > 10,\n      userId: createHash('md5').update(token).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n    };\n  }\n\n  private async callOAuth2RefreshEndpoint(refreshToken: string): Promise<any> {\n    // TODO: Implement actual OAuth2 refresh call\n    return {\n      accessToken: 'new_access_token_' + randomBytes(16).toString('hex'),\n      refreshToken: refreshToken,\n      expiresIn: 3600,\n    };\n  }\n\n  private async callSessionRefreshEndpoint(sessionToken: string): Promise<any> {\n    // TODO: Implement actual session refresh call\n    return {\n      sessionToken: 'new_session_token_' + randomBytes(16).toString('hex'),\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    };\n  }\n}\n\n/**\n * Create WebSocket authentication manager with default security options\n */\nexport function createWebSocketAuthManager(\n  securityOptions: Partial<SecurityOptions> = {}\n): WebSocketAuthManager {\n  return new WebSocketAuthManager(securityOptions);\n}\n\n/**\n * Default security options\n */\nexport const DEFAULT_SECURITY_OPTIONS: SecurityOptions = {\n  enableCSRFProtection: true,\n  enableRateLimiting: true,\n  maxConnectionsPerUser: 10,\n  tokenRefreshThreshold: 300000,\n  securityHeaders: {\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n  },\n};"],"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","ignoreList":[]}