d6db2f2c3714a740d52cd005156416ac
/* istanbul ignore next */
function cov_1ne9cjtwua() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/websocketAuth.ts";
  var hash = "ea89bc81c3fec44b2ddbe3cba8346ac548a6ba9f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/websocketAuth.ts",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 32
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "1": {
        start: {
          line: 15,
          column: 38
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "2": {
        start: {
          line: 21,
          column: 32
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "3": {
        start: {
          line: 29,
          column: 29
        },
        end: {
          line: 36,
          column: 2
        }
      },
      "4": {
        start: {
          line: 37,
          column: 32
        },
        end: {
          line: 42,
          column: 2
        }
      },
      "5": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 32
        }
      },
      "6": {
        start: {
          line: 52,
          column: 23
        },
        end: {
          line: 52,
          column: 32
        }
      },
      "7": {
        start: {
          line: 53,
          column: 19
        },
        end: {
          line: 53,
          column: 28
        }
      },
      "8": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 67,
          column: 10
        }
      },
      "9": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 127,
          column: 9
        }
      },
      "10": {
        start: {
          line: 75,
          column: 34
        },
        end: {
          line: 75,
          column: 68
        }
      },
      "11": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 86,
          column: 13
        }
      },
      "12": {
        start: {
          line: 78,
          column: 40
        },
        end: {
          line: 78,
          column: 89
        }
      },
      "13": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 85,
          column: 17
        }
      },
      "14": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 84,
          column: 22
        }
      },
      "15": {
        start: {
          line: 89,
          column: 12
        },
        end: {
          line: 104,
          column: 13
        }
      },
      "16": {
        start: {
          line: 91,
          column: 20
        },
        end: {
          line: 91,
          column: 78
        }
      },
      "17": {
        start: {
          line: 92,
          column: 20
        },
        end: {
          line: 92,
          column: 26
        }
      },
      "18": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 84
        }
      },
      "19": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 95,
          column: 26
        }
      },
      "20": {
        start: {
          line: 97,
          column: 20
        },
        end: {
          line: 97,
          column: 78
        }
      },
      "21": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 26
        }
      },
      "22": {
        start: {
          line: 100,
          column: 20
        },
        end: {
          line: 100,
          column: 75
        }
      },
      "23": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 26
        }
      },
      "24": {
        start: {
          line: 103,
          column: 20
        },
        end: {
          line: 103,
          column: 88
        }
      },
      "25": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 115,
          column: 13
        }
      },
      "26": {
        start: {
          line: 107,
          column: 41
        },
        end: {
          line: 107,
          column: 85
        }
      },
      "27": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 114,
          column: 17
        }
      },
      "28": {
        start: {
          line: 109,
          column: 20
        },
        end: {
          line: 113,
          column: 22
        }
      },
      "29": {
        start: {
          line: 117,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "30": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 76
        }
      },
      "31": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 30
        }
      },
      "32": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "33": {
        start: {
          line: 133,
          column: 24
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "34": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 150,
          column: 9
        }
      },
      "35": {
        start: {
          line: 138,
          column: 16
        },
        end: {
          line: 138,
          column: 61
        }
      },
      "36": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 139,
          column: 22
        }
      },
      "37": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 74
        }
      },
      "38": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 142,
          column: 22
        }
      },
      "39": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 144,
          column: 95
        }
      },
      "40": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 22
        }
      },
      "41": {
        start: {
          line: 147,
          column: 16
        },
        end: {
          line: 147,
          column: 69
        }
      },
      "42": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 64
        }
      },
      "43": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 149,
          column: 22
        }
      },
      "44": {
        start: {
          line: 152,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "45": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 63
        }
      },
      "46": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 23
        }
      },
      "47": {
        start: {
          line: 161,
          column: 20
        },
        end: {
          line: 161,
          column: 30
        }
      },
      "48": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 172,
          column: 9
        }
      },
      "49": {
        start: {
          line: 165,
          column: 16
        },
        end: {
          line: 165,
          column: 94
        }
      },
      "50": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 166,
          column: 22
        }
      },
      "51": {
        start: {
          line: 168,
          column: 16
        },
        end: {
          line: 168,
          column: 94
        }
      },
      "52": {
        start: {
          line: 169,
          column: 16
        },
        end: {
          line: 169,
          column: 22
        }
      },
      "53": {
        start: {
          line: 171,
          column: 16
        },
        end: {
          line: 171,
          column: 29
        }
      },
      "54": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 176,
          column: 9
        }
      },
      "55": {
        start: {
          line: 174,
          column: 33
        },
        end: {
          line: 174,
          column: 68
        }
      },
      "56": {
        start: {
          line: 175,
          column: 12
        },
        end: {
          line: 175,
          column: 78
        }
      },
      "57": {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 21
        }
      },
      "58": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 190,
          column: 9
        }
      },
      "59": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 65
        }
      },
      "60": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 66
        }
      },
      "61": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 189,
          column: 28
        }
      },
      "62": {
        start: {
          line: 196,
          column: 29
        },
        end: {
          line: 196,
          column: 67
        }
      },
      "63": {
        start: {
          line: 197,
          column: 8
        },
        end: {
          line: 197,
          column: 60
        }
      },
      "64": {
        start: {
          line: 199,
          column: 25
        },
        end: {
          line: 199,
          column: 64
        }
      },
      "65": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 204,
          column: 11
        }
      },
      "66": {
        start: {
          line: 210,
          column: 29
        },
        end: {
          line: 210,
          column: 67
        }
      },
      "67": {
        start: {
          line: 211,
          column: 8
        },
        end: {
          line: 213,
          column: 9
        }
      },
      "68": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 64
        }
      },
      "69": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 241,
          column: 9
        }
      },
      "70": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 73
        }
      },
      "71": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 225,
          column: 13
        }
      },
      "72": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 224,
          column: 68
        }
      },
      "73": {
        start: {
          line: 227,
          column: 29
        },
        end: {
          line: 227,
          column: 74
        }
      },
      "74": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 234,
          column: 14
        }
      },
      "75": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "76": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "77": {
        start: {
          line: 249,
          column: 32
        },
        end: {
          line: 249,
          column: 89
        }
      },
      "78": {
        start: {
          line: 250,
          column: 12
        },
        end: {
          line: 252,
          column: 13
        }
      },
      "79": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 251,
          column: 85
        }
      },
      "80": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 259,
          column: 14
        }
      },
      "81": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 265,
          column: 14
        }
      },
      "82": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 294,
          column: 9
        }
      },
      "83": {
        start: {
          line: 274,
          column: 30
        },
        end: {
          line: 274,
          column: 85
        }
      },
      "84": {
        start: {
          line: 275,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "85": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 84
        }
      },
      "86": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 287,
          column: 14
        }
      },
      "87": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 293,
          column: 14
        }
      },
      "88": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 322,
          column: 9
        }
      },
      "89": {
        start: {
          line: 302,
          column: 28
        },
        end: {
          line: 302,
          column: 89
        }
      },
      "90": {
        start: {
          line: 303,
          column: 12
        },
        end: {
          line: 305,
          column: 13
        }
      },
      "91": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 304,
          column: 70
        }
      },
      "92": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 315,
          column: 14
        }
      },
      "93": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "94": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 49
        }
      },
      "95": {
        start: {
          line: 329,
          column: 20
        },
        end: {
          line: 329,
          column: 30
        }
      },
      "96": {
        start: {
          line: 330,
          column: 27
        },
        end: {
          line: 330,
          column: 32
        }
      },
      "97": {
        start: {
          line: 331,
          column: 28
        },
        end: {
          line: 331,
          column: 31
        }
      },
      "98": {
        start: {
          line: 332,
          column: 24
        },
        end: {
          line: 332,
          column: 54
        }
      },
      "99": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "100": {
        start: {
          line: 334,
          column: 12
        },
        end: {
          line: 334,
          column: 86
        }
      },
      "101": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 37
        }
      },
      "102": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 342,
          column: 9
        }
      },
      "103": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 341,
          column: 14
        }
      },
      "104": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 343,
          column: 24
        }
      },
      "105": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 344,
          column: 33
        }
      },
      "106": {
        start: {
          line: 350,
          column: 29
        },
        end: {
          line: 350,
          column: 67
        }
      },
      "107": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 351,
          column: 86
        }
      },
      "108": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 47
        }
      },
      "109": {
        start: {
          line: 363,
          column: 21
        },
        end: {
          line: 363,
          column: 58
        }
      },
      "110": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 63
        }
      },
      "111": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "112": {
        start: {
          line: 371,
          column: 12
        },
        end: {
          line: 371,
          column: 24
        }
      },
      "113": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "114": {
        start: {
          line: 375,
          column: 34
        },
        end: {
          line: 375,
          column: 89
        }
      },
      "115": {
        start: {
          line: 376,
          column: 12
        },
        end: {
          line: 381,
          column: 14
        }
      },
      "116": {
        start: {
          line: 384,
          column: 12
        },
        end: {
          line: 384,
          column: 24
        }
      },
      "117": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 402,
          column: 9
        }
      },
      "118": {
        start: {
          line: 393,
          column: 34
        },
        end: {
          line: 393,
          column: 90
        }
      },
      "119": {
        start: {
          line: 394,
          column: 12
        },
        end: {
          line: 398,
          column: 14
        }
      },
      "120": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 24
        }
      },
      "121": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 34
        }
      },
      "122": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 416,
          column: 10
        }
      },
      "123": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 426,
          column: 10
        }
      },
      "124": {
        start: {
          line: 430,
          column: 8
        },
        end: {
          line: 435,
          column: 10
        }
      },
      "125": {
        start: {
          line: 439,
          column: 8
        },
        end: {
          line: 444,
          column: 10
        }
      },
      "126": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 452,
          column: 10
        }
      },
      "127": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 459,
          column: 10
        }
      },
      "128": {
        start: {
          line: 466,
          column: 4
        },
        end: {
          line: 466,
          column: 53
        }
      },
      "129": {
        start: {
          line: 471,
          column: 40
        },
        end: {
          line: 482,
          column: 1
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        loc: {
          start: {
            line: 54,
            column: 38
          },
          end: {
            line: 68,
            column: 5
          }
        },
        line: 54
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 72,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        loc: {
          start: {
            line: 72,
            column: 51
          },
          end: {
            line: 128,
            column: 5
          }
        },
        line: 72
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 132,
            column: 4
          },
          end: {
            line: 132,
            column: 5
          }
        },
        loc: {
          start: {
            line: 132,
            column: 36
          },
          end: {
            line: 156,
            column: 5
          }
        },
        line: 132
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 34
          },
          end: {
            line: 178,
            column: 5
          }
        },
        line: 160
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 182,
            column: 4
          },
          end: {
            line: 182,
            column: 5
          }
        },
        loc: {
          start: {
            line: 182,
            column: 35
          },
          end: {
            line: 191,
            column: 5
          }
        },
        line: 182
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 195,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        loc: {
          start: {
            line: 195,
            column: 38
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 195
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 209,
            column: 4
          },
          end: {
            line: 209,
            column: 5
          }
        },
        loc: {
          start: {
            line: 209,
            column: 30
          },
          end: {
            line: 214,
            column: 5
          }
        },
        line: 209
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        loc: {
          start: {
            line: 218,
            column: 35
          },
          end: {
            line: 242,
            column: 5
          }
        },
        line: 218
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 246,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        loc: {
          start: {
            line: 246,
            column: 41
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 246
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 35
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 271
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 299,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        loc: {
          start: {
            line: 299,
            column: 32
          },
          end: {
            line: 323,
            column: 5
          }
        },
        line: 299
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 327,
            column: 4
          },
          end: {
            line: 327,
            column: 5
          }
        },
        loc: {
          start: {
            line: 327,
            column: 34
          },
          end: {
            line: 345,
            column: 5
          }
        },
        line: 327
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 349,
            column: 4
          },
          end: {
            line: 349,
            column: 5
          }
        },
        loc: {
          start: {
            line: 349,
            column: 33
          },
          end: {
            line: 352,
            column: 5
          }
        },
        line: 349
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 356,
            column: 4
          },
          end: {
            line: 356,
            column: 5
          }
        },
        loc: {
          start: {
            line: 356,
            column: 24
          },
          end: {
            line: 358,
            column: 5
          }
        },
        line: 356
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 39
          },
          end: {
            line: 365,
            column: 5
          }
        },
        line: 362
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 35
          },
          end: {
            line: 386,
            column: 5
          }
        },
        line: 369
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 390,
            column: 4
          },
          end: {
            line: 390,
            column: 5
          }
        },
        loc: {
          start: {
            line: 390,
            column: 36
          },
          end: {
            line: 403,
            column: 5
          }
        },
        line: 390
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 406,
            column: 4
          },
          end: {
            line: 406,
            column: 5
          }
        },
        loc: {
          start: {
            line: 406,
            column: 40
          },
          end: {
            line: 409,
            column: 5
          }
        },
        line: 406
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 410,
            column: 5
          }
        },
        loc: {
          start: {
            line: 410,
            column: 40
          },
          end: {
            line: 417,
            column: 5
          }
        },
        line: 410
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 418,
            column: 4
          },
          end: {
            line: 418,
            column: 5
          }
        },
        loc: {
          start: {
            line: 418,
            column: 52
          },
          end: {
            line: 427,
            column: 5
          }
        },
        line: 418
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 428,
            column: 4
          },
          end: {
            line: 428,
            column: 5
          }
        },
        loc: {
          start: {
            line: 428,
            column: 50
          },
          end: {
            line: 436,
            column: 5
          }
        },
        line: 428
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 437,
            column: 4
          },
          end: {
            line: 437,
            column: 5
          }
        },
        loc: {
          start: {
            line: 437,
            column: 51
          },
          end: {
            line: 445,
            column: 5
          }
        },
        line: 437
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 446,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        loc: {
          start: {
            line: 446,
            column: 50
          },
          end: {
            line: 453,
            column: 5
          }
        },
        line: 446
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 454,
            column: 4
          },
          end: {
            line: 454,
            column: 5
          }
        },
        loc: {
          start: {
            line: 454,
            column: 51
          },
          end: {
            line: 460,
            column: 5
          }
        },
        line: 454
      },
      "24": {
        name: "createWebSocketAuthManager",
        decl: {
          start: {
            line: 465,
            column: 16
          },
          end: {
            line: 465,
            column: 42
          }
        },
        loc: {
          start: {
            line: 465,
            column: 65
          },
          end: {
            line: 467,
            column: 1
          }
        },
        line: 465
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 54,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 54,
            column: 34
          },
          end: {
            line: 54,
            column: 36
          }
        }],
        line: 54
      },
      "1": {
        loc: {
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 12
          },
          end: {
            line: 86,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "2": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 85,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "3": {
        loc: {
          start: {
            line: 89,
            column: 12
          },
          end: {
            line: 104,
            column: 13
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 90,
            column: 16
          },
          end: {
            line: 92,
            column: 26
          }
        }, {
          start: {
            line: 93,
            column: 16
          },
          end: {
            line: 95,
            column: 26
          }
        }, {
          start: {
            line: 96,
            column: 16
          },
          end: {
            line: 98,
            column: 26
          }
        }, {
          start: {
            line: 99,
            column: 16
          },
          end: {
            line: 101,
            column: 26
          }
        }, {
          start: {
            line: 102,
            column: 16
          },
          end: {
            line: 103,
            column: 88
          }
        }],
        line: 89
      },
      "4": {
        loc: {
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 12
          },
          end: {
            line: 115,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "5": {
        loc: {
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 106,
            column: 16
          },
          end: {
            line: 106,
            column: 34
          }
        }, {
          start: {
            line: 106,
            column: 38
          },
          end: {
            line: 106,
            column: 55
          }
        }],
        line: 106
      },
      "6": {
        loc: {
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 16
          },
          end: {
            line: 114,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "7": {
        loc: {
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 12
          },
          end: {
            line: 119,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "8": {
        loc: {
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 117,
            column: 16
          },
          end: {
            line: 117,
            column: 34
          }
        }, {
          start: {
            line: 117,
            column: 38
          },
          end: {
            line: 117,
            column: 55
          }
        }],
        line: 117
      },
      "9": {
        loc: {
          start: {
            line: 125,
            column: 23
          },
          end: {
            line: 125,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 125,
            column: 48
          },
          end: {
            line: 125,
            column: 61
          }
        }, {
          start: {
            line: 125,
            column: 64
          },
          end: {
            line: 125,
            column: 98
          }
        }],
        line: 125
      },
      "10": {
        loc: {
          start: {
            line: 136,
            column: 8
          },
          end: {
            line: 150,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 137,
            column: 12
          },
          end: {
            line: 139,
            column: 22
          }
        }, {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 142,
            column: 22
          }
        }, {
          start: {
            line: 143,
            column: 12
          },
          end: {
            line: 145,
            column: 22
          }
        }, {
          start: {
            line: 146,
            column: 12
          },
          end: {
            line: 149,
            column: 22
          }
        }],
        line: 136
      },
      "11": {
        loc: {
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 152,
            column: 8
          },
          end: {
            line: 154,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 152
      },
      "12": {
        loc: {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 172,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 164,
            column: 12
          },
          end: {
            line: 166,
            column: 22
          }
        }, {
          start: {
            line: 167,
            column: 12
          },
          end: {
            line: 169,
            column: 22
          }
        }, {
          start: {
            line: 170,
            column: 12
          },
          end: {
            line: 171,
            column: 29
          }
        }],
        line: 163
      },
      "13": {
        loc: {
          start: {
            line: 165,
            column: 28
          },
          end: {
            line: 165,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 165,
            column: 51
          },
          end: {
            line: 165,
            column: 81
          }
        }, {
          start: {
            line: 165,
            column: 84
          },
          end: {
            line: 165,
            column: 93
          }
        }],
        line: 165
      },
      "14": {
        loc: {
          start: {
            line: 168,
            column: 28
          },
          end: {
            line: 168,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 168,
            column: 51
          },
          end: {
            line: 168,
            column: 81
          }
        }, {
          start: {
            line: 168,
            column: 84
          },
          end: {
            line: 168,
            column: 93
          }
        }],
        line: 168
      },
      "15": {
        loc: {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 176,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 173
      },
      "16": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 190,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 184,
            column: 12
          },
          end: {
            line: 185,
            column: 65
          }
        }, {
          start: {
            line: 186,
            column: 12
          },
          end: {
            line: 187,
            column: 66
          }
        }, {
          start: {
            line: 188,
            column: 12
          },
          end: {
            line: 189,
            column: 28
          }
        }],
        line: 183
      },
      "17": {
        loc: {
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 196,
            column: 29
          },
          end: {
            line: 196,
            column: 62
          }
        }, {
          start: {
            line: 196,
            column: 66
          },
          end: {
            line: 196,
            column: 67
          }
        }],
        line: 196
      },
      "18": {
        loc: {
          start: {
            line: 210,
            column: 29
          },
          end: {
            line: 210,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 29
          },
          end: {
            line: 210,
            column: 62
          }
        }, {
          start: {
            line: 210,
            column: 66
          },
          end: {
            line: 210,
            column: 67
          }
        }],
        line: 210
      },
      "19": {
        loc: {
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 211,
            column: 8
          },
          end: {
            line: 213,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 211
      },
      "20": {
        loc: {
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 223,
            column: 12
          },
          end: {
            line: 225,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 223
      },
      "21": {
        loc: {
          start: {
            line: 239,
            column: 23
          },
          end: {
            line: 239,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 48
          },
          end: {
            line: 239,
            column: 61
          }
        }, {
          start: {
            line: 239,
            column: 64
          },
          end: {
            line: 239,
            column: 95
          }
        }],
        line: 239
      },
      "22": {
        loc: {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 252,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 250
      },
      "23": {
        loc: {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 264,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 48
          },
          end: {
            line: 264,
            column: 61
          }
        }, {
          start: {
            line: 264,
            column: 64
          },
          end: {
            line: 264,
            column: 101
          }
        }],
        line: 264
      },
      "24": {
        loc: {
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 275,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 275
      },
      "25": {
        loc: {
          start: {
            line: 282,
            column: 29
          },
          end: {
            line: 282,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 282,
            column: 29
          },
          end: {
            line: 282,
            column: 56
          }
        }, {
          start: {
            line: 282,
            column: 60
          },
          end: {
            line: 282,
            column: 62
          }
        }],
        line: 282
      },
      "26": {
        loc: {
          start: {
            line: 292,
            column: 23
          },
          end: {
            line: 292,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 48
          },
          end: {
            line: 292,
            column: 61
          }
        }, {
          start: {
            line: 292,
            column: 64
          },
          end: {
            line: 292,
            column: 94
          }
        }],
        line: 292
      },
      "27": {
        loc: {
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 12
          },
          end: {
            line: 305,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "28": {
        loc: {
          start: {
            line: 309,
            column: 23
          },
          end: {
            line: 309,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 309,
            column: 23
          },
          end: {
            line: 309,
            column: 36
          }
        }, {
          start: {
            line: 309,
            column: 40
          },
          end: {
            line: 309,
            column: 50
          }
        }],
        line: 309
      },
      "29": {
        loc: {
          start: {
            line: 320,
            column: 23
          },
          end: {
            line: 320,
            column: 91
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 320,
            column: 48
          },
          end: {
            line: 320,
            column: 61
          }
        }, {
          start: {
            line: 320,
            column: 64
          },
          end: {
            line: 320,
            column: 91
          }
        }],
        line: 320
      },
      "30": {
        loc: {
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 333,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 333
      },
      "31": {
        loc: {
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 12
          },
          end: {
            line: 333,
            column: 20
          }
        }, {
          start: {
            line: 333,
            column: 24
          },
          end: {
            line: 333,
            column: 47
          }
        }],
        line: 333
      },
      "32": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 342,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "33": {
        loc: {
          start: {
            line: 350,
            column: 29
          },
          end: {
            line: 350,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 29
          },
          end: {
            line: 350,
            column: 62
          }
        }, {
          start: {
            line: 350,
            column: 66
          },
          end: {
            line: 350,
            column: 67
          }
        }],
        line: 350
      },
      "34": {
        loc: {
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 8
          },
          end: {
            line: 372,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 370
      },
      "35": {
        loc: {
          start: {
            line: 379,
            column: 30
          },
          end: {
            line: 379,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 379,
            column: 30
          },
          end: {
            line: 379,
            column: 56
          }
        }, {
          start: {
            line: 379,
            column: 60
          },
          end: {
            line: 379,
            column: 77
          }
        }],
        line: 379
      },
      "36": {
        loc: {
          start: {
            line: 465,
            column: 43
          },
          end: {
            line: 465,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 465,
            column: 61
          },
          end: {
            line: 465,
            column: 63
          }
        }],
        line: 465
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0, 0, 0],
      "11": [0, 0],
      "12": [0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/websocketAuth.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/websocketAuth.ts"],
      sourcesContent: ["/**\n * WebSocket Authentication and Authorization for n8n Fork Integration\n *\n * Provides secure authentication mechanisms for WebSocket connections\n * including API keys, session tokens, OAuth 2.0, and enterprise SSO.\n */\n\nimport { z } from 'zod';\nimport { createHash, randomBytes } from 'crypto';\n\n// Authentication schemas\nexport const ApiKeyAuthSchema = z.object({\n  type: z.literal('apiKey'),\n  apiKey: z.string().min(1),\n  keyType: z.enum(['user', 'service', 'admin']).default('user'),\n});\n\nexport const SessionTokenAuthSchema = z.object({\n  type: z.literal('sessionToken'),\n  sessionToken: z.string().min(1),\n  userId: z.string().optional(),\n  expiresAt: z.string().optional(),\n});\n\nexport const OAuth2AuthSchema = z.object({\n  type: z.literal('oauth2'),\n  accessToken: z.string().min(1),\n  refreshToken: z.string().optional(),\n  tokenType: z.string().default('Bearer'),\n  expiresAt: z.string().optional(),\n  scope: z.string().optional(),\n});\n\nexport const SSOAuthSchema = z.object({\n  type: z.literal('sso'),\n  provider: z.enum(['saml', 'oidc']),\n  token: z.string().min(1),\n  userId: z.string(),\n  email: z.string().email().optional(),\n  roles: z.array(z.string()).default([]),\n});\n\nexport const AuthConfigSchema = z.union([\n  ApiKeyAuthSchema,\n  SessionTokenAuthSchema,\n  OAuth2AuthSchema,\n  SSOAuthSchema,\n]);\n\nexport type ApiKeyAuth = z.infer<typeof ApiKeyAuthSchema>;\nexport type SessionTokenAuth = z.infer<typeof SessionTokenAuthSchema>;\nexport type OAuth2Auth = z.infer<typeof OAuth2AuthSchema>;\nexport type SSOAuth = z.infer<typeof SSOAuthSchema>;\nexport type AuthConfig = z.infer<typeof AuthConfigSchema>;\n\nexport interface AuthResult {\n  success: boolean;\n  userId?: string;\n  roles?: string[];\n  permissions?: string[];\n  error?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface SecurityOptions {\n  enableCSRFProtection: boolean;\n  enableRateLimiting: boolean;\n  maxConnectionsPerUser: number;\n  tokenRefreshThreshold: number; // milliseconds before expiry to refresh\n  securityHeaders: Record<string, string>;\n}\n\n/**\n * WebSocket Authentication Manager\n *\n * Handles authentication and authorization for WebSocket connections\n * with support for multiple authentication methods and security features.\n */\nexport class WebSocketAuthManager {\n  private securityOptions: SecurityOptions;\n  private connectionCounts: Map<string, number> = new Map();\n  private rateLimitTracker: Map<string, { count: number; resetTime: number }> = new Map();\n  private activeTokens: Map<string, { userId: string; expiresAt?: Date; type: string }> = new Map();\n\n  constructor(securityOptions: Partial<SecurityOptions> = {}) {\n    this.securityOptions = {\n      enableCSRFProtection: true,\n      enableRateLimiting: true,\n      maxConnectionsPerUser: 10,\n      tokenRefreshThreshold: 300000, // 5 minutes\n      securityHeaders: {\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n      },\n      ...securityOptions,\n    };\n  }\n\n  /**\n   * Authenticate WebSocket connection\n   */\n  public async authenticate(authConfig: AuthConfig, connectionInfo: any): Promise<AuthResult> {\n    try {\n      // Validate authentication configuration\n      const validatedAuth = AuthConfigSchema.parse(authConfig);\n\n      // Check rate limiting\n      if (this.securityOptions.enableRateLimiting) {\n        const rateLimitResult = this.checkRateLimit(connectionInfo.remoteAddress);\n        if (!rateLimitResult.allowed) {\n          return {\n            success: false,\n            error: 'Rate limit exceeded',\n            metadata: { retryAfter: rateLimitResult.retryAfter },\n          };\n        }\n      }\n\n      // Perform authentication based on type\n      let authResult: AuthResult;\n      switch (validatedAuth.type) {\n        case 'apiKey':\n          authResult = await this.authenticateApiKey(validatedAuth);\n          break;\n        case 'sessionToken':\n          authResult = await this.authenticateSessionToken(validatedAuth);\n          break;\n        case 'oauth2':\n          authResult = await this.authenticateOAuth2(validatedAuth);\n          break;\n        case 'sso':\n          authResult = await this.authenticateSSO(validatedAuth);\n          break;\n        default:\n          return { success: false, error: 'Unsupported authentication type' };\n      }\n\n      // Check connection limits\n      if (authResult.success && authResult.userId) {\n        const connectionResult = this.checkConnectionLimit(authResult.userId);\n        if (!connectionResult.allowed) {\n          return {\n            success: false,\n            error: 'Maximum connections exceeded for user',\n            metadata: { maxConnections: this.securityOptions.maxConnectionsPerUser },\n          };\n        }\n      }\n\n      // Track successful authentication\n      if (authResult.success && authResult.userId) {\n        this.trackConnection(authResult.userId, validatedAuth.type);\n      }\n\n      return authResult;\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Authentication validation failed',\n      };\n    }\n  }\n\n  /**\n   * Generate authentication headers for WebSocket connection\n   */\n  public generateAuthHeaders(authConfig: AuthConfig): Record<string, string> {\n    const headers: Record<string, string> = {\n      ...this.securityOptions.securityHeaders,\n    };\n\n    switch (authConfig.type) {\n      case 'apiKey':\n        headers['X-N8N-API-KEY'] = authConfig.apiKey;\n        break;\n      case 'sessionToken':\n        headers['Cookie'] = `n8n-auth=${authConfig.sessionToken}`;\n        break;\n      case 'oauth2':\n        headers['Authorization'] = `${authConfig.tokenType} ${authConfig.accessToken}`;\n        break;\n      case 'sso':\n        headers['Authorization'] = `SSO ${authConfig.token}`;\n        headers['X-SSO-Provider'] = authConfig.provider;\n        break;\n    }\n\n    // Add CSRF protection if enabled\n    if (this.securityOptions.enableCSRFProtection) {\n      headers['X-CSRF-Token'] = this.generateCSRFToken();\n    }\n\n    return headers;\n  }\n\n  /**\n   * Check if token needs refresh\n   */\n  public needsTokenRefresh(authConfig: AuthConfig): boolean {\n    const now = new Date();\n    let expiresAt: Date | undefined;\n\n    switch (authConfig.type) {\n      case 'sessionToken':\n        expiresAt = authConfig.expiresAt ? new Date(authConfig.expiresAt) : undefined;\n        break;\n      case 'oauth2':\n        expiresAt = authConfig.expiresAt ? new Date(authConfig.expiresAt) : undefined;\n        break;\n      default:\n        return false;\n    }\n\n    if (expiresAt) {\n      const timeToExpiry = expiresAt.getTime() - now.getTime();\n      return timeToExpiry <= this.securityOptions.tokenRefreshThreshold;\n    }\n\n    return false;\n  }\n\n  /**\n   * Refresh authentication token\n   */\n  public async refreshToken(authConfig: AuthConfig): Promise<AuthConfig | null> {\n    switch (authConfig.type) {\n      case 'oauth2':\n        return await this.refreshOAuth2Token(authConfig);\n      case 'sessionToken':\n        return await this.refreshSessionToken(authConfig);\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Track successful connection\n   */\n  public trackConnection(userId: string, authType: string): void {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    this.connectionCounts.set(userId, currentCount + 1);\n\n    // Store token information for tracking\n    const tokenKey = this.generateTokenKey(userId, authType);\n    this.activeTokens.set(tokenKey, {\n      userId,\n      type: authType,\n      expiresAt: new Date(Date.now() + 3600000), // 1 hour default\n    });\n  }\n\n  /**\n   * Release connection\n   */\n  public releaseConnection(userId: string): void {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    if (currentCount > 0) {\n      this.connectionCounts.set(userId, currentCount - 1);\n    }\n  }\n\n  /**\n   * Authenticate using API key\n   */\n  private async authenticateApiKey(auth: ApiKeyAuth): Promise<AuthResult> {\n    try {\n      // In a real implementation, this would validate against n8n's API key store\n      // For now, we'll simulate the validation\n      const isValid = await this.validateApiKeyWithN8n(auth.apiKey);\n      \n      if (!isValid) {\n        return { success: false, error: 'Invalid API key' };\n      }\n\n      // Get user information from API key\n      const userInfo = await this.getUserInfoFromApiKey(auth.apiKey);\n      \n      return {\n        success: true,\n        userId: userInfo.userId,\n        roles: userInfo.roles,\n        permissions: userInfo.permissions,\n        metadata: { keyType: auth.keyType },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'API key authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using session token\n   */\n  private async authenticateSessionToken(auth: SessionTokenAuth): Promise<AuthResult> {\n    try {\n      // Validate session token with n8n\n      const sessionInfo = await this.validateSessionTokenWithN8n(auth.sessionToken);\n      \n      if (!sessionInfo.valid) {\n        return { success: false, error: 'Invalid or expired session token' };\n      }\n\n      return {\n        success: true,\n        userId: sessionInfo.userId,\n        roles: sessionInfo.roles,\n        permissions: sessionInfo.permissions,\n        metadata: { sessionId: sessionInfo.sessionId },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Session token authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using OAuth 2.0\n   */\n  private async authenticateOAuth2(auth: OAuth2Auth): Promise<AuthResult> {\n    try {\n      // Validate OAuth2 token\n      const tokenInfo = await this.validateOAuth2TokenWithN8n(auth.accessToken);\n      \n      if (!tokenInfo.valid) {\n        return { success: false, error: 'Invalid or expired OAuth2 token' };\n      }\n\n      return {\n        success: true,\n        userId: tokenInfo.userId,\n        roles: tokenInfo.roles,\n        permissions: tokenInfo.scope?.split(' ') || [],\n        metadata: { \n          tokenType: auth.tokenType,\n          scope: auth.scope,\n        },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'OAuth2 authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Authenticate using SSO\n   */\n  private async authenticateSSO(auth: SSOAuth): Promise<AuthResult> {\n    try {\n      // Validate SSO token based on provider\n      const ssoInfo = await this.validateSSOTokenWithN8n(auth.token, auth.provider);\n      \n      if (!ssoInfo.valid) {\n        return { success: false, error: 'Invalid SSO token' };\n      }\n\n      return {\n        success: true,\n        userId: ssoInfo.userId,\n        roles: ssoInfo.roles || auth.roles,\n        permissions: ssoInfo.permissions,\n        metadata: {\n          provider: auth.provider,\n          email: auth.email,\n        },\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'SSO authentication failed',\n      };\n    }\n  }\n\n  /**\n   * Check rate limiting\n   */\n  private checkRateLimit(remoteAddress: string): { allowed: boolean; retryAfter?: number } {\n    const key = `rate_limit_${remoteAddress}`;\n    const now = Date.now();\n    const windowSize = 60000; // 1 minute window\n    const maxRequests = 100; // Max 100 requests per minute\n\n    const tracker = this.rateLimitTracker.get(key);\n    \n    if (!tracker || now > tracker.resetTime) {\n      this.rateLimitTracker.set(key, { count: 1, resetTime: now + windowSize });\n      return { allowed: true };\n    }\n\n    if (tracker.count >= maxRequests) {\n      return { \n        allowed: false, \n        retryAfter: Math.ceil((tracker.resetTime - now) / 1000) \n      };\n    }\n\n    tracker.count++;\n    return { allowed: true };\n  }\n\n  /**\n   * Check connection limit\n   */\n  private checkConnectionLimit(userId: string): { allowed: boolean } {\n    const currentCount = this.connectionCounts.get(userId) || 0;\n    return { allowed: currentCount < this.securityOptions.maxConnectionsPerUser };\n  }\n\n  /**\n   * Generate CSRF token\n   */\n  private generateCSRFToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  /**\n   * Generate token key for tracking\n   */\n  private generateTokenKey(userId: string, authType: string): string {\n    const data = `${userId}:${authType}:${Date.now()}`;\n    return createHash('sha256').update(data).digest('hex');\n  }\n\n  /**\n   * Refresh OAuth2 token\n   */\n  private async refreshOAuth2Token(auth: OAuth2Auth): Promise<OAuth2Auth | null> {\n    if (!auth.refreshToken) {\n      return null;\n    }\n\n    try {\n      // In a real implementation, this would call the OAuth2 provider's token endpoint\n      const refreshResult = await this.callOAuth2RefreshEndpoint(auth.refreshToken);\n      \n      return {\n        ...auth,\n        accessToken: refreshResult.accessToken,\n        refreshToken: refreshResult.refreshToken || auth.refreshToken,\n        expiresAt: new Date(Date.now() + refreshResult.expiresIn * 1000).toISOString(),\n      };\n\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Refresh session token\n   */\n  private async refreshSessionToken(auth: SessionTokenAuth): Promise<SessionTokenAuth | null> {\n    try {\n      // In a real implementation, this would call n8n's session refresh endpoint\n      const refreshResult = await this.callSessionRefreshEndpoint(auth.sessionToken);\n      \n      return {\n        ...auth,\n        sessionToken: refreshResult.sessionToken,\n        expiresAt: refreshResult.expiresAt,\n      };\n\n    } catch (error) {\n      return null;\n    }\n  }\n\n  // Placeholder methods for external API calls\n  // These would be implemented to call actual n8n fork APIs\n\n  private async validateApiKeyWithN8n(apiKey: string): Promise<boolean> {\n    // TODO: Implement actual API key validation with n8n fork\n    return apiKey.length > 10; // Placeholder validation\n  }\n\n  private async getUserInfoFromApiKey(apiKey: string): Promise<any> {\n    // TODO: Implement actual user info retrieval from API key\n    return {\n      userId: createHash('md5').update(apiKey).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n    };\n  }\n\n  private async validateSessionTokenWithN8n(sessionToken: string): Promise<any> {\n    // TODO: Implement actual session token validation\n    return {\n      valid: sessionToken.length > 10,\n      userId: createHash('md5').update(sessionToken).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n      sessionId: 'session_' + sessionToken.slice(0, 8),\n    };\n  }\n\n  private async validateOAuth2TokenWithN8n(accessToken: string): Promise<any> {\n    // TODO: Implement actual OAuth2 token validation\n    return {\n      valid: accessToken.length > 10,\n      userId: createHash('md5').update(accessToken).digest('hex').slice(0, 8),\n      roles: ['user'],\n      scope: 'read execute',\n    };\n  }\n\n  private async validateSSOTokenWithN8n(token: string, provider: string): Promise<any> {\n    // TODO: Implement actual SSO token validation\n    return {\n      valid: token.length > 10,\n      userId: createHash('md5').update(token).digest('hex').slice(0, 8),\n      roles: ['user'],\n      permissions: ['read', 'execute'],\n    };\n  }\n\n  private async callOAuth2RefreshEndpoint(refreshToken: string): Promise<any> {\n    // TODO: Implement actual OAuth2 refresh call\n    return {\n      accessToken: 'new_access_token_' + randomBytes(16).toString('hex'),\n      refreshToken: refreshToken,\n      expiresIn: 3600,\n    };\n  }\n\n  private async callSessionRefreshEndpoint(sessionToken: string): Promise<any> {\n    // TODO: Implement actual session refresh call\n    return {\n      sessionToken: 'new_session_token_' + randomBytes(16).toString('hex'),\n      expiresAt: new Date(Date.now() + 3600000).toISOString(),\n    };\n  }\n}\n\n/**\n * Create WebSocket authentication manager with default security options\n */\nexport function createWebSocketAuthManager(\n  securityOptions: Partial<SecurityOptions> = {}\n): WebSocketAuthManager {\n  return new WebSocketAuthManager(securityOptions);\n}\n\n/**\n * Default security options\n */\nexport const DEFAULT_SECURITY_OPTIONS: SecurityOptions = {\n  enableCSRFProtection: true,\n  enableRateLimiting: true,\n  maxConnectionsPerUser: 10,\n  tokenRefreshThreshold: 300000,\n  securityHeaders: {\n    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n    'X-Content-Type-Options': 'nosniff',\n    'X-Frame-Options': 'DENY',\n    'X-XSS-Protection': '1; mode=block',\n  },\n};"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ea89bc81c3fec44b2ddbe3cba8346ac548a6ba9f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ne9cjtwua = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ne9cjtwua();
/**
 * WebSocket Authentication and Authorization for n8n Fork Integration
 *
 * Provides secure authentication mechanisms for WebSocket connections
 * including API keys, session tokens, OAuth 2.0, and enterprise SSO.
 */
import { z } from 'zod';
import { createHash, randomBytes } from 'crypto';
// Authentication schemas
export const ApiKeyAuthSchema =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[0]++, z.object({
  type: z.literal('apiKey'),
  apiKey: z.string().min(1),
  keyType: z.enum(['user', 'service', 'admin']).default('user')
}));
export const SessionTokenAuthSchema =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[1]++, z.object({
  type: z.literal('sessionToken'),
  sessionToken: z.string().min(1),
  userId: z.string().optional(),
  expiresAt: z.string().optional()
}));
export const OAuth2AuthSchema =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[2]++, z.object({
  type: z.literal('oauth2'),
  accessToken: z.string().min(1),
  refreshToken: z.string().optional(),
  tokenType: z.string().default('Bearer'),
  expiresAt: z.string().optional(),
  scope: z.string().optional()
}));
export const SSOAuthSchema =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[3]++, z.object({
  type: z.literal('sso'),
  provider: z.enum(['saml', 'oidc']),
  token: z.string().min(1),
  userId: z.string(),
  email: z.string().email().optional(),
  roles: z.array(z.string()).default([])
}));
export const AuthConfigSchema =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[4]++, z.union([ApiKeyAuthSchema, SessionTokenAuthSchema, OAuth2AuthSchema, SSOAuthSchema]));
/**
 * WebSocket Authentication Manager
 *
 * Handles authentication and authorization for WebSocket connections
 * with support for multiple authentication methods and security features.
 */
export class WebSocketAuthManager {
  securityOptions;
  connectionCounts =
  /* istanbul ignore next */
  (cov_1ne9cjtwua().s[5]++, new Map());
  rateLimitTracker =
  /* istanbul ignore next */
  (cov_1ne9cjtwua().s[6]++, new Map());
  activeTokens =
  /* istanbul ignore next */
  (cov_1ne9cjtwua().s[7]++, new Map());
  constructor(securityOptions =
  /* istanbul ignore next */
  (cov_1ne9cjtwua().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[0]++;
    cov_1ne9cjtwua().s[8]++;
    this.securityOptions = {
      enableCSRFProtection: true,
      enableRateLimiting: true,
      maxConnectionsPerUser: 10,
      tokenRefreshThreshold: 300000,
      // 5 minutes
      securityHeaders: {
        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
        'X-Content-Type-Options': 'nosniff',
        'X-Frame-Options': 'DENY',
        'X-XSS-Protection': '1; mode=block'
      },
      ...securityOptions
    };
  }
  /**
   * Authenticate WebSocket connection
   */
  async authenticate(authConfig, connectionInfo) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[1]++;
    cov_1ne9cjtwua().s[9]++;
    try {
      // Validate authentication configuration
      const validatedAuth =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[10]++, AuthConfigSchema.parse(authConfig));
      // Check rate limiting
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[11]++;
      if (this.securityOptions.enableRateLimiting) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[1][0]++;
        const rateLimitResult =
        /* istanbul ignore next */
        (cov_1ne9cjtwua().s[12]++, this.checkRateLimit(connectionInfo.remoteAddress));
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[13]++;
        if (!rateLimitResult.allowed) {
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[2][0]++;
          cov_1ne9cjtwua().s[14]++;
          return {
            success: false,
            error: 'Rate limit exceeded',
            metadata: {
              retryAfter: rateLimitResult.retryAfter
            }
          };
        } else
        /* istanbul ignore next */
        {
          cov_1ne9cjtwua().b[2][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[1][1]++;
      }
      // Perform authentication based on type
      let authResult;
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[15]++;
      switch (validatedAuth.type) {
        case 'apiKey':
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[3][0]++;
          cov_1ne9cjtwua().s[16]++;
          authResult = await this.authenticateApiKey(validatedAuth);
          /* istanbul ignore next */
          cov_1ne9cjtwua().s[17]++;
          break;
        case 'sessionToken':
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[3][1]++;
          cov_1ne9cjtwua().s[18]++;
          authResult = await this.authenticateSessionToken(validatedAuth);
          /* istanbul ignore next */
          cov_1ne9cjtwua().s[19]++;
          break;
        case 'oauth2':
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[3][2]++;
          cov_1ne9cjtwua().s[20]++;
          authResult = await this.authenticateOAuth2(validatedAuth);
          /* istanbul ignore next */
          cov_1ne9cjtwua().s[21]++;
          break;
        case 'sso':
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[3][3]++;
          cov_1ne9cjtwua().s[22]++;
          authResult = await this.authenticateSSO(validatedAuth);
          /* istanbul ignore next */
          cov_1ne9cjtwua().s[23]++;
          break;
        default:
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[3][4]++;
          cov_1ne9cjtwua().s[24]++;
          return {
            success: false,
            error: 'Unsupported authentication type'
          };
      }
      // Check connection limits
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[25]++;
      if (
      /* istanbul ignore next */
      (cov_1ne9cjtwua().b[5][0]++, authResult.success) &&
      /* istanbul ignore next */
      (cov_1ne9cjtwua().b[5][1]++, authResult.userId)) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[4][0]++;
        const connectionResult =
        /* istanbul ignore next */
        (cov_1ne9cjtwua().s[26]++, this.checkConnectionLimit(authResult.userId));
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[27]++;
        if (!connectionResult.allowed) {
          /* istanbul ignore next */
          cov_1ne9cjtwua().b[6][0]++;
          cov_1ne9cjtwua().s[28]++;
          return {
            success: false,
            error: 'Maximum connections exceeded for user',
            metadata: {
              maxConnections: this.securityOptions.maxConnectionsPerUser
            }
          };
        } else
        /* istanbul ignore next */
        {
          cov_1ne9cjtwua().b[6][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[4][1]++;
      }
      // Track successful authentication
      cov_1ne9cjtwua().s[29]++;
      if (
      /* istanbul ignore next */
      (cov_1ne9cjtwua().b[8][0]++, authResult.success) &&
      /* istanbul ignore next */
      (cov_1ne9cjtwua().b[8][1]++, authResult.userId)) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[7][0]++;
        cov_1ne9cjtwua().s[30]++;
        this.trackConnection(authResult.userId, validatedAuth.type);
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[7][1]++;
      }
      cov_1ne9cjtwua().s[31]++;
      return authResult;
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[32]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[9][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[9][1]++, 'Authentication validation failed')
      };
    }
  }
  /**
   * Generate authentication headers for WebSocket connection
   */
  generateAuthHeaders(authConfig) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[2]++;
    const headers =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[33]++, {
      ...this.securityOptions.securityHeaders
    });
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[34]++;
    switch (authConfig.type) {
      case 'apiKey':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[10][0]++;
        cov_1ne9cjtwua().s[35]++;
        headers['X-N8N-API-KEY'] = authConfig.apiKey;
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[36]++;
        break;
      case 'sessionToken':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[10][1]++;
        cov_1ne9cjtwua().s[37]++;
        headers['Cookie'] = `n8n-auth=${authConfig.sessionToken}`;
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[38]++;
        break;
      case 'oauth2':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[10][2]++;
        cov_1ne9cjtwua().s[39]++;
        headers['Authorization'] = `${authConfig.tokenType} ${authConfig.accessToken}`;
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[40]++;
        break;
      case 'sso':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[10][3]++;
        cov_1ne9cjtwua().s[41]++;
        headers['Authorization'] = `SSO ${authConfig.token}`;
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[42]++;
        headers['X-SSO-Provider'] = authConfig.provider;
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[43]++;
        break;
    }
    // Add CSRF protection if enabled
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[44]++;
    if (this.securityOptions.enableCSRFProtection) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[11][0]++;
      cov_1ne9cjtwua().s[45]++;
      headers['X-CSRF-Token'] = this.generateCSRFToken();
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[11][1]++;
    }
    cov_1ne9cjtwua().s[46]++;
    return headers;
  }
  /**
   * Check if token needs refresh
   */
  needsTokenRefresh(authConfig) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[3]++;
    const now =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[47]++, new Date());
    let expiresAt;
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[48]++;
    switch (authConfig.type) {
      case 'sessionToken':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[12][0]++;
        cov_1ne9cjtwua().s[49]++;
        expiresAt = authConfig.expiresAt ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[13][0]++, new Date(authConfig.expiresAt)) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[13][1]++, undefined);
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[50]++;
        break;
      case 'oauth2':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[12][1]++;
        cov_1ne9cjtwua().s[51]++;
        expiresAt = authConfig.expiresAt ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[14][0]++, new Date(authConfig.expiresAt)) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[14][1]++, undefined);
        /* istanbul ignore next */
        cov_1ne9cjtwua().s[52]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[12][2]++;
        cov_1ne9cjtwua().s[53]++;
        return false;
    }
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[54]++;
    if (expiresAt) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[15][0]++;
      const timeToExpiry =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[55]++, expiresAt.getTime() - now.getTime());
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[56]++;
      return timeToExpiry <= this.securityOptions.tokenRefreshThreshold;
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[15][1]++;
    }
    cov_1ne9cjtwua().s[57]++;
    return false;
  }
  /**
   * Refresh authentication token
   */
  async refreshToken(authConfig) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[4]++;
    cov_1ne9cjtwua().s[58]++;
    switch (authConfig.type) {
      case 'oauth2':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[16][0]++;
        cov_1ne9cjtwua().s[59]++;
        return await this.refreshOAuth2Token(authConfig);
      case 'sessionToken':
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[16][1]++;
        cov_1ne9cjtwua().s[60]++;
        return await this.refreshSessionToken(authConfig);
      default:
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[16][2]++;
        cov_1ne9cjtwua().s[61]++;
        return null;
    }
  }
  /**
   * Track successful connection
   */
  trackConnection(userId, authType) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[5]++;
    const currentCount =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[62]++,
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[17][0]++, this.connectionCounts.get(userId)) ||
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[17][1]++, 0));
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[63]++;
    this.connectionCounts.set(userId, currentCount + 1);
    // Store token information for tracking
    const tokenKey =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[64]++, this.generateTokenKey(userId, authType));
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[65]++;
    this.activeTokens.set(tokenKey, {
      userId,
      type: authType,
      expiresAt: new Date(Date.now() + 3600000) // 1 hour default
    });
  }
  /**
   * Release connection
   */
  releaseConnection(userId) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[6]++;
    const currentCount =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[66]++,
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[18][0]++, this.connectionCounts.get(userId)) ||
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[18][1]++, 0));
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[67]++;
    if (currentCount > 0) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[19][0]++;
      cov_1ne9cjtwua().s[68]++;
      this.connectionCounts.set(userId, currentCount - 1);
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[19][1]++;
    }
  }
  /**
   * Authenticate using API key
   */
  async authenticateApiKey(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[7]++;
    cov_1ne9cjtwua().s[69]++;
    try {
      // In a real implementation, this would validate against n8n's API key store
      // For now, we'll simulate the validation
      const isValid =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[70]++, await this.validateApiKeyWithN8n(auth.apiKey));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[71]++;
      if (!isValid) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[20][0]++;
        cov_1ne9cjtwua().s[72]++;
        return {
          success: false,
          error: 'Invalid API key'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[20][1]++;
      }
      // Get user information from API key
      const userInfo =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[73]++, await this.getUserInfoFromApiKey(auth.apiKey));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[74]++;
      return {
        success: true,
        userId: userInfo.userId,
        roles: userInfo.roles,
        permissions: userInfo.permissions,
        metadata: {
          keyType: auth.keyType
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[75]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[21][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[21][1]++, 'API key authentication failed')
      };
    }
  }
  /**
   * Authenticate using session token
   */
  async authenticateSessionToken(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[8]++;
    cov_1ne9cjtwua().s[76]++;
    try {
      // Validate session token with n8n
      const sessionInfo =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[77]++, await this.validateSessionTokenWithN8n(auth.sessionToken));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[78]++;
      if (!sessionInfo.valid) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[22][0]++;
        cov_1ne9cjtwua().s[79]++;
        return {
          success: false,
          error: 'Invalid or expired session token'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[22][1]++;
      }
      cov_1ne9cjtwua().s[80]++;
      return {
        success: true,
        userId: sessionInfo.userId,
        roles: sessionInfo.roles,
        permissions: sessionInfo.permissions,
        metadata: {
          sessionId: sessionInfo.sessionId
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[81]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[23][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[23][1]++, 'Session token authentication failed')
      };
    }
  }
  /**
   * Authenticate using OAuth 2.0
   */
  async authenticateOAuth2(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[9]++;
    cov_1ne9cjtwua().s[82]++;
    try {
      // Validate OAuth2 token
      const tokenInfo =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[83]++, await this.validateOAuth2TokenWithN8n(auth.accessToken));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[84]++;
      if (!tokenInfo.valid) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[24][0]++;
        cov_1ne9cjtwua().s[85]++;
        return {
          success: false,
          error: 'Invalid or expired OAuth2 token'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[24][1]++;
      }
      cov_1ne9cjtwua().s[86]++;
      return {
        success: true,
        userId: tokenInfo.userId,
        roles: tokenInfo.roles,
        permissions:
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[25][0]++, tokenInfo.scope?.split(' ')) ||
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[25][1]++, []),
        metadata: {
          tokenType: auth.tokenType,
          scope: auth.scope
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[87]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[26][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[26][1]++, 'OAuth2 authentication failed')
      };
    }
  }
  /**
   * Authenticate using SSO
   */
  async authenticateSSO(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[10]++;
    cov_1ne9cjtwua().s[88]++;
    try {
      // Validate SSO token based on provider
      const ssoInfo =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[89]++, await this.validateSSOTokenWithN8n(auth.token, auth.provider));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[90]++;
      if (!ssoInfo.valid) {
        /* istanbul ignore next */
        cov_1ne9cjtwua().b[27][0]++;
        cov_1ne9cjtwua().s[91]++;
        return {
          success: false,
          error: 'Invalid SSO token'
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ne9cjtwua().b[27][1]++;
      }
      cov_1ne9cjtwua().s[92]++;
      return {
        success: true,
        userId: ssoInfo.userId,
        roles:
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[28][0]++, ssoInfo.roles) ||
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[28][1]++, auth.roles),
        permissions: ssoInfo.permissions,
        metadata: {
          provider: auth.provider,
          email: auth.email
        }
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[93]++;
      return {
        success: false,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[29][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[29][1]++, 'SSO authentication failed')
      };
    }
  }
  /**
   * Check rate limiting
   */
  checkRateLimit(remoteAddress) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[11]++;
    const key =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[94]++, `rate_limit_${remoteAddress}`);
    const now =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[95]++, Date.now());
    const windowSize =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[96]++, 60000); // 1 minute window
    const maxRequests =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[97]++, 100); // Max 100 requests per minute
    const tracker =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[98]++, this.rateLimitTracker.get(key));
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[99]++;
    if (
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[31][0]++, !tracker) ||
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[31][1]++, now > tracker.resetTime)) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[30][0]++;
      cov_1ne9cjtwua().s[100]++;
      this.rateLimitTracker.set(key, {
        count: 1,
        resetTime: now + windowSize
      });
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[101]++;
      return {
        allowed: true
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[30][1]++;
    }
    cov_1ne9cjtwua().s[102]++;
    if (tracker.count >= maxRequests) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[32][0]++;
      cov_1ne9cjtwua().s[103]++;
      return {
        allowed: false,
        retryAfter: Math.ceil((tracker.resetTime - now) / 1000)
      };
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[32][1]++;
    }
    cov_1ne9cjtwua().s[104]++;
    tracker.count++;
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[105]++;
    return {
      allowed: true
    };
  }
  /**
   * Check connection limit
   */
  checkConnectionLimit(userId) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[12]++;
    const currentCount =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[106]++,
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[33][0]++, this.connectionCounts.get(userId)) ||
    /* istanbul ignore next */
    (cov_1ne9cjtwua().b[33][1]++, 0));
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[107]++;
    return {
      allowed: currentCount < this.securityOptions.maxConnectionsPerUser
    };
  }
  /**
   * Generate CSRF token
   */
  generateCSRFToken() {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[13]++;
    cov_1ne9cjtwua().s[108]++;
    return randomBytes(32).toString('hex');
  }
  /**
   * Generate token key for tracking
   */
  generateTokenKey(userId, authType) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[14]++;
    const data =
    /* istanbul ignore next */
    (cov_1ne9cjtwua().s[109]++, `${userId}:${authType}:${Date.now()}`);
    /* istanbul ignore next */
    cov_1ne9cjtwua().s[110]++;
    return createHash('sha256').update(data).digest('hex');
  }
  /**
   * Refresh OAuth2 token
   */
  async refreshOAuth2Token(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[15]++;
    cov_1ne9cjtwua().s[111]++;
    if (!auth.refreshToken) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().b[34][0]++;
      cov_1ne9cjtwua().s[112]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_1ne9cjtwua().b[34][1]++;
    }
    cov_1ne9cjtwua().s[113]++;
    try {
      // In a real implementation, this would call the OAuth2 provider's token endpoint
      const refreshResult =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[114]++, await this.callOAuth2RefreshEndpoint(auth.refreshToken));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[115]++;
      return {
        ...auth,
        accessToken: refreshResult.accessToken,
        refreshToken:
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[35][0]++, refreshResult.refreshToken) ||
        /* istanbul ignore next */
        (cov_1ne9cjtwua().b[35][1]++, auth.refreshToken),
        expiresAt: new Date(Date.now() + refreshResult.expiresIn * 1000).toISOString()
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[116]++;
      return null;
    }
  }
  /**
   * Refresh session token
   */
  async refreshSessionToken(auth) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[16]++;
    cov_1ne9cjtwua().s[117]++;
    try {
      // In a real implementation, this would call n8n's session refresh endpoint
      const refreshResult =
      /* istanbul ignore next */
      (cov_1ne9cjtwua().s[118]++, await this.callSessionRefreshEndpoint(auth.sessionToken));
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[119]++;
      return {
        ...auth,
        sessionToken: refreshResult.sessionToken,
        expiresAt: refreshResult.expiresAt
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1ne9cjtwua().s[120]++;
      return null;
    }
  }
  // Placeholder methods for external API calls
  // These would be implemented to call actual n8n fork APIs
  async validateApiKeyWithN8n(apiKey) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[17]++;
    cov_1ne9cjtwua().s[121]++;
    // TODO: Implement actual API key validation with n8n fork
    return apiKey.length > 10; // Placeholder validation
  }
  async getUserInfoFromApiKey(apiKey) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[18]++;
    cov_1ne9cjtwua().s[122]++;
    // TODO: Implement actual user info retrieval from API key
    return {
      userId: createHash('md5').update(apiKey).digest('hex').slice(0, 8),
      roles: ['user'],
      permissions: ['read', 'execute']
    };
  }
  async validateSessionTokenWithN8n(sessionToken) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[19]++;
    cov_1ne9cjtwua().s[123]++;
    // TODO: Implement actual session token validation
    return {
      valid: sessionToken.length > 10,
      userId: createHash('md5').update(sessionToken).digest('hex').slice(0, 8),
      roles: ['user'],
      permissions: ['read', 'execute'],
      sessionId: 'session_' + sessionToken.slice(0, 8)
    };
  }
  async validateOAuth2TokenWithN8n(accessToken) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[20]++;
    cov_1ne9cjtwua().s[124]++;
    // TODO: Implement actual OAuth2 token validation
    return {
      valid: accessToken.length > 10,
      userId: createHash('md5').update(accessToken).digest('hex').slice(0, 8),
      roles: ['user'],
      scope: 'read execute'
    };
  }
  async validateSSOTokenWithN8n(token, provider) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[21]++;
    cov_1ne9cjtwua().s[125]++;
    // TODO: Implement actual SSO token validation
    return {
      valid: token.length > 10,
      userId: createHash('md5').update(token).digest('hex').slice(0, 8),
      roles: ['user'],
      permissions: ['read', 'execute']
    };
  }
  async callOAuth2RefreshEndpoint(refreshToken) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[22]++;
    cov_1ne9cjtwua().s[126]++;
    // TODO: Implement actual OAuth2 refresh call
    return {
      accessToken: 'new_access_token_' + randomBytes(16).toString('hex'),
      refreshToken: refreshToken,
      expiresIn: 3600
    };
  }
  async callSessionRefreshEndpoint(sessionToken) {
    /* istanbul ignore next */
    cov_1ne9cjtwua().f[23]++;
    cov_1ne9cjtwua().s[127]++;
    // TODO: Implement actual session refresh call
    return {
      sessionToken: 'new_session_token_' + randomBytes(16).toString('hex'),
      expiresAt: new Date(Date.now() + 3600000).toISOString()
    };
  }
}
/**
 * Create WebSocket authentication manager with default security options
 */
export function createWebSocketAuthManager(securityOptions =
/* istanbul ignore next */
(cov_1ne9cjtwua().b[36][0]++, {})) {
  /* istanbul ignore next */
  cov_1ne9cjtwua().f[24]++;
  cov_1ne9cjtwua().s[128]++;
  return new WebSocketAuthManager(securityOptions);
}
/**
 * Default security options
 */
export const DEFAULT_SECURITY_OPTIONS =
/* istanbul ignore next */
(cov_1ne9cjtwua().s[129]++, {
  enableCSRFProtection: true,
  enableRateLimiting: true,
  maxConnectionsPerUser: 10,
  tokenRefreshThreshold: 300000,
  securityHeaders: {
    'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',
    'X-Content-Type-Options': 'nosniff',
    'X-Frame-Options': 'DENY',
    'X-XSS-Protection': '1; mode=block'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,