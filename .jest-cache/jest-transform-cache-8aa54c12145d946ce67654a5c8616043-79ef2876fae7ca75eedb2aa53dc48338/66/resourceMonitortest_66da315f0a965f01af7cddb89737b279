c93147a230c6623d61540fc5c9245761
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Mock Node.js modules
jest.mock('os', () => ({
    totalmem: jest.fn(() => 8589934592), // 8GB
    freemem: jest.fn(() => 4294967296), // 4GB
    loadavg: jest.fn(() => [1.5, 2.0, 2.5]),
    cpus: jest.fn(() => new Array(4).fill({})), // 4 cores
}));
jest.mock('fs', () => ({
    stat: jest.fn(),
}));
jest.mock('util', () => ({
    promisify: jest.fn(fn => fn),
}));
const resourceMonitor_js_1 = require("../../../src/utils/resourceMonitor.js");
describe('ResourceMonitor', () => {
    let resourceMonitor;
    let mockConsoleLog;
    let mockConsoleError;
    let mockSetInterval;
    let mockClearInterval;
    beforeEach(() => {
        // Mock console methods
        mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();
        mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
        // Mock timer functions with proper return values
        let intervalId = 1;
        mockSetInterval = jest.spyOn(global, 'setInterval').mockImplementation((fn, interval) => {
            const id = intervalId++;
            // Execute the function after a short delay for testing
            setTimeout(() => {
                if (typeof fn === 'function') {
                    fn();
                }
            }, 0);
            return id;
        });
        mockClearInterval = jest.spyOn(global, 'clearInterval').mockImplementation();
        // Mock process.cpuUsage with proper chaining
        const mockCpuUsage = jest
            .fn()
            .mockReturnValueOnce({ user: 1000000, system: 500000 }) // Initial call
            .mockReturnValue({ user: 2000000, system: 1000000 }); // Subsequent calls
        process.cpuUsage = mockCpuUsage;
        // Mock process.hrtime with proper chaining
        const mockHrtime = jest
            .fn()
            .mockReturnValueOnce([0, 0]) // Initial call
            .mockReturnValue([0, 100000000]); // Subsequent calls (100ms)
        process.hrtime = mockHrtime;
        // Mock process.memoryUsage
        process.memoryUsage = jest.fn(() => ({
            heapUsed: 67108864, // 64MB
            heapTotal: 134217728, // 128MB
            external: 16777216, // 16MB
            rss: 201326592, // 192MB
        }));
        // Mock fs.stat
        const fs = require('fs');
        fs.stat.mockResolvedValue({
            isDirectory: () => true,
        });
        jest.clearAllMocks();
    });
    afterEach(() => {
        if (resourceMonitor) {
            resourceMonitor.stopMonitoring();
        }
        jest.clearAllTimers();
        mockConsoleLog.mockRestore();
        mockConsoleError.mockRestore();
        mockSetInterval.mockRestore();
        mockClearInterval.mockRestore();
    });
    describe('Constructor', () => {
        it('should create ResourceMonitor with default configuration', () => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
            const config = resourceMonitor.getConfig();
            expect(config.monitoring.enabled).toBe(true);
            expect(config.monitoring.intervalMs).toBe(30000);
            expect(config.monitoring.retentionDays).toBe(7);
            expect(config.monitoring.alertThresholds.cpuUsage).toBe(80);
            expect(config.monitoring.alertThresholds.memoryUsage).toBe(85);
            expect(config.storage.maxDataPoints).toBe(10000);
        });
        it('should create ResourceMonitor with custom configuration', () => {
            const customConfig = {
                monitoring: {
                    enabled: false,
                    intervalMs: 60000,
                    retentionDays: 7,
                    alertThresholds: {
                        cpuUsage: 70,
                        memoryUsage: 80,
                        diskUsage: 85,
                        executionTime: 600000,
                        errorRate: 5,
                    },
                },
                storage: {
                    inMemory: true,
                    persistToDisk: false,
                    maxDataPoints: 5000,
                    compressionEnabled: false,
                },
            };
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor(customConfig);
            const config = resourceMonitor.getConfig();
            expect(config.monitoring.enabled).toBe(false);
            expect(config.monitoring.intervalMs).toBe(60000);
            expect(config.monitoring.alertThresholds.cpuUsage).toBe(70);
            expect(config.monitoring.alertThresholds.memoryUsage).toBe(80);
            expect(config.storage.maxDataPoints).toBe(5000);
        });
    });
    describe('Monitoring Lifecycle', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should start monitoring when enabled', async () => {
            await resourceMonitor.startMonitoring();
            expect(mockSetInterval).toHaveBeenCalledWith(expect.any(Function), 30000);
            expect(mockConsoleLog).toHaveBeenCalledWith('Resource monitoring started with 30000ms interval');
        });
        it('should not start monitoring when disabled', async () => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor({
                monitoring: {
                    enabled: false,
                    intervalMs: 30000,
                    retentionDays: 7,
                    alertThresholds: {
                        cpuUsage: 80,
                        memoryUsage: 85,
                        diskUsage: 90,
                        executionTime: 300000,
                        errorRate: 10,
                    },
                },
            });
            await resourceMonitor.startMonitoring();
            expect(mockSetInterval).not.toHaveBeenCalled();
            expect(mockConsoleLog).not.toHaveBeenCalled();
        });
        it('should stop monitoring', async () => {
            await resourceMonitor.startMonitoring();
            resourceMonitor.stopMonitoring();
            expect(mockClearInterval).toHaveBeenCalled();
            expect(mockConsoleLog).toHaveBeenCalledWith('Resource monitoring stopped');
        });
        it('should clear existing interval before starting new one', async () => {
            await resourceMonitor.startMonitoring();
            await resourceMonitor.startMonitoring(); // Start again
            expect(mockClearInterval).toHaveBeenCalled();
            expect(mockSetInterval).toHaveBeenCalledTimes(2);
        });
    });
    describe('System Resource Usage', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should collect system resource usage', async () => {
            const systemUsage = await resourceMonitor.getSystemResourceUsage();
            expect(systemUsage).toMatchObject({
                cpu: {
                    totalUsage: expect.any(Number),
                    processUsage: expect.any(Number),
                    loadAverage: [1.5, 2.0, 2.5],
                    coreCount: 4,
                },
                memory: {
                    totalMemory: 8589934592,
                    freeMemory: 4294967296,
                    usedMemory: 4294967296,
                    processMemory: {
                        heapUsed: 67108864,
                        heapTotal: 134217728,
                        external: 16777216,
                        rss: 201326592,
                    },
                    utilization: 50,
                },
                disk: {
                    totalSpace: expect.any(Number),
                    freeSpace: expect.any(Number),
                    usedSpace: expect.any(Number),
                    utilization: expect.any(Number),
                },
                network: {
                    bytesReceived: 0,
                    bytesSent: 0,
                    packetsReceived: 0,
                    packetsSent: 0,
                },
                uptime: expect.any(Number),
                timestamp: expect.any(String),
            });
        });
        it('should calculate memory utilization correctly', async () => {
            const systemUsage = await resourceMonitor.getSystemResourceUsage();
            const expectedUtilization = ((8589934592 - 4294967296) / 8589934592) * 100;
            expect(systemUsage.memory.utilization).toBe(expectedUtilization);
        });
        it('should handle disk usage errors gracefully', async () => {
            const fs = require('fs');
            fs.stat.mockRejectedValue(new Error('Access denied'));
            const systemUsage = await resourceMonitor.getSystemResourceUsage();
            expect(systemUsage.disk).toEqual({
                totalSpace: 0,
                freeSpace: 0,
                usedSpace: 0,
                utilization: 0,
            });
        });
    });
    describe('Workflow Resource Usage', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should get workflow resource usage with no execution history', async () => {
            const workflowUsage = await resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test Workflow', true);
            expect(workflowUsage).toMatchObject({
                workflowId: 'workflow-1',
                workflowName: 'Test Workflow',
                isActive: true,
                executionCount: 0,
                resourceMetrics: {
                    averageExecutionTime: 0,
                    lastExecutionTime: 0,
                    totalExecutionTime: 0,
                    memoryUsage: {
                        average: 50000000,
                        peak: 100000000,
                        current: 75000000,
                    },
                    cpuUsage: {
                        average: 15,
                        peak: 80,
                        current: 25,
                    },
                },
                executionStats: {
                    successfulRuns: 0,
                    failedRuns: 0,
                    totalRuns: 0,
                    successRate: 100,
                    averageRunsPerHour: 0,
                },
                nodePerformance: [],
            });
        });
        it('should calculate workflow resource usage with execution history', async () => {
            // Record some executions
            resourceMonitor.recordWorkflowExecution('workflow-1', 5000, true);
            resourceMonitor.recordWorkflowExecution('workflow-1', 3000, true);
            resourceMonitor.recordWorkflowExecution('workflow-1', 7000, false);
            const workflowUsage = await resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test Workflow', false);
            expect(workflowUsage.executionCount).toBe(3);
            expect(workflowUsage.resourceMetrics.averageExecutionTime).toBe(5000);
            expect(workflowUsage.resourceMetrics.totalExecutionTime).toBe(15000);
            expect(workflowUsage.executionStats.successfulRuns).toBe(2);
            expect(workflowUsage.executionStats.failedRuns).toBe(1);
            expect(workflowUsage.executionStats.successRate).toBe(66.66666666666666);
            expect(workflowUsage.resourceMetrics.memoryUsage.current).toBe(0); // Inactive workflow
        });
    });
    describe('Instance Health Metrics', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should get instance health metrics with healthy status', async () => {
            const healthMetrics = await resourceMonitor.getInstanceHealthMetrics();
            expect(healthMetrics).toMatchObject({
                overall: {
                    status: expect.stringMatching(/^(healthy|warning|degraded|critical)$/),
                    score: expect.any(Number),
                    issues: expect.any(Array),
                    recommendations: expect.any(Array),
                },
                performance: {
                    responseTime: 150,
                    throughput: 10,
                    errorRate: 2,
                    availabilityUptime: 99.5,
                },
                resources: {
                    memoryPressure: false, // 50% utilization < 85%
                    cpuThrottling: expect.any(Boolean),
                    diskSpaceWarning: expect.any(Boolean),
                    networkLatency: 50,
                },
                dependencies: expect.arrayContaining([
                    expect.objectContaining({
                        name: 'Database',
                        type: 'database',
                        status: 'online',
                        responseTime: 25,
                        errorCount: 0,
                    }),
                    expect.objectContaining({
                        name: 'File System',
                        type: 'file_system',
                        status: 'online',
                        responseTime: 10,
                        errorCount: 0,
                    }),
                ]),
                alerts: expect.any(Array),
            });
            expect(healthMetrics.overall.score).toBeGreaterThanOrEqual(0);
            expect(healthMetrics.overall.score).toBeLessThanOrEqual(100);
        });
        it('should detect high memory usage issues', async () => {
            // Mock high memory usage
            const os = require('os');
            os.totalmem.mockReturnValue(1000000000); // 1GB total
            os.freemem.mockReturnValue(100000000); // 100MB free (90% used)
            const healthMetrics = await resourceMonitor.getInstanceHealthMetrics();
            expect(healthMetrics.overall.issues).toContain('High memory usage detected');
            expect(healthMetrics.overall.recommendations).toContain('Monitor memory-intensive workflows and consider increasing available memory');
            expect(healthMetrics.resources.memoryPressure).toBe(true);
        });
    });
    describe('Alert Management', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor({
                monitoring: {
                    enabled: true,
                    intervalMs: 30000,
                    retentionDays: 7,
                    alertThresholds: {
                        cpuUsage: 70,
                        memoryUsage: 80,
                        diskUsage: 90,
                        executionTime: 300000,
                        errorRate: 10,
                    },
                },
            });
        });
        it('should create CPU usage alert when threshold exceeded', async () => {
            // Mock high CPU usage
            const os = require('os');
            os.loadavg.mockReturnValue([3.0, 3.5, 4.0]); // High load average
            os.cpus.mockReturnValue(new Array(4).fill({}));
            await resourceMonitor.startMonitoring();
            // Wait a bit for the monitoring to collect metrics
            await new Promise(resolve => setTimeout(resolve, 10));
            const alerts = resourceMonitor.getAlerts();
            const cpuAlert = alerts.find(alert => alert.title === 'High CPU Usage');
            if (cpuAlert) {
                expect(cpuAlert.type).toBe('resource_threshold');
                expect(cpuAlert.severity).toMatch(/^(high|critical)$/);
                expect(cpuAlert.description).toContain('CPU usage');
            }
        });
        it('should create memory usage alert when threshold exceeded', async () => {
            // Mock high memory usage
            const os = require('os');
            os.totalmem.mockReturnValue(1000000000); // 1GB total
            os.freemem.mockReturnValue(150000000); // 150MB free (85% used)
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 10));
            const alerts = resourceMonitor.getAlerts();
            const memoryAlert = alerts.find(alert => alert.title === 'High Memory Usage');
            if (memoryAlert) {
                expect(memoryAlert.type).toBe('resource_threshold');
                expect(memoryAlert.severity).toMatch(/^(high|critical)$/);
                expect(memoryAlert.description).toContain('Memory usage');
            }
        });
        it('should resolve alerts', async () => {
            // Create a mock alert first
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 10));
            const alerts = resourceMonitor.getAlerts();
            if (alerts.length > 0) {
                const alertId = alerts[0].id;
                const resolved = resourceMonitor.resolveAlert(alertId);
                expect(resolved).toBe(true);
                const resolvedAlerts = resourceMonitor.getAlerts(undefined, true);
                expect(resolvedAlerts.some(alert => alert.id === alertId)).toBe(true);
            }
        });
        it('should filter alerts by severity', async () => {
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 10));
            const highSeverityAlerts = resourceMonitor.getAlerts('high');
            const criticalSeverityAlerts = resourceMonitor.getAlerts('critical');
            highSeverityAlerts.forEach(alert => {
                expect(alert.severity).toBe('high');
            });
            criticalSeverityAlerts.forEach(alert => {
                expect(alert.severity).toBe('critical');
            });
        });
    });
    describe('Data Point Management', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor({
                storage: {
                    inMemory: true,
                    persistToDisk: false,
                    maxDataPoints: 5,
                    compressionEnabled: false,
                },
            });
        });
        it('should add and retrieve data points', async () => {
            await resourceMonitor.startMonitoring();
            // Wait for monitoring to collect data
            await new Promise(resolve => setTimeout(resolve, 100));
            const dataPoints = resourceMonitor.getDataPoints();
            // If no data points were collected due to timing, manually trigger collection
            if (dataPoints.length === 0) {
                // Manually trigger a collection to ensure we have data points for testing
                await resourceMonitor.collectMetrics();
            }
            const updatedDataPoints = resourceMonitor.getDataPoints();
            expect(updatedDataPoints.length).toBeGreaterThan(0);
            expect(updatedDataPoints[0]).toMatchObject({
                timestamp: expect.any(String),
                metricType: expect.any(String),
                data: expect.any(Object),
                tags: expect.any(Object),
            });
        });
        it('should limit data points to maxDataPoints', async () => {
            // Simulate multiple monitoring intervals
            await resourceMonitor.startMonitoring();
            // Wait for multiple collection cycles
            for (let i = 0; i < 10; i++) {
                await new Promise(resolve => setTimeout(resolve, 10));
            }
            resourceMonitor.stopMonitoring();
            const dataPoints = resourceMonitor.getDataPoints();
            expect(dataPoints.length).toBeLessThanOrEqual(5);
        });
        it('should filter data points by metric type', async () => {
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 10));
            const systemDataPoints = resourceMonitor.getDataPoints('system');
            systemDataPoints.forEach(dp => {
                expect(dp.metricType).toBe('system');
            });
        });
        it('should limit data points by count', async () => {
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 10));
            const limitedDataPoints = resourceMonitor.getDataPoints(undefined, 2);
            expect(limitedDataPoints.length).toBeLessThanOrEqual(2);
        });
    });
    describe('Configuration Management', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should update configuration', () => {
            const newConfig = {
                monitoring: {
                    enabled: true,
                    intervalMs: 45000,
                    retentionDays: 7,
                    alertThresholds: {
                        cpuUsage: 75,
                        memoryUsage: 85,
                        diskUsage: 90,
                        executionTime: 300000,
                        errorRate: 10,
                    },
                },
            };
            resourceMonitor.updateConfig(newConfig);
            const config = resourceMonitor.getConfig();
            expect(config.monitoring.intervalMs).toBe(45000);
            expect(config.monitoring.alertThresholds.cpuUsage).toBe(75);
            // Ensure other values are preserved
            expect(config.monitoring.enabled).toBe(true);
            expect(config.monitoring.alertThresholds.memoryUsage).toBe(85);
        });
        it('should restart monitoring after config update', async () => {
            await resourceMonitor.startMonitoring();
            resourceMonitor.updateConfig({
                monitoring: {
                    enabled: true,
                    intervalMs: 60000,
                    retentionDays: 7,
                    alertThresholds: {
                        cpuUsage: 80,
                        memoryUsage: 85,
                        diskUsage: 90,
                        executionTime: 300000,
                        errorRate: 10,
                    },
                },
            });
            expect(mockClearInterval).toHaveBeenCalled();
            expect(mockSetInterval).toHaveBeenCalledWith(expect.any(Function), 60000);
        });
    });
    describe('Workflow Execution Recording', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should record workflow execution', () => {
            resourceMonitor.recordWorkflowExecution('workflow-1', 5000, true);
            resourceMonitor.recordWorkflowExecution('workflow-1', 3000, false);
            // Verify through getWorkflowResourceUsage
            return resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test', false).then(usage => {
                expect(usage.executionCount).toBe(2);
                expect(usage.executionStats.successfulRuns).toBe(1);
                expect(usage.executionStats.failedRuns).toBe(1);
            });
        });
        it('should limit execution history per workflow', () => {
            // Record more than 1000 executions
            for (let i = 0; i < 1200; i++) {
                resourceMonitor.recordWorkflowExecution('workflow-1', 1000, true);
            }
            return resourceMonitor.getWorkflowResourceUsage('workflow-1', 'Test', false).then(usage => {
                expect(usage.executionCount).toBe(1000); // Should be capped at 1000
            });
        });
    });
    describe('Metrics Aggregation', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should get monitoring metrics', async () => {
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 50));
            const metrics = resourceMonitor.getMetrics();
            expect(metrics).toMatchObject({
                system: expect.any(Object),
                workflows: expect.any(Array),
                health: expect.any(Object),
                alerts: expect.any(Array),
                dataPoints: expect.any(Array),
            });
        });
    });
    describe('Error Handling', () => {
        beforeEach(() => {
            resourceMonitor = new resourceMonitor_js_1.ResourceMonitor();
        });
        it('should handle errors during metric collection', async () => {
            // Mock os.totalmem to throw an error
            const os = require('os');
            os.totalmem.mockImplementation(() => {
                throw new Error('System error');
            });
            await resourceMonitor.startMonitoring();
            await new Promise(resolve => setTimeout(resolve, 50));
            expect(mockConsoleError).toHaveBeenCalledWith('Error collecting metrics:', expect.any(Error));
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvdGVzdHMvdW5pdC91dGlscy9yZXNvdXJjZU1vbml0b3IudGVzdC50cyIsIm1hcHBpbmdzIjoiOztBQVdBLHVCQUF1QjtBQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxFQUFFLE1BQU07SUFDM0MsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLEVBQUUsTUFBTTtJQUMxQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdkMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsVUFBVTtDQUN2RCxDQUFDLENBQUMsQ0FBQztBQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDckIsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUU7Q0FDaEIsQ0FBQyxDQUFDLENBQUM7QUFFSixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZCLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0NBQzdCLENBQUMsQ0FBQyxDQUFDO0FBekJKLDhFQUF3RTtBQTJCeEUsUUFBUSxDQUFDLGlCQUFpQixFQUFFLEdBQUcsRUFBRTtJQUMvQixJQUFJLGVBQWdDLENBQUM7SUFD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QztZQUN6QixFQUFFLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtnQkFDbEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztZQUVILE1BQU0sZUFBZSxDQUFDLGVBQWUsRUFBRSxDQUFDO1lBQ3hDLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFdEQsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsb0JBQW9CLENBQUMsMkJBQTJCLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci90ZXN0cy91bml0L3V0aWxzL3Jlc291cmNlTW9uaXRvci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc291cmNlTW9uaXRvciB9IGZyb20gJy4uLy4uLy4uL3NyYy91dGlscy9yZXNvdXJjZU1vbml0b3IuanMnO1xuaW1wb3J0IHtcbiAgU3lzdGVtUmVzb3VyY2VVc2FnZSxcbiAgV29ya2Zsb3dSZXNvdXJjZVVzYWdlLFxuICBJbnN0YW5jZUhlYWx0aE1ldHJpY3MsXG4gIFJlc291cmNlTW9uaXRvcmluZ0NvbmZpZyxcbiAgTW9uaXRvcmluZ0RhdGFQb2ludCxcbiAgUGVyZm9ybWFuY2VBbGVydCxcbiAgTW9uaXRvcmluZ01ldHJpY3MsXG59IGZyb20gJy4uLy4uLy4uL3NyYy90eXBlcy9tb25pdG9yaW5nVHlwZXMuanMnO1xuXG4vLyBNb2NrIE5vZGUuanMgbW9kdWxlc1xuamVzdC5tb2NrKCdvcycsICgpID0+ICh7XG4gIHRvdGFsbWVtOiBqZXN0LmZuKCgpID0+IDg1ODk5MzQ1OTIpLCAvLyA4R0JcbiAgZnJlZW1lbTogamVzdC5mbigoKSA9PiA0Mjk0OTY3Mjk2KSwgLy8gNEdCXG4gIGxvYWRhdmc6IGplc3QuZm4oKCkgPT4gWzEuNSwgMi4wLCAyLjVdKSxcbiAgY3B1czogamVzdC5mbigoKSA9PiBuZXcgQXJyYXkoNCkuZmlsbCh7fSkpLCAvLyA0IGNvcmVzXG59KSk7XG5cbmplc3QubW9jaygnZnMnLCAoKSA9PiAoe1xuICBzdGF0OiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygndXRpbCcsICgpID0+ICh7XG4gIHByb21pc2lmeTogamVzdC5mbihmbiA9PiBmbiksXG59KSk7XG5cbmRlc2NyaWJlKCdSZXNvdXJjZU1vbml0b3InLCAoKSA9PiB7XG4gIGxldCByZXNvdXJjZU1vbml0b3I6IFJlc291cmNlTW9uaXRvcjtcbiAgbGV0IG1vY2tDb25zb2xlTG9nOiBqZXN0LlNweUluc3RhbmNlO1xuICBsZXQgbW9ja0NvbnNvbGVFcnJvcjogamVzdC5TcHlJbnN0YW5jZTtcbiAgbGV0IG1vY2tTZXRJbnRlcnZhbDogamVzdC5TcHlJbnN0YW5jZTtcbiAgbGV0IG1vY2tDbGVhckludGVydmFsOiBqZXN0LlNweUluc3RhbmNlO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIE1vY2sgY29uc29sZSBtZXRob2RzXG4gICAgbW9ja0NvbnNvbGVMb2cgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcbiAgICBtb2NrQ29uc29sZUVycm9yID0gamVzdC5zcHlPbihjb25zb2xlLCAnZXJyb3InKS5tb2NrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIC8vIE1vY2sgdGltZXIgZnVuY3Rpb25zIHdpdGggcHJvcGVyIHJldHVybiB2YWx1ZXNcbiAgICBsZXQgaW50ZXJ2YWxJZCA9IDE7XG4gICAgbW9ja1NldEludGVydmFsID0gamVzdC5zcHlPbihnbG9iYWwsICdzZXRJbnRlcnZhbCcpLm1vY2tJbXBsZW1lbnRhdGlvbigoZm4sIGludGVydmFsKSA9PiB7XG4gICAgICBjb25zdCBpZCA9IGludGVydmFsSWQrKztcbiAgICAgIC8vIEV4ZWN1dGUgdGhlIGZ1bmN0aW9uIGFmdGVyIGEgc2hvcnQgZGVsYXkgZm9yIHRlc3RpbmdcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZm4oKTtcbiAgICAgICAgfVxuICAgICAgfSwgMCk7XG4gICAgICByZXR1cm4gaWQgYXMgYW55O1xuICAgIH0pO1xuICAgIG1vY2tDbGVhckludGVydmFsID0gamVzdC5zcHlPbihnbG9iYWwsICdjbGVhckludGVydmFsJykubW9ja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICAvLyBNb2NrIHByb2Nlc3MuY3B1VXNhZ2Ugd2l0aCBwcm9wZXIgY2hhaW5pbmdcbiAgICBjb25zdCBtb2NrQ3B1VXNhZ2UgPSBqZXN0XG4gICAgICAuZm4oKVxuICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoeyB1c2VyOiAxMDAwMDAwLCBzeXN0ZW06IDUwMDAwMCB9KSAvLyBJbml0aWFsIGNhbGxcbiAgICAgIC5tb2NrUmV0dXJuVmFsdWUoeyB1c2VyOiAyMDAwMDAwLCBzeXN0ZW06IDEwMDAwMDAgfSk7IC8vIFN1YnNlcXVlbnQgY2FsbHNcbiAgICAocHJvY2VzcyBhcyBhbnkpLmNwdVVzYWdlID0gbW9ja0NwdVVzYWdlO1xuXG4gICAgLy8gTW9jayBwcm9jZXNzLmhydGltZSB3aXRoIHByb3BlciBjaGFpbmluZ1xuICAgIGNvbnN0IG1vY2tIcnRpbWUgPSBqZXN0XG4gICAgICAuZm4oKVxuICAgICAgLm1vY2tSZXR1cm5WYWx1ZU9uY2UoWzAsIDBdKSAvLyBJbml0aWFsIGNhbGxcbiAgICAgIC5tb2NrUmV0dXJuVmFsdWUoWzAsIDEwMDAwMDAwMF0pOyAvLyBTdWJzZXF1ZW50IGNhbGxzICgxMDBtcylcbiAgICAocHJvY2VzcyBhcyBhbnkpLmhydGltZSA9IG1vY2tIcnRpbWU7XG5cbiAgICAvLyBNb2NrIHByb2Nlc3MubWVtb3J5VXNhZ2VcbiAgICAocHJvY2VzcyBhcyBhbnkpLm1lbW9yeVVzYWdlID0gamVzdC5mbigoKSA9PiAoe1xuICAgICAgaGVhcFVzZWQ6IDY3MTA4ODY0LCAvLyA2NE1CXG4gICAgICBoZWFwVG90YWw6IDEzNDIxNzcyOCwgLy8gMTI4TUJcbiAgICAgIGV4dGVybmFsOiAxNjc3NzIxNiwgLy8gMTZNQlxuICAgICAgcnNzOiAyMDEzMjY1OTIsIC8vIDE5Mk1CXG4gICAgfSkpO1xuXG4gICAgLy8gTW9jayBmcy5zdGF0XG4gICAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuICAgIGZzLnN0YXQubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgaXNEaXJlY3Rvcnk6ICgpID0+IHRydWUsXG4gICAgfSk7XG5cbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICBpZiAocmVzb3VyY2VNb25pdG9yKSB7XG4gICAgICByZXNvdXJjZU1vbml0b3Iuc3RvcE1vbml0b3JpbmcoKTtcbiAgICB9XG4gICAgamVzdC5jbGVhckFsbFRpbWVycygpO1xuICAgIG1vY2tDb25zb2xlTG9nLm1vY2tSZXN0b3JlKCk7XG4gICAgbW9ja0NvbnNvbGVFcnJvci5tb2NrUmVzdG9yZSgpO1xuICAgIG1vY2tTZXRJbnRlcnZhbC5tb2NrUmVzdG9yZSgpO1xuICAgIG1vY2tDbGVhckludGVydmFsLm1vY2tSZXN0b3JlKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBSZXNvdXJjZU1vbml0b3Igd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKCk7XG4gICAgICBjb25zdCBjb25maWcgPSByZXNvdXJjZU1vbml0b3IuZ2V0Q29uZmlnKCk7XG5cbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5lbmFibGVkKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5tb25pdG9yaW5nLmludGVydmFsTXMpLnRvQmUoMzAwMDApO1xuICAgICAgZXhwZWN0KGNvbmZpZy5tb25pdG9yaW5nLnJldGVudGlvbkRheXMpLnRvQmUoNyk7XG4gICAgICBleHBlY3QoY29uZmlnLm1vbml0b3JpbmcuYWxlcnRUaHJlc2hvbGRzLmNwdVVzYWdlKS50b0JlKDgwKTtcbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5hbGVydFRocmVzaG9sZHMubWVtb3J5VXNhZ2UpLnRvQmUoODUpO1xuICAgICAgZXhwZWN0KGNvbmZpZy5zdG9yYWdlLm1heERhdGFQb2ludHMpLnRvQmUoMTAwMDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgUmVzb3VyY2VNb25pdG9yIHdpdGggY3VzdG9tIGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBjdXN0b21Db25maWc6IFBhcnRpYWw8UmVzb3VyY2VNb25pdG9yaW5nQ29uZmlnPiA9IHtcbiAgICAgICAgbW9uaXRvcmluZzoge1xuICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgIGludGVydmFsTXM6IDYwMDAwLFxuICAgICAgICAgIHJldGVudGlvbkRheXM6IDcsXG4gICAgICAgICAgYWxlcnRUaHJlc2hvbGRzOiB7XG4gICAgICAgICAgICBjcHVVc2FnZTogNzAsXG4gICAgICAgICAgICBtZW1vcnlVc2FnZTogODAsXG4gICAgICAgICAgICBkaXNrVXNhZ2U6IDg1LFxuICAgICAgICAgICAgZXhlY3V0aW9uVGltZTogNjAwMDAwLFxuICAgICAgICAgICAgZXJyb3JSYXRlOiA1LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHN0b3JhZ2U6IHtcbiAgICAgICAgICBpbk1lbW9yeTogdHJ1ZSxcbiAgICAgICAgICBwZXJzaXN0VG9EaXNrOiBmYWxzZSxcbiAgICAgICAgICBtYXhEYXRhUG9pbnRzOiA1MDAwLFxuICAgICAgICAgIGNvbXByZXNzaW9uRW5hYmxlZDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKGN1c3RvbUNvbmZpZyk7XG4gICAgICBjb25zdCBjb25maWcgPSByZXNvdXJjZU1vbml0b3IuZ2V0Q29uZmlnKCk7XG5cbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5lbmFibGVkKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5pbnRlcnZhbE1zKS50b0JlKDYwMDAwKTtcbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5hbGVydFRocmVzaG9sZHMuY3B1VXNhZ2UpLnRvQmUoNzApO1xuICAgICAgZXhwZWN0KGNvbmZpZy5tb25pdG9yaW5nLmFsZXJ0VGhyZXNob2xkcy5tZW1vcnlVc2FnZSkudG9CZSg4MCk7XG4gICAgICBleHBlY3QoY29uZmlnLnN0b3JhZ2UubWF4RGF0YVBvaW50cykudG9CZSg1MDAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ01vbml0b3JpbmcgTGlmZWN5Y2xlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVzb3VyY2VNb25pdG9yID0gbmV3IFJlc291cmNlTW9uaXRvcigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzdGFydCBtb25pdG9yaW5nIHdoZW4gZW5hYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc291cmNlTW9uaXRvci5zdGFydE1vbml0b3JpbmcoKTtcblxuICAgICAgZXhwZWN0KG1vY2tTZXRJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LmFueShGdW5jdGlvbiksIDMwMDAwKTtcbiAgICAgIGV4cGVjdChtb2NrQ29uc29sZUxvZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgICdSZXNvdXJjZSBtb25pdG9yaW5nIHN0YXJ0ZWQgd2l0aCAzMDAwMG1zIGludGVydmFsJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHN0YXJ0IG1vbml0b3Jpbmcgd2hlbiBkaXNhYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIHJlc291cmNlTW9uaXRvciA9IG5ldyBSZXNvdXJjZU1vbml0b3Ioe1xuICAgICAgICBtb25pdG9yaW5nOiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgaW50ZXJ2YWxNczogMzAwMDAsXG4gICAgICAgICAgcmV0ZW50aW9uRGF5czogNyxcbiAgICAgICAgICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICAgICAgICAgIGNwdVVzYWdlOiA4MCxcbiAgICAgICAgICAgIG1lbW9yeVVzYWdlOiA4NSxcbiAgICAgICAgICAgIGRpc2tVc2FnZTogOTAsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lOiAzMDAwMDAsXG4gICAgICAgICAgICBlcnJvclJhdGU6IDEwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgcmVzb3VyY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpO1xuXG4gICAgICBleHBlY3QobW9ja1NldEludGVydmFsKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tDb25zb2xlTG9nKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBzdG9wIG1vbml0b3JpbmcnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG4gICAgICByZXNvdXJjZU1vbml0b3Iuc3RvcE1vbml0b3JpbmcoKTtcblxuICAgICAgZXhwZWN0KG1vY2tDbGVhckludGVydmFsKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgICBleHBlY3QobW9ja0NvbnNvbGVMb2cpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdSZXNvdXJjZSBtb25pdG9yaW5nIHN0b3BwZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgZXhpc3RpbmcgaW50ZXJ2YWwgYmVmb3JlIHN0YXJ0aW5nIG5ldyBvbmUnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7IC8vIFN0YXJ0IGFnYWluXG5cbiAgICAgIGV4cGVjdChtb2NrQ2xlYXJJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tTZXRJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnU3lzdGVtIFJlc291cmNlIFVzYWdlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVzb3VyY2VNb25pdG9yID0gbmV3IFJlc291cmNlTW9uaXRvcigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjb2xsZWN0IHN5c3RlbSByZXNvdXJjZSB1c2FnZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN5c3RlbVVzYWdlID0gYXdhaXQgcmVzb3VyY2VNb25pdG9yLmdldFN5c3RlbVJlc291cmNlVXNhZ2UoKTtcblxuICAgICAgZXhwZWN0KHN5c3RlbVVzYWdlKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgY3B1OiB7XG4gICAgICAgICAgdG90YWxVc2FnZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICAgIHByb2Nlc3NVc2FnZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICAgIGxvYWRBdmVyYWdlOiBbMS41LCAyLjAsIDIuNV0sXG4gICAgICAgICAgY29yZUNvdW50OiA0LFxuICAgICAgICB9LFxuICAgICAgICBtZW1vcnk6IHtcbiAgICAgICAgICB0b3RhbE1lbW9yeTogODU4OTkzNDU5MixcbiAgICAgICAgICBmcmVlTWVtb3J5OiA0Mjk0OTY3Mjk2LFxuICAgICAgICAgIHVzZWRNZW1vcnk6IDQyOTQ5NjcyOTYsXG4gICAgICAgICAgcHJvY2Vzc01lbW9yeToge1xuICAgICAgICAgICAgaGVhcFVzZWQ6IDY3MTA4ODY0LFxuICAgICAgICAgICAgaGVhcFRvdGFsOiAxMzQyMTc3MjgsXG4gICAgICAgICAgICBleHRlcm5hbDogMTY3NzcyMTYsXG4gICAgICAgICAgICByc3M6IDIwMTMyNjU5MixcbiAgICAgICAgICB9LFxuICAgICAgICAgIHV0aWxpemF0aW9uOiA1MCxcbiAgICAgICAgfSxcbiAgICAgICAgZGlzazoge1xuICAgICAgICAgIHRvdGFsU3BhY2U6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgICBmcmVlU3BhY2U6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgICB1c2VkU3BhY2U6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgICB1dGlsaXphdGlvbjogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICB9LFxuICAgICAgICBuZXR3b3JrOiB7XG4gICAgICAgICAgYnl0ZXNSZWNlaXZlZDogMCxcbiAgICAgICAgICBieXRlc1NlbnQ6IDAsXG4gICAgICAgICAgcGFja2V0c1JlY2VpdmVkOiAwLFxuICAgICAgICAgIHBhY2tldHNTZW50OiAwLFxuICAgICAgICB9LFxuICAgICAgICB1cHRpbWU6IGV4cGVjdC5hbnkoTnVtYmVyKSxcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2FsY3VsYXRlIG1lbW9yeSB1dGlsaXphdGlvbiBjb3JyZWN0bHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBzeXN0ZW1Vc2FnZSA9IGF3YWl0IHJlc291cmNlTW9uaXRvci5nZXRTeXN0ZW1SZXNvdXJjZVVzYWdlKCk7XG5cbiAgICAgIGNvbnN0IGV4cGVjdGVkVXRpbGl6YXRpb24gPSAoKDg1ODk5MzQ1OTIgLSA0Mjk0OTY3Mjk2KSAvIDg1ODk5MzQ1OTIpICogMTAwO1xuICAgICAgZXhwZWN0KHN5c3RlbVVzYWdlLm1lbW9yeS51dGlsaXphdGlvbikudG9CZShleHBlY3RlZFV0aWxpemF0aW9uKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGRpc2sgdXNhZ2UgZXJyb3JzIGdyYWNlZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG4gICAgICBmcy5zdGF0Lm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignQWNjZXNzIGRlbmllZCcpKTtcblxuICAgICAgY29uc3Qgc3lzdGVtVXNhZ2UgPSBhd2FpdCByZXNvdXJjZU1vbml0b3IuZ2V0U3lzdGVtUmVzb3VyY2VVc2FnZSgpO1xuXG4gICAgICBleHBlY3Qoc3lzdGVtVXNhZ2UuZGlzaykudG9FcXVhbCh7XG4gICAgICAgIHRvdGFsU3BhY2U6IDAsXG4gICAgICAgIGZyZWVTcGFjZTogMCxcbiAgICAgICAgdXNlZFNwYWNlOiAwLFxuICAgICAgICB1dGlsaXphdGlvbjogMCxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnV29ya2Zsb3cgUmVzb3VyY2UgVXNhZ2UnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCB3b3JrZmxvdyByZXNvdXJjZSB1c2FnZSB3aXRoIG5vIGV4ZWN1dGlvbiBoaXN0b3J5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgd29ya2Zsb3dVc2FnZSA9IGF3YWl0IHJlc291cmNlTW9uaXRvci5nZXRXb3JrZmxvd1Jlc291cmNlVXNhZ2UoXG4gICAgICAgICd3b3JrZmxvdy0xJyxcbiAgICAgICAgJ1Rlc3QgV29ya2Zsb3cnLFxuICAgICAgICB0cnVlXG4gICAgICApO1xuXG4gICAgICBleHBlY3Qod29ya2Zsb3dVc2FnZSkudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIHdvcmtmbG93SWQ6ICd3b3JrZmxvdy0xJyxcbiAgICAgICAgd29ya2Zsb3dOYW1lOiAnVGVzdCBXb3JrZmxvdycsXG4gICAgICAgIGlzQWN0aXZlOiB0cnVlLFxuICAgICAgICBleGVjdXRpb25Db3VudDogMCxcbiAgICAgICAgcmVzb3VyY2VNZXRyaWNzOiB7XG4gICAgICAgICAgYXZlcmFnZUV4ZWN1dGlvblRpbWU6IDAsXG4gICAgICAgICAgbGFzdEV4ZWN1dGlvblRpbWU6IDAsXG4gICAgICAgICAgdG90YWxFeGVjdXRpb25UaW1lOiAwLFxuICAgICAgICAgIG1lbW9yeVVzYWdlOiB7XG4gICAgICAgICAgICBhdmVyYWdlOiA1MDAwMDAwMCxcbiAgICAgICAgICAgIHBlYWs6IDEwMDAwMDAwMCxcbiAgICAgICAgICAgIGN1cnJlbnQ6IDc1MDAwMDAwLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3B1VXNhZ2U6IHtcbiAgICAgICAgICAgIGF2ZXJhZ2U6IDE1LFxuICAgICAgICAgICAgcGVhazogODAsXG4gICAgICAgICAgICBjdXJyZW50OiAyNSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBleGVjdXRpb25TdGF0czoge1xuICAgICAgICAgIHN1Y2Nlc3NmdWxSdW5zOiAwLFxuICAgICAgICAgIGZhaWxlZFJ1bnM6IDAsXG4gICAgICAgICAgdG90YWxSdW5zOiAwLFxuICAgICAgICAgIHN1Y2Nlc3NSYXRlOiAxMDAsXG4gICAgICAgICAgYXZlcmFnZVJ1bnNQZXJIb3VyOiAwLFxuICAgICAgICB9LFxuICAgICAgICBub2RlUGVyZm9ybWFuY2U6IFtdLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGNhbGN1bGF0ZSB3b3JrZmxvdyByZXNvdXJjZSB1c2FnZSB3aXRoIGV4ZWN1dGlvbiBoaXN0b3J5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gUmVjb3JkIHNvbWUgZXhlY3V0aW9uc1xuICAgICAgcmVzb3VyY2VNb25pdG9yLnJlY29yZFdvcmtmbG93RXhlY3V0aW9uKCd3b3JrZmxvdy0xJywgNTAwMCwgdHJ1ZSk7XG4gICAgICByZXNvdXJjZU1vbml0b3IucmVjb3JkV29ya2Zsb3dFeGVjdXRpb24oJ3dvcmtmbG93LTEnLCAzMDAwLCB0cnVlKTtcbiAgICAgIHJlc291cmNlTW9uaXRvci5yZWNvcmRXb3JrZmxvd0V4ZWN1dGlvbignd29ya2Zsb3ctMScsIDcwMDAsIGZhbHNlKTtcblxuICAgICAgY29uc3Qgd29ya2Zsb3dVc2FnZSA9IGF3YWl0IHJlc291cmNlTW9uaXRvci5nZXRXb3JrZmxvd1Jlc291cmNlVXNhZ2UoXG4gICAgICAgICd3b3JrZmxvdy0xJyxcbiAgICAgICAgJ1Rlc3QgV29ya2Zsb3cnLFxuICAgICAgICBmYWxzZVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KHdvcmtmbG93VXNhZ2UuZXhlY3V0aW9uQ291bnQpLnRvQmUoMyk7XG4gICAgICBleHBlY3Qod29ya2Zsb3dVc2FnZS5yZXNvdXJjZU1ldHJpY3MuYXZlcmFnZUV4ZWN1dGlvblRpbWUpLnRvQmUoNTAwMCk7XG4gICAgICBleHBlY3Qod29ya2Zsb3dVc2FnZS5yZXNvdXJjZU1ldHJpY3MudG90YWxFeGVjdXRpb25UaW1lKS50b0JlKDE1MDAwKTtcbiAgICAgIGV4cGVjdCh3b3JrZmxvd1VzYWdlLmV4ZWN1dGlvblN0YXRzLnN1Y2Nlc3NmdWxSdW5zKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KHdvcmtmbG93VXNhZ2UuZXhlY3V0aW9uU3RhdHMuZmFpbGVkUnVucykudG9CZSgxKTtcbiAgICAgIGV4cGVjdCh3b3JrZmxvd1VzYWdlLmV4ZWN1dGlvblN0YXRzLnN1Y2Nlc3NSYXRlKS50b0JlKDY2LjY2NjY2NjY2NjY2NjY2KTtcbiAgICAgIGV4cGVjdCh3b3JrZmxvd1VzYWdlLnJlc291cmNlTWV0cmljcy5tZW1vcnlVc2FnZS5jdXJyZW50KS50b0JlKDApOyAvLyBJbmFjdGl2ZSB3b3JrZmxvd1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnSW5zdGFuY2UgSGVhbHRoIE1ldHJpY3MnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGdldCBpbnN0YW5jZSBoZWFsdGggbWV0cmljcyB3aXRoIGhlYWx0aHkgc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgaGVhbHRoTWV0cmljcyA9IGF3YWl0IHJlc291cmNlTW9uaXRvci5nZXRJbnN0YW5jZUhlYWx0aE1ldHJpY3MoKTtcblxuICAgICAgZXhwZWN0KGhlYWx0aE1ldHJpY3MpLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgICBvdmVyYWxsOiB7XG4gICAgICAgICAgc3RhdHVzOiBleHBlY3Quc3RyaW5nTWF0Y2hpbmcoL14oaGVhbHRoeXx3YXJuaW5nfGRlZ3JhZGVkfGNyaXRpY2FsKSQvKSxcbiAgICAgICAgICBzY29yZTogZXhwZWN0LmFueShOdW1iZXIpLFxuICAgICAgICAgIGlzc3VlczogZXhwZWN0LmFueShBcnJheSksXG4gICAgICAgICAgcmVjb21tZW5kYXRpb25zOiBleHBlY3QuYW55KEFycmF5KSxcbiAgICAgICAgfSxcbiAgICAgICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgICAgICByZXNwb25zZVRpbWU6IDE1MCxcbiAgICAgICAgICB0aHJvdWdocHV0OiAxMCxcbiAgICAgICAgICBlcnJvclJhdGU6IDIsXG4gICAgICAgICAgYXZhaWxhYmlsaXR5VXB0aW1lOiA5OS41LFxuICAgICAgICB9LFxuICAgICAgICByZXNvdXJjZXM6IHtcbiAgICAgICAgICBtZW1vcnlQcmVzc3VyZTogZmFsc2UsIC8vIDUwJSB1dGlsaXphdGlvbiA8IDg1JVxuICAgICAgICAgIGNwdVRocm90dGxpbmc6IGV4cGVjdC5hbnkoQm9vbGVhbiksXG4gICAgICAgICAgZGlza1NwYWNlV2FybmluZzogZXhwZWN0LmFueShCb29sZWFuKSxcbiAgICAgICAgICBuZXR3b3JrTGF0ZW5jeTogNTAsXG4gICAgICAgIH0sXG4gICAgICAgIGRlcGVuZGVuY2llczogZXhwZWN0LmFycmF5Q29udGFpbmluZyhbXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgbmFtZTogJ0RhdGFiYXNlJyxcbiAgICAgICAgICAgIHR5cGU6ICdkYXRhYmFzZScsXG4gICAgICAgICAgICBzdGF0dXM6ICdvbmxpbmUnLFxuICAgICAgICAgICAgcmVzcG9uc2VUaW1lOiAyNSxcbiAgICAgICAgICAgIGVycm9yQ291bnQ6IDAsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgICAgbmFtZTogJ0ZpbGUgU3lzdGVtJyxcbiAgICAgICAgICAgIHR5cGU6ICdmaWxlX3N5c3RlbScsXG4gICAgICAgICAgICBzdGF0dXM6ICdvbmxpbmUnLFxuICAgICAgICAgICAgcmVzcG9uc2VUaW1lOiAxMCxcbiAgICAgICAgICAgIGVycm9yQ291bnQ6IDAsXG4gICAgICAgICAgfSksXG4gICAgICAgIF0pLFxuICAgICAgICBhbGVydHM6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChoZWFsdGhNZXRyaWNzLm92ZXJhbGwuc2NvcmUpLnRvQmVHcmVhdGVyVGhhbk9yRXF1YWwoMCk7XG4gICAgICBleHBlY3QoaGVhbHRoTWV0cmljcy5vdmVyYWxsLnNjb3JlKS50b0JlTGVzc1RoYW5PckVxdWFsKDEwMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGRldGVjdCBoaWdoIG1lbW9yeSB1c2FnZSBpc3N1ZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGhpZ2ggbWVtb3J5IHVzYWdlXG4gICAgICBjb25zdCBvcyA9IHJlcXVpcmUoJ29zJyk7XG4gICAgICBvcy50b3RhbG1lbS5tb2NrUmV0dXJuVmFsdWUoMTAwMDAwMDAwMCk7IC8vIDFHQiB0b3RhbFxuICAgICAgb3MuZnJlZW1lbS5tb2NrUmV0dXJuVmFsdWUoMTAwMDAwMDAwKTsgLy8gMTAwTUIgZnJlZSAoOTAlIHVzZWQpXG5cbiAgICAgIGNvbnN0IGhlYWx0aE1ldHJpY3MgPSBhd2FpdCByZXNvdXJjZU1vbml0b3IuZ2V0SW5zdGFuY2VIZWFsdGhNZXRyaWNzKCk7XG5cbiAgICAgIGV4cGVjdChoZWFsdGhNZXRyaWNzLm92ZXJhbGwuaXNzdWVzKS50b0NvbnRhaW4oJ0hpZ2ggbWVtb3J5IHVzYWdlIGRldGVjdGVkJyk7XG4gICAgICBleHBlY3QoaGVhbHRoTWV0cmljcy5vdmVyYWxsLnJlY29tbWVuZGF0aW9ucykudG9Db250YWluKFxuICAgICAgICAnTW9uaXRvciBtZW1vcnktaW50ZW5zaXZlIHdvcmtmbG93cyBhbmQgY29uc2lkZXIgaW5jcmVhc2luZyBhdmFpbGFibGUgbWVtb3J5J1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChoZWFsdGhNZXRyaWNzLnJlc291cmNlcy5tZW1vcnlQcmVzc3VyZSkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0FsZXJ0IE1hbmFnZW1lbnQnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKHtcbiAgICAgICAgbW9uaXRvcmluZzoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgaW50ZXJ2YWxNczogMzAwMDAsXG4gICAgICAgICAgcmV0ZW50aW9uRGF5czogNyxcbiAgICAgICAgICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICAgICAgICAgIGNwdVVzYWdlOiA3MCxcbiAgICAgICAgICAgIG1lbW9yeVVzYWdlOiA4MCxcbiAgICAgICAgICAgIGRpc2tVc2FnZTogOTAsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lOiAzMDAwMDAsXG4gICAgICAgICAgICBlcnJvclJhdGU6IDEwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIENQVSB1c2FnZSBhbGVydCB3aGVuIHRocmVzaG9sZCBleGNlZWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgaGlnaCBDUFUgdXNhZ2VcbiAgICAgIGNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbiAgICAgIG9zLmxvYWRhdmcubW9ja1JldHVyblZhbHVlKFszLjAsIDMuNSwgNC4wXSk7IC8vIEhpZ2ggbG9hZCBhdmVyYWdlXG4gICAgICBvcy5jcHVzLm1vY2tSZXR1cm5WYWx1ZShuZXcgQXJyYXkoNCkuZmlsbCh7fSkpO1xuXG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG5cbiAgICAgIC8vIFdhaXQgYSBiaXQgZm9yIHRoZSBtb25pdG9yaW5nIHRvIGNvbGxlY3QgbWV0cmljc1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG5cbiAgICAgIGNvbnN0IGFsZXJ0cyA9IHJlc291cmNlTW9uaXRvci5nZXRBbGVydHMoKTtcbiAgICAgIGNvbnN0IGNwdUFsZXJ0ID0gYWxlcnRzLmZpbmQoYWxlcnQgPT4gYWxlcnQudGl0bGUgPT09ICdIaWdoIENQVSBVc2FnZScpO1xuXG4gICAgICBpZiAoY3B1QWxlcnQpIHtcbiAgICAgICAgZXhwZWN0KGNwdUFsZXJ0LnR5cGUpLnRvQmUoJ3Jlc291cmNlX3RocmVzaG9sZCcpO1xuICAgICAgICBleHBlY3QoY3B1QWxlcnQuc2V2ZXJpdHkpLnRvTWF0Y2goL14oaGlnaHxjcml0aWNhbCkkLyk7XG4gICAgICAgIGV4cGVjdChjcHVBbGVydC5kZXNjcmlwdGlvbikudG9Db250YWluKCdDUFUgdXNhZ2UnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY3JlYXRlIG1lbW9yeSB1c2FnZSBhbGVydCB3aGVuIHRocmVzaG9sZCBleGNlZWRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgaGlnaCBtZW1vcnkgdXNhZ2VcbiAgICAgIGNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbiAgICAgIG9zLnRvdGFsbWVtLm1vY2tSZXR1cm5WYWx1ZSgxMDAwMDAwMDAwKTsgLy8gMUdCIHRvdGFsXG4gICAgICBvcy5mcmVlbWVtLm1vY2tSZXR1cm5WYWx1ZSgxNTAwMDAwMDApOyAvLyAxNTBNQiBmcmVlICg4NSUgdXNlZClcblxuICAgICAgYXdhaXQgcmVzb3VyY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG5cbiAgICAgIGNvbnN0IGFsZXJ0cyA9IHJlc291cmNlTW9uaXRvci5nZXRBbGVydHMoKTtcbiAgICAgIGNvbnN0IG1lbW9yeUFsZXJ0ID0gYWxlcnRzLmZpbmQoYWxlcnQgPT4gYWxlcnQudGl0bGUgPT09ICdIaWdoIE1lbW9yeSBVc2FnZScpO1xuXG4gICAgICBpZiAobWVtb3J5QWxlcnQpIHtcbiAgICAgICAgZXhwZWN0KG1lbW9yeUFsZXJ0LnR5cGUpLnRvQmUoJ3Jlc291cmNlX3RocmVzaG9sZCcpO1xuICAgICAgICBleHBlY3QobWVtb3J5QWxlcnQuc2V2ZXJpdHkpLnRvTWF0Y2goL14oaGlnaHxjcml0aWNhbCkkLyk7XG4gICAgICAgIGV4cGVjdChtZW1vcnlBbGVydC5kZXNjcmlwdGlvbikudG9Db250YWluKCdNZW1vcnkgdXNhZ2UnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVzb2x2ZSBhbGVydHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDcmVhdGUgYSBtb2NrIGFsZXJ0IGZpcnN0XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcblxuICAgICAgY29uc3QgYWxlcnRzID0gcmVzb3VyY2VNb25pdG9yLmdldEFsZXJ0cygpO1xuICAgICAgaWYgKGFsZXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGFsZXJ0SWQgPSBhbGVydHNbMF0uaWQ7XG4gICAgICAgIGNvbnN0IHJlc29sdmVkID0gcmVzb3VyY2VNb25pdG9yLnJlc29sdmVBbGVydChhbGVydElkKTtcblxuICAgICAgICBleHBlY3QocmVzb2x2ZWQpLnRvQmUodHJ1ZSk7XG5cbiAgICAgICAgY29uc3QgcmVzb2x2ZWRBbGVydHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0QWxlcnRzKHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICAgIGV4cGVjdChyZXNvbHZlZEFsZXJ0cy5zb21lKGFsZXJ0ID0+IGFsZXJ0LmlkID09PSBhbGVydElkKSkudG9CZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmlsdGVyIGFsZXJ0cyBieSBzZXZlcml0eScsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc291cmNlTW9uaXRvci5zdGFydE1vbml0b3JpbmcoKTtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMCkpO1xuXG4gICAgICBjb25zdCBoaWdoU2V2ZXJpdHlBbGVydHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0QWxlcnRzKCdoaWdoJyk7XG4gICAgICBjb25zdCBjcml0aWNhbFNldmVyaXR5QWxlcnRzID0gcmVzb3VyY2VNb25pdG9yLmdldEFsZXJ0cygnY3JpdGljYWwnKTtcblxuICAgICAgaGlnaFNldmVyaXR5QWxlcnRzLmZvckVhY2goYWxlcnQgPT4ge1xuICAgICAgICBleHBlY3QoYWxlcnQuc2V2ZXJpdHkpLnRvQmUoJ2hpZ2gnKTtcbiAgICAgIH0pO1xuXG4gICAgICBjcml0aWNhbFNldmVyaXR5QWxlcnRzLmZvckVhY2goYWxlcnQgPT4ge1xuICAgICAgICBleHBlY3QoYWxlcnQuc2V2ZXJpdHkpLnRvQmUoJ2NyaXRpY2FsJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0RhdGEgUG9pbnQgTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHJlc291cmNlTW9uaXRvciA9IG5ldyBSZXNvdXJjZU1vbml0b3Ioe1xuICAgICAgICBzdG9yYWdlOiB7XG4gICAgICAgICAgaW5NZW1vcnk6IHRydWUsXG4gICAgICAgICAgcGVyc2lzdFRvRGlzazogZmFsc2UsXG4gICAgICAgICAgbWF4RGF0YVBvaW50czogNSxcbiAgICAgICAgICBjb21wcmVzc2lvbkVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGFkZCBhbmQgcmV0cmlldmUgZGF0YSBwb2ludHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG5cbiAgICAgIC8vIFdhaXQgZm9yIG1vbml0b3JpbmcgdG8gY29sbGVjdCBkYXRhXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwKSk7XG5cbiAgICAgIGNvbnN0IGRhdGFQb2ludHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0RGF0YVBvaW50cygpO1xuXG4gICAgICAvLyBJZiBubyBkYXRhIHBvaW50cyB3ZXJlIGNvbGxlY3RlZCBkdWUgdG8gdGltaW5nLCBtYW51YWxseSB0cmlnZ2VyIGNvbGxlY3Rpb25cbiAgICAgIGlmIChkYXRhUG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBNYW51YWxseSB0cmlnZ2VyIGEgY29sbGVjdGlvbiB0byBlbnN1cmUgd2UgaGF2ZSBkYXRhIHBvaW50cyBmb3IgdGVzdGluZ1xuICAgICAgICBhd2FpdCAocmVzb3VyY2VNb25pdG9yIGFzIGFueSkuY29sbGVjdE1ldHJpY3MoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlZERhdGFQb2ludHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0RGF0YVBvaW50cygpO1xuICAgICAgZXhwZWN0KHVwZGF0ZWREYXRhUG9pbnRzLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KHVwZGF0ZWREYXRhUG9pbnRzWzBdKS50b01hdGNoT2JqZWN0KHtcbiAgICAgICAgdGltZXN0YW1wOiBleHBlY3QuYW55KFN0cmluZyksXG4gICAgICAgIG1ldHJpY1R5cGU6IGV4cGVjdC5hbnkoU3RyaW5nKSxcbiAgICAgICAgZGF0YTogZXhwZWN0LmFueShPYmplY3QpLFxuICAgICAgICB0YWdzOiBleHBlY3QuYW55KE9iamVjdCksXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbGltaXQgZGF0YSBwb2ludHMgdG8gbWF4RGF0YVBvaW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFNpbXVsYXRlIG11bHRpcGxlIG1vbml0b3JpbmcgaW50ZXJ2YWxzXG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG5cbiAgICAgIC8vIFdhaXQgZm9yIG11bHRpcGxlIGNvbGxlY3Rpb24gY3ljbGVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG4gICAgICB9XG5cbiAgICAgIHJlc291cmNlTW9uaXRvci5zdG9wTW9uaXRvcmluZygpO1xuXG4gICAgICBjb25zdCBkYXRhUG9pbnRzID0gcmVzb3VyY2VNb25pdG9yLmdldERhdGFQb2ludHMoKTtcbiAgICAgIGV4cGVjdChkYXRhUG9pbnRzLmxlbmd0aCkudG9CZUxlc3NUaGFuT3JFcXVhbCg1KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZmlsdGVyIGRhdGEgcG9pbnRzIGJ5IG1ldHJpYyB0eXBlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzb3VyY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG5cbiAgICAgIGNvbnN0IHN5c3RlbURhdGFQb2ludHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0RGF0YVBvaW50cygnc3lzdGVtJyk7XG4gICAgICBzeXN0ZW1EYXRhUG9pbnRzLmZvckVhY2goZHAgPT4ge1xuICAgICAgICBleHBlY3QoZHAubWV0cmljVHlwZSkudG9CZSgnc3lzdGVtJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbGltaXQgZGF0YSBwb2ludHMgYnkgY291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCByZXNvdXJjZU1vbml0b3Iuc3RhcnRNb25pdG9yaW5nKCk7XG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTApKTtcblxuICAgICAgY29uc3QgbGltaXRlZERhdGFQb2ludHMgPSByZXNvdXJjZU1vbml0b3IuZ2V0RGF0YVBvaW50cyh1bmRlZmluZWQsIDIpO1xuICAgICAgZXhwZWN0KGxpbWl0ZWREYXRhUG9pbnRzLmxlbmd0aCkudG9CZUxlc3NUaGFuT3JFcXVhbCgyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NvbmZpZ3VyYXRpb24gTWFuYWdlbWVudCcsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIHJlc291cmNlTW9uaXRvciA9IG5ldyBSZXNvdXJjZU1vbml0b3IoKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgdXBkYXRlIGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICBjb25zdCBuZXdDb25maWc6IFBhcnRpYWw8UmVzb3VyY2VNb25pdG9yaW5nQ29uZmlnPiA9IHtcbiAgICAgICAgbW9uaXRvcmluZzoge1xuICAgICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgaW50ZXJ2YWxNczogNDUwMDAsXG4gICAgICAgICAgcmV0ZW50aW9uRGF5czogNyxcbiAgICAgICAgICBhbGVydFRocmVzaG9sZHM6IHtcbiAgICAgICAgICAgIGNwdVVzYWdlOiA3NSxcbiAgICAgICAgICAgIG1lbW9yeVVzYWdlOiA4NSxcbiAgICAgICAgICAgIGRpc2tVc2FnZTogOTAsXG4gICAgICAgICAgICBleGVjdXRpb25UaW1lOiAzMDAwMDAsXG4gICAgICAgICAgICBlcnJvclJhdGU6IDEwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICByZXNvdXJjZU1vbml0b3IudXBkYXRlQ29uZmlnKG5ld0NvbmZpZyk7XG4gICAgICBjb25zdCBjb25maWcgPSByZXNvdXJjZU1vbml0b3IuZ2V0Q29uZmlnKCk7XG5cbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5pbnRlcnZhbE1zKS50b0JlKDQ1MDAwKTtcbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5hbGVydFRocmVzaG9sZHMuY3B1VXNhZ2UpLnRvQmUoNzUpO1xuICAgICAgLy8gRW5zdXJlIG90aGVyIHZhbHVlcyBhcmUgcHJlc2VydmVkXG4gICAgICBleHBlY3QoY29uZmlnLm1vbml0b3JpbmcuZW5hYmxlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChjb25maWcubW9uaXRvcmluZy5hbGVydFRocmVzaG9sZHMubWVtb3J5VXNhZ2UpLnRvQmUoODUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXN0YXJ0IG1vbml0b3JpbmcgYWZ0ZXIgY29uZmlnIHVwZGF0ZScsIGFzeW5jICgpID0+IHtcbiAgICAgIGF3YWl0IHJlc291cmNlTW9uaXRvci5zdGFydE1vbml0b3JpbmcoKTtcblxuICAgICAgcmVzb3VyY2VNb25pdG9yLnVwZGF0ZUNvbmZpZyh7XG4gICAgICAgIG1vbml0b3Jpbmc6IHtcbiAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgIGludGVydmFsTXM6IDYwMDAwLFxuICAgICAgICAgIHJldGVudGlvbkRheXM6IDcsXG4gICAgICAgICAgYWxlcnRUaHJlc2hvbGRzOiB7XG4gICAgICAgICAgICBjcHVVc2FnZTogODAsXG4gICAgICAgICAgICBtZW1vcnlVc2FnZTogODUsXG4gICAgICAgICAgICBkaXNrVXNhZ2U6IDkwLFxuICAgICAgICAgICAgZXhlY3V0aW9uVGltZTogMzAwMDAwLFxuICAgICAgICAgICAgZXJyb3JSYXRlOiAxMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ2xlYXJJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KG1vY2tTZXRJbnRlcnZhbCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZXhwZWN0LmFueShGdW5jdGlvbiksIDYwMDAwKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1dvcmtmbG93IEV4ZWN1dGlvbiBSZWNvcmRpbmcnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IgPSBuZXcgUmVzb3VyY2VNb25pdG9yKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlY29yZCB3b3JrZmxvdyBleGVjdXRpb24nLCAoKSA9PiB7XG4gICAgICByZXNvdXJjZU1vbml0b3IucmVjb3JkV29ya2Zsb3dFeGVjdXRpb24oJ3dvcmtmbG93LTEnLCA1MDAwLCB0cnVlKTtcbiAgICAgIHJlc291cmNlTW9uaXRvci5yZWNvcmRXb3JrZmxvd0V4ZWN1dGlvbignd29ya2Zsb3ctMScsIDMwMDAsIGZhbHNlKTtcblxuICAgICAgLy8gVmVyaWZ5IHRocm91Z2ggZ2V0V29ya2Zsb3dSZXNvdXJjZVVzYWdlXG4gICAgICByZXR1cm4gcmVzb3VyY2VNb25pdG9yLmdldFdvcmtmbG93UmVzb3VyY2VVc2FnZSgnd29ya2Zsb3ctMScsICdUZXN0JywgZmFsc2UpLnRoZW4odXNhZ2UgPT4ge1xuICAgICAgICBleHBlY3QodXNhZ2UuZXhlY3V0aW9uQ291bnQpLnRvQmUoMik7XG4gICAgICAgIGV4cGVjdCh1c2FnZS5leGVjdXRpb25TdGF0cy5zdWNjZXNzZnVsUnVucykudG9CZSgxKTtcbiAgICAgICAgZXhwZWN0KHVzYWdlLmV4ZWN1dGlvblN0YXRzLmZhaWxlZFJ1bnMpLnRvQmUoMSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbGltaXQgZXhlY3V0aW9uIGhpc3RvcnkgcGVyIHdvcmtmbG93JywgKCkgPT4ge1xuICAgICAgLy8gUmVjb3JkIG1vcmUgdGhhbiAxMDAwIGV4ZWN1dGlvbnNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTIwMDsgaSsrKSB7XG4gICAgICAgIHJlc291cmNlTW9uaXRvci5yZWNvcmRXb3JrZmxvd0V4ZWN1dGlvbignd29ya2Zsb3ctMScsIDEwMDAsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzb3VyY2VNb25pdG9yLmdldFdvcmtmbG93UmVzb3VyY2VVc2FnZSgnd29ya2Zsb3ctMScsICdUZXN0JywgZmFsc2UpLnRoZW4odXNhZ2UgPT4ge1xuICAgICAgICBleHBlY3QodXNhZ2UuZXhlY3V0aW9uQ291bnQpLnRvQmUoMTAwMCk7IC8vIFNob3VsZCBiZSBjYXBwZWQgYXQgMTAwMFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdNZXRyaWNzIEFnZ3JlZ2F0aW9uJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVzb3VyY2VNb25pdG9yID0gbmV3IFJlc291cmNlTW9uaXRvcigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBnZXQgbW9uaXRvcmluZyBtZXRyaWNzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgcmVzb3VyY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XG5cbiAgICAgIGNvbnN0IG1ldHJpY3MgPSByZXNvdXJjZU1vbml0b3IuZ2V0TWV0cmljcygpO1xuXG4gICAgICBleHBlY3QobWV0cmljcykudG9NYXRjaE9iamVjdCh7XG4gICAgICAgIHN5c3RlbTogZXhwZWN0LmFueShPYmplY3QpLFxuICAgICAgICB3b3JrZmxvd3M6IGV4cGVjdC5hbnkoQXJyYXkpLFxuICAgICAgICBoZWFsdGg6IGV4cGVjdC5hbnkoT2JqZWN0KSxcbiAgICAgICAgYWxlcnRzOiBleHBlY3QuYW55KEFycmF5KSxcbiAgICAgICAgZGF0YVBvaW50czogZXhwZWN0LmFueShBcnJheSksXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0Vycm9yIEhhbmRsaW5nJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgcmVzb3VyY2VNb25pdG9yID0gbmV3IFJlc291cmNlTW9uaXRvcigpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXJyb3JzIGR1cmluZyBtZXRyaWMgY29sbGVjdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIE1vY2sgb3MudG90YWxtZW0gdG8gdGhyb3cgYW4gZXJyb3JcbiAgICAgIGNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbiAgICAgIG9zLnRvdGFsbWVtLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignU3lzdGVtIGVycm9yJyk7XG4gICAgICB9KTtcblxuICAgICAgYXdhaXQgcmVzb3VyY2VNb25pdG9yLnN0YXJ0TW9uaXRvcmluZygpO1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDUwKSk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ29uc29sZUVycm9yKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnRXJyb3IgY29sbGVjdGluZyBtZXRyaWNzOicsIGV4cGVjdC5hbnkoRXJyb3IpKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==