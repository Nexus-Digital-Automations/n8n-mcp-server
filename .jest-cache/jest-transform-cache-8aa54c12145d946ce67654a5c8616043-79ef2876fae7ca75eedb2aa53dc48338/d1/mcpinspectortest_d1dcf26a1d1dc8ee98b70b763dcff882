84121db1f7431897a506a4ce9bd5d6eb
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const child_process_1 = require("child_process");
const timers_1 = require("timers");
const mockN8nServer_1 = require("../mocks/mockN8nServer");
const path = __importStar(require("path"));
// Use process.cwd() + relative path for Jest compatibility
const testDir = path.join(process.cwd(), 'tests', 'e2e');
/**
 * MCP Inspector integration tests
 * Tests the FastMCP server using MCP Inspector tool for protocol validation
 */
(0, globals_1.describe)('MCP Inspector Integration Tests', () => {
    let mockN8nServer;
    let mcpServerProcess;
    const mockServerPort = 3002;
    const testTimeout = 15000;
    (0, globals_1.beforeAll)(async () => {
        // Start mock n8n server for inspector tests
        mockN8nServer = new mockN8nServer_1.MockN8nServer(mockServerPort);
        await mockN8nServer.start();
        console.log('Mock n8n server started for MCP Inspector tests');
    }, 20000);
    (0, globals_1.afterAll)(async () => {
        // Clean up mock server
        if (mockN8nServer) {
            await mockN8nServer.stop();
        }
        // Clean up MCP server process
        if (mcpServerProcess) {
            mcpServerProcess.kill('SIGTERM');
        }
        console.log('MCP Inspector test cleanup completed');
    }, 10000);
    (0, globals_1.describe)('Protocol Compliance via Inspector', () => {
        (0, globals_1.it)('should pass MCP Inspector protocol validation', async () => {
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            const runInspectorValidation = () => {
                return new Promise((resolve, reject) => {
                    // Start the MCP server
                    mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                        env: {
                            ...process.env,
                            N8N_BASE_URL: mockN8nServer.getUrl(),
                            N8N_API_KEY: 'test-api-key',
                            N8N_MCP_TRANSPORT: 'stdio',
                        },
                        stdio: ['pipe', 'pipe', 'pipe'],
                    });
                    let outputBuffer = '';
                    let errorBuffer = '';
                    let inspectorTimeout = undefined;
                    const cleanup = () => {
                        if (inspectorTimeout) {
                            (0, timers_1.clearTimeout)(inspectorTimeout);
                        }
                    };
                    mcpServerProcess.stdout?.on('data', data => {
                        outputBuffer += data.toString();
                    });
                    mcpServerProcess.stderr?.on('data', data => {
                        errorBuffer += data.toString();
                    });
                    mcpServerProcess.on('error', error => {
                        cleanup();
                        reject(new Error(`Failed to start MCP server: ${error.message}`));
                    });
                    // Simulate MCP Inspector protocol validation sequence
                    const performInspectorChecks = async () => {
                        try {
                            // Wait for server to be ready
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 2000);
                            });
                            // 1. Test initialization protocol
                            const initRequest = {
                                jsonrpc: '2.0',
                                id: 1,
                                method: 'initialize',
                                params: {
                                    protocolVersion: '2024-11-05',
                                    capabilities: {
                                        tools: {},
                                        resources: {},
                                    },
                                    clientInfo: {
                                        name: 'mcp-inspector',
                                        version: '1.0.0',
                                    },
                                },
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                            // Wait for init response
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            // 2. Test tools/list protocol
                            const toolsListRequest = {
                                jsonrpc: '2.0',
                                id: 2,
                                method: 'tools/list',
                                params: {},
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(toolsListRequest) + '\n');
                            // Wait for tools response
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            // 3. Test a tool call
                            const toolCallRequest = {
                                jsonrpc: '2.0',
                                id: 3,
                                method: 'tools/call',
                                params: {
                                    name: 'init-n8n',
                                    arguments: {
                                        baseUrl: mockN8nServer.getUrl(),
                                        apiKey: 'test-api-key',
                                    },
                                },
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(toolCallRequest) + '\n');
                            // Wait for tool call response
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 2000);
                            });
                            cleanup();
                            resolve(outputBuffer);
                        }
                        catch (error) {
                            cleanup();
                            reject(error);
                        }
                    };
                    // Set timeout for inspector validation
                    inspectorTimeout = (0, timers_1.setTimeout)(() => {
                        cleanup();
                        reject(new Error('MCP Inspector validation timeout'));
                    }, testTimeout - 2000);
                    // Start inspector checks after brief delay
                    (0, timers_1.setTimeout)(performInspectorChecks, 500);
                });
            };
            const inspectorOutput = await runInspectorValidation();
            // Verify inspector found valid MCP protocol responses
            (0, globals_1.expect)(inspectorOutput).toBeDefined();
            (0, globals_1.expect)(inspectorOutput.length).toBeGreaterThan(0);
            // Check for JSON-RPC responses in output
            const lines = inspectorOutput.split('\n').filter(line => line.trim());
            const jsonResponses = lines.filter(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.jsonrpc === '2.0' && (parsed.result || parsed.error);
                }
                catch {
                    return false;
                }
            });
            (0, globals_1.expect)(jsonResponses.length).toBeGreaterThan(0);
            // Verify initialization response
            const initResponse = jsonResponses.find(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.id === 1 && parsed.result?.capabilities;
                }
                catch {
                    return false;
                }
            });
            (0, globals_1.expect)(initResponse).toBeDefined();
            // Verify tools list response
            const toolsResponse = jsonResponses.find(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.id === 2 && parsed.result?.tools;
                }
                catch {
                    return false;
                }
            });
            (0, globals_1.expect)(toolsResponse).toBeDefined();
        }, testTimeout);
        (0, globals_1.it)('should handle MCP Inspector error scenarios', async () => {
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            const testErrorHandling = () => {
                return new Promise((resolve, reject) => {
                    mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                        env: {
                            ...process.env,
                            N8N_BASE_URL: mockN8nServer.getUrl(),
                            N8N_API_KEY: 'test-api-key',
                            N8N_MCP_TRANSPORT: 'stdio',
                        },
                        stdio: ['pipe', 'pipe', 'pipe'],
                    });
                    let outputBuffer = '';
                    let errorTestTimeout = undefined;
                    const cleanup = () => {
                        if (errorTestTimeout) {
                            (0, timers_1.clearTimeout)(errorTestTimeout);
                        }
                    };
                    mcpServerProcess.stdout?.on('data', data => {
                        outputBuffer += data.toString();
                    });
                    mcpServerProcess.on('error', error => {
                        cleanup();
                        reject(error);
                    });
                    const testErrorScenarios = async () => {
                        try {
                            // Wait for server startup
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 2000);
                            });
                            // Initialize first
                            const initRequest = {
                                jsonrpc: '2.0',
                                id: 1,
                                method: 'initialize',
                                params: {
                                    protocolVersion: '2024-11-05',
                                    capabilities: { tools: {} },
                                    clientInfo: { name: 'mcp-inspector', version: '1.0.0' },
                                },
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            // Test invalid method
                            const invalidMethodRequest = {
                                jsonrpc: '2.0',
                                id: 2,
                                method: 'invalid/method',
                                params: {},
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(invalidMethodRequest) + '\n');
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            // Test invalid tool call
                            const invalidToolRequest = {
                                jsonrpc: '2.0',
                                id: 3,
                                method: 'tools/call',
                                params: {
                                    name: 'nonexistent-tool',
                                    arguments: {},
                                },
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(invalidToolRequest) + '\n');
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            cleanup();
                            resolve(outputBuffer);
                        }
                        catch (error) {
                            cleanup();
                            reject(error);
                        }
                    };
                    errorTestTimeout = (0, timers_1.setTimeout)(() => {
                        cleanup();
                        reject(new Error('Error handling test timeout'));
                    }, testTimeout - 2000);
                    (0, timers_1.setTimeout)(testErrorScenarios, 500);
                });
            };
            const errorOutput = await testErrorHandling();
            // Verify error responses are properly formatted
            const lines = errorOutput.split('\n').filter(line => line.trim());
            const errorResponses = lines.filter(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.jsonrpc === '2.0' && parsed.error;
                }
                catch {
                    return false;
                }
            });
            (0, globals_1.expect)(errorResponses.length).toBeGreaterThan(0);
            // Verify error responses have proper structure
            errorResponses.forEach(responseStr => {
                const response = JSON.parse(responseStr);
                (0, globals_1.expect)(response.jsonrpc).toBe('2.0');
                (0, globals_1.expect)(response.error).toBeDefined();
                (0, globals_1.expect)(response.error.code).toBeDefined();
                (0, globals_1.expect)(response.error.message).toBeDefined();
                (0, globals_1.expect)(typeof response.error.code).toBe('number');
                (0, globals_1.expect)(typeof response.error.message).toBe('string');
            });
        }, testTimeout);
    });
    (0, globals_1.describe)('Performance and Reliability', () => {
        (0, globals_1.it)('should handle rapid sequential requests', async () => {
            const serverPath = path.join(testDir, '../../build/index-fastmcp.js');
            const testRapidRequests = () => {
                return new Promise((resolve, reject) => {
                    mcpServerProcess = (0, child_process_1.spawn)('node', [serverPath], {
                        env: {
                            ...process.env,
                            N8N_BASE_URL: mockN8nServer.getUrl(),
                            N8N_API_KEY: 'test-api-key',
                            N8N_MCP_TRANSPORT: 'stdio',
                        },
                        stdio: ['pipe', 'pipe', 'pipe'],
                    });
                    let outputBuffer = '';
                    let rapidTestTimeout = undefined;
                    const cleanup = () => {
                        if (rapidTestTimeout) {
                            (0, timers_1.clearTimeout)(rapidTestTimeout);
                        }
                    };
                    mcpServerProcess.stdout?.on('data', data => {
                        outputBuffer += data.toString();
                    });
                    mcpServerProcess.on('error', error => {
                        cleanup();
                        reject(error);
                    });
                    const performRapidRequests = async () => {
                        try {
                            // Initialize server
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 2000);
                            });
                            const initRequest = {
                                jsonrpc: '2.0',
                                id: 1,
                                method: 'initialize',
                                params: {
                                    protocolVersion: '2024-11-05',
                                    capabilities: { tools: {} },
                                    clientInfo: { name: 'mcp-inspector', version: '1.0.0' },
                                },
                            };
                            mcpServerProcess.stdin?.write(JSON.stringify(initRequest) + '\n');
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 1000);
                            });
                            // Send rapid sequential tool list requests
                            for (let i = 2; i <= 11; i++) {
                                const toolsListRequest = {
                                    jsonrpc: '2.0',
                                    id: i,
                                    method: 'tools/list',
                                    params: {},
                                };
                                mcpServerProcess.stdin?.write(JSON.stringify(toolsListRequest) + '\n');
                            }
                            // Wait for all responses
                            await new Promise(resolve => {
                                (0, timers_1.setTimeout)(resolve, 3000);
                            });
                            cleanup();
                            resolve(outputBuffer);
                        }
                        catch (error) {
                            cleanup();
                            reject(error);
                        }
                    };
                    rapidTestTimeout = (0, timers_1.setTimeout)(() => {
                        cleanup();
                        reject(new Error('Rapid requests test timeout'));
                    }, testTimeout - 1000);
                    (0, timers_1.setTimeout)(performRapidRequests, 500);
                });
            };
            const rapidOutput = await testRapidRequests();
            // Count successful responses
            const lines = rapidOutput.split('\n').filter(line => line.trim());
            const responses = lines.filter(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.jsonrpc === '2.0' && (parsed.result || parsed.error);
                }
                catch {
                    return false;
                }
            });
            // Should handle at least the init + 10 tools/list requests
            (0, globals_1.expect)(responses.length).toBeGreaterThanOrEqual(11);
            // Verify all tool list responses have proper structure
            const toolsResponses = responses.filter(line => {
                try {
                    const parsed = JSON.parse(line);
                    return parsed.result?.tools && Array.isArray(parsed.result.tools);
                }
                catch {
                    return false;
                }
            });
            (0, globals_1.expect)(toolsResponses.length).toBeGreaterThanOrEqual(10);
        }, testTimeout);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,