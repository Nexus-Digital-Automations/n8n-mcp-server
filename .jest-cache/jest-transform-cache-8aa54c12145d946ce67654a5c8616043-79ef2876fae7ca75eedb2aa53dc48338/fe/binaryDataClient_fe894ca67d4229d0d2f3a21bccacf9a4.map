{"version":3,"names":["node_fetch_1","cov_6v997b7f3","s","__importDefault","require","BinaryDataClient","client","baseUrl","apiKey","constructor","f","replace","makeRequest","endpoint","options","b","url","headers","response","default","ok","errorText","text","Error","status","contentType","get","includes","json","startsWith","buffer","error","message","makeFormDataRequest","formData","method","body","uploadBinaryData","request","Buffer","from","data","FormData","Promise","resolve","then","__importStar","form","append","filename","fileName","mimeType","workflowId","executionId","nodeId","downloadBinaryData","queryParams","URLSearchParams","query","toString","encodeURIComponent","fileId","getExecutionBinaryData","outputIndex","itemIndex","propertyName","uploadWorkflowBinaryData","deleteBinaryData","listBinaryData","limit","offset","getBinaryDataMetadata","uploadLargeFile","chunkSize","totalSize","length","transferId","Date","now","Math","random","substr","progress","totalBytes","transferredBytes","percentComplete","startedAt","toISOString","onProgress","result","completedAt","exports"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/binaryDataClient.ts"],"sourcesContent":["import fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\nimport {\n  BinaryData,\n  N8nBinaryDataResponse,\n  FileUploadRequest,\n  FileDownloadRequest,\n  StaticFileInfo,\n  FileTransferProgress,\n} from '../types/fileTypes.js';\n\nexport class BinaryDataClient {\n  constructor(\n    private client: N8nClient,\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      'Content-Type': 'application/json',\n      ...((options.headers as Record<string, string>) || {}),\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      // Handle different response types\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else if (\n        contentType.includes('application/octet-stream') ||\n        contentType.startsWith('image/') ||\n        contentType.startsWith('video/')\n      ) {\n        // Return buffer for binary data\n        return (await response.buffer()) as unknown as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Request failed: ${error.message}`);\n      }\n      throw new Error('Request failed with unknown error');\n    }\n  }\n\n  private async makeFormDataRequest<T>(\n    endpoint: string,\n    formData: any,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      ...((options.headers as Record<string, string>) || {}),\n      // Note: Don't set Content-Type for FormData - let fetch set it with boundary\n    };\n\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        ...options,\n        headers,\n        body: formData,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Form data request failed: ${error.message}`);\n      }\n      throw new Error('Form data request failed with unknown error');\n    }\n  }\n\n  /**\n   * Upload binary data to n8n\n   */\n  async uploadBinaryData(request: FileUploadRequest): Promise<StaticFileInfo> {\n    // Convert base64 to Buffer\n    const buffer = Buffer.from(request.data, 'base64');\n\n    // Create FormData for multipart upload\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n\n    form.append('file', buffer, {\n      filename: request.fileName,\n      contentType: request.mimeType,\n    });\n\n    if (request.workflowId) form.append('workflowId', request.workflowId);\n    if (request.executionId) form.append('executionId', request.executionId);\n    if (request.nodeId) form.append('nodeId', request.nodeId);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n  }\n\n  /**\n   * Download binary data from n8n\n   */\n  async downloadBinaryData(request: FileDownloadRequest): Promise<N8nBinaryDataResponse> {\n    const queryParams = new URLSearchParams();\n    if (request.workflowId) queryParams.append('workflowId', request.workflowId);\n    if (request.executionId) queryParams.append('executionId', request.executionId);\n    if (request.nodeId) queryParams.append('nodeId', request.nodeId);\n\n    const query = queryParams.toString();\n    const endpoint = `/binary-data/${encodeURIComponent(request.fileId)}${query ? `?${query}` : ''}`;\n\n    return this.makeRequest<N8nBinaryDataResponse>(endpoint);\n  }\n\n  /**\n   * Get binary data from execution output\n   */\n  async getExecutionBinaryData(\n    executionId: string,\n    nodeId: string,\n    outputIndex: number = 0,\n    itemIndex: number = 0,\n    propertyName: string = 'data'\n  ): Promise<Buffer> {\n    const endpoint = `/executions/${encodeURIComponent(executionId)}/binary-data`;\n    const queryParams = new URLSearchParams({\n      nodeId,\n      outputIndex: outputIndex.toString(),\n      itemIndex: itemIndex.toString(),\n      propertyName,\n    });\n\n    return this.makeRequest<Buffer>(`${endpoint}?${queryParams.toString()}`);\n  }\n\n  /**\n   * Upload binary data for workflow input\n   */\n  async uploadWorkflowBinaryData(\n    workflowId: string,\n    nodeId: string,\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    propertyName: string = 'data'\n  ): Promise<StaticFileInfo> {\n    const FormData = (await import('form-data')).default;\n    const form = new FormData();\n\n    form.append('file', data, {\n      filename: fileName,\n      contentType: mimeType,\n    });\n    form.append('workflowId', workflowId);\n    form.append('nodeId', nodeId);\n    form.append('propertyName', propertyName);\n\n    return this.makeFormDataRequest<StaticFileInfo>('/workflows/binary-data/upload', form);\n  }\n\n  /**\n   * Delete binary data\n   */\n  async deleteBinaryData(fileId: string): Promise<{ success: boolean; message: string }> {\n    return this.makeRequest<{ success: boolean; message: string }>(\n      `/binary-data/${encodeURIComponent(fileId)}`,\n      {\n        method: 'DELETE',\n      }\n    );\n  }\n\n  /**\n   * List binary data files\n   */\n  async listBinaryData(\n    options: {\n      workflowId?: string;\n      executionId?: string;\n      nodeId?: string;\n      limit?: number;\n      offset?: number;\n    } = {}\n  ): Promise<StaticFileInfo[]> {\n    const queryParams = new URLSearchParams();\n\n    if (options.workflowId) queryParams.append('workflowId', options.workflowId);\n    if (options.executionId) queryParams.append('executionId', options.executionId);\n    if (options.nodeId) queryParams.append('nodeId', options.nodeId);\n    if (options.limit) queryParams.append('limit', options.limit.toString());\n    if (options.offset) queryParams.append('offset', options.offset.toString());\n\n    const query = queryParams.toString();\n    const endpoint = `/binary-data${query ? `?${query}` : ''}`;\n\n    return this.makeRequest<StaticFileInfo[]>(endpoint);\n  }\n\n  /**\n   * Get binary data metadata\n   */\n  async getBinaryDataMetadata(fileId: string): Promise<StaticFileInfo> {\n    return this.makeRequest<StaticFileInfo>(`/binary-data/${encodeURIComponent(fileId)}/metadata`);\n  }\n\n  /**\n   * Stream large file upload with progress tracking\n   */\n  async uploadLargeFile(\n    data: Buffer,\n    fileName: string,\n    mimeType: string,\n    options: {\n      workflowId?: string;\n      executionId?: string;\n      nodeId?: string;\n      chunkSize?: number;\n      onProgress?: (progress: FileTransferProgress) => void;\n    } = {}\n  ): Promise<StaticFileInfo> {\n    const chunkSize = options.chunkSize || 1024 * 1024; // 1MB chunks\n    const totalSize = data.length;\n    const transferId = `upload_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n    // Initialize progress tracking\n    const progress: FileTransferProgress = {\n      transferId,\n      fileName,\n      totalBytes: totalSize,\n      transferredBytes: 0,\n      percentComplete: 0,\n      status: 'pending',\n      startedAt: new Date().toISOString(),\n    };\n\n    try {\n      progress.status = 'in-progress';\n      options.onProgress?.(progress);\n\n      // For now, upload as single chunk (can be enhanced for true chunked upload)\n      const FormData = (await import('form-data')).default;\n      const form = new FormData();\n\n      form.append('file', data, {\n        filename: fileName,\n        contentType: mimeType,\n      });\n\n      if (options.workflowId) form.append('workflowId', options.workflowId);\n      if (options.executionId) form.append('executionId', options.executionId);\n      if (options.nodeId) form.append('nodeId', options.nodeId);\n      form.append('transferId', transferId);\n\n      const result = await this.makeFormDataRequest<StaticFileInfo>('/binary-data/upload', form);\n\n      progress.status = 'completed';\n      progress.transferredBytes = totalSize;\n      progress.percentComplete = 100;\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n\n      return result;\n    } catch (error) {\n      progress.status = 'failed';\n      progress.error = error instanceof Error ? error.message : 'Unknown error';\n      progress.completedAt = new Date().toISOString();\n      options.onProgress?.(progress);\n      throw error;\n    }\n  }\n}\n"],"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","ignoreList":[]}