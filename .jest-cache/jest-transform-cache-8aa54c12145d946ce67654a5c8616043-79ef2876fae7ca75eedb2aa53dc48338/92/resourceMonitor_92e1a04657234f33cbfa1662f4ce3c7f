423c678a68c82725c9b7451d7999a71a
/* istanbul ignore next */
function cov_1dcgrbr8i() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts";
  var hash = "453dfd753d619a3c38542896973d1290a828542b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 13
        },
        end: {
          line: 4,
          column: 31
        }
      },
      "1": {
        start: {
          line: 7,
          column: 17
        },
        end: {
          line: 7,
          column: 19
        }
      },
      "2": {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 15
        }
      },
      "3": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 9,
          column: 29
        }
      },
      "4": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 36
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 40,
          column: 10
        }
      },
      "7": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "8": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 44,
          column: 51
        }
      },
      "9": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "10": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 19
        }
      },
      "11": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 56,
          column: 46
        }
      },
      "12": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "13": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 44
        }
      },
      "14": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "15": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 104
        }
      },
      "16": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "17": {
        start: {
          line: 61,
          column: 12
        },
        end: {
          line: 61,
          column: 51
        }
      },
      "18": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 43
        }
      },
      "19": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "20": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 50
        }
      },
      "21": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 77,
          column: 9
        }
      },
      "22": {
        start: {
          line: 69,
          column: 34
        },
        end: {
          line: 69,
          column: 69
        }
      },
      "23": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 75,
          column: 15
        }
      },
      "24": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 62
        }
      },
      "25": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 36
        }
      },
      "26": {
        start: {
          line: 82,
          column: 25
        },
        end: {
          line: 82,
          column: 49
        }
      },
      "27": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 48
        }
      },
      "28": {
        start: {
          line: 84,
          column: 25
        },
        end: {
          line: 84,
          column: 50
        }
      },
      "29": {
        start: {
          line: 85,
          column: 28
        },
        end: {
          line: 85,
          column: 56
        }
      },
      "30": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 104,
          column: 10
        }
      },
      "31": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "32": {
        start: {
          line: 108,
          column: 31
        },
        end: {
          line: 108,
          column: 49
        }
      },
      "33": {
        start: {
          line: 109,
          column: 30
        },
        end: {
          line: 109,
          column: 46
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 124,
          column: 20
        }
      },
      "35": {
        start: {
          line: 111,
          column: 37
        },
        end: {
          line: 111,
          column: 65
        }
      },
      "36": {
        start: {
          line: 112,
          column: 36
        },
        end: {
          line: 112,
          column: 61
        }
      },
      "37": {
        start: {
          line: 113,
          column: 36
        },
        end: {
          line: 113,
          column: 84
        }
      },
      "38": {
        start: {
          line: 114,
          column: 37
        },
        end: {
          line: 114,
          column: 76
        }
      },
      "39": {
        start: {
          line: 115,
          column: 37
        },
        end: {
          line: 115,
          column: 71
        }
      },
      "40": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 117,
          column: 47
        }
      },
      "41": {
        start: {
          line: 118,
          column: 34
        },
        end: {
          line: 118,
          column: 50
        }
      },
      "42": {
        start: {
          line: 119,
          column: 35
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "43": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 123,
          column: 19
        }
      },
      "44": {
        start: {
          line: 128,
          column: 25
        },
        end: {
          line: 128,
          column: 46
        }
      },
      "45": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 134,
          column: 10
        }
      },
      "46": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 158,
          column: 9
        }
      },
      "47": {
        start: {
          line: 138,
          column: 26
        },
        end: {
          line: 138,
          column: 51
        }
      },
      "48": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 141,
          column: 44
        }
      },
      "49": {
        start: {
          line: 142,
          column: 30
        },
        end: {
          line: 142,
          column: 42
        }
      },
      "50": {
        start: {
          line: 143,
          column: 30
        },
        end: {
          line: 143,
          column: 52
        }
      },
      "51": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 149,
          column: 14
        }
      },
      "52": {
        start: {
          line: 152,
          column: 12
        },
        end: {
          line: 157,
          column: 14
        }
      },
      "53": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 168,
          column: 10
        }
      },
      "54": {
        start: {
          line: 171,
          column: 33
        },
        end: {
          line: 171,
          column: 76
        }
      },
      "55": {
        start: {
          line: 172,
          column: 33
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "56": {
        start: {
          line: 172,
          column: 65
        },
        end: {
          line: 172,
          column: 114
        }
      },
      "57": {
        start: {
          line: 174,
          column: 31
        },
        end: {
          line: 174,
          column: 83
        }
      },
      "58": {
        start: {
          line: 174,
          column: 63
        },
        end: {
          line: 174,
          column: 75
        }
      },
      "59": {
        start: {
          line: 175,
          column: 26
        },
        end: {
          line: 175,
          column: 49
        }
      },
      "60": {
        start: {
          line: 176,
          column: 35
        },
        end: {
          line: 176,
          column: 97
        }
      },
      "61": {
        start: {
          line: 176,
          column: 74
        },
        end: {
          line: 176,
          column: 93
        }
      },
      "62": {
        start: {
          line: 177,
          column: 37
        },
        end: {
          line: 177,
          column: 87
        }
      },
      "63": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 209,
          column: 10
        }
      },
      "64": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 213,
          column: 21
        }
      },
      "65": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 21
        }
      },
      "66": {
        start: {
          line: 214,
          column: 30
        },
        end: {
          line: 214,
          column: 87
        }
      },
      "67": {
        start: {
          line: 215,
          column: 8
        },
        end: {
          line: 215,
          column: 73
        }
      },
      "68": {
        start: {
          line: 218,
          column: 28
        },
        end: {
          line: 218,
          column: 63
        }
      },
      "69": {
        start: {
          line: 219,
          column: 23
        },
        end: {
          line: 219,
          column: 25
        }
      },
      "70": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 34
        }
      },
      "71": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 225,
          column: 9
        }
      },
      "72": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 51
        }
      },
      "73": {
        start: {
          line: 224,
          column: 12
        },
        end: {
          line: 224,
          column: 99
        }
      },
      "74": {
        start: {
          line: 226,
          column: 8
        },
        end: {
          line: 229,
          column: 9
        }
      },
      "75": {
        start: {
          line: 227,
          column: 12
        },
        end: {
          line: 227,
          column: 54
        }
      },
      "76": {
        start: {
          line: 228,
          column: 12
        },
        end: {
          line: 228,
          column: 112
        }
      },
      "77": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 233,
          column: 9
        }
      },
      "78": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 50
        }
      },
      "79": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 73
        }
      },
      "80": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 234,
          column: 81
        }
      },
      "81": {
        start: {
          line: 235,
          column: 23
        },
        end: {
          line: 235,
          column: 77
        }
      },
      "82": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 280,
          column: 10
        }
      },
      "83": {
        start: {
          line: 272,
          column: 33
        },
        end: {
          line: 272,
          column: 50
        }
      },
      "84": {
        start: {
          line: 273,
          column: 31
        },
        end: {
          line: 279,
          column: 13
        }
      },
      "85": {
        start: {
          line: 283,
          column: 20
        },
        end: {
          line: 283,
          column: 23
        }
      },
      "86": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 68
        }
      },
      "87": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 72
        }
      },
      "88": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 70
        }
      },
      "89": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 33
        }
      },
      "90": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 61
        }
      },
      "91": {
        start: {
          line: 293,
          column: 8
        },
        end: {
          line: 294,
          column: 29
        }
      },
      "92": {
        start: {
          line: 294,
          column: 12
        },
        end: {
          line: 294,
          column: 29
        }
      },
      "93": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 296,
          column: 29
        }
      },
      "94": {
        start: {
          line: 296,
          column: 12
        },
        end: {
          line: 296,
          column: 29
        }
      },
      "95": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 298,
          column: 30
        }
      },
      "96": {
        start: {
          line: 298,
          column: 12
        },
        end: {
          line: 298,
          column: 30
        }
      },
      "97": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 299,
          column: 26
        }
      },
      "98": {
        start: {
          line: 302,
          column: 27
        },
        end: {
          line: 302,
          column: 65
        }
      },
      "99": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 314,
          column: 9
        }
      },
      "100": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 313,
          column: 15
        }
      },
      "101": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "102": {
        start: {
          line: 316,
          column: 12
        },
        end: {
          line: 325,
          column: 15
        }
      },
      "103": {
        start: {
          line: 329,
          column: 22
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "104": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 339,
          column: 32
        }
      },
      "105": {
        start: {
          line: 341,
          column: 8
        },
        end: {
          line: 341,
          column: 116
        }
      },
      "106": {
        start: {
          line: 341,
          column: 46
        },
        end: {
          line: 341,
          column: 114
        }
      },
      "107": {
        start: {
          line: 344,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "108": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 54
        }
      },
      "109": {
        start: {
          line: 347,
          column: 24
        },
        end: {
          line: 347,
          column: 61
        }
      },
      "110": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 352,
          column: 11
        }
      },
      "111": {
        start: {
          line: 354,
          column: 8
        },
        end: {
          line: 356,
          column: 9
        }
      },
      "112": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 53
        }
      },
      "113": {
        start: {
          line: 359,
          column: 8
        },
        end: {
          line: 359,
          column: 40
        }
      },
      "114": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "115": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 98
        }
      },
      "116": {
        start: {
          line: 366,
          column: 27
        },
        end: {
          line: 366,
          column: 98
        }
      },
      "117": {
        start: {
          line: 367,
          column: 8
        },
        end: {
          line: 367,
          column: 102
        }
      },
      "118": {
        start: {
          line: 367,
          column: 55
        },
        end: {
          line: 367,
          column: 100
        }
      },
      "119": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 377,
          column: 10
        }
      },
      "120": {
        start: {
          line: 371,
          column: 49
        },
        end: {
          line: 371,
          column: 75
        }
      },
      "121": {
        start: {
          line: 380,
          column: 21
        },
        end: {
          line: 380,
          column: 36
        }
      },
      "122": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 383,
          column: 9
        }
      },
      "123": {
        start: {
          line: 382,
          column: 12
        },
        end: {
          line: 382,
          column: 71
        }
      },
      "124": {
        start: {
          line: 382,
          column: 41
        },
        end: {
          line: 382,
          column: 69
        }
      },
      "125": {
        start: {
          line: 384,
          column: 8
        },
        end: {
          line: 386,
          column: 9
        }
      },
      "126": {
        start: {
          line: 385,
          column: 12
        },
        end: {
          line: 385,
          column: 42
        }
      },
      "127": {
        start: {
          line: 387,
          column: 8
        },
        end: {
          line: 387,
          column: 22
        }
      },
      "128": {
        start: {
          line: 390,
          column: 21
        },
        end: {
          line: 390,
          column: 32
        }
      },
      "129": {
        start: {
          line: 391,
          column: 8
        },
        end: {
          line: 393,
          column: 9
        }
      },
      "130": {
        start: {
          line: 392,
          column: 12
        },
        end: {
          line: 392,
          column: 73
        }
      },
      "131": {
        start: {
          line: 392,
          column: 44
        },
        end: {
          line: 392,
          column: 71
        }
      },
      "132": {
        start: {
          line: 394,
          column: 8
        },
        end: {
          line: 396,
          column: 9
        }
      },
      "133": {
        start: {
          line: 395,
          column: 12
        },
        end: {
          line: 395,
          column: 84
        }
      },
      "134": {
        start: {
          line: 395,
          column: 44
        },
        end: {
          line: 395,
          column: 82
        }
      },
      "135": {
        start: {
          line: 397,
          column: 8
        },
        end: {
          line: 397,
          column: 108
        }
      },
      "136": {
        start: {
          line: 397,
          column: 37
        },
        end: {
          line: 397,
          column: 106
        }
      },
      "137": {
        start: {
          line: 400,
          column: 22
        },
        end: {
          line: 400,
          column: 61
        }
      },
      "138": {
        start: {
          line: 400,
          column: 44
        },
        end: {
          line: 400,
          column: 60
        }
      },
      "139": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 404,
          column: 9
        }
      },
      "140": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 56
        }
      },
      "141": {
        start: {
          line: 403,
          column: 12
        },
        end: {
          line: 403,
          column: 24
        }
      },
      "142": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 405,
          column: 21
        }
      },
      "143": {
        start: {
          line: 408,
          column: 8
        },
        end: {
          line: 408,
          column: 55
        }
      },
      "144": {
        start: {
          line: 409,
          column: 8
        },
        end: {
          line: 412,
          column: 9
        }
      },
      "145": {
        start: {
          line: 410,
          column: 12
        },
        end: {
          line: 410,
          column: 34
        }
      },
      "146": {
        start: {
          line: 411,
          column: 12
        },
        end: {
          line: 411,
          column: 35
        }
      },
      "147": {
        start: {
          line: 415,
          column: 8
        },
        end: {
          line: 415,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 24
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        loc: {
          start: {
            line: 42,
            column: 28
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 42
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 49,
            column: 46
          },
          end: {
            line: 49,
            column: 47
          }
        },
        loc: {
          start: {
            line: 49,
            column: 58
          },
          end: {
            line: 56,
            column: 9
          }
        },
        line: 49
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 59,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        loc: {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 59
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 27
          },
          end: {
            line: 80,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 81,
            column: 4
          },
          end: {
            line: 81,
            column: 5
          }
        },
        loc: {
          start: {
            line: 81,
            column: 35
          },
          end: {
            line: 105,
            column: 5
          }
        },
        line: 81
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        loc: {
          start: {
            line: 106,
            column: 24
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 106
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 107,
            column: 27
          },
          end: {
            line: 107,
            column: 28
          }
        },
        loc: {
          start: {
            line: 107,
            column: 38
          },
          end: {
            line: 125,
            column: 9
          }
        },
        line: 107
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 110,
            column: 23
          },
          end: {
            line: 110,
            column: 24
          }
        },
        loc: {
          start: {
            line: 110,
            column: 29
          },
          end: {
            line: 124,
            column: 13
          }
        },
        line: 110
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 21
          },
          end: {
            line: 135,
            column: 5
          }
        },
        line: 127
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        loc: {
          start: {
            line: 136,
            column: 25
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 28
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 160
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 71
          },
          end: {
            line: 210,
            column: 5
          }
        },
        line: 170
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 172,
            column: 57
          },
          end: {
            line: 172,
            column: 58
          }
        },
        loc: {
          start: {
            line: 172,
            column: 65
          },
          end: {
            line: 172,
            column: 114
          }
        },
        line: 172
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 174,
            column: 55
          },
          end: {
            line: 174,
            column: 56
          }
        },
        loc: {
          start: {
            line: 174,
            column: 63
          },
          end: {
            line: 174,
            column: 75
          }
        },
        line: 174
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 176,
            column: 59
          },
          end: {
            line: 176,
            column: 60
          }
        },
        loc: {
          start: {
            line: 176,
            column: 74
          },
          end: {
            line: 176,
            column: 93
          }
        },
        line: 176
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 5
          }
        },
        loc: {
          start: {
            line: 211,
            column: 37
          },
          end: {
            line: 216,
            column: 5
          }
        },
        line: 211
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 217,
            column: 4
          },
          end: {
            line: 217,
            column: 5
          }
        },
        loc: {
          start: {
            line: 217,
            column: 37
          },
          end: {
            line: 281,
            column: 5
          }
        },
        line: 217
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 272,
            column: 24
          },
          end: {
            line: 272,
            column: 25
          }
        },
        loc: {
          start: {
            line: 272,
            column: 33
          },
          end: {
            line: 272,
            column: 50
          }
        },
        line: 272
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 273,
            column: 21
          },
          end: {
            line: 273,
            column: 22
          }
        },
        loc: {
          start: {
            line: 273,
            column: 31
          },
          end: {
            line: 279,
            column: 13
          }
        },
        line: 273
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 282,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        loc: {
          start: {
            line: 282,
            column: 50
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 282
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 45
          },
          end: {
            line: 300,
            column: 5
          }
        },
        line: 292
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 301,
            column: 5
          }
        },
        loc: {
          start: {
            line: 301,
            column: 47
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 301
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 328,
            column: 5
          }
        },
        loc: {
          start: {
            line: 328,
            column: 33
          },
          end: {
            line: 342,
            column: 5
          }
        },
        line: 328
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 341,
            column: 41
          },
          end: {
            line: 341,
            column: 42
          }
        },
        loc: {
          start: {
            line: 341,
            column: 46
          },
          end: {
            line: 341,
            column: 114
          }
        },
        line: 341
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 59
          },
          end: {
            line: 357,
            column: 5
          }
        },
        line: 343
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 358,
            column: 4
          },
          end: {
            line: 358,
            column: 5
          }
        },
        loc: {
          start: {
            line: 358,
            column: 28
          },
          end: {
            line: 364,
            column: 5
          }
        },
        line: 358
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 27
          },
          end: {
            line: 368,
            column: 5
          }
        },
        line: 365
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 367,
            column: 49
          },
          end: {
            line: 367,
            column: 50
          }
        },
        loc: {
          start: {
            line: 367,
            column: 55
          },
          end: {
            line: 367,
            column: 100
          }
        },
        line: 367
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 369,
            column: 4
          },
          end: {
            line: 369,
            column: 5
          }
        },
        loc: {
          start: {
            line: 369,
            column: 17
          },
          end: {
            line: 378,
            column: 5
          }
        },
        line: 369
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 371,
            column: 43
          },
          end: {
            line: 371,
            column: 44
          }
        },
        loc: {
          start: {
            line: 371,
            column: 49
          },
          end: {
            line: 371,
            column: 75
          }
        },
        line: 371
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 379,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        loc: {
          start: {
            line: 379,
            column: 37
          },
          end: {
            line: 388,
            column: 5
          }
        },
        line: 379
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 382,
            column: 35
          },
          end: {
            line: 382,
            column: 36
          }
        },
        loc: {
          start: {
            line: 382,
            column: 41
          },
          end: {
            line: 382,
            column: 69
          }
        },
        line: 382
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 389,
            column: 5
          }
        },
        loc: {
          start: {
            line: 389,
            column: 34
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 389
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 392,
            column: 35
          },
          end: {
            line: 392,
            column: 36
          }
        },
        loc: {
          start: {
            line: 392,
            column: 44
          },
          end: {
            line: 392,
            column: 71
          }
        },
        line: 392
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 395,
            column: 35
          },
          end: {
            line: 395,
            column: 36
          }
        },
        loc: {
          start: {
            line: 395,
            column: 44
          },
          end: {
            line: 395,
            column: 82
          }
        },
        line: 395
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 397,
            column: 27
          },
          end: {
            line: 397,
            column: 28
          }
        },
        loc: {
          start: {
            line: 397,
            column: 37
          },
          end: {
            line: 397,
            column: 106
          }
        },
        line: 397
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 26
          },
          end: {
            line: 406,
            column: 5
          }
        },
        line: 399
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 400,
            column: 39
          },
          end: {
            line: 400,
            column: 40
          }
        },
        loc: {
          start: {
            line: 400,
            column: 44
          },
          end: {
            line: 400,
            column: 60
          }
        },
        line: 400
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 407,
            column: 4
          },
          end: {
            line: 407,
            column: 5
          }
        },
        loc: {
          start: {
            line: 407,
            column: 28
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 407
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 16
          },
          end: {
            line: 416,
            column: 5
          }
        },
        line: 414
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 48,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      },
      "2": {
        loc: {
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 8
          },
          end: {
            line: 64,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "3": {
        loc: {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 77,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "4": {
        loc: {
          start: {
            line: 171,
            column: 33
          },
          end: {
            line: 171,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 171,
            column: 33
          },
          end: {
            line: 171,
            column: 70
          }
        }, {
          start: {
            line: 171,
            column: 74
          },
          end: {
            line: 171,
            column: 76
          }
        }],
        line: 171
      },
      "5": {
        loc: {
          start: {
            line: 177,
            column: 37
          },
          end: {
            line: 177,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 177,
            column: 53
          },
          end: {
            line: 177,
            column: 83
          }
        }, {
          start: {
            line: 177,
            column: 86
          },
          end: {
            line: 177,
            column: 87
          }
        }],
        line: 177
      },
      "6": {
        loc: {
          start: {
            line: 185,
            column: 35
          },
          end: {
            line: 185,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 65
          },
          end: {
            line: 185,
            column: 119
          }
        }, {
          start: {
            line: 185,
            column: 122
          },
          end: {
            line: 185,
            column: 123
          }
        }],
        line: 185
      },
      "7": {
        loc: {
          start: {
            line: 190,
            column: 29
          },
          end: {
            line: 190,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 40
          },
          end: {
            line: 190,
            column: 48
          }
        }, {
          start: {
            line: 190,
            column: 51
          },
          end: {
            line: 190,
            column: 52
          }
        }],
        line: 190
      },
      "8": {
        loc: {
          start: {
            line: 195,
            column: 29
          },
          end: {
            line: 195,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 40
          },
          end: {
            line: 195,
            column: 42
          }
        }, {
          start: {
            line: 195,
            column: 45
          },
          end: {
            line: 195,
            column: 46
          }
        }],
        line: 195
      },
      "9": {
        loc: {
          start: {
            line: 202,
            column: 29
          },
          end: {
            line: 202,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 45
          },
          end: {
            line: 202,
            column: 79
          }
        }, {
          start: {
            line: 202,
            column: 82
          },
          end: {
            line: 202,
            column: 85
          }
        }],
        line: 202
      },
      "10": {
        loc: {
          start: {
            line: 203,
            column: 31
          },
          end: {
            line: 205,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 204,
            column: 22
          },
          end: {
            line: 204,
            column: 101
          }
        }, {
          start: {
            line: 205,
            column: 22
          },
          end: {
            line: 205,
            column: 46
          }
        }],
        line: 203
      },
      "11": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 213,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 213,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "12": {
        loc: {
          start: {
            line: 215,
            column: 15
          },
          end: {
            line: 215,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 35
          },
          end: {
            line: 215,
            column: 68
          }
        }, {
          start: {
            line: 215,
            column: 71
          },
          end: {
            line: 215,
            column: 72
          }
        }],
        line: 215
      },
      "13": {
        loc: {
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 8
          },
          end: {
            line: 225,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "14": {
        loc: {
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 226,
            column: 8
          },
          end: {
            line: 229,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 226
      },
      "15": {
        loc: {
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 230,
            column: 8
          },
          end: {
            line: 233,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 230
      },
      "16": {
        loc: {
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 294,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 293,
            column: 8
          },
          end: {
            line: 294,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 293
      },
      "17": {
        loc: {
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 293,
            column: 12
          },
          end: {
            line: 293,
            column: 23
          }
        }, {
          start: {
            line: 293,
            column: 27
          },
          end: {
            line: 293,
            column: 43
          }
        }],
        line: 293
      },
      "18": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 296,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 296,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "19": {
        loc: {
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 295,
            column: 12
          },
          end: {
            line: 295,
            column: 23
          }
        }, {
          start: {
            line: 295,
            column: 27
          },
          end: {
            line: 295,
            column: 42
          }
        }],
        line: 295
      },
      "20": {
        loc: {
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 298,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 8
          },
          end: {
            line: 298,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "21": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 314,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "22": {
        loc: {
          start: {
            line: 306,
            column: 26
          },
          end: {
            line: 306,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 60
          },
          end: {
            line: 306,
            column: 70
          }
        }, {
          start: {
            line: 306,
            column: 73
          },
          end: {
            line: 306,
            column: 79
          }
        }],
        line: 306
      },
      "23": {
        loc: {
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 315,
            column: 8
          },
          end: {
            line: 326,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 315
      },
      "24": {
        loc: {
          start: {
            line: 318,
            column: 26
          },
          end: {
            line: 318,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 64
          },
          end: {
            line: 318,
            column: 74
          }
        }, {
          start: {
            line: 318,
            column: 77
          },
          end: {
            line: 318,
            column: 83
          }
        }],
        line: 318
      },
      "25": {
        loc: {
          start: {
            line: 331,
            column: 18
          },
          end: {
            line: 331,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 331,
            column: 18
          },
          end: {
            line: 331,
            column: 32
          }
        }, {
          start: {
            line: 331,
            column: 36
          },
          end: {
            line: 331,
            column: 56
          }
        }],
        line: 331
      },
      "26": {
        loc: {
          start: {
            line: 332,
            column: 22
          },
          end: {
            line: 332,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 22
          },
          end: {
            line: 332,
            column: 40
          }
        }, {
          start: {
            line: 332,
            column: 44
          },
          end: {
            line: 332,
            column: 52
          }
        }],
        line: 332
      },
      "27": {
        loc: {
          start: {
            line: 333,
            column: 19
          },
          end: {
            line: 333,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 333,
            column: 19
          },
          end: {
            line: 333,
            column: 34
          }
        }, {
          start: {
            line: 333,
            column: 38
          },
          end: {
            line: 333,
            column: 57
          }
        }],
        line: 333
      },
      "28": {
        loc: {
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 334,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 25
          },
          end: {
            line: 334,
            column: 46
          }
        }, {
          start: {
            line: 334,
            column: 50
          },
          end: {
            line: 334,
            column: 82
          }
        }],
        line: 334
      },
      "29": {
        loc: {
          start: {
            line: 336,
            column: 22
          },
          end: {
            line: 336,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 22
          },
          end: {
            line: 336,
            column: 40
          }
        }, {
          start: {
            line: 336,
            column: 44
          },
          end: {
            line: 336,
            column: 46
          }
        }],
        line: 336
      },
      "30": {
        loc: {
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 344,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 344
      },
      "31": {
        loc: {
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 354,
            column: 8
          },
          end: {
            line: 356,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 354
      },
      "32": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "33": {
        loc: {
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 372,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 371,
            column: 20
          },
          end: {
            line: 372,
            column: 22
          }
        }, {
          start: {
            line: 372,
            column: 26
          },
          end: {
            line: 372,
            column: 28
          }
        }],
        line: 371
      },
      "34": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 383,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 381
      },
      "35": {
        loc: {
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 8
          },
          end: {
            line: 386,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 384
      },
      "36": {
        loc: {
          start: {
            line: 391,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 391,
            column: 8
          },
          end: {
            line: 393,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 391
      },
      "37": {
        loc: {
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 8
          },
          end: {
            line: 396,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "38": {
        loc: {
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 8
          },
          end: {
            line: 404,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "39": {
        loc: {
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 401,
            column: 12
          },
          end: {
            line: 401,
            column: 17
          }
        }, {
          start: {
            line: 401,
            column: 21
          },
          end: {
            line: 401,
            column: 38
          }
        }],
        line: 401
      },
      "40": {
        loc: {
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 8
          },
          end: {
            line: 412,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts"],
      sourcesContent: ["import * as os from 'os';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  ResourceMonitoringConfig,\n  MonitoringDataPoint,\n  PerformanceAlert,\n  ResourceThresholds,\n  MonitoringMetrics,\n} from '../types/monitoringTypes.js';\n\nconst stat = promisify(fs.stat);\n\nexport class ResourceMonitor {\n  private config: ResourceMonitoringConfig;\n  private dataPoints: MonitoringDataPoint[] = [];\n  private alerts: PerformanceAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private startTime: number;\n  private executionHistory: Map<\n    string,\n    Array<{ timestamp: number; duration: number; success: boolean }>\n  > = new Map();\n\n  constructor(config?: Partial<ResourceMonitoringConfig>) {\n    this.startTime = Date.now();\n    this.config = {\n      monitoring: {\n        enabled: true,\n        intervalMs: 30000, // 30 seconds default\n        retentionDays: 7,\n        alertThresholds: {\n          cpuUsage: 80,\n          memoryUsage: 85,\n          diskUsage: 90,\n          executionTime: 300000, // 5 minutes\n          errorRate: 10,\n        },\n      },\n      collection: {\n        systemMetrics: true,\n        workflowMetrics: true,\n        nodeMetrics: true,\n        healthChecks: true,\n      },\n      storage: {\n        inMemory: true,\n        persistToDisk: false,\n        maxDataPoints: 10000,\n        compressionEnabled: false,\n      },\n      ...config,\n    };\n  }\n\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    if (!this.config.monitoring.enabled) {\n      return;\n    }\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.collectMetrics();\n      } catch (error) {\n        console.error('Error collecting metrics:', error);\n      }\n    }, this.config.monitoring.intervalMs);\n\n    console.log(`Resource monitoring started with ${this.config.monitoring.intervalMs}ms interval`);\n  }\n\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n      console.log('Resource monitoring stopped');\n    }\n  }\n\n  private async collectMetrics(): Promise<void> {\n    const timestamp = new Date().toISOString();\n\n    if (this.config.collection.systemMetrics) {\n      const systemMetrics = await this.getSystemResourceUsage();\n      this.addDataPoint({\n        timestamp,\n        metricType: 'system',\n        data: systemMetrics as unknown as Record<string, unknown>,\n        tags: { source: 'system' },\n      });\n\n      await this.checkResourceThresholds(systemMetrics);\n    }\n\n    // Clean up old data points\n    this.cleanupOldDataPoints();\n  }\n\n  async getSystemResourceUsage(): Promise<SystemResourceUsage> {\n    const cpuUsage = await this.getCPUUsage();\n    const memoryInfo = this.getMemoryUsage();\n    const diskInfo = await this.getDiskUsage();\n    const networkInfo = await this.getNetworkUsage();\n\n    return {\n      cpu: {\n        totalUsage: cpuUsage.totalUsage,\n        processUsage: cpuUsage.processUsage,\n        loadAverage: os.loadavg(),\n        coreCount: os.cpus().length,\n      },\n      memory: {\n        totalMemory: os.totalmem(),\n        freeMemory: os.freemem(),\n        usedMemory: os.totalmem() - os.freemem(),\n        processMemory: memoryInfo,\n        utilization: ((os.totalmem() - os.freemem()) / os.totalmem()) * 100,\n      },\n      disk: diskInfo,\n      network: networkInfo,\n      uptime: (Date.now() - this.startTime) / 1000,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async getCPUUsage(): Promise<{ totalUsage: number; processUsage: number }> {\n    return new Promise(resolve => {\n      const startUsage = process.cpuUsage();\n      const startTime = process.hrtime();\n\n      setTimeout(() => {\n        const currentUsage = process.cpuUsage(startUsage);\n        const currentTime = process.hrtime(startTime);\n\n        const elapsedTime = currentTime[0] * 1000000 + currentTime[1] / 1000; // microseconds\n        const totalCPUTime = currentUsage.user + currentUsage.system;\n        const processUsage = (totalCPUTime / elapsedTime) * 100;\n\n        // System CPU usage approximation based on load average\n        const loadAvg = os.loadavg()[0];\n        const coreCount = os.cpus().length;\n        const totalUsage = Math.min((loadAvg / coreCount) * 100, 100);\n\n        resolve({\n          totalUsage: Math.round(totalUsage * 100) / 100,\n          processUsage: Math.round(processUsage * 100) / 100,\n        });\n      }, 100);\n    });\n  }\n\n  private getMemoryUsage(): SystemResourceUsage['memory']['processMemory'] {\n    const memUsage = process.memoryUsage();\n    return {\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      rss: memUsage.rss,\n    };\n  }\n\n  private async getDiskUsage(): Promise<SystemResourceUsage['disk']> {\n    try {\n      const stats = await stat(process.cwd());\n\n      // This is a simplified implementation\n      // In production, you'd use platform-specific methods to get actual disk usage\n      const totalSpace = 1000000000000; // 1TB placeholder\n      const freeSpace = 500000000000; // 500GB placeholder\n      const usedSpace = totalSpace - freeSpace;\n\n      return {\n        totalSpace,\n        freeSpace,\n        usedSpace,\n        utilization: (usedSpace / totalSpace) * 100,\n      };\n    } catch (error) {\n      return {\n        totalSpace: 0,\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      };\n    }\n  }\n\n  private async getNetworkUsage(): Promise<SystemResourceUsage['network']> {\n    // Simplified network usage - in production you'd read from /proc/net/dev on Linux\n    // or use platform-specific APIs\n    return {\n      bytesReceived: 0,\n      bytesSent: 0,\n      packetsReceived: 0,\n      packetsSent: 0,\n    };\n  }\n\n  async getWorkflowResourceUsage(\n    workflowId: string,\n    workflowName: string,\n    isActive: boolean\n  ): Promise<WorkflowResourceUsage> {\n    const executionHistory = this.executionHistory.get(workflowId) || [];\n    const recentExecutions = executionHistory.filter(\n      exec => Date.now() - exec.timestamp < 24 * 60 * 60 * 1000 // Last 24 hours\n    );\n\n    const successfulRuns = recentExecutions.filter(exec => exec.success).length;\n    const totalRuns = recentExecutions.length;\n    const totalExecutionTime = recentExecutions.reduce((sum, exec) => sum + exec.duration, 0);\n    const averageExecutionTime = totalRuns > 0 ? totalExecutionTime / totalRuns : 0;\n\n    return {\n      workflowId,\n      workflowName,\n      isActive,\n      executionCount: totalRuns,\n      resourceMetrics: {\n        averageExecutionTime: Math.round(averageExecutionTime),\n        lastExecutionTime:\n          recentExecutions.length > 0 ? recentExecutions[recentExecutions.length - 1].duration : 0,\n        totalExecutionTime: Math.round(totalExecutionTime),\n        memoryUsage: {\n          average: 50000000, // 50MB placeholder\n          peak: 100000000, // 100MB placeholder\n          current: isActive ? 75000000 : 0, // 75MB placeholder\n        },\n        cpuUsage: {\n          average: 15, // 15% placeholder\n          peak: 80, // 80% placeholder\n          current: isActive ? 25 : 0, // 25% placeholder\n        },\n      },\n      executionStats: {\n        successfulRuns,\n        failedRuns: totalRuns - successfulRuns,\n        totalRuns,\n        successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 100,\n        lastExecution:\n          recentExecutions.length > 0\n            ? new Date(recentExecutions[recentExecutions.length - 1].timestamp).toISOString()\n            : new Date().toISOString(),\n        averageRunsPerHour: this.calculateRunsPerHour(recentExecutions),\n      },\n      nodePerformance: [], // Would be populated with actual node performance data\n    };\n  }\n\n  private calculateRunsPerHour(\n    executions: Array<{ timestamp: number; duration: number; success: boolean }>\n  ): number {\n    if (executions.length === 0) return 0;\n\n    const timeSpanHours = (Date.now() - executions[0].timestamp) / (1000 * 60 * 60);\n    return timeSpanHours > 0 ? executions.length / timeSpanHours : 0;\n  }\n\n  async getInstanceHealthMetrics(): Promise<InstanceHealthMetrics> {\n    const systemUsage = await this.getSystemResourceUsage();\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Analyze system health\n    if (systemUsage.cpu.totalUsage > 80) {\n      issues.push('High CPU usage detected');\n      recommendations.push('Consider scaling horizontally or optimizing workflow execution');\n    }\n\n    if (systemUsage.memory.utilization > 85) {\n      issues.push('High memory usage detected');\n      recommendations.push(\n        'Monitor memory-intensive workflows and consider increasing available memory'\n      );\n    }\n\n    if (systemUsage.disk.utilization > 90) {\n      issues.push('Low disk space warning');\n      recommendations.push('Clean up old execution data and logs');\n    }\n\n    const healthScore = this.calculateHealthScore(systemUsage, issues.length);\n    const status = this.determineHealthStatus(healthScore, issues.length);\n\n    return {\n      overall: {\n        status,\n        score: healthScore,\n        issues,\n        recommendations,\n      },\n      performance: {\n        responseTime: 150, // Placeholder - would measure actual API response time\n        throughput: 10, // Placeholder - executions per minute\n        errorRate: 2, // Placeholder - error percentage\n        availabilityUptime: 99.5, // Placeholder - uptime percentage\n      },\n      resources: {\n        memoryPressure: systemUsage.memory.utilization > 85,\n        cpuThrottling: systemUsage.cpu.totalUsage > 90,\n        diskSpaceWarning: systemUsage.disk.utilization > 90,\n        networkLatency: 50, // Placeholder\n      },\n      dependencies: [\n        {\n          name: 'Database',\n          type: 'database',\n          status: 'online',\n          responseTime: 25,\n          errorCount: 0,\n        },\n        {\n          name: 'File System',\n          type: 'file_system',\n          status: 'online',\n          responseTime: 10,\n          errorCount: 0,\n        },\n      ],\n      alerts: this.alerts\n        .filter(alert => !alert.resolvedAt)\n        .map(alert => ({\n          id: alert.id,\n          severity: alert.severity as 'info' | 'warning' | 'error' | 'critical',\n          message: alert.description,\n          timestamp: alert.triggeredAt,\n          resolved: Boolean(alert.resolvedAt),\n        })),\n    };\n  }\n\n  private calculateHealthScore(systemUsage: SystemResourceUsage, issueCount: number): number {\n    let score = 100;\n\n    // Deduct points based on resource usage\n    score -= Math.max(0, systemUsage.cpu.totalUsage - 50) * 0.5;\n    score -= Math.max(0, systemUsage.memory.utilization - 60) * 0.3;\n    score -= Math.max(0, systemUsage.disk.utilization - 70) * 0.2;\n\n    // Deduct points for issues\n    score -= issueCount * 10;\n\n    return Math.max(0, Math.min(100, Math.round(score)));\n  }\n\n  private determineHealthStatus(\n    score: number,\n    issueCount: number\n  ): 'healthy' | 'warning' | 'critical' | 'degraded' {\n    if (score >= 90 && issueCount === 0) return 'healthy';\n    if (score >= 70 && issueCount <= 1) return 'warning';\n    if (score >= 50) return 'degraded';\n    return 'critical';\n  }\n\n  private async checkResourceThresholds(systemUsage: SystemResourceUsage): Promise<void> {\n    const thresholds = this.config.monitoring.alertThresholds;\n\n    if (systemUsage.cpu.totalUsage > thresholds.cpuUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.cpu.totalUsage > 95 ? 'critical' : 'high',\n        title: 'High CPU Usage',\n        description: `CPU usage is ${systemUsage.cpu.totalUsage.toFixed(1)}%, exceeding threshold of ${thresholds.cpuUsage}%`,\n        metadata: {\n          threshold: thresholds.cpuUsage,\n          actualValue: systemUsage.cpu.totalUsage,\n        },\n      });\n    }\n\n    if (systemUsage.memory.utilization > thresholds.memoryUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.memory.utilization > 95 ? 'critical' : 'high',\n        title: 'High Memory Usage',\n        description: `Memory usage is ${systemUsage.memory.utilization.toFixed(1)}%, exceeding threshold of ${thresholds.memoryUsage}%`,\n        metadata: {\n          threshold: thresholds.memoryUsage,\n          actualValue: systemUsage.memory.utilization,\n        },\n      });\n    }\n  }\n\n  private async createAlert(alertData: Partial<PerformanceAlert>): Promise<void> {\n    const alert: PerformanceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: alertData.type || 'resource_threshold',\n      severity: alertData.severity || 'medium',\n      title: alertData.title || 'Performance Alert',\n      description: alertData.description || 'Performance threshold exceeded',\n      triggeredAt: new Date().toISOString(),\n      metadata: alertData.metadata || {},\n      actions: [],\n    };\n\n    this.alerts.push(alert);\n\n    // Keep only recent alerts\n    this.alerts = this.alerts.filter(\n      a => Date.now() - new Date(a.triggeredAt).getTime() < 24 * 60 * 60 * 1000\n    );\n  }\n\n  recordWorkflowExecution(workflowId: string, duration: number, success: boolean): void {\n    if (!this.executionHistory.has(workflowId)) {\n      this.executionHistory.set(workflowId, []);\n    }\n\n    const history = this.executionHistory.get(workflowId)!;\n    history.push({\n      timestamp: Date.now(),\n      duration,\n      success,\n    });\n\n    // Keep only last 1000 executions per workflow\n    if (history.length > 1000) {\n      history.splice(0, history.length - 1000);\n    }\n  }\n\n  private addDataPoint(dataPoint: MonitoringDataPoint): void {\n    this.dataPoints.push(dataPoint);\n\n    // Enforce max data points limit\n    if (this.dataPoints.length > this.config.storage.maxDataPoints) {\n      this.dataPoints.splice(0, this.dataPoints.length - this.config.storage.maxDataPoints);\n    }\n  }\n\n  private cleanupOldDataPoints(): void {\n    const cutoffTime = Date.now() - this.config.monitoring.retentionDays * 24 * 60 * 60 * 1000;\n    this.dataPoints = this.dataPoints.filter(dp => new Date(dp.timestamp).getTime() > cutoffTime);\n  }\n\n  getMetrics(): MonitoringMetrics {\n    return {\n      system:\n        (this.dataPoints.filter(dp => dp.metricType === 'system').slice(-1)[0]\n          ?.data as unknown as SystemResourceUsage) || ({} as SystemResourceUsage),\n      workflows: [],\n      health: {} as InstanceHealthMetrics,\n      alerts: this.alerts,\n      dataPoints: this.dataPoints,\n    };\n  }\n\n  getDataPoints(metricType?: string, limit?: number): MonitoringDataPoint[] {\n    let points = this.dataPoints;\n\n    if (metricType) {\n      points = points.filter(dp => dp.metricType === metricType);\n    }\n\n    if (limit) {\n      points = points.slice(-limit);\n    }\n\n    return points;\n  }\n\n  getAlerts(severity?: string, resolved?: boolean): PerformanceAlert[] {\n    let alerts = this.alerts;\n\n    if (severity) {\n      alerts = alerts.filter(alert => alert.severity === severity);\n    }\n\n    if (resolved !== undefined) {\n      alerts = alerts.filter(alert => Boolean(alert.resolvedAt) === resolved);\n    }\n\n    return alerts.sort(\n      (a, b) => new Date(b.triggeredAt).getTime() - new Date(a.triggeredAt).getTime()\n    );\n  }\n\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert && !alert.resolvedAt) {\n      alert.resolvedAt = new Date().toISOString();\n      return true;\n    }\n    return false;\n  }\n\n  updateConfig(newConfig: Partial<ResourceMonitoringConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n\n    if (this.monitoringInterval) {\n      this.stopMonitoring();\n      this.startMonitoring();\n    }\n  }\n\n  getConfig(): ResourceMonitoringConfig {\n    return { ...this.config };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "453dfd753d619a3c38542896973d1290a828542b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dcgrbr8i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dcgrbr8i();
import * as os from 'os';
import * as fs from 'fs';
import { promisify } from 'util';
const stat =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[0]++, promisify(fs.stat));
export class ResourceMonitor {
  config;
  dataPoints =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[1]++, []);
  alerts =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[2]++, []);
  monitoringInterval =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[3]++, null);
  startTime;
  executionHistory =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[4]++, new Map());
  constructor(config) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[0]++;
    cov_1dcgrbr8i().s[5]++;
    this.startTime = Date.now();
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[6]++;
    this.config = {
      monitoring: {
        enabled: true,
        intervalMs: 30000,
        // 30 seconds default
        retentionDays: 7,
        alertThresholds: {
          cpuUsage: 80,
          memoryUsage: 85,
          diskUsage: 90,
          executionTime: 300000,
          // 5 minutes
          errorRate: 10
        }
      },
      collection: {
        systemMetrics: true,
        workflowMetrics: true,
        nodeMetrics: true,
        healthChecks: true
      },
      storage: {
        inMemory: true,
        persistToDisk: false,
        maxDataPoints: 10000,
        compressionEnabled: false
      },
      ...config
    };
  }
  async startMonitoring() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[1]++;
    cov_1dcgrbr8i().s[7]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[0][0]++;
      cov_1dcgrbr8i().s[8]++;
      clearInterval(this.monitoringInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[0][1]++;
    }
    cov_1dcgrbr8i().s[9]++;
    if (!this.config.monitoring.enabled) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[1][0]++;
      cov_1dcgrbr8i().s[10]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[1][1]++;
    }
    cov_1dcgrbr8i().s[11]++;
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[2]++;
      cov_1dcgrbr8i().s[12]++;
      try {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[13]++;
        await this.collectMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[14]++;
        console.error('Error collecting metrics:', error);
      }
    }, this.config.monitoring.intervalMs);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[15]++;
    console.log(`Resource monitoring started with ${this.config.monitoring.intervalMs}ms interval`);
  }
  stopMonitoring() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[3]++;
    cov_1dcgrbr8i().s[16]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[2][0]++;
      cov_1dcgrbr8i().s[17]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[18]++;
      this.monitoringInterval = null;
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[19]++;
      console.log('Resource monitoring stopped');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[2][1]++;
    }
  }
  async collectMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[4]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[20]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[21]++;
    if (this.config.collection.systemMetrics) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[3][0]++;
      const systemMetrics =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[22]++, await this.getSystemResourceUsage());
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[23]++;
      this.addDataPoint({
        timestamp,
        metricType: 'system',
        data: systemMetrics,
        tags: {
          source: 'system'
        }
      });
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[24]++;
      await this.checkResourceThresholds(systemMetrics);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[3][1]++;
    }
    // Clean up old data points
    cov_1dcgrbr8i().s[25]++;
    this.cleanupOldDataPoints();
  }
  async getSystemResourceUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[5]++;
    const cpuUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[26]++, await this.getCPUUsage());
    const memoryInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[27]++, this.getMemoryUsage());
    const diskInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[28]++, await this.getDiskUsage());
    const networkInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[29]++, await this.getNetworkUsage());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[30]++;
    return {
      cpu: {
        totalUsage: cpuUsage.totalUsage,
        processUsage: cpuUsage.processUsage,
        loadAverage: os.loadavg(),
        coreCount: os.cpus().length
      },
      memory: {
        totalMemory: os.totalmem(),
        freeMemory: os.freemem(),
        usedMemory: os.totalmem() - os.freemem(),
        processMemory: memoryInfo,
        utilization: (os.totalmem() - os.freemem()) / os.totalmem() * 100
      },
      disk: diskInfo,
      network: networkInfo,
      uptime: (Date.now() - this.startTime) / 1000,
      timestamp: new Date().toISOString()
    };
  }
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[6]++;
    cov_1dcgrbr8i().s[31]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[7]++;
      const startUsage =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[32]++, process.cpuUsage());
      const startTime =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[33]++, process.hrtime());
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[34]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[8]++;
        const currentUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[35]++, process.cpuUsage(startUsage));
        const currentTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[36]++, process.hrtime(startTime));
        const elapsedTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[37]++, currentTime[0] * 1000000 + currentTime[1] / 1000); // microseconds
        const totalCPUTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[38]++, currentUsage.user + currentUsage.system);
        const processUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[39]++, totalCPUTime / elapsedTime * 100);
        // System CPU usage approximation based on load average
        const loadAvg =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[40]++, os.loadavg()[0]);
        const coreCount =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[41]++, os.cpus().length);
        const totalUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[42]++, Math.min(loadAvg / coreCount * 100, 100));
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[43]++;
        resolve({
          totalUsage: Math.round(totalUsage * 100) / 100,
          processUsage: Math.round(processUsage * 100) / 100
        });
      }, 100);
    });
  }
  getMemoryUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[9]++;
    const memUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[44]++, process.memoryUsage());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[45]++;
    return {
      heapUsed: memUsage.heapUsed,
      heapTotal: memUsage.heapTotal,
      external: memUsage.external,
      rss: memUsage.rss
    };
  }
  async getDiskUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[10]++;
    cov_1dcgrbr8i().s[46]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[47]++, await stat(process.cwd()));
      // This is a simplified implementation
      // In production, you'd use platform-specific methods to get actual disk usage
      const totalSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[48]++, 1000000000000); // 1TB placeholder
      const freeSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[49]++, 500000000000); // 500GB placeholder
      const usedSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[50]++, totalSpace - freeSpace);
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[51]++;
      return {
        totalSpace,
        freeSpace,
        usedSpace,
        utilization: usedSpace / totalSpace * 100
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[52]++;
      return {
        totalSpace: 0,
        freeSpace: 0,
        usedSpace: 0,
        utilization: 0
      };
    }
  }
  async getNetworkUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[11]++;
    cov_1dcgrbr8i().s[53]++;
    // Simplified network usage - in production you'd read from /proc/net/dev on Linux
    // or use platform-specific APIs
    return {
      bytesReceived: 0,
      bytesSent: 0,
      packetsReceived: 0,
      packetsSent: 0
    };
  }
  async getWorkflowResourceUsage(workflowId, workflowName, isActive) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[12]++;
    const executionHistory =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[54]++,
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[4][0]++, this.executionHistory.get(workflowId)) ||
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[4][1]++, []));
    const recentExecutions =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[55]++, executionHistory.filter(exec => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[13]++;
      cov_1dcgrbr8i().s[56]++;
      return Date.now() - exec.timestamp < 24 * 60 * 60 * 1000;
    } // Last 24 hours
    ));
    const successfulRuns =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[57]++, recentExecutions.filter(exec => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[14]++;
      cov_1dcgrbr8i().s[58]++;
      return exec.success;
    }).length);
    const totalRuns =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[59]++, recentExecutions.length);
    const totalExecutionTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[60]++, recentExecutions.reduce((sum, exec) => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[15]++;
      cov_1dcgrbr8i().s[61]++;
      return sum + exec.duration;
    }, 0));
    const averageExecutionTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[62]++, totalRuns > 0 ?
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[5][0]++, totalExecutionTime / totalRuns) :
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[5][1]++, 0));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[63]++;
    return {
      workflowId,
      workflowName,
      isActive,
      executionCount: totalRuns,
      resourceMetrics: {
        averageExecutionTime: Math.round(averageExecutionTime),
        lastExecutionTime: recentExecutions.length > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[6][0]++, recentExecutions[recentExecutions.length - 1].duration) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[6][1]++, 0),
        totalExecutionTime: Math.round(totalExecutionTime),
        memoryUsage: {
          average: 50000000,
          // 50MB placeholder
          peak: 100000000,
          // 100MB placeholder
          current: isActive ?
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[7][0]++, 75000000) :
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[7][1]++, 0) // 75MB placeholder
        },
        cpuUsage: {
          average: 15,
          // 15% placeholder
          peak: 80,
          // 80% placeholder
          current: isActive ?
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[8][0]++, 25) :
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[8][1]++, 0) // 25% placeholder
        }
      },
      executionStats: {
        successfulRuns,
        failedRuns: totalRuns - successfulRuns,
        totalRuns,
        successRate: totalRuns > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[9][0]++, successfulRuns / totalRuns * 100) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[9][1]++, 100),
        lastExecution: recentExecutions.length > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[10][0]++, new Date(recentExecutions[recentExecutions.length - 1].timestamp).toISOString()) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[10][1]++, new Date().toISOString()),
        averageRunsPerHour: this.calculateRunsPerHour(recentExecutions)
      },
      nodePerformance: [] // Would be populated with actual node performance data
    };
  }
  calculateRunsPerHour(executions) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[16]++;
    cov_1dcgrbr8i().s[64]++;
    if (executions.length === 0) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[11][0]++;
      cov_1dcgrbr8i().s[65]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[11][1]++;
    }
    const timeSpanHours =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[66]++, (Date.now() - executions[0].timestamp) / (1000 * 60 * 60));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[67]++;
    return timeSpanHours > 0 ?
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[12][0]++, executions.length / timeSpanHours) :
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[12][1]++, 0);
  }
  async getInstanceHealthMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[17]++;
    const systemUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[68]++, await this.getSystemResourceUsage());
    const issues =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[69]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[70]++, []);
    // Analyze system health
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[71]++;
    if (systemUsage.cpu.totalUsage > 80) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[13][0]++;
      cov_1dcgrbr8i().s[72]++;
      issues.push('High CPU usage detected');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[73]++;
      recommendations.push('Consider scaling horizontally or optimizing workflow execution');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[13][1]++;
    }
    cov_1dcgrbr8i().s[74]++;
    if (systemUsage.memory.utilization > 85) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[14][0]++;
      cov_1dcgrbr8i().s[75]++;
      issues.push('High memory usage detected');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[76]++;
      recommendations.push('Monitor memory-intensive workflows and consider increasing available memory');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[14][1]++;
    }
    cov_1dcgrbr8i().s[77]++;
    if (systemUsage.disk.utilization > 90) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[15][0]++;
      cov_1dcgrbr8i().s[78]++;
      issues.push('Low disk space warning');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[79]++;
      recommendations.push('Clean up old execution data and logs');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[15][1]++;
    }
    const healthScore =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[80]++, this.calculateHealthScore(systemUsage, issues.length));
    const status =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[81]++, this.determineHealthStatus(healthScore, issues.length));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[82]++;
    return {
      overall: {
        status,
        score: healthScore,
        issues,
        recommendations
      },
      performance: {
        responseTime: 150,
        // Placeholder - would measure actual API response time
        throughput: 10,
        // Placeholder - executions per minute
        errorRate: 2,
        // Placeholder - error percentage
        availabilityUptime: 99.5 // Placeholder - uptime percentage
      },
      resources: {
        memoryPressure: systemUsage.memory.utilization > 85,
        cpuThrottling: systemUsage.cpu.totalUsage > 90,
        diskSpaceWarning: systemUsage.disk.utilization > 90,
        networkLatency: 50 // Placeholder
      },
      dependencies: [{
        name: 'Database',
        type: 'database',
        status: 'online',
        responseTime: 25,
        errorCount: 0
      }, {
        name: 'File System',
        type: 'file_system',
        status: 'online',
        responseTime: 10,
        errorCount: 0
      }],
      alerts: this.alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[18]++;
        cov_1dcgrbr8i().s[83]++;
        return !alert.resolvedAt;
      }).map(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[19]++;
        cov_1dcgrbr8i().s[84]++;
        return {
          id: alert.id,
          severity: alert.severity,
          message: alert.description,
          timestamp: alert.triggeredAt,
          resolved: Boolean(alert.resolvedAt)
        };
      })
    };
  }
  calculateHealthScore(systemUsage, issueCount) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[20]++;
    let score =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[85]++, 100);
    // Deduct points based on resource usage
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[86]++;
    score -= Math.max(0, systemUsage.cpu.totalUsage - 50) * 0.5;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[87]++;
    score -= Math.max(0, systemUsage.memory.utilization - 60) * 0.3;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[88]++;
    score -= Math.max(0, systemUsage.disk.utilization - 70) * 0.2;
    // Deduct points for issues
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[89]++;
    score -= issueCount * 10;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[90]++;
    return Math.max(0, Math.min(100, Math.round(score)));
  }
  determineHealthStatus(score, issueCount) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[21]++;
    cov_1dcgrbr8i().s[91]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[17][0]++, score >= 90) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[17][1]++, issueCount === 0)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[16][0]++;
      cov_1dcgrbr8i().s[92]++;
      return 'healthy';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[16][1]++;
    }
    cov_1dcgrbr8i().s[93]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[19][0]++, score >= 70) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[19][1]++, issueCount <= 1)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[18][0]++;
      cov_1dcgrbr8i().s[94]++;
      return 'warning';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[18][1]++;
    }
    cov_1dcgrbr8i().s[95]++;
    if (score >= 50) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[20][0]++;
      cov_1dcgrbr8i().s[96]++;
      return 'degraded';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[20][1]++;
    }
    cov_1dcgrbr8i().s[97]++;
    return 'critical';
  }
  async checkResourceThresholds(systemUsage) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[22]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[98]++, this.config.monitoring.alertThresholds);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[99]++;
    if (systemUsage.cpu.totalUsage > thresholds.cpuUsage) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[21][0]++;
      cov_1dcgrbr8i().s[100]++;
      await this.createAlert({
        type: 'resource_threshold',
        severity: systemUsage.cpu.totalUsage > 95 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[22][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[22][1]++, 'high'),
        title: 'High CPU Usage',
        description: `CPU usage is ${systemUsage.cpu.totalUsage.toFixed(1)}%, exceeding threshold of ${thresholds.cpuUsage}%`,
        metadata: {
          threshold: thresholds.cpuUsage,
          actualValue: systemUsage.cpu.totalUsage
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[21][1]++;
    }
    cov_1dcgrbr8i().s[101]++;
    if (systemUsage.memory.utilization > thresholds.memoryUsage) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[23][0]++;
      cov_1dcgrbr8i().s[102]++;
      await this.createAlert({
        type: 'resource_threshold',
        severity: systemUsage.memory.utilization > 95 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[24][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[24][1]++, 'high'),
        title: 'High Memory Usage',
        description: `Memory usage is ${systemUsage.memory.utilization.toFixed(1)}%, exceeding threshold of ${thresholds.memoryUsage}%`,
        metadata: {
          threshold: thresholds.memoryUsage,
          actualValue: systemUsage.memory.utilization
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[23][1]++;
    }
  }
  async createAlert(alertData) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[23]++;
    const alert =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[103]++, {
      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[25][0]++, alertData.type) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[25][1]++, 'resource_threshold'),
      severity:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[26][0]++, alertData.severity) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[26][1]++, 'medium'),
      title:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[27][0]++, alertData.title) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[27][1]++, 'Performance Alert'),
      description:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[28][0]++, alertData.description) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[28][1]++, 'Performance threshold exceeded'),
      triggeredAt: new Date().toISOString(),
      metadata:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[29][0]++, alertData.metadata) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[29][1]++, {}),
      actions: []
    });
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[104]++;
    this.alerts.push(alert);
    // Keep only recent alerts
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[105]++;
    this.alerts = this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[24]++;
      cov_1dcgrbr8i().s[106]++;
      return Date.now() - new Date(a.triggeredAt).getTime() < 24 * 60 * 60 * 1000;
    });
  }
  recordWorkflowExecution(workflowId, duration, success) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[25]++;
    cov_1dcgrbr8i().s[107]++;
    if (!this.executionHistory.has(workflowId)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[30][0]++;
      cov_1dcgrbr8i().s[108]++;
      this.executionHistory.set(workflowId, []);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[30][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[109]++, this.executionHistory.get(workflowId));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[110]++;
    history.push({
      timestamp: Date.now(),
      duration,
      success
    });
    // Keep only last 1000 executions per workflow
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[111]++;
    if (history.length > 1000) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[31][0]++;
      cov_1dcgrbr8i().s[112]++;
      history.splice(0, history.length - 1000);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[31][1]++;
    }
  }
  addDataPoint(dataPoint) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[26]++;
    cov_1dcgrbr8i().s[113]++;
    this.dataPoints.push(dataPoint);
    // Enforce max data points limit
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[114]++;
    if (this.dataPoints.length > this.config.storage.maxDataPoints) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[32][0]++;
      cov_1dcgrbr8i().s[115]++;
      this.dataPoints.splice(0, this.dataPoints.length - this.config.storage.maxDataPoints);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[32][1]++;
    }
  }
  cleanupOldDataPoints() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[27]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[116]++, Date.now() - this.config.monitoring.retentionDays * 24 * 60 * 60 * 1000);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[117]++;
    this.dataPoints = this.dataPoints.filter(dp => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[28]++;
      cov_1dcgrbr8i().s[118]++;
      return new Date(dp.timestamp).getTime() > cutoffTime;
    });
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[29]++;
    cov_1dcgrbr8i().s[119]++;
    return {
      system:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[33][0]++, this.dataPoints.filter(dp => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[30]++;
        cov_1dcgrbr8i().s[120]++;
        return dp.metricType === 'system';
      }).slice(-1)[0]?.data) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[33][1]++, {}),
      workflows: [],
      health: {},
      alerts: this.alerts,
      dataPoints: this.dataPoints
    };
  }
  getDataPoints(metricType, limit) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[31]++;
    let points =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[121]++, this.dataPoints);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[122]++;
    if (metricType) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[34][0]++;
      cov_1dcgrbr8i().s[123]++;
      points = points.filter(dp => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[32]++;
        cov_1dcgrbr8i().s[124]++;
        return dp.metricType === metricType;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[34][1]++;
    }
    cov_1dcgrbr8i().s[125]++;
    if (limit) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[35][0]++;
      cov_1dcgrbr8i().s[126]++;
      points = points.slice(-limit);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[35][1]++;
    }
    cov_1dcgrbr8i().s[127]++;
    return points;
  }
  getAlerts(severity, resolved) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[33]++;
    let alerts =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[128]++, this.alerts);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[129]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[36][0]++;
      cov_1dcgrbr8i().s[130]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[34]++;
        cov_1dcgrbr8i().s[131]++;
        return alert.severity === severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[36][1]++;
    }
    cov_1dcgrbr8i().s[132]++;
    if (resolved !== undefined) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[37][0]++;
      cov_1dcgrbr8i().s[133]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[35]++;
        cov_1dcgrbr8i().s[134]++;
        return Boolean(alert.resolvedAt) === resolved;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[37][1]++;
    }
    cov_1dcgrbr8i().s[135]++;
    return alerts.sort((a, b) => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[36]++;
      cov_1dcgrbr8i().s[136]++;
      return new Date(b.triggeredAt).getTime() - new Date(a.triggeredAt).getTime();
    });
  }
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[37]++;
    const alert =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[137]++, this.alerts.find(a => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[38]++;
      cov_1dcgrbr8i().s[138]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[139]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[39][0]++, alert) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[39][1]++, !alert.resolvedAt)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[38][0]++;
      cov_1dcgrbr8i().s[140]++;
      alert.resolvedAt = new Date().toISOString();
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[141]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[38][1]++;
    }
    cov_1dcgrbr8i().s[142]++;
    return false;
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[39]++;
    cov_1dcgrbr8i().s[143]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[144]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[40][0]++;
      cov_1dcgrbr8i().s[145]++;
      this.stopMonitoring();
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[146]++;
      this.startMonitoring();
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[40][1]++;
    }
  }
  getConfig() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[40]++;
    cov_1dcgrbr8i().s[147]++;
    return {
      ...this.config
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,