f992e783df8a550a14473fe1ca6a9472
"use strict";

/* istanbul ignore next */
function cov_gio26vf7m() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts";
  var hash = "990cbff7fe2ad7849de24a6754a53216f256b9b1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 34
        }
      },
      "2": {
        start: {
          line: 5,
          column: 23
        },
        end: {
          line: 5,
          column: 32
        }
      },
      "3": {
        start: {
          line: 7,
          column: 8
        },
        end: {
          line: 9,
          column: 9
        }
      },
      "4": {
        start: {
          line: 8,
          column: 12
        },
        end: {
          line: 8,
          column: 42
        }
      },
      "5": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 38
        }
      },
      "6": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 15,
          column: 9
        }
      },
      "7": {
        start: {
          line: 14,
          column: 12
        },
        end: {
          line: 14,
          column: 63
        }
      },
      "8": {
        start: {
          line: 18,
          column: 22
        },
        end: {
          line: 18,
          column: 42
        }
      },
      "9": {
        start: {
          line: 19,
          column: 28
        },
        end: {
          line: 19,
          column: 54
        }
      },
      "10": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 20,
          column: 27
        }
      },
      "11": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 24,
          column: 9
        }
      },
      "12": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 82
        }
      },
      "13": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 36
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 24
        }
      },
      "15": {
        start: {
          line: 28,
          column: 29
        },
        end: {
          line: 28,
          column: 65
        }
      },
      "16": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "17": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 38,
          column: 118
        }
      },
      "18": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 98
        }
      },
      "19": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "20": {
        start: {
          line: 44,
          column: 23
        },
        end: {
          line: 44,
          column: 25
        }
      },
      "21": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 65,
          column: 9
        }
      },
      "22": {
        start: {
          line: 47,
          column: 36
        },
        end: {
          line: 47,
          column: 124
        }
      },
      "23": {
        start: {
          line: 47,
          column: 75
        },
        end: {
          line: 47,
          column: 123
        }
      },
      "24": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 55,
          column: 13
        }
      },
      "25": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 54,
          column: 19
        }
      },
      "26": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 64,
          column: 15
        }
      },
      "27": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 22
        }
      },
      "28": {
        start: {
          line: 69,
          column: 24
        },
        end: {
          line: 69,
          column: 26
        }
      },
      "29": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 85,
          column: 9
        }
      },
      "30": {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "31": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 84,
          column: 15
        }
      },
      "32": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 23
        }
      },
      "33": {
        start: {
          line: 89,
          column: 28
        },
        end: {
          line: 89,
          column: 30
        }
      },
      "34": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "35": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "36": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 25
        }
      },
      "37": {
        start: {
          line: 93,
          column: 39
        },
        end: {
          line: 93,
          column: 81
        }
      },
      "38": {
        start: {
          line: 94,
          column: 31
        },
        end: {
          line: 94,
          column: 135
        }
      },
      "39": {
        start: {
          line: 95,
          column: 12
        },
        end: {
          line: 97,
          column: 13
        }
      },
      "40": {
        start: {
          line: 96,
          column: 16
        },
        end: {
          line: 96,
          column: 45
        }
      },
      "41": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 99,
          column: 83
        }
      },
      "42": {
        start: {
          line: 99,
          column: 42
        },
        end: {
          line: 99,
          column: 69
        }
      },
      "43": {
        start: {
          line: 102,
          column: 25
        },
        end: {
          line: 102,
          column: 26
        }
      },
      "44": {
        start: {
          line: 103,
          column: 24
        },
        end: {
          line: 103,
          column: 26
        }
      },
      "45": {
        start: {
          line: 104,
          column: 30
        },
        end: {
          line: 104,
          column: 117
        }
      },
      "46": {
        start: {
          line: 106,
          column: 8
        },
        end: {
          line: 106,
          column: 83
        }
      },
      "47": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 83
        }
      },
      "48": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 90
        }
      },
      "49": {
        start: {
          line: 109,
          column: 8
        },
        end: {
          line: 109,
          column: 46
        }
      },
      "50": {
        start: {
          line: 111,
          column: 8
        },
        end: {
          line: 114,
          column: 9
        }
      },
      "51": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 30
        }
      },
      "52": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 47
        }
      },
      "53": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 116,
          column: 110
        }
      },
      "54": {
        start: {
          line: 117,
          column: 8
        },
        end: {
          line: 119,
          column: 9
        }
      },
      "55": {
        start: {
          line: 118,
          column: 12
        },
        end: {
          line: 118,
          column: 24
        }
      },
      "56": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 129,
          column: 10
        }
      },
      "57": {
        start: {
          line: 133,
          column: 35
        },
        end: {
          line: 139,
          column: 9
        }
      },
      "58": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 145,
          column: 9
        }
      },
      "59": {
        start: {
          line: 141,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "60": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 37
        }
      },
      "61": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 17
        }
      },
      "62": {
        start: {
          line: 150,
          column: 28
        },
        end: {
          line: 150,
          column: 65
        }
      },
      "63": {
        start: {
          line: 151,
          column: 28
        },
        end: {
          line: 151,
          column: 65
        }
      },
      "64": {
        start: {
          line: 152,
          column: 26
        },
        end: {
          line: 152,
          column: 27
        }
      },
      "65": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 157,
          column: 9
        }
      },
      "66": {
        start: {
          line: 154,
          column: 12
        },
        end: {
          line: 156,
          column: 13
        }
      },
      "67": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 155,
          column: 30
        }
      },
      "68": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 55
        }
      },
      "69": {
        start: {
          line: 161,
          column: 25
        },
        end: {
          line: 161,
          column: 119
        }
      },
      "70": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 52
        }
      },
      "71": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 168,
          column: 20
        }
      },
      "72": {
        start: {
          line: 171,
          column: 24
        },
        end: {
          line: 171,
          column: 26
        }
      },
      "73": {
        start: {
          line: 172,
          column: 8
        },
        end: {
          line: 174,
          column: 9
        }
      },
      "74": {
        start: {
          line: 173,
          column: 12
        },
        end: {
          line: 173,
          column: 89
        }
      },
      "75": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 177,
          column: 9
        }
      },
      "76": {
        start: {
          line: 176,
          column: 12
        },
        end: {
          line: 176,
          column: 83
        }
      },
      "77": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 180,
          column: 9
        }
      },
      "78": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 75
        }
      },
      "79": {
        start: {
          line: 181,
          column: 25
        },
        end: {
          line: 182,
          column: 73
        }
      },
      "80": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 185,
          column: 9
        }
      },
      "81": {
        start: {
          line: 184,
          column: 12
        },
        end: {
          line: 184,
          column: 64
        }
      },
      "82": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 186,
          column: 34
        }
      },
      "83": {
        start: {
          line: 189,
          column: 25
        },
        end: {
          line: 189,
          column: 27
        }
      },
      "84": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 191,
          column: 28
        }
      },
      "85": {
        start: {
          line: 191,
          column: 12
        },
        end: {
          line: 191,
          column: 28
        }
      },
      "86": {
        start: {
          line: 193,
          column: 30
        },
        end: {
          line: 193,
          column: 100
        }
      },
      "87": {
        start: {
          line: 193,
          column: 51
        },
        end: {
          line: 193,
          column: 99
        }
      },
      "88": {
        start: {
          line: 194,
          column: 8
        },
        end: {
          line: 201,
          column: 9
        }
      },
      "89": {
        start: {
          line: 195,
          column: 12
        },
        end: {
          line: 196,
          column: 25
        }
      },
      "90": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 196,
          column: 25
        }
      },
      "91": {
        start: {
          line: 197,
          column: 28
        },
        end: {
          line: 197,
          column: 84
        }
      },
      "92": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "93": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 39
        }
      },
      "94": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 68
        }
      },
      "95": {
        start: {
          line: 202,
          column: 39
        },
        end: {
          line: 202,
          column: 66
        }
      },
      "96": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 217,
          column: 9
        }
      },
      "97": {
        start: {
          line: 207,
          column: 31
        },
        end: {
          line: 207,
          column: 93
        }
      },
      "98": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 216,
          column: 13
        }
      },
      "99": {
        start: {
          line: 209,
          column: 16
        },
        end: {
          line: 215,
          column: 18
        }
      },
      "100": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 20
        }
      },
      "101": {
        start: {
          line: 222,
          column: 31
        },
        end: {
          line: 228,
          column: 9
        }
      },
      "102": {
        start: {
          line: 229,
          column: 27
        },
        end: {
          line: 229,
          column: 50
        }
      },
      "103": {
        start: {
          line: 230,
          column: 8
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "104": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "105": {
        start: {
          line: 233,
          column: 16
        },
        end: {
          line: 235,
          column: 17
        }
      },
      "106": {
        start: {
          line: 233,
          column: 43
        },
        end: {
          line: 233,
          column: 89
        }
      },
      "107": {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 31
        }
      },
      "108": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "109": {
        start: {
          line: 242,
          column: 28
        },
        end: {
          line: 242,
          column: 53
        }
      },
      "110": {
        start: {
          line: 243,
          column: 30
        },
        end: {
          line: 249,
          column: 9
        }
      },
      "111": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 254,
          column: 9
        }
      },
      "112": {
        start: {
          line: 251,
          column: 12
        },
        end: {
          line: 253,
          column: 13
        }
      },
      "113": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 252,
          column: 29
        }
      },
      "114": {
        start: {
          line: 255,
          column: 8
        },
        end: {
          line: 255,
          column: 22
        }
      },
      "115": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 260,
          column: 9
        }
      },
      "116": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 38
        }
      },
      "117": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 263,
          column: 9
        }
      },
      "118": {
        start: {
          line: 262,
          column: 12
        },
        end: {
          line: 262,
          column: 32
        }
      },
      "119": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 25
        }
      },
      "120": {
        start: {
          line: 268,
          column: 8
        },
        end: {
          line: 269,
          column: 60
        }
      },
      "121": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 273,
          column: 29
        }
      },
      "122": {
        start: {
          line: 273,
          column: 12
        },
        end: {
          line: 273,
          column: 29
        }
      },
      "123": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "124": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "125": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 38
        }
      },
      "126": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 25
        }
      },
      "127": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 286,
          column: 25
        }
      },
      "128": {
        start: {
          line: 286,
          column: 12
        },
        end: {
          line: 286,
          column: 25
        }
      },
      "129": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 293,
          column: 9
        }
      },
      "130": {
        start: {
          line: 289,
          column: 12
        },
        end: {
          line: 292,
          column: 13
        }
      },
      "131": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 291,
          column: 74
        }
      },
      "132": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 21
        }
      },
      "133": {
        start: {
          line: 298,
          column: 32
        },
        end: {
          line: 298,
          column: 34
        }
      },
      "134": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "135": {
        start: {
          line: 300,
          column: 12
        },
        end: {
          line: 300,
          column: 38
        }
      },
      "136": {
        start: {
          line: 301,
          column: 12
        },
        end: {
          line: 301,
          column: 41
        }
      },
      "137": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 302,
          column: 41
        }
      },
      "138": {
        start: {
          line: 304,
          column: 13
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "139": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 305,
          column: 38
        }
      },
      "140": {
        start: {
          line: 306,
          column: 12
        },
        end: {
          line: 306,
          column: 38
        }
      },
      "141": {
        start: {
          line: 308,
          column: 13
        },
        end: {
          line: 315,
          column: 9
        }
      },
      "142": {
        start: {
          line: 309,
          column: 12
        },
        end: {
          line: 309,
          column: 42
        }
      },
      "143": {
        start: {
          line: 310,
          column: 12
        },
        end: {
          line: 310,
          column: 41
        }
      },
      "144": {
        start: {
          line: 311,
          column: 12
        },
        end: {
          line: 311,
          column: 37
        }
      },
      "145": {
        start: {
          line: 314,
          column: 12
        },
        end: {
          line: 314,
          column: 38
        }
      },
      "146": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 31
        }
      },
      "147": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 320,
          column: 29
        }
      },
      "148": {
        start: {
          line: 320,
          column: 12
        },
        end: {
          line: 320,
          column: 29
        }
      },
      "149": {
        start: {
          line: 321,
          column: 28
        },
        end: {
          line: 321,
          column: 30
        }
      },
      "150": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 330,
          column: 9
        }
      },
      "151": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 325,
          column: 25
        }
      },
      "152": {
        start: {
          line: 325,
          column: 16
        },
        end: {
          line: 325,
          column: 25
        }
      },
      "153": {
        start: {
          line: 326,
          column: 31
        },
        end: {
          line: 326,
          column: 100
        }
      },
      "154": {
        start: {
          line: 327,
          column: 12
        },
        end: {
          line: 329,
          column: 13
        }
      },
      "155": {
        start: {
          line: 328,
          column: 16
        },
        end: {
          line: 328,
          column: 56
        }
      },
      "156": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 331,
          column: 77
        }
      },
      "157": {
        start: {
          line: 334,
          column: 26
        },
        end: {
          line: 334,
          column: 53
        }
      },
      "158": {
        start: {
          line: 336,
          column: 8
        },
        end: {
          line: 338,
          column: 9
        }
      },
      "159": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 337,
          column: 65
        }
      },
      "160": {
        start: {
          line: 339,
          column: 8
        },
        end: {
          line: 341,
          column: 9
        }
      },
      "161": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 340,
          column: 58
        }
      },
      "162": {
        start: {
          line: 342,
          column: 8
        },
        end: {
          line: 344,
          column: 9
        }
      },
      "163": {
        start: {
          line: 343,
          column: 12
        },
        end: {
          line: 343,
          column: 64
        }
      },
      "164": {
        start: {
          line: 345,
          column: 8
        },
        end: {
          line: 345,
          column: 25
        }
      },
      "165": {
        start: {
          line: 348,
          column: 25
        },
        end: {
          line: 348,
          column: 66
        }
      },
      "166": {
        start: {
          line: 349,
          column: 35
        },
        end: {
          line: 349,
          column: 37
        }
      },
      "167": {
        start: {
          line: 350,
          column: 40
        },
        end: {
          line: 350,
          column: 42
        }
      },
      "168": {
        start: {
          line: 351,
          column: 46
        },
        end: {
          line: 351,
          column: 48
        }
      },
      "169": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 355,
          column: 9
        }
      },
      "170": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 70
        }
      },
      "171": {
        start: {
          line: 354,
          column: 12
        },
        end: {
          line: 354,
          column: 78
        }
      },
      "172": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "173": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 115
        }
      },
      "174": {
        start: {
          line: 360,
          column: 29
        },
        end: {
          line: 360,
          column: 90
        }
      },
      "175": {
        start: {
          line: 360,
          column: 57
        },
        end: {
          line: 360,
          column: 83
        }
      },
      "176": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "177": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 95
        }
      },
      "178": {
        start: {
          line: 364,
          column: 34
        },
        end: {
          line: 367,
          column: 16
        }
      },
      "179": {
        start: {
          line: 365,
          column: 35
        },
        end: {
          line: 365,
          column: 115
        }
      },
      "180": {
        start: {
          line: 365,
          column: 64
        },
        end: {
          line: 365,
          column: 114
        }
      },
      "181": {
        start: {
          line: 366,
          column: 12
        },
        end: {
          line: 366,
          column: 35
        }
      },
      "182": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "183": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 122
        }
      },
      "184": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 375,
          column: 10
        }
      },
      "185": {
        start: {
          line: 378,
          column: 0
        },
        end: {
          line: 378,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 6,
            column: 5
          }
        },
        loc: {
          start: {
            line: 6,
            column: 27
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 6
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 11,
            column: 5
          }
        },
        loc: {
          start: {
            line: 11,
            column: 29
          },
          end: {
            line: 16,
            column: 5
          }
        },
        line: 11
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 17
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 56
          },
          end: {
            line: 42,
            column: 5
          }
        },
        line: 27
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        loc: {
          start: {
            line: 43,
            column: 55
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 43
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 67
          },
          end: {
            line: 47,
            column: 68
          }
        },
        loc: {
          start: {
            line: 47,
            column: 75
          },
          end: {
            line: 47,
            column: 123
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 68,
            column: 5
          }
        },
        loc: {
          start: {
            line: 68,
            column: 43
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 68
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 89
          },
          end: {
            line: 100,
            column: 5
          }
        },
        line: 88
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 99,
            column: 32
          },
          end: {
            line: 99,
            column: 33
          }
        },
        loc: {
          start: {
            line: 99,
            column: 42
          },
          end: {
            line: 99,
            column: 69
          }
        },
        line: 99
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        loc: {
          start: {
            line: 101,
            column: 96
          },
          end: {
            line: 130,
            column: 5
          }
        },
        line: 101
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 131,
            column: 5
          }
        },
        loc: {
          start: {
            line: 131,
            column: 50
          },
          end: {
            line: 147,
            column: 5
          }
        },
        line: 131
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 5
          }
        },
        loc: {
          start: {
            line: 148,
            column: 50
          },
          end: {
            line: 159,
            column: 5
          }
        },
        line: 148
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 160,
            column: 4
          },
          end: {
            line: 160,
            column: 5
          }
        },
        loc: {
          start: {
            line: 160,
            column: 47
          },
          end: {
            line: 164,
            column: 5
          }
        },
        line: 160
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 165,
            column: 4
          },
          end: {
            line: 165,
            column: 5
          }
        },
        loc: {
          start: {
            line: 165,
            column: 87
          },
          end: {
            line: 169,
            column: 5
          }
        },
        line: 165
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 170,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        loc: {
          start: {
            line: 170,
            column: 88
          },
          end: {
            line: 187,
            column: 5
          }
        },
        line: 170
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 188,
            column: 4
          },
          end: {
            line: 188,
            column: 5
          }
        },
        loc: {
          start: {
            line: 188,
            column: 60
          },
          end: {
            line: 203,
            column: 5
          }
        },
        line: 188
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 193,
            column: 46
          },
          end: {
            line: 193,
            column: 47
          }
        },
        loc: {
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 193,
            column: 99
          }
        },
        line: 193
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 202,
            column: 29
          },
          end: {
            line: 202,
            column: 30
          }
        },
        loc: {
          start: {
            line: 202,
            column: 39
          },
          end: {
            line: 202,
            column: 66
          }
        },
        line: 202
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        loc: {
          start: {
            line: 204,
            column: 60
          },
          end: {
            line: 219,
            column: 5
          }
        },
        line: 204
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 220,
            column: 5
          }
        },
        loc: {
          start: {
            line: 220,
            column: 56
          },
          end: {
            line: 239,
            column: 5
          }
        },
        line: 220
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 233,
            column: 33
          },
          end: {
            line: 233,
            column: 34
          }
        },
        loc: {
          start: {
            line: 233,
            column: 43
          },
          end: {
            line: 233,
            column: 89
          }
        },
        line: 233
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        loc: {
          start: {
            line: 240,
            column: 53
          },
          end: {
            line: 256,
            column: 5
          }
        },
        line: 240
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 48
          },
          end: {
            line: 265,
            column: 5
          }
        },
        line: 257
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        loc: {
          start: {
            line: 266,
            column: 43
          },
          end: {
            line: 270,
            column: 5
          }
        },
        line: 266
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 57
          },
          end: {
            line: 283,
            column: 5
          }
        },
        line: 271
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 284,
            column: 5
          }
        },
        loc: {
          start: {
            line: 284,
            column: 55
          },
          end: {
            line: 295,
            column: 5
          }
        },
        line: 284
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 296,
            column: 4
          },
          end: {
            line: 296,
            column: 5
          }
        },
        loc: {
          start: {
            line: 296,
            column: 47
          },
          end: {
            line: 317,
            column: 5
          }
        },
        line: 296
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 318,
            column: 4
          },
          end: {
            line: 318,
            column: 5
          }
        },
        loc: {
          start: {
            line: 318,
            column: 88
          },
          end: {
            line: 332,
            column: 5
          }
        },
        line: 318
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 333,
            column: 4
          },
          end: {
            line: 333,
            column: 5
          }
        },
        loc: {
          start: {
            line: 333,
            column: 69
          },
          end: {
            line: 346,
            column: 5
          }
        },
        line: 333
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 347,
            column: 4
          },
          end: {
            line: 347,
            column: 5
          }
        },
        loc: {
          start: {
            line: 347,
            column: 47
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 347
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 360,
            column: 52
          },
          end: {
            line: 360,
            column: 53
          }
        },
        loc: {
          start: {
            line: 360,
            column: 57
          },
          end: {
            line: 360,
            column: 83
          }
        },
        line: 360
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 364,
            column: 57
          },
          end: {
            line: 364,
            column: 58
          }
        },
        loc: {
          start: {
            line: 364,
            column: 62
          },
          end: {
            line: 367,
            column: 9
          }
        },
        line: 364
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 365,
            column: 59
          },
          end: {
            line: 365,
            column: 60
          }
        },
        loc: {
          start: {
            line: 365,
            column: 64
          },
          end: {
            line: 365,
            column: 114
          }
        },
        line: 365
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 8
          },
          end: {
            line: 9,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 7
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 18,
            column: 36
          }
        }, {
          start: {
            line: 18,
            column: 40
          },
          end: {
            line: 18,
            column: 42
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 19,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 28
          },
          end: {
            line: 19,
            column: 48
          }
        }, {
          start: {
            line: 19,
            column: 52
          },
          end: {
            line: 19,
            column: 54
          }
        }],
        line: 19
      },
      "3": {
        loc: {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 65,
            column: 9
          }
        }, {
          start: {
            line: 57,
            column: 13
          },
          end: {
            line: 65,
            column: 9
          }
        }],
        line: 45
      },
      "4": {
        loc: {
          start: {
            line: 47,
            column: 75
          },
          end: {
            line: 47,
            column: 123
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 75
          },
          end: {
            line: 47,
            column: 97
          }
        }, {
          start: {
            line: 47,
            column: 101
          },
          end: {
            line: 47,
            column: 123
          }
        }],
        line: 47
      },
      "5": {
        loc: {
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 52,
            column: 30
          },
          end: {
            line: 52,
            column: 43
          }
        }, {
          start: {
            line: 52,
            column: 47
          },
          end: {
            line: 52,
            column: 52
          }
        }],
        line: 52
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 8
          },
          end: {
            line: 85,
            column: 9
          }
        }, {
          start: {
            line: 78,
            column: 13
          },
          end: {
            line: 85,
            column: 9
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 92,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 12
          },
          end: {
            line: 92,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 12
          },
          end: {
            line: 97,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "9": {
        loc: {
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 95,
            column: 16
          },
          end: {
            line: 95,
            column: 26
          }
        }, {
          start: {
            line: 95,
            column: 30
          },
          end: {
            line: 95,
            column: 57
          }
        }],
        line: 95
      },
      "10": {
        loc: {
          start: {
            line: 109,
            column: 22
          },
          end: {
            line: 109,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 109,
            column: 38
          },
          end: {
            line: 109,
            column: 41
          }
        }, {
          start: {
            line: 109,
            column: 44
          },
          end: {
            line: 109,
            column: 45
          }
        }],
        line: 109
      },
      "11": {
        loc: {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 114,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "12": {
        loc: {
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 8
          },
          end: {
            line: 119,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "13": {
        loc: {
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 141,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 141
      },
      "14": {
        loc: {
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 142,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 141,
            column: 16
          },
          end: {
            line: 141,
            column: 65
          }
        }, {
          start: {
            line: 142,
            column: 16
          },
          end: {
            line: 142,
            column: 65
          }
        }],
        line: 141
      },
      "15": {
        loc: {
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 12
          },
          end: {
            line: 156,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "16": {
        loc: {
          start: {
            line: 158,
            column: 15
          },
          end: {
            line: 158,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 158,
            column: 33
          },
          end: {
            line: 158,
            column: 50
          }
        }, {
          start: {
            line: 158,
            column: 53
          },
          end: {
            line: 158,
            column: 54
          }
        }],
        line: 158
      },
      "17": {
        loc: {
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 8
          },
          end: {
            line: 174,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      },
      "18": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 177,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "19": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 180,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 178
      },
      "20": {
        loc: {
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 178,
            column: 12
          },
          end: {
            line: 178,
            column: 57
          }
        }, {
          start: {
            line: 178,
            column: 61
          },
          end: {
            line: 178,
            column: 106
          }
        }],
        line: 178
      },
      "21": {
        loc: {
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 8
          },
          end: {
            line: 185,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "22": {
        loc: {
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 28
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 190,
            column: 8
          },
          end: {
            line: 191,
            column: 28
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 190
      },
      "23": {
        loc: {
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 193,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 51
          },
          end: {
            line: 193,
            column: 67
          }
        }, {
          start: {
            line: 193,
            column: 71
          },
          end: {
            line: 193,
            column: 99
          }
        }],
        line: 193
      },
      "24": {
        loc: {
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 196,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 195,
            column: 12
          },
          end: {
            line: 196,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 195
      },
      "25": {
        loc: {
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 195,
            column: 16
          },
          end: {
            line: 195,
            column: 38
          }
        }, {
          start: {
            line: 195,
            column: 42
          },
          end: {
            line: 195,
            column: 64
          }
        }],
        line: 195
      },
      "26": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 200,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "27": {
        loc: {
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 208,
            column: 12
          },
          end: {
            line: 216,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 208
      },
      "28": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "29": {
        loc: {
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 233,
            column: 16
          },
          end: {
            line: 235,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 233
      },
      "30": {
        loc: {
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 251,
            column: 12
          },
          end: {
            line: 253,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 251
      },
      "31": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 260,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "32": {
        loc: {
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 12
          },
          end: {
            line: 258,
            column: 38
          }
        }, {
          start: {
            line: 258,
            column: 42
          },
          end: {
            line: 258,
            column: 74
          }
        }],
        line: 258
      },
      "33": {
        loc: {
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 8
          },
          end: {
            line: 263,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "34": {
        loc: {
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 12
          },
          end: {
            line: 261,
            column: 38
          }
        }, {
          start: {
            line: 261,
            column: 42
          },
          end: {
            line: 261,
            column: 90
          }
        }],
        line: 261
      },
      "35": {
        loc: {
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 269,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 268,
            column: 15
          },
          end: {
            line: 268,
            column: 62
          }
        }, {
          start: {
            line: 269,
            column: 12
          },
          end: {
            line: 269,
            column: 59
          }
        }],
        line: 268
      },
      "36": {
        loc: {
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 273,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 8
          },
          end: {
            line: 273,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      },
      "37": {
        loc: {
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 276
      },
      "38": {
        loc: {
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 276,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 276,
            column: 16
          },
          end: {
            line: 276,
            column: 53
          }
        }, {
          start: {
            line: 276,
            column: 57
          },
          end: {
            line: 276,
            column: 83
          }
        }],
        line: 276
      },
      "39": {
        loc: {
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 286,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 8
          },
          end: {
            line: 286,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 285
      },
      "40": {
        loc: {
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 12
          },
          end: {
            line: 292,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "41": {
        loc: {
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 289,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 289,
            column: 16
          },
          end: {
            line: 289,
            column: 35
          }
        }, {
          start: {
            line: 289,
            column: 39
          },
          end: {
            line: 289,
            column: 74
          }
        }, {
          start: {
            line: 289,
            column: 78
          },
          end: {
            line: 289,
            column: 102
          }
        }],
        line: 289
      },
      "42": {
        loc: {
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 8
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: 304,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        }],
        line: 299
      },
      "43": {
        loc: {
          start: {
            line: 304,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 304,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: 308,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        }],
        line: 304
      },
      "44": {
        loc: {
          start: {
            line: 308,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 308,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        }, {
          start: {
            line: 313,
            column: 13
          },
          end: {
            line: 315,
            column: 9
          }
        }],
        line: 308
      },
      "45": {
        loc: {
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 320,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 319,
            column: 8
          },
          end: {
            line: 320,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 319
      },
      "46": {
        loc: {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 325,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 325,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 324
      },
      "47": {
        loc: {
          start: {
            line: 324,
            column: 16
          },
          end: {
            line: 324,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 324,
            column: 16
          },
          end: {
            line: 324,
            column: 42
          }
        }, {
          start: {
            line: 324,
            column: 46
          },
          end: {
            line: 324,
            column: 72
          }
        }],
        line: 324
      },
      "48": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 329,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "49": {
        loc: {
          start: {
            line: 331,
            column: 15
          },
          end: {
            line: 331,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 331,
            column: 53
          },
          end: {
            line: 331,
            column: 64
          }
        }, {
          start: {
            line: 331,
            column: 67
          },
          end: {
            line: 331,
            column: 76
          }
        }],
        line: 331
      },
      "50": {
        loc: {
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 336,
            column: 8
          },
          end: {
            line: 338,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 336
      },
      "51": {
        loc: {
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 336,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 336,
            column: 12
          },
          end: {
            line: 336,
            column: 37
          }
        }, {
          start: {
            line: 336,
            column: 41
          },
          end: {
            line: 336,
            column: 73
          }
        }],
        line: 336
      },
      "52": {
        loc: {
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 8
          },
          end: {
            line: 341,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "53": {
        loc: {
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 339,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 339,
            column: 12
          },
          end: {
            line: 339,
            column: 38
          }
        }, {
          start: {
            line: 339,
            column: 42
          },
          end: {
            line: 339,
            column: 68
          }
        }],
        line: 339
      },
      "54": {
        loc: {
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 342,
            column: 8
          },
          end: {
            line: 344,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 342
      },
      "55": {
        loc: {
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 342,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 342,
            column: 12
          },
          end: {
            line: 342,
            column: 36
          }
        }, {
          start: {
            line: 342,
            column: 40
          },
          end: {
            line: 342,
            column: 65
          }
        }],
        line: 342
      },
      "56": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "57": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 26
          }
        }, {
          start: {
            line: 357,
            column: 30
          },
          end: {
            line: 357,
            column: 56
          }
        }],
        line: 357
      },
      "58": {
        loc: {
          start: {
            line: 360,
            column: 29
          },
          end: {
            line: 360,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 360,
            column: 29
          },
          end: {
            line: 360,
            column: 84
          }
        }, {
          start: {
            line: 360,
            column: 88
          },
          end: {
            line: 360,
            column: 90
          }
        }],
        line: 360
      },
      "59": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "60": {
        loc: {
          start: {
            line: 364,
            column: 34
          },
          end: {
            line: 367,
            column: 16
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 34
          },
          end: {
            line: 367,
            column: 10
          }
        }, {
          start: {
            line: 367,
            column: 14
          },
          end: {
            line: 367,
            column: 16
          }
        }],
        line: 364
      },
      "61": {
        loc: {
          start: {
            line: 365,
            column: 64
          },
          end: {
            line: 365,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 64
          },
          end: {
            line: 365,
            column: 87
          }
        }, {
          start: {
            line: 365,
            column: 91
          },
          end: {
            line: 365,
            column: 114
          }
        }],
        line: 365
      },
      "62": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/ai/suggestionEngine.ts"],
      sourcesContent: ["import { N8nNode, N8nWorkflow, N8nNodeTypeDescription } from '../types/n8n.js';\n\nexport interface NodeConnectionSuggestion {\n  sourceNodeId: string;\n  targetNodeId: string;\n  sourceOutput: string;\n  targetInput: string;\n  confidence: number;\n  reasoning: string;\n  dataTypeMatch: boolean;\n  suggestedParameters?: Record<string, unknown>;\n}\n\nexport interface ParameterMapping {\n  sourceParameter: string;\n  targetParameter: string;\n  transformation?: string;\n  confidence: number;\n  dataType: string;\n}\n\nexport interface NodeFlowAnalysis {\n  nodeId: string;\n  nodeType: string;\n  inputs: Array<{\n    name: string;\n    type: string;\n    required: boolean;\n    connectedFrom?: string;\n  }>;\n  outputs: Array<{\n    name: string;\n    type: string;\n    dataStructure?: Record<string, unknown>;\n  }>;\n  suggestedConnections: NodeConnectionSuggestion[];\n  parameterMappings: ParameterMapping[];\n}\n\nexport class SuggestionEngine {\n  private nodeTypeRegistry: Map<string, N8nNodeTypeDescription> = new Map();\n\n  constructor(nodeTypes?: N8nNodeTypeDescription[]) {\n    if (nodeTypes) {\n      this.loadNodeTypes(nodeTypes);\n    }\n  }\n\n  loadNodeTypes(nodeTypes: N8nNodeTypeDescription[]): void {\n    this.nodeTypeRegistry.clear();\n    for (const nodeType of nodeTypes) {\n      this.nodeTypeRegistry.set(nodeType.name, nodeType);\n    }\n  }\n\n  analyzeWorkflowConnections(workflow: N8nWorkflow): NodeFlowAnalysis[] {\n    const nodes = workflow.nodes || [];\n    const connections = workflow.connections || {};\n    const analyses: NodeFlowAnalysis[] = [];\n\n    for (const node of nodes) {\n      const analysis = this.analyzeNodeConnections(node, nodes, connections);\n      analyses.push(analysis);\n    }\n\n    return analyses;\n  }\n\n  private analyzeNodeConnections(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    connections: Record<string, unknown>\n  ): NodeFlowAnalysis {\n    const nodeTypeInfo = this.nodeTypeRegistry.get(node.type);\n    \n    const analysis: NodeFlowAnalysis = {\n      nodeId: node.id,\n      nodeType: node.type,\n      inputs: this.analyzeNodeInputs(node, nodeTypeInfo, connections),\n      outputs: this.analyzeNodeOutputs(node, nodeTypeInfo),\n      suggestedConnections: [],\n      parameterMappings: [],\n    };\n\n    // Generate connection suggestions\n    analysis.suggestedConnections = this.generateConnectionSuggestions(\n      node,\n      allNodes,\n      nodeTypeInfo,\n      connections\n    );\n\n    // Generate parameter mappings\n    analysis.parameterMappings = this.generateParameterMappings(\n      node,\n      allNodes,\n      nodeTypeInfo\n    );\n\n    return analysis;\n  }\n\n  private analyzeNodeInputs(\n    node: N8nNode,\n    nodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ) {\n    const inputs = [];\n    \n    if (nodeTypeInfo) {\n      // Use node type information to determine expected inputs\n      const inputProperties = nodeTypeInfo.properties.filter(\n        prop => prop.type !== 'hidden' && prop.type !== 'notice'\n      );\n      \n      for (const prop of inputProperties) {\n        inputs.push({\n          name: prop.name,\n          type: prop.type,\n          required: prop.required || false,\n          connectedFrom: this.findConnectionSource(node.id, prop.name, connections),\n        });\n      }\n    } else {\n      // Fallback: analyze based on common input patterns\n      inputs.push({\n        name: 'main',\n        type: 'object',\n        required: true,\n        connectedFrom: this.findConnectionSource(node.id, 'main', connections),\n      });\n    }\n\n    return inputs;\n  }\n\n  private analyzeNodeOutputs(node: N8nNode, nodeTypeInfo?: N8nNodeTypeDescription) {\n    const outputs = [];\n    \n    if (nodeTypeInfo) {\n      // Most n8n nodes have a 'main' output\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: this.predictOutputStructure(node, nodeTypeInfo),\n      });\n    } else {\n      // Default output structure\n      outputs.push({\n        name: 'main',\n        type: 'object',\n        dataStructure: {},\n      });\n    }\n\n    return outputs;\n  }\n\n  private generateConnectionSuggestions(\n    targetNode: N8nNode,\n    allNodes: N8nNode[],\n    targetNodeTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion[] {\n    const suggestions: NodeConnectionSuggestion[] = [];\n\n    for (const sourceNode of allNodes) {\n      if (sourceNode.id === targetNode.id) continue;\n\n      const sourceNodeTypeInfo = this.nodeTypeRegistry.get(sourceNode.type);\n      const suggestion = this.evaluateNodeConnection(\n        sourceNode,\n        targetNode,\n        sourceNodeTypeInfo,\n        targetNodeTypeInfo,\n        connections\n      );\n\n      if (suggestion && suggestion.confidence > 0.3) {\n        suggestions.push(suggestion);\n      }\n    }\n\n    return suggestions.sort((a, b) => b.confidence - a.confidence).slice(0, 5);\n  }\n\n  private evaluateNodeConnection(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription,\n    connections?: Record<string, unknown>\n  ): NodeConnectionSuggestion | null {\n    let confidence = 0;\n    let reasoning = '';\n    const dataTypeMatch = this.checkDataTypeCompatibility(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo);\n\n    // Rule-based scoring\n    confidence += this.scoreBasedOnNodeTypes(sourceNode.type, targetNode.type);\n    confidence += this.scoreBasedOnNodeNames(sourceNode.name, targetNode.name);\n    confidence += this.scoreBasedOnPosition(sourceNode.position, targetNode.position);\n    confidence += dataTypeMatch ? 0.3 : 0;\n\n    // Check if already connected\n    if (this.areNodesConnected(sourceNode.id, targetNode.id, connections)) {\n      confidence -= 0.5; // Reduce score for already connected nodes\n      reasoning += 'Already connected. ';\n    }\n\n    // Generate reasoning\n    reasoning += this.generateConnectionReasoning(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo);\n\n    if (confidence <= 0) {\n      return null;\n    }\n\n    return {\n      sourceNodeId: sourceNode.id,\n      targetNodeId: targetNode.id,\n      sourceOutput: 'main',\n      targetInput: 'main',\n      confidence: Math.min(confidence, 1),\n      reasoning: reasoning.trim(),\n      dataTypeMatch,\n      suggestedParameters: this.generateSuggestedParameters(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo),\n    };\n  }\n\n  private scoreBasedOnNodeTypes(sourceType: string, targetType: string): number {\n    // Define common node type connection patterns\n    const connectionPatterns = [\n      { source: 'trigger', target: 'action', score: 0.4 },\n      { source: 'webhook', target: 'set', score: 0.3 },\n      { source: 'http', target: 'json', score: 0.3 },\n      { source: 'database', target: 'set', score: 0.2 },\n      { source: 'if', target: 'action', score: 0.2 },\n    ];\n\n    for (const pattern of connectionPatterns) {\n      if (sourceType.toLowerCase().includes(pattern.source) && \n          targetType.toLowerCase().includes(pattern.target)) {\n        return pattern.score;\n      }\n    }\n\n    return 0;\n  }\n\n  private scoreBasedOnNodeNames(sourceName: string, targetName: string): number {\n    // Score based on semantic similarity of node names\n    const sourceWords = sourceName.toLowerCase().split(/\\s+/);\n    const targetWords = targetName.toLowerCase().split(/\\s+/);\n    \n    let commonWords = 0;\n    for (const sourceWord of sourceWords) {\n      if (targetWords.includes(sourceWord)) {\n        commonWords++;\n      }\n    }\n\n    return commonWords > 0 ? 0.1 * commonWords : 0;\n  }\n\n  private scoreBasedOnPosition(sourcePos: [number, number], targetPos: [number, number]): number {\n    const distance = Math.sqrt(\n      Math.pow(targetPos[0] - sourcePos[0], 2) + Math.pow(targetPos[1] - sourcePos[1], 2)\n    );\n    \n    // Closer nodes are more likely to be connected\n    return Math.max(0, 0.2 - (distance / 1000));\n  }\n\n  private checkDataTypeCompatibility(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): boolean {\n    // Basic data type compatibility check\n    // Most n8n nodes work with JSON objects, so we'll be optimistic\n    return true;\n  }\n\n  private generateConnectionReasoning(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): string {\n    const reasons = [];\n\n    if (sourceNode.type.includes('trigger')) {\n      reasons.push('Source is a trigger node, typically connects to action nodes');\n    }\n\n    if (targetNode.type.includes('http')) {\n      reasons.push('Target accepts HTTP data, compatible with most outputs');\n    }\n\n    if (sourceNode.name.toLowerCase().includes('get') && targetNode.name.toLowerCase().includes('set')) {\n      reasons.push('Data flow pattern: retrieve then process/store');\n    }\n\n    const distance = Math.sqrt(\n      Math.pow(targetNode.position[0] - sourceNode.position[0], 2) + \n      Math.pow(targetNode.position[1] - sourceNode.position[1], 2)\n    );\n\n    if (distance < 300) {\n      reasons.push('Nodes are positioned close together');\n    }\n\n    return reasons.join('. ');\n  }\n\n  private generateParameterMappings(\n    node: N8nNode,\n    allNodes: N8nNode[],\n    nodeTypeInfo?: N8nNodeTypeDescription\n  ): ParameterMapping[] {\n    const mappings: ParameterMapping[] = [];\n\n    if (!nodeTypeInfo) return mappings;\n\n    // Find upstream nodes that could provide data\n    const upstreamNodes = allNodes.filter(n => \n      n.id !== node.id && this.isUpstreamNode(n, node)\n    );\n\n    for (const prop of nodeTypeInfo.properties) {\n      if (prop.type === 'hidden' || prop.type === 'notice') continue;\n\n      const mapping = this.generateParameterMapping(node, prop, upstreamNodes);\n      if (mapping) {\n        mappings.push(mapping);\n      }\n    }\n\n    return mappings.sort((a, b) => b.confidence - a.confidence);\n  }\n\n  private generateParameterMapping(\n    node: N8nNode,\n    property: any,\n    upstreamNodes: N8nNode[]\n  ): ParameterMapping | null {\n    // Generate mappings based on parameter names and types\n    for (const upstreamNode of upstreamNodes) {\n      const similarity = this.calculateParameterSimilarity(property.name, upstreamNode);\n      \n      if (similarity > 0.5) {\n        return {\n          sourceParameter: `{{$node[\"${upstreamNode.name}\"].json[\"${this.findBestSourceParameter(property.name, upstreamNode)}\"]}}`,\n          targetParameter: property.name,\n          transformation: this.suggestTransformation(property, upstreamNode),\n          confidence: similarity,\n          dataType: property.type,\n        };\n      }\n    }\n\n    return null;\n  }\n\n  private calculateParameterSimilarity(paramName: string, sourceNode: N8nNode): number {\n    // Simple similarity based on common parameter names\n    const commonMappings = {\n      'email': ['email', 'mail', 'emailAddress'],\n      'name': ['name', 'title', 'displayName'],\n      'url': ['url', 'link', 'href'],\n      'id': ['id', 'identifier', 'key'],\n      'data': ['data', 'payload', 'content'],\n    };\n\n    const paramLower = paramName.toLowerCase();\n    \n    for (const [target, sources] of Object.entries(commonMappings)) {\n      if (paramLower.includes(target)) {\n        // Check if source node likely produces this type of data\n        if (sources.some(source => sourceNode.name.toLowerCase().includes(source))) {\n          return 0.8;\n        }\n      }\n    }\n\n    return 0;\n  }\n\n  private findBestSourceParameter(targetParam: string, sourceNode: N8nNode): string {\n    // Try to match parameter names\n    const targetLower = targetParam.toLowerCase();\n    \n    const commonMatches = {\n      'email': 'email',\n      'name': 'name',\n      'url': 'url',\n      'id': 'id',\n      'data': 'data',\n    };\n\n    for (const [pattern, param] of Object.entries(commonMatches)) {\n      if (targetLower.includes(pattern)) {\n        return param;\n      }\n    }\n\n    return 'data'; // Default fallback\n  }\n\n  private suggestTransformation(property: any, sourceNode: N8nNode): string | undefined {\n    if (property.type === 'string' && sourceNode.type.includes('json')) {\n      return 'JSON.stringify()';\n    }\n    \n    if (property.type === 'number' && sourceNode.name.toLowerCase().includes('string')) {\n      return 'parseInt()';\n    }\n\n    return undefined;\n  }\n\n  private isUpstreamNode(sourceNode: N8nNode, targetNode: N8nNode): boolean {\n    // Simple position-based heuristic\n    return sourceNode.position[0] < targetNode.position[0] || \n           sourceNode.position[1] < targetNode.position[1];\n  }\n\n  private findConnectionSource(nodeId: string, inputName: string, connections?: Record<string, unknown>): string | undefined {\n    if (!connections) return undefined;\n    \n    // Parse n8n connections format to find source\n    for (const [sourceNodeName, sourceConnections] of Object.entries(connections)) {\n      if (typeof sourceConnections === 'object' && sourceConnections !== null) {\n        // Check if this source connects to our target node\n        // This is a simplified check - actual n8n connection format is more complex\n        return sourceNodeName;\n      }\n    }\n    \n    return undefined;\n  }\n\n  private areNodesConnected(sourceId: string, targetId: string, connections?: Record<string, unknown>): boolean {\n    if (!connections) return false;\n    \n    // Simplified connection check\n    for (const [nodeId, nodeConnections] of Object.entries(connections)) {\n      if (nodeId === sourceId && typeof nodeConnections === 'object' && nodeConnections !== null) {\n        // Check if target is in the connections\n        return JSON.stringify(nodeConnections).includes(targetId);\n      }\n    }\n    \n    return false;\n  }\n\n  private predictOutputStructure(node: N8nNode, nodeTypeInfo: N8nNodeTypeDescription): Record<string, unknown> {\n    // Predict the likely output structure based on node type\n    const outputStructure: Record<string, unknown> = {};\n    \n    if (node.type.includes('http')) {\n      outputStructure.data = {};\n      outputStructure.headers = {};\n      outputStructure.status = 200;\n    } else if (node.type.includes('database')) {\n      outputStructure.rows = [];\n      outputStructure.count = 0;\n    } else if (node.type.includes('file')) {\n      outputStructure.filename = '';\n      outputStructure.content = '';\n      outputStructure.size = 0;\n    } else {\n      outputStructure.data = {};\n    }\n\n    return outputStructure;\n  }\n\n  private generateSuggestedParameters(\n    sourceNode: N8nNode,\n    targetNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription,\n    targetTypeInfo?: N8nNodeTypeDescription\n  ): Record<string, unknown> | undefined {\n    if (!targetTypeInfo) return undefined;\n\n    const suggestions: Record<string, unknown> = {};\n    \n    // Generate parameter suggestions based on source node data\n    for (const property of targetTypeInfo.properties.slice(0, 3)) { // Limit to prevent large responses\n      if (property.type === 'hidden' || property.type === 'notice') continue;\n      \n      const suggestion = this.suggestParameterFromSource(property, sourceNode, sourceTypeInfo);\n      if (suggestion !== undefined) {\n        suggestions[property.name] = suggestion;\n      }\n    }\n\n    return Object.keys(suggestions).length > 0 ? suggestions : undefined;\n  }\n\n  private suggestParameterFromSource(\n    property: any,\n    sourceNode: N8nNode,\n    sourceTypeInfo?: N8nNodeTypeDescription\n  ): unknown {\n    const paramName = property.name.toLowerCase();\n    \n    // Common parameter mapping patterns\n    if (paramName.includes('url') && sourceNode.type.includes('http')) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"url\"]}}`;\n    }\n    \n    if (paramName.includes('data') || paramName.includes('body')) {\n      return `{{$node[\"${sourceNode.name}\"].json}}`;\n    }\n    \n    if (paramName.includes('id') && sourceNode.parameters?.id) {\n      return `{{$node[\"${sourceNode.name}\"].json[\"id\"]}}`;\n    }\n\n    return undefined;\n  }\n\n  generateSmartWorkflowSuggestions(workflow: N8nWorkflow): {\n    missingConnections: NodeConnectionSuggestion[];\n    optimizationSuggestions: string[];\n    parameterMappingOpportunities: ParameterMapping[];\n  } {\n    const analyses = this.analyzeWorkflowConnections(workflow);\n    const missingConnections: NodeConnectionSuggestion[] = [];\n    const optimizationSuggestions: string[] = [];\n    const parameterMappingOpportunities: ParameterMapping[] = [];\n\n    for (const analysis of analyses) {\n      missingConnections.push(...analysis.suggestedConnections);\n      parameterMappingOpportunities.push(...analysis.parameterMappings);\n    }\n\n    // Generate optimization suggestions\n    if (workflow.nodes && workflow.nodes.length > 10) {\n      optimizationSuggestions.push('Consider breaking this large workflow into smaller, reusable workflows');\n    }\n\n    const triggerNodes = workflow.nodes?.filter(n => n.type.includes('trigger')) || [];\n    if (triggerNodes.length === 0) {\n      optimizationSuggestions.push('This workflow appears to be missing a trigger node');\n    }\n\n    const disconnectedNodes = workflow.nodes?.filter(n => {\n      const hasConnections = missingConnections.some(c => c.sourceNodeId === n.id || c.targetNodeId === n.id);\n      return !hasConnections;\n    }) || [];\n\n    if (disconnectedNodes.length > 0) {\n      optimizationSuggestions.push(`${disconnectedNodes.length} nodes appear to be disconnected from the workflow`);\n    }\n\n    return {\n      missingConnections: missingConnections.slice(0, 10), // Top 10 suggestions\n      optimizationSuggestions,\n      parameterMappingOpportunities: parameterMappingOpportunities.slice(0, 15), // Top 15 mappings\n    };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "990cbff7fe2ad7849de24a6754a53216f256b9b1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_gio26vf7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_gio26vf7m();
cov_gio26vf7m().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_gio26vf7m().s[1]++;
exports.SuggestionEngine = void 0;
class SuggestionEngine {
  nodeTypeRegistry =
  /* istanbul ignore next */
  (cov_gio26vf7m().s[2]++, new Map());
  constructor(nodeTypes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[0]++;
    cov_gio26vf7m().s[3]++;
    if (nodeTypes) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[0][0]++;
      cov_gio26vf7m().s[4]++;
      this.loadNodeTypes(nodeTypes);
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[0][1]++;
    }
  }
  loadNodeTypes(nodeTypes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[1]++;
    cov_gio26vf7m().s[5]++;
    this.nodeTypeRegistry.clear();
    /* istanbul ignore next */
    cov_gio26vf7m().s[6]++;
    for (const nodeType of nodeTypes) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[7]++;
      this.nodeTypeRegistry.set(nodeType.name, nodeType);
    }
  }
  analyzeWorkflowConnections(workflow) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[2]++;
    const nodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[8]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[1][0]++, workflow.nodes) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[1][1]++, []));
    const connections =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[9]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[2][0]++, workflow.connections) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[2][1]++, {}));
    const analyses =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[10]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[11]++;
    for (const node of nodes) {
      const analysis =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[12]++, this.analyzeNodeConnections(node, nodes, connections));
      /* istanbul ignore next */
      cov_gio26vf7m().s[13]++;
      analyses.push(analysis);
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[14]++;
    return analyses;
  }
  analyzeNodeConnections(node, allNodes, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[3]++;
    const nodeTypeInfo =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[15]++, this.nodeTypeRegistry.get(node.type));
    const analysis =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[16]++, {
      nodeId: node.id,
      nodeType: node.type,
      inputs: this.analyzeNodeInputs(node, nodeTypeInfo, connections),
      outputs: this.analyzeNodeOutputs(node, nodeTypeInfo),
      suggestedConnections: [],
      parameterMappings: []
    });
    // Generate connection suggestions
    /* istanbul ignore next */
    cov_gio26vf7m().s[17]++;
    analysis.suggestedConnections = this.generateConnectionSuggestions(node, allNodes, nodeTypeInfo, connections);
    // Generate parameter mappings
    /* istanbul ignore next */
    cov_gio26vf7m().s[18]++;
    analysis.parameterMappings = this.generateParameterMappings(node, allNodes, nodeTypeInfo);
    /* istanbul ignore next */
    cov_gio26vf7m().s[19]++;
    return analysis;
  }
  analyzeNodeInputs(node, nodeTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[4]++;
    const inputs =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[20]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[21]++;
    if (nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[3][0]++;
      // Use node type information to determine expected inputs
      const inputProperties =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[22]++, nodeTypeInfo.properties.filter(prop => {
        /* istanbul ignore next */
        cov_gio26vf7m().f[5]++;
        cov_gio26vf7m().s[23]++;
        return /* istanbul ignore next */(cov_gio26vf7m().b[4][0]++, prop.type !== 'hidden') &&
        /* istanbul ignore next */
        (cov_gio26vf7m().b[4][1]++, prop.type !== 'notice');
      }));
      /* istanbul ignore next */
      cov_gio26vf7m().s[24]++;
      for (const prop of inputProperties) {
        /* istanbul ignore next */
        cov_gio26vf7m().s[25]++;
        inputs.push({
          name: prop.name,
          type: prop.type,
          required:
          /* istanbul ignore next */
          (cov_gio26vf7m().b[5][0]++, prop.required) ||
          /* istanbul ignore next */
          (cov_gio26vf7m().b[5][1]++, false),
          connectedFrom: this.findConnectionSource(node.id, prop.name, connections)
        });
      }
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[3][1]++;
      cov_gio26vf7m().s[26]++;
      // Fallback: analyze based on common input patterns
      inputs.push({
        name: 'main',
        type: 'object',
        required: true,
        connectedFrom: this.findConnectionSource(node.id, 'main', connections)
      });
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[27]++;
    return inputs;
  }
  analyzeNodeOutputs(node, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[6]++;
    const outputs =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[28]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[29]++;
    if (nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[6][0]++;
      cov_gio26vf7m().s[30]++;
      // Most n8n nodes have a 'main' output
      outputs.push({
        name: 'main',
        type: 'object',
        dataStructure: this.predictOutputStructure(node, nodeTypeInfo)
      });
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[6][1]++;
      cov_gio26vf7m().s[31]++;
      // Default output structure
      outputs.push({
        name: 'main',
        type: 'object',
        dataStructure: {}
      });
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[32]++;
    return outputs;
  }
  generateConnectionSuggestions(targetNode, allNodes, targetNodeTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[7]++;
    const suggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[33]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[34]++;
    for (const sourceNode of allNodes) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[35]++;
      if (sourceNode.id === targetNode.id) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[7][0]++;
        cov_gio26vf7m().s[36]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[7][1]++;
      }
      const sourceNodeTypeInfo =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[37]++, this.nodeTypeRegistry.get(sourceNode.type));
      const suggestion =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[38]++, this.evaluateNodeConnection(sourceNode, targetNode, sourceNodeTypeInfo, targetNodeTypeInfo, connections));
      /* istanbul ignore next */
      cov_gio26vf7m().s[39]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[9][0]++, suggestion) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[9][1]++, suggestion.confidence > 0.3)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[8][0]++;
        cov_gio26vf7m().s[40]++;
        suggestions.push(suggestion);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[8][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[41]++;
    return suggestions.sort((a, b) => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[8]++;
      cov_gio26vf7m().s[42]++;
      return b.confidence - a.confidence;
    }).slice(0, 5);
  }
  evaluateNodeConnection(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[9]++;
    let confidence =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[43]++, 0);
    let reasoning =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[44]++, '');
    const dataTypeMatch =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[45]++, this.checkDataTypeCompatibility(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo));
    // Rule-based scoring
    /* istanbul ignore next */
    cov_gio26vf7m().s[46]++;
    confidence += this.scoreBasedOnNodeTypes(sourceNode.type, targetNode.type);
    /* istanbul ignore next */
    cov_gio26vf7m().s[47]++;
    confidence += this.scoreBasedOnNodeNames(sourceNode.name, targetNode.name);
    /* istanbul ignore next */
    cov_gio26vf7m().s[48]++;
    confidence += this.scoreBasedOnPosition(sourceNode.position, targetNode.position);
    /* istanbul ignore next */
    cov_gio26vf7m().s[49]++;
    confidence += dataTypeMatch ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[10][0]++, 0.3) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[10][1]++, 0);
    // Check if already connected
    /* istanbul ignore next */
    cov_gio26vf7m().s[50]++;
    if (this.areNodesConnected(sourceNode.id, targetNode.id, connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[11][0]++;
      cov_gio26vf7m().s[51]++;
      confidence -= 0.5; // Reduce score for already connected nodes
      /* istanbul ignore next */
      cov_gio26vf7m().s[52]++;
      reasoning += 'Already connected. ';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[11][1]++;
    }
    // Generate reasoning
    cov_gio26vf7m().s[53]++;
    reasoning += this.generateConnectionReasoning(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo);
    /* istanbul ignore next */
    cov_gio26vf7m().s[54]++;
    if (confidence <= 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[12][0]++;
      cov_gio26vf7m().s[55]++;
      return null;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[12][1]++;
    }
    cov_gio26vf7m().s[56]++;
    return {
      sourceNodeId: sourceNode.id,
      targetNodeId: targetNode.id,
      sourceOutput: 'main',
      targetInput: 'main',
      confidence: Math.min(confidence, 1),
      reasoning: reasoning.trim(),
      dataTypeMatch,
      suggestedParameters: this.generateSuggestedParameters(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo)
    };
  }
  scoreBasedOnNodeTypes(sourceType, targetType) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[10]++;
    // Define common node type connection patterns
    const connectionPatterns =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[57]++, [{
      source: 'trigger',
      target: 'action',
      score: 0.4
    }, {
      source: 'webhook',
      target: 'set',
      score: 0.3
    }, {
      source: 'http',
      target: 'json',
      score: 0.3
    }, {
      source: 'database',
      target: 'set',
      score: 0.2
    }, {
      source: 'if',
      target: 'action',
      score: 0.2
    }]);
    /* istanbul ignore next */
    cov_gio26vf7m().s[58]++;
    for (const pattern of connectionPatterns) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[59]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[14][0]++, sourceType.toLowerCase().includes(pattern.source)) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[14][1]++, targetType.toLowerCase().includes(pattern.target))) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[13][0]++;
        cov_gio26vf7m().s[60]++;
        return pattern.score;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[13][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[61]++;
    return 0;
  }
  scoreBasedOnNodeNames(sourceName, targetName) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[11]++;
    // Score based on semantic similarity of node names
    const sourceWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[62]++, sourceName.toLowerCase().split(/\s+/));
    const targetWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[63]++, targetName.toLowerCase().split(/\s+/));
    let commonWords =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[64]++, 0);
    /* istanbul ignore next */
    cov_gio26vf7m().s[65]++;
    for (const sourceWord of sourceWords) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[66]++;
      if (targetWords.includes(sourceWord)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[15][0]++;
        cov_gio26vf7m().s[67]++;
        commonWords++;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[15][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[68]++;
    return commonWords > 0 ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[16][0]++, 0.1 * commonWords) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[16][1]++, 0);
  }
  scoreBasedOnPosition(sourcePos, targetPos) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[12]++;
    const distance =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[69]++, Math.sqrt(Math.pow(targetPos[0] - sourcePos[0], 2) + Math.pow(targetPos[1] - sourcePos[1], 2)));
    // Closer nodes are more likely to be connected
    /* istanbul ignore next */
    cov_gio26vf7m().s[70]++;
    return Math.max(0, 0.2 - distance / 1000);
  }
  checkDataTypeCompatibility(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[13]++;
    cov_gio26vf7m().s[71]++;
    // Basic data type compatibility check
    // Most n8n nodes work with JSON objects, so we'll be optimistic
    return true;
  }
  generateConnectionReasoning(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[14]++;
    const reasons =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[72]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[73]++;
    if (sourceNode.type.includes('trigger')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[17][0]++;
      cov_gio26vf7m().s[74]++;
      reasons.push('Source is a trigger node, typically connects to action nodes');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[17][1]++;
    }
    cov_gio26vf7m().s[75]++;
    if (targetNode.type.includes('http')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[18][0]++;
      cov_gio26vf7m().s[76]++;
      reasons.push('Target accepts HTTP data, compatible with most outputs');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[18][1]++;
    }
    cov_gio26vf7m().s[77]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[20][0]++, sourceNode.name.toLowerCase().includes('get')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[20][1]++, targetNode.name.toLowerCase().includes('set'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[19][0]++;
      cov_gio26vf7m().s[78]++;
      reasons.push('Data flow pattern: retrieve then process/store');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[19][1]++;
    }
    const distance =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[79]++, Math.sqrt(Math.pow(targetNode.position[0] - sourceNode.position[0], 2) + Math.pow(targetNode.position[1] - sourceNode.position[1], 2)));
    /* istanbul ignore next */
    cov_gio26vf7m().s[80]++;
    if (distance < 300) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[21][0]++;
      cov_gio26vf7m().s[81]++;
      reasons.push('Nodes are positioned close together');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[21][1]++;
    }
    cov_gio26vf7m().s[82]++;
    return reasons.join('. ');
  }
  generateParameterMappings(node, allNodes, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[15]++;
    const mappings =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[83]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[84]++;
    if (!nodeTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[22][0]++;
      cov_gio26vf7m().s[85]++;
      return mappings;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[22][1]++;
    }
    // Find upstream nodes that could provide data
    const upstreamNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[86]++, allNodes.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[16]++;
      cov_gio26vf7m().s[87]++;
      return /* istanbul ignore next */(cov_gio26vf7m().b[23][0]++, n.id !== node.id) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[23][1]++, this.isUpstreamNode(n, node));
    }));
    /* istanbul ignore next */
    cov_gio26vf7m().s[88]++;
    for (const prop of nodeTypeInfo.properties) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[89]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[25][0]++, prop.type === 'hidden') ||
      /* istanbul ignore next */
      (cov_gio26vf7m().b[25][1]++, prop.type === 'notice')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[24][0]++;
        cov_gio26vf7m().s[90]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[24][1]++;
      }
      const mapping =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[91]++, this.generateParameterMapping(node, prop, upstreamNodes));
      /* istanbul ignore next */
      cov_gio26vf7m().s[92]++;
      if (mapping) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[26][0]++;
        cov_gio26vf7m().s[93]++;
        mappings.push(mapping);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[26][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[94]++;
    return mappings.sort((a, b) => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[17]++;
      cov_gio26vf7m().s[95]++;
      return b.confidence - a.confidence;
    });
  }
  generateParameterMapping(node, property, upstreamNodes) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[18]++;
    cov_gio26vf7m().s[96]++;
    // Generate mappings based on parameter names and types
    for (const upstreamNode of upstreamNodes) {
      const similarity =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[97]++, this.calculateParameterSimilarity(property.name, upstreamNode));
      /* istanbul ignore next */
      cov_gio26vf7m().s[98]++;
      if (similarity > 0.5) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[27][0]++;
        cov_gio26vf7m().s[99]++;
        return {
          sourceParameter: `{{$node["${upstreamNode.name}"].json["${this.findBestSourceParameter(property.name, upstreamNode)}"]}}`,
          targetParameter: property.name,
          transformation: this.suggestTransformation(property, upstreamNode),
          confidence: similarity,
          dataType: property.type
        };
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[27][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[100]++;
    return null;
  }
  calculateParameterSimilarity(paramName, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[19]++;
    // Simple similarity based on common parameter names
    const commonMappings =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[101]++, {
      'email': ['email', 'mail', 'emailAddress'],
      'name': ['name', 'title', 'displayName'],
      'url': ['url', 'link', 'href'],
      'id': ['id', 'identifier', 'key'],
      'data': ['data', 'payload', 'content']
    });
    const paramLower =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[102]++, paramName.toLowerCase());
    /* istanbul ignore next */
    cov_gio26vf7m().s[103]++;
    for (const [target, sources] of Object.entries(commonMappings)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[104]++;
      if (paramLower.includes(target)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[28][0]++;
        cov_gio26vf7m().s[105]++;
        // Check if source node likely produces this type of data
        if (sources.some(source => {
          /* istanbul ignore next */
          cov_gio26vf7m().f[20]++;
          cov_gio26vf7m().s[106]++;
          return sourceNode.name.toLowerCase().includes(source);
        })) {
          /* istanbul ignore next */
          cov_gio26vf7m().b[29][0]++;
          cov_gio26vf7m().s[107]++;
          return 0.8;
        } else
        /* istanbul ignore next */
        {
          cov_gio26vf7m().b[29][1]++;
        }
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[28][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[108]++;
    return 0;
  }
  findBestSourceParameter(targetParam, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[21]++;
    // Try to match parameter names
    const targetLower =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[109]++, targetParam.toLowerCase());
    const commonMatches =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[110]++, {
      'email': 'email',
      'name': 'name',
      'url': 'url',
      'id': 'id',
      'data': 'data'
    });
    /* istanbul ignore next */
    cov_gio26vf7m().s[111]++;
    for (const [pattern, param] of Object.entries(commonMatches)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[112]++;
      if (targetLower.includes(pattern)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[30][0]++;
        cov_gio26vf7m().s[113]++;
        return param;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[30][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[114]++;
    return 'data'; // Default fallback
  }
  suggestTransformation(property, sourceNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[22]++;
    cov_gio26vf7m().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[32][0]++, property.type === 'string') &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[32][1]++, sourceNode.type.includes('json'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[31][0]++;
      cov_gio26vf7m().s[116]++;
      return 'JSON.stringify()';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[31][1]++;
    }
    cov_gio26vf7m().s[117]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[34][0]++, property.type === 'number') &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[34][1]++, sourceNode.name.toLowerCase().includes('string'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[33][0]++;
      cov_gio26vf7m().s[118]++;
      return 'parseInt()';
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[33][1]++;
    }
    cov_gio26vf7m().s[119]++;
    return undefined;
  }
  isUpstreamNode(sourceNode, targetNode) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[23]++;
    cov_gio26vf7m().s[120]++;
    // Simple position-based heuristic
    return /* istanbul ignore next */(cov_gio26vf7m().b[35][0]++, sourceNode.position[0] < targetNode.position[0]) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[35][1]++, sourceNode.position[1] < targetNode.position[1]);
  }
  findConnectionSource(nodeId, inputName, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[24]++;
    cov_gio26vf7m().s[121]++;
    if (!connections) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[36][0]++;
      cov_gio26vf7m().s[122]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[36][1]++;
    }
    // Parse n8n connections format to find source
    cov_gio26vf7m().s[123]++;
    for (const [sourceNodeName, sourceConnections] of Object.entries(connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[124]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[38][0]++, typeof sourceConnections === 'object') &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[38][1]++, sourceConnections !== null)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[37][0]++;
        cov_gio26vf7m().s[125]++;
        // Check if this source connects to our target node
        // This is a simplified check - actual n8n connection format is more complex
        return sourceNodeName;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[37][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[126]++;
    return undefined;
  }
  areNodesConnected(sourceId, targetId, connections) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[25]++;
    cov_gio26vf7m().s[127]++;
    if (!connections) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[39][0]++;
      cov_gio26vf7m().s[128]++;
      return false;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[39][1]++;
    }
    // Simplified connection check
    cov_gio26vf7m().s[129]++;
    for (const [nodeId, nodeConnections] of Object.entries(connections)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[130]++;
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][0]++, nodeId === sourceId) &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][1]++, typeof nodeConnections === 'object') &&
      /* istanbul ignore next */
      (cov_gio26vf7m().b[41][2]++, nodeConnections !== null)) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[40][0]++;
        cov_gio26vf7m().s[131]++;
        // Check if target is in the connections
        return JSON.stringify(nodeConnections).includes(targetId);
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[40][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[132]++;
    return false;
  }
  predictOutputStructure(node, nodeTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[26]++;
    // Predict the likely output structure based on node type
    const outputStructure =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[133]++, {});
    /* istanbul ignore next */
    cov_gio26vf7m().s[134]++;
    if (node.type.includes('http')) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[42][0]++;
      cov_gio26vf7m().s[135]++;
      outputStructure.data = {};
      /* istanbul ignore next */
      cov_gio26vf7m().s[136]++;
      outputStructure.headers = {};
      /* istanbul ignore next */
      cov_gio26vf7m().s[137]++;
      outputStructure.status = 200;
    } else {
      /* istanbul ignore next */
      cov_gio26vf7m().b[42][1]++;
      cov_gio26vf7m().s[138]++;
      if (node.type.includes('database')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[43][0]++;
        cov_gio26vf7m().s[139]++;
        outputStructure.rows = [];
        /* istanbul ignore next */
        cov_gio26vf7m().s[140]++;
        outputStructure.count = 0;
      } else {
        /* istanbul ignore next */
        cov_gio26vf7m().b[43][1]++;
        cov_gio26vf7m().s[141]++;
        if (node.type.includes('file')) {
          /* istanbul ignore next */
          cov_gio26vf7m().b[44][0]++;
          cov_gio26vf7m().s[142]++;
          outputStructure.filename = '';
          /* istanbul ignore next */
          cov_gio26vf7m().s[143]++;
          outputStructure.content = '';
          /* istanbul ignore next */
          cov_gio26vf7m().s[144]++;
          outputStructure.size = 0;
        } else {
          /* istanbul ignore next */
          cov_gio26vf7m().b[44][1]++;
          cov_gio26vf7m().s[145]++;
          outputStructure.data = {};
        }
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[146]++;
    return outputStructure;
  }
  generateSuggestedParameters(sourceNode, targetNode, sourceTypeInfo, targetTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[27]++;
    cov_gio26vf7m().s[147]++;
    if (!targetTypeInfo) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[45][0]++;
      cov_gio26vf7m().s[148]++;
      return undefined;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[45][1]++;
    }
    const suggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[149]++, {});
    // Generate parameter suggestions based on source node data
    /* istanbul ignore next */
    cov_gio26vf7m().s[150]++;
    for (const property of targetTypeInfo.properties.slice(0, 3)) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[151]++;
      // Limit to prevent large responses
      if (
      /* istanbul ignore next */
      (cov_gio26vf7m().b[47][0]++, property.type === 'hidden') ||
      /* istanbul ignore next */
      (cov_gio26vf7m().b[47][1]++, property.type === 'notice')) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[46][0]++;
        cov_gio26vf7m().s[152]++;
        continue;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[46][1]++;
      }
      const suggestion =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[153]++, this.suggestParameterFromSource(property, sourceNode, sourceTypeInfo));
      /* istanbul ignore next */
      cov_gio26vf7m().s[154]++;
      if (suggestion !== undefined) {
        /* istanbul ignore next */
        cov_gio26vf7m().b[48][0]++;
        cov_gio26vf7m().s[155]++;
        suggestions[property.name] = suggestion;
      } else
      /* istanbul ignore next */
      {
        cov_gio26vf7m().b[48][1]++;
      }
    }
    /* istanbul ignore next */
    cov_gio26vf7m().s[156]++;
    return Object.keys(suggestions).length > 0 ?
    /* istanbul ignore next */
    (cov_gio26vf7m().b[49][0]++, suggestions) :
    /* istanbul ignore next */
    (cov_gio26vf7m().b[49][1]++, undefined);
  }
  suggestParameterFromSource(property, sourceNode, sourceTypeInfo) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[28]++;
    const paramName =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[157]++, property.name.toLowerCase());
    // Common parameter mapping patterns
    /* istanbul ignore next */
    cov_gio26vf7m().s[158]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[51][0]++, paramName.includes('url')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[51][1]++, sourceNode.type.includes('http'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[50][0]++;
      cov_gio26vf7m().s[159]++;
      return `{{$node["${sourceNode.name}"].json["url"]}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[50][1]++;
    }
    cov_gio26vf7m().s[160]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[53][0]++, paramName.includes('data')) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[53][1]++, paramName.includes('body'))) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[52][0]++;
      cov_gio26vf7m().s[161]++;
      return `{{$node["${sourceNode.name}"].json}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[52][1]++;
    }
    cov_gio26vf7m().s[162]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[55][0]++, paramName.includes('id')) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[55][1]++, sourceNode.parameters?.id)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[54][0]++;
      cov_gio26vf7m().s[163]++;
      return `{{$node["${sourceNode.name}"].json["id"]}}`;
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[54][1]++;
    }
    cov_gio26vf7m().s[164]++;
    return undefined;
  }
  generateSmartWorkflowSuggestions(workflow) {
    /* istanbul ignore next */
    cov_gio26vf7m().f[29]++;
    const analyses =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[165]++, this.analyzeWorkflowConnections(workflow));
    const missingConnections =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[166]++, []);
    const optimizationSuggestions =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[167]++, []);
    const parameterMappingOpportunities =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[168]++, []);
    /* istanbul ignore next */
    cov_gio26vf7m().s[169]++;
    for (const analysis of analyses) {
      /* istanbul ignore next */
      cov_gio26vf7m().s[170]++;
      missingConnections.push(...analysis.suggestedConnections);
      /* istanbul ignore next */
      cov_gio26vf7m().s[171]++;
      parameterMappingOpportunities.push(...analysis.parameterMappings);
    }
    // Generate optimization suggestions
    /* istanbul ignore next */
    cov_gio26vf7m().s[172]++;
    if (
    /* istanbul ignore next */
    (cov_gio26vf7m().b[57][0]++, workflow.nodes) &&
    /* istanbul ignore next */
    (cov_gio26vf7m().b[57][1]++, workflow.nodes.length > 10)) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[56][0]++;
      cov_gio26vf7m().s[173]++;
      optimizationSuggestions.push('Consider breaking this large workflow into smaller, reusable workflows');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[56][1]++;
    }
    const triggerNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[174]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[58][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[30]++;
      cov_gio26vf7m().s[175]++;
      return n.type.includes('trigger');
    })) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[58][1]++, []));
    /* istanbul ignore next */
    cov_gio26vf7m().s[176]++;
    if (triggerNodes.length === 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[59][0]++;
      cov_gio26vf7m().s[177]++;
      optimizationSuggestions.push('This workflow appears to be missing a trigger node');
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[59][1]++;
    }
    const disconnectedNodes =
    /* istanbul ignore next */
    (cov_gio26vf7m().s[178]++,
    /* istanbul ignore next */
    (cov_gio26vf7m().b[60][0]++, workflow.nodes?.filter(n => {
      /* istanbul ignore next */
      cov_gio26vf7m().f[31]++;
      const hasConnections =
      /* istanbul ignore next */
      (cov_gio26vf7m().s[179]++, missingConnections.some(c => {
        /* istanbul ignore next */
        cov_gio26vf7m().f[32]++;
        cov_gio26vf7m().s[180]++;
        return /* istanbul ignore next */(cov_gio26vf7m().b[61][0]++, c.sourceNodeId === n.id) ||
        /* istanbul ignore next */
        (cov_gio26vf7m().b[61][1]++, c.targetNodeId === n.id);
      }));
      /* istanbul ignore next */
      cov_gio26vf7m().s[181]++;
      return !hasConnections;
    })) ||
    /* istanbul ignore next */
    (cov_gio26vf7m().b[60][1]++, []));
    /* istanbul ignore next */
    cov_gio26vf7m().s[182]++;
    if (disconnectedNodes.length > 0) {
      /* istanbul ignore next */
      cov_gio26vf7m().b[62][0]++;
      cov_gio26vf7m().s[183]++;
      optimizationSuggestions.push(`${disconnectedNodes.length} nodes appear to be disconnected from the workflow`);
    } else
    /* istanbul ignore next */
    {
      cov_gio26vf7m().b[62][1]++;
    }
    cov_gio26vf7m().s[184]++;
    return {
      missingConnections: missingConnections.slice(0, 10),
      // Top 10 suggestions
      optimizationSuggestions,
      parameterMappingOpportunities: parameterMappingOpportunities.slice(0, 15) // Top 15 mappings
    };
  }
}
/* istanbul ignore next */
cov_gio26vf7m().s[185]++;
exports.SuggestionEngine = SuggestionEngine;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,