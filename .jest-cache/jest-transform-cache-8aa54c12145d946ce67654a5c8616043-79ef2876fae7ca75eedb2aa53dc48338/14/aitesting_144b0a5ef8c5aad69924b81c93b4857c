796256a30dd8ffe629a6ce1ad14eaac6
"use strict";

/* istanbul ignore next */
function cov_2qzagbmmma() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-testing.ts";
  var hash = "1469dd99c6703c690061aefc14ce0211ba605924";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-testing.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 52
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 7,
          column: 33
        },
        end: {
          line: 11,
          column: 2
        }
      },
      "5": {
        start: {
          line: 12,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "6": {
        start: {
          line: 18,
          column: 31
        },
        end: {
          line: 22,
          column: 2
        }
      },
      "7": {
        start: {
          line: 23,
          column: 32
        },
        end: {
          line: 28,
          column: 2
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 129,
          column: 7
        }
      },
      "9": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 127,
          column: 13
        }
      },
      "10": {
        start: {
          line: 45,
          column: 35
        },
        end: {
          line: 53,
          column: 17
        }
      },
      "11": {
        start: {
          line: 55,
          column: 41
        },
        end: {
          line: 60,
          column: 17
        }
      },
      "12": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "13": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 70,
          column: 21
        }
      },
      "14": {
        start: {
          line: 64,
          column: 24
        },
        end: {
          line: 69,
          column: 25
        }
      },
      "15": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 65,
          column: 64
        }
      },
      "16": {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 68,
          column: 64
        }
      },
      "17": {
        start: {
          line: 73,
          column: 16
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "18": {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 100
        }
      },
      "19": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 78,
          column: 17
        }
      },
      "20": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 77,
          column: 92
        }
      },
      "21": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 81,
          column: 17
        }
      },
      "22": {
        start: {
          line: 80,
          column: 20
        },
        end: {
          line: 80,
          column: 103
        }
      },
      "23": {
        start: {
          line: 82,
          column: 16
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "24": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 99
        }
      },
      "25": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 89,
          column: 17
        }
      },
      "26": {
        start: {
          line: 88,
          column: 20
        },
        end: {
          line: 88,
          column: 117
        }
      },
      "27": {
        start: {
          line: 91,
          column: 16
        },
        end: {
          line: 96,
          column: 17
        }
      },
      "28": {
        start: {
          line: 92,
          column: 40
        },
        end: {
          line: 92,
          column: 116
        }
      },
      "29": {
        start: {
          line: 92,
          column: 67
        },
        end: {
          line: 92,
          column: 115
        }
      },
      "30": {
        start: {
          line: 92,
          column: 100
        },
        end: {
          line: 92,
          column: 114
        }
      },
      "31": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 95,
          column: 21
        }
      },
      "32": {
        start: {
          line: 94,
          column: 24
        },
        end: {
          line: 94,
          column: 104
        }
      },
      "33": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 102,
          column: 93
        }
      },
      "34": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 123,
          column: 76
        }
      },
      "35": {
        start: {
          line: 110,
          column: 56
        },
        end: {
          line: 110,
          column: 64
        }
      },
      "36": {
        start: {
          line: 115,
          column: 53
        },
        end: {
          line: 115,
          column: 61
        }
      },
      "37": {
        start: {
          line: 120,
          column: 58
        },
        end: {
          line: 120,
          column: 67
        }
      },
      "38": {
        start: {
          line: 126,
          column: 16
        },
        end: {
          line: 126,
          column: 96
        }
      },
      "39": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 225,
          column: 7
        }
      },
      "40": {
        start: {
          line: 143,
          column: 27
        },
        end: {
          line: 143,
          column: 38
        }
      },
      "41": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 146,
          column: 13
        }
      },
      "42": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 104
        }
      },
      "43": {
        start: {
          line: 147,
          column: 12
        },
        end: {
          line: 223,
          column: 13
        }
      },
      "44": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 148,
          column: 74
        }
      },
      "45": {
        start: {
          line: 149,
          column: 29
        },
        end: {
          line: 149,
          column: 76
        }
      },
      "46": {
        start: {
          line: 149,
          column: 55
        },
        end: {
          line: 149,
          column: 75
        }
      },
      "47": {
        start: {
          line: 150,
          column: 16
        },
        end: {
          line: 152,
          column: 17
        }
      },
      "48": {
        start: {
          line: 151,
          column: 20
        },
        end: {
          line: 151,
          column: 126
        }
      },
      "49": {
        start: {
          line: 153,
          column: 35
        },
        end: {
          line: 174,
          column: 17
        }
      },
      "50": {
        start: {
          line: 176,
          column: 16
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "51": {
        start: {
          line: 177,
          column: 20
        },
        end: {
          line: 177,
          column: 69
        }
      },
      "52": {
        start: {
          line: 180,
          column: 16
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "53": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 69
        }
      },
      "54": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "55": {
        start: {
          line: 184,
          column: 20
        },
        end: {
          line: 197,
          column: 79
        }
      },
      "56": {
        start: {
          line: 200,
          column: 42
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "57": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 219,
          column: 117
        }
      },
      "58": {
        start: {
          line: 222,
          column: 16
        },
        end: {
          line: 222,
          column: 90
        }
      },
      "59": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 322,
          column: 7
        }
      },
      "60": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "61": {
        start: {
          line: 240,
          column: 39
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "62": {
        start: {
          line: 255,
          column: 42
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "63": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 269,
          column: 19
        }
      },
      "64": {
        start: {
          line: 265,
          column: 20
        },
        end: {
          line: 268,
          column: 21
        }
      },
      "65": {
        start: {
          line: 266,
          column: 24
        },
        end: {
          line: 266,
          column: 71
        }
      },
      "66": {
        start: {
          line: 267,
          column: 24
        },
        end: {
          line: 267,
          column: 110
        }
      },
      "67": {
        start: {
          line: 271,
          column: 35
        },
        end: {
          line: 271,
          column: 91
        }
      },
      "68": {
        start: {
          line: 272,
          column: 39
        },
        end: {
          line: 272,
          column: 96
        }
      },
      "69": {
        start: {
          line: 272,
          column: 66
        },
        end: {
          line: 272,
          column: 95
        }
      },
      "70": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 275,
          column: 17
        }
      },
      "71": {
        start: {
          line: 274,
          column: 20
        },
        end: {
          line: 274,
          column: 108
        }
      },
      "72": {
        start: {
          line: 278,
          column: 16
        },
        end: {
          line: 296,
          column: 17
        }
      },
      "73": {
        start: {
          line: 279,
          column: 20
        },
        end: {
          line: 290,
          column: 21
        }
      },
      "74": {
        start: {
          line: 280,
          column: 24
        },
        end: {
          line: 280,
          column: 97
        }
      },
      "75": {
        start: {
          line: 282,
          column: 25
        },
        end: {
          line: 290,
          column: 21
        }
      },
      "76": {
        start: {
          line: 283,
          column: 24
        },
        end: {
          line: 283,
          column: 80
        }
      },
      "77": {
        start: {
          line: 285,
          column: 25
        },
        end: {
          line: 290,
          column: 21
        }
      },
      "78": {
        start: {
          line: 286,
          column: 24
        },
        end: {
          line: 286,
          column: 80
        }
      },
      "79": {
        start: {
          line: 289,
          column: 24
        },
        end: {
          line: 289,
          column: 85
        }
      },
      "80": {
        start: {
          line: 293,
          column: 20
        },
        end: {
          line: 293,
          column: 66
        }
      },
      "81": {
        start: {
          line: 294,
          column: 20
        },
        end: {
          line: 294,
          column: 81
        }
      },
      "82": {
        start: {
          line: 295,
          column: 20
        },
        end: {
          line: 295,
          column: 43
        }
      },
      "83": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 316,
          column: 124
        }
      },
      "84": {
        start: {
          line: 306,
          column: 59
        },
        end: {
          line: 306,
          column: 68
        }
      },
      "85": {
        start: {
          line: 311,
          column: 57
        },
        end: {
          line: 311,
          column: 65
        }
      },
      "86": {
        start: {
          line: 319,
          column: 16
        },
        end: {
          line: 319,
          column: 96
        }
      },
      "87": {
        start: {
          line: 324,
          column: 4
        },
        end: {
          line: 438,
          column: 7
        }
      },
      "88": {
        start: {
          line: 336,
          column: 27
        },
        end: {
          line: 336,
          column: 38
        }
      },
      "89": {
        start: {
          line: 337,
          column: 12
        },
        end: {
          line: 339,
          column: 13
        }
      },
      "90": {
        start: {
          line: 338,
          column: 16
        },
        end: {
          line: 338,
          column: 104
        }
      },
      "91": {
        start: {
          line: 340,
          column: 12
        },
        end: {
          line: 436,
          column: 13
        }
      },
      "92": {
        start: {
          line: 341,
          column: 33
        },
        end: {
          line: 341,
          column: 74
        }
      },
      "93": {
        start: {
          line: 342,
          column: 29
        },
        end: {
          line: 342,
          column: 76
        }
      },
      "94": {
        start: {
          line: 342,
          column: 55
        },
        end: {
          line: 342,
          column: 75
        }
      },
      "95": {
        start: {
          line: 343,
          column: 16
        },
        end: {
          line: 345,
          column: 17
        }
      },
      "96": {
        start: {
          line: 344,
          column: 20
        },
        end: {
          line: 344,
          column: 126
        }
      },
      "97": {
        start: {
          line: 346,
          column: 43
        },
        end: {
          line: 364,
          column: 17
        }
      },
      "98": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 393,
          column: 17
        }
      },
      "99": {
        start: {
          line: 366,
          column: 29
        },
        end: {
          line: 366,
          column: 30
        }
      },
      "100": {
        start: {
          line: 367,
          column: 20
        },
        end: {
          line: 392,
          column: 21
        }
      },
      "101": {
        start: {
          line: 367,
          column: 33
        },
        end: {
          line: 367,
          column: 34
        }
      },
      "102": {
        start: {
          line: 368,
          column: 40
        },
        end: {
          line: 368,
          column: 60
        }
      },
      "103": {
        start: {
          line: 369,
          column: 45
        },
        end: {
          line: 369,
          column: 71
        }
      },
      "104": {
        start: {
          line: 370,
          column: 39
        },
        end: {
          line: 370,
          column: 85
        }
      },
      "105": {
        start: {
          line: 371,
          column: 37
        },
        end: {
          line: 371,
          column: 53
        }
      },
      "106": {
        start: {
          line: 372,
          column: 43
        },
        end: {
          line: 381,
          column: 25
        }
      },
      "107": {
        start: {
          line: 382,
          column: 24
        },
        end: {
          line: 382,
          column: 68
        }
      },
      "108": {
        start: {
          line: 383,
          column: 24
        },
        end: {
          line: 383,
          column: 64
        }
      },
      "109": {
        start: {
          line: 384,
          column: 24
        },
        end: {
          line: 391,
          column: 25
        }
      },
      "110": {
        start: {
          line: 385,
          column: 28
        },
        end: {
          line: 385,
          column: 73
        }
      },
      "111": {
        start: {
          line: 386,
          column: 28
        },
        end: {
          line: 386,
          column: 77
        }
      },
      "112": {
        start: {
          line: 387,
          column: 28
        },
        end: {
          line: 387,
          column: 73
        }
      },
      "113": {
        start: {
          line: 390,
          column: 28
        },
        end: {
          line: 390,
          column: 69
        }
      },
      "114": {
        start: {
          line: 395,
          column: 42
        },
        end: {
          line: 395,
          column: 91
        }
      },
      "115": {
        start: {
          line: 395,
          column: 81
        },
        end: {
          line: 395,
          column: 90
        }
      },
      "116": {
        start: {
          line: 396,
          column: 38
        },
        end: {
          line: 396,
          column: 80
        }
      },
      "117": {
        start: {
          line: 396,
          column: 65
        },
        end: {
          line: 396,
          column: 79
        }
      },
      "118": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 398,
          column: 84
        }
      },
      "119": {
        start: {
          line: 398,
          column: 51
        },
        end: {
          line: 398,
          column: 56
        }
      },
      "120": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 399,
          column: 88
        }
      },
      "121": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 400,
          column: 88
        }
      },
      "122": {
        start: {
          line: 401,
          column: 36
        },
        end: {
          line: 402,
          column: 23
        }
      },
      "123": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 432,
          column: 112
        }
      },
      "124": {
        start: {
          line: 435,
          column: 16
        },
        end: {
          line: 435,
          column: 98
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAITestingTools",
        decl: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 30,
            column: 29
          }
        },
        loc: {
          start: {
            line: 30,
            column: 49
          },
          end: {
            line: 439,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 18
          }
        },
        loc: {
          start: {
            line: 43,
            column: 33
          },
          end: {
            line: 128,
            column: 9
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 61,
            column: 41
          },
          end: {
            line: 61,
            column: 42
          }
        },
        loc: {
          start: {
            line: 61,
            column: 52
          },
          end: {
            line: 71,
            column: 17
          }
        },
        line: 61
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 62
          },
          end: {
            line: 92,
            column: 63
          }
        },
        loc: {
          start: {
            line: 92,
            column: 67
          },
          end: {
            line: 92,
            column: 115
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 92,
            column: 94
          },
          end: {
            line: 92,
            column: 95
          }
        },
        loc: {
          start: {
            line: 92,
            column: 100
          },
          end: {
            line: 92,
            column: 114
          }
        },
        line: 92
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 110,
            column: 51
          },
          end: {
            line: 110,
            column: 52
          }
        },
        loc: {
          start: {
            line: 110,
            column: 56
          },
          end: {
            line: 110,
            column: 64
          }
        },
        line: 110
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 115,
            column: 48
          },
          end: {
            line: 115,
            column: 49
          }
        },
        loc: {
          start: {
            line: 115,
            column: 53
          },
          end: {
            line: 115,
            column: 61
          }
        },
        line: 115
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 120,
            column: 53
          },
          end: {
            line: 120,
            column: 54
          }
        },
        loc: {
          start: {
            line: 120,
            column: 58
          },
          end: {
            line: 120,
            column: 67
          }
        },
        line: 120
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 142,
            column: 17
          },
          end: {
            line: 142,
            column: 18
          }
        },
        loc: {
          start: {
            line: 142,
            column: 33
          },
          end: {
            line: 224,
            column: 9
          }
        },
        line: 142
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 149,
            column: 50
          },
          end: {
            line: 149,
            column: 51
          }
        },
        loc: {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 149,
            column: 75
          }
        },
        line: 149
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 238,
            column: 17
          },
          end: {
            line: 238,
            column: 18
          }
        },
        loc: {
          start: {
            line: 238,
            column: 33
          },
          end: {
            line: 321,
            column: 9
          }
        },
        line: 238
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 264,
            column: 42
          },
          end: {
            line: 264,
            column: 43
          }
        },
        loc: {
          start: {
            line: 264,
            column: 53
          },
          end: {
            line: 269,
            column: 17
          }
        },
        line: 264
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 272,
            column: 55
          },
          end: {
            line: 272,
            column: 56
          }
        },
        loc: {
          start: {
            line: 272,
            column: 66
          },
          end: {
            line: 272,
            column: 95
          }
        },
        line: 272
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 306,
            column: 54
          },
          end: {
            line: 306,
            column: 55
          }
        },
        loc: {
          start: {
            line: 306,
            column: 59
          },
          end: {
            line: 306,
            column: 68
          }
        },
        line: 306
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 311,
            column: 52
          },
          end: {
            line: 311,
            column: 53
          }
        },
        loc: {
          start: {
            line: 311,
            column: 57
          },
          end: {
            line: 311,
            column: 65
          }
        },
        line: 311
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 335,
            column: 17
          },
          end: {
            line: 335,
            column: 18
          }
        },
        loc: {
          start: {
            line: 335,
            column: 33
          },
          end: {
            line: 437,
            column: 9
          }
        },
        line: 335
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 342,
            column: 50
          },
          end: {
            line: 342,
            column: 51
          }
        },
        loc: {
          start: {
            line: 342,
            column: 55
          },
          end: {
            line: 342,
            column: 75
          }
        },
        line: 342
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 395,
            column: 76
          },
          end: {
            line: 395,
            column: 77
          }
        },
        loc: {
          start: {
            line: 395,
            column: 81
          },
          end: {
            line: 395,
            column: 90
          }
        },
        line: 395
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 396,
            column: 60
          },
          end: {
            line: 396,
            column: 61
          }
        },
        loc: {
          start: {
            line: 396,
            column: 65
          },
          end: {
            line: 396,
            column: 79
          }
        },
        line: 396
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 398,
            column: 41
          },
          end: {
            line: 398,
            column: 42
          }
        },
        loc: {
          start: {
            line: 398,
            column: 51
          },
          end: {
            line: 398,
            column: 56
          }
        },
        line: 398
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 69,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 69,
            column: 25
          }
        }, {
          start: {
            line: 67,
            column: 29
          },
          end: {
            line: 69,
            column: 25
          }
        }],
        line: 64
      },
      "1": {
        loc: {
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 73,
            column: 16
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 78,
            column: 17
          }
        }],
        line: 73
      },
      "2": {
        loc: {
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 78,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 21
          },
          end: {
            line: 78,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "3": {
        loc: {
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 16
          },
          end: {
            line: 81,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "4": {
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "5": {
        loc: {
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 84,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 82,
            column: 20
          },
          end: {
            line: 82,
            column: 46
          }
        }, {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 83,
            column: 51
          }
        }, {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 84,
            column: 53
          }
        }],
        line: 82
      },
      "6": {
        loc: {
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 89,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 16
          },
          end: {
            line: 89,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 87
      },
      "7": {
        loc: {
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 16
          },
          end: {
            line: 96,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "8": {
        loc: {
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 95,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 93
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 62
          },
          end: {
            line: 98,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 87
          },
          end: {
            line: 98,
            column: 89
          }
        }, {
          start: {
            line: 98,
            column: 92
          },
          end: {
            line: 98,
            column: 93
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 99,
            column: 21
          },
          end: {
            line: 99,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 99,
            column: 48
          },
          end: {
            line: 99,
            column: 50
          }
        }, {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 99,
            column: 54
          }
        }],
        line: 99
      },
      "11": {
        loc: {
          start: {
            line: 100,
            column: 21
          },
          end: {
            line: 100,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 100,
            column: 55
          },
          end: {
            line: 100,
            column: 57
          }
        }, {
          start: {
            line: 100,
            column: 60
          },
          end: {
            line: 100,
            column: 61
          }
        }],
        line: 100
      },
      "12": {
        loc: {
          start: {
            line: 101,
            column: 21
          },
          end: {
            line: 101,
            column: 60
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 54
          },
          end: {
            line: 101,
            column: 56
          }
        }, {
          start: {
            line: 101,
            column: 59
          },
          end: {
            line: 101,
            column: 60
          }
        }],
        line: 101
      },
      "13": {
        loc: {
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 102,
            column: 89
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 102,
            column: 83
          },
          end: {
            line: 102,
            column: 85
          }
        }, {
          start: {
            line: 102,
            column: 88
          },
          end: {
            line: 102,
            column: 89
          }
        }],
        line: 102
      },
      "14": {
        loc: {
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 102,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 21
          },
          end: {
            line: 102,
            column: 46
          }
        }, {
          start: {
            line: 102,
            column: 50
          },
          end: {
            line: 102,
            column: 80
          }
        }],
        line: 102
      },
      "15": {
        loc: {
          start: {
            line: 109,
            column: 21
          },
          end: {
            line: 111,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 26
          },
          end: {
            line: 110,
            column: 76
          }
        }, {
          start: {
            line: 111,
            column: 26
          },
          end: {
            line: 111,
            column: 49
          }
        }],
        line: 109
      },
      "16": {
        loc: {
          start: {
            line: 114,
            column: 21
          },
          end: {
            line: 116,
            column: 45
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 115,
            column: 26
          },
          end: {
            line: 115,
            column: 73
          }
        }, {
          start: {
            line: 116,
            column: 26
          },
          end: {
            line: 116,
            column: 45
          }
        }],
        line: 114
      },
      "17": {
        loc: {
          start: {
            line: 119,
            column: 21
          },
          end: {
            line: 121,
            column: 44
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 120,
            column: 26
          },
          end: {
            line: 120,
            column: 79
          }
        }, {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 121,
            column: 44
          }
        }],
        line: 119
      },
      "18": {
        loc: {
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 12
          },
          end: {
            line: 146,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "19": {
        loc: {
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 16
          },
          end: {
            line: 152,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "20": {
        loc: {
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 176,
            column: 16
          },
          end: {
            line: 178,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 176
      },
      "21": {
        loc: {
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 180,
            column: 16
          },
          end: {
            line: 182,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 180
      },
      "22": {
        loc: {
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 180,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 20
          },
          end: {
            line: 180,
            column: 34
          }
        }, {
          start: {
            line: 180,
            column: 38
          },
          end: {
            line: 180,
            column: 71
          }
        }],
        line: 180
      },
      "23": {
        loc: {
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 183,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 183
      },
      "24": {
        loc: {
          start: {
            line: 187,
            column: 36
          },
          end: {
            line: 187,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 187,
            column: 36
          },
          end: {
            line: 187,
            column: 66
          }
        }, {
          start: {
            line: 187,
            column: 70
          },
          end: {
            line: 187,
            column: 86
          }
        }],
        line: 187
      },
      "25": {
        loc: {
          start: {
            line: 188,
            column: 42
          },
          end: {
            line: 188,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 188,
            column: 42
          },
          end: {
            line: 188,
            column: 78
          }
        }, {
          start: {
            line: 188,
            column: 82
          },
          end: {
            line: 188,
            column: 91
          }
        }],
        line: 188
      },
      "26": {
        loc: {
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 189,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 189,
            column: 75
          }
        }, {
          start: {
            line: 189,
            column: 79
          },
          end: {
            line: 189,
            column: 88
          }
        }],
        line: 189
      },
      "27": {
        loc: {
          start: {
            line: 191,
            column: 50
          },
          end: {
            line: 191,
            column: 102
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 191,
            column: 93
          },
          end: {
            line: 191,
            column: 96
          }
        }, {
          start: {
            line: 191,
            column: 99
          },
          end: {
            line: 191,
            column: 102
          }
        }],
        line: 191
      },
      "28": {
        loc: {
          start: {
            line: 192,
            column: 51
          },
          end: {
            line: 192,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 94
          },
          end: {
            line: 192,
            column: 97
          }
        }, {
          start: {
            line: 192,
            column: 100
          },
          end: {
            line: 192,
            column: 103
          }
        }],
        line: 192
      },
      "29": {
        loc: {
          start: {
            line: 193,
            column: 47
          },
          end: {
            line: 193,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 193,
            column: 87
          },
          end: {
            line: 193,
            column: 90
          }
        }, {
          start: {
            line: 193,
            column: 93
          },
          end: {
            line: 193,
            column: 96
          }
        }],
        line: 193
      },
      "30": {
        loc: {
          start: {
            line: 194,
            column: 48
          },
          end: {
            line: 194,
            column: 98
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 89
          },
          end: {
            line: 194,
            column: 92
          }
        }, {
          start: {
            line: 194,
            column: 95
          },
          end: {
            line: 194,
            column: 98
          }
        }],
        line: 194
      },
      "31": {
        loc: {
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 210,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 32
          },
          end: {
            line: 210,
            column: 62
          }
        }, {
          start: {
            line: 210,
            column: 66
          },
          end: {
            line: 210,
            column: 82
          }
        }],
        line: 210
      },
      "32": {
        loc: {
          start: {
            line: 213,
            column: 34
          },
          end: {
            line: 213,
            column: 71
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 62
          },
          end: {
            line: 213,
            column: 65
          }
        }, {
          start: {
            line: 213,
            column: 68
          },
          end: {
            line: 213,
            column: 71
          }
        }],
        line: 213
      },
      "33": {
        loc: {
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 243,
            column: 29
          },
          end: {
            line: 243,
            column: 41
          }
        }, {
          start: {
            line: 243,
            column: 45
          },
          end: {
            line: 243,
            column: 47
          }
        }],
        line: 243
      },
      "34": {
        loc: {
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 268,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 20
          },
          end: {
            line: 268,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "35": {
        loc: {
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 16
          },
          end: {
            line: 275,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "36": {
        loc: {
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 273,
            column: 20
          },
          end: {
            line: 273,
            column: 34
          }
        }, {
          start: {
            line: 273,
            column: 38
          },
          end: {
            line: 273,
            column: 51
          }
        }],
        line: 273
      },
      "37": {
        loc: {
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 290,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 279,
            column: 20
          },
          end: {
            line: 290,
            column: 21
          }
        }, {
          start: {
            line: 282,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        }],
        line: 279
      },
      "38": {
        loc: {
          start: {
            line: 282,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 282,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        }, {
          start: {
            line: 285,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        }],
        line: 282
      },
      "39": {
        loc: {
          start: {
            line: 285,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 285,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        }, {
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 290,
            column: 21
          }
        }],
        line: 285
      },
      "40": {
        loc: {
          start: {
            line: 300,
            column: 39
          },
          end: {
            line: 300,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 300,
            column: 79
          },
          end: {
            line: 300,
            column: 82
          }
        }, {
          start: {
            line: 300,
            column: 85
          },
          end: {
            line: 300,
            column: 88
          }
        }],
        line: 300
      },
      "41": {
        loc: {
          start: {
            line: 301,
            column: 45
          },
          end: {
            line: 301,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 91
          },
          end: {
            line: 301,
            column: 94
          }
        }, {
          start: {
            line: 301,
            column: 97
          },
          end: {
            line: 301,
            column: 100
          }
        }],
        line: 301
      },
      "42": {
        loc: {
          start: {
            line: 302,
            column: 47
          },
          end: {
            line: 302,
            column: 103
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 94
          },
          end: {
            line: 302,
            column: 97
          }
        }, {
          start: {
            line: 302,
            column: 100
          },
          end: {
            line: 302,
            column: 103
          }
        }],
        line: 302
      },
      "43": {
        loc: {
          start: {
            line: 303,
            column: 40
          },
          end: {
            line: 303,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 81
          },
          end: {
            line: 303,
            column: 84
          }
        }, {
          start: {
            line: 303,
            column: 87
          },
          end: {
            line: 303,
            column: 90
          }
        }],
        line: 303
      },
      "44": {
        loc: {
          start: {
            line: 305,
            column: 21
          },
          end: {
            line: 307,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 26
          },
          end: {
            line: 306,
            column: 80
          }
        }, {
          start: {
            line: 307,
            column: 26
          },
          end: {
            line: 307,
            column: 41
          }
        }],
        line: 305
      },
      "45": {
        loc: {
          start: {
            line: 310,
            column: 21
          },
          end: {
            line: 312,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 311,
            column: 26
          },
          end: {
            line: 311,
            column: 77
          }
        }, {
          start: {
            line: 312,
            column: 26
          },
          end: {
            line: 312,
            column: 39
          }
        }],
        line: 310
      },
      "46": {
        loc: {
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 12
          },
          end: {
            line: 339,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "47": {
        loc: {
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 345,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 16
          },
          end: {
            line: 345,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "48": {
        loc: {
          start: {
            line: 384,
            column: 24
          },
          end: {
            line: 391,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 384,
            column: 24
          },
          end: {
            line: 391,
            column: 25
          }
        }, {
          start: {
            line: 389,
            column: 29
          },
          end: {
            line: 391,
            column: 25
          }
        }],
        line: 384
      },
      "49": {
        loc: {
          start: {
            line: 417,
            column: 45
          },
          end: {
            line: 421,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 418,
            column: 26
          },
          end: {
            line: 418,
            column: 40
          }
        }, {
          start: {
            line: 419,
            column: 26
          },
          end: {
            line: 421,
            column: 52
          }
        }],
        line: 417
      },
      "50": {
        loc: {
          start: {
            line: 417,
            column: 45
          },
          end: {
            line: 417,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 417,
            column: 45
          },
          end: {
            line: 417,
            column: 61
          }
        }, {
          start: {
            line: 417,
            column: 65
          },
          end: {
            line: 417,
            column: 118
          }
        }],
        line: 417
      },
      "51": {
        loc: {
          start: {
            line: 419,
            column: 26
          },
          end: {
            line: 421,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 420,
            column: 30
          },
          end: {
            line: 420,
            column: 39
          }
        }, {
          start: {
            line: 421,
            column: 30
          },
          end: {
            line: 421,
            column: 52
          }
        }],
        line: 419
      },
      "52": {
        loc: {
          start: {
            line: 419,
            column: 26
          },
          end: {
            line: 419,
            column: 99
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 419,
            column: 26
          },
          end: {
            line: 419,
            column: 42
          }
        }, {
          start: {
            line: 419,
            column: 46
          },
          end: {
            line: 419,
            column: 99
          }
        }],
        line: 419
      },
      "53": {
        loc: {
          start: {
            line: 422,
            column: 38
          },
          end: {
            line: 422,
            column: 166
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 422,
            column: 135
          },
          end: {
            line: 422,
            column: 150
          }
        }, {
          start: {
            line: 422,
            column: 153
          },
          end: {
            line: 422,
            column: 166
          }
        }],
        line: 422
      },
      "54": {
        loc: {
          start: {
            line: 425,
            column: 21
          },
          end: {
            line: 425,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 425,
            column: 40
          },
          end: {
            line: 425,
            column: 102
          }
        }, {
          start: {
            line: 425,
            column: 105
          },
          end: {
            line: 425,
            column: 107
          }
        }],
        line: 425
      },
      "55": {
        loc: {
          start: {
            line: 426,
            column: 21
          },
          end: {
            line: 428,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 427,
            column: 26
          },
          end: {
            line: 427,
            column: 104
          }
        }, {
          start: {
            line: 428,
            column: 26
          },
          end: {
            line: 428,
            column: 28
          }
        }],
        line: 426
      },
      "56": {
        loc: {
          start: {
            line: 429,
            column: 21
          },
          end: {
            line: 431,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 430,
            column: 26
          },
          end: {
            line: 430,
            column: 84
          }
        }, {
          start: {
            line: 431,
            column: 26
          },
          end: {
            line: 431,
            column: 28
          }
        }],
        line: 429
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-testing.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-testing.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI testing validation\nconst AIPromptValidationSchema = z.object({\n  prompt: z.string().min(1, 'Prompt is required'),\n  context: z.record(z.any()).optional(),\n  variables: z.array(z.string()).optional(),\n});\n\nconst AINodeTestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  testData: z.record(z.any()),\n  validateOnly: z.boolean().optional().default(false),\n});\n\nconst AIExpressionTestSchema = z.object({\n  expression: z.string().min(1, 'Expression is required'),\n  sampleData: z.record(z.any()),\n  context: z.record(z.any()).optional(),\n});\n\nconst AIPerformanceTestSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  iterations: z.number().min(1).max(100).optional().default(5),\n  testPayloads: z.array(z.record(z.any())),\n});\n\n// Tool registration function for AI testing tools\nexport function createAITestingTools(getClient: () => N8nClient | null, server: any) {\n  // Validate AI prompt structure and variables\n  server.addTool({\n    name: 'validate-ai-prompt',\n    description:\n      'Validate AI prompt structure, check for required variables, and ensure proper formatting',\n    parameters: AIPromptValidationSchema,\n    annotations: {\n      title: 'Validate AI Prompt',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof AIPromptValidationSchema>) => {\n      try {\n        const validation = {\n          prompt: args.prompt,\n          length: args.prompt.length,\n          wordCount: args.prompt.split(/\\s+/).length,\n          variables: [] as string[],\n          issues: [] as string[],\n          suggestions: [] as string[],\n          score: 0,\n        };\n\n        // Extract variables from prompt (looking for {{variable}} and ${variable} patterns)\n        const variablePatterns = [\n          /\\{\\{([^}]+)\\}\\}/g, // n8n variables {{variable}}\n          /\\$\\{([^}]+)\\}/g, // JavaScript variables ${variable}\n          /\\$json\\.[a-zA-Z_][a-zA-Z0-9_]*/g, // n8n JSON access\n          /\\$node\\.[a-zA-Z_][a-zA-Z0-9_]*/g, // n8n node access\n        ];\n\n        variablePatterns.forEach(pattern => {\n          let match;\n          while ((match = pattern.exec(args.prompt)) !== null) {\n            if (match[1]) {\n              validation.variables.push(match[1]);\n            } else {\n              validation.variables.push(match[0]);\n            }\n          }\n        });\n\n        // Check for common issues\n        if (validation.length < 10) {\n          validation.issues.push('Prompt is very short - may not provide enough context');\n        } else if (validation.length > 4000) {\n          validation.issues.push('Prompt is very long - may exceed token limits');\n        }\n\n        if (validation.wordCount < 5) {\n          validation.issues.push('Prompt has very few words - consider adding more context');\n        }\n\n        if (\n          !args.prompt.includes('?') &&\n          !args.prompt.includes('please') &&\n          !args.prompt.includes('generate')\n        ) {\n          validation.suggestions.push('Consider adding clear instructions or questions');\n        }\n\n        if (validation.variables.length === 0) {\n          validation.suggestions.push(\n            'Consider using dynamic variables to make the prompt more flexible'\n          );\n        }\n\n        // Check if required variables are provided\n        if (args.variables) {\n          const missingVars = args.variables.filter(\n            v => !validation.variables.some(pv => pv.includes(v))\n          );\n          if (missingVars.length > 0) {\n            validation.issues.push(`Missing required variables: ${missingVars.join(', ')}`);\n          }\n        }\n\n        // Calculate quality score (0-100)\n        validation.score = Math.max(\n          0,\n          Math.min(\n            100,\n            (validation.length > 10 ? 20 : 0) +\n              (validation.wordCount > 5 ? 20 : 0) +\n              (validation.variables.length > 0 ? 20 : 0) +\n              (validation.issues.length === 0 ? 30 : 0) +\n              (args.prompt.includes('?') || args.prompt.includes('please') ? 10 : 0)\n          )\n        );\n\n        return (\n          `AI Prompt Validation Results:\\n\\n` +\n          `**Prompt Analysis:**\\n` +\n          `- Length: ${validation.length} characters\\n` +\n          `- Word Count: ${validation.wordCount} words\\n` +\n          `- Quality Score: ${validation.score}/100\\n\\n` +\n          `**Variables Found (${validation.variables.length}):**\\n` +\n          (validation.variables.length > 0\n            ? validation.variables.map(v => `- ${v}`).join('\\n')\n            : 'No variables detected') +\n          '\\n\\n' +\n          `**Issues (${validation.issues.length}):**\\n` +\n          (validation.issues.length > 0\n            ? validation.issues.map(i => `\u274C ${i}`).join('\\n')\n            : '\u2705 No issues found') +\n          '\\n\\n' +\n          `**Suggestions (${validation.suggestions.length}):**\\n` +\n          (validation.suggestions.length > 0\n            ? validation.suggestions.map(s => `\uD83D\uDCA1 ${s}`).join('\\n')\n            : '\u2705 No suggestions') +\n          '\\n\\n' +\n          `**Original Prompt:**\\n\\`\\`\\`\\n${args.prompt}\\n\\`\\`\\``\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to validate AI prompt: ${error.message}`);\n      }\n    },\n  });\n\n  // Test AI node with sample data\n  server.addTool({\n    name: 'test-ai-node',\n    description: 'Test an AI node with sample data to validate configuration and expected behavior',\n    parameters: AINodeTestSchema,\n    annotations: {\n      title: 'Test AI Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AINodeTestSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        const testResult = {\n          nodeId: args.nodeId,\n          nodeName: node.name,\n          nodeType: node.type,\n          testData: args.testData,\n          validateOnly: args.validateOnly,\n          timestamp: new Date().toISOString(),\n          configuration: {\n            model: node.parameters?.model,\n            temperature: node.parameters?.temperature,\n            maxTokens: node.parameters?.maxTokens,\n            systemPrompt: node.parameters?.systemPrompt,\n          },\n          validation: {\n            configurationValid: true,\n            dataStructureValid: true,\n            parametersValid: true,\n            credentialsValid: true,\n          },\n          estimatedCost: 0.001, // Simulated cost estimation\n          estimatedTokens: Math.floor(JSON.stringify(args.testData).length / 4),\n        };\n\n        // Validate configuration\n        if (!node.parameters?.model) {\n          testResult.validation.configurationValid = false;\n        }\n\n        // Validate test data structure\n        if (!args.testData || typeof args.testData !== 'object') {\n          testResult.validation.dataStructureValid = false;\n        }\n\n        if (args.validateOnly) {\n          return (\n            `AI Node Validation Results:\\n\\n` +\n            `**Node Information:**\\n` +\n            `- Node: ${testResult.nodeName} (${testResult.nodeType})\\n` +\n            `- Model: ${testResult.configuration.model || 'Not configured'}\\n` +\n            `- Temperature: ${testResult.configuration.temperature || 'Default'}\\n` +\n            `- Max Tokens: ${testResult.configuration.maxTokens || 'Default'}\\n\\n` +\n            `**Validation Results:**\\n` +\n            `- Configuration Valid: ${testResult.validation.configurationValid ? '\u2705' : '\u274C'}\\n` +\n            `- Data Structure Valid: ${testResult.validation.dataStructureValid ? '\u2705' : '\u274C'}\\n` +\n            `- Parameters Valid: ${testResult.validation.parametersValid ? '\u2705' : '\u274C'}\\n` +\n            `- Credentials Valid: ${testResult.validation.credentialsValid ? '\u2705' : '\u274C'}\\n\\n` +\n            `**Test Data:**\\n\\`\\`\\`json\\n${JSON.stringify(args.testData, null, 2)}\\n\\`\\`\\`\\n\\n` +\n            `**Estimated Cost:** $${testResult.estimatedCost.toFixed(4)}\\n` +\n            `**Estimated Tokens:** ${testResult.estimatedTokens}`\n          );\n        }\n\n        // Simulate actual testing (in real implementation, would execute the node)\n        const simulatedResponse = {\n          success: true,\n          output: `[TEST MODE] Simulated AI response for test data. In production, this would be the actual AI model response.`,\n          tokens: testResult.estimatedTokens,\n          cost: testResult.estimatedCost,\n          executionTime: Math.random() * 2000 + 500, // 500-2500ms\n        };\n\n        return (\n          `AI Node Test Results:\\n\\n` +\n          `**Node Information:**\\n` +\n          `- Node: ${testResult.nodeName} (${testResult.nodeType})\\n` +\n          `- Model: ${testResult.configuration.model || 'Not configured'}\\n` +\n          `- Test Time: ${testResult.timestamp}\\n\\n` +\n          `**Test Execution:**\\n` +\n          `- Success: ${simulatedResponse.success ? '\u2705' : '\u274C'}\\n` +\n          `- Execution Time: ${simulatedResponse.executionTime.toFixed(0)}ms\\n` +\n          `- Tokens Used: ${simulatedResponse.tokens}\\n` +\n          `- Cost: $${simulatedResponse.cost.toFixed(4)}\\n\\n` +\n          `**Test Output:**\\n${simulatedResponse.output}\\n\\n` +\n          `**Test Data Used:**\\n\\`\\`\\`json\\n${JSON.stringify(args.testData, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Note:** This is a test simulation. For actual AI execution, deploy the workflow and run it.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to test AI node: ${error.message}`);\n      }\n    },\n  });\n\n  // Test n8n expressions with AI context\n  server.addTool({\n    name: 'test-ai-expression',\n    description: 'Test n8n expressions that use AI data and $fromAI() functionality',\n    parameters: AIExpressionTestSchema,\n    annotations: {\n      title: 'Test AI Expression',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof AIExpressionTestSchema>) => {\n      try {\n        const expressionTest = {\n          expression: args.expression,\n          sampleData: args.sampleData,\n          context: args.context || {},\n          timestamp: new Date().toISOString(),\n          validation: {\n            syntaxValid: true,\n            variablesResolved: true,\n            aiContextAvailable: true,\n            securitySafe: true,\n          },\n          warnings: [] as string[],\n          errors: [] as string[],\n        };\n\n        // Basic syntax validation\n        const dangerousPatterns = [\n          /eval\\s*\\(/,\n          /Function\\s*\\(/,\n          /setTimeout\\s*\\(/,\n          /setInterval\\s*\\(/,\n          /process\\./,\n          /require\\s*\\(/,\n          /import\\s*\\(/,\n        ];\n\n        dangerousPatterns.forEach(pattern => {\n          if (pattern.test(args.expression)) {\n            expressionTest.validation.securitySafe = false;\n            expressionTest.errors.push('Expression contains potentially dangerous code patterns');\n          }\n        });\n\n        // Check for AI-specific functions\n        const aiPatterns = [/\\$fromAI\\s*\\(/, /\\$ai\\./, /\\$memory\\./, /\\$context\\./];\n\n        const hasAIFunctions = aiPatterns.some(pattern => pattern.test(args.expression));\n        if (hasAIFunctions && !args.context) {\n          expressionTest.warnings.push('Expression uses AI functions but no AI context provided');\n        }\n\n        // Simulate expression evaluation\n        let simulatedResult;\n        try {\n          if (args.expression.includes('$fromAI(')) {\n            simulatedResult = '[SIMULATED] AI-generated data would be injected here';\n          } else if (args.expression.includes('$json.')) {\n            simulatedResult = '[SIMULATED] JSON data access result';\n          } else if (args.expression.includes('$node.')) {\n            simulatedResult = '[SIMULATED] Node data access result';\n          } else {\n            simulatedResult = '[SIMULATED] Expression evaluation result';\n          }\n        } catch (error) {\n          expressionTest.validation.syntaxValid = false;\n          expressionTest.errors.push(`Syntax error: ${(error as Error).message}`);\n          simulatedResult = null;\n        }\n\n        return (\n          `AI Expression Test Results:\\n\\n` +\n          `**Expression:** \\`${args.expression}\\`\\n\\n` +\n          `**Validation Results:**\\n` +\n          `- Syntax Valid: ${expressionTest.validation.syntaxValid ? '\u2705' : '\u274C'}\\n` +\n          `- Variables Resolved: ${expressionTest.validation.variablesResolved ? '\u2705' : '\u274C'}\\n` +\n          `- AI Context Available: ${expressionTest.validation.aiContextAvailable ? '\u2705' : '\u274C'}\\n` +\n          `- Security Safe: ${expressionTest.validation.securitySafe ? '\u2705' : '\u274C'}\\n\\n` +\n          `**Warnings (${expressionTest.warnings.length}):**\\n` +\n          (expressionTest.warnings.length > 0\n            ? expressionTest.warnings.map(w => `\u26A0\uFE0F ${w}`).join('\\n')\n            : '\u2705 No warnings') +\n          '\\n\\n' +\n          `**Errors (${expressionTest.errors.length}):**\\n` +\n          (expressionTest.errors.length > 0\n            ? expressionTest.errors.map(e => `\u274C ${e}`).join('\\n')\n            : '\u2705 No errors') +\n          '\\n\\n' +\n          `**Sample Data:**\\n\\`\\`\\`json\\n${JSON.stringify(args.sampleData, null, 2)}\\n\\`\\`\\`\\n\\n` +\n          `**Simulated Result:**\\n\\`${simulatedResult}\\`\\n\\n` +\n          `**Note:** This is a test simulation. Actual expression evaluation happens during workflow execution.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to test AI expression: ${error.message}`);\n      }\n    },\n  });\n\n  // Performance test AI node\n  server.addTool({\n    name: 'performance-test-ai-node',\n    description:\n      'Run performance tests on an AI node with multiple test payloads to measure response times and consistency',\n    parameters: AIPerformanceTestSchema,\n    annotations: {\n      title: 'Performance Test AI Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof AIPerformanceTestSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(\n            `Node with ID \"${args.nodeId}\" not found in workflow \"${args.workflowId}\"`\n          );\n        }\n\n        const performanceResults = {\n          nodeId: args.nodeId,\n          nodeName: node.name,\n          nodeType: node.type,\n          iterations: args.iterations,\n          testPayloads: args.testPayloads.length,\n          startTime: new Date().toISOString(),\n          results: [] as any[],\n          summary: {\n            totalTests: 0,\n            successfulTests: 0,\n            failedTests: 0,\n            averageResponseTime: 0,\n            minResponseTime: 0,\n            maxResponseTime: 0,\n            totalTokens: 0,\n            totalCost: 0,\n          },\n        };\n\n        // Simulate performance testing\n        for (let i = 0; i < args.iterations; i++) {\n          for (let j = 0; j < args.testPayloads.length; j++) {\n            const payload = args.testPayloads[j];\n            const responseTime = Math.random() * 3000 + 200; // 200-3200ms\n            const tokens = Math.floor(JSON.stringify(payload).length / 4);\n            const cost = tokens * 0.00001; // Simulated cost\n\n            const testResult = {\n              iteration: i + 1,\n              payloadIndex: j + 1,\n              payload,\n              responseTime,\n              tokens,\n              cost,\n              success: Math.random() > 0.05, // 95% success rate\n              timestamp: new Date().toISOString(),\n            };\n\n            performanceResults.results.push(testResult);\n            performanceResults.summary.totalTests++;\n\n            if (testResult.success) {\n              performanceResults.summary.successfulTests++;\n              performanceResults.summary.totalTokens += tokens;\n              performanceResults.summary.totalCost += cost;\n            } else {\n              performanceResults.summary.failedTests++;\n            }\n          }\n        }\n\n        // Calculate statistics\n        const successfulResults = performanceResults.results.filter(r => r.success);\n        const responseTimes = successfulResults.map(r => r.responseTime);\n\n        performanceResults.summary.averageResponseTime =\n          responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;\n        performanceResults.summary.minResponseTime = Math.min(...responseTimes);\n        performanceResults.summary.maxResponseTime = Math.max(...responseTimes);\n\n        const successRate =\n          (performanceResults.summary.successfulTests / performanceResults.summary.totalTests) *\n          100;\n\n        return (\n          `AI Node Performance Test Results:\\n\\n` +\n          `**Test Configuration:**\\n` +\n          `- Node: ${performanceResults.nodeName} (${performanceResults.nodeType})\\n` +\n          `- Iterations: ${performanceResults.iterations}\\n` +\n          `- Test Payloads: ${performanceResults.testPayloads}\\n` +\n          `- Total Tests: ${performanceResults.summary.totalTests}\\n\\n` +\n          `**Performance Summary:**\\n` +\n          `- Success Rate: ${successRate.toFixed(1)}% (${performanceResults.summary.successfulTests}/${performanceResults.summary.totalTests})\\n` +\n          `- Average Response Time: ${performanceResults.summary.averageResponseTime.toFixed(0)}ms\\n` +\n          `- Min Response Time: ${performanceResults.summary.minResponseTime.toFixed(0)}ms\\n` +\n          `- Max Response Time: ${performanceResults.summary.maxResponseTime.toFixed(0)}ms\\n` +\n          `- Total Tokens: ${performanceResults.summary.totalTokens}\\n` +\n          `- Total Cost: $${performanceResults.summary.totalCost.toFixed(4)}\\n\\n` +\n          `**Performance Analysis:**\\n` +\n          `- Performance Rating: ${\n            successRate > 95 && performanceResults.summary.averageResponseTime < 2000\n              ? '\uD83D\uDFE2 Excellent'\n              : successRate > 90 && performanceResults.summary.averageResponseTime < 3000\n                ? '\uD83D\uDFE1 Good'\n                : '\uD83D\uDD34 Needs Improvement'\n          }\\n` +\n          `- Consistency: ${performanceResults.summary.maxResponseTime - performanceResults.summary.minResponseTime < 1000 ? '\uD83D\uDFE2 Consistent' : '\uD83D\uDFE1 Variable'}\\n` +\n          `- Cost Efficiency: $${(performanceResults.summary.totalCost / performanceResults.summary.successfulTests).toFixed(6)} per successful test\\n\\n` +\n          `**Recommendations:**\\n` +\n          (successRate < 95 ? '\u2022 Consider reviewing AI node configuration for reliability\\n' : '') +\n          (performanceResults.summary.averageResponseTime > 2000\n            ? '\u2022 Response times are high - consider optimizing prompts or model selection\\n'\n            : '') +\n          (performanceResults.summary.totalCost > 0.1\n            ? '\u2022 High cost per test - consider optimizing token usage\\n'\n            : '') +\n          `\\n**Note:** This is a simulated performance test. Actual results may vary in production.`\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to run performance test: ${error.message}`);\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1469dd99c6703c690061aefc14ce0211ba605924"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qzagbmmma = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qzagbmmma();
cov_2qzagbmmma().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2qzagbmmma().s[1]++;
exports.createAITestingTools = createAITestingTools;
const zod_1 =
/* istanbul ignore next */
(cov_2qzagbmmma().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_2qzagbmmma().s[3]++, require("fastmcp"));
// Zod schemas for AI testing validation
const AIPromptValidationSchema =
/* istanbul ignore next */
(cov_2qzagbmmma().s[4]++, zod_1.z.object({
  prompt: zod_1.z.string().min(1, 'Prompt is required'),
  context: zod_1.z.record(zod_1.z.any()).optional(),
  variables: zod_1.z.array(zod_1.z.string()).optional()
}));
const AINodeTestSchema =
/* istanbul ignore next */
(cov_2qzagbmmma().s[5]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  testData: zod_1.z.record(zod_1.z.any()),
  validateOnly: zod_1.z.boolean().optional().default(false)
}));
const AIExpressionTestSchema =
/* istanbul ignore next */
(cov_2qzagbmmma().s[6]++, zod_1.z.object({
  expression: zod_1.z.string().min(1, 'Expression is required'),
  sampleData: zod_1.z.record(zod_1.z.any()),
  context: zod_1.z.record(zod_1.z.any()).optional()
}));
const AIPerformanceTestSchema =
/* istanbul ignore next */
(cov_2qzagbmmma().s[7]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required'),
  nodeId: zod_1.z.string().min(1, 'Node ID is required'),
  iterations: zod_1.z.number().min(1).max(100).optional().default(5),
  testPayloads: zod_1.z.array(zod_1.z.record(zod_1.z.any()))
}));
// Tool registration function for AI testing tools
function createAITestingTools(getClient, server) {
  /* istanbul ignore next */
  cov_2qzagbmmma().f[0]++;
  cov_2qzagbmmma().s[8]++;
  // Validate AI prompt structure and variables
  server.addTool({
    name: 'validate-ai-prompt',
    description: 'Validate AI prompt structure, check for required variables, and ensure proper formatting',
    parameters: AIPromptValidationSchema,
    annotations: {
      title: 'Validate AI Prompt',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qzagbmmma().f[1]++;
      cov_2qzagbmmma().s[9]++;
      try {
        const validation =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[10]++, {
          prompt: args.prompt,
          length: args.prompt.length,
          wordCount: args.prompt.split(/\s+/).length,
          variables: [],
          issues: [],
          suggestions: [],
          score: 0
        });
        // Extract variables from prompt (looking for {{variable}} and ${variable} patterns)
        const variablePatterns =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[11]++, [/\{\{([^}]+)\}\}/g,
        // n8n variables {{variable}}
        /\$\{([^}]+)\}/g,
        // JavaScript variables ${variable}
        /\$json\.[a-zA-Z_][a-zA-Z0-9_]*/g,
        // n8n JSON access
        /\$node\.[a-zA-Z_][a-zA-Z0-9_]*/g // n8n node access
        ]);
        /* istanbul ignore next */
        cov_2qzagbmmma().s[12]++;
        variablePatterns.forEach(pattern => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[2]++;
          let match;
          /* istanbul ignore next */
          cov_2qzagbmmma().s[13]++;
          while ((match = pattern.exec(args.prompt)) !== null) {
            /* istanbul ignore next */
            cov_2qzagbmmma().s[14]++;
            if (match[1]) {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[0][0]++;
              cov_2qzagbmmma().s[15]++;
              validation.variables.push(match[1]);
            } else {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[0][1]++;
              cov_2qzagbmmma().s[16]++;
              validation.variables.push(match[0]);
            }
          }
        });
        // Check for common issues
        /* istanbul ignore next */
        cov_2qzagbmmma().s[17]++;
        if (validation.length < 10) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[1][0]++;
          cov_2qzagbmmma().s[18]++;
          validation.issues.push('Prompt is very short - may not provide enough context');
        } else {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[1][1]++;
          cov_2qzagbmmma().s[19]++;
          if (validation.length > 4000) {
            /* istanbul ignore next */
            cov_2qzagbmmma().b[2][0]++;
            cov_2qzagbmmma().s[20]++;
            validation.issues.push('Prompt is very long - may exceed token limits');
          } else
          /* istanbul ignore next */
          {
            cov_2qzagbmmma().b[2][1]++;
          }
        }
        /* istanbul ignore next */
        cov_2qzagbmmma().s[21]++;
        if (validation.wordCount < 5) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[3][0]++;
          cov_2qzagbmmma().s[22]++;
          validation.issues.push('Prompt has very few words - consider adding more context');
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[3][1]++;
        }
        cov_2qzagbmmma().s[23]++;
        if (
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[5][0]++, !args.prompt.includes('?')) &&
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[5][1]++, !args.prompt.includes('please')) &&
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[5][2]++, !args.prompt.includes('generate'))) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[4][0]++;
          cov_2qzagbmmma().s[24]++;
          validation.suggestions.push('Consider adding clear instructions or questions');
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[4][1]++;
        }
        cov_2qzagbmmma().s[25]++;
        if (validation.variables.length === 0) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[6][0]++;
          cov_2qzagbmmma().s[26]++;
          validation.suggestions.push('Consider using dynamic variables to make the prompt more flexible');
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[6][1]++;
        }
        // Check if required variables are provided
        cov_2qzagbmmma().s[27]++;
        if (args.variables) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[7][0]++;
          const missingVars =
          /* istanbul ignore next */
          (cov_2qzagbmmma().s[28]++, args.variables.filter(v => {
            /* istanbul ignore next */
            cov_2qzagbmmma().f[3]++;
            cov_2qzagbmmma().s[29]++;
            return !validation.variables.some(pv => {
              /* istanbul ignore next */
              cov_2qzagbmmma().f[4]++;
              cov_2qzagbmmma().s[30]++;
              return pv.includes(v);
            });
          }));
          /* istanbul ignore next */
          cov_2qzagbmmma().s[31]++;
          if (missingVars.length > 0) {
            /* istanbul ignore next */
            cov_2qzagbmmma().b[8][0]++;
            cov_2qzagbmmma().s[32]++;
            validation.issues.push(`Missing required variables: ${missingVars.join(', ')}`);
          } else
          /* istanbul ignore next */
          {
            cov_2qzagbmmma().b[8][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[7][1]++;
        }
        // Calculate quality score (0-100)
        cov_2qzagbmmma().s[33]++;
        validation.score = Math.max(0, Math.min(100, (validation.length > 10 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[9][0]++, 20) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[9][1]++, 0)) + (validation.wordCount > 5 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[10][0]++, 20) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[10][1]++, 0)) + (validation.variables.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[11][0]++, 20) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[11][1]++, 0)) + (validation.issues.length === 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[12][0]++, 30) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[12][1]++, 0)) + (
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[14][0]++, args.prompt.includes('?')) ||
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[14][1]++, args.prompt.includes('please')) ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[13][0]++, 10) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[13][1]++, 0))));
        /* istanbul ignore next */
        cov_2qzagbmmma().s[34]++;
        return `AI Prompt Validation Results:\n\n` + `**Prompt Analysis:**\n` + `- Length: ${validation.length} characters\n` + `- Word Count: ${validation.wordCount} words\n` + `- Quality Score: ${validation.score}/100\n\n` + `**Variables Found (${validation.variables.length}):**\n` + (validation.variables.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[15][0]++, validation.variables.map(v => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[5]++;
          cov_2qzagbmmma().s[35]++;
          return `- ${v}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[15][1]++, 'No variables detected')) + '\n\n' + `**Issues (${validation.issues.length}):**\n` + (validation.issues.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[16][0]++, validation.issues.map(i => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[6]++;
          cov_2qzagbmmma().s[36]++;
          return `❌ ${i}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[16][1]++, '✅ No issues found')) + '\n\n' + `**Suggestions (${validation.suggestions.length}):**\n` + (validation.suggestions.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[17][0]++, validation.suggestions.map(s => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[7]++;
          cov_2qzagbmmma().s[37]++;
          return `💡 ${s}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[17][1]++, '✅ No suggestions')) + '\n\n' + `**Original Prompt:**\n\`\`\`\n${args.prompt}\n\`\`\``;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qzagbmmma().s[38]++;
        throw new fastmcp_1.UserError(`Failed to validate AI prompt: ${error.message}`);
      }
    }
  });
  // Test AI node with sample data
  /* istanbul ignore next */
  cov_2qzagbmmma().s[39]++;
  server.addTool({
    name: 'test-ai-node',
    description: 'Test an AI node with sample data to validate configuration and expected behavior',
    parameters: AINodeTestSchema,
    annotations: {
      title: 'Test AI Node',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qzagbmmma().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_2qzagbmmma().s[40]++, getClient());
      /* istanbul ignore next */
      cov_2qzagbmmma().s[41]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qzagbmmma().b[18][0]++;
        cov_2qzagbmmma().s[42]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qzagbmmma().b[18][1]++;
      }
      cov_2qzagbmmma().s[43]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[44]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[45]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[9]++;
          cov_2qzagbmmma().s[46]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_2qzagbmmma().s[47]++;
        if (!node) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[19][0]++;
          cov_2qzagbmmma().s[48]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[19][1]++;
        }
        const testResult =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[49]++, {
          nodeId: args.nodeId,
          nodeName: node.name,
          nodeType: node.type,
          testData: args.testData,
          validateOnly: args.validateOnly,
          timestamp: new Date().toISOString(),
          configuration: {
            model: node.parameters?.model,
            temperature: node.parameters?.temperature,
            maxTokens: node.parameters?.maxTokens,
            systemPrompt: node.parameters?.systemPrompt
          },
          validation: {
            configurationValid: true,
            dataStructureValid: true,
            parametersValid: true,
            credentialsValid: true
          },
          estimatedCost: 0.001,
          // Simulated cost estimation
          estimatedTokens: Math.floor(JSON.stringify(args.testData).length / 4)
        });
        // Validate configuration
        /* istanbul ignore next */
        cov_2qzagbmmma().s[50]++;
        if (!node.parameters?.model) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[20][0]++;
          cov_2qzagbmmma().s[51]++;
          testResult.validation.configurationValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[20][1]++;
        }
        // Validate test data structure
        cov_2qzagbmmma().s[52]++;
        if (
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[22][0]++, !args.testData) ||
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[22][1]++, typeof args.testData !== 'object')) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[21][0]++;
          cov_2qzagbmmma().s[53]++;
          testResult.validation.dataStructureValid = false;
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[21][1]++;
        }
        cov_2qzagbmmma().s[54]++;
        if (args.validateOnly) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[23][0]++;
          cov_2qzagbmmma().s[55]++;
          return `AI Node Validation Results:\n\n` + `**Node Information:**\n` + `- Node: ${testResult.nodeName} (${testResult.nodeType})\n` + `- Model: ${
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[24][0]++, testResult.configuration.model) ||
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[24][1]++, 'Not configured')}\n` + `- Temperature: ${
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[25][0]++, testResult.configuration.temperature) ||
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[25][1]++, 'Default')}\n` + `- Max Tokens: ${
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[26][0]++, testResult.configuration.maxTokens) ||
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[26][1]++, 'Default')}\n\n` + `**Validation Results:**\n` + `- Configuration Valid: ${testResult.validation.configurationValid ?
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[27][0]++, '✅') :
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[27][1]++, '❌')}\n` + `- Data Structure Valid: ${testResult.validation.dataStructureValid ?
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[28][0]++, '✅') :
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[28][1]++, '❌')}\n` + `- Parameters Valid: ${testResult.validation.parametersValid ?
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[29][0]++, '✅') :
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[29][1]++, '❌')}\n` + `- Credentials Valid: ${testResult.validation.credentialsValid ?
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[30][0]++, '✅') :
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[30][1]++, '❌')}\n\n` + `**Test Data:**\n\`\`\`json\n${JSON.stringify(args.testData, null, 2)}\n\`\`\`\n\n` + `**Estimated Cost:** $${testResult.estimatedCost.toFixed(4)}\n` + `**Estimated Tokens:** ${testResult.estimatedTokens}`;
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[23][1]++;
        }
        // Simulate actual testing (in real implementation, would execute the node)
        const simulatedResponse =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[56]++, {
          success: true,
          output: `[TEST MODE] Simulated AI response for test data. In production, this would be the actual AI model response.`,
          tokens: testResult.estimatedTokens,
          cost: testResult.estimatedCost,
          executionTime: Math.random() * 2000 + 500 // 500-2500ms
        });
        /* istanbul ignore next */
        cov_2qzagbmmma().s[57]++;
        return `AI Node Test Results:\n\n` + `**Node Information:**\n` + `- Node: ${testResult.nodeName} (${testResult.nodeType})\n` + `- Model: ${
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[31][0]++, testResult.configuration.model) ||
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[31][1]++, 'Not configured')}\n` + `- Test Time: ${testResult.timestamp}\n\n` + `**Test Execution:**\n` + `- Success: ${simulatedResponse.success ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[32][0]++, '✅') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[32][1]++, '❌')}\n` + `- Execution Time: ${simulatedResponse.executionTime.toFixed(0)}ms\n` + `- Tokens Used: ${simulatedResponse.tokens}\n` + `- Cost: $${simulatedResponse.cost.toFixed(4)}\n\n` + `**Test Output:**\n${simulatedResponse.output}\n\n` + `**Test Data Used:**\n\`\`\`json\n${JSON.stringify(args.testData, null, 2)}\n\`\`\`\n\n` + `**Note:** This is a test simulation. For actual AI execution, deploy the workflow and run it.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qzagbmmma().s[58]++;
        throw new fastmcp_1.UserError(`Failed to test AI node: ${error.message}`);
      }
    }
  });
  // Test n8n expressions with AI context
  /* istanbul ignore next */
  cov_2qzagbmmma().s[59]++;
  server.addTool({
    name: 'test-ai-expression',
    description: 'Test n8n expressions that use AI data and $fromAI() functionality',
    parameters: AIExpressionTestSchema,
    annotations: {
      title: 'Test AI Expression',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qzagbmmma().f[10]++;
      cov_2qzagbmmma().s[60]++;
      try {
        const expressionTest =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[61]++, {
          expression: args.expression,
          sampleData: args.sampleData,
          context:
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[33][0]++, args.context) ||
          /* istanbul ignore next */
          (cov_2qzagbmmma().b[33][1]++, {}),
          timestamp: new Date().toISOString(),
          validation: {
            syntaxValid: true,
            variablesResolved: true,
            aiContextAvailable: true,
            securitySafe: true
          },
          warnings: [],
          errors: []
        });
        // Basic syntax validation
        const dangerousPatterns =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[62]++, [/eval\s*\(/, /Function\s*\(/, /setTimeout\s*\(/, /setInterval\s*\(/, /process\./, /require\s*\(/, /import\s*\(/]);
        /* istanbul ignore next */
        cov_2qzagbmmma().s[63]++;
        dangerousPatterns.forEach(pattern => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[11]++;
          cov_2qzagbmmma().s[64]++;
          if (pattern.test(args.expression)) {
            /* istanbul ignore next */
            cov_2qzagbmmma().b[34][0]++;
            cov_2qzagbmmma().s[65]++;
            expressionTest.validation.securitySafe = false;
            /* istanbul ignore next */
            cov_2qzagbmmma().s[66]++;
            expressionTest.errors.push('Expression contains potentially dangerous code patterns');
          } else
          /* istanbul ignore next */
          {
            cov_2qzagbmmma().b[34][1]++;
          }
        });
        // Check for AI-specific functions
        const aiPatterns =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[67]++, [/\$fromAI\s*\(/, /\$ai\./, /\$memory\./, /\$context\./]);
        const hasAIFunctions =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[68]++, aiPatterns.some(pattern => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[12]++;
          cov_2qzagbmmma().s[69]++;
          return pattern.test(args.expression);
        }));
        /* istanbul ignore next */
        cov_2qzagbmmma().s[70]++;
        if (
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[36][0]++, hasAIFunctions) &&
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[36][1]++, !args.context)) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[35][0]++;
          cov_2qzagbmmma().s[71]++;
          expressionTest.warnings.push('Expression uses AI functions but no AI context provided');
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[35][1]++;
        }
        // Simulate expression evaluation
        let simulatedResult;
        /* istanbul ignore next */
        cov_2qzagbmmma().s[72]++;
        try {
          /* istanbul ignore next */
          cov_2qzagbmmma().s[73]++;
          if (args.expression.includes('$fromAI(')) {
            /* istanbul ignore next */
            cov_2qzagbmmma().b[37][0]++;
            cov_2qzagbmmma().s[74]++;
            simulatedResult = '[SIMULATED] AI-generated data would be injected here';
          } else {
            /* istanbul ignore next */
            cov_2qzagbmmma().b[37][1]++;
            cov_2qzagbmmma().s[75]++;
            if (args.expression.includes('$json.')) {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[38][0]++;
              cov_2qzagbmmma().s[76]++;
              simulatedResult = '[SIMULATED] JSON data access result';
            } else {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[38][1]++;
              cov_2qzagbmmma().s[77]++;
              if (args.expression.includes('$node.')) {
                /* istanbul ignore next */
                cov_2qzagbmmma().b[39][0]++;
                cov_2qzagbmmma().s[78]++;
                simulatedResult = '[SIMULATED] Node data access result';
              } else {
                /* istanbul ignore next */
                cov_2qzagbmmma().b[39][1]++;
                cov_2qzagbmmma().s[79]++;
                simulatedResult = '[SIMULATED] Expression evaluation result';
              }
            }
          }
        } catch (error) {
          /* istanbul ignore next */
          cov_2qzagbmmma().s[80]++;
          expressionTest.validation.syntaxValid = false;
          /* istanbul ignore next */
          cov_2qzagbmmma().s[81]++;
          expressionTest.errors.push(`Syntax error: ${error.message}`);
          /* istanbul ignore next */
          cov_2qzagbmmma().s[82]++;
          simulatedResult = null;
        }
        /* istanbul ignore next */
        cov_2qzagbmmma().s[83]++;
        return `AI Expression Test Results:\n\n` + `**Expression:** \`${args.expression}\`\n\n` + `**Validation Results:**\n` + `- Syntax Valid: ${expressionTest.validation.syntaxValid ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[40][0]++, '✅') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[40][1]++, '❌')}\n` + `- Variables Resolved: ${expressionTest.validation.variablesResolved ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[41][0]++, '✅') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[41][1]++, '❌')}\n` + `- AI Context Available: ${expressionTest.validation.aiContextAvailable ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[42][0]++, '✅') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[42][1]++, '❌')}\n` + `- Security Safe: ${expressionTest.validation.securitySafe ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[43][0]++, '✅') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[43][1]++, '❌')}\n\n` + `**Warnings (${expressionTest.warnings.length}):**\n` + (expressionTest.warnings.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[44][0]++, expressionTest.warnings.map(w => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[13]++;
          cov_2qzagbmmma().s[84]++;
          return `⚠️ ${w}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[44][1]++, '✅ No warnings')) + '\n\n' + `**Errors (${expressionTest.errors.length}):**\n` + (expressionTest.errors.length > 0 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[45][0]++, expressionTest.errors.map(e => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[14]++;
          cov_2qzagbmmma().s[85]++;
          return `❌ ${e}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[45][1]++, '✅ No errors')) + '\n\n' + `**Sample Data:**\n\`\`\`json\n${JSON.stringify(args.sampleData, null, 2)}\n\`\`\`\n\n` + `**Simulated Result:**\n\`${simulatedResult}\`\n\n` + `**Note:** This is a test simulation. Actual expression evaluation happens during workflow execution.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qzagbmmma().s[86]++;
        throw new fastmcp_1.UserError(`Failed to test AI expression: ${error.message}`);
      }
    }
  });
  // Performance test AI node
  /* istanbul ignore next */
  cov_2qzagbmmma().s[87]++;
  server.addTool({
    name: 'performance-test-ai-node',
    description: 'Run performance tests on an AI node with multiple test payloads to measure response times and consistency',
    parameters: AIPerformanceTestSchema,
    annotations: {
      title: 'Performance Test AI Node',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qzagbmmma().f[15]++;
      const client =
      /* istanbul ignore next */
      (cov_2qzagbmmma().s[88]++, getClient());
      /* istanbul ignore next */
      cov_2qzagbmmma().s[89]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qzagbmmma().b[46][0]++;
        cov_2qzagbmmma().s[90]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qzagbmmma().b[46][1]++;
      }
      cov_2qzagbmmma().s[91]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[92]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[93]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[16]++;
          cov_2qzagbmmma().s[94]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_2qzagbmmma().s[95]++;
        if (!node) {
          /* istanbul ignore next */
          cov_2qzagbmmma().b[47][0]++;
          cov_2qzagbmmma().s[96]++;
          throw new fastmcp_1.UserError(`Node with ID "${args.nodeId}" not found in workflow "${args.workflowId}"`);
        } else
        /* istanbul ignore next */
        {
          cov_2qzagbmmma().b[47][1]++;
        }
        const performanceResults =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[97]++, {
          nodeId: args.nodeId,
          nodeName: node.name,
          nodeType: node.type,
          iterations: args.iterations,
          testPayloads: args.testPayloads.length,
          startTime: new Date().toISOString(),
          results: [],
          summary: {
            totalTests: 0,
            successfulTests: 0,
            failedTests: 0,
            averageResponseTime: 0,
            minResponseTime: 0,
            maxResponseTime: 0,
            totalTokens: 0,
            totalCost: 0
          }
        });
        // Simulate performance testing
        /* istanbul ignore next */
        cov_2qzagbmmma().s[98]++;
        for (let i =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[99]++, 0); i < args.iterations; i++) {
          /* istanbul ignore next */
          cov_2qzagbmmma().s[100]++;
          for (let j =
          /* istanbul ignore next */
          (cov_2qzagbmmma().s[101]++, 0); j < args.testPayloads.length; j++) {
            const payload =
            /* istanbul ignore next */
            (cov_2qzagbmmma().s[102]++, args.testPayloads[j]);
            const responseTime =
            /* istanbul ignore next */
            (cov_2qzagbmmma().s[103]++, Math.random() * 3000 + 200); // 200-3200ms
            const tokens =
            /* istanbul ignore next */
            (cov_2qzagbmmma().s[104]++, Math.floor(JSON.stringify(payload).length / 4));
            const cost =
            /* istanbul ignore next */
            (cov_2qzagbmmma().s[105]++, tokens * 0.00001); // Simulated cost
            const testResult =
            /* istanbul ignore next */
            (cov_2qzagbmmma().s[106]++, {
              iteration: i + 1,
              payloadIndex: j + 1,
              payload,
              responseTime,
              tokens,
              cost,
              success: Math.random() > 0.05,
              // 95% success rate
              timestamp: new Date().toISOString()
            });
            /* istanbul ignore next */
            cov_2qzagbmmma().s[107]++;
            performanceResults.results.push(testResult);
            /* istanbul ignore next */
            cov_2qzagbmmma().s[108]++;
            performanceResults.summary.totalTests++;
            /* istanbul ignore next */
            cov_2qzagbmmma().s[109]++;
            if (testResult.success) {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[48][0]++;
              cov_2qzagbmmma().s[110]++;
              performanceResults.summary.successfulTests++;
              /* istanbul ignore next */
              cov_2qzagbmmma().s[111]++;
              performanceResults.summary.totalTokens += tokens;
              /* istanbul ignore next */
              cov_2qzagbmmma().s[112]++;
              performanceResults.summary.totalCost += cost;
            } else {
              /* istanbul ignore next */
              cov_2qzagbmmma().b[48][1]++;
              cov_2qzagbmmma().s[113]++;
              performanceResults.summary.failedTests++;
            }
          }
        }
        // Calculate statistics
        const successfulResults =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[114]++, performanceResults.results.filter(r => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[17]++;
          cov_2qzagbmmma().s[115]++;
          return r.success;
        }));
        const responseTimes =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[116]++, successfulResults.map(r => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[18]++;
          cov_2qzagbmmma().s[117]++;
          return r.responseTime;
        }));
        /* istanbul ignore next */
        cov_2qzagbmmma().s[118]++;
        performanceResults.summary.averageResponseTime = responseTimes.reduce((a, b) => {
          /* istanbul ignore next */
          cov_2qzagbmmma().f[19]++;
          cov_2qzagbmmma().s[119]++;
          return a + b;
        }, 0) / responseTimes.length;
        /* istanbul ignore next */
        cov_2qzagbmmma().s[120]++;
        performanceResults.summary.minResponseTime = Math.min(...responseTimes);
        /* istanbul ignore next */
        cov_2qzagbmmma().s[121]++;
        performanceResults.summary.maxResponseTime = Math.max(...responseTimes);
        const successRate =
        /* istanbul ignore next */
        (cov_2qzagbmmma().s[122]++, performanceResults.summary.successfulTests / performanceResults.summary.totalTests * 100);
        /* istanbul ignore next */
        cov_2qzagbmmma().s[123]++;
        return `AI Node Performance Test Results:\n\n` + `**Test Configuration:**\n` + `- Node: ${performanceResults.nodeName} (${performanceResults.nodeType})\n` + `- Iterations: ${performanceResults.iterations}\n` + `- Test Payloads: ${performanceResults.testPayloads}\n` + `- Total Tests: ${performanceResults.summary.totalTests}\n\n` + `**Performance Summary:**\n` + `- Success Rate: ${successRate.toFixed(1)}% (${performanceResults.summary.successfulTests}/${performanceResults.summary.totalTests})\n` + `- Average Response Time: ${performanceResults.summary.averageResponseTime.toFixed(0)}ms\n` + `- Min Response Time: ${performanceResults.summary.minResponseTime.toFixed(0)}ms\n` + `- Max Response Time: ${performanceResults.summary.maxResponseTime.toFixed(0)}ms\n` + `- Total Tokens: ${performanceResults.summary.totalTokens}\n` + `- Total Cost: $${performanceResults.summary.totalCost.toFixed(4)}\n\n` + `**Performance Analysis:**\n` + `- Performance Rating: ${
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[50][0]++, successRate > 95) &&
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[50][1]++, performanceResults.summary.averageResponseTime < 2000) ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[49][0]++, '🟢 Excellent') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[49][1]++,
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[52][0]++, successRate > 90) &&
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[52][1]++, performanceResults.summary.averageResponseTime < 3000) ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[51][0]++, '🟡 Good') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[51][1]++, '🔴 Needs Improvement'))}\n` + `- Consistency: ${performanceResults.summary.maxResponseTime - performanceResults.summary.minResponseTime < 1000 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[53][0]++, '🟢 Consistent') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[53][1]++, '🟡 Variable')}\n` + `- Cost Efficiency: $${(performanceResults.summary.totalCost / performanceResults.summary.successfulTests).toFixed(6)} per successful test\n\n` + `**Recommendations:**\n` + (successRate < 95 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[54][0]++, '• Consider reviewing AI node configuration for reliability\n') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[54][1]++, '')) + (performanceResults.summary.averageResponseTime > 2000 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[55][0]++, '• Response times are high - consider optimizing prompts or model selection\n') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[55][1]++, '')) + (performanceResults.summary.totalCost > 0.1 ?
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[56][0]++, '• High cost per test - consider optimizing token usage\n') :
        /* istanbul ignore next */
        (cov_2qzagbmmma().b[56][1]++, '')) + `\n**Note:** This is a simulated performance test. Actual results may vary in production.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qzagbmmma().s[124]++;
        throw new fastmcp_1.UserError(`Failed to run performance test: ${error.message}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,