9d7d384e01ff51b63b6daf3e779e52d1
/* istanbul ignore next */
function cov_2kcfjk5dl8() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow-development.ts";
  var hash = "6e52d5224b542c6e9b75c1226b7179ddb389fa99";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow-development.ts",
    statementMap: {
      "0": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 8,
          column: 2
        }
      },
      "1": {
        start: {
          line: 9,
          column: 32
        },
        end: {
          line: 15,
          column: 2
        }
      },
      "2": {
        start: {
          line: 16,
          column: 32
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "3": {
        start: {
          line: 21,
          column: 36
        },
        end: {
          line: 26,
          column: 2
        }
      },
      "4": {
        start: {
          line: 27,
          column: 34
        },
        end: {
          line: 40,
          column: 2
        }
      },
      "5": {
        start: {
          line: 41,
          column: 33
        },
        end: {
          line: 47,
          column: 2
        }
      },
      "6": {
        start: {
          line: 48,
          column: 35
        },
        end: {
          line: 54,
          column: 2
        }
      },
      "7": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 110,
          column: 7
        }
      },
      "8": {
        start: {
          line: 69,
          column: 27
        },
        end: {
          line: 69,
          column: 38
        }
      },
      "9": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "10": {
        start: {
          line: 71,
          column: 16
        },
        end: {
          line: 71,
          column: 66
        }
      },
      "11": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 76,
          column: 15
        }
      },
      "12": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 108,
          column: 13
        }
      },
      "13": {
        start: {
          line: 79,
          column: 33
        },
        end: {
          line: 79,
          column: 74
        }
      },
      "14": {
        start: {
          line: 81,
          column: 34
        },
        end: {
          line: 85,
          column: 18
        }
      },
      "15": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "16": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 101,
          column: 18
        }
      },
      "17": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 106,
          column: 19
        }
      },
      "18": {
        start: {
          line: 107,
          column: 16
        },
        end: {
          line: 107,
          column: 138
        }
      },
      "19": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 151,
          column: 7
        }
      },
      "20": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 83
        }
      },
      "21": {
        start: {
          line: 124,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "22": {
        start: {
          line: 125,
          column: 38
        },
        end: {
          line: 128,
          column: 18
        }
      },
      "23": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 133,
          column: 19
        }
      },
      "24": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 141,
          column: 18
        }
      },
      "25": {
        start: {
          line: 144,
          column: 16
        },
        end: {
          line: 147,
          column: 19
        }
      },
      "26": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 148,
          column: 138
        }
      },
      "27": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 191,
          column: 7
        }
      },
      "28": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 167,
          column: 15
        }
      },
      "29": {
        start: {
          line: 168,
          column: 12
        },
        end: {
          line: 189,
          column: 13
        }
      },
      "30": {
        start: {
          line: 169,
          column: 38
        },
        end: {
          line: 169,
          column: 102
        }
      },
      "31": {
        start: {
          line: 170,
          column: 16
        },
        end: {
          line: 173,
          column: 19
        }
      },
      "32": {
        start: {
          line: 174,
          column: 16
        },
        end: {
          line: 181,
          column: 18
        }
      },
      "33": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 187,
          column: 19
        }
      },
      "34": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 142
        }
      },
      "35": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 288,
          column: 7
        }
      },
      "36": {
        start: {
          line: 204,
          column: 27
        },
        end: {
          line: 204,
          column: 38
        }
      },
      "37": {
        start: {
          line: 205,
          column: 12
        },
        end: {
          line: 207,
          column: 13
        }
      },
      "38": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 66
        }
      },
      "39": {
        start: {
          line: 208,
          column: 12
        },
        end: {
          line: 212,
          column: 15
        }
      },
      "40": {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 286,
          column: 13
        }
      },
      "41": {
        start: {
          line: 215,
          column: 33
        },
        end: {
          line: 215,
          column: 74
        }
      },
      "42": {
        start: {
          line: 217,
          column: 31
        },
        end: {
          line: 217,
          column: 63
        }
      },
      "43": {
        start: {
          line: 218,
          column: 33
        },
        end: {
          line: 218,
          column: 78
        }
      },
      "44": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 227,
          column: 17
        }
      },
      "45": {
        start: {
          line: 229,
          column: 37
        },
        end: {
          line: 229,
          column: 73
        }
      },
      "46": {
        start: {
          line: 230,
          column: 43
        },
        end: {
          line: 230,
          column: 70
        }
      },
      "47": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 249,
          column: 17
        }
      },
      "48": {
        start: {
          line: 233,
          column: 20
        },
        end: {
          line: 248,
          column: 21
        }
      },
      "49": {
        start: {
          line: 234,
          column: 54
        },
        end: {
          line: 234,
          column: 97
        }
      },
      "50": {
        start: {
          line: 235,
          column: 50
        },
        end: {
          line: 235,
          column: 82
        }
      },
      "51": {
        start: {
          line: 236,
          column: 24
        },
        end: {
          line: 238,
          column: 25
        }
      },
      "52": {
        start: {
          line: 237,
          column: 28
        },
        end: {
          line: 237,
          column: 75
        }
      },
      "53": {
        start: {
          line: 239,
          column: 24
        },
        end: {
          line: 243,
          column: 27
        }
      },
      "54": {
        start: {
          line: 244,
          column: 24
        },
        end: {
          line: 247,
          column: 26
        }
      },
      "55": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 254,
          column: 19
        }
      },
      "56": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 260,
          column: 19
        }
      },
      "57": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 277,
          column: 18
        }
      },
      "58": {
        start: {
          line: 280,
          column: 16
        },
        end: {
          line: 284,
          column: 19
        }
      },
      "59": {
        start: {
          line: 285,
          column: 16
        },
        end: {
          line: 285,
          column: 131
        }
      },
      "60": {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 413,
          column: 7
        }
      },
      "61": {
        start: {
          line: 301,
          column: 27
        },
        end: {
          line: 301,
          column: 38
        }
      },
      "62": {
        start: {
          line: 302,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "63": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 66
        }
      },
      "64": {
        start: {
          line: 305,
          column: 12
        },
        end: {
          line: 312,
          column: 15
        }
      },
      "65": {
        start: {
          line: 313,
          column: 12
        },
        end: {
          line: 411,
          column: 13
        }
      },
      "66": {
        start: {
          line: 314,
          column: 33
        },
        end: {
          line: 314,
          column: 74
        }
      },
      "67": {
        start: {
          line: 315,
          column: 42
        },
        end: {
          line: 319,
          column: 17
        }
      },
      "68": {
        start: {
          line: 321,
          column: 16
        },
        end: {
          line: 335,
          column: 17
        }
      },
      "69": {
        start: {
          line: 322,
          column: 20
        },
        end: {
          line: 334,
          column: 21
        }
      },
      "70": {
        start: {
          line: 324,
          column: 48
        },
        end: {
          line: 324,
          column: 77
        }
      },
      "71": {
        start: {
          line: 325,
          column: 24
        },
        end: {
          line: 333,
          column: 25
        }
      },
      "72": {
        start: {
          line: 326,
          column: 28
        },
        end: {
          line: 332,
          column: 31
        }
      },
      "73": {
        start: {
          line: 337,
          column: 16
        },
        end: {
          line: 360,
          column: 17
        }
      },
      "74": {
        start: {
          line: 338,
          column: 20
        },
        end: {
          line: 359,
          column: 21
        }
      },
      "75": {
        start: {
          line: 340,
          column: 24
        },
        end: {
          line: 348,
          column: 25
        }
      },
      "76": {
        start: {
          line: 341,
          column: 28
        },
        end: {
          line: 347,
          column: 31
        }
      },
      "77": {
        start: {
          line: 350,
          column: 24
        },
        end: {
          line: 358,
          column: 25
        }
      },
      "78": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 357,
          column: 31
        }
      },
      "79": {
        start: {
          line: 362,
          column: 16
        },
        end: {
          line: 382,
          column: 17
        }
      },
      "80": {
        start: {
          line: 364,
          column: 45
        },
        end: {
          line: 365,
          column: 76
        }
      },
      "81": {
        start: {
          line: 364,
          column: 73
        },
        end: {
          line: 365,
          column: 75
        }
      },
      "82": {
        start: {
          line: 366,
          column: 20
        },
        end: {
          line: 372,
          column: 21
        }
      },
      "83": {
        start: {
          line: 367,
          column: 24
        },
        end: {
          line: 371,
          column: 27
        }
      },
      "84": {
        start: {
          line: 374,
          column: 46
        },
        end: {
          line: 374,
          column: 88
        }
      },
      "85": {
        start: {
          line: 374,
          column: 76
        },
        end: {
          line: 374,
          column: 87
        }
      },
      "86": {
        start: {
          line: 375,
          column: 20
        },
        end: {
          line: 381,
          column: 21
        }
      },
      "87": {
        start: {
          line: 376,
          column: 24
        },
        end: {
          line: 380,
          column: 27
        }
      },
      "88": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 108
        }
      },
      "89": {
        start: {
          line: 384,
          column: 84
        },
        end: {
          line: 384,
          column: 106
        }
      },
      "90": {
        start: {
          line: 385,
          column: 16
        },
        end: {
          line: 390,
          column: 19
        }
      },
      "91": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 403,
          column: 18
        }
      },
      "92": {
        start: {
          line: 406,
          column: 16
        },
        end: {
          line: 409,
          column: 19
        }
      },
      "93": {
        start: {
          line: 410,
          column: 16
        },
        end: {
          line: 410,
          column: 128
        }
      },
      "94": {
        start: {
          line: 415,
          column: 4
        },
        end: {
          line: 486,
          column: 7
        }
      },
      "95": {
        start: {
          line: 426,
          column: 27
        },
        end: {
          line: 426,
          column: 38
        }
      },
      "96": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 429,
          column: 13
        }
      },
      "97": {
        start: {
          line: 428,
          column: 16
        },
        end: {
          line: 428,
          column: 66
        }
      },
      "98": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 434,
          column: 15
        }
      },
      "99": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 484,
          column: 13
        }
      },
      "100": {
        start: {
          line: 437,
          column: 33
        },
        end: {
          line: 437,
          column: 74
        }
      },
      "101": {
        start: {
          line: 438,
          column: 29
        },
        end: {
          line: 438,
          column: 76
        }
      },
      "102": {
        start: {
          line: 438,
          column: 55
        },
        end: {
          line: 438,
          column: 75
        }
      },
      "103": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 441,
          column: 17
        }
      },
      "104": {
        start: {
          line: 440,
          column: 20
        },
        end: {
          line: 440,
          column: 93
        }
      },
      "105": {
        start: {
          line: 444,
          column: 41
        },
        end: {
          line: 462,
          column: 17
        }
      },
      "106": {
        start: {
          line: 463,
          column: 16
        },
        end: {
          line: 467,
          column: 19
        }
      },
      "107": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 475,
          column: 18
        }
      },
      "108": {
        start: {
          line: 478,
          column: 16
        },
        end: {
          line: 482,
          column: 19
        }
      },
      "109": {
        start: {
          line: 483,
          column: 16
        },
        end: {
          line: 483,
          column: 130
        }
      }
    },
    fnMap: {
      "0": {
        name: "createWorkflowDevelopmentTools",
        decl: {
          start: {
            line: 56,
            column: 16
          },
          end: {
            line: 56,
            column: 46
          }
        },
        loc: {
          start: {
            line: 56,
            column: 66
          },
          end: {
            line: 487,
            column: 1
          }
        },
        line: 56
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 68,
            column: 17
          },
          end: {
            line: 68,
            column: 18
          }
        },
        loc: {
          start: {
            line: 68,
            column: 42
          },
          end: {
            line: 109,
            column: 9
          }
        },
        line: 68
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 122,
            column: 17
          },
          end: {
            line: 122,
            column: 18
          }
        },
        loc: {
          start: {
            line: 122,
            column: 42
          },
          end: {
            line: 150,
            column: 9
          }
        },
        line: 122
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 163,
            column: 17
          },
          end: {
            line: 163,
            column: 18
          }
        },
        loc: {
          start: {
            line: 163,
            column: 42
          },
          end: {
            line: 190,
            column: 9
          }
        },
        line: 163
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 203,
            column: 17
          },
          end: {
            line: 203,
            column: 18
          }
        },
        loc: {
          start: {
            line: 203,
            column: 42
          },
          end: {
            line: 287,
            column: 9
          }
        },
        line: 203
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 300,
            column: 17
          },
          end: {
            line: 300,
            column: 18
          }
        },
        loc: {
          start: {
            line: 300,
            column: 42
          },
          end: {
            line: 412,
            column: 9
          }
        },
        line: 300
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 364,
            column: 65
          },
          end: {
            line: 364,
            column: 66
          }
        },
        loc: {
          start: {
            line: 364,
            column: 73
          },
          end: {
            line: 365,
            column: 75
          }
        },
        line: 364
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 374,
            column: 68
          },
          end: {
            line: 374,
            column: 69
          }
        },
        loc: {
          start: {
            line: 374,
            column: 76
          },
          end: {
            line: 374,
            column: 87
          }
        },
        line: 374
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 384,
            column: 75
          },
          end: {
            line: 384,
            column: 76
          }
        },
        loc: {
          start: {
            line: 384,
            column: 84
          },
          end: {
            line: 384,
            column: 106
          }
        },
        line: 384
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 425,
            column: 17
          },
          end: {
            line: 425,
            column: 18
          }
        },
        loc: {
          start: {
            line: 425,
            column: 42
          },
          end: {
            line: 485,
            column: 9
          }
        },
        line: 425
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 438,
            column: 50
          },
          end: {
            line: 438,
            column: 51
          }
        },
        loc: {
          start: {
            line: 438,
            column: 55
          },
          end: {
            line: 438,
            column: 75
          }
        },
        line: 438
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 12
          },
          end: {
            line: 72,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "1": {
        loc: {
          start: {
            line: 105,
            column: 27
          },
          end: {
            line: 105,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 105,
            column: 52
          },
          end: {
            line: 105,
            column: 65
          }
        }, {
          start: {
            line: 105,
            column: 68
          },
          end: {
            line: 105,
            column: 81
          }
        }],
        line: 105
      },
      "2": {
        loc: {
          start: {
            line: 107,
            column: 78
          },
          end: {
            line: 107,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 107,
            column: 103
          },
          end: {
            line: 107,
            column: 116
          }
        }, {
          start: {
            line: 107,
            column: 119
          },
          end: {
            line: 107,
            column: 134
          }
        }],
        line: 107
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 131,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 131,
            column: 63
          }
        }, {
          start: {
            line: 131,
            column: 67
          },
          end: {
            line: 131,
            column: 72
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 132,
            column: 34
          },
          end: {
            line: 132,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 34
          },
          end: {
            line: 132,
            column: 65
          }
        }, {
          start: {
            line: 132,
            column: 69
          },
          end: {
            line: 132,
            column: 74
          }
        }],
        line: 132
      },
      "5": {
        loc: {
          start: {
            line: 146,
            column: 27
          },
          end: {
            line: 146,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 146,
            column: 52
          },
          end: {
            line: 146,
            column: 65
          }
        }, {
          start: {
            line: 146,
            column: 68
          },
          end: {
            line: 146,
            column: 81
          }
        }],
        line: 146
      },
      "6": {
        loc: {
          start: {
            line: 148,
            column: 78
          },
          end: {
            line: 148,
            column: 134
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 148,
            column: 103
          },
          end: {
            line: 148,
            column: 116
          }
        }, {
          start: {
            line: 148,
            column: 119
          },
          end: {
            line: 148,
            column: 134
          }
        }],
        line: 148
      },
      "7": {
        loc: {
          start: {
            line: 186,
            column: 27
          },
          end: {
            line: 186,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 186,
            column: 52
          },
          end: {
            line: 186,
            column: 65
          }
        }, {
          start: {
            line: 186,
            column: 68
          },
          end: {
            line: 186,
            column: 81
          }
        }],
        line: 186
      },
      "8": {
        loc: {
          start: {
            line: 188,
            column: 82
          },
          end: {
            line: 188,
            column: 138
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 107
          },
          end: {
            line: 188,
            column: 120
          }
        }, {
          start: {
            line: 188,
            column: 123
          },
          end: {
            line: 188,
            column: 138
          }
        }],
        line: 188
      },
      "9": {
        loc: {
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 12
          },
          end: {
            line: 207,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "10": {
        loc: {
          start: {
            line: 218,
            column: 33
          },
          end: {
            line: 218,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 218,
            column: 33
          },
          end: {
            line: 218,
            column: 42
          }
        }, {
          start: {
            line: 218,
            column: 46
          },
          end: {
            line: 218,
            column: 78
          }
        }],
        line: 218
      },
      "11": {
        loc: {
          start: {
            line: 226,
            column: 32
          },
          end: {
            line: 226,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 226,
            column: 32
          },
          end: {
            line: 226,
            column: 47
          }
        }, {
          start: {
            line: 226,
            column: 51
          },
          end: {
            line: 226,
            column: 53
          }
        }],
        line: 226
      },
      "12": {
        loc: {
          start: {
            line: 229,
            column: 42
          },
          end: {
            line: 229,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 229,
            column: 42
          },
          end: {
            line: 229,
            column: 56
          }
        }, {
          start: {
            line: 229,
            column: 60
          },
          end: {
            line: 229,
            column: 62
          }
        }],
        line: 229
      },
      "13": {
        loc: {
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 232,
            column: 16
          },
          end: {
            line: 249,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 232
      },
      "14": {
        loc: {
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 232,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 20
          },
          end: {
            line: 232,
            column: 34
          }
        }, {
          start: {
            line: 232,
            column: 38
          },
          end: {
            line: 232,
            column: 63
          }
        }],
        line: 232
      },
      "15": {
        loc: {
          start: {
            line: 234,
            column: 54
          },
          end: {
            line: 234,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 54
          },
          end: {
            line: 234,
            column: 91
          }
        }, {
          start: {
            line: 234,
            column: 95
          },
          end: {
            line: 234,
            column: 97
          }
        }],
        line: 234
      },
      "16": {
        loc: {
          start: {
            line: 235,
            column: 50
          },
          end: {
            line: 235,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 235,
            column: 50
          },
          end: {
            line: 235,
            column: 76
          }
        }, {
          start: {
            line: 235,
            column: 80
          },
          end: {
            line: 235,
            column: 82
          }
        }],
        line: 235
      },
      "17": {
        loc: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 238,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 238,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "18": {
        loc: {
          start: {
            line: 259,
            column: 37
          },
          end: {
            line: 259,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 37
          },
          end: {
            line: 259,
            column: 59
          }
        }, {
          start: {
            line: 259,
            column: 63
          },
          end: {
            line: 259,
            column: 64
          }
        }],
        line: 259
      },
      "19": {
        loc: {
          start: {
            line: 283,
            column: 27
          },
          end: {
            line: 283,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 283,
            column: 52
          },
          end: {
            line: 283,
            column: 65
          }
        }, {
          start: {
            line: 283,
            column: 68
          },
          end: {
            line: 283,
            column: 81
          }
        }],
        line: 283
      },
      "20": {
        loc: {
          start: {
            line: 285,
            column: 71
          },
          end: {
            line: 285,
            column: 127
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 285,
            column: 96
          },
          end: {
            line: 285,
            column: 109
          }
        }, {
          start: {
            line: 285,
            column: 112
          },
          end: {
            line: 285,
            column: 127
          }
        }],
        line: 285
      },
      "21": {
        loc: {
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 12
          },
          end: {
            line: 304,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "22": {
        loc: {
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 16
          },
          end: {
            line: 335,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "23": {
        loc: {
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 321,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 321,
            column: 20
          },
          end: {
            line: 321,
            column: 41
          }
        }, {
          start: {
            line: 321,
            column: 45
          },
          end: {
            line: 321,
            column: 59
          }
        }],
        line: 321
      },
      "24": {
        loc: {
          start: {
            line: 325,
            column: 24
          },
          end: {
            line: 333,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 325,
            column: 24
          },
          end: {
            line: 333,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 325
      },
      "25": {
        loc: {
          start: {
            line: 325,
            column: 28
          },
          end: {
            line: 325,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 325,
            column: 28
          },
          end: {
            line: 325,
            column: 44
          }
        }, {
          start: {
            line: 325,
            column: 48
          },
          end: {
            line: 325,
            column: 92
          }
        }],
        line: 325
      },
      "26": {
        loc: {
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 16
          },
          end: {
            line: 360,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "27": {
        loc: {
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 20
          },
          end: {
            line: 337,
            column: 47
          }
        }, {
          start: {
            line: 337,
            column: 51
          },
          end: {
            line: 337,
            column: 65
          }
        }],
        line: 337
      },
      "28": {
        loc: {
          start: {
            line: 340,
            column: 24
          },
          end: {
            line: 348,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 24
          },
          end: {
            line: 348,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "29": {
        loc: {
          start: {
            line: 350,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 350,
            column: 24
          },
          end: {
            line: 358,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 350
      },
      "30": {
        loc: {
          start: {
            line: 350,
            column: 28
          },
          end: {
            line: 350,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 28
          },
          end: {
            line: 350,
            column: 44
          }
        }, {
          start: {
            line: 350,
            column: 48
          },
          end: {
            line: 350,
            column: 89
          }
        }],
        line: 350
      },
      "31": {
        loc: {
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 382,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 362,
            column: 16
          },
          end: {
            line: 382,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 362
      },
      "32": {
        loc: {
          start: {
            line: 362,
            column: 20
          },
          end: {
            line: 362,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 362,
            column: 20
          },
          end: {
            line: 362,
            column: 44
          }
        }, {
          start: {
            line: 362,
            column: 48
          },
          end: {
            line: 362,
            column: 62
          }
        }],
        line: 362
      },
      "33": {
        loc: {
          start: {
            line: 364,
            column: 73
          },
          end: {
            line: 365,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 364,
            column: 73
          },
          end: {
            line: 364,
            column: 116
          }
        }, {
          start: {
            line: 365,
            column: 25
          },
          end: {
            line: 365,
            column: 40
          }
        }, {
          start: {
            line: 365,
            column: 44
          },
          end: {
            line: 365,
            column: 74
          }
        }],
        line: 364
      },
      "34": {
        loc: {
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 372,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 366,
            column: 20
          },
          end: {
            line: 372,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 366
      },
      "35": {
        loc: {
          start: {
            line: 375,
            column: 20
          },
          end: {
            line: 381,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 375,
            column: 20
          },
          end: {
            line: 381,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 375
      },
      "36": {
        loc: {
          start: {
            line: 408,
            column: 27
          },
          end: {
            line: 408,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 408,
            column: 52
          },
          end: {
            line: 408,
            column: 65
          }
        }, {
          start: {
            line: 408,
            column: 68
          },
          end: {
            line: 408,
            column: 81
          }
        }],
        line: 408
      },
      "37": {
        loc: {
          start: {
            line: 410,
            column: 68
          },
          end: {
            line: 410,
            column: 124
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 93
          },
          end: {
            line: 410,
            column: 106
          }
        }, {
          start: {
            line: 410,
            column: 109
          },
          end: {
            line: 410,
            column: 124
          }
        }],
        line: 410
      },
      "38": {
        loc: {
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 427,
            column: 12
          },
          end: {
            line: 429,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 427
      },
      "39": {
        loc: {
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 441,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 439
      },
      "40": {
        loc: {
          start: {
            line: 481,
            column: 27
          },
          end: {
            line: 481,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 481,
            column: 52
          },
          end: {
            line: 481,
            column: 65
          }
        }, {
          start: {
            line: 481,
            column: 68
          },
          end: {
            line: 481,
            column: 81
          }
        }],
        line: 481
      },
      "41": {
        loc: {
          start: {
            line: 483,
            column: 70
          },
          end: {
            line: 483,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 483,
            column: 95
          },
          end: {
            line: 483,
            column: 108
          }
        }, {
          start: {
            line: 483,
            column: 111
          },
          end: {
            line: 483,
            column: 126
          }
        }],
        line: 483
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow-development.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/workflow-development.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nNode } from '../types/n8n.js';\nimport {\n  discoverWorkflowVariables,\n  extractAvailableVariables,\n} from '../utils/variableDiscovery.js';\nimport { getNodeDocumentation, getFunctionDocumentation } from '../utils/documentationAccess.js';\n\n// Zod schemas for validation\nconst _WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst DiscoverVariablesSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().optional(),\n  includeGlobalVariables: z.boolean().optional().default(true),\n  includeNodeOutputs: z.boolean().optional().default(true),\n  includeExpressionFunctions: z.boolean().optional().default(false),\n});\n\nconst NodeDocumentationSchema = z.object({\n  nodeType: z.string().min(1, 'Node type is required'),\n  includeExamples: z.boolean().optional().default(true),\n  includeFunctions: z.boolean().optional().default(true),\n});\n\nconst FunctionDocumentationSchema = z.object({\n  functionName: z.string().min(1, 'Function name is required'),\n  category: z\n    .enum(['date', 'string', 'number', 'array', 'object', 'workflow', 'utility'])\n    .optional(),\n});\n\nconst DynamicNodeCreationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeType: z.string().min(1, 'Node type is required'),\n  position: z.tuple([z.number(), z.number()]),\n  parameters: z.record(z.unknown()).optional(),\n  name: z.string().optional(),\n  connectTo: z\n    .array(\n      z.object({\n        nodeId: z.string(),\n        outputIndex: z.number().optional().default(0),\n        inputIndex: z.number().optional().default(0),\n      })\n    )\n    .optional(),\n});\n\nconst WorkflowValidationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  checkConnections: z.boolean().optional().default(true),\n  checkNodeConfiguration: z.boolean().optional().default(true),\n  checkCredentials: z.boolean().optional().default(true),\n  suggestImprovements: z.boolean().optional().default(false),\n});\n\nconst ExpressionEvaluationSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  expression: z.string().min(1, 'Expression is required'),\n  executionId: z.string().optional(),\n  inputData: z.record(z.unknown()).optional(),\n});\n\n// Tool registration function\nexport function createWorkflowDevelopmentTools(getClient: () => N8nClient | null, server: any) {\n  // Variable discovery tool\n  server.addTool({\n    name: 'discover-workflow-variables',\n    description:\n      'Discover available variables and data within a workflow context for development assistance',\n    parameters: DiscoverVariablesSchema,\n    annotations: {\n      title: 'Discover Workflow Variables',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n    },\n    execute: async (args: z.infer<typeof DiscoverVariablesSchema>, { log }: any) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized');\n      }\n\n      log.info('Discovering workflow variables', {\n        workflowId: args.workflowId,\n        nodeId: args.nodeId,\n      });\n\n      try {\n        // Get workflow data\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Discover variables in workflow context\n        const variables = await discoverWorkflowVariables(workflow, args.nodeId, {\n          includeGlobal: args.includeGlobalVariables,\n          includeNodeOutputs: args.includeNodeOutputs,\n          includeExpressionFunctions: args.includeExpressionFunctions,\n        });\n\n        log.info('Variable discovery completed', {\n          variableCount: Object.keys(variables).length,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(\n                {\n                  workflowId: args.workflowId,\n                  nodeId: args.nodeId,\n                  variables,\n                  discoveredAt: new Date().toISOString(),\n                },\n                null,\n                2\n              ),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to discover workflow variables', {\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to discover workflow variables: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Node documentation access tool\n  server.addTool({\n    name: 'get-node-documentation',\n    description:\n      'Get comprehensive documentation for a specific node type including parameters, examples, and usage patterns',\n    parameters: NodeDocumentationSchema,\n    annotations: {\n      title: 'Get Node Documentation',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n    },\n    execute: async (args: z.infer<typeof NodeDocumentationSchema>, { log }: any) => {\n      log.info('Retrieving node documentation', { nodeType: args.nodeType });\n\n      try {\n        const documentation = await getNodeDocumentation(args.nodeType, {\n          includeExamples: args.includeExamples,\n          includeFunctions: args.includeFunctions,\n        });\n\n        log.info('Node documentation retrieved', {\n          nodeType: args.nodeType,\n          hasExamples: documentation.examples?.length ?? 0 > 0,\n          hasFunctions: documentation.functions?.length ?? 0 > 0,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(documentation, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to retrieve node documentation', {\n          nodeType: args.nodeType,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to retrieve node documentation: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Function documentation access tool\n  server.addTool({\n    name: 'get-function-documentation',\n    description:\n      'Get documentation for built-in n8n expression functions with examples and usage patterns',\n    parameters: FunctionDocumentationSchema,\n    annotations: {\n      title: 'Get Function Documentation',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n    },\n    execute: async (args: z.infer<typeof FunctionDocumentationSchema>, { log }: any) => {\n      log.info('Retrieving function documentation', {\n        functionName: args.functionName,\n        category: args.category,\n      });\n\n      try {\n        const documentation = await getFunctionDocumentation(args.functionName, args.category);\n\n        log.info('Function documentation retrieved', {\n          functionName: args.functionName,\n          hasExamples: documentation.examples?.length > 0,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(documentation, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to retrieve function documentation', {\n          functionName: args.functionName,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to retrieve function documentation: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Dynamic node creation tool\n  server.addTool({\n    name: 'create-workflow-node',\n    description: 'Dynamically create and connect a new node in a workflow during development',\n    parameters: DynamicNodeCreationSchema,\n    annotations: {\n      title: 'Create Workflow Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n    },\n    execute: async (args: z.infer<typeof DynamicNodeCreationSchema>, { log }: any) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized');\n      }\n\n      log.info('Creating new workflow node', {\n        workflowId: args.workflowId,\n        nodeType: args.nodeType,\n        position: args.position,\n      });\n\n      try {\n        // Get current workflow\n        const workflow = await client.getWorkflow(args.workflowId);\n\n        // Generate unique node ID\n        const nodeId = `${args.nodeType}_${Date.now()}`;\n        const nodeName = args.name || `${args.nodeType} ${Date.now()}`;\n\n        // Create new node\n        const newNode: N8nNode = {\n          id: nodeId,\n          name: nodeName,\n          type: args.nodeType,\n          typeVersion: 1,\n          position: args.position,\n          parameters: args.parameters || {},\n        };\n\n        // Add node to workflow\n        const updatedNodes = [...(workflow.nodes || []), newNode];\n        const updatedConnections = { ...workflow.connections };\n\n        // Create connections if specified\n        if (args.connectTo && args.connectTo.length > 0) {\n          for (const connection of args.connectTo) {\n            const sourceNodeConnections = updatedConnections[connection.nodeId] || {};\n            const outputConnections = (sourceNodeConnections as any).main || [];\n\n            if (!outputConnections[connection.outputIndex]) {\n              outputConnections[connection.outputIndex] = [];\n            }\n\n            outputConnections[connection.outputIndex].push({\n              node: nodeId,\n              type: 'main',\n              index: connection.inputIndex,\n            });\n\n            updatedConnections[connection.nodeId] = {\n              ...sourceNodeConnections,\n              main: outputConnections,\n            };\n          }\n        }\n\n        // Update workflow\n        await client.updateWorkflow(args.workflowId, {\n          nodes: updatedNodes,\n          connections: updatedConnections,\n        });\n\n        log.info('Workflow node created successfully', {\n          workflowId: args.workflowId,\n          nodeId,\n          nodeName,\n          connectionCount: args.connectTo?.length || 0,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(\n                {\n                  success: true,\n                  nodeId,\n                  nodeName,\n                  nodeType: args.nodeType,\n                  position: args.position,\n                  connections: args.connectTo,\n                  workflowId: args.workflowId,\n                  updatedAt: new Date().toISOString(),\n                },\n                null,\n                2\n              ),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to create workflow node', {\n          workflowId: args.workflowId,\n          nodeType: args.nodeType,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to create workflow node: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Workflow validation tool\n  server.addTool({\n    name: 'validate-workflow',\n    description:\n      'Validate workflow configuration and connections, providing development assistance and suggestions',\n    parameters: WorkflowValidationSchema,\n    annotations: {\n      title: 'Validate Workflow',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowValidationSchema>, { log }: any) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized');\n      }\n\n      log.info('Validating workflow', {\n        workflowId: args.workflowId,\n        checks: {\n          connections: args.checkConnections,\n          nodeConfiguration: args.checkNodeConfiguration,\n          credentials: args.checkCredentials,\n        },\n      });\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const validationResults = {\n          isValid: true,\n          issues: [] as Array<{\n            type: 'error' | 'warning' | 'suggestion';\n            category: 'connection' | 'configuration' | 'credential' | 'performance';\n            message: string;\n            nodeId?: string;\n            suggestion?: string;\n          }>,\n          suggestions: [] as Array<{\n            type: 'improvement' | 'optimization' | 'best_practice';\n            message: string;\n            nodeId?: string;\n            implementation?: string;\n          }>,\n        };\n\n        // Validate connections\n        if (args.checkConnections && workflow.nodes) {\n          for (const node of workflow.nodes) {\n            // Check if node has required connections\n            const nodeConnections = workflow.connections[node.id];\n            if (!nodeConnections && node.type !== 'n8n-nodes-base.manualTrigger') {\n              validationResults.issues.push({\n                type: 'warning',\n                category: 'connection',\n                message: `Node \"${node.name}\" has no connections`,\n                nodeId: node.id,\n                suggestion: 'Connect this node to other nodes in the workflow',\n              });\n            }\n          }\n        }\n\n        // Validate node configuration\n        if (args.checkNodeConfiguration && workflow.nodes) {\n          for (const node of workflow.nodes) {\n            // Check for disabled nodes\n            if (node.disabled) {\n              validationResults.issues.push({\n                type: 'warning',\n                category: 'configuration',\n                message: `Node \"${node.name}\" is disabled`,\n                nodeId: node.id,\n                suggestion: 'Enable the node if it should be active in the workflow',\n              });\n            }\n\n            // Check for empty parameters that might be required\n            if (!node.parameters || Object.keys(node.parameters).length === 0) {\n              validationResults.issues.push({\n                type: 'warning',\n                category: 'configuration',\n                message: `Node \"${node.name}\" has no parameters configured`,\n                nodeId: node.id,\n                suggestion: 'Review node configuration to ensure all required parameters are set',\n              });\n            }\n          }\n        }\n\n        // Generate improvement suggestions\n        if (args.suggestImprovements && workflow.nodes) {\n          // Suggest error handling\n          const hasErrorHandling = workflow.nodes.some(\n            node =>\n              node.type === 'n8n-nodes-base.errorTrigger' ||\n              (node.parameters && node.parameters.continueOnFail)\n          );\n\n          if (!hasErrorHandling) {\n            validationResults.suggestions.push({\n              type: 'best_practice',\n              message: 'Consider adding error handling to make your workflow more robust',\n              implementation:\n                'Add an Error Trigger node or enable \"Continue on Fail\" for critical nodes',\n            });\n          }\n\n          // Suggest using notes for documentation\n          const nodesWithoutNotes = workflow.nodes.filter(node => !node.notes);\n          if (nodesWithoutNotes.length > workflow.nodes.length / 2) {\n            validationResults.suggestions.push({\n              type: 'best_practice',\n              message: 'Consider adding notes to your nodes for better documentation',\n              implementation: 'Add descriptive notes to explain what each node does',\n            });\n          }\n        }\n\n        // Set overall validation status\n        validationResults.isValid = !validationResults.issues.some(issue => issue.type === 'error');\n\n        log.info('Workflow validation completed', {\n          workflowId: args.workflowId,\n          isValid: validationResults.isValid,\n          issueCount: validationResults.issues.length,\n          suggestionCount: validationResults.suggestions.length,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(\n                {\n                  workflowId: args.workflowId,\n                  workflowName: workflow.name,\n                  validation: validationResults,\n                  validatedAt: new Date().toISOString(),\n                },\n                null,\n                2\n              ),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to validate workflow', {\n          workflowId: args.workflowId,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to validate workflow: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n\n  // Expression evaluation tool\n  server.addTool({\n    name: 'evaluate-expression',\n    description:\n      'Evaluate n8n expressions in the context of a workflow for development and testing',\n    parameters: ExpressionEvaluationSchema,\n    annotations: {\n      title: 'Evaluate Expression',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n    },\n    execute: async (args: z.infer<typeof ExpressionEvaluationSchema>, { log }: any) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized');\n      }\n\n      log.info('Evaluating expression', {\n        workflowId: args.workflowId,\n        nodeId: args.nodeId,\n        expressionLength: args.expression.length,\n      });\n\n      try {\n        // Get workflow and node context\n        const workflow = await client.getWorkflow(args.workflowId);\n        const node = workflow.nodes?.find(n => n.id === args.nodeId);\n\n        if (!node) {\n          throw new UserError(`Node with ID ${args.nodeId} not found in workflow`);\n        }\n\n        // For now, return a structured response indicating the expression would be evaluated\n        // In a full implementation, this would connect to n8n's expression evaluator\n        const evaluationResult = {\n          expression: args.expression,\n          context: {\n            workflowId: args.workflowId,\n            workflowName: workflow.name,\n            nodeId: args.nodeId,\n            nodeName: node.name,\n            nodeType: node.type,\n          },\n          // This would contain the actual evaluation result in a full implementation\n          result: {\n            status: 'simulated',\n            message: 'Expression evaluation is simulated in development mode',\n            parsedExpression: args.expression,\n            availableVariables: await extractAvailableVariables(workflow, args.nodeId),\n          },\n          inputData: args.inputData,\n          evaluatedAt: new Date().toISOString(),\n        };\n\n        log.info('Expression evaluation completed', {\n          workflowId: args.workflowId,\n          nodeId: args.nodeId,\n          status: evaluationResult.result.status,\n        });\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: JSON.stringify(evaluationResult, null, 2),\n            },\n          ],\n        };\n      } catch (error) {\n        log.error('Failed to evaluate expression', {\n          workflowId: args.workflowId,\n          nodeId: args.nodeId,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        throw new UserError(\n          `Failed to evaluate expression: ${error instanceof Error ? error.message : 'Unknown error'}`\n        );\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6e52d5224b542c6e9b75c1226b7179ddb389fa99"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kcfjk5dl8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kcfjk5dl8();
import { z } from 'zod';
import { UserError } from 'fastmcp';
import { discoverWorkflowVariables, extractAvailableVariables } from '../utils/variableDiscovery.js';
import { getNodeDocumentation, getFunctionDocumentation } from '../utils/documentationAccess.js';
// Zod schemas for validation
const _WorkflowIdSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[0]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required')
}));
const DiscoverVariablesSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[1]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().optional(),
  includeGlobalVariables: z.boolean().optional().default(true),
  includeNodeOutputs: z.boolean().optional().default(true),
  includeExpressionFunctions: z.boolean().optional().default(false)
}));
const NodeDocumentationSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[2]++, z.object({
  nodeType: z.string().min(1, 'Node type is required'),
  includeExamples: z.boolean().optional().default(true),
  includeFunctions: z.boolean().optional().default(true)
}));
const FunctionDocumentationSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[3]++, z.object({
  functionName: z.string().min(1, 'Function name is required'),
  category: z.enum(['date', 'string', 'number', 'array', 'object', 'workflow', 'utility']).optional()
}));
const DynamicNodeCreationSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[4]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeType: z.string().min(1, 'Node type is required'),
  position: z.tuple([z.number(), z.number()]),
  parameters: z.record(z.unknown()).optional(),
  name: z.string().optional(),
  connectTo: z.array(z.object({
    nodeId: z.string(),
    outputIndex: z.number().optional().default(0),
    inputIndex: z.number().optional().default(0)
  })).optional()
}));
const WorkflowValidationSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[5]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  checkConnections: z.boolean().optional().default(true),
  checkNodeConfiguration: z.boolean().optional().default(true),
  checkCredentials: z.boolean().optional().default(true),
  suggestImprovements: z.boolean().optional().default(false)
}));
const ExpressionEvaluationSchema =
/* istanbul ignore next */
(cov_2kcfjk5dl8().s[6]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  expression: z.string().min(1, 'Expression is required'),
  executionId: z.string().optional(),
  inputData: z.record(z.unknown()).optional()
}));
// Tool registration function
export function createWorkflowDevelopmentTools(getClient, server) {
  /* istanbul ignore next */
  cov_2kcfjk5dl8().f[0]++;
  cov_2kcfjk5dl8().s[7]++;
  // Variable discovery tool
  server.addTool({
    name: 'discover-workflow-variables',
    description: 'Discover available variables and data within a workflow context for development assistance',
    parameters: DiscoverVariablesSchema,
    annotations: {
      title: 'Discover Workflow Variables',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_2kcfjk5dl8().s[8]++, getClient());
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[9]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().b[0][0]++;
        cov_2kcfjk5dl8().s[10]++;
        throw new UserError('n8n client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kcfjk5dl8().b[0][1]++;
      }
      cov_2kcfjk5dl8().s[11]++;
      log.info('Discovering workflow variables', {
        workflowId: args.workflowId,
        nodeId: args.nodeId
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[12]++;
      try {
        // Get workflow data
        const workflow =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[13]++, await client.getWorkflow(args.workflowId));
        // Discover variables in workflow context
        const variables =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[14]++, await discoverWorkflowVariables(workflow, args.nodeId, {
          includeGlobal: args.includeGlobalVariables,
          includeNodeOutputs: args.includeNodeOutputs,
          includeExpressionFunctions: args.includeExpressionFunctions
        }));
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[15]++;
        log.info('Variable discovery completed', {
          variableCount: Object.keys(variables).length
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[16]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              workflowId: args.workflowId,
              nodeId: args.nodeId,
              variables,
              discoveredAt: new Date().toISOString()
            }, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[17]++;
        log.error('Failed to discover workflow variables', {
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[1][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[1][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[18]++;
        throw new UserError(`Failed to discover workflow variables: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[2][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[2][1]++, 'Unknown error')}`);
      }
    }
  });
  // Node documentation access tool
  /* istanbul ignore next */
  cov_2kcfjk5dl8().s[19]++;
  server.addTool({
    name: 'get-node-documentation',
    description: 'Get comprehensive documentation for a specific node type including parameters, examples, and usage patterns',
    parameters: NodeDocumentationSchema,
    annotations: {
      title: 'Get Node Documentation',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[2]++;
      cov_2kcfjk5dl8().s[20]++;
      log.info('Retrieving node documentation', {
        nodeType: args.nodeType
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[21]++;
      try {
        const documentation =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[22]++, await getNodeDocumentation(args.nodeType, {
          includeExamples: args.includeExamples,
          includeFunctions: args.includeFunctions
        }));
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[23]++;
        log.info('Node documentation retrieved', {
          nodeType: args.nodeType,
          hasExamples:
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[3][0]++, documentation.examples?.length) ??
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[3][1]++, 0 > 0),
          hasFunctions:
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[4][0]++, documentation.functions?.length) ??
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[4][1]++, 0 > 0)
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[24]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(documentation, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[25]++;
        log.error('Failed to retrieve node documentation', {
          nodeType: args.nodeType,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[5][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[5][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[26]++;
        throw new UserError(`Failed to retrieve node documentation: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[6][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[6][1]++, 'Unknown error')}`);
      }
    }
  });
  // Function documentation access tool
  /* istanbul ignore next */
  cov_2kcfjk5dl8().s[27]++;
  server.addTool({
    name: 'get-function-documentation',
    description: 'Get documentation for built-in n8n expression functions with examples and usage patterns',
    parameters: FunctionDocumentationSchema,
    annotations: {
      title: 'Get Function Documentation',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[3]++;
      cov_2kcfjk5dl8().s[28]++;
      log.info('Retrieving function documentation', {
        functionName: args.functionName,
        category: args.category
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[29]++;
      try {
        const documentation =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[30]++, await getFunctionDocumentation(args.functionName, args.category));
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[31]++;
        log.info('Function documentation retrieved', {
          functionName: args.functionName,
          hasExamples: documentation.examples?.length > 0
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[32]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(documentation, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[33]++;
        log.error('Failed to retrieve function documentation', {
          functionName: args.functionName,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[7][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[7][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[34]++;
        throw new UserError(`Failed to retrieve function documentation: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[8][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[8][1]++, 'Unknown error')}`);
      }
    }
  });
  // Dynamic node creation tool
  /* istanbul ignore next */
  cov_2kcfjk5dl8().s[35]++;
  server.addTool({
    name: 'create-workflow-node',
    description: 'Dynamically create and connect a new node in a workflow during development',
    parameters: DynamicNodeCreationSchema,
    annotations: {
      title: 'Create Workflow Node',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_2kcfjk5dl8().s[36]++, getClient());
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[37]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().b[9][0]++;
        cov_2kcfjk5dl8().s[38]++;
        throw new UserError('n8n client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kcfjk5dl8().b[9][1]++;
      }
      cov_2kcfjk5dl8().s[39]++;
      log.info('Creating new workflow node', {
        workflowId: args.workflowId,
        nodeType: args.nodeType,
        position: args.position
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[40]++;
      try {
        // Get current workflow
        const workflow =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[41]++, await client.getWorkflow(args.workflowId));
        // Generate unique node ID
        const nodeId =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[42]++, `${args.nodeType}_${Date.now()}`);
        const nodeName =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[43]++,
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[10][0]++, args.name) ||
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[10][1]++, `${args.nodeType} ${Date.now()}`));
        // Create new node
        const newNode =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[44]++, {
          id: nodeId,
          name: nodeName,
          type: args.nodeType,
          typeVersion: 1,
          position: args.position,
          parameters:
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[11][0]++, args.parameters) ||
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[11][1]++, {})
        });
        // Add node to workflow
        const updatedNodes =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[45]++, [...(
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[12][0]++, workflow.nodes) ||
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[12][1]++, [])), newNode]);
        const updatedConnections =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[46]++, {
          ...workflow.connections
        });
        // Create connections if specified
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[47]++;
        if (
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[14][0]++, args.connectTo) &&
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[14][1]++, args.connectTo.length > 0)) {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().b[13][0]++;
          cov_2kcfjk5dl8().s[48]++;
          for (const connection of args.connectTo) {
            const sourceNodeConnections =
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().s[49]++,
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[15][0]++, updatedConnections[connection.nodeId]) ||
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[15][1]++, {}));
            const outputConnections =
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().s[50]++,
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[16][0]++, sourceNodeConnections.main) ||
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[16][1]++, []));
            /* istanbul ignore next */
            cov_2kcfjk5dl8().s[51]++;
            if (!outputConnections[connection.outputIndex]) {
              /* istanbul ignore next */
              cov_2kcfjk5dl8().b[17][0]++;
              cov_2kcfjk5dl8().s[52]++;
              outputConnections[connection.outputIndex] = [];
            } else
            /* istanbul ignore next */
            {
              cov_2kcfjk5dl8().b[17][1]++;
            }
            cov_2kcfjk5dl8().s[53]++;
            outputConnections[connection.outputIndex].push({
              node: nodeId,
              type: 'main',
              index: connection.inputIndex
            });
            /* istanbul ignore next */
            cov_2kcfjk5dl8().s[54]++;
            updatedConnections[connection.nodeId] = {
              ...sourceNodeConnections,
              main: outputConnections
            };
          }
        } else
        /* istanbul ignore next */
        {
          cov_2kcfjk5dl8().b[13][1]++;
        }
        // Update workflow
        cov_2kcfjk5dl8().s[55]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: updatedNodes,
          connections: updatedConnections
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[56]++;
        log.info('Workflow node created successfully', {
          workflowId: args.workflowId,
          nodeId,
          nodeName,
          connectionCount:
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[18][0]++, args.connectTo?.length) ||
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[18][1]++, 0)
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[57]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              success: true,
              nodeId,
              nodeName,
              nodeType: args.nodeType,
              position: args.position,
              connections: args.connectTo,
              workflowId: args.workflowId,
              updatedAt: new Date().toISOString()
            }, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[58]++;
        log.error('Failed to create workflow node', {
          workflowId: args.workflowId,
          nodeType: args.nodeType,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[19][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[19][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[59]++;
        throw new UserError(`Failed to create workflow node: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[20][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[20][1]++, 'Unknown error')}`);
      }
    }
  });
  // Workflow validation tool
  /* istanbul ignore next */
  cov_2kcfjk5dl8().s[60]++;
  server.addTool({
    name: 'validate-workflow',
    description: 'Validate workflow configuration and connections, providing development assistance and suggestions',
    parameters: WorkflowValidationSchema,
    annotations: {
      title: 'Validate Workflow',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_2kcfjk5dl8().s[61]++, getClient());
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[62]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().b[21][0]++;
        cov_2kcfjk5dl8().s[63]++;
        throw new UserError('n8n client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kcfjk5dl8().b[21][1]++;
      }
      cov_2kcfjk5dl8().s[64]++;
      log.info('Validating workflow', {
        workflowId: args.workflowId,
        checks: {
          connections: args.checkConnections,
          nodeConfiguration: args.checkNodeConfiguration,
          credentials: args.checkCredentials
        }
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[65]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[66]++, await client.getWorkflow(args.workflowId));
        const validationResults =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[67]++, {
          isValid: true,
          issues: [],
          suggestions: []
        });
        // Validate connections
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[68]++;
        if (
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[23][0]++, args.checkConnections) &&
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[23][1]++, workflow.nodes)) {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().b[22][0]++;
          cov_2kcfjk5dl8().s[69]++;
          for (const node of workflow.nodes) {
            // Check if node has required connections
            const nodeConnections =
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().s[70]++, workflow.connections[node.id]);
            /* istanbul ignore next */
            cov_2kcfjk5dl8().s[71]++;
            if (
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[25][0]++, !nodeConnections) &&
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[25][1]++, node.type !== 'n8n-nodes-base.manualTrigger')) {
              /* istanbul ignore next */
              cov_2kcfjk5dl8().b[24][0]++;
              cov_2kcfjk5dl8().s[72]++;
              validationResults.issues.push({
                type: 'warning',
                category: 'connection',
                message: `Node "${node.name}" has no connections`,
                nodeId: node.id,
                suggestion: 'Connect this node to other nodes in the workflow'
              });
            } else
            /* istanbul ignore next */
            {
              cov_2kcfjk5dl8().b[24][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_2kcfjk5dl8().b[22][1]++;
        }
        // Validate node configuration
        cov_2kcfjk5dl8().s[73]++;
        if (
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[27][0]++, args.checkNodeConfiguration) &&
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[27][1]++, workflow.nodes)) {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().b[26][0]++;
          cov_2kcfjk5dl8().s[74]++;
          for (const node of workflow.nodes) {
            /* istanbul ignore next */
            cov_2kcfjk5dl8().s[75]++;
            // Check for disabled nodes
            if (node.disabled) {
              /* istanbul ignore next */
              cov_2kcfjk5dl8().b[28][0]++;
              cov_2kcfjk5dl8().s[76]++;
              validationResults.issues.push({
                type: 'warning',
                category: 'configuration',
                message: `Node "${node.name}" is disabled`,
                nodeId: node.id,
                suggestion: 'Enable the node if it should be active in the workflow'
              });
            } else
            /* istanbul ignore next */
            {
              cov_2kcfjk5dl8().b[28][1]++;
            }
            // Check for empty parameters that might be required
            cov_2kcfjk5dl8().s[77]++;
            if (
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[30][0]++, !node.parameters) ||
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[30][1]++, Object.keys(node.parameters).length === 0)) {
              /* istanbul ignore next */
              cov_2kcfjk5dl8().b[29][0]++;
              cov_2kcfjk5dl8().s[78]++;
              validationResults.issues.push({
                type: 'warning',
                category: 'configuration',
                message: `Node "${node.name}" has no parameters configured`,
                nodeId: node.id,
                suggestion: 'Review node configuration to ensure all required parameters are set'
              });
            } else
            /* istanbul ignore next */
            {
              cov_2kcfjk5dl8().b[29][1]++;
            }
          }
        } else
        /* istanbul ignore next */
        {
          cov_2kcfjk5dl8().b[26][1]++;
        }
        // Generate improvement suggestions
        cov_2kcfjk5dl8().s[79]++;
        if (
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[32][0]++, args.suggestImprovements) &&
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[32][1]++, workflow.nodes)) {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().b[31][0]++;
          // Suggest error handling
          const hasErrorHandling =
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().s[80]++, workflow.nodes.some(node => {
            /* istanbul ignore next */
            cov_2kcfjk5dl8().f[6]++;
            cov_2kcfjk5dl8().s[81]++;
            return /* istanbul ignore next */(cov_2kcfjk5dl8().b[33][0]++, node.type === 'n8n-nodes-base.errorTrigger') ||
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[33][1]++, node.parameters) &&
            /* istanbul ignore next */
            (cov_2kcfjk5dl8().b[33][2]++, node.parameters.continueOnFail);
          }));
          /* istanbul ignore next */
          cov_2kcfjk5dl8().s[82]++;
          if (!hasErrorHandling) {
            /* istanbul ignore next */
            cov_2kcfjk5dl8().b[34][0]++;
            cov_2kcfjk5dl8().s[83]++;
            validationResults.suggestions.push({
              type: 'best_practice',
              message: 'Consider adding error handling to make your workflow more robust',
              implementation: 'Add an Error Trigger node or enable "Continue on Fail" for critical nodes'
            });
          } else
          /* istanbul ignore next */
          {
            cov_2kcfjk5dl8().b[34][1]++;
          }
          // Suggest using notes for documentation
          const nodesWithoutNotes =
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().s[84]++, workflow.nodes.filter(node => {
            /* istanbul ignore next */
            cov_2kcfjk5dl8().f[7]++;
            cov_2kcfjk5dl8().s[85]++;
            return !node.notes;
          }));
          /* istanbul ignore next */
          cov_2kcfjk5dl8().s[86]++;
          if (nodesWithoutNotes.length > workflow.nodes.length / 2) {
            /* istanbul ignore next */
            cov_2kcfjk5dl8().b[35][0]++;
            cov_2kcfjk5dl8().s[87]++;
            validationResults.suggestions.push({
              type: 'best_practice',
              message: 'Consider adding notes to your nodes for better documentation',
              implementation: 'Add descriptive notes to explain what each node does'
            });
          } else
          /* istanbul ignore next */
          {
            cov_2kcfjk5dl8().b[35][1]++;
          }
        } else
        /* istanbul ignore next */
        {
          cov_2kcfjk5dl8().b[31][1]++;
        }
        // Set overall validation status
        cov_2kcfjk5dl8().s[88]++;
        validationResults.isValid = !validationResults.issues.some(issue => {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().f[8]++;
          cov_2kcfjk5dl8().s[89]++;
          return issue.type === 'error';
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[90]++;
        log.info('Workflow validation completed', {
          workflowId: args.workflowId,
          isValid: validationResults.isValid,
          issueCount: validationResults.issues.length,
          suggestionCount: validationResults.suggestions.length
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[91]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify({
              workflowId: args.workflowId,
              workflowName: workflow.name,
              validation: validationResults,
              validatedAt: new Date().toISOString()
            }, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[92]++;
        log.error('Failed to validate workflow', {
          workflowId: args.workflowId,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[36][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[36][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[93]++;
        throw new UserError(`Failed to validate workflow: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[37][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[37][1]++, 'Unknown error')}`);
      }
    }
  });
  // Expression evaluation tool
  /* istanbul ignore next */
  cov_2kcfjk5dl8().s[94]++;
  server.addTool({
    name: 'evaluate-expression',
    description: 'Evaluate n8n expressions in the context of a workflow for development and testing',
    parameters: ExpressionEvaluationSchema,
    annotations: {
      title: 'Evaluate Expression',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false
    },
    execute: async (args, {
      log
    }) => {
      /* istanbul ignore next */
      cov_2kcfjk5dl8().f[9]++;
      const client =
      /* istanbul ignore next */
      (cov_2kcfjk5dl8().s[95]++, getClient());
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[96]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().b[38][0]++;
        cov_2kcfjk5dl8().s[97]++;
        throw new UserError('n8n client not initialized');
      } else
      /* istanbul ignore next */
      {
        cov_2kcfjk5dl8().b[38][1]++;
      }
      cov_2kcfjk5dl8().s[98]++;
      log.info('Evaluating expression', {
        workflowId: args.workflowId,
        nodeId: args.nodeId,
        expressionLength: args.expression.length
      });
      /* istanbul ignore next */
      cov_2kcfjk5dl8().s[99]++;
      try {
        // Get workflow and node context
        const workflow =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[100]++, await client.getWorkflow(args.workflowId));
        const node =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[101]++, workflow.nodes?.find(n => {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().f[10]++;
          cov_2kcfjk5dl8().s[102]++;
          return n.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[103]++;
        if (!node) {
          /* istanbul ignore next */
          cov_2kcfjk5dl8().b[39][0]++;
          cov_2kcfjk5dl8().s[104]++;
          throw new UserError(`Node with ID ${args.nodeId} not found in workflow`);
        } else
        /* istanbul ignore next */
        {
          cov_2kcfjk5dl8().b[39][1]++;
        }
        // For now, return a structured response indicating the expression would be evaluated
        // In a full implementation, this would connect to n8n's expression evaluator
        const evaluationResult =
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().s[105]++, {
          expression: args.expression,
          context: {
            workflowId: args.workflowId,
            workflowName: workflow.name,
            nodeId: args.nodeId,
            nodeName: node.name,
            nodeType: node.type
          },
          // This would contain the actual evaluation result in a full implementation
          result: {
            status: 'simulated',
            message: 'Expression evaluation is simulated in development mode',
            parsedExpression: args.expression,
            availableVariables: await extractAvailableVariables(workflow, args.nodeId)
          },
          inputData: args.inputData,
          evaluatedAt: new Date().toISOString()
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[106]++;
        log.info('Expression evaluation completed', {
          workflowId: args.workflowId,
          nodeId: args.nodeId,
          status: evaluationResult.result.status
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[107]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(evaluationResult, null, 2)
          }]
        };
      } catch (error) {
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[108]++;
        log.error('Failed to evaluate expression', {
          workflowId: args.workflowId,
          nodeId: args.nodeId,
          error: error instanceof Error ?
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[40][0]++, error.message) :
          /* istanbul ignore next */
          (cov_2kcfjk5dl8().b[40][1]++, String(error))
        });
        /* istanbul ignore next */
        cov_2kcfjk5dl8().s[109]++;
        throw new UserError(`Failed to evaluate expression: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[41][0]++, error.message) :
        /* istanbul ignore next */
        (cov_2kcfjk5dl8().b[41][1]++, 'Unknown error')}`);
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,