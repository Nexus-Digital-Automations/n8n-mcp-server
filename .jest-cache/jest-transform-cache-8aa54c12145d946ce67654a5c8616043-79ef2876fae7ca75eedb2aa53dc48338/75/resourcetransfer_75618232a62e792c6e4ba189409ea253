3e7de92079b0e5e1ea70c0c0b0e002f9
"use strict";

/* istanbul ignore next */
function cov_kyraf3f5f() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/resource-transfer.ts";
  var hash = "3cfb1bf2f058b83d7931a9a230637c0b743ff6f5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/resource-transfer.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 66
        }
      },
      "2": {
        start: {
          line: 4,
          column: 14
        },
        end: {
          line: 4,
          column: 28
        }
      },
      "3": {
        start: {
          line: 5,
          column: 18
        },
        end: {
          line: 5,
          column: 36
        }
      },
      "4": {
        start: {
          line: 6,
          column: 25
        },
        end: {
          line: 6,
          column: 59
        }
      },
      "5": {
        start: {
          line: 7,
          column: 25
        },
        end: {
          line: 7,
          column: 59
        }
      },
      "6": {
        start: {
          line: 9,
          column: 25
        },
        end: {
          line: 11,
          column: 2
        }
      },
      "7": {
        start: {
          line: 12,
          column: 26
        },
        end: {
          line: 14,
          column: 2
        }
      },
      "8": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "9": {
        start: {
          line: 18,
          column: 28
        },
        end: {
          line: 20,
          column: 2
        }
      },
      "10": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 23,
          column: 2
        }
      },
      "11": {
        start: {
          line: 24,
          column: 28
        },
        end: {
          line: 29,
          column: 2
        }
      },
      "12": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 38,
          column: 2
        }
      },
      "13": {
        start: {
          line: 39,
          column: 29
        },
        end: {
          line: 39,
          column: 72
        }
      },
      "14": {
        start: {
          line: 40,
          column: 30
        },
        end: {
          line: 40,
          column: 74
        }
      },
      "15": {
        start: {
          line: 41,
          column: 31
        },
        end: {
          line: 41,
          column: 76
        }
      },
      "16": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 78
        }
      },
      "17": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 48,
          column: 2
        }
      },
      "18": {
        start: {
          line: 49,
          column: 25
        },
        end: {
          line: 52,
          column: 2
        }
      },
      "19": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 56,
          column: 2
        }
      },
      "20": {
        start: {
          line: 57,
          column: 32
        },
        end: {
          line: 61,
          column: 2
        }
      },
      "21": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 95,
          column: 7
        }
      },
      "22": {
        start: {
          line: 77,
          column: 27
        },
        end: {
          line: 77,
          column: 38
        }
      },
      "23": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 80,
          column: 13
        }
      },
      "24": {
        start: {
          line: 79,
          column: 16
        },
        end: {
          line: 79,
          column: 104
        }
      },
      "25": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 93,
          column: 13
        }
      },
      "26": {
        start: {
          line: 82,
          column: 36
        },
        end: {
          line: 82,
          column: 76
        }
      },
      "27": {
        start: {
          line: 83,
          column: 51
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "28": {
        start: {
          line: 84,
          column: 39
        },
        end: {
          line: 84,
          column: 92
        }
      },
      "29": {
        start: {
          line: 85,
          column: 32
        },
        end: {
          line: 85,
          column: 83
        }
      },
      "30": {
        start: {
          line: 86,
          column: 16
        },
        end: {
          line: 86,
          column: 202
        }
      },
      "31": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 91,
          column: 17
        }
      },
      "32": {
        start: {
          line: 90,
          column: 20
        },
        end: {
          line: 90,
          column: 97
        }
      },
      "33": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 94
        }
      },
      "34": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 127,
          column: 7
        }
      },
      "35": {
        start: {
          line: 109,
          column: 27
        },
        end: {
          line: 109,
          column: 38
        }
      },
      "36": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 112,
          column: 13
        }
      },
      "37": {
        start: {
          line: 111,
          column: 16
        },
        end: {
          line: 111,
          column: 104
        }
      },
      "38": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 125,
          column: 13
        }
      },
      "39": {
        start: {
          line: 114,
          column: 36
        },
        end: {
          line: 114,
          column: 76
        }
      },
      "40": {
        start: {
          line: 115,
          column: 52
        },
        end: {
          line: 115,
          column: 56
        }
      },
      "41": {
        start: {
          line: 116,
          column: 40
        },
        end: {
          line: 116,
          column: 95
        }
      },
      "42": {
        start: {
          line: 117,
          column: 32
        },
        end: {
          line: 117,
          column: 82
        }
      },
      "43": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 205
        }
      },
      "44": {
        start: {
          line: 121,
          column: 16
        },
        end: {
          line: 123,
          column: 17
        }
      },
      "45": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 98
        }
      },
      "46": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 95
        }
      },
      "47": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 162,
          column: 7
        }
      },
      "48": {
        start: {
          line: 141,
          column: 27
        },
        end: {
          line: 141,
          column: 38
        }
      },
      "49": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 144,
          column: 13
        }
      },
      "50": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 143,
          column: 104
        }
      },
      "51": {
        start: {
          line: 145,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "52": {
        start: {
          line: 146,
          column: 36
        },
        end: {
          line: 146,
          column: 76
        }
      },
      "53": {
        start: {
          line: 147,
          column: 47
        },
        end: {
          line: 147,
          column: 51
        }
      },
      "54": {
        start: {
          line: 148,
          column: 40
        },
        end: {
          line: 148,
          column: 94
        }
      },
      "55": {
        start: {
          line: 149,
          column: 16
        },
        end: {
          line: 151,
          column: 17
        }
      },
      "56": {
        start: {
          line: 150,
          column: 20
        },
        end: {
          line: 150,
          column: 78
        }
      },
      "57": {
        start: {
          line: 152,
          column: 32
        },
        end: {
          line: 152,
          column: 82
        }
      },
      "58": {
        start: {
          line: 153,
          column: 16
        },
        end: {
          line: 153,
          column: 205
        }
      },
      "59": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 158,
          column: 17
        }
      },
      "60": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 157,
          column: 106
        }
      },
      "61": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 103
        }
      },
      "62": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 202,
          column: 7
        }
      },
      "63": {
        start: {
          line: 176,
          column: 27
        },
        end: {
          line: 176,
          column: 38
        }
      },
      "64": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 179,
          column: 13
        }
      },
      "65": {
        start: {
          line: 178,
          column: 16
        },
        end: {
          line: 178,
          column: 104
        }
      },
      "66": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 200,
          column: 13
        }
      },
      "67": {
        start: {
          line: 181,
          column: 36
        },
        end: {
          line: 181,
          column: 76
        }
      },
      "68": {
        start: {
          line: 182,
          column: 53
        },
        end: {
          line: 182,
          column: 57
        }
      },
      "69": {
        start: {
          line: 183,
          column: 41
        },
        end: {
          line: 183,
          column: 98
        }
      },
      "70": {
        start: {
          line: 184,
          column: 29
        },
        end: {
          line: 184,
          column: 55
        }
      },
      "71": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 185,
          column: 63
        }
      },
      "72": {
        start: {
          line: 186,
          column: 16
        },
        end: {
          line: 186,
          column: 63
        }
      },
      "73": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 95
        }
      },
      "74": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 188,
          column: 78
        }
      },
      "75": {
        start: {
          line: 189,
          column: 16
        },
        end: {
          line: 191,
          column: 17
        }
      },
      "76": {
        start: {
          line: 190,
          column: 20
        },
        end: {
          line: 190,
          column: 162
        }
      },
      "77": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 195
        }
      },
      "78": {
        start: {
          line: 193,
          column: 16
        },
        end: {
          line: 193,
          column: 30
        }
      },
      "79": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 198,
          column: 17
        }
      },
      "80": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 99
        }
      },
      "81": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 96
        }
      },
      "82": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 241,
          column: 7
        }
      },
      "83": {
        start: {
          line: 216,
          column: 27
        },
        end: {
          line: 216,
          column: 38
        }
      },
      "84": {
        start: {
          line: 217,
          column: 12
        },
        end: {
          line: 219,
          column: 13
        }
      },
      "85": {
        start: {
          line: 218,
          column: 16
        },
        end: {
          line: 218,
          column: 104
        }
      },
      "86": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 239,
          column: 13
        }
      },
      "87": {
        start: {
          line: 221,
          column: 36
        },
        end: {
          line: 221,
          column: 76
        }
      },
      "88": {
        start: {
          line: 222,
          column: 54
        },
        end: {
          line: 222,
          column: 58
        }
      },
      "89": {
        start: {
          line: 223,
          column: 42
        },
        end: {
          line: 223,
          column: 101
        }
      },
      "90": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 224,
          column: 64
        }
      },
      "91": {
        start: {
          line: 225,
          column: 16
        },
        end: {
          line: 225,
          column: 79
        }
      },
      "92": {
        start: {
          line: 226,
          column: 16
        },
        end: {
          line: 226,
          column: 91
        }
      },
      "93": {
        start: {
          line: 227,
          column: 16
        },
        end: {
          line: 227,
          column: 75
        }
      },
      "94": {
        start: {
          line: 228,
          column: 16
        },
        end: {
          line: 230,
          column: 17
        }
      },
      "95": {
        start: {
          line: 229,
          column: 20
        },
        end: {
          line: 229,
          column: 158
        }
      },
      "96": {
        start: {
          line: 231,
          column: 16
        },
        end: {
          line: 231,
          column: 198
        }
      },
      "97": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 30
        }
      },
      "98": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 237,
          column: 17
        }
      },
      "99": {
        start: {
          line: 236,
          column: 20
        },
        end: {
          line: 236,
          column: 100
        }
      },
      "100": {
        start: {
          line: 238,
          column: 16
        },
        end: {
          line: 238,
          column: 97
        }
      },
      "101": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 273,
          column: 7
        }
      },
      "102": {
        start: {
          line: 255,
          column: 27
        },
        end: {
          line: 255,
          column: 38
        }
      },
      "103": {
        start: {
          line: 256,
          column: 12
        },
        end: {
          line: 258,
          column: 13
        }
      },
      "104": {
        start: {
          line: 257,
          column: 16
        },
        end: {
          line: 257,
          column: 104
        }
      },
      "105": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 271,
          column: 13
        }
      },
      "106": {
        start: {
          line: 260,
          column: 36
        },
        end: {
          line: 260,
          column: 76
        }
      },
      "107": {
        start: {
          line: 261,
          column: 50
        },
        end: {
          line: 261,
          column: 54
        }
      },
      "108": {
        start: {
          line: 262,
          column: 38
        },
        end: {
          line: 262,
          column: 89
        }
      },
      "109": {
        start: {
          line: 263,
          column: 32
        },
        end: {
          line: 263,
          column: 80
        }
      },
      "110": {
        start: {
          line: 264,
          column: 16
        },
        end: {
          line: 264,
          column: 200
        }
      },
      "111": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 269,
          column: 17
        }
      },
      "112": {
        start: {
          line: 268,
          column: 20
        },
        end: {
          line: 268,
          column: 96
        }
      },
      "113": {
        start: {
          line: 270,
          column: 16
        },
        end: {
          line: 270,
          column: 93
        }
      },
      "114": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 306,
          column: 7
        }
      },
      "115": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 287,
          column: 38
        }
      },
      "116": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 290,
          column: 13
        }
      },
      "117": {
        start: {
          line: 289,
          column: 16
        },
        end: {
          line: 289,
          column: 104
        }
      },
      "118": {
        start: {
          line: 291,
          column: 12
        },
        end: {
          line: 304,
          column: 13
        }
      },
      "119": {
        start: {
          line: 292,
          column: 36
        },
        end: {
          line: 292,
          column: 76
        }
      },
      "120": {
        start: {
          line: 293,
          column: 39
        },
        end: {
          line: 293,
          column: 77
        }
      },
      "121": {
        start: {
          line: 294,
          column: 32
        },
        end: {
          line: 294,
          column: 81
        }
      },
      "122": {
        start: {
          line: 295,
          column: 33
        },
        end: {
          line: 295,
          column: 70
        }
      },
      "123": {
        start: {
          line: 296,
          column: 35
        },
        end: {
          line: 296,
          column: 72
        }
      },
      "124": {
        start: {
          line: 297,
          column: 16
        },
        end: {
          line: 297,
          column: 246
        }
      },
      "125": {
        start: {
          line: 300,
          column: 16
        },
        end: {
          line: 302,
          column: 17
        }
      },
      "126": {
        start: {
          line: 301,
          column: 20
        },
        end: {
          line: 301,
          column: 97
        }
      },
      "127": {
        start: {
          line: 303,
          column: 16
        },
        end: {
          line: 303,
          column: 94
        }
      },
      "128": {
        start: {
          line: 308,
          column: 4
        },
        end: {
          line: 417,
          column: 7
        }
      },
      "129": {
        start: {
          line: 320,
          column: 27
        },
        end: {
          line: 320,
          column: 38
        }
      },
      "130": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 323,
          column: 13
        }
      },
      "131": {
        start: {
          line: 322,
          column: 16
        },
        end: {
          line: 322,
          column: 104
        }
      },
      "132": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 415,
          column: 13
        }
      },
      "133": {
        start: {
          line: 325,
          column: 36
        },
        end: {
          line: 325,
          column: 76
        }
      },
      "134": {
        start: {
          line: 326,
          column: 35
        },
        end: {
          line: 326,
          column: 62
        }
      },
      "135": {
        start: {
          line: 327,
          column: 32
        },
        end: {
          line: 332,
          column: 17
        }
      },
      "136": {
        start: {
          line: 335,
          column: 16
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "137": {
        start: {
          line: 337,
          column: 20
        },
        end: {
          line: 337,
          column: 84
        }
      },
      "138": {
        start: {
          line: 339,
          column: 21
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "139": {
        start: {
          line: 341,
          column: 20
        },
        end: {
          line: 341,
          column: 83
        }
      },
      "140": {
        start: {
          line: 343,
          column: 21
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "141": {
        start: {
          line: 345,
          column: 20
        },
        end: {
          line: 368,
          column: 21
        }
      },
      "142": {
        start: {
          line: 347,
          column: 24
        },
        end: {
          line: 347,
          column: 89
        }
      },
      "143": {
        start: {
          line: 349,
          column: 25
        },
        end: {
          line: 368,
          column: 21
        }
      },
      "144": {
        start: {
          line: 351,
          column: 40
        },
        end: {
          line: 351,
          column: 42
        }
      },
      "145": {
        start: {
          line: 352,
          column: 24
        },
        end: {
          line: 355,
          column: 25
        }
      },
      "146": {
        start: {
          line: 353,
          column: 43
        },
        end: {
          line: 353,
          column: 98
        }
      },
      "147": {
        start: {
          line: 354,
          column: 28
        },
        end: {
          line: 354,
          column: 49
        }
      },
      "148": {
        start: {
          line: 356,
          column: 24
        },
        end: {
          line: 364,
          column: 26
        }
      },
      "149": {
        start: {
          line: 358,
          column: 60
        },
        end: {
          line: 358,
          column: 69
        }
      },
      "150": {
        start: {
          line: 359,
          column: 56
        },
        end: {
          line: 359,
          column: 66
        }
      },
      "151": {
        start: {
          line: 367,
          column: 24
        },
        end: {
          line: 367,
          column: 101
        }
      },
      "152": {
        start: {
          line: 370,
          column: 21
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "153": {
        start: {
          line: 372,
          column: 35
        },
        end: {
          line: 372,
          column: 88
        }
      },
      "154": {
        start: {
          line: 373,
          column: 20
        },
        end: {
          line: 381,
          column: 22
        }
      },
      "155": {
        start: {
          line: 383,
          column: 21
        },
        end: {
          line: 398,
          column: 17
        }
      },
      "156": {
        start: {
          line: 385,
          column: 35
        },
        end: {
          line: 385,
          column: 90
        }
      },
      "157": {
        start: {
          line: 386,
          column: 20
        },
        end: {
          line: 394,
          column: 22
        }
      },
      "158": {
        start: {
          line: 397,
          column: 20
        },
        end: {
          line: 397,
          column: 97
        }
      },
      "159": {
        start: {
          line: 399,
          column: 36
        },
        end: {
          line: 399,
          column: 78
        }
      },
      "160": {
        start: {
          line: 400,
          column: 16
        },
        end: {
          line: 405,
          column: 17
        }
      },
      "161": {
        start: {
          line: 401,
          column: 20
        },
        end: {
          line: 401,
          column: 124
        }
      },
      "162": {
        start: {
          line: 404,
          column: 20
        },
        end: {
          line: 404,
          column: 70
        }
      },
      "163": {
        start: {
          line: 408,
          column: 16
        },
        end: {
          line: 410,
          column: 17
        }
      },
      "164": {
        start: {
          line: 409,
          column: 20
        },
        end: {
          line: 409,
          column: 126
        }
      },
      "165": {
        start: {
          line: 411,
          column: 16
        },
        end: {
          line: 413,
          column: 17
        }
      },
      "166": {
        start: {
          line: 412,
          column: 20
        },
        end: {
          line: 412,
          column: 98
        }
      },
      "167": {
        start: {
          line: 414,
          column: 16
        },
        end: {
          line: 414,
          column: 95
        }
      },
      "168": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 477,
          column: 7
        }
      },
      "169": {
        start: {
          line: 431,
          column: 27
        },
        end: {
          line: 431,
          column: 38
        }
      },
      "170": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 434,
          column: 13
        }
      },
      "171": {
        start: {
          line: 433,
          column: 16
        },
        end: {
          line: 433,
          column: 104
        }
      },
      "172": {
        start: {
          line: 435,
          column: 12
        },
        end: {
          line: 475,
          column: 13
        }
      },
      "173": {
        start: {
          line: 436,
          column: 36
        },
        end: {
          line: 436,
          column: 76
        }
      },
      "174": {
        start: {
          line: 437,
          column: 36
        },
        end: {
          line: 437,
          column: 76
        }
      },
      "175": {
        start: {
          line: 439,
          column: 40
        },
        end: {
          line: 441,
          column: 18
        }
      },
      "176": {
        start: {
          line: 443,
          column: 38
        },
        end: {
          line: 447,
          column: 17
        }
      },
      "177": {
        start: {
          line: 448,
          column: 32
        },
        end: {
          line: 448,
          column: 97
        }
      },
      "178": {
        start: {
          line: 449,
          column: 29
        },
        end: {
          line: 449,
          column: 67
        }
      },
      "179": {
        start: {
          line: 450,
          column: 16
        },
        end: {
          line: 450,
          column: 74
        }
      },
      "180": {
        start: {
          line: 451,
          column: 16
        },
        end: {
          line: 451,
          column: 72
        }
      },
      "181": {
        start: {
          line: 452,
          column: 16
        },
        end: {
          line: 452,
          column: 69
        }
      },
      "182": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 467,
          column: 17
        }
      },
      "183": {
        start: {
          line: 455,
          column: 20
        },
        end: {
          line: 455,
          column: 76
        }
      },
      "184": {
        start: {
          line: 456,
          column: 38
        },
        end: {
          line: 456,
          column: 39
        }
      },
      "185": {
        start: {
          line: 457,
          column: 20
        },
        end: {
          line: 465,
          column: 21
        }
      },
      "186": {
        start: {
          line: 458,
          column: 24
        },
        end: {
          line: 464,
          column: 25
        }
      },
      "187": {
        start: {
          line: 459,
          column: 28
        },
        end: {
          line: 459,
          column: 68
        }
      },
      "188": {
        start: {
          line: 460,
          column: 28
        },
        end: {
          line: 460,
          column: 42
        }
      },
      "189": {
        start: {
          line: 463,
          column: 28
        },
        end: {
          line: 463,
          column: 156
        }
      },
      "190": {
        start: {
          line: 466,
          column: 20
        },
        end: {
          line: 466,
          column: 78
        }
      },
      "191": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 468,
          column: 30
        }
      },
      "192": {
        start: {
          line: 471,
          column: 16
        },
        end: {
          line: 473,
          column: 17
        }
      },
      "193": {
        start: {
          line: 472,
          column: 20
        },
        end: {
          line: 472,
          column: 100
        }
      },
      "194": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 97
        }
      }
    },
    fnMap: {
      "0": {
        name: "createResourceTransferTools",
        decl: {
          start: {
            line: 63,
            column: 9
          },
          end: {
            line: 63,
            column: 36
          }
        },
        loc: {
          start: {
            line: 63,
            column: 56
          },
          end: {
            line: 478,
            column: 1
          }
        },
        line: 63
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 76,
            column: 17
          },
          end: {
            line: 76,
            column: 18
          }
        },
        loc: {
          start: {
            line: 76,
            column: 33
          },
          end: {
            line: 94,
            column: 9
          }
        },
        line: 76
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 108,
            column: 17
          },
          end: {
            line: 108,
            column: 18
          }
        },
        loc: {
          start: {
            line: 108,
            column: 33
          },
          end: {
            line: 126,
            column: 9
          }
        },
        line: 108
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 17
          },
          end: {
            line: 140,
            column: 18
          }
        },
        loc: {
          start: {
            line: 140,
            column: 33
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 175,
            column: 17
          },
          end: {
            line: 175,
            column: 18
          }
        },
        loc: {
          start: {
            line: 175,
            column: 33
          },
          end: {
            line: 201,
            column: 9
          }
        },
        line: 175
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 215,
            column: 17
          },
          end: {
            line: 215,
            column: 18
          }
        },
        loc: {
          start: {
            line: 215,
            column: 33
          },
          end: {
            line: 240,
            column: 9
          }
        },
        line: 215
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 254,
            column: 17
          },
          end: {
            line: 254,
            column: 18
          }
        },
        loc: {
          start: {
            line: 254,
            column: 33
          },
          end: {
            line: 272,
            column: 9
          }
        },
        line: 254
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 286,
            column: 17
          },
          end: {
            line: 286,
            column: 18
          }
        },
        loc: {
          start: {
            line: 286,
            column: 33
          },
          end: {
            line: 305,
            column: 9
          }
        },
        line: 286
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 319,
            column: 17
          },
          end: {
            line: 319,
            column: 18
          }
        },
        loc: {
          start: {
            line: 319,
            column: 33
          },
          end: {
            line: 416,
            column: 9
          }
        },
        line: 319
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 358,
            column: 55
          },
          end: {
            line: 358,
            column: 56
          }
        },
        loc: {
          start: {
            line: 358,
            column: 60
          },
          end: {
            line: 358,
            column: 69
          }
        },
        line: 358
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 359,
            column: 51
          },
          end: {
            line: 359,
            column: 52
          }
        },
        loc: {
          start: {
            line: 359,
            column: 56
          },
          end: {
            line: 359,
            column: 66
          }
        },
        line: 359
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 430,
            column: 17
          },
          end: {
            line: 430,
            column: 18
          }
        },
        loc: {
          start: {
            line: 430,
            column: 33
          },
          end: {
            line: 476,
            column: 9
          }
        },
        line: 430
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 12
          },
          end: {
            line: 80,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "1": {
        loc: {
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 91,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 16
          },
          end: {
            line: 91,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      },
      "2": {
        loc: {
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 12
          },
          end: {
            line: 112,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "3": {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 123,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 123,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "4": {
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 144,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 142
      },
      "5": {
        loc: {
          start: {
            line: 147,
            column: 30
          },
          end: {
            line: 147,
            column: 42
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 147,
            column: 40
          },
          end: {
            line: 147,
            column: 42
          }
        }],
        line: 147
      },
      "6": {
        loc: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 151,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "7": {
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 158,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 156
      },
      "8": {
        loc: {
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 177,
            column: 12
          },
          end: {
            line: 179,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 177
      },
      "9": {
        loc: {
          start: {
            line: 187,
            column: 49
          },
          end: {
            line: 187,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 187,
            column: 78
          },
          end: {
            line: 187,
            column: 82
          }
        }, {
          start: {
            line: 187,
            column: 85
          },
          end: {
            line: 187,
            column: 90
          }
        }],
        line: 187
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 16
          },
          end: {
            line: 191,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 16
          },
          end: {
            line: 198,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "12": {
        loc: {
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 12
          },
          end: {
            line: 219,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 217
      },
      "13": {
        loc: {
          start: {
            line: 226,
            column: 49
          },
          end: {
            line: 226,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 74
          },
          end: {
            line: 226,
            column: 79
          }
        }, {
          start: {
            line: 226,
            column: 82
          },
          end: {
            line: 226,
            column: 86
          }
        }],
        line: 226
      },
      "14": {
        loc: {
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 228,
            column: 16
          },
          end: {
            line: 230,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 228
      },
      "15": {
        loc: {
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 235,
            column: 16
          },
          end: {
            line: 237,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 235
      },
      "16": {
        loc: {
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 256,
            column: 12
          },
          end: {
            line: 258,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 256
      },
      "17": {
        loc: {
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 16
          },
          end: {
            line: 269,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "18": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 290,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 288
      },
      "19": {
        loc: {
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 300,
            column: 16
          },
          end: {
            line: 302,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 300
      },
      "20": {
        loc: {
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 321,
            column: 12
          },
          end: {
            line: 323,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 321
      },
      "21": {
        loc: {
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 332,
            column: 17
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 32
          },
          end: {
            line: 327,
            column: 44
          }
        }, {
          start: {
            line: 327,
            column: 48
          },
          end: {
            line: 332,
            column: 17
          }
        }],
        line: 327
      },
      "22": {
        loc: {
          start: {
            line: 335,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 335,
            column: 16
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 339,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }],
        line: 335
      },
      "23": {
        loc: {
          start: {
            line: 339,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 343,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }],
        line: 339
      },
      "24": {
        loc: {
          start: {
            line: 343,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }],
        line: 343
      },
      "25": {
        loc: {
          start: {
            line: 345,
            column: 20
          },
          end: {
            line: 368,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 345,
            column: 20
          },
          end: {
            line: 368,
            column: 21
          }
        }, {
          start: {
            line: 349,
            column: 25
          },
          end: {
            line: 368,
            column: 21
          }
        }],
        line: 345
      },
      "26": {
        loc: {
          start: {
            line: 345,
            column: 24
          },
          end: {
            line: 345,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 24
          },
          end: {
            line: 345,
            column: 45
          }
        }, {
          start: {
            line: 345,
            column: 49
          },
          end: {
            line: 345,
            column: 68
          }
        }],
        line: 345
      },
      "27": {
        loc: {
          start: {
            line: 349,
            column: 25
          },
          end: {
            line: 368,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 25
          },
          end: {
            line: 368,
            column: 21
          }
        }, {
          start: {
            line: 366,
            column: 25
          },
          end: {
            line: 368,
            column: 21
          }
        }],
        line: 349
      },
      "28": {
        loc: {
          start: {
            line: 349,
            column: 29
          },
          end: {
            line: 349,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 29
          },
          end: {
            line: 349,
            column: 50
          }
        }, {
          start: {
            line: 349,
            column: 54
          },
          end: {
            line: 349,
            column: 72
          }
        }],
        line: 349
      },
      "29": {
        loc: {
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 370,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 383,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }],
        line: 370
      },
      "30": {
        loc: {
          start: {
            line: 375,
            column: 36
          },
          end: {
            line: 375,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 53
          },
          end: {
            line: 375,
            column: 54
          }
        }, {
          start: {
            line: 375,
            column: 57
          },
          end: {
            line: 375,
            column: 58
          }
        }],
        line: 375
      },
      "31": {
        loc: {
          start: {
            line: 376,
            column: 32
          },
          end: {
            line: 376,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 376,
            column: 49
          },
          end: {
            line: 376,
            column: 50
          }
        }, {
          start: {
            line: 376,
            column: 53
          },
          end: {
            line: 376,
            column: 54
          }
        }],
        line: 376
      },
      "32": {
        loc: {
          start: {
            line: 378,
            column: 34
          },
          end: {
            line: 378,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 378,
            column: 34
          },
          end: {
            line: 378,
            column: 49
          }
        }, {
          start: {
            line: 378,
            column: 53
          },
          end: {
            line: 378,
            column: 55
          }
        }],
        line: 378
      },
      "33": {
        loc: {
          start: {
            line: 383,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }, {
          start: {
            line: 396,
            column: 21
          },
          end: {
            line: 398,
            column: 17
          }
        }],
        line: 383
      },
      "34": {
        loc: {
          start: {
            line: 383,
            column: 25
          },
          end: {
            line: 383,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 383,
            column: 25
          },
          end: {
            line: 383,
            column: 40
          }
        }, {
          start: {
            line: 383,
            column: 44
          },
          end: {
            line: 383,
            column: 59
          }
        }],
        line: 383
      },
      "35": {
        loc: {
          start: {
            line: 388,
            column: 36
          },
          end: {
            line: 388,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 388,
            column: 53
          },
          end: {
            line: 388,
            column: 54
          }
        }, {
          start: {
            line: 388,
            column: 57
          },
          end: {
            line: 388,
            column: 58
          }
        }],
        line: 388
      },
      "36": {
        loc: {
          start: {
            line: 389,
            column: 32
          },
          end: {
            line: 389,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 389,
            column: 49
          },
          end: {
            line: 389,
            column: 50
          }
        }, {
          start: {
            line: 389,
            column: 53
          },
          end: {
            line: 389,
            column: 54
          }
        }],
        line: 389
      },
      "37": {
        loc: {
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 405,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 400,
            column: 16
          },
          end: {
            line: 405,
            column: 17
          }
        }, {
          start: {
            line: 403,
            column: 21
          },
          end: {
            line: 405,
            column: 17
          }
        }],
        line: 400
      },
      "38": {
        loc: {
          start: {
            line: 408,
            column: 16
          },
          end: {
            line: 410,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 408,
            column: 16
          },
          end: {
            line: 410,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 408
      },
      "39": {
        loc: {
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 413,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 411,
            column: 16
          },
          end: {
            line: 413,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 411
      },
      "40": {
        loc: {
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 432,
            column: 12
          },
          end: {
            line: 434,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 432
      },
      "41": {
        loc: {
          start: {
            line: 445,
            column: 40
          },
          end: {
            line: 445,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 445,
            column: 69
          },
          end: {
            line: 445,
            column: 77
          }
        }, {
          start: {
            line: 445,
            column: 80
          },
          end: {
            line: 445,
            column: 86
          }
        }],
        line: 445
      },
      "42": {
        loc: {
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 467,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 454,
            column: 16
          },
          end: {
            line: 467,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 454
      },
      "43": {
        loc: {
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 454,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 454,
            column: 20
          },
          end: {
            line: 454,
            column: 46
          }
        }, {
          start: {
            line: 454,
            column: 50
          },
          end: {
            line: 454,
            column: 72
          }
        }],
        line: 454
      },
      "44": {
        loc: {
          start: {
            line: 463,
            column: 95
          },
          end: {
            line: 463,
            column: 151
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 463,
            column: 120
          },
          end: {
            line: 463,
            column: 133
          }
        }, {
          start: {
            line: 463,
            column: 136
          },
          end: {
            line: 463,
            column: 151
          }
        }],
        line: 463
      },
      "45": {
        loc: {
          start: {
            line: 471,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 471,
            column: 16
          },
          end: {
            line: 473,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 471
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/resource-transfer.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/resource-transfer.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { ExportUtils, ExportOptions } from '../utils/exportUtils.js';\nimport { ImportUtils, ImportOptions } from '../utils/importUtils.js';\n\n// Zod schemas for validation\nconst WorkflowIdSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n});\n\nconst WorkflowIdsSchema = z.object({\n  workflowIds: z.array(z.string().min(1, 'Workflow ID cannot be empty')).min(1, 'At least one workflow ID is required'),\n});\n\nconst CredentialIdSchema = z.object({\n  credentialId: z.string().min(1, 'Credential ID is required'),\n});\n\nconst CredentialIdsSchema = z.object({\n  credentialIds: z.array(z.string().min(1, 'Credential ID cannot be empty')).min(1, 'At least one credential ID is required'),\n});\n\nconst ProjectIdSchema = z.object({\n  projectId: z.string().min(1, 'Project ID is required'),\n});\n\nconst ExportOptionsSchema = z.object({\n  includeCredentials: z.boolean().optional().default(false),\n  includeSecrets: z.boolean().optional().default(false),\n  projectId: z.string().optional(),\n  tagFilter: z.array(z.string()).optional(),\n});\n\nconst ImportOptionsSchema = z.object({\n  conflictResolution: z.enum(['skip', 'overwrite', 'rename']).optional().default('skip'),\n  targetProjectId: z.string().optional(),\n  createMissingProjects: z.boolean().optional().default(false),\n  validateCredentials: z.boolean().optional().default(true),\n  dryRun: z.boolean().optional().default(false),\n  namePrefix: z.string().optional(),\n  nameSuffix: z.string().optional(),\n});\n\nconst ExportWorkflowSchema = WorkflowIdSchema.merge(ExportOptionsSchema);\nconst ExportWorkflowsSchema = WorkflowIdsSchema.merge(ExportOptionsSchema);\nconst ExportCredentialSchema = CredentialIdSchema.merge(ExportOptionsSchema);\nconst ExportCredentialsSchema = CredentialIdsSchema.merge(ExportOptionsSchema);\nconst ExportProjectSchema = z.object({\n  projectId: z.string().min(1, 'Project ID is required'),\n  includeCredentials: z.boolean().optional().default(false),\n  includeSecrets: z.boolean().optional().default(false),\n  tagFilter: z.array(z.string()).optional(),\n});\n\nconst ImportDataSchema = z.object({\n  exportData: z.string().min(1, 'Export data JSON is required'),\n  options: ImportOptionsSchema.optional(),\n});\n\nconst WorkflowsByTagsSchema = z.object({\n  tags: z.array(z.string().min(1, 'Tag cannot be empty')).min(1, 'At least one tag is required'),\n  options: ExportOptionsSchema.optional(),\n});\n\nconst TransferWorkflowsSchema = z.object({\n  workflowIds: z.array(z.string().min(1)).min(1, 'At least one workflow ID is required'),\n  targetProjectId: z.string().min(1, 'Target project ID is required'),\n  moveOrCopy: z.enum(['move', 'copy']).default('copy'),\n});\n\n// Tool registration function\nexport function createResourceTransferTools(getClient: () => N8nClient | null, server: any) {\n  \n  // Export single workflow\n  server.addTool({\n    name: 'export-workflow',\n    description: 'Export a single workflow with its configuration and dependencies for transfer to another n8n instance',\n    parameters: ExportWorkflowSchema,\n    annotations: {\n      title: 'Export Workflow',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportWorkflowSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { workflowId, ...options } = args;\n        \n        const workflowExport = await exportUtils.exportWorkflow(workflowId, options);\n        const summary = exportUtils.generateExportSummary([workflowExport]);\n\n        return `${summary}\\n\\n**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(workflowExport, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import this workflow into another n8n instance.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export workflow: ${error.message}`);\n        }\n        throw new UserError('Failed to export workflow with unknown error');\n      }\n    },\n  });\n\n  // Export multiple workflows\n  server.addTool({\n    name: 'export-workflows',\n    description: 'Export multiple workflows with their configurations and dependencies for batch transfer',\n    parameters: ExportWorkflowsSchema,\n    annotations: {\n      title: 'Export Multiple Workflows',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportWorkflowsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { workflowIds, ...options } = args;\n        \n        const workflowExports = await exportUtils.exportWorkflows(workflowIds, options);\n        const summary = exportUtils.generateExportSummary(workflowExports);\n\n        return `${summary}\\n\\n**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(workflowExports, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import these workflows into another n8n instance.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export workflows: ${error.message}`);\n        }\n        throw new UserError('Failed to export workflows with unknown error');\n      }\n    },\n  });\n\n  // Export workflows by tags\n  server.addTool({\n    name: 'export-workflows-by-tags',\n    description: 'Export all workflows that have any of the specified tags',\n    parameters: WorkflowsByTagsSchema,\n    annotations: {\n      title: 'Export Workflows by Tags',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof WorkflowsByTagsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { tags, options = {} } = args;\n        \n        const workflowExports = await exportUtils.exportWorkflowsByTags(tags, options);\n        \n        if (workflowExports.length === 0) {\n          return `No workflows found with tags: ${tags.join(', ')}`;\n        }\n        \n        const summary = exportUtils.generateExportSummary(workflowExports);\n\n        return `${summary}\\n\\n**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(workflowExports, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import these workflows into another n8n instance.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export workflows by tags: ${error.message}`);\n        }\n        throw new UserError('Failed to export workflows by tags with unknown error');\n      }\n    },\n  });\n\n  // Export single credential\n  server.addTool({\n    name: 'export-credential',\n    description: 'Export a single credential for transfer to another n8n instance. Note: Secrets are only included if explicitly requested.',\n    parameters: ExportCredentialSchema,\n    annotations: {\n      title: 'Export Credential',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportCredentialSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { credentialId, ...options } = args;\n        \n        const credentialExport = await exportUtils.exportCredential(credentialId, options);\n\n        let result = `**Credential Export:**\\n`;\n        result += `- Name: ${credentialExport.name}\\n`;\n        result += `- Type: ${credentialExport.type}\\n`;\n        result += `- Secrets included: ${credentialExport.sanitized ? 'No' : 'Yes'}\\n`;\n        result += `- Exported at: ${credentialExport.exportedAt}\\n\\n`;\n\n        if (credentialExport.sanitized) {\n          result += `\u26A0\uFE0F  **Security Notice:** Credential secrets were not included. You will need to reconfigure the credential data after import.\\n\\n`;\n        }\n\n        result += `**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(credentialExport, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import this credential into another n8n instance.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export credential: ${error.message}`);\n        }\n        throw new UserError('Failed to export credential with unknown error');\n      }\n    },\n  });\n\n  // Export multiple credentials\n  server.addTool({\n    name: 'export-credentials',\n    description: 'Export multiple credentials for batch transfer to another n8n instance',\n    parameters: ExportCredentialsSchema,\n    annotations: {\n      title: 'Export Multiple Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportCredentialsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { credentialIds, ...options } = args;\n        \n        const credentialExports = await exportUtils.exportCredentials(credentialIds, options);\n\n        let result = `**Credentials Export Summary:**\\n`;\n        result += `- Total credentials: ${credentialExports.length}\\n`;\n        result += `- Secrets included: ${options.includeSecrets ? 'Yes' : 'No'}\\n`;\n        result += `- Exported at: ${new Date().toISOString()}\\n\\n`;\n\n        if (!options.includeSecrets) {\n          result += `\u26A0\uFE0F  **Security Notice:** Credential secrets were not included. You will need to reconfigure credential data after import.\\n\\n`;\n        }\n\n        result += `**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(credentialExports, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import these credentials into another n8n instance.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export credentials: ${error.message}`);\n        }\n        throw new UserError('Failed to export credentials with unknown error');\n      }\n    },\n  });\n\n  // Export project\n  server.addTool({\n    name: 'export-project',\n    description: 'Export an entire project with all its workflows, credentials, and configurations',\n    parameters: ExportProjectSchema,\n    annotations: {\n      title: 'Export Project',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportProjectSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const { projectId, ...options } = args;\n        \n        const projectExport = await exportUtils.exportProject(projectId, options);\n        const summary = exportUtils.generateExportSummary(projectExport);\n\n        return `${summary}\\n\\n**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(projectExport, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import this project into another n8n instance.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export project: ${error.message}`);\n        }\n        throw new UserError('Failed to export project with unknown error');\n      }\n    },\n  });\n\n  // Export entire instance\n  server.addTool({\n    name: 'export-instance',\n    description: 'Export the entire n8n instance including all projects, workflows, credentials, and configurations',\n    parameters: ExportOptionsSchema,\n    annotations: {\n      title: 'Export Entire Instance',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ExportOptionsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        \n        const instanceExport = await exportUtils.exportInstance(args);\n        const summary = exportUtils.generateExportSummary(instanceExport);\n\n        const dataSize = JSON.stringify(instanceExport).length;\n        const dataSizeMB = (dataSize / (1024 * 1024)).toFixed(2);\n\n        return `${summary}\\n\\n\uD83D\uDCE6 **Export Size:** ${dataSizeMB} MB\\n\\n**Export Data:**\\n\\`\\`\\`json\\n${JSON.stringify(instanceExport, null, 2)}\\n\\`\\`\\`\\n\\n\uD83D\uDCBE Copy the JSON data above to import this entire instance into another n8n setup.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to export instance: ${error.message}`);\n        }\n        throw new UserError('Failed to export instance with unknown error');\n      }\n    },\n  });\n\n  // Import workflows/credentials/projects\n  server.addTool({\n    name: 'import-resources',\n    description: 'Import workflows, credentials, or projects from exported JSON data into the current n8n instance',\n    parameters: ImportDataSchema,\n    annotations: {\n      title: 'Import Resources',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ImportDataSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const importUtils = new ImportUtils(client);\n        const exportData = JSON.parse(args.exportData);\n        const options = args.options || {\n          conflictResolution: 'skip' as const,\n          createMissingProjects: false,\n          validateCredentials: true,\n          dryRun: false\n        };\n\n        let summary;\n\n        // Determine the type of export data and import accordingly\n        if (exportData.metadata) {\n          // Full instance export\n          summary = await importUtils.importInstance(exportData, options);\n        } else if (exportData.workflows) {\n          // Project export\n          summary = await importUtils.importProject(exportData, options);\n        } else if (Array.isArray(exportData)) {\n          // Check if it's an array of workflows or credentials\n          if (exportData.length > 0 && exportData[0].nodes) {\n            // Array of workflows\n            summary = await importUtils.importWorkflows(exportData, options);\n          } else if (exportData.length > 0 && exportData[0].type) {\n            // Array of credentials - import each one\n            const results = [];\n            for (const credential of exportData) {\n              const result = await importUtils.importCredential(credential, options);\n              results.push(result);\n            }\n            summary = {\n              totalItems: results.length,\n              successful: results.filter(r => r.success).length,\n              failed: results.filter(r => !r.success).length,\n              skipped: 0,\n              warnings: [],\n              results,\n              importedAt: new Date().toISOString()\n            };\n          } else {\n            throw new UserError('Unable to determine the type of export data');\n          }\n        } else if (exportData.nodes) {\n          // Single workflow\n          const result = await importUtils.importWorkflow(exportData, options);\n          summary = {\n            totalItems: 1,\n            successful: result.success ? 1 : 0,\n            failed: result.success ? 0 : 1,\n            skipped: 0,\n            warnings: result.warnings || [],\n            results: [result],\n            importedAt: new Date().toISOString()\n          };\n        } else if (exportData.type && exportData.name) {\n          // Single credential\n          const result = await importUtils.importCredential(exportData, options);\n          summary = {\n            totalItems: 1,\n            successful: result.success ? 1 : 0,\n            failed: result.success ? 0 : 1,\n            skipped: 0,\n            warnings: [],\n            results: [result],\n            importedAt: new Date().toISOString()\n          };\n        } else {\n          throw new UserError('Unable to determine the type of export data');\n        }\n\n        const summaryText = importUtils.generateImportSummary(summary);\n        \n        if (options?.dryRun) {\n          return `\uD83E\uDDEA **DRY RUN RESULTS**\\n\\n${summaryText}\\n\\n*No actual changes were made to the n8n instance.*`;\n        } else {\n          return `\u2705 **Import Completed**\\n\\n${summaryText}`;\n        }\n\n      } catch (error) {\n        if (error instanceof SyntaxError) {\n          throw new UserError('Invalid JSON data provided. Please ensure the export data is valid JSON.');\n        }\n        if (error instanceof Error) {\n          throw new UserError(`Failed to import resources: ${error.message}`);\n        }\n        throw new UserError('Failed to import resources with unknown error');\n      }\n    },\n  });\n\n  // Transfer workflows between projects\n  server.addTool({\n    name: 'transfer-workflows-to-project',\n    description: 'Transfer workflows from one project to another within the same n8n instance',\n    parameters: TransferWorkflowsSchema,\n    annotations: {\n      title: 'Transfer Workflows Between Projects',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof TransferWorkflowsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const exportUtils = new ExportUtils(client);\n        const importUtils = new ImportUtils(client);\n        \n        // Export workflows\n        const workflowExports = await exportUtils.exportWorkflows(args.workflowIds, {\n          includeCredentials: false // Don't duplicate credentials\n        });\n\n        // Import to target project\n        const importOptions: ImportOptions = {\n          targetProjectId: args.targetProjectId,\n          conflictResolution: args.moveOrCopy === 'copy' ? 'rename' : 'skip',\n          validateCredentials: true\n        };\n\n        const summary = await importUtils.importWorkflows(workflowExports, importOptions);\n\n        let result = `\uD83D\uDCC1 **Workflow Transfer Results**\\n\\n`;\n        result += `Operation: ${args.moveOrCopy.toUpperCase()}\\n`;\n        result += `Target Project: ${args.targetProjectId}\\n\\n`;\n        result += importUtils.generateImportSummary(summary);\n\n        // If moving (not copying), delete the original workflows\n        if (args.moveOrCopy === 'move' && summary.successful > 0) {\n          result += `\\n\uD83D\uDDD1\uFE0F  **Removing original workflows...**\\n`;\n          \n          let deleteCount = 0;\n          for (const workflowId of args.workflowIds) {\n            try {\n              await client.deleteWorkflow(workflowId);\n              deleteCount++;\n            } catch (error) {\n              result += `\u26A0\uFE0F  Failed to delete original workflow ${workflowId}: ${error instanceof Error ? error.message : 'Unknown error'}\\n`;\n            }\n          }\n          \n          result += `\u2705 Deleted ${deleteCount} original workflows\\n`;\n        }\n\n        return result;\n\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to transfer workflows: ${error.message}`);\n        }\n        throw new UserError('Failed to transfer workflows with unknown error');\n      }\n    },\n  });\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3cfb1bf2f058b83d7931a9a230637c0b743ff6f5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_kyraf3f5f = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_kyraf3f5f();
cov_kyraf3f5f().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_kyraf3f5f().s[1]++;
exports.createResourceTransferTools = createResourceTransferTools;
const zod_1 =
/* istanbul ignore next */
(cov_kyraf3f5f().s[2]++, require("zod"));
const fastmcp_1 =
/* istanbul ignore next */
(cov_kyraf3f5f().s[3]++, require("fastmcp"));
const exportUtils_js_1 =
/* istanbul ignore next */
(cov_kyraf3f5f().s[4]++, require("../utils/exportUtils.js"));
const importUtils_js_1 =
/* istanbul ignore next */
(cov_kyraf3f5f().s[5]++, require("../utils/importUtils.js"));
// Zod schemas for validation
const WorkflowIdSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[6]++, zod_1.z.object({
  workflowId: zod_1.z.string().min(1, 'Workflow ID is required')
}));
const WorkflowIdsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[7]++, zod_1.z.object({
  workflowIds: zod_1.z.array(zod_1.z.string().min(1, 'Workflow ID cannot be empty')).min(1, 'At least one workflow ID is required')
}));
const CredentialIdSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[8]++, zod_1.z.object({
  credentialId: zod_1.z.string().min(1, 'Credential ID is required')
}));
const CredentialIdsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[9]++, zod_1.z.object({
  credentialIds: zod_1.z.array(zod_1.z.string().min(1, 'Credential ID cannot be empty')).min(1, 'At least one credential ID is required')
}));
const ProjectIdSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[10]++, zod_1.z.object({
  projectId: zod_1.z.string().min(1, 'Project ID is required')
}));
const ExportOptionsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[11]++, zod_1.z.object({
  includeCredentials: zod_1.z.boolean().optional().default(false),
  includeSecrets: zod_1.z.boolean().optional().default(false),
  projectId: zod_1.z.string().optional(),
  tagFilter: zod_1.z.array(zod_1.z.string()).optional()
}));
const ImportOptionsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[12]++, zod_1.z.object({
  conflictResolution: zod_1.z.enum(['skip', 'overwrite', 'rename']).optional().default('skip'),
  targetProjectId: zod_1.z.string().optional(),
  createMissingProjects: zod_1.z.boolean().optional().default(false),
  validateCredentials: zod_1.z.boolean().optional().default(true),
  dryRun: zod_1.z.boolean().optional().default(false),
  namePrefix: zod_1.z.string().optional(),
  nameSuffix: zod_1.z.string().optional()
}));
const ExportWorkflowSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[13]++, WorkflowIdSchema.merge(ExportOptionsSchema));
const ExportWorkflowsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[14]++, WorkflowIdsSchema.merge(ExportOptionsSchema));
const ExportCredentialSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[15]++, CredentialIdSchema.merge(ExportOptionsSchema));
const ExportCredentialsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[16]++, CredentialIdsSchema.merge(ExportOptionsSchema));
const ExportProjectSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[17]++, zod_1.z.object({
  projectId: zod_1.z.string().min(1, 'Project ID is required'),
  includeCredentials: zod_1.z.boolean().optional().default(false),
  includeSecrets: zod_1.z.boolean().optional().default(false),
  tagFilter: zod_1.z.array(zod_1.z.string()).optional()
}));
const ImportDataSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[18]++, zod_1.z.object({
  exportData: zod_1.z.string().min(1, 'Export data JSON is required'),
  options: ImportOptionsSchema.optional()
}));
const WorkflowsByTagsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[19]++, zod_1.z.object({
  tags: zod_1.z.array(zod_1.z.string().min(1, 'Tag cannot be empty')).min(1, 'At least one tag is required'),
  options: ExportOptionsSchema.optional()
}));
const TransferWorkflowsSchema =
/* istanbul ignore next */
(cov_kyraf3f5f().s[20]++, zod_1.z.object({
  workflowIds: zod_1.z.array(zod_1.z.string().min(1)).min(1, 'At least one workflow ID is required'),
  targetProjectId: zod_1.z.string().min(1, 'Target project ID is required'),
  moveOrCopy: zod_1.z.enum(['move', 'copy']).default('copy')
}));
// Tool registration function
function createResourceTransferTools(getClient, server) {
  /* istanbul ignore next */
  cov_kyraf3f5f().f[0]++;
  cov_kyraf3f5f().s[21]++;
  // Export single workflow
  server.addTool({
    name: 'export-workflow',
    description: 'Export a single workflow with its configuration and dependencies for transfer to another n8n instance',
    parameters: ExportWorkflowSchema,
    annotations: {
      title: 'Export Workflow',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[1]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[22]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[23]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[0][0]++;
        cov_kyraf3f5f().s[24]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[0][1]++;
      }
      cov_kyraf3f5f().s[25]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[26]++, new exportUtils_js_1.ExportUtils(client));
        const {
          workflowId,
          ...options
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[27]++, args);
        const workflowExport =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[28]++, await exportUtils.exportWorkflow(workflowId, options));
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[29]++, exportUtils.generateExportSummary([workflowExport]));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[30]++;
        return `${summary}\n\n**Export Data:**\n\`\`\`json\n${JSON.stringify(workflowExport, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import this workflow into another n8n instance.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[31]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[1][0]++;
          cov_kyraf3f5f().s[32]++;
          throw new fastmcp_1.UserError(`Failed to export workflow: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[1][1]++;
        }
        cov_kyraf3f5f().s[33]++;
        throw new fastmcp_1.UserError('Failed to export workflow with unknown error');
      }
    }
  });
  // Export multiple workflows
  /* istanbul ignore next */
  cov_kyraf3f5f().s[34]++;
  server.addTool({
    name: 'export-workflows',
    description: 'Export multiple workflows with their configurations and dependencies for batch transfer',
    parameters: ExportWorkflowsSchema,
    annotations: {
      title: 'Export Multiple Workflows',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[2]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[35]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[36]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[2][0]++;
        cov_kyraf3f5f().s[37]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[2][1]++;
      }
      cov_kyraf3f5f().s[38]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[39]++, new exportUtils_js_1.ExportUtils(client));
        const {
          workflowIds,
          ...options
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[40]++, args);
        const workflowExports =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[41]++, await exportUtils.exportWorkflows(workflowIds, options));
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[42]++, exportUtils.generateExportSummary(workflowExports));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[43]++;
        return `${summary}\n\n**Export Data:**\n\`\`\`json\n${JSON.stringify(workflowExports, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import these workflows into another n8n instance.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[44]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[3][0]++;
          cov_kyraf3f5f().s[45]++;
          throw new fastmcp_1.UserError(`Failed to export workflows: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[3][1]++;
        }
        cov_kyraf3f5f().s[46]++;
        throw new fastmcp_1.UserError('Failed to export workflows with unknown error');
      }
    }
  });
  // Export workflows by tags
  /* istanbul ignore next */
  cov_kyraf3f5f().s[47]++;
  server.addTool({
    name: 'export-workflows-by-tags',
    description: 'Export all workflows that have any of the specified tags',
    parameters: WorkflowsByTagsSchema,
    annotations: {
      title: 'Export Workflows by Tags',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[3]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[48]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[49]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[4][0]++;
        cov_kyraf3f5f().s[50]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[4][1]++;
      }
      cov_kyraf3f5f().s[51]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[52]++, new exportUtils_js_1.ExportUtils(client));
        const {
          tags,
          options =
          /* istanbul ignore next */
          (cov_kyraf3f5f().b[5][0]++, {})
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[53]++, args);
        const workflowExports =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[54]++, await exportUtils.exportWorkflowsByTags(tags, options));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[55]++;
        if (workflowExports.length === 0) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[6][0]++;
          cov_kyraf3f5f().s[56]++;
          return `No workflows found with tags: ${tags.join(', ')}`;
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[6][1]++;
        }
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[57]++, exportUtils.generateExportSummary(workflowExports));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[58]++;
        return `${summary}\n\n**Export Data:**\n\`\`\`json\n${JSON.stringify(workflowExports, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import these workflows into another n8n instance.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[59]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[7][0]++;
          cov_kyraf3f5f().s[60]++;
          throw new fastmcp_1.UserError(`Failed to export workflows by tags: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[7][1]++;
        }
        cov_kyraf3f5f().s[61]++;
        throw new fastmcp_1.UserError('Failed to export workflows by tags with unknown error');
      }
    }
  });
  // Export single credential
  /* istanbul ignore next */
  cov_kyraf3f5f().s[62]++;
  server.addTool({
    name: 'export-credential',
    description: 'Export a single credential for transfer to another n8n instance. Note: Secrets are only included if explicitly requested.',
    parameters: ExportCredentialSchema,
    annotations: {
      title: 'Export Credential',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[4]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[63]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[64]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[8][0]++;
        cov_kyraf3f5f().s[65]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[8][1]++;
      }
      cov_kyraf3f5f().s[66]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[67]++, new exportUtils_js_1.ExportUtils(client));
        const {
          credentialId,
          ...options
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[68]++, args);
        const credentialExport =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[69]++, await exportUtils.exportCredential(credentialId, options));
        let result =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[70]++, `**Credential Export:**\n`);
        /* istanbul ignore next */
        cov_kyraf3f5f().s[71]++;
        result += `- Name: ${credentialExport.name}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[72]++;
        result += `- Type: ${credentialExport.type}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[73]++;
        result += `- Secrets included: ${credentialExport.sanitized ?
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[9][0]++, 'No') :
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[9][1]++, 'Yes')}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[74]++;
        result += `- Exported at: ${credentialExport.exportedAt}\n\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[75]++;
        if (credentialExport.sanitized) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[10][0]++;
          cov_kyraf3f5f().s[76]++;
          result += `⚠️  **Security Notice:** Credential secrets were not included. You will need to reconfigure the credential data after import.\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[10][1]++;
        }
        cov_kyraf3f5f().s[77]++;
        result += `**Export Data:**\n\`\`\`json\n${JSON.stringify(credentialExport, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import this credential into another n8n instance.`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[78]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[79]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[11][0]++;
          cov_kyraf3f5f().s[80]++;
          throw new fastmcp_1.UserError(`Failed to export credential: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[11][1]++;
        }
        cov_kyraf3f5f().s[81]++;
        throw new fastmcp_1.UserError('Failed to export credential with unknown error');
      }
    }
  });
  // Export multiple credentials
  /* istanbul ignore next */
  cov_kyraf3f5f().s[82]++;
  server.addTool({
    name: 'export-credentials',
    description: 'Export multiple credentials for batch transfer to another n8n instance',
    parameters: ExportCredentialsSchema,
    annotations: {
      title: 'Export Multiple Credentials',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[5]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[83]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[84]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[12][0]++;
        cov_kyraf3f5f().s[85]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[12][1]++;
      }
      cov_kyraf3f5f().s[86]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[87]++, new exportUtils_js_1.ExportUtils(client));
        const {
          credentialIds,
          ...options
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[88]++, args);
        const credentialExports =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[89]++, await exportUtils.exportCredentials(credentialIds, options));
        let result =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[90]++, `**Credentials Export Summary:**\n`);
        /* istanbul ignore next */
        cov_kyraf3f5f().s[91]++;
        result += `- Total credentials: ${credentialExports.length}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[92]++;
        result += `- Secrets included: ${options.includeSecrets ?
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[13][0]++, 'Yes') :
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[13][1]++, 'No')}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[93]++;
        result += `- Exported at: ${new Date().toISOString()}\n\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[94]++;
        if (!options.includeSecrets) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[14][0]++;
          cov_kyraf3f5f().s[95]++;
          result += `⚠️  **Security Notice:** Credential secrets were not included. You will need to reconfigure credential data after import.\n\n`;
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[14][1]++;
        }
        cov_kyraf3f5f().s[96]++;
        result += `**Export Data:**\n\`\`\`json\n${JSON.stringify(credentialExports, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import these credentials into another n8n instance.`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[97]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[98]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[15][0]++;
          cov_kyraf3f5f().s[99]++;
          throw new fastmcp_1.UserError(`Failed to export credentials: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[15][1]++;
        }
        cov_kyraf3f5f().s[100]++;
        throw new fastmcp_1.UserError('Failed to export credentials with unknown error');
      }
    }
  });
  // Export project
  /* istanbul ignore next */
  cov_kyraf3f5f().s[101]++;
  server.addTool({
    name: 'export-project',
    description: 'Export an entire project with all its workflows, credentials, and configurations',
    parameters: ExportProjectSchema,
    annotations: {
      title: 'Export Project',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[6]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[102]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[103]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[16][0]++;
        cov_kyraf3f5f().s[104]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[16][1]++;
      }
      cov_kyraf3f5f().s[105]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[106]++, new exportUtils_js_1.ExportUtils(client));
        const {
          projectId,
          ...options
        } =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[107]++, args);
        const projectExport =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[108]++, await exportUtils.exportProject(projectId, options));
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[109]++, exportUtils.generateExportSummary(projectExport));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[110]++;
        return `${summary}\n\n**Export Data:**\n\`\`\`json\n${JSON.stringify(projectExport, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import this project into another n8n instance.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[111]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[17][0]++;
          cov_kyraf3f5f().s[112]++;
          throw new fastmcp_1.UserError(`Failed to export project: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[17][1]++;
        }
        cov_kyraf3f5f().s[113]++;
        throw new fastmcp_1.UserError('Failed to export project with unknown error');
      }
    }
  });
  // Export entire instance
  /* istanbul ignore next */
  cov_kyraf3f5f().s[114]++;
  server.addTool({
    name: 'export-instance',
    description: 'Export the entire n8n instance including all projects, workflows, credentials, and configurations',
    parameters: ExportOptionsSchema,
    annotations: {
      title: 'Export Entire Instance',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[7]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[115]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[116]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[18][0]++;
        cov_kyraf3f5f().s[117]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[18][1]++;
      }
      cov_kyraf3f5f().s[118]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[119]++, new exportUtils_js_1.ExportUtils(client));
        const instanceExport =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[120]++, await exportUtils.exportInstance(args));
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[121]++, exportUtils.generateExportSummary(instanceExport));
        const dataSize =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[122]++, JSON.stringify(instanceExport).length);
        const dataSizeMB =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[123]++, (dataSize / (1024 * 1024)).toFixed(2));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[124]++;
        return `${summary}\n\n📦 **Export Size:** ${dataSizeMB} MB\n\n**Export Data:**\n\`\`\`json\n${JSON.stringify(instanceExport, null, 2)}\n\`\`\`\n\n💾 Copy the JSON data above to import this entire instance into another n8n setup.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[125]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[19][0]++;
          cov_kyraf3f5f().s[126]++;
          throw new fastmcp_1.UserError(`Failed to export instance: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[19][1]++;
        }
        cov_kyraf3f5f().s[127]++;
        throw new fastmcp_1.UserError('Failed to export instance with unknown error');
      }
    }
  });
  // Import workflows/credentials/projects
  /* istanbul ignore next */
  cov_kyraf3f5f().s[128]++;
  server.addTool({
    name: 'import-resources',
    description: 'Import workflows, credentials, or projects from exported JSON data into the current n8n instance',
    parameters: ImportDataSchema,
    annotations: {
      title: 'Import Resources',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[8]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[129]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[130]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[20][0]++;
        cov_kyraf3f5f().s[131]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[20][1]++;
      }
      cov_kyraf3f5f().s[132]++;
      try {
        const importUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[133]++, new importUtils_js_1.ImportUtils(client));
        const exportData =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[134]++, JSON.parse(args.exportData));
        const options =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[135]++,
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[21][0]++, args.options) ||
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[21][1]++, {
          conflictResolution: 'skip',
          createMissingProjects: false,
          validateCredentials: true,
          dryRun: false
        }));
        let summary;
        // Determine the type of export data and import accordingly
        /* istanbul ignore next */
        cov_kyraf3f5f().s[136]++;
        if (exportData.metadata) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[22][0]++;
          cov_kyraf3f5f().s[137]++;
          // Full instance export
          summary = await importUtils.importInstance(exportData, options);
        } else {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[22][1]++;
          cov_kyraf3f5f().s[138]++;
          if (exportData.workflows) {
            /* istanbul ignore next */
            cov_kyraf3f5f().b[23][0]++;
            cov_kyraf3f5f().s[139]++;
            // Project export
            summary = await importUtils.importProject(exportData, options);
          } else {
            /* istanbul ignore next */
            cov_kyraf3f5f().b[23][1]++;
            cov_kyraf3f5f().s[140]++;
            if (Array.isArray(exportData)) {
              /* istanbul ignore next */
              cov_kyraf3f5f().b[24][0]++;
              cov_kyraf3f5f().s[141]++;
              // Check if it's an array of workflows or credentials
              if (
              /* istanbul ignore next */
              (cov_kyraf3f5f().b[26][0]++, exportData.length > 0) &&
              /* istanbul ignore next */
              (cov_kyraf3f5f().b[26][1]++, exportData[0].nodes)) {
                /* istanbul ignore next */
                cov_kyraf3f5f().b[25][0]++;
                cov_kyraf3f5f().s[142]++;
                // Array of workflows
                summary = await importUtils.importWorkflows(exportData, options);
              } else {
                /* istanbul ignore next */
                cov_kyraf3f5f().b[25][1]++;
                cov_kyraf3f5f().s[143]++;
                if (
                /* istanbul ignore next */
                (cov_kyraf3f5f().b[28][0]++, exportData.length > 0) &&
                /* istanbul ignore next */
                (cov_kyraf3f5f().b[28][1]++, exportData[0].type)) {
                  /* istanbul ignore next */
                  cov_kyraf3f5f().b[27][0]++;
                  // Array of credentials - import each one
                  const results =
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().s[144]++, []);
                  /* istanbul ignore next */
                  cov_kyraf3f5f().s[145]++;
                  for (const credential of exportData) {
                    const result =
                    /* istanbul ignore next */
                    (cov_kyraf3f5f().s[146]++, await importUtils.importCredential(credential, options));
                    /* istanbul ignore next */
                    cov_kyraf3f5f().s[147]++;
                    results.push(result);
                  }
                  /* istanbul ignore next */
                  cov_kyraf3f5f().s[148]++;
                  summary = {
                    totalItems: results.length,
                    successful: results.filter(r => {
                      /* istanbul ignore next */
                      cov_kyraf3f5f().f[9]++;
                      cov_kyraf3f5f().s[149]++;
                      return r.success;
                    }).length,
                    failed: results.filter(r => {
                      /* istanbul ignore next */
                      cov_kyraf3f5f().f[10]++;
                      cov_kyraf3f5f().s[150]++;
                      return !r.success;
                    }).length,
                    skipped: 0,
                    warnings: [],
                    results,
                    importedAt: new Date().toISOString()
                  };
                } else {
                  /* istanbul ignore next */
                  cov_kyraf3f5f().b[27][1]++;
                  cov_kyraf3f5f().s[151]++;
                  throw new fastmcp_1.UserError('Unable to determine the type of export data');
                }
              }
            } else {
              /* istanbul ignore next */
              cov_kyraf3f5f().b[24][1]++;
              cov_kyraf3f5f().s[152]++;
              if (exportData.nodes) {
                /* istanbul ignore next */
                cov_kyraf3f5f().b[29][0]++;
                // Single workflow
                const result =
                /* istanbul ignore next */
                (cov_kyraf3f5f().s[153]++, await importUtils.importWorkflow(exportData, options));
                /* istanbul ignore next */
                cov_kyraf3f5f().s[154]++;
                summary = {
                  totalItems: 1,
                  successful: result.success ?
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[30][0]++, 1) :
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[30][1]++, 0),
                  failed: result.success ?
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[31][0]++, 0) :
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[31][1]++, 1),
                  skipped: 0,
                  warnings:
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[32][0]++, result.warnings) ||
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().b[32][1]++, []),
                  results: [result],
                  importedAt: new Date().toISOString()
                };
              } else {
                /* istanbul ignore next */
                cov_kyraf3f5f().b[29][1]++;
                cov_kyraf3f5f().s[155]++;
                if (
                /* istanbul ignore next */
                (cov_kyraf3f5f().b[34][0]++, exportData.type) &&
                /* istanbul ignore next */
                (cov_kyraf3f5f().b[34][1]++, exportData.name)) {
                  /* istanbul ignore next */
                  cov_kyraf3f5f().b[33][0]++;
                  // Single credential
                  const result =
                  /* istanbul ignore next */
                  (cov_kyraf3f5f().s[156]++, await importUtils.importCredential(exportData, options));
                  /* istanbul ignore next */
                  cov_kyraf3f5f().s[157]++;
                  summary = {
                    totalItems: 1,
                    successful: result.success ?
                    /* istanbul ignore next */
                    (cov_kyraf3f5f().b[35][0]++, 1) :
                    /* istanbul ignore next */
                    (cov_kyraf3f5f().b[35][1]++, 0),
                    failed: result.success ?
                    /* istanbul ignore next */
                    (cov_kyraf3f5f().b[36][0]++, 0) :
                    /* istanbul ignore next */
                    (cov_kyraf3f5f().b[36][1]++, 1),
                    skipped: 0,
                    warnings: [],
                    results: [result],
                    importedAt: new Date().toISOString()
                  };
                } else {
                  /* istanbul ignore next */
                  cov_kyraf3f5f().b[33][1]++;
                  cov_kyraf3f5f().s[158]++;
                  throw new fastmcp_1.UserError('Unable to determine the type of export data');
                }
              }
            }
          }
        }
        const summaryText =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[159]++, importUtils.generateImportSummary(summary));
        /* istanbul ignore next */
        cov_kyraf3f5f().s[160]++;
        if (options?.dryRun) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[37][0]++;
          cov_kyraf3f5f().s[161]++;
          return `🧪 **DRY RUN RESULTS**\n\n${summaryText}\n\n*No actual changes were made to the n8n instance.*`;
        } else {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[37][1]++;
          cov_kyraf3f5f().s[162]++;
          return `✅ **Import Completed**\n\n${summaryText}`;
        }
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[163]++;
        if (error instanceof SyntaxError) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[38][0]++;
          cov_kyraf3f5f().s[164]++;
          throw new fastmcp_1.UserError('Invalid JSON data provided. Please ensure the export data is valid JSON.');
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[38][1]++;
        }
        cov_kyraf3f5f().s[165]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[39][0]++;
          cov_kyraf3f5f().s[166]++;
          throw new fastmcp_1.UserError(`Failed to import resources: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[39][1]++;
        }
        cov_kyraf3f5f().s[167]++;
        throw new fastmcp_1.UserError('Failed to import resources with unknown error');
      }
    }
  });
  // Transfer workflows between projects
  /* istanbul ignore next */
  cov_kyraf3f5f().s[168]++;
  server.addTool({
    name: 'transfer-workflows-to-project',
    description: 'Transfer workflows from one project to another within the same n8n instance',
    parameters: TransferWorkflowsSchema,
    annotations: {
      title: 'Transfer Workflows Between Projects',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_kyraf3f5f().f[11]++;
      const client =
      /* istanbul ignore next */
      (cov_kyraf3f5f().s[169]++, getClient());
      /* istanbul ignore next */
      cov_kyraf3f5f().s[170]++;
      if (!client) {
        /* istanbul ignore next */
        cov_kyraf3f5f().b[40][0]++;
        cov_kyraf3f5f().s[171]++;
        throw new fastmcp_1.UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_kyraf3f5f().b[40][1]++;
      }
      cov_kyraf3f5f().s[172]++;
      try {
        const exportUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[173]++, new exportUtils_js_1.ExportUtils(client));
        const importUtils =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[174]++, new importUtils_js_1.ImportUtils(client));
        // Export workflows
        const workflowExports =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[175]++, await exportUtils.exportWorkflows(args.workflowIds, {
          includeCredentials: false // Don't duplicate credentials
        }));
        // Import to target project
        const importOptions =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[176]++, {
          targetProjectId: args.targetProjectId,
          conflictResolution: args.moveOrCopy === 'copy' ?
          /* istanbul ignore next */
          (cov_kyraf3f5f().b[41][0]++, 'rename') :
          /* istanbul ignore next */
          (cov_kyraf3f5f().b[41][1]++, 'skip'),
          validateCredentials: true
        });
        const summary =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[177]++, await importUtils.importWorkflows(workflowExports, importOptions));
        let result =
        /* istanbul ignore next */
        (cov_kyraf3f5f().s[178]++, `📁 **Workflow Transfer Results**\n\n`);
        /* istanbul ignore next */
        cov_kyraf3f5f().s[179]++;
        result += `Operation: ${args.moveOrCopy.toUpperCase()}\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[180]++;
        result += `Target Project: ${args.targetProjectId}\n\n`;
        /* istanbul ignore next */
        cov_kyraf3f5f().s[181]++;
        result += importUtils.generateImportSummary(summary);
        // If moving (not copying), delete the original workflows
        /* istanbul ignore next */
        cov_kyraf3f5f().s[182]++;
        if (
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[43][0]++, args.moveOrCopy === 'move') &&
        /* istanbul ignore next */
        (cov_kyraf3f5f().b[43][1]++, summary.successful > 0)) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[42][0]++;
          cov_kyraf3f5f().s[183]++;
          result += `\n🗑️  **Removing original workflows...**\n`;
          let deleteCount =
          /* istanbul ignore next */
          (cov_kyraf3f5f().s[184]++, 0);
          /* istanbul ignore next */
          cov_kyraf3f5f().s[185]++;
          for (const workflowId of args.workflowIds) {
            /* istanbul ignore next */
            cov_kyraf3f5f().s[186]++;
            try {
              /* istanbul ignore next */
              cov_kyraf3f5f().s[187]++;
              await client.deleteWorkflow(workflowId);
              /* istanbul ignore next */
              cov_kyraf3f5f().s[188]++;
              deleteCount++;
            } catch (error) {
              /* istanbul ignore next */
              cov_kyraf3f5f().s[189]++;
              result += `⚠️  Failed to delete original workflow ${workflowId}: ${error instanceof Error ?
              /* istanbul ignore next */
              (cov_kyraf3f5f().b[44][0]++, error.message) :
              /* istanbul ignore next */
              (cov_kyraf3f5f().b[44][1]++, 'Unknown error')}\n`;
            }
          }
          /* istanbul ignore next */
          cov_kyraf3f5f().s[190]++;
          result += `✅ Deleted ${deleteCount} original workflows\n`;
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[42][1]++;
        }
        cov_kyraf3f5f().s[191]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_kyraf3f5f().s[192]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_kyraf3f5f().b[45][0]++;
          cov_kyraf3f5f().s[193]++;
          throw new fastmcp_1.UserError(`Failed to transfer workflows: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_kyraf3f5f().b[45][1]++;
        }
        cov_kyraf3f5f().s[194]++;
        throw new fastmcp_1.UserError('Failed to transfer workflows with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,