5dcf761c7e4b14c5c7e0b3756348d55f
/* istanbul ignore next */
function cov_a2fw5gbsd() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/executionTypes.ts";
  var hash = "23b1b2de11eb31998f8a4d598731759be3bded16";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/executionTypes.ts",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/executionTypes.ts",
      mappings: "AAAA;;;;;GAKG",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/types/executionTypes.ts"],
      sourcesContent: ["/**\n * Execution Control Types for n8n MCP Server\n *\n * Defines types and interfaces for sophisticated execution control including\n * cancellation, retry mechanisms, and partial workflow execution.\n */\n\nimport { N8nExecution } from './n8n.js';\n\n/**\n * Execution control states\n */\nexport type ExecutionState =\n  | 'pending'\n  | 'running'\n  | 'paused'\n  | 'pausing'\n  | 'stopping'\n  | 'stopped'\n  | 'cancelled'\n  | 'completed'\n  | 'failed'\n  | 'timeout'\n  | 'waiting'\n  | 'retrying'\n  | 'partial';\n\n/**\n * Execution control actions\n */\nexport type ExecutionAction =\n  | 'start'\n  | 'pause'\n  | 'resume'\n  | 'stop'\n  | 'cancel'\n  | 'retry'\n  | 'retry-from-node'\n  | 'skip-node'\n  | 'execute-partial';\n\n/**\n * Execution control priority levels\n */\nexport type ExecutionPriority = 'low' | 'normal' | 'high' | 'critical';\n\n/**\n * Execution cancellation reasons\n */\nexport type CancellationReason =\n  | 'user-requested'\n  | 'timeout'\n  | 'resource-limit'\n  | 'error-threshold'\n  | 'dependency-failure'\n  | 'system-shutdown'\n  | 'policy-violation';\n\n/**\n * Retry strategy types\n */\nexport type RetryStrategy = 'immediate' | 'linear' | 'exponential' | 'custom';\n\n/**\n * Node execution state\n */\nexport interface NodeExecutionState {\n  /** Node identifier */\n  nodeId: string;\n\n  /** Node name */\n  nodeName: string;\n\n  /** Node type */\n  nodeType: string;\n\n  /** Current state */\n  state: 'pending' | 'running' | 'completed' | 'failed' | 'skipped' | 'cancelled';\n\n  /** Execution start time */\n  startedAt?: string;\n\n  /** Execution completion time */\n  completedAt?: string;\n\n  /** Execution duration in milliseconds */\n  duration?: number;\n\n  /** Number of retry attempts */\n  retryCount: number;\n\n  /** Maximum allowed retries */\n  maxRetries: number;\n\n  /** Error information if failed */\n  error?: {\n    message: string;\n    stack?: string;\n    code?: string;\n    type: string;\n  };\n\n  /** Node execution data */\n  data?: {\n    input?: Record<string, unknown>;\n    output?: Record<string, unknown>;\n    metadata?: Record<string, unknown>;\n  };\n\n  /** Whether node can be retried */\n  canRetry: boolean;\n\n  /** Whether node can be skipped */\n  canSkip: boolean;\n}\n\n/**\n * Execution checkpoint for resume functionality\n */\nexport interface ExecutionCheckpoint {\n  /** Checkpoint identifier */\n  checkpointId: string;\n\n  /** Execution ID */\n  executionId: string;\n\n  /** Checkpoint timestamp */\n  timestamp: string;\n\n  /** Checkpoint description */\n  description: string;\n\n  /** Completed nodes at checkpoint */\n  completedNodes: string[];\n\n  /** Current execution state */\n  executionState: Record<string, unknown>;\n\n  /** Node states at checkpoint */\n  nodeStates: NodeExecutionState[];\n\n  /** Checkpoint metadata */\n  metadata: Record<string, unknown>;\n}\n\n/**\n * Execution control configuration\n */\nexport interface ExecutionControlConfig {\n  /** Maximum execution time in milliseconds */\n  maxExecutionTime?: number;\n\n  /** Maximum retry attempts for the entire execution */\n  maxExecutionRetries?: number;\n\n  /** Default retry strategy */\n  defaultRetryStrategy?: RetryStrategy;\n\n  /** Retry delay configuration */\n  retryDelay?: {\n    initial: number;\n    multiplier: number;\n    maximum: number;\n  };\n\n  /** Whether to create checkpoints */\n  enableCheckpoints?: boolean;\n\n  /** Checkpoint interval in nodes */\n  checkpointInterval?: number;\n\n  /** Whether to allow partial execution */\n  allowPartialExecution?: boolean;\n\n  /** Resource limits */\n  resourceLimits?: {\n    maxMemory?: number;\n    maxCpu?: number;\n    maxDiskSpace?: number;\n  };\n\n  /** Timeout configuration */\n  timeouts?: {\n    nodeTimeout?: number;\n    connectionTimeout?: number;\n    responseTimeout?: number;\n  };\n}\n\n/**\n * Enhanced execution information with control data\n */\nexport interface EnhancedExecution extends N8nExecution {\n  /** Enhanced execution state */\n  enhancedState: ExecutionState;\n\n  /** Execution priority */\n  priority: ExecutionPriority;\n\n  /** Node execution states */\n  nodeStates: NodeExecutionState[];\n\n  /** Available checkpoints */\n  checkpoints: ExecutionCheckpoint[];\n\n  /** Execution control configuration */\n  controlConfig: ExecutionControlConfig;\n\n  /** Cancellation information */\n  cancellation?: {\n    reason: CancellationReason;\n    requestedAt: string;\n    requestedBy: string;\n    cancelledAt?: string;\n  };\n\n  /** Retry information */\n  retryInfo?: {\n    strategy: RetryStrategy;\n    attemptCount: number;\n    maxAttempts: number;\n    nextRetryAt?: string;\n    originalExecutionId?: string;\n  };\n\n  /** Partial execution information */\n  partialExecution?: {\n    targetNodes: string[];\n    startFromNode?: string;\n    skipNodes?: string[];\n    executeUntilNode?: string;\n  };\n\n  /** Execution progress */\n  progress: {\n    totalNodes: number;\n    completedNodes: number;\n    failedNodes: number;\n    skippedNodes: number;\n    percentComplete: number;\n  };\n\n  /** Performance metrics */\n  metrics: {\n    totalDuration?: number;\n    nodeExecutionTimes: Record<string, number>;\n    memoryUsage?: number;\n    cpuUsage?: number;\n  };\n}\n\n/**\n * Execution control request\n */\nexport interface ExecutionControlRequest {\n  /** Execution ID */\n  executionId: string;\n\n  /** Control action to perform */\n  action: ExecutionAction;\n\n  /** Request timestamp */\n  requestedAt: string;\n\n  /** User who requested the action */\n  requestedBy: string;\n\n  /** Action-specific parameters */\n  parameters?: {\n    /** For retry actions */\n    retryStrategy?: RetryStrategy;\n    retryDelay?: number;\n    maxRetries?: number;\n\n    /** For partial execution */\n    targetNodes?: string[];\n    startFromNode?: string;\n    skipNodes?: string[];\n    executeUntilNode?: string;\n\n    /** For cancellation */\n    reason?: CancellationReason;\n    force?: boolean;\n\n    /** For pause/resume */\n    timeout?: number;\n    preserveState?: boolean;\n  };\n\n  /** Request metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Execution control response\n */\nexport interface ExecutionControlResponse {\n  /** Whether the action was successful */\n  success: boolean;\n\n  /** Response message */\n  message: string;\n\n  /** Updated execution state */\n  executionState?: ExecutionState;\n\n  /** Execution ID */\n  executionId: string;\n\n  /** Action that was performed */\n  action: ExecutionAction;\n\n  /** Response timestamp */\n  timestamp: string;\n\n  /** Additional response data */\n  data?: {\n    /** New execution ID for retries */\n    newExecutionId?: string;\n\n    /** Checkpoint ID for pause operations */\n    checkpointId?: string;\n\n    /** Estimated completion time */\n    estimatedCompletion?: string;\n\n    /** Affected nodes */\n    affectedNodes?: string[];\n\n    /** Performance impact */\n    performanceImpact?: {\n      estimatedDelay?: number;\n      resourceUsage?: Record<string, number>;\n    };\n  };\n\n  /** Error information if failed */\n  error?: {\n    code: string;\n    message: string;\n    details?: Record<string, unknown>;\n  };\n}\n\n/**\n * Batch execution control request\n */\nexport interface BatchExecutionControlRequest {\n  /** Execution IDs to control */\n  executionIds: string[];\n\n  /** Control action to perform on all executions */\n  action: ExecutionAction;\n\n  /** Request timestamp */\n  requestedAt: string;\n\n  /** User who requested the action */\n  requestedBy: string;\n\n  /** Whether to continue on individual failures */\n  continueOnFailure: boolean;\n\n  /** Action-specific parameters (applied to all executions) */\n  parameters?: ExecutionControlRequest['parameters'];\n\n  /** Request metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Batch execution control response\n */\nexport interface BatchExecutionControlResponse {\n  /** Overall success status */\n  success: boolean;\n\n  /** Response message */\n  message: string;\n\n  /** Total number of executions processed */\n  totalExecutions: number;\n\n  /** Number of successful operations */\n  successfulOperations: number;\n\n  /** Number of failed operations */\n  failedOperations: number;\n\n  /** Individual execution results */\n  results: Array<{\n    executionId: string;\n    success: boolean;\n    message: string;\n    newState?: ExecutionState;\n    error?: string;\n  }>;\n\n  /** Response timestamp */\n  timestamp: string;\n\n  /** Batch operation metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Execution monitoring configuration\n */\nexport interface ExecutionMonitoringConfig {\n  /** Enable real-time monitoring */\n  enableRealTimeMonitoring: boolean;\n\n  /** Monitoring interval in milliseconds */\n  monitoringInterval: number;\n\n  /** Performance metrics to collect */\n  metricsToCollect: Array<'cpu' | 'memory' | 'disk' | 'network' | 'duration'>;\n\n  /** Alert thresholds */\n  alertThresholds: {\n    executionTime?: number;\n    memoryUsage?: number;\n    cpuUsage?: number;\n    errorRate?: number;\n  };\n\n  /** Notification settings */\n  notifications: {\n    onFailure: boolean;\n    onTimeout: boolean;\n    onCompletion: boolean;\n    onThresholdExceeded: boolean;\n  };\n}\n\n/**\n * Execution analytics data\n */\nexport interface ExecutionAnalytics {\n  /** Execution ID */\n  executionId: string;\n\n  /** Analytics timestamp */\n  timestamp: string;\n\n  /** Performance metrics */\n  performance: {\n    totalDuration: number;\n    nodeExecutionTimes: Record<string, number>;\n    memoryPeak: number;\n    cpuAverage: number;\n    networkTraffic?: number;\n  };\n\n  /** Execution flow analysis */\n  flow: {\n    criticalPath: string[];\n    parallelNodes: string[][];\n    bottlenecks: Array<{\n      nodeId: string;\n      duration: number;\n      type: 'cpu' | 'memory' | 'io' | 'network';\n    }>;\n  };\n\n  /** Error analysis */\n  errors: Array<{\n    nodeId: string;\n    errorType: string;\n    errorMessage: string;\n    retryCount: number;\n    resolution?: 'retry' | 'skip' | 'manual';\n  }>;\n\n  /** Optimization suggestions */\n  optimizations: Array<{\n    type: 'performance' | 'reliability' | 'cost';\n    description: string;\n    estimatedImpact: string;\n    priority: 'low' | 'medium' | 'high';\n  }>;\n}\n\n/**\n * Execution history entry\n */\nexport interface ExecutionHistoryEntry {\n  /** Entry timestamp */\n  timestamp: string;\n\n  /** Execution state at this point */\n  state: ExecutionState;\n\n  /** Event type */\n  event: 'started' | 'paused' | 'resumed' | 'completed' | 'failed' | 'cancelled' | 'retried';\n\n  /** Event description */\n  description: string;\n\n  /** User who triggered the event */\n  triggeredBy?: string;\n\n  /** Event metadata */\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Complete execution control context\n */\nexport interface ExecutionControlContext {\n  /** Enhanced execution information */\n  execution: EnhancedExecution;\n\n  /** Control configuration */\n  config: ExecutionControlConfig;\n\n  /** Monitoring configuration */\n  monitoring: ExecutionMonitoringConfig;\n\n  /** Execution history */\n  history: ExecutionHistoryEntry[];\n\n  /** Analytics data */\n  analytics?: ExecutionAnalytics;\n\n  /** Active control requests */\n  activeRequests: ExecutionControlRequest[];\n\n  /** Available actions for current state */\n  availableActions: ExecutionAction[];\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "23b1b2de11eb31998f8a4d598731759be3bded16"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_a2fw5gbsd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_a2fw5gbsd();
/**
 * Execution Control Types for n8n MCP Server
 *
 * Defines types and interfaces for sophisticated execution control including
 * cancellation, retry mechanisms, and partial workflow execution.
 */
export {};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,