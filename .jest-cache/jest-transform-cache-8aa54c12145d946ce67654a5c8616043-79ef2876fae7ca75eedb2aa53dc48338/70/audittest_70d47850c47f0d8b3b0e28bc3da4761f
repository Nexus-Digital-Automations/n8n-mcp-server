42b8babc879348244fb5ccdc12f4ac22
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const audit_1 = require("../../../src/tools/audit");
(0, globals_1.describe)('Audit Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register audit tools
        (0, audit_1.createAuditTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all audit tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(1);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('generate-audit-report');
    });
    (0, globals_1.describe)('generate-audit-report tool', () => {
        let generateAuditReportTool;
        (0, globals_1.beforeEach)(() => {
            generateAuditReportTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'generate-audit-report')[0];
        });
        (0, globals_1.it)('should generate audit report successfully with all sections', async () => {
            const mockAuditReport = {
                'Database Settings': {
                    type: 'sqlite',
                    encryption: true,
                },
                'Credentials Risk Report': {
                    'high-risk-credentials': 2,
                    'unencrypted-credentials': 0,
                },
                'Nodes Risk Report': {
                    'deprecated-nodes': 1,
                    'external-api-nodes': 5,
                },
                'Instance Risk Report': {
                    'admin-users': 2,
                    'open-permissions': false,
                },
            };
            mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);
            const result = await generateAuditReportTool.execute({});
            (0, globals_1.expect)(mockClient.generateAuditReport).toHaveBeenCalledWith();
            (0, globals_1.expect)(result).toContain('# n8n Security Audit Report');
            (0, globals_1.expect)(result).toContain('## Database Settings');
            (0, globals_1.expect)(result).toContain('## Credentials Risk Assessment');
            (0, globals_1.expect)(result).toContain('## Nodes Risk Assessment');
            (0, globals_1.expect)(result).toContain('## Instance Risk Assessment');
            (0, globals_1.expect)(result).toContain('sqlite');
            (0, globals_1.expect)(result).toContain('high-risk-credentials');
            (0, globals_1.expect)(result).toContain('Security Recommendations');
        });
        (0, globals_1.it)('should handle audit report with empty risk sections', async () => {
            const mockAuditReport = {
                'Database Settings': {
                    type: 'postgresql',
                },
                'Credentials Risk Report': {},
                'Nodes Risk Report': {},
                'Instance Risk Report': {},
            };
            mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);
            const result = await generateAuditReportTool.execute({});
            (0, globals_1.expect)(result).toContain('No credential risk issues found');
            (0, globals_1.expect)(result).toContain('No node risk issues found');
            (0, globals_1.expect)(result).toContain('No instance risk issues found');
        });
        (0, globals_1.it)('should handle audit report with unusual data structures', async () => {
            const mockAuditReport = {
                'Database Settings': {
                    type: 'mysql',
                },
                'Credentials Risk Report': {
                    status: 'No issues found',
                },
                'Nodes Risk Report': {
                    nodes: ['node1', 'node2'],
                },
                'Instance Risk Report': {
                    value: null,
                },
            };
            mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);
            const result = await generateAuditReportTool.execute({});
            (0, globals_1.expect)(result).toContain('No issues found');
            (0, globals_1.expect)(result).toContain('node1');
            (0, globals_1.expect)(result).toContain('null');
        });
        (0, globals_1.it)('should handle audit report with additional unknown sections', async () => {
            const mockAuditReport = {
                'Database Settings': {
                    type: 'sqlite',
                },
                'Custom Security Section': {
                    'custom-metric': 'value',
                },
                'Another Section': ['item1', 'item2'],
            };
            mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);
            const result = await generateAuditReportTool.execute({});
            (0, globals_1.expect)(result).toContain('## Additional Audit Information');
            (0, globals_1.expect)(result).toContain('### Custom Security Section');
            (0, globals_1.expect)(result).toContain('### Another Section');
            (0, globals_1.expect)(result).toContain('custom-metric');
            (0, globals_1.expect)(result).toContain('item1');
        });
        (0, globals_1.it)('should handle license-related errors', async () => {
            mockClient.generateAuditReport.mockRejectedValue(new Error('This feature requires an Enterprise license'));
            await (0, globals_1.expect)(generateAuditReportTool.execute({})).rejects.toThrow('This operation may require an n8n Enterprise license');
        });
        (0, globals_1.it)('should handle generic API errors', async () => {
            mockClient.generateAuditReport.mockRejectedValue(new Error('API connection failed'));
            await (0, globals_1.expect)(generateAuditReportTool.execute({})).rejects.toThrow('Failed to generate audit report: API connection failed');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.generateAuditReport.mockRejectedValue('Unknown error');
            await (0, globals_1.expect)(generateAuditReportTool.execute({})).rejects.toThrow('Failed to generate audit report with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, audit_1.createAuditTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'generate-audit-report')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            (0, globals_1.expect)(tool).toHaveProperty('execute');
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(generateAuditReportTool.annotations).toEqual({
                title: 'Generate Audit Report',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: false,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should accept empty parameters object', () => {
            (0, globals_1.expect)(generateAuditReportTool.parameters).toBeDefined();
            // Zod schema should accept empty object
            (0, globals_1.expect)(() => generateAuditReportTool.parameters.parse({})).not.toThrow();
        });
        (0, globals_1.it)('should format current date and time in report', async () => {
            const mockAuditReport = {
                'Database Settings': { type: 'test' },
            };
            mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);
            const result = await generateAuditReportTool.execute({});
            // Check that a date is included in the report
            (0, globals_1.expect)(result).toMatch(/\*\*Generated:\*\* \d{1,2}\/\d{1,2}\/\d{4}/);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,