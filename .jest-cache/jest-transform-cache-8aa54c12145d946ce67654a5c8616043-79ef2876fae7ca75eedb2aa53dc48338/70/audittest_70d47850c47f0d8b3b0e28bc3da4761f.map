{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/audit.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/audit.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createAuditTools } from '../../../src/tools/audit';\nimport { N8nClient } from '../../../src/client/n8nClient';\n\ndescribe('Audit Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register audit tools\n    createAuditTools(getClient, mockServer);\n  });\n\n  it('should register all audit tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(1);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('generate-audit-report');\n  });\n\n  describe('generate-audit-report tool', () => {\n    let generateAuditReportTool: any;\n\n    beforeEach(() => {\n      generateAuditReportTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'generate-audit-report'\n      )[0];\n    });\n\n    it('should generate audit report successfully with all sections', async () => {\n      const mockAuditReport = {\n        'Database Settings': {\n          type: 'sqlite',\n          encryption: true,\n        },\n        'Credentials Risk Report': {\n          'high-risk-credentials': 2,\n          'unencrypted-credentials': 0,\n        },\n        'Nodes Risk Report': {\n          'deprecated-nodes': 1,\n          'external-api-nodes': 5,\n        },\n        'Instance Risk Report': {\n          'admin-users': 2,\n          'open-permissions': false,\n        },\n      };\n\n      mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);\n\n      const result = await generateAuditReportTool.execute({});\n\n      expect(mockClient.generateAuditReport).toHaveBeenCalledWith();\n      expect(result).toContain('# n8n Security Audit Report');\n      expect(result).toContain('## Database Settings');\n      expect(result).toContain('## Credentials Risk Assessment');\n      expect(result).toContain('## Nodes Risk Assessment');\n      expect(result).toContain('## Instance Risk Assessment');\n      expect(result).toContain('sqlite');\n      expect(result).toContain('high-risk-credentials');\n      expect(result).toContain('Security Recommendations');\n    });\n\n    it('should handle audit report with empty risk sections', async () => {\n      const mockAuditReport = {\n        'Database Settings': {\n          type: 'postgresql',\n        },\n        'Credentials Risk Report': {},\n        'Nodes Risk Report': {},\n        'Instance Risk Report': {},\n      };\n\n      mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);\n\n      const result = await generateAuditReportTool.execute({});\n\n      expect(result).toContain('No credential risk issues found');\n      expect(result).toContain('No node risk issues found');\n      expect(result).toContain('No instance risk issues found');\n    });\n\n    it('should handle audit report with unusual data structures', async () => {\n      const mockAuditReport = {\n        'Database Settings': {\n          type: 'mysql',\n        },\n        'Credentials Risk Report': {\n          status: 'No issues found',\n        },\n        'Nodes Risk Report': {\n          nodes: ['node1', 'node2'],\n        },\n        'Instance Risk Report': {\n          value: null,\n        },\n      };\n\n      mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);\n\n      const result = await generateAuditReportTool.execute({});\n\n      expect(result).toContain('No issues found');\n      expect(result).toContain('node1');\n      expect(result).toContain('null');\n    });\n\n    it('should handle audit report with additional unknown sections', async () => {\n      const mockAuditReport = {\n        'Database Settings': {\n          type: 'sqlite',\n        },\n        'Custom Security Section': {\n          'custom-metric': 'value',\n        },\n        'Another Section': ['item1', 'item2'],\n      };\n\n      mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);\n\n      const result = await generateAuditReportTool.execute({});\n\n      expect(result).toContain('## Additional Audit Information');\n      expect(result).toContain('### Custom Security Section');\n      expect(result).toContain('### Another Section');\n      expect(result).toContain('custom-metric');\n      expect(result).toContain('item1');\n    });\n\n    it('should handle license-related errors', async () => {\n      mockClient.generateAuditReport.mockRejectedValue(\n        new Error('This feature requires an Enterprise license')\n      );\n\n      await expect(generateAuditReportTool.execute({})).rejects.toThrow(\n        'This operation may require an n8n Enterprise license'\n      );\n    });\n\n    it('should handle generic API errors', async () => {\n      mockClient.generateAuditReport.mockRejectedValue(new Error('API connection failed'));\n\n      await expect(generateAuditReportTool.execute({})).rejects.toThrow(\n        'Failed to generate audit report: API connection failed'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.generateAuditReport.mockRejectedValue('Unknown error');\n\n      await expect(generateAuditReportTool.execute({})).rejects.toThrow(\n        'Failed to generate audit report with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createAuditTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'generate-audit-report'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      expect(tool).toHaveProperty('execute');\n      await expect((tool as any).execute({})).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(generateAuditReportTool.annotations).toEqual({\n        title: 'Generate Audit Report',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: false,\n        openWorldHint: true,\n      });\n    });\n\n    it('should accept empty parameters object', () => {\n      expect(generateAuditReportTool.parameters).toBeDefined();\n      // Zod schema should accept empty object\n      expect(() => generateAuditReportTool.parameters.parse({})).not.toThrow();\n    });\n\n    it('should format current date and time in report', async () => {\n      const mockAuditReport = {\n        'Database Settings': { type: 'test' },\n      };\n\n      mockClient.generateAuditReport.mockResolvedValue(mockAuditReport);\n\n      const result = await generateAuditReportTool.execute({});\n\n      // Check that a date is included in the report\n      expect(result).toMatch(/\\*\\*Generated:\\*\\* \\d{1,2}\\/\\d{1,2}\\/\\d{4}/);\n    });\n  });\n});\n"],"version":3}