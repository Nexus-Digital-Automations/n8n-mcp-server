{"version":3,"names":["cov_10i08mjd2e","actualCoverage","s","exports","createAIModelsTools","zod_1","require","fastmcp_1","ModelSearchSchema","z","object","query","string","optional","provider","enum","default","capability","maxResults","number","min","max","_ModelConfigurationSchema","modelId","configuration","record","any","ModelComparisonSchema","modelIds","array","criteria","AI_MODELS_DATABASE","openai","id","name","type","capabilities","maxTokens","costPer1kTokens","input","output","speed","quality","description","anthropic","google","local","getClient","server","f","addTool","parameters","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","args","allModels","Object","entries","forEach","models","b","push","filter","model","includes","toLowerCase","slice","length","result","index","inputCost","outputCost","charAt","toUpperCase","toLocaleString","join","error","UserError","message","foundModel","find","m","exampleCosts","smallRequest","toFixed","mediumRequest","largeRequest","map","cap","replace","Math","providerModels","some","cheapestInput","reduce","cheapestOutput","speedRanking","fast","medium","slow","sortedBySpeed","sort","a","qualityRanking","excellent","good","fair","poor","sortedByQuality","allCapabilities","Set","flatMap","modelsWithCapability","cheapest","fastest","speedValue","highest_quality","qualityValue","useCase","budget","priority","budgetLimits","low","high","limit","scoredModels","score","totalCost","speedScores","qualityScores","balancedSpeedScores","balancedQualityScores","balancedCostScore","recommendations","ranking","topModel"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/ai-models.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n// Zod schemas for AI model management\nconst ModelSearchSchema = z.object({\n  query: z.string().optional(),\n  provider: z\n    .enum(['openai', 'anthropic', 'google', 'huggingface', 'local', 'all'])\n    .optional()\n    .default('all'),\n  capability: z\n    .enum(['text-generation', 'chat', 'completion', 'embedding', 'classification', 'all'])\n    .optional()\n    .default('all'),\n  maxResults: z.number().min(1).max(100).optional().default(20),\n});\n\nconst _ModelConfigurationSchema = z.object({\n  modelId: z.string().min(1, 'Model ID is required'),\n  provider: z.string().min(1, 'Provider is required'),\n  configuration: z.record(z.any()),\n});\n\nconst ModelComparisonSchema = z.object({\n  modelIds: z.array(z.string()).min(2, 'At least 2 models required for comparison'),\n  criteria: z\n    .array(z.enum(['cost', 'speed', 'quality', 'capabilities']))\n    .optional()\n    .default(['cost', 'speed', 'quality']),\n});\n\n// Model database (in a real implementation, this would be fetched from APIs or databases)\nconst AI_MODELS_DATABASE = {\n  openai: [\n    {\n      id: 'gpt-4-turbo',\n      name: 'GPT-4 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 128000,\n      costPer1kTokens: { input: 0.01, output: 0.03 },\n      speed: 'fast',\n      quality: 'excellent',\n      description: 'Most capable GPT-4 model with 128k context window',\n    },\n    {\n      id: 'gpt-3.5-turbo',\n      name: 'GPT-3.5 Turbo',\n      provider: 'openai',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 16385,\n      costPer1kTokens: { input: 0.0015, output: 0.002 },\n      speed: 'very-fast',\n      quality: 'good',\n      description: 'Fast and efficient model for most tasks',\n    },\n  ],\n  anthropic: [\n    {\n      id: 'claude-3-opus',\n      name: 'Claude 3 Opus',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'analysis'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.015, output: 0.075 },\n      speed: 'medium',\n      quality: 'excellent',\n      description: 'Most powerful Claude model with exceptional reasoning',\n    },\n    {\n      id: 'claude-3-sonnet',\n      name: 'Claude 3 Sonnet',\n      provider: 'anthropic',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 200000,\n      costPer1kTokens: { input: 0.003, output: 0.015 },\n      speed: 'fast',\n      quality: 'very-good',\n      description: 'Balanced model with good performance and cost efficiency',\n    },\n  ],\n  google: [\n    {\n      id: 'gemini-pro',\n      name: 'Gemini Pro',\n      provider: 'google',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion', 'multimodal'],\n      maxTokens: 32768,\n      costPer1kTokens: { input: 0.00025, output: 0.0005 },\n      speed: 'fast',\n      quality: 'good',\n      description: \"Google's multimodal AI model\",\n    },\n  ],\n  local: [\n    {\n      id: 'llama-2-7b',\n      name: 'Llama 2 7B',\n      provider: 'local',\n      type: 'chat',\n      capabilities: ['text-generation', 'chat', 'completion'],\n      maxTokens: 4096,\n      costPer1kTokens: { input: 0, output: 0 },\n      speed: 'medium',\n      quality: 'good',\n      description: 'Open-source model that can run locally',\n    },\n  ],\n};\n\n// Tool registration function for AI model management tools\nexport function createAIModelsTools(getClient: () => N8nClient | null, server: any) {\n  // List available AI models\n  server.addTool({\n    name: 'list-ai-models',\n    description:\n      'List available AI models with filtering by provider, capability, and search terms',\n    parameters: ModelSearchSchema,\n    annotations: {\n      title: 'List AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelSearchSchema>) => {\n      try {\n        let allModels: any[] = [];\n\n        // Collect models from all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          if (args.provider === 'all' || args.provider === provider) {\n            allModels.push(...models);\n          }\n        });\n\n        // Filter by capability\n        if (args.capability !== 'all') {\n          allModels = allModels.filter(model => model.capabilities.includes(args.capability));\n        }\n\n        // Filter by search query\n        if (args.query) {\n          const query = args.query.toLowerCase();\n          allModels = allModels.filter(\n            model =>\n              model.name.toLowerCase().includes(query) ||\n              model.id.toLowerCase().includes(query) ||\n              model.description.toLowerCase().includes(query) ||\n              model.provider.toLowerCase().includes(query)\n          );\n        }\n\n        // Limit results\n        allModels = allModels.slice(0, args.maxResults);\n\n        if (allModels.length === 0) {\n          return (\n            `No AI models found matching your criteria:\\n` +\n            `- Provider: ${args.provider}\\n` +\n            `- Capability: ${args.capability}\\n` +\n            `- Query: ${args.query || 'None'}\\n\\n` +\n            `Try broadening your search criteria.`\n          );\n        }\n\n        let result = `Found ${allModels.length} AI model(s):\\n\\n`;\n\n        allModels.forEach((model, index) => {\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n\n          result += `**${index + 1}. ${model.name}** (${model.id})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Type: ${model.type}\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Speed: ${model.speed}\\n`;\n          result += `   - Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens (input/output)\\n`;\n          result += `   - Capabilities: ${model.capabilities.join(', ')}\\n`;\n          result += `   - Description: ${model.description}\\n\\n`;\n        });\n\n        result += `**Usage:** Use the model ID (e.g., \"${allModels[0].id}\") when configuring AI nodes in n8n workflows.`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to list AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get detailed model information\n  server.addTool({\n    name: 'get-ai-model-info',\n    description:\n      'Get detailed information about a specific AI model including capabilities, pricing, and configuration options',\n    parameters: z.object({\n      modelId: z.string().min(1, 'Model ID is required'),\n    }),\n    annotations: {\n      title: 'Get AI Model Info',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { modelId: string }) => {\n      try {\n        let foundModel: any = null;\n\n        // Search for the model across all providers\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          const model = models.find(m => m.id === args.modelId);\n          if (model) {\n            foundModel = model;\n          }\n        });\n\n        if (!foundModel) {\n          return (\n            `Model \"${args.modelId}\" not found.\\n\\n` +\n            `Use the \"list-ai-models\" tool to see available models.`\n          );\n        }\n\n        const model = foundModel;\n        const inputCost = model.costPer1kTokens.input;\n        const outputCost = model.costPer1kTokens.output;\n\n        // Calculate cost examples\n        const exampleCosts = {\n          smallRequest: (1000 * inputCost + 500 * outputCost).toFixed(4),\n          mediumRequest: (5000 * inputCost + 2000 * outputCost).toFixed(4),\n          largeRequest: (20000 * inputCost + 5000 * outputCost).toFixed(4),\n        };\n\n        return (\n          `**${model.name}** (${model.id})\\n\\n` +\n          `**Basic Information:**\\n` +\n          `- Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n` +\n          `- Model Type: ${model.type}\\n` +\n          `- Max Context: ${model.maxTokens.toLocaleString()} tokens\\n` +\n          `- Speed Rating: ${model.speed}\\n` +\n          `- Quality Rating: ${model.quality}\\n\\n` +\n          `**Capabilities:**\\n` +\n          model.capabilities\n            .map(\n              (cap: string) => `- ${cap.charAt(0).toUpperCase() + cap.slice(1).replace('-', ' ')}`\n            )\n            .join('\\n') +\n          '\\n\\n' +\n          `**Pricing:**\\n` +\n          `- Input: $${inputCost} per 1,000 tokens\\n` +\n          `- Output: $${outputCost} per 1,000 tokens\\n\\n` +\n          `**Cost Examples:**\\n` +\n          `- Small request (1k input, 500 output): $${exampleCosts.smallRequest}\\n` +\n          `- Medium request (5k input, 2k output): $${exampleCosts.mediumRequest}\\n` +\n          `- Large request (20k input, 5k output): $${exampleCosts.largeRequest}\\n\\n` +\n          `**Description:**\\n${model.description}\\n\\n` +\n          `**Configuration Example for n8n:**\\n\\`\\`\\`json\\n` +\n          `{\\n` +\n          `  \"model\": \"${model.id}\",\\n` +\n          `  \"temperature\": 0.7,\\n` +\n          `  \"maxTokens\": ${Math.min(4000, model.maxTokens)},\\n` +\n          `  \"provider\": \"${model.provider}\"\\n` +\n          `}\\n\\`\\`\\`\\n\\n` +\n          `**Use Case Recommendations:**\\n` +\n          (model.quality === 'excellent' ? '- Complex reasoning and analysis tasks\\n' : '') +\n          (model.speed === 'very-fast' || model.speed === 'fast'\n            ? '- Real-time applications\\n'\n            : '') +\n          (inputCost < 0.005 ? '- High-volume processing\\n' : '') +\n          (model.maxTokens > 50000 ? '- Long document processing\\n' : '') +\n          (model.capabilities.includes('multimodal') ? '- Image and text processing\\n' : '')\n        );\n      } catch (error: any) {\n        throw new UserError(`Failed to get model information: ${error.message}`);\n      }\n    },\n  });\n\n  // Compare AI models\n  server.addTool({\n    name: 'compare-ai-models',\n    description:\n      'Compare multiple AI models across different criteria like cost, speed, quality, and capabilities',\n    parameters: ModelComparisonSchema,\n    annotations: {\n      title: 'Compare AI Models',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof ModelComparisonSchema>) => {\n      try {\n        const models: any[] = [];\n\n        // Find all requested models\n        args.modelIds.forEach(modelId => {\n          let foundModel: any = null;\n          Object.entries(AI_MODELS_DATABASE).forEach(([provider, providerModels]) => {\n            const model = providerModels.find(m => m.id === modelId);\n            if (model) {\n              foundModel = model;\n            }\n          });\n\n          if (foundModel) {\n            models.push(foundModel);\n          }\n        });\n\n        if (models.length < 2) {\n          return (\n            `Found only ${models.length} model(s) out of ${args.modelIds.length} requested.\\n\\n` +\n            `Missing models: ${args.modelIds.filter(id => !models.some(m => m.id === id)).join(', ')}\\n\\n` +\n            `Use \"list-ai-models\" to see available models.`\n          );\n        }\n\n        let result = `**AI Model Comparison** (${models.length} models)\\n\\n`;\n\n        // Create comparison table\n        result += `| Model | Provider | Type | Max Tokens | Speed | Quality |\\n`;\n        result += `|-------|----------|------|------------|--------|----------|\\n`;\n        models.forEach(model => {\n          result += `| ${model.name} | ${model.provider} | ${model.type} | ${model.maxTokens.toLocaleString()} | ${model.speed} | ${model.quality} |\\n`;\n        });\n        result += '\\n';\n\n        // Cost comparison\n        if (args.criteria.includes('cost')) {\n          result += `**Cost Comparison (per 1k tokens):**\\n`;\n          models.forEach(model => {\n            const inputCost = model.costPer1kTokens.input;\n            const outputCost = model.costPer1kTokens.output;\n            result += `- **${model.name}**: $${inputCost} input, $${outputCost} output\\n`;\n          });\n\n          // Find most cost-effective\n          const cheapestInput = models.reduce((min, model) =>\n            model.costPer1kTokens.input < min.costPer1kTokens.input ? model : min\n          );\n          const cheapestOutput = models.reduce((min, model) =>\n            model.costPer1kTokens.output < min.costPer1kTokens.output ? model : min\n          );\n\n          result += `\\n💰 **Most Cost-Effective:**\\n`;\n          result += `- Input: ${cheapestInput.name} ($${cheapestInput.costPer1kTokens.input})\\n`;\n          result += `- Output: ${cheapestOutput.name} ($${cheapestOutput.costPer1kTokens.output})\\n\\n`;\n        }\n\n        // Speed comparison\n        if (args.criteria.includes('speed')) {\n          const speedRanking = {\n            'very-fast': 5,\n            fast: 4,\n            medium: 3,\n            slow: 2,\n            'very-slow': 1,\n          };\n\n          const sortedBySpeed = models.sort(\n            (a, b) =>\n              (speedRanking[b.speed as keyof typeof speedRanking] || 3) -\n              (speedRanking[a.speed as keyof typeof speedRanking] || 3)\n          );\n\n          result += `**Speed Ranking:**\\n`;\n          sortedBySpeed.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.speed}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Quality comparison\n        if (args.criteria.includes('quality')) {\n          const qualityRanking = {\n            excellent: 5,\n            'very-good': 4,\n            good: 3,\n            fair: 2,\n            poor: 1,\n          };\n\n          const sortedByQuality = models.sort(\n            (a, b) =>\n              (qualityRanking[b.quality as keyof typeof qualityRanking] || 3) -\n              (qualityRanking[a.quality as keyof typeof qualityRanking] || 3)\n          );\n\n          result += `**Quality Ranking:**\\n`;\n          sortedByQuality.forEach((model, index) => {\n            result += `${index + 1}. **${model.name}**: ${model.quality}\\n`;\n          });\n          result += '\\n';\n        }\n\n        // Capabilities comparison\n        if (args.criteria.includes('capabilities')) {\n          result += `**Capabilities Comparison:**\\n`;\n          const allCapabilities = [...new Set(models.flatMap(m => m.capabilities))];\n\n          allCapabilities.forEach(capability => {\n            const modelsWithCapability = models.filter(m => m.capabilities.includes(capability));\n            result += `- **${capability.charAt(0).toUpperCase() + capability.slice(1).replace('-', ' ')}**: `;\n            result += modelsWithCapability.map(m => m.name).join(', ') + '\\n';\n          });\n          result += '\\n';\n        }\n\n        // Recommendations\n        result += `**Recommendations:**\\n`;\n        const cheapest = models.reduce((min, model) =>\n          model.costPer1kTokens.input + model.costPer1kTokens.output <\n          min.costPer1kTokens.input + min.costPer1kTokens.output\n            ? model\n            : min\n        );\n        const fastest = models.reduce((max, model) => {\n          const speedValue = { 'very-fast': 5, fast: 4, medium: 3, slow: 2, 'very-slow': 1 };\n          return (speedValue[model.speed as keyof typeof speedValue] || 3) >\n            (speedValue[max.speed as keyof typeof speedValue] || 3)\n            ? model\n            : max;\n        });\n        const highest_quality = models.reduce((max, model) => {\n          const qualityValue = { excellent: 5, 'very-good': 4, good: 3, fair: 2, poor: 1 };\n          return (qualityValue[model.quality as keyof typeof qualityValue] || 3) >\n            (qualityValue[max.quality as keyof typeof qualityValue] || 3)\n            ? model\n            : max;\n        });\n\n        result += `- **For budget-conscious projects**: ${cheapest.name}\\n`;\n        result += `- **For real-time applications**: ${fastest.name}\\n`;\n        result += `- **For complex reasoning**: ${highest_quality.name}\\n`;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to compare AI models: ${error.message}`);\n      }\n    },\n  });\n\n  // Get model recommendations\n  server.addTool({\n    name: 'recommend-ai-model',\n    description:\n      'Get AI model recommendations based on use case, budget, and performance requirements',\n    parameters: z.object({\n      useCase: z.enum([\n        'chatbot',\n        'content-generation',\n        'code-generation',\n        'data-analysis',\n        'translation',\n        'summarization',\n        'classification',\n        'general-purpose',\n      ]),\n      budget: z.enum(['low', 'medium', 'high', 'unlimited']).optional().default('medium'),\n      priority: z.enum(['cost', 'speed', 'quality', 'balanced']).optional().default('balanced'),\n      maxTokens: z.number().min(1000).max(200000).optional(),\n    }),\n    annotations: {\n      title: 'Recommend AI Model',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: {\n      useCase: string;\n      budget?: string;\n      priority?: string;\n      maxTokens?: number;\n    }) => {\n      try {\n        let allModels: any[] = [];\n        Object.entries(AI_MODELS_DATABASE).forEach(([provider, models]) => {\n          allModels.push(...models);\n        });\n\n        // Filter by token requirements\n        if (args.maxTokens) {\n          allModels = allModels.filter(model => model.maxTokens >= args.maxTokens!);\n        }\n\n        // Filter by budget\n        if (args.budget !== 'unlimited') {\n          const budgetLimits = {\n            low: 0.005, // max $0.005 per 1k tokens\n            medium: 0.02, // max $0.02 per 1k tokens\n            high: 0.1, // max $0.1 per 1k tokens\n          };\n\n          const limit = budgetLimits[args.budget as keyof typeof budgetLimits] || 0.02;\n          allModels = allModels.filter(\n            model =>\n              model.costPer1kTokens.input <= limit && model.costPer1kTokens.output <= limit * 2\n          );\n        }\n\n        // Score models based on priority\n        const scoredModels = allModels.map(model => {\n          let score = 0;\n\n          // Use case specific scoring\n          switch (args.useCase) {\n            case 'chatbot':\n              if (model.capabilities.includes('chat')) score += 30;\n              if (model.speed === 'fast' || model.speed === 'very-fast') score += 20;\n              break;\n            case 'content-generation':\n              if (model.quality === 'excellent') score += 30;\n              if (model.maxTokens > 32000) score += 20;\n              break;\n            case 'code-generation':\n              if (model.capabilities.includes('completion')) score += 30;\n              if (model.quality === 'excellent') score += 20;\n              break;\n            case 'data-analysis':\n              if (model.quality === 'excellent') score += 40;\n              if (model.maxTokens > 50000) score += 10;\n              break;\n            default:\n              score += 20; // Base score for general use\n          }\n\n          // Priority-based scoring\n          switch (args.priority) {\n            case 'cost': {\n              const totalCost = model.costPer1kTokens.input + model.costPer1kTokens.output;\n              score += Math.max(0, 50 - totalCost * 1000); // Lower cost = higher score\n              break;\n            }\n            case 'speed': {\n              const speedScores = {\n                'very-fast': 50,\n                fast: 40,\n                medium: 30,\n                slow: 20,\n                'very-slow': 10,\n              };\n              score += speedScores[model.speed as keyof typeof speedScores] || 25;\n              break;\n            }\n            case 'quality': {\n              const qualityScores = {\n                excellent: 50,\n                'very-good': 40,\n                good: 30,\n                fair: 20,\n                poor: 10,\n              };\n              score += qualityScores[model.quality as keyof typeof qualityScores] || 25;\n              break;\n            }\n            case 'balanced': {\n              // Balanced scoring\n              const balancedSpeedScores = {\n                'very-fast': 20,\n                fast: 18,\n                medium: 15,\n                slow: 10,\n                'very-slow': 5,\n              };\n              const balancedQualityScores = {\n                excellent: 20,\n                'very-good': 18,\n                good: 15,\n                fair: 10,\n                poor: 5,\n              };\n              const balancedCostScore = Math.max(\n                0,\n                10 - (model.costPer1kTokens.input + model.costPer1kTokens.output) * 100\n              );\n              score +=\n                (balancedSpeedScores[model.speed as keyof typeof balancedSpeedScores] || 10) +\n                (balancedQualityScores[model.quality as keyof typeof balancedQualityScores] || 10) +\n                balancedCostScore;\n              break;\n            }\n          }\n\n          return { ...model, score };\n        });\n\n        // Sort by score and take top 3\n        const recommendations = scoredModels.sort((a, b) => b.score - a.score).slice(0, 3);\n\n        if (recommendations.length === 0) {\n          return (\n            `No AI models found matching your criteria:\\n` +\n            `- Use Case: ${args.useCase}\\n` +\n            `- Budget: ${args.budget}\\n` +\n            `- Priority: ${args.priority}\\n` +\n            `- Max Tokens: ${args.maxTokens || 'No limit'}\\n\\n` +\n            `Try adjusting your requirements or budget.`\n          );\n        }\n\n        let result = `**AI Model Recommendations for ${args.useCase}**\\n\\n`;\n        result += `**Your Requirements:**\\n`;\n        result += `- Use Case: ${args.useCase}\\n`;\n        result += `- Budget: ${args.budget}\\n`;\n        result += `- Priority: ${args.priority}\\n`;\n        result += `- Max Tokens: ${args.maxTokens?.toLocaleString() || 'No specific requirement'}\\n\\n`;\n\n        recommendations.forEach((model, index) => {\n          const ranking = ['🥇', '🥈', '🥉'][index] || `${index + 1}.`;\n          const inputCost = model.costPer1kTokens.input;\n          const outputCost = model.costPer1kTokens.output;\n\n          result += `${ranking} **${model.name}** (Score: ${model.score.toFixed(0)})\\n`;\n          result += `   - Provider: ${model.provider.charAt(0).toUpperCase() + model.provider.slice(1)}\\n`;\n          result += `   - Speed: ${model.speed}, Quality: ${model.quality}\\n`;\n          result += `   - Cost: $${inputCost}/$${outputCost} per 1k tokens\\n`;\n          result += `   - Max Tokens: ${model.maxTokens.toLocaleString()}\\n`;\n          result += `   - Best For: ${model.description}\\n\\n`;\n        });\n\n        const topModel = recommendations[0];\n        result += `**Quick Start with ${topModel.name}:**\\n`;\n        result += `\\`\\`\\`json\\n`;\n        result += `{\\n`;\n        result += `  \"model\": \"${topModel.id}\",\\n`;\n        result += `  \"temperature\": 0.7,\\n`;\n        result += `  \"maxTokens\": ${Math.min(4000, topModel.maxTokens)}\\n`;\n        result += `}\\n`;\n        result += `\\`\\`\\``;\n\n        return result;\n      } catch (error: any) {\n        throw new UserError(`Failed to get model recommendations: ${error.message}`);\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}