{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/transport/transportConfig.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/transport/transportConfig.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport {\n  TransportConfig,\n  TransportConfigSchema,\n  DEFAULT_CONFIGS,\n  detectTransportConfig,\n  validateTransportConfig,\n  getServerUrl,\n  ENV_CONFIG,\n  parseConfigFromEnv,\n} from '../../../src/transport/transportConfig';\n\ndescribe('Transport Configuration', () => {\n  let originalEnv: Record<string, string | undefined>;\n\n  beforeEach(() => {\n    // Save original environment\n    originalEnv = { ...process.env };\n\n    // Clear environment variables\n    Object.values(ENV_CONFIG).forEach(envVar => {\n      delete process.env[envVar];\n    });\n    delete process.env.NODE_ENV;\n    delete process.env.PORT;\n    delete process.env.RAILWAY_ENVIRONMENT;\n    delete process.env.VERCEL;\n    delete process.env.RENDER;\n  });\n\n  afterEach(() => {\n    // Restore original environment\n    process.env = originalEnv;\n  });\n\n  describe('TransportConfigSchema', () => {\n    it('should validate minimal stdio configuration', () => {\n      const config = { type: 'stdio' as const };\n      const result = TransportConfigSchema.parse(config);\n\n      expect(result.type).toBe('stdio');\n      expect(result.sse).toBeUndefined();\n    });\n\n    it('should validate complete SSE configuration', () => {\n      const config = {\n        type: 'sse' as const,\n        sse: {\n          port: 8080,\n          endpoint: '/sse',\n          host: 'localhost',\n          cors: {\n            enabled: true,\n            origins: ['*'],\n            credentials: false,\n          },\n          healthCheck: {\n            enabled: true,\n            endpoint: '/health',\n          },\n        },\n      };\n\n      const result = TransportConfigSchema.parse(config);\n      expect(result).toEqual(config);\n    });\n\n    it('should apply default values for SSE configuration', () => {\n      const config = { type: 'sse' as const, sse: {} };\n      const result = TransportConfigSchema.parse(config);\n\n      expect(result.sse?.port).toBe(8080);\n      expect(result.sse?.endpoint).toBe('/sse');\n      expect(result.sse?.host).toBe('localhost');\n      expect(result.sse?.cors.enabled).toBe(true);\n      expect(result.sse?.cors.origins).toEqual(['*']);\n      expect(result.sse?.cors.credentials).toBe(false);\n      expect(result.sse?.healthCheck.enabled).toBe(true);\n      expect(result.sse?.healthCheck.endpoint).toBe('/health');\n    });\n\n    it('should default to stdio transport type', () => {\n      const config = {};\n      const result = TransportConfigSchema.parse(config);\n\n      expect(result.type).toBe('stdio');\n    });\n\n    it('should reject invalid transport type', () => {\n      const config = { type: 'invalid' };\n\n      expect(() => TransportConfigSchema.parse(config)).toThrow();\n    });\n\n    it('should reject invalid port numbers', () => {\n      const config = {\n        type: 'sse' as const,\n        sse: { port: 100 }, // Below minimum\n      };\n\n      expect(() => TransportConfigSchema.parse(config)).toThrow();\n\n      const config2 = {\n        type: 'sse' as const,\n        sse: { port: 70000 }, // Above maximum\n      };\n\n      expect(() => TransportConfigSchema.parse(config2)).toThrow();\n    });\n\n    it('should validate custom CORS configuration', () => {\n      const config = {\n        type: 'sse' as const,\n        sse: {\n          cors: {\n            enabled: false,\n            origins: ['https://example.com', 'https://test.com'],\n            credentials: true,\n          },\n        },\n      };\n\n      const result = TransportConfigSchema.parse(config);\n      expect(result.sse?.cors.enabled).toBe(false);\n      expect(result.sse?.cors.origins).toEqual(['https://example.com', 'https://test.com']);\n      expect(result.sse?.cors.credentials).toBe(true);\n    });\n\n    it('should validate custom health check configuration', () => {\n      const config = {\n        type: 'sse' as const,\n        sse: {\n          healthCheck: {\n            enabled: false,\n            endpoint: '/custom-health',\n          },\n        },\n      };\n\n      const result = TransportConfigSchema.parse(config);\n      expect(result.sse?.healthCheck.enabled).toBe(false);\n      expect(result.sse?.healthCheck.endpoint).toBe('/custom-health');\n    });\n\n    it('should handle partial SSE configuration with defaults', () => {\n      const config = {\n        type: 'sse' as const,\n        sse: {\n          port: 3000,\n          host: '0.0.0.0',\n        },\n      };\n\n      const result = TransportConfigSchema.parse(config);\n      expect(result.sse?.port).toBe(3000);\n      expect(result.sse?.host).toBe('0.0.0.0');\n      expect(result.sse?.endpoint).toBe('/sse'); // Default\n      expect(result.sse?.cors.enabled).toBe(true); // Default\n    });\n  });\n\n  describe('DEFAULT_CONFIGS', () => {\n    it('should provide correct development configuration', () => {\n      const config = DEFAULT_CONFIGS.development;\n\n      expect(config.type).toBe('stdio');\n      expect('sse' in config ? config.sse : undefined).toBeUndefined();\n    });\n\n    it('should provide correct production configuration', () => {\n      const config = DEFAULT_CONFIGS.production;\n\n      expect(config.type).toBe('sse');\n      expect(config.sse?.port).toBe(8080);\n      expect(config.sse?.endpoint).toBe('/sse');\n      expect(config.sse?.host).toBe('0.0.0.0');\n      expect(config.sse?.cors.enabled).toBe(true);\n      expect(config.sse?.cors.origins).toEqual(['*']);\n      expect(config.sse?.cors.credentials).toBe(false);\n      expect(config.sse?.healthCheck.enabled).toBe(true);\n      expect(config.sse?.healthCheck.endpoint).toBe('/health');\n    });\n\n    it('should provide correct web configuration', () => {\n      const config = DEFAULT_CONFIGS.web;\n\n      expect(config.type).toBe('sse');\n      expect(config.sse?.port).toBe(3000); // Default from process.env.PORT fallback\n      expect(config.sse?.endpoint).toBe('/sse');\n      expect(config.sse?.host).toBe('0.0.0.0');\n      expect(config.sse?.cors.enabled).toBe(true);\n      expect(config.sse?.cors.origins).toEqual(['*']);\n      expect(config.sse?.cors.credentials).toBe(true);\n      expect(config.sse?.healthCheck.enabled).toBe(true);\n      expect(config.sse?.healthCheck.endpoint).toBe('/health');\n    });\n\n    it('should use environment PORT variable in web configuration', async () => {\n      process.env.PORT = '5000';\n\n      // Need to re-import the module to pick up the new environment variable\n      jest.resetModules();\n      const { DEFAULT_CONFIGS: newConfigs } = await import(\n        '../../../src/transport/transportConfig'\n      );\n\n      expect(newConfigs.web.sse.port).toBe(5000);\n    });\n\n    it('should use environment CORS_ORIGINS in web configuration', async () => {\n      process.env.CORS_ORIGINS = 'https://example.com,https://test.com';\n\n      jest.resetModules();\n      const { DEFAULT_CONFIGS: newConfigs } = await import(\n        '../../../src/transport/transportConfig'\n      );\n\n      expect(newConfigs.web.sse.cors.origins).toEqual(['https://example.com', 'https://test.com']);\n    });\n  });\n\n  describe('detectTransportConfig', () => {\n    it('should return stdio config for explicit N8N_MCP_TRANSPORT=stdio', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'stdio';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('stdio');\n    });\n\n    it('should return SSE config for explicit N8N_MCP_TRANSPORT=sse', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'sse';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n    });\n\n    it('should return web config for NODE_ENV=production', () => {\n      process.env.NODE_ENV = 'production';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n      expect(config).toEqual(DEFAULT_CONFIGS.web);\n    });\n\n    it('should return web config when PORT is set', () => {\n      process.env.PORT = '3000';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n      expect(config).toEqual(DEFAULT_CONFIGS.web);\n    });\n\n    it('should return web config for Railway environment', () => {\n      process.env.RAILWAY_ENVIRONMENT = 'production';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n      expect(config).toEqual(DEFAULT_CONFIGS.web);\n    });\n\n    it('should return web config for Vercel environment', () => {\n      process.env.VERCEL = '1';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n      expect(config).toEqual(DEFAULT_CONFIGS.web);\n    });\n\n    it('should return web config for Render environment', () => {\n      process.env.RENDER = 'true';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('sse');\n      expect(config).toEqual(DEFAULT_CONFIGS.web);\n    });\n\n    it('should default to development config for local environment', () => {\n      // No environment variables set\n      const config = detectTransportConfig();\n      expect(config.type).toBe('stdio');\n      expect(config).toEqual(DEFAULT_CONFIGS.development);\n    });\n\n    it('should prioritize explicit transport type over environment detection', () => {\n      process.env.NODE_ENV = 'production';\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'stdio';\n\n      const config = detectTransportConfig();\n      expect(config.type).toBe('stdio');\n    });\n  });\n\n  describe('validateTransportConfig', () => {\n    it('should validate and return correct stdio configuration', () => {\n      const input = { type: 'stdio' };\n      const result = validateTransportConfig(input);\n\n      expect(result.type).toBe('stdio');\n      expect(result.sse).toBeUndefined();\n    });\n\n    it('should validate and return correct SSE configuration', () => {\n      const input = {\n        type: 'sse',\n        sse: {\n          port: 8080,\n          endpoint: '/sse',\n          host: 'localhost',\n        },\n      };\n\n      const result = validateTransportConfig(input);\n      expect(result.type).toBe('sse');\n      expect(result.sse?.port).toBe(8080);\n      expect(result.sse?.endpoint).toBe('/sse');\n      expect(result.sse?.host).toBe('localhost');\n    });\n\n    it('should throw error for invalid configuration', () => {\n      const input = { type: 'invalid' };\n\n      expect(() => validateTransportConfig(input)).toThrow();\n    });\n\n    it('should throw error for invalid port range', () => {\n      const input = {\n        type: 'sse',\n        sse: { port: 100 },\n      };\n\n      expect(() => validateTransportConfig(input)).toThrow();\n    });\n\n    it('should apply defaults to partial configuration', () => {\n      const input = { type: 'sse', sse: { port: 3000 } };\n      const result = validateTransportConfig(input);\n\n      expect(result.sse?.port).toBe(3000);\n      expect(result.sse?.endpoint).toBe('/sse'); // Default\n      expect(result.sse?.host).toBe('localhost'); // Default\n    });\n  });\n\n  describe('getServerUrl', () => {\n    it('should return null for stdio configuration', () => {\n      const config: TransportConfig = { type: 'stdio' };\n      const url = getServerUrl(config);\n\n      expect(url).toBeNull();\n    });\n\n    it('should return correct HTTP URL for SSE configuration', () => {\n      const config: TransportConfig = {\n        type: 'sse',\n        sse: {\n          host: 'localhost',\n          port: 8080,\n          endpoint: '/sse',\n          cors: { enabled: true, origins: ['*'], credentials: false },\n          healthCheck: { enabled: true, endpoint: '/health' },\n        },\n      };\n\n      const url = getServerUrl(config);\n      expect(url).toBe('http://localhost:8080/sse');\n    });\n\n    it('should return correct HTTPS URL for port 443', () => {\n      const config: TransportConfig = {\n        type: 'sse',\n        sse: {\n          host: 'example.com',\n          port: 443,\n          endpoint: '/sse',\n          cors: { enabled: true, origins: ['*'], credentials: false },\n          healthCheck: { enabled: true, endpoint: '/health' },\n        },\n      };\n\n      const url = getServerUrl(config);\n      expect(url).toBe('https://example.com:443/sse');\n    });\n\n    it('should handle custom endpoints', () => {\n      const config: TransportConfig = {\n        type: 'sse',\n        sse: {\n          host: '0.0.0.0',\n          port: 3000,\n          endpoint: '/api/mcp',\n          cors: { enabled: true, origins: ['*'], credentials: false },\n          healthCheck: { enabled: true, endpoint: '/health' },\n        },\n      };\n\n      const url = getServerUrl(config);\n      expect(url).toBe('http://0.0.0.0:3000/api/mcp');\n    });\n\n    it('should return null when SSE config is missing', () => {\n      const config: TransportConfig = { type: 'sse' };\n      const url = getServerUrl(config);\n\n      expect(url).toBeNull();\n    });\n  });\n\n  describe('parseConfigFromEnv', () => {\n    it('should return empty config when no environment variables are set', () => {\n      const config = parseConfigFromEnv();\n      expect(config).toEqual({});\n    });\n\n    it('should parse transport type from environment', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'sse';\n\n      const config = parseConfigFromEnv();\n      expect(config.type).toBe('sse');\n    });\n\n    it('should parse SSE port from environment', () => {\n      process.env[ENV_CONFIG.SSE_PORT] = '9000';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.port).toBe(9000);\n    });\n\n    it('should parse SSE host from environment', () => {\n      process.env[ENV_CONFIG.SSE_HOST] = '0.0.0.0';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.host).toBe('0.0.0.0');\n    });\n\n    it('should parse SSE endpoint from environment', () => {\n      process.env[ENV_CONFIG.SSE_ENDPOINT] = '/api/mcp';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.endpoint).toBe('/api/mcp');\n    });\n\n    it('should parse CORS origins from environment', () => {\n      process.env[ENV_CONFIG.CORS_ORIGINS] = 'https://example.com,https://test.com';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.cors.enabled).toBe(true);\n      expect(config.sse?.cors.origins).toEqual(['https://example.com', 'https://test.com']);\n    });\n\n    it('should parse CORS credentials from environment', () => {\n      process.env[ENV_CONFIG.CORS_CREDENTIALS] = 'true';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.cors.credentials).toBe(true);\n    });\n\n    it('should parse health check enabled from environment', () => {\n      process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] = 'false';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.healthCheck.enabled).toBe(false);\n    });\n\n    it('should parse health check endpoint from environment', () => {\n      process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT] = '/status';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.healthCheck.endpoint).toBe('/status');\n    });\n\n    it('should create SSE config when SSE port is set', () => {\n      process.env[ENV_CONFIG.SSE_PORT] = '3000';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse).toBeDefined();\n      expect(config.sse?.port).toBe(3000);\n      expect(config.sse?.host).toBe('localhost'); // Default\n      expect(config.sse?.endpoint).toBe('/sse'); // Default\n    });\n\n    it('should handle complete environment configuration', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'sse';\n      process.env[ENV_CONFIG.SSE_PORT] = '4000';\n      process.env[ENV_CONFIG.SSE_HOST] = '0.0.0.0';\n      process.env[ENV_CONFIG.SSE_ENDPOINT] = '/mcp';\n      process.env[ENV_CONFIG.CORS_ORIGINS] = 'https://app.com';\n      process.env[ENV_CONFIG.CORS_CREDENTIALS] = 'true';\n      process.env[ENV_CONFIG.HEALTH_CHECK_ENABLED] = 'true';\n      process.env[ENV_CONFIG.HEALTH_CHECK_ENDPOINT] = '/health-check';\n\n      const config = parseConfigFromEnv();\n\n      expect(config.type).toBe('sse');\n      expect(config.sse?.port).toBe(4000);\n      expect(config.sse?.host).toBe('0.0.0.0');\n      expect(config.sse?.endpoint).toBe('/mcp');\n      expect(config.sse?.cors.enabled).toBe(true);\n      expect(config.sse?.cors.origins).toEqual(['https://app.com']);\n      expect(config.sse?.cors.credentials).toBe(true);\n      expect(config.sse?.healthCheck.enabled).toBe(true);\n      expect(config.sse?.healthCheck.endpoint).toBe('/health-check');\n    });\n\n    it('should handle invalid port number gracefully', () => {\n      process.env[ENV_CONFIG.SSE_PORT] = 'invalid';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.port).toBeNaN();\n    });\n\n    it('should handle CORS credentials with non-true values', () => {\n      process.env[ENV_CONFIG.CORS_CREDENTIALS] = 'false';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.cors.credentials).toBe(false);\n\n      process.env[ENV_CONFIG.CORS_CREDENTIALS] = 'invalid';\n      const config2 = parseConfigFromEnv();\n      expect(config2.sse?.cors.credentials).toBe(false);\n    });\n  });\n\n  describe('ENV_CONFIG constants', () => {\n    it('should have correct environment variable names', () => {\n      expect(ENV_CONFIG.TRANSPORT_TYPE).toBe('N8N_MCP_TRANSPORT');\n      expect(ENV_CONFIG.SSE_PORT).toBe('N8N_MCP_SSE_PORT');\n      expect(ENV_CONFIG.SSE_HOST).toBe('N8N_MCP_SSE_HOST');\n      expect(ENV_CONFIG.SSE_ENDPOINT).toBe('N8N_MCP_SSE_ENDPOINT');\n      expect(ENV_CONFIG.CORS_ORIGINS).toBe('N8N_MCP_CORS_ORIGINS');\n      expect(ENV_CONFIG.CORS_CREDENTIALS).toBe('N8N_MCP_CORS_CREDENTIALS');\n      expect(ENV_CONFIG.HEALTH_CHECK_ENABLED).toBe('N8N_MCP_HEALTH_CHECK_ENABLED');\n      expect(ENV_CONFIG.HEALTH_CHECK_ENDPOINT).toBe('N8N_MCP_HEALTH_CHECK_ENDPOINT');\n    });\n\n    it('should have all required environment variables defined', () => {\n      const expectedKeys = [\n        'TRANSPORT_TYPE',\n        'SSE_PORT',\n        'SSE_HOST',\n        'SSE_ENDPOINT',\n        'CORS_ORIGINS',\n        'CORS_CREDENTIALS',\n        'HEALTH_CHECK_ENABLED',\n        'HEALTH_CHECK_ENDPOINT',\n      ];\n\n      expectedKeys.forEach(key => {\n        expect(ENV_CONFIG).toHaveProperty(key);\n        expect(typeof ENV_CONFIG[key as keyof typeof ENV_CONFIG]).toBe('string');\n      });\n    });\n  });\n\n  describe('Integration Tests', () => {\n    it('should create valid configuration from environment and validate it', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'sse';\n      process.env[ENV_CONFIG.SSE_PORT] = '8080';\n      process.env[ENV_CONFIG.SSE_HOST] = 'localhost';\n\n      const envConfig = parseConfigFromEnv();\n      const validatedConfig = validateTransportConfig(envConfig);\n\n      expect(validatedConfig.type).toBe('sse');\n      expect(validatedConfig.sse?.port).toBe(8080);\n      expect(validatedConfig.sse?.host).toBe('localhost');\n    });\n\n    it('should detect configuration and get server URL', () => {\n      process.env[ENV_CONFIG.TRANSPORT_TYPE] = 'sse';\n\n      const config = detectTransportConfig();\n      const url = getServerUrl(config);\n\n      expect(url).toBeTruthy();\n      expect(typeof url).toBe('string');\n      expect(url).toMatch(/^https?:\\/\\//);\n    });\n\n    it('should handle full workflow from detection to URL generation', () => {\n      process.env.NODE_ENV = 'production';\n\n      const detectedConfig = detectTransportConfig();\n      const validatedConfig = validateTransportConfig(detectedConfig);\n      const serverUrl = getServerUrl(validatedConfig);\n\n      expect(validatedConfig.type).toBe('sse');\n      expect(serverUrl).toBe('http://0.0.0.0:3000/sse');\n    });\n  });\n\n  describe('Edge Cases and Error Handling', () => {\n    it('should handle null/undefined input to validateTransportConfig', () => {\n      expect(() => validateTransportConfig(null)).toThrow();\n      expect(() => validateTransportConfig(undefined)).toThrow();\n    });\n\n    it('should handle empty object to validateTransportConfig', () => {\n      const result = validateTransportConfig({});\n      expect(result.type).toBe('stdio'); // Default\n    });\n\n    it('should handle malformed SSE configuration', () => {\n      const config = {\n        type: 'sse',\n        sse: {\n          port: 'invalid',\n          endpoint: 123,\n          host: null,\n        },\n      };\n\n      expect(() => validateTransportConfig(config)).toThrow();\n    });\n\n    it('should handle missing SSE configuration for SSE type', () => {\n      const config = { type: 'sse' };\n      const result = validateTransportConfig(config);\n\n      expect(result.type).toBe('sse');\n      expect(result.sse).toBeUndefined();\n    });\n\n    it('should handle CORS origins parsing with empty string', () => {\n      process.env[ENV_CONFIG.CORS_ORIGINS] = '';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.cors.origins).toEqual(['']);\n    });\n\n    it('should handle CORS origins parsing with single origin', () => {\n      process.env[ENV_CONFIG.CORS_ORIGINS] = 'https://example.com';\n\n      const config = parseConfigFromEnv();\n      expect(config.sse?.cors.origins).toEqual(['https://example.com']);\n    });\n\n    it('should handle edge case port numbers', () => {\n      // Test minimum valid port\n      const config1 = { type: 'sse' as const, sse: { port: 1024 } };\n      expect(() => validateTransportConfig(config1)).not.toThrow();\n\n      // Test maximum valid port\n      const config2 = { type: 'sse' as const, sse: { port: 65535 } };\n      expect(() => validateTransportConfig(config2)).not.toThrow();\n\n      // Test below minimum\n      const config3 = { type: 'sse' as const, sse: { port: 1023 } };\n      expect(() => validateTransportConfig(config3)).toThrow();\n\n      // Test above maximum\n      const config4 = { type: 'sse' as const, sse: { port: 65536 } };\n      expect(() => validateTransportConfig(config4)).toThrow();\n    });\n  });\n});\n"],"version":3}