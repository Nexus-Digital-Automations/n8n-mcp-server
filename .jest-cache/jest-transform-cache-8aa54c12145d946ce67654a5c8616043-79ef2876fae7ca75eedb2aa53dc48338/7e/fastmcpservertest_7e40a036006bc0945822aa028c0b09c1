aabdfbfbbbde543a6e19ab825d741ba9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const fastmcp_1 = require("fastmcp");
(0, globals_1.describe)('FastMCP Server Integration', () => {
    let server;
    (0, globals_1.beforeAll)(async () => {
        // Using the mocked FastMCP from tests/__mocks__/fastmcp.js
        server = new fastmcp_1.FastMCP({
            name: 'test-n8n-mcp-server',
            version: '1.0.0',
            instructions: 'Test server for integration testing',
        });
    });
    (0, globals_1.afterAll)(async () => {
        // Clean up server resources if needed
        if (server) {
            // FastMCP doesn't have an explicit close method, but we can clean up
        }
    });
    (0, globals_1.it)('should create FastMCP server instance', () => {
        (0, globals_1.expect)(server).toBeInstanceOf(fastmcp_1.FastMCP);
    });
    (0, globals_1.it)('should be able to add tools', () => {
        const mockTool = {
            name: 'test-tool',
            description: 'A test tool',
            parameters: {},
            execute: globals_1.jest.fn(),
        };
        (0, globals_1.expect)(() => {
            server.addTool(mockTool);
        }).not.toThrow();
    });
    (0, globals_1.it)('should handle tool execution', async () => {
        const mockExecute = globals_1.jest.fn(() => Promise.resolve('execution result'));
        const mockTool = {
            name: 'test-execution-tool',
            description: 'A test tool for execution',
            parameters: {},
            execute: mockExecute,
        };
        server.addTool(mockTool);
        // Note: Direct tool execution testing may require more complex setup
        // depending on FastMCP's internal architecture
        (0, globals_1.expect)(mockTool.execute).toBeDefined();
        const result = await mockTool.execute({});
        (0, globals_1.expect)(result).toBe('execution result');
    });
    (0, globals_1.it)('should handle tool with parameters', async () => {
        const mockExecute = globals_1.jest.fn((args) => Promise.resolve(`Received: ${args.testParam}`));
        const mockTool = {
            name: 'test-params-tool',
            description: 'A test tool with parameters',
            parameters: {
                testParam: {
                    type: 'string',
                    description: 'A test parameter',
                },
            },
            execute: mockExecute,
        };
        server.addTool(mockTool);
        const result = await mockTool.execute({ testParam: 'test-value' });
        (0, globals_1.expect)(result).toBe('Received: test-value');
    });
    (0, globals_1.it)('should handle tool errors gracefully', async () => {
        const mockExecute = globals_1.jest.fn(() => Promise.reject(new Error('Test error')));
        const mockTool = {
            name: 'test-error-tool',
            description: 'A test tool that throws errors',
            parameters: {},
            execute: mockExecute,
        };
        server.addTool(mockTool);
        await (0, globals_1.expect)(mockTool.execute({})).rejects.toThrow('Test error');
    });
    (0, globals_1.describe)('Tool Registration Validation', () => {
        (0, globals_1.it)('should accept tools with basic properties', () => {
            // Our mock FastMCP doesn't enforce validation, so we test basic acceptance
            const mockTool = {
                name: 'test-tool-validation',
                description: 'Tool for validation testing',
                parameters: {},
                execute: globals_1.jest.fn(),
            };
            (0, globals_1.expect)(() => {
                server.addTool(mockTool);
            }).not.toThrow();
        });
        (0, globals_1.it)('should handle tool registration gracefully', () => {
            // Mock implementation accepts all tools without validation
            const mockTool = {
                name: 'another-test-tool',
                description: 'Another test tool',
                parameters: {},
                execute: globals_1.jest.fn(),
            };
            (0, globals_1.expect)(() => {
                server.addTool(mockTool);
            }).not.toThrow();
        });
    });
    (0, globals_1.describe)('Tool Annotations', () => {
        (0, globals_1.it)('should accept tool annotations', () => {
            const mockExecute = globals_1.jest.fn(() => Promise.resolve('annotated result'));
            const mockTool = {
                name: 'annotated-tool',
                description: 'A tool with annotations',
                parameters: {},
                annotations: {
                    title: 'Annotated Tool',
                    readOnlyHint: true,
                    destructiveHint: false,
                    idempotentHint: true,
                    openWorldHint: false,
                },
                execute: mockExecute,
            };
            (0, globals_1.expect)(() => {
                server.addTool(mockTool);
            }).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,