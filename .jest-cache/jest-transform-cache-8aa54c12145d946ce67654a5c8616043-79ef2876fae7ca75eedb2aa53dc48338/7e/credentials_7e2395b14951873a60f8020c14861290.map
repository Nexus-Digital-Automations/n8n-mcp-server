{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/credentials.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { N8nCredential, CreateCredentialRequest, PaginationOptions } from '../types/n8n.js';\n\n// Zod schemas for validation\nconst CredentialIdSchema = z.object({\n  credentialId: z.string().min(1, 'Credential ID is required'),\n});\n\nconst CredentialTypeSchema = z.object({\n  credentialType: z.string().min(1, 'Credential type is required'),\n});\n\nconst ListCredentialsSchema = z.object({\n  limit: z.number().min(1).max(100).optional(),\n  cursor: z.string().optional(),\n});\n\nconst CreateCredentialSchema = z.object({\n  name: z.string().min(1, 'Credential name is required'),\n  type: z.string().min(1, 'Credential type is required'),\n  data: z.record(z.unknown()).refine(data => Object.keys(data).length > 0, {\n    message: 'Credential data is required',\n  }),\n  projectId: z.string().optional(),\n});\n\n// Tool registration function\nexport function createCredentialTools(getClient: () => N8nClient | null, server: any) {\n  // List credentials tool\n  server.addTool({\n    name: 'list-credentials',\n    description:\n      'List all credentials in the n8n instance with pagination support. Sensitive data is not included',\n    parameters: ListCredentialsSchema,\n    annotations: {\n      title: 'List n8n Credentials',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof ListCredentialsSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: PaginationOptions = {};\n        if (args.limit) options.limit = args.limit;\n        if (args.cursor) options.cursor = args.cursor;\n\n        const response = await client.getCredentials(options);\n\n        if (response.data.length === 0) {\n          return 'No credentials found in the n8n instance.';\n        }\n\n        let result = `Found ${response.data.length} credential(s):\\n\\n`;\n\n        response.data.forEach((credential: N8nCredential, index: number) => {\n          result += `${index + 1}. **${credential.name}**\\n`;\n          result += `   - ID: ${credential.id}\\n`;\n          result += `   - Type: ${credential.type}\\n`;\n\n          if (credential.homeProject) {\n            result += `   - Project: ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n          }\n\n          if (credential.sharedWith && credential.sharedWith.length > 0) {\n            result += `   - Shared with: ${credential.sharedWith.length} user(s)\\n`;\n          }\n\n          if (credential.scopes && credential.scopes.length > 0) {\n            result += `   - Scopes: ${credential.scopes.join(', ')}\\n`;\n          }\n\n          if (credential.createdAt) {\n            result += `   - Created: ${new Date(credential.createdAt).toLocaleDateString()}\\n`;\n          }\n\n          if (credential.updatedAt) {\n            result += `   - Updated: ${new Date(credential.updatedAt).toLocaleDateString()}\\n`;\n          }\n\n          result += '\\n';\n        });\n\n        if (response.nextCursor) {\n          result += `\\n📄 Use cursor \"${response.nextCursor}\" to get the next page.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list credentials: ${error.message}`);\n        }\n        throw new UserError('Failed to list credentials with unknown error');\n      }\n    },\n  });\n\n  // Get credential tool\n  server.addTool({\n    name: 'get-credential',\n    description:\n      'Get detailed information about a specific credential by ID. Sensitive data is not included for security',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Get Credential Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credential = await client.getCredential(args.credentialId);\n\n        let result = `# Credential: ${credential.name}\\n\\n`;\n        result += `**ID:** ${credential.id}\\n`;\n        result += `**Name:** ${credential.name}\\n`;\n        result += `**Type:** ${credential.type}\\n`;\n\n        if (credential.homeProject) {\n          result += `**Project:** ${credential.homeProject.name} (${credential.homeProject.type})\\n`;\n        }\n\n        if (credential.sharedWith && credential.sharedWith.length > 0) {\n          result += `\\n## Shared With:\\n`;\n          credential.sharedWith.forEach((share, index) => {\n            result += `${index + 1}. ${share.user.firstName} ${share.user.lastName} (${share.user.email}) - Role: ${share.role}\\n`;\n          });\n        }\n\n        if (credential.nodesAccess && credential.nodesAccess.length > 0) {\n          result += `\\n## Node Access:\\n`;\n          credential.nodesAccess.forEach((access, index) => {\n            result += `${index + 1}. Node Type: ${access.nodeType}\\n`;\n            if (access.user) {\n              result += `   - User: ${access.user}\\n`;\n            }\n            if (access.date) {\n              result += `   - Date: ${new Date(access.date).toLocaleString()}\\n`;\n            }\n          });\n        }\n\n        if (credential.scopes && credential.scopes.length > 0) {\n          result += `\\n**Scopes:** ${credential.scopes.join(', ')}\\n`;\n        }\n\n        if (credential.createdAt) {\n          result += `**Created:** ${new Date(credential.createdAt).toLocaleString()}\\n`;\n        }\n\n        if (credential.updatedAt) {\n          result += `**Updated:** ${new Date(credential.updatedAt).toLocaleString()}\\n`;\n        }\n\n        result += `\\n**Note:** Sensitive credential data is not displayed for security purposes.`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential with unknown error');\n      }\n    },\n  });\n\n  // Create credential tool\n  server.addTool({\n    name: 'create-credential',\n    description: 'Create a new credential in n8n with the specified type and configuration data',\n    parameters: CreateCredentialSchema,\n    annotations: {\n      title: 'Create New Credential',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CreateCredentialSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const credentialData: CreateCredentialRequest = {\n          name: args.name,\n          type: args.type,\n          data: args.data as Record<string, unknown>,\n          projectId: args.projectId,\n        };\n\n        const credential = await client.createCredential(credentialData);\n\n        let result = `✅ Successfully created credential \"${credential.name}\" with ID: ${credential.id}\\n`;\n        result += `Type: ${credential.type}`;\n\n        if (credential.homeProject) {\n          result += `\\nProject: ${credential.homeProject.name}`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to create credential: ${error.message}`);\n        }\n        throw new UserError('Failed to create credential with unknown error');\n      }\n    },\n  });\n\n  // Delete credential tool\n  server.addTool({\n    name: 'delete-credential',\n    description:\n      'Delete a credential from n8n permanently. WARNING: This action cannot be undone and may break workflows using this credential',\n    parameters: CredentialIdSchema,\n    annotations: {\n      title: 'Delete Credential',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialIdSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.deleteCredential(args.credentialId);\n        return `✅ Successfully deleted credential with ID: ${args.credentialId}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to delete credential: ${error.message}`);\n        }\n        throw new UserError('Failed to delete credential with unknown error');\n      }\n    },\n  });\n\n  // Get credential schema tool\n  server.addTool({\n    name: 'get-credential-schema',\n    description:\n      'Get the schema definition for a specific credential type to understand required fields',\n    parameters: CredentialTypeSchema,\n    annotations: {\n      title: 'Get Credential Schema',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof CredentialTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const schema = await client.getCredentialSchema(args.credentialType);\n\n        let result = `# Credential Schema: ${args.credentialType}\\n\\n`;\n        result += `**Schema definition for credential type \"${args.credentialType}\":**\\n\\n`;\n        result += '```json\\n';\n        result += JSON.stringify(schema, null, 2);\n        result += '\\n```\\n';\n\n        result += `\\nUse this schema to understand the required fields when creating credentials of type \"${args.credentialType}\".`;\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get credential schema: ${error.message}`);\n        }\n        throw new UserError('Failed to get credential schema with unknown error');\n      }\n    },\n  });\n}\n"],"version":3}