13a2399572a3da7f6c2e39124bea1f4d
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const executions_1 = require("../../../src/tools/executions");
(0, globals_1.describe)('Execution Tools', () => {
    let mockClient;
    let mockServer;
    let getClient;
    (0, globals_1.beforeEach)(() => {
        mockClient = global.testUtils.createMockClient();
        getClient = globals_1.jest.fn(() => mockClient);
        mockServer = {
            addTool: globals_1.jest.fn(),
        };
        // Register execution tools
        (0, executions_1.createExecutionTools)(getClient, mockServer);
    });
    (0, globals_1.it)('should register all execution tools', () => {
        (0, globals_1.expect)(mockServer.addTool).toHaveBeenCalledTimes(3);
        const toolNames = mockServer.addTool.mock.calls.map((call) => call[0].name);
        (0, globals_1.expect)(toolNames).toContain('list-executions');
        (0, globals_1.expect)(toolNames).toContain('get-execution');
        (0, globals_1.expect)(toolNames).toContain('delete-execution');
    });
    (0, globals_1.describe)('list-executions tool', () => {
        let listExecutionsTool;
        (0, globals_1.beforeEach)(() => {
            listExecutionsTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'list-executions')[0];
        });
        (0, globals_1.it)('should list executions successfully with full data', async () => {
            const mockExecutions = [
                {
                    id: 'exec-1',
                    finished: true,
                    mode: 'manual',
                    status: 'success',
                    workflowId: 'wf-1',
                    startedAt: '2024-01-01T10:00:00.000Z',
                    stoppedAt: '2024-01-01T10:05:00.000Z',
                    retryOf: 'exec-0',
                },
                {
                    id: 'exec-2',
                    finished: false,
                    mode: 'webhook',
                    status: 'running',
                    workflowId: 'wf-2',
                    startedAt: '2024-01-01T11:00:00.000Z',
                },
                {
                    id: 'exec-3',
                    finished: true,
                    mode: 'trigger',
                    status: 'error',
                    workflowId: 'wf-3',
                    startedAt: '2024-01-01T12:00:00.000Z',
                    stoppedAt: '2024-01-01T12:02:00.000Z',
                },
                {
                    id: 'exec-4',
                    finished: false,
                    mode: 'manual',
                    status: 'waiting',
                    workflowId: 'wf-4',
                    startedAt: '2024-01-01T13:00:00.000Z',
                },
            ];
            mockClient.getExecutions.mockResolvedValue({
                data: mockExecutions,
                nextCursor: 'next-cursor-456',
            });
            const result = await listExecutionsTool.execute({});
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledWith({});
            (0, globals_1.expect)(result).toContain('Found 4 execution(s):');
            // Check success execution formatting
            (0, globals_1.expect)(result).toContain('**Execution exec-1**');
            (0, globals_1.expect)(result).toContain('Status: ✅ success');
            (0, globals_1.expect)(result).toContain('Workflow ID: wf-1');
            (0, globals_1.expect)(result).toContain('Mode: manual');
            (0, globals_1.expect)(result).toContain('Started: 1/1/2024');
            (0, globals_1.expect)(result).toContain('Stopped: 1/1/2024');
            (0, globals_1.expect)(result).toContain('Finished: Yes');
            (0, globals_1.expect)(result).toContain('Retry Of: exec-0');
            // Check running execution formatting
            (0, globals_1.expect)(result).toContain('**Execution exec-2**');
            (0, globals_1.expect)(result).toContain('Status: 🔄 running');
            (0, globals_1.expect)(result).toContain('Mode: webhook');
            (0, globals_1.expect)(result).toContain('Finished: No');
            // Check error execution formatting
            (0, globals_1.expect)(result).toContain('**Execution exec-3**');
            (0, globals_1.expect)(result).toContain('Status: ❌ error');
            (0, globals_1.expect)(result).toContain('Mode: trigger');
            // Check waiting execution formatting
            (0, globals_1.expect)(result).toContain('**Execution exec-4**');
            (0, globals_1.expect)(result).toContain('Status: ⏳ waiting');
            // Check pagination cursor
            (0, globals_1.expect)(result).toContain('Use cursor "next-cursor-456" to get the next page');
        });
        (0, globals_1.it)('should list executions with pagination options', async () => {
            const mockExecutions = [
                {
                    id: 'exec-1',
                    finished: true,
                    mode: 'manual',
                    status: 'success',
                    workflowId: 'wf-1',
                    startedAt: '2024-01-01T10:00:00.000Z',
                },
            ];
            mockClient.getExecutions.mockResolvedValue({
                data: mockExecutions,
            });
            await listExecutionsTool.execute({ limit: 25, cursor: 'test-cursor' });
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledWith({
                limit: 25,
                cursor: 'test-cursor',
            });
        });
        (0, globals_1.it)('should handle empty executions list', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [],
            });
            const result = await listExecutionsTool.execute({});
            (0, globals_1.expect)(result).toBe('No executions found in the n8n instance.');
        });
        (0, globals_1.it)('should handle executions without optional fields', async () => {
            const mockExecutions = [
                {
                    id: 'exec-minimal',
                    finished: true,
                    mode: 'manual',
                    status: 'success',
                    workflowId: 'wf-minimal',
                    startedAt: '2024-01-01T10:00:00.000Z',
                },
            ];
            mockClient.getExecutions.mockResolvedValue({
                data: mockExecutions,
            });
            const result = await listExecutionsTool.execute({});
            (0, globals_1.expect)(result).toContain('**Execution exec-minimal**');
            (0, globals_1.expect)(result).toContain('Status: ✅ success');
            (0, globals_1.expect)(result).toContain('Workflow ID: wf-minimal');
            (0, globals_1.expect)(result).toContain('Mode: manual');
            (0, globals_1.expect)(result).toContain('Started: 1/1/2024');
            (0, globals_1.expect)(result).toContain('Finished: Yes');
            (0, globals_1.expect)(result).not.toContain('Stopped:');
            (0, globals_1.expect)(result).not.toContain('Retry Of:');
        });
        (0, globals_1.it)('should handle executions without nextCursor', async () => {
            const mockExecutions = [
                {
                    id: 'exec-1',
                    finished: true,
                    mode: 'manual',
                    status: 'success',
                    workflowId: 'wf-1',
                    startedAt: '2024-01-01T10:00:00.000Z',
                },
            ];
            mockClient.getExecutions.mockResolvedValue({
                data: mockExecutions,
            });
            const result = await listExecutionsTool.execute({});
            (0, globals_1.expect)(result).toContain('Found 1 execution(s):');
            (0, globals_1.expect)(result).not.toContain('Use cursor');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('API connection failed'));
            await (0, globals_1.expect)(listExecutionsTool.execute({})).rejects.toThrow('Failed to list executions: API connection failed');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getExecutions.mockRejectedValue('Unknown error');
            await (0, globals_1.expect)(listExecutionsTool.execute({})).rejects.toThrow('Failed to list executions with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, executions_1.createExecutionTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'list-executions')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({})).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(listExecutionsTool.annotations).toEqual({
                title: 'List n8n Executions',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({})).not.toThrow();
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ limit: 50 })).not.toThrow();
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ cursor: 'test' })).not.toThrow();
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ limit: 25, cursor: 'test' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ limit: 0 })).toThrow();
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ limit: 101 })).toThrow();
            (0, globals_1.expect)(() => listExecutionsTool.parameters.parse({ limit: 'invalid' })).toThrow();
        });
    });
    (0, globals_1.describe)('get-execution tool', () => {
        let getExecutionTool;
        (0, globals_1.beforeEach)(() => {
            getExecutionTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'get-execution')[0];
        });
        (0, globals_1.it)('should get execution successfully with full data', async () => {
            const mockExecution = {
                id: 'exec-1',
                finished: true,
                mode: 'manual',
                status: 'success',
                workflowId: 'wf-1',
                startedAt: '2024-01-01T10:00:00.000Z',
                stoppedAt: '2024-01-01T10:05:00.000Z',
                retryOf: 'exec-0',
                retrySuccessId: 'exec-1-retry',
                waitTill: new Date('2024-01-01T10:10:00.000Z'),
                workflowData: {
                    id: 'wf-1',
                    name: 'Test Workflow',
                    active: true,
                    nodes: [
                        {
                            id: 'node1',
                            name: 'Start Node',
                            type: 'Start',
                            typeVersion: 1,
                            position: [100, 200],
                        },
                        {
                            id: 'node2',
                            name: 'End Node',
                            type: 'End',
                            typeVersion: 1,
                            position: [300, 200],
                        },
                    ],
                    connections: {},
                    settings: {},
                    staticData: {},
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-01T00:00:00.000Z',
                },
            };
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const result = await getExecutionTool.execute({ executionId: 'exec-1' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledWith('exec-1');
            (0, globals_1.expect)(result).toContain('# Execution: exec-1');
            (0, globals_1.expect)(result).toContain('**Status:** ✅ success');
            (0, globals_1.expect)(result).toContain('**Workflow ID:** wf-1');
            (0, globals_1.expect)(result).toContain('**Mode:** manual');
            (0, globals_1.expect)(result).toContain('**Started At:** 1/1/2024');
            (0, globals_1.expect)(result).toContain('**Stopped At:** 1/1/2024');
            (0, globals_1.expect)(result).toContain('**Finished:** Yes');
            (0, globals_1.expect)(result).toContain('**Retry Of:** exec-0');
            (0, globals_1.expect)(result).toContain('**Retry Success ID:** exec-1-retry');
            (0, globals_1.expect)(result).toContain('**Wait Until:** 1/1/2024');
            (0, globals_1.expect)(result).toContain('## Workflow Information:');
            (0, globals_1.expect)(result).toContain('**Name:** Test Workflow');
            (0, globals_1.expect)(result).toContain('**Active:** Yes');
            (0, globals_1.expect)(result).toContain('**Nodes:** 2');
        });
        (0, globals_1.it)('should get execution with minimal data', async () => {
            const mockExecution = {
                id: 'exec-minimal',
                finished: false,
                mode: 'webhook',
                status: 'running',
                workflowId: 'wf-minimal',
                startedAt: '2024-01-01T10:00:00.000Z',
            };
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const result = await getExecutionTool.execute({ executionId: 'exec-minimal' });
            (0, globals_1.expect)(result).toContain('# Execution: exec-minimal');
            (0, globals_1.expect)(result).toContain('**Status:** 🔄 running');
            (0, globals_1.expect)(result).toContain('**Workflow ID:** wf-minimal');
            (0, globals_1.expect)(result).toContain('**Mode:** webhook');
            (0, globals_1.expect)(result).toContain('**Started At:** 1/1/2024');
            (0, globals_1.expect)(result).toContain('**Finished:** No');
            (0, globals_1.expect)(result).not.toContain('**Stopped At:**');
            (0, globals_1.expect)(result).not.toContain('**Retry Of:**');
            (0, globals_1.expect)(result).not.toContain('**Retry Success ID:**');
            (0, globals_1.expect)(result).not.toContain('**Wait Until:**');
            (0, globals_1.expect)(result).not.toContain('## Workflow Information:');
        });
        (0, globals_1.it)('should handle different status icons correctly', async () => {
            const statuses = [
                { status: 'success', icon: '✅' },
                { status: 'error', icon: '❌' },
                { status: 'running', icon: '🔄' },
                { status: 'waiting', icon: '⏳' },
            ];
            for (const { status, icon } of statuses) {
                const mockExecution = {
                    id: `exec-${status}`,
                    finished: status === 'success' || status === 'error',
                    mode: 'manual',
                    status,
                    workflowId: 'wf-1',
                    startedAt: '2024-01-01T10:00:00.000Z',
                };
                mockClient.getExecution.mockResolvedValue(mockExecution);
                const result = await getExecutionTool.execute({ executionId: `exec-${status}` });
                (0, globals_1.expect)(result).toContain(`**Status:** ${icon} ${status}`);
            }
        });
        (0, globals_1.it)('should format execution with workflow data having inactive workflow', async () => {
            const mockExecution = {
                id: 'exec-1',
                finished: true,
                mode: 'manual',
                status: 'success',
                workflowId: 'wf-1',
                startedAt: '2024-01-01T10:00:00.000Z',
                workflowData: {
                    id: 'wf-1',
                    name: 'Inactive Workflow',
                    active: false,
                    nodes: [],
                    connections: {},
                    settings: {},
                    staticData: {},
                    createdAt: '2024-01-01T00:00:00.000Z',
                    updatedAt: '2024-01-01T00:00:00.000Z',
                },
            };
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const result = await getExecutionTool.execute({ executionId: 'exec-1' });
            (0, globals_1.expect)(result).toContain('**Name:** Inactive Workflow');
            (0, globals_1.expect)(result).toContain('**Active:** No');
            (0, globals_1.expect)(result).toContain('**Nodes:** 0');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getExecution.mockRejectedValue(new Error('Execution not found'));
            await (0, globals_1.expect)(getExecutionTool.execute({ executionId: 'invalid' })).rejects.toThrow('Failed to get execution: Execution not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.getExecution.mockRejectedValue({ error: 'Unknown' });
            await (0, globals_1.expect)(getExecutionTool.execute({ executionId: 'test' })).rejects.toThrow('Failed to get execution with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, executions_1.createExecutionTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'get-execution')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({ executionId: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(getExecutionTool.annotations).toEqual({
                title: 'Get Execution Details',
                readOnlyHint: true,
                destructiveHint: false,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => getExecutionTool.parameters.parse({ executionId: 'test-id' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => getExecutionTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => getExecutionTool.parameters.parse({ executionId: '' })).toThrow();
            (0, globals_1.expect)(() => getExecutionTool.parameters.parse({ executionId: 123 })).toThrow();
        });
    });
    (0, globals_1.describe)('delete-execution tool', () => {
        let deleteExecutionTool;
        (0, globals_1.beforeEach)(() => {
            deleteExecutionTool = mockServer.addTool.mock.calls.find((call) => call[0].name === 'delete-execution')[0];
        });
        (0, globals_1.it)('should delete execution successfully', async () => {
            mockClient.deleteExecution.mockResolvedValue(undefined);
            const result = await deleteExecutionTool.execute({ executionId: 'exec-to-delete' });
            (0, globals_1.expect)(mockClient.deleteExecution).toHaveBeenCalledWith('exec-to-delete');
            (0, globals_1.expect)(result).toBe('✅ Successfully deleted execution with ID: exec-to-delete');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.deleteExecution.mockRejectedValue(new Error('Execution not found'));
            await (0, globals_1.expect)(deleteExecutionTool.execute({ executionId: 'invalid' })).rejects.toThrow('Failed to delete execution: Execution not found');
        });
        (0, globals_1.it)('should handle unknown errors', async () => {
            mockClient.deleteExecution.mockRejectedValue('Network error');
            await (0, globals_1.expect)(deleteExecutionTool.execute({ executionId: 'test' })).rejects.toThrow('Failed to delete execution with unknown error');
        });
        (0, globals_1.it)('should throw UserError when client is not initialized', async () => {
            const uninitializedGetClient = globals_1.jest.fn(() => null);
            const uninitializedServer = { addTool: globals_1.jest.fn() };
            (0, executions_1.createExecutionTools)(uninitializedGetClient, uninitializedServer);
            const tool = uninitializedServer.addTool.mock.calls.find((call) => call[0].name === 'delete-execution')?.[0];
            (0, globals_1.expect)(tool).toBeDefined();
            await (0, globals_1.expect)(tool.execute({ executionId: 'test' })).rejects.toThrow('n8n client not initialized. Please run init-n8n first.');
        });
        (0, globals_1.it)('should have correct tool annotations', () => {
            (0, globals_1.expect)(deleteExecutionTool.annotations).toEqual({
                title: 'Delete Execution',
                readOnlyHint: false,
                destructiveHint: true,
                idempotentHint: true,
                openWorldHint: true,
            });
        });
        (0, globals_1.it)('should validate parameters with Zod schema', () => {
            // Valid parameters
            (0, globals_1.expect)(() => deleteExecutionTool.parameters.parse({ executionId: 'test-id' })).not.toThrow();
            // Invalid parameters
            (0, globals_1.expect)(() => deleteExecutionTool.parameters.parse({})).toThrow();
            (0, globals_1.expect)(() => deleteExecutionTool.parameters.parse({ executionId: '' })).toThrow();
            (0, globals_1.expect)(() => deleteExecutionTool.parameters.parse({ executionId: 123 })).toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,