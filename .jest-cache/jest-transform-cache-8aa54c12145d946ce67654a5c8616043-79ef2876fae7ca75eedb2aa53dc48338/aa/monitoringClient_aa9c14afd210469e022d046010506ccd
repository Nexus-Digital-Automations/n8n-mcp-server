5071b790d55f848c69872a0d2db19c89
"use strict";

/* istanbul ignore next */
function cov_uydxqjgb0() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/monitoringClient.ts";
  var hash = "ba681e2d0c60f857219891de1381afb06b5fe070";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/monitoringClient.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 34
        }
      },
      "4": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 59
        }
      },
      "5": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 29
        }
      },
      "6": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 31
        }
      },
      "7": {
        start: {
          line: 15,
          column: 8
        },
        end: {
          line: 15,
          column: 29
        }
      },
      "8": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 50
        }
      },
      "9": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 20,
          column: 55
        }
      },
      "10": {
        start: {
          line: 21,
          column: 24
        },
        end: {
          line: 25,
          column: 9
        }
      },
      "11": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 48,
          column: 9
        }
      },
      "12": {
        start: {
          line: 27,
          column: 29
        },
        end: {
          line: 30,
          column: 14
        }
      },
      "13": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 34,
          column: 13
        }
      },
      "14": {
        start: {
          line: 32,
          column: 34
        },
        end: {
          line: 32,
          column: 55
        }
      },
      "15": {
        start: {
          line: 33,
          column: 16
        },
        end: {
          line: 33,
          column: 73
        }
      },
      "16": {
        start: {
          line: 35,
          column: 32
        },
        end: {
          line: 35,
          column: 74
        }
      },
      "17": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 41,
          column: 13
        }
      },
      "18": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 47
        }
      },
      "19": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 47
        }
      },
      "20": {
        start: {
          line: 44,
          column: 12
        },
        end: {
          line: 46,
          column: 13
        }
      },
      "21": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 45,
          column: 79
        }
      },
      "22": {
        start: {
          line: 47,
          column: 12
        },
        end: {
          line: 47,
          column: 76
        }
      },
      "23": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 61,
          column: 9
        }
      },
      "24": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "25": {
        start: {
          line: 60,
          column: 12
        },
        end: {
          line: 60,
          column: 57
        }
      },
      "26": {
        start: {
          line: 67,
          column: 26
        },
        end: {
          line: 67,
          column: 36
        }
      },
      "27": {
        start: {
          line: 68,
          column: 29
        },
        end: {
          line: 68,
          column: 43
        }
      },
      "28": {
        start: {
          line: 69,
          column: 35
        },
        end: {
          line: 69,
          column: 36
        }
      },
      "29": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 80,
          column: 9
        }
      },
      "30": {
        start: {
          line: 72,
          column: 28
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "31": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 57
        }
      },
      "32": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 56
        }
      },
      "33": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 75,
          column: 41
        }
      },
      "34": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 37
        }
      },
      "35": {
        start: {
          line: 79,
          column: 12
        },
        end: {
          line: 79,
          column: 58
        }
      },
      "36": {
        start: {
          line: 82,
          column: 31
        },
        end: {
          line: 82,
          column: 43
        }
      },
      "37": {
        start: {
          line: 83,
          column: 36
        },
        end: {
          line: 83,
          column: 48
        }
      },
      "38": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 99,
          column: 9
        }
      },
      "39": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "40": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 48
        }
      },
      "41": {
        start: {
          line: 89,
          column: 16
        },
        end: {
          line: 89,
          column: 53
        }
      },
      "42": {
        start: {
          line: 92,
          column: 16
        },
        end: {
          line: 92,
          column: 43
        }
      },
      "43": {
        start: {
          line: 93,
          column: 16
        },
        end: {
          line: 93,
          column: 52
        }
      },
      "44": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 39
        }
      },
      "45": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 48
        }
      },
      "46": {
        start: {
          line: 101,
          column: 28
        },
        end: {
          line: 101,
          column: 37
        }
      },
      "47": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "48": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 103,
          column: 39
        }
      },
      "49": {
        start: {
          line: 105,
          column: 13
        },
        end: {
          line: 107,
          column: 9
        }
      },
      "50": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "51": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 120,
          column: 10
        }
      },
      "52": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "53": {
        start: {
          line: 128,
          column: 60
        },
        end: {
          line: 131,
          column: 14
        }
      },
      "54": {
        start: {
          line: 133,
          column: 30
        },
        end: {
          line: 133,
          column: 52
        }
      },
      "55": {
        start: {
          line: 134,
          column: 31
        },
        end: {
          line: 134,
          column: 54
        }
      },
      "56": {
        start: {
          line: 136,
          column: 36
        },
        end: {
          line: 136,
          column: 67
        }
      },
      "57": {
        start: {
          line: 136,
          column: 58
        },
        end: {
          line: 136,
          column: 66
        }
      },
      "58": {
        start: {
          line: 137,
          column: 40
        },
        end: {
          line: 137,
          column: 107
        }
      },
      "59": {
        start: {
          line: 137,
          column: 62
        },
        end: {
          line: 137,
          column: 106
        }
      },
      "60": {
        start: {
          line: 139,
          column: 41
        },
        end: {
          line: 139,
          column: 91
        }
      },
      "61": {
        start: {
          line: 139,
          column: 64
        },
        end: {
          line: 139,
          column: 90
        }
      },
      "62": {
        start: {
          line: 140,
          column: 37
        },
        end: {
          line: 140,
          column: 86
        }
      },
      "63": {
        start: {
          line: 140,
          column: 60
        },
        end: {
          line: 140,
          column: 85
        }
      },
      "64": {
        start: {
          line: 141,
          column: 38
        },
        end: {
          line: 141,
          column: 73
        }
      },
      "65": {
        start: {
          line: 141,
          column: 61
        },
        end: {
          line: 141,
          column: 72
        }
      },
      "66": {
        start: {
          line: 143,
          column: 35
        },
        end: {
          line: 145,
          column: 92
        }
      },
      "67": {
        start: {
          line: 144,
          column: 29
        },
        end: {
          line: 144,
          column: 69
        }
      },
      "68": {
        start: {
          line: 145,
          column: 26
        },
        end: {
          line: 145,
          column: 91
        }
      },
      "69": {
        start: {
          line: 146,
          column: 41
        },
        end: {
          line: 148,
          column: 19
        }
      },
      "70": {
        start: {
          line: 147,
          column: 55
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "71": {
        start: {
          line: 149,
          column: 30
        },
        end: {
          line: 149,
          column: 109
        }
      },
      "72": {
        start: {
          line: 151,
          column: 31
        },
        end: {
          line: 151,
          column: 68
        }
      },
      "73": {
        start: {
          line: 152,
          column: 37
        },
        end: {
          line: 152,
          column: 95
        }
      },
      "74": {
        start: {
          line: 152,
          column: 60
        },
        end: {
          line: 152,
          column: 94
        }
      },
      "75": {
        start: {
          line: 153,
          column: 31
        },
        end: {
          line: 153,
          column: 59
        }
      },
      "76": {
        start: {
          line: 155,
          column: 32
        },
        end: {
          line: 155,
          column: 61
        }
      },
      "77": {
        start: {
          line: 156,
          column: 12
        },
        end: {
          line: 177,
          column: 14
        }
      },
      "78": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 114
        }
      },
      "79": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "80": {
        start: {
          line: 188,
          column: 51
        },
        end: {
          line: 191,
          column: 14
        }
      },
      "81": {
        start: {
          line: 193,
          column: 34
        },
        end: {
          line: 193,
          column: 57
        }
      },
      "82": {
        start: {
          line: 194,
          column: 31
        },
        end: {
          line: 194,
          column: 98
        }
      },
      "83": {
        start: {
          line: 194,
          column: 57
        },
        end: {
          line: 194,
          column: 84
        }
      },
      "84": {
        start: {
          line: 196,
          column: 27
        },
        end: {
          line: 196,
          column: 29
        }
      },
      "85": {
        start: {
          line: 197,
          column: 36
        },
        end: {
          line: 197,
          column: 38
        }
      },
      "86": {
        start: {
          line: 198,
          column: 12
        },
        end: {
          line: 201,
          column: 13
        }
      },
      "87": {
        start: {
          line: 199,
          column: 16
        },
        end: {
          line: 199,
          column: 52
        }
      },
      "88": {
        start: {
          line: 200,
          column: 16
        },
        end: {
          line: 200,
          column: 97
        }
      },
      "89": {
        start: {
          line: 202,
          column: 12
        },
        end: {
          line: 205,
          column: 13
        }
      },
      "90": {
        start: {
          line: 203,
          column: 16
        },
        end: {
          line: 203,
          column: 53
        }
      },
      "91": {
        start: {
          line: 204,
          column: 16
        },
        end: {
          line: 204,
          column: 75
        }
      },
      "92": {
        start: {
          line: 207,
          column: 37
        },
        end: {
          line: 215,
          column: 15
        }
      },
      "93": {
        start: {
          line: 207,
          column: 71
        },
        end: {
          line: 215,
          column: 13
        }
      },
      "94": {
        start: {
          line: 217,
          column: 39
        },
        end: {
          line: 217,
          column: 73
        }
      },
      "95": {
        start: {
          line: 217,
          column: 62
        },
        end: {
          line: 217,
          column: 72
        }
      },
      "96": {
        start: {
          line: 218,
          column: 41
        },
        end: {
          line: 218,
          column: 85
        }
      },
      "97": {
        start: {
          line: 218,
          column: 72
        },
        end: {
          line: 218,
          column: 84
        }
      },
      "98": {
        start: {
          line: 219,
          column: 32
        },
        end: {
          line: 221,
          column: 21
        }
      },
      "99": {
        start: {
          line: 223,
          column: 35
        },
        end: {
          line: 225,
          column: 42
        }
      },
      "100": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 224,
          column: 74
        }
      },
      "101": {
        start: {
          line: 225,
          column: 26
        },
        end: {
          line: 225,
          column: 41
        }
      },
      "102": {
        start: {
          line: 226,
          column: 41
        },
        end: {
          line: 228,
          column: 19
        }
      },
      "103": {
        start: {
          line: 227,
          column: 55
        },
        end: {
          line: 227,
          column: 65
        }
      },
      "104": {
        start: {
          line: 230,
          column: 31
        },
        end: {
          line: 230,
          column: 40
        }
      },
      "105": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "106": {
        start: {
          line: 232,
          column: 16
        },
        end: {
          line: 232,
          column: 42
        }
      },
      "107": {
        start: {
          line: 234,
          column: 17
        },
        end: {
          line: 236,
          column: 13
        }
      },
      "108": {
        start: {
          line: 235,
          column: 16
        },
        end: {
          line: 235,
          column: 41
        }
      },
      "109": {
        start: {
          line: 238,
          column: 33
        },
        end: {
          line: 247,
          column: 15
        }
      },
      "110": {
        start: {
          line: 238,
          column: 69
        },
        end: {
          line: 247,
          column: 13
        }
      },
      "111": {
        start: {
          line: 248,
          column: 12
        },
        end: {
          line: 262,
          column: 14
        }
      },
      "112": {
        start: {
          line: 265,
          column: 12
        },
        end: {
          line: 265,
          column: 127
        }
      },
      "113": {
        start: {
          line: 272,
          column: 25
        },
        end: {
          line: 272,
          column: 46
        }
      },
      "114": {
        start: {
          line: 273,
          column: 25
        },
        end: {
          line: 273,
          column: 43
        }
      },
      "115": {
        start: {
          line: 275,
          column: 27
        },
        end: {
          line: 275,
          column: 97
        }
      },
      "116": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 309,
          column: 10
        }
      },
      "117": {
        start: {
          line: 315,
          column: 26
        },
        end: {
          line: 315,
          column: 36
        }
      },
      "118": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 329,
          column: 9
        }
      },
      "119": {
        start: {
          line: 317,
          column: 12
        },
        end: {
          line: 317,
          column: 57
        }
      },
      "120": {
        start: {
          line: 318,
          column: 12
        },
        end: {
          line: 321,
          column: 14
        }
      },
      "121": {
        start: {
          line: 324,
          column: 12
        },
        end: {
          line: 328,
          column: 14
        }
      },
      "122": {
        start: {
          line: 335,
          column: 57
        },
        end: {
          line: 339,
          column: 10
        }
      },
      "123": {
        start: {
          line: 340,
          column: 23
        },
        end: {
          line: 340,
          column: 25
        }
      },
      "124": {
        start: {
          line: 341,
          column: 32
        },
        end: {
          line: 341,
          column: 34
        }
      },
      "125": {
        start: {
          line: 343,
          column: 8
        },
        end: {
          line: 346,
          column: 9
        }
      },
      "126": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 53
        }
      },
      "127": {
        start: {
          line: 345,
          column: 12
        },
        end: {
          line: 345,
          column: 92
        }
      },
      "128": {
        start: {
          line: 347,
          column: 8
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "129": {
        start: {
          line: 348,
          column: 12
        },
        end: {
          line: 348,
          column: 74
        }
      },
      "130": {
        start: {
          line: 349,
          column: 12
        },
        end: {
          line: 349,
          column: 90
        }
      },
      "131": {
        start: {
          line: 351,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "132": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 352,
          column: 59
        }
      },
      "133": {
        start: {
          line: 353,
          column: 12
        },
        end: {
          line: 353,
          column: 86
        }
      },
      "134": {
        start: {
          line: 356,
          column: 8
        },
        end: {
          line: 359,
          column: 9
        }
      },
      "135": {
        start: {
          line: 357,
          column: 12
        },
        end: {
          line: 357,
          column: 60
        }
      },
      "136": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 358,
          column: 97
        }
      },
      "137": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 363,
          column: 9
        }
      },
      "138": {
        start: {
          line: 361,
          column: 12
        },
        end: {
          line: 361,
          column: 51
        }
      },
      "139": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 362,
          column: 99
        }
      },
      "140": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 383,
          column: 10
        }
      },
      "141": {
        start: {
          line: 386,
          column: 0
        },
        end: {
          line: 386,
          column: 44
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 4
          },
          end: {
            line: 12,
            column: 5
          }
        },
        loc: {
          start: {
            line: 12,
            column: 41
          },
          end: {
            line: 18,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 5
          }
        },
        loc: {
          start: {
            line: 19,
            column: 46
          },
          end: {
            line: 49,
            column: 5
          }
        },
        line: 19
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        loc: {
          start: {
            line: 53,
            column: 27
          },
          end: {
            line: 62,
            column: 5
          }
        },
        line: 53
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 37
          },
          end: {
            line: 121,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 5
          }
        },
        loc: {
          start: {
            line: 125,
            column: 23
          },
          end: {
            line: 182,
            column: 5
          }
        },
        line: 125
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 136,
            column: 53
          },
          end: {
            line: 136,
            column: 54
          }
        },
        loc: {
          start: {
            line: 136,
            column: 58
          },
          end: {
            line: 136,
            column: 66
          }
        },
        line: 136
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 137,
            column: 57
          },
          end: {
            line: 137,
            column: 58
          }
        },
        loc: {
          start: {
            line: 137,
            column: 62
          },
          end: {
            line: 137,
            column: 106
          }
        },
        line: 137
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 139,
            column: 59
          },
          end: {
            line: 139,
            column: 60
          }
        },
        loc: {
          start: {
            line: 139,
            column: 64
          },
          end: {
            line: 139,
            column: 90
          }
        },
        line: 139
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 140,
            column: 55
          },
          end: {
            line: 140,
            column: 56
          }
        },
        loc: {
          start: {
            line: 140,
            column: 60
          },
          end: {
            line: 140,
            column: 85
          }
        },
        line: 140
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 141,
            column: 56
          },
          end: {
            line: 141,
            column: 57
          }
        },
        loc: {
          start: {
            line: 141,
            column: 61
          },
          end: {
            line: 141,
            column: 72
          }
        },
        line: 141
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 144,
            column: 24
          },
          end: {
            line: 144,
            column: 25
          }
        },
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 69
          }
        },
        line: 144
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 145,
            column: 21
          },
          end: {
            line: 145,
            column: 22
          }
        },
        loc: {
          start: {
            line: 145,
            column: 26
          },
          end: {
            line: 145,
            column: 91
          }
        },
        line: 145
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 147,
            column: 40
          },
          end: {
            line: 147,
            column: 41
          }
        },
        loc: {
          start: {
            line: 147,
            column: 55
          },
          end: {
            line: 147,
            column: 65
          }
        },
        line: 147
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 152,
            column: 55
          },
          end: {
            line: 152,
            column: 56
          }
        },
        loc: {
          start: {
            line: 152,
            column: 60
          },
          end: {
            line: 152,
            column: 94
          }
        },
        line: 152
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 186,
            column: 4
          },
          end: {
            line: 186,
            column: 5
          }
        },
        loc: {
          start: {
            line: 186,
            column: 45
          },
          end: {
            line: 267,
            column: 5
          }
        },
        line: 186
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 194,
            column: 52
          },
          end: {
            line: 194,
            column: 53
          }
        },
        loc: {
          start: {
            line: 194,
            column: 57
          },
          end: {
            line: 194,
            column: 84
          }
        },
        line: 194
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 207,
            column: 65
          },
          end: {
            line: 207,
            column: 66
          }
        },
        loc: {
          start: {
            line: 207,
            column: 71
          },
          end: {
            line: 215,
            column: 13
          }
        },
        line: 207
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 217,
            column: 57
          },
          end: {
            line: 217,
            column: 58
          }
        },
        loc: {
          start: {
            line: 217,
            column: 62
          },
          end: {
            line: 217,
            column: 72
          }
        },
        line: 217
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 218,
            column: 67
          },
          end: {
            line: 218,
            column: 68
          }
        },
        loc: {
          start: {
            line: 218,
            column: 72
          },
          end: {
            line: 218,
            column: 84
          }
        },
        line: 218
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 224,
            column: 24
          },
          end: {
            line: 224,
            column: 25
          }
        },
        loc: {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 74
          }
        },
        line: 224
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 225,
            column: 21
          },
          end: {
            line: 225,
            column: 22
          }
        },
        loc: {
          start: {
            line: 225,
            column: 26
          },
          end: {
            line: 225,
            column: 41
          }
        },
        line: 225
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 227,
            column: 40
          },
          end: {
            line: 227,
            column: 41
          }
        },
        loc: {
          start: {
            line: 227,
            column: 55
          },
          end: {
            line: 227,
            column: 65
          }
        },
        line: 227
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 238,
            column: 60
          },
          end: {
            line: 238,
            column: 61
          }
        },
        loc: {
          start: {
            line: 238,
            column: 69
          },
          end: {
            line: 247,
            column: 13
          }
        },
        line: 238
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 271,
            column: 4
          },
          end: {
            line: 271,
            column: 5
          }
        },
        loc: {
          start: {
            line: 271,
            column: 29
          },
          end: {
            line: 310,
            column: 5
          }
        },
        line: 271
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 29
          },
          end: {
            line: 330,
            column: 5
          }
        },
        line: 314
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 334,
            column: 4
          },
          end: {
            line: 334,
            column: 5
          }
        },
        loc: {
          start: {
            line: 334,
            column: 33
          },
          end: {
            line: 384,
            column: 5
          }
        },
        line: 334
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 19,
            column: 32
          },
          end: {
            line: 19,
            column: 44
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 42
          },
          end: {
            line: 19,
            column: 44
          }
        }],
        line: 19
      },
      "4": {
        loc: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 37
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 31
          }
        }, {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 24,
            column: 37
          }
        }],
        line: 24
      },
      "5": {
        loc: {
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 12
          },
          end: {
            line: 34,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "6": {
        loc: {
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 35,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 35,
            column: 68
          }
        }, {
          start: {
            line: 35,
            column: 72
          },
          end: {
            line: 35,
            column: 74
          }
        }],
        line: 35
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 12
          },
          end: {
            line: 41,
            column: 13
          }
        }, {
          start: {
            line: 39,
            column: 17
          },
          end: {
            line: 41,
            column: 13
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 46,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "9": {
        loc: {
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: 91,
            column: 17
          },
          end: {
            line: 94,
            column: 13
          }
        }],
        line: 87
      },
      "10": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 107,
            column: 9
          }
        }],
        line: 102
      },
      "11": {
        loc: {
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 102,
            column: 12
          },
          end: {
            line: 102,
            column: 38
          }
        }, {
          start: {
            line: 102,
            column: 42
          },
          end: {
            line: 102,
            column: 70
          }
        }],
        line: 102
      },
      "12": {
        loc: {
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 107,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 13
          },
          end: {
            line: 107,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "13": {
        loc: {
          start: {
            line: 137,
            column: 62
          },
          end: {
            line: 137,
            column: 106
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 137,
            column: 62
          },
          end: {
            line: 137,
            column: 71
          }
        }, {
          start: {
            line: 137,
            column: 75
          },
          end: {
            line: 137,
            column: 82
          }
        }, {
          start: {
            line: 137,
            column: 86
          },
          end: {
            line: 137,
            column: 106
          }
        }],
        line: 137
      },
      "14": {
        loc: {
          start: {
            line: 139,
            column: 64
          },
          end: {
            line: 139,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 139,
            column: 64
          },
          end: {
            line: 139,
            column: 74
          }
        }, {
          start: {
            line: 139,
            column: 78
          },
          end: {
            line: 139,
            column: 90
          }
        }],
        line: 139
      },
      "15": {
        loc: {
          start: {
            line: 140,
            column: 60
          },
          end: {
            line: 140,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 140,
            column: 60
          },
          end: {
            line: 140,
            column: 70
          }
        }, {
          start: {
            line: 140,
            column: 74
          },
          end: {
            line: 140,
            column: 85
          }
        }],
        line: 140
      },
      "16": {
        loc: {
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 29
          },
          end: {
            line: 144,
            column: 39
          }
        }, {
          start: {
            line: 144,
            column: 43
          },
          end: {
            line: 144,
            column: 54
          }
        }, {
          start: {
            line: 144,
            column: 58
          },
          end: {
            line: 144,
            column: 69
          }
        }],
        line: 144
      },
      "17": {
        loc: {
          start: {
            line: 146,
            column: 41
          },
          end: {
            line: 148,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 147,
            column: 18
          },
          end: {
            line: 147,
            column: 93
          }
        }, {
          start: {
            line: 148,
            column: 18
          },
          end: {
            line: 148,
            column: 19
          }
        }],
        line: 146
      },
      "18": {
        loc: {
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 149,
            column: 54
          },
          end: {
            line: 149,
            column: 105
          }
        }, {
          start: {
            line: 149,
            column: 108
          },
          end: {
            line: 149,
            column: 109
          }
        }],
        line: 149
      },
      "19": {
        loc: {
          start: {
            line: 180,
            column: 54
          },
          end: {
            line: 180,
            column: 110
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 79
          },
          end: {
            line: 180,
            column: 92
          }
        }, {
          start: {
            line: 180,
            column: 95
          },
          end: {
            line: 180,
            column: 110
          }
        }],
        line: 180
      },
      "20": {
        loc: {
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 198,
            column: 12
          },
          end: {
            line: 201,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 198
      },
      "21": {
        loc: {
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 12
          },
          end: {
            line: 205,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "22": {
        loc: {
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 16
          },
          end: {
            line: 202,
            column: 31
          }
        }, {
          start: {
            line: 202,
            column: 35
          },
          end: {
            line: 202,
            column: 62
          }
        }],
        line: 202
      },
      "23": {
        loc: {
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 209,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 72
          }
        }, {
          start: {
            line: 209,
            column: 76
          },
          end: {
            line: 209,
            column: 85
          }
        }],
        line: 209
      },
      "24": {
        loc: {
          start: {
            line: 209,
            column: 38
          },
          end: {
            line: 209,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 52
          },
          end: {
            line: 209,
            column: 60
          }
        }, {
          start: {
            line: 209,
            column: 63
          },
          end: {
            line: 209,
            column: 72
          }
        }],
        line: 209
      },
      "25": {
        loc: {
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 212,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 22
          },
          end: {
            line: 211,
            column: 87
          }
        }, {
          start: {
            line: 212,
            column: 22
          },
          end: {
            line: 212,
            column: 23
          }
        }],
        line: 210
      },
      "26": {
        loc: {
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 210,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 31
          },
          end: {
            line: 210,
            column: 41
          }
        }, {
          start: {
            line: 210,
            column: 45
          },
          end: {
            line: 210,
            column: 56
          }
        }, {
          start: {
            line: 210,
            column: 60
          },
          end: {
            line: 210,
            column: 71
          }
        }],
        line: 210
      },
      "27": {
        loc: {
          start: {
            line: 214,
            column: 23
          },
          end: {
            line: 214,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 214,
            column: 37
          },
          end: {
            line: 214,
            column: 56
          }
        }, {
          start: {
            line: 214,
            column: 59
          },
          end: {
            line: 214,
            column: 68
          }
        }],
        line: 214
      },
      "28": {
        loc: {
          start: {
            line: 219,
            column: 32
          },
          end: {
            line: 221,
            column: 21
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 220,
            column: 18
          },
          end: {
            line: 220,
            column: 81
          }
        }, {
          start: {
            line: 221,
            column: 18
          },
          end: {
            line: 221,
            column: 21
          }
        }],
        line: 219
      },
      "29": {
        loc: {
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 29
          },
          end: {
            line: 224,
            column: 51
          }
        }, {
          start: {
            line: 224,
            column: 55
          },
          end: {
            line: 224,
            column: 74
          }
        }],
        line: 224
      },
      "30": {
        loc: {
          start: {
            line: 226,
            column: 41
          },
          end: {
            line: 228,
            column: 19
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 227,
            column: 18
          },
          end: {
            line: 227,
            column: 93
          }
        }, {
          start: {
            line: 228,
            column: 18
          },
          end: {
            line: 228,
            column: 19
          }
        }],
        line: 226
      },
      "31": {
        loc: {
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 12
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: 234,
            column: 17
          },
          end: {
            line: 236,
            column: 13
          }
        }],
        line: 231
      },
      "32": {
        loc: {
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 16
          },
          end: {
            line: 231,
            column: 33
          }
        }, {
          start: {
            line: 231,
            column: 37
          },
          end: {
            line: 231,
            column: 53
          }
        }],
        line: 231
      },
      "33": {
        loc: {
          start: {
            line: 234,
            column: 17
          },
          end: {
            line: 236,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 234,
            column: 17
          },
          end: {
            line: 236,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 234
      },
      "34": {
        loc: {
          start: {
            line: 234,
            column: 21
          },
          end: {
            line: 234,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 234,
            column: 21
          },
          end: {
            line: 234,
            column: 37
          }
        }, {
          start: {
            line: 234,
            column: 41
          },
          end: {
            line: 234,
            column: 69
          }
        }],
        line: 234
      },
      "35": {
        loc: {
          start: {
            line: 238,
            column: 34
          },
          end: {
            line: 238,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 238,
            column: 34
          },
          end: {
            line: 238,
            column: 48
          }
        }, {
          start: {
            line: 238,
            column: 52
          },
          end: {
            line: 238,
            column: 54
          }
        }],
        line: 238
      },
      "36": {
        loc: {
          start: {
            line: 242,
            column: 24
          },
          end: {
            line: 242,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 242,
            column: 40
          },
          end: {
            line: 242,
            column: 60
          }
        }, {
          start: {
            line: 242,
            column: 63
          },
          end: {
            line: 242,
            column: 65
          }
        }],
        line: 242
      },
      "37": {
        loc: {
          start: {
            line: 265,
            column: 67
          },
          end: {
            line: 265,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 265,
            column: 92
          },
          end: {
            line: 265,
            column: 105
          }
        }, {
          start: {
            line: 265,
            column: 108
          },
          end: {
            line: 265,
            column: 123
          }
        }],
        line: 265
      },
      "38": {
        loc: {
          start: {
            line: 280,
            column: 29
          },
          end: {
            line: 280,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 60
          },
          end: {
            line: 280,
            column: 69
          }
        }, {
          start: {
            line: 280,
            column: 72
          },
          end: {
            line: 280,
            column: 95
          }
        }],
        line: 280
      },
      "39": {
        loc: {
          start: {
            line: 327,
            column: 23
          },
          end: {
            line: 327,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 327,
            column: 48
          },
          end: {
            line: 327,
            column: 61
          }
        }, {
          start: {
            line: 327,
            column: 64
          },
          end: {
            line: 327,
            column: 79
          }
        }],
        line: 327
      },
      "40": {
        loc: {
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 8
          },
          end: {
            line: 346,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "41": {
        loc: {
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 347,
            column: 8
          },
          end: {
            line: 350,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 347
      },
      "42": {
        loc: {
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 351,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 351
      },
      "43": {
        loc: {
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 356,
            column: 8
          },
          end: {
            line: 359,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 356
      },
      "44": {
        loc: {
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 360,
            column: 8
          },
          end: {
            line: 363,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 360
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/monitoringClient.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/client/monitoringClient.ts"],
      sourcesContent: ["import fetch from 'node-fetch';\nimport { N8nClient } from './n8nClient.js';\nimport { SystemResourceUsage, SystemDiagnostics } from '../types/monitoringTypes.js';\n\nexport interface HealthCheckResponse {\n  status: 'healthy' | 'warning' | 'critical' | 'degraded';\n  version: string;\n  uptime: number;\n  database: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  redis?: {\n    status: 'connected' | 'disconnected' | 'error';\n    responseTime: number;\n  };\n  filesystem: {\n    status: 'accessible' | 'error';\n    permissions: 'read-write' | 'read-only' | 'no-access';\n  };\n}\n\nexport interface MetricsResponse {\n  timestamp: string;\n  executions: {\n    total: number;\n    successful: number;\n    failed: number;\n    running: number;\n    waiting: number;\n  };\n  workflows: {\n    total: number;\n    active: number;\n    inactive: number;\n    withIssues: number;\n  };\n  performance: {\n    averageExecutionTime: number;\n    throughput: number; // executions per minute\n    errorRate: number;\n  };\n  system: SystemResourceUsage;\n}\n\nexport interface WorkflowDiagnosticsResponse {\n  workflowId: string;\n  workflowName: string;\n  health: {\n    status: 'healthy' | 'warning' | 'critical';\n    issues: string[];\n    recommendations: string[];\n  };\n  performance: {\n    averageExecutionTime: number;\n    successRate: number;\n    recentExecutions: Array<{\n      id: string;\n      status: string;\n      executionTime: number;\n      timestamp: string;\n      error?: string;\n    }>;\n  };\n  nodes: Array<{\n    id: string;\n    name: string;\n    type: string;\n    issues: string[];\n    performance: {\n      averageTime: number;\n      successRate: number;\n    };\n  }>;\n}\n\nexport class MonitoringClient {\n  constructor(\n    private client: N8nClient,\n    private baseUrl: string,\n    private apiKey: string\n  ) {\n    // Remove trailing slash if present\n    this.baseUrl = baseUrl.replace(/\\/$/, '');\n  }\n\n  private async makeRequest<T>(\n    endpoint: string,\n    options: Record<string, unknown> = {}\n  ): Promise<T> {\n    const url = `${this.baseUrl}/api/v1${endpoint}`;\n    const headers = {\n      'X-N8N-API-KEY': this.apiKey,\n      'Content-Type': 'application/json',\n      ...((options.headers as Record<string, string>) || {}),\n    };\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      } as any);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        throw new Error(`HTTP ${response.status}: ${errorText}`);\n      }\n\n      const contentType = response.headers.get('content-type') || '';\n      if (contentType.includes('application/json')) {\n        return (await response.json()) as T;\n      } else {\n        return (await response.text()) as unknown as T;\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        throw new Error(`Monitoring request failed: ${error.message}`);\n      }\n      throw new Error('Monitoring request failed with unknown error');\n    }\n  }\n\n  /**\n   * Get system health status\n   */\n  async getHealthCheck(): Promise<HealthCheckResponse> {\n    try {\n      // Try the standard n8n health endpoint\n      return await this.makeRequest<HealthCheckResponse>('/health');\n    } catch (error) {\n      // Fallback to manual health check using available endpoints\n      return await this.performManualHealthCheck();\n    }\n  }\n\n  /**\n   * Manual health check using available n8n API endpoints\n   */\n  private async performManualHealthCheck(): Promise<HealthCheckResponse> {\n    const startTime = Date.now();\n    let databaseStatus: 'connected' | 'disconnected' | 'error' = 'disconnected';\n    let databaseResponseTime = 0;\n\n    try {\n      // Test database connectivity by fetching workflows\n      const dbStart = Date.now();\n      await this.client.getWorkflows({ limit: 1 });\n      databaseResponseTime = Date.now() - dbStart;\n      databaseStatus = 'connected';\n    } catch (error) {\n      databaseStatus = 'error';\n      databaseResponseTime = Date.now() - startTime;\n    }\n\n    // Check filesystem access\n    let filesystemStatus: 'accessible' | 'error' = 'accessible';\n    let filesystemPermissions: 'read-write' | 'read-only' | 'no-access' = 'read-write';\n\n    try {\n      // This would typically check file system access\n      // For now, assume accessible if we can make API calls\n      if (databaseStatus === 'connected') {\n        filesystemStatus = 'accessible';\n        filesystemPermissions = 'read-write';\n      } else {\n        filesystemStatus = 'error';\n        filesystemPermissions = 'no-access';\n      }\n    } catch {\n      filesystemStatus = 'error';\n      filesystemPermissions = 'no-access';\n    }\n\n    // Determine overall status\n    let overallStatus: 'healthy' | 'warning' | 'critical' | 'degraded' = 'healthy';\n    if (databaseStatus === 'error' || filesystemStatus === 'error') {\n      overallStatus = 'critical';\n    } else if (databaseResponseTime > 1000) {\n      overallStatus = 'warning';\n    }\n\n    return {\n      status: overallStatus,\n      version: 'unknown', // Would need to be fetched from n8n API if available\n      uptime: process.uptime(),\n      database: {\n        status: databaseStatus,\n        responseTime: databaseResponseTime,\n      },\n      filesystem: {\n        status: filesystemStatus,\n        permissions: filesystemPermissions,\n      },\n    };\n  }\n\n  /**\n   * Get comprehensive system metrics\n   */\n  async getMetrics(): Promise<MetricsResponse> {\n    try {\n      // Fetch data in parallel\n      const [workflowsResponse, executionsResponse] = await Promise.all([\n        this.client.getWorkflows({ limit: 1000 }), // Get all workflows for analysis\n        this.client.getExecutions({ limit: 100 }), // Get recent executions\n      ]);\n\n      // Extract data from API response wrappers\n      const workflows = workflowsResponse.data;\n      const executions = executionsResponse.data;\n\n      // Analyze workflow states\n      const activeWorkflows = workflows.filter(w => w.active);\n      const workflowsWithIssues = workflows.filter(\n        w => !w.active && w.nodes && w.nodes.length === 0\n      );\n\n      // Analyze execution stats\n      const successfulExecutions = executions.filter(e => e.finished && !e.stoppedAt);\n      const failedExecutions = executions.filter(e => e.finished && e.stoppedAt);\n      const runningExecutions = executions.filter(e => !e.finished);\n\n      // Calculate performance metrics\n      const executionTimes = executions\n        .filter(e => e.finished && e.startedAt && e.stoppedAt)\n        .map(e => new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime());\n\n      const averageExecutionTime =\n        executionTimes.length > 0\n          ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length\n          : 0;\n\n      const errorRate =\n        executions.length > 0 ? (failedExecutions.length / executions.length) * 100 : 0;\n\n      // Calculate throughput (executions per minute in last hour)\n      const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);\n      const recentExecutions = executions.filter(e => new Date(e.startedAt) > oneHourAgo);\n      const throughput = recentExecutions.length / 60; // per minute\n\n      // Get system resource usage\n      const systemUsage = this.getSystemResourceUsage();\n\n      return {\n        timestamp: new Date().toISOString(),\n        executions: {\n          total: executions.length,\n          successful: successfulExecutions.length,\n          failed: failedExecutions.length,\n          running: runningExecutions.length,\n          waiting: 0, // Would need to be calculated from queue if available\n        },\n        workflows: {\n          total: workflows.length,\n          active: activeWorkflows.length,\n          inactive: workflows.length - activeWorkflows.length,\n          withIssues: workflowsWithIssues.length,\n        },\n        performance: {\n          averageExecutionTime,\n          throughput,\n          errorRate,\n        },\n        system: systemUsage,\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get metrics: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get detailed workflow diagnostics\n   */\n  async getWorkflowDiagnostics(workflowId: string): Promise<WorkflowDiagnosticsResponse> {\n    try {\n      const [workflow, executionsResponse] = await Promise.all([\n        this.client.getWorkflow(workflowId),\n        this.client.getExecutions({ limit: 100 }), // Get more executions to filter by workflowId\n      ]);\n\n      // Extract executions data from API response wrapper and filter by workflowId\n      const allExecutions = executionsResponse.data;\n      const executions = allExecutions.filter(e => e.workflowId === workflowId).slice(0, 50);\n\n      // Analyze workflow health\n      const issues: string[] = [];\n      const recommendations: string[] = [];\n\n      if (!workflow.active) {\n        issues.push('Workflow is inactive');\n        recommendations.push('Consider activating the workflow if it should be running');\n      }\n\n      if (!workflow.nodes || workflow.nodes.length === 0) {\n        issues.push('Workflow has no nodes');\n        recommendations.push('Add nodes to define workflow logic');\n      }\n\n      // Analyze recent executions\n      const recentExecutions = executions.slice(0, 10).map(e => ({\n        id: e.id!,\n        status: e.finished ? (e.stoppedAt ? 'failed' : 'success') : 'running',\n        executionTime:\n          e.finished && e.startedAt && e.stoppedAt\n            ? new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime()\n            : 0,\n        timestamp: e.startedAt,\n        error: e.stoppedAt ? 'Execution stopped' : undefined,\n      }));\n\n      // Calculate success rate\n      const finishedExecutions = executions.filter(e => e.finished);\n      const successfulExecutions = finishedExecutions.filter(e => !e.stoppedAt);\n      const successRate =\n        finishedExecutions.length > 0\n          ? (successfulExecutions.length / finishedExecutions.length) * 100\n          : 100;\n\n      // Calculate average execution time\n      const executionTimes = recentExecutions\n        .filter(e => e.status === 'success' && e.executionTime > 0)\n        .map(e => e.executionTime);\n      const averageExecutionTime =\n        executionTimes.length > 0\n          ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length\n          : 0;\n\n      // Determine health status\n      let healthStatus: 'healthy' | 'warning' | 'critical' = 'healthy';\n      if (issues.length > 0 || successRate < 80) {\n        healthStatus = 'critical';\n      } else if (successRate < 95 || averageExecutionTime > 30000) {\n        healthStatus = 'warning';\n      }\n\n      // Analyze nodes\n      const nodeAnalysis = (workflow.nodes || []).map(node => ({\n        id: node.id,\n        name: node.name,\n        type: node.type,\n        issues: node.disabled ? ['Node is disabled'] : [],\n        performance: {\n          averageTime: 0, // Would need execution details to calculate\n          successRate: 100, // Would need execution details to calculate\n        },\n      }));\n\n      return {\n        workflowId: workflow.id!,\n        workflowName: workflow.name,\n        health: {\n          status: healthStatus,\n          issues,\n          recommendations,\n        },\n        performance: {\n          averageExecutionTime,\n          successRate,\n          recentExecutions,\n        },\n        nodes: nodeAnalysis,\n      };\n    } catch (error) {\n      throw new Error(\n        `Failed to get workflow diagnostics: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Get current system resource usage\n   */\n  getSystemResourceUsage(): SystemResourceUsage {\n    const memUsage = process.memoryUsage();\n    const cpuUsage = process.cpuUsage();\n\n    // Convert CPU usage to percentage (simplified)\n    const cpuPercent = ((cpuUsage.user + cpuUsage.system) / 1000000 / process.uptime()) * 100;\n\n    return {\n      cpu: {\n        totalUsage: Math.min(cpuPercent, 100), // Cap at 100%\n        processUsage: Math.min(cpuPercent, 100),\n        loadAverage: process.platform === 'win32' ? [0, 0, 0] : require('os').loadavg(),\n        coreCount: require('os').cpus().length,\n      },\n      memory: {\n        totalMemory: require('os').totalmem(),\n        freeMemory: require('os').freemem(),\n        usedMemory: require('os').totalmem() - require('os').freemem(),\n        processMemory: {\n          heapUsed: memUsage.heapUsed,\n          heapTotal: memUsage.heapTotal,\n          external: memUsage.external,\n          rss: memUsage.rss,\n        },\n        utilization:\n          ((require('os').totalmem() - require('os').freemem()) / require('os').totalmem()) * 100,\n      },\n      disk: {\n        totalSpace: 0, // Would need filesystem API to get real values\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      },\n      network: {\n        bytesReceived: 0, // Would need network statistics\n        bytesSent: 0,\n        packetsReceived: 0,\n        packetsSent: 0,\n      },\n      uptime: process.uptime(),\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  /**\n   * Test connectivity to n8n instance\n   */\n  async testConnectivity(): Promise<{ success: boolean; responseTime: number; error?: string }> {\n    const startTime = Date.now();\n\n    try {\n      await this.client.getWorkflows({ limit: 1 });\n      return {\n        success: true,\n        responseTime: Date.now() - startTime,\n      };\n    } catch (error) {\n      return {\n        success: false,\n        responseTime: Date.now() - startTime,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  /**\n   * Get system diagnostics for troubleshooting\n   */\n  async getSystemDiagnostics(): Promise<SystemDiagnostics> {\n    const [healthCheck, connectivity, systemUsage] = await Promise.all([\n      this.getHealthCheck(),\n      this.testConnectivity(),\n      Promise.resolve(this.getSystemResourceUsage()),\n    ]);\n\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n\n    // Analyze health issues\n    if (healthCheck.status === 'critical') {\n      issues.push('System health is critical');\n      recommendations.push('Check database connectivity and file system permissions');\n    }\n\n    if (!connectivity.success) {\n      issues.push(`API connectivity failed: ${connectivity.error}`);\n      recommendations.push('Verify n8n instance is running and API key is correct');\n    }\n\n    if (connectivity.responseTime > 1000) {\n      issues.push('High API response time detected');\n      recommendations.push('Check network connectivity and server performance');\n    }\n\n    // Analyze resource usage\n    if (systemUsage.memory.utilization > 85) {\n      issues.push('High memory utilization detected');\n      recommendations.push('Consider increasing available memory or optimizing workflows');\n    }\n\n    if (systemUsage.cpu.totalUsage > 80) {\n      issues.push('High CPU usage detected');\n      recommendations.push('Check for resource-intensive workflows or background processes');\n    }\n\n    return {\n      timestamp: new Date().toISOString(),\n      overall: {\n        status: healthCheck.status,\n        issues,\n        recommendations,\n      },\n      connectivity: {\n        apiConnectivity: connectivity.success,\n        responseTime: connectivity.responseTime,\n        error: connectivity.error,\n      },\n      resources: systemUsage,\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform,\n        architecture: process.arch,\n        uptime: process.uptime(),\n      },\n    };\n  }\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ba681e2d0c60f857219891de1381afb06b5fe070"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_uydxqjgb0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_uydxqjgb0();
var __importDefault =
/* istanbul ignore next */
(cov_uydxqjgb0().s[0]++,
/* istanbul ignore next */
(cov_uydxqjgb0().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_uydxqjgb0().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_uydxqjgb0().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_uydxqjgb0().f[0]++;
  cov_uydxqjgb0().s[1]++;
  return /* istanbul ignore next */(cov_uydxqjgb0().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_uydxqjgb0().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_uydxqjgb0().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_uydxqjgb0().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_uydxqjgb0().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_uydxqjgb0().s[3]++;
exports.MonitoringClient = void 0;
const node_fetch_1 =
/* istanbul ignore next */
(cov_uydxqjgb0().s[4]++, __importDefault(require("node-fetch")));
class MonitoringClient {
  client;
  baseUrl;
  apiKey;
  constructor(client, baseUrl, apiKey) {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[1]++;
    cov_uydxqjgb0().s[5]++;
    this.client = client;
    /* istanbul ignore next */
    cov_uydxqjgb0().s[6]++;
    this.baseUrl = baseUrl;
    /* istanbul ignore next */
    cov_uydxqjgb0().s[7]++;
    this.apiKey = apiKey;
    // Remove trailing slash if present
    /* istanbul ignore next */
    cov_uydxqjgb0().s[8]++;
    this.baseUrl = baseUrl.replace(/\/$/, '');
  }
  async makeRequest(endpoint, options =
  /* istanbul ignore next */
  (cov_uydxqjgb0().b[3][0]++, {})) {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[2]++;
    const url =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[9]++, `${this.baseUrl}/api/v1${endpoint}`);
    const headers =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[10]++, {
      'X-N8N-API-KEY': this.apiKey,
      'Content-Type': 'application/json',
      ...(
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[4][0]++, options.headers) ||
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[4][1]++, {}))
    });
    /* istanbul ignore next */
    cov_uydxqjgb0().s[11]++;
    try {
      const response =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[12]++, await (0, node_fetch_1.default)(url, {
        ...options,
        headers
      }));
      /* istanbul ignore next */
      cov_uydxqjgb0().s[13]++;
      if (!response.ok) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[5][0]++;
        const errorText =
        /* istanbul ignore next */
        (cov_uydxqjgb0().s[14]++, await response.text());
        /* istanbul ignore next */
        cov_uydxqjgb0().s[15]++;
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      } else
      /* istanbul ignore next */
      {
        cov_uydxqjgb0().b[5][1]++;
      }
      const contentType =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[16]++,
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[6][0]++, response.headers.get('content-type')) ||
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[6][1]++, ''));
      /* istanbul ignore next */
      cov_uydxqjgb0().s[17]++;
      if (contentType.includes('application/json')) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[7][0]++;
        cov_uydxqjgb0().s[18]++;
        return await response.json();
      } else {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[7][1]++;
        cov_uydxqjgb0().s[19]++;
        return await response.text();
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[20]++;
      if (error instanceof Error) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[8][0]++;
        cov_uydxqjgb0().s[21]++;
        throw new Error(`Monitoring request failed: ${error.message}`);
      } else
      /* istanbul ignore next */
      {
        cov_uydxqjgb0().b[8][1]++;
      }
      cov_uydxqjgb0().s[22]++;
      throw new Error('Monitoring request failed with unknown error');
    }
  }
  /**
   * Get system health status
   */
  async getHealthCheck() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[3]++;
    cov_uydxqjgb0().s[23]++;
    try {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[24]++;
      // Try the standard n8n health endpoint
      return await this.makeRequest('/health');
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[25]++;
      // Fallback to manual health check using available endpoints
      return await this.performManualHealthCheck();
    }
  }
  /**
   * Manual health check using available n8n API endpoints
   */
  async performManualHealthCheck() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[4]++;
    const startTime =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[26]++, Date.now());
    let databaseStatus =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[27]++, 'disconnected');
    let databaseResponseTime =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[28]++, 0);
    /* istanbul ignore next */
    cov_uydxqjgb0().s[29]++;
    try {
      // Test database connectivity by fetching workflows
      const dbStart =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[30]++, Date.now());
      /* istanbul ignore next */
      cov_uydxqjgb0().s[31]++;
      await this.client.getWorkflows({
        limit: 1
      });
      /* istanbul ignore next */
      cov_uydxqjgb0().s[32]++;
      databaseResponseTime = Date.now() - dbStart;
      /* istanbul ignore next */
      cov_uydxqjgb0().s[33]++;
      databaseStatus = 'connected';
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[34]++;
      databaseStatus = 'error';
      /* istanbul ignore next */
      cov_uydxqjgb0().s[35]++;
      databaseResponseTime = Date.now() - startTime;
    }
    // Check filesystem access
    let filesystemStatus =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[36]++, 'accessible');
    let filesystemPermissions =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[37]++, 'read-write');
    /* istanbul ignore next */
    cov_uydxqjgb0().s[38]++;
    try {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[39]++;
      // This would typically check file system access
      // For now, assume accessible if we can make API calls
      if (databaseStatus === 'connected') {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[9][0]++;
        cov_uydxqjgb0().s[40]++;
        filesystemStatus = 'accessible';
        /* istanbul ignore next */
        cov_uydxqjgb0().s[41]++;
        filesystemPermissions = 'read-write';
      } else {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[9][1]++;
        cov_uydxqjgb0().s[42]++;
        filesystemStatus = 'error';
        /* istanbul ignore next */
        cov_uydxqjgb0().s[43]++;
        filesystemPermissions = 'no-access';
      }
    } catch {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[44]++;
      filesystemStatus = 'error';
      /* istanbul ignore next */
      cov_uydxqjgb0().s[45]++;
      filesystemPermissions = 'no-access';
    }
    // Determine overall status
    let overallStatus =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[46]++, 'healthy');
    /* istanbul ignore next */
    cov_uydxqjgb0().s[47]++;
    if (
    /* istanbul ignore next */
    (cov_uydxqjgb0().b[11][0]++, databaseStatus === 'error') ||
    /* istanbul ignore next */
    (cov_uydxqjgb0().b[11][1]++, filesystemStatus === 'error')) {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[10][0]++;
      cov_uydxqjgb0().s[48]++;
      overallStatus = 'critical';
    } else {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[10][1]++;
      cov_uydxqjgb0().s[49]++;
      if (databaseResponseTime > 1000) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[12][0]++;
        cov_uydxqjgb0().s[50]++;
        overallStatus = 'warning';
      } else
      /* istanbul ignore next */
      {
        cov_uydxqjgb0().b[12][1]++;
      }
    }
    /* istanbul ignore next */
    cov_uydxqjgb0().s[51]++;
    return {
      status: overallStatus,
      version: 'unknown',
      // Would need to be fetched from n8n API if available
      uptime: process.uptime(),
      database: {
        status: databaseStatus,
        responseTime: databaseResponseTime
      },
      filesystem: {
        status: filesystemStatus,
        permissions: filesystemPermissions
      }
    };
  }
  /**
   * Get comprehensive system metrics
   */
  async getMetrics() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[5]++;
    cov_uydxqjgb0().s[52]++;
    try {
      // Fetch data in parallel
      const [workflowsResponse, executionsResponse] =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[53]++, await Promise.all([this.client.getWorkflows({
        limit: 1000
      }),
      // Get all workflows for analysis
      this.client.getExecutions({
        limit: 100
      }) // Get recent executions
      ]));
      // Extract data from API response wrappers
      const workflows =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[54]++, workflowsResponse.data);
      const executions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[55]++, executionsResponse.data);
      // Analyze workflow states
      const activeWorkflows =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[56]++, workflows.filter(w => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[6]++;
        cov_uydxqjgb0().s[57]++;
        return w.active;
      }));
      const workflowsWithIssues =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[58]++, workflows.filter(w => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[7]++;
        cov_uydxqjgb0().s[59]++;
        return /* istanbul ignore next */(cov_uydxqjgb0().b[13][0]++, !w.active) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[13][1]++, w.nodes) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[13][2]++, w.nodes.length === 0);
      }));
      // Analyze execution stats
      const successfulExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[60]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[8]++;
        cov_uydxqjgb0().s[61]++;
        return /* istanbul ignore next */(cov_uydxqjgb0().b[14][0]++, e.finished) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[14][1]++, !e.stoppedAt);
      }));
      const failedExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[62]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[9]++;
        cov_uydxqjgb0().s[63]++;
        return /* istanbul ignore next */(cov_uydxqjgb0().b[15][0]++, e.finished) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[15][1]++, e.stoppedAt);
      }));
      const runningExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[64]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[10]++;
        cov_uydxqjgb0().s[65]++;
        return !e.finished;
      }));
      // Calculate performance metrics
      const executionTimes =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[66]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[11]++;
        cov_uydxqjgb0().s[67]++;
        return /* istanbul ignore next */(cov_uydxqjgb0().b[16][0]++, e.finished) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[16][1]++, e.startedAt) &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[16][2]++, e.stoppedAt);
      }).map(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[12]++;
        cov_uydxqjgb0().s[68]++;
        return new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime();
      }));
      const averageExecutionTime =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[69]++, executionTimes.length > 0 ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[17][0]++, executionTimes.reduce((sum, time) => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[13]++;
        cov_uydxqjgb0().s[70]++;
        return sum + time;
      }, 0) / executionTimes.length) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[17][1]++, 0));
      const errorRate =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[71]++, executions.length > 0 ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[18][0]++, failedExecutions.length / executions.length * 100) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[18][1]++, 0));
      // Calculate throughput (executions per minute in last hour)
      const oneHourAgo =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[72]++, new Date(Date.now() - 60 * 60 * 1000));
      const recentExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[73]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[14]++;
        cov_uydxqjgb0().s[74]++;
        return new Date(e.startedAt) > oneHourAgo;
      }));
      const throughput =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[75]++, recentExecutions.length / 60); // per minute
      // Get system resource usage
      const systemUsage =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[76]++, this.getSystemResourceUsage());
      /* istanbul ignore next */
      cov_uydxqjgb0().s[77]++;
      return {
        timestamp: new Date().toISOString(),
        executions: {
          total: executions.length,
          successful: successfulExecutions.length,
          failed: failedExecutions.length,
          running: runningExecutions.length,
          waiting: 0 // Would need to be calculated from queue if available
        },
        workflows: {
          total: workflows.length,
          active: activeWorkflows.length,
          inactive: workflows.length - activeWorkflows.length,
          withIssues: workflowsWithIssues.length
        },
        performance: {
          averageExecutionTime,
          throughput,
          errorRate
        },
        system: systemUsage
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[78]++;
      throw new Error(`Failed to get metrics: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[19][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get detailed workflow diagnostics
   */
  async getWorkflowDiagnostics(workflowId) {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[15]++;
    cov_uydxqjgb0().s[79]++;
    try {
      const [workflow, executionsResponse] =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[80]++, await Promise.all([this.client.getWorkflow(workflowId), this.client.getExecutions({
        limit: 100
      }) // Get more executions to filter by workflowId
      ]));
      // Extract executions data from API response wrapper and filter by workflowId
      const allExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[81]++, executionsResponse.data);
      const executions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[82]++, allExecutions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[16]++;
        cov_uydxqjgb0().s[83]++;
        return e.workflowId === workflowId;
      }).slice(0, 50));
      // Analyze workflow health
      const issues =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[84]++, []);
      const recommendations =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[85]++, []);
      /* istanbul ignore next */
      cov_uydxqjgb0().s[86]++;
      if (!workflow.active) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[20][0]++;
        cov_uydxqjgb0().s[87]++;
        issues.push('Workflow is inactive');
        /* istanbul ignore next */
        cov_uydxqjgb0().s[88]++;
        recommendations.push('Consider activating the workflow if it should be running');
      } else
      /* istanbul ignore next */
      {
        cov_uydxqjgb0().b[20][1]++;
      }
      cov_uydxqjgb0().s[89]++;
      if (
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[22][0]++, !workflow.nodes) ||
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[22][1]++, workflow.nodes.length === 0)) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[21][0]++;
        cov_uydxqjgb0().s[90]++;
        issues.push('Workflow has no nodes');
        /* istanbul ignore next */
        cov_uydxqjgb0().s[91]++;
        recommendations.push('Add nodes to define workflow logic');
      } else
      /* istanbul ignore next */
      {
        cov_uydxqjgb0().b[21][1]++;
      }
      // Analyze recent executions
      const recentExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[92]++, executions.slice(0, 10).map(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[17]++;
        cov_uydxqjgb0().s[93]++;
        return {
          id: e.id,
          status: e.finished ?
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[23][0]++, e.stoppedAt ?
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[24][0]++, 'failed') :
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[24][1]++, 'success')) :
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[23][1]++, 'running'),
          executionTime:
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[26][0]++, e.finished) &&
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[26][1]++, e.startedAt) &&
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[26][2]++, e.stoppedAt) ?
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[25][0]++, new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime()) :
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[25][1]++, 0),
          timestamp: e.startedAt,
          error: e.stoppedAt ?
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[27][0]++, 'Execution stopped') :
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[27][1]++, undefined)
        };
      }));
      // Calculate success rate
      const finishedExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[94]++, executions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[18]++;
        cov_uydxqjgb0().s[95]++;
        return e.finished;
      }));
      const successfulExecutions =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[96]++, finishedExecutions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[19]++;
        cov_uydxqjgb0().s[97]++;
        return !e.stoppedAt;
      }));
      const successRate =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[98]++, finishedExecutions.length > 0 ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[28][0]++, successfulExecutions.length / finishedExecutions.length * 100) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[28][1]++, 100));
      // Calculate average execution time
      const executionTimes =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[99]++, recentExecutions.filter(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[20]++;
        cov_uydxqjgb0().s[100]++;
        return /* istanbul ignore next */(cov_uydxqjgb0().b[29][0]++, e.status === 'success') &&
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[29][1]++, e.executionTime > 0);
      }).map(e => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[21]++;
        cov_uydxqjgb0().s[101]++;
        return e.executionTime;
      }));
      const averageExecutionTime =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[102]++, executionTimes.length > 0 ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[30][0]++, executionTimes.reduce((sum, time) => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[22]++;
        cov_uydxqjgb0().s[103]++;
        return sum + time;
      }, 0) / executionTimes.length) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[30][1]++, 0));
      // Determine health status
      let healthStatus =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[104]++, 'healthy');
      /* istanbul ignore next */
      cov_uydxqjgb0().s[105]++;
      if (
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[32][0]++, issues.length > 0) ||
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[32][1]++, successRate < 80)) {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[31][0]++;
        cov_uydxqjgb0().s[106]++;
        healthStatus = 'critical';
      } else {
        /* istanbul ignore next */
        cov_uydxqjgb0().b[31][1]++;
        cov_uydxqjgb0().s[107]++;
        if (
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[34][0]++, successRate < 95) ||
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[34][1]++, averageExecutionTime > 30000)) {
          /* istanbul ignore next */
          cov_uydxqjgb0().b[33][0]++;
          cov_uydxqjgb0().s[108]++;
          healthStatus = 'warning';
        } else
        /* istanbul ignore next */
        {
          cov_uydxqjgb0().b[33][1]++;
        }
      }
      // Analyze nodes
      const nodeAnalysis =
      /* istanbul ignore next */
      (cov_uydxqjgb0().s[109]++, (
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[35][0]++, workflow.nodes) ||
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[35][1]++, [])).map(node => {
        /* istanbul ignore next */
        cov_uydxqjgb0().f[23]++;
        cov_uydxqjgb0().s[110]++;
        return {
          id: node.id,
          name: node.name,
          type: node.type,
          issues: node.disabled ?
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[36][0]++, ['Node is disabled']) :
          /* istanbul ignore next */
          (cov_uydxqjgb0().b[36][1]++, []),
          performance: {
            averageTime: 0,
            // Would need execution details to calculate
            successRate: 100 // Would need execution details to calculate
          }
        };
      }));
      /* istanbul ignore next */
      cov_uydxqjgb0().s[111]++;
      return {
        workflowId: workflow.id,
        workflowName: workflow.name,
        health: {
          status: healthStatus,
          issues,
          recommendations
        },
        performance: {
          averageExecutionTime,
          successRate,
          recentExecutions
        },
        nodes: nodeAnalysis
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[112]++;
      throw new Error(`Failed to get workflow diagnostics: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[37][0]++, error.message) :
      /* istanbul ignore next */
      (cov_uydxqjgb0().b[37][1]++, 'Unknown error')}`);
    }
  }
  /**
   * Get current system resource usage
   */
  getSystemResourceUsage() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[24]++;
    const memUsage =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[113]++, process.memoryUsage());
    const cpuUsage =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[114]++, process.cpuUsage());
    // Convert CPU usage to percentage (simplified)
    const cpuPercent =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[115]++, (cpuUsage.user + cpuUsage.system) / 1000000 / process.uptime() * 100);
    /* istanbul ignore next */
    cov_uydxqjgb0().s[116]++;
    return {
      cpu: {
        totalUsage: Math.min(cpuPercent, 100),
        // Cap at 100%
        processUsage: Math.min(cpuPercent, 100),
        loadAverage: process.platform === 'win32' ?
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[38][0]++, [0, 0, 0]) :
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[38][1]++, require('os').loadavg()),
        coreCount: require('os').cpus().length
      },
      memory: {
        totalMemory: require('os').totalmem(),
        freeMemory: require('os').freemem(),
        usedMemory: require('os').totalmem() - require('os').freemem(),
        processMemory: {
          heapUsed: memUsage.heapUsed,
          heapTotal: memUsage.heapTotal,
          external: memUsage.external,
          rss: memUsage.rss
        },
        utilization: (require('os').totalmem() - require('os').freemem()) / require('os').totalmem() * 100
      },
      disk: {
        totalSpace: 0,
        // Would need filesystem API to get real values
        freeSpace: 0,
        usedSpace: 0,
        utilization: 0
      },
      network: {
        bytesReceived: 0,
        // Would need network statistics
        bytesSent: 0,
        packetsReceived: 0,
        packetsSent: 0
      },
      uptime: process.uptime(),
      timestamp: new Date().toISOString()
    };
  }
  /**
   * Test connectivity to n8n instance
   */
  async testConnectivity() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[25]++;
    const startTime =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[117]++, Date.now());
    /* istanbul ignore next */
    cov_uydxqjgb0().s[118]++;
    try {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[119]++;
      await this.client.getWorkflows({
        limit: 1
      });
      /* istanbul ignore next */
      cov_uydxqjgb0().s[120]++;
      return {
        success: true,
        responseTime: Date.now() - startTime
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_uydxqjgb0().s[121]++;
      return {
        success: false,
        responseTime: Date.now() - startTime,
        error: error instanceof Error ?
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[39][0]++, error.message) :
        /* istanbul ignore next */
        (cov_uydxqjgb0().b[39][1]++, 'Unknown error')
      };
    }
  }
  /**
   * Get system diagnostics for troubleshooting
   */
  async getSystemDiagnostics() {
    /* istanbul ignore next */
    cov_uydxqjgb0().f[26]++;
    const [healthCheck, connectivity, systemUsage] =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[122]++, await Promise.all([this.getHealthCheck(), this.testConnectivity(), Promise.resolve(this.getSystemResourceUsage())]));
    const issues =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[123]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_uydxqjgb0().s[124]++, []);
    // Analyze health issues
    /* istanbul ignore next */
    cov_uydxqjgb0().s[125]++;
    if (healthCheck.status === 'critical') {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[40][0]++;
      cov_uydxqjgb0().s[126]++;
      issues.push('System health is critical');
      /* istanbul ignore next */
      cov_uydxqjgb0().s[127]++;
      recommendations.push('Check database connectivity and file system permissions');
    } else
    /* istanbul ignore next */
    {
      cov_uydxqjgb0().b[40][1]++;
    }
    cov_uydxqjgb0().s[128]++;
    if (!connectivity.success) {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[41][0]++;
      cov_uydxqjgb0().s[129]++;
      issues.push(`API connectivity failed: ${connectivity.error}`);
      /* istanbul ignore next */
      cov_uydxqjgb0().s[130]++;
      recommendations.push('Verify n8n instance is running and API key is correct');
    } else
    /* istanbul ignore next */
    {
      cov_uydxqjgb0().b[41][1]++;
    }
    cov_uydxqjgb0().s[131]++;
    if (connectivity.responseTime > 1000) {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[42][0]++;
      cov_uydxqjgb0().s[132]++;
      issues.push('High API response time detected');
      /* istanbul ignore next */
      cov_uydxqjgb0().s[133]++;
      recommendations.push('Check network connectivity and server performance');
    } else
    /* istanbul ignore next */
    {
      cov_uydxqjgb0().b[42][1]++;
    }
    // Analyze resource usage
    cov_uydxqjgb0().s[134]++;
    if (systemUsage.memory.utilization > 85) {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[43][0]++;
      cov_uydxqjgb0().s[135]++;
      issues.push('High memory utilization detected');
      /* istanbul ignore next */
      cov_uydxqjgb0().s[136]++;
      recommendations.push('Consider increasing available memory or optimizing workflows');
    } else
    /* istanbul ignore next */
    {
      cov_uydxqjgb0().b[43][1]++;
    }
    cov_uydxqjgb0().s[137]++;
    if (systemUsage.cpu.totalUsage > 80) {
      /* istanbul ignore next */
      cov_uydxqjgb0().b[44][0]++;
      cov_uydxqjgb0().s[138]++;
      issues.push('High CPU usage detected');
      /* istanbul ignore next */
      cov_uydxqjgb0().s[139]++;
      recommendations.push('Check for resource-intensive workflows or background processes');
    } else
    /* istanbul ignore next */
    {
      cov_uydxqjgb0().b[44][1]++;
    }
    cov_uydxqjgb0().s[140]++;
    return {
      timestamp: new Date().toISOString(),
      overall: {
        status: healthCheck.status,
        issues,
        recommendations
      },
      connectivity: {
        apiConnectivity: connectivity.success,
        responseTime: connectivity.responseTime,
        error: connectivity.error
      },
      resources: systemUsage,
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        architecture: process.arch,
        uptime: process.uptime()
      }
    };
  }
}
/* istanbul ignore next */
cov_uydxqjgb0().s[141]++;
exports.MonitoringClient = MonitoringClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfdXlkeHFqZ2IwIiwiYWN0dWFsQ292ZXJhZ2UiLCJub2RlX2ZldGNoXzEiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsIk1vbml0b3JpbmdDbGllbnQiLCJjbGllbnQiLCJiYXNlVXJsIiwiYXBpS2V5IiwiY29uc3RydWN0b3IiLCJmIiwicmVwbGFjZSIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnQiLCJvcHRpb25zIiwiYiIsInVybCIsImhlYWRlcnMiLCJyZXNwb25zZSIsImRlZmF1bHQiLCJvayIsImVycm9yVGV4dCIsInRleHQiLCJFcnJvciIsInN0YXR1cyIsImNvbnRlbnRUeXBlIiwiZ2V0IiwiaW5jbHVkZXMiLCJqc29uIiwiZXJyb3IiLCJtZXNzYWdlIiwiZ2V0SGVhbHRoQ2hlY2siLCJwZXJmb3JtTWFudWFsSGVhbHRoQ2hlY2siLCJzdGFydFRpbWUiLCJEYXRlIiwibm93IiwiZGF0YWJhc2VTdGF0dXMiLCJkYXRhYmFzZVJlc3BvbnNlVGltZSIsImRiU3RhcnQiLCJnZXRXb3JrZmxvd3MiLCJsaW1pdCIsImZpbGVzeXN0ZW1TdGF0dXMiLCJmaWxlc3lzdGVtUGVybWlzc2lvbnMiLCJvdmVyYWxsU3RhdHVzIiwidmVyc2lvbiIsInVwdGltZSIsInByb2Nlc3MiLCJkYXRhYmFzZSIsInJlc3BvbnNlVGltZSIsImZpbGVzeXN0ZW0iLCJwZXJtaXNzaW9ucyIsImdldE1ldHJpY3MiLCJ3b3JrZmxvd3NSZXNwb25zZSIsImV4ZWN1dGlvbnNSZXNwb25zZSIsIlByb21pc2UiLCJhbGwiLCJnZXRFeGVjdXRpb25zIiwid29ya2Zsb3dzIiwiZGF0YSIsImV4ZWN1dGlvbnMiLCJhY3RpdmVXb3JrZmxvd3MiLCJmaWx0ZXIiLCJ3IiwiYWN0aXZlIiwid29ya2Zsb3dzV2l0aElzc3VlcyIsIm5vZGVzIiwibGVuZ3RoIiwic3VjY2Vzc2Z1bEV4ZWN1dGlvbnMiLCJlIiwiZmluaXNoZWQiLCJzdG9wcGVkQXQiLCJmYWlsZWRFeGVjdXRpb25zIiwicnVubmluZ0V4ZWN1dGlvbnMiLCJleGVjdXRpb25UaW1lcyIsInN0YXJ0ZWRBdCIsIm1hcCIsImdldFRpbWUiLCJhdmVyYWdlRXhlY3V0aW9uVGltZSIsInJlZHVjZSIsInN1bSIsInRpbWUiLCJlcnJvclJhdGUiLCJvbmVIb3VyQWdvIiwicmVjZW50RXhlY3V0aW9ucyIsInRocm91Z2hwdXQiLCJzeXN0ZW1Vc2FnZSIsImdldFN5c3RlbVJlc291cmNlVXNhZ2UiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsInRvdGFsIiwic3VjY2Vzc2Z1bCIsImZhaWxlZCIsInJ1bm5pbmciLCJ3YWl0aW5nIiwiaW5hY3RpdmUiLCJ3aXRoSXNzdWVzIiwicGVyZm9ybWFuY2UiLCJzeXN0ZW0iLCJnZXRXb3JrZmxvd0RpYWdub3N0aWNzIiwid29ya2Zsb3dJZCIsIndvcmtmbG93IiwiZ2V0V29ya2Zsb3ciLCJhbGxFeGVjdXRpb25zIiwic2xpY2UiLCJpc3N1ZXMiLCJyZWNvbW1lbmRhdGlvbnMiLCJwdXNoIiwiaWQiLCJleGVjdXRpb25UaW1lIiwidW5kZWZpbmVkIiwiZmluaXNoZWRFeGVjdXRpb25zIiwic3VjY2Vzc1JhdGUiLCJoZWFsdGhTdGF0dXMiLCJub2RlQW5hbHlzaXMiLCJub2RlIiwibmFtZSIsInR5cGUiLCJkaXNhYmxlZCIsImF2ZXJhZ2VUaW1lIiwid29ya2Zsb3dOYW1lIiwiaGVhbHRoIiwibWVtVXNhZ2UiLCJtZW1vcnlVc2FnZSIsImNwdVVzYWdlIiwiY3B1UGVyY2VudCIsInVzZXIiLCJjcHUiLCJ0b3RhbFVzYWdlIiwiTWF0aCIsIm1pbiIsInByb2Nlc3NVc2FnZSIsImxvYWRBdmVyYWdlIiwicGxhdGZvcm0iLCJsb2FkYXZnIiwiY29yZUNvdW50IiwiY3B1cyIsIm1lbW9yeSIsInRvdGFsTWVtb3J5IiwidG90YWxtZW0iLCJmcmVlTWVtb3J5IiwiZnJlZW1lbSIsInVzZWRNZW1vcnkiLCJwcm9jZXNzTWVtb3J5IiwiaGVhcFVzZWQiLCJoZWFwVG90YWwiLCJleHRlcm5hbCIsInJzcyIsInV0aWxpemF0aW9uIiwiZGlzayIsInRvdGFsU3BhY2UiLCJmcmVlU3BhY2UiLCJ1c2VkU3BhY2UiLCJuZXR3b3JrIiwiYnl0ZXNSZWNlaXZlZCIsImJ5dGVzU2VudCIsInBhY2tldHNSZWNlaXZlZCIsInBhY2tldHNTZW50IiwidGVzdENvbm5lY3Rpdml0eSIsInN1Y2Nlc3MiLCJnZXRTeXN0ZW1EaWFnbm9zdGljcyIsImhlYWx0aENoZWNrIiwiY29ubmVjdGl2aXR5IiwicmVzb2x2ZSIsIm92ZXJhbGwiLCJhcGlDb25uZWN0aXZpdHkiLCJyZXNvdXJjZXMiLCJlbnZpcm9ubWVudCIsIm5vZGVWZXJzaW9uIiwiYXJjaGl0ZWN0dXJlIiwiYXJjaCIsImV4cG9ydHMiXSwic291cmNlcyI6WyIvVXNlcnMvamVyZW15cGFya2VyL0Rlc2t0b3AvQ2xhdWRlIENvZGluZyBQcm9qZWN0cy9uOG4tbWNwLXNlcnZlci9zcmMvY2xpZW50L21vbml0b3JpbmdDbGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0IHsgTjhuQ2xpZW50IH0gZnJvbSAnLi9uOG5DbGllbnQuanMnO1xuaW1wb3J0IHsgU3lzdGVtUmVzb3VyY2VVc2FnZSwgU3lzdGVtRGlhZ25vc3RpY3MgfSBmcm9tICcuLi90eXBlcy9tb25pdG9yaW5nVHlwZXMuanMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEhlYWx0aENoZWNrUmVzcG9uc2Uge1xuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCcgfCAnZGVncmFkZWQnO1xuICB2ZXJzaW9uOiBzdHJpbmc7XG4gIHVwdGltZTogbnVtYmVyO1xuICBkYXRhYmFzZToge1xuICAgIHN0YXR1czogJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcic7XG4gICAgcmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIH07XG4gIHJlZGlzPzoge1xuICAgIHN0YXR1czogJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcic7XG4gICAgcmVzcG9uc2VUaW1lOiBudW1iZXI7XG4gIH07XG4gIGZpbGVzeXN0ZW06IHtcbiAgICBzdGF0dXM6ICdhY2Nlc3NpYmxlJyB8ICdlcnJvcic7XG4gICAgcGVybWlzc2lvbnM6ICdyZWFkLXdyaXRlJyB8ICdyZWFkLW9ubHknIHwgJ25vLWFjY2Vzcyc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWV0cmljc1Jlc3BvbnNlIHtcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIGV4ZWN1dGlvbnM6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIHN1Y2Nlc3NmdWw6IG51bWJlcjtcbiAgICBmYWlsZWQ6IG51bWJlcjtcbiAgICBydW5uaW5nOiBudW1iZXI7XG4gICAgd2FpdGluZzogbnVtYmVyO1xuICB9O1xuICB3b3JrZmxvd3M6IHtcbiAgICB0b3RhbDogbnVtYmVyO1xuICAgIGFjdGl2ZTogbnVtYmVyO1xuICAgIGluYWN0aXZlOiBudW1iZXI7XG4gICAgd2l0aElzc3VlczogbnVtYmVyO1xuICB9O1xuICBwZXJmb3JtYW5jZToge1xuICAgIGF2ZXJhZ2VFeGVjdXRpb25UaW1lOiBudW1iZXI7XG4gICAgdGhyb3VnaHB1dDogbnVtYmVyOyAvLyBleGVjdXRpb25zIHBlciBtaW51dGVcbiAgICBlcnJvclJhdGU6IG51bWJlcjtcbiAgfTtcbiAgc3lzdGVtOiBTeXN0ZW1SZXNvdXJjZVVzYWdlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtmbG93RGlhZ25vc3RpY3NSZXNwb25zZSB7XG4gIHdvcmtmbG93SWQ6IHN0cmluZztcbiAgd29ya2Zsb3dOYW1lOiBzdHJpbmc7XG4gIGhlYWx0aDoge1xuICAgIHN0YXR1czogJ2hlYWx0aHknIHwgJ3dhcm5pbmcnIHwgJ2NyaXRpY2FsJztcbiAgICBpc3N1ZXM6IHN0cmluZ1tdO1xuICAgIHJlY29tbWVuZGF0aW9uczogc3RyaW5nW107XG4gIH07XG4gIHBlcmZvcm1hbmNlOiB7XG4gICAgYXZlcmFnZUV4ZWN1dGlvblRpbWU6IG51bWJlcjtcbiAgICBzdWNjZXNzUmF0ZTogbnVtYmVyO1xuICAgIHJlY2VudEV4ZWN1dGlvbnM6IEFycmF5PHtcbiAgICAgIGlkOiBzdHJpbmc7XG4gICAgICBzdGF0dXM6IHN0cmluZztcbiAgICAgIGV4ZWN1dGlvblRpbWU6IG51bWJlcjtcbiAgICAgIHRpbWVzdGFtcDogc3RyaW5nO1xuICAgICAgZXJyb3I/OiBzdHJpbmc7XG4gICAgfT47XG4gIH07XG4gIG5vZGVzOiBBcnJheTx7XG4gICAgaWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlzc3Vlczogc3RyaW5nW107XG4gICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgIGF2ZXJhZ2VUaW1lOiBudW1iZXI7XG4gICAgICBzdWNjZXNzUmF0ZTogbnVtYmVyO1xuICAgIH07XG4gIH0+O1xufVxuXG5leHBvcnQgY2xhc3MgTW9uaXRvcmluZ0NsaWVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2xpZW50OiBOOG5DbGllbnQsXG4gICAgcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZ1xuICApIHtcbiAgICAvLyBSZW1vdmUgdHJhaWxpbmcgc2xhc2ggaWYgcHJlc2VudFxuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmwucmVwbGFjZSgvXFwvJC8sICcnKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbWFrZVJlcXVlc3Q8VD4oXG4gICAgZW5kcG9pbnQ6IHN0cmluZyxcbiAgICBvcHRpb25zOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPiA9IHt9XG4gICk6IFByb21pc2U8VD4ge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuYmFzZVVybH0vYXBpL3YxJHtlbmRwb2ludH1gO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgICAnWC1OOE4tQVBJLUtFWSc6IHRoaXMuYXBpS2V5LFxuICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC4uLigob3B0aW9ucy5oZWFkZXJzIGFzIFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHx8IHt9KSxcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICB9IGFzIGFueSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgJHtyZXNwb25zZS5zdGF0dXN9OiAke2Vycm9yVGV4dH1gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJykgfHwgJyc7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgICByZXR1cm4gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSkgYXMgVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgcmVzcG9uc2UudGV4dCgpKSBhcyB1bmtub3duIGFzIFQ7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9uaXRvcmluZyByZXF1ZXN0IGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNb25pdG9yaW5nIHJlcXVlc3QgZmFpbGVkIHdpdGggdW5rbm93biBlcnJvcicpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3lzdGVtIGhlYWx0aCBzdGF0dXNcbiAgICovXG4gIGFzeW5jIGdldEhlYWx0aENoZWNrKCk6IFByb21pc2U8SGVhbHRoQ2hlY2tSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBUcnkgdGhlIHN0YW5kYXJkIG44biBoZWFsdGggZW5kcG9pbnRcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0PEhlYWx0aENoZWNrUmVzcG9uc2U+KCcvaGVhbHRoJyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIEZhbGxiYWNrIHRvIG1hbnVhbCBoZWFsdGggY2hlY2sgdXNpbmcgYXZhaWxhYmxlIGVuZHBvaW50c1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucGVyZm9ybU1hbnVhbEhlYWx0aENoZWNrKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE1hbnVhbCBoZWFsdGggY2hlY2sgdXNpbmcgYXZhaWxhYmxlIG44biBBUEkgZW5kcG9pbnRzXG4gICAqL1xuICBwcml2YXRlIGFzeW5jIHBlcmZvcm1NYW51YWxIZWFsdGhDaGVjaygpOiBQcm9taXNlPEhlYWx0aENoZWNrUmVzcG9uc2U+IHtcbiAgICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGxldCBkYXRhYmFzZVN0YXR1czogJ2Nvbm5lY3RlZCcgfCAnZGlzY29ubmVjdGVkJyB8ICdlcnJvcicgPSAnZGlzY29ubmVjdGVkJztcbiAgICBsZXQgZGF0YWJhc2VSZXNwb25zZVRpbWUgPSAwO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRlc3QgZGF0YWJhc2UgY29ubmVjdGl2aXR5IGJ5IGZldGNoaW5nIHdvcmtmbG93c1xuICAgICAgY29uc3QgZGJTdGFydCA9IERhdGUubm93KCk7XG4gICAgICBhd2FpdCB0aGlzLmNsaWVudC5nZXRXb3JrZmxvd3MoeyBsaW1pdDogMSB9KTtcbiAgICAgIGRhdGFiYXNlUmVzcG9uc2VUaW1lID0gRGF0ZS5ub3coKSAtIGRiU3RhcnQ7XG4gICAgICBkYXRhYmFzZVN0YXR1cyA9ICdjb25uZWN0ZWQnO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkYXRhYmFzZVN0YXR1cyA9ICdlcnJvcic7XG4gICAgICBkYXRhYmFzZVJlc3BvbnNlVGltZSA9IERhdGUubm93KCkgLSBzdGFydFRpbWU7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZmlsZXN5c3RlbSBhY2Nlc3NcbiAgICBsZXQgZmlsZXN5c3RlbVN0YXR1czogJ2FjY2Vzc2libGUnIHwgJ2Vycm9yJyA9ICdhY2Nlc3NpYmxlJztcbiAgICBsZXQgZmlsZXN5c3RlbVBlcm1pc3Npb25zOiAncmVhZC13cml0ZScgfCAncmVhZC1vbmx5JyB8ICduby1hY2Nlc3MnID0gJ3JlYWQtd3JpdGUnO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoaXMgd291bGQgdHlwaWNhbGx5IGNoZWNrIGZpbGUgc3lzdGVtIGFjY2Vzc1xuICAgICAgLy8gRm9yIG5vdywgYXNzdW1lIGFjY2Vzc2libGUgaWYgd2UgY2FuIG1ha2UgQVBJIGNhbGxzXG4gICAgICBpZiAoZGF0YWJhc2VTdGF0dXMgPT09ICdjb25uZWN0ZWQnKSB7XG4gICAgICAgIGZpbGVzeXN0ZW1TdGF0dXMgPSAnYWNjZXNzaWJsZSc7XG4gICAgICAgIGZpbGVzeXN0ZW1QZXJtaXNzaW9ucyA9ICdyZWFkLXdyaXRlJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbGVzeXN0ZW1TdGF0dXMgPSAnZXJyb3InO1xuICAgICAgICBmaWxlc3lzdGVtUGVybWlzc2lvbnMgPSAnbm8tYWNjZXNzJztcbiAgICAgIH1cbiAgICB9IGNhdGNoIHtcbiAgICAgIGZpbGVzeXN0ZW1TdGF0dXMgPSAnZXJyb3InO1xuICAgICAgZmlsZXN5c3RlbVBlcm1pc3Npb25zID0gJ25vLWFjY2Vzcyc7XG4gICAgfVxuXG4gICAgLy8gRGV0ZXJtaW5lIG92ZXJhbGwgc3RhdHVzXG4gICAgbGV0IG92ZXJhbGxTdGF0dXM6ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCcgfCAnZGVncmFkZWQnID0gJ2hlYWx0aHknO1xuICAgIGlmIChkYXRhYmFzZVN0YXR1cyA9PT0gJ2Vycm9yJyB8fCBmaWxlc3lzdGVtU3RhdHVzID09PSAnZXJyb3InKSB7XG4gICAgICBvdmVyYWxsU3RhdHVzID0gJ2NyaXRpY2FsJztcbiAgICB9IGVsc2UgaWYgKGRhdGFiYXNlUmVzcG9uc2VUaW1lID4gMTAwMCkge1xuICAgICAgb3ZlcmFsbFN0YXR1cyA9ICd3YXJuaW5nJztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiBvdmVyYWxsU3RhdHVzLFxuICAgICAgdmVyc2lvbjogJ3Vua25vd24nLCAvLyBXb3VsZCBuZWVkIHRvIGJlIGZldGNoZWQgZnJvbSBuOG4gQVBJIGlmIGF2YWlsYWJsZVxuICAgICAgdXB0aW1lOiBwcm9jZXNzLnVwdGltZSgpLFxuICAgICAgZGF0YWJhc2U6IHtcbiAgICAgICAgc3RhdHVzOiBkYXRhYmFzZVN0YXR1cyxcbiAgICAgICAgcmVzcG9uc2VUaW1lOiBkYXRhYmFzZVJlc3BvbnNlVGltZSxcbiAgICAgIH0sXG4gICAgICBmaWxlc3lzdGVtOiB7XG4gICAgICAgIHN0YXR1czogZmlsZXN5c3RlbVN0YXR1cyxcbiAgICAgICAgcGVybWlzc2lvbnM6IGZpbGVzeXN0ZW1QZXJtaXNzaW9ucyxcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY29tcHJlaGVuc2l2ZSBzeXN0ZW0gbWV0cmljc1xuICAgKi9cbiAgYXN5bmMgZ2V0TWV0cmljcygpOiBQcm9taXNlPE1ldHJpY3NSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGZXRjaCBkYXRhIGluIHBhcmFsbGVsXG4gICAgICBjb25zdCBbd29ya2Zsb3dzUmVzcG9uc2UsIGV4ZWN1dGlvbnNSZXNwb25zZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMuY2xpZW50LmdldFdvcmtmbG93cyh7IGxpbWl0OiAxMDAwIH0pLCAvLyBHZXQgYWxsIHdvcmtmbG93cyBmb3IgYW5hbHlzaXNcbiAgICAgICAgdGhpcy5jbGllbnQuZ2V0RXhlY3V0aW9ucyh7IGxpbWl0OiAxMDAgfSksIC8vIEdldCByZWNlbnQgZXhlY3V0aW9uc1xuICAgICAgXSk7XG5cbiAgICAgIC8vIEV4dHJhY3QgZGF0YSBmcm9tIEFQSSByZXNwb25zZSB3cmFwcGVyc1xuICAgICAgY29uc3Qgd29ya2Zsb3dzID0gd29ya2Zsb3dzUmVzcG9uc2UuZGF0YTtcbiAgICAgIGNvbnN0IGV4ZWN1dGlvbnMgPSBleGVjdXRpb25zUmVzcG9uc2UuZGF0YTtcblxuICAgICAgLy8gQW5hbHl6ZSB3b3JrZmxvdyBzdGF0ZXNcbiAgICAgIGNvbnN0IGFjdGl2ZVdvcmtmbG93cyA9IHdvcmtmbG93cy5maWx0ZXIodyA9PiB3LmFjdGl2ZSk7XG4gICAgICBjb25zdCB3b3JrZmxvd3NXaXRoSXNzdWVzID0gd29ya2Zsb3dzLmZpbHRlcihcbiAgICAgICAgdyA9PiAhdy5hY3RpdmUgJiYgdy5ub2RlcyAmJiB3Lm5vZGVzLmxlbmd0aCA9PT0gMFxuICAgICAgKTtcblxuICAgICAgLy8gQW5hbHl6ZSBleGVjdXRpb24gc3RhdHNcbiAgICAgIGNvbnN0IHN1Y2Nlc3NmdWxFeGVjdXRpb25zID0gZXhlY3V0aW9ucy5maWx0ZXIoZSA9PiBlLmZpbmlzaGVkICYmICFlLnN0b3BwZWRBdCk7XG4gICAgICBjb25zdCBmYWlsZWRFeGVjdXRpb25zID0gZXhlY3V0aW9ucy5maWx0ZXIoZSA9PiBlLmZpbmlzaGVkICYmIGUuc3RvcHBlZEF0KTtcbiAgICAgIGNvbnN0IHJ1bm5pbmdFeGVjdXRpb25zID0gZXhlY3V0aW9ucy5maWx0ZXIoZSA9PiAhZS5maW5pc2hlZCk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBwZXJmb3JtYW5jZSBtZXRyaWNzXG4gICAgICBjb25zdCBleGVjdXRpb25UaW1lcyA9IGV4ZWN1dGlvbnNcbiAgICAgICAgLmZpbHRlcihlID0+IGUuZmluaXNoZWQgJiYgZS5zdGFydGVkQXQgJiYgZS5zdG9wcGVkQXQpXG4gICAgICAgIC5tYXAoZSA9PiBuZXcgRGF0ZShlLnN0b3BwZWRBdCEpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGUuc3RhcnRlZEF0KS5nZXRUaW1lKCkpO1xuXG4gICAgICBjb25zdCBhdmVyYWdlRXhlY3V0aW9uVGltZSA9XG4gICAgICAgIGV4ZWN1dGlvblRpbWVzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGV4ZWN1dGlvblRpbWVzLnJlZHVjZSgoc3VtLCB0aW1lKSA9PiBzdW0gKyB0aW1lLCAwKSAvIGV4ZWN1dGlvblRpbWVzLmxlbmd0aFxuICAgICAgICAgIDogMDtcblxuICAgICAgY29uc3QgZXJyb3JSYXRlID1cbiAgICAgICAgZXhlY3V0aW9ucy5sZW5ndGggPiAwID8gKGZhaWxlZEV4ZWN1dGlvbnMubGVuZ3RoIC8gZXhlY3V0aW9ucy5sZW5ndGgpICogMTAwIDogMDtcblxuICAgICAgLy8gQ2FsY3VsYXRlIHRocm91Z2hwdXQgKGV4ZWN1dGlvbnMgcGVyIG1pbnV0ZSBpbiBsYXN0IGhvdXIpXG4gICAgICBjb25zdCBvbmVIb3VyQWdvID0gbmV3IERhdGUoRGF0ZS5ub3coKSAtIDYwICogNjAgKiAxMDAwKTtcbiAgICAgIGNvbnN0IHJlY2VudEV4ZWN1dGlvbnMgPSBleGVjdXRpb25zLmZpbHRlcihlID0+IG5ldyBEYXRlKGUuc3RhcnRlZEF0KSA+IG9uZUhvdXJBZ28pO1xuICAgICAgY29uc3QgdGhyb3VnaHB1dCA9IHJlY2VudEV4ZWN1dGlvbnMubGVuZ3RoIC8gNjA7IC8vIHBlciBtaW51dGVcblxuICAgICAgLy8gR2V0IHN5c3RlbSByZXNvdXJjZSB1c2FnZVxuICAgICAgY29uc3Qgc3lzdGVtVXNhZ2UgPSB0aGlzLmdldFN5c3RlbVJlc291cmNlVXNhZ2UoKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIGV4ZWN1dGlvbnM6IHtcbiAgICAgICAgICB0b3RhbDogZXhlY3V0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgc3VjY2Vzc2Z1bDogc3VjY2Vzc2Z1bEV4ZWN1dGlvbnMubGVuZ3RoLFxuICAgICAgICAgIGZhaWxlZDogZmFpbGVkRXhlY3V0aW9ucy5sZW5ndGgsXG4gICAgICAgICAgcnVubmluZzogcnVubmluZ0V4ZWN1dGlvbnMubGVuZ3RoLFxuICAgICAgICAgIHdhaXRpbmc6IDAsIC8vIFdvdWxkIG5lZWQgdG8gYmUgY2FsY3VsYXRlZCBmcm9tIHF1ZXVlIGlmIGF2YWlsYWJsZVxuICAgICAgICB9LFxuICAgICAgICB3b3JrZmxvd3M6IHtcbiAgICAgICAgICB0b3RhbDogd29ya2Zsb3dzLmxlbmd0aCxcbiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZVdvcmtmbG93cy5sZW5ndGgsXG4gICAgICAgICAgaW5hY3RpdmU6IHdvcmtmbG93cy5sZW5ndGggLSBhY3RpdmVXb3JrZmxvd3MubGVuZ3RoLFxuICAgICAgICAgIHdpdGhJc3N1ZXM6IHdvcmtmbG93c1dpdGhJc3N1ZXMubGVuZ3RoLFxuICAgICAgICB9LFxuICAgICAgICBwZXJmb3JtYW5jZToge1xuICAgICAgICAgIGF2ZXJhZ2VFeGVjdXRpb25UaW1lLFxuICAgICAgICAgIHRocm91Z2hwdXQsXG4gICAgICAgICAgZXJyb3JSYXRlLFxuICAgICAgICB9LFxuICAgICAgICBzeXN0ZW06IHN5c3RlbVVzYWdlLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCBtZXRyaWNzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBkZXRhaWxlZCB3b3JrZmxvdyBkaWFnbm9zdGljc1xuICAgKi9cbiAgYXN5bmMgZ2V0V29ya2Zsb3dEaWFnbm9zdGljcyh3b3JrZmxvd0lkOiBzdHJpbmcpOiBQcm9taXNlPFdvcmtmbG93RGlhZ25vc3RpY3NSZXNwb25zZT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBbd29ya2Zsb3csIGV4ZWN1dGlvbnNSZXNwb25zZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMuY2xpZW50LmdldFdvcmtmbG93KHdvcmtmbG93SWQpLFxuICAgICAgICB0aGlzLmNsaWVudC5nZXRFeGVjdXRpb25zKHsgbGltaXQ6IDEwMCB9KSwgLy8gR2V0IG1vcmUgZXhlY3V0aW9ucyB0byBmaWx0ZXIgYnkgd29ya2Zsb3dJZFxuICAgICAgXSk7XG5cbiAgICAgIC8vIEV4dHJhY3QgZXhlY3V0aW9ucyBkYXRhIGZyb20gQVBJIHJlc3BvbnNlIHdyYXBwZXIgYW5kIGZpbHRlciBieSB3b3JrZmxvd0lkXG4gICAgICBjb25zdCBhbGxFeGVjdXRpb25zID0gZXhlY3V0aW9uc1Jlc3BvbnNlLmRhdGE7XG4gICAgICBjb25zdCBleGVjdXRpb25zID0gYWxsRXhlY3V0aW9ucy5maWx0ZXIoZSA9PiBlLndvcmtmbG93SWQgPT09IHdvcmtmbG93SWQpLnNsaWNlKDAsIDUwKTtcblxuICAgICAgLy8gQW5hbHl6ZSB3b3JrZmxvdyBoZWFsdGhcbiAgICAgIGNvbnN0IGlzc3Vlczogc3RyaW5nW10gPSBbXTtcbiAgICAgIGNvbnN0IHJlY29tbWVuZGF0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAgICAgaWYgKCF3b3JrZmxvdy5hY3RpdmUpIHtcbiAgICAgICAgaXNzdWVzLnB1c2goJ1dvcmtmbG93IGlzIGluYWN0aXZlJyk7XG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDb25zaWRlciBhY3RpdmF0aW5nIHRoZSB3b3JrZmxvdyBpZiBpdCBzaG91bGQgYmUgcnVubmluZycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXdvcmtmbG93Lm5vZGVzIHx8IHdvcmtmbG93Lm5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpc3N1ZXMucHVzaCgnV29ya2Zsb3cgaGFzIG5vIG5vZGVzJyk7XG4gICAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdBZGQgbm9kZXMgdG8gZGVmaW5lIHdvcmtmbG93IGxvZ2ljJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFuYWx5emUgcmVjZW50IGV4ZWN1dGlvbnNcbiAgICAgIGNvbnN0IHJlY2VudEV4ZWN1dGlvbnMgPSBleGVjdXRpb25zLnNsaWNlKDAsIDEwKS5tYXAoZSA9PiAoe1xuICAgICAgICBpZDogZS5pZCEsXG4gICAgICAgIHN0YXR1czogZS5maW5pc2hlZCA/IChlLnN0b3BwZWRBdCA/ICdmYWlsZWQnIDogJ3N1Y2Nlc3MnKSA6ICdydW5uaW5nJyxcbiAgICAgICAgZXhlY3V0aW9uVGltZTpcbiAgICAgICAgICBlLmZpbmlzaGVkICYmIGUuc3RhcnRlZEF0ICYmIGUuc3RvcHBlZEF0XG4gICAgICAgICAgICA/IG5ldyBEYXRlKGUuc3RvcHBlZEF0KS5nZXRUaW1lKCkgLSBuZXcgRGF0ZShlLnN0YXJ0ZWRBdCkuZ2V0VGltZSgpXG4gICAgICAgICAgICA6IDAsXG4gICAgICAgIHRpbWVzdGFtcDogZS5zdGFydGVkQXQsXG4gICAgICAgIGVycm9yOiBlLnN0b3BwZWRBdCA/ICdFeGVjdXRpb24gc3RvcHBlZCcgOiB1bmRlZmluZWQsXG4gICAgICB9KSk7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBzdWNjZXNzIHJhdGVcbiAgICAgIGNvbnN0IGZpbmlzaGVkRXhlY3V0aW9ucyA9IGV4ZWN1dGlvbnMuZmlsdGVyKGUgPT4gZS5maW5pc2hlZCk7XG4gICAgICBjb25zdCBzdWNjZXNzZnVsRXhlY3V0aW9ucyA9IGZpbmlzaGVkRXhlY3V0aW9ucy5maWx0ZXIoZSA9PiAhZS5zdG9wcGVkQXQpO1xuICAgICAgY29uc3Qgc3VjY2Vzc1JhdGUgPVxuICAgICAgICBmaW5pc2hlZEV4ZWN1dGlvbnMubGVuZ3RoID4gMFxuICAgICAgICAgID8gKHN1Y2Nlc3NmdWxFeGVjdXRpb25zLmxlbmd0aCAvIGZpbmlzaGVkRXhlY3V0aW9ucy5sZW5ndGgpICogMTAwXG4gICAgICAgICAgOiAxMDA7XG5cbiAgICAgIC8vIENhbGN1bGF0ZSBhdmVyYWdlIGV4ZWN1dGlvbiB0aW1lXG4gICAgICBjb25zdCBleGVjdXRpb25UaW1lcyA9IHJlY2VudEV4ZWN1dGlvbnNcbiAgICAgICAgLmZpbHRlcihlID0+IGUuc3RhdHVzID09PSAnc3VjY2VzcycgJiYgZS5leGVjdXRpb25UaW1lID4gMClcbiAgICAgICAgLm1hcChlID0+IGUuZXhlY3V0aW9uVGltZSk7XG4gICAgICBjb25zdCBhdmVyYWdlRXhlY3V0aW9uVGltZSA9XG4gICAgICAgIGV4ZWN1dGlvblRpbWVzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGV4ZWN1dGlvblRpbWVzLnJlZHVjZSgoc3VtLCB0aW1lKSA9PiBzdW0gKyB0aW1lLCAwKSAvIGV4ZWN1dGlvblRpbWVzLmxlbmd0aFxuICAgICAgICAgIDogMDtcblxuICAgICAgLy8gRGV0ZXJtaW5lIGhlYWx0aCBzdGF0dXNcbiAgICAgIGxldCBoZWFsdGhTdGF0dXM6ICdoZWFsdGh5JyB8ICd3YXJuaW5nJyB8ICdjcml0aWNhbCcgPSAnaGVhbHRoeSc7XG4gICAgICBpZiAoaXNzdWVzLmxlbmd0aCA+IDAgfHwgc3VjY2Vzc1JhdGUgPCA4MCkge1xuICAgICAgICBoZWFsdGhTdGF0dXMgPSAnY3JpdGljYWwnO1xuICAgICAgfSBlbHNlIGlmIChzdWNjZXNzUmF0ZSA8IDk1IHx8IGF2ZXJhZ2VFeGVjdXRpb25UaW1lID4gMzAwMDApIHtcbiAgICAgICAgaGVhbHRoU3RhdHVzID0gJ3dhcm5pbmcnO1xuICAgICAgfVxuXG4gICAgICAvLyBBbmFseXplIG5vZGVzXG4gICAgICBjb25zdCBub2RlQW5hbHlzaXMgPSAod29ya2Zsb3cubm9kZXMgfHwgW10pLm1hcChub2RlID0+ICh7XG4gICAgICAgIGlkOiBub2RlLmlkLFxuICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgIHR5cGU6IG5vZGUudHlwZSxcbiAgICAgICAgaXNzdWVzOiBub2RlLmRpc2FibGVkID8gWydOb2RlIGlzIGRpc2FibGVkJ10gOiBbXSxcbiAgICAgICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgICAgICBhdmVyYWdlVGltZTogMCwgLy8gV291bGQgbmVlZCBleGVjdXRpb24gZGV0YWlscyB0byBjYWxjdWxhdGVcbiAgICAgICAgICBzdWNjZXNzUmF0ZTogMTAwLCAvLyBXb3VsZCBuZWVkIGV4ZWN1dGlvbiBkZXRhaWxzIHRvIGNhbGN1bGF0ZVxuICAgICAgICB9LFxuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB3b3JrZmxvd0lkOiB3b3JrZmxvdy5pZCEsXG4gICAgICAgIHdvcmtmbG93TmFtZTogd29ya2Zsb3cubmFtZSxcbiAgICAgICAgaGVhbHRoOiB7XG4gICAgICAgICAgc3RhdHVzOiBoZWFsdGhTdGF0dXMsXG4gICAgICAgICAgaXNzdWVzLFxuICAgICAgICAgIHJlY29tbWVuZGF0aW9ucyxcbiAgICAgICAgfSxcbiAgICAgICAgcGVyZm9ybWFuY2U6IHtcbiAgICAgICAgICBhdmVyYWdlRXhlY3V0aW9uVGltZSxcbiAgICAgICAgICBzdWNjZXNzUmF0ZSxcbiAgICAgICAgICByZWNlbnRFeGVjdXRpb25zLFxuICAgICAgICB9LFxuICAgICAgICBub2Rlczogbm9kZUFuYWx5c2lzLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGdldCB3b3JrZmxvdyBkaWFnbm9zdGljczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgY3VycmVudCBzeXN0ZW0gcmVzb3VyY2UgdXNhZ2VcbiAgICovXG4gIGdldFN5c3RlbVJlc291cmNlVXNhZ2UoKTogU3lzdGVtUmVzb3VyY2VVc2FnZSB7XG4gICAgY29uc3QgbWVtVXNhZ2UgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XG4gICAgY29uc3QgY3B1VXNhZ2UgPSBwcm9jZXNzLmNwdVVzYWdlKCk7XG5cbiAgICAvLyBDb252ZXJ0IENQVSB1c2FnZSB0byBwZXJjZW50YWdlIChzaW1wbGlmaWVkKVxuICAgIGNvbnN0IGNwdVBlcmNlbnQgPSAoKGNwdVVzYWdlLnVzZXIgKyBjcHVVc2FnZS5zeXN0ZW0pIC8gMTAwMDAwMCAvIHByb2Nlc3MudXB0aW1lKCkpICogMTAwO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNwdToge1xuICAgICAgICB0b3RhbFVzYWdlOiBNYXRoLm1pbihjcHVQZXJjZW50LCAxMDApLCAvLyBDYXAgYXQgMTAwJVxuICAgICAgICBwcm9jZXNzVXNhZ2U6IE1hdGgubWluKGNwdVBlcmNlbnQsIDEwMCksXG4gICAgICAgIGxvYWRBdmVyYWdlOiBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gWzAsIDAsIDBdIDogcmVxdWlyZSgnb3MnKS5sb2FkYXZnKCksXG4gICAgICAgIGNvcmVDb3VudDogcmVxdWlyZSgnb3MnKS5jcHVzKCkubGVuZ3RoLFxuICAgICAgfSxcbiAgICAgIG1lbW9yeToge1xuICAgICAgICB0b3RhbE1lbW9yeTogcmVxdWlyZSgnb3MnKS50b3RhbG1lbSgpLFxuICAgICAgICBmcmVlTWVtb3J5OiByZXF1aXJlKCdvcycpLmZyZWVtZW0oKSxcbiAgICAgICAgdXNlZE1lbW9yeTogcmVxdWlyZSgnb3MnKS50b3RhbG1lbSgpIC0gcmVxdWlyZSgnb3MnKS5mcmVlbWVtKCksXG4gICAgICAgIHByb2Nlc3NNZW1vcnk6IHtcbiAgICAgICAgICBoZWFwVXNlZDogbWVtVXNhZ2UuaGVhcFVzZWQsXG4gICAgICAgICAgaGVhcFRvdGFsOiBtZW1Vc2FnZS5oZWFwVG90YWwsXG4gICAgICAgICAgZXh0ZXJuYWw6IG1lbVVzYWdlLmV4dGVybmFsLFxuICAgICAgICAgIHJzczogbWVtVXNhZ2UucnNzLFxuICAgICAgICB9LFxuICAgICAgICB1dGlsaXphdGlvbjpcbiAgICAgICAgICAoKHJlcXVpcmUoJ29zJykudG90YWxtZW0oKSAtIHJlcXVpcmUoJ29zJykuZnJlZW1lbSgpKSAvIHJlcXVpcmUoJ29zJykudG90YWxtZW0oKSkgKiAxMDAsXG4gICAgICB9LFxuICAgICAgZGlzazoge1xuICAgICAgICB0b3RhbFNwYWNlOiAwLCAvLyBXb3VsZCBuZWVkIGZpbGVzeXN0ZW0gQVBJIHRvIGdldCByZWFsIHZhbHVlc1xuICAgICAgICBmcmVlU3BhY2U6IDAsXG4gICAgICAgIHVzZWRTcGFjZTogMCxcbiAgICAgICAgdXRpbGl6YXRpb246IDAsXG4gICAgICB9LFxuICAgICAgbmV0d29yazoge1xuICAgICAgICBieXRlc1JlY2VpdmVkOiAwLCAvLyBXb3VsZCBuZWVkIG5ldHdvcmsgc3RhdGlzdGljc1xuICAgICAgICBieXRlc1NlbnQ6IDAsXG4gICAgICAgIHBhY2tldHNSZWNlaXZlZDogMCxcbiAgICAgICAgcGFja2V0c1NlbnQ6IDAsXG4gICAgICB9LFxuICAgICAgdXB0aW1lOiBwcm9jZXNzLnVwdGltZSgpLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGNvbm5lY3Rpdml0eSB0byBuOG4gaW5zdGFuY2VcbiAgICovXG4gIGFzeW5jIHRlc3RDb25uZWN0aXZpdHkoKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IHJlc3BvbnNlVGltZTogbnVtYmVyOyBlcnJvcj86IHN0cmluZyB9PiB7XG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcblxuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLmNsaWVudC5nZXRXb3JrZmxvd3MoeyBsaW1pdDogMSB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHJlc3BvbnNlVGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSxcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICByZXNwb25zZVRpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWUsXG4gICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzeXN0ZW0gZGlhZ25vc3RpY3MgZm9yIHRyb3VibGVzaG9vdGluZ1xuICAgKi9cbiAgYXN5bmMgZ2V0U3lzdGVtRGlhZ25vc3RpY3MoKTogUHJvbWlzZTxTeXN0ZW1EaWFnbm9zdGljcz4ge1xuICAgIGNvbnN0IFtoZWFsdGhDaGVjaywgY29ubmVjdGl2aXR5LCBzeXN0ZW1Vc2FnZV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLmdldEhlYWx0aENoZWNrKCksXG4gICAgICB0aGlzLnRlc3RDb25uZWN0aXZpdHkoKSxcbiAgICAgIFByb21pc2UucmVzb2x2ZSh0aGlzLmdldFN5c3RlbVJlc291cmNlVXNhZ2UoKSksXG4gICAgXSk7XG5cbiAgICBjb25zdCBpc3N1ZXM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgcmVjb21tZW5kYXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gICAgLy8gQW5hbHl6ZSBoZWFsdGggaXNzdWVzXG4gICAgaWYgKGhlYWx0aENoZWNrLnN0YXR1cyA9PT0gJ2NyaXRpY2FsJykge1xuICAgICAgaXNzdWVzLnB1c2goJ1N5c3RlbSBoZWFsdGggaXMgY3JpdGljYWwnKTtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDaGVjayBkYXRhYmFzZSBjb25uZWN0aXZpdHkgYW5kIGZpbGUgc3lzdGVtIHBlcm1pc3Npb25zJyk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25uZWN0aXZpdHkuc3VjY2Vzcykge1xuICAgICAgaXNzdWVzLnB1c2goYEFQSSBjb25uZWN0aXZpdHkgZmFpbGVkOiAke2Nvbm5lY3Rpdml0eS5lcnJvcn1gKTtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdWZXJpZnkgbjhuIGluc3RhbmNlIGlzIHJ1bm5pbmcgYW5kIEFQSSBrZXkgaXMgY29ycmVjdCcpO1xuICAgIH1cblxuICAgIGlmIChjb25uZWN0aXZpdHkucmVzcG9uc2VUaW1lID4gMTAwMCkge1xuICAgICAgaXNzdWVzLnB1c2goJ0hpZ2ggQVBJIHJlc3BvbnNlIHRpbWUgZGV0ZWN0ZWQnKTtcbiAgICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKCdDaGVjayBuZXR3b3JrIGNvbm5lY3Rpdml0eSBhbmQgc2VydmVyIHBlcmZvcm1hbmNlJyk7XG4gICAgfVxuXG4gICAgLy8gQW5hbHl6ZSByZXNvdXJjZSB1c2FnZVxuICAgIGlmIChzeXN0ZW1Vc2FnZS5tZW1vcnkudXRpbGl6YXRpb24gPiA4NSkge1xuICAgICAgaXNzdWVzLnB1c2goJ0hpZ2ggbWVtb3J5IHV0aWxpemF0aW9uIGRldGVjdGVkJyk7XG4gICAgICByZWNvbW1lbmRhdGlvbnMucHVzaCgnQ29uc2lkZXIgaW5jcmVhc2luZyBhdmFpbGFibGUgbWVtb3J5IG9yIG9wdGltaXppbmcgd29ya2Zsb3dzJyk7XG4gICAgfVxuXG4gICAgaWYgKHN5c3RlbVVzYWdlLmNwdS50b3RhbFVzYWdlID4gODApIHtcbiAgICAgIGlzc3Vlcy5wdXNoKCdIaWdoIENQVSB1c2FnZSBkZXRlY3RlZCcpO1xuICAgICAgcmVjb21tZW5kYXRpb25zLnB1c2goJ0NoZWNrIGZvciByZXNvdXJjZS1pbnRlbnNpdmUgd29ya2Zsb3dzIG9yIGJhY2tncm91bmQgcHJvY2Vzc2VzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgb3ZlcmFsbDoge1xuICAgICAgICBzdGF0dXM6IGhlYWx0aENoZWNrLnN0YXR1cyxcbiAgICAgICAgaXNzdWVzLFxuICAgICAgICByZWNvbW1lbmRhdGlvbnMsXG4gICAgICB9LFxuICAgICAgY29ubmVjdGl2aXR5OiB7XG4gICAgICAgIGFwaUNvbm5lY3Rpdml0eTogY29ubmVjdGl2aXR5LnN1Y2Nlc3MsXG4gICAgICAgIHJlc3BvbnNlVGltZTogY29ubmVjdGl2aXR5LnJlc3BvbnNlVGltZSxcbiAgICAgICAgZXJyb3I6IGNvbm5lY3Rpdml0eS5lcnJvcixcbiAgICAgIH0sXG4gICAgICByZXNvdXJjZXM6IHN5c3RlbVVzYWdlLFxuICAgICAgZW52aXJvbm1lbnQ6IHtcbiAgICAgICAgbm9kZVZlcnNpb246IHByb2Nlc3MudmVyc2lvbixcbiAgICAgICAgcGxhdGZvcm06IHByb2Nlc3MucGxhdGZvcm0sXG4gICAgICAgIGFyY2hpdGVjdHVyZTogcHJvY2Vzcy5hcmNoLFxuICAgICAgICB1cHRpbWU6IHByb2Nlc3MudXB0aW1lKCksXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFrRkk7SUFBQUEsYUFBQSxZQUFBQSxDQUFBO01BQUEsT0FBQUMsY0FBQTtJQUFBO0VBQUE7RUFBQSxPQUFBQSxjQUFBO0FBQUE7QUFBQUQsYUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWxGSixNQUFBRSxZQUFBO0FBQUE7QUFBQSxDQUFBRixhQUFBLEdBQUFHLENBQUEsT0FBQUMsZUFBQSxDQUFBQyxPQUFBO0FBNEVBLE1BQWFDLGdCQUFnQjtFQUVqQkMsTUFBQTtFQUNBQyxPQUFBO0VBQ0FDLE1BQUE7RUFIVkMsWUFDVUgsTUFBaUIsRUFDakJDLE9BQWUsRUFDZkMsTUFBYztJQUFBO0lBQUFULGFBQUEsR0FBQVcsQ0FBQTtJQUFBWCxhQUFBLEdBQUFHLENBQUE7SUFGZCxLQUFBSSxNQUFNLEdBQU5BLE1BQU07SUFBVztJQUFBUCxhQUFBLEdBQUFHLENBQUE7SUFDakIsS0FBQUssT0FBTyxHQUFQQSxPQUFPO0lBQVE7SUFBQVIsYUFBQSxHQUFBRyxDQUFBO0lBQ2YsS0FBQU0sTUFBTSxHQUFOQSxNQUFNO0lBRWQ7SUFBQTtJQUFBVCxhQUFBLEdBQUFHLENBQUE7SUFDQSxJQUFJLENBQUNLLE9BQU8sR0FBR0EsT0FBTyxDQUFDSSxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQztFQUMzQztFQUVRLE1BQU1DLFdBQVdBLENBQ3ZCQyxRQUFnQixFQUNoQkMsT0FBQTtFQUFBO0VBQUEsQ0FBQWYsYUFBQSxHQUFBZ0IsQ0FBQSxVQUFtQyxFQUFFO0lBQUE7SUFBQWhCLGFBQUEsR0FBQVcsQ0FBQTtJQUVyQyxNQUFNTSxHQUFHO0lBQUE7SUFBQSxDQUFBakIsYUFBQSxHQUFBRyxDQUFBLE9BQUcsR0FBRyxJQUFJLENBQUNLLE9BQU8sVUFBVU0sUUFBUSxFQUFFO0lBQy9DLE1BQU1JLE9BQU87SUFBQTtJQUFBLENBQUFsQixhQUFBLEdBQUFHLENBQUEsUUFBRztNQUNkLGVBQWUsRUFBRSxJQUFJLENBQUNNLE1BQU07TUFDNUIsY0FBYyxFQUFFLGtCQUFrQjtNQUNsQztNQUFLO01BQUEsQ0FBQVQsYUFBQSxHQUFBZ0IsQ0FBQSxVQUFBRCxPQUFPLENBQUNHLE9BQWtDO01BQUE7TUFBQSxDQUFBbEIsYUFBQSxHQUFBZ0IsQ0FBQSxVQUFJLEVBQUU7S0FDdEQ7SUFBQztJQUFBaEIsYUFBQSxHQUFBRyxDQUFBO0lBRUYsSUFBSTtNQUNGLE1BQU1nQixRQUFRO01BQUE7TUFBQSxDQUFBbkIsYUFBQSxHQUFBRyxDQUFBLFFBQUcsTUFBTSxJQUFBRCxZQUFBLENBQUFrQixPQUFLLEVBQUNILEdBQUcsRUFBRTtRQUNoQyxHQUFHRixPQUFPO1FBQ1ZHO09BQ00sQ0FBQztNQUFDO01BQUFsQixhQUFBLEdBQUFHLENBQUE7TUFFVixJQUFJLENBQUNnQixRQUFRLENBQUNFLEVBQUUsRUFBRTtRQUFBO1FBQUFyQixhQUFBLEdBQUFnQixDQUFBO1FBQ2hCLE1BQU1NLFNBQVM7UUFBQTtRQUFBLENBQUF0QixhQUFBLEdBQUFHLENBQUEsUUFBRyxNQUFNZ0IsUUFBUSxDQUFDSSxJQUFJLEVBQUU7UUFBQztRQUFBdkIsYUFBQSxHQUFBRyxDQUFBO1FBQ3hDLE1BQU0sSUFBSXFCLEtBQUssQ0FBQyxRQUFRTCxRQUFRLENBQUNNLE1BQU0sS0FBS0gsU0FBUyxFQUFFLENBQUM7TUFDMUQsQ0FBQztNQUFBO01BQUE7UUFBQXRCLGFBQUEsR0FBQWdCLENBQUE7TUFBQTtNQUVELE1BQU1VLFdBQVc7TUFBQTtNQUFBLENBQUExQixhQUFBLEdBQUFHLENBQUE7TUFBRztNQUFBLENBQUFILGFBQUEsR0FBQWdCLENBQUEsVUFBQUcsUUFBUSxDQUFDRCxPQUFPLENBQUNTLEdBQUcsQ0FBQyxjQUFjLENBQUM7TUFBQTtNQUFBLENBQUEzQixhQUFBLEdBQUFnQixDQUFBLFVBQUksRUFBRTtNQUFDO01BQUFoQixhQUFBLEdBQUFHLENBQUE7TUFDL0QsSUFBSXVCLFdBQVcsQ0FBQ0UsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7UUFBQTtRQUFBNUIsYUFBQSxHQUFBZ0IsQ0FBQTtRQUFBaEIsYUFBQSxHQUFBRyxDQUFBO1FBQzVDLE9BQVEsTUFBTWdCLFFBQVEsQ0FBQ1UsSUFBSSxFQUFFO01BQy9CLENBQUMsTUFBTTtRQUFBO1FBQUE3QixhQUFBLEdBQUFnQixDQUFBO1FBQUFoQixhQUFBLEdBQUFHLENBQUE7UUFDTCxPQUFRLE1BQU1nQixRQUFRLENBQUNJLElBQUksRUFBRTtNQUMvQjtJQUNGLENBQUMsQ0FBQyxPQUFPTyxLQUFLLEVBQUU7TUFBQTtNQUFBOUIsYUFBQSxHQUFBRyxDQUFBO01BQ2QsSUFBSTJCLEtBQUssWUFBWU4sS0FBSyxFQUFFO1FBQUE7UUFBQXhCLGFBQUEsR0FBQWdCLENBQUE7UUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtRQUMxQixNQUFNLElBQUlxQixLQUFLLENBQUMsOEJBQThCTSxLQUFLLENBQUNDLE9BQU8sRUFBRSxDQUFDO01BQ2hFLENBQUM7TUFBQTtNQUFBO1FBQUEvQixhQUFBLEdBQUFnQixDQUFBO01BQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUNELE1BQU0sSUFBSXFCLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQztJQUNqRTtFQUNGO0VBRUE7OztFQUdBLE1BQU1RLGNBQWNBLENBQUE7SUFBQTtJQUFBaEMsYUFBQSxHQUFBVyxDQUFBO0lBQUFYLGFBQUEsR0FBQUcsQ0FBQTtJQUNsQixJQUFJO01BQUE7TUFBQUgsYUFBQSxHQUFBRyxDQUFBO01BQ0Y7TUFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDVSxXQUFXLENBQXNCLFNBQVMsQ0FBQztJQUMvRCxDQUFDLENBQUMsT0FBT2lCLEtBQUssRUFBRTtNQUFBO01BQUE5QixhQUFBLEdBQUFHLENBQUE7TUFDZDtNQUNBLE9BQU8sTUFBTSxJQUFJLENBQUM4Qix3QkFBd0IsRUFBRTtJQUM5QztFQUNGO0VBRUE7OztFQUdRLE1BQU1BLHdCQUF3QkEsQ0FBQTtJQUFBO0lBQUFqQyxhQUFBLEdBQUFXLENBQUE7SUFDcEMsTUFBTXVCLFNBQVM7SUFBQTtJQUFBLENBQUFsQyxhQUFBLEdBQUFHLENBQUEsUUFBR2dDLElBQUksQ0FBQ0MsR0FBRyxFQUFFO0lBQzVCLElBQUlDLGNBQWM7SUFBQTtJQUFBLENBQUFyQyxhQUFBLEdBQUFHLENBQUEsUUFBMkMsY0FBYztJQUMzRSxJQUFJbUMsb0JBQW9CO0lBQUE7SUFBQSxDQUFBdEMsYUFBQSxHQUFBRyxDQUFBLFFBQUcsQ0FBQztJQUFDO0lBQUFILGFBQUEsR0FBQUcsQ0FBQTtJQUU3QixJQUFJO01BQ0Y7TUFDQSxNQUFNb0MsT0FBTztNQUFBO01BQUEsQ0FBQXZDLGFBQUEsR0FBQUcsQ0FBQSxRQUFHZ0MsSUFBSSxDQUFDQyxHQUFHLEVBQUU7TUFBQztNQUFBcEMsYUFBQSxHQUFBRyxDQUFBO01BQzNCLE1BQU0sSUFBSSxDQUFDSSxNQUFNLENBQUNpQyxZQUFZLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUMsQ0FBRSxDQUFDO01BQUM7TUFBQXpDLGFBQUEsR0FBQUcsQ0FBQTtNQUM3Q21DLG9CQUFvQixHQUFHSCxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHRyxPQUFPO01BQUM7TUFBQXZDLGFBQUEsR0FBQUcsQ0FBQTtNQUM1Q2tDLGNBQWMsR0FBRyxXQUFXO0lBQzlCLENBQUMsQ0FBQyxPQUFPUCxLQUFLLEVBQUU7TUFBQTtNQUFBOUIsYUFBQSxHQUFBRyxDQUFBO01BQ2RrQyxjQUFjLEdBQUcsT0FBTztNQUFDO01BQUFyQyxhQUFBLEdBQUFHLENBQUE7TUFDekJtQyxvQkFBb0IsR0FBR0gsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBR0YsU0FBUztJQUMvQztJQUVBO0lBQ0EsSUFBSVEsZ0JBQWdCO0lBQUE7SUFBQSxDQUFBMUMsYUFBQSxHQUFBRyxDQUFBLFFBQTJCLFlBQVk7SUFDM0QsSUFBSXdDLHFCQUFxQjtJQUFBO0lBQUEsQ0FBQTNDLGFBQUEsR0FBQUcsQ0FBQSxRQUE2QyxZQUFZO0lBQUM7SUFBQUgsYUFBQSxHQUFBRyxDQUFBO0lBRW5GLElBQUk7TUFBQTtNQUFBSCxhQUFBLEdBQUFHLENBQUE7TUFDRjtNQUNBO01BQ0EsSUFBSWtDLGNBQWMsS0FBSyxXQUFXLEVBQUU7UUFBQTtRQUFBckMsYUFBQSxHQUFBZ0IsQ0FBQTtRQUFBaEIsYUFBQSxHQUFBRyxDQUFBO1FBQ2xDdUMsZ0JBQWdCLEdBQUcsWUFBWTtRQUFDO1FBQUExQyxhQUFBLEdBQUFHLENBQUE7UUFDaEN3QyxxQkFBcUIsR0FBRyxZQUFZO01BQ3RDLENBQUMsTUFBTTtRQUFBO1FBQUEzQyxhQUFBLEdBQUFnQixDQUFBO1FBQUFoQixhQUFBLEdBQUFHLENBQUE7UUFDTHVDLGdCQUFnQixHQUFHLE9BQU87UUFBQztRQUFBMUMsYUFBQSxHQUFBRyxDQUFBO1FBQzNCd0MscUJBQXFCLEdBQUcsV0FBVztNQUNyQztJQUNGLENBQUMsQ0FBQyxNQUFNO01BQUE7TUFBQTNDLGFBQUEsR0FBQUcsQ0FBQTtNQUNOdUMsZ0JBQWdCLEdBQUcsT0FBTztNQUFDO01BQUExQyxhQUFBLEdBQUFHLENBQUE7TUFDM0J3QyxxQkFBcUIsR0FBRyxXQUFXO0lBQ3JDO0lBRUE7SUFDQSxJQUFJQyxhQUFhO0lBQUE7SUFBQSxDQUFBNUMsYUFBQSxHQUFBRyxDQUFBLFFBQW9ELFNBQVM7SUFBQztJQUFBSCxhQUFBLEdBQUFHLENBQUE7SUFDL0U7SUFBSTtJQUFBLENBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQXFCLGNBQWMsS0FBSyxPQUFPO0lBQUE7SUFBQSxDQUFBckMsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJMEIsZ0JBQWdCLEtBQUssT0FBTyxHQUFFO01BQUE7TUFBQTFDLGFBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUM5RHlDLGFBQWEsR0FBRyxVQUFVO0lBQzVCLENBQUMsTUFBTTtNQUFBO01BQUE1QyxhQUFBLEdBQUFnQixDQUFBO01BQUFoQixhQUFBLEdBQUFHLENBQUE7TUFBQSxJQUFJbUMsb0JBQW9CLEdBQUcsSUFBSSxFQUFFO1FBQUE7UUFBQXRDLGFBQUEsR0FBQWdCLENBQUE7UUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtRQUN0Q3lDLGFBQWEsR0FBRyxTQUFTO01BQzNCLENBQUM7TUFBQTtNQUFBO1FBQUE1QyxhQUFBLEdBQUFnQixDQUFBO01BQUE7SUFBRDtJQUFDO0lBQUFoQixhQUFBLEdBQUFHLENBQUE7SUFFRCxPQUFPO01BQ0xzQixNQUFNLEVBQUVtQixhQUFhO01BQ3JCQyxPQUFPLEVBQUUsU0FBUztNQUFFO01BQ3BCQyxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0QsTUFBTSxFQUFFO01BQ3hCRSxRQUFRLEVBQUU7UUFDUnZCLE1BQU0sRUFBRVksY0FBYztRQUN0QlksWUFBWSxFQUFFWDtPQUNmO01BQ0RZLFVBQVUsRUFBRTtRQUNWekIsTUFBTSxFQUFFaUIsZ0JBQWdCO1FBQ3hCUyxXQUFXLEVBQUVSOztLQUVoQjtFQUNIO0VBRUE7OztFQUdBLE1BQU1TLFVBQVVBLENBQUE7SUFBQTtJQUFBcEQsYUFBQSxHQUFBVyxDQUFBO0lBQUFYLGFBQUEsR0FBQUcsQ0FBQTtJQUNkLElBQUk7TUFDRjtNQUNBLE1BQU0sQ0FBQ2tELGlCQUFpQixFQUFFQyxrQkFBa0IsQ0FBQztNQUFBO01BQUEsQ0FBQXRELGFBQUEsR0FBQUcsQ0FBQSxRQUFHLE1BQU1vRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUNoRSxJQUFJLENBQUNqRCxNQUFNLENBQUNpQyxZQUFZLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBRSxDQUFDO01BQUU7TUFDM0MsSUFBSSxDQUFDbEMsTUFBTSxDQUFDa0QsYUFBYSxDQUFDO1FBQUVoQixLQUFLLEVBQUU7TUFBRyxDQUFFLENBQUMsQ0FBRTtNQUFBLENBQzVDLENBQUM7TUFFRjtNQUNBLE1BQU1pQixTQUFTO01BQUE7TUFBQSxDQUFBMUQsYUFBQSxHQUFBRyxDQUFBLFFBQUdrRCxpQkFBaUIsQ0FBQ00sSUFBSTtNQUN4QyxNQUFNQyxVQUFVO01BQUE7TUFBQSxDQUFBNUQsYUFBQSxHQUFBRyxDQUFBLFFBQUdtRCxrQkFBa0IsQ0FBQ0ssSUFBSTtNQUUxQztNQUNBLE1BQU1FLGVBQWU7TUFBQTtNQUFBLENBQUE3RCxhQUFBLEdBQUFHLENBQUEsUUFBR3VELFNBQVMsQ0FBQ0ksTUFBTSxDQUFDQyxDQUFDLElBQUk7UUFBQTtRQUFBL0QsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLE9BQUE0RCxDQUFDLENBQUNDLE1BQU07TUFBTixDQUFNLENBQUM7TUFDdkQsTUFBTUMsbUJBQW1CO01BQUE7TUFBQSxDQUFBakUsYUFBQSxHQUFBRyxDQUFBLFFBQUd1RCxTQUFTLENBQUNJLE1BQU0sQ0FDMUNDLENBQUMsSUFBSTtRQUFBO1FBQUEvRCxhQUFBLEdBQUFXLENBQUE7UUFBQVgsYUFBQSxHQUFBRyxDQUFBO1FBQUEsa0NBQUFILGFBQUEsR0FBQWdCLENBQUEsWUFBQytDLENBQUMsQ0FBQ0MsTUFBTTtRQUFBO1FBQUEsQ0FBQWhFLGFBQUEsR0FBQWdCLENBQUEsV0FBSStDLENBQUMsQ0FBQ0csS0FBSztRQUFBO1FBQUEsQ0FBQWxFLGFBQUEsR0FBQWdCLENBQUEsV0FBSStDLENBQUMsQ0FBQ0csS0FBSyxDQUFDQyxNQUFNLEtBQUssQ0FBQztNQUFELENBQUMsQ0FDbEQ7TUFFRDtNQUNBLE1BQU1DLG9CQUFvQjtNQUFBO01BQUEsQ0FBQXBFLGFBQUEsR0FBQUcsQ0FBQSxRQUFHeUQsVUFBVSxDQUFDRSxNQUFNLENBQUNPLENBQUMsSUFBSTtRQUFBO1FBQUFyRSxhQUFBLEdBQUFXLENBQUE7UUFBQVgsYUFBQSxHQUFBRyxDQUFBO1FBQUEsa0NBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQXFELENBQUMsQ0FBQ0MsUUFBUTtRQUFBO1FBQUEsQ0FBQXRFLGFBQUEsR0FBQWdCLENBQUEsV0FBSSxDQUFDcUQsQ0FBQyxDQUFDRSxTQUFTO01BQVQsQ0FBUyxDQUFDO01BQy9FLE1BQU1DLGdCQUFnQjtNQUFBO01BQUEsQ0FBQXhFLGFBQUEsR0FBQUcsQ0FBQSxRQUFHeUQsVUFBVSxDQUFDRSxNQUFNLENBQUNPLENBQUMsSUFBSTtRQUFBO1FBQUFyRSxhQUFBLEdBQUFXLENBQUE7UUFBQVgsYUFBQSxHQUFBRyxDQUFBO1FBQUEsa0NBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQXFELENBQUMsQ0FBQ0MsUUFBUTtRQUFBO1FBQUEsQ0FBQXRFLGFBQUEsR0FBQWdCLENBQUEsV0FBSXFELENBQUMsQ0FBQ0UsU0FBUztNQUFULENBQVMsQ0FBQztNQUMxRSxNQUFNRSxpQkFBaUI7TUFBQTtNQUFBLENBQUF6RSxhQUFBLEdBQUFHLENBQUEsUUFBR3lELFVBQVUsQ0FBQ0UsTUFBTSxDQUFDTyxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLFFBQUNrRSxDQUFDLENBQUNDLFFBQVE7TUFBUixDQUFRLENBQUM7TUFFN0Q7TUFDQSxNQUFNSSxjQUFjO01BQUE7TUFBQSxDQUFBMUUsYUFBQSxHQUFBRyxDQUFBLFFBQUd5RCxVQUFVLENBQzlCRSxNQUFNLENBQUNPLENBQUMsSUFBSTtRQUFBO1FBQUFyRSxhQUFBLEdBQUFXLENBQUE7UUFBQVgsYUFBQSxHQUFBRyxDQUFBO1FBQUEsa0NBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQXFELENBQUMsQ0FBQ0MsUUFBUTtRQUFBO1FBQUEsQ0FBQXRFLGFBQUEsR0FBQWdCLENBQUEsV0FBSXFELENBQUMsQ0FBQ00sU0FBUztRQUFBO1FBQUEsQ0FBQTNFLGFBQUEsR0FBQWdCLENBQUEsV0FBSXFELENBQUMsQ0FBQ0UsU0FBUztNQUFULENBQVMsQ0FBQyxDQUNyREssR0FBRyxDQUFDUCxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLFdBQUlnQyxJQUFJLENBQUNrQyxDQUFDLENBQUNFLFNBQVUsQ0FBQyxDQUFDTSxPQUFPLEVBQUUsR0FBRyxJQUFJMUMsSUFBSSxDQUFDa0MsQ0FBQyxDQUFDTSxTQUFTLENBQUMsQ0FBQ0UsT0FBTyxFQUFFO01BQUYsQ0FBRSxDQUFDO01BRS9FLE1BQU1DLG9CQUFvQjtNQUFBO01BQUEsQ0FBQTlFLGFBQUEsR0FBQUcsQ0FBQSxRQUN4QnVFLGNBQWMsQ0FBQ1AsTUFBTSxHQUFHLENBQUM7TUFBQTtNQUFBLENBQUFuRSxhQUFBLEdBQUFnQixDQUFBLFdBQ3JCMEQsY0FBYyxDQUFDSyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxJQUFJLEtBQUs7UUFBQTtRQUFBakYsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLE9BQUE2RSxHQUFHLEdBQUdDLElBQUk7TUFBSixDQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUdQLGNBQWMsQ0FBQ1AsTUFBTTtNQUFBO01BQUEsQ0FBQW5FLGFBQUEsR0FBQWdCLENBQUEsV0FDM0UsQ0FBQztNQUVQLE1BQU1rRSxTQUFTO01BQUE7TUFBQSxDQUFBbEYsYUFBQSxHQUFBRyxDQUFBLFFBQ2J5RCxVQUFVLENBQUNPLE1BQU0sR0FBRyxDQUFDO01BQUE7TUFBQSxDQUFBbkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJd0QsZ0JBQWdCLENBQUNMLE1BQU0sR0FBR1AsVUFBVSxDQUFDTyxNQUFNLEdBQUksR0FBRztNQUFBO01BQUEsQ0FBQW5FLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxDQUFDO01BRWpGO01BQ0EsTUFBTW1FLFVBQVU7TUFBQTtNQUFBLENBQUFuRixhQUFBLEdBQUFHLENBQUEsUUFBRyxJQUFJZ0MsSUFBSSxDQUFDQSxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO01BQ3hELE1BQU1nRCxnQkFBZ0I7TUFBQTtNQUFBLENBQUFwRixhQUFBLEdBQUFHLENBQUEsUUFBR3lELFVBQVUsQ0FBQ0UsTUFBTSxDQUFDTyxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLFdBQUlnQyxJQUFJLENBQUNrQyxDQUFDLENBQUNNLFNBQVMsQ0FBQyxHQUFHUSxVQUFVO01BQVYsQ0FBVSxDQUFDO01BQ25GLE1BQU1FLFVBQVU7TUFBQTtNQUFBLENBQUFyRixhQUFBLEdBQUFHLENBQUEsUUFBR2lGLGdCQUFnQixDQUFDakIsTUFBTSxHQUFHLEVBQUUsRUFBQyxDQUFDO01BRWpEO01BQ0EsTUFBTW1CLFdBQVc7TUFBQTtNQUFBLENBQUF0RixhQUFBLEdBQUFHLENBQUEsUUFBRyxJQUFJLENBQUNvRixzQkFBc0IsRUFBRTtNQUFDO01BQUF2RixhQUFBLEdBQUFHLENBQUE7TUFFbEQsT0FBTztRQUNMcUYsU0FBUyxFQUFFLElBQUlyRCxJQUFJLEVBQUUsQ0FBQ3NELFdBQVcsRUFBRTtRQUNuQzdCLFVBQVUsRUFBRTtVQUNWOEIsS0FBSyxFQUFFOUIsVUFBVSxDQUFDTyxNQUFNO1VBQ3hCd0IsVUFBVSxFQUFFdkIsb0JBQW9CLENBQUNELE1BQU07VUFDdkN5QixNQUFNLEVBQUVwQixnQkFBZ0IsQ0FBQ0wsTUFBTTtVQUMvQjBCLE9BQU8sRUFBRXBCLGlCQUFpQixDQUFDTixNQUFNO1VBQ2pDMkIsT0FBTyxFQUFFLENBQUMsQ0FBRTtTQUNiO1FBQ0RwQyxTQUFTLEVBQUU7VUFDVGdDLEtBQUssRUFBRWhDLFNBQVMsQ0FBQ1MsTUFBTTtVQUN2QkgsTUFBTSxFQUFFSCxlQUFlLENBQUNNLE1BQU07VUFDOUI0QixRQUFRLEVBQUVyQyxTQUFTLENBQUNTLE1BQU0sR0FBR04sZUFBZSxDQUFDTSxNQUFNO1VBQ25ENkIsVUFBVSxFQUFFL0IsbUJBQW1CLENBQUNFO1NBQ2pDO1FBQ0Q4QixXQUFXLEVBQUU7VUFDWG5CLG9CQUFvQjtVQUNwQk8sVUFBVTtVQUNWSDtTQUNEO1FBQ0RnQixNQUFNLEVBQUVaO09BQ1Q7SUFDSCxDQUFDLENBQUMsT0FBT3hELEtBQUssRUFBRTtNQUFBO01BQUE5QixhQUFBLEdBQUFHLENBQUE7TUFDZCxNQUFNLElBQUlxQixLQUFLLENBQ2IsMEJBQTBCTSxLQUFLLFlBQVlOLEtBQUs7TUFBQTtNQUFBLENBQUF4QixhQUFBLEdBQUFnQixDQUFBLFdBQUdjLEtBQUssQ0FBQ0MsT0FBTztNQUFBO01BQUEsQ0FBQS9CLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxlQUFlLEdBQUUsQ0FDckY7SUFDSDtFQUNGO0VBRUE7OztFQUdBLE1BQU1tRixzQkFBc0JBLENBQUNDLFVBQWtCO0lBQUE7SUFBQXBHLGFBQUEsR0FBQVcsQ0FBQTtJQUFBWCxhQUFBLEdBQUFHLENBQUE7SUFDN0MsSUFBSTtNQUNGLE1BQU0sQ0FBQ2tHLFFBQVEsRUFBRS9DLGtCQUFrQixDQUFDO01BQUE7TUFBQSxDQUFBdEQsYUFBQSxHQUFBRyxDQUFBLFFBQUcsTUFBTW9ELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLENBQ3ZELElBQUksQ0FBQ2pELE1BQU0sQ0FBQytGLFdBQVcsQ0FBQ0YsVUFBVSxDQUFDLEVBQ25DLElBQUksQ0FBQzdGLE1BQU0sQ0FBQ2tELGFBQWEsQ0FBQztRQUFFaEIsS0FBSyxFQUFFO01BQUcsQ0FBRSxDQUFDLENBQUU7TUFBQSxDQUM1QyxDQUFDO01BRUY7TUFDQSxNQUFNOEQsYUFBYTtNQUFBO01BQUEsQ0FBQXZHLGFBQUEsR0FBQUcsQ0FBQSxRQUFHbUQsa0JBQWtCLENBQUNLLElBQUk7TUFDN0MsTUFBTUMsVUFBVTtNQUFBO01BQUEsQ0FBQTVELGFBQUEsR0FBQUcsQ0FBQSxRQUFHb0csYUFBYSxDQUFDekMsTUFBTSxDQUFDTyxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLE9BQUFrRSxDQUFDLENBQUMrQixVQUFVLEtBQUtBLFVBQVU7TUFBVixDQUFVLENBQUMsQ0FBQ0ksS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUM7TUFFdEY7TUFDQSxNQUFNQyxNQUFNO01BQUE7TUFBQSxDQUFBekcsYUFBQSxHQUFBRyxDQUFBLFFBQWEsRUFBRTtNQUMzQixNQUFNdUcsZUFBZTtNQUFBO01BQUEsQ0FBQTFHLGFBQUEsR0FBQUcsQ0FBQSxRQUFhLEVBQUU7TUFBQztNQUFBSCxhQUFBLEdBQUFHLENBQUE7TUFFckMsSUFBSSxDQUFDa0csUUFBUSxDQUFDckMsTUFBTSxFQUFFO1FBQUE7UUFBQWhFLGFBQUEsR0FBQWdCLENBQUE7UUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtRQUNwQnNHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLHNCQUFzQixDQUFDO1FBQUM7UUFBQTNHLGFBQUEsR0FBQUcsQ0FBQTtRQUNwQ3VHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLDBEQUEwRCxDQUFDO01BQ2xGLENBQUM7TUFBQTtNQUFBO1FBQUEzRyxhQUFBLEdBQUFnQixDQUFBO01BQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUVEO01BQUk7TUFBQSxDQUFBSCxhQUFBLEdBQUFnQixDQUFBLFlBQUNxRixRQUFRLENBQUNuQyxLQUFLO01BQUE7TUFBQSxDQUFBbEUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJcUYsUUFBUSxDQUFDbkMsS0FBSyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxHQUFFO1FBQUE7UUFBQW5FLGFBQUEsR0FBQWdCLENBQUE7UUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtRQUNsRHNHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLHVCQUF1QixDQUFDO1FBQUM7UUFBQTNHLGFBQUEsR0FBQUcsQ0FBQTtRQUNyQ3VHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLG9DQUFvQyxDQUFDO01BQzVELENBQUM7TUFBQTtNQUFBO1FBQUEzRyxhQUFBLEdBQUFnQixDQUFBO01BQUE7TUFFRDtNQUNBLE1BQU1vRSxnQkFBZ0I7TUFBQTtNQUFBLENBQUFwRixhQUFBLEdBQUFHLENBQUEsUUFBR3lELFVBQVUsQ0FBQzRDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM1QixHQUFHLENBQUNQLENBQUMsSUFBSztRQUFBO1FBQUFyRSxhQUFBLEdBQUFXLENBQUE7UUFBQVgsYUFBQSxHQUFBRyxDQUFBO1FBQUE7VUFDekR5RyxFQUFFLEVBQUV2QyxDQUFDLENBQUN1QyxFQUFHO1VBQ1RuRixNQUFNLEVBQUU0QyxDQUFDLENBQUNDLFFBQVE7VUFBQTtVQUFBLENBQUF0RSxhQUFBLEdBQUFnQixDQUFBLFdBQUlxRCxDQUFDLENBQUNFLFNBQVM7VUFBQTtVQUFBLENBQUF2RSxhQUFBLEdBQUFnQixDQUFBLFdBQUcsUUFBUTtVQUFBO1VBQUEsQ0FBQWhCLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxTQUFTO1VBQUE7VUFBQSxDQUFBaEIsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJLFNBQVM7VUFDckU2RixhQUFhO1VBQ1g7VUFBQSxDQUFBN0csYUFBQSxHQUFBZ0IsQ0FBQSxXQUFBcUQsQ0FBQyxDQUFDQyxRQUFRO1VBQUE7VUFBQSxDQUFBdEUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJcUQsQ0FBQyxDQUFDTSxTQUFTO1VBQUE7VUFBQSxDQUFBM0UsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJcUQsQ0FBQyxDQUFDRSxTQUFTO1VBQUE7VUFBQSxDQUFBdkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUNwQyxJQUFJbUIsSUFBSSxDQUFDa0MsQ0FBQyxDQUFDRSxTQUFTLENBQUMsQ0FBQ00sT0FBTyxFQUFFLEdBQUcsSUFBSTFDLElBQUksQ0FBQ2tDLENBQUMsQ0FBQ00sU0FBUyxDQUFDLENBQUNFLE9BQU8sRUFBRTtVQUFBO1VBQUEsQ0FBQTdFLGFBQUEsR0FBQWdCLENBQUEsV0FDakUsQ0FBQztVQUNQd0UsU0FBUyxFQUFFbkIsQ0FBQyxDQUFDTSxTQUFTO1VBQ3RCN0MsS0FBSyxFQUFFdUMsQ0FBQyxDQUFDRSxTQUFTO1VBQUE7VUFBQSxDQUFBdkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFHLG1CQUFtQjtVQUFBO1VBQUEsQ0FBQWhCLGFBQUEsR0FBQWdCLENBQUEsV0FBRzhGLFNBQVM7U0FDckQ7T0FBQyxDQUFDO01BRUg7TUFDQSxNQUFNQyxrQkFBa0I7TUFBQTtNQUFBLENBQUEvRyxhQUFBLEdBQUFHLENBQUEsUUFBR3lELFVBQVUsQ0FBQ0UsTUFBTSxDQUFDTyxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLE9BQUFrRSxDQUFDLENBQUNDLFFBQVE7TUFBUixDQUFRLENBQUM7TUFDN0QsTUFBTUYsb0JBQW9CO01BQUE7TUFBQSxDQUFBcEUsYUFBQSxHQUFBRyxDQUFBLFFBQUc0RyxrQkFBa0IsQ0FBQ2pELE1BQU0sQ0FBQ08sQ0FBQyxJQUFJO1FBQUE7UUFBQXJFLGFBQUEsR0FBQVcsQ0FBQTtRQUFBWCxhQUFBLEdBQUFHLENBQUE7UUFBQSxRQUFDa0UsQ0FBQyxDQUFDRSxTQUFTO01BQVQsQ0FBUyxDQUFDO01BQ3pFLE1BQU15QyxXQUFXO01BQUE7TUFBQSxDQUFBaEgsYUFBQSxHQUFBRyxDQUFBLFFBQ2Y0RyxrQkFBa0IsQ0FBQzVDLE1BQU0sR0FBRyxDQUFDO01BQUE7TUFBQSxDQUFBbkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUN4Qm9ELG9CQUFvQixDQUFDRCxNQUFNLEdBQUc0QyxrQkFBa0IsQ0FBQzVDLE1BQU0sR0FBSSxHQUFHO01BQUE7TUFBQSxDQUFBbkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUMvRCxHQUFHO01BRVQ7TUFDQSxNQUFNMEQsY0FBYztNQUFBO01BQUEsQ0FBQTFFLGFBQUEsR0FBQUcsQ0FBQSxRQUFHaUYsZ0JBQWdCLENBQ3BDdEIsTUFBTSxDQUFDTyxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLGtDQUFBSCxhQUFBLEdBQUFnQixDQUFBLFdBQUFxRCxDQUFDLENBQUM1QyxNQUFNLEtBQUssU0FBUztRQUFBO1FBQUEsQ0FBQXpCLGFBQUEsR0FBQWdCLENBQUEsV0FBSXFELENBQUMsQ0FBQ3dDLGFBQWEsR0FBRyxDQUFDO01BQUQsQ0FBQyxDQUFDLENBQzFEakMsR0FBRyxDQUFDUCxDQUFDLElBQUk7UUFBQTtRQUFBckUsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBLE9BQUFrRSxDQUFDLENBQUN3QyxhQUFhO01BQWIsQ0FBYSxDQUFDO01BQzVCLE1BQU0vQixvQkFBb0I7TUFBQTtNQUFBLENBQUE5RSxhQUFBLEdBQUFHLENBQUEsU0FDeEJ1RSxjQUFjLENBQUNQLE1BQU0sR0FBRyxDQUFDO01BQUE7TUFBQSxDQUFBbkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUNyQjBELGNBQWMsQ0FBQ0ssTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLO1FBQUE7UUFBQWpGLGFBQUEsR0FBQVcsQ0FBQTtRQUFBWCxhQUFBLEdBQUFHLENBQUE7UUFBQSxPQUFBNkUsR0FBRyxHQUFHQyxJQUFJO01BQUosQ0FBSSxFQUFFLENBQUMsQ0FBQyxHQUFHUCxjQUFjLENBQUNQLE1BQU07TUFBQTtNQUFBLENBQUFuRSxhQUFBLEdBQUFnQixDQUFBLFdBQzNFLENBQUM7TUFFUDtNQUNBLElBQUlpRyxZQUFZO01BQUE7TUFBQSxDQUFBakgsYUFBQSxHQUFBRyxDQUFBLFNBQXVDLFNBQVM7TUFBQztNQUFBSCxhQUFBLEdBQUFHLENBQUE7TUFDakU7TUFBSTtNQUFBLENBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQXlGLE1BQU0sQ0FBQ3RDLE1BQU0sR0FBRyxDQUFDO01BQUE7TUFBQSxDQUFBbkUsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJZ0csV0FBVyxHQUFHLEVBQUUsR0FBRTtRQUFBO1FBQUFoSCxhQUFBLEdBQUFnQixDQUFBO1FBQUFoQixhQUFBLEdBQUFHLENBQUE7UUFDekM4RyxZQUFZLEdBQUcsVUFBVTtNQUMzQixDQUFDLE1BQU07UUFBQTtRQUFBakgsYUFBQSxHQUFBZ0IsQ0FBQTtRQUFBaEIsYUFBQSxHQUFBRyxDQUFBO1FBQUE7UUFBSTtRQUFBLENBQUFILGFBQUEsR0FBQWdCLENBQUEsV0FBQWdHLFdBQVcsR0FBRyxFQUFFO1FBQUE7UUFBQSxDQUFBaEgsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFJOEQsb0JBQW9CLEdBQUcsS0FBSyxHQUFFO1VBQUE7VUFBQTlFLGFBQUEsR0FBQWdCLENBQUE7VUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtVQUMzRDhHLFlBQVksR0FBRyxTQUFTO1FBQzFCLENBQUM7UUFBQTtRQUFBO1VBQUFqSCxhQUFBLEdBQUFnQixDQUFBO1FBQUE7TUFBRDtNQUVBO01BQ0EsTUFBTWtHLFlBQVk7TUFBQTtNQUFBLENBQUFsSCxhQUFBLEdBQUFHLENBQUEsU0FBRztNQUFDO01BQUEsQ0FBQUgsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFBcUYsUUFBUSxDQUFDbkMsS0FBSztNQUFBO01BQUEsQ0FBQWxFLGFBQUEsR0FBQWdCLENBQUEsV0FBSSxFQUFFLEdBQUU0RCxHQUFHLENBQUN1QyxJQUFJLElBQUs7UUFBQTtRQUFBbkgsYUFBQSxHQUFBVyxDQUFBO1FBQUFYLGFBQUEsR0FBQUcsQ0FBQTtRQUFBO1VBQ3ZEeUcsRUFBRSxFQUFFTyxJQUFJLENBQUNQLEVBQUU7VUFDWFEsSUFBSSxFQUFFRCxJQUFJLENBQUNDLElBQUk7VUFDZkMsSUFBSSxFQUFFRixJQUFJLENBQUNFLElBQUk7VUFDZlosTUFBTSxFQUFFVSxJQUFJLENBQUNHLFFBQVE7VUFBQTtVQUFBLENBQUF0SCxhQUFBLEdBQUFnQixDQUFBLFdBQUcsQ0FBQyxrQkFBa0IsQ0FBQztVQUFBO1VBQUEsQ0FBQWhCLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxFQUFFO1VBQ2pEaUYsV0FBVyxFQUFFO1lBQ1hzQixXQUFXLEVBQUUsQ0FBQztZQUFFO1lBQ2hCUCxXQUFXLEVBQUUsR0FBRyxDQUFFOztTQUVyQjtPQUFDLENBQUM7TUFBQztNQUFBaEgsYUFBQSxHQUFBRyxDQUFBO01BRUosT0FBTztRQUNMaUcsVUFBVSxFQUFFQyxRQUFRLENBQUNPLEVBQUc7UUFDeEJZLFlBQVksRUFBRW5CLFFBQVEsQ0FBQ2UsSUFBSTtRQUMzQkssTUFBTSxFQUFFO1VBQ05oRyxNQUFNLEVBQUV3RixZQUFZO1VBQ3BCUixNQUFNO1VBQ05DO1NBQ0Q7UUFDRFQsV0FBVyxFQUFFO1VBQ1huQixvQkFBb0I7VUFDcEJrQyxXQUFXO1VBQ1g1QjtTQUNEO1FBQ0RsQixLQUFLLEVBQUVnRDtPQUNSO0lBQ0gsQ0FBQyxDQUFDLE9BQU9wRixLQUFLLEVBQUU7TUFBQTtNQUFBOUIsYUFBQSxHQUFBRyxDQUFBO01BQ2QsTUFBTSxJQUFJcUIsS0FBSyxDQUNiLHVDQUF1Q00sS0FBSyxZQUFZTixLQUFLO01BQUE7TUFBQSxDQUFBeEIsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFHYyxLQUFLLENBQUNDLE9BQU87TUFBQTtNQUFBLENBQUEvQixhQUFBLEdBQUFnQixDQUFBLFdBQUcsZUFBZSxHQUFFLENBQ2xHO0lBQ0g7RUFDRjtFQUVBOzs7RUFHQXVFLHNCQUFzQkEsQ0FBQTtJQUFBO0lBQUF2RixhQUFBLEdBQUFXLENBQUE7SUFDcEIsTUFBTStHLFFBQVE7SUFBQTtJQUFBLENBQUExSCxhQUFBLEdBQUFHLENBQUEsU0FBRzRDLE9BQU8sQ0FBQzRFLFdBQVcsRUFBRTtJQUN0QyxNQUFNQyxRQUFRO0lBQUE7SUFBQSxDQUFBNUgsYUFBQSxHQUFBRyxDQUFBLFNBQUc0QyxPQUFPLENBQUM2RSxRQUFRLEVBQUU7SUFFbkM7SUFDQSxNQUFNQyxVQUFVO0lBQUE7SUFBQSxDQUFBN0gsYUFBQSxHQUFBRyxDQUFBLFNBQUksQ0FBQ3lILFFBQVEsQ0FBQ0UsSUFBSSxHQUFHRixRQUFRLENBQUMxQixNQUFNLElBQUksT0FBTyxHQUFHbkQsT0FBTyxDQUFDRCxNQUFNLEVBQUUsR0FBSSxHQUFHO0lBQUM7SUFBQTlDLGFBQUEsR0FBQUcsQ0FBQTtJQUUxRixPQUFPO01BQ0w0SCxHQUFHLEVBQUU7UUFDSEMsVUFBVSxFQUFFQyxJQUFJLENBQUNDLEdBQUcsQ0FBQ0wsVUFBVSxFQUFFLEdBQUcsQ0FBQztRQUFFO1FBQ3ZDTSxZQUFZLEVBQUVGLElBQUksQ0FBQ0MsR0FBRyxDQUFDTCxVQUFVLEVBQUUsR0FBRyxDQUFDO1FBQ3ZDTyxXQUFXLEVBQUVyRixPQUFPLENBQUNzRixRQUFRLEtBQUssT0FBTztRQUFBO1FBQUEsQ0FBQXJJLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQUE7UUFBQSxDQUFBaEIsYUFBQSxHQUFBZ0IsQ0FBQSxXQUFHWCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUNpSSxPQUFPLEVBQUU7UUFDL0VDLFNBQVMsRUFBRWxJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ21JLElBQUksRUFBRSxDQUFDckU7T0FDakM7TUFDRHNFLE1BQU0sRUFBRTtRQUNOQyxXQUFXLEVBQUVySSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUNzSSxRQUFRLEVBQUU7UUFDckNDLFVBQVUsRUFBRXZJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ3dJLE9BQU8sRUFBRTtRQUNuQ0MsVUFBVSxFQUFFekksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDc0ksUUFBUSxFQUFFLEdBQUd0SSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUN3SSxPQUFPLEVBQUU7UUFDOURFLGFBQWEsRUFBRTtVQUNiQyxRQUFRLEVBQUV0QixRQUFRLENBQUNzQixRQUFRO1VBQzNCQyxTQUFTLEVBQUV2QixRQUFRLENBQUN1QixTQUFTO1VBQzdCQyxRQUFRLEVBQUV4QixRQUFRLENBQUN3QixRQUFRO1VBQzNCQyxHQUFHLEVBQUV6QixRQUFRLENBQUN5QjtTQUNmO1FBQ0RDLFdBQVcsRUFDUixDQUFDL0ksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDc0ksUUFBUSxFQUFFLEdBQUd0SSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUN3SSxPQUFPLEVBQUUsSUFBSXhJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQ3NJLFFBQVEsRUFBRSxHQUFJO09BQ3ZGO01BQ0RVLElBQUksRUFBRTtRQUNKQyxVQUFVLEVBQUUsQ0FBQztRQUFFO1FBQ2ZDLFNBQVMsRUFBRSxDQUFDO1FBQ1pDLFNBQVMsRUFBRSxDQUFDO1FBQ1pKLFdBQVcsRUFBRTtPQUNkO01BQ0RLLE9BQU8sRUFBRTtRQUNQQyxhQUFhLEVBQUUsQ0FBQztRQUFFO1FBQ2xCQyxTQUFTLEVBQUUsQ0FBQztRQUNaQyxlQUFlLEVBQUUsQ0FBQztRQUNsQkMsV0FBVyxFQUFFO09BQ2Q7TUFDRC9HLE1BQU0sRUFBRUMsT0FBTyxDQUFDRCxNQUFNLEVBQUU7TUFDeEIwQyxTQUFTLEVBQUUsSUFBSXJELElBQUksRUFBRSxDQUFDc0QsV0FBVztLQUNsQztFQUNIO0VBRUE7OztFQUdBLE1BQU1xRSxnQkFBZ0JBLENBQUE7SUFBQTtJQUFBOUosYUFBQSxHQUFBVyxDQUFBO0lBQ3BCLE1BQU11QixTQUFTO0lBQUE7SUFBQSxDQUFBbEMsYUFBQSxHQUFBRyxDQUFBLFNBQUdnQyxJQUFJLENBQUNDLEdBQUcsRUFBRTtJQUFDO0lBQUFwQyxhQUFBLEdBQUFHLENBQUE7SUFFN0IsSUFBSTtNQUFBO01BQUFILGFBQUEsR0FBQUcsQ0FBQTtNQUNGLE1BQU0sSUFBSSxDQUFDSSxNQUFNLENBQUNpQyxZQUFZLENBQUM7UUFBRUMsS0FBSyxFQUFFO01BQUMsQ0FBRSxDQUFDO01BQUM7TUFBQXpDLGFBQUEsR0FBQUcsQ0FBQTtNQUM3QyxPQUFPO1FBQ0w0SixPQUFPLEVBQUUsSUFBSTtRQUNiOUcsWUFBWSxFQUFFZCxJQUFJLENBQUNDLEdBQUcsRUFBRSxHQUFHRjtPQUM1QjtJQUNILENBQUMsQ0FBQyxPQUFPSixLQUFLLEVBQUU7TUFBQTtNQUFBOUIsYUFBQSxHQUFBRyxDQUFBO01BQ2QsT0FBTztRQUNMNEosT0FBTyxFQUFFLEtBQUs7UUFDZDlHLFlBQVksRUFBRWQsSUFBSSxDQUFDQyxHQUFHLEVBQUUsR0FBR0YsU0FBUztRQUNwQ0osS0FBSyxFQUFFQSxLQUFLLFlBQVlOLEtBQUs7UUFBQTtRQUFBLENBQUF4QixhQUFBLEdBQUFnQixDQUFBLFdBQUdjLEtBQUssQ0FBQ0MsT0FBTztRQUFBO1FBQUEsQ0FBQS9CLGFBQUEsR0FBQWdCLENBQUEsV0FBRyxlQUFlO09BQ2hFO0lBQ0g7RUFDRjtFQUVBOzs7RUFHQSxNQUFNZ0osb0JBQW9CQSxDQUFBO0lBQUE7SUFBQWhLLGFBQUEsR0FBQVcsQ0FBQTtJQUN4QixNQUFNLENBQUNzSixXQUFXLEVBQUVDLFlBQVksRUFBRTVFLFdBQVcsQ0FBQztJQUFBO0lBQUEsQ0FBQXRGLGFBQUEsR0FBQUcsQ0FBQSxTQUFHLE1BQU1vRCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxDQUNqRSxJQUFJLENBQUN4QixjQUFjLEVBQUUsRUFDckIsSUFBSSxDQUFDOEgsZ0JBQWdCLEVBQUUsRUFDdkJ2RyxPQUFPLENBQUM0RyxPQUFPLENBQUMsSUFBSSxDQUFDNUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUMvQyxDQUFDO0lBRUYsTUFBTWtCLE1BQU07SUFBQTtJQUFBLENBQUF6RyxhQUFBLEdBQUFHLENBQUEsU0FBYSxFQUFFO0lBQzNCLE1BQU11RyxlQUFlO0lBQUE7SUFBQSxDQUFBMUcsYUFBQSxHQUFBRyxDQUFBLFNBQWEsRUFBRTtJQUVwQztJQUFBO0lBQUFILGFBQUEsR0FBQUcsQ0FBQTtJQUNBLElBQUk4SixXQUFXLENBQUN4SSxNQUFNLEtBQUssVUFBVSxFQUFFO01BQUE7TUFBQXpCLGFBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUNyQ3NHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLDJCQUEyQixDQUFDO01BQUM7TUFBQTNHLGFBQUEsR0FBQUcsQ0FBQTtNQUN6Q3VHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLHlEQUF5RCxDQUFDO0lBQ2pGLENBQUM7SUFBQTtJQUFBO01BQUEzRyxhQUFBLEdBQUFnQixDQUFBO0lBQUE7SUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtJQUVELElBQUksQ0FBQytKLFlBQVksQ0FBQ0gsT0FBTyxFQUFFO01BQUE7TUFBQS9KLGFBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUN6QnNHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLDRCQUE0QnVELFlBQVksQ0FBQ3BJLEtBQUssRUFBRSxDQUFDO01BQUM7TUFBQTlCLGFBQUEsR0FBQUcsQ0FBQTtNQUM5RHVHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLHVEQUF1RCxDQUFDO0lBQy9FLENBQUM7SUFBQTtJQUFBO01BQUEzRyxhQUFBLEdBQUFnQixDQUFBO0lBQUE7SUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtJQUVELElBQUkrSixZQUFZLENBQUNqSCxZQUFZLEdBQUcsSUFBSSxFQUFFO01BQUE7TUFBQWpELGFBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUNwQ3NHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLGlDQUFpQyxDQUFDO01BQUM7TUFBQTNHLGFBQUEsR0FBQUcsQ0FBQTtNQUMvQ3VHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLG1EQUFtRCxDQUFDO0lBQzNFLENBQUM7SUFBQTtJQUFBO01BQUEzRyxhQUFBLEdBQUFnQixDQUFBO0lBQUE7SUFFRDtJQUFBaEIsYUFBQSxHQUFBRyxDQUFBO0lBQ0EsSUFBSW1GLFdBQVcsQ0FBQ21ELE1BQU0sQ0FBQ1csV0FBVyxHQUFHLEVBQUUsRUFBRTtNQUFBO01BQUFwSixhQUFBLEdBQUFnQixDQUFBO01BQUFoQixhQUFBLEdBQUFHLENBQUE7TUFDdkNzRyxNQUFNLENBQUNFLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQztNQUFDO01BQUEzRyxhQUFBLEdBQUFHLENBQUE7TUFDaER1RyxlQUFlLENBQUNDLElBQUksQ0FBQyw4REFBOEQsQ0FBQztJQUN0RixDQUFDO0lBQUE7SUFBQTtNQUFBM0csYUFBQSxHQUFBZ0IsQ0FBQTtJQUFBO0lBQUFoQixhQUFBLEdBQUFHLENBQUE7SUFFRCxJQUFJbUYsV0FBVyxDQUFDeUMsR0FBRyxDQUFDQyxVQUFVLEdBQUcsRUFBRSxFQUFFO01BQUE7TUFBQWhJLGFBQUEsR0FBQWdCLENBQUE7TUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtNQUNuQ3NHLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLHlCQUF5QixDQUFDO01BQUM7TUFBQTNHLGFBQUEsR0FBQUcsQ0FBQTtNQUN2Q3VHLGVBQWUsQ0FBQ0MsSUFBSSxDQUFDLGdFQUFnRSxDQUFDO0lBQ3hGLENBQUM7SUFBQTtJQUFBO01BQUEzRyxhQUFBLEdBQUFnQixDQUFBO0lBQUE7SUFBQWhCLGFBQUEsR0FBQUcsQ0FBQTtJQUVELE9BQU87TUFDTHFGLFNBQVMsRUFBRSxJQUFJckQsSUFBSSxFQUFFLENBQUNzRCxXQUFXLEVBQUU7TUFDbkMyRSxPQUFPLEVBQUU7UUFDUDNJLE1BQU0sRUFBRXdJLFdBQVcsQ0FBQ3hJLE1BQU07UUFDMUJnRixNQUFNO1FBQ05DO09BQ0Q7TUFDRHdELFlBQVksRUFBRTtRQUNaRyxlQUFlLEVBQUVILFlBQVksQ0FBQ0gsT0FBTztRQUNyQzlHLFlBQVksRUFBRWlILFlBQVksQ0FBQ2pILFlBQVk7UUFDdkNuQixLQUFLLEVBQUVvSSxZQUFZLENBQUNwSTtPQUNyQjtNQUNEd0ksU0FBUyxFQUFFaEYsV0FBVztNQUN0QmlGLFdBQVcsRUFBRTtRQUNYQyxXQUFXLEVBQUV6SCxPQUFPLENBQUNGLE9BQU87UUFDNUJ3RixRQUFRLEVBQUV0RixPQUFPLENBQUNzRixRQUFRO1FBQzFCb0MsWUFBWSxFQUFFMUgsT0FBTyxDQUFDMkgsSUFBSTtRQUMxQjVILE1BQU0sRUFBRUMsT0FBTyxDQUFDRCxNQUFNOztLQUV6QjtFQUNIOztBQUNEO0FBQUE5QyxhQUFBLEdBQUFHLENBQUE7QUF4YUR3SyxPQUFBLENBQUFySyxnQkFBQSxHQUFBQSxnQkFBQSIsImlnbm9yZUxpc3QiOltdfQ==