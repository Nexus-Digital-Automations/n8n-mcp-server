5f8de7092e14c4d448eb0f40ececc63b
"use strict";

/* istanbul ignore next */
function cov_1dcgrbr8i() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts";
  var hash = "17a6e63ceaf4509eb8d2bb2a38438d5689605955";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 12,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 3,
          column: 26
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "3": {
        start: {
          line: 4,
          column: 15
        },
        end: {
          line: 4,
          column: 52
        }
      },
      "4": {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 7,
          column: 5
        }
      },
      "5": {
        start: {
          line: 6,
          column: 6
        },
        end: {
          line: 6,
          column: 68
        }
      },
      "6": {
        start: {
          line: 6,
          column: 51
        },
        end: {
          line: 6,
          column: 63
        }
      },
      "7": {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "8": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "9": {
        start: {
          line: 10,
          column: 26
        },
        end: {
          line: 10,
          column: 33
        }
      },
      "10": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 17
        }
      },
      "11": {
        start: {
          line: 13,
          column: 25
        },
        end: {
          line: 17,
          column: 2
        }
      },
      "12": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 72
        }
      },
      "13": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 21
        }
      },
      "14": {
        start: {
          line: 18,
          column: 19
        },
        end: {
          line: 34,
          column: 4
        }
      },
      "15": {
        start: {
          line: 19,
          column: 18
        },
        end: {
          line: 26,
          column: 5
        }
      },
      "16": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 24,
          column: 10
        }
      },
      "17": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "18": {
        start: {
          line: 22,
          column: 12
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "19": {
        start: {
          line: 22,
          column: 29
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "20": {
        start: {
          line: 22,
          column: 77
        },
        end: {
          line: 22,
          column: 95
        }
      },
      "21": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 22
        }
      },
      "22": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 26
        }
      },
      "23": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 6
        }
      },
      "24": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "25": {
        start: {
          line: 28,
          column: 35
        },
        end: {
          line: 28,
          column: 46
        }
      },
      "26": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "27": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "28": {
        start: {
          line: 30,
          column: 25
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "29": {
        start: {
          line: 30,
          column: 38
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "30": {
        start: {
          line: 30,
          column: 56
        },
        end: {
          line: 30,
          column: 57
        }
      },
      "31": {
        start: {
          line: 30,
          column: 78
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "32": {
        start: {
          line: 30,
          column: 102
        },
        end: {
          line: 30,
          column: 137
        }
      },
      "33": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "34": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 22
        }
      },
      "35": {
        start: {
          line: 35,
          column: 0
        },
        end: {
          line: 35,
          column: 62
        }
      },
      "36": {
        start: {
          line: 36,
          column: 0
        },
        end: {
          line: 36,
          column: 33
        }
      },
      "37": {
        start: {
          line: 37,
          column: 11
        },
        end: {
          line: 37,
          column: 38
        }
      },
      "38": {
        start: {
          line: 38,
          column: 11
        },
        end: {
          line: 38,
          column: 38
        }
      },
      "39": {
        start: {
          line: 39,
          column: 15
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "40": {
        start: {
          line: 40,
          column: 13
        },
        end: {
          line: 40,
          column: 43
        }
      },
      "41": {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 19
        }
      },
      "42": {
        start: {
          line: 44,
          column: 13
        },
        end: {
          line: 44,
          column: 15
        }
      },
      "43": {
        start: {
          line: 45,
          column: 25
        },
        end: {
          line: 45,
          column: 29
        }
      },
      "44": {
        start: {
          line: 47,
          column: 23
        },
        end: {
          line: 47,
          column: 32
        }
      },
      "45": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 36
        }
      },
      "46": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 76,
          column: 10
        }
      },
      "47": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 81,
          column: 9
        }
      },
      "48": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 51
        }
      },
      "49": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 84,
          column: 9
        }
      },
      "50": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 83,
          column: 19
        }
      },
      "51": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 92,
          column: 46
        }
      },
      "52": {
        start: {
          line: 86,
          column: 12
        },
        end: {
          line: 91,
          column: 13
        }
      },
      "53": {
        start: {
          line: 87,
          column: 16
        },
        end: {
          line: 87,
          column: 44
        }
      },
      "54": {
        start: {
          line: 90,
          column: 16
        },
        end: {
          line: 90,
          column: 66
        }
      },
      "55": {
        start: {
          line: 93,
          column: 8
        },
        end: {
          line: 93,
          column: 104
        }
      },
      "56": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 100,
          column: 9
        }
      },
      "57": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 51
        }
      },
      "58": {
        start: {
          line: 98,
          column: 12
        },
        end: {
          line: 98,
          column: 43
        }
      },
      "59": {
        start: {
          line: 99,
          column: 12
        },
        end: {
          line: 99,
          column: 55
        }
      },
      "60": {
        start: {
          line: 103,
          column: 26
        },
        end: {
          line: 103,
          column: 50
        }
      },
      "61": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 113,
          column: 9
        }
      },
      "62": {
        start: {
          line: 105,
          column: 34
        },
        end: {
          line: 105,
          column: 69
        }
      },
      "63": {
        start: {
          line: 106,
          column: 12
        },
        end: {
          line: 111,
          column: 15
        }
      },
      "64": {
        start: {
          line: 112,
          column: 12
        },
        end: {
          line: 112,
          column: 62
        }
      },
      "65": {
        start: {
          line: 115,
          column: 8
        },
        end: {
          line: 115,
          column: 36
        }
      },
      "66": {
        start: {
          line: 118,
          column: 25
        },
        end: {
          line: 118,
          column: 49
        }
      },
      "67": {
        start: {
          line: 119,
          column: 27
        },
        end: {
          line: 119,
          column: 48
        }
      },
      "68": {
        start: {
          line: 120,
          column: 25
        },
        end: {
          line: 120,
          column: 50
        }
      },
      "69": {
        start: {
          line: 121,
          column: 28
        },
        end: {
          line: 121,
          column: 56
        }
      },
      "70": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 140,
          column: 10
        }
      },
      "71": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "72": {
        start: {
          line: 144,
          column: 31
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "73": {
        start: {
          line: 145,
          column: 30
        },
        end: {
          line: 145,
          column: 46
        }
      },
      "74": {
        start: {
          line: 146,
          column: 12
        },
        end: {
          line: 160,
          column: 20
        }
      },
      "75": {
        start: {
          line: 147,
          column: 37
        },
        end: {
          line: 147,
          column: 65
        }
      },
      "76": {
        start: {
          line: 148,
          column: 36
        },
        end: {
          line: 148,
          column: 61
        }
      },
      "77": {
        start: {
          line: 149,
          column: 36
        },
        end: {
          line: 149,
          column: 84
        }
      },
      "78": {
        start: {
          line: 150,
          column: 37
        },
        end: {
          line: 150,
          column: 76
        }
      },
      "79": {
        start: {
          line: 151,
          column: 37
        },
        end: {
          line: 151,
          column: 71
        }
      },
      "80": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 153,
          column: 47
        }
      },
      "81": {
        start: {
          line: 154,
          column: 34
        },
        end: {
          line: 154,
          column: 50
        }
      },
      "82": {
        start: {
          line: 155,
          column: 35
        },
        end: {
          line: 155,
          column: 77
        }
      },
      "83": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 159,
          column: 19
        }
      },
      "84": {
        start: {
          line: 164,
          column: 25
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "85": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 170,
          column: 10
        }
      },
      "86": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 194,
          column: 9
        }
      },
      "87": {
        start: {
          line: 174,
          column: 26
        },
        end: {
          line: 174,
          column: 51
        }
      },
      "88": {
        start: {
          line: 177,
          column: 31
        },
        end: {
          line: 177,
          column: 44
        }
      },
      "89": {
        start: {
          line: 178,
          column: 30
        },
        end: {
          line: 178,
          column: 42
        }
      },
      "90": {
        start: {
          line: 179,
          column: 30
        },
        end: {
          line: 179,
          column: 52
        }
      },
      "91": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 185,
          column: 14
        }
      },
      "92": {
        start: {
          line: 188,
          column: 12
        },
        end: {
          line: 193,
          column: 14
        }
      },
      "93": {
        start: {
          line: 199,
          column: 8
        },
        end: {
          line: 204,
          column: 10
        }
      },
      "94": {
        start: {
          line: 207,
          column: 33
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "95": {
        start: {
          line: 208,
          column: 33
        },
        end: {
          line: 209,
          column: 9
        }
      },
      "96": {
        start: {
          line: 208,
          column: 65
        },
        end: {
          line: 208,
          column: 114
        }
      },
      "97": {
        start: {
          line: 210,
          column: 31
        },
        end: {
          line: 210,
          column: 83
        }
      },
      "98": {
        start: {
          line: 210,
          column: 63
        },
        end: {
          line: 210,
          column: 75
        }
      },
      "99": {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 49
        }
      },
      "100": {
        start: {
          line: 212,
          column: 35
        },
        end: {
          line: 212,
          column: 97
        }
      },
      "101": {
        start: {
          line: 212,
          column: 74
        },
        end: {
          line: 212,
          column: 93
        }
      },
      "102": {
        start: {
          line: 213,
          column: 37
        },
        end: {
          line: 213,
          column: 87
        }
      },
      "103": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 245,
          column: 10
        }
      },
      "104": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 249,
          column: 21
        }
      },
      "105": {
        start: {
          line: 249,
          column: 12
        },
        end: {
          line: 249,
          column: 21
        }
      },
      "106": {
        start: {
          line: 250,
          column: 30
        },
        end: {
          line: 250,
          column: 87
        }
      },
      "107": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 73
        }
      },
      "108": {
        start: {
          line: 254,
          column: 28
        },
        end: {
          line: 254,
          column: 63
        }
      },
      "109": {
        start: {
          line: 255,
          column: 23
        },
        end: {
          line: 255,
          column: 25
        }
      },
      "110": {
        start: {
          line: 256,
          column: 32
        },
        end: {
          line: 256,
          column: 34
        }
      },
      "111": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "112": {
        start: {
          line: 259,
          column: 12
        },
        end: {
          line: 259,
          column: 51
        }
      },
      "113": {
        start: {
          line: 260,
          column: 12
        },
        end: {
          line: 260,
          column: 99
        }
      },
      "114": {
        start: {
          line: 262,
          column: 8
        },
        end: {
          line: 265,
          column: 9
        }
      },
      "115": {
        start: {
          line: 263,
          column: 12
        },
        end: {
          line: 263,
          column: 54
        }
      },
      "116": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 264,
          column: 112
        }
      },
      "117": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 269,
          column: 9
        }
      },
      "118": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 267,
          column: 50
        }
      },
      "119": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 268,
          column: 73
        }
      },
      "120": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 270,
          column: 81
        }
      },
      "121": {
        start: {
          line: 271,
          column: 23
        },
        end: {
          line: 271,
          column: 77
        }
      },
      "122": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 314,
          column: 10
        }
      },
      "123": {
        start: {
          line: 307,
          column: 48
        },
        end: {
          line: 307,
          column: 65
        }
      },
      "124": {
        start: {
          line: 307,
          column: 81
        },
        end: {
          line: 313,
          column: 13
        }
      },
      "125": {
        start: {
          line: 317,
          column: 20
        },
        end: {
          line: 317,
          column: 23
        }
      },
      "126": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 68
        }
      },
      "127": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 72
        }
      },
      "128": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 70
        }
      },
      "129": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 33
        }
      },
      "130": {
        start: {
          line: 324,
          column: 8
        },
        end: {
          line: 324,
          column: 61
        }
      },
      "131": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 328,
          column: 29
        }
      },
      "132": {
        start: {
          line: 328,
          column: 12
        },
        end: {
          line: 328,
          column: 29
        }
      },
      "133": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 330,
          column: 29
        }
      },
      "134": {
        start: {
          line: 330,
          column: 12
        },
        end: {
          line: 330,
          column: 29
        }
      },
      "135": {
        start: {
          line: 331,
          column: 8
        },
        end: {
          line: 332,
          column: 30
        }
      },
      "136": {
        start: {
          line: 332,
          column: 12
        },
        end: {
          line: 332,
          column: 30
        }
      },
      "137": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 333,
          column: 26
        }
      },
      "138": {
        start: {
          line: 336,
          column: 27
        },
        end: {
          line: 336,
          column: 65
        }
      },
      "139": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 348,
          column: 9
        }
      },
      "140": {
        start: {
          line: 338,
          column: 12
        },
        end: {
          line: 347,
          column: 15
        }
      },
      "141": {
        start: {
          line: 349,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "142": {
        start: {
          line: 350,
          column: 12
        },
        end: {
          line: 359,
          column: 15
        }
      },
      "143": {
        start: {
          line: 363,
          column: 22
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "144": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 32
        }
      },
      "145": {
        start: {
          line: 375,
          column: 8
        },
        end: {
          line: 375,
          column: 116
        }
      },
      "146": {
        start: {
          line: 375,
          column: 46
        },
        end: {
          line: 375,
          column: 114
        }
      },
      "147": {
        start: {
          line: 378,
          column: 8
        },
        end: {
          line: 380,
          column: 9
        }
      },
      "148": {
        start: {
          line: 379,
          column: 12
        },
        end: {
          line: 379,
          column: 54
        }
      },
      "149": {
        start: {
          line: 381,
          column: 24
        },
        end: {
          line: 381,
          column: 61
        }
      },
      "150": {
        start: {
          line: 382,
          column: 8
        },
        end: {
          line: 386,
          column: 11
        }
      },
      "151": {
        start: {
          line: 388,
          column: 8
        },
        end: {
          line: 390,
          column: 9
        }
      },
      "152": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 389,
          column: 53
        }
      },
      "153": {
        start: {
          line: 393,
          column: 8
        },
        end: {
          line: 393,
          column: 40
        }
      },
      "154": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 397,
          column: 9
        }
      },
      "155": {
        start: {
          line: 396,
          column: 12
        },
        end: {
          line: 396,
          column: 98
        }
      },
      "156": {
        start: {
          line: 400,
          column: 27
        },
        end: {
          line: 400,
          column: 100
        }
      },
      "157": {
        start: {
          line: 401,
          column: 8
        },
        end: {
          line: 401,
          column: 102
        }
      },
      "158": {
        start: {
          line: 401,
          column: 55
        },
        end: {
          line: 401,
          column: 100
        }
      },
      "159": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 412,
          column: 10
        }
      },
      "160": {
        start: {
          line: 406,
          column: 30
        },
        end: {
          line: 406,
          column: 56
        }
      },
      "161": {
        start: {
          line: 415,
          column: 21
        },
        end: {
          line: 415,
          column: 36
        }
      },
      "162": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "163": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 417,
          column: 71
        }
      },
      "164": {
        start: {
          line: 417,
          column: 41
        },
        end: {
          line: 417,
          column: 69
        }
      },
      "165": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 421,
          column: 9
        }
      },
      "166": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 420,
          column: 42
        }
      },
      "167": {
        start: {
          line: 422,
          column: 8
        },
        end: {
          line: 422,
          column: 22
        }
      },
      "168": {
        start: {
          line: 425,
          column: 21
        },
        end: {
          line: 425,
          column: 32
        }
      },
      "169": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 428,
          column: 9
        }
      },
      "170": {
        start: {
          line: 427,
          column: 12
        },
        end: {
          line: 427,
          column: 73
        }
      },
      "171": {
        start: {
          line: 427,
          column: 44
        },
        end: {
          line: 427,
          column: 71
        }
      },
      "172": {
        start: {
          line: 429,
          column: 8
        },
        end: {
          line: 431,
          column: 9
        }
      },
      "173": {
        start: {
          line: 430,
          column: 12
        },
        end: {
          line: 430,
          column: 84
        }
      },
      "174": {
        start: {
          line: 430,
          column: 44
        },
        end: {
          line: 430,
          column: 82
        }
      },
      "175": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 432,
          column: 108
        }
      },
      "176": {
        start: {
          line: 432,
          column: 37
        },
        end: {
          line: 432,
          column: 106
        }
      },
      "177": {
        start: {
          line: 435,
          column: 22
        },
        end: {
          line: 435,
          column: 61
        }
      },
      "178": {
        start: {
          line: 435,
          column: 44
        },
        end: {
          line: 435,
          column: 60
        }
      },
      "179": {
        start: {
          line: 436,
          column: 8
        },
        end: {
          line: 439,
          column: 9
        }
      },
      "180": {
        start: {
          line: 437,
          column: 12
        },
        end: {
          line: 437,
          column: 56
        }
      },
      "181": {
        start: {
          line: 438,
          column: 12
        },
        end: {
          line: 438,
          column: 24
        }
      },
      "182": {
        start: {
          line: 440,
          column: 8
        },
        end: {
          line: 440,
          column: 21
        }
      },
      "183": {
        start: {
          line: 443,
          column: 8
        },
        end: {
          line: 443,
          column: 55
        }
      },
      "184": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "185": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 445,
          column: 34
        }
      },
      "186": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 35
        }
      },
      "187": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 450,
          column: 34
        }
      },
      "188": {
        start: {
          line: 453,
          column: 0
        },
        end: {
          line: 453,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 2,
            column: 75
          }
        },
        loc: {
          start: {
            line: 2,
            column: 96
          },
          end: {
            line: 9,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 6,
            column: 38
          },
          end: {
            line: 6,
            column: 39
          }
        },
        loc: {
          start: {
            line: 6,
            column: 49
          },
          end: {
            line: 6,
            column: 65
          }
        },
        line: 6
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 9,
            column: 7
          }
        },
        loc: {
          start: {
            line: 9,
            column: 28
          },
          end: {
            line: 12,
            column: 1
          }
        },
        line: 9
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 13,
            column: 81
          }
        },
        loc: {
          start: {
            line: 13,
            column: 95
          },
          end: {
            line: 15,
            column: 1
          }
        },
        line: 13
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 15,
            column: 6
          }
        },
        loc: {
          start: {
            line: 15,
            column: 20
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 15
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 18,
            column: 51
          },
          end: {
            line: 18,
            column: 52
          }
        },
        loc: {
          start: {
            line: 18,
            column: 63
          },
          end: {
            line: 34,
            column: 1
          }
        },
        line: 18
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 19,
            column: 19
          }
        },
        loc: {
          start: {
            line: 19,
            column: 30
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 19
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 20,
            column: 49
          }
        },
        loc: {
          start: {
            line: 20,
            column: 61
          },
          end: {
            line: 24,
            column: 9
          }
        },
        line: 20
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 27,
            column: 11
          },
          end: {
            line: 27,
            column: 12
          }
        },
        loc: {
          start: {
            line: 27,
            column: 26
          },
          end: {
            line: 33,
            column: 5
          }
        },
        line: 27
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        loc: {
          start: {
            line: 48,
            column: 24
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 48
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        loc: {
          start: {
            line: 78,
            column: 28
          },
          end: {
            line: 94,
            column: 5
          }
        },
        line: 78
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 85,
            column: 46
          },
          end: {
            line: 85,
            column: 47
          }
        },
        loc: {
          start: {
            line: 85,
            column: 58
          },
          end: {
            line: 92,
            column: 9
          }
        },
        line: 85
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        loc: {
          start: {
            line: 95,
            column: 21
          },
          end: {
            line: 101,
            column: 5
          }
        },
        line: 95
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        loc: {
          start: {
            line: 102,
            column: 27
          },
          end: {
            line: 116,
            column: 5
          }
        },
        line: 102
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        loc: {
          start: {
            line: 117,
            column: 35
          },
          end: {
            line: 141,
            column: 5
          }
        },
        line: 117
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 142,
            column: 5
          }
        },
        loc: {
          start: {
            line: 142,
            column: 24
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 142
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 143,
            column: 27
          },
          end: {
            line: 143,
            column: 28
          }
        },
        loc: {
          start: {
            line: 143,
            column: 40
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 143
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 24
          }
        },
        loc: {
          start: {
            line: 146,
            column: 29
          },
          end: {
            line: 160,
            column: 13
          }
        },
        line: 146
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 5
          }
        },
        loc: {
          start: {
            line: 163,
            column: 21
          },
          end: {
            line: 171,
            column: 5
          }
        },
        line: 163
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 172,
            column: 5
          }
        },
        loc: {
          start: {
            line: 172,
            column: 25
          },
          end: {
            line: 195,
            column: 5
          }
        },
        line: 172
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 196,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        loc: {
          start: {
            line: 196,
            column: 28
          },
          end: {
            line: 205,
            column: 5
          }
        },
        line: 196
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 206,
            column: 4
          },
          end: {
            line: 206,
            column: 5
          }
        },
        loc: {
          start: {
            line: 206,
            column: 71
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 206
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 208,
            column: 57
          },
          end: {
            line: 208,
            column: 58
          }
        },
        loc: {
          start: {
            line: 208,
            column: 65
          },
          end: {
            line: 208,
            column: 114
          }
        },
        line: 208
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 210,
            column: 55
          },
          end: {
            line: 210,
            column: 56
          }
        },
        loc: {
          start: {
            line: 210,
            column: 63
          },
          end: {
            line: 210,
            column: 75
          }
        },
        line: 210
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 212,
            column: 59
          },
          end: {
            line: 212,
            column: 60
          }
        },
        loc: {
          start: {
            line: 212,
            column: 74
          },
          end: {
            line: 212,
            column: 93
          }
        },
        line: 212
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 252,
            column: 5
          }
        },
        line: 247
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 253,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        loc: {
          start: {
            line: 253,
            column: 37
          },
          end: {
            line: 315,
            column: 5
          }
        },
        line: 253
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 307,
            column: 39
          },
          end: {
            line: 307,
            column: 40
          }
        },
        loc: {
          start: {
            line: 307,
            column: 48
          },
          end: {
            line: 307,
            column: 65
          }
        },
        line: 307
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 307,
            column: 71
          },
          end: {
            line: 307,
            column: 72
          }
        },
        loc: {
          start: {
            line: 307,
            column: 81
          },
          end: {
            line: 313,
            column: 13
          }
        },
        line: 307
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 316,
            column: 4
          },
          end: {
            line: 316,
            column: 5
          }
        },
        loc: {
          start: {
            line: 316,
            column: 50
          },
          end: {
            line: 325,
            column: 5
          }
        },
        line: 316
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 326,
            column: 4
          },
          end: {
            line: 326,
            column: 5
          }
        },
        loc: {
          start: {
            line: 326,
            column: 45
          },
          end: {
            line: 334,
            column: 5
          }
        },
        line: 326
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 335,
            column: 4
          },
          end: {
            line: 335,
            column: 5
          }
        },
        loc: {
          start: {
            line: 335,
            column: 47
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 335
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 362,
            column: 4
          },
          end: {
            line: 362,
            column: 5
          }
        },
        loc: {
          start: {
            line: 362,
            column: 33
          },
          end: {
            line: 376,
            column: 5
          }
        },
        line: 362
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 375,
            column: 41
          },
          end: {
            line: 375,
            column: 42
          }
        },
        loc: {
          start: {
            line: 375,
            column: 46
          },
          end: {
            line: 375,
            column: 114
          }
        },
        line: 375
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 377,
            column: 4
          },
          end: {
            line: 377,
            column: 5
          }
        },
        loc: {
          start: {
            line: 377,
            column: 59
          },
          end: {
            line: 391,
            column: 5
          }
        },
        line: 377
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 392,
            column: 4
          },
          end: {
            line: 392,
            column: 5
          }
        },
        loc: {
          start: {
            line: 392,
            column: 28
          },
          end: {
            line: 398,
            column: 5
          }
        },
        line: 392
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 399,
            column: 5
          }
        },
        loc: {
          start: {
            line: 399,
            column: 27
          },
          end: {
            line: 402,
            column: 5
          }
        },
        line: 399
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 401,
            column: 49
          },
          end: {
            line: 401,
            column: 50
          }
        },
        loc: {
          start: {
            line: 401,
            column: 55
          },
          end: {
            line: 401,
            column: 100
          }
        },
        line: 401
      },
      "38": {
        name: "(anonymous_38)",
        decl: {
          start: {
            line: 403,
            column: 4
          },
          end: {
            line: 403,
            column: 5
          }
        },
        loc: {
          start: {
            line: 403,
            column: 17
          },
          end: {
            line: 413,
            column: 5
          }
        },
        line: 403
      },
      "39": {
        name: "(anonymous_39)",
        decl: {
          start: {
            line: 406,
            column: 24
          },
          end: {
            line: 406,
            column: 25
          }
        },
        loc: {
          start: {
            line: 406,
            column: 30
          },
          end: {
            line: 406,
            column: 56
          }
        },
        line: 406
      },
      "40": {
        name: "(anonymous_40)",
        decl: {
          start: {
            line: 414,
            column: 4
          },
          end: {
            line: 414,
            column: 5
          }
        },
        loc: {
          start: {
            line: 414,
            column: 37
          },
          end: {
            line: 423,
            column: 5
          }
        },
        line: 414
      },
      "41": {
        name: "(anonymous_41)",
        decl: {
          start: {
            line: 417,
            column: 35
          },
          end: {
            line: 417,
            column: 36
          }
        },
        loc: {
          start: {
            line: 417,
            column: 41
          },
          end: {
            line: 417,
            column: 69
          }
        },
        line: 417
      },
      "42": {
        name: "(anonymous_42)",
        decl: {
          start: {
            line: 424,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        loc: {
          start: {
            line: 424,
            column: 34
          },
          end: {
            line: 433,
            column: 5
          }
        },
        line: 424
      },
      "43": {
        name: "(anonymous_43)",
        decl: {
          start: {
            line: 427,
            column: 35
          },
          end: {
            line: 427,
            column: 36
          }
        },
        loc: {
          start: {
            line: 427,
            column: 44
          },
          end: {
            line: 427,
            column: 71
          }
        },
        line: 427
      },
      "44": {
        name: "(anonymous_44)",
        decl: {
          start: {
            line: 430,
            column: 35
          },
          end: {
            line: 430,
            column: 36
          }
        },
        loc: {
          start: {
            line: 430,
            column: 44
          },
          end: {
            line: 430,
            column: 82
          }
        },
        line: 430
      },
      "45": {
        name: "(anonymous_45)",
        decl: {
          start: {
            line: 432,
            column: 27
          },
          end: {
            line: 432,
            column: 28
          }
        },
        loc: {
          start: {
            line: 432,
            column: 37
          },
          end: {
            line: 432,
            column: 106
          }
        },
        line: 432
      },
      "46": {
        name: "(anonymous_46)",
        decl: {
          start: {
            line: 434,
            column: 4
          },
          end: {
            line: 434,
            column: 5
          }
        },
        loc: {
          start: {
            line: 434,
            column: 26
          },
          end: {
            line: 441,
            column: 5
          }
        },
        line: 434
      },
      "47": {
        name: "(anonymous_47)",
        decl: {
          start: {
            line: 435,
            column: 39
          },
          end: {
            line: 435,
            column: 40
          }
        },
        loc: {
          start: {
            line: 435,
            column: 44
          },
          end: {
            line: 435,
            column: 60
          }
        },
        line: 435
      },
      "48": {
        name: "(anonymous_48)",
        decl: {
          start: {
            line: 442,
            column: 4
          },
          end: {
            line: 442,
            column: 5
          }
        },
        loc: {
          start: {
            line: 442,
            column: 28
          },
          end: {
            line: 448,
            column: 5
          }
        },
        line: 442
      },
      "49": {
        name: "(anonymous_49)",
        decl: {
          start: {
            line: 449,
            column: 4
          },
          end: {
            line: 449,
            column: 5
          }
        },
        loc: {
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 451,
            column: 5
          }
        },
        line: 449
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 12,
            column: 3
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 2,
            column: 57
          },
          end: {
            line: 12,
            column: 2
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 2,
            column: 74
          },
          end: {
            line: 9,
            column: 1
          }
        }, {
          start: {
            line: 9,
            column: 6
          },
          end: {
            line: 12,
            column: 1
          }
        }],
        line: 2
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 5,
            column: 4
          },
          end: {
            line: 7,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 5
      },
      "4": {
        loc: {
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 8
          },
          end: {
            line: 5,
            column: 13
          }
        }, {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "5": {
        loc: {
          start: {
            line: 5,
            column: 18
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 5,
            column: 34
          },
          end: {
            line: 5,
            column: 47
          }
        }, {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "6": {
        loc: {
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 84
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 5,
            column: 50
          },
          end: {
            line: 5,
            column: 63
          }
        }, {
          start: {
            line: 5,
            column: 67
          },
          end: {
            line: 5,
            column: 84
          }
        }],
        line: 5
      },
      "7": {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 10
      },
      "8": {
        loc: {
          start: {
            line: 13,
            column: 25
          },
          end: {
            line: 17,
            column: 2
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 26
          },
          end: {
            line: 13,
            column: 30
          }
        }, {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 13,
            column: 57
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "9": {
        loc: {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 17,
            column: 1
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 13,
            column: 80
          },
          end: {
            line: 15,
            column: 1
          }
        }, {
          start: {
            line: 15,
            column: 5
          },
          end: {
            line: 17,
            column: 1
          }
        }],
        line: 13
      },
      "10": {
        loc: {
          start: {
            line: 18,
            column: 19
          },
          end: {
            line: 34,
            column: 4
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 24
          }
        }, {
          start: {
            line: 18,
            column: 28
          },
          end: {
            line: 18,
            column: 45
          }
        }, {
          start: {
            line: 18,
            column: 50
          },
          end: {
            line: 34,
            column: 4
          }
        }],
        line: 18
      },
      "11": {
        loc: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 24,
            column: 9
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 44
          }
        }, {
          start: {
            line: 20,
            column: 48
          },
          end: {
            line: 24,
            column: 9
          }
        }],
        line: 20
      },
      "12": {
        loc: {
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 29
          },
          end: {
            line: 22,
            column: 95
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "13": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 46
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "14": {
        loc: {
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 12
          },
          end: {
            line: 28,
            column: 15
          }
        }, {
          start: {
            line: 28,
            column: 19
          },
          end: {
            line: 28,
            column: 33
          }
        }],
        line: 28
      },
      "15": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "16": {
        loc: {
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 78
          },
          end: {
            line: 30,
            column: 137
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "17": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 81,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "18": {
        loc: {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 84,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 82
      },
      "19": {
        loc: {
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 8
          },
          end: {
            line: 100,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "20": {
        loc: {
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 8
          },
          end: {
            line: 113,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "21": {
        loc: {
          start: {
            line: 207,
            column: 33
          },
          end: {
            line: 207,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 207,
            column: 33
          },
          end: {
            line: 207,
            column: 70
          }
        }, {
          start: {
            line: 207,
            column: 74
          },
          end: {
            line: 207,
            column: 76
          }
        }],
        line: 207
      },
      "22": {
        loc: {
          start: {
            line: 213,
            column: 37
          },
          end: {
            line: 213,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 213,
            column: 53
          },
          end: {
            line: 213,
            column: 83
          }
        }, {
          start: {
            line: 213,
            column: 86
          },
          end: {
            line: 213,
            column: 87
          }
        }],
        line: 213
      },
      "23": {
        loc: {
          start: {
            line: 221,
            column: 35
          },
          end: {
            line: 221,
            column: 123
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 221,
            column: 65
          },
          end: {
            line: 221,
            column: 119
          }
        }, {
          start: {
            line: 221,
            column: 122
          },
          end: {
            line: 221,
            column: 123
          }
        }],
        line: 221
      },
      "24": {
        loc: {
          start: {
            line: 226,
            column: 29
          },
          end: {
            line: 226,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 226,
            column: 40
          },
          end: {
            line: 226,
            column: 48
          }
        }, {
          start: {
            line: 226,
            column: 51
          },
          end: {
            line: 226,
            column: 52
          }
        }],
        line: 226
      },
      "25": {
        loc: {
          start: {
            line: 231,
            column: 29
          },
          end: {
            line: 231,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 231,
            column: 40
          },
          end: {
            line: 231,
            column: 42
          }
        }, {
          start: {
            line: 231,
            column: 45
          },
          end: {
            line: 231,
            column: 46
          }
        }],
        line: 231
      },
      "26": {
        loc: {
          start: {
            line: 238,
            column: 29
          },
          end: {
            line: 238,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 45
          },
          end: {
            line: 238,
            column: 79
          }
        }, {
          start: {
            line: 238,
            column: 82
          },
          end: {
            line: 238,
            column: 85
          }
        }],
        line: 238
      },
      "27": {
        loc: {
          start: {
            line: 239,
            column: 31
          },
          end: {
            line: 241,
            column: 46
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 240,
            column: 22
          },
          end: {
            line: 240,
            column: 101
          }
        }, {
          start: {
            line: 241,
            column: 22
          },
          end: {
            line: 241,
            column: 46
          }
        }],
        line: 239
      },
      "28": {
        loc: {
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 249,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 248,
            column: 8
          },
          end: {
            line: 249,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 248
      },
      "29": {
        loc: {
          start: {
            line: 251,
            column: 15
          },
          end: {
            line: 251,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 251,
            column: 35
          },
          end: {
            line: 251,
            column: 68
          }
        }, {
          start: {
            line: 251,
            column: 71
          },
          end: {
            line: 251,
            column: 72
          }
        }],
        line: 251
      },
      "30": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "31": {
        loc: {
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 8
          },
          end: {
            line: 265,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "32": {
        loc: {
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 8
          },
          end: {
            line: 269,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "33": {
        loc: {
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 328,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 327,
            column: 8
          },
          end: {
            line: 328,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 327
      },
      "34": {
        loc: {
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 327,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 327,
            column: 12
          },
          end: {
            line: 327,
            column: 23
          }
        }, {
          start: {
            line: 327,
            column: 27
          },
          end: {
            line: 327,
            column: 43
          }
        }],
        line: 327
      },
      "35": {
        loc: {
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 330,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 329,
            column: 8
          },
          end: {
            line: 330,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 329
      },
      "36": {
        loc: {
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 329,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 329,
            column: 12
          },
          end: {
            line: 329,
            column: 23
          }
        }, {
          start: {
            line: 329,
            column: 27
          },
          end: {
            line: 329,
            column: 42
          }
        }],
        line: 329
      },
      "37": {
        loc: {
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 332,
            column: 30
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 8
          },
          end: {
            line: 332,
            column: 30
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 331
      },
      "38": {
        loc: {
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 337,
            column: 8
          },
          end: {
            line: 348,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 337
      },
      "39": {
        loc: {
          start: {
            line: 340,
            column: 26
          },
          end: {
            line: 340,
            column: 79
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 60
          },
          end: {
            line: 340,
            column: 70
          }
        }, {
          start: {
            line: 340,
            column: 73
          },
          end: {
            line: 340,
            column: 79
          }
        }],
        line: 340
      },
      "40": {
        loc: {
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 349,
            column: 8
          },
          end: {
            line: 360,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 349
      },
      "41": {
        loc: {
          start: {
            line: 352,
            column: 26
          },
          end: {
            line: 352,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 352,
            column: 64
          },
          end: {
            line: 352,
            column: 74
          }
        }, {
          start: {
            line: 352,
            column: 77
          },
          end: {
            line: 352,
            column: 83
          }
        }],
        line: 352
      },
      "42": {
        loc: {
          start: {
            line: 365,
            column: 18
          },
          end: {
            line: 365,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 365,
            column: 18
          },
          end: {
            line: 365,
            column: 32
          }
        }, {
          start: {
            line: 365,
            column: 36
          },
          end: {
            line: 365,
            column: 56
          }
        }],
        line: 365
      },
      "43": {
        loc: {
          start: {
            line: 366,
            column: 22
          },
          end: {
            line: 366,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 22
          },
          end: {
            line: 366,
            column: 40
          }
        }, {
          start: {
            line: 366,
            column: 44
          },
          end: {
            line: 366,
            column: 52
          }
        }],
        line: 366
      },
      "44": {
        loc: {
          start: {
            line: 367,
            column: 19
          },
          end: {
            line: 367,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 367,
            column: 19
          },
          end: {
            line: 367,
            column: 34
          }
        }, {
          start: {
            line: 367,
            column: 38
          },
          end: {
            line: 367,
            column: 57
          }
        }],
        line: 367
      },
      "45": {
        loc: {
          start: {
            line: 368,
            column: 25
          },
          end: {
            line: 368,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 368,
            column: 25
          },
          end: {
            line: 368,
            column: 46
          }
        }, {
          start: {
            line: 368,
            column: 50
          },
          end: {
            line: 368,
            column: 82
          }
        }],
        line: 368
      },
      "46": {
        loc: {
          start: {
            line: 370,
            column: 22
          },
          end: {
            line: 370,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 370,
            column: 22
          },
          end: {
            line: 370,
            column: 40
          }
        }, {
          start: {
            line: 370,
            column: 44
          },
          end: {
            line: 370,
            column: 46
          }
        }],
        line: 370
      },
      "47": {
        loc: {
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 378,
            column: 8
          },
          end: {
            line: 380,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 378
      },
      "48": {
        loc: {
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 388,
            column: 8
          },
          end: {
            line: 390,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 388
      },
      "49": {
        loc: {
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 395,
            column: 8
          },
          end: {
            line: 397,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 395
      },
      "50": {
        loc: {
          start: {
            line: 405,
            column: 20
          },
          end: {
            line: 407,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 405,
            column: 20
          },
          end: {
            line: 407,
            column: 35
          }
        }, {
          start: {
            line: 407,
            column: 39
          },
          end: {
            line: 407,
            column: 41
          }
        }],
        line: 405
      },
      "51": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "52": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 421,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "53": {
        loc: {
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 426,
            column: 8
          },
          end: {
            line: 428,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 426
      },
      "54": {
        loc: {
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 429,
            column: 8
          },
          end: {
            line: 431,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 429
      },
      "55": {
        loc: {
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 439,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 436,
            column: 8
          },
          end: {
            line: 439,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 436
      },
      "56": {
        loc: {
          start: {
            line: 436,
            column: 12
          },
          end: {
            line: 436,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 436,
            column: 12
          },
          end: {
            line: 436,
            column: 17
          }
        }, {
          start: {
            line: 436,
            column: 21
          },
          end: {
            line: 436,
            column: 38
          }
        }],
        line: 436
      },
      "57": {
        loc: {
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0],
      "9": [0, 0],
      "10": [0, 0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/utils/resourceMonitor.ts"],
      sourcesContent: ["import * as os from 'os';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  InstanceHealthMetrics,\n  ResourceMonitoringConfig,\n  MonitoringDataPoint,\n  PerformanceAlert,\n  ResourceThresholds,\n  MonitoringMetrics,\n} from '../types/monitoringTypes.js';\n\nconst stat = promisify(fs.stat);\n\nexport class ResourceMonitor {\n  private config: ResourceMonitoringConfig;\n  private dataPoints: MonitoringDataPoint[] = [];\n  private alerts: PerformanceAlert[] = [];\n  private monitoringInterval: NodeJS.Timeout | null = null;\n  private startTime: number;\n  private executionHistory: Map<string, Array<{ timestamp: number; duration: number; success: boolean }>> = new Map();\n\n  constructor(config?: Partial<ResourceMonitoringConfig>) {\n    this.startTime = Date.now();\n    this.config = {\n      monitoring: {\n        enabled: true,\n        intervalMs: 30000, // 30 seconds default\n        retentionDays: 7,\n        alertThresholds: {\n          cpuUsage: 80,\n          memoryUsage: 85,\n          diskUsage: 90,\n          executionTime: 300000, // 5 minutes\n          errorRate: 10,\n        },\n      },\n      collection: {\n        systemMetrics: true,\n        workflowMetrics: true,\n        nodeMetrics: true,\n        healthChecks: true,\n      },\n      storage: {\n        inMemory: true,\n        persistToDisk: false,\n        maxDataPoints: 10000,\n        compressionEnabled: false,\n      },\n      ...config,\n    };\n  }\n\n  async startMonitoring(): Promise<void> {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n    }\n\n    if (!this.config.monitoring.enabled) {\n      return;\n    }\n\n    this.monitoringInterval = setInterval(async () => {\n      try {\n        await this.collectMetrics();\n      } catch (error) {\n        console.error('Error collecting metrics:', error);\n      }\n    }, this.config.monitoring.intervalMs);\n\n    console.log(`Resource monitoring started with ${this.config.monitoring.intervalMs}ms interval`);\n  }\n\n  stopMonitoring(): void {\n    if (this.monitoringInterval) {\n      clearInterval(this.monitoringInterval);\n      this.monitoringInterval = null;\n      console.log('Resource monitoring stopped');\n    }\n  }\n\n  private async collectMetrics(): Promise<void> {\n    const timestamp = new Date().toISOString();\n\n    if (this.config.collection.systemMetrics) {\n      const systemMetrics = await this.getSystemResourceUsage();\n      this.addDataPoint({\n        timestamp,\n        metricType: 'system',\n        data: systemMetrics as unknown as Record<string, unknown>,\n        tags: { source: 'system' },\n      });\n      \n      await this.checkResourceThresholds(systemMetrics);\n    }\n\n    // Clean up old data points\n    this.cleanupOldDataPoints();\n  }\n\n  async getSystemResourceUsage(): Promise<SystemResourceUsage> {\n    const cpuUsage = await this.getCPUUsage();\n    const memoryInfo = this.getMemoryUsage();\n    const diskInfo = await this.getDiskUsage();\n    const networkInfo = await this.getNetworkUsage();\n\n    return {\n      cpu: {\n        totalUsage: cpuUsage.totalUsage,\n        processUsage: cpuUsage.processUsage,\n        loadAverage: os.loadavg(),\n        coreCount: os.cpus().length,\n      },\n      memory: {\n        totalMemory: os.totalmem(),\n        freeMemory: os.freemem(),\n        usedMemory: os.totalmem() - os.freemem(),\n        processMemory: memoryInfo,\n        utilization: ((os.totalmem() - os.freemem()) / os.totalmem()) * 100,\n      },\n      disk: diskInfo,\n      network: networkInfo,\n      uptime: (Date.now() - this.startTime) / 1000,\n      timestamp: new Date().toISOString(),\n    };\n  }\n\n  private async getCPUUsage(): Promise<{ totalUsage: number; processUsage: number }> {\n    return new Promise((resolve) => {\n      const startUsage = process.cpuUsage();\n      const startTime = process.hrtime();\n\n      setTimeout(() => {\n        const currentUsage = process.cpuUsage(startUsage);\n        const currentTime = process.hrtime(startTime);\n        \n        const elapsedTime = currentTime[0] * 1000000 + currentTime[1] / 1000; // microseconds\n        const totalCPUTime = currentUsage.user + currentUsage.system;\n        const processUsage = (totalCPUTime / elapsedTime) * 100;\n\n        // System CPU usage approximation based on load average\n        const loadAvg = os.loadavg()[0];\n        const coreCount = os.cpus().length;\n        const totalUsage = Math.min((loadAvg / coreCount) * 100, 100);\n\n        resolve({\n          totalUsage: Math.round(totalUsage * 100) / 100,\n          processUsage: Math.round(processUsage * 100) / 100,\n        });\n      }, 100);\n    });\n  }\n\n  private getMemoryUsage(): SystemResourceUsage['memory']['processMemory'] {\n    const memUsage = process.memoryUsage();\n    return {\n      heapUsed: memUsage.heapUsed,\n      heapTotal: memUsage.heapTotal,\n      external: memUsage.external,\n      rss: memUsage.rss,\n    };\n  }\n\n  private async getDiskUsage(): Promise<SystemResourceUsage['disk']> {\n    try {\n      const stats = await stat(process.cwd());\n      \n      // This is a simplified implementation\n      // In production, you'd use platform-specific methods to get actual disk usage\n      const totalSpace = 1000000000000; // 1TB placeholder\n      const freeSpace = 500000000000; // 500GB placeholder\n      const usedSpace = totalSpace - freeSpace;\n      \n      return {\n        totalSpace,\n        freeSpace,\n        usedSpace,\n        utilization: (usedSpace / totalSpace) * 100,\n      };\n    } catch (error) {\n      return {\n        totalSpace: 0,\n        freeSpace: 0,\n        usedSpace: 0,\n        utilization: 0,\n      };\n    }\n  }\n\n  private async getNetworkUsage(): Promise<SystemResourceUsage['network']> {\n    // Simplified network usage - in production you'd read from /proc/net/dev on Linux\n    // or use platform-specific APIs\n    return {\n      bytesReceived: 0,\n      bytesSent: 0,\n      packetsReceived: 0,\n      packetsSent: 0,\n    };\n  }\n\n  async getWorkflowResourceUsage(workflowId: string, workflowName: string, isActive: boolean): Promise<WorkflowResourceUsage> {\n    const executionHistory = this.executionHistory.get(workflowId) || [];\n    const recentExecutions = executionHistory.filter(exec => \n      Date.now() - exec.timestamp < 24 * 60 * 60 * 1000 // Last 24 hours\n    );\n\n    const successfulRuns = recentExecutions.filter(exec => exec.success).length;\n    const totalRuns = recentExecutions.length;\n    const totalExecutionTime = recentExecutions.reduce((sum, exec) => sum + exec.duration, 0);\n    const averageExecutionTime = totalRuns > 0 ? totalExecutionTime / totalRuns : 0;\n\n    return {\n      workflowId,\n      workflowName,\n      isActive,\n      executionCount: totalRuns,\n      resourceMetrics: {\n        averageExecutionTime: Math.round(averageExecutionTime),\n        lastExecutionTime: recentExecutions.length > 0 ? recentExecutions[recentExecutions.length - 1].duration : 0,\n        totalExecutionTime: Math.round(totalExecutionTime),\n        memoryUsage: {\n          average: 50000000, // 50MB placeholder\n          peak: 100000000, // 100MB placeholder\n          current: isActive ? 75000000 : 0, // 75MB placeholder\n        },\n        cpuUsage: {\n          average: 15, // 15% placeholder\n          peak: 80, // 80% placeholder\n          current: isActive ? 25 : 0, // 25% placeholder\n        },\n      },\n      executionStats: {\n        successfulRuns,\n        failedRuns: totalRuns - successfulRuns,\n        totalRuns,\n        successRate: totalRuns > 0 ? (successfulRuns / totalRuns) * 100 : 100,\n        lastExecution: recentExecutions.length > 0 \n          ? new Date(recentExecutions[recentExecutions.length - 1].timestamp).toISOString()\n          : new Date().toISOString(),\n        averageRunsPerHour: this.calculateRunsPerHour(recentExecutions),\n      },\n      nodePerformance: [], // Would be populated with actual node performance data\n    };\n  }\n\n  private calculateRunsPerHour(executions: Array<{ timestamp: number; duration: number; success: boolean }>): number {\n    if (executions.length === 0) return 0;\n    \n    const timeSpanHours = (Date.now() - executions[0].timestamp) / (1000 * 60 * 60);\n    return timeSpanHours > 0 ? executions.length / timeSpanHours : 0;\n  }\n\n  async getInstanceHealthMetrics(): Promise<InstanceHealthMetrics> {\n    const systemUsage = await this.getSystemResourceUsage();\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    \n    // Analyze system health\n    if (systemUsage.cpu.totalUsage > 80) {\n      issues.push('High CPU usage detected');\n      recommendations.push('Consider scaling horizontally or optimizing workflow execution');\n    }\n    \n    if (systemUsage.memory.utilization > 85) {\n      issues.push('High memory usage detected');\n      recommendations.push('Monitor memory-intensive workflows and consider increasing available memory');\n    }\n    \n    if (systemUsage.disk.utilization > 90) {\n      issues.push('Low disk space warning');\n      recommendations.push('Clean up old execution data and logs');\n    }\n\n    const healthScore = this.calculateHealthScore(systemUsage, issues.length);\n    const status = this.determineHealthStatus(healthScore, issues.length);\n\n    return {\n      overall: {\n        status,\n        score: healthScore,\n        issues,\n        recommendations,\n      },\n      performance: {\n        responseTime: 150, // Placeholder - would measure actual API response time\n        throughput: 10, // Placeholder - executions per minute\n        errorRate: 2, // Placeholder - error percentage\n        availabilityUptime: 99.5, // Placeholder - uptime percentage\n      },\n      resources: {\n        memoryPressure: systemUsage.memory.utilization > 85,\n        cpuThrottling: systemUsage.cpu.totalUsage > 90,\n        diskSpaceWarning: systemUsage.disk.utilization > 90,\n        networkLatency: 50, // Placeholder\n      },\n      dependencies: [\n        {\n          name: 'Database',\n          type: 'database',\n          status: 'online',\n          responseTime: 25,\n          errorCount: 0,\n        },\n        {\n          name: 'File System',\n          type: 'file_system',\n          status: 'online',\n          responseTime: 10,\n          errorCount: 0,\n        },\n      ],\n      alerts: this.alerts.filter(alert => !alert.resolvedAt).map(alert => ({\n        id: alert.id,\n        severity: alert.severity as 'info' | 'warning' | 'error' | 'critical',\n        message: alert.description,\n        timestamp: alert.triggeredAt,\n        resolved: Boolean(alert.resolvedAt),\n      })),\n    };\n  }\n\n  private calculateHealthScore(systemUsage: SystemResourceUsage, issueCount: number): number {\n    let score = 100;\n    \n    // Deduct points based on resource usage\n    score -= Math.max(0, systemUsage.cpu.totalUsage - 50) * 0.5;\n    score -= Math.max(0, systemUsage.memory.utilization - 60) * 0.3;\n    score -= Math.max(0, systemUsage.disk.utilization - 70) * 0.2;\n    \n    // Deduct points for issues\n    score -= issueCount * 10;\n    \n    return Math.max(0, Math.min(100, Math.round(score)));\n  }\n\n  private determineHealthStatus(score: number, issueCount: number): 'healthy' | 'warning' | 'critical' | 'degraded' {\n    if (score >= 90 && issueCount === 0) return 'healthy';\n    if (score >= 70 && issueCount <= 1) return 'warning';\n    if (score >= 50) return 'degraded';\n    return 'critical';\n  }\n\n  private async checkResourceThresholds(systemUsage: SystemResourceUsage): Promise<void> {\n    const thresholds = this.config.monitoring.alertThresholds;\n    \n    if (systemUsage.cpu.totalUsage > thresholds.cpuUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.cpu.totalUsage > 95 ? 'critical' : 'high',\n        title: 'High CPU Usage',\n        description: `CPU usage is ${systemUsage.cpu.totalUsage.toFixed(1)}%, exceeding threshold of ${thresholds.cpuUsage}%`,\n        metadata: {\n          threshold: thresholds.cpuUsage,\n          actualValue: systemUsage.cpu.totalUsage,\n        },\n      });\n    }\n    \n    if (systemUsage.memory.utilization > thresholds.memoryUsage) {\n      await this.createAlert({\n        type: 'resource_threshold',\n        severity: systemUsage.memory.utilization > 95 ? 'critical' : 'high',\n        title: 'High Memory Usage',\n        description: `Memory usage is ${systemUsage.memory.utilization.toFixed(1)}%, exceeding threshold of ${thresholds.memoryUsage}%`,\n        metadata: {\n          threshold: thresholds.memoryUsage,\n          actualValue: systemUsage.memory.utilization,\n        },\n      });\n    }\n  }\n\n  private async createAlert(alertData: Partial<PerformanceAlert>): Promise<void> {\n    const alert: PerformanceAlert = {\n      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      type: alertData.type || 'resource_threshold',\n      severity: alertData.severity || 'medium',\n      title: alertData.title || 'Performance Alert',\n      description: alertData.description || 'Performance threshold exceeded',\n      triggeredAt: new Date().toISOString(),\n      metadata: alertData.metadata || {},\n      actions: [],\n    };\n    \n    this.alerts.push(alert);\n    \n    // Keep only recent alerts\n    this.alerts = this.alerts.filter(a => \n      Date.now() - new Date(a.triggeredAt).getTime() < 24 * 60 * 60 * 1000\n    );\n  }\n\n  recordWorkflowExecution(workflowId: string, duration: number, success: boolean): void {\n    if (!this.executionHistory.has(workflowId)) {\n      this.executionHistory.set(workflowId, []);\n    }\n    \n    const history = this.executionHistory.get(workflowId)!;\n    history.push({\n      timestamp: Date.now(),\n      duration,\n      success,\n    });\n    \n    // Keep only last 1000 executions per workflow\n    if (history.length > 1000) {\n      history.splice(0, history.length - 1000);\n    }\n  }\n\n  private addDataPoint(dataPoint: MonitoringDataPoint): void {\n    this.dataPoints.push(dataPoint);\n    \n    // Enforce max data points limit\n    if (this.dataPoints.length > this.config.storage.maxDataPoints) {\n      this.dataPoints.splice(0, this.dataPoints.length - this.config.storage.maxDataPoints);\n    }\n  }\n\n  private cleanupOldDataPoints(): void {\n    const cutoffTime = Date.now() - (this.config.monitoring.retentionDays * 24 * 60 * 60 * 1000);\n    this.dataPoints = this.dataPoints.filter(dp => \n      new Date(dp.timestamp).getTime() > cutoffTime\n    );\n  }\n\n  getMetrics(): MonitoringMetrics {\n    return {\n      system: (this.dataPoints\n        .filter(dp => dp.metricType === 'system')\n        .slice(-1)[0]?.data as unknown as SystemResourceUsage) || {} as SystemResourceUsage,\n      workflows: [],\n      health: {} as InstanceHealthMetrics,\n      alerts: this.alerts,\n      dataPoints: this.dataPoints,\n    };\n  }\n\n  getDataPoints(metricType?: string, limit?: number): MonitoringDataPoint[] {\n    let points = this.dataPoints;\n    \n    if (metricType) {\n      points = points.filter(dp => dp.metricType === metricType);\n    }\n    \n    if (limit) {\n      points = points.slice(-limit);\n    }\n    \n    return points;\n  }\n\n  getAlerts(severity?: string, resolved?: boolean): PerformanceAlert[] {\n    let alerts = this.alerts;\n    \n    if (severity) {\n      alerts = alerts.filter(alert => alert.severity === severity);\n    }\n    \n    if (resolved !== undefined) {\n      alerts = alerts.filter(alert => Boolean(alert.resolvedAt) === resolved);\n    }\n    \n    return alerts.sort((a, b) => \n      new Date(b.triggeredAt).getTime() - new Date(a.triggeredAt).getTime()\n    );\n  }\n\n  resolveAlert(alertId: string): boolean {\n    const alert = this.alerts.find(a => a.id === alertId);\n    if (alert && !alert.resolvedAt) {\n      alert.resolvedAt = new Date().toISOString();\n      return true;\n    }\n    return false;\n  }\n\n  updateConfig(newConfig: Partial<ResourceMonitoringConfig>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    if (this.monitoringInterval) {\n      this.stopMonitoring();\n      this.startMonitoring();\n    }\n  }\n\n  getConfig(): ResourceMonitoringConfig {\n    return { ...this.config };\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "17a6e63ceaf4509eb8d2bb2a38438d5689605955"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1dcgrbr8i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1dcgrbr8i();
var __createBinding =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[0]++,
/* istanbul ignore next */
(cov_1dcgrbr8i().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_1dcgrbr8i().b[0][1]++, this.__createBinding) ||
/* istanbul ignore next */
(cov_1dcgrbr8i().b[0][2]++, Object.create ?
/* istanbul ignore next */
(cov_1dcgrbr8i().b[1][0]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1dcgrbr8i().f[0]++;
  cov_1dcgrbr8i().s[1]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().b[2][0]++;
    cov_1dcgrbr8i().s[2]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1dcgrbr8i().b[2][1]++;
  }
  var desc =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[3]++, Object.getOwnPropertyDescriptor(m, k));
  /* istanbul ignore next */
  cov_1dcgrbr8i().s[4]++;
  if (
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[4][0]++, !desc) ||
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[4][1]++, "get" in desc ?
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[5][0]++, !m.__esModule) :
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[5][1]++,
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[6][0]++, desc.writable) ||
  /* istanbul ignore next */
  (cov_1dcgrbr8i().b[6][1]++, desc.configurable)))) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().b[3][0]++;
    cov_1dcgrbr8i().s[5]++;
    desc = {
      enumerable: true,
      get: function () {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[1]++;
        cov_1dcgrbr8i().s[6]++;
        return m[k];
      }
    };
  } else
  /* istanbul ignore next */
  {
    cov_1dcgrbr8i().b[3][1]++;
  }
  cov_1dcgrbr8i().s[7]++;
  Object.defineProperty(o, k2, desc);
}) :
/* istanbul ignore next */
(cov_1dcgrbr8i().b[1][1]++, function (o, m, k, k2) {
  /* istanbul ignore next */
  cov_1dcgrbr8i().f[2]++;
  cov_1dcgrbr8i().s[8]++;
  if (k2 === undefined) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().b[7][0]++;
    cov_1dcgrbr8i().s[9]++;
    k2 = k;
  } else
  /* istanbul ignore next */
  {
    cov_1dcgrbr8i().b[7][1]++;
  }
  cov_1dcgrbr8i().s[10]++;
  o[k2] = m[k];
})));
var __setModuleDefault =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[11]++,
/* istanbul ignore next */
(cov_1dcgrbr8i().b[8][0]++, this) &&
/* istanbul ignore next */
(cov_1dcgrbr8i().b[8][1]++, this.__setModuleDefault) ||
/* istanbul ignore next */
(cov_1dcgrbr8i().b[8][2]++, Object.create ?
/* istanbul ignore next */
(cov_1dcgrbr8i().b[9][0]++, function (o, v) {
  /* istanbul ignore next */
  cov_1dcgrbr8i().f[3]++;
  cov_1dcgrbr8i().s[12]++;
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
}) :
/* istanbul ignore next */
(cov_1dcgrbr8i().b[9][1]++, function (o, v) {
  /* istanbul ignore next */
  cov_1dcgrbr8i().f[4]++;
  cov_1dcgrbr8i().s[13]++;
  o["default"] = v;
})));
var __importStar =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[14]++,
/* istanbul ignore next */
(cov_1dcgrbr8i().b[10][0]++, this) &&
/* istanbul ignore next */
(cov_1dcgrbr8i().b[10][1]++, this.__importStar) ||
/* istanbul ignore next */
(cov_1dcgrbr8i().b[10][2]++, function () {
  /* istanbul ignore next */
  cov_1dcgrbr8i().f[5]++;
  cov_1dcgrbr8i().s[15]++;
  var ownKeys = function (o) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[6]++;
    cov_1dcgrbr8i().s[16]++;
    ownKeys =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[11][0]++, Object.getOwnPropertyNames) ||
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[11][1]++, function (o) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[7]++;
      var ar =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[17]++, []);
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[18]++;
      for (var k in o) {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[19]++;
        if (Object.prototype.hasOwnProperty.call(o, k)) {
          /* istanbul ignore next */
          cov_1dcgrbr8i().b[12][0]++;
          cov_1dcgrbr8i().s[20]++;
          ar[ar.length] = k;
        } else
        /* istanbul ignore next */
        {
          cov_1dcgrbr8i().b[12][1]++;
        }
      }
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[21]++;
      return ar;
    });
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[22]++;
    return ownKeys(o);
  };
  /* istanbul ignore next */
  cov_1dcgrbr8i().s[23]++;
  return function (mod) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[8]++;
    cov_1dcgrbr8i().s[24]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[14][0]++, mod) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[14][1]++, mod.__esModule)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[13][0]++;
      cov_1dcgrbr8i().s[25]++;
      return mod;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[13][1]++;
    }
    var result =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[26]++, {});
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[27]++;
    if (mod != null) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[15][0]++;
      cov_1dcgrbr8i().s[28]++;
      for (var k =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[29]++, ownKeys(mod)), i =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[30]++, 0); i < k.length; i++) {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[31]++;
        if (k[i] !== "default") {
          /* istanbul ignore next */
          cov_1dcgrbr8i().b[16][0]++;
          cov_1dcgrbr8i().s[32]++;
          __createBinding(result, mod, k[i]);
        } else
        /* istanbul ignore next */
        {
          cov_1dcgrbr8i().b[16][1]++;
        }
      }
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[15][1]++;
    }
    cov_1dcgrbr8i().s[33]++;
    __setModuleDefault(result, mod);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[34]++;
    return result;
  };
}()));
/* istanbul ignore next */
cov_1dcgrbr8i().s[35]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1dcgrbr8i().s[36]++;
exports.ResourceMonitor = void 0;
const os =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[37]++, __importStar(require("os")));
const fs =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[38]++, __importStar(require("fs")));
const util_1 =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[39]++, require("util"));
const stat =
/* istanbul ignore next */
(cov_1dcgrbr8i().s[40]++, (0, util_1.promisify)(fs.stat));
class ResourceMonitor {
  config;
  dataPoints =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[41]++, []);
  alerts =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[42]++, []);
  monitoringInterval =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[43]++, null);
  startTime;
  executionHistory =
  /* istanbul ignore next */
  (cov_1dcgrbr8i().s[44]++, new Map());
  constructor(config) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[9]++;
    cov_1dcgrbr8i().s[45]++;
    this.startTime = Date.now();
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[46]++;
    this.config = {
      monitoring: {
        enabled: true,
        intervalMs: 30000,
        // 30 seconds default
        retentionDays: 7,
        alertThresholds: {
          cpuUsage: 80,
          memoryUsage: 85,
          diskUsage: 90,
          executionTime: 300000,
          // 5 minutes
          errorRate: 10
        }
      },
      collection: {
        systemMetrics: true,
        workflowMetrics: true,
        nodeMetrics: true,
        healthChecks: true
      },
      storage: {
        inMemory: true,
        persistToDisk: false,
        maxDataPoints: 10000,
        compressionEnabled: false
      },
      ...config
    };
  }
  async startMonitoring() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[10]++;
    cov_1dcgrbr8i().s[47]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[17][0]++;
      cov_1dcgrbr8i().s[48]++;
      clearInterval(this.monitoringInterval);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[17][1]++;
    }
    cov_1dcgrbr8i().s[49]++;
    if (!this.config.monitoring.enabled) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[18][0]++;
      cov_1dcgrbr8i().s[50]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[18][1]++;
    }
    cov_1dcgrbr8i().s[51]++;
    this.monitoringInterval = setInterval(async () => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[11]++;
      cov_1dcgrbr8i().s[52]++;
      try {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[53]++;
        await this.collectMetrics();
      } catch (error) {
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[54]++;
        console.error('Error collecting metrics:', error);
      }
    }, this.config.monitoring.intervalMs);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[55]++;
    console.log(`Resource monitoring started with ${this.config.monitoring.intervalMs}ms interval`);
  }
  stopMonitoring() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[12]++;
    cov_1dcgrbr8i().s[56]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[19][0]++;
      cov_1dcgrbr8i().s[57]++;
      clearInterval(this.monitoringInterval);
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[58]++;
      this.monitoringInterval = null;
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[59]++;
      console.log('Resource monitoring stopped');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[19][1]++;
    }
  }
  async collectMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[13]++;
    const timestamp =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[60]++, new Date().toISOString());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[61]++;
    if (this.config.collection.systemMetrics) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[20][0]++;
      const systemMetrics =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[62]++, await this.getSystemResourceUsage());
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[63]++;
      this.addDataPoint({
        timestamp,
        metricType: 'system',
        data: systemMetrics,
        tags: {
          source: 'system'
        }
      });
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[64]++;
      await this.checkResourceThresholds(systemMetrics);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[20][1]++;
    }
    // Clean up old data points
    cov_1dcgrbr8i().s[65]++;
    this.cleanupOldDataPoints();
  }
  async getSystemResourceUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[14]++;
    const cpuUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[66]++, await this.getCPUUsage());
    const memoryInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[67]++, this.getMemoryUsage());
    const diskInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[68]++, await this.getDiskUsage());
    const networkInfo =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[69]++, await this.getNetworkUsage());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[70]++;
    return {
      cpu: {
        totalUsage: cpuUsage.totalUsage,
        processUsage: cpuUsage.processUsage,
        loadAverage: os.loadavg(),
        coreCount: os.cpus().length
      },
      memory: {
        totalMemory: os.totalmem(),
        freeMemory: os.freemem(),
        usedMemory: os.totalmem() - os.freemem(),
        processMemory: memoryInfo,
        utilization: (os.totalmem() - os.freemem()) / os.totalmem() * 100
      },
      disk: diskInfo,
      network: networkInfo,
      uptime: (Date.now() - this.startTime) / 1000,
      timestamp: new Date().toISOString()
    };
  }
  async getCPUUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[15]++;
    cov_1dcgrbr8i().s[71]++;
    return new Promise(resolve => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[16]++;
      const startUsage =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[72]++, process.cpuUsage());
      const startTime =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[73]++, process.hrtime());
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[74]++;
      setTimeout(() => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[17]++;
        const currentUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[75]++, process.cpuUsage(startUsage));
        const currentTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[76]++, process.hrtime(startTime));
        const elapsedTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[77]++, currentTime[0] * 1000000 + currentTime[1] / 1000); // microseconds
        const totalCPUTime =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[78]++, currentUsage.user + currentUsage.system);
        const processUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[79]++, totalCPUTime / elapsedTime * 100);
        // System CPU usage approximation based on load average
        const loadAvg =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[80]++, os.loadavg()[0]);
        const coreCount =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[81]++, os.cpus().length);
        const totalUsage =
        /* istanbul ignore next */
        (cov_1dcgrbr8i().s[82]++, Math.min(loadAvg / coreCount * 100, 100));
        /* istanbul ignore next */
        cov_1dcgrbr8i().s[83]++;
        resolve({
          totalUsage: Math.round(totalUsage * 100) / 100,
          processUsage: Math.round(processUsage * 100) / 100
        });
      }, 100);
    });
  }
  getMemoryUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[18]++;
    const memUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[84]++, process.memoryUsage());
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[85]++;
    return {
      heapUsed: memUsage.heapUsed,
      heapTotal: memUsage.heapTotal,
      external: memUsage.external,
      rss: memUsage.rss
    };
  }
  async getDiskUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[19]++;
    cov_1dcgrbr8i().s[86]++;
    try {
      const stats =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[87]++, await stat(process.cwd()));
      // This is a simplified implementation
      // In production, you'd use platform-specific methods to get actual disk usage
      const totalSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[88]++, 1000000000000); // 1TB placeholder
      const freeSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[89]++, 500000000000); // 500GB placeholder
      const usedSpace =
      /* istanbul ignore next */
      (cov_1dcgrbr8i().s[90]++, totalSpace - freeSpace);
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[91]++;
      return {
        totalSpace,
        freeSpace,
        usedSpace,
        utilization: usedSpace / totalSpace * 100
      };
    } catch (error) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[92]++;
      return {
        totalSpace: 0,
        freeSpace: 0,
        usedSpace: 0,
        utilization: 0
      };
    }
  }
  async getNetworkUsage() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[20]++;
    cov_1dcgrbr8i().s[93]++;
    // Simplified network usage - in production you'd read from /proc/net/dev on Linux
    // or use platform-specific APIs
    return {
      bytesReceived: 0,
      bytesSent: 0,
      packetsReceived: 0,
      packetsSent: 0
    };
  }
  async getWorkflowResourceUsage(workflowId, workflowName, isActive) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[21]++;
    const executionHistory =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[94]++,
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[21][0]++, this.executionHistory.get(workflowId)) ||
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[21][1]++, []));
    const recentExecutions =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[95]++, executionHistory.filter(exec => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[22]++;
      cov_1dcgrbr8i().s[96]++;
      return Date.now() - exec.timestamp < 24 * 60 * 60 * 1000;
    } // Last 24 hours
    ));
    const successfulRuns =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[97]++, recentExecutions.filter(exec => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[23]++;
      cov_1dcgrbr8i().s[98]++;
      return exec.success;
    }).length);
    const totalRuns =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[99]++, recentExecutions.length);
    const totalExecutionTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[100]++, recentExecutions.reduce((sum, exec) => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[24]++;
      cov_1dcgrbr8i().s[101]++;
      return sum + exec.duration;
    }, 0));
    const averageExecutionTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[102]++, totalRuns > 0 ?
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[22][0]++, totalExecutionTime / totalRuns) :
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[22][1]++, 0));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[103]++;
    return {
      workflowId,
      workflowName,
      isActive,
      executionCount: totalRuns,
      resourceMetrics: {
        averageExecutionTime: Math.round(averageExecutionTime),
        lastExecutionTime: recentExecutions.length > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[23][0]++, recentExecutions[recentExecutions.length - 1].duration) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[23][1]++, 0),
        totalExecutionTime: Math.round(totalExecutionTime),
        memoryUsage: {
          average: 50000000,
          // 50MB placeholder
          peak: 100000000,
          // 100MB placeholder
          current: isActive ?
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[24][0]++, 75000000) :
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[24][1]++, 0) // 75MB placeholder
        },
        cpuUsage: {
          average: 15,
          // 15% placeholder
          peak: 80,
          // 80% placeholder
          current: isActive ?
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[25][0]++, 25) :
          /* istanbul ignore next */
          (cov_1dcgrbr8i().b[25][1]++, 0) // 25% placeholder
        }
      },
      executionStats: {
        successfulRuns,
        failedRuns: totalRuns - successfulRuns,
        totalRuns,
        successRate: totalRuns > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[26][0]++, successfulRuns / totalRuns * 100) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[26][1]++, 100),
        lastExecution: recentExecutions.length > 0 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[27][0]++, new Date(recentExecutions[recentExecutions.length - 1].timestamp).toISOString()) :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[27][1]++, new Date().toISOString()),
        averageRunsPerHour: this.calculateRunsPerHour(recentExecutions)
      },
      nodePerformance: [] // Would be populated with actual node performance data
    };
  }
  calculateRunsPerHour(executions) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[25]++;
    cov_1dcgrbr8i().s[104]++;
    if (executions.length === 0) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[28][0]++;
      cov_1dcgrbr8i().s[105]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[28][1]++;
    }
    const timeSpanHours =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[106]++, (Date.now() - executions[0].timestamp) / (1000 * 60 * 60));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[107]++;
    return timeSpanHours > 0 ?
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[29][0]++, executions.length / timeSpanHours) :
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[29][1]++, 0);
  }
  async getInstanceHealthMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[26]++;
    const systemUsage =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[108]++, await this.getSystemResourceUsage());
    const issues =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[109]++, []);
    const recommendations =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[110]++, []);
    // Analyze system health
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[111]++;
    if (systemUsage.cpu.totalUsage > 80) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[30][0]++;
      cov_1dcgrbr8i().s[112]++;
      issues.push('High CPU usage detected');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[113]++;
      recommendations.push('Consider scaling horizontally or optimizing workflow execution');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[30][1]++;
    }
    cov_1dcgrbr8i().s[114]++;
    if (systemUsage.memory.utilization > 85) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[31][0]++;
      cov_1dcgrbr8i().s[115]++;
      issues.push('High memory usage detected');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[116]++;
      recommendations.push('Monitor memory-intensive workflows and consider increasing available memory');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[31][1]++;
    }
    cov_1dcgrbr8i().s[117]++;
    if (systemUsage.disk.utilization > 90) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[32][0]++;
      cov_1dcgrbr8i().s[118]++;
      issues.push('Low disk space warning');
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[119]++;
      recommendations.push('Clean up old execution data and logs');
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[32][1]++;
    }
    const healthScore =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[120]++, this.calculateHealthScore(systemUsage, issues.length));
    const status =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[121]++, this.determineHealthStatus(healthScore, issues.length));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[122]++;
    return {
      overall: {
        status,
        score: healthScore,
        issues,
        recommendations
      },
      performance: {
        responseTime: 150,
        // Placeholder - would measure actual API response time
        throughput: 10,
        // Placeholder - executions per minute
        errorRate: 2,
        // Placeholder - error percentage
        availabilityUptime: 99.5 // Placeholder - uptime percentage
      },
      resources: {
        memoryPressure: systemUsage.memory.utilization > 85,
        cpuThrottling: systemUsage.cpu.totalUsage > 90,
        diskSpaceWarning: systemUsage.disk.utilization > 90,
        networkLatency: 50 // Placeholder
      },
      dependencies: [{
        name: 'Database',
        type: 'database',
        status: 'online',
        responseTime: 25,
        errorCount: 0
      }, {
        name: 'File System',
        type: 'file_system',
        status: 'online',
        responseTime: 10,
        errorCount: 0
      }],
      alerts: this.alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[27]++;
        cov_1dcgrbr8i().s[123]++;
        return !alert.resolvedAt;
      }).map(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[28]++;
        cov_1dcgrbr8i().s[124]++;
        return {
          id: alert.id,
          severity: alert.severity,
          message: alert.description,
          timestamp: alert.triggeredAt,
          resolved: Boolean(alert.resolvedAt)
        };
      })
    };
  }
  calculateHealthScore(systemUsage, issueCount) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[29]++;
    let score =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[125]++, 100);
    // Deduct points based on resource usage
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[126]++;
    score -= Math.max(0, systemUsage.cpu.totalUsage - 50) * 0.5;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[127]++;
    score -= Math.max(0, systemUsage.memory.utilization - 60) * 0.3;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[128]++;
    score -= Math.max(0, systemUsage.disk.utilization - 70) * 0.2;
    // Deduct points for issues
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[129]++;
    score -= issueCount * 10;
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[130]++;
    return Math.max(0, Math.min(100, Math.round(score)));
  }
  determineHealthStatus(score, issueCount) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[30]++;
    cov_1dcgrbr8i().s[131]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[34][0]++, score >= 90) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[34][1]++, issueCount === 0)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[33][0]++;
      cov_1dcgrbr8i().s[132]++;
      return 'healthy';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[33][1]++;
    }
    cov_1dcgrbr8i().s[133]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[36][0]++, score >= 70) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[36][1]++, issueCount <= 1)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[35][0]++;
      cov_1dcgrbr8i().s[134]++;
      return 'warning';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[35][1]++;
    }
    cov_1dcgrbr8i().s[135]++;
    if (score >= 50) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[37][0]++;
      cov_1dcgrbr8i().s[136]++;
      return 'degraded';
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[37][1]++;
    }
    cov_1dcgrbr8i().s[137]++;
    return 'critical';
  }
  async checkResourceThresholds(systemUsage) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[31]++;
    const thresholds =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[138]++, this.config.monitoring.alertThresholds);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[139]++;
    if (systemUsage.cpu.totalUsage > thresholds.cpuUsage) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[38][0]++;
      cov_1dcgrbr8i().s[140]++;
      await this.createAlert({
        type: 'resource_threshold',
        severity: systemUsage.cpu.totalUsage > 95 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[39][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[39][1]++, 'high'),
        title: 'High CPU Usage',
        description: `CPU usage is ${systemUsage.cpu.totalUsage.toFixed(1)}%, exceeding threshold of ${thresholds.cpuUsage}%`,
        metadata: {
          threshold: thresholds.cpuUsage,
          actualValue: systemUsage.cpu.totalUsage
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[38][1]++;
    }
    cov_1dcgrbr8i().s[141]++;
    if (systemUsage.memory.utilization > thresholds.memoryUsage) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[40][0]++;
      cov_1dcgrbr8i().s[142]++;
      await this.createAlert({
        type: 'resource_threshold',
        severity: systemUsage.memory.utilization > 95 ?
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[41][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1dcgrbr8i().b[41][1]++, 'high'),
        title: 'High Memory Usage',
        description: `Memory usage is ${systemUsage.memory.utilization.toFixed(1)}%, exceeding threshold of ${thresholds.memoryUsage}%`,
        metadata: {
          threshold: thresholds.memoryUsage,
          actualValue: systemUsage.memory.utilization
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[40][1]++;
    }
  }
  async createAlert(alertData) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[32]++;
    const alert =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[143]++, {
      id: `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[42][0]++, alertData.type) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[42][1]++, 'resource_threshold'),
      severity:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[43][0]++, alertData.severity) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[43][1]++, 'medium'),
      title:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[44][0]++, alertData.title) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[44][1]++, 'Performance Alert'),
      description:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[45][0]++, alertData.description) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[45][1]++, 'Performance threshold exceeded'),
      triggeredAt: new Date().toISOString(),
      metadata:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[46][0]++, alertData.metadata) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[46][1]++, {}),
      actions: []
    });
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[144]++;
    this.alerts.push(alert);
    // Keep only recent alerts
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[145]++;
    this.alerts = this.alerts.filter(a => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[33]++;
      cov_1dcgrbr8i().s[146]++;
      return Date.now() - new Date(a.triggeredAt).getTime() < 24 * 60 * 60 * 1000;
    });
  }
  recordWorkflowExecution(workflowId, duration, success) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[34]++;
    cov_1dcgrbr8i().s[147]++;
    if (!this.executionHistory.has(workflowId)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[47][0]++;
      cov_1dcgrbr8i().s[148]++;
      this.executionHistory.set(workflowId, []);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[47][1]++;
    }
    const history =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[149]++, this.executionHistory.get(workflowId));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[150]++;
    history.push({
      timestamp: Date.now(),
      duration,
      success
    });
    // Keep only last 1000 executions per workflow
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[151]++;
    if (history.length > 1000) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[48][0]++;
      cov_1dcgrbr8i().s[152]++;
      history.splice(0, history.length - 1000);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[48][1]++;
    }
  }
  addDataPoint(dataPoint) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[35]++;
    cov_1dcgrbr8i().s[153]++;
    this.dataPoints.push(dataPoint);
    // Enforce max data points limit
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[154]++;
    if (this.dataPoints.length > this.config.storage.maxDataPoints) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[49][0]++;
      cov_1dcgrbr8i().s[155]++;
      this.dataPoints.splice(0, this.dataPoints.length - this.config.storage.maxDataPoints);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[49][1]++;
    }
  }
  cleanupOldDataPoints() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[36]++;
    const cutoffTime =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[156]++, Date.now() - this.config.monitoring.retentionDays * 24 * 60 * 60 * 1000);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[157]++;
    this.dataPoints = this.dataPoints.filter(dp => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[37]++;
      cov_1dcgrbr8i().s[158]++;
      return new Date(dp.timestamp).getTime() > cutoffTime;
    });
  }
  getMetrics() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[38]++;
    cov_1dcgrbr8i().s[159]++;
    return {
      system:
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[50][0]++, this.dataPoints.filter(dp => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[39]++;
        cov_1dcgrbr8i().s[160]++;
        return dp.metricType === 'system';
      }).slice(-1)[0]?.data) ||
      /* istanbul ignore next */
      (cov_1dcgrbr8i().b[50][1]++, {}),
      workflows: [],
      health: {},
      alerts: this.alerts,
      dataPoints: this.dataPoints
    };
  }
  getDataPoints(metricType, limit) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[40]++;
    let points =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[161]++, this.dataPoints);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[162]++;
    if (metricType) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[51][0]++;
      cov_1dcgrbr8i().s[163]++;
      points = points.filter(dp => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[41]++;
        cov_1dcgrbr8i().s[164]++;
        return dp.metricType === metricType;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[51][1]++;
    }
    cov_1dcgrbr8i().s[165]++;
    if (limit) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[52][0]++;
      cov_1dcgrbr8i().s[166]++;
      points = points.slice(-limit);
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[52][1]++;
    }
    cov_1dcgrbr8i().s[167]++;
    return points;
  }
  getAlerts(severity, resolved) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[42]++;
    let alerts =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[168]++, this.alerts);
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[169]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[53][0]++;
      cov_1dcgrbr8i().s[170]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[43]++;
        cov_1dcgrbr8i().s[171]++;
        return alert.severity === severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[53][1]++;
    }
    cov_1dcgrbr8i().s[172]++;
    if (resolved !== undefined) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[54][0]++;
      cov_1dcgrbr8i().s[173]++;
      alerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1dcgrbr8i().f[44]++;
        cov_1dcgrbr8i().s[174]++;
        return Boolean(alert.resolvedAt) === resolved;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[54][1]++;
    }
    cov_1dcgrbr8i().s[175]++;
    return alerts.sort((a, b) => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[45]++;
      cov_1dcgrbr8i().s[176]++;
      return new Date(b.triggeredAt).getTime() - new Date(a.triggeredAt).getTime();
    });
  }
  resolveAlert(alertId) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[46]++;
    const alert =
    /* istanbul ignore next */
    (cov_1dcgrbr8i().s[177]++, this.alerts.find(a => {
      /* istanbul ignore next */
      cov_1dcgrbr8i().f[47]++;
      cov_1dcgrbr8i().s[178]++;
      return a.id === alertId;
    }));
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[179]++;
    if (
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[56][0]++, alert) &&
    /* istanbul ignore next */
    (cov_1dcgrbr8i().b[56][1]++, !alert.resolvedAt)) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[55][0]++;
      cov_1dcgrbr8i().s[180]++;
      alert.resolvedAt = new Date().toISOString();
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[181]++;
      return true;
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[55][1]++;
    }
    cov_1dcgrbr8i().s[182]++;
    return false;
  }
  updateConfig(newConfig) {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[48]++;
    cov_1dcgrbr8i().s[183]++;
    this.config = {
      ...this.config,
      ...newConfig
    };
    /* istanbul ignore next */
    cov_1dcgrbr8i().s[184]++;
    if (this.monitoringInterval) {
      /* istanbul ignore next */
      cov_1dcgrbr8i().b[57][0]++;
      cov_1dcgrbr8i().s[185]++;
      this.stopMonitoring();
      /* istanbul ignore next */
      cov_1dcgrbr8i().s[186]++;
      this.startMonitoring();
    } else
    /* istanbul ignore next */
    {
      cov_1dcgrbr8i().b[57][1]++;
    }
  }
  getConfig() {
    /* istanbul ignore next */
    cov_1dcgrbr8i().f[49]++;
    cov_1dcgrbr8i().s[187]++;
    return {
      ...this.config
    };
  }
}
/* istanbul ignore next */
cov_1dcgrbr8i().s[188]++;
exports.ResourceMonitor = ResourceMonitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,