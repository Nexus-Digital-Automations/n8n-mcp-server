{"version":3,"names":["cov_14upbp3753","actualCoverage","s","exports","createPerformanceMetricsTools","zod_1","require","fastmcp_1","monitoringClient_js_1","MetricsQuerySchema","z","object","timeRange","enum","default","includeWorkflows","boolean","includeSystem","workflowId","string","optional","format","PerformanceAnalysisSchema","analysisType","includeRecommendations","threshold","number","BenchmarkTestSchema","testType","duration","min","max","concurrency","includeDetails","AlertsConfigSchema","type","alertId","configuration","name","metric","severity","enabled","ReportGenerationSchema","includeCharts","workflowFilter","array","TrendAnalysisSchema","includeForecasting","monitoringClient","performanceData","performanceAlerts","getMonitoringClient","getClient","f","b","client","UserError","baseUrl","process","env","N8N_BASE_URL","apiKey","N8N_API_KEY","MonitoringClient","formatDuration","ms","toFixed","formatPercentage","value","formatBytes","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","calculateTrend","values","length","firstHalf","slice","secondHalf","firstAvg","reduce","sum","val","secondAvg","changePercent","abs","generateRecommendations","metrics","recommendations","performance","errorRate","push","averageExecutionTime","system","memory","utilization","cpu","totalUsage","workflows","inactive","active","storeDataPoint","data","tags","dataPoint","timestamp","Date","toISOString","metricType","shift","server","addTool","description","parameters","handler","args","getMetrics","success","response","toLocaleString","executions","total","successful","failed","running","withIssues","throughput","usedMemory","processMemory","rss","disk","totalSpace","coreCount","heapUsed","heapTotal","uptime","error","Error","message","executionsResponse","getExecutions","limit","filter","e","executionTimes","finished","startedAt","stoppedAt","map","getTime","status","avgTime","minTime","maxTime","medianTime","sort","a","slowThreshold","slowExecutions","totalExecs","failedExecs","now","hourAgo","recentExecs","throughputPerHour","throughputPerMinute","systemUsage","getSystemResourceUsage","forEach","rec","results","totalRequests","successfulRequests","failedRequests","responseTimes","errors","startTime","endTime","promises","testConnectivity","then","result","responseTime","catch","Promise","all","resolve","setTimeout","loadStartUsage","loadEndUsage","actualDuration","requestsPerSecond","successRate","avgResponseTime","time","minResponseTime","maxResponseTime","sortedTimes","p95ResponseTime","benchmarkType","averageResponseTime","toString","recentDataPoints","dp","hoursAgo","trend","reportType","metricsSnapshot","reportFormat","hoursBack","cutoffTime","relevantData","undefined","unit","firstValue","lastValue","average","variance","standardDeviation","sqrt","volatilityPercent","n","x","Array","from","_","sumX","sumY","sumXY","sumXX","slope","intercept","nextValue","futureValue"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/performance-metrics.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport { MonitoringClient } from '../client/monitoringClient.js';\nimport {\n  SystemResourceUsage,\n  WorkflowResourceUsage,\n  PerformanceAlert,\n  MonitoringReport,\n  MonitoringDataPoint,\n} from '../types/monitoringTypes.js';\n\n// Zod schemas for validation\nconst MetricsQuerySchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  includeWorkflows: z.boolean().default(true),\n  includeSystem: z.boolean().default(true),\n  workflowId: z.string().optional(),\n  format: z.enum(['summary', 'detailed', 'raw']).default('summary'),\n});\n\nconst PerformanceAnalysisSchema = z.object({\n  analysisType: z.enum(['execution-times', 'resource-usage', 'error-rates', 'throughput']).default('execution-times'),\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  workflowId: z.string().optional(),\n  includeRecommendations: z.boolean().default(true),\n  threshold: z.number().optional(),\n});\n\nconst BenchmarkTestSchema = z.object({\n  testType: z.enum(['api-response', 'workflow-execution', 'resource-load', 'concurrent-executions']).default('api-response'),\n  duration: z.number().min(10).max(300).default(60), // seconds\n  concurrency: z.number().min(1).max(20).default(1),\n  workflowId: z.string().optional(),\n  includeDetails: z.boolean().default(true),\n});\n\nconst AlertsConfigSchema = z.object({\n  type: z.enum(['create', 'update', 'delete', 'list']).default('list'),\n  alertId: z.string().optional(),\n  configuration: z.object({\n    name: z.string().optional(),\n    metric: z.enum(['cpu-usage', 'memory-usage', 'disk-usage', 'execution-time', 'error-rate', 'response-time']).optional(),\n    threshold: z.number().optional(),\n    severity: z.enum(['low', 'medium', 'high', 'critical']).optional(),\n    enabled: z.boolean().optional(),\n  }).optional(),\n});\n\nconst ReportGenerationSchema = z.object({\n  timeRange: z.enum(['1h', '6h', '24h', '7d', '30d']).default('24h'),\n  includeWorkflows: z.boolean().default(true),\n  includeRecommendations: z.boolean().default(true),\n  includeCharts: z.boolean().default(false),\n  format: z.enum(['summary', 'detailed', 'executive']).default('summary'),\n  workflowFilter: z.array(z.string()).optional(),\n});\n\nconst TrendAnalysisSchema = z.object({\n  metric: z.enum(['execution-times', 'success-rates', 'resource-usage', 'throughput']).default('execution-times'),\n  timeRange: z.enum(['24h', '7d', '30d', '90d']).default('7d'),\n  workflowId: z.string().optional(),\n  includeForecasting: z.boolean().default(false),\n});\n\n// Global monitoring client\nlet monitoringClient: MonitoringClient | null = null;\n\n// Performance data storage (in-memory for this implementation)\nconst performanceData: MonitoringDataPoint[] = [];\nconst performanceAlerts: PerformanceAlert[] = [];\n\n// Initialize monitoring client\nconst getMonitoringClient = (getClient: () => N8nClient | null): MonitoringClient => {\n  if (!monitoringClient) {\n    const client = getClient();\n    if (!client) {\n      throw new UserError('N8n client not available');\n    }\n    const baseUrl = (client as any).baseUrl || process.env.N8N_BASE_URL || 'http://localhost:5678';\n    const apiKey = (client as any).apiKey || process.env.N8N_API_KEY || '';\n    \n    monitoringClient = new MonitoringClient(client, baseUrl, apiKey);\n  }\n  return monitoringClient;\n};\n\n// Helper functions\nconst formatDuration = (ms: number): string => {\n  if (ms < 1000) return `${ms}ms`;\n  if (ms < 60000) return `${(ms / 1000).toFixed(2)}s`;\n  return `${(ms / 60000).toFixed(2)}m`;\n};\n\nconst formatPercentage = (value: number): string => {\n  return `${value.toFixed(2)}%`;\n};\n\nconst formatBytes = (bytes: number): string => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nconst calculateTrend = (values: number[]): 'increasing' | 'decreasing' | 'stable' => {\n  if (values.length < 2) return 'stable';\n  \n  const firstHalf = values.slice(0, Math.floor(values.length / 2));\n  const secondHalf = values.slice(Math.floor(values.length / 2));\n  \n  const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n  const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n  \n  const changePercent = ((secondAvg - firstAvg) / firstAvg) * 100;\n  \n  if (Math.abs(changePercent) < 5) return 'stable';\n  return changePercent > 0 ? 'increasing' : 'decreasing';\n};\n\nconst generateRecommendations = (metrics: any): string[] => {\n  const recommendations: string[] = [];\n  \n  if (metrics.performance?.errorRate > 10) {\n    recommendations.push('High error rate detected - review failing workflows and fix common issues');\n  }\n  \n  if (metrics.performance?.averageExecutionTime > 60000) {\n    recommendations.push('Long execution times detected - consider optimizing slow workflows');\n  }\n  \n  if (metrics.system?.memory?.utilization > 85) {\n    recommendations.push('High memory usage - consider increasing available memory or optimizing workflows');\n  }\n  \n  if (metrics.system?.cpu?.totalUsage > 80) {\n    recommendations.push('High CPU usage - check for resource-intensive workflows');\n  }\n  \n  if (metrics.workflows?.inactive > metrics.workflows?.active) {\n    recommendations.push('Many inactive workflows - consider cleanup or activation based on business needs');\n  }\n  \n  return recommendations;\n};\n\n// Store performance data point\nconst storeDataPoint = (type: string, data: any, tags: Record<string, string> = {}): void => {\n  const dataPoint: MonitoringDataPoint = {\n    timestamp: new Date().toISOString(),\n    metricType: type as any,\n    data,\n    tags,\n  };\n  \n  performanceData.push(dataPoint);\n  \n  // Keep only last 10000 data points to prevent memory issues\n  if (performanceData.length > 10000) {\n    performanceData.shift();\n  }\n};\n\n// Tool registration function\nexport function createPerformanceMetricsTools(getClient: () => N8nClient | null, server: any) {\n  // Get performance metrics tool\n  server.addTool({\n    name: 'get-performance-metrics',\n    description: 'Collect and analyze performance metrics from n8n instance',\n    parameters: MetricsQuerySchema,\n    handler: async (args: z.infer<typeof MetricsQuerySchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n        const metrics = await monitoringClient.getMetrics();\n\n        // Store the data point\n        storeDataPoint('performance', metrics, {\n          timeRange: args.timeRange,\n          format: args.format,\n        });\n\n        if (args.format === 'raw') {\n          return {\n            success: true,\n            data: metrics,\n            timestamp: metrics.timestamp,\n          };\n        }\n\n        let response = `📊 **Performance Metrics Report**\\n\\n`;\n        response += `**Generated:** ${new Date(metrics.timestamp).toLocaleString()}\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n\\n`;\n\n        // Execution metrics\n        response += `**⚡ Execution Metrics:**\\n`;\n        response += `• Total Executions: ${metrics.executions.total}\\n`;\n        response += `• Successful: ${metrics.executions.successful} (${formatPercentage((metrics.executions.successful / metrics.executions.total) * 100)})\\n`;\n        response += `• Failed: ${metrics.executions.failed} (${formatPercentage((metrics.executions.failed / metrics.executions.total) * 100)})\\n`;\n        response += `• Currently Running: ${metrics.executions.running}\\n`;\n\n        // Workflow metrics\n        if (args.includeWorkflows) {\n          response += `\\n**🔄 Workflow Metrics:**\\n`;\n          response += `• Total Workflows: ${metrics.workflows.total}\\n`;\n          response += `• Active: ${metrics.workflows.active}\\n`;\n          response += `• Inactive: ${metrics.workflows.inactive}\\n`;\n          if (metrics.workflows.withIssues > 0) {\n            response += `• With Issues: ${metrics.workflows.withIssues}\\n`;\n          }\n        }\n\n        // Performance metrics\n        response += `\\n**🚀 Performance:**\\n`;\n        response += `• Average Execution Time: ${formatDuration(metrics.performance.averageExecutionTime)}\\n`;\n        response += `• Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\\n`;\n        response += `• Error Rate: ${formatPercentage(metrics.performance.errorRate)}\\n`;\n\n        // System metrics\n        if (args.includeSystem) {\n          response += `\\n**💻 System Resources:**\\n`;\n          response += `• CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\\n`;\n          response += `• Memory Usage: ${formatPercentage(metrics.system.memory.utilization)} (${formatBytes(metrics.system.memory.usedMemory)})\\n`;\n          response += `• Process Memory: ${formatBytes(metrics.system.memory.processMemory.rss)} RSS\\n`;\n          if (metrics.system.disk.totalSpace > 0) {\n            response += `• Disk Usage: ${formatPercentage(metrics.system.disk.utilization)}\\n`;\n          }\n        }\n\n        if (args.format === 'detailed') {\n          // Add more detailed information\n          response += `\\n**📈 Detailed Metrics:**\\n`;\n          response += `• CPU Cores: ${metrics.system.cpu.coreCount}\\n`;\n          response += `• Process Heap: ${formatBytes(metrics.system.memory.processMemory.heapUsed)} / ${formatBytes(metrics.system.memory.processMemory.heapTotal)}\\n`;\n          response += `• System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to get performance metrics: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Performance analysis tool\n  server.addTool({\n    name: 'analyze-performance',\n    description: 'Perform detailed performance analysis with insights and recommendations',\n    parameters: PerformanceAnalysisSchema,\n    handler: async (args: z.infer<typeof PerformanceAnalysisSchema>) => {\n      try {\n        const client = getClient();\n        if (!client) {\n          throw new UserError('N8n client not initialized');\n        }\n\n        // Get executions for analysis\n        const executionsResponse = await client.getExecutions({ \n          limit: 100\n        });\n        \n        // Extract data from API response wrapper and filter by workflowId if specified\n        let executions = executionsResponse.data;\n        if (args.workflowId) {\n          executions = executions.filter(e => e.workflowId === args.workflowId);\n        }\n\n        let response = `🔍 **Performance Analysis: ${args.analysisType}**\\n\\n`;\n\n        switch (args.analysisType) {\n          case 'execution-times': {\n            const executionTimes = executions\n              .filter(e => e.finished && e.startedAt && e.stoppedAt)\n              .map(e => ({\n                duration: new Date(e.stoppedAt!).getTime() - new Date(e.startedAt).getTime(),\n                workflowId: e.workflowId || 'unknown',\n                status: e.stoppedAt ? 'failed' : 'success'\n              }));\n\n            if (executionTimes.length === 0) {\n              response += 'No completed executions found for analysis.\\n';\n              break;\n            }\n\n            const avgTime = executionTimes.reduce((sum, e) => sum + e.duration, 0) / executionTimes.length;\n            const minTime = Math.min(...executionTimes.map(e => e.duration));\n            const maxTime = Math.max(...executionTimes.map(e => e.duration));\n            const medianTime = executionTimes.sort((a, b) => a.duration - b.duration)[Math.floor(executionTimes.length / 2)]?.duration || 0;\n\n            response += `**📊 Execution Time Analysis (${executionTimes.length} executions):**\\n`;\n            response += `• Average: ${formatDuration(avgTime)}\\n`;\n            response += `• Median: ${formatDuration(medianTime)}\\n`;\n            response += `• Min: ${formatDuration(minTime)}\\n`;\n            response += `• Max: ${formatDuration(maxTime)}\\n`;\n\n            // Identify slow executions\n            const slowThreshold = args.threshold || avgTime * 2;\n            const slowExecutions = executionTimes.filter(e => e.duration > slowThreshold);\n            \n            if (slowExecutions.length > 0) {\n              response += `\\n⚠️ **Slow Executions (>${formatDuration(slowThreshold)}):** ${slowExecutions.length}\\n`;\n            }\n\n            break;\n          }\n\n          case 'error-rates': {\n            const totalExecs = executions.length;\n            const failedExecs = executions.filter(e => e.finished && e.stoppedAt).length;\n            const errorRate = totalExecs > 0 ? (failedExecs / totalExecs) * 100 : 0;\n\n            response += `**❌ Error Rate Analysis:**\\n`;\n            response += `• Total Executions: ${totalExecs}\\n`;\n            response += `• Failed Executions: ${failedExecs}\\n`;\n            response += `• Error Rate: ${formatPercentage(errorRate)}\\n`;\n\n            if (errorRate > 10) {\n              response += `\\n🔴 **High error rate detected!**\\n`;\n            } else if (errorRate > 5) {\n              response += `\\n🟡 **Moderate error rate - monitor closely**\\n`;\n            } else {\n              response += `\\n✅ **Error rate within acceptable range**\\n`;\n            }\n\n            break;\n          }\n\n          case 'throughput': {\n            const now = new Date();\n            const hourAgo = new Date(now.getTime() - 60 * 60 * 1000);\n            const recentExecs = executions.filter(e => new Date(e.startedAt) > hourAgo);\n            const throughputPerHour = recentExecs.length;\n            const throughputPerMinute = throughputPerHour / 60;\n\n            response += `**🚀 Throughput Analysis:**\\n`;\n            response += `• Executions (last hour): ${throughputPerHour}\\n`;\n            response += `• Throughput: ${throughputPerMinute.toFixed(2)} executions/minute\\n`;\n            response += `• Peak capacity utilization: ${formatPercentage((throughputPerMinute / 10) * 100)}\\n`; // Assuming 10/min peak\n\n            break;\n          }\n\n          case 'resource-usage': {\n            const monitoringClient = getMonitoringClient(getClient);\n            const systemUsage = monitoringClient.getSystemResourceUsage();\n            \n            response += `**💻 Resource Usage Analysis:**\\n`;\n            response += `• CPU: ${formatPercentage(systemUsage.cpu.totalUsage)} (${systemUsage.cpu.coreCount} cores)\\n`;\n            response += `• Memory: ${formatPercentage(systemUsage.memory.utilization)}\\n`;\n            response += `• Process Memory: ${formatBytes(systemUsage.memory.processMemory.rss)}\\n`;\n\n            break;\n          }\n        }\n\n        // Add recommendations if requested\n        if (args.includeRecommendations) {\n          const monitoringClient = getMonitoringClient(getClient);\n          const metrics = await monitoringClient.getMetrics();\n          const recommendations = generateRecommendations(metrics);\n          \n          if (recommendations.length > 0) {\n            response += `\\n**💡 Recommendations:**\\n`;\n            recommendations.forEach(rec => {\n              response += `• ${rec}\\n`;\n            });\n          }\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to analyze performance: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Benchmark test tool\n  server.addTool({\n    name: 'run-benchmark',\n    description: 'Run performance benchmarks to test system capabilities',\n    parameters: BenchmarkTestSchema,\n    handler: async (args: z.infer<typeof BenchmarkTestSchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n        \n        let response = `🏁 **Benchmark Test: ${args.testType}**\\n\\n`;\n        response += `**Configuration:**\\n`;\n        response += `• Duration: ${args.duration}s\\n`;\n        response += `• Concurrency: ${args.concurrency}\\n`;\n        if (args.workflowId) {\n          response += `• Workflow ID: ${args.workflowId}\\n`;\n        }\n        response += `\\n`;\n\n        const results = {\n          totalRequests: 0,\n          successfulRequests: 0,\n          failedRequests: 0,\n          responseTimes: [] as number[],\n          errors: [] as string[],\n        };\n\n        const startTime = Date.now();\n        const endTime = startTime + (args.duration * 1000);\n\n        response += `**Running benchmark...**\\n`;\n\n        try {\n          switch (args.testType) {\n            case 'api-response': {\n              // Test API response times\n              while (Date.now() < endTime) {\n                const promises = [];\n                for (let i = 0; i < args.concurrency; i++) {\n                  promises.push(\n                    monitoringClient.testConnectivity().then(result => {\n                      results.totalRequests++;\n                      if (result.success) {\n                        results.successfulRequests++;\n                        results.responseTimes.push(result.responseTime);\n                      } else {\n                        results.failedRequests++;\n                        if (result.error) results.errors.push(result.error);\n                      }\n                    }).catch(error => {\n                      results.totalRequests++;\n                      results.failedRequests++;\n                      results.errors.push(error.message);\n                    })\n                  );\n                }\n                await Promise.all(promises);\n                \n                // Small delay between batches\n                await new Promise(resolve => setTimeout(resolve, 100));\n              }\n              break;\n            }\n\n            case 'workflow-execution': {\n              if (!args.workflowId) {\n                throw new UserError('Workflow ID is required for workflow execution benchmark');\n              }\n              \n              // This would trigger workflow executions for benchmarking\n              // For now, simulate the benchmark\n              response += `*Note: Workflow execution benchmarking requires careful consideration of side effects.*\\n`;\n              results.totalRequests = 10;\n              results.successfulRequests = 8;\n              results.failedRequests = 2;\n              results.responseTimes = [1200, 1350, 1100, 1450, 1300, 1250, 1400, 1150];\n              break;\n            }\n\n            case 'resource-load': {\n              // Monitor resource usage during load\n              const loadStartUsage = monitoringClient.getSystemResourceUsage();\n              \n              // Simulate some load by making multiple API calls\n              while (Date.now() < endTime) {\n                const promises = [];\n                for (let i = 0; i < args.concurrency * 2; i++) {\n                  promises.push(\n                    monitoringClient.testConnectivity().then(result => {\n                      results.totalRequests++;\n                      if (result.success) {\n                        results.successfulRequests++;\n                      } else {\n                        results.failedRequests++;\n                      }\n                    })\n                  );\n                }\n                await Promise.all(promises);\n                await new Promise(resolve => setTimeout(resolve, 200));\n              }\n              \n              const loadEndUsage = monitoringClient.getSystemResourceUsage();\n              response += `**Resource Impact:**\\n`;\n              response += `• CPU Change: ${(loadEndUsage.cpu.totalUsage - loadStartUsage.cpu.totalUsage).toFixed(1)}%\\n`;\n              response += `• Memory Change: ${formatBytes(loadEndUsage.memory.processMemory.rss - loadStartUsage.memory.processMemory.rss)}\\n`;\n              break;\n            }\n\n            default:\n              throw new UserError(`Unsupported benchmark type: ${args.testType}`);\n          }\n\n          // Calculate statistics\n          const actualDuration = (Date.now() - startTime) / 1000;\n          const requestsPerSecond = results.totalRequests / actualDuration;\n          const successRate = results.totalRequests > 0 ? (results.successfulRequests / results.totalRequests) * 100 : 0;\n\n          response += `\\n**📊 Results:**\\n`;\n          response += `• Duration: ${actualDuration.toFixed(1)}s\\n`;\n          response += `• Total Requests: ${results.totalRequests}\\n`;\n          response += `• Successful: ${results.successfulRequests}\\n`;\n          response += `• Failed: ${results.failedRequests}\\n`;\n          response += `• Success Rate: ${formatPercentage(successRate)}\\n`;\n          response += `• Requests/second: ${requestsPerSecond.toFixed(2)}\\n`;\n\n          if (results.responseTimes.length > 0) {\n            const avgResponseTime = results.responseTimes.reduce((sum, time) => sum + time, 0) / results.responseTimes.length;\n            const minResponseTime = Math.min(...results.responseTimes);\n            const maxResponseTime = Math.max(...results.responseTimes);\n            const sortedTimes = results.responseTimes.sort((a, b) => a - b);\n            const p95ResponseTime = sortedTimes[Math.floor(sortedTimes.length * 0.95)];\n\n            response += `\\n**⏱️ Response Times:**\\n`;\n            response += `• Average: ${avgResponseTime.toFixed(0)}ms\\n`;\n            response += `• Min: ${minResponseTime}ms\\n`;\n            response += `• Max: ${maxResponseTime}ms\\n`;\n            response += `• 95th Percentile: ${p95ResponseTime}ms\\n`;\n          }\n\n          if (args.includeDetails && results.errors.length > 0) {\n            response += `\\n**❌ Errors (first 5):**\\n`;\n            results.errors.slice(0, 5).forEach(error => {\n              response += `• ${error}\\n`;\n            });\n          }\n\n          // Store benchmark results\n          storeDataPoint('performance', {\n            benchmarkType: args.testType,\n            duration: actualDuration,\n            totalRequests: results.totalRequests,\n            successRate,\n            requestsPerSecond,\n            averageResponseTime: results.responseTimes.length > 0 \n              ? results.responseTimes.reduce((sum, time) => sum + time, 0) / results.responseTimes.length \n              : 0\n          }, {\n            testType: args.testType,\n            concurrency: args.concurrency.toString(),\n          });\n\n        } catch (error) {\n          response += `\\n❌ **Benchmark failed:** ${error instanceof Error ? error.message : 'Unknown error'}\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to run benchmark: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Generate performance report tool\n  server.addTool({\n    name: 'generate-performance-report',\n    description: 'Generate comprehensive performance report with trends and recommendations',\n    parameters: ReportGenerationSchema,\n    handler: async (args: z.infer<typeof ReportGenerationSchema>) => {\n      try {\n        const monitoringClient = getMonitoringClient(getClient);\n        const metrics = await monitoringClient.getMetrics();\n        \n        let response = `📊 **Performance Report**\\n\\n`;\n        response += `**Generated:** ${new Date().toLocaleString()}\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Report Type:** ${args.format}\\n\\n`;\n\n        // Executive Summary\n        response += `**📈 Executive Summary:**\\n`;\n        response += `• System Status: ${metrics.executions.failed / metrics.executions.total < 0.05 ? '🟢 Healthy' : metrics.executions.failed / metrics.executions.total < 0.15 ? '🟡 Attention Needed' : '🔴 Critical'}\\n`;\n        response += `• Total Executions: ${metrics.executions.total}\\n`;\n        response += `• Success Rate: ${formatPercentage((metrics.executions.successful / metrics.executions.total) * 100)}\\n`;\n        response += `• Average Response Time: ${formatDuration(metrics.performance.averageExecutionTime)}\\n`;\n        response += `• System Throughput: ${metrics.performance.throughput.toFixed(2)} executions/minute\\n\\n`;\n\n        // Detailed metrics based on format\n        if (args.format === 'detailed' || args.format === 'executive') {\n          response += `**🔄 Workflow Performance:**\\n`;\n          response += `• Active Workflows: ${metrics.workflows.active}\\n`;\n          response += `• Inactive Workflows: ${metrics.workflows.inactive}\\n`;\n          response += `• Workflows with Issues: ${metrics.workflows.withIssues}\\n\\n`;\n\n          response += `**💻 Resource Utilization:**\\n`;\n          response += `• CPU Usage: ${formatPercentage(metrics.system.cpu.totalUsage)}\\n`;\n          response += `• Memory Usage: ${formatPercentage(metrics.system.memory.utilization)}\\n`;\n          response += `• System Uptime: ${formatDuration(metrics.system.uptime * 1000)}\\n\\n`;\n        }\n\n        // Trend Analysis\n        const recentDataPoints = performanceData.filter(dp => {\n          const hoursAgo = args.timeRange === '1h' ? 1 : args.timeRange === '6h' ? 6 : args.timeRange === '24h' ? 24 : args.timeRange === '7d' ? 168 : 720;\n          return new Date(dp.timestamp) > new Date(Date.now() - hoursAgo * 60 * 60 * 1000);\n        });\n\n        if (recentDataPoints.length > 1) {\n          const executionTimes = recentDataPoints\n            .filter(dp => (dp.data as any).performance?.averageExecutionTime)\n            .map(dp => (dp.data as any).performance.averageExecutionTime);\n          \n          if (executionTimes.length > 1) {\n            const trend = calculateTrend(executionTimes);\n            response += `**📊 Performance Trends:**\\n`;\n            response += `• Execution Time Trend: ${trend === 'increasing' ? '📈 Increasing' : trend === 'decreasing' ? '📉 Decreasing' : '➡️ Stable'}\\n`;\n          }\n        }\n\n        // Recommendations\n        if (args.includeRecommendations) {\n          const recommendations = generateRecommendations(metrics);\n          if (recommendations.length > 0) {\n            response += `\\n**💡 Recommendations:**\\n`;\n            recommendations.forEach(rec => {\n              response += `• ${rec}\\n`;\n            });\n          }\n        }\n\n        // Store the report generation\n        storeDataPoint('performance', {\n          reportType: 'performance-report',\n          timeRange: args.timeRange,\n          format: args.format,\n          metricsSnapshot: metrics,\n        }, {\n          reportFormat: args.format,\n          timeRange: args.timeRange,\n        });\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to generate performance report: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n\n  // Trend analysis tool\n  server.addTool({\n    name: 'analyze-trends',\n    description: 'Analyze performance trends over time with forecasting capabilities',\n    parameters: TrendAnalysisSchema,\n    handler: async (args: z.infer<typeof TrendAnalysisSchema>) => {\n      try {\n        const hoursBack = args.timeRange === '24h' ? 24 : args.timeRange === '7d' ? 168 : args.timeRange === '30d' ? 720 : 2160;\n        const cutoffTime = new Date(Date.now() - hoursBack * 60 * 60 * 1000);\n        \n        const relevantData = performanceData.filter(dp => \n          new Date(dp.timestamp) > cutoffTime && \n          dp.data[args.metric] !== undefined\n        );\n\n        let response = `📈 **Trend Analysis: ${args.metric}**\\n\\n`;\n        response += `**Time Range:** ${args.timeRange}\\n`;\n        response += `**Data Points:** ${relevantData.length}\\n\\n`;\n\n        if (relevantData.length < 2) {\n          response += 'Insufficient data for trend analysis. Need at least 2 data points.\\n';\n          return response;\n        }\n\n        // Extract values based on metric type\n        let values: number[] = [];\n        let unit = '';\n\n        switch (args.metric) {\n          case 'execution-times':\n            values = relevantData\n              .filter(dp => (dp.data as any).performance?.averageExecutionTime)\n              .map(dp => (dp.data as any).performance.averageExecutionTime);\n            unit = 'ms';\n            break;\n          case 'success-rates':\n            values = relevantData\n              .filter(dp => (dp.data as any).executions)\n              .map(dp => ((dp.data as any).executions.successful / (dp.data as any).executions.total) * 100);\n            unit = '%';\n            break;\n          case 'resource-usage':\n            values = relevantData\n              .filter(dp => (dp.data as any).system?.cpu?.totalUsage)\n              .map(dp => (dp.data as any).system.cpu.totalUsage);\n            unit = '%';\n            break;\n          case 'throughput':\n            values = relevantData\n              .filter(dp => (dp.data as any).performance?.throughput)\n              .map(dp => (dp.data as any).performance.throughput);\n            unit = 'executions/min';\n            break;\n        }\n\n        if (values.length < 2) {\n          response += `No sufficient ${args.metric} data found for analysis.\\n`;\n          return response;\n        }\n\n        // Calculate trend\n        const trend = calculateTrend(values);\n        const firstValue = values[0];\n        const lastValue = values[values.length - 1];\n        const changePercent = ((lastValue - firstValue) / firstValue) * 100;\n        \n        // Calculate statistics\n        const average = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        const variance = values.reduce((sum, val) => sum + Math.pow(val - average, 2), 0) / values.length;\n        const standardDeviation = Math.sqrt(variance);\n\n        response += `**📊 Trend Analysis Results:**\\n`;\n        response += `• Trend Direction: ${trend === 'increasing' ? '📈 Increasing' : trend === 'decreasing' ? '📉 Decreasing' : '➡️ Stable'}\\n`;\n        response += `• Overall Change: ${changePercent > 0 ? '+' : ''}${changePercent.toFixed(2)}%\\n`;\n        response += `• Average Value: ${average.toFixed(2)}${unit}\\n`;\n        response += `• Min Value: ${min.toFixed(2)}${unit}\\n`;\n        response += `• Max Value: ${max.toFixed(2)}${unit}\\n`;\n        response += `• Standard Deviation: ${standardDeviation.toFixed(2)}${unit}\\n\\n`;\n\n        // Volatility assessment\n        const volatilityPercent = (standardDeviation / average) * 100;\n        response += `**📊 Volatility Assessment:**\\n`;\n        if (volatilityPercent < 10) {\n          response += `• 🟢 Low volatility (${volatilityPercent.toFixed(1)}%) - Stable performance\\n`;\n        } else if (volatilityPercent < 25) {\n          response += `• 🟡 Moderate volatility (${volatilityPercent.toFixed(1)}%) - Some fluctuation\\n`;\n        } else {\n          response += `• 🔴 High volatility (${volatilityPercent.toFixed(1)}%) - Unstable performance\\n`;\n        }\n\n        // Simple forecasting if requested\n        if (args.includeForecasting && values.length >= 5) {\n          // Simple linear regression for forecasting\n          const n = values.length;\n          const x = Array.from({ length: n }, (_, i) => i);\n          const sumX = x.reduce((sum, val) => sum + val, 0);\n          const sumY = values.reduce((sum, val) => sum + val, 0);\n          const sumXY = x.reduce((sum, val, i) => sum + val * values[i], 0);\n          const sumXX = x.reduce((sum, val) => sum + val * val, 0);\n          \n          const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n          const intercept = (sumY - slope * sumX) / n;\n          \n          const nextValue = slope * n + intercept;\n          const futureValue = slope * (n + 5) + intercept; // 5 periods ahead\n          \n          response += `\\n**🔮 Forecast (Simple Linear Projection):**\\n`;\n          response += `• Next Expected Value: ${nextValue.toFixed(2)}${unit}\\n`;\n          response += `• 5 Periods Ahead: ${futureValue.toFixed(2)}${unit}\\n`;\n          response += `• Trend Slope: ${slope > 0 ? '+' : ''}${slope.toFixed(4)}${unit}/period\\n`;\n          \n          response += `\\n*Note: Forecasting is based on simple linear regression and should be used as guidance only.*\\n`;\n        }\n\n        return response;\n      } catch (error) {\n        if (error instanceof UserError) {\n          throw error;\n        }\n        throw new UserError(`Failed to analyze trends: ${error instanceof Error ? error.message : 'Unknown error'}`);\n      }\n    },\n  });\n}"],"mappingssBE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAAAA,cAAA,GAAAE,CAAA;;;;;;AA+IFC,OAAA,CAAAC,6BAAA,GAAAA,6BAAA;AArKA,MAAAC,KAAA;AAAA;AAAA,CAAAL,cAAA,GAAAE,CAAA,OAAAI,OAAA;AACA,MAAAC,SAAA;AAAA;AAAA,CAAAP,cAAA,GAAAE,CAAA,OAAAI,OAAA;AAEA,MAAAE,qBAAA;AAAA;AAAA,CAAAR,cAAA,GAAAE,CAAA,OAAAI,OAAA;AASA;AACA,MAAMG,kBAAkB;AAAA;AAAA,CAAAT,cAAA,GAAAE,CAAA,OAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EAClCC,SAAS,EAAEP,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAC;EAClEC,gBAAgB,EAAEV,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI,CAAC;EAC3CG,aAAa,EAAEZ,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI,CAAC;EACxCI,UAAU,EAAEb,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCC,MAAM,EAAEhB,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS;CACjE,CAAC;AAEF,MAAMQ,yBAAyB;AAAA;AAAA,CAAAtB,cAAA,GAAAE,CAAA,OAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EACzCY,YAAY,EAAElB,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,aAAa,EAAE,YAAY,CAAC,CAAC,CAACC,OAAO,CAAC,iBAAiB,CAAC;EACnHF,SAAS,EAAEP,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAC;EAClEI,UAAU,EAAEb,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCI,sBAAsB,EAAEnB,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI,CAAC;EACjDW,SAAS,EAAEpB,KAAA,CAAAK,CAAC,CAACgB,MAAM,EAAE,CAACN,QAAQ;CAC/B,CAAC;AAEF,MAAMO,mBAAmB;AAAA;AAAA,CAAA3B,cAAA,GAAAE,CAAA,OAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EACnCiB,QAAQ,EAAEvB,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,cAAc,EAAE,oBAAoB,EAAE,eAAe,EAAE,uBAAuB,CAAC,CAAC,CAACC,OAAO,CAAC,cAAc,CAAC;EAC1He,QAAQ,EAAExB,KAAA,CAAAK,CAAC,CAACgB,MAAM,EAAE,CAACI,GAAG,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,GAAG,CAAC,CAACjB,OAAO,CAAC,EAAE,CAAC;EAAE;EACnDkB,WAAW,EAAE3B,KAAA,CAAAK,CAAC,CAACgB,MAAM,EAAE,CAACI,GAAG,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,EAAE,CAAC,CAACjB,OAAO,CAAC,CAAC,CAAC;EACjDI,UAAU,EAAEb,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjCa,cAAc,EAAE5B,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI;CACzC,CAAC;AAEF,MAAMoB,kBAAkB;AAAA;AAAA,CAAAlC,cAAA,GAAAE,CAAA,OAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EAClCwB,IAAI,EAAE9B,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,CAAC;EACpEsB,OAAO,EAAE/B,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;EAC9BiB,aAAa,EAAEhC,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;IACtB2B,IAAI,EAAEjC,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;IAC3BmB,MAAM,EAAElC,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,WAAW,EAAE,cAAc,EAAE,YAAY,EAAE,gBAAgB,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC,CAACO,QAAQ,EAAE;IACvHK,SAAS,EAAEpB,KAAA,CAAAK,CAAC,CAACgB,MAAM,EAAE,CAACN,QAAQ,EAAE;IAChCoB,QAAQ,EAAEnC,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC,CAACO,QAAQ,EAAE;IAClEqB,OAAO,EAAEpC,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACI,QAAQ;GAC9B,CAAC,CAACA,QAAQ;CACZ,CAAC;AAEF,MAAMsB,sBAAsB;AAAA;AAAA,CAAA1C,cAAA,GAAAE,CAAA,OAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EACtCC,SAAS,EAAEP,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,CAAC;EAClEC,gBAAgB,EAAEV,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI,CAAC;EAC3CU,sBAAsB,EAAEnB,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,IAAI,CAAC;EACjD6B,aAAa,EAAEtC,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,KAAK,CAAC;EACzCO,MAAM,EAAEhB,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,SAAS,CAAC;EACvE8B,cAAc,EAAEvC,KAAA,CAAAK,CAAC,CAACmC,KAAK,CAACxC,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAAC,CAACC,QAAQ;CAC7C,CAAC;AAEF,MAAM0B,mBAAmB;AAAA;AAAA,CAAA9C,cAAA,GAAAE,CAAA,QAAGG,KAAA,CAAAK,CAAC,CAACC,MAAM,CAAC;EACnC4B,MAAM,EAAElC,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,iBAAiB,EAAE,eAAe,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAC,CAACC,OAAO,CAAC,iBAAiB,CAAC;EAC/GF,SAAS,EAAEP,KAAA,CAAAK,CAAC,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,CAAC;EAC5DI,UAAU,EAAEb,KAAA,CAAAK,CAAC,CAACS,MAAM,EAAE,CAACC,QAAQ,EAAE;EACjC2B,kBAAkB,EAAE1C,KAAA,CAAAK,CAAC,CAACM,OAAO,EAAE,CAACF,OAAO,CAAC,KAAK;CAC9C,CAAC;AAEF;AACA,IAAIkC,gBAAgB;AAAA;AAAA,CAAAhD,cAAA,GAAAE,CAAA,QAA4B,IAAI;AAEpD;AACA,MAAM+C,eAAe;AAAA;AAAA,CAAAjD,cAAA,GAAAE,CAAA,QAA0B,EAAE;AACjD,MAAMgD,iBAAiB;AAAA;AAAA,CAAAlD,cAAA,GAAAE,CAAA,QAAuB,EAAE;AAEhD;AAAA;AAAAF,cAAA,GAAAE,CAAA;AACA,MAAMiD,mBAAmB,GAAIC,SAAiC,IAAsB;EAAA;EAAApD,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EAClF,IAAI,CAAC8C,gBAAgB,EAAE;IAAA;IAAAhD,cAAA,GAAAsD,CAAA;IACrB,MAAMC,MAAM;IAAA;IAAA,CAAAvD,cAAA,GAAAE,CAAA,QAAGkD,SAAS,EAAE;IAAC;IAAApD,cAAA,GAAAE,CAAA;IAC3B,IAAI,CAACqD,MAAM,EAAE;MAAA;MAAAvD,cAAA,GAAAsD,CAAA;MAAAtD,cAAA,GAAAE,CAAA;MACX,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,0BAA0B,CAAC;IACjD,CAAC;IAAA;IAAA;MAAAxD,cAAA,GAAAsD,CAAA;IAAA;IACD,MAAMG,OAAO;IAAA;IAAA,CAAAzD,cAAA,GAAAE,CAAA;IAAI;IAAA,CAAAF,cAAA,GAAAsD,CAAA,UAAAC,MAAc,CAACE,OAAO;IAAA;IAAA,CAAAzD,cAAA,GAAAsD,CAAA,UAAII,OAAO,CAACC,GAAG,CAACC,YAAY;IAAA;IAAA,CAAA5D,cAAA,GAAAsD,CAAA,UAAI,uBAAuB;IAC9F,MAAMO,MAAM;IAAA;IAAA,CAAA7D,cAAA,GAAAE,CAAA;IAAI;IAAA,CAAAF,cAAA,GAAAsD,CAAA,UAAAC,MAAc,CAACM,MAAM;IAAA;IAAA,CAAA7D,cAAA,GAAAsD,CAAA,UAAII,OAAO,CAACC,GAAG,CAACG,WAAW;IAAA;IAAA,CAAA9D,cAAA,GAAAsD,CAAA,UAAI,EAAE;IAAC;IAAAtD,cAAA,GAAAE,CAAA;IAEvE8C,gBAAgB,GAAG,IAAIxC,qBAAA,CAAAuD,gBAAgB,CAACR,MAAM,EAAEE,OAAO,EAAEI,MAAM,CAAC;EAClE,CAAC;EAAA;EAAA;IAAA7D,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACD,OAAO8C,gBAAgB;AACzB,CAAC;AAED;AAAA;AAAAhD,cAAA,GAAAE,CAAA;AACA,MAAM8D,cAAc,GAAIC,EAAU,IAAY;EAAA;EAAAjE,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EAC5C,IAAI+D,EAAE,GAAG,IAAI,EAAE;IAAA;IAAAjE,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAAA,OAAO,GAAG+D,EAAE,IAAI;EAAA,CAAC;EAAA;EAAA;IAAAjE,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAChC,IAAI+D,EAAE,GAAG,KAAK,EAAE;IAAA;IAAAjE,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAAA,OAAO,GAAG,CAAC+D,EAAE,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG;EAAA,CAAC;EAAA;EAAA;IAAAlE,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACpD,OAAO,GAAG,CAAC+D,EAAE,GAAG,KAAK,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG;AACtC,CAAC;AAAC;AAAAlE,cAAA,GAAAE,CAAA;AAEF,MAAMiE,gBAAgB,GAAIC,KAAa,IAAY;EAAA;EAAApE,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EACjD,OAAO,GAAGkE,KAAK,CAACF,OAAO,CAAC,CAAC,CAAC,GAAG;AAC/B,CAAC;AAAC;AAAAlE,cAAA,GAAAE,CAAA;AAEF,MAAMmE,WAAW,GAAIC,KAAa,IAAY;EAAA;EAAAtE,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EAC5C,IAAIoE,KAAK,KAAK,CAAC,EAAE;IAAA;IAAAtE,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAAA,OAAO,KAAK;EAAA,CAAC;EAAA;EAAA;IAAAF,cAAA,GAAAsD,CAAA;EAAA;EAC9B,MAAMiB,CAAC;EAAA;EAAA,CAAAvE,cAAA,GAAAE,CAAA,QAAG,IAAI;EACd,MAAMsE,KAAK;EAAA;EAAA,CAAAxE,cAAA,GAAAE,CAAA,QAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3C,MAAMuE,CAAC;EAAA;EAAA,CAAAzE,cAAA,GAAAE,CAAA,QAAGwE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACN,KAAK,CAAC,GAAGI,IAAI,CAACE,GAAG,CAACL,CAAC,CAAC,CAAC;EAAC;EAAAvE,cAAA,GAAAE,CAAA;EACpD,OAAO2E,UAAU,CAAC,CAACP,KAAK,GAAGI,IAAI,CAACI,GAAG,CAACP,CAAC,EAAEE,CAAC,CAAC,EAAEP,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGM,KAAK,CAACC,CAAC,CAAC;AACzE,CAAC;AAAC;AAAAzE,cAAA,GAAAE,CAAA;AAEF,MAAM6E,cAAc,GAAIC,MAAgB,IAA4C;EAAA;EAAAhF,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EAClF,IAAI8E,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IAAA;IAAAjF,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAAA,OAAO,QAAQ;EAAA,CAAC;EAAA;EAAA;IAAAF,cAAA,GAAAsD,CAAA;EAAA;EAEvC,MAAM4B,SAAS;EAAA;EAAA,CAAAlF,cAAA,GAAAE,CAAA,QAAG8E,MAAM,CAACG,KAAK,CAAC,CAAC,EAAET,IAAI,CAACC,KAAK,CAACK,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC;EAChE,MAAMG,UAAU;EAAA;EAAA,CAAApF,cAAA,GAAAE,CAAA,QAAG8E,MAAM,CAACG,KAAK,CAACT,IAAI,CAACC,KAAK,CAACK,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC,CAAC;EAE9D,MAAMI,QAAQ;EAAA;EAAA,CAAArF,cAAA,GAAAE,CAAA,QAAGgF,SAAS,CAACI,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAxF,cAAA,GAAAqD,CAAA;IAAArD,cAAA,GAAAE,CAAA;IAAA,OAAAqF,GAAG,GAAGC,GAAG;EAAH,CAAG,EAAE,CAAC,CAAC,GAAGN,SAAS,CAACD,MAAM;EAChF,MAAMQ,SAAS;EAAA;EAAA,CAAAzF,cAAA,GAAAE,CAAA,QAAGkF,UAAU,CAACE,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;IAAA;IAAAxF,cAAA,GAAAqD,CAAA;IAAArD,cAAA,GAAAE,CAAA;IAAA,OAAAqF,GAAG,GAAGC,GAAG;EAAH,CAAG,EAAE,CAAC,CAAC,GAAGJ,UAAU,CAACH,MAAM;EAEnF,MAAMS,aAAa;EAAA;EAAA,CAAA1F,cAAA,GAAAE,CAAA,QAAI,CAACuF,SAAS,GAAGJ,QAAQ,IAAIA,QAAQ,GAAI,GAAG;EAAC;EAAArF,cAAA,GAAAE,CAAA;EAEhE,IAAIwE,IAAI,CAACiB,GAAG,CAACD,aAAa,CAAC,GAAG,CAAC,EAAE;IAAA;IAAA1F,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAAA,OAAO,QAAQ;EAAA,CAAC;EAAA;EAAA;IAAAF,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACjD,OAAOwF,aAAa,GAAG,CAAC;EAAA;EAAA,CAAA1F,cAAA,GAAAsD,CAAA,UAAG,YAAY;EAAA;EAAA,CAAAtD,cAAA,GAAAsD,CAAA,UAAG,YAAY;AACxD,CAAC;AAAC;AAAAtD,cAAA,GAAAE,CAAA;AAEF,MAAM0F,uBAAuB,GAAIC,OAAY,IAAc;EAAA;EAAA7F,cAAA,GAAAqD,CAAA;EACzD,MAAMyC,eAAe;EAAA;EAAA,CAAA9F,cAAA,GAAAE,CAAA,QAAa,EAAE;EAAC;EAAAF,cAAA,GAAAE,CAAA;EAErC,IAAI2F,OAAO,CAACE,WAAW,EAAEC,SAAS,GAAG,EAAE,EAAE;IAAA;IAAAhG,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IACvC4F,eAAe,CAACG,IAAI,CAAC,2EAA2E,CAAC;EACnG,CAAC;EAAA;EAAA;IAAAjG,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAED,IAAI2F,OAAO,CAACE,WAAW,EAAEG,oBAAoB,GAAG,KAAK,EAAE;IAAA;IAAAlG,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IACrD4F,eAAe,CAACG,IAAI,CAAC,oEAAoE,CAAC;EAC5F,CAAC;EAAA;EAAA;IAAAjG,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAED,IAAI2F,OAAO,CAACM,MAAM,EAAEC,MAAM,EAAEC,WAAW,GAAG,EAAE,EAAE;IAAA;IAAArG,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAC5C4F,eAAe,CAACG,IAAI,CAAC,kFAAkF,CAAC;EAC1G,CAAC;EAAA;EAAA;IAAAjG,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAED,IAAI2F,OAAO,CAACM,MAAM,EAAEG,GAAG,EAAEC,UAAU,GAAG,EAAE,EAAE;IAAA;IAAAvG,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IACxC4F,eAAe,CAACG,IAAI,CAAC,yDAAyD,CAAC;EACjF,CAAC;EAAA;EAAA;IAAAjG,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAED,IAAI2F,OAAO,CAACW,SAAS,EAAEC,QAAQ,GAAGZ,OAAO,CAACW,SAAS,EAAEE,MAAM,EAAE;IAAA;IAAA1G,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAC3D4F,eAAe,CAACG,IAAI,CAAC,kFAAkF,CAAC;EAC1G,CAAC;EAAA;EAAA;IAAAjG,cAAA,GAAAsD,CAAA;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EAED,OAAO4F,eAAe;AACxB,CAAC;AAED;AAAA;AAAA9F,cAAA,GAAAE,CAAA;AACA,MAAMyG,cAAc,GAAGA,CAACxE,IAAY,EAAEyE,IAAS,EAAEC,IAAA;AAAA;AAAA,CAAA7G,cAAA,GAAAsD,CAAA,WAA+B,EAAE,MAAU;EAAA;EAAAtD,cAAA,GAAAqD,CAAA;EAC1F,MAAMyD,SAAS;EAAA;EAAA,CAAA9G,cAAA,GAAAE,CAAA,QAAwB;IACrC6G,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;IACnCC,UAAU,EAAE/E,IAAW;IACvByE,IAAI;IACJC;GACD;EAAC;EAAA7G,cAAA,GAAAE,CAAA;EAEF+C,eAAe,CAACgD,IAAI,CAACa,SAAS,CAAC;EAE/B;EAAA;EAAA9G,cAAA,GAAAE,CAAA;EACA,IAAI+C,eAAe,CAACgC,MAAM,GAAG,KAAK,EAAE;IAAA;IAAAjF,cAAA,GAAAsD,CAAA;IAAAtD,cAAA,GAAAE,CAAA;IAClC+C,eAAe,CAACkE,KAAK,EAAE;EACzB,CAAC;EAAA;EAAA;IAAAnH,cAAA,GAAAsD,CAAA;EAAA;AACH,CAAC;AAED;AACA,SAAgBlD,6BAA6BA,CAACgD,SAAiC,EAAEgE,MAAW;EAAA;EAAApH,cAAA,GAAAqD,CAAA;EAAArD,cAAA,GAAAE,CAAA;EAC1F;EACAkH,MAAM,CAACC,OAAO,CAAC;IACb/E,IAAI,EAAE,yBAAyB;IAC/BgF,WAAW,EAAE,2DAA2D;IACxEC,UAAU,EAAE9G,kBAAkB;IAC9B+G,OAAO,EAAE,MAAOC,IAAwC,IAAI;MAAA;MAAAzH,cAAA,GAAAqD,CAAA;MAAArD,cAAA,GAAAE,CAAA;MAC1D,IAAI;QACF,MAAM8C,gBAAgB;QAAA;QAAA,CAAAhD,cAAA,GAAAE,CAAA,QAAGiD,mBAAmB,CAACC,SAAS,CAAC;QACvD,MAAMyC,OAAO;QAAA;QAAA,CAAA7F,cAAA,GAAAE,CAAA,QAAG,MAAM8C,gBAAgB,CAAC0E,UAAU,EAAE;QAEnD;QAAA;QAAA1H,cAAA,GAAAE,CAAA;QACAyG,cAAc,CAAC,aAAa,EAAEd,OAAO,EAAE;UACrCjF,SAAS,EAAE6G,IAAI,CAAC7G,SAAS;UACzBS,MAAM,EAAEoG,IAAI,CAACpG;SACd,CAAC;QAAC;QAAArB,cAAA,GAAAE,CAAA;QAEH,IAAIuH,IAAI,CAACpG,MAAM,KAAK,KAAK,EAAE;UAAA;UAAArB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACzB,OAAO;YACLyH,OAAO,EAAE,IAAI;YACbf,IAAI,EAAEf,OAAO;YACbkB,SAAS,EAAElB,OAAO,CAACkB;WACpB;QACH,CAAC;QAAA;QAAA;UAAA/G,cAAA,GAAAsD,CAAA;QAAA;QAED,IAAIsE,QAAQ;QAAA;QAAA,CAAA5H,cAAA,GAAAE,CAAA,QAAG,uCAAuC;QAAC;QAAAF,cAAA,GAAAE,CAAA;QACvD0H,QAAQ,IAAI,kBAAkB,IAAIZ,IAAI,CAACnB,OAAO,CAACkB,SAAS,CAAC,CAACc,cAAc,EAAE,IAAI;QAAC;QAAA7H,cAAA,GAAAE,CAAA;QAC/E0H,QAAQ,IAAI,mBAAmBH,IAAI,CAAC7G,SAAS,MAAM;QAEnD;QAAA;QAAAZ,cAAA,GAAAE,CAAA;QACA0H,QAAQ,IAAI,4BAA4B;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QACzC0H,QAAQ,IAAI,uBAAuB/B,OAAO,CAACiC,UAAU,CAACC,KAAK,IAAI;QAAC;QAAA/H,cAAA,GAAAE,CAAA;QAChE0H,QAAQ,IAAI,iBAAiB/B,OAAO,CAACiC,UAAU,CAACE,UAAU,KAAK7D,gBAAgB,CAAE0B,OAAO,CAACiC,UAAU,CAACE,UAAU,GAAGnC,OAAO,CAACiC,UAAU,CAACC,KAAK,GAAI,GAAG,CAAC,KAAK;QAAC;QAAA/H,cAAA,GAAAE,CAAA;QACvJ0H,QAAQ,IAAI,aAAa/B,OAAO,CAACiC,UAAU,CAACG,MAAM,KAAK9D,gBAAgB,CAAE0B,OAAO,CAACiC,UAAU,CAACG,MAAM,GAAGpC,OAAO,CAACiC,UAAU,CAACC,KAAK,GAAI,GAAG,CAAC,KAAK;QAAC;QAAA/H,cAAA,GAAAE,CAAA;QAC3I0H,QAAQ,IAAI,wBAAwB/B,OAAO,CAACiC,UAAU,CAACI,OAAO,IAAI;QAElE;QAAA;QAAAlI,cAAA,GAAAE,CAAA;QACA,IAAIuH,IAAI,CAAC1G,gBAAgB,EAAE;UAAA;UAAAf,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACzB0H,QAAQ,IAAI,8BAA8B;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC3C0H,QAAQ,IAAI,sBAAsB/B,OAAO,CAACW,SAAS,CAACuB,KAAK,IAAI;UAAC;UAAA/H,cAAA,GAAAE,CAAA;UAC9D0H,QAAQ,IAAI,aAAa/B,OAAO,CAACW,SAAS,CAACE,MAAM,IAAI;UAAC;UAAA1G,cAAA,GAAAE,CAAA;UACtD0H,QAAQ,IAAI,eAAe/B,OAAO,CAACW,SAAS,CAACC,QAAQ,IAAI;UAAC;UAAAzG,cAAA,GAAAE,CAAA;UAC1D,IAAI2F,OAAO,CAACW,SAAS,CAAC2B,UAAU,GAAG,CAAC,EAAE;YAAA;YAAAnI,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACpC0H,QAAQ,IAAI,kBAAkB/B,OAAO,CAACW,SAAS,CAAC2B,UAAU,IAAI;UAChE,CAAC;UAAA;UAAA;YAAAnI,cAAA,GAAAsD,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsD,CAAA;QAAA;QAED;QAAAtD,cAAA,GAAAE,CAAA;QACA0H,QAAQ,IAAI,yBAAyB;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QACtC0H,QAAQ,IAAI,6BAA6B5D,cAAc,CAAC6B,OAAO,CAACE,WAAW,CAACG,oBAAoB,CAAC,IAAI;QAAC;QAAAlG,cAAA,GAAAE,CAAA;QACtG0H,QAAQ,IAAI,iBAAiB/B,OAAO,CAACE,WAAW,CAACqC,UAAU,CAAClE,OAAO,CAAC,CAAC,CAAC,sBAAsB;QAAC;QAAAlE,cAAA,GAAAE,CAAA;QAC7F0H,QAAQ,IAAI,iBAAiBzD,gBAAgB,CAAC0B,OAAO,CAACE,WAAW,CAACC,SAAS,CAAC,IAAI;QAEhF;QAAA;QAAAhG,cAAA,GAAAE,CAAA;QACA,IAAIuH,IAAI,CAACxG,aAAa,EAAE;UAAA;UAAAjB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACtB0H,QAAQ,IAAI,8BAA8B;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC3C0H,QAAQ,IAAI,gBAAgBzD,gBAAgB,CAAC0B,OAAO,CAACM,MAAM,CAACG,GAAG,CAACC,UAAU,CAAC,IAAI;UAAC;UAAAvG,cAAA,GAAAE,CAAA;UAChF0H,QAAQ,IAAI,mBAAmBzD,gBAAgB,CAAC0B,OAAO,CAACM,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,KAAKhC,WAAW,CAACwB,OAAO,CAACM,MAAM,CAACC,MAAM,CAACiC,UAAU,CAAC,KAAK;UAAC;UAAArI,cAAA,GAAAE,CAAA;UAC1I0H,QAAQ,IAAI,qBAAqBvD,WAAW,CAACwB,OAAO,CAACM,MAAM,CAACC,MAAM,CAACkC,aAAa,CAACC,GAAG,CAAC,QAAQ;UAAC;UAAAvI,cAAA,GAAAE,CAAA;UAC9F,IAAI2F,OAAO,CAACM,MAAM,CAACqC,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE;YAAA;YAAAzI,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACtC0H,QAAQ,IAAI,iBAAiBzD,gBAAgB,CAAC0B,OAAO,CAACM,MAAM,CAACqC,IAAI,CAACnC,WAAW,CAAC,IAAI;UACpF,CAAC;UAAA;UAAA;YAAArG,cAAA,GAAAsD,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QAED,IAAIuH,IAAI,CAACpG,MAAM,KAAK,UAAU,EAAE;UAAA;UAAArB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B;UACA0H,QAAQ,IAAI,8BAA8B;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC3C0H,QAAQ,IAAI,gBAAgB/B,OAAO,CAACM,MAAM,CAACG,GAAG,CAACoC,SAAS,IAAI;UAAC;UAAA1I,cAAA,GAAAE,CAAA;UAC7D0H,QAAQ,IAAI,mBAAmBvD,WAAW,CAACwB,OAAO,CAACM,MAAM,CAACC,MAAM,CAACkC,aAAa,CAACK,QAAQ,CAAC,MAAMtE,WAAW,CAACwB,OAAO,CAACM,MAAM,CAACC,MAAM,CAACkC,aAAa,CAACM,SAAS,CAAC,IAAI;UAAC;UAAA5I,cAAA,GAAAE,CAAA;UAC7J0H,QAAQ,IAAI,oBAAoB5D,cAAc,CAAC6B,OAAO,CAACM,MAAM,CAAC0C,MAAM,GAAG,IAAI,CAAC,IAAI;QAClF,CAAC;QAAA;QAAA;UAAA7I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QAED,OAAO0H,QAAQ;MACjB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QAAA;QAAA9I,cAAA,GAAAE,CAAA;QACd,IAAI4I,KAAK,YAAYvI,SAAA,CAAAiD,SAAS,EAAE;UAAA;UAAAxD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B,MAAM4I,KAAK;QACb,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,sCAAsCsF,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;QAAA;QAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,GAAE,CAAC;MACvH;IACF;GACD,CAAC;EAEF;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACAkH,MAAM,CAACC,OAAO,CAAC;IACb/E,IAAI,EAAE,qBAAqB;IAC3BgF,WAAW,EAAE,yEAAyE;IACtFC,UAAU,EAAEjG,yBAAyB;IACrCkG,OAAO,EAAE,MAAOC,IAA+C,IAAI;MAAA;MAAAzH,cAAA,GAAAqD,CAAA;MAAArD,cAAA,GAAAE,CAAA;MACjE,IAAI;QACF,MAAMqD,MAAM;QAAA;QAAA,CAAAvD,cAAA,GAAAE,CAAA,SAAGkD,SAAS,EAAE;QAAC;QAAApD,cAAA,GAAAE,CAAA;QAC3B,IAAI,CAACqD,MAAM,EAAE;UAAA;UAAAvD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACX,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,4BAA4B,CAAC;QACnD,CAAC;QAAA;QAAA;UAAAxD,cAAA,GAAAsD,CAAA;QAAA;QAED;QACA,MAAM2F,kBAAkB;QAAA;QAAA,CAAAjJ,cAAA,GAAAE,CAAA,SAAG,MAAMqD,MAAM,CAAC2F,aAAa,CAAC;UACpDC,KAAK,EAAE;SACR,CAAC;QAEF;QACA,IAAIrB,UAAU;QAAA;QAAA,CAAA9H,cAAA,GAAAE,CAAA,SAAG+I,kBAAkB,CAACrC,IAAI;QAAC;QAAA5G,cAAA,GAAAE,CAAA;QACzC,IAAIuH,IAAI,CAACvG,UAAU,EAAE;UAAA;UAAAlB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACnB4H,UAAU,GAAGA,UAAU,CAACsB,MAAM,CAACC,CAAC,IAAI;YAAA;YAAArJ,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAAmJ,CAAC,CAACnI,UAAU,KAAKuG,IAAI,CAACvG,UAAU;UAAV,CAAU,CAAC;QACvE,CAAC;QAAA;QAAA;UAAAlB,cAAA,GAAAsD,CAAA;QAAA;QAED,IAAIsE,QAAQ;QAAA;QAAA,CAAA5H,cAAA,GAAAE,CAAA,SAAG,8BAA8BuH,IAAI,CAAClG,YAAY,QAAQ;QAAC;QAAAvB,cAAA,GAAAE,CAAA;QAEvE,QAAQuH,IAAI,CAAClG,YAAY;UACvB,KAAK,iBAAiB;YAAA;YAAAvB,cAAA,GAAAsD,CAAA;YAAE;cACtB,MAAMgG,cAAc;cAAA;cAAA,CAAAtJ,cAAA,GAAAE,CAAA,SAAG4H,UAAU,CAC9BsB,MAAM,CAACC,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,kCAAAF,cAAA,GAAAsD,CAAA,WAAA+F,CAAC,CAACE,QAAQ;gBAAA;gBAAA,CAAAvJ,cAAA,GAAAsD,CAAA,WAAI+F,CAAC,CAACG,SAAS;gBAAA;gBAAA,CAAAxJ,cAAA,GAAAsD,CAAA,WAAI+F,CAAC,CAACI,SAAS;cAAT,CAAS,CAAC,CACrDC,GAAG,CAACL,CAAC,IAAK;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA;kBACT2B,QAAQ,EAAE,IAAImF,IAAI,CAACqC,CAAC,CAACI,SAAU,CAAC,CAACE,OAAO,EAAE,GAAG,IAAI3C,IAAI,CAACqC,CAAC,CAACG,SAAS,CAAC,CAACG,OAAO,EAAE;kBAC5EzI,UAAU;kBAAE;kBAAA,CAAAlB,cAAA,GAAAsD,CAAA,WAAA+F,CAAC,CAACnI,UAAU;kBAAA;kBAAA,CAAAlB,cAAA,GAAAsD,CAAA,WAAI,SAAS;kBACrCsG,MAAM,EAAEP,CAAC,CAACI,SAAS;kBAAA;kBAAA,CAAAzJ,cAAA,GAAAsD,CAAA,WAAG,QAAQ;kBAAA;kBAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,SAAS;iBAC3C;eAAC,CAAC;cAAC;cAAAtD,cAAA,GAAAE,CAAA;cAEN,IAAIoJ,cAAc,CAACrE,MAAM,KAAK,CAAC,EAAE;gBAAA;gBAAAjF,cAAA,GAAAsD,CAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBAC/B0H,QAAQ,IAAI,+CAA+C;gBAAC;gBAAA5H,cAAA,GAAAE,CAAA;gBAC5D;cACF,CAAC;cAAA;cAAA;gBAAAF,cAAA,GAAAsD,CAAA;cAAA;cAED,MAAMuG,OAAO;cAAA;cAAA,CAAA7J,cAAA,GAAAE,CAAA,SAAGoJ,cAAc,CAAChE,MAAM,CAAC,CAACC,GAAG,EAAE8D,CAAC,KAAK;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,OAAAqF,GAAG,GAAG8D,CAAC,CAACxH,QAAQ;cAAR,CAAQ,EAAE,CAAC,CAAC,GAAGyH,cAAc,CAACrE,MAAM;cAC9F,MAAM6E,OAAO;cAAA;cAAA,CAAA9J,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC5C,GAAG,CAAC,GAAGwH,cAAc,CAACI,GAAG,CAACL,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,OAAAmJ,CAAC,CAACxH,QAAQ;cAAR,CAAQ,CAAC,CAAC;cAChE,MAAMkI,OAAO;cAAA;cAAA,CAAA/J,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC3C,GAAG,CAAC,GAAGuH,cAAc,CAACI,GAAG,CAACL,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,OAAAmJ,CAAC,CAACxH,QAAQ;cAAR,CAAQ,CAAC,CAAC;cAChE,MAAMmI,UAAU;cAAA;cAAA,CAAAhK,cAAA,GAAAE,CAAA;cAAG;cAAA,CAAAF,cAAA,GAAAsD,CAAA,WAAAgG,cAAc,CAACW,IAAI,CAAC,CAACC,CAAC,EAAE5G,CAAC,KAAK;gBAAA;gBAAAtD,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,OAAAgK,CAAC,CAACrI,QAAQ,GAAGyB,CAAC,CAACzB,QAAQ;cAAR,CAAQ,CAAC,CAAC6C,IAAI,CAACC,KAAK,CAAC2E,cAAc,CAACrE,MAAM,GAAG,CAAC,CAAC,CAAC,EAAEpD,QAAQ;cAAA;cAAA,CAAA7B,cAAA,GAAAsD,CAAA,WAAI,CAAC;cAAC;cAAAtD,cAAA,GAAAE,CAAA;cAEhI0H,QAAQ,IAAI,iCAAiC0B,cAAc,CAACrE,MAAM,mBAAmB;cAAC;cAAAjF,cAAA,GAAAE,CAAA;cACtF0H,QAAQ,IAAI,cAAc5D,cAAc,CAAC6F,OAAO,CAAC,IAAI;cAAC;cAAA7J,cAAA,GAAAE,CAAA;cACtD0H,QAAQ,IAAI,aAAa5D,cAAc,CAACgG,UAAU,CAAC,IAAI;cAAC;cAAAhK,cAAA,GAAAE,CAAA;cACxD0H,QAAQ,IAAI,UAAU5D,cAAc,CAAC8F,OAAO,CAAC,IAAI;cAAC;cAAA9J,cAAA,GAAAE,CAAA;cAClD0H,QAAQ,IAAI,UAAU5D,cAAc,CAAC+F,OAAO,CAAC,IAAI;cAEjD;cACA,MAAMI,aAAa;cAAA;cAAA,CAAAnK,cAAA,GAAAE,CAAA;cAAG;cAAA,CAAAF,cAAA,GAAAsD,CAAA,WAAAmE,IAAI,CAAChG,SAAS;cAAA;cAAA,CAAAzB,cAAA,GAAAsD,CAAA,WAAIuG,OAAO,GAAG,CAAC;cACnD,MAAMO,cAAc;cAAA;cAAA,CAAApK,cAAA,GAAAE,CAAA,SAAGoJ,cAAc,CAACF,MAAM,CAACC,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,OAAAmJ,CAAC,CAACxH,QAAQ,GAAGsI,aAAa;cAAb,CAAa,CAAC;cAAC;cAAAnK,cAAA,GAAAE,CAAA;cAE9E,IAAIkK,cAAc,CAACnF,MAAM,GAAG,CAAC,EAAE;gBAAA;gBAAAjF,cAAA,GAAAsD,CAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBAC7B0H,QAAQ,IAAI,4BAA4B5D,cAAc,CAACmG,aAAa,CAAC,QAAQC,cAAc,CAACnF,MAAM,IAAI;cACxG,CAAC;cAAA;cAAA;gBAAAjF,cAAA,GAAAsD,CAAA;cAAA;cAAAtD,cAAA,GAAAE,CAAA;cAED;YACF;UAEA,KAAK,aAAa;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAE;cAClB,MAAM+G,UAAU;cAAA;cAAA,CAAArK,cAAA,GAAAE,CAAA,SAAG4H,UAAU,CAAC7C,MAAM;cACpC,MAAMqF,WAAW;cAAA;cAAA,CAAAtK,cAAA,GAAAE,CAAA,SAAG4H,UAAU,CAACsB,MAAM,CAACC,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,kCAAAF,cAAA,GAAAsD,CAAA,WAAA+F,CAAC,CAACE,QAAQ;gBAAA;gBAAA,CAAAvJ,cAAA,GAAAsD,CAAA,WAAI+F,CAAC,CAACI,SAAS;cAAT,CAAS,CAAC,CAACxE,MAAM;cAC5E,MAAMe,SAAS;cAAA;cAAA,CAAAhG,cAAA,GAAAE,CAAA,SAAGmK,UAAU,GAAG,CAAC;cAAA;cAAA,CAAArK,cAAA,GAAAsD,CAAA,WAAIgH,WAAW,GAAGD,UAAU,GAAI,GAAG;cAAA;cAAA,CAAArK,cAAA,GAAAsD,CAAA,WAAG,CAAC;cAAC;cAAAtD,cAAA,GAAAE,CAAA;cAExE0H,QAAQ,IAAI,8BAA8B;cAAC;cAAA5H,cAAA,GAAAE,CAAA;cAC3C0H,QAAQ,IAAI,uBAAuByC,UAAU,IAAI;cAAC;cAAArK,cAAA,GAAAE,CAAA;cAClD0H,QAAQ,IAAI,wBAAwB0C,WAAW,IAAI;cAAC;cAAAtK,cAAA,GAAAE,CAAA;cACpD0H,QAAQ,IAAI,iBAAiBzD,gBAAgB,CAAC6B,SAAS,CAAC,IAAI;cAAC;cAAAhG,cAAA,GAAAE,CAAA;cAE7D,IAAI8F,SAAS,GAAG,EAAE,EAAE;gBAAA;gBAAAhG,cAAA,GAAAsD,CAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBAClB0H,QAAQ,IAAI,sCAAsC;cACpD,CAAC,MAAM;gBAAA;gBAAA5H,cAAA,GAAAsD,CAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBAAA,IAAI8F,SAAS,GAAG,CAAC,EAAE;kBAAA;kBAAAhG,cAAA,GAAAsD,CAAA;kBAAAtD,cAAA,GAAAE,CAAA;kBACxB0H,QAAQ,IAAI,kDAAkD;gBAChE,CAAC,MAAM;kBAAA;kBAAA5H,cAAA,GAAAsD,CAAA;kBAAAtD,cAAA,GAAAE,CAAA;kBACL0H,QAAQ,IAAI,8CAA8C;gBAC5D;cAAA;cAAC;cAAA5H,cAAA,GAAAE,CAAA;cAED;YACF;UAEA,KAAK,YAAY;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAE;cACjB,MAAMiH,GAAG;cAAA;cAAA,CAAAvK,cAAA,GAAAE,CAAA,SAAG,IAAI8G,IAAI,EAAE;cACtB,MAAMwD,OAAO;cAAA;cAAA,CAAAxK,cAAA,GAAAE,CAAA,SAAG,IAAI8G,IAAI,CAACuD,GAAG,CAACZ,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;cACxD,MAAMc,WAAW;cAAA;cAAA,CAAAzK,cAAA,GAAAE,CAAA,SAAG4H,UAAU,CAACsB,MAAM,CAACC,CAAC,IAAI;gBAAA;gBAAArJ,cAAA,GAAAqD,CAAA;gBAAArD,cAAA,GAAAE,CAAA;gBAAA,WAAI8G,IAAI,CAACqC,CAAC,CAACG,SAAS,CAAC,GAAGgB,OAAO;cAAP,CAAO,CAAC;cAC3E,MAAME,iBAAiB;cAAA;cAAA,CAAA1K,cAAA,GAAAE,CAAA,SAAGuK,WAAW,CAACxF,MAAM;cAC5C,MAAM0F,mBAAmB;cAAA;cAAA,CAAA3K,cAAA,GAAAE,CAAA,SAAGwK,iBAAiB,GAAG,EAAE;cAAC;cAAA1K,cAAA,GAAAE,CAAA;cAEnD0H,QAAQ,IAAI,+BAA+B;cAAC;cAAA5H,cAAA,GAAAE,CAAA;cAC5C0H,QAAQ,IAAI,6BAA6B8C,iBAAiB,IAAI;cAAC;cAAA1K,cAAA,GAAAE,CAAA;cAC/D0H,QAAQ,IAAI,iBAAiB+C,mBAAmB,CAACzG,OAAO,CAAC,CAAC,CAAC,sBAAsB;cAAC;cAAAlE,cAAA,GAAAE,CAAA;cAClF0H,QAAQ,IAAI,gCAAgCzD,gBAAgB,CAAEwG,mBAAmB,GAAG,EAAE,GAAI,GAAG,CAAC,IAAI,CAAC,CAAC;cAAA;cAAA3K,cAAA,GAAAE,CAAA;cAEpG;YACF;UAEA,KAAK,gBAAgB;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAE;cACrB,MAAMN,gBAAgB;cAAA;cAAA,CAAAhD,cAAA,GAAAE,CAAA,SAAGiD,mBAAmB,CAACC,SAAS,CAAC;cACvD,MAAMwH,WAAW;cAAA;cAAA,CAAA5K,cAAA,GAAAE,CAAA,SAAG8C,gBAAgB,CAAC6H,sBAAsB,EAAE;cAAC;cAAA7K,cAAA,GAAAE,CAAA;cAE9D0H,QAAQ,IAAI,mCAAmC;cAAC;cAAA5H,cAAA,GAAAE,CAAA;cAChD0H,QAAQ,IAAI,UAAUzD,gBAAgB,CAACyG,WAAW,CAACtE,GAAG,CAACC,UAAU,CAAC,KAAKqE,WAAW,CAACtE,GAAG,CAACoC,SAAS,WAAW;cAAC;cAAA1I,cAAA,GAAAE,CAAA;cAC5G0H,QAAQ,IAAI,aAAazD,gBAAgB,CAACyG,WAAW,CAACxE,MAAM,CAACC,WAAW,CAAC,IAAI;cAAC;cAAArG,cAAA,GAAAE,CAAA;cAC9E0H,QAAQ,IAAI,qBAAqBvD,WAAW,CAACuG,WAAW,CAACxE,MAAM,CAACkC,aAAa,CAACC,GAAG,CAAC,IAAI;cAAC;cAAAvI,cAAA,GAAAE,CAAA;cAEvF;YACF;QACF;QAEA;QAAA;QAAAF,cAAA,GAAAE,CAAA;QACA,IAAIuH,IAAI,CAACjG,sBAAsB,EAAE;UAAA;UAAAxB,cAAA,GAAAsD,CAAA;UAC/B,MAAMN,gBAAgB;UAAA;UAAA,CAAAhD,cAAA,GAAAE,CAAA,SAAGiD,mBAAmB,CAACC,SAAS,CAAC;UACvD,MAAMyC,OAAO;UAAA;UAAA,CAAA7F,cAAA,GAAAE,CAAA,SAAG,MAAM8C,gBAAgB,CAAC0E,UAAU,EAAE;UACnD,MAAM5B,eAAe;UAAA;UAAA,CAAA9F,cAAA,GAAAE,CAAA,SAAG0F,uBAAuB,CAACC,OAAO,CAAC;UAAC;UAAA7F,cAAA,GAAAE,CAAA;UAEzD,IAAI4F,eAAe,CAACb,MAAM,GAAG,CAAC,EAAE;YAAA;YAAAjF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YAC9B0H,QAAQ,IAAI,6BAA6B;YAAC;YAAA5H,cAAA,GAAAE,CAAA;YAC1C4F,eAAe,CAACgF,OAAO,CAACC,GAAG,IAAG;cAAA;cAAA/K,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAC5B0H,QAAQ,IAAI,KAAKmD,GAAG,IAAI;YAC1B,CAAC,CAAC;UACJ,CAAC;UAAA;UAAA;YAAA/K,cAAA,GAAAsD,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QAED,OAAO0H,QAAQ;MACjB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QAAA;QAAA9I,cAAA,GAAAE,CAAA;QACd,IAAI4I,KAAK,YAAYvI,SAAA,CAAAiD,SAAS,EAAE;UAAA;UAAAxD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B,MAAM4I,KAAK;QACb,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,kCAAkCsF,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;QAAA;QAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,GAAE,CAAC;MACnH;IACF;GACD,CAAC;EAEF;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACAkH,MAAM,CAACC,OAAO,CAAC;IACb/E,IAAI,EAAE,eAAe;IACrBgF,WAAW,EAAE,wDAAwD;IACrEC,UAAU,EAAE5F,mBAAmB;IAC/B6F,OAAO,EAAE,MAAOC,IAAyC,IAAI;MAAA;MAAAzH,cAAA,GAAAqD,CAAA;MAAArD,cAAA,GAAAE,CAAA;MAC3D,IAAI;QACF,MAAM8C,gBAAgB;QAAA;QAAA,CAAAhD,cAAA,GAAAE,CAAA,SAAGiD,mBAAmB,CAACC,SAAS,CAAC;QAEvD,IAAIwE,QAAQ;QAAA;QAAA,CAAA5H,cAAA,GAAAE,CAAA,SAAG,wBAAwBuH,IAAI,CAAC7F,QAAQ,QAAQ;QAAC;QAAA5B,cAAA,GAAAE,CAAA;QAC7D0H,QAAQ,IAAI,sBAAsB;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QACnC0H,QAAQ,IAAI,eAAeH,IAAI,CAAC5F,QAAQ,KAAK;QAAC;QAAA7B,cAAA,GAAAE,CAAA;QAC9C0H,QAAQ,IAAI,kBAAkBH,IAAI,CAACzF,WAAW,IAAI;QAAC;QAAAhC,cAAA,GAAAE,CAAA;QACnD,IAAIuH,IAAI,CAACvG,UAAU,EAAE;UAAA;UAAAlB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACnB0H,QAAQ,IAAI,kBAAkBH,IAAI,CAACvG,UAAU,IAAI;QACnD,CAAC;QAAA;QAAA;UAAAlB,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD0H,QAAQ,IAAI,IAAI;QAEhB,MAAMoD,OAAO;QAAA;QAAA,CAAAhL,cAAA,GAAAE,CAAA,SAAG;UACd+K,aAAa,EAAE,CAAC;UAChBC,kBAAkB,EAAE,CAAC;UACrBC,cAAc,EAAE,CAAC;UACjBC,aAAa,EAAE,EAAc;UAC7BC,MAAM,EAAE;SACT;QAED,MAAMC,SAAS;QAAA;QAAA,CAAAtL,cAAA,GAAAE,CAAA,SAAG8G,IAAI,CAACuD,GAAG,EAAE;QAC5B,MAAMgB,OAAO;QAAA;QAAA,CAAAvL,cAAA,GAAAE,CAAA,SAAGoL,SAAS,GAAI7D,IAAI,CAAC5F,QAAQ,GAAG,IAAK;QAAC;QAAA7B,cAAA,GAAAE,CAAA;QAEnD0H,QAAQ,IAAI,4BAA4B;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QAEzC,IAAI;UAAA;UAAAF,cAAA,GAAAE,CAAA;UACF,QAAQuH,IAAI,CAAC7F,QAAQ;YACnB,KAAK,cAAc;cAAA;cAAA5B,cAAA,GAAAsD,CAAA;cAAE;gBAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBACnB;gBACA,OAAO8G,IAAI,CAACuD,GAAG,EAAE,GAAGgB,OAAO,EAAE;kBAC3B,MAAMC,QAAQ;kBAAA;kBAAA,CAAAxL,cAAA,GAAAE,CAAA,SAAG,EAAE;kBAAC;kBAAAF,cAAA,GAAAE,CAAA;kBACpB,KAAK,IAAIuE,CAAC;kBAAA;kBAAA,CAAAzE,cAAA,GAAAE,CAAA,SAAG,CAAC,GAAEuE,CAAC,GAAGgD,IAAI,CAACzF,WAAW,EAAEyC,CAAC,EAAE,EAAE;oBAAA;oBAAAzE,cAAA,GAAAE,CAAA;oBACzCsL,QAAQ,CAACvF,IAAI,CACXjD,gBAAgB,CAACyI,gBAAgB,EAAE,CAACC,IAAI,CAACC,MAAM,IAAG;sBAAA;sBAAA3L,cAAA,GAAAqD,CAAA;sBAAArD,cAAA,GAAAE,CAAA;sBAChD8K,OAAO,CAACC,aAAa,EAAE;sBAAC;sBAAAjL,cAAA,GAAAE,CAAA;sBACxB,IAAIyL,MAAM,CAAChE,OAAO,EAAE;wBAAA;wBAAA3H,cAAA,GAAAsD,CAAA;wBAAAtD,cAAA,GAAAE,CAAA;wBAClB8K,OAAO,CAACE,kBAAkB,EAAE;wBAAC;wBAAAlL,cAAA,GAAAE,CAAA;wBAC7B8K,OAAO,CAACI,aAAa,CAACnF,IAAI,CAAC0F,MAAM,CAACC,YAAY,CAAC;sBACjD,CAAC,MAAM;wBAAA;wBAAA5L,cAAA,GAAAsD,CAAA;wBAAAtD,cAAA,GAAAE,CAAA;wBACL8K,OAAO,CAACG,cAAc,EAAE;wBAAC;wBAAAnL,cAAA,GAAAE,CAAA;wBACzB,IAAIyL,MAAM,CAAC7C,KAAK,EAAE;0BAAA;0BAAA9I,cAAA,GAAAsD,CAAA;0BAAAtD,cAAA,GAAAE,CAAA;0BAAA8K,OAAO,CAACK,MAAM,CAACpF,IAAI,CAAC0F,MAAM,CAAC7C,KAAK,CAAC;wBAAA,CAAC;wBAAA;wBAAA;0BAAA9I,cAAA,GAAAsD,CAAA;wBAAA;sBACtD;oBACF,CAAC,CAAC,CAACuI,KAAK,CAAC/C,KAAK,IAAG;sBAAA;sBAAA9I,cAAA,GAAAqD,CAAA;sBAAArD,cAAA,GAAAE,CAAA;sBACf8K,OAAO,CAACC,aAAa,EAAE;sBAAC;sBAAAjL,cAAA,GAAAE,CAAA;sBACxB8K,OAAO,CAACG,cAAc,EAAE;sBAAC;sBAAAnL,cAAA,GAAAE,CAAA;sBACzB8K,OAAO,CAACK,MAAM,CAACpF,IAAI,CAAC6C,KAAK,CAACE,OAAO,CAAC;oBACpC,CAAC,CAAC,CACH;kBACH;kBAAC;kBAAAhJ,cAAA,GAAAE,CAAA;kBACD,MAAM4L,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;kBAE3B;kBAAA;kBAAAxL,cAAA,GAAAE,CAAA;kBACA,MAAM,IAAI4L,OAAO,CAACE,OAAO,IAAI;oBAAA;oBAAAhM,cAAA,GAAAqD,CAAA;oBAAArD,cAAA,GAAAE,CAAA;oBAAA,OAAA+L,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC;kBAAD,CAAC,CAAC;gBACxD;gBAAC;gBAAAhM,cAAA,GAAAE,CAAA;gBACD;cACF;YAEA,KAAK,oBAAoB;cAAA;cAAAF,cAAA,GAAAsD,CAAA;cAAE;gBAAA;gBAAAtD,cAAA,GAAAE,CAAA;gBACzB,IAAI,CAACuH,IAAI,CAACvG,UAAU,EAAE;kBAAA;kBAAAlB,cAAA,GAAAsD,CAAA;kBAAAtD,cAAA,GAAAE,CAAA;kBACpB,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,0DAA0D,CAAC;gBACjF,CAAC;gBAAA;gBAAA;kBAAAxD,cAAA,GAAAsD,CAAA;gBAAA;gBAED;gBACA;gBAAAtD,cAAA,GAAAE,CAAA;gBACA0H,QAAQ,IAAI,2FAA2F;gBAAC;gBAAA5H,cAAA,GAAAE,CAAA;gBACxG8K,OAAO,CAACC,aAAa,GAAG,EAAE;gBAAC;gBAAAjL,cAAA,GAAAE,CAAA;gBAC3B8K,OAAO,CAACE,kBAAkB,GAAG,CAAC;gBAAC;gBAAAlL,cAAA,GAAAE,CAAA;gBAC/B8K,OAAO,CAACG,cAAc,GAAG,CAAC;gBAAC;gBAAAnL,cAAA,GAAAE,CAAA;gBAC3B8K,OAAO,CAACI,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;gBAAC;gBAAApL,cAAA,GAAAE,CAAA;gBACzE;cACF;YAEA,KAAK,eAAe;cAAA;cAAAF,cAAA,GAAAsD,CAAA;cAAE;gBACpB;gBACA,MAAM4I,cAAc;gBAAA;gBAAA,CAAAlM,cAAA,GAAAE,CAAA,SAAG8C,gBAAgB,CAAC6H,sBAAsB,EAAE;gBAEhE;gBAAA;gBAAA7K,cAAA,GAAAE,CAAA;gBACA,OAAO8G,IAAI,CAACuD,GAAG,EAAE,GAAGgB,OAAO,EAAE;kBAC3B,MAAMC,QAAQ;kBAAA;kBAAA,CAAAxL,cAAA,GAAAE,CAAA,SAAG,EAAE;kBAAC;kBAAAF,cAAA,GAAAE,CAAA;kBACpB,KAAK,IAAIuE,CAAC;kBAAA;kBAAA,CAAAzE,cAAA,GAAAE,CAAA,SAAG,CAAC,GAAEuE,CAAC,GAAGgD,IAAI,CAACzF,WAAW,GAAG,CAAC,EAAEyC,CAAC,EAAE,EAAE;oBAAA;oBAAAzE,cAAA,GAAAE,CAAA;oBAC7CsL,QAAQ,CAACvF,IAAI,CACXjD,gBAAgB,CAACyI,gBAAgB,EAAE,CAACC,IAAI,CAACC,MAAM,IAAG;sBAAA;sBAAA3L,cAAA,GAAAqD,CAAA;sBAAArD,cAAA,GAAAE,CAAA;sBAChD8K,OAAO,CAACC,aAAa,EAAE;sBAAC;sBAAAjL,cAAA,GAAAE,CAAA;sBACxB,IAAIyL,MAAM,CAAChE,OAAO,EAAE;wBAAA;wBAAA3H,cAAA,GAAAsD,CAAA;wBAAAtD,cAAA,GAAAE,CAAA;wBAClB8K,OAAO,CAACE,kBAAkB,EAAE;sBAC9B,CAAC,MAAM;wBAAA;wBAAAlL,cAAA,GAAAsD,CAAA;wBAAAtD,cAAA,GAAAE,CAAA;wBACL8K,OAAO,CAACG,cAAc,EAAE;sBAC1B;oBACF,CAAC,CAAC,CACH;kBACH;kBAAC;kBAAAnL,cAAA,GAAAE,CAAA;kBACD,MAAM4L,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;kBAAC;kBAAAxL,cAAA,GAAAE,CAAA;kBAC5B,MAAM,IAAI4L,OAAO,CAACE,OAAO,IAAI;oBAAA;oBAAAhM,cAAA,GAAAqD,CAAA;oBAAArD,cAAA,GAAAE,CAAA;oBAAA,OAAA+L,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC;kBAAD,CAAC,CAAC;gBACxD;gBAEA,MAAMG,YAAY;gBAAA;gBAAA,CAAAnM,cAAA,GAAAE,CAAA,SAAG8C,gBAAgB,CAAC6H,sBAAsB,EAAE;gBAAC;gBAAA7K,cAAA,GAAAE,CAAA;gBAC/D0H,QAAQ,IAAI,wBAAwB;gBAAC;gBAAA5H,cAAA,GAAAE,CAAA;gBACrC0H,QAAQ,IAAI,iBAAiB,CAACuE,YAAY,CAAC7F,GAAG,CAACC,UAAU,GAAG2F,cAAc,CAAC5F,GAAG,CAACC,UAAU,EAAErC,OAAO,CAAC,CAAC,CAAC,KAAK;gBAAC;gBAAAlE,cAAA,GAAAE,CAAA;gBAC3G0H,QAAQ,IAAI,oBAAoBvD,WAAW,CAAC8H,YAAY,CAAC/F,MAAM,CAACkC,aAAa,CAACC,GAAG,GAAG2D,cAAc,CAAC9F,MAAM,CAACkC,aAAa,CAACC,GAAG,CAAC,IAAI;gBAAC;gBAAAvI,cAAA,GAAAE,CAAA;gBACjI;cACF;YAEA;cAAA;cAAAF,cAAA,GAAAsD,CAAA;cAAAtD,cAAA,GAAAE,CAAA;cACE,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,+BAA+BiE,IAAI,CAAC7F,QAAQ,EAAE,CAAC;UACvE;UAEA;UACA,MAAMwK,cAAc;UAAA;UAAA,CAAApM,cAAA,GAAAE,CAAA,SAAG,CAAC8G,IAAI,CAACuD,GAAG,EAAE,GAAGe,SAAS,IAAI,IAAI;UACtD,MAAMe,iBAAiB;UAAA;UAAA,CAAArM,cAAA,GAAAE,CAAA,SAAG8K,OAAO,CAACC,aAAa,GAAGmB,cAAc;UAChE,MAAME,WAAW;UAAA;UAAA,CAAAtM,cAAA,GAAAE,CAAA,SAAG8K,OAAO,CAACC,aAAa,GAAG,CAAC;UAAA;UAAA,CAAAjL,cAAA,GAAAsD,CAAA,WAAI0H,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACC,aAAa,GAAI,GAAG;UAAA;UAAA,CAAAjL,cAAA,GAAAsD,CAAA,WAAG,CAAC;UAAC;UAAAtD,cAAA,GAAAE,CAAA;UAE/G0H,QAAQ,IAAI,qBAAqB;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAClC0H,QAAQ,IAAI,eAAewE,cAAc,CAAClI,OAAO,CAAC,CAAC,CAAC,KAAK;UAAC;UAAAlE,cAAA,GAAAE,CAAA;UAC1D0H,QAAQ,IAAI,qBAAqBoD,OAAO,CAACC,aAAa,IAAI;UAAC;UAAAjL,cAAA,GAAAE,CAAA;UAC3D0H,QAAQ,IAAI,iBAAiBoD,OAAO,CAACE,kBAAkB,IAAI;UAAC;UAAAlL,cAAA,GAAAE,CAAA;UAC5D0H,QAAQ,IAAI,aAAaoD,OAAO,CAACG,cAAc,IAAI;UAAC;UAAAnL,cAAA,GAAAE,CAAA;UACpD0H,QAAQ,IAAI,mBAAmBzD,gBAAgB,CAACmI,WAAW,CAAC,IAAI;UAAC;UAAAtM,cAAA,GAAAE,CAAA;UACjE0H,QAAQ,IAAI,sBAAsByE,iBAAiB,CAACnI,OAAO,CAAC,CAAC,CAAC,IAAI;UAAC;UAAAlE,cAAA,GAAAE,CAAA;UAEnE,IAAI8K,OAAO,CAACI,aAAa,CAACnG,MAAM,GAAG,CAAC,EAAE;YAAA;YAAAjF,cAAA,GAAAsD,CAAA;YACpC,MAAMiJ,eAAe;YAAA;YAAA,CAAAvM,cAAA,GAAAE,CAAA,SAAG8K,OAAO,CAACI,aAAa,CAAC9F,MAAM,CAAC,CAACC,GAAG,EAAEiH,IAAI,KAAK;cAAA;cAAAxM,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAAqF,GAAG,GAAGiH,IAAI;YAAJ,CAAI,EAAE,CAAC,CAAC,GAAGxB,OAAO,CAACI,aAAa,CAACnG,MAAM;YACjH,MAAMwH,eAAe;YAAA;YAAA,CAAAzM,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC5C,GAAG,CAAC,GAAGkJ,OAAO,CAACI,aAAa,CAAC;YAC1D,MAAMsB,eAAe;YAAA;YAAA,CAAA1M,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC3C,GAAG,CAAC,GAAGiJ,OAAO,CAACI,aAAa,CAAC;YAC1D,MAAMuB,WAAW;YAAA;YAAA,CAAA3M,cAAA,GAAAE,CAAA,SAAG8K,OAAO,CAACI,aAAa,CAACnB,IAAI,CAAC,CAACC,CAAC,EAAE5G,CAAC,KAAK;cAAA;cAAAtD,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAAgK,CAAC,GAAG5G,CAAC;YAAD,CAAC,CAAC;YAC/D,MAAMsJ,eAAe;YAAA;YAAA,CAAA5M,cAAA,GAAAE,CAAA,SAAGyM,WAAW,CAACjI,IAAI,CAACC,KAAK,CAACgI,WAAW,CAAC1H,MAAM,GAAG,IAAI,CAAC,CAAC;YAAC;YAAAjF,cAAA,GAAAE,CAAA;YAE3E0H,QAAQ,IAAI,4BAA4B;YAAC;YAAA5H,cAAA,GAAAE,CAAA;YACzC0H,QAAQ,IAAI,cAAc2E,eAAe,CAACrI,OAAO,CAAC,CAAC,CAAC,MAAM;YAAC;YAAAlE,cAAA,GAAAE,CAAA;YAC3D0H,QAAQ,IAAI,UAAU6E,eAAe,MAAM;YAAC;YAAAzM,cAAA,GAAAE,CAAA;YAC5C0H,QAAQ,IAAI,UAAU8E,eAAe,MAAM;YAAC;YAAA1M,cAAA,GAAAE,CAAA;YAC5C0H,QAAQ,IAAI,sBAAsBgF,eAAe,MAAM;UACzD,CAAC;UAAA;UAAA;YAAA5M,cAAA,GAAAsD,CAAA;UAAA;UAAAtD,cAAA,GAAAE,CAAA;UAED;UAAI;UAAA,CAAAF,cAAA,GAAAsD,CAAA,WAAAmE,IAAI,CAACxF,cAAc;UAAA;UAAA,CAAAjC,cAAA,GAAAsD,CAAA,WAAI0H,OAAO,CAACK,MAAM,CAACpG,MAAM,GAAG,CAAC,GAAE;YAAA;YAAAjF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACpD0H,QAAQ,IAAI,6BAA6B;YAAC;YAAA5H,cAAA,GAAAE,CAAA;YAC1C8K,OAAO,CAACK,MAAM,CAAClG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC2F,OAAO,CAAChC,KAAK,IAAG;cAAA;cAAA9I,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cACzC0H,QAAQ,IAAI,KAAKkB,KAAK,IAAI;YAC5B,CAAC,CAAC;UACJ,CAAC;UAAA;UAAA;YAAA9I,cAAA,GAAAsD,CAAA;UAAA;UAED;UAAAtD,cAAA,GAAAE,CAAA;UACAyG,cAAc,CAAC,aAAa,EAAE;YAC5BkG,aAAa,EAAEpF,IAAI,CAAC7F,QAAQ;YAC5BC,QAAQ,EAAEuK,cAAc;YACxBnB,aAAa,EAAED,OAAO,CAACC,aAAa;YACpCqB,WAAW;YACXD,iBAAiB;YACjBS,mBAAmB,EAAE9B,OAAO,CAACI,aAAa,CAACnG,MAAM,GAAG,CAAC;YAAA;YAAA,CAAAjF,cAAA,GAAAsD,CAAA,WACjD0H,OAAO,CAACI,aAAa,CAAC9F,MAAM,CAAC,CAACC,GAAG,EAAEiH,IAAI,KAAK;cAAA;cAAAxM,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAAqF,GAAG,GAAGiH,IAAI;YAAJ,CAAI,EAAE,CAAC,CAAC,GAAGxB,OAAO,CAACI,aAAa,CAACnG,MAAM;YAAA;YAAA,CAAAjF,cAAA,GAAAsD,CAAA,WACzF,CAAC;WACN,EAAE;YACD1B,QAAQ,EAAE6F,IAAI,CAAC7F,QAAQ;YACvBI,WAAW,EAAEyF,IAAI,CAACzF,WAAW,CAAC+K,QAAQ;WACvC,CAAC;QAEJ,CAAC,CAAC,OAAOjE,KAAK,EAAE;UAAA;UAAA9I,cAAA,GAAAE,CAAA;UACd0H,QAAQ,IAAI,6BAA6BkB,KAAK,YAAYC,KAAK;UAAA;UAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;UAAA;UAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,KAAI;QACvG;QAAC;QAAAtD,cAAA,GAAAE,CAAA;QAED,OAAO0H,QAAQ;MACjB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QAAA;QAAA9I,cAAA,GAAAE,CAAA;QACd,IAAI4I,KAAK,YAAYvI,SAAA,CAAAiD,SAAS,EAAE;UAAA;UAAAxD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B,MAAM4I,KAAK;QACb,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,4BAA4BsF,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;QAAA;QAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,GAAE,CAAC;MAC7G;IACF;GACD,CAAC;EAEF;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACAkH,MAAM,CAACC,OAAO,CAAC;IACb/E,IAAI,EAAE,6BAA6B;IACnCgF,WAAW,EAAE,2EAA2E;IACxFC,UAAU,EAAE7E,sBAAsB;IAClC8E,OAAO,EAAE,MAAOC,IAA4C,IAAI;MAAA;MAAAzH,cAAA,GAAAqD,CAAA;MAAArD,cAAA,GAAAE,CAAA;MAC9D,IAAI;QACF,MAAM8C,gBAAgB;QAAA;QAAA,CAAAhD,cAAA,GAAAE,CAAA,SAAGiD,mBAAmB,CAACC,SAAS,CAAC;QACvD,MAAMyC,OAAO;QAAA;QAAA,CAAA7F,cAAA,GAAAE,CAAA,SAAG,MAAM8C,gBAAgB,CAAC0E,UAAU,EAAE;QAEnD,IAAIE,QAAQ;QAAA;QAAA,CAAA5H,cAAA,GAAAE,CAAA,SAAG,+BAA+B;QAAC;QAAAF,cAAA,GAAAE,CAAA;QAC/C0H,QAAQ,IAAI,kBAAkB,IAAIZ,IAAI,EAAE,CAACa,cAAc,EAAE,IAAI;QAAC;QAAA7H,cAAA,GAAAE,CAAA;QAC9D0H,QAAQ,IAAI,mBAAmBH,IAAI,CAAC7G,SAAS,IAAI;QAAC;QAAAZ,cAAA,GAAAE,CAAA;QAClD0H,QAAQ,IAAI,oBAAoBH,IAAI,CAACpG,MAAM,MAAM;QAEjD;QAAA;QAAArB,cAAA,GAAAE,CAAA;QACA0H,QAAQ,IAAI,6BAA6B;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QAC1C0H,QAAQ,IAAI,oBAAoB/B,OAAO,CAACiC,UAAU,CAACG,MAAM,GAAGpC,OAAO,CAACiC,UAAU,CAACC,KAAK,GAAG,IAAI;QAAA;QAAA,CAAA/H,cAAA,GAAAsD,CAAA,WAAG,YAAY;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGuC,OAAO,CAACiC,UAAU,CAACG,MAAM,GAAGpC,OAAO,CAACiC,UAAU,CAACC,KAAK,GAAG,IAAI;QAAA;QAAA,CAAA/H,cAAA,GAAAsD,CAAA,WAAG,qBAAqB;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,aAAa,MAAI;QAAC;QAAAtD,cAAA,GAAAE,CAAA;QACrN0H,QAAQ,IAAI,uBAAuB/B,OAAO,CAACiC,UAAU,CAACC,KAAK,IAAI;QAAC;QAAA/H,cAAA,GAAAE,CAAA;QAChE0H,QAAQ,IAAI,mBAAmBzD,gBAAgB,CAAE0B,OAAO,CAACiC,UAAU,CAACE,UAAU,GAAGnC,OAAO,CAACiC,UAAU,CAACC,KAAK,GAAI,GAAG,CAAC,IAAI;QAAC;QAAA/H,cAAA,GAAAE,CAAA;QACtH0H,QAAQ,IAAI,4BAA4B5D,cAAc,CAAC6B,OAAO,CAACE,WAAW,CAACG,oBAAoB,CAAC,IAAI;QAAC;QAAAlG,cAAA,GAAAE,CAAA;QACrG0H,QAAQ,IAAI,wBAAwB/B,OAAO,CAACE,WAAW,CAACqC,UAAU,CAAClE,OAAO,CAAC,CAAC,CAAC,wBAAwB;QAErG;QAAA;QAAAlE,cAAA,GAAAE,CAAA;QACA;QAAI;QAAA,CAAAF,cAAA,GAAAsD,CAAA,WAAAmE,IAAI,CAACpG,MAAM,KAAK,UAAU;QAAA;QAAA,CAAArB,cAAA,GAAAsD,CAAA,WAAImE,IAAI,CAACpG,MAAM,KAAK,WAAW,GAAE;UAAA;UAAArB,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC7D0H,QAAQ,IAAI,gCAAgC;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC7C0H,QAAQ,IAAI,uBAAuB/B,OAAO,CAACW,SAAS,CAACE,MAAM,IAAI;UAAC;UAAA1G,cAAA,GAAAE,CAAA;UAChE0H,QAAQ,IAAI,yBAAyB/B,OAAO,CAACW,SAAS,CAACC,QAAQ,IAAI;UAAC;UAAAzG,cAAA,GAAAE,CAAA;UACpE0H,QAAQ,IAAI,4BAA4B/B,OAAO,CAACW,SAAS,CAAC2B,UAAU,MAAM;UAAC;UAAAnI,cAAA,GAAAE,CAAA;UAE3E0H,QAAQ,IAAI,gCAAgC;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC7C0H,QAAQ,IAAI,gBAAgBzD,gBAAgB,CAAC0B,OAAO,CAACM,MAAM,CAACG,GAAG,CAACC,UAAU,CAAC,IAAI;UAAC;UAAAvG,cAAA,GAAAE,CAAA;UAChF0H,QAAQ,IAAI,mBAAmBzD,gBAAgB,CAAC0B,OAAO,CAACM,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC,IAAI;UAAC;UAAArG,cAAA,GAAAE,CAAA;UACvF0H,QAAQ,IAAI,oBAAoB5D,cAAc,CAAC6B,OAAO,CAACM,MAAM,CAAC0C,MAAM,GAAG,IAAI,CAAC,MAAM;QACpF,CAAC;QAAA;QAAA;UAAA7I,cAAA,GAAAsD,CAAA;QAAA;QAED;QACA,MAAM0J,gBAAgB;QAAA;QAAA,CAAAhN,cAAA,GAAAE,CAAA,SAAG+C,eAAe,CAACmG,MAAM,CAAC6D,EAAE,IAAG;UAAA;UAAAjN,cAAA,GAAAqD,CAAA;UACnD,MAAM6J,QAAQ;UAAA;UAAA,CAAAlN,cAAA,GAAAE,CAAA,SAAGuH,IAAI,CAAC7G,SAAS,KAAK,IAAI;UAAA;UAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,CAAC;UAAA;UAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGmE,IAAI,CAAC7G,SAAS,KAAK,IAAI;UAAA;UAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,CAAC;UAAA;UAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGmE,IAAI,CAAC7G,SAAS,KAAK,KAAK;UAAA;UAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,EAAE;UAAA;UAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGmE,IAAI,CAAC7G,SAAS,KAAK,IAAI;UAAA;UAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,GAAG;UAAA;UAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,GAAG;UAAC;UAAAtD,cAAA,GAAAE,CAAA;UACjJ,OAAO,IAAI8G,IAAI,CAACiG,EAAE,CAAClG,SAAS,CAAC,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACuD,GAAG,EAAE,GAAG2C,QAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAClF,CAAC,CAAC;QAAC;QAAAlN,cAAA,GAAAE,CAAA;QAEH,IAAI8M,gBAAgB,CAAC/H,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAjF,cAAA,GAAAsD,CAAA;UAC/B,MAAMgG,cAAc;UAAA;UAAA,CAAAtJ,cAAA,GAAAE,CAAA,SAAG8M,gBAAgB,CACpC5D,MAAM,CAAC6D,EAAE,IAAK;YAAA;YAAAjN,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,EAAEG,oBAAoB;UAApB,CAAoB,CAAC,CAChEwD,GAAG,CAACuD,EAAE,IAAK;YAAA;YAAAjN,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,CAACG,oBAAoB;UAApB,CAAoB,CAAC;UAAC;UAAAlG,cAAA,GAAAE,CAAA;UAEhE,IAAIoJ,cAAc,CAACrE,MAAM,GAAG,CAAC,EAAE;YAAA;YAAAjF,cAAA,GAAAsD,CAAA;YAC7B,MAAM6J,KAAK;YAAA;YAAA,CAAAnN,cAAA,GAAAE,CAAA,SAAG6E,cAAc,CAACuE,cAAc,CAAC;YAAC;YAAAtJ,cAAA,GAAAE,CAAA;YAC7C0H,QAAQ,IAAI,8BAA8B;YAAC;YAAA5H,cAAA,GAAAE,CAAA;YAC3C0H,QAAQ,IAAI,2BAA2BuF,KAAK,KAAK,YAAY;YAAA;YAAA,CAAAnN,cAAA,GAAAsD,CAAA,WAAG,eAAe;YAAA;YAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG6J,KAAK,KAAK,YAAY;YAAA;YAAA,CAAAnN,cAAA,GAAAsD,CAAA,WAAG,eAAe;YAAA;YAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,WAAW,MAAI;UAC9I,CAAC;UAAA;UAAA;YAAAtD,cAAA,GAAAsD,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsD,CAAA;QAAA;QAED;QAAAtD,cAAA,GAAAE,CAAA;QACA,IAAIuH,IAAI,CAACjG,sBAAsB,EAAE;UAAA;UAAAxB,cAAA,GAAAsD,CAAA;UAC/B,MAAMwC,eAAe;UAAA;UAAA,CAAA9F,cAAA,GAAAE,CAAA,SAAG0F,uBAAuB,CAACC,OAAO,CAAC;UAAC;UAAA7F,cAAA,GAAAE,CAAA;UACzD,IAAI4F,eAAe,CAACb,MAAM,GAAG,CAAC,EAAE;YAAA;YAAAjF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YAC9B0H,QAAQ,IAAI,6BAA6B;YAAC;YAAA5H,cAAA,GAAAE,CAAA;YAC1C4F,eAAe,CAACgF,OAAO,CAACC,GAAG,IAAG;cAAA;cAAA/K,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAC5B0H,QAAQ,IAAI,KAAKmD,GAAG,IAAI;YAC1B,CAAC,CAAC;UACJ,CAAC;UAAA;UAAA;YAAA/K,cAAA,GAAAsD,CAAA;UAAA;QACH,CAAC;QAAA;QAAA;UAAAtD,cAAA,GAAAsD,CAAA;QAAA;QAED;QAAAtD,cAAA,GAAAE,CAAA;QACAyG,cAAc,CAAC,aAAa,EAAE;UAC5ByG,UAAU,EAAE,oBAAoB;UAChCxM,SAAS,EAAE6G,IAAI,CAAC7G,SAAS;UACzBS,MAAM,EAAEoG,IAAI,CAACpG,MAAM;UACnBgM,eAAe,EAAExH;SAClB,EAAE;UACDyH,YAAY,EAAE7F,IAAI,CAACpG,MAAM;UACzBT,SAAS,EAAE6G,IAAI,CAAC7G;SACjB,CAAC;QAAC;QAAAZ,cAAA,GAAAE,CAAA;QAEH,OAAO0H,QAAQ;MACjB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QAAA;QAAA9I,cAAA,GAAAE,CAAA;QACd,IAAI4I,KAAK,YAAYvI,SAAA,CAAAiD,SAAS,EAAE;UAAA;UAAAxD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B,MAAM4I,KAAK;QACb,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,0CAA0CsF,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;QAAA;QAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,GAAE,CAAC;MAC3H;IACF;GACD,CAAC;EAEF;EAAA;EAAAtD,cAAA,GAAAE,CAAA;EACAkH,MAAM,CAACC,OAAO,CAAC;IACb/E,IAAI,EAAE,gBAAgB;IACtBgF,WAAW,EAAE,oEAAoE;IACjFC,UAAU,EAAEzE,mBAAmB;IAC/B0E,OAAO,EAAE,MAAOC,IAAyC,IAAI;MAAA;MAAAzH,cAAA,GAAAqD,CAAA;MAAArD,cAAA,GAAAE,CAAA;MAC3D,IAAI;QACF,MAAMqN,SAAS;QAAA;QAAA,CAAAvN,cAAA,GAAAE,CAAA,SAAGuH,IAAI,CAAC7G,SAAS,KAAK,KAAK;QAAA;QAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,EAAE;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGmE,IAAI,CAAC7G,SAAS,KAAK,IAAI;QAAA;QAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAGmE,IAAI,CAAC7G,SAAS,KAAK,KAAK;QAAA;QAAA,CAAAZ,cAAA,GAAAsD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,IAAI;QACvH,MAAMkK,UAAU;QAAA;QAAA,CAAAxN,cAAA,GAAAE,CAAA,SAAG,IAAI8G,IAAI,CAACA,IAAI,CAACuD,GAAG,EAAE,GAAGgD,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;QAEpE,MAAME,YAAY;QAAA;QAAA,CAAAzN,cAAA,GAAAE,CAAA,SAAG+C,eAAe,CAACmG,MAAM,CAAC6D,EAAE,IAC5C;UAAA;UAAAjN,cAAA,GAAAqD,CAAA;UAAArD,cAAA,GAAAE,CAAA;UAAA,kCAAAF,cAAA,GAAAsD,CAAA,eAAI0D,IAAI,CAACiG,EAAE,CAAClG,SAAS,CAAC,GAAGyG,UAAU;UAAA;UAAA,CAAAxN,cAAA,GAAAsD,CAAA,WACnC2J,EAAE,CAACrG,IAAI,CAACa,IAAI,CAAClF,MAAM,CAAC,KAAKmL,SAAS;QAAT,CAAS,CACnC;QAED,IAAI9F,QAAQ;QAAA;QAAA,CAAA5H,cAAA,GAAAE,CAAA,SAAG,wBAAwBuH,IAAI,CAAClF,MAAM,QAAQ;QAAC;QAAAvC,cAAA,GAAAE,CAAA;QAC3D0H,QAAQ,IAAI,mBAAmBH,IAAI,CAAC7G,SAAS,IAAI;QAAC;QAAAZ,cAAA,GAAAE,CAAA;QAClD0H,QAAQ,IAAI,oBAAoB6F,YAAY,CAACxI,MAAM,MAAM;QAAC;QAAAjF,cAAA,GAAAE,CAAA;QAE1D,IAAIuN,YAAY,CAACxI,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAjF,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC3B0H,QAAQ,IAAI,sEAAsE;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UACnF,OAAO0H,QAAQ;QACjB,CAAC;QAAA;QAAA;UAAA5H,cAAA,GAAAsD,CAAA;QAAA;QAED;QACA,IAAI0B,MAAM;QAAA;QAAA,CAAAhF,cAAA,GAAAE,CAAA,SAAa,EAAE;QACzB,IAAIyN,IAAI;QAAA;QAAA,CAAA3N,cAAA,GAAAE,CAAA,SAAG,EAAE;QAAC;QAAAF,cAAA,GAAAE,CAAA;QAEd,QAAQuH,IAAI,CAAClF,MAAM;UACjB,KAAK,iBAAiB;YAAA;YAAAvC,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACpB8E,MAAM,GAAGyI,YAAY,CAClBrE,MAAM,CAAC6D,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,EAAEG,oBAAoB;YAApB,CAAoB,CAAC,CAChEwD,GAAG,CAACuD,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,CAACG,oBAAoB;YAApB,CAAoB,CAAC;YAAC;YAAAlG,cAAA,GAAAE,CAAA;YAChEyN,IAAI,GAAG,IAAI;YAAC;YAAA3N,cAAA,GAAAE,CAAA;YACZ;UACF,KAAK,eAAe;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YAClB8E,MAAM,GAAGyI,YAAY,CAClBrE,MAAM,CAAC6D,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACkB,UAAU;YAAV,CAAU,CAAC,CACzC4B,GAAG,CAACuD,EAAE,IAAI;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAE+M,EAAE,CAACrG,IAAY,CAACkB,UAAU,CAACE,UAAU,GAAIiF,EAAE,CAACrG,IAAY,CAACkB,UAAU,CAACC,KAAK,GAAI,GAAG;YAAH,CAAG,CAAC;YAAC;YAAA/H,cAAA,GAAAE,CAAA;YACjGyN,IAAI,GAAG,GAAG;YAAC;YAAA3N,cAAA,GAAAE,CAAA;YACX;UACF,KAAK,gBAAgB;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACnB8E,MAAM,GAAGyI,YAAY,CAClBrE,MAAM,CAAC6D,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACT,MAAM,EAAEG,GAAG,EAAEC,UAAU;YAAV,CAAU,CAAC,CACtDmD,GAAG,CAACuD,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACT,MAAM,CAACG,GAAG,CAACC,UAAU;YAAV,CAAU,CAAC;YAAC;YAAAvG,cAAA,GAAAE,CAAA;YACrDyN,IAAI,GAAG,GAAG;YAAC;YAAA3N,cAAA,GAAAE,CAAA;YACX;UACF,KAAK,YAAY;YAAA;YAAAF,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACf8E,MAAM,GAAGyI,YAAY,CAClBrE,MAAM,CAAC6D,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,EAAEqC,UAAU;YAAV,CAAU,CAAC,CACtDsB,GAAG,CAACuD,EAAE,IAAK;cAAA;cAAAjN,cAAA,GAAAqD,CAAA;cAAArD,cAAA,GAAAE,CAAA;cAAA,OAAA+M,EAAE,CAACrG,IAAY,CAACb,WAAW,CAACqC,UAAU;YAAV,CAAU,CAAC;YAAC;YAAApI,cAAA,GAAAE,CAAA;YACtDyN,IAAI,GAAG,gBAAgB;YAAC;YAAA3N,cAAA,GAAAE,CAAA;YACxB;QACJ;QAAC;QAAAF,cAAA,GAAAE,CAAA;QAED,IAAI8E,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;UAAA;UAAAjF,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UACrB0H,QAAQ,IAAI,iBAAiBH,IAAI,CAAClF,MAAM,6BAA6B;UAAC;UAAAvC,cAAA,GAAAE,CAAA;UACtE,OAAO0H,QAAQ;QACjB,CAAC;QAAA;QAAA;UAAA5H,cAAA,GAAAsD,CAAA;QAAA;QAED;QACA,MAAM6J,KAAK;QAAA;QAAA,CAAAnN,cAAA,GAAAE,CAAA,SAAG6E,cAAc,CAACC,MAAM,CAAC;QACpC,MAAM4I,UAAU;QAAA;QAAA,CAAA5N,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAAC,CAAC,CAAC;QAC5B,MAAM6I,SAAS;QAAA;QAAA,CAAA7N,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAACA,MAAM,CAACC,MAAM,GAAG,CAAC,CAAC;QAC3C,MAAMS,aAAa;QAAA;QAAA,CAAA1F,cAAA,GAAAE,CAAA,SAAI,CAAC2N,SAAS,GAAGD,UAAU,IAAIA,UAAU,GAAI,GAAG;QAEnE;QACA,MAAME,OAAO;QAAA;QAAA,CAAA9N,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;UAAA;UAAAxF,cAAA,GAAAqD,CAAA;UAAArD,cAAA,GAAAE,CAAA;UAAA,OAAAqF,GAAG,GAAGC,GAAG;QAAH,CAAG,EAAE,CAAC,CAAC,GAAGR,MAAM,CAACC,MAAM;QACzE,MAAMnD,GAAG;QAAA;QAAA,CAAA9B,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC5C,GAAG,CAAC,GAAGkD,MAAM,CAAC;QAC/B,MAAMjD,GAAG;QAAA;QAAA,CAAA/B,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAAC3C,GAAG,CAAC,GAAGiD,MAAM,CAAC;QAC/B,MAAM+I,QAAQ;QAAA;QAAA,CAAA/N,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;UAAA;UAAAxF,cAAA,GAAAqD,CAAA;UAAArD,cAAA,GAAAE,CAAA;UAAA,OAAAqF,GAAG,GAAGb,IAAI,CAACI,GAAG,CAACU,GAAG,GAAGsI,OAAO,EAAE,CAAC,CAAC;QAAD,CAAC,EAAE,CAAC,CAAC,GAAG9I,MAAM,CAACC,MAAM;QACjG,MAAM+I,iBAAiB;QAAA;QAAA,CAAAhO,cAAA,GAAAE,CAAA,SAAGwE,IAAI,CAACuJ,IAAI,CAACF,QAAQ,CAAC;QAAC;QAAA/N,cAAA,GAAAE,CAAA;QAE9C0H,QAAQ,IAAI,kCAAkC;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QAC/C0H,QAAQ,IAAI,sBAAsBuF,KAAK,KAAK,YAAY;QAAA;QAAA,CAAAnN,cAAA,GAAAsD,CAAA,WAAG,eAAe;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG6J,KAAK,KAAK,YAAY;QAAA;QAAA,CAAAnN,cAAA,GAAAsD,CAAA,WAAG,eAAe;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,WAAW,MAAI;QAAC;QAAAtD,cAAA,GAAAE,CAAA;QACxI0H,QAAQ,IAAI,qBAAqBlC,aAAa,GAAG,CAAC;QAAA;QAAA,CAAA1F,cAAA,GAAAsD,CAAA,WAAG,GAAG;QAAA;QAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,EAAE,IAAGoC,aAAa,CAACxB,OAAO,CAAC,CAAC,CAAC,KAAK;QAAC;QAAAlE,cAAA,GAAAE,CAAA;QAC9F0H,QAAQ,IAAI,oBAAoBkG,OAAO,CAAC5J,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,IAAI;QAAC;QAAA3N,cAAA,GAAAE,CAAA;QAC9D0H,QAAQ,IAAI,gBAAgB9F,GAAG,CAACoC,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,IAAI;QAAC;QAAA3N,cAAA,GAAAE,CAAA;QACtD0H,QAAQ,IAAI,gBAAgB7F,GAAG,CAACmC,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,IAAI;QAAC;QAAA3N,cAAA,GAAAE,CAAA;QACtD0H,QAAQ,IAAI,yBAAyBoG,iBAAiB,CAAC9J,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,MAAM;QAE9E;QACA,MAAMO,iBAAiB;QAAA;QAAA,CAAAlO,cAAA,GAAAE,CAAA,SAAI8N,iBAAiB,GAAGF,OAAO,GAAI,GAAG;QAAC;QAAA9N,cAAA,GAAAE,CAAA;QAC9D0H,QAAQ,IAAI,iCAAiC;QAAC;QAAA5H,cAAA,GAAAE,CAAA;QAC9C,IAAIgO,iBAAiB,GAAG,EAAE,EAAE;UAAA;UAAAlO,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC1B0H,QAAQ,IAAI,wBAAwBsG,iBAAiB,CAAChK,OAAO,CAAC,CAAC,CAAC,2BAA2B;QAC7F,CAAC,MAAM;UAAA;UAAAlE,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAAA,IAAIgO,iBAAiB,GAAG,EAAE,EAAE;YAAA;YAAAlO,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACjC0H,QAAQ,IAAI,6BAA6BsG,iBAAiB,CAAChK,OAAO,CAAC,CAAC,CAAC,yBAAyB;UAChG,CAAC,MAAM;YAAA;YAAAlE,cAAA,GAAAsD,CAAA;YAAAtD,cAAA,GAAAE,CAAA;YACL0H,QAAQ,IAAI,yBAAyBsG,iBAAiB,CAAChK,OAAO,CAAC,CAAC,CAAC,6BAA6B;UAChG;QAAA;QAEA;QAAA;QAAAlE,cAAA,GAAAE,CAAA;QACA;QAAI;QAAA,CAAAF,cAAA,GAAAsD,CAAA,WAAAmE,IAAI,CAAC1E,kBAAkB;QAAA;QAAA,CAAA/C,cAAA,GAAAsD,CAAA,WAAI0B,MAAM,CAACC,MAAM,IAAI,CAAC,GAAE;UAAA;UAAAjF,cAAA,GAAAsD,CAAA;UACjD;UACA,MAAM6K,CAAC;UAAA;UAAA,CAAAnO,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAACC,MAAM;UACvB,MAAMmJ,CAAC;UAAA;UAAA,CAAApO,cAAA,GAAAE,CAAA,SAAGmO,KAAK,CAACC,IAAI,CAAC;YAAErJ,MAAM,EAAEkJ;UAAC,CAAE,EAAE,CAACI,CAAC,EAAE9J,CAAC,KAAKA;YAAAA;YAAAA,wBAAA;YAAAA,yBAAA;YAAAA,MAAA,CAAAA,CAAC;UAAD,CAAC,CAAC;UAChD,MAAM+J,IAAI;UAAA;UAAA,CAAAxO,cAAA,GAAAE,CAAA,SAAGkO,CAAC,CAAC9I,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;YAAA;YAAAxF,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAAqF,GAAG,GAAGC,GAAG;UAAH,CAAG,EAAE,CAAC,CAAC;UACjD,MAAMiJ,IAAI;UAAA;UAAA,CAAAzO,cAAA,GAAAE,CAAA,SAAG8E,MAAM,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;YAAA;YAAAxF,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAAqF,GAAG,GAAGC,GAAG;UAAH,CAAG,EAAE,CAAC,CAAC;UACtD,MAAMkJ,KAAK;UAAA;UAAA,CAAA1O,cAAA,GAAAE,CAAA,SAAGkO,CAAC,CAAC9I,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,EAAEf,CAAC,KAAK;YAAA;YAAAzE,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAAqF,GAAG,GAAGC,GAAG,GAAGR,MAAM,CAACP,CAAC,CAAC;UAAD,CAAC,EAAE,CAAC,CAAC;UACjE,MAAMkK,KAAK;UAAA;UAAA,CAAA3O,cAAA,GAAAE,CAAA,SAAGkO,CAAC,CAAC9I,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;YAAA;YAAAxF,cAAA,GAAAqD,CAAA;YAAArD,cAAA,GAAAE,CAAA;YAAA,OAAAqF,GAAG,GAAGC,GAAG,GAAGA,GAAG;UAAH,CAAG,EAAE,CAAC,CAAC;UAExD,MAAMoJ,KAAK;UAAA;UAAA,CAAA5O,cAAA,GAAAE,CAAA,SAAG,CAACiO,CAAC,GAAGO,KAAK,GAAGF,IAAI,GAAGC,IAAI,KAAKN,CAAC,GAAGQ,KAAK,GAAGH,IAAI,GAAGA,IAAI,CAAC;UACnE,MAAMK,SAAS;UAAA;UAAA,CAAA7O,cAAA,GAAAE,CAAA,SAAG,CAACuO,IAAI,GAAGG,KAAK,GAAGJ,IAAI,IAAIL,CAAC;UAE3C,MAAMW,SAAS;UAAA;UAAA,CAAA9O,cAAA,GAAAE,CAAA,SAAG0O,KAAK,GAAGT,CAAC,GAAGU,SAAS;UACvC,MAAME,WAAW;UAAA;UAAA,CAAA/O,cAAA,GAAAE,CAAA,SAAG0O,KAAK,IAAIT,CAAC,GAAG,CAAC,CAAC,GAAGU,SAAS,EAAC,CAAC;UAAA;UAAA7O,cAAA,GAAAE,CAAA;UAEjD0H,QAAQ,IAAI,iDAAiD;UAAC;UAAA5H,cAAA,GAAAE,CAAA;UAC9D0H,QAAQ,IAAI,0BAA0BkH,SAAS,CAAC5K,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,IAAI;UAAC;UAAA3N,cAAA,GAAAE,CAAA;UACtE0H,QAAQ,IAAI,sBAAsBmH,WAAW,CAAC7K,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,IAAI;UAAC;UAAA3N,cAAA,GAAAE,CAAA;UACpE0H,QAAQ,IAAI,kBAAkBgH,KAAK,GAAG,CAAC;UAAA;UAAA,CAAA5O,cAAA,GAAAsD,CAAA,WAAG,GAAG;UAAA;UAAA,CAAAtD,cAAA,GAAAsD,CAAA,WAAG,EAAE,IAAGsL,KAAK,CAAC1K,OAAO,CAAC,CAAC,CAAC,GAAGyJ,IAAI,WAAW;UAAC;UAAA3N,cAAA,GAAAE,CAAA;UAExF0H,QAAQ,IAAI,mGAAmG;QACjH,CAAC;QAAA;QAAA;UAAA5H,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QAED,OAAO0H,QAAQ;MACjB,CAAC,CAAC,OAAOkB,KAAK,EAAE;QAAA;QAAA9I,cAAA,GAAAE,CAAA;QACd,IAAI4I,KAAK,YAAYvI,SAAA,CAAAiD,SAAS,EAAE;UAAA;UAAAxD,cAAA,GAAAsD,CAAA;UAAAtD,cAAA,GAAAE,CAAA;UAC9B,MAAM4I,KAAK;QACb,CAAC;QAAA;QAAA;UAAA9I,cAAA,GAAAsD,CAAA;QAAA;QAAAtD,cAAA,GAAAE,CAAA;QACD,MAAM,IAAIK,SAAA,CAAAiD,SAAS,CAAC,6BAA6BsF,KAAK,YAAYC,KAAK;QAAA;QAAA,CAAA/I,cAAA,GAAAsD,CAAA,WAAGwF,KAAK,CAACE,OAAO;QAAA;QAAA,CAAAhJ,cAAA,GAAAsD,CAAA,WAAG,eAAe,GAAE,CAAC;MAC9G;IACF;GACD,CAAC;AACJ","ignoreList":[]}