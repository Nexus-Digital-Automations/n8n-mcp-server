34701fe6e5868306b7d475bd3bab874b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const sseTransport_1 = require("../../../src/transport/sseTransport");
// Mock FastMCP
const mockFastMCP = {
    start: globals_1.jest.fn(() => Promise.resolve()),
    stop: globals_1.jest.fn(() => Promise.resolve()),
    addTool: globals_1.jest.fn().mockReturnThis(),
    addResource: globals_1.jest.fn().mockReturnThis(),
    on: globals_1.jest.fn().mockReturnThis(),
};
// Mock console methods to capture output
const originalConsole = {
    log: console.log,
    error: console.error,
};
const mockConsole = {
    log: globals_1.jest.fn(),
    error: globals_1.jest.fn(),
};
(0, globals_1.describe)('SSE Transport', () => {
    let sseTransportManager;
    let mockConfig;
    // Helper function to create SSE config with defaults
    const createSSEConfig = (overrides = {}) => ({
        type: 'sse',
        sse: {
            port: 8080,
            endpoint: '/sse',
            host: 'localhost',
            cors: { enabled: true, origins: ['*'], credentials: false },
            healthCheck: { enabled: true, endpoint: '/health' },
            ...overrides,
        },
    });
    (0, globals_1.beforeEach)(() => {
        // Setup mock console
        global.console = mockConsole;
        // Reset mocks
        globals_1.jest.clearAllMocks();
        mockFastMCP.start.mockClear();
        mockFastMCP.stop.mockClear();
        // Default SSE configuration for testing
        mockConfig = {
            type: 'sse',
            sse: {
                port: 8080,
                endpoint: '/sse',
                host: 'localhost',
                cors: {
                    enabled: true,
                    origins: ['*'],
                    credentials: false,
                },
                healthCheck: {
                    enabled: true,
                    endpoint: '/health',
                },
            },
        };
        sseTransportManager = new sseTransport_1.SSETransportManager(mockFastMCP, mockConfig);
    });
    (0, globals_1.afterEach)(() => {
        // Restore original console
        global.console = originalConsole;
    });
    (0, globals_1.describe)('SSETransportManager', () => {
        (0, globals_1.describe)('Constructor', () => {
            (0, globals_1.it)('should create instance with server and config', () => {
                (0, globals_1.expect)(sseTransportManager).toBeInstanceOf(sseTransport_1.SSETransportManager);
            });
            (0, globals_1.it)('should accept different FastMCP server instances', () => {
                const anotherMockServer = { ...mockFastMCP };
                const manager = new sseTransport_1.SSETransportManager(anotherMockServer, mockConfig);
                (0, globals_1.expect)(manager).toBeInstanceOf(sseTransport_1.SSETransportManager);
            });
        });
        (0, globals_1.describe)('start()', () => {
            (0, globals_1.it)('should start SSE server with correct configuration', async () => {
                await sseTransportManager.start();
                (0, globals_1.expect)(mockFastMCP.start).toHaveBeenCalledWith({
                    transportType: 'httpStream',
                    httpStream: {
                        port: 8080,
                        endpoint: '/sse',
                    },
                });
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('🚀 Starting n8n MCP Server with SSE transport');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('📡 Server will be available at: http://localhost:8080/sse');
            });
            (0, globals_1.it)('should start server with custom port and endpoint', async () => {
                const customConfig = createSSEConfig({
                    port: 3000,
                    endpoint: '/api/mcp',
                    host: '0.0.0.0',
                    cors: { enabled: false, origins: [], credentials: false },
                    healthCheck: { enabled: false, endpoint: '/health' },
                });
                const customManager = new sseTransport_1.SSETransportManager(mockFastMCP, customConfig);
                await customManager.start();
                (0, globals_1.expect)(mockFastMCP.start).toHaveBeenCalledWith({
                    transportType: 'httpStream',
                    httpStream: {
                        port: 3000,
                        endpoint: '/api/mcp',
                    },
                });
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('📡 Server will be available at: http://0.0.0.0:3000/api/mcp');
            });
            (0, globals_1.it)('should throw error when SSE transport is not configured', async () => {
                const invalidConfig = { type: 'stdio' };
                const invalidManager = new sseTransport_1.SSETransportManager(mockFastMCP, invalidConfig);
                await (0, globals_1.expect)(invalidManager.start()).rejects.toThrow('SSE transport not configured');
            });
            (0, globals_1.it)('should throw error when SSE config is missing', async () => {
                const invalidConfig = { type: 'sse' };
                const invalidManager = new sseTransport_1.SSETransportManager(mockFastMCP, invalidConfig);
                await (0, globals_1.expect)(invalidManager.start()).rejects.toThrow('SSE transport not configured');
            });
            (0, globals_1.it)('should setup health check when enabled', async () => {
                await sseTransportManager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('💚 Health check endpoint: /health');
            });
            (0, globals_1.it)('should not setup health check when disabled', async () => {
                const configWithoutHealthCheck = {
                    type: 'sse',
                    sse: {
                        port: 8080,
                        endpoint: '/sse',
                        host: 'localhost',
                        cors: { enabled: true, origins: ['*'], credentials: false },
                        healthCheck: { enabled: false, endpoint: '/health' },
                    },
                };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, configWithoutHealthCheck);
                await manager.start();
                // Should not log health check endpoint
                (0, globals_1.expect)(mockConsole.log).not.toHaveBeenCalledWith(globals_1.expect.stringContaining('Health check endpoint'));
            });
            (0, globals_1.it)('should log comprehensive server information', async () => {
                await sseTransportManager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('\n📋 Server Configuration:');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Transport: SSE (Server-Sent Events)');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Host: localhost');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Port: 8080');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Endpoint: /sse');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   CORS: Enabled');
            });
            (0, globals_1.it)('should log CORS information when enabled', async () => {
                const corsConfig = {
                    type: 'sse',
                    sse: {
                        port: 8080,
                        endpoint: '/sse',
                        host: 'localhost',
                        cors: {
                            enabled: true,
                            origins: ['https://example.com', 'https://test.com'],
                            credentials: true,
                        },
                        healthCheck: { enabled: true, endpoint: '/health' },
                    },
                };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, corsConfig);
                await manager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   CORS: Enabled');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Allowed Origins: https://example.com, https://test.com');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   Credentials: Allowed');
            });
            (0, globals_1.it)('should not log CORS details when disabled', async () => {
                const noCorsConfig = {
                    type: 'sse',
                    sse: {
                        port: 8080,
                        endpoint: '/sse',
                        host: 'localhost',
                        cors: { enabled: false, origins: [], credentials: false },
                        healthCheck: { enabled: true, endpoint: '/health' },
                    },
                };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, noCorsConfig);
                await manager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   CORS: Disabled');
                (0, globals_1.expect)(mockConsole.log).not.toHaveBeenCalledWith(globals_1.expect.stringContaining('Allowed Origins'));
                (0, globals_1.expect)(mockConsole.log).not.toHaveBeenCalledWith(globals_1.expect.stringContaining('Credentials'));
            });
            (0, globals_1.it)('should log connection instructions', async () => {
                await sseTransportManager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('\n🔌 Connection Instructions:');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   For MCP Inspector:');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   npx @modelcontextprotocol/inspector http://localhost:8080/sse');
            });
            (0, globals_1.it)('should log Claude Desktop configuration instructions', async () => {
                await sseTransportManager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   For Claude Desktop (claude_desktop_config.json):');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   {');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('     "mcpServers": {');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('       "n8n": {');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('         "command": "npx",');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('         "args": ["@illuminaresolutions/n8n-mcp-server"],');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('         "env": {');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('           "N8N_MCP_TRANSPORT": "sse",');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('           "N8N_MCP_SSE_PORT": "8080",');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('           "N8N_MCP_SSE_HOST": "localhost"');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('         }');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('       }');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('     }');
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('   }');
            });
            (0, globals_1.it)('should handle FastMCP server start failure', async () => {
                const error = new Error('Failed to start server');
                mockFastMCP.start.mockRejectedValueOnce(error);
                await (0, globals_1.expect)(sseTransportManager.start()).rejects.toThrow('Failed to start server');
            });
        });
        (0, globals_1.describe)('stop()', () => {
            (0, globals_1.it)('should log stop message', async () => {
                await sseTransportManager.stop();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('🛑 Stopping SSE transport server...');
            });
            (0, globals_1.it)('should be called without errors', async () => {
                await (0, globals_1.expect)(sseTransportManager.stop()).resolves.toBeUndefined();
            });
        });
        (0, globals_1.describe)('setupHealthCheck()', () => {
            (0, globals_1.it)('should handle missing SSE config gracefully', async () => {
                const configWithoutSSE = { type: 'sse' };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, configWithoutSSE);
                // This should not throw - the method handles missing config
                await (0, globals_1.expect)(manager.start()).rejects.toThrow('SSE transport not configured');
            });
            (0, globals_1.it)('should handle SSE config without healthCheck property', async () => {
                const configWithoutHealthCheck = {
                    type: 'sse',
                    sse: {
                        port: 8080,
                        endpoint: '/sse',
                        host: 'localhost',
                        cors: { enabled: true, origins: ['*'], credentials: false },
                    }, // Remove healthCheck property completely
                };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, configWithoutHealthCheck);
                await manager.start();
                // Should not log health check endpoint when healthCheck is undefined
                (0, globals_1.expect)(mockConsole.log).not.toHaveBeenCalledWith(globals_1.expect.stringContaining('Health check endpoint'));
            });
            (0, globals_1.it)('should setup health check with custom endpoint', async () => {
                const customHealthConfig = {
                    type: 'sse',
                    sse: {
                        port: 8080,
                        endpoint: '/sse',
                        host: 'localhost',
                        cors: { enabled: true, origins: ['*'], credentials: false },
                        healthCheck: { enabled: true, endpoint: '/status' },
                    },
                };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, customHealthConfig);
                await manager.start();
                (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith('💚 Health check endpoint: /status');
            });
        });
        (0, globals_1.describe)('logServerInfo()', () => {
            (0, globals_1.it)('should handle missing SSE config gracefully', async () => {
                const configWithoutSSE = { type: 'sse' };
                const manager = new sseTransport_1.SSETransportManager(mockFastMCP, configWithoutSSE);
                // Should not throw when trying to log server info
                await (0, globals_1.expect)(manager.start()).rejects.toThrow('SSE transport not configured');
            });
            (0, globals_1.it)('should log server info with different host configurations', async () => {
                const configs = [
                    { host: 'localhost', expectedHost: 'localhost' },
                    { host: '0.0.0.0', expectedHost: '0.0.0.0' },
                    { host: '127.0.0.1', expectedHost: '127.0.0.1' },
                    { host: 'example.com', expectedHost: 'example.com' },
                ];
                for (const { host, expectedHost } of configs) {
                    const config = {
                        type: 'sse',
                        sse: { ...(mockConfig.sse ?? {}), host },
                    };
                    const manager = new sseTransport_1.SSETransportManager(mockFastMCP, config);
                    mockConsole.log.mockClear();
                    await manager.start();
                    (0, globals_1.expect)(mockConsole.log).toHaveBeenCalledWith(`   Host: ${expectedHost}`);
                }
            });
        });
    });
    (0, globals_1.describe)('createSSETransport', () => {
        (0, globals_1.it)('should create SSETransportManager instance', () => {
            const transport = (0, sseTransport_1.createSSETransport)(mockFastMCP, mockConfig);
            (0, globals_1.expect)(transport).toBeInstanceOf(sseTransport_1.SSETransportManager);
        });
        (0, globals_1.it)('should pass server and config to constructor', () => {
            const customServer = { ...mockFastMCP };
            const customConfig = createSSEConfig({ port: 9000 });
            const transport = (0, sseTransport_1.createSSETransport)(customServer, customConfig);
            (0, globals_1.expect)(transport).toBeInstanceOf(sseTransport_1.SSETransportManager);
        });
    });
    (0, globals_1.describe)('SSEUtils', () => {
        (0, globals_1.describe)('validateConfig()', () => {
            (0, globals_1.it)('should return true for valid SSE configuration', () => {
                const isValid = sseTransport_1.SSEUtils.validateConfig(mockConfig);
                (0, globals_1.expect)(isValid).toBe(true);
            });
            (0, globals_1.it)('should return false for non-SSE configuration', () => {
                const stdioConfig = { type: 'stdio' };
                const isValid = sseTransport_1.SSEUtils.validateConfig(stdioConfig);
                (0, globals_1.expect)(isValid).toBe(false);
            });
            (0, globals_1.it)('should return false when SSE config is missing', () => {
                const invalidConfig = { type: 'sse' };
                const isValid = sseTransport_1.SSEUtils.validateConfig(invalidConfig);
                (0, globals_1.expect)(isValid).toBe(false);
            });
            (0, globals_1.it)('should validate port range', () => {
                // Valid ports
                const validConfig1 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 1024 },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(validConfig1)).toBe(true);
                const validConfig2 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 65535 },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(validConfig2)).toBe(true);
                // Invalid ports
                const invalidConfig1 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 1023 },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(invalidConfig1)).toBe(false);
                (0, globals_1.expect)(mockConsole.error).toHaveBeenCalledWith('❌ Invalid port: 1023. Must be between 1024-65535');
                const invalidConfig2 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 65536 },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(invalidConfig2)).toBe(false);
                (0, globals_1.expect)(mockConsole.error).toHaveBeenCalledWith('❌ Invalid port: 65536. Must be between 1024-65535');
            });
            (0, globals_1.it)('should validate endpoint format', () => {
                // Valid endpoints
                const validConfig1 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), endpoint: '/sse' },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(validConfig1)).toBe(true);
                const validConfig2 = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), endpoint: '/api/mcp' },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(validConfig2)).toBe(true);
                // Invalid endpoints
                const invalidConfig = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), endpoint: 'sse' },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(invalidConfig)).toBe(false);
                (0, globals_1.expect)(mockConsole.error).toHaveBeenCalledWith("❌ Invalid endpoint: sse. Must start with '/'");
            });
            (0, globals_1.it)('should handle edge case endpoints', () => {
                const edgeCases = [
                    { endpoint: '/', valid: true },
                    { endpoint: '/a', valid: true },
                    { endpoint: '/very/long/endpoint/path', valid: true },
                    { endpoint: '', valid: false },
                    { endpoint: 'no-slash', valid: false },
                    { endpoint: 'api/mcp', valid: false },
                ];
                edgeCases.forEach(({ endpoint, valid }) => {
                    const config = {
                        type: 'sse',
                        sse: { ...(mockConfig.sse ?? {}), endpoint },
                    };
                    (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(config)).toBe(valid);
                });
            });
        });
        (0, globals_1.describe)('getConnectionUrl()', () => {
            (0, globals_1.it)('should return correct HTTP URL for standard port', () => {
                const url = sseTransport_1.SSEUtils.getConnectionUrl(mockConfig);
                (0, globals_1.expect)(url).toBe('http://localhost:8080/sse');
            });
            (0, globals_1.it)('should return correct HTTPS URL for port 443', () => {
                const httpsConfig = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 443 },
                };
                const url = sseTransport_1.SSEUtils.getConnectionUrl(httpsConfig);
                (0, globals_1.expect)(url).toBe('https://localhost:443/sse');
            });
            (0, globals_1.it)('should handle different hosts', () => {
                const hosts = [
                    { host: '0.0.0.0', expected: 'http://0.0.0.0:8080/sse' },
                    { host: '127.0.0.1', expected: 'http://127.0.0.1:8080/sse' },
                    { host: 'example.com', expected: 'http://example.com:8080/sse' },
                ];
                hosts.forEach(({ host, expected }) => {
                    const config = {
                        type: 'sse',
                        sse: { ...(mockConfig.sse ?? {}), host },
                    };
                    const url = sseTransport_1.SSEUtils.getConnectionUrl(config);
                    (0, globals_1.expect)(url).toBe(expected);
                });
            });
            (0, globals_1.it)('should handle custom endpoints', () => {
                const config = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), endpoint: '/api/mcp' },
                };
                const url = sseTransport_1.SSEUtils.getConnectionUrl(config);
                (0, globals_1.expect)(url).toBe('http://localhost:8080/api/mcp');
            });
            (0, globals_1.it)('should return null for non-SSE configuration', () => {
                const stdioConfig = { type: 'stdio' };
                const url = sseTransport_1.SSEUtils.getConnectionUrl(stdioConfig);
                (0, globals_1.expect)(url).toBeNull();
            });
            (0, globals_1.it)('should return null when SSE config is missing', () => {
                const invalidConfig = { type: 'sse' };
                const url = sseTransport_1.SSEUtils.getConnectionUrl(invalidConfig);
                (0, globals_1.expect)(url).toBeNull();
            });
        });
        (0, globals_1.describe)('formatConnectionInstructions()', () => {
            (0, globals_1.it)('should return formatted instructions for valid configuration', () => {
                const instructions = sseTransport_1.SSEUtils.formatConnectionInstructions(mockConfig);
                (0, globals_1.expect)(instructions).toEqual({
                    inspector: 'npx @modelcontextprotocol/inspector http://localhost:8080/sse',
                    claudeDesktop: {
                        mcpServers: {
                            n8n: {
                                command: 'npx',
                                args: ['@illuminaresolutions/n8n-mcp-server'],
                                env: {
                                    N8N_MCP_TRANSPORT: 'sse',
                                    N8N_MCP_SSE_PORT: '8080',
                                    N8N_MCP_SSE_HOST: 'localhost',
                                },
                            },
                        },
                    },
                    curl: 'curl -N -H "Accept: text/event-stream" http://localhost:8080/sse',
                });
            });
            (0, globals_1.it)('should handle custom configuration', () => {
                const customConfig = {
                    type: 'sse',
                    sse: {
                        port: 3000,
                        endpoint: '/api/mcp',
                        host: '0.0.0.0',
                        cors: { enabled: true, origins: ['*'], credentials: false },
                        healthCheck: { enabled: true, endpoint: '/health' },
                    },
                };
                const instructions = sseTransport_1.SSEUtils.formatConnectionInstructions(customConfig);
                (0, globals_1.expect)(instructions?.inspector).toBe('npx @modelcontextprotocol/inspector http://0.0.0.0:3000/api/mcp');
                (0, globals_1.expect)((instructions?.claudeDesktop).mcpServers.n8n.env.N8N_MCP_SSE_PORT).toBe('3000');
                (0, globals_1.expect)((instructions?.claudeDesktop).mcpServers.n8n.env.N8N_MCP_SSE_HOST).toBe('0.0.0.0');
                (0, globals_1.expect)(instructions?.curl).toBe('curl -N -H "Accept: text/event-stream" http://0.0.0.0:3000/api/mcp');
            });
            (0, globals_1.it)('should return null for invalid configuration', () => {
                const stdioConfig = { type: 'stdio' };
                const instructions = sseTransport_1.SSEUtils.formatConnectionInstructions(stdioConfig);
                (0, globals_1.expect)(instructions).toBeNull();
            });
            (0, globals_1.it)('should return null when SSE config is missing', () => {
                const invalidConfig = { type: 'sse' };
                const instructions = sseTransport_1.SSEUtils.formatConnectionInstructions(invalidConfig);
                (0, globals_1.expect)(instructions).toBeNull();
            });
            (0, globals_1.it)('should handle port 443 with HTTPS', () => {
                const httpsConfig = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port: 443, host: 'secure.example.com' },
                };
                const instructions = sseTransport_1.SSEUtils.formatConnectionInstructions(httpsConfig);
                (0, globals_1.expect)(instructions?.inspector).toBe('npx @modelcontextprotocol/inspector https://secure.example.com:443/sse');
                (0, globals_1.expect)(instructions?.curl).toBe('curl -N -H "Accept: text/event-stream" https://secure.example.com:443/sse');
            });
        });
    });
    (0, globals_1.describe)('DEFAULT_SSE_CONFIG', () => {
        (0, globals_1.it)('should have correct default values', () => {
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG).toEqual({
                port: 8080,
                endpoint: '/sse',
                host: 'localhost',
                cors: {
                    enabled: true,
                    origins: ['*'],
                    credentials: false,
                },
                healthCheck: {
                    enabled: true,
                    endpoint: '/health',
                },
            });
        });
        (0, globals_1.it)('should be a readonly object', () => {
            // TypeScript treats it as readonly due to 'as const', but JavaScript doesn't enforce it
            // This test verifies the object exists and has the expected structure
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG).toBeDefined();
            (0, globals_1.expect)(typeof sseTransport_1.DEFAULT_SSE_CONFIG).toBe('object');
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG.port).toBe(8080);
        });
        (0, globals_1.it)('should have all required properties', () => {
            const requiredProperties = ['port', 'endpoint', 'host', 'cors', 'healthCheck'];
            requiredProperties.forEach(prop => {
                (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG).toHaveProperty(prop);
            });
        });
        (0, globals_1.it)('should have valid port within acceptable range', () => {
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG.port).toBeGreaterThanOrEqual(1024);
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG.port).toBeLessThanOrEqual(65535);
        });
        (0, globals_1.it)('should have valid endpoint format', () => {
            (0, globals_1.expect)(sseTransport_1.DEFAULT_SSE_CONFIG.endpoint).toMatch(/^\/\w+/);
        });
    });
    (0, globals_1.describe)('Error Handling and Edge Cases', () => {
        (0, globals_1.it)('should handle undefined SSE config gracefully', () => {
            const configWithUndefinedSSE = { type: 'sse', sse: undefined };
            (0, globals_1.expect)(() => new sseTransport_1.SSETransportManager(mockFastMCP, configWithUndefinedSSE)).not.toThrow();
        });
        (0, globals_1.it)('should handle partial SSE configurations', () => {
            const partialConfig = {
                type: 'sse',
                sse: {
                    port: 8080,
                    endpoint: '/sse',
                    host: 'localhost',
                    cors: { enabled: true, origins: ['*'], credentials: false },
                    healthCheck: { enabled: true, endpoint: '/health' },
                },
            };
            (0, globals_1.expect)(() => new sseTransport_1.SSETransportManager(mockFastMCP, partialConfig)).not.toThrow();
        });
        (0, globals_1.it)('should handle FastMCP server errors during startup', async () => {
            const errorMessage = 'Port already in use';
            mockFastMCP.start.mockRejectedValueOnce(new Error(errorMessage));
            await (0, globals_1.expect)(sseTransportManager.start()).rejects.toThrow(errorMessage);
        });
        (0, globals_1.it)('should handle missing environment in logs', async () => {
            // Test that logging doesn't throw even with minimal config
            await sseTransportManager.start();
            (0, globals_1.expect)(mockConsole.log).toHaveBeenCalled();
        });
        (0, globals_1.it)('should validate extreme port values', () => {
            const extremeCases = [
                { port: 0, valid: false },
                { port: 1, valid: false },
                { port: 1023, valid: false },
                { port: 1024, valid: true },
                { port: 65535, valid: true },
                { port: 65536, valid: false },
                { port: 99999, valid: false },
            ];
            extremeCases.forEach(({ port, valid }) => {
                const config = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), port },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(config)).toBe(valid);
            });
        });
        (0, globals_1.it)('should handle various endpoint formats', () => {
            const endpointCases = [
                { endpoint: '/', valid: true },
                { endpoint: '/sse', valid: true },
                { endpoint: '/api/v1/mcp', valid: true },
                { endpoint: '/very-long-endpoint-name', valid: true },
                { endpoint: '', valid: false },
                { endpoint: 'no-leading-slash', valid: false },
                { endpoint: ' /with-space', valid: false },
            ];
            endpointCases.forEach(({ endpoint, valid }) => {
                const config = {
                    type: 'sse',
                    sse: { ...(mockConfig.sse ?? {}), endpoint },
                };
                (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(config)).toBe(valid);
            });
        });
    });
    (0, globals_1.describe)('Integration with TransportConfig', () => {
        (0, globals_1.it)('should work with detectTransportConfig result', () => {
            // This would typically come from detectTransportConfig()
            const detectedConfig = {
                type: 'sse',
                sse: {
                    port: 8080,
                    endpoint: '/sse',
                    host: 'localhost',
                    cors: { enabled: true, origins: ['*'], credentials: false },
                    healthCheck: { enabled: true, endpoint: '/health' },
                },
            };
            (0, globals_1.expect)(() => new sseTransport_1.SSETransportManager(mockFastMCP, detectedConfig)).not.toThrow();
            (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(detectedConfig)).toBe(true);
        });
        (0, globals_1.it)('should handle configuration from environment parsing', () => {
            // This would typically come from parseConfigFromEnv()
            const envConfig = {
                type: 'sse',
                sse: {
                    port: 3000,
                    endpoint: '/mcp',
                    host: '0.0.0.0',
                    cors: {
                        enabled: true,
                        origins: ['https://example.com'],
                        credentials: true,
                    },
                    healthCheck: {
                        enabled: false,
                        endpoint: '/status',
                    },
                },
            };
            (0, globals_1.expect)(() => new sseTransport_1.SSETransportManager(mockFastMCP, envConfig)).not.toThrow();
            (0, globals_1.expect)(sseTransport_1.SSEUtils.validateConfig(envConfig)).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,