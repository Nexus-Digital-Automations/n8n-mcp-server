b140bc272a8f920912221e7202aa11b6
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('../../../src/client/n8nClient');
const executionResources_1 = require("../../../src/resources/executionResources");
// Mock console methods to avoid test output pollution
const mockConsoleLog = globals_1.jest.fn();
globals_1.jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);
(0, globals_1.describe)('ExecutionResourceManager', () => {
    let executionManager;
    let mockServer;
    let mockClient;
    let getClientFn;
    // Mock execution data
    const mockExecution = {
        id: 'exec-123',
        workflowId: 'workflow-456',
        finished: true,
        startedAt: '2023-01-01T10:00:00Z',
        stoppedAt: '2023-01-01T10:05:00Z',
        mode: 'manual',
        status: 'success',
        retryOf: undefined,
        retrySuccessId: undefined,
        data: {
            resultData: {
                runData: {
                    'HTTP Request': [
                        {
                            data: {
                                main: [
                                    {
                                        json: { status: 'success' },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
        },
        workflowData: {
            id: 'workflow-456',
            name: 'Test Workflow',
            active: true,
            nodes: [],
            connections: {},
        },
    };
    const mockFailedExecution = {
        id: 'exec-456',
        workflowId: 'workflow-789',
        finished: false,
        startedAt: '2023-01-01T11:00:00Z',
        stoppedAt: '2023-01-01T11:02:00Z',
        mode: 'trigger',
        status: 'error',
        retryOf: undefined,
        retrySuccessId: undefined,
        data: {
            resultData: {
                error: {
                    message: 'Test error',
                    stack: 'Error stack trace',
                },
            },
        },
        workflowData: {
            id: 'workflow-789',
            name: 'Failed Workflow',
            active: false,
            nodes: [],
            connections: {},
        },
    };
    (0, globals_1.beforeEach)(() => {
        // Create mock instances
        mockServer = {
            addResource: globals_1.jest.fn(),
            addResourceTemplate: globals_1.jest.fn(),
        };
        mockClient = {
            getExecution: globals_1.jest.fn(),
            getExecutions: globals_1.jest.fn(),
        };
        getClientFn = globals_1.jest.fn().mockReturnValue(mockClient);
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        mockConsoleLog.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Constructor and Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                baseUri: 'custom://executions',
                maxExecutions: 10,
                includeData: true,
                includeFailures: false,
                cacheDuration: 5000,
                maxDataSize: 512 * 1024,
            };
            executionManager = new executionResources_1.ExecutionResourceManager(config);
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should merge custom config with defaults', () => {
            const config = {
                maxExecutions: 25,
                includeData: true,
            };
            executionManager = new executionResources_1.ExecutionResourceManager(config);
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
    });
    (0, globals_1.describe)('Resource Registration', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
        });
        (0, globals_1.it)('should register all execution resources', () => {
            executionManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/{id}',
                name: 'n8n Execution',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/{id}/logs',
                name: 'n8n Execution Logs',
                mimeType: 'text/plain',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/recent',
                name: 'n8n Recent Executions',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/failures',
                name: 'n8n Failed Executions',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/stats',
                name: 'n8n Execution Statistics',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('âš¡ Execution resources registered');
        });
        (0, globals_1.it)('should register execution template with correct arguments', () => {
            executionManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n execution',
                required: true,
            });
        });
        (0, globals_1.it)('should register logs template with correct arguments', () => {
            executionManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n execution',
                required: true,
            });
        });
        (0, globals_1.it)('should register workflow executions template', () => {
            executionManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/workflow/{workflowId}',
                name: 'n8n Workflow Executions',
                mimeType: 'application/json',
            }));
        });
    });
    (0, globals_1.describe)('Individual Execution Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution resource successfully', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('exec-123');
            (0, globals_1.expect)(data.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.status).toBe('success');
            (0, globals_1.expect)(data.duration).toBe(300000); // 5 minutes
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-execution');
        });
        (0, globals_1.it)('should handle execution with error status', async () => {
            mockClient.getExecution.mockResolvedValue(mockFailedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-456' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('stopped');
            (0, globals_1.expect)(data.metadata.error).toEqual({
                message: 'Test error',
                stack: 'Error stack trace',
            });
        });
        (0, globals_1.it)('should handle running execution', async () => {
            const runningExecution = {
                ...mockExecution,
                finished: false,
                stoppedAt: undefined,
                status: 'running',
            };
            mockClient.getExecution.mockResolvedValue(runningExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('running');
            (0, globals_1.expect)(data.duration).toBeNull();
        });
        (0, globals_1.it)('should throw error when client not initialized', async () => {
            getClientFn.mockReturnValue(null);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getExecution.mockRejectedValue(new Error('API Error'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution exec-123: API Error');
        });
        (0, globals_1.it)('should include data when configured', async () => {
            // Clear previous mocks first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data).toBeDefined();
        });
        (0, globals_1.it)('should exclude data by default', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data).toBeUndefined();
        });
    });
    (0, globals_1.describe)('Execution Logs Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution logs successfully', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            (0, globals_1.expect)(result.text).toContain('Execution ID: exec-123');
            (0, globals_1.expect)(result.text).toContain('Workflow ID: workflow-456');
            (0, globals_1.expect)(result.text).toContain('Status: Finished');
            (0, globals_1.expect)(result.text).toContain('NODE EXECUTION DATA:');
            (0, globals_1.expect)(result.text).toContain('Node: HTTP Request');
        });
        (0, globals_1.it)('should include error information in logs', async () => {
            mockClient.getExecution.mockResolvedValue(mockFailedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-456' });
            (0, globals_1.expect)(result.text).toContain('ERROR:');
            (0, globals_1.expect)(result.text).toContain('Test error');
        });
        (0, globals_1.it)('should handle logs API errors', async () => {
            mockClient.getExecution.mockRejectedValue(new Error('Logs API Error'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution logs exec-123: Logs API Error');
        });
    });
    (0, globals_1.describe)('Recent Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load recent executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(2);
            (0, globals_1.expect)(data.executions[0].id).toBe('exec-123');
            (0, globals_1.expect)(data.executions[0].status).toBe('success');
            (0, globals_1.expect)(data.executions[1].id).toBe('exec-456');
            (0, globals_1.expect)(data.executions[1].status).toBe('stopped');
            (0, globals_1.expect)(data.metadata.total).toBe(2);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-recent-executions');
        });
        (0, globals_1.it)('should handle empty executions list', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle recent executions API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Recent API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load recent executions: Recent API Error');
        });
    });
    (0, globals_1.describe)('Failed Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load failed executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.failures).toHaveLength(1); // Only failed execution
            (0, globals_1.expect)(data.failures[0].id).toBe('exec-456');
            (0, globals_1.expect)(data.failures[0].error).toBe('Test error');
            (0, globals_1.expect)(data.failures[0].errorDetails).toEqual({
                message: 'Test error',
                stack: 'Error stack trace',
            });
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-failed-executions');
        });
        (0, globals_1.it)('should handle no failed executions', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution], // Only successful execution
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.failures).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle failures API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Failures API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load failed executions: Failures API Error');
        });
    });
    (0, globals_1.describe)('Execution Statistics Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution statistics successfully', async () => {
            const runningExecution = {
                ...mockExecution,
                id: 'exec-789',
                finished: false,
                stoppedAt: undefined,
                status: 'running',
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution, runningExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalExecutions).toBe(3);
            (0, globals_1.expect)(data.successfulExecutions).toBe(1);
            (0, globals_1.expect)(data.failedExecutions).toBe(1);
            (0, globals_1.expect)(data.runningExecutions).toBe(1);
            (0, globals_1.expect)(data.averageDuration).toBeGreaterThan(0);
            (0, globals_1.expect)(data.executionsByStatus).toBeDefined();
            (0, globals_1.expect)(data.executionsByStatus.success).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus.error).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus.running).toBe(1);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-execution-stats');
        });
        (0, globals_1.it)('should handle zero average duration', async () => {
            const executionWithoutTiming = {
                ...mockExecution,
                startedAt: '2023-01-01T10:00:00Z',
                stoppedAt: undefined,
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [executionWithoutTiming],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.averageDuration).toBe(0);
        });
        (0, globals_1.it)('should handle stats API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Stats API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load execution statistics: Stats API Error');
        });
    });
    (0, globals_1.describe)('Workflow Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-456' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.executions).toHaveLength(1); // Only executions for this workflow
            (0, globals_1.expect)(data.executions[0].id).toBe('exec-123');
            (0, globals_1.expect)(data.metadata.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-executions');
        });
        (0, globals_1.it)('should handle no executions for workflow', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockFailedExecution], // Different workflow
            });
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-999' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should validate workflow executions template arguments', () => {
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'workflowId',
                description: 'The ID of the workflow',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('Data Sanitization', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should sanitize sensitive data', async () => {
            const executionWithSensitiveData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            'HTTP Request': [
                                {
                                    data: {
                                        main: [
                                            {
                                                json: {
                                                    password: 'secret123',
                                                    apiKey: 'key456',
                                                    token: 'token789',
                                                    secretKey: 'secret',
                                                    normalData: 'safe',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithSensitiveData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            const sanitizedData = data.data;
            const jsonData = sanitizedData.resultData.runData['HTTP Request'][0].data.main[0].json;
            (0, globals_1.expect)(jsonData.password).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.apiKey).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.token).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.secretKey).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.normalData).toBe('safe');
        });
        (0, globals_1.it)('should truncate large data', async () => {
            // Clear all previous mock calls first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({
                includeData: true,
                maxDataSize: 100, // Very small limit
            });
            executionManager.register(mockServer, getClientFn);
            const executionWithLargeData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            'HTTP Request': [
                                {
                                    data: {
                                        main: Array(1000).fill({ json: { largeData: 'x'.repeat(1000) } }),
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithLargeData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data._truncated).toBe(true);
            (0, globals_1.expect)(data.data.summary).toContain('truncated due to size limits');
        });
    });
    (0, globals_1.describe)('Cache Management', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager({ cacheDuration: 1000 });
        });
        (0, globals_1.it)('should cache execution data', async () => {
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should clear cache', () => {
            executionManager.clearCache();
            // Should not throw
        });
        (0, globals_1.it)('should get cache statistics', () => {
            const stats = executionManager.getCacheStats();
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(typeof stats.size).toBe('number');
            (0, globals_1.expect)(Array.isArray(stats.keys)).toBe(true);
        });
        (0, globals_1.it)('should not cache when duration is 0', () => {
            executionManager = new executionResources_1.ExecutionResourceManager({ cacheDuration: 0 });
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            return template
                .load({ id: 'exec-123' })
                .then(() => {
                return template.load({ id: 'exec-123' });
            })
                .then(() => {
                (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(2);
            });
        });
    });
    (0, globals_1.describe)('Factory Function', () => {
        (0, globals_1.it)('should create execution resource manager with factory function', () => {
            const manager = (0, executionResources_1.createExecutionResources)();
            (0, globals_1.expect)(manager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should create execution resource manager with config via factory', () => {
            const config = { maxExecutions: 25, includeData: true };
            const manager = (0, executionResources_1.createExecutionResources)(config);
            (0, globals_1.expect)(manager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle null execution data', async () => {
            const executionWithNullData = {
                ...mockExecution,
                data: undefined,
            };
            mockClient.getExecution.mockResolvedValue(executionWithNullData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.error).toBeUndefined();
        });
        (0, globals_1.it)('should handle malformed execution data', async () => {
            const malformedExecution = {
                id: 'exec-123',
                finished: false,
                mode: 'manual',
                startedAt: '2023-01-01T10:00:00Z',
                workflowId: 'workflow-456',
                status: 'running',
            };
            mockClient.getExecution.mockResolvedValue(malformedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('exec-123');
            (0, globals_1.expect)(data.status).toBe('running'); // Default when no finished/stoppedAt
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            mockClient.getExecution.mockRejectedValue('String error');
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution exec-123: String error');
        });
        (0, globals_1.it)('should handle empty execution lists gracefully', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalExecutions).toBe(0);
            (0, globals_1.expect)(data.averageDuration).toBe(0);
        });
        (0, globals_1.it)('should handle missing workflow data in executions', async () => {
            const executionWithoutWorkflowData = {
                ...mockExecution,
                workflowData: undefined,
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [executionWithoutWorkflowData],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions[0].workflowName).toBeUndefined();
        });
        (0, globals_1.it)('should handle client not initialized for logs resource', async () => {
            getClientFn.mockReturnValue(null);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle client not initialized for recent executions', async () => {
            getClientFn.mockReturnValue(null);
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle client not initialized for failed executions', async () => {
            getClientFn.mockReturnValue(null);
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle client not initialized for execution stats', async () => {
            getClientFn.mockReturnValue(null);
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle client not initialized for workflow executions', async () => {
            getClientFn.mockReturnValue(null);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ workflowId: 'workflow-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle workflow executions API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Workflow API Error'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ workflowId: 'workflow-123' })).rejects.toThrow('Failed to load workflow executions workflow-123: Workflow API Error');
        });
        (0, globals_1.it)('should handle primitive data types in sanitization', async () => {
            // Clear previous mocks first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
            const executionWithPrimitiveData = {
                ...mockExecution,
                data: { primitiveString: 'primitive string data' },
            };
            mockClient.getExecution.mockResolvedValue(executionWithPrimitiveData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data.primitiveString).toBe('primitive string data');
        });
        (0, globals_1.it)('should handle array data in sanitization', async () => {
            // Clear previous mocks first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
            const executionWithArrayData = {
                ...mockExecution,
                data: {
                    resultData: {
                        arrayData: [
                            { password: 'secret123', normalData: 'safe' },
                            { token: 'token456', publicInfo: 'visible' },
                        ],
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithArrayData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data.resultData.arrayData[0].password).toBe('[REDACTED]');
            (0, globals_1.expect)(data.data.resultData.arrayData[0].normalData).toBe('safe');
            (0, globals_1.expect)(data.data.resultData.arrayData[1].token).toBe('[REDACTED]');
            (0, globals_1.expect)(data.data.resultData.arrayData[1].publicInfo).toBe('visible');
        });
        (0, globals_1.it)('should handle executions with only stoppedAt status in status calculation', async () => {
            const stoppedExecution = {
                ...mockExecution,
                finished: false,
                stoppedAt: '2023-01-01T10:05:00Z',
                data: {
                    resultData: {
                    // No error, just stopped
                    },
                },
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [stoppedExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executionsByStatus.stopped).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus.success).toBe(0);
            (0, globals_1.expect)(data.executionsByStatus.error).toBe(0);
            (0, globals_1.expect)(data.executionsByStatus.running).toBe(0);
        });
    });
    (0, globals_1.describe)('Duplicate Resource Template Coverage', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle client not initialized for executionId template', async () => {
            getClientFn.mockReturnValue(null);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{executionId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ executionId: 'exec-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should load execution by executionId template successfully', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{executionId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ executionId: 'exec-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('exec-123');
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-execution');
        });
    });
    (0, globals_1.describe)('Cache Expiration Edge Cases', () => {
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.useFakeTimers();
            executionManager = new executionResources_1.ExecutionResourceManager({ cacheDuration: 50 }); // Very short cache
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.afterEach)(() => {
            globals_1.jest.useRealTimers();
        });
        (0, globals_1.it)('should handle cache expiration for logs', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(60);
            // Second call should fetch again
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should handle cache expiration for recent executions', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            // First call
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(60);
            // Second call should fetch again
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should handle cache expiration for failed executions', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [mockFailedExecution] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            // First call
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(60);
            // Second call should fetch again
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should handle cache expiration for execution stats', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            // First call
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(60);
            // Second call should fetch again
            await resource.load();
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(2);
        });
        (0, globals_1.it)('should handle cache expiration for workflow executions', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [mockExecution] });
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ workflowId: 'workflow-456' });
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(1);
            // Fast-forward time to expire cache
            globals_1.jest.advanceTimersByTime(60);
            // Second call should fetch again
            await template.load({ workflowId: 'workflow-456' });
            (0, globals_1.expect)(mockClient.getExecutions).toHaveBeenCalledTimes(2);
        });
    });
    (0, globals_1.describe)('Branch Coverage Edge Cases', () => {
        (0, globals_1.beforeEach)(() => {
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle executions with conflicting status indicators', async () => {
            const conflictingExecution = {
                ...mockExecution,
                finished: false,
                stoppedAt: undefined,
                data: {
                    resultData: {
                        error: {
                            message: 'Test error',
                            stack: 'Error stack trace',
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(conflictingExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            // Should handle conflicting status gracefully
            (0, globals_1.expect)(data.status).toBe('running'); // Not finished, no stoppedAt = running
            (0, globals_1.expect)(data.metadata.error).toEqual({
                message: 'Test error',
                stack: 'Error stack trace',
            });
        });
        (0, globals_1.it)('should handle non-serializable data types in sanitization', async () => {
            // Clear all mocks for isolated test
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
            const executionWithComplexData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            'HTTP Request': [
                                {
                                    data: {
                                        main: [
                                            {
                                                json: {
                                                    password: 'secret123',
                                                    undefined: undefined,
                                                    null: null,
                                                    nested: {
                                                        password: 'nested-secret',
                                                        apiKey: 'api-123',
                                                        token: 'token-456',
                                                        normalData: 'safe-data',
                                                    },
                                                    safeData: 'this should remain',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithComplexData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            // Should sanitize sensitive data and handle complex types
            (0, globals_1.expect)(data.data).toBeDefined();
            const resultText = JSON.stringify(data);
            (0, globals_1.expect)(resultText).not.toContain('secret123');
            (0, globals_1.expect)(resultText).not.toContain('api-123');
            (0, globals_1.expect)(resultText).not.toContain('token-456');
            (0, globals_1.expect)(resultText).toContain('safe-data');
            (0, globals_1.expect)(resultText).toContain('this should remain');
        });
        (0, globals_1.it)('should handle circular references in execution data logs', async () => {
            // Use simpler data that won't cause BigInt serialization issues
            const executionWithComplexData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            Node1: [
                                {
                                    data: {
                                        main: [
                                            {
                                                json: {
                                                    message: 'test message',
                                                    nested: {
                                                        level1: {
                                                            level2: 'deep nested data',
                                                        },
                                                    },
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                            Node2: [
                                {
                                    data: {
                                        main: [
                                            {
                                                json: {
                                                    another: 'node data',
                                                    result: 'success',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithComplexData);
            const logsTemplateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!logsTemplateCall)
                throw new Error('Logs template call not found');
            const logsTemplate = logsTemplateCall[0];
            const result = await logsTemplate.load({ id: 'exec-123' });
            // Should handle complex data without crashing - logs are text format
            (0, globals_1.expect)(result.text).toBeDefined();
            (0, globals_1.expect)(result.text).toContain('Execution ID: exec-123');
            (0, globals_1.expect)(result.text).toContain('Node: Node1');
            (0, globals_1.expect)(result.text).toContain('Node: Node2');
        });
        (0, globals_1.it)('should handle executions with missing or malformed data properties', async () => {
            const malformedExecution = {
                ...mockExecution,
                id: 'execution-malformed',
                workflowId: 'workflow-123',
                finished: false,
                mode: 'unknown',
                startedAt: '2023-01-01T10:00:00Z',
                stoppedAt: undefined, // No stop time = no duration calculation
                status: 'unknown',
                data: undefined,
            };
            mockClient.getExecutions.mockResolvedValue({ data: [malformedExecution] });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should handle missing properties gracefully
            (0, globals_1.expect)(data.totalExecutions).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus).toBeDefined();
            (0, globals_1.expect)(data.averageDuration).toBe(0); // No timing data available
        });
        (0, globals_1.it)('should handle execution status determination with edge cases', async () => {
            const edgeCaseExecutions = [
                {
                    ...mockExecution,
                    id: 'exec-1',
                    finished: true,
                    stoppedAt: '2023-01-01T12:00:00Z',
                    data: { resultData: { error: null } },
                },
                {
                    ...mockExecution,
                    id: 'exec-2',
                    finished: false,
                    stoppedAt: '2023-01-01T12:00:00Z', // Stopped but not finished
                    data: undefined,
                },
                {
                    ...mockExecution,
                    id: 'exec-3',
                    finished: true,
                    stoppedAt: undefined, // Finished but no stop time
                    data: { resultData: { lastNodeExecuted: 'FinalNode' } },
                },
            ];
            mockClient.getExecutions.mockResolvedValue({ data: edgeCaseExecutions });
            const statsResourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!statsResourceCall)
                throw new Error('Stats resource call not found');
            const statsResource = statsResourceCall[0];
            const result = await statsResource.load();
            const data = JSON.parse(result.text);
            // Should handle various status combinations
            (0, globals_1.expect)(data.totalExecutions).toBe(3);
            (0, globals_1.expect)(data.executionsByStatus).toBeDefined();
            (0, globals_1.expect)(typeof data.averageDuration).toBe('number');
        });
        (0, globals_1.it)('should handle data truncation for very large execution data', async () => {
            // Clear mocks for isolated test
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({
                includeData: true,
                maxDataSize: 1000, // Small limit to trigger truncation
            });
            executionManager.register(mockServer, getClientFn);
            const largeDataExecution = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            LargeDataNode: [
                                {
                                    data: {
                                        main: [
                                            [
                                                {
                                                    json: {
                                                        largeField: 'x'.repeat(10000), // Very large string
                                                        normalField: 'normal value',
                                                    },
                                                },
                                            ],
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(largeDataExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            // Should handle large data appropriately
            (0, globals_1.expect)(data.data).toBeDefined();
            // The result should be serializable as JSON (no circular refs or functions)
            (0, globals_1.expect)(() => JSON.stringify(data)).not.toThrow();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL2plcmVteXBhcmtlci9EZXNrdG9wL0NsYXVkZSBDb2RpbmcgUHJvamVjdHMvbjhuLW1jcC1zZXJ2ZXIvdGVzdHMvdW5pdC9yZXNvdXJjZXMvZXhlY3V0aW9uUmVzb3VyY2VzLnRlc3QudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBa0Y7QUFRbEYsb0JBQW9CO0FBQ3BCLGNBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckIsY0FBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0FBUjNDLGtGQUdtRDtBQU9uRCxzREFBc0Q7QUFDdEQsTUFBTSxjQUFjLEdBQUcsY0FBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2pDLGNBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBRTlELElBQUEsa0JBQVEsRUFBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7SUFDeEMsSUFBSSxnQkFBMEMsQ0FBQztJQUMvQyxJQUFJLFVBQWdDLENBQUM7SUFDckMsSUFBSSxVQUFrQyxDQUFDO0lBQ3ZDLElBQUksV0FBbUMsQ0FBQztJQUV4QyxzQkFBc0I7SUFDdEIsTUFBTSxhQUFhLEdBQUc7UUFDcEIsRUFBRSxFQUFFLFVBQVU7UUFDZCxVQUFVLEVBQUUsY0FBYztRQUMxQixRQUFRLEVBQUUsSUFBSTtRQUNkLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsU0FBUyxFQUFFLHNCQUFzQjtRQUNqQyxJQUFJLEVBQUUsUUFBUTtRQUNkLE1BQU0sRUFBRSxTQUFrQjtRQUMxQixPQUFPLEVBQUUsU0FBUztRQUNsQixjQUFjLEVBQUUsU0FBUztRQUN6QixJQUFJLEVBQUU7WUFDSixVQUFVLEVBQUU7Z0JBQ1YsT0FBTyxFQUFFO29CQUNQLGNBQWMsRUFBRTt3QkFDZDs0QkFDRSxJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFO29DQUNKO3dDQUNFLElBQUksRUFBRSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7cUNBQzVCO2lDQUNGOzZCQUNGO3lCQUNGO3FCQUNGO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELFlBQVksRUFBRTtZQUNaLEVBQUUsRUFBRSxjQUFjO1lBQ2xCLElBQUksRUFBRSxlQUFlO1lBQ3JCLE1BQU0sRUFBRSxJQUFJO1lBQ1osS0FBSyxFQUFFLEVBQUU7WUFDVCxXQUFXLEVBQUUsRUFBRTtTQUNoQjtLQUNGLENBQUM7SUFFRixNQUFNLG1CQUFtQixHQUFHO1FBQzFCLEVBQUUsRUFBRSxVQUFVO1FBQ2QsVUFBVSxFQUFFLGNBQWM7UUFDMUIsUUFBUSxFQUFFLEtBQUs7UUFDZixTQUFTLEVBQUUsc0JBQXNCO1FBQ2pDLFNBQVMsRUFBRSxzQkFBc0I7UUFDakMsSUFBSSxFQUFFLFNBQVM7UUFDZixNQUFNLEVBQUUsT0FBZ0I7UUFDeEIsT0FBTyxFQUFFLFNBQVM7UUFDbEIsY0FBYyxFQUFFLFNBQVM7UUFDekIsSUFBSSxFQUFFO1lBQ0osVUFBVSxFQUFFO2dCQUNWLEtBQUssRUFBRTtvQkFDTCxPQUFPLEVBQUUsWUFBWTtvQkFDckIsS0FBSyxFQUFFLG1CQUFtQjtpQkFDM0I7YUFDRjtTQUNGO1FBQ0QsWUFBWSxFQUFFO1lBQ1osRUFBRSxFQUFFLGNBQWM7WUFDbEIsSUFBSSxFQUFFLGlCQUFpQjtZQUN2QixNQUFNLEVBQUUsS0FBSztZQUNiLEtBQUssRUFBRSxFQUFFO1lBQ1QsV0FBVyxFQUFFLEVBQUU7U0FDaEI7S0FDRixDQUFDO0lBRUYsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtRQUNkLHdCQUF3QjtRQUN4QixVQUFVLEdBQUc7WUFDWCxXQUFXLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtZQUN0QixtQkFBbUIsRUFBRSxjQUFJLENBQUMsRUFBRSxFQUFFO1NBQ0ksQ0FBQztRQUVyQyxVQUFVLEdBQUc7WUFDWCxZQUFZLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtZQUN2QixhQUFhLEVBQUUsY0FBSSxDQUFDLEVBQUUsRUFBRTtTQUNZLENBQUM7UUFFdkMsV0FBVyxHQUFHLGNBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUEyQixDQUFDO1FBRTlFLGtCQUFrQjtRQUNsQixjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDckIsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQzdCLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxtQkFBUyxFQUFDLEdBQUcsRUFBRTtRQUNiLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDN0MsSUFBQSxZQUFFLEVBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELGdCQUFnQixHQUFHLElBQUksNkNBQXdCLEVBQUUsQ0FBQztZQUNsRCxJQUFBLGdCQUFNLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyxjQUFjLENBQUMsNkNBQXdCLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDZDQUE2QyxFQUFFLEdBQUcsRUFBRTtZQUNyRCxNQUFNLE1BQU0sR0FBRztnQkFDYixPQUFPLEVBQUUscUJBQXFCO2dCQUM5QixhQUFhLEVBQUUsRUFBRTtnQkFDakIsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLGVBQWUsRUFBRSxLQUFLO2dCQUN0QixhQUFhLEVBQUUsSUFBSTtnQkFDbkIsV0FBVyxFQUFFLEdBQUcsR0FBRyxJQUFJO2FBQ3hCLENBQUM7WUFFRixnQkFBZ0IsR0FBRyxJQUFJLDZDQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELElBQUEsZ0JBQU0sRUFBQyxnQkFBZ0IsQ0FBQyxDQUFDLGNBQWMsQ0FBQyw2Q0FBd0IsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsMENBQTBDLEVBQUUsR0FBRyxFQUFFO1lBQ2xELE1BQU0sTUFBTSxHQUFHO2dCQUNiLGFBQWEsRUFBRSxFQUFFO2dCQUNqQixXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDO1lBRUYsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4RCxJQUFBLGdCQUFNLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQyxjQUFjLENBQUMsNkNBQXdCLENBQUMsQ0FBQztRQUNwRSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtRQUNyQyxJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO1lBQ2QsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsRUFBRSxDQUFDO1FBQ3BELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMseUNBQXlDLEVBQUUsR0FBRyxFQUFFO1lBQ2pELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbkQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLG9CQUFvQixDQUN6RCxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO2dCQUN0QixXQUFXLEVBQUUsdUJBQXVCO2dCQUNwQyxJQUFJLEVBQUUsZUFBZTtnQkFDckIsUUFBUSxFQUFFLGtCQUFrQjthQUM3QixDQUFDLENBQ0gsQ0FBQztZQUVGLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxvQkFBb0IsQ0FDekQsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDdEIsV0FBVyxFQUFFLDRCQUE0QjtnQkFDekMsSUFBSSxFQUFFLG9CQUFvQjtnQkFDMUIsUUFBUSxFQUFFLFlBQVk7YUFDdkIsQ0FBQyxDQUNILENBQUM7WUFFRixJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLG9CQUFvQixDQUNqRCxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO2dCQUN0QixHQUFHLEVBQUUseUJBQXlCO2dCQUM5QixJQUFJLEVBQUUsdUJBQXVCO2dCQUM3QixRQUFRLEVBQUUsa0JBQWtCO2FBQzdCLENBQUMsQ0FDSCxDQUFDO1lBRUYsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxvQkFBb0IsQ0FDakQsZ0JBQU0sQ0FBQyxnQkFBZ0IsQ0FBQztnQkFDdEIsR0FBRyxFQUFFLDJCQUEyQjtnQkFDaEMsSUFBSSxFQUFFLHVCQUF1QjtnQkFDN0IsUUFBUSxFQUFFLGtCQUFrQjthQUM3QixDQUFDLENBQ0gsQ0FBQztZQUVGLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsb0JBQW9CLENBQ2pELGdCQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQ3RCLEdBQUcsRUFBRSx3QkFBd0I7Z0JBQzdCLElBQUksRUFBRSwwQkFBMEI7Z0JBQ2hDLFFBQVEsRUFBRSxrQkFBa0I7YUFDN0IsQ0FBQyxDQUNILENBQUM7WUFFRixJQUFBLGdCQUFNLEVBQUMsY0FBYyxDQUFDLENBQUMsb0JBQW9CLENBQUMsa0NBQWtDLENBQUMsQ0FBQztRQUNsRixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDJEQUEyRCxFQUFFLEdBQUcsRUFBRTtZQUNuRSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRW5ELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUU5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLElBQUksRUFBRSxJQUFJO2dCQUNWLFdBQVcsRUFBRSw2QkFBNkI7Z0JBQzFDLFFBQVEsRUFBRSxJQUFJO2FBQ2YsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxzREFBc0QsRUFBRSxHQUFHLEVBQUU7WUFDOUQsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUVuRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyw0QkFBNEIsQ0FDN0QsQ0FBQztZQUNGLElBQUEsZ0JBQU0sRUFBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFFOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNwQyxJQUFJLEVBQUUsSUFBSTtnQkFDVixXQUFXLEVBQUUsNkJBQTZCO2dCQUMxQyxRQUFRLEVBQUUsSUFBSTthQUNmLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsOENBQThDLEVBQUUsR0FBRyxFQUFFO1lBQ3RELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbkQsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLG9CQUFvQixDQUN6RCxnQkFBTSxDQUFDLGdCQUFnQixDQUFDO2dCQUN0QixXQUFXLEVBQUUsd0NBQXdDO2dCQUNyRCxJQUFJLEVBQUUseUJBQXlCO2dCQUMvQixRQUFRLEVBQUUsa0JBQWtCO2FBQzdCLENBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDN0MsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLEVBQUUsQ0FBQztZQUNsRCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsNkNBQTZDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0QsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUV6RCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx1QkFBdUIsQ0FDeEQsQ0FBQztZQUNGLElBQUEsZ0JBQU0sRUFBQyxZQUFZLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNuQyxJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFFOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXZELElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDakMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDN0MsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDcEMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxZQUFZO1lBQ2hELElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsMkNBQTJDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDekQsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBRS9ELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNwQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ2xDLE9BQU8sRUFBRSxZQUFZO2dCQUNyQixLQUFLLEVBQUUsbUJBQW1CO2FBQzNCLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsaUNBQWlDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDL0MsTUFBTSxnQkFBZ0IsR0FBRztnQkFDdkIsR0FBRyxhQUFhO2dCQUNoQixRQUFRLEVBQUUsS0FBSztnQkFDZixTQUFTLEVBQUUsU0FBUztnQkFDcEIsTUFBTSxFQUFFLFNBQWtCO2FBQzNCLENBQUM7WUFDRixVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFFNUQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssdUJBQXVCLENBQ3hELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3BDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDbkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxnREFBZ0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxXQUF5QixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx1QkFBdUIsQ0FDeEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsTUFBTSxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDN0QsaURBQWlELENBQ2xELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDBCQUEwQixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3hDLFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUVsRSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx1QkFBdUIsQ0FDeEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsTUFBTSxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDN0QsOENBQThDLENBQy9DLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25ELDZCQUE2QjtZQUM3QixjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRTNCLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN2RSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssdUJBQXVCLENBQ3hELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM5QyxVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXpELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ3ZDLElBQUEsb0JBQVUsRUFBQyxHQUFHLEVBQUU7WUFDZCxnQkFBZ0IsR0FBRyxJQUFJLDZDQUF3QixFQUFFLENBQUM7WUFDbEQsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZELFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssNEJBQTRCLENBQzdELENBQUM7WUFDRixJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBRTlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFDeEQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUMzRCxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ2xELElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFDdEQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDBDQUEwQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3hELFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUUvRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyw0QkFBNEIsQ0FDN0QsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFdkQsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywrQkFBK0IsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3QyxVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLElBQUksS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztZQUV2RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyw0QkFBNEIsQ0FDN0QsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsTUFBTSxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDN0Qsd0RBQXdELENBQ3pELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtRQUMxQyxJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO1lBQ2QsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsRUFBRSxDQUFDO1lBQ2xELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw0Q0FBNEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxRCxVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO2dCQUN6QyxJQUFJLEVBQUUsQ0FBQyxhQUFhLEVBQUUsbUJBQW1CLENBQUM7YUFDM0MsQ0FBQyxDQUFDO1lBRUgsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDekQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLHlCQUF5QixDQUNsRCxDQUFDO1lBQ0YsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUU5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckMsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0MsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ2xELElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMvQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDbEQsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMscUNBQXFDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbkQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRXpELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx5QkFBeUIsQ0FDbEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsNENBQTRDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7WUFFMUUsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDekQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLHlCQUF5QixDQUNsRCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQyxNQUFNLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUMzQyxvREFBb0QsQ0FDckQsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsNEJBQTRCLEVBQUUsR0FBRyxFQUFFO1FBQzFDLElBQUEsb0JBQVUsRUFBQyxHQUFHLEVBQUU7WUFDZCxnQkFBZ0IsR0FBRyxJQUFJLDZDQUF3QixFQUFFLENBQUM7WUFDbEQsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDRDQUE0QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzFELFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsQ0FBQzthQUMzQyxDQUFDLENBQUM7WUFFSCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssMkJBQTJCLENBQ3BELENBQUM7WUFDRixJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBRTlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVyQyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsd0JBQXdCO1lBQy9ELElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM3QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbEQsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUM1QyxPQUFPLEVBQUUsWUFBWTtnQkFDckIsS0FBSyxFQUFFLG1CQUFtQjthQUMzQixDQUFDLENBQUM7WUFDSCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG9DQUFvQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2xELFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLDRCQUE0QjthQUNwRCxDQUFDLENBQUM7WUFFSCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssMkJBQTJCLENBQ3BELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRXJDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG1DQUFtQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2pELFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1lBRTVFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSywyQkFBMkIsQ0FDcEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsTUFBTSxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDM0Msc0RBQXNELENBQ3ZELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLCtCQUErQixFQUFFLEdBQUcsRUFBRTtRQUM3QyxJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO1lBQ2QsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsRUFBRSxDQUFDO1lBQ2xELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywrQ0FBK0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM3RCxNQUFNLGdCQUFnQixHQUFHO2dCQUN2QixHQUFHLGFBQWE7Z0JBQ2hCLEVBQUUsRUFBRSxVQUFVO2dCQUNkLFFBQVEsRUFBRSxLQUFLO2dCQUNmLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixNQUFNLEVBQUUsU0FBa0I7YUFDM0IsQ0FBQztZQUVGLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxDQUFDLGFBQWEsRUFBRSxtQkFBbUIsRUFBRSxnQkFBZ0IsQ0FBQzthQUM3RCxDQUFDLENBQUM7WUFFSCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssd0JBQXdCLENBQ2pELENBQUM7WUFDRixJQUFBLGdCQUFNLEVBQUMsWUFBWSxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDbkMsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBRTlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUVyQyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hELElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ25ELE1BQU0sc0JBQXNCLEdBQUc7Z0JBQzdCLEdBQUcsYUFBYTtnQkFDaEIsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFLFNBQVM7YUFDckIsQ0FBQztZQUVGLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDO2FBQy9CLENBQUMsQ0FBQztZQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx3QkFBd0IsQ0FDakQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxnQ0FBZ0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM5QyxVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztZQUV6RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssd0JBQXdCLENBQ2pELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzNDLHNEQUFzRCxDQUN2RCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUU7UUFDNUMsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLEVBQUUsQ0FBQztZQUNsRCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsOENBQThDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDNUQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDekMsSUFBSSxFQUFFLENBQUMsYUFBYSxFQUFFLG1CQUFtQixDQUFDO2FBQzNDLENBQUMsQ0FBQztZQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHdDQUF3QyxDQUN6RSxDQUFDO1lBQ0YsSUFBQSxnQkFBTSxFQUFDLFlBQVksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUU5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7WUFFbkUsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztZQUM3QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztZQUM3RSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDL0MsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQ3RELElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQ2pFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsMENBQTBDLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDeEQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDekMsSUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRSxxQkFBcUI7YUFDbkQsQ0FBQyxDQUFDO1lBRUgsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssd0NBQXdDLENBQ3pFLENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBRW5FLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHdEQUF3RCxFQUFFLEdBQUcsRUFBRTtZQUNoRSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx3Q0FBd0MsQ0FDekUsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQ3BDLElBQUksRUFBRSxZQUFZO2dCQUNsQixXQUFXLEVBQUUsd0JBQXdCO2dCQUNyQyxRQUFRLEVBQUUsSUFBSTthQUNmLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsbUJBQW1CLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLElBQUEsb0JBQVUsRUFBQyxHQUFHLEVBQUU7WUFDZCxnQkFBZ0IsR0FBRyxJQUFJLDZDQUF3QixDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLGdDQUFnQyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzlDLE1BQU0sMEJBQTBCLEdBQUc7Z0JBQ2pDLEdBQUcsYUFBYTtnQkFDaEIsSUFBSSxFQUFFO29CQUNKLFVBQVUsRUFBRTt3QkFDVixPQUFPLEVBQUU7NEJBQ1AsY0FBYyxFQUFFO2dDQUNkO29DQUNFLElBQUksRUFBRTt3Q0FDSixJQUFJLEVBQUU7NENBQ0o7Z0RBQ0UsSUFBSSxFQUFFO29EQUNKLFFBQVEsRUFBRSxXQUFXO29EQUNyQixNQUFNLEVBQUUsUUFBUTtvREFDaEIsS0FBSyxFQUFFLFVBQVU7b0RBQ2pCLFNBQVMsRUFBRSxRQUFRO29EQUNuQixVQUFVLEVBQUUsTUFBTTtpREFDbkI7NkNBQ0Y7eUNBQ0Y7cUNBQ0Y7aUNBQ0Y7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hDLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1lBRXZGLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzdDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzNDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzlDLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsNEJBQTRCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDMUMsc0NBQXNDO1lBQ3RDLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFM0IsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQztnQkFDOUMsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLFdBQVcsRUFBRSxHQUFHLEVBQUUsbUJBQW1CO2FBQ3RDLENBQUMsQ0FBQztZQUNILGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbkQsTUFBTSxzQkFBc0IsR0FBRztnQkFDN0IsR0FBRyxhQUFhO2dCQUNoQixJQUFJLEVBQUU7b0JBQ0osVUFBVSxFQUFFO3dCQUNWLE9BQU8sRUFBRTs0QkFDUCxjQUFjLEVBQUU7Z0NBQ2Q7b0NBQ0UsSUFBSSxFQUFFO3dDQUNKLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO3FDQUNsRTtpQ0FDRjs2QkFDRjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGLENBQUM7WUFFRixVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLHNCQUFzQixDQUFDLENBQUM7WUFFbEUsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssdUJBQXVCLENBQ3hELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN4QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsQ0FBQztRQUN0RSxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLGtCQUFrQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO1lBQ2QsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQyxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsNkJBQTZCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0MsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUNuRCxVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXpELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQyxhQUFhO1lBQ2IsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV6RCwrQkFBK0I7WUFDL0IsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtZQUM1QixnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUM5QixtQkFBbUI7UUFDckIsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7WUFDckMsTUFBTSxLQUFLLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDL0MsSUFBQSxnQkFBTSxFQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQzVCLElBQUEsZ0JBQU0sRUFBQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDekMsSUFBQSxnQkFBTSxFQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1lBQzdDLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUN0RSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQ25ELFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssdUJBQXVCLENBQ3hELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE9BQU8sUUFBUTtpQkFDWixJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUM7aUJBQ3hCLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1QsT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFDM0MsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ1QsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFBLGtCQUFRLEVBQUMsa0JBQWtCLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLElBQUEsWUFBRSxFQUFDLGdFQUFnRSxFQUFFLEdBQUcsRUFBRTtZQUN4RSxNQUFNLE9BQU8sR0FBRyxJQUFBLDZDQUF3QixHQUFFLENBQUM7WUFDM0MsSUFBQSxnQkFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDLGNBQWMsQ0FBQyw2Q0FBd0IsQ0FBQyxDQUFDO1FBQzNELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO1lBQzFFLE1BQU0sTUFBTSxHQUFHLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7WUFDeEQsTUFBTSxPQUFPLEdBQUcsSUFBQSw2Q0FBd0IsRUFBQyxNQUFNLENBQUMsQ0FBQztZQUNqRCxJQUFBLGdCQUFNLEVBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDLDZDQUF3QixDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUU7UUFDN0MsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLEVBQUUsQ0FBQztZQUNsRCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDakQsTUFBTSxxQkFBcUIsR0FBRztnQkFDNUIsR0FBRyxhQUFhO2dCQUNoQixJQUFJLEVBQUUsU0FBUzthQUNoQixDQUFDO1lBQ0YsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBRWpFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHdDQUF3QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RELE1BQU0sa0JBQWtCLEdBQUc7Z0JBQ3pCLEVBQUUsRUFBRSxVQUFVO2dCQUNkLFFBQVEsRUFBRSxLQUFLO2dCQUNmLElBQUksRUFBRSxRQUFRO2dCQUNkLFNBQVMsRUFBRSxzQkFBc0I7Z0JBQ2pDLFVBQVUsRUFBRSxjQUFjO2dCQUMxQixNQUFNLEVBQUUsU0FBa0I7YUFDM0IsQ0FBQztZQUNGLFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsa0JBQWtCLENBQUMsQ0FBQztZQUU5RCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx1QkFBdUIsQ0FDeEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFdkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDakMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxxQ0FBcUM7UUFDNUUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxvQ0FBb0MsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRCxVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBRTFELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQyxNQUFNLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUM3RCxpREFBaUQsQ0FDbEQsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsZ0RBQWdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDOUQsVUFBVSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRXpELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx3QkFBd0IsQ0FDakQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNqRSxNQUFNLDRCQUE0QixHQUFHO2dCQUNuQyxHQUFHLGFBQWE7Z0JBQ2hCLFlBQVksRUFBRSxTQUFTO2FBQ3hCLENBQUM7WUFDRixVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO2dCQUN6QyxJQUFJLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQzthQUNyQyxDQUFDLENBQUM7WUFFSCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUsseUJBQXlCLENBQ2xELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRXJDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsd0RBQXdELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDckUsV0FBeUIsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFakQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssNEJBQTRCLENBQzdELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzdELGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw0REFBNEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RSxXQUF5QixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUsseUJBQXlCLENBQ2xELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzNDLGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw0REFBNEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN6RSxXQUF5QixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssMkJBQTJCLENBQ3BELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzNDLGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywwREFBMEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN2RSxXQUF5QixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssd0JBQXdCLENBQ2pELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQzNDLGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw4REFBOEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRSxXQUF5QixDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUVqRCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx3Q0FBd0MsQ0FDekUsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsTUFBTSxJQUFBLGdCQUFNLEVBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FDekUsaURBQWlELENBQ2xELENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDhDQUE4QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzVELFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1lBRTVFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHdDQUF3QyxDQUN6RSxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqQyxNQUFNLElBQUEsZ0JBQU0sRUFBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUN6RSxxRUFBcUUsQ0FDdEUsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsb0RBQW9ELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEUsNkJBQTZCO1lBQzdCLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFM0IsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ3ZFLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbkQsTUFBTSwwQkFBMEIsR0FBRztnQkFDakMsR0FBRyxhQUFhO2dCQUNoQixJQUFJLEVBQUUsRUFBRSxlQUFlLEVBQUUsdUJBQXVCLEVBQUU7YUFDbkQsQ0FBQztZQUNGLFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsMEJBQTBCLENBQUMsQ0FBQztZQUV0RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2pFLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsS0FBSyx1QkFBdUIsQ0FDeEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7WUFFdkQsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7UUFDbEUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywwQ0FBMEMsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN4RCw2QkFBNkI7WUFDN0IsY0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLGNBQWMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUUzQixnQkFBZ0IsR0FBRyxJQUFJLDZDQUF3QixDQUFDLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDdkUsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztZQUVuRCxNQUFNLHNCQUFzQixHQUFHO2dCQUM3QixHQUFHLGFBQWE7Z0JBQ2hCLElBQUksRUFBRTtvQkFDSixVQUFVLEVBQUU7d0JBQ1YsU0FBUyxFQUFFOzRCQUNULEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzRCQUM3QyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRTt5QkFDN0M7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBQ0YsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1lBRWxFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN0RSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNuRSxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2RSxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDJFQUEyRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pGLE1BQU0sZ0JBQWdCLEdBQUc7Z0JBQ3ZCLEdBQUcsYUFBYTtnQkFDaEIsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsSUFBSSxFQUFFO29CQUNKLFVBQVUsRUFBRTtvQkFDVix5QkFBeUI7cUJBQzFCO2lCQUNGO2FBQ0YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDO2FBQ3pCLENBQUMsQ0FBQztZQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx3QkFBd0IsQ0FDakQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxNQUFNLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEQsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyxzQ0FBc0MsRUFBRSxHQUFHLEVBQUU7UUFDcEQsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLEVBQUUsQ0FBQztZQUNsRCxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsK0RBQStELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDNUUsV0FBeUIsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFakQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssZ0NBQWdDLENBQ2pFLENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLE1BQU0sSUFBQSxnQkFBTSxFQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQ3RFLGlEQUFpRCxDQUNsRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw0REFBNEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMxRSxVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXpELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLGdDQUFnQyxDQUNqRSxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUVoRSxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2pDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBQSxrQkFBUSxFQUFDLDZCQUE2QixFQUFFLEdBQUcsRUFBRTtRQUMzQyxJQUFBLG9CQUFVLEVBQUMsR0FBRyxFQUFFO1lBQ2QsY0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQ3JCLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLENBQUMsRUFBRSxhQUFhLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLG1CQUFtQjtZQUMzRixnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxtQkFBUyxFQUFDLEdBQUcsRUFBRTtZQUNiLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHlDQUF5QyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3ZELFVBQVUsQ0FBQyxZQUFZLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFekQsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssNEJBQTRCLENBQzdELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLGFBQWE7WUFDYixNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUN4QyxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXpELG9DQUFvQztZQUNwQyxjQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFN0IsaUNBQWlDO1lBQ2pDLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsWUFBWSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxzREFBc0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwRSxVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx5QkFBeUIsQ0FDbEQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsYUFBYTtZQUNiLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RCLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFMUQsb0NBQW9DO1lBQ3BDLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU3QixpQ0FBaUM7WUFDakMsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdEIsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHNEQUFzRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3BFLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU1RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUN6RCxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssMkJBQTJCLENBQ3BELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLGFBQWE7WUFDYixNQUFNLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN0QixJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFELG9DQUFvQztZQUNwQyxjQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFN0IsaUNBQWlDO1lBQ2pDLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RCLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyxvREFBb0QsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNsRSxVQUFVLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBRXRFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ3pELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx3QkFBd0IsQ0FDakQsQ0FBQztZQUNGLElBQUksQ0FBQyxZQUFZO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLENBQUMsQ0FBQztZQUM5RCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFakMsYUFBYTtZQUNiLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RCLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFMUQsb0NBQW9DO1lBQ3BDLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU3QixpQ0FBaUM7WUFDakMsTUFBTSxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDdEIsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLHdEQUF3RCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFdEUsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssd0NBQXdDLENBQ3pFLENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpDLGFBQWE7WUFDYixNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLEVBQUUsY0FBYyxFQUFFLENBQUMsQ0FBQztZQUNwRCxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFELG9DQUFvQztZQUNwQyxjQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFN0IsaUNBQWlDO1lBQ2pDLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDO1lBQ3BELElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsYUFBYSxDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILElBQUEsa0JBQVEsRUFBQyw0QkFBNEIsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBQSxvQkFBVSxFQUFDLEdBQUcsRUFBRTtZQUNkLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDM0IsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsRUFBRSxDQUFDO1lBQ2xELGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw2REFBNkQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUMzRSxNQUFNLG9CQUFvQixHQUFHO2dCQUMzQixHQUFHLGFBQWE7Z0JBQ2hCLFFBQVEsRUFBRSxLQUFLO2dCQUNmLFNBQVMsRUFBRSxTQUFTO2dCQUNwQixJQUFJLEVBQUU7b0JBQ0osVUFBVSxFQUFFO3dCQUNWLEtBQUssRUFBRTs0QkFDTCxPQUFPLEVBQUUsWUFBWTs0QkFDckIsS0FBSyxFQUFFLG1CQUFtQjt5QkFDM0I7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBRWhFLE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyw4Q0FBOEM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyx1Q0FBdUM7WUFDNUUsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUNsQyxPQUFPLEVBQUUsWUFBWTtnQkFDckIsS0FBSyxFQUFFLG1CQUFtQjthQUMzQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUEsWUFBRSxFQUFDLDJEQUEyRCxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3pFLG9DQUFvQztZQUNwQyxjQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDckIsY0FBYyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRTNCLGdCQUFnQixHQUFHLElBQUksNkNBQXdCLENBQUMsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztZQUN2RSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRW5ELE1BQU0sd0JBQXdCLEdBQUc7Z0JBQy9CLEdBQUcsYUFBYTtnQkFDaEIsSUFBSSxFQUFFO29CQUNKLFVBQVUsRUFBRTt3QkFDVixPQUFPLEVBQUU7NEJBQ1AsY0FBYyxFQUFFO2dDQUNkO29DQUNFLElBQUksRUFBRTt3Q0FDSixJQUFJLEVBQUU7NENBQ0o7Z0RBQ0UsSUFBSSxFQUFFO29EQUNKLFFBQVEsRUFBRSxXQUFXO29EQUNyQixTQUFTLEVBQUUsU0FBUztvREFDcEIsSUFBSSxFQUFFLElBQUk7b0RBQ1YsTUFBTSxFQUFFO3dEQUNOLFFBQVEsRUFBRSxlQUFlO3dEQUN6QixNQUFNLEVBQUUsU0FBUzt3REFDakIsS0FBSyxFQUFFLFdBQVc7d0RBQ2xCLFVBQVUsRUFBRSxXQUFXO3FEQUN4QjtvREFDRCxRQUFRLEVBQUUsb0JBQW9CO2lEQUMvQjs2Q0FDRjt5Q0FDRjtxQ0FDRjtpQ0FDRjs2QkFDRjt5QkFDRjtxQkFDRjtpQkFDRjthQUNGLENBQUM7WUFFRixVQUFVLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLENBQUM7WUFFcEUsTUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNqRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssdUJBQXVCLENBQ3hELENBQUM7WUFDRixJQUFJLENBQUMsWUFBWTtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7WUFDOUQsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1lBRXZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLDBEQUEwRDtZQUMxRCxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDNUMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMxQyxJQUFBLGdCQUFNLEVBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDckQsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQywwREFBMEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUN4RSxnRUFBZ0U7WUFDaEUsTUFBTSx3QkFBd0IsR0FBRztnQkFDL0IsR0FBRyxhQUFhO2dCQUNoQixJQUFJLEVBQUU7b0JBQ0osVUFBVSxFQUFFO3dCQUNWLE9BQU8sRUFBRTs0QkFDUCxLQUFLLEVBQUU7Z0NBQ0w7b0NBQ0UsSUFBSSxFQUFFO3dDQUNKLElBQUksRUFBRTs0Q0FDSjtnREFDRSxJQUFJLEVBQUU7b0RBQ0osT0FBTyxFQUFFLGNBQWM7b0RBQ3ZCLE1BQU0sRUFBRTt3REFDTixNQUFNLEVBQUU7NERBQ04sTUFBTSxFQUFFLGtCQUFrQjt5REFDM0I7cURBQ0Y7aURBQ0Y7NkNBQ0Y7eUNBQ0Y7cUNBQ0Y7aUNBQ0Y7NkJBQ0Y7NEJBQ0QsS0FBSyxFQUFFO2dDQUNMO29DQUNFLElBQUksRUFBRTt3Q0FDSixJQUFJLEVBQUU7NENBQ0o7Z0RBQ0UsSUFBSSxFQUFFO29EQUNKLE9BQU8sRUFBRSxXQUFXO29EQUNwQixNQUFNLEVBQUUsU0FBUztpREFDbEI7NkNBQ0Y7eUNBQ0Y7cUNBQ0Y7aUNBQ0Y7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBRXBFLE1BQU0sZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNyRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEtBQUssNEJBQTRCLENBQzdELENBQUM7WUFDRixJQUFJLENBQUMsZ0JBQWdCO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztZQUN2RSxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6QyxNQUFNLE1BQU0sR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUUzRCxxRUFBcUU7WUFDckUsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNsQyxJQUFBLGdCQUFNLEVBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1lBQ3hELElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQzdDLElBQUEsZ0JBQU0sRUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsb0VBQW9FLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDbEYsTUFBTSxrQkFBa0IsR0FBRztnQkFDekIsR0FBRyxhQUFhO2dCQUNoQixFQUFFLEVBQUUscUJBQXFCO2dCQUN6QixVQUFVLEVBQUUsY0FBYztnQkFDMUIsUUFBUSxFQUFFLEtBQUs7Z0JBQ2YsSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsU0FBUyxFQUFFLHNCQUFzQjtnQkFDakMsU0FBUyxFQUFFLFNBQVMsRUFBRSx5Q0FBeUM7Z0JBQy9ELE1BQU0sRUFBRSxTQUFnQjtnQkFDeEIsSUFBSSxFQUFFLFNBQVM7YUFDaEIsQ0FBQztZQUVGLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUUzRSxNQUFNLGlCQUFpQixHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQzlELElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyx3QkFBd0IsQ0FDakQsQ0FBQztZQUNGLElBQUksQ0FBQyxpQkFBaUI7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1lBQ3pFLE1BQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sTUFBTSxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO1lBRTFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLDhDQUE4QztZQUM5QyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFBLGdCQUFNLEVBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDOUMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQywyQkFBMkI7UUFDbkUsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFBLFlBQUUsRUFBQyw4REFBOEQsRUFBRSxLQUFLLElBQUksRUFBRTtZQUM1RSxNQUFNLGtCQUFrQixHQUFHO2dCQUN6QjtvQkFDRSxHQUFHLGFBQWE7b0JBQ2hCLEVBQUUsRUFBRSxRQUFRO29CQUNaLFFBQVEsRUFBRSxJQUFJO29CQUNkLFNBQVMsRUFBRSxzQkFBc0I7b0JBQ2pDLElBQUksRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtpQkFDdEM7Z0JBQ0Q7b0JBQ0UsR0FBRyxhQUFhO29CQUNoQixFQUFFLEVBQUUsUUFBUTtvQkFDWixRQUFRLEVBQUUsS0FBSztvQkFDZixTQUFTLEVBQUUsc0JBQXNCLEVBQUUsMkJBQTJCO29CQUM5RCxJQUFJLEVBQUUsU0FBUztpQkFDaEI7Z0JBQ0Q7b0JBQ0UsR0FBRyxhQUFhO29CQUNoQixFQUFFLEVBQUUsUUFBUTtvQkFDWixRQUFRLEVBQUUsSUFBSTtvQkFDZCxTQUFTLEVBQUUsU0FBUyxFQUFFLDRCQUE0QjtvQkFDbEQsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLEVBQUU7aUJBQ3hEO2FBQ0YsQ0FBQztZQUVGLFVBQVUsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFBRSxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1lBRXpFLE1BQU0saUJBQWlCLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDOUQsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLLHdCQUF3QixDQUNqRCxDQUFDO1lBQ0YsSUFBSSxDQUFDLGlCQUFpQjtnQkFBRSxNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFDekUsTUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDM0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDckMsNENBQTRDO1lBQzVDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUEsZ0JBQU0sRUFBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUM5QyxJQUFBLGdCQUFNLEVBQUMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBQSxZQUFFLEVBQUMsNkRBQTZELEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDM0UsZ0NBQWdDO1lBQ2hDLGNBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUNyQixjQUFjLENBQUMsU0FBUyxFQUFFLENBQUM7WUFFM0IsZ0JBQWdCLEdBQUcsSUFBSSw2Q0FBd0IsQ0FBQztnQkFDOUMsV0FBVyxFQUFFLElBQUk7Z0JBQ2pCLFdBQVcsRUFBRSxJQUFJLEVBQUUsb0NBQW9DO2FBQ3hELENBQUMsQ0FBQztZQUNILGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7WUFFbkQsTUFBTSxrQkFBa0IsR0FBRztnQkFDekIsR0FBRyxhQUFhO2dCQUNoQixJQUFJLEVBQUU7b0JBQ0osVUFBVSxFQUFFO3dCQUNWLE9BQU8sRUFBRTs0QkFDUCxhQUFhLEVBQUU7Z0NBQ2I7b0NBQ0UsSUFBSSxFQUFFO3dDQUNKLElBQUksRUFBRTs0Q0FDSjtnREFDRTtvREFDRSxJQUFJLEVBQUU7d0RBQ0osVUFBVSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsb0JBQW9CO3dEQUNuRCxXQUFXLEVBQUUsY0FBYztxREFDNUI7aURBQ0Y7NkNBQ0Y7eUNBQ0Y7cUNBQ0Y7aUNBQ0Y7NkJBQ0Y7eUJBQ0Y7cUJBQ0Y7aUJBQ0Y7YUFDRixDQUFDO1lBRUYsVUFBVSxDQUFDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1lBRTlELE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FDakUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxLQUFLLHVCQUF1QixDQUN4RCxDQUFDO1lBQ0YsSUFBSSxDQUFDLFlBQVk7Z0JBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1lBQzlELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqQyxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUV2RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNyQyx5Q0FBeUM7WUFDekMsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUVoQyw0RUFBNEU7WUFDNUUsSUFBQSxnQkFBTSxFQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDbkQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9qZXJlbXlwYXJrZXIvRGVza3RvcC9DbGF1ZGUgQ29kaW5nIFByb2plY3RzL244bi1tY3Atc2VydmVyL3Rlc3RzL3VuaXQvcmVzb3VyY2VzL2V4ZWN1dGlvblJlc291cmNlcy50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlc2NyaWJlLCBpdCwgZXhwZWN0LCBiZWZvcmVFYWNoLCBqZXN0LCBhZnRlckVhY2ggfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCB7IEZhc3RNQ1AgfSBmcm9tICdmYXN0bWNwJztcbmltcG9ydCB7XG4gIEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcixcbiAgY3JlYXRlRXhlY3V0aW9uUmVzb3VyY2VzLFxufSBmcm9tICcuLi8uLi8uLi9zcmMvcmVzb3VyY2VzL2V4ZWN1dGlvblJlc291cmNlcyc7XG5pbXBvcnQgeyBOOG5DbGllbnQgfSBmcm9tICcuLi8uLi8uLi9zcmMvY2xpZW50L244bkNsaWVudCc7XG5cbi8vIE1vY2sgZGVwZW5kZW5jaWVzXG5qZXN0Lm1vY2soJ2Zhc3RtY3AnKTtcbmplc3QubW9jaygnLi4vLi4vLi4vc3JjL2NsaWVudC9uOG5DbGllbnQnKTtcblxuLy8gTW9jayBjb25zb2xlIG1ldGhvZHMgdG8gYXZvaWQgdGVzdCBvdXRwdXQgcG9sbHV0aW9uXG5jb25zdCBtb2NrQ29uc29sZUxvZyA9IGplc3QuZm4oKTtcbmplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbihtb2NrQ29uc29sZUxvZyk7XG5cbmRlc2NyaWJlKCdFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXInLCAoKSA9PiB7XG4gIGxldCBleGVjdXRpb25NYW5hZ2VyOiBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXI7XG4gIGxldCBtb2NrU2VydmVyOiBqZXN0Lk1vY2tlZDxGYXN0TUNQPjtcbiAgbGV0IG1vY2tDbGllbnQ6IGplc3QuTW9ja2VkPE44bkNsaWVudD47XG4gIGxldCBnZXRDbGllbnRGbjogKCkgPT4gTjhuQ2xpZW50IHwgbnVsbDtcblxuICAvLyBNb2NrIGV4ZWN1dGlvbiBkYXRhXG4gIGNvbnN0IG1vY2tFeGVjdXRpb24gPSB7XG4gICAgaWQ6ICdleGVjLTEyMycsXG4gICAgd29ya2Zsb3dJZDogJ3dvcmtmbG93LTQ1NicsXG4gICAgZmluaXNoZWQ6IHRydWUsXG4gICAgc3RhcnRlZEF0OiAnMjAyMy0wMS0wMVQxMDowMDowMFonLFxuICAgIHN0b3BwZWRBdDogJzIwMjMtMDEtMDFUMTA6MDU6MDBaJyxcbiAgICBtb2RlOiAnbWFudWFsJyxcbiAgICBzdGF0dXM6ICdzdWNjZXNzJyBhcyBjb25zdCxcbiAgICByZXRyeU9mOiB1bmRlZmluZWQsXG4gICAgcmV0cnlTdWNjZXNzSWQ6IHVuZGVmaW5lZCxcbiAgICBkYXRhOiB7XG4gICAgICByZXN1bHREYXRhOiB7XG4gICAgICAgIHJ1bkRhdGE6IHtcbiAgICAgICAgICAnSFRUUCBSZXF1ZXN0JzogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBqc29uOiB7IHN0YXR1czogJ3N1Y2Nlc3MnIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0sXG4gICAgd29ya2Zsb3dEYXRhOiB7XG4gICAgICBpZDogJ3dvcmtmbG93LTQ1NicsXG4gICAgICBuYW1lOiAnVGVzdCBXb3JrZmxvdycsXG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBub2RlczogW10sXG4gICAgICBjb25uZWN0aW9uczoge30sXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBtb2NrRmFpbGVkRXhlY3V0aW9uID0ge1xuICAgIGlkOiAnZXhlYy00NTYnLFxuICAgIHdvcmtmbG93SWQ6ICd3b3JrZmxvdy03ODknLFxuICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICBzdGFydGVkQXQ6ICcyMDIzLTAxLTAxVDExOjAwOjAwWicsXG4gICAgc3RvcHBlZEF0OiAnMjAyMy0wMS0wMVQxMTowMjowMFonLFxuICAgIG1vZGU6ICd0cmlnZ2VyJyxcbiAgICBzdGF0dXM6ICdlcnJvcicgYXMgY29uc3QsXG4gICAgcmV0cnlPZjogdW5kZWZpbmVkLFxuICAgIHJldHJ5U3VjY2Vzc0lkOiB1bmRlZmluZWQsXG4gICAgZGF0YToge1xuICAgICAgcmVzdWx0RGF0YToge1xuICAgICAgICBlcnJvcjoge1xuICAgICAgICAgIG1lc3NhZ2U6ICdUZXN0IGVycm9yJyxcbiAgICAgICAgICBzdGFjazogJ0Vycm9yIHN0YWNrIHRyYWNlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB3b3JrZmxvd0RhdGE6IHtcbiAgICAgIGlkOiAnd29ya2Zsb3ctNzg5JyxcbiAgICAgIG5hbWU6ICdGYWlsZWQgV29ya2Zsb3cnLFxuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIG5vZGVzOiBbXSxcbiAgICAgIGNvbm5lY3Rpb25zOiB7fSxcbiAgICB9LFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBtb2NrIGluc3RhbmNlc1xuICAgIG1vY2tTZXJ2ZXIgPSB7XG4gICAgICBhZGRSZXNvdXJjZTogamVzdC5mbigpLFxuICAgICAgYWRkUmVzb3VyY2VUZW1wbGF0ZTogamVzdC5mbigpLFxuICAgIH0gYXMgdW5rbm93biBhcyBqZXN0Lk1vY2tlZDxGYXN0TUNQPjtcblxuICAgIG1vY2tDbGllbnQgPSB7XG4gICAgICBnZXRFeGVjdXRpb246IGplc3QuZm4oKSxcbiAgICAgIGdldEV4ZWN1dGlvbnM6IGplc3QuZm4oKSxcbiAgICB9IGFzIHVua25vd24gYXMgamVzdC5Nb2NrZWQ8TjhuQ2xpZW50PjtcblxuICAgIGdldENsaWVudEZuID0gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZShtb2NrQ2xpZW50KSBhcyAoKSA9PiBOOG5DbGllbnQgfCBudWxsO1xuXG4gICAgLy8gQ2xlYXIgYWxsIG1vY2tzXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgbW9ja0NvbnNvbGVMb2cubW9ja0NsZWFyKCk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDb25zdHJ1Y3RvciBhbmQgQ29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBkZWZhdWx0IGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyID0gbmV3IEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcigpO1xuICAgICAgZXhwZWN0KGV4ZWN1dGlvbk1hbmFnZXIpLnRvQmVJbnN0YW5jZU9mKEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgd2l0aCBjdXN0b20gY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgICAgYmFzZVVyaTogJ2N1c3RvbTovL2V4ZWN1dGlvbnMnLFxuICAgICAgICBtYXhFeGVjdXRpb25zOiAxMCxcbiAgICAgICAgaW5jbHVkZURhdGE6IHRydWUsXG4gICAgICAgIGluY2x1ZGVGYWlsdXJlczogZmFsc2UsXG4gICAgICAgIGNhY2hlRHVyYXRpb246IDUwMDAsXG4gICAgICAgIG1heERhdGFTaXplOiA1MTIgKiAxMDI0LFxuICAgICAgfTtcblxuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoY29uZmlnKTtcbiAgICAgIGV4cGVjdChleGVjdXRpb25NYW5hZ2VyKS50b0JlSW5zdGFuY2VPZihFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBtZXJnZSBjdXN0b20gY29uZmlnIHdpdGggZGVmYXVsdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7XG4gICAgICAgIG1heEV4ZWN1dGlvbnM6IDI1LFxuICAgICAgICBpbmNsdWRlRGF0YTogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKGNvbmZpZyk7XG4gICAgICBleHBlY3QoZXhlY3V0aW9uTWFuYWdlcikudG9CZUluc3RhbmNlT2YoRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1Jlc291cmNlIFJlZ2lzdHJhdGlvbicsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZ2lzdGVyIGFsbCBleGVjdXRpb24gcmVzb3VyY2VzJywgKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG5cbiAgICAgIGV4cGVjdChtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdXJpVGVtcGxhdGU6ICduOG46Ly9leGVjdXRpb25zL3tpZH0nLFxuICAgICAgICAgIG5hbWU6ICduOG4gRXhlY3V0aW9uJyxcbiAgICAgICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB1cmlUZW1wbGF0ZTogJ244bjovL2V4ZWN1dGlvbnMve2lkfS9sb2dzJyxcbiAgICAgICAgICBuYW1lOiAnbjhuIEV4ZWN1dGlvbiBMb2dzJyxcbiAgICAgICAgICBtaW1lVHlwZTogJ3RleHQvcGxhaW4nLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdXJpOiAnbjhuOi8vZXhlY3V0aW9ucy9yZWNlbnQnLFxuICAgICAgICAgIG5hbWU6ICduOG4gUmVjZW50IEV4ZWN1dGlvbnMnLFxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgICBleHBlY3QobW9ja1NlcnZlci5hZGRSZXNvdXJjZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB1cmk6ICduOG46Ly9leGVjdXRpb25zL2ZhaWx1cmVzJyxcbiAgICAgICAgICBuYW1lOiAnbjhuIEZhaWxlZCBFeGVjdXRpb25zJyxcbiAgICAgICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgICAgZXhwZWN0KG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdXJpOiAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cycsXG4gICAgICAgICAgbmFtZTogJ244biBFeGVjdXRpb24gU3RhdGlzdGljcycsXG4gICAgICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAgIGV4cGVjdChtb2NrQ29uc29sZUxvZykudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ+KaoSBFeGVjdXRpb24gcmVzb3VyY2VzIHJlZ2lzdGVyZWQnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVnaXN0ZXIgZXhlY3V0aW9uIHRlbXBsYXRlIHdpdGggY29ycmVjdCBhcmd1bWVudHMnLCAoKSA9PiB7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGV4cGVjdCh0ZW1wbGF0ZUNhbGwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGV4cGVjdCh0ZW1wbGF0ZS5hcmd1bWVudHMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdCh0ZW1wbGF0ZS5hcmd1bWVudHNbMF0pLnRvRXF1YWwoe1xuICAgICAgICBuYW1lOiAnaWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBJRCBvZiB0aGUgbjhuIGV4ZWN1dGlvbicsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHJlZ2lzdGVyIGxvZ3MgdGVtcGxhdGUgd2l0aCBjb3JyZWN0IGFyZ3VtZW50cycsICgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0vbG9ncydcbiAgICAgICk7XG4gICAgICBleHBlY3QodGVtcGxhdGVDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzWzBdKS50b0VxdWFsKHtcbiAgICAgICAgbmFtZTogJ2lkJyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgSUQgb2YgdGhlIG44biBleGVjdXRpb24nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZWdpc3RlciB3b3JrZmxvdyBleGVjdXRpb25zIHRlbXBsYXRlJywgKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG5cbiAgICAgIGV4cGVjdChtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgICAgdXJpVGVtcGxhdGU6ICduOG46Ly9leGVjdXRpb25zL3dvcmtmbG93L3t3b3JrZmxvd0lkfScsXG4gICAgICAgICAgbmFtZTogJ244biBXb3JrZmxvdyBFeGVjdXRpb25zJyxcbiAgICAgICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0luZGl2aWR1YWwgRXhlY3V0aW9uIFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoKTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGV4ZWN1dGlvbiByZXNvdXJjZSBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRXhlY3V0aW9uKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGV4cGVjdCh0ZW1wbGF0ZUNhbGwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuaWQpLnRvQmUoJ2V4ZWMtMTIzJyk7XG4gICAgICBleHBlY3QoZGF0YS53b3JrZmxvd0lkKS50b0JlKCd3b3JrZmxvdy00NTYnKTtcbiAgICAgIGV4cGVjdChkYXRhLnN0YXR1cykudG9CZSgnc3VjY2VzcycpO1xuICAgICAgZXhwZWN0KGRhdGEuZHVyYXRpb24pLnRvQmUoMzAwMDAwKTsgLy8gNSBtaW51dGVzXG4gICAgICBleHBlY3QoZGF0YS5yZXNvdXJjZUluZm8pLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZGF0YS5yZXNvdXJjZUluZm8udHlwZSkudG9CZSgnbjhuLWV4ZWN1dGlvbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXhlY3V0aW9uIHdpdGggZXJyb3Igc3RhdHVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0ZhaWxlZEV4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTQ1NicgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLnN0YXR1cykudG9CZSgnc3RvcHBlZCcpO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEuZXJyb3IpLnRvRXF1YWwoe1xuICAgICAgICBtZXNzYWdlOiAnVGVzdCBlcnJvcicsXG4gICAgICAgIHN0YWNrOiAnRXJyb3Igc3RhY2sgdHJhY2UnLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBydW5uaW5nIGV4ZWN1dGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJ1bm5pbmdFeGVjdXRpb24gPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgc3RvcHBlZEF0OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXR1czogJ3J1bm5pbmcnIGFzIGNvbnN0LFxuICAgICAgfTtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKHJ1bm5pbmdFeGVjdXRpb24pO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5zdGF0dXMpLnRvQmUoJ3J1bm5pbmcnKTtcbiAgICAgIGV4cGVjdChkYXRhLmR1cmF0aW9uKS50b0JlTnVsbCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoZ2V0Q2xpZW50Rm4gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBSdW4gaW5pdC1uOG4gZmlyc3QuJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0FQSSBFcnJvcicpKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnRmFpbGVkIHRvIGxvYWQgZXhlY3V0aW9uIGV4ZWMtMTIzOiBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBpbmNsdWRlIGRhdGEgd2hlbiBjb25maWd1cmVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ2xlYXIgcHJldmlvdXMgbW9ja3MgZmlyc3RcbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgbW9ja0NvbnNvbGVMb2cubW9ja0NsZWFyKCk7XG5cbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKHsgaW5jbHVkZURhdGE6IHRydWUgfSk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tFeGVjdXRpb24pO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5kYXRhKS50b0JlRGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBleGNsdWRlIGRhdGEgYnkgZGVmYXVsdCcsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tFeGVjdXRpb24pO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5kYXRhKS50b0JlVW5kZWZpbmVkKCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFeGVjdXRpb24gTG9ncyBSZXNvdXJjZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBleGVjdXRpb24gbG9ncyBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRXhlY3V0aW9uKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9L2xvZ3MnXG4gICAgICApO1xuICAgICAgZXhwZWN0KHRlbXBsYXRlQ2FsbCkudG9CZURlZmluZWQoKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLnRvQ29udGFpbignRXhlY3V0aW9uIElEOiBleGVjLTEyMycpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0NvbnRhaW4oJ1dvcmtmbG93IElEOiB3b3JrZmxvdy00NTYnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9Db250YWluKCdTdGF0dXM6IEZpbmlzaGVkJyk7XG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLnRvQ29udGFpbignTk9ERSBFWEVDVVRJT04gREFUQTonKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9Db250YWluKCdOb2RlOiBIVFRQIFJlcXVlc3QnKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaW5jbHVkZSBlcnJvciBpbmZvcm1hdGlvbiBpbiBsb2dzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0ZhaWxlZEV4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfS9sb2dzJ1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtNDU2JyB9KTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0NvbnRhaW4oJ0VSUk9SOicpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0NvbnRhaW4oJ1Rlc3QgZXJyb3InKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGxvZ3MgQVBJIGVycm9ycycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignTG9ncyBBUEkgRXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfS9sb2dzJ1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnRmFpbGVkIHRvIGxvYWQgZXhlY3V0aW9uIGxvZ3MgZXhlYy0xMjM6IExvZ3MgQVBJIEVycm9yJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1JlY2VudCBFeGVjdXRpb25zIFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoKTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIHJlY2VudCBleGVjdXRpb25zIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IFttb2NrRXhlY3V0aW9uLCBtb2NrRmFpbGVkRXhlY3V0aW9uXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvcmVjZW50J1xuICAgICAgKTtcbiAgICAgIGV4cGVjdChyZXNvdXJjZUNhbGwpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuXG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlLmxvYWQoKTtcblxuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9ucykudG9IYXZlTGVuZ3RoKDIpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9uc1swXS5pZCkudG9CZSgnZXhlYy0xMjMnKTtcbiAgICAgIGV4cGVjdChkYXRhLmV4ZWN1dGlvbnNbMF0uc3RhdHVzKS50b0JlKCdzdWNjZXNzJyk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zWzFdLmlkKS50b0JlKCdleGVjLTQ1NicpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9uc1sxXS5zdGF0dXMpLnRvQmUoJ3N0b3BwZWQnKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLnRvdGFsKS50b0JlKDIpO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvLnR5cGUpLnRvQmUoJ244bi1yZWNlbnQtZXhlY3V0aW9ucycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZW1wdHkgZXhlY3V0aW9ucyBsaXN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogW10gfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9yZWNlbnQnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zKS50b0hhdmVMZW5ndGgoMCk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YS50b3RhbCkudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHJlY2VudCBleGVjdXRpb25zIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdSZWNlbnQgQVBJIEVycm9yJykpO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvcmVjZW50J1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHJlc291cmNlLmxvYWQoKSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnRmFpbGVkIHRvIGxvYWQgcmVjZW50IGV4ZWN1dGlvbnM6IFJlY2VudCBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRmFpbGVkIEV4ZWN1dGlvbnMgUmVzb3VyY2UnLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyID0gbmV3IEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcigpO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGxvYWQgZmFpbGVkIGV4ZWN1dGlvbnMgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW21vY2tFeGVjdXRpb24sIG1vY2tGYWlsZWRFeGVjdXRpb25dLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9mYWlsdXJlcydcbiAgICAgICk7XG4gICAgICBleHBlY3QocmVzb3VyY2VDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmZhaWx1cmVzKS50b0hhdmVMZW5ndGgoMSk7IC8vIE9ubHkgZmFpbGVkIGV4ZWN1dGlvblxuICAgICAgZXhwZWN0KGRhdGEuZmFpbHVyZXNbMF0uaWQpLnRvQmUoJ2V4ZWMtNDU2Jyk7XG4gICAgICBleHBlY3QoZGF0YS5mYWlsdXJlc1swXS5lcnJvcikudG9CZSgnVGVzdCBlcnJvcicpO1xuICAgICAgZXhwZWN0KGRhdGEuZmFpbHVyZXNbMF0uZXJyb3JEZXRhaWxzKS50b0VxdWFsKHtcbiAgICAgICAgbWVzc2FnZTogJ1Rlc3QgZXJyb3InLFxuICAgICAgICBzdGFjazogJ0Vycm9yIHN0YWNrIHRyYWNlJyxcbiAgICAgIH0pO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvLnR5cGUpLnRvQmUoJ244bi1mYWlsZWQtZXhlY3V0aW9ucycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gZmFpbGVkIGV4ZWN1dGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbbW9ja0V4ZWN1dGlvbl0sIC8vIE9ubHkgc3VjY2Vzc2Z1bCBleGVjdXRpb25cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvZmFpbHVyZXMnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5mYWlsdXJlcykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEudG90YWwpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBmYWlsdXJlcyBBUEkgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignRmFpbHVyZXMgQVBJIEVycm9yJykpO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvZmFpbHVyZXMnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuXG4gICAgICBhd2FpdCBleHBlY3QocmVzb3VyY2UubG9hZCgpKS5yZWplY3RzLnRvVGhyb3coXG4gICAgICAgICdGYWlsZWQgdG8gbG9hZCBmYWlsZWQgZXhlY3V0aW9uczogRmFpbHVyZXMgQVBJIEVycm9yJ1xuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0V4ZWN1dGlvbiBTdGF0aXN0aWNzIFJlc291cmNlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoKTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBsb2FkIGV4ZWN1dGlvbiBzdGF0aXN0aWNzIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJ1bm5pbmdFeGVjdXRpb24gPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGlkOiAnZXhlYy03ODknLFxuICAgICAgICBmaW5pc2hlZDogZmFsc2UsXG4gICAgICAgIHN0b3BwZWRBdDogdW5kZWZpbmVkLFxuICAgICAgICBzdGF0dXM6ICdydW5uaW5nJyBhcyBjb25zdCxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IFttb2NrRXhlY3V0aW9uLCBtb2NrRmFpbGVkRXhlY3V0aW9uLCBydW5uaW5nRXhlY3V0aW9uXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvc3RhdHMnXG4gICAgICApO1xuICAgICAgZXhwZWN0KHJlc291cmNlQ2FsbCkudG9CZURlZmluZWQoKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBleHBlY3QocmVzdWx0LnRleHQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS50b3RhbEV4ZWN1dGlvbnMpLnRvQmUoMyk7XG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzZnVsRXhlY3V0aW9ucykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChkYXRhLmZhaWxlZEV4ZWN1dGlvbnMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5ydW5uaW5nRXhlY3V0aW9ucykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChkYXRhLmF2ZXJhZ2VEdXJhdGlvbikudG9CZUdyZWF0ZXJUaGFuKDApO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9uc0J5U3RhdHVzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9uc0J5U3RhdHVzLnN1Y2Nlc3MpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zQnlTdGF0dXMuZXJyb3IpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zQnlTdGF0dXMucnVubmluZykudG9CZSgxKTtcbiAgICAgIGV4cGVjdChkYXRhLnJlc291cmNlSW5mby50eXBlKS50b0JlKCduOG4tZXhlY3V0aW9uLXN0YXRzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSB6ZXJvIGF2ZXJhZ2UgZHVyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleGVjdXRpb25XaXRob3V0VGltaW5nID0ge1xuICAgICAgICAuLi5tb2NrRXhlY3V0aW9uLFxuICAgICAgICBzdGFydGVkQXQ6ICcyMDIzLTAxLTAxVDEwOjAwOjAwWicsXG4gICAgICAgIHN0b3BwZWRBdDogdW5kZWZpbmVkLFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW2V4ZWN1dGlvbldpdGhvdXRUaW1pbmddLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmF2ZXJhZ2VEdXJhdGlvbikudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIHN0YXRzIEFQSSBlcnJvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdTdGF0cyBBUEkgRXJyb3InKSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChyZXNvdXJjZS5sb2FkKCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIGV4ZWN1dGlvbiBzdGF0aXN0aWNzOiBTdGF0cyBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnV29ya2Zsb3cgRXhlY3V0aW9ucyBSZXNvdXJjZScsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCB3b3JrZmxvdyBleGVjdXRpb25zIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucy5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIGRhdGE6IFttb2NrRXhlY3V0aW9uLCBtb2NrRmFpbGVkRXhlY3V0aW9uXSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3dvcmtmbG93L3t3b3JrZmxvd0lkfSdcbiAgICAgICk7XG4gICAgICBleHBlY3QodGVtcGxhdGVDYWxsKS50b0JlRGVmaW5lZCgpO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgd29ya2Zsb3dJZDogJ3dvcmtmbG93LTQ1NicgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLndvcmtmbG93SWQpLnRvQmUoJ3dvcmtmbG93LTQ1NicpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9ucykudG9IYXZlTGVuZ3RoKDEpOyAvLyBPbmx5IGV4ZWN1dGlvbnMgZm9yIHRoaXMgd29ya2Zsb3dcbiAgICAgIGV4cGVjdChkYXRhLmV4ZWN1dGlvbnNbMF0uaWQpLnRvQmUoJ2V4ZWMtMTIzJyk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YS53b3JrZmxvd0lkKS50b0JlKCd3b3JrZmxvdy00NTYnKTtcbiAgICAgIGV4cGVjdChkYXRhLnJlc291cmNlSW5mby50eXBlKS50b0JlKCduOG4td29ya2Zsb3ctZXhlY3V0aW9ucycpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm8gZXhlY3V0aW9ucyBmb3Igd29ya2Zsb3cnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbbW9ja0ZhaWxlZEV4ZWN1dGlvbl0sIC8vIERpZmZlcmVudCB3b3JrZmxvd1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvd29ya2Zsb3cve3dvcmtmbG93SWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyB3b3JrZmxvd0lkOiAnd29ya2Zsb3ctOTk5JyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9ucykudG9IYXZlTGVuZ3RoKDApO1xuICAgICAgZXhwZWN0KGRhdGEubWV0YWRhdGEudG90YWwpLnRvQmUoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHdvcmtmbG93IGV4ZWN1dGlvbnMgdGVtcGxhdGUgYXJndW1lbnRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy93b3JrZmxvdy97d29ya2Zsb3dJZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuXG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QodGVtcGxhdGUuYXJndW1lbnRzWzBdKS50b0VxdWFsKHtcbiAgICAgICAgbmFtZTogJ3dvcmtmbG93SWQnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSBJRCBvZiB0aGUgd29ya2Zsb3cnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRGF0YSBTYW5pdGl6YXRpb24nLCAoKSA9PiB7XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyID0gbmV3IEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcih7IGluY2x1ZGVEYXRhOiB0cnVlIH0pO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHNhbml0aXplIHNlbnNpdGl2ZSBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlY3V0aW9uV2l0aFNlbnNpdGl2ZURhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICByZXN1bHREYXRhOiB7XG4gICAgICAgICAgICBydW5EYXRhOiB7XG4gICAgICAgICAgICAgICdIVFRQIFJlcXVlc3QnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogJ3NlY3JldDEyMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleTogJ2tleTQ1NicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAndG9rZW43ODknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNyZXRLZXk6ICdzZWNyZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxEYXRhOiAnc2FmZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShleGVjdXRpb25XaXRoU2Vuc2l0aXZlRGF0YSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGNvbnN0IHNhbml0aXplZERhdGEgPSBkYXRhLmRhdGE7XG4gICAgICBjb25zdCBqc29uRGF0YSA9IHNhbml0aXplZERhdGEucmVzdWx0RGF0YS5ydW5EYXRhWydIVFRQIFJlcXVlc3QnXVswXS5kYXRhLm1haW5bMF0uanNvbjtcblxuICAgICAgZXhwZWN0KGpzb25EYXRhLnBhc3N3b3JkKS50b0JlKCdbUkVEQUNURURdJyk7XG4gICAgICBleHBlY3QoanNvbkRhdGEuYXBpS2V5KS50b0JlKCdbUkVEQUNURURdJyk7XG4gICAgICBleHBlY3QoanNvbkRhdGEudG9rZW4pLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChqc29uRGF0YS5zZWNyZXRLZXkpLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChqc29uRGF0YS5ub3JtYWxEYXRhKS50b0JlKCdzYWZlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHRydW5jYXRlIGxhcmdlIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDbGVhciBhbGwgcHJldmlvdXMgbW9jayBjYWxscyBmaXJzdFxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICBtb2NrQ29uc29sZUxvZy5tb2NrQ2xlYXIoKTtcblxuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoe1xuICAgICAgICBpbmNsdWRlRGF0YTogdHJ1ZSxcbiAgICAgICAgbWF4RGF0YVNpemU6IDEwMCwgLy8gVmVyeSBzbWFsbCBsaW1pdFxuICAgICAgfSk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcblxuICAgICAgY29uc3QgZXhlY3V0aW9uV2l0aExhcmdlRGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHJlc3VsdERhdGE6IHtcbiAgICAgICAgICAgIHJ1bkRhdGE6IHtcbiAgICAgICAgICAgICAgJ0hUVFAgUmVxdWVzdCc6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW46IEFycmF5KDEwMDApLmZpbGwoeyBqc29uOiB7IGxhcmdlRGF0YTogJ3gnLnJlcGVhdCgxMDAwKSB9IH0pLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoZXhlY3V0aW9uV2l0aExhcmdlRGF0YSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmRhdGEuX3RydW5jYXRlZCkudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChkYXRhLmRhdGEuc3VtbWFyeSkudG9Db250YWluKCd0cnVuY2F0ZWQgZHVlIHRvIHNpemUgbGltaXRzJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdDYWNoZSBNYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoeyBjYWNoZUR1cmF0aW9uOiAxMDAwIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjYWNoZSBleGVjdXRpb24gZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0V4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KTtcbiAgICAgIGV4cGVjdChtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBTZWNvbmQgY2FsbCBzaG91bGQgdXNlIGNhY2hlXG4gICAgICBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRFeGVjdXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgY2xlYXIgY2FjaGUnLCAoKSA9PiB7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLmNsZWFyQ2FjaGUoKTtcbiAgICAgIC8vIFNob3VsZCBub3QgdGhyb3dcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgZ2V0IGNhY2hlIHN0YXRpc3RpY3MnLCAoKSA9PiB7XG4gICAgICBjb25zdCBzdGF0cyA9IGV4ZWN1dGlvbk1hbmFnZXIuZ2V0Q2FjaGVTdGF0cygpO1xuICAgICAgZXhwZWN0KHN0YXRzKS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHR5cGVvZiBzdGF0cy5zaXplKS50b0JlKCdudW1iZXInKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KHN0YXRzLmtleXMpKS50b0JlKHRydWUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBub3QgY2FjaGUgd2hlbiBkdXJhdGlvbiBpcyAwJywgKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoeyBjYWNoZUR1cmF0aW9uOiAwIH0pO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrRXhlY3V0aW9uKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgcmV0dXJuIHRlbXBsYXRlXG4gICAgICAgIC5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRFeGVjdXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdGYWN0b3J5IEZ1bmN0aW9uJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGV4ZWN1dGlvbiByZXNvdXJjZSBtYW5hZ2VyIHdpdGggZmFjdG9yeSBmdW5jdGlvbicsICgpID0+IHtcbiAgICAgIGNvbnN0IG1hbmFnZXIgPSBjcmVhdGVFeGVjdXRpb25SZXNvdXJjZXMoKTtcbiAgICAgIGV4cGVjdChtYW5hZ2VyKS50b0JlSW5zdGFuY2VPZihFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBjcmVhdGUgZXhlY3V0aW9uIHJlc291cmNlIG1hbmFnZXIgd2l0aCBjb25maWcgdmlhIGZhY3RvcnknLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb25maWcgPSB7IG1heEV4ZWN1dGlvbnM6IDI1LCBpbmNsdWRlRGF0YTogdHJ1ZSB9O1xuICAgICAgY29uc3QgbWFuYWdlciA9IGNyZWF0ZUV4ZWN1dGlvblJlc291cmNlcyhjb25maWcpO1xuICAgICAgZXhwZWN0KG1hbmFnZXIpLnRvQmVJbnN0YW5jZU9mKEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdFZGdlIENhc2VzIGFuZCBFcnJvciBIYW5kbGluZycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG51bGwgZXhlY3V0aW9uIGRhdGEnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBleGVjdXRpb25XaXRoTnVsbERhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIH07XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShleGVjdXRpb25XaXRoTnVsbERhdGEpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YS5lcnJvcikudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbWFsZm9ybWVkIGV4ZWN1dGlvbiBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWFsZm9ybWVkRXhlY3V0aW9uID0ge1xuICAgICAgICBpZDogJ2V4ZWMtMTIzJyxcbiAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICBtb2RlOiAnbWFudWFsJyxcbiAgICAgICAgc3RhcnRlZEF0OiAnMjAyMy0wMS0wMVQxMDowMDowMFonLFxuICAgICAgICB3b3JrZmxvd0lkOiAnd29ya2Zsb3ctNDU2JyxcbiAgICAgICAgc3RhdHVzOiAncnVubmluZycgYXMgY29uc3QsXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobWFsZm9ybWVkRXhlY3V0aW9uKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuaWQpLnRvQmUoJ2V4ZWMtMTIzJyk7XG4gICAgICBleHBlY3QoZGF0YS5zdGF0dXMpLnRvQmUoJ3J1bm5pbmcnKTsgLy8gRGVmYXVsdCB3aGVuIG5vIGZpbmlzaGVkL3N0b3BwZWRBdFxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLUVycm9yIGV4Y2VwdGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVqZWN0ZWRWYWx1ZSgnU3RyaW5nIGVycm9yJyk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIGV4ZWN1dGlvbiBleGVjLTEyMzogU3RyaW5nIGVycm9yJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGVtcHR5IGV4ZWN1dGlvbiBsaXN0cyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogW10gfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZXNvdXJjZS5sb2FkKCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLnRvdGFsRXhlY3V0aW9ucykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChkYXRhLmF2ZXJhZ2VEdXJhdGlvbikudG9CZSgwKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3Npbmcgd29ya2Zsb3cgZGF0YSBpbiBleGVjdXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZXhlY3V0aW9uV2l0aG91dFdvcmtmbG93RGF0YSA9IHtcbiAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgd29ya2Zsb3dEYXRhOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICAgICAgZGF0YTogW2V4ZWN1dGlvbldpdGhvdXRXb3JrZmxvd0RhdGFdLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9yZWNlbnQnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zWzBdLndvcmtmbG93TmFtZSkudG9CZVVuZGVmaW5lZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2xpZW50IG5vdCBpbml0aWFsaXplZCBmb3IgbG9ncyByZXNvdXJjZScsIGFzeW5jICgpID0+IHtcbiAgICAgIChnZXRDbGllbnRGbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9L2xvZ3MnXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuXG4gICAgICBhd2FpdCBleHBlY3QodGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pKS5yZWplY3RzLnRvVGhyb3coXG4gICAgICAgICduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUnVuIGluaXQtbjhuIGZpcnN0LidcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjbGllbnQgbm90IGluaXRpYWxpemVkIGZvciByZWNlbnQgZXhlY3V0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIChnZXRDbGllbnRGbiBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZShudWxsKTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly9leGVjdXRpb25zL3JlY2VudCdcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChyZXNvdXJjZS5sb2FkKCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBSdW4gaW5pdC1uOG4gZmlyc3QuJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQgZm9yIGZhaWxlZCBleGVjdXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgKGdldENsaWVudEZuIGFzIGplc3QuTW9jaykubW9ja1JldHVyblZhbHVlKG51bGwpO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvZmFpbHVyZXMnXG4gICAgICApO1xuICAgICAgaWYgKCFyZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignUmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHJlc291cmNlID0gcmVzb3VyY2VDYWxsWzBdO1xuXG4gICAgICBhd2FpdCBleHBlY3QocmVzb3VyY2UubG9hZCgpKS5yZWplY3RzLnRvVGhyb3coXG4gICAgICAgICduOG4gY2xpZW50IG5vdCBpbml0aWFsaXplZC4gUnVuIGluaXQtbjhuIGZpcnN0LidcbiAgICAgICk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjbGllbnQgbm90IGluaXRpYWxpemVkIGZvciBleGVjdXRpb24gc3RhdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoZ2V0Q2xpZW50Rm4gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdChyZXNvdXJjZS5sb2FkKCkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBSdW4gaW5pdC1uOG4gZmlyc3QuJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQgZm9yIHdvcmtmbG93IGV4ZWN1dGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoZ2V0Q2xpZW50Rm4gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvd29ya2Zsb3cve3dvcmtmbG93SWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgYXdhaXQgZXhwZWN0KHRlbXBsYXRlLmxvYWQoeyB3b3JrZmxvd0lkOiAnd29ya2Zsb3ctMTIzJyB9KSkucmVqZWN0cy50b1Rocm93KFxuICAgICAgICAnbjhuIGNsaWVudCBub3QgaW5pdGlhbGl6ZWQuIFJ1biBpbml0LW44biBmaXJzdC4nXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgd29ya2Zsb3cgZXhlY3V0aW9ucyBBUEkgZXJyb3JzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcignV29ya2Zsb3cgQVBJIEVycm9yJykpO1xuXG4gICAgICBjb25zdCB0ZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3dvcmtmbG93L3t3b3JrZmxvd0lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh0ZW1wbGF0ZS5sb2FkKHsgd29ya2Zsb3dJZDogJ3dvcmtmbG93LTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHdvcmtmbG93IGV4ZWN1dGlvbnMgd29ya2Zsb3ctMTIzOiBXb3JrZmxvdyBBUEkgRXJyb3InXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgcHJpbWl0aXZlIGRhdGEgdHlwZXMgaW4gc2FuaXRpemF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ2xlYXIgcHJldmlvdXMgbW9ja3MgZmlyc3RcbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgbW9ja0NvbnNvbGVMb2cubW9ja0NsZWFyKCk7XG5cbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKHsgaW5jbHVkZURhdGE6IHRydWUgfSk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyLnJlZ2lzdGVyKG1vY2tTZXJ2ZXIsIGdldENsaWVudEZuKTtcblxuICAgICAgY29uc3QgZXhlY3V0aW9uV2l0aFByaW1pdGl2ZURhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGRhdGE6IHsgcHJpbWl0aXZlU3RyaW5nOiAncHJpbWl0aXZlIHN0cmluZyBkYXRhJyB9LFxuICAgICAgfTtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKGV4ZWN1dGlvbldpdGhQcmltaXRpdmVEYXRhKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuZGF0YS5wcmltaXRpdmVTdHJpbmcpLnRvQmUoJ3ByaW1pdGl2ZSBzdHJpbmcgZGF0YScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgYXJyYXkgZGF0YSBpbiBzYW5pdGl6YXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBDbGVhciBwcmV2aW91cyBtb2NrcyBmaXJzdFxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICBtb2NrQ29uc29sZUxvZy5tb2NrQ2xlYXIoKTtcblxuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoeyBpbmNsdWRlRGF0YTogdHJ1ZSB9KTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuXG4gICAgICBjb25zdCBleGVjdXRpb25XaXRoQXJyYXlEYXRhID0ge1xuICAgICAgICAuLi5tb2NrRXhlY3V0aW9uLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcmVzdWx0RGF0YToge1xuICAgICAgICAgICAgYXJyYXlEYXRhOiBbXG4gICAgICAgICAgICAgIHsgcGFzc3dvcmQ6ICdzZWNyZXQxMjMnLCBub3JtYWxEYXRhOiAnc2FmZScgfSxcbiAgICAgICAgICAgICAgeyB0b2tlbjogJ3Rva2VuNDU2JywgcHVibGljSW5mbzogJ3Zpc2libGUnIH0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoZXhlY3V0aW9uV2l0aEFycmF5RGF0YSk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmRhdGEucmVzdWx0RGF0YS5hcnJheURhdGFbMF0ucGFzc3dvcmQpLnRvQmUoJ1tSRURBQ1RFRF0nKTtcbiAgICAgIGV4cGVjdChkYXRhLmRhdGEucmVzdWx0RGF0YS5hcnJheURhdGFbMF0ubm9ybWFsRGF0YSkudG9CZSgnc2FmZScpO1xuICAgICAgZXhwZWN0KGRhdGEuZGF0YS5yZXN1bHREYXRhLmFycmF5RGF0YVsxXS50b2tlbikudG9CZSgnW1JFREFDVEVEXScpO1xuICAgICAgZXhwZWN0KGRhdGEuZGF0YS5yZXN1bHREYXRhLmFycmF5RGF0YVsxXS5wdWJsaWNJbmZvKS50b0JlKCd2aXNpYmxlJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBleGVjdXRpb25zIHdpdGggb25seSBzdG9wcGVkQXQgc3RhdHVzIGluIHN0YXR1cyBjYWxjdWxhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHN0b3BwZWRFeGVjdXRpb24gPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGZpbmlzaGVkOiBmYWxzZSxcbiAgICAgICAgc3RvcHBlZEF0OiAnMjAyMy0wMS0wMVQxMDowNTowMFonLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcmVzdWx0RGF0YToge1xuICAgICAgICAgICAgLy8gTm8gZXJyb3IsIGp1c3Qgc3RvcHBlZFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1Jlc29sdmVkVmFsdWUoe1xuICAgICAgICBkYXRhOiBbc3RvcHBlZEV4ZWN1dGlvbl0sXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly9leGVjdXRpb25zL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc291cmNlLmxvYWQoKTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgZXhwZWN0KGRhdGEuZXhlY3V0aW9uc0J5U3RhdHVzLnN0b3BwZWQpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zQnlTdGF0dXMuc3VjY2VzcykudG9CZSgwKTtcbiAgICAgIGV4cGVjdChkYXRhLmV4ZWN1dGlvbnNCeVN0YXR1cy5lcnJvcikudG9CZSgwKTtcbiAgICAgIGV4cGVjdChkYXRhLmV4ZWN1dGlvbnNCeVN0YXR1cy5ydW5uaW5nKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnRHVwbGljYXRlIFJlc291cmNlIFRlbXBsYXRlIENvdmVyYWdlJywgKCkgPT4ge1xuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoKTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2xpZW50IG5vdCBpbml0aWFsaXplZCBmb3IgZXhlY3V0aW9uSWQgdGVtcGxhdGUnLCBhc3luYyAoKSA9PiB7XG4gICAgICAoZ2V0Q2xpZW50Rm4gYXMgamVzdC5Nb2NrKS5tb2NrUmV0dXJuVmFsdWUobnVsbCk7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2V4ZWN1dGlvbklkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG5cbiAgICAgIGF3YWl0IGV4cGVjdCh0ZW1wbGF0ZS5sb2FkKHsgZXhlY3V0aW9uSWQ6ICdleGVjLTEyMycgfSkpLnJlamVjdHMudG9UaHJvdyhcbiAgICAgICAgJ244biBjbGllbnQgbm90IGluaXRpYWxpemVkLiBSdW4gaW5pdC1uOG4gZmlyc3QuJ1xuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbG9hZCBleGVjdXRpb24gYnkgZXhlY3V0aW9uSWQgdGVtcGxhdGUgc3VjY2Vzc2Z1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0V4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2V4ZWN1dGlvbklkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgZXhlY3V0aW9uSWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIGV4cGVjdChkYXRhLmlkKS50b0JlKCdleGVjLTEyMycpO1xuICAgICAgZXhwZWN0KGRhdGEucmVzb3VyY2VJbmZvLnR5cGUpLnRvQmUoJ244bi1leGVjdXRpb24nKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0NhY2hlIEV4cGlyYXRpb24gRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGplc3QudXNlRmFrZVRpbWVycygpO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoeyBjYWNoZUR1cmF0aW9uOiA1MCB9KTsgLy8gVmVyeSBzaG9ydCBjYWNoZVxuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgfSk7XG5cbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgamVzdC51c2VSZWFsVGltZXJzKCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBjYWNoZSBleHBpcmF0aW9uIGZvciBsb2dzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUobW9ja0V4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfS9sb2dzJ1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcblxuICAgICAgLy8gRmlyc3QgY2FsbFxuICAgICAgYXdhaXQgdGVtcGxhdGUubG9hZCh7IGlkOiAnZXhlYy0xMjMnIH0pO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIEZhc3QtZm9yd2FyZCB0aW1lIHRvIGV4cGlyZSBjYWNoZVxuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDYwKTtcblxuICAgICAgLy8gU2Vjb25kIGNhbGwgc2hvdWxkIGZldGNoIGFnYWluXG4gICAgICBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRFeGVjdXRpb24pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhY2hlIGV4cGlyYXRpb24gZm9yIHJlY2VudCBleGVjdXRpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogW21vY2tFeGVjdXRpb25dIH0pO1xuXG4gICAgICBjb25zdCByZXNvdXJjZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaSA9PT0gJ244bjovL2V4ZWN1dGlvbnMvcmVjZW50J1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcblxuICAgICAgLy8gRmlyc3QgY2FsbFxuICAgICAgYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBGYXN0LWZvcndhcmQgdGltZSB0byBleHBpcmUgY2FjaGVcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg2MCk7XG5cbiAgICAgIC8vIFNlY29uZCBjYWxsIHNob3VsZCBmZXRjaCBhZ2FpblxuICAgICAgYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FjaGUgZXhwaXJhdGlvbiBmb3IgZmFpbGVkIGV4ZWN1dGlvbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMubW9ja1Jlc29sdmVkVmFsdWUoeyBkYXRhOiBbbW9ja0ZhaWxlZEV4ZWN1dGlvbl0gfSk7XG5cbiAgICAgIGNvbnN0IHJlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9mYWlsdXJlcydcbiAgICAgICk7XG4gICAgICBpZiAoIXJlc291cmNlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdSZXNvdXJjZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgcmVzb3VyY2UgPSByZXNvdXJjZUNhbGxbMF07XG5cbiAgICAgIC8vIEZpcnN0IGNhbGxcbiAgICAgIGF3YWl0IHJlc291cmNlLmxvYWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcblxuICAgICAgLy8gRmFzdC1mb3J3YXJkIHRpbWUgdG8gZXhwaXJlIGNhY2hlXG4gICAgICBqZXN0LmFkdmFuY2VUaW1lcnNCeVRpbWUoNjApO1xuXG4gICAgICAvLyBTZWNvbmQgY2FsbCBzaG91bGQgZmV0Y2ggYWdhaW5cbiAgICAgIGF3YWl0IHJlc291cmNlLmxvYWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbnMpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgaGFuZGxlIGNhY2hlIGV4cGlyYXRpb24gZm9yIGV4ZWN1dGlvbiBzdGF0cycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IFttb2NrRXhlY3V0aW9uXSB9KTtcblxuICAgICAgY29uc3QgcmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly9leGVjdXRpb25zL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghcmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1Jlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCByZXNvdXJjZSA9IHJlc291cmNlQ2FsbFswXTtcblxuICAgICAgLy8gRmlyc3QgY2FsbFxuICAgICAgYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgICAvLyBGYXN0LWZvcndhcmQgdGltZSB0byBleHBpcmUgY2FjaGVcbiAgICAgIGplc3QuYWR2YW5jZVRpbWVyc0J5VGltZSg2MCk7XG5cbiAgICAgIC8vIFNlY29uZCBjYWxsIHNob3VsZCBmZXRjaCBhZ2FpblxuICAgICAgYXdhaXQgcmVzb3VyY2UubG9hZCgpO1xuICAgICAgZXhwZWN0KG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2FjaGUgZXhwaXJhdGlvbiBmb3Igd29ya2Zsb3cgZXhlY3V0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9ucy5tb2NrUmVzb2x2ZWRWYWx1ZSh7IGRhdGE6IFttb2NrRXhlY3V0aW9uXSB9KTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy93b3JrZmxvdy97d29ya2Zsb3dJZH0nXG4gICAgICApO1xuICAgICAgaWYgKCF0ZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignVGVtcGxhdGUgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHRlbXBsYXRlID0gdGVtcGxhdGVDYWxsWzBdO1xuXG4gICAgICAvLyBGaXJzdCBjYWxsXG4gICAgICBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgd29ya2Zsb3dJZDogJ3dvcmtmbG93LTQ1NicgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRFeGVjdXRpb25zKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG5cbiAgICAgIC8vIEZhc3QtZm9yd2FyZCB0aW1lIHRvIGV4cGlyZSBjYWNoZVxuICAgICAgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKDYwKTtcblxuICAgICAgLy8gU2Vjb25kIGNhbGwgc2hvdWxkIGZldGNoIGFnYWluXG4gICAgICBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgd29ya2Zsb3dJZDogJ3dvcmtmbG93LTQ1NicgfSk7XG4gICAgICBleHBlY3QobW9ja0NsaWVudC5nZXRFeGVjdXRpb25zKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMik7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdCcmFuY2ggQ292ZXJhZ2UgRWRnZSBDYXNlcycsICgpID0+IHtcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgbW9ja0NvbnNvbGVMb2cubW9ja0NsZWFyKCk7XG4gICAgICBleGVjdXRpb25NYW5hZ2VyID0gbmV3IEV4ZWN1dGlvblJlc291cmNlTWFuYWdlcigpO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBleGVjdXRpb25zIHdpdGggY29uZmxpY3Rpbmcgc3RhdHVzIGluZGljYXRvcnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25mbGljdGluZ0V4ZWN1dGlvbiA9IHtcbiAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICBzdG9wcGVkQXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHJlc3VsdERhdGE6IHtcbiAgICAgICAgICAgIGVycm9yOiB7XG4gICAgICAgICAgICAgIG1lc3NhZ2U6ICdUZXN0IGVycm9yJyxcbiAgICAgICAgICAgICAgc3RhY2s6ICdFcnJvciBzdGFjayB0cmFjZScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBtb2NrQ2xpZW50LmdldEV4ZWN1dGlvbi5tb2NrUmVzb2x2ZWRWYWx1ZShjb25mbGljdGluZ0V4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgY29uZmxpY3Rpbmcgc3RhdHVzIGdyYWNlZnVsbHlcbiAgICAgIGV4cGVjdChkYXRhLnN0YXR1cykudG9CZSgncnVubmluZycpOyAvLyBOb3QgZmluaXNoZWQsIG5vIHN0b3BwZWRBdCA9IHJ1bm5pbmdcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhLmVycm9yKS50b0VxdWFsKHtcbiAgICAgICAgbWVzc2FnZTogJ1Rlc3QgZXJyb3InLFxuICAgICAgICBzdGFjazogJ0Vycm9yIHN0YWNrIHRyYWNlJyxcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgbm9uLXNlcmlhbGl6YWJsZSBkYXRhIHR5cGVzIGluIHNhbml0aXphdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIENsZWFyIGFsbCBtb2NrcyBmb3IgaXNvbGF0ZWQgdGVzdFxuICAgICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgICBtb2NrQ29uc29sZUxvZy5tb2NrQ2xlYXIoKTtcblxuICAgICAgZXhlY3V0aW9uTWFuYWdlciA9IG5ldyBFeGVjdXRpb25SZXNvdXJjZU1hbmFnZXIoeyBpbmNsdWRlRGF0YTogdHJ1ZSB9KTtcbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIucmVnaXN0ZXIobW9ja1NlcnZlciwgZ2V0Q2xpZW50Rm4pO1xuXG4gICAgICBjb25zdCBleGVjdXRpb25XaXRoQ29tcGxleERhdGEgPSB7XG4gICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICByZXN1bHREYXRhOiB7XG4gICAgICAgICAgICBydW5EYXRhOiB7XG4gICAgICAgICAgICAgICdIVFRQIFJlcXVlc3QnOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBtYWluOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogJ3NlY3JldDEyMycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzd29yZDogJ25lc3RlZC1zZWNyZXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleTogJ2FwaS0xMjMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAndG9rZW4tNDU2JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxEYXRhOiAnc2FmZS1kYXRhJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZURhdGE6ICd0aGlzIHNob3VsZCByZW1haW4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb24ubW9ja1Jlc29sdmVkVmFsdWUoZXhlY3V0aW9uV2l0aENvbXBsZXhEYXRhKTtcblxuICAgICAgY29uc3QgdGVtcGxhdGVDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZVRlbXBsYXRlLm1vY2suY2FsbHMuZmluZChcbiAgICAgICAgY2FsbCA9PiBjYWxsWzBdLnVyaVRlbXBsYXRlID09PSAnbjhuOi8vZXhlY3V0aW9ucy97aWR9J1xuICAgICAgKTtcbiAgICAgIGlmICghdGVtcGxhdGVDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1RlbXBsYXRlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRlbXBsYXRlLmxvYWQoeyBpZDogJ2V4ZWMtMTIzJyB9KTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgLy8gU2hvdWxkIHNhbml0aXplIHNlbnNpdGl2ZSBkYXRhIGFuZCBoYW5kbGUgY29tcGxleCB0eXBlc1xuICAgICAgZXhwZWN0KGRhdGEuZGF0YSkudG9CZURlZmluZWQoKTtcbiAgICAgIGNvbnN0IHJlc3VsdFRleHQgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgIGV4cGVjdChyZXN1bHRUZXh0KS5ub3QudG9Db250YWluKCdzZWNyZXQxMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRUZXh0KS5ub3QudG9Db250YWluKCdhcGktMTIzJyk7XG4gICAgICBleHBlY3QocmVzdWx0VGV4dCkubm90LnRvQ29udGFpbigndG9rZW4tNDU2Jyk7XG4gICAgICBleHBlY3QocmVzdWx0VGV4dCkudG9Db250YWluKCdzYWZlLWRhdGEnKTtcbiAgICAgIGV4cGVjdChyZXN1bHRUZXh0KS50b0NvbnRhaW4oJ3RoaXMgc2hvdWxkIHJlbWFpbicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcyBpbiBleGVjdXRpb24gZGF0YSBsb2dzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gVXNlIHNpbXBsZXIgZGF0YSB0aGF0IHdvbid0IGNhdXNlIEJpZ0ludCBzZXJpYWxpemF0aW9uIGlzc3Vlc1xuICAgICAgY29uc3QgZXhlY3V0aW9uV2l0aENvbXBsZXhEYXRhID0ge1xuICAgICAgICAuLi5tb2NrRXhlY3V0aW9uLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgcmVzdWx0RGF0YToge1xuICAgICAgICAgICAgcnVuRGF0YToge1xuICAgICAgICAgICAgICBOb2RlMTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3Rlc3QgbWVzc2FnZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5lc3RlZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsMToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwyOiAnZGVlcCBuZXN0ZWQgZGF0YScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgTm9kZTI6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIG1haW46IFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBqc29uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFub3RoZXI6ICdub2RlIGRhdGEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKGV4ZWN1dGlvbldpdGhDb21wbGV4RGF0YSk7XG5cbiAgICAgIGNvbnN0IGxvZ3NUZW1wbGF0ZUNhbGwgPSBtb2NrU2VydmVyLmFkZFJlc291cmNlVGVtcGxhdGUubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpVGVtcGxhdGUgPT09ICduOG46Ly9leGVjdXRpb25zL3tpZH0vbG9ncydcbiAgICAgICk7XG4gICAgICBpZiAoIWxvZ3NUZW1wbGF0ZUNhbGwpIHRocm93IG5ldyBFcnJvcignTG9ncyB0ZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgbG9nc1RlbXBsYXRlID0gbG9nc1RlbXBsYXRlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGxvZ3NUZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgY29tcGxleCBkYXRhIHdpdGhvdXQgY3Jhc2hpbmcgLSBsb2dzIGFyZSB0ZXh0IGZvcm1hdFxuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0JlRGVmaW5lZCgpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0NvbnRhaW4oJ0V4ZWN1dGlvbiBJRDogZXhlYy0xMjMnKTtcbiAgICAgIGV4cGVjdChyZXN1bHQudGV4dCkudG9Db250YWluKCdOb2RlOiBOb2RlMScpO1xuICAgICAgZXhwZWN0KHJlc3VsdC50ZXh0KS50b0NvbnRhaW4oJ05vZGU6IE5vZGUyJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBleGVjdXRpb25zIHdpdGggbWlzc2luZyBvciBtYWxmb3JtZWQgZGF0YSBwcm9wZXJ0aWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbWFsZm9ybWVkRXhlY3V0aW9uID0ge1xuICAgICAgICAuLi5tb2NrRXhlY3V0aW9uLFxuICAgICAgICBpZDogJ2V4ZWN1dGlvbi1tYWxmb3JtZWQnLFxuICAgICAgICB3b3JrZmxvd0lkOiAnd29ya2Zsb3ctMTIzJyxcbiAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICBtb2RlOiAndW5rbm93bicsXG4gICAgICAgIHN0YXJ0ZWRBdDogJzIwMjMtMDEtMDFUMTA6MDA6MDBaJyxcbiAgICAgICAgc3RvcHBlZEF0OiB1bmRlZmluZWQsIC8vIE5vIHN0b3AgdGltZSA9IG5vIGR1cmF0aW9uIGNhbGN1bGF0aW9uXG4gICAgICAgIHN0YXR1czogJ3Vua25vd24nIGFzIGFueSxcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgfTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogW21hbGZvcm1lZEV4ZWN1dGlvbl0gfSk7XG5cbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2VDYWxsID0gbW9ja1NlcnZlci5hZGRSZXNvdXJjZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmkgPT09ICduOG46Ly9leGVjdXRpb25zL3N0YXRzJ1xuICAgICAgKTtcbiAgICAgIGlmICghc3RhdHNSZXNvdXJjZUNhbGwpIHRocm93IG5ldyBFcnJvcignU3RhdHMgcmVzb3VyY2UgY2FsbCBub3QgZm91bmQnKTtcbiAgICAgIGNvbnN0IHN0YXRzUmVzb3VyY2UgPSBzdGF0c1Jlc291cmNlQ2FsbFswXTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHN0YXRzUmVzb3VyY2UubG9hZCgpO1xuXG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyZXN1bHQudGV4dCk7XG4gICAgICAvLyBTaG91bGQgaGFuZGxlIG1pc3NpbmcgcHJvcGVydGllcyBncmFjZWZ1bGx5XG4gICAgICBleHBlY3QoZGF0YS50b3RhbEV4ZWN1dGlvbnMpLnRvQmUoMSk7XG4gICAgICBleHBlY3QoZGF0YS5leGVjdXRpb25zQnlTdGF0dXMpLnRvQmVEZWZpbmVkKCk7XG4gICAgICBleHBlY3QoZGF0YS5hdmVyYWdlRHVyYXRpb24pLnRvQmUoMCk7IC8vIE5vIHRpbWluZyBkYXRhIGF2YWlsYWJsZVxuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZXhlY3V0aW9uIHN0YXR1cyBkZXRlcm1pbmF0aW9uIHdpdGggZWRnZSBjYXNlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGVkZ2VDYXNlRXhlY3V0aW9ucyA9IFtcbiAgICAgICAge1xuICAgICAgICAgIC4uLm1vY2tFeGVjdXRpb24sXG4gICAgICAgICAgaWQ6ICdleGVjLTEnLFxuICAgICAgICAgIGZpbmlzaGVkOiB0cnVlLFxuICAgICAgICAgIHN0b3BwZWRBdDogJzIwMjMtMDEtMDFUMTI6MDA6MDBaJyxcbiAgICAgICAgICBkYXRhOiB7IHJlc3VsdERhdGE6IHsgZXJyb3I6IG51bGwgfSB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgICBpZDogJ2V4ZWMtMicsXG4gICAgICAgICAgZmluaXNoZWQ6IGZhbHNlLFxuICAgICAgICAgIHN0b3BwZWRBdDogJzIwMjMtMDEtMDFUMTI6MDA6MDBaJywgLy8gU3RvcHBlZCBidXQgbm90IGZpbmlzaGVkXG4gICAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgICBpZDogJ2V4ZWMtMycsXG4gICAgICAgICAgZmluaXNoZWQ6IHRydWUsXG4gICAgICAgICAgc3RvcHBlZEF0OiB1bmRlZmluZWQsIC8vIEZpbmlzaGVkIGJ1dCBubyBzdG9wIHRpbWVcbiAgICAgICAgICBkYXRhOiB7IHJlc3VsdERhdGE6IHsgbGFzdE5vZGVFeGVjdXRlZDogJ0ZpbmFsTm9kZScgfSB9LFxuICAgICAgICB9LFxuICAgICAgXTtcblxuICAgICAgbW9ja0NsaWVudC5nZXRFeGVjdXRpb25zLm1vY2tSZXNvbHZlZFZhbHVlKHsgZGF0YTogZWRnZUNhc2VFeGVjdXRpb25zIH0pO1xuXG4gICAgICBjb25zdCBzdGF0c1Jlc291cmNlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2UubW9jay5jYWxscy5maW5kKFxuICAgICAgICBjYWxsID0+IGNhbGxbMF0udXJpID09PSAnbjhuOi8vZXhlY3V0aW9ucy9zdGF0cydcbiAgICAgICk7XG4gICAgICBpZiAoIXN0YXRzUmVzb3VyY2VDYWxsKSB0aHJvdyBuZXcgRXJyb3IoJ1N0YXRzIHJlc291cmNlIGNhbGwgbm90IGZvdW5kJyk7XG4gICAgICBjb25zdCBzdGF0c1Jlc291cmNlID0gc3RhdHNSZXNvdXJjZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBzdGF0c1Jlc291cmNlLmxvYWQoKTtcblxuICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UocmVzdWx0LnRleHQpO1xuICAgICAgLy8gU2hvdWxkIGhhbmRsZSB2YXJpb3VzIHN0YXR1cyBjb21iaW5hdGlvbnNcbiAgICAgIGV4cGVjdChkYXRhLnRvdGFsRXhlY3V0aW9ucykudG9CZSgzKTtcbiAgICAgIGV4cGVjdChkYXRhLmV4ZWN1dGlvbnNCeVN0YXR1cykudG9CZURlZmluZWQoKTtcbiAgICAgIGV4cGVjdCh0eXBlb2YgZGF0YS5hdmVyYWdlRHVyYXRpb24pLnRvQmUoJ251bWJlcicpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGF0YSB0cnVuY2F0aW9uIGZvciB2ZXJ5IGxhcmdlIGV4ZWN1dGlvbiBkYXRhJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQ2xlYXIgbW9ja3MgZm9yIGlzb2xhdGVkIHRlc3RcbiAgICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgICAgbW9ja0NvbnNvbGVMb2cubW9ja0NsZWFyKCk7XG5cbiAgICAgIGV4ZWN1dGlvbk1hbmFnZXIgPSBuZXcgRXhlY3V0aW9uUmVzb3VyY2VNYW5hZ2VyKHtcbiAgICAgICAgaW5jbHVkZURhdGE6IHRydWUsXG4gICAgICAgIG1heERhdGFTaXplOiAxMDAwLCAvLyBTbWFsbCBsaW1pdCB0byB0cmlnZ2VyIHRydW5jYXRpb25cbiAgICAgIH0pO1xuICAgICAgZXhlY3V0aW9uTWFuYWdlci5yZWdpc3Rlcihtb2NrU2VydmVyLCBnZXRDbGllbnRGbik7XG5cbiAgICAgIGNvbnN0IGxhcmdlRGF0YUV4ZWN1dGlvbiA9IHtcbiAgICAgICAgLi4ubW9ja0V4ZWN1dGlvbixcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHJlc3VsdERhdGE6IHtcbiAgICAgICAgICAgIHJ1bkRhdGE6IHtcbiAgICAgICAgICAgICAgTGFyZ2VEYXRhTm9kZTogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWFpbjogW1xuICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAganNvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhcmdlRmllbGQ6ICd4Jy5yZXBlYXQoMTAwMDApLCAvLyBWZXJ5IGxhcmdlIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vcm1hbEZpZWxkOiAnbm9ybWFsIHZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH07XG5cbiAgICAgIG1vY2tDbGllbnQuZ2V0RXhlY3V0aW9uLm1vY2tSZXNvbHZlZFZhbHVlKGxhcmdlRGF0YUV4ZWN1dGlvbik7XG5cbiAgICAgIGNvbnN0IHRlbXBsYXRlQ2FsbCA9IG1vY2tTZXJ2ZXIuYWRkUmVzb3VyY2VUZW1wbGF0ZS5tb2NrLmNhbGxzLmZpbmQoXG4gICAgICAgIGNhbGwgPT4gY2FsbFswXS51cmlUZW1wbGF0ZSA9PT0gJ244bjovL2V4ZWN1dGlvbnMve2lkfSdcbiAgICAgICk7XG4gICAgICBpZiAoIXRlbXBsYXRlQ2FsbCkgdGhyb3cgbmV3IEVycm9yKCdUZW1wbGF0ZSBjYWxsIG5vdCBmb3VuZCcpO1xuICAgICAgY29uc3QgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhbGxbMF07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0ZW1wbGF0ZS5sb2FkKHsgaWQ6ICdleGVjLTEyMycgfSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3VsdC50ZXh0KTtcbiAgICAgIC8vIFNob3VsZCBoYW5kbGUgbGFyZ2UgZGF0YSBhcHByb3ByaWF0ZWx5XG4gICAgICBleHBlY3QoZGF0YS5kYXRhKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgICAvLyBUaGUgcmVzdWx0IHNob3VsZCBiZSBzZXJpYWxpemFibGUgYXMgSlNPTiAobm8gY2lyY3VsYXIgcmVmcyBvciBmdW5jdGlvbnMpXG4gICAgICBleHBlY3QoKCkgPT4gSlNPTi5zdHJpbmdpZnkoZGF0YSkpLm5vdC50b1Rocm93KCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=