{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/transport/sseTransport.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/transport/sseTransport.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';\nimport {\n  SSETransportManager,\n  createSSETransport,\n  SSEUtils,\n  DEFAULT_SSE_CONFIG,\n} from '../../../src/transport/sseTransport';\nimport type { TransportConfig } from '../../../src/transport/transportConfig';\n\n// Mock FastMCP\nconst mockFastMCP = {\n  start: jest.fn(() => Promise.resolve()),\n  stop: jest.fn(() => Promise.resolve()),\n  addTool: jest.fn().mockReturnThis(),\n  addResource: jest.fn().mockReturnThis(),\n  on: jest.fn().mockReturnThis(),\n};\n\n// Mock console methods to capture output\nconst originalConsole = {\n  log: console.log,\n  error: console.error,\n};\n\nconst mockConsole = {\n  log: jest.fn(),\n  error: jest.fn(),\n};\n\ndescribe('SSE Transport', () => {\n  let sseTransportManager: SSETransportManager;\n  let mockConfig: TransportConfig;\n\n  // Helper function to create SSE config with defaults\n  const createSSEConfig = (\n    overrides: Partial<NonNullable<TransportConfig['sse']>> = {}\n  ): TransportConfig => ({\n    type: 'sse',\n    sse: {\n      port: 8080,\n      endpoint: '/sse',\n      host: 'localhost',\n      cors: { enabled: true, origins: ['*'], credentials: false },\n      healthCheck: { enabled: true, endpoint: '/health' },\n      ...overrides,\n    },\n  });\n\n  beforeEach(() => {\n    // Setup mock console\n    (global as any).console = mockConsole;\n\n    // Reset mocks\n    jest.clearAllMocks();\n    mockFastMCP.start.mockClear();\n    mockFastMCP.stop.mockClear();\n\n    // Default SSE configuration for testing\n    mockConfig = {\n      type: 'sse',\n      sse: {\n        port: 8080,\n        endpoint: '/sse',\n        host: 'localhost',\n        cors: {\n          enabled: true,\n          origins: ['*'],\n          credentials: false,\n        },\n        healthCheck: {\n          enabled: true,\n          endpoint: '/health',\n        },\n      },\n    };\n\n    sseTransportManager = new SSETransportManager(mockFastMCP as any, mockConfig);\n  });\n\n  afterEach(() => {\n    // Restore original console\n    (global as any).console = originalConsole;\n  });\n\n  describe('SSETransportManager', () => {\n    describe('Constructor', () => {\n      it('should create instance with server and config', () => {\n        expect(sseTransportManager).toBeInstanceOf(SSETransportManager);\n      });\n\n      it('should accept different FastMCP server instances', () => {\n        const anotherMockServer = { ...mockFastMCP };\n        const manager = new SSETransportManager(anotherMockServer as any, mockConfig);\n        expect(manager).toBeInstanceOf(SSETransportManager);\n      });\n    });\n\n    describe('start()', () => {\n      it('should start SSE server with correct configuration', async () => {\n        await sseTransportManager.start();\n\n        expect(mockFastMCP.start).toHaveBeenCalledWith({\n          transportType: 'httpStream',\n          httpStream: {\n            port: 8080,\n            endpoint: '/sse',\n          },\n        });\n\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '🚀 Starting n8n MCP Server with SSE transport'\n        );\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '📡 Server will be available at: http://localhost:8080/sse'\n        );\n      });\n\n      it('should start server with custom port and endpoint', async () => {\n        const customConfig = createSSEConfig({\n          port: 3000,\n          endpoint: '/api/mcp',\n          host: '0.0.0.0',\n          cors: { enabled: false, origins: [], credentials: false },\n          healthCheck: { enabled: false, endpoint: '/health' },\n        });\n\n        const customManager = new SSETransportManager(mockFastMCP as any, customConfig);\n        await customManager.start();\n\n        expect(mockFastMCP.start).toHaveBeenCalledWith({\n          transportType: 'httpStream',\n          httpStream: {\n            port: 3000,\n            endpoint: '/api/mcp',\n          },\n        });\n\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '📡 Server will be available at: http://0.0.0.0:3000/api/mcp'\n        );\n      });\n\n      it('should throw error when SSE transport is not configured', async () => {\n        const invalidConfig: TransportConfig = { type: 'stdio' };\n        const invalidManager = new SSETransportManager(mockFastMCP as any, invalidConfig);\n\n        await expect(invalidManager.start()).rejects.toThrow('SSE transport not configured');\n      });\n\n      it('should throw error when SSE config is missing', async () => {\n        const invalidConfig: TransportConfig = { type: 'sse' };\n        const invalidManager = new SSETransportManager(mockFastMCP as any, invalidConfig);\n\n        await expect(invalidManager.start()).rejects.toThrow('SSE transport not configured');\n      });\n\n      it('should setup health check when enabled', async () => {\n        await sseTransportManager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('💚 Health check endpoint: /health');\n      });\n\n      it('should not setup health check when disabled', async () => {\n        const configWithoutHealthCheck: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 8080,\n            endpoint: '/sse',\n            host: 'localhost',\n            cors: { enabled: true, origins: ['*'], credentials: false },\n            healthCheck: { enabled: false, endpoint: '/health' },\n          },\n        };\n\n        const manager = new SSETransportManager(mockFastMCP as any, configWithoutHealthCheck);\n        await manager.start();\n\n        // Should not log health check endpoint\n        expect(mockConsole.log).not.toHaveBeenCalledWith(\n          expect.stringContaining('Health check endpoint')\n        );\n      });\n\n      it('should log comprehensive server information', async () => {\n        await sseTransportManager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('\\n📋 Server Configuration:');\n        expect(mockConsole.log).toHaveBeenCalledWith('   Transport: SSE (Server-Sent Events)');\n        expect(mockConsole.log).toHaveBeenCalledWith('   Host: localhost');\n        expect(mockConsole.log).toHaveBeenCalledWith('   Port: 8080');\n        expect(mockConsole.log).toHaveBeenCalledWith('   Endpoint: /sse');\n        expect(mockConsole.log).toHaveBeenCalledWith('   CORS: Enabled');\n      });\n\n      it('should log CORS information when enabled', async () => {\n        const corsConfig: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 8080,\n            endpoint: '/sse',\n            host: 'localhost',\n            cors: {\n              enabled: true,\n              origins: ['https://example.com', 'https://test.com'],\n              credentials: true,\n            },\n            healthCheck: { enabled: true, endpoint: '/health' },\n          },\n        };\n\n        const manager = new SSETransportManager(mockFastMCP as any, corsConfig);\n        await manager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('   CORS: Enabled');\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '   Allowed Origins: https://example.com, https://test.com'\n        );\n        expect(mockConsole.log).toHaveBeenCalledWith('   Credentials: Allowed');\n      });\n\n      it('should not log CORS details when disabled', async () => {\n        const noCorsConfig: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 8080,\n            endpoint: '/sse',\n            host: 'localhost',\n            cors: { enabled: false, origins: [], credentials: false },\n            healthCheck: { enabled: true, endpoint: '/health' },\n          },\n        };\n\n        const manager = new SSETransportManager(mockFastMCP as any, noCorsConfig);\n        await manager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('   CORS: Disabled');\n        expect(mockConsole.log).not.toHaveBeenCalledWith(\n          expect.stringContaining('Allowed Origins')\n        );\n        expect(mockConsole.log).not.toHaveBeenCalledWith(expect.stringContaining('Credentials'));\n      });\n\n      it('should log connection instructions', async () => {\n        await sseTransportManager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('\\n🔌 Connection Instructions:');\n        expect(mockConsole.log).toHaveBeenCalledWith('   For MCP Inspector:');\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '   npx @modelcontextprotocol/inspector http://localhost:8080/sse'\n        );\n      });\n\n      it('should log Claude Desktop configuration instructions', async () => {\n        await sseTransportManager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '   For Claude Desktop (claude_desktop_config.json):'\n        );\n        expect(mockConsole.log).toHaveBeenCalledWith('   {');\n        expect(mockConsole.log).toHaveBeenCalledWith('     \"mcpServers\": {');\n        expect(mockConsole.log).toHaveBeenCalledWith('       \"n8n\": {');\n        expect(mockConsole.log).toHaveBeenCalledWith('         \"command\": \"npx\",');\n        expect(mockConsole.log).toHaveBeenCalledWith(\n          '         \"args\": [\"@illuminaresolutions/n8n-mcp-server\"],'\n        );\n        expect(mockConsole.log).toHaveBeenCalledWith('         \"env\": {');\n        expect(mockConsole.log).toHaveBeenCalledWith('           \"N8N_MCP_TRANSPORT\": \"sse\",');\n        expect(mockConsole.log).toHaveBeenCalledWith('           \"N8N_MCP_SSE_PORT\": \"8080\",');\n        expect(mockConsole.log).toHaveBeenCalledWith('           \"N8N_MCP_SSE_HOST\": \"localhost\"');\n        expect(mockConsole.log).toHaveBeenCalledWith('         }');\n        expect(mockConsole.log).toHaveBeenCalledWith('       }');\n        expect(mockConsole.log).toHaveBeenCalledWith('     }');\n        expect(mockConsole.log).toHaveBeenCalledWith('   }');\n      });\n\n      it('should handle FastMCP server start failure', async () => {\n        const error = new Error('Failed to start server');\n        mockFastMCP.start.mockRejectedValueOnce(error);\n\n        await expect(sseTransportManager.start()).rejects.toThrow('Failed to start server');\n      });\n    });\n\n    describe('stop()', () => {\n      it('should log stop message', async () => {\n        await sseTransportManager.stop();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('🛑 Stopping SSE transport server...');\n      });\n\n      it('should be called without errors', async () => {\n        await expect(sseTransportManager.stop()).resolves.toBeUndefined();\n      });\n    });\n\n    describe('setupHealthCheck()', () => {\n      it('should handle missing SSE config gracefully', async () => {\n        const configWithoutSSE: TransportConfig = { type: 'sse' };\n        const manager = new SSETransportManager(mockFastMCP as any, configWithoutSSE);\n\n        // This should not throw - the method handles missing config\n        await expect(manager.start()).rejects.toThrow('SSE transport not configured');\n      });\n\n      it('should handle SSE config without healthCheck property', async () => {\n        const configWithoutHealthCheck: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 8080,\n            endpoint: '/sse',\n            host: 'localhost',\n            cors: { enabled: true, origins: ['*'], credentials: false },\n          } as any, // Remove healthCheck property completely\n        };\n\n        const manager = new SSETransportManager(mockFastMCP as any, configWithoutHealthCheck);\n        await manager.start();\n\n        // Should not log health check endpoint when healthCheck is undefined\n        expect(mockConsole.log).not.toHaveBeenCalledWith(\n          expect.stringContaining('Health check endpoint')\n        );\n      });\n\n      it('should setup health check with custom endpoint', async () => {\n        const customHealthConfig: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 8080,\n            endpoint: '/sse',\n            host: 'localhost',\n            cors: { enabled: true, origins: ['*'], credentials: false },\n            healthCheck: { enabled: true, endpoint: '/status' },\n          },\n        };\n\n        const manager = new SSETransportManager(mockFastMCP as any, customHealthConfig);\n        await manager.start();\n\n        expect(mockConsole.log).toHaveBeenCalledWith('💚 Health check endpoint: /status');\n      });\n    });\n\n    describe('logServerInfo()', () => {\n      it('should handle missing SSE config gracefully', async () => {\n        const configWithoutSSE: TransportConfig = { type: 'sse' };\n        const manager = new SSETransportManager(mockFastMCP as any, configWithoutSSE);\n\n        // Should not throw when trying to log server info\n        await expect(manager.start()).rejects.toThrow('SSE transport not configured');\n      });\n\n      it('should log server info with different host configurations', async () => {\n        const configs = [\n          { host: 'localhost', expectedHost: 'localhost' },\n          { host: '0.0.0.0', expectedHost: '0.0.0.0' },\n          { host: '127.0.0.1', expectedHost: '127.0.0.1' },\n          { host: 'example.com', expectedHost: 'example.com' },\n        ];\n\n        for (const { host, expectedHost } of configs) {\n          const config: TransportConfig = {\n            type: 'sse',\n            sse: { ...(mockConfig.sse ?? {}), host } as any,\n          };\n\n          const manager = new SSETransportManager(mockFastMCP as any, config);\n          mockConsole.log.mockClear();\n\n          await manager.start();\n\n          expect(mockConsole.log).toHaveBeenCalledWith(`   Host: ${expectedHost}`);\n        }\n      });\n    });\n  });\n\n  describe('createSSETransport', () => {\n    it('should create SSETransportManager instance', () => {\n      const transport = createSSETransport(mockFastMCP as any, mockConfig);\n\n      expect(transport).toBeInstanceOf(SSETransportManager);\n    });\n\n    it('should pass server and config to constructor', () => {\n      const customServer = { ...mockFastMCP };\n      const customConfig = createSSEConfig({ port: 9000 });\n\n      const transport = createSSETransport(customServer as any, customConfig);\n\n      expect(transport).toBeInstanceOf(SSETransportManager);\n    });\n  });\n\n  describe('SSEUtils', () => {\n    describe('validateConfig()', () => {\n      it('should return true for valid SSE configuration', () => {\n        const isValid = SSEUtils.validateConfig(mockConfig);\n        expect(isValid).toBe(true);\n      });\n\n      it('should return false for non-SSE configuration', () => {\n        const stdioConfig: TransportConfig = { type: 'stdio' };\n        const isValid = SSEUtils.validateConfig(stdioConfig);\n        expect(isValid).toBe(false);\n      });\n\n      it('should return false when SSE config is missing', () => {\n        const invalidConfig: TransportConfig = { type: 'sse' };\n        const isValid = SSEUtils.validateConfig(invalidConfig);\n        expect(isValid).toBe(false);\n      });\n\n      it('should validate port range', () => {\n        // Valid ports\n        const validConfig1: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 1024 } as any,\n        };\n        expect(SSEUtils.validateConfig(validConfig1)).toBe(true);\n\n        const validConfig2: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 65535 } as any,\n        };\n        expect(SSEUtils.validateConfig(validConfig2)).toBe(true);\n\n        // Invalid ports\n        const invalidConfig1: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 1023 } as any,\n        };\n        expect(SSEUtils.validateConfig(invalidConfig1)).toBe(false);\n        expect(mockConsole.error).toHaveBeenCalledWith(\n          '❌ Invalid port: 1023. Must be between 1024-65535'\n        );\n\n        const invalidConfig2: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 65536 } as any,\n        };\n        expect(SSEUtils.validateConfig(invalidConfig2)).toBe(false);\n        expect(mockConsole.error).toHaveBeenCalledWith(\n          '❌ Invalid port: 65536. Must be between 1024-65535'\n        );\n      });\n\n      it('should validate endpoint format', () => {\n        // Valid endpoints\n        const validConfig1: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), endpoint: '/sse' } as any,\n        };\n        expect(SSEUtils.validateConfig(validConfig1)).toBe(true);\n\n        const validConfig2: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), endpoint: '/api/mcp' } as any,\n        };\n        expect(SSEUtils.validateConfig(validConfig2)).toBe(true);\n\n        // Invalid endpoints\n        const invalidConfig: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), endpoint: 'sse' } as any,\n        };\n        expect(SSEUtils.validateConfig(invalidConfig)).toBe(false);\n        expect(mockConsole.error).toHaveBeenCalledWith(\n          \"❌ Invalid endpoint: sse. Must start with '/'\"\n        );\n      });\n\n      it('should handle edge case endpoints', () => {\n        const edgeCases = [\n          { endpoint: '/', valid: true },\n          { endpoint: '/a', valid: true },\n          { endpoint: '/very/long/endpoint/path', valid: true },\n          { endpoint: '', valid: false },\n          { endpoint: 'no-slash', valid: false },\n          { endpoint: 'api/mcp', valid: false },\n        ];\n\n        edgeCases.forEach(({ endpoint, valid }) => {\n          const config: TransportConfig = {\n            type: 'sse',\n            sse: { ...(mockConfig.sse ?? {}), endpoint } as any,\n          };\n\n          expect(SSEUtils.validateConfig(config)).toBe(valid);\n        });\n      });\n    });\n\n    describe('getConnectionUrl()', () => {\n      it('should return correct HTTP URL for standard port', () => {\n        const url = SSEUtils.getConnectionUrl(mockConfig);\n        expect(url).toBe('http://localhost:8080/sse');\n      });\n\n      it('should return correct HTTPS URL for port 443', () => {\n        const httpsConfig: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 443 } as any,\n        };\n\n        const url = SSEUtils.getConnectionUrl(httpsConfig);\n        expect(url).toBe('https://localhost:443/sse');\n      });\n\n      it('should handle different hosts', () => {\n        const hosts = [\n          { host: '0.0.0.0', expected: 'http://0.0.0.0:8080/sse' },\n          { host: '127.0.0.1', expected: 'http://127.0.0.1:8080/sse' },\n          { host: 'example.com', expected: 'http://example.com:8080/sse' },\n        ];\n\n        hosts.forEach(({ host, expected }) => {\n          const config: TransportConfig = {\n            type: 'sse',\n            sse: { ...(mockConfig.sse ?? {}), host } as any,\n          };\n\n          const url = SSEUtils.getConnectionUrl(config);\n          expect(url).toBe(expected);\n        });\n      });\n\n      it('should handle custom endpoints', () => {\n        const config: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), endpoint: '/api/mcp' } as any,\n        };\n\n        const url = SSEUtils.getConnectionUrl(config);\n        expect(url).toBe('http://localhost:8080/api/mcp');\n      });\n\n      it('should return null for non-SSE configuration', () => {\n        const stdioConfig: TransportConfig = { type: 'stdio' };\n        const url = SSEUtils.getConnectionUrl(stdioConfig);\n        expect(url).toBeNull();\n      });\n\n      it('should return null when SSE config is missing', () => {\n        const invalidConfig: TransportConfig = { type: 'sse' };\n        const url = SSEUtils.getConnectionUrl(invalidConfig);\n        expect(url).toBeNull();\n      });\n    });\n\n    describe('formatConnectionInstructions()', () => {\n      it('should return formatted instructions for valid configuration', () => {\n        const instructions = SSEUtils.formatConnectionInstructions(mockConfig);\n\n        expect(instructions).toEqual({\n          inspector: 'npx @modelcontextprotocol/inspector http://localhost:8080/sse',\n          claudeDesktop: {\n            mcpServers: {\n              n8n: {\n                command: 'npx',\n                args: ['@illuminaresolutions/n8n-mcp-server'],\n                env: {\n                  N8N_MCP_TRANSPORT: 'sse',\n                  N8N_MCP_SSE_PORT: '8080',\n                  N8N_MCP_SSE_HOST: 'localhost',\n                },\n              },\n            },\n          },\n          curl: 'curl -N -H \"Accept: text/event-stream\" http://localhost:8080/sse',\n        });\n      });\n\n      it('should handle custom configuration', () => {\n        const customConfig: TransportConfig = {\n          type: 'sse',\n          sse: {\n            port: 3000,\n            endpoint: '/api/mcp',\n            host: '0.0.0.0',\n            cors: { enabled: true, origins: ['*'], credentials: false },\n            healthCheck: { enabled: true, endpoint: '/health' },\n          },\n        };\n\n        const instructions = SSEUtils.formatConnectionInstructions(customConfig);\n\n        expect(instructions?.inspector).toBe(\n          'npx @modelcontextprotocol/inspector http://0.0.0.0:3000/api/mcp'\n        );\n        expect((instructions?.claudeDesktop as any).mcpServers.n8n.env.N8N_MCP_SSE_PORT).toBe(\n          '3000'\n        );\n        expect((instructions?.claudeDesktop as any).mcpServers.n8n.env.N8N_MCP_SSE_HOST).toBe(\n          '0.0.0.0'\n        );\n        expect(instructions?.curl).toBe(\n          'curl -N -H \"Accept: text/event-stream\" http://0.0.0.0:3000/api/mcp'\n        );\n      });\n\n      it('should return null for invalid configuration', () => {\n        const stdioConfig: TransportConfig = { type: 'stdio' };\n        const instructions = SSEUtils.formatConnectionInstructions(stdioConfig);\n        expect(instructions).toBeNull();\n      });\n\n      it('should return null when SSE config is missing', () => {\n        const invalidConfig: TransportConfig = { type: 'sse' };\n        const instructions = SSEUtils.formatConnectionInstructions(invalidConfig);\n        expect(instructions).toBeNull();\n      });\n\n      it('should handle port 443 with HTTPS', () => {\n        const httpsConfig: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port: 443, host: 'secure.example.com' } as any,\n        };\n\n        const instructions = SSEUtils.formatConnectionInstructions(httpsConfig);\n\n        expect(instructions?.inspector).toBe(\n          'npx @modelcontextprotocol/inspector https://secure.example.com:443/sse'\n        );\n        expect(instructions?.curl).toBe(\n          'curl -N -H \"Accept: text/event-stream\" https://secure.example.com:443/sse'\n        );\n      });\n    });\n  });\n\n  describe('DEFAULT_SSE_CONFIG', () => {\n    it('should have correct default values', () => {\n      expect(DEFAULT_SSE_CONFIG).toEqual({\n        port: 8080,\n        endpoint: '/sse',\n        host: 'localhost',\n        cors: {\n          enabled: true,\n          origins: ['*'],\n          credentials: false,\n        },\n        healthCheck: {\n          enabled: true,\n          endpoint: '/health',\n        },\n      });\n    });\n\n    it('should be a readonly object', () => {\n      // TypeScript treats it as readonly due to 'as const', but JavaScript doesn't enforce it\n      // This test verifies the object exists and has the expected structure\n      expect(DEFAULT_SSE_CONFIG).toBeDefined();\n      expect(typeof DEFAULT_SSE_CONFIG).toBe('object');\n      expect(DEFAULT_SSE_CONFIG.port).toBe(8080);\n    });\n\n    it('should have all required properties', () => {\n      const requiredProperties = ['port', 'endpoint', 'host', 'cors', 'healthCheck'];\n      requiredProperties.forEach(prop => {\n        expect(DEFAULT_SSE_CONFIG).toHaveProperty(prop);\n      });\n    });\n\n    it('should have valid port within acceptable range', () => {\n      expect(DEFAULT_SSE_CONFIG.port).toBeGreaterThanOrEqual(1024);\n      expect(DEFAULT_SSE_CONFIG.port).toBeLessThanOrEqual(65535);\n    });\n\n    it('should have valid endpoint format', () => {\n      expect(DEFAULT_SSE_CONFIG.endpoint).toMatch(/^\\/\\w+/);\n    });\n  });\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle undefined SSE config gracefully', () => {\n      const configWithUndefinedSSE = { type: 'sse' as const, sse: undefined };\n      expect(\n        () => new SSETransportManager(mockFastMCP as any, configWithUndefinedSSE)\n      ).not.toThrow();\n    });\n\n    it('should handle partial SSE configurations', () => {\n      const partialConfig: TransportConfig = {\n        type: 'sse',\n        sse: {\n          port: 8080,\n          endpoint: '/sse',\n          host: 'localhost',\n          cors: { enabled: true, origins: ['*'], credentials: false },\n          healthCheck: { enabled: true, endpoint: '/health' },\n        },\n      };\n\n      expect(() => new SSETransportManager(mockFastMCP as any, partialConfig)).not.toThrow();\n    });\n\n    it('should handle FastMCP server errors during startup', async () => {\n      const errorMessage = 'Port already in use';\n      mockFastMCP.start.mockRejectedValueOnce(new Error(errorMessage));\n\n      await expect(sseTransportManager.start()).rejects.toThrow(errorMessage);\n    });\n\n    it('should handle missing environment in logs', async () => {\n      // Test that logging doesn't throw even with minimal config\n      await sseTransportManager.start();\n\n      expect(mockConsole.log).toHaveBeenCalled();\n    });\n\n    it('should validate extreme port values', () => {\n      const extremeCases = [\n        { port: 0, valid: false },\n        { port: 1, valid: false },\n        { port: 1023, valid: false },\n        { port: 1024, valid: true },\n        { port: 65535, valid: true },\n        { port: 65536, valid: false },\n        { port: 99999, valid: false },\n      ];\n\n      extremeCases.forEach(({ port, valid }) => {\n        const config: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), port } as any,\n        };\n\n        expect(SSEUtils.validateConfig(config)).toBe(valid);\n      });\n    });\n\n    it('should handle various endpoint formats', () => {\n      const endpointCases = [\n        { endpoint: '/', valid: true },\n        { endpoint: '/sse', valid: true },\n        { endpoint: '/api/v1/mcp', valid: true },\n        { endpoint: '/very-long-endpoint-name', valid: true },\n        { endpoint: '', valid: false },\n        { endpoint: 'no-leading-slash', valid: false },\n        { endpoint: ' /with-space', valid: false },\n      ];\n\n      endpointCases.forEach(({ endpoint, valid }) => {\n        const config: TransportConfig = {\n          type: 'sse',\n          sse: { ...(mockConfig.sse ?? {}), endpoint } as any,\n        };\n\n        expect(SSEUtils.validateConfig(config)).toBe(valid);\n      });\n    });\n  });\n\n  describe('Integration with TransportConfig', () => {\n    it('should work with detectTransportConfig result', () => {\n      // This would typically come from detectTransportConfig()\n      const detectedConfig: TransportConfig = {\n        type: 'sse',\n        sse: {\n          port: 8080,\n          endpoint: '/sse',\n          host: 'localhost',\n          cors: { enabled: true, origins: ['*'], credentials: false },\n          healthCheck: { enabled: true, endpoint: '/health' },\n        },\n      };\n\n      expect(() => new SSETransportManager(mockFastMCP as any, detectedConfig)).not.toThrow();\n      expect(SSEUtils.validateConfig(detectedConfig)).toBe(true);\n    });\n\n    it('should handle configuration from environment parsing', () => {\n      // This would typically come from parseConfigFromEnv()\n      const envConfig: TransportConfig = {\n        type: 'sse',\n        sse: {\n          port: 3000,\n          endpoint: '/mcp',\n          host: '0.0.0.0',\n          cors: {\n            enabled: true,\n            origins: ['https://example.com'],\n            credentials: true,\n          },\n          healthCheck: {\n            enabled: false,\n            endpoint: '/status',\n          },\n        },\n      };\n\n      expect(() => new SSETransportManager(mockFastMCP as any, envConfig)).not.toThrow();\n      expect(SSEUtils.validateConfig(envConfig)).toBe(true);\n    });\n  });\n});\n"],"version":3}