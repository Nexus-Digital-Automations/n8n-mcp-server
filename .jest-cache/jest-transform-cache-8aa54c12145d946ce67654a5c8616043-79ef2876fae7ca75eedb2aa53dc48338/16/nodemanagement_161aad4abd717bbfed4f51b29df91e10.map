{"version":3,"names":["cov_2qv86yv8dz","actualCoverage","z","UserError","PackageNameSchema","s","object","packageName","string","min","InstallPackageSchema","name","version","optional","SearchNodesSchema","nodeType","workflowId","activeOnly","boolean","default","limit","number","max","NodeTypeSchema","UpdateNodeSchema","nodeId","updates","parameters","record","unknown","disabled","notes","position","tuple","DynamicParametersSchema","property","currentNodeParameters","credentials","path","methodName","loadOptionsMethod","formatPackageList","packages","f","length","b","map","pkg","nodeCount","installedNodes","status","failedLoading","installedVersion","Date","updatedAt","toLocaleString","join","formatNodeTypeList","nodeTypes","node","groups","group","c","displayName","description","formatSearchResults","results","result","isWorkflowActive","type","workflowName","formatUsageStats","stats","stat","lastUsed","totalCount","activeWorkflowCount","createNodeManagementTools","getClient","server","addTool","annotations","title","readOnlyHint","destructiveHint","idempotentHint","openWorldHint","execute","client","response","getCommunityPackages","data","error","Error","message","args","packageData","installedPackage","installCommunityPackage","includes","updatedPackage","updateCommunityPackage","uninstallCommunityPackage","communityOnly","getCommunityNodeTypes","getNodeTypes","limitedResults","slice","hasMore","getNodeType","cred","required","properties","prop","hasMoreProps","documentationUrl","workflow","getWorkflow","nodes","filteredNodes","filter","push","id","active","workflowsResponse","getWorkflows","workflows","wf","fullWorkflow","includeInactive","usageMap","workflowIds","Object","values","sort","a","nodeIndex","findIndex","originalNode","updatedNode","updateWorkflow","changes","keys","key","JSON","stringify","options","getDynamicNodeParameters","formatted","param","value","classification","classifyAINode","capabilities","aiCapabilities","cap","integrations","suggestedIntegrations","int","isAINode","Math","round","confidenceScore","suggestions","getAINodeSuggestions","suggestion","index","alternatives","alternativeNodes","reasoning","confidence"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts"],"sourcesContent":["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nCommunityPackage,\n  N8nNodeTypeDescription,\n  N8nWorkflow,\n  N8nNode,\n  ApiResponse,\n  CommunityPackageInstallRequest,\n  CommunityPackageUpdateRequest,\n  NodeSearchResult,\n  NodeUsageStats,\n  NodeUpdateRequest,\n  DynamicNodeOptions,\n  AINodeClassification,\n  AINodeSuggestion,\n} from '../types/n8n.js';\n\n// Validation Schemas\nconst PackageNameSchema = z.object({\n  packageName: z.string().min(1, 'Package name is required'),\n});\n\nconst InstallPackageSchema = z.object({\n  name: z.string().min(1, 'Package name is required'),\n  version: z.string().optional(),\n});\n\nconst SearchNodesSchema = z.object({\n  nodeType: z.string().optional(),\n  workflowId: z.string().optional(),\n  activeOnly: z.boolean().optional().default(false),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst NodeTypeSchema = z.object({\n  nodeType: z.string().min(1, 'Node type is required'),\n});\n\nconst UpdateNodeSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  updates: z.object({\n    name: z.string().optional(),\n    parameters: z.record(z.unknown()).optional(),\n    disabled: z.boolean().optional(),\n    notes: z.string().optional(),\n    position: z.tuple([z.number(), z.number()]).optional(),\n  }),\n});\n\nconst DynamicParametersSchema = z.object({\n  property: z.string().min(1, 'Property name is required'),\n  nodeType: z.string().min(1, 'Node type is required'),\n  currentNodeParameters: z.record(z.unknown()).optional().default({}),\n  credentials: z.record(z.unknown()).optional(),\n  path: z.string().optional(),\n  methodName: z.string().optional(),\n  loadOptionsMethod: z.string().optional(),\n});\n\n// Helper Functions\nfunction formatPackageList(packages: N8nCommunityPackage[]): string {\n  if (packages.length === 0) {\n    return 'No community packages installed.';\n  }\n\n  return packages\n    .map(pkg => {\n      const nodeCount = pkg.installedNodes?.length || 0;\n      const status = pkg.failedLoading ? ' (⚠️ Failed Loading)' : '';\n      return `• ${pkg.packageName}@${pkg.installedVersion}${status}\\n  ${nodeCount} node(s) installed\\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatNodeTypeList(nodeTypes: N8nNodeTypeDescription[]): string {\n  if (nodeTypes.length === 0) {\n    return 'No node types found.';\n  }\n\n  return nodeTypes\n    .map(node => {\n      const groups = node.group.join(', ');\n      const credentials = node.credentials?.length\n        ? `\\n  Credentials: ${node.credentials.map(c => c.name).join(', ')}`\n        : '';\n      return `• ${node.displayName} (${node.name})\\n  Version: ${node.version}\\n  Groups: ${groups}${credentials}\\n  ${node.description}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatSearchResults(results: NodeSearchResult[]): string {\n  if (results.length === 0) {\n    return 'No nodes found matching the search criteria.';\n  }\n\n  return results\n    .map(result => {\n      const status = result.isWorkflowActive ? '✅ Active' : '❌ Inactive';\n      const disabled = result.node.disabled ? ' (Disabled)' : '';\n      return `• ${result.node.name} (${result.node.type})${disabled}\\n  Workflow: ${result.workflowName} (${result.workflowId})\\n  Status: ${status}\\n  Position: [${result.node.position.join(', ')}]`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatUsageStats(stats: NodeUsageStats[]): string {\n  if (stats.length === 0) {\n    return 'No usage statistics found.';\n  }\n\n  return stats\n    .map(stat => {\n      const lastUsed = stat.lastUsed\n        ? `\\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}`\n        : '';\n      return `• ${stat.nodeType}\\n  Total Usage: ${stat.totalCount} times\\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;\n    })\n    .join('\\n\\n');\n}\n\nexport function createNodeManagementTools(getClient: () => N8nClient | null, server: any) {\n  // Community Package Management Tools\n  server.addTool({\n    name: 'list-community-packages',\n    description: 'List all installed community packages and their node types',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List Community Packages',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const response = await client.getCommunityPackages();\n        return formatPackageList(response.data);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list community packages: ${error.message}`);\n        }\n        throw new UserError('Failed to list community packages with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'install-community-package',\n    description: 'Install a community package from npm registry',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Install Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageInstallRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const installedPackage = await client.installCommunityPackage(packageData);\n        const nodeCount = installedPackage.installedNodes?.length || 0;\n\n        return `✅ Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\\n\\nInstalled ${nodeCount} new node type(s):\\n${installedPackage.installedNodes?.map(node => `• ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('already installed')) {\n            throw new UserError(\n              `Package ${args.name} is already installed. Use update-community-package to update it.`\n            );\n          }\n          throw new UserError(`Failed to install package: ${error.message}`);\n        }\n        throw new UserError('Failed to install package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-community-package',\n    description: 'Update an installed community package to a newer version',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Update Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageUpdateRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const updatedPackage = await client.updateCommunityPackage(args.name, packageData);\n        const nodeCount = updatedPackage.installedNodes?.length || 0;\n\n        return `✅ Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\\n\\nPackage contains ${nodeCount} node type(s):\\n${updatedPackage.installedNodes?.map(node => `• ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(\n              `Package ${args.name} is not installed. Use install-community-package to install it first.`\n            );\n          }\n          throw new UserError(`Failed to update package: ${error.message}`);\n        }\n        throw new UserError('Failed to update package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'uninstall-community-package',\n    description: 'Remove a community package and all its node types',\n    parameters: PackageNameSchema,\n    annotations: {\n      title: 'Uninstall Community Package',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof PackageNameSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.uninstallCommunityPackage(args.packageName);\n        return `✅ Successfully uninstalled package: ${args.packageName}\\n\\n⚠️ Note: Any workflows using nodes from this package may no longer function correctly.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(`Package ${args.packageName} is not installed.`);\n          }\n          throw new UserError(`Failed to uninstall package: ${error.message}`);\n        }\n        throw new UserError('Failed to uninstall package with unknown error');\n      }\n    },\n  });\n\n  // Node Type Discovery Tools\n  server.addTool({\n    name: 'list-node-types',\n    description: 'List all available node types (core and community)',\n    parameters: z.object({\n      communityOnly: z.boolean().optional().default(false),\n      limit: z.number().min(1).max(500).optional().default(100),\n    }),\n    annotations: {\n      title: 'List Node Types',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { communityOnly?: boolean; limit?: number }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeTypes = args.communityOnly\n          ? await client.getCommunityNodeTypes()\n          : await client.getNodeTypes();\n\n        const limitedResults = nodeTypes.slice(0, args.limit);\n        const hasMore = nodeTypes.length > (args.limit || 100);\n\n        let result = formatNodeTypeList(limitedResults);\n        if (hasMore) {\n          result += `\\n\\n... and ${nodeTypes.length - (args.limit || 100)} more node types. Use a higher limit to see more.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list node types: ${error.message}`);\n        }\n        throw new UserError('Failed to list node types with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-node-type-details',\n    description:\n      'Get detailed information about a specific node type including parameters and credentials',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get Node Type Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeType = await client.getNodeType(args.nodeType);\n\n        const credentials =\n          nodeType.credentials\n            ?.map(cred => `• ${cred.name}${cred.required ? ' (Required)' : ' (Optional)'}`)\n            .join('\\n') || 'None';\n\n        const properties = nodeType.properties\n          .slice(0, 10)\n          .map(\n            prop =>\n              `• ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ? ' *' : ''}\\n  ${prop.description || 'No description'}`\n          )\n          .join('\\n');\n\n        const hasMoreProps = nodeType.properties.length > 10;\n\n        return (\n          `📋 Node Type: ${nodeType.displayName}\\n\\n` +\n          `🔧 Technical Name: ${nodeType.name}\\n` +\n          `📦 Version: ${nodeType.version}\\n` +\n          `📁 Groups: ${nodeType.group.join(', ')}\\n` +\n          `📝 Description: ${nodeType.description}\\n\\n` +\n          `🔐 Credentials:\\n${credentials}\\n\\n` +\n          `⚙️ Parameters${hasMoreProps ? ' (showing first 10)' : ''}:\\n${properties}` +\n          (hasMoreProps ? '\\n\\n... and more parameters available' : '') +\n          (nodeType.documentationUrl ? `\\n\\n📖 Documentation: ${nodeType.documentationUrl}` : '')\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found')) {\n            throw new UserError(\n              `Node type '${args.nodeType}' not found. Check the name and try again.`\n            );\n          }\n          throw new UserError(`Failed to get node type details: ${error.message}`);\n        }\n        throw new UserError('Failed to get node type details with unknown error');\n      }\n    },\n  });\n\n  // Workflow Node Analysis Tools\n  server.addTool({\n    name: 'search-workflow-nodes',\n    description: 'Search for nodes across workflows by type, name, or workflow criteria',\n    parameters: SearchNodesSchema,\n    annotations: {\n      title: 'Search Workflow Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SearchNodesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const results: NodeSearchResult[] = [];\n\n        if (args.workflowId) {\n          // Search within specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const nodes = workflow.nodes || [];\n\n          const filteredNodes = nodes.filter(\n            node => !args.nodeType || node.type.includes(args.nodeType)\n          );\n\n          results.push(\n            ...filteredNodes.map(node => ({\n              workflowId: workflow.id,\n              workflowName: workflow.name,\n              node,\n              isWorkflowActive: workflow.active,\n            }))\n          );\n        } else {\n          // Search across all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: args.limit });\n          const workflows = workflowsResponse.data.filter(wf => !args.activeOnly || wf.active);\n\n          for (const workflow of workflows) {\n            const fullWorkflow = await client.getWorkflow(workflow.id);\n            const nodes = fullWorkflow.nodes || [];\n\n            const filteredNodes = nodes.filter(\n              node => !args.nodeType || node.type.includes(args.nodeType)\n            );\n\n            results.push(\n              ...filteredNodes.map(node => ({\n                workflowId: workflow.id,\n                workflowName: workflow.name,\n                node,\n                isWorkflowActive: workflow.active,\n              }))\n            );\n          }\n        }\n\n        const limitedResults = results.slice(0, args.limit);\n        return formatSearchResults(limitedResults);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to search nodes: ${error.message}`);\n        }\n        throw new UserError('Failed to search nodes with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'analyze-node-usage',\n    description: 'Analyze usage statistics for node types across all workflows',\n    parameters: z.object({\n      nodeType: z.string().optional(),\n      includeInactive: z.boolean().optional().default(false),\n    }),\n    annotations: {\n      title: 'Analyze Node Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { nodeType?: string; includeInactive?: boolean }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const workflows = workflowsResponse.data;\n        const usageMap: Record<string, NodeUsageStats> = {};\n\n        for (const workflow of workflows) {\n          if (!args.includeInactive && !workflow.active) continue;\n\n          const fullWorkflow = await client.getWorkflow(workflow.id);\n          const nodes = fullWorkflow.nodes || [];\n\n          for (const node of nodes) {\n            if (args.nodeType && !node.type.includes(args.nodeType)) continue;\n\n            if (!usageMap[node.type]) {\n              usageMap[node.type] = {\n                nodeType: node.type,\n                totalCount: 0,\n                activeWorkflowCount: 0,\n                workflowIds: [],\n              };\n            }\n\n            usageMap[node.type].totalCount++;\n            if (workflow.active) {\n              usageMap[node.type].activeWorkflowCount++;\n            }\n            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {\n              usageMap[node.type].workflowIds.push(workflow.id);\n            }\n          }\n        }\n\n        const stats = Object.values(usageMap).sort((a, b) => b.totalCount - a.totalCount);\n        return formatUsageStats(stats);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node usage: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node usage with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-workflow-node',\n    description: 'Update properties of a specific node within a workflow',\n    parameters: UpdateNodeSchema,\n    annotations: {\n      title: 'Update Workflow Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof UpdateNodeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n\n        const nodeIndex = nodes.findIndex(node => node.id === args.nodeId);\n        if (nodeIndex === -1) {\n          throw new UserError(\n            `Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`\n          );\n        }\n\n        const originalNode = nodes[nodeIndex];\n        const updatedNode = {\n          ...originalNode,\n          ...args.updates,\n          id: originalNode.id, // Preserve original ID\n          type: originalNode.type, // Preserve original type\n        };\n\n        nodes[nodeIndex] = updatedNode;\n\n        await client.updateWorkflow(args.workflowId, {\n          nodes: nodes as Array<Record<string, unknown>>,\n        });\n\n        const changes = Object.keys(args.updates)\n          .map(\n            key =>\n              `• ${key}: ${JSON.stringify((originalNode as any)[key])} → ${JSON.stringify((args.updates as any)[key])}`\n          )\n          .join('\\n');\n\n        return `✅ Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\\n\\nChanges made:\\n${changes}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update node: ${error.message}`);\n        }\n        throw new UserError('Failed to update node with unknown error');\n      }\n    },\n  });\n\n  // Dynamic Parameters and AI Tools\n  server.addTool({\n    name: 'get-dynamic-node-parameters',\n    description: 'Get dynamic parameter options for a node type based on current configuration',\n    parameters: DynamicParametersSchema,\n    annotations: {\n      title: 'Get Dynamic Node Parameters',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof DynamicParametersSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: DynamicNodeOptions = {\n          property: args.property,\n          currentNodeParameters: args.currentNodeParameters,\n          credentials: args.credentials,\n          path: args.path,\n          methodName: args.methodName,\n          loadOptionsMethod: args.loadOptionsMethod,\n        };\n\n        const parameters = await client.getDynamicNodeParameters(options);\n\n        if (parameters.length === 0) {\n          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;\n        }\n\n        const formatted = parameters\n          .map(\n            param => `• ${param.displayName}: ${param.value}${param.type ? ` (${param.type})` : ''}`\n          )\n          .join('\\n');\n\n        return `🔧 Dynamic parameters for '${args.property}':\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get dynamic parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to get dynamic parameters with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'classify-ai-node',\n    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Classify AI Node',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const classification = await client.classifyAINode(args.nodeType);\n\n        const capabilities =\n          classification.aiCapabilities.length > 0\n            ? classification.aiCapabilities.map(cap => `• ${cap}`).join('\\n')\n            : 'None identified';\n\n        const integrations =\n          classification.suggestedIntegrations.length > 0\n            ? classification.suggestedIntegrations.map(int => `• ${int}`).join('\\n')\n            : 'None suggested';\n\n        return (\n          `🤖 AI Classification for ${args.nodeType}\\n\\n` +\n          `Is AI Node: ${classification.isAINode ? '✅ Yes' : '❌ No'}\\n` +\n          `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\\n\\n` +\n          `🎯 AI Capabilities:\\n${capabilities}\\n\\n` +\n          `🔗 Suggested Integrations:\\n${integrations}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to classify AI node: ${error.message}`);\n        }\n        throw new UserError('Failed to classify AI node with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-ai-node-suggestions',\n    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get AI Node Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const suggestions = await client.getAINodeSuggestions(args.nodeType);\n\n        if (suggestions.length === 0) {\n          return `No AI suggestions available for node type '${args.nodeType}'`;\n        }\n\n        const formatted = suggestions\n          .map((suggestion, index) => {\n            const alternatives =\n              suggestion.alternativeNodes.length > 0\n                ? `\\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`\n                : '';\n\n            return (\n              `${index + 1}. ${suggestion.suggestion}\\n` +\n              `   Reasoning: ${suggestion.reasoning}\\n` +\n              `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`\n            );\n          })\n          .join('\\n\\n');\n\n        return `💡 AI Suggestions for ${args.nodeType}:\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get AI suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to get AI suggestions with unknown error');\n      }\n    },\n  });\n}\n"],"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","ignoreList":[]}