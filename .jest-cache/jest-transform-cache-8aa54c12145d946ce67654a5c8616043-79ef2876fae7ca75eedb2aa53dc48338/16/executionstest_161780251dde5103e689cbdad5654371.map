{"file":"/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/executions.test.ts","mappings":"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","names":[],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/tests/unit/tools/executions.test.ts"],"sourcesContent":["import { describe, it, expect, beforeEach, jest } from '@jest/globals';\nimport { createExecutionTools } from '../../../src/tools/executions';\nimport { N8nClient } from '../../../src/client/n8nClient';\nimport { N8nExecution } from '../../../src/types/n8n';\n\ndescribe('Execution Tools', () => {\n  let mockClient: jest.Mocked<N8nClient>;\n  let mockServer: any;\n  let getClient: () => N8nClient | null;\n\n  beforeEach(() => {\n    mockClient = (global as any).testUtils.createMockClient() as jest.Mocked<N8nClient>;\n    getClient = jest.fn(() => mockClient);\n    mockServer = {\n      addTool: jest.fn(),\n    };\n\n    // Register execution tools\n    createExecutionTools(getClient, mockServer);\n  });\n\n  it('should register all execution tools', () => {\n    expect(mockServer.addTool).toHaveBeenCalledTimes(3);\n\n    const toolNames = mockServer.addTool.mock.calls.map((call: any) => call[0].name);\n    expect(toolNames).toContain('list-executions');\n    expect(toolNames).toContain('get-execution');\n    expect(toolNames).toContain('delete-execution');\n  });\n\n  describe('list-executions tool', () => {\n    let listExecutionsTool: any;\n\n    beforeEach(() => {\n      listExecutionsTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-executions'\n      )[0];\n    });\n\n    it('should list executions successfully with full data', async () => {\n      const mockExecutions: N8nExecution[] = [\n        {\n          id: 'exec-1',\n          finished: true,\n          mode: 'manual',\n          status: 'success',\n          workflowId: 'wf-1',\n          startedAt: '2024-01-01T10:00:00.000Z',\n          stoppedAt: '2024-01-01T10:05:00.000Z',\n          retryOf: 'exec-0',\n        },\n        {\n          id: 'exec-2',\n          finished: false,\n          mode: 'webhook',\n          status: 'running',\n          workflowId: 'wf-2',\n          startedAt: '2024-01-01T11:00:00.000Z',\n        },\n        {\n          id: 'exec-3',\n          finished: true,\n          mode: 'trigger',\n          status: 'error',\n          workflowId: 'wf-3',\n          startedAt: '2024-01-01T12:00:00.000Z',\n          stoppedAt: '2024-01-01T12:02:00.000Z',\n        },\n        {\n          id: 'exec-4',\n          finished: false,\n          mode: 'manual',\n          status: 'waiting',\n          workflowId: 'wf-4',\n          startedAt: '2024-01-01T13:00:00.000Z',\n        },\n      ];\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: mockExecutions,\n        nextCursor: 'next-cursor-456',\n      });\n\n      const result = await listExecutionsTool.execute({});\n\n      expect(mockClient.getExecutions).toHaveBeenCalledWith({});\n      expect(result).toContain('Found 4 execution(s):');\n\n      // Check success execution formatting\n      expect(result).toContain('**Execution exec-1**');\n      expect(result).toContain('Status: ✅ success');\n      expect(result).toContain('Workflow ID: wf-1');\n      expect(result).toContain('Mode: manual');\n      expect(result).toContain('Started: 1/1/2024');\n      expect(result).toContain('Stopped: 1/1/2024');\n      expect(result).toContain('Finished: Yes');\n      expect(result).toContain('Retry Of: exec-0');\n\n      // Check running execution formatting\n      expect(result).toContain('**Execution exec-2**');\n      expect(result).toContain('Status: 🔄 running');\n      expect(result).toContain('Mode: webhook');\n      expect(result).toContain('Finished: No');\n\n      // Check error execution formatting\n      expect(result).toContain('**Execution exec-3**');\n      expect(result).toContain('Status: ❌ error');\n      expect(result).toContain('Mode: trigger');\n\n      // Check waiting execution formatting\n      expect(result).toContain('**Execution exec-4**');\n      expect(result).toContain('Status: ⏳ waiting');\n\n      // Check pagination cursor\n      expect(result).toContain('Use cursor \"next-cursor-456\" to get the next page');\n    });\n\n    it('should list executions with pagination options', async () => {\n      const mockExecutions: N8nExecution[] = [\n        {\n          id: 'exec-1',\n          finished: true,\n          mode: 'manual',\n          status: 'success',\n          workflowId: 'wf-1',\n          startedAt: '2024-01-01T10:00:00.000Z',\n        },\n      ];\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: mockExecutions,\n      });\n\n      await listExecutionsTool.execute({ limit: 25, cursor: 'test-cursor' });\n\n      expect(mockClient.getExecutions).toHaveBeenCalledWith({\n        limit: 25,\n        cursor: 'test-cursor',\n      });\n    });\n\n    it('should handle empty executions list', async () => {\n      mockClient.getExecutions.mockResolvedValue({\n        data: [],\n      });\n\n      const result = await listExecutionsTool.execute({});\n\n      expect(result).toBe('No executions found in the n8n instance.');\n    });\n\n    it('should handle executions without optional fields', async () => {\n      const mockExecutions: N8nExecution[] = [\n        {\n          id: 'exec-minimal',\n          finished: true,\n          mode: 'manual',\n          status: 'success',\n          workflowId: 'wf-minimal',\n          startedAt: '2024-01-01T10:00:00.000Z',\n        },\n      ];\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: mockExecutions,\n      });\n\n      const result = await listExecutionsTool.execute({});\n\n      expect(result).toContain('**Execution exec-minimal**');\n      expect(result).toContain('Status: ✅ success');\n      expect(result).toContain('Workflow ID: wf-minimal');\n      expect(result).toContain('Mode: manual');\n      expect(result).toContain('Started: 1/1/2024');\n      expect(result).toContain('Finished: Yes');\n      expect(result).not.toContain('Stopped:');\n      expect(result).not.toContain('Retry Of:');\n    });\n\n    it('should handle executions without nextCursor', async () => {\n      const mockExecutions: N8nExecution[] = [\n        {\n          id: 'exec-1',\n          finished: true,\n          mode: 'manual',\n          status: 'success',\n          workflowId: 'wf-1',\n          startedAt: '2024-01-01T10:00:00.000Z',\n        },\n      ];\n\n      mockClient.getExecutions.mockResolvedValue({\n        data: mockExecutions,\n      });\n\n      const result = await listExecutionsTool.execute({});\n\n      expect(result).toContain('Found 1 execution(s):');\n      expect(result).not.toContain('Use cursor');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getExecutions.mockRejectedValue(new Error('API connection failed'));\n\n      await expect(listExecutionsTool.execute({})).rejects.toThrow(\n        'Failed to list executions: API connection failed'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getExecutions.mockRejectedValue('Unknown error');\n\n      await expect(listExecutionsTool.execute({})).rejects.toThrow(\n        'Failed to list executions with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createExecutionTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'list-executions'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({})).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(listExecutionsTool.annotations).toEqual({\n        title: 'List n8n Executions',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() => listExecutionsTool.parameters.parse({})).not.toThrow();\n      expect(() => listExecutionsTool.parameters.parse({ limit: 50 })).not.toThrow();\n      expect(() => listExecutionsTool.parameters.parse({ cursor: 'test' })).not.toThrow();\n      expect(() =>\n        listExecutionsTool.parameters.parse({ limit: 25, cursor: 'test' })\n      ).not.toThrow();\n\n      // Invalid parameters\n      expect(() => listExecutionsTool.parameters.parse({ limit: 0 })).toThrow();\n      expect(() => listExecutionsTool.parameters.parse({ limit: 101 })).toThrow();\n      expect(() => listExecutionsTool.parameters.parse({ limit: 'invalid' })).toThrow();\n    });\n  });\n\n  describe('get-execution tool', () => {\n    let getExecutionTool: any;\n\n    beforeEach(() => {\n      getExecutionTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-execution'\n      )[0];\n    });\n\n    it('should get execution successfully with full data', async () => {\n      const mockExecution: N8nExecution = {\n        id: 'exec-1',\n        finished: true,\n        mode: 'manual',\n        status: 'success',\n        workflowId: 'wf-1',\n        startedAt: '2024-01-01T10:00:00.000Z',\n        stoppedAt: '2024-01-01T10:05:00.000Z',\n        retryOf: 'exec-0',\n        retrySuccessId: 'exec-1-retry',\n        waitTill: new Date('2024-01-01T10:10:00.000Z'),\n        workflowData: {\n          id: 'wf-1',\n          name: 'Test Workflow',\n          active: true,\n          nodes: [\n            { id: 'node1', name: 'Start Node', type: 'Start', typeVersion: 1, position: [100, 200] },\n            { id: 'node2', name: 'End Node', type: 'End', typeVersion: 1, position: [300, 200] },\n          ],\n          connections: {},\n          settings: {},\n          staticData: {},\n          createdAt: '2024-01-01T00:00:00.000Z',\n          updatedAt: '2024-01-01T00:00:00.000Z',\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const result = await getExecutionTool.execute({ executionId: 'exec-1' });\n\n      expect(mockClient.getExecution).toHaveBeenCalledWith('exec-1');\n      expect(result).toContain('# Execution: exec-1');\n      expect(result).toContain('**Status:** ✅ success');\n      expect(result).toContain('**Workflow ID:** wf-1');\n      expect(result).toContain('**Mode:** manual');\n      expect(result).toContain('**Started At:** 1/1/2024');\n      expect(result).toContain('**Stopped At:** 1/1/2024');\n      expect(result).toContain('**Finished:** Yes');\n      expect(result).toContain('**Retry Of:** exec-0');\n      expect(result).toContain('**Retry Success ID:** exec-1-retry');\n      expect(result).toContain('**Wait Until:** 1/1/2024');\n      expect(result).toContain('## Workflow Information:');\n      expect(result).toContain('**Name:** Test Workflow');\n      expect(result).toContain('**Active:** Yes');\n      expect(result).toContain('**Nodes:** 2');\n    });\n\n    it('should get execution with minimal data', async () => {\n      const mockExecution: N8nExecution = {\n        id: 'exec-minimal',\n        finished: false,\n        mode: 'webhook',\n        status: 'running',\n        workflowId: 'wf-minimal',\n        startedAt: '2024-01-01T10:00:00.000Z',\n      };\n\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const result = await getExecutionTool.execute({ executionId: 'exec-minimal' });\n\n      expect(result).toContain('# Execution: exec-minimal');\n      expect(result).toContain('**Status:** 🔄 running');\n      expect(result).toContain('**Workflow ID:** wf-minimal');\n      expect(result).toContain('**Mode:** webhook');\n      expect(result).toContain('**Started At:** 1/1/2024');\n      expect(result).toContain('**Finished:** No');\n      expect(result).not.toContain('**Stopped At:**');\n      expect(result).not.toContain('**Retry Of:**');\n      expect(result).not.toContain('**Retry Success ID:**');\n      expect(result).not.toContain('**Wait Until:**');\n      expect(result).not.toContain('## Workflow Information:');\n    });\n\n    it('should handle different status icons correctly', async () => {\n      const statuses: Array<{ status: N8nExecution['status']; icon: string }> = [\n        { status: 'success', icon: '✅' },\n        { status: 'error', icon: '❌' },\n        { status: 'running', icon: '🔄' },\n        { status: 'waiting', icon: '⏳' },\n      ];\n\n      for (const { status, icon } of statuses) {\n        const mockExecution: N8nExecution = {\n          id: `exec-${status}`,\n          finished: status === 'success' || status === 'error',\n          mode: 'manual',\n          status,\n          workflowId: 'wf-1',\n          startedAt: '2024-01-01T10:00:00.000Z',\n        };\n\n        mockClient.getExecution.mockResolvedValue(mockExecution);\n\n        const result = await getExecutionTool.execute({ executionId: `exec-${status}` });\n\n        expect(result).toContain(`**Status:** ${icon} ${status}`);\n      }\n    });\n\n    it('should format execution with workflow data having inactive workflow', async () => {\n      const mockExecution: N8nExecution = {\n        id: 'exec-1',\n        finished: true,\n        mode: 'manual',\n        status: 'success',\n        workflowId: 'wf-1',\n        startedAt: '2024-01-01T10:00:00.000Z',\n        workflowData: {\n          id: 'wf-1',\n          name: 'Inactive Workflow',\n          active: false,\n          nodes: [],\n          connections: {},\n          settings: {},\n          staticData: {},\n          createdAt: '2024-01-01T00:00:00.000Z',\n          updatedAt: '2024-01-01T00:00:00.000Z',\n        },\n      };\n\n      mockClient.getExecution.mockResolvedValue(mockExecution);\n\n      const result = await getExecutionTool.execute({ executionId: 'exec-1' });\n\n      expect(result).toContain('**Name:** Inactive Workflow');\n      expect(result).toContain('**Active:** No');\n      expect(result).toContain('**Nodes:** 0');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.getExecution.mockRejectedValue(new Error('Execution not found'));\n\n      await expect(getExecutionTool.execute({ executionId: 'invalid' })).rejects.toThrow(\n        'Failed to get execution: Execution not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.getExecution.mockRejectedValue({ error: 'Unknown' });\n\n      await expect(getExecutionTool.execute({ executionId: 'test' })).rejects.toThrow(\n        'Failed to get execution with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createExecutionTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'get-execution'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({ executionId: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(getExecutionTool.annotations).toEqual({\n        title: 'Get Execution Details',\n        readOnlyHint: true,\n        destructiveHint: false,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() => getExecutionTool.parameters.parse({ executionId: 'test-id' })).not.toThrow();\n\n      // Invalid parameters\n      expect(() => getExecutionTool.parameters.parse({})).toThrow();\n      expect(() => getExecutionTool.parameters.parse({ executionId: '' })).toThrow();\n      expect(() => getExecutionTool.parameters.parse({ executionId: 123 })).toThrow();\n    });\n  });\n\n  describe('delete-execution tool', () => {\n    let deleteExecutionTool: any;\n\n    beforeEach(() => {\n      deleteExecutionTool = mockServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-execution'\n      )[0];\n    });\n\n    it('should delete execution successfully', async () => {\n      mockClient.deleteExecution.mockResolvedValue(undefined);\n\n      const result = await deleteExecutionTool.execute({ executionId: 'exec-to-delete' });\n\n      expect(mockClient.deleteExecution).toHaveBeenCalledWith('exec-to-delete');\n      expect(result).toBe('✅ Successfully deleted execution with ID: exec-to-delete');\n    });\n\n    it('should handle API errors', async () => {\n      mockClient.deleteExecution.mockRejectedValue(new Error('Execution not found'));\n\n      await expect(deleteExecutionTool.execute({ executionId: 'invalid' })).rejects.toThrow(\n        'Failed to delete execution: Execution not found'\n      );\n    });\n\n    it('should handle unknown errors', async () => {\n      mockClient.deleteExecution.mockRejectedValue('Network error');\n\n      await expect(deleteExecutionTool.execute({ executionId: 'test' })).rejects.toThrow(\n        'Failed to delete execution with unknown error'\n      );\n    });\n\n    it('should throw UserError when client is not initialized', async () => {\n      const uninitializedGetClient = jest.fn(() => null);\n      const uninitializedServer = { addTool: jest.fn() };\n\n      createExecutionTools(uninitializedGetClient, uninitializedServer);\n      const tool = uninitializedServer.addTool.mock.calls.find(\n        (call: any) => call[0].name === 'delete-execution'\n      )?.[0];\n\n      expect(tool).toBeDefined();\n      await expect((tool as any).execute({ executionId: 'test' })).rejects.toThrow(\n        'n8n client not initialized. Please run init-n8n first.'\n      );\n    });\n\n    it('should have correct tool annotations', () => {\n      expect(deleteExecutionTool.annotations).toEqual({\n        title: 'Delete Execution',\n        readOnlyHint: false,\n        destructiveHint: true,\n        idempotentHint: true,\n        openWorldHint: true,\n      });\n    });\n\n    it('should validate parameters with Zod schema', () => {\n      // Valid parameters\n      expect(() => deleteExecutionTool.parameters.parse({ executionId: 'test-id' })).not.toThrow();\n\n      // Invalid parameters\n      expect(() => deleteExecutionTool.parameters.parse({})).toThrow();\n      expect(() => deleteExecutionTool.parameters.parse({ executionId: '' })).toThrow();\n      expect(() => deleteExecutionTool.parameters.parse({ executionId: 123 })).toThrow();\n    });\n  });\n});\n"],"version":3}