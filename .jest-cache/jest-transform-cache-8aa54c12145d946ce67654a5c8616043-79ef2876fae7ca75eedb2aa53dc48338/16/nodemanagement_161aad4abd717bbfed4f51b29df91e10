3e439c9796eca34cc5a666fbdbd0f248
/* istanbul ignore next */
function cov_2qv86yv8dz() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts";
  var hash = "173ec3b5d146be78d593c9c740085c9eb8786758";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 6,
          column: 2
        }
      },
      "1": {
        start: {
          line: 7,
          column: 29
        },
        end: {
          line: 10,
          column: 2
        }
      },
      "2": {
        start: {
          line: 11,
          column: 26
        },
        end: {
          line: 16,
          column: 2
        }
      },
      "3": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 19,
          column: 2
        }
      },
      "4": {
        start: {
          line: 20,
          column: 25
        },
        end: {
          line: 30,
          column: 2
        }
      },
      "5": {
        start: {
          line: 31,
          column: 32
        },
        end: {
          line: 39,
          column: 2
        }
      },
      "6": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "7": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 50
        }
      },
      "8": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 51,
          column: 22
        }
      },
      "9": {
        start: {
          line: 47,
          column: 26
        },
        end: {
          line: 47,
          column: 57
        }
      },
      "10": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 70
        }
      },
      "11": {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 161
        }
      },
      "12": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "13": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 38
        }
      },
      "14": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 65,
          column: 22
        }
      },
      "15": {
        start: {
          line: 59,
          column: 23
        },
        end: {
          line: 59,
          column: 44
        }
      },
      "16": {
        start: {
          line: 60,
          column: 28
        },
        end: {
          line: 62,
          column: 16
        }
      },
      "17": {
        start: {
          line: 61,
          column: 60
        },
        end: {
          line: 61,
          column: 66
        }
      },
      "18": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 140
        }
      },
      "19": {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "20": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "21": {
        start: {
          line: 71,
          column: 4
        },
        end: {
          line: 77,
          column: 22
        }
      },
      "22": {
        start: {
          line: 73,
          column: 23
        },
        end: {
          line: 73,
          column: 74
        }
      },
      "23": {
        start: {
          line: 74,
          column: 25
        },
        end: {
          line: 74,
          column: 66
        }
      },
      "24": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 75,
          column: 202
        }
      },
      "25": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 82,
          column: 5
        }
      },
      "26": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 44
        }
      },
      "27": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 90,
          column: 22
        }
      },
      "28": {
        start: {
          line: 85,
          column: 25
        },
        end: {
          line: 87,
          column: 16
        }
      },
      "29": {
        start: {
          line: 88,
          column: 8
        },
        end: {
          line: 88,
          column: 137
        }
      },
      "30": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 121,
          column: 7
        }
      },
      "31": {
        start: {
          line: 106,
          column: 27
        },
        end: {
          line: 106,
          column: 38
        }
      },
      "32": {
        start: {
          line: 107,
          column: 12
        },
        end: {
          line: 109,
          column: 13
        }
      },
      "33": {
        start: {
          line: 108,
          column: 16
        },
        end: {
          line: 108,
          column: 94
        }
      },
      "34": {
        start: {
          line: 110,
          column: 12
        },
        end: {
          line: 119,
          column: 13
        }
      },
      "35": {
        start: {
          line: 111,
          column: 33
        },
        end: {
          line: 111,
          column: 68
        }
      },
      "36": {
        start: {
          line: 112,
          column: 16
        },
        end: {
          line: 112,
          column: 56
        }
      },
      "37": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 117,
          column: 17
        }
      },
      "38": {
        start: {
          line: 116,
          column: 20
        },
        end: {
          line: 116,
          column: 95
        }
      },
      "39": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 118,
          column: 92
        }
      },
      "40": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 157,
          column: 7
        }
      },
      "41": {
        start: {
          line: 134,
          column: 27
        },
        end: {
          line: 134,
          column: 38
        }
      },
      "42": {
        start: {
          line: 135,
          column: 12
        },
        end: {
          line: 137,
          column: 13
        }
      },
      "43": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 136,
          column: 94
        }
      },
      "44": {
        start: {
          line: 138,
          column: 12
        },
        end: {
          line: 155,
          column: 13
        }
      },
      "45": {
        start: {
          line: 139,
          column: 36
        },
        end: {
          line: 142,
          column: 17
        }
      },
      "46": {
        start: {
          line: 143,
          column: 41
        },
        end: {
          line: 143,
          column: 90
        }
      },
      "47": {
        start: {
          line: 144,
          column: 34
        },
        end: {
          line: 144,
          column: 78
        }
      },
      "48": {
        start: {
          line: 145,
          column: 16
        },
        end: {
          line: 145,
          column: 293
        }
      },
      "49": {
        start: {
          line: 145,
          column: 219
        },
        end: {
          line: 145,
          column: 257
        }
      },
      "50": {
        start: {
          line: 148,
          column: 16
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "51": {
        start: {
          line: 149,
          column: 20
        },
        end: {
          line: 151,
          column: 21
        }
      },
      "52": {
        start: {
          line: 150,
          column: 24
        },
        end: {
          line: 150,
          column: 133
        }
      },
      "53": {
        start: {
          line: 152,
          column: 20
        },
        end: {
          line: 152,
          column: 87
        }
      },
      "54": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 84
        }
      },
      "55": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 193,
          column: 7
        }
      },
      "56": {
        start: {
          line: 170,
          column: 27
        },
        end: {
          line: 170,
          column: 38
        }
      },
      "57": {
        start: {
          line: 171,
          column: 12
        },
        end: {
          line: 173,
          column: 13
        }
      },
      "58": {
        start: {
          line: 172,
          column: 16
        },
        end: {
          line: 172,
          column: 94
        }
      },
      "59": {
        start: {
          line: 174,
          column: 12
        },
        end: {
          line: 191,
          column: 13
        }
      },
      "60": {
        start: {
          line: 175,
          column: 36
        },
        end: {
          line: 178,
          column: 17
        }
      },
      "61": {
        start: {
          line: 179,
          column: 39
        },
        end: {
          line: 179,
          column: 98
        }
      },
      "62": {
        start: {
          line: 180,
          column: 34
        },
        end: {
          line: 180,
          column: 76
        }
      },
      "63": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 181,
          column: 288
        }
      },
      "64": {
        start: {
          line: 181,
          column: 214
        },
        end: {
          line: 181,
          column: 252
        }
      },
      "65": {
        start: {
          line: 184,
          column: 16
        },
        end: {
          line: 189,
          column: 17
        }
      },
      "66": {
        start: {
          line: 185,
          column: 20
        },
        end: {
          line: 187,
          column: 21
        }
      },
      "67": {
        start: {
          line: 186,
          column: 24
        },
        end: {
          line: 186,
          column: 137
        }
      },
      "68": {
        start: {
          line: 188,
          column: 20
        },
        end: {
          line: 188,
          column: 86
        }
      },
      "69": {
        start: {
          line: 190,
          column: 16
        },
        end: {
          line: 190,
          column: 83
        }
      },
      "70": {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 224,
          column: 7
        }
      },
      "71": {
        start: {
          line: 206,
          column: 27
        },
        end: {
          line: 206,
          column: 38
        }
      },
      "72": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 209,
          column: 13
        }
      },
      "73": {
        start: {
          line: 208,
          column: 16
        },
        end: {
          line: 208,
          column: 94
        }
      },
      "74": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "75": {
        start: {
          line: 211,
          column: 16
        },
        end: {
          line: 211,
          column: 73
        }
      },
      "76": {
        start: {
          line: 212,
          column: 16
        },
        end: {
          line: 212,
          column: 171
        }
      },
      "77": {
        start: {
          line: 215,
          column: 16
        },
        end: {
          line: 220,
          column: 17
        }
      },
      "78": {
        start: {
          line: 216,
          column: 20
        },
        end: {
          line: 218,
          column: 21
        }
      },
      "79": {
        start: {
          line: 217,
          column: 24
        },
        end: {
          line: 217,
          column: 93
        }
      },
      "80": {
        start: {
          line: 219,
          column: 20
        },
        end: {
          line: 219,
          column: 89
        }
      },
      "81": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 86
        }
      },
      "82": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 264,
          column: 7
        }
      },
      "83": {
        start: {
          line: 241,
          column: 27
        },
        end: {
          line: 241,
          column: 38
        }
      },
      "84": {
        start: {
          line: 242,
          column: 12
        },
        end: {
          line: 244,
          column: 13
        }
      },
      "85": {
        start: {
          line: 243,
          column: 16
        },
        end: {
          line: 243,
          column: 94
        }
      },
      "86": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 262,
          column: 13
        }
      },
      "87": {
        start: {
          line: 246,
          column: 34
        },
        end: {
          line: 248,
          column: 49
        }
      },
      "88": {
        start: {
          line: 249,
          column: 39
        },
        end: {
          line: 249,
          column: 69
        }
      },
      "89": {
        start: {
          line: 250,
          column: 32
        },
        end: {
          line: 250,
          column: 70
        }
      },
      "90": {
        start: {
          line: 251,
          column: 29
        },
        end: {
          line: 251,
          column: 63
        }
      },
      "91": {
        start: {
          line: 252,
          column: 16
        },
        end: {
          line: 254,
          column: 17
        }
      },
      "92": {
        start: {
          line: 253,
          column: 20
        },
        end: {
          line: 253,
          column: 135
        }
      },
      "93": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 255,
          column: 30
        }
      },
      "94": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 260,
          column: 17
        }
      },
      "95": {
        start: {
          line: 259,
          column: 20
        },
        end: {
          line: 259,
          column: 87
        }
      },
      "96": {
        start: {
          line: 261,
          column: 16
        },
        end: {
          line: 261,
          column: 84
        }
      },
      "97": {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 311,
          column: 7
        }
      },
      "98": {
        start: {
          line: 277,
          column: 27
        },
        end: {
          line: 277,
          column: 38
        }
      },
      "99": {
        start: {
          line: 278,
          column: 12
        },
        end: {
          line: 280,
          column: 13
        }
      },
      "100": {
        start: {
          line: 279,
          column: 16
        },
        end: {
          line: 279,
          column: 94
        }
      },
      "101": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 309,
          column: 13
        }
      },
      "102": {
        start: {
          line: 282,
          column: 33
        },
        end: {
          line: 282,
          column: 72
        }
      },
      "103": {
        start: {
          line: 283,
          column: 36
        },
        end: {
          line: 285,
          column: 41
        }
      },
      "104": {
        start: {
          line: 284,
          column: 34
        },
        end: {
          line: 284,
          column: 98
        }
      },
      "105": {
        start: {
          line: 286,
          column: 35
        },
        end: {
          line: 289,
          column: 31
        }
      },
      "106": {
        start: {
          line: 288,
          column: 33
        },
        end: {
          line: 288,
          column: 156
        }
      },
      "107": {
        start: {
          line: 290,
          column: 37
        },
        end: {
          line: 290,
          column: 68
        }
      },
      "108": {
        start: {
          line: 291,
          column: 16
        },
        end: {
          line: 299,
          column: 109
        }
      },
      "109": {
        start: {
          line: 302,
          column: 16
        },
        end: {
          line: 307,
          column: 17
        }
      },
      "110": {
        start: {
          line: 303,
          column: 20
        },
        end: {
          line: 305,
          column: 21
        }
      },
      "111": {
        start: {
          line: 304,
          column: 24
        },
        end: {
          line: 304,
          column: 117
        }
      },
      "112": {
        start: {
          line: 306,
          column: 20
        },
        end: {
          line: 306,
          column: 93
        }
      },
      "113": {
        start: {
          line: 308,
          column: 16
        },
        end: {
          line: 308,
          column: 90
        }
      },
      "114": {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 369,
          column: 7
        }
      },
      "115": {
        start: {
          line: 325,
          column: 27
        },
        end: {
          line: 325,
          column: 38
        }
      },
      "116": {
        start: {
          line: 326,
          column: 12
        },
        end: {
          line: 328,
          column: 13
        }
      },
      "117": {
        start: {
          line: 327,
          column: 16
        },
        end: {
          line: 327,
          column: 94
        }
      },
      "118": {
        start: {
          line: 329,
          column: 12
        },
        end: {
          line: 367,
          column: 13
        }
      },
      "119": {
        start: {
          line: 330,
          column: 32
        },
        end: {
          line: 330,
          column: 34
        }
      },
      "120": {
        start: {
          line: 331,
          column: 16
        },
        end: {
          line: 358,
          column: 17
        }
      },
      "121": {
        start: {
          line: 333,
          column: 37
        },
        end: {
          line: 333,
          column: 78
        }
      },
      "122": {
        start: {
          line: 334,
          column: 34
        },
        end: {
          line: 334,
          column: 54
        }
      },
      "123": {
        start: {
          line: 335,
          column: 42
        },
        end: {
          line: 335,
          column: 115
        }
      },
      "124": {
        start: {
          line: 335,
          column: 63
        },
        end: {
          line: 335,
          column: 114
        }
      },
      "125": {
        start: {
          line: 336,
          column: 20
        },
        end: {
          line: 341,
          column: 25
        }
      },
      "126": {
        start: {
          line: 336,
          column: 63
        },
        end: {
          line: 341,
          column: 21
        }
      },
      "127": {
        start: {
          line: 345,
          column: 46
        },
        end: {
          line: 345,
          column: 94
        }
      },
      "128": {
        start: {
          line: 346,
          column: 38
        },
        end: {
          line: 346,
          column: 104
        }
      },
      "129": {
        start: {
          line: 346,
          column: 74
        },
        end: {
          line: 346,
          column: 103
        }
      },
      "130": {
        start: {
          line: 347,
          column: 20
        },
        end: {
          line: 357,
          column: 21
        }
      },
      "131": {
        start: {
          line: 348,
          column: 45
        },
        end: {
          line: 348,
          column: 82
        }
      },
      "132": {
        start: {
          line: 349,
          column: 38
        },
        end: {
          line: 349,
          column: 62
        }
      },
      "133": {
        start: {
          line: 350,
          column: 46
        },
        end: {
          line: 350,
          column: 119
        }
      },
      "134": {
        start: {
          line: 350,
          column: 67
        },
        end: {
          line: 350,
          column: 118
        }
      },
      "135": {
        start: {
          line: 351,
          column: 24
        },
        end: {
          line: 356,
          column: 29
        }
      },
      "136": {
        start: {
          line: 351,
          column: 67
        },
        end: {
          line: 356,
          column: 25
        }
      },
      "137": {
        start: {
          line: 359,
          column: 39
        },
        end: {
          line: 359,
          column: 67
        }
      },
      "138": {
        start: {
          line: 360,
          column: 16
        },
        end: {
          line: 360,
          column: 59
        }
      },
      "139": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 365,
          column: 17
        }
      },
      "140": {
        start: {
          line: 364,
          column: 20
        },
        end: {
          line: 364,
          column: 84
        }
      },
      "141": {
        start: {
          line: 366,
          column: 16
        },
        end: {
          line: 366,
          column: 81
        }
      },
      "142": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 428,
          column: 7
        }
      },
      "143": {
        start: {
          line: 385,
          column: 27
        },
        end: {
          line: 385,
          column: 38
        }
      },
      "144": {
        start: {
          line: 386,
          column: 12
        },
        end: {
          line: 388,
          column: 13
        }
      },
      "145": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 94
        }
      },
      "146": {
        start: {
          line: 389,
          column: 12
        },
        end: {
          line: 426,
          column: 13
        }
      },
      "147": {
        start: {
          line: 390,
          column: 42
        },
        end: {
          line: 390,
          column: 83
        }
      },
      "148": {
        start: {
          line: 391,
          column: 34
        },
        end: {
          line: 391,
          column: 56
        }
      },
      "149": {
        start: {
          line: 392,
          column: 33
        },
        end: {
          line: 392,
          column: 35
        }
      },
      "150": {
        start: {
          line: 393,
          column: 16
        },
        end: {
          line: 417,
          column: 17
        }
      },
      "151": {
        start: {
          line: 394,
          column: 20
        },
        end: {
          line: 395,
          column: 33
        }
      },
      "152": {
        start: {
          line: 395,
          column: 24
        },
        end: {
          line: 395,
          column: 33
        }
      },
      "153": {
        start: {
          line: 396,
          column: 41
        },
        end: {
          line: 396,
          column: 78
        }
      },
      "154": {
        start: {
          line: 397,
          column: 34
        },
        end: {
          line: 397,
          column: 58
        }
      },
      "155": {
        start: {
          line: 398,
          column: 20
        },
        end: {
          line: 416,
          column: 21
        }
      },
      "156": {
        start: {
          line: 399,
          column: 24
        },
        end: {
          line: 400,
          column: 37
        }
      },
      "157": {
        start: {
          line: 400,
          column: 28
        },
        end: {
          line: 400,
          column: 37
        }
      },
      "158": {
        start: {
          line: 401,
          column: 24
        },
        end: {
          line: 408,
          column: 25
        }
      },
      "159": {
        start: {
          line: 402,
          column: 28
        },
        end: {
          line: 407,
          column: 30
        }
      },
      "160": {
        start: {
          line: 409,
          column: 24
        },
        end: {
          line: 409,
          column: 57
        }
      },
      "161": {
        start: {
          line: 410,
          column: 24
        },
        end: {
          line: 412,
          column: 25
        }
      },
      "162": {
        start: {
          line: 411,
          column: 28
        },
        end: {
          line: 411,
          column: 70
        }
      },
      "163": {
        start: {
          line: 413,
          column: 24
        },
        end: {
          line: 415,
          column: 25
        }
      },
      "164": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 414,
          column: 78
        }
      },
      "165": {
        start: {
          line: 418,
          column: 30
        },
        end: {
          line: 418,
          column: 97
        }
      },
      "166": {
        start: {
          line: 418,
          column: 69
        },
        end: {
          line: 418,
          column: 96
        }
      },
      "167": {
        start: {
          line: 419,
          column: 16
        },
        end: {
          line: 419,
          column: 47
        }
      },
      "168": {
        start: {
          line: 422,
          column: 16
        },
        end: {
          line: 424,
          column: 17
        }
      },
      "169": {
        start: {
          line: 423,
          column: 20
        },
        end: {
          line: 423,
          column: 90
        }
      },
      "170": {
        start: {
          line: 425,
          column: 16
        },
        end: {
          line: 425,
          column: 87
        }
      },
      "171": {
        start: {
          line: 429,
          column: 4
        },
        end: {
          line: 475,
          column: 7
        }
      },
      "172": {
        start: {
          line: 441,
          column: 27
        },
        end: {
          line: 441,
          column: 38
        }
      },
      "173": {
        start: {
          line: 442,
          column: 12
        },
        end: {
          line: 444,
          column: 13
        }
      },
      "174": {
        start: {
          line: 443,
          column: 16
        },
        end: {
          line: 443,
          column: 94
        }
      },
      "175": {
        start: {
          line: 445,
          column: 12
        },
        end: {
          line: 473,
          column: 13
        }
      },
      "176": {
        start: {
          line: 446,
          column: 33
        },
        end: {
          line: 446,
          column: 74
        }
      },
      "177": {
        start: {
          line: 447,
          column: 30
        },
        end: {
          line: 447,
          column: 50
        }
      },
      "178": {
        start: {
          line: 448,
          column: 34
        },
        end: {
          line: 448,
          column: 82
        }
      },
      "179": {
        start: {
          line: 448,
          column: 58
        },
        end: {
          line: 448,
          column: 81
        }
      },
      "180": {
        start: {
          line: 449,
          column: 16
        },
        end: {
          line: 451,
          column: 17
        }
      },
      "181": {
        start: {
          line: 450,
          column: 20
        },
        end: {
          line: 450,
          column: 116
        }
      },
      "182": {
        start: {
          line: 452,
          column: 37
        },
        end: {
          line: 452,
          column: 53
        }
      },
      "183": {
        start: {
          line: 453,
          column: 36
        },
        end: {
          line: 458,
          column: 17
        }
      },
      "184": {
        start: {
          line: 459,
          column: 16
        },
        end: {
          line: 459,
          column: 47
        }
      },
      "185": {
        start: {
          line: 460,
          column: 16
        },
        end: {
          line: 462,
          column: 19
        }
      },
      "186": {
        start: {
          line: 463,
          column: 32
        },
        end: {
          line: 465,
          column: 31
        }
      },
      "187": {
        start: {
          line: 464,
          column: 32
        },
        end: {
          line: 464,
          column: 119
        }
      },
      "188": {
        start: {
          line: 466,
          column: 16
        },
        end: {
          line: 466,
          column: 136
        }
      },
      "189": {
        start: {
          line: 469,
          column: 16
        },
        end: {
          line: 471,
          column: 17
        }
      },
      "190": {
        start: {
          line: 470,
          column: 20
        },
        end: {
          line: 470,
          column: 83
        }
      },
      "191": {
        start: {
          line: 472,
          column: 16
        },
        end: {
          line: 472,
          column: 80
        }
      },
      "192": {
        start: {
          line: 477,
          column: 4
        },
        end: {
          line: 518,
          column: 7
        }
      },
      "193": {
        start: {
          line: 489,
          column: 27
        },
        end: {
          line: 489,
          column: 38
        }
      },
      "194": {
        start: {
          line: 490,
          column: 12
        },
        end: {
          line: 492,
          column: 13
        }
      },
      "195": {
        start: {
          line: 491,
          column: 16
        },
        end: {
          line: 491,
          column: 94
        }
      },
      "196": {
        start: {
          line: 493,
          column: 12
        },
        end: {
          line: 516,
          column: 13
        }
      },
      "197": {
        start: {
          line: 494,
          column: 32
        },
        end: {
          line: 501,
          column: 17
        }
      },
      "198": {
        start: {
          line: 502,
          column: 35
        },
        end: {
          line: 502,
          column: 81
        }
      },
      "199": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 505,
          column: 17
        }
      },
      "200": {
        start: {
          line: 504,
          column: 20
        },
        end: {
          line: 504,
          column: 121
        }
      },
      "201": {
        start: {
          line: 506,
          column: 34
        },
        end: {
          line: 508,
          column: 31
        }
      },
      "202": {
        start: {
          line: 507,
          column: 34
        },
        end: {
          line: 507,
          column: 113
        }
      },
      "203": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 87
        }
      },
      "204": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 514,
          column: 17
        }
      },
      "205": {
        start: {
          line: 513,
          column: 20
        },
        end: {
          line: 513,
          column: 94
        }
      },
      "206": {
        start: {
          line: 515,
          column: 16
        },
        end: {
          line: 515,
          column: 91
        }
      },
      "207": {
        start: {
          line: 519,
          column: 4
        },
        end: {
          line: 556,
          column: 7
        }
      },
      "208": {
        start: {
          line: 531,
          column: 27
        },
        end: {
          line: 531,
          column: 38
        }
      },
      "209": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 534,
          column: 13
        }
      },
      "210": {
        start: {
          line: 533,
          column: 16
        },
        end: {
          line: 533,
          column: 94
        }
      },
      "211": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 554,
          column: 13
        }
      },
      "212": {
        start: {
          line: 536,
          column: 39
        },
        end: {
          line: 536,
          column: 81
        }
      },
      "213": {
        start: {
          line: 537,
          column: 37
        },
        end: {
          line: 539,
          column: 39
        }
      },
      "214": {
        start: {
          line: 538,
          column: 63
        },
        end: {
          line: 538,
          column: 73
        }
      },
      "215": {
        start: {
          line: 540,
          column: 37
        },
        end: {
          line: 542,
          column: 38
        }
      },
      "216": {
        start: {
          line: 541,
          column: 70
        },
        end: {
          line: 541,
          column: 80
        }
      },
      "217": {
        start: {
          line: 543,
          column: 16
        },
        end: {
          line: 547,
          column: 67
        }
      },
      "218": {
        start: {
          line: 550,
          column: 16
        },
        end: {
          line: 552,
          column: 17
        }
      },
      "219": {
        start: {
          line: 551,
          column: 20
        },
        end: {
          line: 551,
          column: 88
        }
      },
      "220": {
        start: {
          line: 553,
          column: 16
        },
        end: {
          line: 553,
          column: 85
        }
      },
      "221": {
        start: {
          line: 557,
          column: 4
        },
        end: {
          line: 597,
          column: 7
        }
      },
      "222": {
        start: {
          line: 569,
          column: 27
        },
        end: {
          line: 569,
          column: 38
        }
      },
      "223": {
        start: {
          line: 570,
          column: 12
        },
        end: {
          line: 572,
          column: 13
        }
      },
      "224": {
        start: {
          line: 571,
          column: 16
        },
        end: {
          line: 571,
          column: 94
        }
      },
      "225": {
        start: {
          line: 573,
          column: 12
        },
        end: {
          line: 595,
          column: 13
        }
      },
      "226": {
        start: {
          line: 574,
          column: 36
        },
        end: {
          line: 574,
          column: 84
        }
      },
      "227": {
        start: {
          line: 575,
          column: 16
        },
        end: {
          line: 577,
          column: 17
        }
      },
      "228": {
        start: {
          line: 576,
          column: 20
        },
        end: {
          line: 576,
          column: 90
        }
      },
      "229": {
        start: {
          line: 578,
          column: 34
        },
        end: {
          line: 587,
          column: 33
        }
      },
      "230": {
        start: {
          line: 580,
          column: 41
        },
        end: {
          line: 582,
          column: 28
        }
      },
      "231": {
        start: {
          line: 583,
          column: 20
        },
        end: {
          line: 585,
          column: 101
        }
      },
      "232": {
        start: {
          line: 588,
          column: 16
        },
        end: {
          line: 588,
          column: 81
        }
      },
      "233": {
        start: {
          line: 591,
          column: 16
        },
        end: {
          line: 593,
          column: 17
        }
      },
      "234": {
        start: {
          line: 592,
          column: 20
        },
        end: {
          line: 592,
          column: 90
        }
      },
      "235": {
        start: {
          line: 594,
          column: 16
        },
        end: {
          line: 594,
          column: 87
        }
      }
    },
    fnMap: {
      "0": {
        name: "formatPackageList",
        decl: {
          start: {
            line: 41,
            column: 9
          },
          end: {
            line: 41,
            column: 26
          }
        },
        loc: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 52,
            column: 1
          }
        },
        line: 41
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 46,
            column: 13
          },
          end: {
            line: 46,
            column: 14
          }
        },
        loc: {
          start: {
            line: 46,
            column: 20
          },
          end: {
            line: 50,
            column: 5
          }
        },
        line: 46
      },
      "2": {
        name: "formatNodeTypeList",
        decl: {
          start: {
            line: 53,
            column: 9
          },
          end: {
            line: 53,
            column: 27
          }
        },
        loc: {
          start: {
            line: 53,
            column: 39
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 53
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 58,
            column: 13
          },
          end: {
            line: 58,
            column: 14
          }
        },
        loc: {
          start: {
            line: 58,
            column: 21
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 58
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 61,
            column: 55
          },
          end: {
            line: 61,
            column: 56
          }
        },
        loc: {
          start: {
            line: 61,
            column: 60
          },
          end: {
            line: 61,
            column: 66
          }
        },
        line: 61
      },
      "5": {
        name: "formatSearchResults",
        decl: {
          start: {
            line: 67,
            column: 9
          },
          end: {
            line: 67,
            column: 28
          }
        },
        loc: {
          start: {
            line: 67,
            column: 38
          },
          end: {
            line: 78,
            column: 1
          }
        },
        line: 67
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 72,
            column: 13
          },
          end: {
            line: 72,
            column: 14
          }
        },
        loc: {
          start: {
            line: 72,
            column: 23
          },
          end: {
            line: 76,
            column: 5
          }
        },
        line: 72
      },
      "7": {
        name: "formatUsageStats",
        decl: {
          start: {
            line: 79,
            column: 9
          },
          end: {
            line: 79,
            column: 25
          }
        },
        loc: {
          start: {
            line: 79,
            column: 33
          },
          end: {
            line: 91,
            column: 1
          }
        },
        line: 79
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 84,
            column: 13
          },
          end: {
            line: 84,
            column: 14
          }
        },
        loc: {
          start: {
            line: 84,
            column: 21
          },
          end: {
            line: 89,
            column: 5
          }
        },
        line: 84
      },
      "9": {
        name: "createNodeManagementTools",
        decl: {
          start: {
            line: 92,
            column: 16
          },
          end: {
            line: 92,
            column: 41
          }
        },
        loc: {
          start: {
            line: 92,
            column: 61
          },
          end: {
            line: 598,
            column: 1
          }
        },
        line: 92
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 105,
            column: 17
          },
          end: {
            line: 105,
            column: 18
          }
        },
        loc: {
          start: {
            line: 105,
            column: 29
          },
          end: {
            line: 120,
            column: 9
          }
        },
        line: 105
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 133,
            column: 17
          },
          end: {
            line: 133,
            column: 18
          }
        },
        loc: {
          start: {
            line: 133,
            column: 33
          },
          end: {
            line: 156,
            column: 9
          }
        },
        line: 133
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 145,
            column: 211
          },
          end: {
            line: 145,
            column: 212
          }
        },
        loc: {
          start: {
            line: 145,
            column: 219
          },
          end: {
            line: 145,
            column: 257
          }
        },
        line: 145
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 169,
            column: 17
          },
          end: {
            line: 169,
            column: 18
          }
        },
        loc: {
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 192,
            column: 9
          }
        },
        line: 169
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 181,
            column: 206
          },
          end: {
            line: 181,
            column: 207
          }
        },
        loc: {
          start: {
            line: 181,
            column: 214
          },
          end: {
            line: 181,
            column: 252
          }
        },
        line: 181
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 205,
            column: 17
          },
          end: {
            line: 205,
            column: 18
          }
        },
        loc: {
          start: {
            line: 205,
            column: 33
          },
          end: {
            line: 223,
            column: 9
          }
        },
        line: 205
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 240,
            column: 17
          },
          end: {
            line: 240,
            column: 18
          }
        },
        loc: {
          start: {
            line: 240,
            column: 33
          },
          end: {
            line: 263,
            column: 9
          }
        },
        line: 240
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 276,
            column: 17
          },
          end: {
            line: 276,
            column: 18
          }
        },
        loc: {
          start: {
            line: 276,
            column: 33
          },
          end: {
            line: 310,
            column: 9
          }
        },
        line: 276
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 284,
            column: 26
          },
          end: {
            line: 284,
            column: 27
          }
        },
        loc: {
          start: {
            line: 284,
            column: 34
          },
          end: {
            line: 284,
            column: 98
          }
        },
        line: 284
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 288,
            column: 25
          },
          end: {
            line: 288,
            column: 26
          }
        },
        loc: {
          start: {
            line: 288,
            column: 33
          },
          end: {
            line: 288,
            column: 156
          }
        },
        line: 288
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 324,
            column: 17
          },
          end: {
            line: 324,
            column: 18
          }
        },
        loc: {
          start: {
            line: 324,
            column: 33
          },
          end: {
            line: 368,
            column: 9
          }
        },
        line: 324
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 335,
            column: 55
          },
          end: {
            line: 335,
            column: 56
          }
        },
        loc: {
          start: {
            line: 335,
            column: 63
          },
          end: {
            line: 335,
            column: 114
          }
        },
        line: 335
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 336,
            column: 54
          },
          end: {
            line: 336,
            column: 55
          }
        },
        loc: {
          start: {
            line: 336,
            column: 63
          },
          end: {
            line: 341,
            column: 21
          }
        },
        line: 336
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 346,
            column: 68
          },
          end: {
            line: 346,
            column: 69
          }
        },
        loc: {
          start: {
            line: 346,
            column: 74
          },
          end: {
            line: 346,
            column: 103
          }
        },
        line: 346
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 350,
            column: 59
          },
          end: {
            line: 350,
            column: 60
          }
        },
        loc: {
          start: {
            line: 350,
            column: 67
          },
          end: {
            line: 350,
            column: 118
          }
        },
        line: 350
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 351,
            column: 58
          },
          end: {
            line: 351,
            column: 59
          }
        },
        loc: {
          start: {
            line: 351,
            column: 67
          },
          end: {
            line: 356,
            column: 25
          }
        },
        line: 351
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 384,
            column: 17
          },
          end: {
            line: 384,
            column: 18
          }
        },
        loc: {
          start: {
            line: 384,
            column: 33
          },
          end: {
            line: 427,
            column: 9
          }
        },
        line: 384
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 418,
            column: 59
          },
          end: {
            line: 418,
            column: 60
          }
        },
        loc: {
          start: {
            line: 418,
            column: 69
          },
          end: {
            line: 418,
            column: 96
          }
        },
        line: 418
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 440,
            column: 17
          },
          end: {
            line: 440,
            column: 18
          }
        },
        loc: {
          start: {
            line: 440,
            column: 33
          },
          end: {
            line: 474,
            column: 9
          }
        },
        line: 440
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 448,
            column: 50
          },
          end: {
            line: 448,
            column: 51
          }
        },
        loc: {
          start: {
            line: 448,
            column: 58
          },
          end: {
            line: 448,
            column: 81
          }
        },
        line: 448
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 464,
            column: 25
          },
          end: {
            line: 464,
            column: 26
          }
        },
        loc: {
          start: {
            line: 464,
            column: 32
          },
          end: {
            line: 464,
            column: 119
          }
        },
        line: 464
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 488,
            column: 17
          },
          end: {
            line: 488,
            column: 18
          }
        },
        loc: {
          start: {
            line: 488,
            column: 33
          },
          end: {
            line: 517,
            column: 9
          }
        },
        line: 488
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 507,
            column: 25
          },
          end: {
            line: 507,
            column: 26
          }
        },
        loc: {
          start: {
            line: 507,
            column: 34
          },
          end: {
            line: 507,
            column: 113
          }
        },
        line: 507
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 530,
            column: 17
          },
          end: {
            line: 530,
            column: 18
          }
        },
        loc: {
          start: {
            line: 530,
            column: 33
          },
          end: {
            line: 555,
            column: 9
          }
        },
        line: 530
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 538,
            column: 56
          },
          end: {
            line: 538,
            column: 57
          }
        },
        loc: {
          start: {
            line: 538,
            column: 63
          },
          end: {
            line: 538,
            column: 73
          }
        },
        line: 538
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 541,
            column: 63
          },
          end: {
            line: 541,
            column: 64
          }
        },
        loc: {
          start: {
            line: 541,
            column: 70
          },
          end: {
            line: 541,
            column: 80
          }
        },
        line: 541
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 568,
            column: 17
          },
          end: {
            line: 568,
            column: 18
          }
        },
        loc: {
          start: {
            line: 568,
            column: 33
          },
          end: {
            line: 596,
            column: 9
          }
        },
        line: 568
      },
      "37": {
        name: "(anonymous_37)",
        decl: {
          start: {
            line: 579,
            column: 25
          },
          end: {
            line: 579,
            column: 26
          }
        },
        loc: {
          start: {
            line: 579,
            column: 48
          },
          end: {
            line: 586,
            column: 17
          }
        },
        line: 579
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      },
      "1": {
        loc: {
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 47,
            column: 26
          },
          end: {
            line: 47,
            column: 52
          }
        }, {
          start: {
            line: 47,
            column: 56
          },
          end: {
            line: 47,
            column: 57
          }
        }],
        line: 47
      },
      "2": {
        loc: {
          start: {
            line: 48,
            column: 23
          },
          end: {
            line: 48,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 48,
            column: 43
          },
          end: {
            line: 48,
            column: 65
          }
        }, {
          start: {
            line: 48,
            column: 68
          },
          end: {
            line: 48,
            column: 70
          }
        }],
        line: 48
      },
      "3": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 62,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 61,
            column: 14
          },
          end: {
            line: 61,
            column: 80
          }
        }, {
          start: {
            line: 62,
            column: 14
          },
          end: {
            line: 62,
            column: 16
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "6": {
        loc: {
          start: {
            line: 73,
            column: 23
          },
          end: {
            line: 73,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 49
          },
          end: {
            line: 73,
            column: 59
          }
        }, {
          start: {
            line: 73,
            column: 62
          },
          end: {
            line: 73,
            column: 74
          }
        }],
        line: 73
      },
      "7": {
        loc: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 74,
            column: 48
          },
          end: {
            line: 74,
            column: 61
          }
        }, {
          start: {
            line: 74,
            column: 64
          },
          end: {
            line: 74,
            column: 66
          }
        }],
        line: 74
      },
      "8": {
        loc: {
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 80,
            column: 4
          },
          end: {
            line: 82,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 80
      },
      "9": {
        loc: {
          start: {
            line: 85,
            column: 25
          },
          end: {
            line: 87,
            column: 16
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 14
          },
          end: {
            line: 86,
            column: 74
          }
        }, {
          start: {
            line: 87,
            column: 14
          },
          end: {
            line: 87,
            column: 16
          }
        }],
        line: 85
      },
      "10": {
        loc: {
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 12
          },
          end: {
            line: 109,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "11": {
        loc: {
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 115,
            column: 16
          },
          end: {
            line: 117,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 115
      },
      "12": {
        loc: {
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 12
          },
          end: {
            line: 137,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "13": {
        loc: {
          start: {
            line: 144,
            column: 34
          },
          end: {
            line: 144,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 144,
            column: 34
          },
          end: {
            line: 144,
            column: 73
          }
        }, {
          start: {
            line: 144,
            column: 77
          },
          end: {
            line: 144,
            column: 78
          }
        }],
        line: 144
      },
      "14": {
        loc: {
          start: {
            line: 145,
            column: 174
          },
          end: {
            line: 145,
            column: 290
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 174
          },
          end: {
            line: 145,
            column: 269
          }
        }, {
          start: {
            line: 145,
            column: 273
          },
          end: {
            line: 145,
            column: 290
          }
        }],
        line: 145
      },
      "15": {
        loc: {
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 16
          },
          end: {
            line: 153,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 148
      },
      "16": {
        loc: {
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 151,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 149,
            column: 20
          },
          end: {
            line: 151,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 149
      },
      "17": {
        loc: {
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 171,
            column: 12
          },
          end: {
            line: 173,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 171
      },
      "18": {
        loc: {
          start: {
            line: 180,
            column: 34
          },
          end: {
            line: 180,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 180,
            column: 34
          },
          end: {
            line: 180,
            column: 71
          }
        }, {
          start: {
            line: 180,
            column: 75
          },
          end: {
            line: 180,
            column: 76
          }
        }],
        line: 180
      },
      "19": {
        loc: {
          start: {
            line: 181,
            column: 171
          },
          end: {
            line: 181,
            column: 285
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 171
          },
          end: {
            line: 181,
            column: 264
          }
        }, {
          start: {
            line: 181,
            column: 268
          },
          end: {
            line: 181,
            column: 285
          }
        }],
        line: 181
      },
      "20": {
        loc: {
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 184,
            column: 16
          },
          end: {
            line: 189,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 184
      },
      "21": {
        loc: {
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 187,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 187,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "22": {
        loc: {
          start: {
            line: 185,
            column: 24
          },
          end: {
            line: 185,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 24
          },
          end: {
            line: 185,
            column: 59
          }
        }, {
          start: {
            line: 185,
            column: 63
          },
          end: {
            line: 185,
            column: 102
          }
        }],
        line: 185
      },
      "23": {
        loc: {
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 207,
            column: 12
          },
          end: {
            line: 209,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 207
      },
      "24": {
        loc: {
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 16
          },
          end: {
            line: 220,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "25": {
        loc: {
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 216,
            column: 20
          },
          end: {
            line: 218,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 216
      },
      "26": {
        loc: {
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 102
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 216,
            column: 24
          },
          end: {
            line: 216,
            column: 59
          }
        }, {
          start: {
            line: 216,
            column: 63
          },
          end: {
            line: 216,
            column: 102
          }
        }],
        line: 216
      },
      "27": {
        loc: {
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 12
          },
          end: {
            line: 244,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "28": {
        loc: {
          start: {
            line: 246,
            column: 34
          },
          end: {
            line: 248,
            column: 49
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 22
          },
          end: {
            line: 247,
            column: 58
          }
        }, {
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 248,
            column: 49
          }
        }],
        line: 246
      },
      "29": {
        loc: {
          start: {
            line: 250,
            column: 52
          },
          end: {
            line: 250,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 250,
            column: 52
          },
          end: {
            line: 250,
            column: 62
          }
        }, {
          start: {
            line: 250,
            column: 66
          },
          end: {
            line: 250,
            column: 69
          }
        }],
        line: 250
      },
      "30": {
        loc: {
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 252,
            column: 16
          },
          end: {
            line: 254,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 252
      },
      "31": {
        loc: {
          start: {
            line: 253,
            column: 65
          },
          end: {
            line: 253,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 65
          },
          end: {
            line: 253,
            column: 75
          }
        }, {
          start: {
            line: 253,
            column: 79
          },
          end: {
            line: 253,
            column: 82
          }
        }],
        line: 253
      },
      "32": {
        loc: {
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 16
          },
          end: {
            line: 260,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "33": {
        loc: {
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 12
          },
          end: {
            line: 280,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 278
      },
      "34": {
        loc: {
          start: {
            line: 283,
            column: 36
          },
          end: {
            line: 285,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 283,
            column: 36
          },
          end: {
            line: 285,
            column: 31
          }
        }, {
          start: {
            line: 285,
            column: 35
          },
          end: {
            line: 285,
            column: 41
          }
        }],
        line: 283
      },
      "35": {
        loc: {
          start: {
            line: 284,
            column: 51
          },
          end: {
            line: 284,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 284,
            column: 67
          },
          end: {
            line: 284,
            column: 80
          }
        }, {
          start: {
            line: 284,
            column: 83
          },
          end: {
            line: 284,
            column: 96
          }
        }],
        line: 284
      },
      "36": {
        loc: {
          start: {
            line: 288,
            column: 86
          },
          end: {
            line: 288,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 102
          },
          end: {
            line: 288,
            column: 106
          }
        }, {
          start: {
            line: 288,
            column: 109
          },
          end: {
            line: 288,
            column: 111
          }
        }],
        line: 288
      },
      "37": {
        loc: {
          start: {
            line: 288,
            column: 118
          },
          end: {
            line: 288,
            column: 154
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 288,
            column: 118
          },
          end: {
            line: 288,
            column: 134
          }
        }, {
          start: {
            line: 288,
            column: 138
          },
          end: {
            line: 288,
            column: 154
          }
        }],
        line: 288
      },
      "38": {
        loc: {
          start: {
            line: 297,
            column: 36
          },
          end: {
            line: 297,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 51
          },
          end: {
            line: 297,
            column: 72
          }
        }, {
          start: {
            line: 297,
            column: 75
          },
          end: {
            line: 297,
            column: 77
          }
        }],
        line: 297
      },
      "39": {
        loc: {
          start: {
            line: 298,
            column: 21
          },
          end: {
            line: 298,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 298,
            column: 36
          },
          end: {
            line: 298,
            column: 75
          }
        }, {
          start: {
            line: 298,
            column: 78
          },
          end: {
            line: 298,
            column: 80
          }
        }],
        line: 298
      },
      "40": {
        loc: {
          start: {
            line: 299,
            column: 21
          },
          end: {
            line: 299,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 299,
            column: 49
          },
          end: {
            line: 299,
            column: 101
          }
        }, {
          start: {
            line: 299,
            column: 104
          },
          end: {
            line: 299,
            column: 106
          }
        }],
        line: 299
      },
      "41": {
        loc: {
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 302,
            column: 16
          },
          end: {
            line: 307,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 302
      },
      "42": {
        loc: {
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 20
          },
          end: {
            line: 305,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "43": {
        loc: {
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 326,
            column: 12
          },
          end: {
            line: 328,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 326
      },
      "44": {
        loc: {
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 331,
            column: 16
          },
          end: {
            line: 358,
            column: 17
          }
        }, {
          start: {
            line: 343,
            column: 21
          },
          end: {
            line: 358,
            column: 17
          }
        }],
        line: 331
      },
      "45": {
        loc: {
          start: {
            line: 334,
            column: 34
          },
          end: {
            line: 334,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 334,
            column: 34
          },
          end: {
            line: 334,
            column: 48
          }
        }, {
          start: {
            line: 334,
            column: 52
          },
          end: {
            line: 334,
            column: 54
          }
        }],
        line: 334
      },
      "46": {
        loc: {
          start: {
            line: 335,
            column: 63
          },
          end: {
            line: 335,
            column: 114
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 335,
            column: 63
          },
          end: {
            line: 335,
            column: 77
          }
        }, {
          start: {
            line: 335,
            column: 81
          },
          end: {
            line: 335,
            column: 114
          }
        }],
        line: 335
      },
      "47": {
        loc: {
          start: {
            line: 346,
            column: 74
          },
          end: {
            line: 346,
            column: 103
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 346,
            column: 74
          },
          end: {
            line: 346,
            column: 90
          }
        }, {
          start: {
            line: 346,
            column: 94
          },
          end: {
            line: 346,
            column: 103
          }
        }],
        line: 346
      },
      "48": {
        loc: {
          start: {
            line: 349,
            column: 38
          },
          end: {
            line: 349,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 349,
            column: 38
          },
          end: {
            line: 349,
            column: 56
          }
        }, {
          start: {
            line: 349,
            column: 60
          },
          end: {
            line: 349,
            column: 62
          }
        }],
        line: 349
      },
      "49": {
        loc: {
          start: {
            line: 350,
            column: 67
          },
          end: {
            line: 350,
            column: 118
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 350,
            column: 67
          },
          end: {
            line: 350,
            column: 81
          }
        }, {
          start: {
            line: 350,
            column: 85
          },
          end: {
            line: 350,
            column: 118
          }
        }],
        line: 350
      },
      "50": {
        loc: {
          start: {
            line: 363,
            column: 16
          },
          end: {
            line: 365,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 363,
            column: 16
          },
          end: {
            line: 365,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 363
      },
      "51": {
        loc: {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 388,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 386
      },
      "52": {
        loc: {
          start: {
            line: 394,
            column: 20
          },
          end: {
            line: 395,
            column: 33
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 394,
            column: 20
          },
          end: {
            line: 395,
            column: 33
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 394
      },
      "53": {
        loc: {
          start: {
            line: 394,
            column: 24
          },
          end: {
            line: 394,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 394,
            column: 24
          },
          end: {
            line: 394,
            column: 45
          }
        }, {
          start: {
            line: 394,
            column: 49
          },
          end: {
            line: 394,
            column: 65
          }
        }],
        line: 394
      },
      "54": {
        loc: {
          start: {
            line: 397,
            column: 34
          },
          end: {
            line: 397,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 397,
            column: 34
          },
          end: {
            line: 397,
            column: 52
          }
        }, {
          start: {
            line: 397,
            column: 56
          },
          end: {
            line: 397,
            column: 58
          }
        }],
        line: 397
      },
      "55": {
        loc: {
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 400,
            column: 37
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 24
          },
          end: {
            line: 400,
            column: 37
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "56": {
        loc: {
          start: {
            line: 399,
            column: 28
          },
          end: {
            line: 399,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 399,
            column: 28
          },
          end: {
            line: 399,
            column: 41
          }
        }, {
          start: {
            line: 399,
            column: 45
          },
          end: {
            line: 399,
            column: 79
          }
        }],
        line: 399
      },
      "57": {
        loc: {
          start: {
            line: 401,
            column: 24
          },
          end: {
            line: 408,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 401,
            column: 24
          },
          end: {
            line: 408,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 401
      },
      "58": {
        loc: {
          start: {
            line: 410,
            column: 24
          },
          end: {
            line: 412,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 24
          },
          end: {
            line: 412,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "59": {
        loc: {
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 415,
            column: 25
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 24
          },
          end: {
            line: 415,
            column: 25
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "60": {
        loc: {
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 424,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 422,
            column: 16
          },
          end: {
            line: 424,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 422
      },
      "61": {
        loc: {
          start: {
            line: 442,
            column: 12
          },
          end: {
            line: 444,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 12
          },
          end: {
            line: 444,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 442
      },
      "62": {
        loc: {
          start: {
            line: 447,
            column: 30
          },
          end: {
            line: 447,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 447,
            column: 30
          },
          end: {
            line: 447,
            column: 44
          }
        }, {
          start: {
            line: 447,
            column: 48
          },
          end: {
            line: 447,
            column: 50
          }
        }],
        line: 447
      },
      "63": {
        loc: {
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 451,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 449,
            column: 16
          },
          end: {
            line: 451,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 449
      },
      "64": {
        loc: {
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 469,
            column: 16
          },
          end: {
            line: 471,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 469
      },
      "65": {
        loc: {
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 492,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 490,
            column: 12
          },
          end: {
            line: 492,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 490
      },
      "66": {
        loc: {
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 505,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 503,
            column: 16
          },
          end: {
            line: 505,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 503
      },
      "67": {
        loc: {
          start: {
            line: 507,
            column: 75
          },
          end: {
            line: 507,
            column: 111
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 507,
            column: 88
          },
          end: {
            line: 507,
            column: 106
          }
        }, {
          start: {
            line: 507,
            column: 109
          },
          end: {
            line: 507,
            column: 111
          }
        }],
        line: 507
      },
      "68": {
        loc: {
          start: {
            line: 512,
            column: 16
          },
          end: {
            line: 514,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 512,
            column: 16
          },
          end: {
            line: 514,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 512
      },
      "69": {
        loc: {
          start: {
            line: 532,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 532,
            column: 12
          },
          end: {
            line: 534,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 532
      },
      "70": {
        loc: {
          start: {
            line: 537,
            column: 37
          },
          end: {
            line: 539,
            column: 39
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 538,
            column: 22
          },
          end: {
            line: 538,
            column: 85
          }
        }, {
          start: {
            line: 539,
            column: 22
          },
          end: {
            line: 539,
            column: 39
          }
        }],
        line: 537
      },
      "71": {
        loc: {
          start: {
            line: 540,
            column: 37
          },
          end: {
            line: 542,
            column: 38
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 541,
            column: 22
          },
          end: {
            line: 541,
            column: 92
          }
        }, {
          start: {
            line: 542,
            column: 22
          },
          end: {
            line: 542,
            column: 38
          }
        }],
        line: 540
      },
      "72": {
        loc: {
          start: {
            line: 544,
            column: 35
          },
          end: {
            line: 544,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 544,
            column: 61
          },
          end: {
            line: 544,
            column: 68
          }
        }, {
          start: {
            line: 544,
            column: 71
          },
          end: {
            line: 544,
            column: 77
          }
        }],
        line: 544
      },
      "73": {
        loc: {
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 552,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 550,
            column: 16
          },
          end: {
            line: 552,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 550
      },
      "74": {
        loc: {
          start: {
            line: 570,
            column: 12
          },
          end: {
            line: 572,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 570,
            column: 12
          },
          end: {
            line: 572,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 570
      },
      "75": {
        loc: {
          start: {
            line: 575,
            column: 16
          },
          end: {
            line: 577,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 575,
            column: 16
          },
          end: {
            line: 577,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 575
      },
      "76": {
        loc: {
          start: {
            line: 580,
            column: 41
          },
          end: {
            line: 582,
            column: 28
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 581,
            column: 26
          },
          end: {
            line: 581,
            column: 92
          }
        }, {
          start: {
            line: 582,
            column: 26
          },
          end: {
            line: 582,
            column: 28
          }
        }],
        line: 580
      },
      "77": {
        loc: {
          start: {
            line: 591,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 591,
            column: 16
          },
          end: {
            line: 593,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 591
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0],
      "59": [0, 0],
      "60": [0, 0],
      "61": [0, 0],
      "62": [0, 0],
      "63": [0, 0],
      "64": [0, 0],
      "65": [0, 0],
      "66": [0, 0],
      "67": [0, 0],
      "68": [0, 0],
      "69": [0, 0],
      "70": [0, 0],
      "71": [0, 0],
      "72": [0, 0],
      "73": [0, 0],
      "74": [0, 0],
      "75": [0, 0],
      "76": [0, 0],
      "77": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts",
      mappings: "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",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/tools/node-management.ts"],
      sourcesContent: ["import { z } from 'zod';\nimport { UserError } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\nimport {\n  N8nCommunityPackage,\n  N8nNodeTypeDescription,\n  N8nWorkflow,\n  N8nNode,\n  ApiResponse,\n  CommunityPackageInstallRequest,\n  CommunityPackageUpdateRequest,\n  NodeSearchResult,\n  NodeUsageStats,\n  NodeUpdateRequest,\n  DynamicNodeOptions,\n  AINodeClassification,\n  AINodeSuggestion,\n} from '../types/n8n.js';\n\n// Validation Schemas\nconst PackageNameSchema = z.object({\n  packageName: z.string().min(1, 'Package name is required'),\n});\n\nconst InstallPackageSchema = z.object({\n  name: z.string().min(1, 'Package name is required'),\n  version: z.string().optional(),\n});\n\nconst SearchNodesSchema = z.object({\n  nodeType: z.string().optional(),\n  workflowId: z.string().optional(),\n  activeOnly: z.boolean().optional().default(false),\n  limit: z.number().min(1).max(100).optional().default(50),\n});\n\nconst NodeTypeSchema = z.object({\n  nodeType: z.string().min(1, 'Node type is required'),\n});\n\nconst UpdateNodeSchema = z.object({\n  workflowId: z.string().min(1, 'Workflow ID is required'),\n  nodeId: z.string().min(1, 'Node ID is required'),\n  updates: z.object({\n    name: z.string().optional(),\n    parameters: z.record(z.unknown()).optional(),\n    disabled: z.boolean().optional(),\n    notes: z.string().optional(),\n    position: z.tuple([z.number(), z.number()]).optional(),\n  }),\n});\n\nconst DynamicParametersSchema = z.object({\n  property: z.string().min(1, 'Property name is required'),\n  nodeType: z.string().min(1, 'Node type is required'),\n  currentNodeParameters: z.record(z.unknown()).optional().default({}),\n  credentials: z.record(z.unknown()).optional(),\n  path: z.string().optional(),\n  methodName: z.string().optional(),\n  loadOptionsMethod: z.string().optional(),\n});\n\n// Helper Functions\nfunction formatPackageList(packages: N8nCommunityPackage[]): string {\n  if (packages.length === 0) {\n    return 'No community packages installed.';\n  }\n\n  return packages\n    .map(pkg => {\n      const nodeCount = pkg.installedNodes?.length || 0;\n      const status = pkg.failedLoading ? ' (\u26A0\uFE0F Failed Loading)' : '';\n      return `\u2022 ${pkg.packageName}@${pkg.installedVersion}${status}\\n  ${nodeCount} node(s) installed\\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatNodeTypeList(nodeTypes: N8nNodeTypeDescription[]): string {\n  if (nodeTypes.length === 0) {\n    return 'No node types found.';\n  }\n\n  return nodeTypes\n    .map(node => {\n      const groups = node.group.join(', ');\n      const credentials = node.credentials?.length\n        ? `\\n  Credentials: ${node.credentials.map(c => c.name).join(', ')}`\n        : '';\n      return `\u2022 ${node.displayName} (${node.name})\\n  Version: ${node.version}\\n  Groups: ${groups}${credentials}\\n  ${node.description}`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatSearchResults(results: NodeSearchResult[]): string {\n  if (results.length === 0) {\n    return 'No nodes found matching the search criteria.';\n  }\n\n  return results\n    .map(result => {\n      const status = result.isWorkflowActive ? '\u2705 Active' : '\u274C Inactive';\n      const disabled = result.node.disabled ? ' (Disabled)' : '';\n      return `\u2022 ${result.node.name} (${result.node.type})${disabled}\\n  Workflow: ${result.workflowName} (${result.workflowId})\\n  Status: ${status}\\n  Position: [${result.node.position.join(', ')}]`;\n    })\n    .join('\\n\\n');\n}\n\nfunction formatUsageStats(stats: NodeUsageStats[]): string {\n  if (stats.length === 0) {\n    return 'No usage statistics found.';\n  }\n\n  return stats\n    .map(stat => {\n      const lastUsed = stat.lastUsed\n        ? `\\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}`\n        : '';\n      return `\u2022 ${stat.nodeType}\\n  Total Usage: ${stat.totalCount} times\\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;\n    })\n    .join('\\n\\n');\n}\n\nexport function createNodeManagementTools(getClient: () => N8nClient | null, server: any) {\n  // Community Package Management Tools\n  server.addTool({\n    name: 'list-community-packages',\n    description: 'List all installed community packages and their node types',\n    parameters: z.object({}),\n    annotations: {\n      title: 'List Community Packages',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async () => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const response = await client.getCommunityPackages();\n        return formatPackageList(response.data);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list community packages: ${error.message}`);\n        }\n        throw new UserError('Failed to list community packages with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'install-community-package',\n    description: 'Install a community package from npm registry',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Install Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: true,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageInstallRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const installedPackage = await client.installCommunityPackage(packageData);\n        const nodeCount = installedPackage.installedNodes?.length || 0;\n\n        return `\u2705 Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\\n\\nInstalled ${nodeCount} new node type(s):\\n${installedPackage.installedNodes?.map(node => `\u2022 ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('already installed')) {\n            throw new UserError(\n              `Package ${args.name} is already installed. Use update-community-package to update it.`\n            );\n          }\n          throw new UserError(`Failed to install package: ${error.message}`);\n        }\n        throw new UserError('Failed to install package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-community-package',\n    description: 'Update an installed community package to a newer version',\n    parameters: InstallPackageSchema,\n    annotations: {\n      title: 'Update Community Package',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof InstallPackageSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const packageData: CommunityPackageUpdateRequest = {\n          name: args.name,\n          version: args.version,\n        };\n\n        const updatedPackage = await client.updateCommunityPackage(args.name, packageData);\n        const nodeCount = updatedPackage.installedNodes?.length || 0;\n\n        return `\u2705 Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\\n\\nPackage contains ${nodeCount} node type(s):\\n${updatedPackage.installedNodes?.map(node => `\u2022 ${node.displayName} (${node.name})`).join('\\n') || 'No nodes listed'}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(\n              `Package ${args.name} is not installed. Use install-community-package to install it first.`\n            );\n          }\n          throw new UserError(`Failed to update package: ${error.message}`);\n        }\n        throw new UserError('Failed to update package with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'uninstall-community-package',\n    description: 'Remove a community package and all its node types',\n    parameters: PackageNameSchema,\n    annotations: {\n      title: 'Uninstall Community Package',\n      readOnlyHint: false,\n      destructiveHint: true,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof PackageNameSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        await client.uninstallCommunityPackage(args.packageName);\n        return `\u2705 Successfully uninstalled package: ${args.packageName}\\n\\n\u26A0\uFE0F Note: Any workflows using nodes from this package may no longer function correctly.`;\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found') || error.message.includes('not installed')) {\n            throw new UserError(`Package ${args.packageName} is not installed.`);\n          }\n          throw new UserError(`Failed to uninstall package: ${error.message}`);\n        }\n        throw new UserError('Failed to uninstall package with unknown error');\n      }\n    },\n  });\n\n  // Node Type Discovery Tools\n  server.addTool({\n    name: 'list-node-types',\n    description: 'List all available node types (core and community)',\n    parameters: z.object({\n      communityOnly: z.boolean().optional().default(false),\n      limit: z.number().min(1).max(500).optional().default(100),\n    }),\n    annotations: {\n      title: 'List Node Types',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { communityOnly?: boolean; limit?: number }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeTypes = args.communityOnly\n          ? await client.getCommunityNodeTypes()\n          : await client.getNodeTypes();\n\n        const limitedResults = nodeTypes.slice(0, args.limit);\n        const hasMore = nodeTypes.length > (args.limit || 100);\n\n        let result = formatNodeTypeList(limitedResults);\n        if (hasMore) {\n          result += `\\n\\n... and ${nodeTypes.length - (args.limit || 100)} more node types. Use a higher limit to see more.`;\n        }\n\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to list node types: ${error.message}`);\n        }\n        throw new UserError('Failed to list node types with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-node-type-details',\n    description:\n      'Get detailed information about a specific node type including parameters and credentials',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get Node Type Details',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const nodeType = await client.getNodeType(args.nodeType);\n\n        const credentials =\n          nodeType.credentials\n            ?.map(cred => `\u2022 ${cred.name}${cred.required ? ' (Required)' : ' (Optional)'}`)\n            .join('\\n') || 'None';\n\n        const properties = nodeType.properties\n          .slice(0, 10)\n          .map(\n            prop =>\n              `\u2022 ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ? ' *' : ''}\\n  ${prop.description || 'No description'}`\n          )\n          .join('\\n');\n\n        const hasMoreProps = nodeType.properties.length > 10;\n\n        return (\n          `\uD83D\uDCCB Node Type: ${nodeType.displayName}\\n\\n` +\n          `\uD83D\uDD27 Technical Name: ${nodeType.name}\\n` +\n          `\uD83D\uDCE6 Version: ${nodeType.version}\\n` +\n          `\uD83D\uDCC1 Groups: ${nodeType.group.join(', ')}\\n` +\n          `\uD83D\uDCDD Description: ${nodeType.description}\\n\\n` +\n          `\uD83D\uDD10 Credentials:\\n${credentials}\\n\\n` +\n          `\u2699\uFE0F Parameters${hasMoreProps ? ' (showing first 10)' : ''}:\\n${properties}` +\n          (hasMoreProps ? '\\n\\n... and more parameters available' : '') +\n          (nodeType.documentationUrl ? `\\n\\n\uD83D\uDCD6 Documentation: ${nodeType.documentationUrl}` : '')\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          if (error.message.includes('not found')) {\n            throw new UserError(\n              `Node type '${args.nodeType}' not found. Check the name and try again.`\n            );\n          }\n          throw new UserError(`Failed to get node type details: ${error.message}`);\n        }\n        throw new UserError('Failed to get node type details with unknown error');\n      }\n    },\n  });\n\n  // Workflow Node Analysis Tools\n  server.addTool({\n    name: 'search-workflow-nodes',\n    description: 'Search for nodes across workflows by type, name, or workflow criteria',\n    parameters: SearchNodesSchema,\n    annotations: {\n      title: 'Search Workflow Nodes',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof SearchNodesSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const results: NodeSearchResult[] = [];\n\n        if (args.workflowId) {\n          // Search within specific workflow\n          const workflow = await client.getWorkflow(args.workflowId);\n          const nodes = workflow.nodes || [];\n\n          const filteredNodes = nodes.filter(\n            node => !args.nodeType || node.type.includes(args.nodeType)\n          );\n\n          results.push(\n            ...filteredNodes.map(node => ({\n              workflowId: workflow.id,\n              workflowName: workflow.name,\n              node,\n              isWorkflowActive: workflow.active,\n            }))\n          );\n        } else {\n          // Search across all workflows\n          const workflowsResponse = await client.getWorkflows({ limit: args.limit });\n          const workflows = workflowsResponse.data.filter(wf => !args.activeOnly || wf.active);\n\n          for (const workflow of workflows) {\n            const fullWorkflow = await client.getWorkflow(workflow.id);\n            const nodes = fullWorkflow.nodes || [];\n\n            const filteredNodes = nodes.filter(\n              node => !args.nodeType || node.type.includes(args.nodeType)\n            );\n\n            results.push(\n              ...filteredNodes.map(node => ({\n                workflowId: workflow.id,\n                workflowName: workflow.name,\n                node,\n                isWorkflowActive: workflow.active,\n              }))\n            );\n          }\n        }\n\n        const limitedResults = results.slice(0, args.limit);\n        return formatSearchResults(limitedResults);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to search nodes: ${error.message}`);\n        }\n        throw new UserError('Failed to search nodes with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'analyze-node-usage',\n    description: 'Analyze usage statistics for node types across all workflows',\n    parameters: z.object({\n      nodeType: z.string().optional(),\n      includeInactive: z.boolean().optional().default(false),\n    }),\n    annotations: {\n      title: 'Analyze Node Usage',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: true,\n      openWorldHint: false,\n    },\n    execute: async (args: { nodeType?: string; includeInactive?: boolean }) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflowsResponse = await client.getWorkflows({ limit: 100 });\n        const workflows = workflowsResponse.data;\n        const usageMap: Record<string, NodeUsageStats> = {};\n\n        for (const workflow of workflows) {\n          if (!args.includeInactive && !workflow.active) continue;\n\n          const fullWorkflow = await client.getWorkflow(workflow.id);\n          const nodes = fullWorkflow.nodes || [];\n\n          for (const node of nodes) {\n            if (args.nodeType && !node.type.includes(args.nodeType)) continue;\n\n            if (!usageMap[node.type]) {\n              usageMap[node.type] = {\n                nodeType: node.type,\n                totalCount: 0,\n                activeWorkflowCount: 0,\n                workflowIds: [],\n              };\n            }\n\n            usageMap[node.type].totalCount++;\n            if (workflow.active) {\n              usageMap[node.type].activeWorkflowCount++;\n            }\n            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {\n              usageMap[node.type].workflowIds.push(workflow.id);\n            }\n          }\n        }\n\n        const stats = Object.values(usageMap).sort((a, b) => b.totalCount - a.totalCount);\n        return formatUsageStats(stats);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to analyze node usage: ${error.message}`);\n        }\n        throw new UserError('Failed to analyze node usage with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'update-workflow-node',\n    description: 'Update properties of a specific node within a workflow',\n    parameters: UpdateNodeSchema,\n    annotations: {\n      title: 'Update Workflow Node',\n      readOnlyHint: false,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof UpdateNodeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const workflow = await client.getWorkflow(args.workflowId);\n        const nodes = workflow.nodes || [];\n\n        const nodeIndex = nodes.findIndex(node => node.id === args.nodeId);\n        if (nodeIndex === -1) {\n          throw new UserError(\n            `Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`\n          );\n        }\n\n        const originalNode = nodes[nodeIndex];\n        const updatedNode = {\n          ...originalNode,\n          ...args.updates,\n          id: originalNode.id, // Preserve original ID\n          type: originalNode.type, // Preserve original type\n        };\n\n        nodes[nodeIndex] = updatedNode;\n\n        await client.updateWorkflow(args.workflowId, {\n          nodes: nodes as Array<Record<string, unknown>>,\n        });\n\n        const changes = Object.keys(args.updates)\n          .map(\n            key =>\n              `\u2022 ${key}: ${JSON.stringify((originalNode as any)[key])} \u2192 ${JSON.stringify((args.updates as any)[key])}`\n          )\n          .join('\\n');\n\n        return `\u2705 Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\\n\\nChanges made:\\n${changes}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to update node: ${error.message}`);\n        }\n        throw new UserError('Failed to update node with unknown error');\n      }\n    },\n  });\n\n  // Dynamic Parameters and AI Tools\n  server.addTool({\n    name: 'get-dynamic-node-parameters',\n    description: 'Get dynamic parameter options for a node type based on current configuration',\n    parameters: DynamicParametersSchema,\n    annotations: {\n      title: 'Get Dynamic Node Parameters',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof DynamicParametersSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const options: DynamicNodeOptions = {\n          property: args.property,\n          currentNodeParameters: args.currentNodeParameters,\n          credentials: args.credentials,\n          path: args.path,\n          methodName: args.methodName,\n          loadOptionsMethod: args.loadOptionsMethod,\n        };\n\n        const parameters = await client.getDynamicNodeParameters(options);\n\n        if (parameters.length === 0) {\n          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;\n        }\n\n        const formatted = parameters\n          .map(\n            param => `\u2022 ${param.displayName}: ${param.value}${param.type ? ` (${param.type})` : ''}`\n          )\n          .join('\\n');\n\n        return `\uD83D\uDD27 Dynamic parameters for '${args.property}':\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get dynamic parameters: ${error.message}`);\n        }\n        throw new UserError('Failed to get dynamic parameters with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'classify-ai-node',\n    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Classify AI Node',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const classification = await client.classifyAINode(args.nodeType);\n\n        const capabilities =\n          classification.aiCapabilities.length > 0\n            ? classification.aiCapabilities.map(cap => `\u2022 ${cap}`).join('\\n')\n            : 'None identified';\n\n        const integrations =\n          classification.suggestedIntegrations.length > 0\n            ? classification.suggestedIntegrations.map(int => `\u2022 ${int}`).join('\\n')\n            : 'None suggested';\n\n        return (\n          `\uD83E\uDD16 AI Classification for ${args.nodeType}\\n\\n` +\n          `Is AI Node: ${classification.isAINode ? '\u2705 Yes' : '\u274C No'}\\n` +\n          `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\\n\\n` +\n          `\uD83C\uDFAF AI Capabilities:\\n${capabilities}\\n\\n` +\n          `\uD83D\uDD17 Suggested Integrations:\\n${integrations}`\n        );\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to classify AI node: ${error.message}`);\n        }\n        throw new UserError('Failed to classify AI node with unknown error');\n      }\n    },\n  });\n\n  server.addTool({\n    name: 'get-ai-node-suggestions',\n    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',\n    parameters: NodeTypeSchema,\n    annotations: {\n      title: 'Get AI Node Suggestions',\n      readOnlyHint: true,\n      destructiveHint: false,\n      idempotentHint: false,\n      openWorldHint: false,\n    },\n    execute: async (args: z.infer<typeof NodeTypeSchema>) => {\n      const client = getClient();\n      if (!client) {\n        throw new UserError('n8n client not initialized. Please run init-n8n first.');\n      }\n\n      try {\n        const suggestions = await client.getAINodeSuggestions(args.nodeType);\n\n        if (suggestions.length === 0) {\n          return `No AI suggestions available for node type '${args.nodeType}'`;\n        }\n\n        const formatted = suggestions\n          .map((suggestion, index) => {\n            const alternatives =\n              suggestion.alternativeNodes.length > 0\n                ? `\\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`\n                : '';\n\n            return (\n              `${index + 1}. ${suggestion.suggestion}\\n` +\n              `   Reasoning: ${suggestion.reasoning}\\n` +\n              `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`\n            );\n          })\n          .join('\\n\\n');\n\n        return `\uD83D\uDCA1 AI Suggestions for ${args.nodeType}:\\n\\n${formatted}`;\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new UserError(`Failed to get AI suggestions: ${error.message}`);\n        }\n        throw new UserError('Failed to get AI suggestions with unknown error');\n      }\n    },\n  });\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "173ec3b5d146be78d593c9c740085c9eb8786758"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qv86yv8dz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qv86yv8dz();
import { z } from 'zod';
import { UserError } from 'fastmcp';
// Validation Schemas
const PackageNameSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[0]++, z.object({
  packageName: z.string().min(1, 'Package name is required')
}));
const InstallPackageSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[1]++, z.object({
  name: z.string().min(1, 'Package name is required'),
  version: z.string().optional()
}));
const SearchNodesSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[2]++, z.object({
  nodeType: z.string().optional(),
  workflowId: z.string().optional(),
  activeOnly: z.boolean().optional().default(false),
  limit: z.number().min(1).max(100).optional().default(50)
}));
const NodeTypeSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[3]++, z.object({
  nodeType: z.string().min(1, 'Node type is required')
}));
const UpdateNodeSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[4]++, z.object({
  workflowId: z.string().min(1, 'Workflow ID is required'),
  nodeId: z.string().min(1, 'Node ID is required'),
  updates: z.object({
    name: z.string().optional(),
    parameters: z.record(z.unknown()).optional(),
    disabled: z.boolean().optional(),
    notes: z.string().optional(),
    position: z.tuple([z.number(), z.number()]).optional()
  })
}));
const DynamicParametersSchema =
/* istanbul ignore next */
(cov_2qv86yv8dz().s[5]++, z.object({
  property: z.string().min(1, 'Property name is required'),
  nodeType: z.string().min(1, 'Node type is required'),
  currentNodeParameters: z.record(z.unknown()).optional().default({}),
  credentials: z.record(z.unknown()).optional(),
  path: z.string().optional(),
  methodName: z.string().optional(),
  loadOptionsMethod: z.string().optional()
}));
// Helper Functions
function formatPackageList(packages) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[0]++;
  cov_2qv86yv8dz().s[6]++;
  if (packages.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[0][0]++;
    cov_2qv86yv8dz().s[7]++;
    return 'No community packages installed.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[0][1]++;
  }
  cov_2qv86yv8dz().s[8]++;
  return packages.map(pkg => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[1]++;
    const nodeCount =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[9]++,
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[1][0]++, pkg.installedNodes?.length) ||
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[1][1]++, 0));
    const status =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[10]++, pkg.failedLoading ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[2][0]++, ' (⚠️ Failed Loading)') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[2][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[11]++;
    return `• ${pkg.packageName}@${pkg.installedVersion}${status}\n  ${nodeCount} node(s) installed\n  Updated: ${new Date(pkg.updatedAt).toLocaleString()}`;
  }).join('\n\n');
}
function formatNodeTypeList(nodeTypes) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[2]++;
  cov_2qv86yv8dz().s[12]++;
  if (nodeTypes.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[3][0]++;
    cov_2qv86yv8dz().s[13]++;
    return 'No node types found.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[3][1]++;
  }
  cov_2qv86yv8dz().s[14]++;
  return nodeTypes.map(node => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[3]++;
    const groups =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[15]++, node.group.join(', '));
    const credentials =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[16]++, node.credentials?.length ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[4][0]++, `\n  Credentials: ${node.credentials.map(c => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[4]++;
      cov_2qv86yv8dz().s[17]++;
      return c.name;
    }).join(', ')}`) :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[4][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[18]++;
    return `• ${node.displayName} (${node.name})\n  Version: ${node.version}\n  Groups: ${groups}${credentials}\n  ${node.description}`;
  }).join('\n\n');
}
function formatSearchResults(results) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[5]++;
  cov_2qv86yv8dz().s[19]++;
  if (results.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[5][0]++;
    cov_2qv86yv8dz().s[20]++;
    return 'No nodes found matching the search criteria.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[5][1]++;
  }
  cov_2qv86yv8dz().s[21]++;
  return results.map(result => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[6]++;
    const status =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[22]++, result.isWorkflowActive ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[6][0]++, '✅ Active') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[6][1]++, '❌ Inactive'));
    const disabled =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[23]++, result.node.disabled ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[7][0]++, ' (Disabled)') :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[7][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[24]++;
    return `• ${result.node.name} (${result.node.type})${disabled}\n  Workflow: ${result.workflowName} (${result.workflowId})\n  Status: ${status}\n  Position: [${result.node.position.join(', ')}]`;
  }).join('\n\n');
}
function formatUsageStats(stats) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[7]++;
  cov_2qv86yv8dz().s[25]++;
  if (stats.length === 0) {
    /* istanbul ignore next */
    cov_2qv86yv8dz().b[8][0]++;
    cov_2qv86yv8dz().s[26]++;
    return 'No usage statistics found.';
  } else
  /* istanbul ignore next */
  {
    cov_2qv86yv8dz().b[8][1]++;
  }
  cov_2qv86yv8dz().s[27]++;
  return stats.map(stat => {
    /* istanbul ignore next */
    cov_2qv86yv8dz().f[8]++;
    const lastUsed =
    /* istanbul ignore next */
    (cov_2qv86yv8dz().s[28]++, stat.lastUsed ?
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[9][0]++, `\n  Last Used: ${new Date(stat.lastUsed).toLocaleString()}`) :
    /* istanbul ignore next */
    (cov_2qv86yv8dz().b[9][1]++, ''));
    /* istanbul ignore next */
    cov_2qv86yv8dz().s[29]++;
    return `• ${stat.nodeType}\n  Total Usage: ${stat.totalCount} times\n  Active Workflows: ${stat.activeWorkflowCount}${lastUsed}`;
  }).join('\n\n');
}
export function createNodeManagementTools(getClient, server) {
  /* istanbul ignore next */
  cov_2qv86yv8dz().f[9]++;
  cov_2qv86yv8dz().s[30]++;
  // Community Package Management Tools
  server.addTool({
    name: 'list-community-packages',
    description: 'List all installed community packages and their node types',
    parameters: z.object({}),
    annotations: {
      title: 'List Community Packages',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async () => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[10]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[31]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[32]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[10][0]++;
        cov_2qv86yv8dz().s[33]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[10][1]++;
      }
      cov_2qv86yv8dz().s[34]++;
      try {
        const response =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[35]++, await client.getCommunityPackages());
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[36]++;
        return formatPackageList(response.data);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[37]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[11][0]++;
          cov_2qv86yv8dz().s[38]++;
          throw new UserError(`Failed to list community packages: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[11][1]++;
        }
        cov_2qv86yv8dz().s[39]++;
        throw new UserError('Failed to list community packages with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[40]++;
  server.addTool({
    name: 'install-community-package',
    description: 'Install a community package from npm registry',
    parameters: InstallPackageSchema,
    annotations: {
      title: 'Install Community Package',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: true
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[11]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[41]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[42]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[12][0]++;
        cov_2qv86yv8dz().s[43]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[12][1]++;
      }
      cov_2qv86yv8dz().s[44]++;
      try {
        const packageData =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[45]++, {
          name: args.name,
          version: args.version
        });
        const installedPackage =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[46]++, await client.installCommunityPackage(packageData));
        const nodeCount =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[47]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[13][0]++, installedPackage.installedNodes?.length) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[13][1]++, 0));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[48]++;
        return `✅ Successfully installed package: ${installedPackage.packageName}@${installedPackage.installedVersion}\n\nInstalled ${nodeCount} new node type(s):\n${
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[14][0]++, installedPackage.installedNodes?.map(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[12]++;
          cov_2qv86yv8dz().s[49]++;
          return `• ${node.displayName} (${node.name})`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[14][1]++, 'No nodes listed')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[50]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[15][0]++;
          cov_2qv86yv8dz().s[51]++;
          if (error.message.includes('already installed')) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[16][0]++;
            cov_2qv86yv8dz().s[52]++;
            throw new UserError(`Package ${args.name} is already installed. Use update-community-package to update it.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[16][1]++;
          }
          cov_2qv86yv8dz().s[53]++;
          throw new UserError(`Failed to install package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[15][1]++;
        }
        cov_2qv86yv8dz().s[54]++;
        throw new UserError('Failed to install package with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[55]++;
  server.addTool({
    name: 'update-community-package',
    description: 'Update an installed community package to a newer version',
    parameters: InstallPackageSchema,
    annotations: {
      title: 'Update Community Package',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[13]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[56]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[57]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[17][0]++;
        cov_2qv86yv8dz().s[58]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[17][1]++;
      }
      cov_2qv86yv8dz().s[59]++;
      try {
        const packageData =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[60]++, {
          name: args.name,
          version: args.version
        });
        const updatedPackage =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[61]++, await client.updateCommunityPackage(args.name, packageData));
        const nodeCount =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[62]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[18][0]++, updatedPackage.installedNodes?.length) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[18][1]++, 0));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[63]++;
        return `✅ Successfully updated package: ${updatedPackage.packageName}@${updatedPackage.installedVersion}\n\nPackage contains ${nodeCount} node type(s):\n${
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[19][0]++, updatedPackage.installedNodes?.map(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[14]++;
          cov_2qv86yv8dz().s[64]++;
          return `• ${node.displayName} (${node.name})`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[19][1]++, 'No nodes listed')}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[65]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[20][0]++;
          cov_2qv86yv8dz().s[66]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[22][0]++, error.message.includes('not found')) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[22][1]++, error.message.includes('not installed'))) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[21][0]++;
            cov_2qv86yv8dz().s[67]++;
            throw new UserError(`Package ${args.name} is not installed. Use install-community-package to install it first.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[21][1]++;
          }
          cov_2qv86yv8dz().s[68]++;
          throw new UserError(`Failed to update package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[20][1]++;
        }
        cov_2qv86yv8dz().s[69]++;
        throw new UserError('Failed to update package with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[70]++;
  server.addTool({
    name: 'uninstall-community-package',
    description: 'Remove a community package and all its node types',
    parameters: PackageNameSchema,
    annotations: {
      title: 'Uninstall Community Package',
      readOnlyHint: false,
      destructiveHint: true,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[15]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[71]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[72]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[23][0]++;
        cov_2qv86yv8dz().s[73]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[23][1]++;
      }
      cov_2qv86yv8dz().s[74]++;
      try {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[75]++;
        await client.uninstallCommunityPackage(args.packageName);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[76]++;
        return `✅ Successfully uninstalled package: ${args.packageName}\n\n⚠️ Note: Any workflows using nodes from this package may no longer function correctly.`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[77]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[24][0]++;
          cov_2qv86yv8dz().s[78]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[26][0]++, error.message.includes('not found')) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[26][1]++, error.message.includes('not installed'))) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[25][0]++;
            cov_2qv86yv8dz().s[79]++;
            throw new UserError(`Package ${args.packageName} is not installed.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[25][1]++;
          }
          cov_2qv86yv8dz().s[80]++;
          throw new UserError(`Failed to uninstall package: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[24][1]++;
        }
        cov_2qv86yv8dz().s[81]++;
        throw new UserError('Failed to uninstall package with unknown error');
      }
    }
  });
  // Node Type Discovery Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[82]++;
  server.addTool({
    name: 'list-node-types',
    description: 'List all available node types (core and community)',
    parameters: z.object({
      communityOnly: z.boolean().optional().default(false),
      limit: z.number().min(1).max(500).optional().default(100)
    }),
    annotations: {
      title: 'List Node Types',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[16]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[83]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[84]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[27][0]++;
        cov_2qv86yv8dz().s[85]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[27][1]++;
      }
      cov_2qv86yv8dz().s[86]++;
      try {
        const nodeTypes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[87]++, args.communityOnly ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[28][0]++, await client.getCommunityNodeTypes()) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[28][1]++, await client.getNodeTypes()));
        const limitedResults =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[88]++, nodeTypes.slice(0, args.limit));
        const hasMore =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[89]++, nodeTypes.length > (
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[29][0]++, args.limit) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[29][1]++, 100)));
        let result =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[90]++, formatNodeTypeList(limitedResults));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[91]++;
        if (hasMore) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[30][0]++;
          cov_2qv86yv8dz().s[92]++;
          result += `\n\n... and ${nodeTypes.length - (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[31][0]++, args.limit) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[31][1]++, 100))} more node types. Use a higher limit to see more.`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[30][1]++;
        }
        cov_2qv86yv8dz().s[93]++;
        return result;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[94]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[32][0]++;
          cov_2qv86yv8dz().s[95]++;
          throw new UserError(`Failed to list node types: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[32][1]++;
        }
        cov_2qv86yv8dz().s[96]++;
        throw new UserError('Failed to list node types with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[97]++;
  server.addTool({
    name: 'get-node-type-details',
    description: 'Get detailed information about a specific node type including parameters and credentials',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Get Node Type Details',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[17]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[98]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[99]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[33][0]++;
        cov_2qv86yv8dz().s[100]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[33][1]++;
      }
      cov_2qv86yv8dz().s[101]++;
      try {
        const nodeType =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[102]++, await client.getNodeType(args.nodeType));
        const credentials =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[103]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[34][0]++, nodeType.credentials?.map(cred => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[18]++;
          cov_2qv86yv8dz().s[104]++;
          return `• ${cred.name}${cred.required ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[35][0]++, ' (Required)') :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[35][1]++, ' (Optional)')}`;
        }).join('\n')) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[34][1]++, 'None'));
        const properties =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[105]++, nodeType.properties.slice(0, 10).map(prop => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[19]++;
          cov_2qv86yv8dz().s[106]++;
          return `• ${prop.displayName} (${prop.name}): ${prop.type}${prop.required ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[36][0]++, ' *') :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[36][1]++, '')}\n  ${
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[37][0]++, prop.description) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[37][1]++, 'No description')}`;
        }).join('\n'));
        const hasMoreProps =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[107]++, nodeType.properties.length > 10);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[108]++;
        return `📋 Node Type: ${nodeType.displayName}\n\n` + `🔧 Technical Name: ${nodeType.name}\n` + `📦 Version: ${nodeType.version}\n` + `📁 Groups: ${nodeType.group.join(', ')}\n` + `📝 Description: ${nodeType.description}\n\n` + `🔐 Credentials:\n${credentials}\n\n` + `⚙️ Parameters${hasMoreProps ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[38][0]++, ' (showing first 10)') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[38][1]++, '')}:\n${properties}` + (hasMoreProps ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[39][0]++, '\n\n... and more parameters available') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[39][1]++, '')) + (nodeType.documentationUrl ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[40][0]++, `\n\n📖 Documentation: ${nodeType.documentationUrl}`) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[40][1]++, ''));
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[109]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[41][0]++;
          cov_2qv86yv8dz().s[110]++;
          if (error.message.includes('not found')) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[42][0]++;
            cov_2qv86yv8dz().s[111]++;
            throw new UserError(`Node type '${args.nodeType}' not found. Check the name and try again.`);
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[42][1]++;
          }
          cov_2qv86yv8dz().s[112]++;
          throw new UserError(`Failed to get node type details: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[41][1]++;
        }
        cov_2qv86yv8dz().s[113]++;
        throw new UserError('Failed to get node type details with unknown error');
      }
    }
  });
  // Workflow Node Analysis Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[114]++;
  server.addTool({
    name: 'search-workflow-nodes',
    description: 'Search for nodes across workflows by type, name, or workflow criteria',
    parameters: SearchNodesSchema,
    annotations: {
      title: 'Search Workflow Nodes',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[20]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[115]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[116]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[43][0]++;
        cov_2qv86yv8dz().s[117]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[43][1]++;
      }
      cov_2qv86yv8dz().s[118]++;
      try {
        const results =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[119]++, []);
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[120]++;
        if (args.workflowId) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[44][0]++;
          // Search within specific workflow
          const workflow =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[121]++, await client.getWorkflow(args.workflowId));
          const nodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[122]++,
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[45][0]++, workflow.nodes) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[45][1]++, []));
          const filteredNodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[123]++, nodes.filter(node => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[21]++;
            cov_2qv86yv8dz().s[124]++;
            return /* istanbul ignore next */(cov_2qv86yv8dz().b[46][0]++, !args.nodeType) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[46][1]++, node.type.includes(args.nodeType));
          }));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[125]++;
          results.push(...filteredNodes.map(node => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[22]++;
            cov_2qv86yv8dz().s[126]++;
            return {
              workflowId: workflow.id,
              workflowName: workflow.name,
              node,
              isWorkflowActive: workflow.active
            };
          }));
        } else {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[44][1]++;
          // Search across all workflows
          const workflowsResponse =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[127]++, await client.getWorkflows({
            limit: args.limit
          }));
          const workflows =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[128]++, workflowsResponse.data.filter(wf => {
            /* istanbul ignore next */
            cov_2qv86yv8dz().f[23]++;
            cov_2qv86yv8dz().s[129]++;
            return /* istanbul ignore next */(cov_2qv86yv8dz().b[47][0]++, !args.activeOnly) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[47][1]++, wf.active);
          }));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[130]++;
          for (const workflow of workflows) {
            const fullWorkflow =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[131]++, await client.getWorkflow(workflow.id));
            const nodes =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[132]++,
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[48][0]++, fullWorkflow.nodes) ||
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[48][1]++, []));
            const filteredNodes =
            /* istanbul ignore next */
            (cov_2qv86yv8dz().s[133]++, nodes.filter(node => {
              /* istanbul ignore next */
              cov_2qv86yv8dz().f[24]++;
              cov_2qv86yv8dz().s[134]++;
              return /* istanbul ignore next */(cov_2qv86yv8dz().b[49][0]++, !args.nodeType) ||
              /* istanbul ignore next */
              (cov_2qv86yv8dz().b[49][1]++, node.type.includes(args.nodeType));
            }));
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[135]++;
            results.push(...filteredNodes.map(node => {
              /* istanbul ignore next */
              cov_2qv86yv8dz().f[25]++;
              cov_2qv86yv8dz().s[136]++;
              return {
                workflowId: workflow.id,
                workflowName: workflow.name,
                node,
                isWorkflowActive: workflow.active
              };
            }));
          }
        }
        const limitedResults =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[137]++, results.slice(0, args.limit));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[138]++;
        return formatSearchResults(limitedResults);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[139]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[50][0]++;
          cov_2qv86yv8dz().s[140]++;
          throw new UserError(`Failed to search nodes: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[50][1]++;
        }
        cov_2qv86yv8dz().s[141]++;
        throw new UserError('Failed to search nodes with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[142]++;
  server.addTool({
    name: 'analyze-node-usage',
    description: 'Analyze usage statistics for node types across all workflows',
    parameters: z.object({
      nodeType: z.string().optional(),
      includeInactive: z.boolean().optional().default(false)
    }),
    annotations: {
      title: 'Analyze Node Usage',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: true,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[26]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[143]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[144]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[51][0]++;
        cov_2qv86yv8dz().s[145]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[51][1]++;
      }
      cov_2qv86yv8dz().s[146]++;
      try {
        const workflowsResponse =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[147]++, await client.getWorkflows({
          limit: 100
        }));
        const workflows =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[148]++, workflowsResponse.data);
        const usageMap =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[149]++, {});
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[150]++;
        for (const workflow of workflows) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[151]++;
          if (
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[53][0]++, !args.includeInactive) &&
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[53][1]++, !workflow.active)) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().b[52][0]++;
            cov_2qv86yv8dz().s[152]++;
            continue;
          } else
          /* istanbul ignore next */
          {
            cov_2qv86yv8dz().b[52][1]++;
          }
          const fullWorkflow =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[153]++, await client.getWorkflow(workflow.id));
          const nodes =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[154]++,
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[54][0]++, fullWorkflow.nodes) ||
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[54][1]++, []));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[155]++;
          for (const node of nodes) {
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[156]++;
            if (
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[56][0]++, args.nodeType) &&
            /* istanbul ignore next */
            (cov_2qv86yv8dz().b[56][1]++, !node.type.includes(args.nodeType))) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[55][0]++;
              cov_2qv86yv8dz().s[157]++;
              continue;
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[55][1]++;
            }
            cov_2qv86yv8dz().s[158]++;
            if (!usageMap[node.type]) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[57][0]++;
              cov_2qv86yv8dz().s[159]++;
              usageMap[node.type] = {
                nodeType: node.type,
                totalCount: 0,
                activeWorkflowCount: 0,
                workflowIds: []
              };
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[57][1]++;
            }
            cov_2qv86yv8dz().s[160]++;
            usageMap[node.type].totalCount++;
            /* istanbul ignore next */
            cov_2qv86yv8dz().s[161]++;
            if (workflow.active) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[58][0]++;
              cov_2qv86yv8dz().s[162]++;
              usageMap[node.type].activeWorkflowCount++;
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[58][1]++;
            }
            cov_2qv86yv8dz().s[163]++;
            if (!usageMap[node.type].workflowIds.includes(workflow.id)) {
              /* istanbul ignore next */
              cov_2qv86yv8dz().b[59][0]++;
              cov_2qv86yv8dz().s[164]++;
              usageMap[node.type].workflowIds.push(workflow.id);
            } else
            /* istanbul ignore next */
            {
              cov_2qv86yv8dz().b[59][1]++;
            }
          }
        }
        const stats =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[165]++, Object.values(usageMap).sort((a, b) => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[27]++;
          cov_2qv86yv8dz().s[166]++;
          return b.totalCount - a.totalCount;
        }));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[167]++;
        return formatUsageStats(stats);
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[168]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[60][0]++;
          cov_2qv86yv8dz().s[169]++;
          throw new UserError(`Failed to analyze node usage: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[60][1]++;
        }
        cov_2qv86yv8dz().s[170]++;
        throw new UserError('Failed to analyze node usage with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[171]++;
  server.addTool({
    name: 'update-workflow-node',
    description: 'Update properties of a specific node within a workflow',
    parameters: UpdateNodeSchema,
    annotations: {
      title: 'Update Workflow Node',
      readOnlyHint: false,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[28]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[172]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[173]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[61][0]++;
        cov_2qv86yv8dz().s[174]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[61][1]++;
      }
      cov_2qv86yv8dz().s[175]++;
      try {
        const workflow =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[176]++, await client.getWorkflow(args.workflowId));
        const nodes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[177]++,
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[62][0]++, workflow.nodes) ||
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[62][1]++, []));
        const nodeIndex =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[178]++, nodes.findIndex(node => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[29]++;
          cov_2qv86yv8dz().s[179]++;
          return node.id === args.nodeId;
        }));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[180]++;
        if (nodeIndex === -1) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[63][0]++;
          cov_2qv86yv8dz().s[181]++;
          throw new UserError(`Node with ID '${args.nodeId}' not found in workflow '${args.workflowId}'`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[63][1]++;
        }
        const originalNode =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[182]++, nodes[nodeIndex]);
        const updatedNode =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[183]++, {
          ...originalNode,
          ...args.updates,
          id: originalNode.id,
          // Preserve original ID
          type: originalNode.type // Preserve original type
        });
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[184]++;
        nodes[nodeIndex] = updatedNode;
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[185]++;
        await client.updateWorkflow(args.workflowId, {
          nodes: nodes
        });
        const changes =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[186]++, Object.keys(args.updates).map(key => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[30]++;
          cov_2qv86yv8dz().s[187]++;
          return `• ${key}: ${JSON.stringify(originalNode[key])} → ${JSON.stringify(args.updates[key])}`;
        }).join('\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[188]++;
        return `✅ Successfully updated node '${originalNode.name}' in workflow '${workflow.name}'\n\nChanges made:\n${changes}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[189]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[64][0]++;
          cov_2qv86yv8dz().s[190]++;
          throw new UserError(`Failed to update node: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[64][1]++;
        }
        cov_2qv86yv8dz().s[191]++;
        throw new UserError('Failed to update node with unknown error');
      }
    }
  });
  // Dynamic Parameters and AI Tools
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[192]++;
  server.addTool({
    name: 'get-dynamic-node-parameters',
    description: 'Get dynamic parameter options for a node type based on current configuration',
    parameters: DynamicParametersSchema,
    annotations: {
      title: 'Get Dynamic Node Parameters',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[31]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[193]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[194]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[65][0]++;
        cov_2qv86yv8dz().s[195]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[65][1]++;
      }
      cov_2qv86yv8dz().s[196]++;
      try {
        const options =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[197]++, {
          property: args.property,
          currentNodeParameters: args.currentNodeParameters,
          credentials: args.credentials,
          path: args.path,
          methodName: args.methodName,
          loadOptionsMethod: args.loadOptionsMethod
        });
        const parameters =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[198]++, await client.getDynamicNodeParameters(options));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[199]++;
        if (parameters.length === 0) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[66][0]++;
          cov_2qv86yv8dz().s[200]++;
          return `No dynamic parameters found for property '${args.property}' on node type '${args.nodeType}'`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[66][1]++;
        }
        const formatted =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[201]++, parameters.map(param => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[32]++;
          cov_2qv86yv8dz().s[202]++;
          return `• ${param.displayName}: ${param.value}${param.type ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[67][0]++, ` (${param.type})`) :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[67][1]++, '')}`;
        }).join('\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[203]++;
        return `🔧 Dynamic parameters for '${args.property}':\n\n${formatted}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[204]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[68][0]++;
          cov_2qv86yv8dz().s[205]++;
          throw new UserError(`Failed to get dynamic parameters: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[68][1]++;
        }
        cov_2qv86yv8dz().s[206]++;
        throw new UserError('Failed to get dynamic parameters with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[207]++;
  server.addTool({
    name: 'classify-ai-node',
    description: 'Use AI to classify and analyze a node type for AI capabilities and integrations',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Classify AI Node',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[33]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[208]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[209]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[69][0]++;
        cov_2qv86yv8dz().s[210]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[69][1]++;
      }
      cov_2qv86yv8dz().s[211]++;
      try {
        const classification =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[212]++, await client.classifyAINode(args.nodeType));
        const capabilities =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[213]++, classification.aiCapabilities.length > 0 ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[70][0]++, classification.aiCapabilities.map(cap => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[34]++;
          cov_2qv86yv8dz().s[214]++;
          return `• ${cap}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[70][1]++, 'None identified'));
        const integrations =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[215]++, classification.suggestedIntegrations.length > 0 ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[71][0]++, classification.suggestedIntegrations.map(int => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[35]++;
          cov_2qv86yv8dz().s[216]++;
          return `• ${int}`;
        }).join('\n')) :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[71][1]++, 'None suggested'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[217]++;
        return `🤖 AI Classification for ${args.nodeType}\n\n` + `Is AI Node: ${classification.isAINode ?
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[72][0]++, '✅ Yes') :
        /* istanbul ignore next */
        (cov_2qv86yv8dz().b[72][1]++, '❌ No')}\n` + `Confidence Score: ${Math.round(classification.confidenceScore * 100)}%\n\n` + `🎯 AI Capabilities:\n${capabilities}\n\n` + `🔗 Suggested Integrations:\n${integrations}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[218]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[73][0]++;
          cov_2qv86yv8dz().s[219]++;
          throw new UserError(`Failed to classify AI node: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[73][1]++;
        }
        cov_2qv86yv8dz().s[220]++;
        throw new UserError('Failed to classify AI node with unknown error');
      }
    }
  });
  /* istanbul ignore next */
  cov_2qv86yv8dz().s[221]++;
  server.addTool({
    name: 'get-ai-node-suggestions',
    description: 'Get AI-powered suggestions for optimizing or enhancing a node type',
    parameters: NodeTypeSchema,
    annotations: {
      title: 'Get AI Node Suggestions',
      readOnlyHint: true,
      destructiveHint: false,
      idempotentHint: false,
      openWorldHint: false
    },
    execute: async args => {
      /* istanbul ignore next */
      cov_2qv86yv8dz().f[36]++;
      const client =
      /* istanbul ignore next */
      (cov_2qv86yv8dz().s[222]++, getClient());
      /* istanbul ignore next */
      cov_2qv86yv8dz().s[223]++;
      if (!client) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().b[74][0]++;
        cov_2qv86yv8dz().s[224]++;
        throw new UserError('n8n client not initialized. Please run init-n8n first.');
      } else
      /* istanbul ignore next */
      {
        cov_2qv86yv8dz().b[74][1]++;
      }
      cov_2qv86yv8dz().s[225]++;
      try {
        const suggestions =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[226]++, await client.getAINodeSuggestions(args.nodeType));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[227]++;
        if (suggestions.length === 0) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[75][0]++;
          cov_2qv86yv8dz().s[228]++;
          return `No AI suggestions available for node type '${args.nodeType}'`;
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[75][1]++;
        }
        const formatted =
        /* istanbul ignore next */
        (cov_2qv86yv8dz().s[229]++, suggestions.map((suggestion, index) => {
          /* istanbul ignore next */
          cov_2qv86yv8dz().f[37]++;
          const alternatives =
          /* istanbul ignore next */
          (cov_2qv86yv8dz().s[230]++, suggestion.alternativeNodes.length > 0 ?
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[76][0]++, `\n  Alternative nodes: ${suggestion.alternativeNodes.join(', ')}`) :
          /* istanbul ignore next */
          (cov_2qv86yv8dz().b[76][1]++, ''));
          /* istanbul ignore next */
          cov_2qv86yv8dz().s[231]++;
          return `${index + 1}. ${suggestion.suggestion}\n` + `   Reasoning: ${suggestion.reasoning}\n` + `   Confidence: ${Math.round(suggestion.confidence * 100)}%${alternatives}`;
        }).join('\n\n'));
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[232]++;
        return `💡 AI Suggestions for ${args.nodeType}:\n\n${formatted}`;
      } catch (error) {
        /* istanbul ignore next */
        cov_2qv86yv8dz().s[233]++;
        if (error instanceof Error) {
          /* istanbul ignore next */
          cov_2qv86yv8dz().b[77][0]++;
          cov_2qv86yv8dz().s[234]++;
          throw new UserError(`Failed to get AI suggestions: ${error.message}`);
        } else
        /* istanbul ignore next */
        {
          cov_2qv86yv8dz().b[77][1]++;
        }
        cov_2qv86yv8dz().s[235]++;
        throw new UserError('Failed to get AI suggestions with unknown error');
      }
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,