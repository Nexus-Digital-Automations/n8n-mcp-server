b00eabe15988db841d57657a51956b7b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
// Mock dependencies
globals_1.jest.mock('fastmcp');
globals_1.jest.mock('../../../src/client/n8nClient');
const executionResources_1 = require("../../../src/resources/executionResources");
// Mock console methods to avoid test output pollution
const mockConsoleLog = globals_1.jest.fn();
globals_1.jest.spyOn(console, 'log').mockImplementation(mockConsoleLog);
(0, globals_1.describe)('ExecutionResourceManager', () => {
    let executionManager;
    let mockServer;
    let mockClient;
    let getClientFn;
    // Mock execution data
    const mockExecution = {
        id: 'exec-123',
        workflowId: 'workflow-456',
        finished: true,
        startedAt: '2023-01-01T10:00:00Z',
        stoppedAt: '2023-01-01T10:05:00Z',
        mode: 'manual',
        status: 'success',
        retryOf: undefined,
        retrySuccessId: undefined,
        data: {
            resultData: {
                runData: {
                    'HTTP Request': [
                        {
                            data: {
                                main: [
                                    {
                                        json: { status: 'success' },
                                    },
                                ],
                            },
                        },
                    ],
                },
            },
        },
        workflowData: {
            id: 'workflow-456',
            name: 'Test Workflow',
            active: true,
            nodes: [],
            connections: {},
        },
    };
    const mockFailedExecution = {
        id: 'exec-456',
        workflowId: 'workflow-789',
        finished: false,
        startedAt: '2023-01-01T11:00:00Z',
        stoppedAt: '2023-01-01T11:02:00Z',
        mode: 'trigger',
        status: 'error',
        retryOf: undefined,
        retrySuccessId: undefined,
        data: {
            resultData: {
                error: {
                    message: 'Test error',
                    stack: 'Error stack trace',
                },
            },
        },
        workflowData: {
            id: 'workflow-789',
            name: 'Failed Workflow',
            active: false,
            nodes: [],
            connections: {},
        },
    };
    (0, globals_1.beforeEach)(() => {
        // Create mock instances
        mockServer = {
            addResource: globals_1.jest.fn(),
            addResourceTemplate: globals_1.jest.fn(),
        };
        mockClient = {
            getExecution: globals_1.jest.fn(),
            getExecutions: globals_1.jest.fn(),
        };
        getClientFn = globals_1.jest.fn().mockReturnValue(mockClient);
        // Clear all mocks
        globals_1.jest.clearAllMocks();
        mockConsoleLog.mockClear();
    });
    (0, globals_1.afterEach)(() => {
        globals_1.jest.clearAllMocks();
    });
    (0, globals_1.describe)('Constructor and Configuration', () => {
        (0, globals_1.it)('should initialize with default configuration', () => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should initialize with custom configuration', () => {
            const config = {
                baseUri: 'custom://executions',
                maxExecutions: 10,
                includeData: true,
                includeFailures: false,
                cacheDuration: 5000,
                maxDataSize: 512 * 1024,
            };
            executionManager = new executionResources_1.ExecutionResourceManager(config);
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should merge custom config with defaults', () => {
            const config = {
                maxExecutions: 25,
                includeData: true,
            };
            executionManager = new executionResources_1.ExecutionResourceManager(config);
            (0, globals_1.expect)(executionManager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
    });
    (0, globals_1.describe)('Resource Registration', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
        });
        (0, globals_1.it)('should register all execution resources', () => {
            executionManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/{id}',
                name: 'n8n Execution',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/{id}/logs',
                name: 'n8n Execution Logs',
                mimeType: 'text/plain',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/recent',
                name: 'n8n Recent Executions',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/failures',
                name: 'n8n Failed Executions',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockServer.addResource).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uri: 'n8n://executions/stats',
                name: 'n8n Execution Statistics',
                mimeType: 'application/json',
            }));
            (0, globals_1.expect)(mockConsoleLog).toHaveBeenCalledWith('âš¡ Execution resources registered');
        });
        (0, globals_1.it)('should register execution template with correct arguments', () => {
            executionManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n execution',
                required: true,
            });
        });
        (0, globals_1.it)('should register logs template with correct arguments', () => {
            executionManager.register(mockServer, getClientFn);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'id',
                description: 'The ID of the n8n execution',
                required: true,
            });
        });
        (0, globals_1.it)('should register workflow executions template', () => {
            executionManager.register(mockServer, getClientFn);
            (0, globals_1.expect)(mockServer.addResourceTemplate).toHaveBeenCalledWith(globals_1.expect.objectContaining({
                uriTemplate: 'n8n://executions/workflow/{workflowId}',
                name: 'n8n Workflow Executions',
                mimeType: 'application/json',
            }));
        });
    });
    (0, globals_1.describe)('Individual Execution Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution resource successfully', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('exec-123');
            (0, globals_1.expect)(data.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.status).toBe('success');
            (0, globals_1.expect)(data.duration).toBe(300000); // 5 minutes
            (0, globals_1.expect)(data.resourceInfo).toBeDefined();
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-execution');
        });
        (0, globals_1.it)('should handle execution with error status', async () => {
            mockClient.getExecution.mockResolvedValue(mockFailedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-456' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('stopped');
            (0, globals_1.expect)(data.metadata.error).toEqual({
                message: 'Test error',
                stack: 'Error stack trace',
            });
        });
        (0, globals_1.it)('should handle running execution', async () => {
            const runningExecution = {
                ...mockExecution,
                finished: false,
                stoppedAt: undefined,
                status: 'running',
            };
            mockClient.getExecution.mockResolvedValue(runningExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.status).toBe('running');
            (0, globals_1.expect)(data.duration).toBeNull();
        });
        (0, globals_1.it)('should throw error when client not initialized', async () => {
            getClientFn.mockReturnValue(null);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('n8n client not initialized. Run init-n8n first.');
        });
        (0, globals_1.it)('should handle API errors', async () => {
            mockClient.getExecution.mockRejectedValue(new Error('API Error'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution exec-123: API Error');
        });
        (0, globals_1.it)('should include data when configured', async () => {
            // Clear previous mocks first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data).toBeDefined();
        });
        (0, globals_1.it)('should exclude data by default', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data).toBeUndefined();
        });
    });
    (0, globals_1.describe)('Execution Logs Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution logs successfully', async () => {
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(result.text).toBeDefined();
            (0, globals_1.expect)(result.text).toContain('Execution ID: exec-123');
            (0, globals_1.expect)(result.text).toContain('Workflow ID: workflow-456');
            (0, globals_1.expect)(result.text).toContain('Status: Finished');
            (0, globals_1.expect)(result.text).toContain('NODE EXECUTION DATA:');
            (0, globals_1.expect)(result.text).toContain('Node: HTTP Request');
        });
        (0, globals_1.it)('should include error information in logs', async () => {
            mockClient.getExecution.mockResolvedValue(mockFailedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-456' });
            (0, globals_1.expect)(result.text).toContain('ERROR:');
            (0, globals_1.expect)(result.text).toContain('Test error');
        });
        (0, globals_1.it)('should handle logs API errors', async () => {
            mockClient.getExecution.mockRejectedValue(new Error('Logs API Error'));
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}/logs');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution logs exec-123: Logs API Error');
        });
    });
    (0, globals_1.describe)('Recent Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load recent executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(2);
            (0, globals_1.expect)(data.executions[0].id).toBe('exec-123');
            (0, globals_1.expect)(data.executions[0].status).toBe('success');
            (0, globals_1.expect)(data.executions[1].id).toBe('exec-456');
            (0, globals_1.expect)(data.executions[1].status).toBe('stopped');
            (0, globals_1.expect)(data.metadata.total).toBe(2);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-recent-executions');
        });
        (0, globals_1.it)('should handle empty executions list', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle recent executions API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Recent API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load recent executions: Recent API Error');
        });
    });
    (0, globals_1.describe)('Failed Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load failed executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.failures).toHaveLength(1); // Only failed execution
            (0, globals_1.expect)(data.failures[0].id).toBe('exec-456');
            (0, globals_1.expect)(data.failures[0].error).toBe('Test error');
            (0, globals_1.expect)(data.failures[0].errorDetails).toEqual({
                message: 'Test error',
                stack: 'Error stack trace',
            });
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-failed-executions');
        });
        (0, globals_1.it)('should handle no failed executions', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution], // Only successful execution
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.failures).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should handle failures API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Failures API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/failures');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load failed executions: Failures API Error');
        });
    });
    (0, globals_1.describe)('Execution Statistics Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load execution statistics successfully', async () => {
            const runningExecution = {
                ...mockExecution,
                id: 'exec-789',
                finished: false,
                stoppedAt: undefined,
                status: 'running',
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution, runningExecution],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            (0, globals_1.expect)(resourceCall).toBeDefined();
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalExecutions).toBe(3);
            (0, globals_1.expect)(data.successfulExecutions).toBe(1);
            (0, globals_1.expect)(data.failedExecutions).toBe(1);
            (0, globals_1.expect)(data.runningExecutions).toBe(1);
            (0, globals_1.expect)(data.averageDuration).toBeGreaterThan(0);
            (0, globals_1.expect)(data.executionsByStatus).toBeDefined();
            (0, globals_1.expect)(data.executionsByStatus.success).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus.error).toBe(1);
            (0, globals_1.expect)(data.executionsByStatus.running).toBe(1);
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-execution-stats');
        });
        (0, globals_1.it)('should handle zero average duration', async () => {
            const executionWithoutTiming = {
                ...mockExecution,
                startedAt: '2023-01-01T10:00:00Z',
                stoppedAt: undefined,
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [executionWithoutTiming],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.averageDuration).toBe(0);
        });
        (0, globals_1.it)('should handle stats API errors', async () => {
            mockClient.getExecutions.mockRejectedValue(new Error('Stats API Error'));
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            await (0, globals_1.expect)(resource.load()).rejects.toThrow('Failed to load execution statistics: Stats API Error');
        });
    });
    (0, globals_1.describe)('Workflow Executions Resource', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should load workflow executions successfully', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockExecution, mockFailedExecution],
            });
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            (0, globals_1.expect)(templateCall).toBeDefined();
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-456' });
            (0, globals_1.expect)(result.text).toBeDefined();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.executions).toHaveLength(1); // Only executions for this workflow
            (0, globals_1.expect)(data.executions[0].id).toBe('exec-123');
            (0, globals_1.expect)(data.metadata.workflowId).toBe('workflow-456');
            (0, globals_1.expect)(data.resourceInfo.type).toBe('n8n-workflow-executions');
        });
        (0, globals_1.it)('should handle no executions for workflow', async () => {
            mockClient.getExecutions.mockResolvedValue({
                data: [mockFailedExecution], // Different workflow
            });
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ workflowId: 'workflow-999' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions).toHaveLength(0);
            (0, globals_1.expect)(data.metadata.total).toBe(0);
        });
        (0, globals_1.it)('should validate workflow executions template arguments', () => {
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/workflow/{workflowId}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            (0, globals_1.expect)(template.arguments).toHaveLength(1);
            (0, globals_1.expect)(template.arguments[0]).toEqual({
                name: 'workflowId',
                description: 'The ID of the workflow',
                required: true,
            });
        });
    });
    (0, globals_1.describe)('Data Sanitization', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager({ includeData: true });
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should sanitize sensitive data', async () => {
            const executionWithSensitiveData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            'HTTP Request': [
                                {
                                    data: {
                                        main: [
                                            {
                                                json: {
                                                    password: 'secret123',
                                                    apiKey: 'key456',
                                                    token: 'token789',
                                                    secretKey: 'secret',
                                                    normalData: 'safe',
                                                },
                                            },
                                        ],
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithSensitiveData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            const sanitizedData = data.data;
            const jsonData = sanitizedData.resultData.runData['HTTP Request'][0].data.main[0].json;
            (0, globals_1.expect)(jsonData.password).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.apiKey).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.token).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.secretKey).toBe('[REDACTED]');
            (0, globals_1.expect)(jsonData.normalData).toBe('safe');
        });
        (0, globals_1.it)('should truncate large data', async () => {
            // Clear all previous mock calls first
            globals_1.jest.clearAllMocks();
            mockConsoleLog.mockClear();
            executionManager = new executionResources_1.ExecutionResourceManager({
                includeData: true,
                maxDataSize: 100, // Very small limit
            });
            executionManager.register(mockServer, getClientFn);
            const executionWithLargeData = {
                ...mockExecution,
                data: {
                    resultData: {
                        runData: {
                            'HTTP Request': [
                                {
                                    data: {
                                        main: Array(1000).fill({ json: { largeData: 'x'.repeat(1000) } }),
                                    },
                                },
                            ],
                        },
                    },
                },
            };
            mockClient.getExecution.mockResolvedValue(executionWithLargeData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.data._truncated).toBe(true);
            (0, globals_1.expect)(data.data.summary).toContain('truncated due to size limits');
        });
    });
    (0, globals_1.describe)('Cache Management', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager({ cacheDuration: 1000 });
        });
        (0, globals_1.it)('should cache execution data', async () => {
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            // First call
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(1);
            // Second call should use cache
            await template.load({ id: 'exec-123' });
            (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(1);
        });
        (0, globals_1.it)('should clear cache', () => {
            executionManager.clearCache();
            // Should not throw
        });
        (0, globals_1.it)('should get cache statistics', () => {
            const stats = executionManager.getCacheStats();
            (0, globals_1.expect)(stats).toBeDefined();
            (0, globals_1.expect)(typeof stats.size).toBe('number');
            (0, globals_1.expect)(Array.isArray(stats.keys)).toBe(true);
        });
        (0, globals_1.it)('should not cache when duration is 0', () => {
            executionManager = new executionResources_1.ExecutionResourceManager({ cacheDuration: 0 });
            executionManager.register(mockServer, getClientFn);
            mockClient.getExecution.mockResolvedValue(mockExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            return template
                .load({ id: 'exec-123' })
                .then(() => {
                return template.load({ id: 'exec-123' });
            })
                .then(() => {
                (0, globals_1.expect)(mockClient.getExecution).toHaveBeenCalledTimes(2);
            });
        });
    });
    (0, globals_1.describe)('Factory Function', () => {
        (0, globals_1.it)('should create execution resource manager with factory function', () => {
            const manager = (0, executionResources_1.createExecutionResources)();
            (0, globals_1.expect)(manager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
        (0, globals_1.it)('should create execution resource manager with config via factory', () => {
            const config = { maxExecutions: 25, includeData: true };
            const manager = (0, executionResources_1.createExecutionResources)(config);
            (0, globals_1.expect)(manager).toBeInstanceOf(executionResources_1.ExecutionResourceManager);
        });
    });
    (0, globals_1.describe)('Edge Cases and Error Handling', () => {
        (0, globals_1.beforeEach)(() => {
            executionManager = new executionResources_1.ExecutionResourceManager();
            executionManager.register(mockServer, getClientFn);
        });
        (0, globals_1.it)('should handle null execution data', async () => {
            const executionWithNullData = {
                ...mockExecution,
                data: undefined,
            };
            mockClient.getExecution.mockResolvedValue(executionWithNullData);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.metadata.error).toBeUndefined();
        });
        (0, globals_1.it)('should handle malformed execution data', async () => {
            const malformedExecution = {
                id: 'exec-123',
                finished: false,
                mode: 'manual',
                startedAt: '2023-01-01T10:00:00Z',
                workflowId: 'workflow-456',
                status: 'running',
            };
            mockClient.getExecution.mockResolvedValue(malformedExecution);
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            const result = await template.load({ id: 'exec-123' });
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.id).toBe('exec-123');
            (0, globals_1.expect)(data.status).toBe('running'); // Default when no finished/stoppedAt
        });
        (0, globals_1.it)('should handle non-Error exceptions', async () => {
            mockClient.getExecution.mockRejectedValue('String error');
            const templateCall = mockServer.addResourceTemplate.mock.calls.find(call => call[0].uriTemplate === 'n8n://executions/{id}');
            if (!templateCall)
                throw new Error('Template call not found');
            const template = templateCall[0];
            await (0, globals_1.expect)(template.load({ id: 'exec-123' })).rejects.toThrow('Failed to load execution exec-123: String error');
        });
        (0, globals_1.it)('should handle empty execution lists gracefully', async () => {
            mockClient.getExecutions.mockResolvedValue({ data: [] });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/stats');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.totalExecutions).toBe(0);
            (0, globals_1.expect)(data.averageDuration).toBe(0);
        });
        (0, globals_1.it)('should handle missing workflow data in executions', async () => {
            const executionWithoutWorkflowData = {
                ...mockExecution,
                workflowData: undefined,
            };
            mockClient.getExecutions.mockResolvedValue({
                data: [executionWithoutWorkflowData],
            });
            const resourceCall = mockServer.addResource.mock.calls.find(call => call[0].uri === 'n8n://executions/recent');
            if (!resourceCall)
                throw new Error('Resource call not found');
            const resource = resourceCall[0];
            const result = await resource.load();
            const data = JSON.parse(result.text);
            (0, globals_1.expect)(data.executions[0].workflowName).toBeUndefined();
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,