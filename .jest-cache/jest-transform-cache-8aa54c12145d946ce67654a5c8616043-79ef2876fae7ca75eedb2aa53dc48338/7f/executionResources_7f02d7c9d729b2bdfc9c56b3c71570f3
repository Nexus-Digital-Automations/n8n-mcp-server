e58e348a214d045e4e8aca8f35489682
/* istanbul ignore next */
function cov_6gr377gb5() {
  var path = "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts";
  var hash = "663799f5389604f0bff1b9d1bcb7cab2ee93639e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts",
    statementMap: {
      "0": {
        start: {
          line: 15,
          column: 12
        },
        end: {
          line: 15,
          column: 21
        }
      },
      "1": {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "2": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 53,
          column: 11
        }
      },
      "3": {
        start: {
          line: 44,
          column: 31
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "4": {
        start: {
          line: 45,
          column: 16
        },
        end: {
          line: 47,
          column: 17
        }
      },
      "5": {
        start: {
          line: 46,
          column: 20
        },
        end: {
          line: 46,
          column: 87
        }
      },
      "6": {
        start: {
          line: 48,
          column: 34
        },
        end: {
          line: 48,
          column: 77
        }
      },
      "7": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 51,
          column: 18
        }
      },
      "8": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 76,
          column: 11
        }
      },
      "9": {
        start: {
          line: 67,
          column: 31
        },
        end: {
          line: 67,
          column: 42
        }
      },
      "10": {
        start: {
          line: 68,
          column: 16
        },
        end: {
          line: 70,
          column: 17
        }
      },
      "11": {
        start: {
          line: 69,
          column: 20
        },
        end: {
          line: 69,
          column: 87
        }
      },
      "12": {
        start: {
          line: 71,
          column: 29
        },
        end: {
          line: 71,
          column: 76
        }
      },
      "13": {
        start: {
          line: 72,
          column: 16
        },
        end: {
          line: 74,
          column: 18
        }
      },
      "14": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 92,
          column: 11
        }
      },
      "15": {
        start: {
          line: 83,
          column: 31
        },
        end: {
          line: 83,
          column: 42
        }
      },
      "16": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 86,
          column: 17
        }
      },
      "17": {
        start: {
          line: 85,
          column: 20
        },
        end: {
          line: 85,
          column: 87
        }
      },
      "18": {
        start: {
          line: 87,
          column: 35
        },
        end: {
          line: 87,
          column: 81
        }
      },
      "19": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 90,
          column: 18
        }
      },
      "20": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "21": {
        start: {
          line: 99,
          column: 31
        },
        end: {
          line: 99,
          column: 42
        }
      },
      "22": {
        start: {
          line: 100,
          column: 16
        },
        end: {
          line: 102,
          column: 17
        }
      },
      "23": {
        start: {
          line: 101,
          column: 20
        },
        end: {
          line: 101,
          column: 87
        }
      },
      "24": {
        start: {
          line: 103,
          column: 33
        },
        end: {
          line: 103,
          column: 79
        }
      },
      "25": {
        start: {
          line: 104,
          column: 16
        },
        end: {
          line: 106,
          column: 18
        }
      },
      "26": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "27": {
        start: {
          line: 115,
          column: 31
        },
        end: {
          line: 115,
          column: 42
        }
      },
      "28": {
        start: {
          line: 116,
          column: 16
        },
        end: {
          line: 118,
          column: 17
        }
      },
      "29": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 87
        }
      },
      "30": {
        start: {
          line: 119,
          column: 30
        },
        end: {
          line: 119,
          column: 74
        }
      },
      "31": {
        start: {
          line: 120,
          column: 16
        },
        end: {
          line: 122,
          column: 18
        }
      },
      "32": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 147,
          column: 11
        }
      },
      "33": {
        start: {
          line: 138,
          column: 31
        },
        end: {
          line: 138,
          column: 42
        }
      },
      "34": {
        start: {
          line: 139,
          column: 16
        },
        end: {
          line: 141,
          column: 17
        }
      },
      "35": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 140,
          column: 87
        }
      },
      "36": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 86
        }
      },
      "37": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 145,
          column: 18
        }
      },
      "38": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "39": {
        start: {
          line: 161,
          column: 31
        },
        end: {
          line: 161,
          column: 42
        }
      },
      "40": {
        start: {
          line: 162,
          column: 16
        },
        end: {
          line: 164,
          column: 17
        }
      },
      "41": {
        start: {
          line: 163,
          column: 20
        },
        end: {
          line: 163,
          column: 87
        }
      },
      "42": {
        start: {
          line: 165,
          column: 35
        },
        end: {
          line: 165,
          column: 95
        }
      },
      "43": {
        start: {
          line: 166,
          column: 16
        },
        end: {
          line: 168,
          column: 18
        }
      },
      "44": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 56
        }
      },
      "45": {
        start: {
          line: 177,
          column: 25
        },
        end: {
          line: 177,
          column: 51
        }
      },
      "46": {
        start: {
          line: 178,
          column: 23
        },
        end: {
          line: 178,
          column: 51
        }
      },
      "47": {
        start: {
          line: 179,
          column: 8
        },
        end: {
          line: 181,
          column: 9
        }
      },
      "48": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 26
        }
      },
      "49": {
        start: {
          line: 182,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "50": {
        start: {
          line: 183,
          column: 30
        },
        end: {
          line: 183,
          column: 68
        }
      },
      "51": {
        start: {
          line: 185,
          column: 38
        },
        end: {
          line: 210,
          column: 13
        }
      },
      "52": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 60
        }
      },
      "53": {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 37
        }
      },
      "54": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 130
        }
      },
      "55": {
        start: {
          line: 222,
          column: 25
        },
        end: {
          line: 222,
          column: 56
        }
      },
      "56": {
        start: {
          line: 223,
          column: 23
        },
        end: {
          line: 223,
          column: 51
        }
      },
      "57": {
        start: {
          line: 224,
          column: 8
        },
        end: {
          line: 226,
          column: 9
        }
      },
      "58": {
        start: {
          line: 225,
          column: 12
        },
        end: {
          line: 225,
          column: 26
        }
      },
      "59": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 236,
          column: 9
        }
      },
      "60": {
        start: {
          line: 228,
          column: 30
        },
        end: {
          line: 228,
          column: 68
        }
      },
      "61": {
        start: {
          line: 230,
          column: 25
        },
        end: {
          line: 230,
          column: 65
        }
      },
      "62": {
        start: {
          line: 231,
          column: 12
        },
        end: {
          line: 231,
          column: 47
        }
      },
      "63": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 24
        }
      },
      "64": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 135
        }
      },
      "65": {
        start: {
          line: 242,
          column: 25
        },
        end: {
          line: 242,
          column: 44
        }
      },
      "66": {
        start: {
          line: 243,
          column: 23
        },
        end: {
          line: 243,
          column: 51
        }
      },
      "67": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 246,
          column: 9
        }
      },
      "68": {
        start: {
          line: 245,
          column: 12
        },
        end: {
          line: 245,
          column: 26
        }
      },
      "69": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 281,
          column: 9
        }
      },
      "70": {
        start: {
          line: 248,
          column: 31
        },
        end: {
          line: 250,
          column: 14
        }
      },
      "71": {
        start: {
          line: 251,
          column: 37
        },
        end: {
          line: 275,
          column: 13
        }
      },
      "72": {
        start: {
          line: 252,
          column: 64
        },
        end: {
          line: 263,
          column: 17
        }
      },
      "73": {
        start: {
          line: 276,
          column: 12
        },
        end: {
          line: 276,
          column: 59
        }
      },
      "74": {
        start: {
          line: 277,
          column: 12
        },
        end: {
          line: 277,
          column: 36
        }
      },
      "75": {
        start: {
          line: 280,
          column: 12
        },
        end: {
          line: 280,
          column: 123
        }
      },
      "76": {
        start: {
          line: 287,
          column: 25
        },
        end: {
          line: 287,
          column: 46
        }
      },
      "77": {
        start: {
          line: 288,
          column: 23
        },
        end: {
          line: 288,
          column: 51
        }
      },
      "78": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 9
        }
      },
      "79": {
        start: {
          line: 290,
          column: 12
        },
        end: {
          line: 290,
          column: 26
        }
      },
      "80": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 326,
          column: 9
        }
      },
      "81": {
        start: {
          line: 293,
          column: 31
        },
        end: {
          line: 295,
          column: 14
        }
      },
      "82": {
        start: {
          line: 297,
          column: 41
        },
        end: {
          line: 297,
          column: 97
        }
      },
      "83": {
        start: {
          line: 297,
          column: 71
        },
        end: {
          line: 297,
          column: 96
        }
      },
      "84": {
        start: {
          line: 298,
          column: 37
        },
        end: {
          line: 320,
          column: 13
        }
      },
      "85": {
        start: {
          line: 299,
          column: 67
        },
        end: {
          line: 308,
          column: 17
        }
      },
      "86": {
        start: {
          line: 321,
          column: 12
        },
        end: {
          line: 321,
          column: 59
        }
      },
      "87": {
        start: {
          line: 322,
          column: 12
        },
        end: {
          line: 322,
          column: 36
        }
      },
      "88": {
        start: {
          line: 325,
          column: 12
        },
        end: {
          line: 325,
          column: 123
        }
      },
      "89": {
        start: {
          line: 332,
          column: 25
        },
        end: {
          line: 332,
          column: 43
        }
      },
      "90": {
        start: {
          line: 333,
          column: 23
        },
        end: {
          line: 333,
          column: 51
        }
      },
      "91": {
        start: {
          line: 334,
          column: 8
        },
        end: {
          line: 336,
          column: 9
        }
      },
      "92": {
        start: {
          line: 335,
          column: 12
        },
        end: {
          line: 335,
          column: 26
        }
      },
      "93": {
        start: {
          line: 337,
          column: 8
        },
        end: {
          line: 360,
          column: 9
        }
      },
      "94": {
        start: {
          line: 338,
          column: 31
        },
        end: {
          line: 340,
          column: 14
        }
      },
      "95": {
        start: {
          line: 341,
          column: 26
        },
        end: {
          line: 354,
          column: 13
        }
      },
      "96": {
        start: {
          line: 343,
          column: 68
        },
        end: {
          line: 343,
          column: 108
        }
      },
      "97": {
        start: {
          line: 344,
          column: 64
        },
        end: {
          line: 344,
          column: 89
        }
      },
      "98": {
        start: {
          line: 345,
          column: 65
        },
        end: {
          line: 345,
          column: 92
        }
      },
      "99": {
        start: {
          line: 355,
          column: 12
        },
        end: {
          line: 355,
          column: 48
        }
      },
      "100": {
        start: {
          line: 356,
          column: 12
        },
        end: {
          line: 356,
          column: 25
        }
      },
      "101": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 359,
          column: 126
        }
      },
      "102": {
        start: {
          line: 366,
          column: 25
        },
        end: {
          line: 366,
          column: 60
        }
      },
      "103": {
        start: {
          line: 367,
          column: 23
        },
        end: {
          line: 367,
          column: 51
        }
      },
      "104": {
        start: {
          line: 368,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "105": {
        start: {
          line: 369,
          column: 12
        },
        end: {
          line: 369,
          column: 26
        }
      },
      "106": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 406,
          column: 9
        }
      },
      "107": {
        start: {
          line: 372,
          column: 31
        },
        end: {
          line: 374,
          column: 14
        }
      },
      "108": {
        start: {
          line: 376,
          column: 43
        },
        end: {
          line: 376,
          column: 101
        }
      },
      "109": {
        start: {
          line: 376,
          column: 73
        },
        end: {
          line: 376,
          column: 100
        }
      },
      "110": {
        start: {
          line: 377,
          column: 39
        },
        end: {
          line: 400,
          column: 13
        }
      },
      "111": {
        start: {
          line: 379,
          column: 71
        },
        end: {
          line: 388,
          column: 17
        }
      },
      "112": {
        start: {
          line: 401,
          column: 12
        },
        end: {
          line: 401,
          column: 61
        }
      },
      "113": {
        start: {
          line: 402,
          column: 12
        },
        end: {
          line: 402,
          column: 38
        }
      },
      "114": {
        start: {
          line: 405,
          column: 12
        },
        end: {
          line: 405,
          column: 139
        }
      },
      "115": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 414,
          column: 9
        }
      },
      "116": {
        start: {
          line: 413,
          column: 12
        },
        end: {
          line: 413,
          column: 24
        }
      },
      "117": {
        start: {
          line: 415,
          column: 27
        },
        end: {
          line: 415,
          column: 47
        }
      },
      "118": {
        start: {
          line: 416,
          column: 8
        },
        end: {
          line: 423,
          column: 9
        }
      },
      "119": {
        start: {
          line: 417,
          column: 12
        },
        end: {
          line: 422,
          column: 14
        }
      },
      "120": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 46
        }
      },
      "121": {
        start: {
          line: 431,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "122": {
        start: {
          line: 432,
          column: 12
        },
        end: {
          line: 432,
          column: 67
        }
      },
      "123": {
        start: {
          line: 432,
          column: 35
        },
        end: {
          line: 432,
          column: 65
        }
      },
      "124": {
        start: {
          line: 434,
          column: 8
        },
        end: {
          line: 450,
          column: 9
        }
      },
      "125": {
        start: {
          line: 435,
          column: 27
        },
        end: {
          line: 435,
          column: 29
        }
      },
      "126": {
        start: {
          line: 436,
          column: 12
        },
        end: {
          line: 448,
          column: 13
        }
      },
      "127": {
        start: {
          line: 438,
          column: 33
        },
        end: {
          line: 438,
          column: 50
        }
      },
      "128": {
        start: {
          line: 439,
          column: 16
        },
        end: {
          line: 447,
          column: 17
        }
      },
      "129": {
        start: {
          line: 443,
          column: 20
        },
        end: {
          line: 443,
          column: 47
        }
      },
      "130": {
        start: {
          line: 446,
          column: 20
        },
        end: {
          line: 446,
          column: 66
        }
      },
      "131": {
        start: {
          line: 449,
          column: 12
        },
        end: {
          line: 449,
          column: 26
        }
      },
      "132": {
        start: {
          line: 451,
          column: 8
        },
        end: {
          line: 451,
          column: 19
        }
      },
      "133": {
        start: {
          line: 457,
          column: 21
        },
        end: {
          line: 457,
          column: 23
        }
      },
      "134": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 458,
          column: 51
        }
      },
      "135": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 58
        }
      },
      "136": {
        start: {
          line: 460,
          column: 8
        },
        end: {
          line: 460,
          column: 53
        }
      },
      "137": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 72
        }
      },
      "138": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 462,
          column: 76
        }
      },
      "139": {
        start: {
          line: 463,
          column: 8
        },
        end: {
          line: 463,
          column: 22
        }
      },
      "140": {
        start: {
          line: 464,
          column: 8
        },
        end: {
          line: 468,
          column: 9
        }
      },
      "141": {
        start: {
          line: 465,
          column: 12
        },
        end: {
          line: 465,
          column: 32
        }
      },
      "142": {
        start: {
          line: 466,
          column: 12
        },
        end: {
          line: 466,
          column: 80
        }
      },
      "143": {
        start: {
          line: 467,
          column: 12
        },
        end: {
          line: 467,
          column: 26
        }
      },
      "144": {
        start: {
          line: 470,
          column: 8
        },
        end: {
          line: 477,
          column: 9
        }
      },
      "145": {
        start: {
          line: 471,
          column: 12
        },
        end: {
          line: 471,
          column: 46
        }
      },
      "146": {
        start: {
          line: 472,
          column: 12
        },
        end: {
          line: 476,
          column: 13
        }
      },
      "147": {
        start: {
          line: 473,
          column: 16
        },
        end: {
          line: 473,
          column: 47
        }
      },
      "148": {
        start: {
          line: 474,
          column: 16
        },
        end: {
          line: 474,
          column: 61
        }
      },
      "149": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 475,
          column: 30
        }
      },
      "150": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 478,
          column: 31
        }
      },
      "151": {
        start: {
          line: 484,
          column: 26
        },
        end: {
          line: 486,
          column: 88
        }
      },
      "152": {
        start: {
          line: 485,
          column: 25
        },
        end: {
          line: 485,
          column: 51
        }
      },
      "153": {
        start: {
          line: 486,
          column: 22
        },
        end: {
          line: 486,
          column: 87
        }
      },
      "154": {
        start: {
          line: 487,
          column: 8
        },
        end: {
          line: 488,
          column: 21
        }
      },
      "155": {
        start: {
          line: 488,
          column: 12
        },
        end: {
          line: 488,
          column: 21
        }
      },
      "156": {
        start: {
          line: 489,
          column: 8
        },
        end: {
          line: 489,
          column: 89
        }
      },
      "157": {
        start: {
          line: 489,
          column: 51
        },
        end: {
          line: 489,
          column: 65
        }
      },
      "158": {
        start: {
          line: 495,
          column: 29
        },
        end: {
          line: 500,
          column: 9
        }
      },
      "159": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 514,
          column: 11
        }
      },
      "160": {
        start: {
          line: 502,
          column: 12
        },
        end: {
          line: 513,
          column: 13
        }
      },
      "161": {
        start: {
          line: 503,
          column: 16
        },
        end: {
          line: 503,
          column: 39
        }
      },
      "162": {
        start: {
          line: 505,
          column: 17
        },
        end: {
          line: 513,
          column: 13
        }
      },
      "163": {
        start: {
          line: 506,
          column: 16
        },
        end: {
          line: 506,
          column: 37
        }
      },
      "164": {
        start: {
          line: 508,
          column: 17
        },
        end: {
          line: 513,
          column: 13
        }
      },
      "165": {
        start: {
          line: 509,
          column: 16
        },
        end: {
          line: 509,
          column: 39
        }
      },
      "166": {
        start: {
          line: 512,
          column: 16
        },
        end: {
          line: 512,
          column: 39
        }
      },
      "167": {
        start: {
          line: 515,
          column: 8
        },
        end: {
          line: 515,
          column: 28
        }
      },
      "168": {
        start: {
          line: 521,
          column: 23
        },
        end: {
          line: 521,
          column: 42
        }
      },
      "169": {
        start: {
          line: 522,
          column: 8
        },
        end: {
          line: 524,
          column: 9
        }
      },
      "170": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 31
        }
      },
      "171": {
        start: {
          line: 525,
          column: 8
        },
        end: {
          line: 525,
          column: 20
        }
      },
      "172": {
        start: {
          line: 531,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "173": {
        start: {
          line: 532,
          column: 12
        },
        end: {
          line: 535,
          column: 15
        }
      },
      "174": {
        start: {
          line: 542,
          column: 8
        },
        end: {
          line: 542,
          column: 27
        }
      },
      "175": {
        start: {
          line: 548,
          column: 8
        },
        end: {
          line: 551,
          column: 10
        }
      },
      "176": {
        start: {
          line: 558,
          column: 4
        },
        end: {
          line: 558,
          column: 48
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        loc: {
          start: {
            line: 16,
            column: 29
          },
          end: {
            line: 26,
            column: 5
          }
        },
        line: 16
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        loc: {
          start: {
            line: 30,
            column: 32
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 30
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 43,
            column: 18
          },
          end: {
            line: 43,
            column: 19
          }
        },
        loc: {
          start: {
            line: 43,
            column: 36
          },
          end: {
            line: 52,
            column: 13
          }
        },
        line: 43
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 66,
            column: 18
          },
          end: {
            line: 66,
            column: 19
          }
        },
        loc: {
          start: {
            line: 66,
            column: 36
          },
          end: {
            line: 75,
            column: 13
          }
        },
        line: 66
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 18
          },
          end: {
            line: 82,
            column: 19
          }
        },
        loc: {
          start: {
            line: 82,
            column: 30
          },
          end: {
            line: 91,
            column: 13
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 18
          },
          end: {
            line: 98,
            column: 19
          }
        },
        loc: {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 107,
            column: 13
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 114,
            column: 18
          },
          end: {
            line: 114,
            column: 19
          }
        },
        loc: {
          start: {
            line: 114,
            column: 30
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 114
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 137,
            column: 18
          },
          end: {
            line: 137,
            column: 19
          }
        },
        loc: {
          start: {
            line: 137,
            column: 45
          },
          end: {
            line: 146,
            column: 13
          }
        },
        line: 137
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 160,
            column: 18
          },
          end: {
            line: 160,
            column: 19
          }
        },
        loc: {
          start: {
            line: 160,
            column: 44
          },
          end: {
            line: 169,
            column: 13
          }
        },
        line: 160
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 176,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        loc: {
          start: {
            line: 176,
            column: 52
          },
          end: {
            line: 217,
            column: 5
          }
        },
        line: 176
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 221,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        loc: {
          start: {
            line: 221,
            column: 56
          },
          end: {
            line: 237,
            column: 5
          }
        },
        line: 221
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 241,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        loc: {
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 282,
            column: 5
          }
        },
        line: 241
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 252,
            column: 48
          },
          end: {
            line: 252,
            column: 49
          }
        },
        loc: {
          start: {
            line: 252,
            column: 64
          },
          end: {
            line: 263,
            column: 17
          }
        },
        line: 252
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 286,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        loc: {
          start: {
            line: 286,
            column: 46
          },
          end: {
            line: 327,
            column: 5
          }
        },
        line: 286
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 297,
            column: 64
          },
          end: {
            line: 297,
            column: 65
          }
        },
        loc: {
          start: {
            line: 297,
            column: 71
          },
          end: {
            line: 297,
            column: 96
          }
        },
        line: 297
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 299,
            column: 51
          },
          end: {
            line: 299,
            column: 52
          }
        },
        loc: {
          start: {
            line: 299,
            column: 67
          },
          end: {
            line: 308,
            column: 17
          }
        },
        line: 299
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 331,
            column: 4
          },
          end: {
            line: 331,
            column: 5
          }
        },
        loc: {
          start: {
            line: 331,
            column: 44
          },
          end: {
            line: 361,
            column: 5
          }
        },
        line: 331
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 343,
            column: 61
          },
          end: {
            line: 343,
            column: 62
          }
        },
        loc: {
          start: {
            line: 343,
            column: 68
          },
          end: {
            line: 343,
            column: 108
          }
        },
        line: 343
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 344,
            column: 57
          },
          end: {
            line: 344,
            column: 58
          }
        },
        loc: {
          start: {
            line: 344,
            column: 64
          },
          end: {
            line: 344,
            column: 89
          }
        },
        line: 344
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 345,
            column: 58
          },
          end: {
            line: 345,
            column: 59
          }
        },
        loc: {
          start: {
            line: 345,
            column: 65
          },
          end: {
            line: 345,
            column: 92
          }
        },
        line: 345
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 365,
            column: 4
          },
          end: {
            line: 365,
            column: 5
          }
        },
        loc: {
          start: {
            line: 365,
            column: 60
          },
          end: {
            line: 407,
            column: 5
          }
        },
        line: 365
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 376,
            column: 66
          },
          end: {
            line: 376,
            column: 67
          }
        },
        loc: {
          start: {
            line: 376,
            column: 73
          },
          end: {
            line: 376,
            column: 100
          }
        },
        line: 376
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 379,
            column: 55
          },
          end: {
            line: 379,
            column: 56
          }
        },
        loc: {
          start: {
            line: 379,
            column: 71
          },
          end: {
            line: 388,
            column: 17
          }
        },
        line: 379
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 411,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        loc: {
          start: {
            line: 411,
            column: 32
          },
          end: {
            line: 426,
            column: 5
          }
        },
        line: 411
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 430,
            column: 4
          },
          end: {
            line: 430,
            column: 5
          }
        },
        loc: {
          start: {
            line: 430,
            column: 29
          },
          end: {
            line: 452,
            column: 5
          }
        },
        line: 430
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 432,
            column: 27
          },
          end: {
            line: 432,
            column: 28
          }
        },
        loc: {
          start: {
            line: 432,
            column: 35
          },
          end: {
            line: 432,
            column: 65
          }
        },
        line: 432
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 456,
            column: 4
          },
          end: {
            line: 456,
            column: 5
          }
        },
        loc: {
          start: {
            line: 456,
            column: 40
          },
          end: {
            line: 479,
            column: 5
          }
        },
        line: 456
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 483,
            column: 5
          }
        },
        loc: {
          start: {
            line: 483,
            column: 41
          },
          end: {
            line: 490,
            column: 5
          }
        },
        line: 483
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 485,
            column: 20
          },
          end: {
            line: 485,
            column: 21
          }
        },
        loc: {
          start: {
            line: 485,
            column: 25
          },
          end: {
            line: 485,
            column: 51
          }
        },
        line: 485
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 486,
            column: 17
          },
          end: {
            line: 486,
            column: 18
          }
        },
        loc: {
          start: {
            line: 486,
            column: 22
          },
          end: {
            line: 486,
            column: 87
          }
        },
        line: 486
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 489,
            column: 32
          },
          end: {
            line: 489,
            column: 33
          }
        },
        loc: {
          start: {
            line: 489,
            column: 51
          },
          end: {
            line: 489,
            column: 65
          }
        },
        line: 489
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 494,
            column: 4
          },
          end: {
            line: 494,
            column: 5
          }
        },
        loc: {
          start: {
            line: 494,
            column: 44
          },
          end: {
            line: 516,
            column: 5
          }
        },
        line: 494
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 501,
            column: 27
          },
          end: {
            line: 501,
            column: 28
          }
        },
        loc: {
          start: {
            line: 501,
            column: 40
          },
          end: {
            line: 514,
            column: 9
          }
        },
        line: 501
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 520,
            column: 4
          },
          end: {
            line: 520,
            column: 5
          }
        },
        loc: {
          start: {
            line: 520,
            column: 23
          },
          end: {
            line: 526,
            column: 5
          }
        },
        line: 520
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 530,
            column: 4
          },
          end: {
            line: 530,
            column: 5
          }
        },
        loc: {
          start: {
            line: 530,
            column: 29
          },
          end: {
            line: 537,
            column: 5
          }
        },
        line: 530
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 541,
            column: 4
          },
          end: {
            line: 541,
            column: 5
          }
        },
        loc: {
          start: {
            line: 541,
            column: 17
          },
          end: {
            line: 543,
            column: 5
          }
        },
        line: 541
      },
      "36": {
        name: "(anonymous_36)",
        decl: {
          start: {
            line: 547,
            column: 4
          },
          end: {
            line: 547,
            column: 5
          }
        },
        loc: {
          start: {
            line: 547,
            column: 20
          },
          end: {
            line: 552,
            column: 5
          }
        },
        line: 547
      },
      "37": {
        name: "createExecutionResources",
        decl: {
          start: {
            line: 557,
            column: 16
          },
          end: {
            line: 557,
            column: 40
          }
        },
        loc: {
          start: {
            line: 557,
            column: 49
          },
          end: {
            line: 559,
            column: 1
          }
        },
        line: 557
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 27
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 16,
            column: 27
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 16
          },
          end: {
            line: 47,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 70,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 16
          },
          end: {
            line: 86,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 102,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 16
          },
          end: {
            line: 102,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "5": {
        loc: {
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 16
          },
          end: {
            line: 118,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "6": {
        loc: {
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 16
          },
          end: {
            line: 141,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "7": {
        loc: {
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 162,
            column: 16
          },
          end: {
            line: 164,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 162
      },
      "8": {
        loc: {
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 8
          },
          end: {
            line: 181,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "9": {
        loc: {
          start: {
            line: 188,
            column: 24
          },
          end: {
            line: 188,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 45
          },
          end: {
            line: 188,
            column: 54
          }
        }, {
          start: {
            line: 188,
            column: 57
          },
          end: {
            line: 188,
            column: 100
          }
        }],
        line: 188
      },
      "10": {
        loc: {
          start: {
            line: 188,
            column: 57
          },
          end: {
            line: 188,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 188,
            column: 79
          },
          end: {
            line: 188,
            column: 88
          }
        }, {
          start: {
            line: 188,
            column: 91
          },
          end: {
            line: 188,
            column: 100
          }
        }],
        line: 188
      },
      "11": {
        loc: {
          start: {
            line: 191,
            column: 26
          },
          end: {
            line: 193,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 192,
            column: 22
          },
          end: {
            line: 192,
            column: 103
          }
        }, {
          start: {
            line: 193,
            column: 22
          },
          end: {
            line: 193,
            column: 26
          }
        }],
        line: 191
      },
      "12": {
        loc: {
          start: {
            line: 191,
            column: 26
          },
          end: {
            line: 191,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 191,
            column: 26
          },
          end: {
            line: 191,
            column: 45
          }
        }, {
          start: {
            line: 191,
            column: 49
          },
          end: {
            line: 191,
            column: 68
          }
        }],
        line: 191
      },
      "13": {
        loc: {
          start: {
            line: 201,
            column: 22
          },
          end: {
            line: 203,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 22
          },
          end: {
            line: 202,
            column: 70
          }
        }, {
          start: {
            line: 203,
            column: 22
          },
          end: {
            line: 203,
            column: 31
          }
        }],
        line: 201
      },
      "14": {
        loc: {
          start: {
            line: 202,
            column: 49
          },
          end: {
            line: 202,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 202,
            column: 49
          },
          end: {
            line: 202,
            column: 63
          }
        }, {
          start: {
            line: 202,
            column: 67
          },
          end: {
            line: 202,
            column: 69
          }
        }],
        line: 202
      },
      "15": {
        loc: {
          start: {
            line: 215,
            column: 72
          },
          end: {
            line: 215,
            column: 126
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 215,
            column: 97
          },
          end: {
            line: 215,
            column: 110
          }
        }, {
          start: {
            line: 215,
            column: 113
          },
          end: {
            line: 215,
            column: 126
          }
        }],
        line: 215
      },
      "16": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 226,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "17": {
        loc: {
          start: {
            line: 235,
            column: 77
          },
          end: {
            line: 235,
            column: 131
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 235,
            column: 102
          },
          end: {
            line: 235,
            column: 115
          }
        }, {
          start: {
            line: 235,
            column: 118
          },
          end: {
            line: 235,
            column: 131
          }
        }],
        line: 235
      },
      "18": {
        loc: {
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 8
          },
          end: {
            line: 246,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "19": {
        loc: {
          start: {
            line: 256,
            column: 28
          },
          end: {
            line: 256,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 49
          },
          end: {
            line: 256,
            column: 58
          }
        }, {
          start: {
            line: 256,
            column: 61
          },
          end: {
            line: 256,
            column: 104
          }
        }],
        line: 256
      },
      "20": {
        loc: {
          start: {
            line: 256,
            column: 61
          },
          end: {
            line: 256,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 256,
            column: 83
          },
          end: {
            line: 256,
            column: 92
          }
        }, {
          start: {
            line: 256,
            column: 95
          },
          end: {
            line: 256,
            column: 104
          }
        }],
        line: 256
      },
      "21": {
        loc: {
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 261,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 260,
            column: 26
          },
          end: {
            line: 260,
            column: 107
          }
        }, {
          start: {
            line: 261,
            column: 26
          },
          end: {
            line: 261,
            column: 30
          }
        }],
        line: 259
      },
      "22": {
        loc: {
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 259,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 30
          },
          end: {
            line: 259,
            column: 49
          }
        }, {
          start: {
            line: 259,
            column: 53
          },
          end: {
            line: 259,
            column: 72
          }
        }],
        line: 259
      },
      "23": {
        loc: {
          start: {
            line: 280,
            column: 65
          },
          end: {
            line: 280,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 280,
            column: 90
          },
          end: {
            line: 280,
            column: 103
          }
        }, {
          start: {
            line: 280,
            column: 106
          },
          end: {
            line: 280,
            column: 119
          }
        }],
        line: 280
      },
      "24": {
        loc: {
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 8
          },
          end: {
            line: 291,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "25": {
        loc: {
          start: {
            line: 305,
            column: 27
          },
          end: {
            line: 305,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 305,
            column: 27
          },
          end: {
            line: 305,
            column: 69
          }
        }, {
          start: {
            line: 305,
            column: 73
          },
          end: {
            line: 305,
            column: 88
          }
        }],
        line: 305
      },
      "26": {
        loc: {
          start: {
            line: 325,
            column: 65
          },
          end: {
            line: 325,
            column: 119
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 90
          },
          end: {
            line: 325,
            column: 103
          }
        }, {
          start: {
            line: 325,
            column: 106
          },
          end: {
            line: 325,
            column: 119
          }
        }],
        line: 325
      },
      "27": {
        loc: {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 336,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 334
      },
      "28": {
        loc: {
          start: {
            line: 343,
            column: 68
          },
          end: {
            line: 343,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 343,
            column: 68
          },
          end: {
            line: 343,
            column: 78
          }
        }, {
          start: {
            line: 343,
            column: 82
          },
          end: {
            line: 343,
            column: 108
          }
        }],
        line: 343
      },
      "29": {
        loc: {
          start: {
            line: 345,
            column: 65
          },
          end: {
            line: 345,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 345,
            column: 65
          },
          end: {
            line: 345,
            column: 76
          }
        }, {
          start: {
            line: 345,
            column: 80
          },
          end: {
            line: 345,
            column: 92
          }
        }],
        line: 345
      },
      "30": {
        loc: {
          start: {
            line: 359,
            column: 68
          },
          end: {
            line: 359,
            column: 122
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 359,
            column: 93
          },
          end: {
            line: 359,
            column: 106
          }
        }, {
          start: {
            line: 359,
            column: 109
          },
          end: {
            line: 359,
            column: 122
          }
        }],
        line: 359
      },
      "31": {
        loc: {
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 368,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 368
      },
      "32": {
        loc: {
          start: {
            line: 381,
            column: 28
          },
          end: {
            line: 381,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 49
          },
          end: {
            line: 381,
            column: 58
          }
        }, {
          start: {
            line: 381,
            column: 61
          },
          end: {
            line: 381,
            column: 104
          }
        }],
        line: 381
      },
      "33": {
        loc: {
          start: {
            line: 381,
            column: 61
          },
          end: {
            line: 381,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 83
          },
          end: {
            line: 381,
            column: 92
          }
        }, {
          start: {
            line: 381,
            column: 95
          },
          end: {
            line: 381,
            column: 104
          }
        }],
        line: 381
      },
      "34": {
        loc: {
          start: {
            line: 384,
            column: 30
          },
          end: {
            line: 386,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 385,
            column: 26
          },
          end: {
            line: 385,
            column: 107
          }
        }, {
          start: {
            line: 386,
            column: 26
          },
          end: {
            line: 386,
            column: 30
          }
        }],
        line: 384
      },
      "35": {
        loc: {
          start: {
            line: 384,
            column: 30
          },
          end: {
            line: 384,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 384,
            column: 30
          },
          end: {
            line: 384,
            column: 49
          }
        }, {
          start: {
            line: 384,
            column: 53
          },
          end: {
            line: 384,
            column: 72
          }
        }],
        line: 384
      },
      "36": {
        loc: {
          start: {
            line: 405,
            column: 81
          },
          end: {
            line: 405,
            column: 135
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 405,
            column: 106
          },
          end: {
            line: 405,
            column: 119
          }
        }, {
          start: {
            line: 405,
            column: 122
          },
          end: {
            line: 405,
            column: 135
          }
        }],
        line: 405
      },
      "37": {
        loc: {
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 414,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 412,
            column: 8
          },
          end: {
            line: 414,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 412
      },
      "38": {
        loc: {
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 12
          },
          end: {
            line: 412,
            column: 17
          }
        }, {
          start: {
            line: 412,
            column: 21
          },
          end: {
            line: 412,
            column: 45
          }
        }],
        line: 412
      },
      "39": {
        loc: {
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 416,
            column: 8
          },
          end: {
            line: 423,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 416
      },
      "40": {
        loc: {
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 431,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 431
      },
      "41": {
        loc: {
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 434,
            column: 8
          },
          end: {
            line: 450,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 434
      },
      "42": {
        loc: {
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 434,
            column: 42
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 434,
            column: 12
          },
          end: {
            line: 434,
            column: 15
          }
        }, {
          start: {
            line: 434,
            column: 19
          },
          end: {
            line: 434,
            column: 42
          }
        }],
        line: 434
      },
      "43": {
        loc: {
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 447,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 439,
            column: 16
          },
          end: {
            line: 447,
            column: 17
          }
        }, {
          start: {
            line: 445,
            column: 21
          },
          end: {
            line: 447,
            column: 17
          }
        }],
        line: 439
      },
      "44": {
        loc: {
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 442,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 439,
            column: 20
          },
          end: {
            line: 439,
            column: 49
          }
        }, {
          start: {
            line: 440,
            column: 20
          },
          end: {
            line: 440,
            column: 46
          }
        }, {
          start: {
            line: 441,
            column: 20
          },
          end: {
            line: 441,
            column: 47
          }
        }, {
          start: {
            line: 442,
            column: 20
          },
          end: {
            line: 442,
            column: 44
          }
        }],
        line: 439
      },
      "45": {
        loc: {
          start: {
            line: 461,
            column: 30
          },
          end: {
            line: 461,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 461,
            column: 30
          },
          end: {
            line: 461,
            column: 49
          }
        }, {
          start: {
            line: 461,
            column: 53
          },
          end: {
            line: 461,
            column: 68
          }
        }],
        line: 461
      },
      "46": {
        loc: {
          start: {
            line: 462,
            column: 29
          },
          end: {
            line: 462,
            column: 72
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 462,
            column: 50
          },
          end: {
            line: 462,
            column: 60
          }
        }, {
          start: {
            line: 462,
            column: 63
          },
          end: {
            line: 462,
            column: 72
          }
        }],
        line: 462
      },
      "47": {
        loc: {
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 468,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 464,
            column: 8
          },
          end: {
            line: 468,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 464
      },
      "48": {
        loc: {
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 8
          },
          end: {
            line: 477,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "49": {
        loc: {
          start: {
            line: 485,
            column: 25
          },
          end: {
            line: 485,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 485,
            column: 25
          },
          end: {
            line: 485,
            column: 36
          }
        }, {
          start: {
            line: 485,
            column: 40
          },
          end: {
            line: 485,
            column: 51
          }
        }],
        line: 485
      },
      "50": {
        loc: {
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 488,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 487,
            column: 8
          },
          end: {
            line: 488,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 487
      },
      "51": {
        loc: {
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 513,
            column: 13
          }
        }, {
          start: {
            line: 505,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        }],
        line: 502
      },
      "52": {
        loc: {
          start: {
            line: 502,
            column: 16
          },
          end: {
            line: 502,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 502,
            column: 16
          },
          end: {
            line: 502,
            column: 34
          }
        }, {
          start: {
            line: 502,
            column: 38
          },
          end: {
            line: 502,
            column: 72
          }
        }],
        line: 502
      },
      "53": {
        loc: {
          start: {
            line: 505,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 505,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        }, {
          start: {
            line: 508,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        }],
        line: 505
      },
      "54": {
        loc: {
          start: {
            line: 508,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 508,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        }, {
          start: {
            line: 511,
            column: 17
          },
          end: {
            line: 513,
            column: 13
          }
        }],
        line: 508
      },
      "55": {
        loc: {
          start: {
            line: 508,
            column: 21
          },
          end: {
            line: 508,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 508,
            column: 21
          },
          end: {
            line: 508,
            column: 40
          }
        }, {
          start: {
            line: 508,
            column: 44
          },
          end: {
            line: 508,
            column: 64
          }
        }],
        line: 508
      },
      "56": {
        loc: {
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 524,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 522,
            column: 8
          },
          end: {
            line: 524,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 522
      },
      "57": {
        loc: {
          start: {
            line: 522,
            column: 12
          },
          end: {
            line: 522,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 522,
            column: 12
          },
          end: {
            line: 522,
            column: 18
          }
        }, {
          start: {
            line: 522,
            column: 22
          },
          end: {
            line: 522,
            column: 49
          }
        }],
        line: 522
      },
      "58": {
        loc: {
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 531,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 531
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0, 0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0],
      "56": [0, 0],
      "57": [0, 0],
      "58": [0, 0]
    },
    inputSourceMap: {
      file: "/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts",
      mappings: "AAAA;;;;;GAKG;AA4BH;;;;;GAKG;AACH,MAAM,OAAO,wBAAwB;IAC3B,MAAM,CAAoC;IAC1C,KAAK,GAAG,IAAI,GAAG,EAA0C,CAAC;IAElE,YAAY,SAAkC,EAAE;QAC9C,IAAI,CAAC,MAAM,GAAG;YACZ,OAAO,EAAE,kBAAkB;YAC3B,aAAa,EAAE,EAAE;YACjB,WAAW,EAAE,KAAK,EAAE,wCAAwC;YAC5D,eAAe,EAAE,IAAI;YACrB,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,2CAA2C;YACzE,WAAW,EAAE,IAAI,GAAG,IAAI,EAAE,UAAU;YACpC,GAAG,MAAM;SACV,CAAC;IACJ,CAAC;IAED;;OAEG;IACI,QAAQ,CAAC,MAAe,EAAE,SAAiC;QAChE,yCAAyC;QACzC,MAAM,CAAC,mBAAmB,CAAC;YACzB,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,OAAO;YAC1C,IAAI,EAAE,eAAe;YACrB,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,IAAI;oBACV,WAAW,EAAE,6BAA6B;oBAC1C,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,EAAkB,EAAE,EAAE;gBACrC,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC9D,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;iBACzC,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,mCAAmC;QACnC,MAAM,CAAC,mBAAmB,CAAC;YACzB,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,YAAY;YAC/C,IAAI,EAAE,oBAAoB;YAC1B,QAAQ,EAAE,YAAY;YACtB,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,IAAI;oBACV,WAAW,EAAE,6BAA6B;oBAC1C,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,EAAkB,EAAE,EAAE;gBACrC,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC7D,OAAO;oBACL,IAAI,EAAE,IAAI;iBACX,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,6BAA6B;QAC7B,MAAM,CAAC,WAAW,CAAC;YACjB,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,SAAS;YACpC,IAAI,EAAE,uBAAuB;YAC7B,QAAQ,EAAE,kBAAkB;YAC5B,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gBAClE,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;iBAC1C,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,6BAA6B;QAC7B,MAAM,CAAC,WAAW,CAAC;YACjB,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,WAAW;YACtC,IAAI,EAAE,uBAAuB;YAC7B,QAAQ,EAAE,kBAAkB;YAC5B,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,CAAC;gBAChE,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;iBACxC,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,gCAAgC;QAChC,MAAM,CAAC,WAAW,CAAC;YACjB,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,QAAQ;YACnC,IAAI,EAAE,0BAA0B;YAChC,QAAQ,EAAE,kBAAkB;YAC5B,IAAI,EAAE,KAAK,IAAI,EAAE;gBACf,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;gBAC3D,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;iBACrC,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,8BAA8B;QAC9B,MAAM,CAAC,mBAAmB,CAAC;YACzB,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,gBAAgB;YACnD,IAAI,EAAE,qBAAqB;YAC3B,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,aAAa;oBACnB,WAAW,EAAE,6BAA6B;oBAC1C,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,IAAI,EAAE,KAAK,EAAE,EAAE,WAAW,EAA2B,EAAE,EAAE;gBACvD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;gBACvE,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;iBACzC,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,wCAAwC;QACxC,MAAM,CAAC,mBAAmB,CAAC;YACzB,WAAW,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,wBAAwB;YAC3D,IAAI,EAAE,yBAAyB;YAC/B,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE;gBACT;oBACE,IAAI,EAAE,YAAY;oBAClB,WAAW,EAAE,wBAAwB;oBACrC,QAAQ,EAAE,IAAI;iBACf;aACF;YACD,IAAI,EAAE,KAAK,EAAE,EAAE,UAAU,EAA0B,EAAE,EAAE;gBACrD,MAAM,MAAM,GAAG,SAAS,EAAE,CAAC;gBAC3B,IAAI,CAAC,MAAM,EAAE,CAAC;oBACZ,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;gBACrE,CAAC;gBAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,6BAA6B,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBAChF,OAAO;oBACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;iBAC1C,CAAC;YACJ,CAAC;SACF,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,oBAAoB,CAAC,MAAiB,EAAE,WAAmB;QACvE,MAAM,QAAQ,GAAG,aAAa,WAAW,EAAE,CAAC;QAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEzD,uCAAuC;YACvC,MAAM,iBAAiB,GAAG;gBACxB,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;gBACpF,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,QAAQ,EACN,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS;oBACxC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE;oBACnF,CAAC,CAAC,IAAI;gBACV,QAAQ,EAAE;oBACR,IAAI,EAAE,SAAS,CAAC,IAAI;oBACpB,OAAO,EAAE,SAAS,CAAC,OAAO;oBAC1B,cAAc,EAAE,SAAS,CAAC,cAAc;oBACxC,KAAK,EAAG,SAAS,CAAC,IAAY,EAAE,UAAU,EAAE,KAAK;iBAClD;gBACD,qEAAqE;gBACrE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;oBAC3B,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE,CAAC;oBAClD,CAAC,CAAC,SAAS;gBACb,YAAY,EAAE;oBACZ,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,WAAW,EAAE;oBAC5C,IAAI,EAAE,eAAe;oBACrB,OAAO,EAAE,KAAK;oBACd,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACvC;aACF,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;YAChD,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,4BAA4B,WAAW,KAAK,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CACrG,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,wBAAwB,CAAC,MAAiB,EAAE,WAAmB;QAC3E,MAAM,QAAQ,GAAG,aAAa,WAAW,OAAO,CAAC;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;YAEzD,mCAAmC;YACnC,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,CAAC;YAEtD,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACnC,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,iCAAiC,WAAW,KAAK,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC1G,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,2BAA2B,CAAC,MAAiB;QACzD,MAAM,QAAQ,GAAG,mBAAmB,CAAC;QACrC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC;gBAC5C,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;aACjC,CAAC,CAAC;YAEH,MAAM,gBAAgB,GAAG;gBACvB,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,SAAc,EAAE,EAAE,CAAC,CAAC;oBACnD,EAAE,EAAE,SAAS,CAAC,EAAE;oBAChB,UAAU,EAAE,SAAS,CAAC,UAAU;oBAChC,YAAY,EAAE,SAAS,CAAC,YAAY,EAAE,IAAI;oBAC1C,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;oBACpF,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,QAAQ,EACN,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS;wBACxC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE;wBACnF,CAAC,CAAC,IAAI;oBACV,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,SAAS,CAAC,EAAE,EAAE;iBAC9C,CAAC,CAAC;gBACH,QAAQ,EAAE;oBACR,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM;oBAC7B,QAAQ,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM;oBAChC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;iBACzC;gBACD,YAAY,EAAE;oBACZ,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,SAAS;oBACpC,IAAI,EAAE,uBAAuB;oBAC7B,OAAO,EAAE,KAAK;oBACd,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACvC;aACF,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC/C,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,qCAAqC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC9F,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,2BAA2B,CAAC,MAAiB;QACzD,MAAM,QAAQ,GAAG,qBAAqB,CAAC;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC;gBAC5C,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;aACjC,CAAC,CAAC;YAEH,2CAA2C;YAC3C,MAAM,oBAAoB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAE3F,MAAM,gBAAgB,GAAG;gBACvB,QAAQ,EAAE,oBAAoB,CAAC,GAAG,CAAC,CAAC,SAAc,EAAE,EAAE,CAAC,CAAC;oBACtD,EAAE,EAAE,SAAS,CAAC,EAAE;oBAChB,UAAU,EAAE,SAAS,CAAC,UAAU;oBAChC,YAAY,EAAE,SAAS,CAAC,YAAY,EAAE,IAAI;oBAC1C,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,KAAK,EAAE,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,OAAO,IAAI,eAAe;oBACpE,YAAY,EAAE,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK;oBAC/C,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,SAAS,CAAC,EAAE,EAAE;iBAC9C,CAAC,CAAC;gBACH,QAAQ,EAAE;oBACR,KAAK,EAAE,oBAAoB,CAAC,MAAM;oBAClC,QAAQ,EAAE,oBAAoB,CAAC,MAAM;oBACrC,aAAa,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;iBACzC;gBACD,YAAY,EAAE;oBACZ,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,WAAW;oBACtC,IAAI,EAAE,uBAAuB;oBAC7B,OAAO,EAAE,KAAK;oBACd,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACvC;aACF,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC/C,OAAO,gBAAgB,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,qCAAqC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC9F,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,yBAAyB,CAAC,MAAiB;QACvD,MAAM,QAAQ,GAAG,kBAAkB,CAAC;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC;gBAC5C,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;aACjC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG;gBACZ,eAAe,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM;gBACvC,oBAAoB,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAC1C,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CACrD,CAAC,MAAM;gBACR,gBAAgB,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,MAAM;gBACtF,iBAAiB,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM;gBACzF,eAAe,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,IAAI,CAAC;gBAC/D,kBAAkB,EAAE,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,IAAI,CAAC;gBACrE,YAAY,EAAE;oBACZ,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,QAAQ;oBACnC,IAAI,EAAE,qBAAqB;oBAC3B,OAAO,EAAE,KAAK;oBACd,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACvC;aACF,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YACpC,OAAO,KAAK,CAAC;QACf,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,wCAAwC,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CACjG,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,6BAA6B,CAAC,MAAiB,EAAE,UAAkB;QAC/E,MAAM,QAAQ,GAAG,uBAAuB,UAAU,EAAE,CAAC;QACrD,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAC5C,IAAI,MAAM,EAAE,CAAC;YACX,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC;gBAC5C,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,aAAa;aACjC,CAAC,CAAC;YAEH,2CAA2C;YAC3C,MAAM,sBAAsB,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CACnD,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,KAAK,UAAU,CACxC,CAAC;YAEF,MAAM,kBAAkB,GAAG;gBACzB,UAAU;gBACV,UAAU,EAAE,sBAAsB,CAAC,GAAG,CAAC,CAAC,SAAc,EAAE,EAAE,CAAC,CAAC;oBAC1D,EAAE,EAAE,SAAS,CAAC,EAAE;oBAChB,MAAM,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;oBACpF,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,SAAS,EAAE,SAAS,CAAC,SAAS;oBAC9B,QAAQ,EACN,SAAS,CAAC,SAAS,IAAI,SAAS,CAAC,SAAS;wBACxC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE;wBACnF,CAAC,CAAC,IAAI;oBACV,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,SAAS,CAAC,EAAE,EAAE;iBAC9C,CAAC,CAAC;gBACH,QAAQ,EAAE;oBACR,UAAU;oBACV,KAAK,EAAE,sBAAsB,CAAC,MAAM;oBACpC,QAAQ,EAAE,sBAAsB,CAAC,MAAM;iBACxC;gBACD,YAAY,EAAE;oBACZ,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,aAAa,UAAU,EAAE;oBACpD,IAAI,EAAE,yBAAyB;oBAC/B,OAAO,EAAE,KAAK;oBACd,YAAY,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;iBACvC;aACF,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;YACjD,OAAO,kBAAkB,CAAC;QAC5B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,MAAM,IAAI,KAAK,CACb,sCAAsC,UAAU,KAAK,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAC9G,CAAC;QACJ,CAAC;IACH,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,IAAS;QACrC,IAAI,CAAC,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,CAAC;YACtC,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACxC,IAAI,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;YAChD,OAAO;gBACL,UAAU,EAAE,IAAI;gBAChB,KAAK,EAAE,UAAU,CAAC,MAAM;gBACxB,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW;gBACjC,OAAO,EAAE,mCAAmC;aAC7C,CAAC;QACJ,CAAC;QAED,iCAAiC;QACjC,OAAO,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,GAAQ;QAClC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;YACvB,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;YACnC,MAAM,MAAM,GAAQ,EAAE,CAAC;YACvB,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC/C,sBAAsB;gBACtB,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;gBACnC,IACE,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;oBAC7B,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC;oBAC1B,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;oBAC3B,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EACxB,CAAC;oBACD,MAAM,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC;gBAC7B,CAAC;qBAAM,CAAC;oBACN,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;gBAChD,CAAC;YACH,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;QAED,OAAO,GAAG,CAAC;IACb,CAAC;IAED;;OAEG;IACK,wBAAwB,CAAC,SAAc;QAC7C,MAAM,IAAI,GAAa,EAAE,CAAC;QAE1B,IAAI,CAAC,IAAI,CAAC,iBAAiB,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,CAAC,gBAAgB,SAAS,CAAC,UAAU,EAAE,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,YAAY,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,YAAY,SAAS,CAAC,SAAS,IAAI,eAAe,EAAE,CAAC,CAAC;QAChE,IAAI,CAAC,IAAI,CAAC,WAAW,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;QACpE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEd,IAAI,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACpE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC;QAED,uCAAuC;QACvC,IAAI,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAClC,KAAK,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;gBACrF,IAAI,CAAC,IAAI,CAAC,SAAS,QAAQ,EAAE,CAAC,CAAC;gBAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAChB,CAAC;QACH,CAAC;QAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,wBAAwB,CAAC,UAAiB;QAChD,MAAM,SAAS,GAAG,UAAU;aACzB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC;aACvC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAE/E,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,CAAC,CAAC;QAErC,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,EAAE,CAAC,GAAG,GAAG,QAAQ,EAAE,CAAC,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC;IACnF,CAAC;IAED;;OAEG;IACK,2BAA2B,CAAC,UAAiB;QACnD,MAAM,YAAY,GAA2B;YAC3C,OAAO,EAAE,CAAC;YACV,KAAK,EAAE,CAAC;YACR,OAAO,EAAE,CAAC;YACV,OAAO,EAAE,CAAC;SACX,CAAC;QAEF,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC7B,IAAI,SAAS,CAAC,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;gBAC7D,YAAY,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC;iBAAM,IAAI,SAAS,CAAC,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;gBAC7C,YAAY,CAAC,KAAK,EAAE,CAAC;YACvB,CAAC;iBAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;gBACvD,YAAY,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACN,YAAY,CAAC,OAAO,EAAE,CAAC;YACzB,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,YAAY,CAAC;IACtB,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,GAAW;QAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACnC,IAAI,MAAM,IAAI,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;YAC1C,OAAO,MAAM,CAAC,IAAI,CAAC;QACrB,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,aAAa,CAAC,GAAW,EAAE,IAAS;QAC1C,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;gBAClB,IAAI;gBACJ,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa;aAChD,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAED;;OAEG;IACI,UAAU;QACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IAED;;OAEG;IACI,aAAa;QAClB,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACrB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;SACpC,CAAC;IACJ,CAAC;CACF;AAED;;GAEG;AACH,MAAM,UAAU,wBAAwB,CACtC,MAAgC;IAEhC,OAAO,IAAI,wBAAwB,CAAC,MAAM,CAAC,CAAC;AAC9C,CAAC",
      names: [],
      sources: ["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/resources/executionResources.ts"],
      sourcesContent: ["/**\n * Execution Resources for n8n MCP Server\n *\n * Provides MCP resources for accessing n8n execution data including logs,\n * results, timing information, and execution history.\n */\n\nimport { FastMCP } from 'fastmcp';\nimport { N8nClient } from '../client/n8nClient.js';\n\n/**\n * Execution resource configuration\n */\nexport interface ExecutionResourceConfig {\n  /** Base URI prefix for execution resources */\n  baseUri?: string;\n\n  /** Maximum number of executions to include in listings */\n  maxExecutions?: number;\n\n  /** Whether to include execution data in listings */\n  includeData?: boolean;\n\n  /** Whether to include failed executions */\n  includeFailures?: boolean;\n\n  /** Cache duration for execution data (ms) */\n  cacheDuration?: number;\n\n  /** Maximum execution data size to return (bytes) */\n  maxDataSize?: number;\n}\n\n/**\n * Execution resource manager\n *\n * Manages execution-related MCP resources including individual execution access,\n * execution logs, and execution statistics.\n */\nexport class ExecutionResourceManager {\n  private config: Required<ExecutionResourceConfig>;\n  private cache = new Map<string, { data: any; expires: number }>();\n\n  constructor(config: ExecutionResourceConfig = {}) {\n    this.config = {\n      baseUri: 'n8n://executions',\n      maxExecutions: 50,\n      includeData: false, // Data can be large, exclude by default\n      includeFailures: true,\n      cacheDuration: 2 * 60 * 1000, // 2 minutes (executions change frequently)\n      maxDataSize: 1024 * 1024, // 1MB max\n      ...config,\n    };\n  }\n\n  /**\n   * Register execution resources with FastMCP server\n   */\n  public register(server: FastMCP, getClient: () => N8nClient | null): void {\n    // Individual execution resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}`,\n      name: 'n8n Execution',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const execution = await this.getExecutionResource(client, id);\n        return {\n          text: JSON.stringify(execution, null, 2),\n        };\n      },\n    });\n\n    // Execution logs resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{id}/logs`,\n      name: 'n8n Execution Logs',\n      mimeType: 'text/plain',\n      arguments: [\n        {\n          name: 'id',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ id }: { id: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const logs = await this.getExecutionLogsResource(client, id);\n        return {\n          text: logs,\n        };\n      },\n    });\n\n    // Recent executions resource\n    server.addResource({\n      uri: `${this.config.baseUri}/recent`,\n      name: 'n8n Recent Executions',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const executions = await this.getRecentExecutionsResource(client);\n        return {\n          text: JSON.stringify(executions, null, 2),\n        };\n      },\n    });\n\n    // Failed executions resource\n    server.addResource({\n      uri: `${this.config.baseUri}/failures`,\n      name: 'n8n Failed Executions',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const failures = await this.getFailedExecutionsResource(client);\n        return {\n          text: JSON.stringify(failures, null, 2),\n        };\n      },\n    });\n\n    // Execution statistics resource\n    server.addResource({\n      uri: `${this.config.baseUri}/stats`,\n      name: 'n8n Execution Statistics',\n      mimeType: 'application/json',\n      load: async () => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const stats = await this.getExecutionStatsResource(client);\n        return {\n          text: JSON.stringify(stats, null, 2),\n        };\n      },\n    });\n\n    // Execution resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/{executionId}`,\n      name: 'n8n Execution by ID',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'executionId',\n          description: 'The ID of the n8n execution',\n          required: true,\n        },\n      ],\n      load: async ({ executionId }: { executionId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const execution = await this.getExecutionResource(client, executionId);\n        return {\n          text: JSON.stringify(execution, null, 2),\n        };\n      },\n    });\n\n    // Workflow executions resource template\n    server.addResourceTemplate({\n      uriTemplate: `${this.config.baseUri}/workflow/{workflowId}`,\n      name: 'n8n Workflow Executions',\n      mimeType: 'application/json',\n      arguments: [\n        {\n          name: 'workflowId',\n          description: 'The ID of the workflow',\n          required: true,\n        },\n      ],\n      load: async ({ workflowId }: { workflowId: string }) => {\n        const client = getClient();\n        if (!client) {\n          throw new Error('n8n client not initialized. Run init-n8n first.');\n        }\n\n        const executions = await this.getWorkflowExecutionsResource(client, workflowId);\n        return {\n          text: JSON.stringify(executions, null, 2),\n        };\n      },\n    });\n\n    console.log('\u26A1 Execution resources registered');\n  }\n\n  /**\n   * Get individual execution resource\n   */\n  private async getExecutionResource(client: N8nClient, executionId: string): Promise<any> {\n    const cacheKey = `execution:${executionId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const execution = await client.getExecution(executionId);\n\n      // Enhance execution data with metadata\n      const enhancedExecution = {\n        id: execution.id,\n        workflowId: execution.workflowId,\n        status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n        startedAt: execution.startedAt,\n        stoppedAt: execution.stoppedAt,\n        duration:\n          execution.stoppedAt && execution.startedAt\n            ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n            : null,\n        metadata: {\n          mode: execution.mode,\n          retryOf: execution.retryOf,\n          retrySuccessId: execution.retrySuccessId,\n          error: (execution.data as any)?.resultData?.error,\n        },\n        // Include data only if specifically requested and within size limits\n        data: this.config.includeData\n          ? this.sanitizeExecutionData(execution.data || {})\n          : undefined,\n        resourceInfo: {\n          uri: `${this.config.baseUri}/${executionId}`,\n          type: 'n8n-execution',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, enhancedExecution);\n      return enhancedExecution;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution ${executionId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get execution logs resource\n   */\n  private async getExecutionLogsResource(client: N8nClient, executionId: string): Promise<string> {\n    const cacheKey = `execution:${executionId}:logs`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const execution = await client.getExecution(executionId);\n\n      // Extract logs from execution data\n      const logs = this.extractLogsFromExecution(execution);\n\n      this.setCachedData(cacheKey, logs);\n      return logs;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution logs ${executionId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get recent executions resource\n   */\n  private async getRecentExecutionsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:recent';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      const recentExecutions = {\n        executions: executions.data.map((execution: any) => ({\n          id: execution.id,\n          workflowId: execution.workflowId,\n          workflowName: execution.workflowData?.name,\n          status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          duration:\n            execution.stoppedAt && execution.startedAt\n              ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n              : null,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          total: executions.data.length,\n          returned: executions.data.length,\n          maxExecutions: this.config.maxExecutions,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/recent`,\n          type: 'n8n-recent-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, recentExecutions);\n      return recentExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load recent executions: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get failed executions resource\n   */\n  private async getFailedExecutionsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:failures';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      // Filter for failed executions client-side\n      const failedExecutionsData = executions.data.filter((e: any) => e.data?.resultData?.error);\n\n      const failedExecutions = {\n        failures: failedExecutionsData.map((execution: any) => ({\n          id: execution.id,\n          workflowId: execution.workflowId,\n          workflowName: execution.workflowData?.name,\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          error: execution.data?.resultData?.error?.message || 'Unknown error',\n          errorDetails: execution.data?.resultData?.error,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          total: failedExecutionsData.length,\n          returned: failedExecutionsData.length,\n          maxExecutions: this.config.maxExecutions,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/failures`,\n          type: 'n8n-failed-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, failedExecutions);\n      return failedExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load failed executions: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get execution statistics resource\n   */\n  private async getExecutionStatsResource(client: N8nClient): Promise<any> {\n    const cacheKey = 'executions:stats';\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      const stats = {\n        totalExecutions: executions.data.length,\n        successfulExecutions: executions.data.filter(\n          (e: any) => e.finished && !e.data?.resultData?.error\n        ).length,\n        failedExecutions: executions.data.filter((e: any) => e.data?.resultData?.error).length,\n        runningExecutions: executions.data.filter((e: any) => !e.finished && !e.stoppedAt).length,\n        averageDuration: this.calculateAverageDuration(executions.data),\n        executionsByStatus: this.calculateExecutionsByStatus(executions.data),\n        resourceInfo: {\n          uri: `${this.config.baseUri}/stats`,\n          type: 'n8n-execution-stats',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, stats);\n      return stats;\n    } catch (error) {\n      throw new Error(\n        `Failed to load execution statistics: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Get workflow executions resource\n   */\n  private async getWorkflowExecutionsResource(client: N8nClient, workflowId: string): Promise<any> {\n    const cacheKey = `executions:workflow:${workflowId}`;\n    const cached = this.getCachedData(cacheKey);\n    if (cached) {\n      return cached;\n    }\n\n    try {\n      const executions = await client.getExecutions({\n        limit: this.config.maxExecutions,\n      });\n\n      // Filter for specific workflow client-side\n      const workflowExecutionsData = executions.data.filter(\n        (e: any) => e.workflowId === workflowId\n      );\n\n      const workflowExecutions = {\n        workflowId,\n        executions: workflowExecutionsData.map((execution: any) => ({\n          id: execution.id,\n          status: execution.finished ? 'success' : execution.stoppedAt ? 'stopped' : 'running',\n          startedAt: execution.startedAt,\n          stoppedAt: execution.stoppedAt,\n          duration:\n            execution.stoppedAt && execution.startedAt\n              ? new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()\n              : null,\n          uri: `${this.config.baseUri}/${execution.id}`,\n        })),\n        metadata: {\n          workflowId,\n          total: workflowExecutionsData.length,\n          returned: workflowExecutionsData.length,\n        },\n        resourceInfo: {\n          uri: `${this.config.baseUri}/workflow/${workflowId}`,\n          type: 'n8n-workflow-executions',\n          version: '1.0',\n          lastAccessed: new Date().toISOString(),\n        },\n      };\n\n      this.setCachedData(cacheKey, workflowExecutions);\n      return workflowExecutions;\n    } catch (error) {\n      throw new Error(\n        `Failed to load workflow executions ${workflowId}: ${error instanceof Error ? error.message : String(error)}`\n      );\n    }\n  }\n\n  /**\n   * Sanitize execution data to remove sensitive information and limit size\n   */\n  private sanitizeExecutionData(data: any): any {\n    if (!data || typeof data !== 'object') {\n      return data;\n    }\n\n    const serialized = JSON.stringify(data);\n    if (serialized.length > this.config.maxDataSize) {\n      return {\n        _truncated: true,\n        _size: serialized.length,\n        _maxSize: this.config.maxDataSize,\n        summary: 'Data truncated due to size limits',\n      };\n    }\n\n    // Remove sensitive data patterns\n    return this.removeSensitiveData(data);\n  }\n\n  /**\n   * Remove sensitive data from execution data\n   */\n  private removeSensitiveData(obj: any): any {\n    if (Array.isArray(obj)) {\n      return obj.map(item => this.removeSensitiveData(item));\n    }\n\n    if (obj && typeof obj === 'object') {\n      const result: any = {};\n      for (const [key, value] of Object.entries(obj)) {\n        // Skip sensitive keys\n        const lowerKey = key.toLowerCase();\n        if (\n          lowerKey.includes('password') ||\n          lowerKey.includes('token') ||\n          lowerKey.includes('secret') ||\n          lowerKey.includes('key')\n        ) {\n          result[key] = '[REDACTED]';\n        } else {\n          result[key] = this.removeSensitiveData(value);\n        }\n      }\n      return result;\n    }\n\n    return obj;\n  }\n\n  /**\n   * Extract logs from execution data\n   */\n  private extractLogsFromExecution(execution: any): string {\n    const logs: string[] = [];\n\n    logs.push(`Execution ID: ${execution.id}`);\n    logs.push(`Workflow ID: ${execution.workflowId}`);\n    logs.push(`Started: ${execution.startedAt}`);\n    logs.push(`Stopped: ${execution.stoppedAt || 'Still running'}`);\n    logs.push(`Status: ${execution.finished ? 'Finished' : 'Running'}`);\n    logs.push('');\n\n    if (execution.data?.resultData?.error) {\n      logs.push('ERROR:');\n      logs.push(JSON.stringify(execution.data.resultData.error, null, 2));\n      logs.push('');\n    }\n\n    // Add node execution logs if available\n    if (execution.data?.resultData?.runData) {\n      logs.push('NODE EXECUTION DATA:');\n      for (const [nodeName, nodeData] of Object.entries(execution.data.resultData.runData)) {\n        logs.push(`Node: ${nodeName}`);\n        logs.push(JSON.stringify(nodeData, null, 2));\n        logs.push('');\n      }\n    }\n\n    return logs.join('\\n');\n  }\n\n  /**\n   * Calculate average execution duration\n   */\n  private calculateAverageDuration(executions: any[]): number {\n    const durations = executions\n      .filter(e => e.startedAt && e.stoppedAt)\n      .map(e => new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime());\n\n    if (durations.length === 0) return 0;\n\n    return durations.reduce((sum, duration) => sum + duration, 0) / durations.length;\n  }\n\n  /**\n   * Calculate executions by status\n   */\n  private calculateExecutionsByStatus(executions: any[]): Record<string, number> {\n    const statusCounts: Record<string, number> = {\n      success: 0,\n      error: 0,\n      running: 0,\n      stopped: 0,\n    };\n\n    executions.forEach(execution => {\n      if (execution.finished && !execution.data?.resultData?.error) {\n        statusCounts.success++;\n      } else if (execution.data?.resultData?.error) {\n        statusCounts.error++;\n      } else if (!execution.finished && !execution.stoppedAt) {\n        statusCounts.running++;\n      } else {\n        statusCounts.stopped++;\n      }\n    });\n\n    return statusCounts;\n  }\n\n  /**\n   * Get cached data if not expired\n   */\n  private getCachedData(key: string): any | null {\n    const cached = this.cache.get(key);\n    if (cached && cached.expires > Date.now()) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  /**\n   * Set cached data with expiration\n   */\n  private setCachedData(key: string, data: any): void {\n    if (this.config.cacheDuration > 0) {\n      this.cache.set(key, {\n        data,\n        expires: Date.now() + this.config.cacheDuration,\n      });\n    }\n  }\n\n  /**\n   * Clear resource cache\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics\n   */\n  public getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()),\n    };\n  }\n}\n\n/**\n * Create execution resource manager\n */\nexport function createExecutionResources(\n  config?: ExecutionResourceConfig\n): ExecutionResourceManager {\n  return new ExecutionResourceManager(config);\n}\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "663799f5389604f0bff1b9d1bcb7cab2ee93639e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6gr377gb5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6gr377gb5();
/**
 * Execution Resources for n8n MCP Server
 *
 * Provides MCP resources for accessing n8n execution data including logs,
 * results, timing information, and execution history.
 */
/**
 * Execution resource manager
 *
 * Manages execution-related MCP resources including individual execution access,
 * execution logs, and execution statistics.
 */
export class ExecutionResourceManager {
  config;
  cache =
  /* istanbul ignore next */
  (cov_6gr377gb5().s[0]++, new Map());
  constructor(config =
  /* istanbul ignore next */
  (cov_6gr377gb5().b[0][0]++, {})) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[0]++;
    cov_6gr377gb5().s[1]++;
    this.config = {
      baseUri: 'n8n://executions',
      maxExecutions: 50,
      includeData: false,
      // Data can be large, exclude by default
      includeFailures: true,
      cacheDuration: 2 * 60 * 1000,
      // 2 minutes (executions change frequently)
      maxDataSize: 1024 * 1024,
      // 1MB max
      ...config
    };
  }
  /**
   * Register execution resources with FastMCP server
   */
  register(server, getClient) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[1]++;
    cov_6gr377gb5().s[2]++;
    // Individual execution resource template
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}/{id}`,
      name: 'n8n Execution',
      mimeType: 'application/json',
      arguments: [{
        name: 'id',
        description: 'The ID of the n8n execution',
        required: true
      }],
      load: async ({
        id
      }) => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[2]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[3]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[4]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[1][0]++;
          cov_6gr377gb5().s[5]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[1][1]++;
        }
        const execution =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[6]++, await this.getExecutionResource(client, id));
        /* istanbul ignore next */
        cov_6gr377gb5().s[7]++;
        return {
          text: JSON.stringify(execution, null, 2)
        };
      }
    });
    // Execution logs resource template
    /* istanbul ignore next */
    cov_6gr377gb5().s[8]++;
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}/{id}/logs`,
      name: 'n8n Execution Logs',
      mimeType: 'text/plain',
      arguments: [{
        name: 'id',
        description: 'The ID of the n8n execution',
        required: true
      }],
      load: async ({
        id
      }) => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[3]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[9]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[10]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[2][0]++;
          cov_6gr377gb5().s[11]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[2][1]++;
        }
        const logs =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[12]++, await this.getExecutionLogsResource(client, id));
        /* istanbul ignore next */
        cov_6gr377gb5().s[13]++;
        return {
          text: logs
        };
      }
    });
    // Recent executions resource
    /* istanbul ignore next */
    cov_6gr377gb5().s[14]++;
    server.addResource({
      uri: `${this.config.baseUri}/recent`,
      name: 'n8n Recent Executions',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[4]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[15]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[16]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[3][0]++;
          cov_6gr377gb5().s[17]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[3][1]++;
        }
        const executions =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[18]++, await this.getRecentExecutionsResource(client));
        /* istanbul ignore next */
        cov_6gr377gb5().s[19]++;
        return {
          text: JSON.stringify(executions, null, 2)
        };
      }
    });
    // Failed executions resource
    /* istanbul ignore next */
    cov_6gr377gb5().s[20]++;
    server.addResource({
      uri: `${this.config.baseUri}/failures`,
      name: 'n8n Failed Executions',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[5]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[21]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[22]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[4][0]++;
          cov_6gr377gb5().s[23]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[4][1]++;
        }
        const failures =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[24]++, await this.getFailedExecutionsResource(client));
        /* istanbul ignore next */
        cov_6gr377gb5().s[25]++;
        return {
          text: JSON.stringify(failures, null, 2)
        };
      }
    });
    // Execution statistics resource
    /* istanbul ignore next */
    cov_6gr377gb5().s[26]++;
    server.addResource({
      uri: `${this.config.baseUri}/stats`,
      name: 'n8n Execution Statistics',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[6]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[27]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[28]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[5][0]++;
          cov_6gr377gb5().s[29]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[5][1]++;
        }
        const stats =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[30]++, await this.getExecutionStatsResource(client));
        /* istanbul ignore next */
        cov_6gr377gb5().s[31]++;
        return {
          text: JSON.stringify(stats, null, 2)
        };
      }
    });
    // Execution resource template
    /* istanbul ignore next */
    cov_6gr377gb5().s[32]++;
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}/{executionId}`,
      name: 'n8n Execution by ID',
      mimeType: 'application/json',
      arguments: [{
        name: 'executionId',
        description: 'The ID of the n8n execution',
        required: true
      }],
      load: async ({
        executionId
      }) => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[7]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[33]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[34]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[6][0]++;
          cov_6gr377gb5().s[35]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[6][1]++;
        }
        const execution =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[36]++, await this.getExecutionResource(client, executionId));
        /* istanbul ignore next */
        cov_6gr377gb5().s[37]++;
        return {
          text: JSON.stringify(execution, null, 2)
        };
      }
    });
    // Workflow executions resource template
    /* istanbul ignore next */
    cov_6gr377gb5().s[38]++;
    server.addResourceTemplate({
      uriTemplate: `${this.config.baseUri}/workflow/{workflowId}`,
      name: 'n8n Workflow Executions',
      mimeType: 'application/json',
      arguments: [{
        name: 'workflowId',
        description: 'The ID of the workflow',
        required: true
      }],
      load: async ({
        workflowId
      }) => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[8]++;
        const client =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[39]++, getClient());
        /* istanbul ignore next */
        cov_6gr377gb5().s[40]++;
        if (!client) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[7][0]++;
          cov_6gr377gb5().s[41]++;
          throw new Error('n8n client not initialized. Run init-n8n first.');
        } else
        /* istanbul ignore next */
        {
          cov_6gr377gb5().b[7][1]++;
        }
        const executions =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[42]++, await this.getWorkflowExecutionsResource(client, workflowId));
        /* istanbul ignore next */
        cov_6gr377gb5().s[43]++;
        return {
          text: JSON.stringify(executions, null, 2)
        };
      }
    });
    /* istanbul ignore next */
    cov_6gr377gb5().s[44]++;
    console.log('⚡ Execution resources registered');
  }
  /**
   * Get individual execution resource
   */
  async getExecutionResource(client, executionId) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[9]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[45]++, `execution:${executionId}`);
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[46]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[47]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[8][0]++;
      cov_6gr377gb5().s[48]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[8][1]++;
    }
    cov_6gr377gb5().s[49]++;
    try {
      const execution =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[50]++, await client.getExecution(executionId));
      // Enhance execution data with metadata
      const enhancedExecution =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[51]++, {
        id: execution.id,
        workflowId: execution.workflowId,
        status: execution.finished ?
        /* istanbul ignore next */
        (cov_6gr377gb5().b[9][0]++, 'success') :
        /* istanbul ignore next */
        (cov_6gr377gb5().b[9][1]++, execution.stoppedAt ?
        /* istanbul ignore next */
        (cov_6gr377gb5().b[10][0]++, 'stopped') :
        /* istanbul ignore next */
        (cov_6gr377gb5().b[10][1]++, 'running')),
        startedAt: execution.startedAt,
        stoppedAt: execution.stoppedAt,
        duration:
        /* istanbul ignore next */
        (cov_6gr377gb5().b[12][0]++, execution.stoppedAt) &&
        /* istanbul ignore next */
        (cov_6gr377gb5().b[12][1]++, execution.startedAt) ?
        /* istanbul ignore next */
        (cov_6gr377gb5().b[11][0]++, new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()) :
        /* istanbul ignore next */
        (cov_6gr377gb5().b[11][1]++, null),
        metadata: {
          mode: execution.mode,
          retryOf: execution.retryOf,
          retrySuccessId: execution.retrySuccessId,
          error: execution.data?.resultData?.error
        },
        // Include data only if specifically requested and within size limits
        data: this.config.includeData ?
        /* istanbul ignore next */
        (cov_6gr377gb5().b[13][0]++, this.sanitizeExecutionData(
        /* istanbul ignore next */
        (cov_6gr377gb5().b[14][0]++, execution.data) ||
        /* istanbul ignore next */
        (cov_6gr377gb5().b[14][1]++, {}))) :
        /* istanbul ignore next */
        (cov_6gr377gb5().b[13][1]++, undefined),
        resourceInfo: {
          uri: `${this.config.baseUri}/${executionId}`,
          type: 'n8n-execution',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      });
      /* istanbul ignore next */
      cov_6gr377gb5().s[52]++;
      this.setCachedData(cacheKey, enhancedExecution);
      /* istanbul ignore next */
      cov_6gr377gb5().s[53]++;
      return enhancedExecution;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[54]++;
      throw new Error(`Failed to load execution ${executionId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[15][1]++, String(error))}`);
    }
  }
  /**
   * Get execution logs resource
   */
  async getExecutionLogsResource(client, executionId) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[10]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[55]++, `execution:${executionId}:logs`);
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[56]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[57]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[16][0]++;
      cov_6gr377gb5().s[58]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[16][1]++;
    }
    cov_6gr377gb5().s[59]++;
    try {
      const execution =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[60]++, await client.getExecution(executionId));
      // Extract logs from execution data
      const logs =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[61]++, this.extractLogsFromExecution(execution));
      /* istanbul ignore next */
      cov_6gr377gb5().s[62]++;
      this.setCachedData(cacheKey, logs);
      /* istanbul ignore next */
      cov_6gr377gb5().s[63]++;
      return logs;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[64]++;
      throw new Error(`Failed to load execution logs ${executionId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[17][1]++, String(error))}`);
    }
  }
  /**
   * Get recent executions resource
   */
  async getRecentExecutionsResource(client) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[11]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[65]++, 'executions:recent');
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[66]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[67]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[18][0]++;
      cov_6gr377gb5().s[68]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[18][1]++;
    }
    cov_6gr377gb5().s[69]++;
    try {
      const executions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[70]++, await client.getExecutions({
        limit: this.config.maxExecutions
      }));
      const recentExecutions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[71]++, {
        executions: executions.data.map(execution => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[12]++;
          cov_6gr377gb5().s[72]++;
          return {
            id: execution.id,
            workflowId: execution.workflowId,
            workflowName: execution.workflowData?.name,
            status: execution.finished ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[19][0]++, 'success') :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[19][1]++, execution.stoppedAt ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[20][0]++, 'stopped') :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[20][1]++, 'running')),
            startedAt: execution.startedAt,
            stoppedAt: execution.stoppedAt,
            duration:
            /* istanbul ignore next */
            (cov_6gr377gb5().b[22][0]++, execution.stoppedAt) &&
            /* istanbul ignore next */
            (cov_6gr377gb5().b[22][1]++, execution.startedAt) ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[21][0]++, new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()) :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[21][1]++, null),
            uri: `${this.config.baseUri}/${execution.id}`
          };
        }),
        metadata: {
          total: executions.data.length,
          returned: executions.data.length,
          maxExecutions: this.config.maxExecutions
        },
        resourceInfo: {
          uri: `${this.config.baseUri}/recent`,
          type: 'n8n-recent-executions',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      });
      /* istanbul ignore next */
      cov_6gr377gb5().s[73]++;
      this.setCachedData(cacheKey, recentExecutions);
      /* istanbul ignore next */
      cov_6gr377gb5().s[74]++;
      return recentExecutions;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[75]++;
      throw new Error(`Failed to load recent executions: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[23][1]++, String(error))}`);
    }
  }
  /**
   * Get failed executions resource
   */
  async getFailedExecutionsResource(client) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[13]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[76]++, 'executions:failures');
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[77]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[78]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[24][0]++;
      cov_6gr377gb5().s[79]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[24][1]++;
    }
    cov_6gr377gb5().s[80]++;
    try {
      const executions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[81]++, await client.getExecutions({
        limit: this.config.maxExecutions
      }));
      // Filter for failed executions client-side
      const failedExecutionsData =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[82]++, executions.data.filter(e => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[14]++;
        cov_6gr377gb5().s[83]++;
        return e.data?.resultData?.error;
      }));
      const failedExecutions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[84]++, {
        failures: failedExecutionsData.map(execution => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[15]++;
          cov_6gr377gb5().s[85]++;
          return {
            id: execution.id,
            workflowId: execution.workflowId,
            workflowName: execution.workflowData?.name,
            startedAt: execution.startedAt,
            stoppedAt: execution.stoppedAt,
            error:
            /* istanbul ignore next */
            (cov_6gr377gb5().b[25][0]++, execution.data?.resultData?.error?.message) ||
            /* istanbul ignore next */
            (cov_6gr377gb5().b[25][1]++, 'Unknown error'),
            errorDetails: execution.data?.resultData?.error,
            uri: `${this.config.baseUri}/${execution.id}`
          };
        }),
        metadata: {
          total: failedExecutionsData.length,
          returned: failedExecutionsData.length,
          maxExecutions: this.config.maxExecutions
        },
        resourceInfo: {
          uri: `${this.config.baseUri}/failures`,
          type: 'n8n-failed-executions',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      });
      /* istanbul ignore next */
      cov_6gr377gb5().s[86]++;
      this.setCachedData(cacheKey, failedExecutions);
      /* istanbul ignore next */
      cov_6gr377gb5().s[87]++;
      return failedExecutions;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[88]++;
      throw new Error(`Failed to load failed executions: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[26][1]++, String(error))}`);
    }
  }
  /**
   * Get execution statistics resource
   */
  async getExecutionStatsResource(client) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[16]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[89]++, 'executions:stats');
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[90]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[91]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[27][0]++;
      cov_6gr377gb5().s[92]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[27][1]++;
    }
    cov_6gr377gb5().s[93]++;
    try {
      const executions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[94]++, await client.getExecutions({
        limit: this.config.maxExecutions
      }));
      const stats =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[95]++, {
        totalExecutions: executions.data.length,
        successfulExecutions: executions.data.filter(e => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[17]++;
          cov_6gr377gb5().s[96]++;
          return /* istanbul ignore next */(cov_6gr377gb5().b[28][0]++, e.finished) &&
          /* istanbul ignore next */
          (cov_6gr377gb5().b[28][1]++, !e.data?.resultData?.error);
        }).length,
        failedExecutions: executions.data.filter(e => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[18]++;
          cov_6gr377gb5().s[97]++;
          return e.data?.resultData?.error;
        }).length,
        runningExecutions: executions.data.filter(e => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[19]++;
          cov_6gr377gb5().s[98]++;
          return /* istanbul ignore next */(cov_6gr377gb5().b[29][0]++, !e.finished) &&
          /* istanbul ignore next */
          (cov_6gr377gb5().b[29][1]++, !e.stoppedAt);
        }).length,
        averageDuration: this.calculateAverageDuration(executions.data),
        executionsByStatus: this.calculateExecutionsByStatus(executions.data),
        resourceInfo: {
          uri: `${this.config.baseUri}/stats`,
          type: 'n8n-execution-stats',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      });
      /* istanbul ignore next */
      cov_6gr377gb5().s[99]++;
      this.setCachedData(cacheKey, stats);
      /* istanbul ignore next */
      cov_6gr377gb5().s[100]++;
      return stats;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[101]++;
      throw new Error(`Failed to load execution statistics: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[30][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[30][1]++, String(error))}`);
    }
  }
  /**
   * Get workflow executions resource
   */
  async getWorkflowExecutionsResource(client, workflowId) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[20]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[102]++, `executions:workflow:${workflowId}`);
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[103]++, this.getCachedData(cacheKey));
    /* istanbul ignore next */
    cov_6gr377gb5().s[104]++;
    if (cached) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[31][0]++;
      cov_6gr377gb5().s[105]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[31][1]++;
    }
    cov_6gr377gb5().s[106]++;
    try {
      const executions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[107]++, await client.getExecutions({
        limit: this.config.maxExecutions
      }));
      // Filter for specific workflow client-side
      const workflowExecutionsData =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[108]++, executions.data.filter(e => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[21]++;
        cov_6gr377gb5().s[109]++;
        return e.workflowId === workflowId;
      }));
      const workflowExecutions =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[110]++, {
        workflowId,
        executions: workflowExecutionsData.map(execution => {
          /* istanbul ignore next */
          cov_6gr377gb5().f[22]++;
          cov_6gr377gb5().s[111]++;
          return {
            id: execution.id,
            status: execution.finished ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[32][0]++, 'success') :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[32][1]++, execution.stoppedAt ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[33][0]++, 'stopped') :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[33][1]++, 'running')),
            startedAt: execution.startedAt,
            stoppedAt: execution.stoppedAt,
            duration:
            /* istanbul ignore next */
            (cov_6gr377gb5().b[35][0]++, execution.stoppedAt) &&
            /* istanbul ignore next */
            (cov_6gr377gb5().b[35][1]++, execution.startedAt) ?
            /* istanbul ignore next */
            (cov_6gr377gb5().b[34][0]++, new Date(execution.stoppedAt).getTime() - new Date(execution.startedAt).getTime()) :
            /* istanbul ignore next */
            (cov_6gr377gb5().b[34][1]++, null),
            uri: `${this.config.baseUri}/${execution.id}`
          };
        }),
        metadata: {
          workflowId,
          total: workflowExecutionsData.length,
          returned: workflowExecutionsData.length
        },
        resourceInfo: {
          uri: `${this.config.baseUri}/workflow/${workflowId}`,
          type: 'n8n-workflow-executions',
          version: '1.0',
          lastAccessed: new Date().toISOString()
        }
      });
      /* istanbul ignore next */
      cov_6gr377gb5().s[112]++;
      this.setCachedData(cacheKey, workflowExecutions);
      /* istanbul ignore next */
      cov_6gr377gb5().s[113]++;
      return workflowExecutions;
    } catch (error) {
      /* istanbul ignore next */
      cov_6gr377gb5().s[114]++;
      throw new Error(`Failed to load workflow executions ${workflowId}: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_6gr377gb5().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_6gr377gb5().b[36][1]++, String(error))}`);
    }
  }
  /**
   * Sanitize execution data to remove sensitive information and limit size
   */
  sanitizeExecutionData(data) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[23]++;
    cov_6gr377gb5().s[115]++;
    if (
    /* istanbul ignore next */
    (cov_6gr377gb5().b[38][0]++, !data) ||
    /* istanbul ignore next */
    (cov_6gr377gb5().b[38][1]++, typeof data !== 'object')) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[37][0]++;
      cov_6gr377gb5().s[116]++;
      return data;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[37][1]++;
    }
    const serialized =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[117]++, JSON.stringify(data));
    /* istanbul ignore next */
    cov_6gr377gb5().s[118]++;
    if (serialized.length > this.config.maxDataSize) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[39][0]++;
      cov_6gr377gb5().s[119]++;
      return {
        _truncated: true,
        _size: serialized.length,
        _maxSize: this.config.maxDataSize,
        summary: 'Data truncated due to size limits'
      };
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[39][1]++;
    }
    // Remove sensitive data patterns
    cov_6gr377gb5().s[120]++;
    return this.removeSensitiveData(data);
  }
  /**
   * Remove sensitive data from execution data
   */
  removeSensitiveData(obj) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[24]++;
    cov_6gr377gb5().s[121]++;
    if (Array.isArray(obj)) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[40][0]++;
      cov_6gr377gb5().s[122]++;
      return obj.map(item => {
        /* istanbul ignore next */
        cov_6gr377gb5().f[25]++;
        cov_6gr377gb5().s[123]++;
        return this.removeSensitiveData(item);
      });
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[40][1]++;
    }
    cov_6gr377gb5().s[124]++;
    if (
    /* istanbul ignore next */
    (cov_6gr377gb5().b[42][0]++, obj) &&
    /* istanbul ignore next */
    (cov_6gr377gb5().b[42][1]++, typeof obj === 'object')) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[41][0]++;
      const result =
      /* istanbul ignore next */
      (cov_6gr377gb5().s[125]++, {});
      /* istanbul ignore next */
      cov_6gr377gb5().s[126]++;
      for (const [key, value] of Object.entries(obj)) {
        // Skip sensitive keys
        const lowerKey =
        /* istanbul ignore next */
        (cov_6gr377gb5().s[127]++, key.toLowerCase());
        /* istanbul ignore next */
        cov_6gr377gb5().s[128]++;
        if (
        /* istanbul ignore next */
        (cov_6gr377gb5().b[44][0]++, lowerKey.includes('password')) ||
        /* istanbul ignore next */
        (cov_6gr377gb5().b[44][1]++, lowerKey.includes('token')) ||
        /* istanbul ignore next */
        (cov_6gr377gb5().b[44][2]++, lowerKey.includes('secret')) ||
        /* istanbul ignore next */
        (cov_6gr377gb5().b[44][3]++, lowerKey.includes('key'))) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[43][0]++;
          cov_6gr377gb5().s[129]++;
          result[key] = '[REDACTED]';
        } else {
          /* istanbul ignore next */
          cov_6gr377gb5().b[43][1]++;
          cov_6gr377gb5().s[130]++;
          result[key] = this.removeSensitiveData(value);
        }
      }
      /* istanbul ignore next */
      cov_6gr377gb5().s[131]++;
      return result;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[41][1]++;
    }
    cov_6gr377gb5().s[132]++;
    return obj;
  }
  /**
   * Extract logs from execution data
   */
  extractLogsFromExecution(execution) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[26]++;
    const logs =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[133]++, []);
    /* istanbul ignore next */
    cov_6gr377gb5().s[134]++;
    logs.push(`Execution ID: ${execution.id}`);
    /* istanbul ignore next */
    cov_6gr377gb5().s[135]++;
    logs.push(`Workflow ID: ${execution.workflowId}`);
    /* istanbul ignore next */
    cov_6gr377gb5().s[136]++;
    logs.push(`Started: ${execution.startedAt}`);
    /* istanbul ignore next */
    cov_6gr377gb5().s[137]++;
    logs.push(`Stopped: ${
    /* istanbul ignore next */
    (cov_6gr377gb5().b[45][0]++, execution.stoppedAt) ||
    /* istanbul ignore next */
    (cov_6gr377gb5().b[45][1]++, 'Still running')}`);
    /* istanbul ignore next */
    cov_6gr377gb5().s[138]++;
    logs.push(`Status: ${execution.finished ?
    /* istanbul ignore next */
    (cov_6gr377gb5().b[46][0]++, 'Finished') :
    /* istanbul ignore next */
    (cov_6gr377gb5().b[46][1]++, 'Running')}`);
    /* istanbul ignore next */
    cov_6gr377gb5().s[139]++;
    logs.push('');
    /* istanbul ignore next */
    cov_6gr377gb5().s[140]++;
    if (execution.data?.resultData?.error) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[47][0]++;
      cov_6gr377gb5().s[141]++;
      logs.push('ERROR:');
      /* istanbul ignore next */
      cov_6gr377gb5().s[142]++;
      logs.push(JSON.stringify(execution.data.resultData.error, null, 2));
      /* istanbul ignore next */
      cov_6gr377gb5().s[143]++;
      logs.push('');
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[47][1]++;
    }
    // Add node execution logs if available
    cov_6gr377gb5().s[144]++;
    if (execution.data?.resultData?.runData) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[48][0]++;
      cov_6gr377gb5().s[145]++;
      logs.push('NODE EXECUTION DATA:');
      /* istanbul ignore next */
      cov_6gr377gb5().s[146]++;
      for (const [nodeName, nodeData] of Object.entries(execution.data.resultData.runData)) {
        /* istanbul ignore next */
        cov_6gr377gb5().s[147]++;
        logs.push(`Node: ${nodeName}`);
        /* istanbul ignore next */
        cov_6gr377gb5().s[148]++;
        logs.push(JSON.stringify(nodeData, null, 2));
        /* istanbul ignore next */
        cov_6gr377gb5().s[149]++;
        logs.push('');
      }
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[48][1]++;
    }
    cov_6gr377gb5().s[150]++;
    return logs.join('\n');
  }
  /**
   * Calculate average execution duration
   */
  calculateAverageDuration(executions) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[27]++;
    const durations =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[151]++, executions.filter(e => {
      /* istanbul ignore next */
      cov_6gr377gb5().f[28]++;
      cov_6gr377gb5().s[152]++;
      return /* istanbul ignore next */(cov_6gr377gb5().b[49][0]++, e.startedAt) &&
      /* istanbul ignore next */
      (cov_6gr377gb5().b[49][1]++, e.stoppedAt);
    }).map(e => {
      /* istanbul ignore next */
      cov_6gr377gb5().f[29]++;
      cov_6gr377gb5().s[153]++;
      return new Date(e.stoppedAt).getTime() - new Date(e.startedAt).getTime();
    }));
    /* istanbul ignore next */
    cov_6gr377gb5().s[154]++;
    if (durations.length === 0) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[50][0]++;
      cov_6gr377gb5().s[155]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[50][1]++;
    }
    cov_6gr377gb5().s[156]++;
    return durations.reduce((sum, duration) => {
      /* istanbul ignore next */
      cov_6gr377gb5().f[30]++;
      cov_6gr377gb5().s[157]++;
      return sum + duration;
    }, 0) / durations.length;
  }
  /**
   * Calculate executions by status
   */
  calculateExecutionsByStatus(executions) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[31]++;
    const statusCounts =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[158]++, {
      success: 0,
      error: 0,
      running: 0,
      stopped: 0
    });
    /* istanbul ignore next */
    cov_6gr377gb5().s[159]++;
    executions.forEach(execution => {
      /* istanbul ignore next */
      cov_6gr377gb5().f[32]++;
      cov_6gr377gb5().s[160]++;
      if (
      /* istanbul ignore next */
      (cov_6gr377gb5().b[52][0]++, execution.finished) &&
      /* istanbul ignore next */
      (cov_6gr377gb5().b[52][1]++, !execution.data?.resultData?.error)) {
        /* istanbul ignore next */
        cov_6gr377gb5().b[51][0]++;
        cov_6gr377gb5().s[161]++;
        statusCounts.success++;
      } else {
        /* istanbul ignore next */
        cov_6gr377gb5().b[51][1]++;
        cov_6gr377gb5().s[162]++;
        if (execution.data?.resultData?.error) {
          /* istanbul ignore next */
          cov_6gr377gb5().b[53][0]++;
          cov_6gr377gb5().s[163]++;
          statusCounts.error++;
        } else {
          /* istanbul ignore next */
          cov_6gr377gb5().b[53][1]++;
          cov_6gr377gb5().s[164]++;
          if (
          /* istanbul ignore next */
          (cov_6gr377gb5().b[55][0]++, !execution.finished) &&
          /* istanbul ignore next */
          (cov_6gr377gb5().b[55][1]++, !execution.stoppedAt)) {
            /* istanbul ignore next */
            cov_6gr377gb5().b[54][0]++;
            cov_6gr377gb5().s[165]++;
            statusCounts.running++;
          } else {
            /* istanbul ignore next */
            cov_6gr377gb5().b[54][1]++;
            cov_6gr377gb5().s[166]++;
            statusCounts.stopped++;
          }
        }
      }
    });
    /* istanbul ignore next */
    cov_6gr377gb5().s[167]++;
    return statusCounts;
  }
  /**
   * Get cached data if not expired
   */
  getCachedData(key) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[33]++;
    const cached =
    /* istanbul ignore next */
    (cov_6gr377gb5().s[168]++, this.cache.get(key));
    /* istanbul ignore next */
    cov_6gr377gb5().s[169]++;
    if (
    /* istanbul ignore next */
    (cov_6gr377gb5().b[57][0]++, cached) &&
    /* istanbul ignore next */
    (cov_6gr377gb5().b[57][1]++, cached.expires > Date.now())) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[56][0]++;
      cov_6gr377gb5().s[170]++;
      return cached.data;
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[56][1]++;
    }
    cov_6gr377gb5().s[171]++;
    return null;
  }
  /**
   * Set cached data with expiration
   */
  setCachedData(key, data) {
    /* istanbul ignore next */
    cov_6gr377gb5().f[34]++;
    cov_6gr377gb5().s[172]++;
    if (this.config.cacheDuration > 0) {
      /* istanbul ignore next */
      cov_6gr377gb5().b[58][0]++;
      cov_6gr377gb5().s[173]++;
      this.cache.set(key, {
        data,
        expires: Date.now() + this.config.cacheDuration
      });
    } else
    /* istanbul ignore next */
    {
      cov_6gr377gb5().b[58][1]++;
    }
  }
  /**
   * Clear resource cache
   */
  clearCache() {
    /* istanbul ignore next */
    cov_6gr377gb5().f[35]++;
    cov_6gr377gb5().s[174]++;
    this.cache.clear();
  }
  /**
   * Get cache statistics
   */
  getCacheStats() {
    /* istanbul ignore next */
    cov_6gr377gb5().f[36]++;
    cov_6gr377gb5().s[175]++;
    return {
      size: this.cache.size,
      keys: Array.from(this.cache.keys())
    };
  }
}
/**
 * Create execution resource manager
 */
export function createExecutionResources(config) {
  /* istanbul ignore next */
  cov_6gr377gb5().f[37]++;
  cov_6gr377gb5().s[176]++;
  return new ExecutionResourceManager(config);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,