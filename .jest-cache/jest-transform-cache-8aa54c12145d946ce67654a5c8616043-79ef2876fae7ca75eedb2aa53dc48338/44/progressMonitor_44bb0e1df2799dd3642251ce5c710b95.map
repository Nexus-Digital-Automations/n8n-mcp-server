{"version":3,"names":["cov_1ys2a7b2gb","actualCoverage","EventEmitter","z","WorkflowProgressSchema","s","object","executionId","string","workflowId","workflowName","optional","overallProgress","number","min","max","currentPhase","enum","nodeProgress","array","nodeId","nodeName","status","progress","startTime","endTime","executionTime","error","estimatedEndTime","actualEndTime","estimatedDuration","actualDuration","performance","averageNodeTime","slowestNode","fastestNode","bottlenecks","PerformanceMetricsSchema","metrics","totalExecutionTime","nodeExecutionTimes","record","memoryUsage","cpuUsage","networkRequests","errorCount","retryCount","benchmarks","averageExecutionTime","percentile95","percentile99","comparedToAverage","ProgressMonitor","eventStreamingManager","config","activeProgressTracking","Map","historicalExecutions","performanceData","workflowBenchmarks","progressUpdateTimer","constructor","f","setupEventListeners","startProgressUpdates","getExecutionProgress","b","get","getAllActiveProgress","Array","from","values","getHistoricalExecutions","limit","filtered","filter","exec","slice","getPerformanceMetrics","getWorkflowBenchmarks","getPredictedCompletionTime","enablePredictiveAnalytics","benchmark","elapsedTime","Date","now","getTime","completionRatio","estimatedTotalTime","on","data","handleExecutionStarted","execution","handleExecutionCompleted","handleNodeExecutionStarted","nodeUpdate","handleNodeExecutionCompleted","progressUpdate","handleProgressUpdate","set","emit","timestamp","toISOString","enablePerformanceTracking","calculatePerformanceMetrics","benchmarkingEnabled","updateWorkflowBenchmarks","checkForAlerts","push","delete","length","historicalDataLimit","find","np","updateOverallProgress","updatePerformanceData","predictedTime","totalProgress","reduce","sum","node","Math","round","completedNodes","totalNodes","executionTimes","undefined","map","time","nodeWithTimes","slowest","current","fastest","avgTime","forEach","executionCount","lastUpdated","sortedTimes","sort","a","p95Index","floor","p99Index","alerts","slowThreshold","alertThresholds","slowExecutionMultiplier","type","message","severity","averageDuration","failedNodes","failureRate","highFailureRate","alert","setInterval","activeExecutions","progressUpdateInterval","stop","clearInterval","createProgressMonitor","options","maxExecutionTime","DEFAULT_PROGRESS_CONFIG"],"sources":["/Users/jeremyparker/Desktop/Claude Coding Projects/n8n-mcp-server/src/transport/progressMonitor.ts"],"sourcesContent":["/**\n * Progress Monitor for n8n Fork Workflow Executions\n *\n * Provides detailed progress tracking, performance monitoring, and real-time\n * status updates for workflow executions with predictive analytics.\n */\n\nimport { EventEmitter } from 'events';\nimport { EventStreamingManager, WorkflowExecutionStatus, NodeExecutionUpdate, ProgressUpdate } from './eventStreamingManager.js';\nimport { z } from 'zod';\n\n// Progress monitoring schemas\nexport const WorkflowProgressSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  workflowName: z.string().optional(),\n  overallProgress: z.number().min(0).max(100),\n  currentPhase: z.enum(['initializing', 'executing', 'completing', 'completed', 'failed']),\n  nodeProgress: z.array(z.object({\n    nodeId: z.string(),\n    nodeName: z.string(),\n    status: z.enum(['pending', 'running', 'completed', 'failed', 'skipped']),\n    progress: z.number().min(0).max(100),\n    startTime: z.string().optional(),\n    endTime: z.string().optional(),\n    executionTime: z.number().optional(),\n    error: z.string().optional(),\n  })),\n  startTime: z.string(),\n  estimatedEndTime: z.string().optional(),\n  actualEndTime: z.string().optional(),\n  estimatedDuration: z.number().optional(),\n  actualDuration: z.number().optional(),\n  performance: z.object({\n    averageNodeTime: z.number(),\n    slowestNode: z.string().optional(),\n    fastestNode: z.string().optional(),\n    bottlenecks: z.array(z.string()),\n  }),\n});\n\nexport const PerformanceMetricsSchema = z.object({\n  executionId: z.string(),\n  workflowId: z.string(),\n  metrics: z.object({\n    totalExecutionTime: z.number(),\n    nodeExecutionTimes: z.record(z.number()),\n    memoryUsage: z.number().optional(),\n    cpuUsage: z.number().optional(),\n    networkRequests: z.number().optional(),\n    errorCount: z.number(),\n    retryCount: z.number(),\n  }),\n  benchmarks: z.object({\n    averageExecutionTime: z.number(),\n    percentile95: z.number(),\n    percentile99: z.number(),\n    comparedToAverage: z.number(),\n  }),\n});\n\nexport type WorkflowProgress = z.infer<typeof WorkflowProgressSchema>;\nexport type PerformanceMetrics = z.infer<typeof PerformanceMetricsSchema>;\n\nexport interface ProgressMonitorConfig {\n  enablePredictiveAnalytics: boolean;\n  enablePerformanceTracking: boolean;\n  historicalDataLimit: number;\n  progressUpdateInterval: number;\n  benchmarkingEnabled: boolean;\n  alertThresholds: {\n    slowExecutionMultiplier: number;\n    highFailureRate: number;\n    maxExecutionTime: number;\n  };\n}\n\nexport interface ExecutionAlert {\n  type: 'slow_execution' | 'high_failure_rate' | 'node_timeout' | 'resource_limit';\n  executionId: string;\n  workflowId: string;\n  message: string;\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  timestamp: string;\n  data: any;\n}\n\n/**\n * Progress Monitor\n *\n * Monitors workflow execution progress with predictive analytics,\n * performance tracking, and intelligent alerting.\n */\nexport class ProgressMonitor extends EventEmitter {\n  private eventStreamingManager: EventStreamingManager;\n  private config: ProgressMonitorConfig;\n  private activeProgressTracking: Map<string, WorkflowProgress> = new Map();\n  private historicalExecutions: WorkflowProgress[] = [];\n  private performanceData: Map<string, PerformanceMetrics> = new Map();\n  private workflowBenchmarks: Map<string, any> = new Map();\n  private progressUpdateTimer: NodeJS.Timeout | null = null;\n\n  constructor(eventStreamingManager: EventStreamingManager, config: ProgressMonitorConfig) {\n    super();\n    this.eventStreamingManager = eventStreamingManager;\n    this.config = config;\n    this.setupEventListeners();\n    this.startProgressUpdates();\n  }\n\n  /**\n   * Get current progress for an execution\n   */\n  public getExecutionProgress(executionId: string): WorkflowProgress | null {\n    return this.activeProgressTracking.get(executionId) || null;\n  }\n\n  /**\n   * Get all active execution progress\n   */\n  public getAllActiveProgress(): WorkflowProgress[] {\n    return Array.from(this.activeProgressTracking.values());\n  }\n\n  /**\n   * Get historical execution data\n   */\n  public getHistoricalExecutions(workflowId?: string, limit?: number): WorkflowProgress[] {\n    let filtered = this.historicalExecutions;\n    \n    if (workflowId) {\n      filtered = filtered.filter(exec => exec.workflowId === workflowId);\n    }\n    \n    if (limit) {\n      filtered = filtered.slice(-limit);\n    }\n    \n    return filtered;\n  }\n\n  /**\n   * Get performance metrics for an execution\n   */\n  public getPerformanceMetrics(executionId: string): PerformanceMetrics | null {\n    return this.performanceData.get(executionId) || null;\n  }\n\n  /**\n   * Get workflow benchmarks\n   */\n  public getWorkflowBenchmarks(workflowId: string): any {\n    return this.workflowBenchmarks.get(workflowId) || null;\n  }\n\n  /**\n   * Get predicted completion time\n   */\n  public getPredictedCompletionTime(executionId: string): Date | null {\n    const progress = this.activeProgressTracking.get(executionId);\n    if (!progress || !this.config.enablePredictiveAnalytics) {\n      return null;\n    }\n\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n    if (!benchmark) {\n      return null;\n    }\n\n    const elapsedTime = Date.now() - new Date(progress.startTime).getTime();\n    const completionRatio = progress.overallProgress / 100;\n    \n    if (completionRatio > 0) {\n      const estimatedTotalTime = elapsedTime / completionRatio;\n      const estimatedEndTime = new Date(new Date(progress.startTime).getTime() + estimatedTotalTime);\n      return estimatedEndTime;\n    }\n\n    return null;\n  }\n\n  /**\n   * Setup event listeners for streaming manager\n   */\n  private setupEventListeners(): void {\n    this.eventStreamingManager.on('executionStarted', (data) => {\n      this.handleExecutionStarted(data.execution);\n    });\n\n    this.eventStreamingManager.on('executionCompleted', (data) => {\n      this.handleExecutionCompleted(data.execution);\n    });\n\n    this.eventStreamingManager.on('nodeExecutionStarted', (data) => {\n      this.handleNodeExecutionStarted(data.nodeUpdate, data.execution);\n    });\n\n    this.eventStreamingManager.on('nodeExecutionCompleted', (data) => {\n      this.handleNodeExecutionCompleted(data.nodeUpdate, data.execution);\n    });\n\n    this.eventStreamingManager.on('progressUpdate', (progressUpdate: ProgressUpdate) => {\n      this.handleProgressUpdate(progressUpdate);\n    });\n  }\n\n  /**\n   * Handle execution started\n   */\n  private handleExecutionStarted(execution: WorkflowExecutionStatus): void {\n    const progress: WorkflowProgress = {\n      executionId: execution.executionId,\n      workflowId: execution.workflowId,\n      overallProgress: 0,\n      currentPhase: 'initializing',\n      nodeProgress: [],\n      startTime: execution.startTime,\n      performance: {\n        averageNodeTime: 0,\n        bottlenecks: [],\n      },\n    };\n\n    this.activeProgressTracking.set(execution.executionId, progress);\n    this.emit('progressStarted', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Handle execution completed\n   */\n  private handleExecutionCompleted(execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    // Update progress with completion data\n    progress.overallProgress = 100;\n    progress.currentPhase = execution.status === 'success' ? 'completed' : 'failed';\n    progress.actualEndTime = execution.endTime;\n    \n    if (execution.endTime) {\n      progress.actualDuration = new Date(execution.endTime).getTime() - new Date(progress.startTime).getTime();\n    }\n\n    // Calculate performance metrics\n    if (this.config.enablePerformanceTracking) {\n      this.calculatePerformanceMetrics(progress);\n    }\n\n    // Update benchmarks\n    if (this.config.benchmarkingEnabled) {\n      this.updateWorkflowBenchmarks(progress);\n    }\n\n    // Check for alerts\n    this.checkForAlerts(progress);\n\n    // Move to historical data\n    this.historicalExecutions.push({ ...progress });\n    this.activeProgressTracking.delete(execution.executionId);\n\n    // Trim historical data if needed\n    if (this.historicalExecutions.length > this.config.historicalDataLimit) {\n      this.historicalExecutions = this.historicalExecutions.slice(-this.config.historicalDataLimit);\n    }\n\n    this.emit('progressCompleted', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Handle node execution started\n   */\n  private handleNodeExecutionStarted(nodeUpdate: NodeExecutionUpdate, execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    progress.currentPhase = 'executing';\n\n    // Find or create node progress entry\n    let nodeProgress = progress.nodeProgress.find(np => np.nodeId === nodeUpdate.nodeId);\n    if (!nodeProgress) {\n      nodeProgress = {\n        nodeId: nodeUpdate.nodeId,\n        nodeName: nodeUpdate.nodeName,\n        status: 'running',\n        progress: 0,\n        startTime: nodeUpdate.startTime,\n      };\n      progress.nodeProgress.push(nodeProgress);\n    } else {\n      nodeProgress.status = 'running';\n      nodeProgress.startTime = nodeUpdate.startTime;\n      nodeProgress.progress = 0;\n    }\n\n    this.updateOverallProgress(progress);\n    this.emit('nodeProgressStarted', { \n      progress, \n      nodeProgress, \n      timestamp: new Date().toISOString() \n    });\n  }\n\n  /**\n   * Handle node execution completed\n   */\n  private handleNodeExecutionCompleted(nodeUpdate: NodeExecutionUpdate, execution: WorkflowExecutionStatus): void {\n    const progress = this.activeProgressTracking.get(execution.executionId);\n    if (!progress) return;\n\n    // Update node progress\n    const nodeProgress = progress.nodeProgress.find(np => np.nodeId === nodeUpdate.nodeId);\n    if (nodeProgress) {\n      nodeProgress.status = nodeUpdate.status === 'success' ? 'completed' : 'failed';\n      nodeProgress.progress = 100;\n      nodeProgress.endTime = nodeUpdate.endTime;\n      nodeProgress.error = nodeUpdate.error;\n\n      if (nodeUpdate.startTime && nodeUpdate.endTime) {\n        nodeProgress.executionTime = new Date(nodeUpdate.endTime).getTime() - \n                                   new Date(nodeUpdate.startTime).getTime();\n      }\n    }\n\n    this.updateOverallProgress(progress);\n    this.updatePerformanceData(progress);\n\n    this.emit('nodeProgressCompleted', { \n      progress, \n      nodeProgress, \n      timestamp: new Date().toISOString() \n    });\n  }\n\n  /**\n   * Handle progress update\n   */\n  private handleProgressUpdate(progressUpdate: ProgressUpdate): void {\n    const progress = this.activeProgressTracking.get(progressUpdate.executionId);\n    if (!progress) return;\n\n    // Update with new progress information\n    progress.overallProgress = progressUpdate.progress;\n    \n    // Update estimated completion time if predictive analytics enabled\n    if (this.config.enablePredictiveAnalytics) {\n      const predictedTime = this.getPredictedCompletionTime(progressUpdate.executionId);\n      if (predictedTime) {\n        progress.estimatedEndTime = predictedTime.toISOString();\n        progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();\n      }\n    }\n\n    this.emit('progressUpdated', { progress, timestamp: new Date().toISOString() });\n  }\n\n  /**\n   * Update overall progress based on node completion\n   */\n  private updateOverallProgress(progress: WorkflowProgress): void {\n    if (progress.nodeProgress.length === 0) {\n      progress.overallProgress = 0;\n      return;\n    }\n\n    const totalProgress = progress.nodeProgress.reduce((sum, node) => sum + node.progress, 0);\n    progress.overallProgress = Math.round(totalProgress / progress.nodeProgress.length);\n\n    // Update current phase\n    const completedNodes = progress.nodeProgress.filter(np => np.status === 'completed' || np.status === 'failed').length;\n    const totalNodes = progress.nodeProgress.length;\n\n    if (completedNodes === 0) {\n      progress.currentPhase = 'initializing';\n    } else if (completedNodes === totalNodes) {\n      progress.currentPhase = 'completing';\n    } else {\n      progress.currentPhase = 'executing';\n    }\n  }\n\n  /**\n   * Update performance data\n   */\n  private updatePerformanceData(progress: WorkflowProgress): void {\n    const executionTimes = progress.nodeProgress\n      .filter(np => np.executionTime !== undefined)\n      .map(np => np.executionTime!);\n\n    if (executionTimes.length > 0) {\n      progress.performance.averageNodeTime = executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length;\n\n      // Find slowest and fastest nodes\n      const nodeWithTimes = progress.nodeProgress.filter(np => np.executionTime !== undefined);\n      if (nodeWithTimes.length > 0) {\n        const slowestNode = nodeWithTimes.reduce((slowest, current) => \n          current.executionTime! > slowest.executionTime! ? current : slowest\n        );\n        const fastestNode = nodeWithTimes.reduce((fastest, current) => \n          current.executionTime! < fastest.executionTime! ? current : fastest\n        );\n\n        progress.performance.slowestNode = slowestNode.nodeName;\n        progress.performance.fastestNode = fastestNode.nodeName;\n\n        // Identify bottlenecks (nodes taking >2x average time)\n        const avgTime = progress.performance.averageNodeTime;\n        progress.performance.bottlenecks = nodeWithTimes\n          .filter(np => np.executionTime! > avgTime * 2)\n          .map(np => np.nodeName);\n      }\n    }\n  }\n\n  /**\n   * Calculate performance metrics\n   */\n  private calculatePerformanceMetrics(progress: WorkflowProgress): void {\n    const nodeExecutionTimes: Record<string, number> = {};\n    let totalExecutionTime = 0;\n    let errorCount = 0;\n\n    progress.nodeProgress.forEach(np => {\n      if (np.executionTime) {\n        nodeExecutionTimes[np.nodeName] = np.executionTime;\n        totalExecutionTime += np.executionTime;\n      }\n      if (np.status === 'failed') {\n        errorCount++;\n      }\n    });\n\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n    const metrics: PerformanceMetrics = {\n      executionId: progress.executionId,\n      workflowId: progress.workflowId,\n      metrics: {\n        totalExecutionTime: progress.actualDuration || totalExecutionTime,\n        nodeExecutionTimes,\n        errorCount,\n        retryCount: 0, // TODO: Track retries\n      },\n      benchmarks: {\n        averageExecutionTime: benchmark?.averageExecutionTime || totalExecutionTime,\n        percentile95: benchmark?.percentile95 || totalExecutionTime,\n        percentile99: benchmark?.percentile99 || totalExecutionTime,\n        comparedToAverage: benchmark ? \n          (totalExecutionTime / benchmark.averageExecutionTime) : 1,\n      },\n    };\n\n    this.performanceData.set(progress.executionId, metrics);\n  }\n\n  /**\n   * Update workflow benchmarks\n   */\n  private updateWorkflowBenchmarks(progress: WorkflowProgress): void {\n    const workflowId = progress.workflowId;\n    let benchmark = this.workflowBenchmarks.get(workflowId);\n\n    if (!benchmark) {\n      benchmark = {\n        workflowId,\n        executionCount: 0,\n        totalExecutionTime: 0,\n        executionTimes: [],\n        averageExecutionTime: 0,\n        percentile95: 0,\n        percentile99: 0,\n        lastUpdated: new Date().toISOString(),\n      };\n    }\n\n    if (progress.actualDuration) {\n      benchmark.executionCount++;\n      benchmark.totalExecutionTime += progress.actualDuration;\n      benchmark.executionTimes.push(progress.actualDuration);\n      benchmark.averageExecutionTime = benchmark.totalExecutionTime / benchmark.executionCount;\n\n      // Calculate percentiles\n      const sortedTimes = [...benchmark.executionTimes].sort((a, b) => a - b);\n      const p95Index = Math.floor(sortedTimes.length * 0.95);\n      const p99Index = Math.floor(sortedTimes.length * 0.99);\n      \n      benchmark.percentile95 = sortedTimes[p95Index] || benchmark.averageExecutionTime;\n      benchmark.percentile99 = sortedTimes[p99Index] || benchmark.averageExecutionTime;\n      benchmark.lastUpdated = new Date().toISOString();\n\n      // Keep only recent execution times (last 100)\n      if (benchmark.executionTimes.length > 100) {\n        benchmark.executionTimes = benchmark.executionTimes.slice(-100);\n      }\n\n      this.workflowBenchmarks.set(workflowId, benchmark);\n    }\n  }\n\n  /**\n   * Check for alerts\n   */\n  private checkForAlerts(progress: WorkflowProgress): void {\n    const alerts: ExecutionAlert[] = [];\n    const benchmark = this.workflowBenchmarks.get(progress.workflowId);\n\n    // Check for slow execution\n    if (benchmark && progress.actualDuration) {\n      const slowThreshold = benchmark.averageExecutionTime * this.config.alertThresholds.slowExecutionMultiplier;\n      if (progress.actualDuration > slowThreshold) {\n        alerts.push({\n          type: 'slow_execution',\n          executionId: progress.executionId,\n          workflowId: progress.workflowId,\n          message: `Execution took ${Math.round(progress.actualDuration / 1000)}s, ${Math.round(progress.actualDuration / benchmark.averageExecutionTime * 100)}% of average`,\n          severity: progress.actualDuration > slowThreshold * 2 ? 'high' : 'medium',\n          timestamp: new Date().toISOString(),\n          data: { \n            actualDuration: progress.actualDuration, \n            averageDuration: benchmark.averageExecutionTime \n          },\n        });\n      }\n    }\n\n    // Check for high failure rate\n    const failedNodes = progress.nodeProgress.filter(np => np.status === 'failed').length;\n    const failureRate = failedNodes / Math.max(progress.nodeProgress.length, 1);\n    if (failureRate > this.config.alertThresholds.highFailureRate) {\n      alerts.push({\n        type: 'high_failure_rate',\n        executionId: progress.executionId,\n        workflowId: progress.workflowId,\n        message: `High failure rate: ${Math.round(failureRate * 100)}% of nodes failed`,\n        severity: failureRate > 0.5 ? 'critical' : 'high',\n        timestamp: new Date().toISOString(),\n        data: { failureRate, failedNodes, totalNodes: progress.nodeProgress.length },\n      });\n    }\n\n    // Emit alerts\n    alerts.forEach(alert => {\n      this.emit('alert', alert);\n    });\n  }\n\n  /**\n   * Start periodic progress updates\n   */\n  private startProgressUpdates(): void {\n    this.progressUpdateTimer = setInterval(() => {\n      const activeExecutions = Array.from(this.activeProgressTracking.values());\n      \n      activeExecutions.forEach(progress => {\n        // Update estimated times for predictive analytics\n        if (this.config.enablePredictiveAnalytics && progress.currentPhase === 'executing') {\n          const predictedTime = this.getPredictedCompletionTime(progress.executionId);\n          if (predictedTime) {\n            progress.estimatedEndTime = predictedTime.toISOString();\n            progress.estimatedDuration = predictedTime.getTime() - new Date(progress.startTime).getTime();\n          }\n        }\n\n        this.emit('progressTick', { progress, timestamp: new Date().toISOString() });\n      });\n    }, this.config.progressUpdateInterval);\n  }\n\n  /**\n   * Stop progress monitor\n   */\n  public stop(): void {\n    if (this.progressUpdateTimer) {\n      clearInterval(this.progressUpdateTimer);\n      this.progressUpdateTimer = null;\n    }\n  }\n}\n\n/**\n * Create progress monitor with default configuration\n */\nexport function createProgressMonitor(\n  eventStreamingManager: EventStreamingManager,\n  options: Partial<ProgressMonitorConfig> = {}\n): ProgressMonitor {\n  const config: ProgressMonitorConfig = {\n    enablePredictiveAnalytics: true,\n    enablePerformanceTracking: true,\n    historicalDataLimit: 1000,\n    progressUpdateInterval: 1000,\n    benchmarkingEnabled: true,\n    alertThresholds: {\n      slowExecutionMultiplier: 2.0,\n      highFailureRate: 0.3,\n      maxExecutionTime: 300000, // 5 minutes\n    },\n    ...options,\n  };\n\n  return new ProgressMonitor(eventStreamingManager, config);\n}\n\n/**\n * Default progress monitor configuration\n */\nexport const DEFAULT_PROGRESS_CONFIG: ProgressMonitorConfig = {\n  enablePredictiveAnalytics: true,\n  enablePerformanceTracking: true,\n  historicalDataLimit: 1000,\n  progressUpdateInterval: 1000,\n  benchmarkingEnabled: true,\n  alertThresholds: {\n    slowExecutionMultiplier: 2.0,\n    highFailureRate: 0.3,\n    maxExecutionTime: 300000,\n  },\n};"],"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","ignoreList":[]}